
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073ac  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08007584  08007584  00017584  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007868  08007868  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08007868  08007868  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007868  08007868  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007868  08007868  00017868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800786c  0800786c  0001786c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007870  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000078  080078e8  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  080078e8  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f4ac  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003f13  00000000  00000000  0003f554  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001978  00000000  00000000  00043468  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001760  00000000  00000000  00044de0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002bfb4  00000000  00000000  00046540  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018059  00000000  00000000  000724f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00117a2c  00000000  00000000  0008a54d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001a1f79  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006fa0  00000000  00000000  001a1ff4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000078 	.word	0x20000078
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800756c 	.word	0x0800756c

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	2000007c 	.word	0x2000007c
 8000214:	0800756c 	.word	0x0800756c

08000218 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000218:	b580      	push	{r7, lr}
 800021a:	b08c      	sub	sp, #48	; 0x30
 800021c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800021e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000222:	2200      	movs	r2, #0
 8000224:	601a      	str	r2, [r3, #0]
 8000226:	605a      	str	r2, [r3, #4]
 8000228:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	2220      	movs	r2, #32
 800022e:	2100      	movs	r1, #0
 8000230:	4618      	mov	r0, r3
 8000232:	f006 fd2b 	bl	8006c8c <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000236:	4b32      	ldr	r3, [pc, #200]	; (8000300 <MX_ADC1_Init+0xe8>)
 8000238:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800023c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800023e:	4b30      	ldr	r3, [pc, #192]	; (8000300 <MX_ADC1_Init+0xe8>)
 8000240:	2200      	movs	r2, #0
 8000242:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000244:	4b2e      	ldr	r3, [pc, #184]	; (8000300 <MX_ADC1_Init+0xe8>)
 8000246:	2200      	movs	r2, #0
 8000248:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800024a:	4b2d      	ldr	r3, [pc, #180]	; (8000300 <MX_ADC1_Init+0xe8>)
 800024c:	2200      	movs	r2, #0
 800024e:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000250:	4b2b      	ldr	r3, [pc, #172]	; (8000300 <MX_ADC1_Init+0xe8>)
 8000252:	2200      	movs	r2, #0
 8000254:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000256:	4b2a      	ldr	r3, [pc, #168]	; (8000300 <MX_ADC1_Init+0xe8>)
 8000258:	2200      	movs	r2, #0
 800025a:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800025c:	4b28      	ldr	r3, [pc, #160]	; (8000300 <MX_ADC1_Init+0xe8>)
 800025e:	2204      	movs	r2, #4
 8000260:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000262:	4b27      	ldr	r3, [pc, #156]	; (8000300 <MX_ADC1_Init+0xe8>)
 8000264:	2200      	movs	r2, #0
 8000266:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000268:	4b25      	ldr	r3, [pc, #148]	; (8000300 <MX_ADC1_Init+0xe8>)
 800026a:	2201      	movs	r2, #1
 800026c:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800026e:	4b24      	ldr	r3, [pc, #144]	; (8000300 <MX_ADC1_Init+0xe8>)
 8000270:	2201      	movs	r2, #1
 8000272:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000274:	4b22      	ldr	r3, [pc, #136]	; (8000300 <MX_ADC1_Init+0xe8>)
 8000276:	2200      	movs	r2, #0
 8000278:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800027c:	4b20      	ldr	r3, [pc, #128]	; (8000300 <MX_ADC1_Init+0xe8>)
 800027e:	2200      	movs	r2, #0
 8000280:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000282:	4b1f      	ldr	r3, [pc, #124]	; (8000300 <MX_ADC1_Init+0xe8>)
 8000284:	2200      	movs	r2, #0
 8000286:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000288:	4b1d      	ldr	r3, [pc, #116]	; (8000300 <MX_ADC1_Init+0xe8>)
 800028a:	2201      	movs	r2, #1
 800028c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000290:	4b1b      	ldr	r3, [pc, #108]	; (8000300 <MX_ADC1_Init+0xe8>)
 8000292:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000296:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000298:	4b19      	ldr	r3, [pc, #100]	; (8000300 <MX_ADC1_Init+0xe8>)
 800029a:	2200      	movs	r2, #0
 800029c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80002a0:	4817      	ldr	r0, [pc, #92]	; (8000300 <MX_ADC1_Init+0xe8>)
 80002a2:	f001 fb67 	bl	8001974 <HAL_ADC_Init>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80002ac:	f000 fcbb 	bl	8000c26 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80002b0:	2300      	movs	r3, #0
 80002b2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80002b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002b8:	4619      	mov	r1, r3
 80002ba:	4811      	ldr	r0, [pc, #68]	; (8000300 <MX_ADC1_Init+0xe8>)
 80002bc:	f002 f8f0 	bl	80024a0 <HAL_ADCEx_MultiModeConfigChannel>
 80002c0:	4603      	mov	r3, r0
 80002c2:	2b00      	cmp	r3, #0
 80002c4:	d001      	beq.n	80002ca <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80002c6:	f000 fcae 	bl	8000c26 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80002ca:	4b0e      	ldr	r3, [pc, #56]	; (8000304 <MX_ADC1_Init+0xec>)
 80002cc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80002ce:	2306      	movs	r3, #6
 80002d0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80002d2:	2300      	movs	r3, #0
 80002d4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80002d6:	237f      	movs	r3, #127	; 0x7f
 80002d8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80002da:	2304      	movs	r3, #4
 80002dc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80002de:	2300      	movs	r3, #0
 80002e0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80002e2:	1d3b      	adds	r3, r7, #4
 80002e4:	4619      	mov	r1, r3
 80002e6:	4806      	ldr	r0, [pc, #24]	; (8000300 <MX_ADC1_Init+0xe8>)
 80002e8:	f001 fd04 	bl	8001cf4 <HAL_ADC_ConfigChannel>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80002f2:	f000 fc98 	bl	8000c26 <Error_Handler>
  }

}
 80002f6:	bf00      	nop
 80002f8:	3730      	adds	r7, #48	; 0x30
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bd80      	pop	{r7, pc}
 80002fe:	bf00      	nop
 8000300:	200000a8 	.word	0x200000a8
 8000304:	0c900008 	.word	0x0c900008

08000308 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b08a      	sub	sp, #40	; 0x28
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000310:	f107 0314 	add.w	r3, r7, #20
 8000314:	2200      	movs	r2, #0
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	605a      	str	r2, [r3, #4]
 800031a:	609a      	str	r2, [r3, #8]
 800031c:	60da      	str	r2, [r3, #12]
 800031e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000328:	d14f      	bne.n	80003ca <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800032a:	4b2a      	ldr	r3, [pc, #168]	; (80003d4 <HAL_ADC_MspInit+0xcc>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032e:	4a29      	ldr	r2, [pc, #164]	; (80003d4 <HAL_ADC_MspInit+0xcc>)
 8000330:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000334:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000336:	4b27      	ldr	r3, [pc, #156]	; (80003d4 <HAL_ADC_MspInit+0xcc>)
 8000338:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800033a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800033e:	613b      	str	r3, [r7, #16]
 8000340:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000342:	4b24      	ldr	r3, [pc, #144]	; (80003d4 <HAL_ADC_MspInit+0xcc>)
 8000344:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000346:	4a23      	ldr	r2, [pc, #140]	; (80003d4 <HAL_ADC_MspInit+0xcc>)
 8000348:	f043 0301 	orr.w	r3, r3, #1
 800034c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800034e:	4b21      	ldr	r3, [pc, #132]	; (80003d4 <HAL_ADC_MspInit+0xcc>)
 8000350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000352:	f003 0301 	and.w	r3, r3, #1
 8000356:	60fb      	str	r3, [r7, #12]
 8000358:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800035a:	2304      	movs	r3, #4
 800035c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800035e:	2303      	movs	r3, #3
 8000360:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000362:	2300      	movs	r3, #0
 8000364:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000366:	f107 0314 	add.w	r3, r7, #20
 800036a:	4619      	mov	r1, r3
 800036c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000370:	f003 f9c8 	bl	8003704 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000374:	4b18      	ldr	r3, [pc, #96]	; (80003d8 <HAL_ADC_MspInit+0xd0>)
 8000376:	4a19      	ldr	r2, [pc, #100]	; (80003dc <HAL_ADC_MspInit+0xd4>)
 8000378:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800037a:	4b17      	ldr	r3, [pc, #92]	; (80003d8 <HAL_ADC_MspInit+0xd0>)
 800037c:	2205      	movs	r2, #5
 800037e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000380:	4b15      	ldr	r3, [pc, #84]	; (80003d8 <HAL_ADC_MspInit+0xd0>)
 8000382:	2200      	movs	r2, #0
 8000384:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000386:	4b14      	ldr	r3, [pc, #80]	; (80003d8 <HAL_ADC_MspInit+0xd0>)
 8000388:	2200      	movs	r2, #0
 800038a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800038c:	4b12      	ldr	r3, [pc, #72]	; (80003d8 <HAL_ADC_MspInit+0xd0>)
 800038e:	2280      	movs	r2, #128	; 0x80
 8000390:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000392:	4b11      	ldr	r3, [pc, #68]	; (80003d8 <HAL_ADC_MspInit+0xd0>)
 8000394:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000398:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800039a:	4b0f      	ldr	r3, [pc, #60]	; (80003d8 <HAL_ADC_MspInit+0xd0>)
 800039c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80003a0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80003a2:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <HAL_ADC_MspInit+0xd0>)
 80003a4:	2220      	movs	r2, #32
 80003a6:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80003a8:	4b0b      	ldr	r3, [pc, #44]	; (80003d8 <HAL_ADC_MspInit+0xd0>)
 80003aa:	2200      	movs	r2, #0
 80003ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80003ae:	480a      	ldr	r0, [pc, #40]	; (80003d8 <HAL_ADC_MspInit+0xd0>)
 80003b0:	f002 ffee 	bl	8003390 <HAL_DMA_Init>
 80003b4:	4603      	mov	r3, r0
 80003b6:	2b00      	cmp	r3, #0
 80003b8:	d001      	beq.n	80003be <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80003ba:	f000 fc34 	bl	8000c26 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4a05      	ldr	r2, [pc, #20]	; (80003d8 <HAL_ADC_MspInit+0xd0>)
 80003c2:	655a      	str	r2, [r3, #84]	; 0x54
 80003c4:	4a04      	ldr	r2, [pc, #16]	; (80003d8 <HAL_ADC_MspInit+0xd0>)
 80003c6:	687b      	ldr	r3, [r7, #4]
 80003c8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80003ca:	bf00      	nop
 80003cc:	3728      	adds	r7, #40	; 0x28
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000
 80003d8:	20000114 	.word	0x20000114
 80003dc:	40020008 	.word	0x40020008

080003e0 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80003e0:	b580      	push	{r7, lr}
 80003e2:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 80003e4:	4b0f      	ldr	r3, [pc, #60]	; (8000424 <MX_COMP1_Init+0x44>)
 80003e6:	4a10      	ldr	r2, [pc, #64]	; (8000428 <MX_COMP1_Init+0x48>)
 80003e8:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80003ea:	4b0e      	ldr	r3, [pc, #56]	; (8000424 <MX_COMP1_Init+0x44>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 80003f0:	4b0c      	ldr	r3, [pc, #48]	; (8000424 <MX_COMP1_Init+0x44>)
 80003f2:	4a0e      	ldr	r2, [pc, #56]	; (800042c <MX_COMP1_Init+0x4c>)
 80003f4:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80003f6:	4b0b      	ldr	r3, [pc, #44]	; (8000424 <MX_COMP1_Init+0x44>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80003fc:	4b09      	ldr	r3, [pc, #36]	; (8000424 <MX_COMP1_Init+0x44>)
 80003fe:	2200      	movs	r2, #0
 8000400:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8000402:	4b08      	ldr	r3, [pc, #32]	; (8000424 <MX_COMP1_Init+0x44>)
 8000404:	2200      	movs	r2, #0
 8000406:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000408:	4b06      	ldr	r3, [pc, #24]	; (8000424 <MX_COMP1_Init+0x44>)
 800040a:	2200      	movs	r2, #0
 800040c:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800040e:	4805      	ldr	r0, [pc, #20]	; (8000424 <MX_COMP1_Init+0x44>)
 8000410:	f002 fa9a 	bl	8002948 <HAL_COMP_Init>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 800041a:	f000 fc04 	bl	8000c26 <Error_Handler>
  }

}
 800041e:	bf00      	nop
 8000420:	bd80      	pop	{r7, pc}
 8000422:	bf00      	nop
 8000424:	20000174 	.word	0x20000174
 8000428:	40010200 	.word	0x40010200
 800042c:	00800030 	.word	0x00800030

08000430 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8000430:	b580      	push	{r7, lr}
 8000432:	b088      	sub	sp, #32
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000438:	f107 030c 	add.w	r3, r7, #12
 800043c:	2200      	movs	r2, #0
 800043e:	601a      	str	r2, [r3, #0]
 8000440:	605a      	str	r2, [r3, #4]
 8000442:	609a      	str	r2, [r3, #8]
 8000444:	60da      	str	r2, [r3, #12]
 8000446:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	4a0f      	ldr	r2, [pc, #60]	; (800048c <HAL_COMP_MspInit+0x5c>)
 800044e:	4293      	cmp	r3, r2
 8000450:	d118      	bne.n	8000484 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000452:	4b0f      	ldr	r3, [pc, #60]	; (8000490 <HAL_COMP_MspInit+0x60>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	4a0e      	ldr	r2, [pc, #56]	; (8000490 <HAL_COMP_MspInit+0x60>)
 8000458:	f043 0301 	orr.w	r3, r3, #1
 800045c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <HAL_COMP_MspInit+0x60>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	f003 0301 	and.w	r3, r3, #1
 8000466:	60bb      	str	r3, [r7, #8]
 8000468:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800046a:	2302      	movs	r3, #2
 800046c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800046e:	2303      	movs	r3, #3
 8000470:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000472:	2300      	movs	r3, #0
 8000474:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000476:	f107 030c 	add.w	r3, r7, #12
 800047a:	4619      	mov	r1, r3
 800047c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000480:	f003 f940 	bl	8003704 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8000484:	bf00      	nop
 8000486:	3720      	adds	r7, #32
 8000488:	46bd      	mov	sp, r7
 800048a:	bd80      	pop	{r7, pc}
 800048c:	40010200 	.word	0x40010200
 8000490:	40021000 	.word	0x40021000

08000494 <MX_DAC1_Init>:
DAC_HandleTypeDef hdac1;
DAC_HandleTypeDef hdac2;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b08c      	sub	sp, #48	; 0x30
 8000498:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800049a:	463b      	mov	r3, r7
 800049c:	2230      	movs	r2, #48	; 0x30
 800049e:	2100      	movs	r1, #0
 80004a0:	4618      	mov	r0, r3
 80004a2:	f006 fbf3 	bl	8006c8c <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80004a6:	4b23      	ldr	r3, [pc, #140]	; (8000534 <MX_DAC1_Init+0xa0>)
 80004a8:	4a23      	ldr	r2, [pc, #140]	; (8000538 <MX_DAC1_Init+0xa4>)
 80004aa:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80004ac:	4821      	ldr	r0, [pc, #132]	; (8000534 <MX_DAC1_Init+0xa0>)
 80004ae:	f002 fcee 	bl	8002e8e <HAL_DAC_Init>
 80004b2:	4603      	mov	r3, r0
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	d001      	beq.n	80004bc <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80004b8:	f000 fbb5 	bl	8000c26 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80004bc:	2302      	movs	r3, #2
 80004be:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80004c0:	2300      	movs	r3, #0
 80004c2:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80004c4:	2300      	movs	r3, #0
 80004c6:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80004c8:	2300      	movs	r3, #0
 80004ca:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80004cc:	2306      	movs	r3, #6
 80004ce:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80004d0:	2300      	movs	r3, #0
 80004d2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80004d4:	2300      	movs	r3, #0
 80004d6:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80004d8:	2301      	movs	r3, #1
 80004da:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80004dc:	2300      	movs	r3, #0
 80004de:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80004e0:	463b      	mov	r3, r7
 80004e2:	2200      	movs	r2, #0
 80004e4:	4619      	mov	r1, r3
 80004e6:	4813      	ldr	r0, [pc, #76]	; (8000534 <MX_DAC1_Init+0xa0>)
 80004e8:	f002 fd6e 	bl	8002fc8 <HAL_DAC_ConfigChannel>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b00      	cmp	r3, #0
 80004f0:	d001      	beq.n	80004f6 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80004f2:	f000 fb98 	bl	8000c26 <Error_Handler>
  }
  /** Configure Triangle wave generation on DAC OUT1 
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac1, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_4095) != HAL_OK)
 80004f6:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 80004fa:	2100      	movs	r1, #0
 80004fc:	480d      	ldr	r0, [pc, #52]	; (8000534 <MX_DAC1_Init+0xa0>)
 80004fe:	f002 ff0f 	bl	8003320 <HAL_DACEx_TriangleWaveGenerate>
 8000502:	4603      	mov	r3, r0
 8000504:	2b00      	cmp	r3, #0
 8000506:	d001      	beq.n	800050c <MX_DAC1_Init+0x78>
  {
    Error_Handler();
 8000508:	f000 fb8d 	bl	8000c26 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000510:	2301      	movs	r3, #1
 8000512:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000514:	463b      	mov	r3, r7
 8000516:	2210      	movs	r2, #16
 8000518:	4619      	mov	r1, r3
 800051a:	4806      	ldr	r0, [pc, #24]	; (8000534 <MX_DAC1_Init+0xa0>)
 800051c:	f002 fd54 	bl	8002fc8 <HAL_DAC_ConfigChannel>
 8000520:	4603      	mov	r3, r0
 8000522:	2b00      	cmp	r3, #0
 8000524:	d001      	beq.n	800052a <MX_DAC1_Init+0x96>
  {
    Error_Handler();
 8000526:	f000 fb7e 	bl	8000c26 <Error_Handler>
  }

}
 800052a:	bf00      	nop
 800052c:	3730      	adds	r7, #48	; 0x30
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	200001ac 	.word	0x200001ac
 8000538:	50000800 	.word	0x50000800

0800053c <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b08c      	sub	sp, #48	; 0x30
 8000540:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8000542:	463b      	mov	r3, r7
 8000544:	2230      	movs	r2, #48	; 0x30
 8000546:	2100      	movs	r1, #0
 8000548:	4618      	mov	r0, r3
 800054a:	f006 fb9f 	bl	8006c8c <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 800054e:	4b1b      	ldr	r3, [pc, #108]	; (80005bc <MX_DAC2_Init+0x80>)
 8000550:	4a1b      	ldr	r2, [pc, #108]	; (80005c0 <MX_DAC2_Init+0x84>)
 8000552:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8000554:	4819      	ldr	r0, [pc, #100]	; (80005bc <MX_DAC2_Init+0x80>)
 8000556:	f002 fc9a 	bl	8002e8e <HAL_DAC_Init>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8000560:	f000 fb61 	bl	8000c26 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000564:	2302      	movs	r3, #2
 8000566:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000568:	2300      	movs	r3, #0
 800056a:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800056c:	2300      	movs	r3, #0
 800056e:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000570:	2300      	movs	r3, #0
 8000572:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8000574:	2306      	movs	r3, #6
 8000576:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000578:	2300      	movs	r3, #0
 800057a:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800057c:	2300      	movs	r3, #0
 800057e:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8000580:	2301      	movs	r3, #1
 8000582:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000584:	2300      	movs	r3, #0
 8000586:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000588:	463b      	mov	r3, r7
 800058a:	2200      	movs	r2, #0
 800058c:	4619      	mov	r1, r3
 800058e:	480b      	ldr	r0, [pc, #44]	; (80005bc <MX_DAC2_Init+0x80>)
 8000590:	f002 fd1a 	bl	8002fc8 <HAL_DAC_ConfigChannel>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_DAC2_Init+0x62>
  {
    Error_Handler();
 800059a:	f000 fb44 	bl	8000c26 <Error_Handler>
  }
  /** Configure Triangle wave generation on DAC OUT1 
  */
  if (HAL_DACEx_TriangleWaveGenerate(&hdac2, DAC_CHANNEL_1, DAC_TRIANGLEAMPLITUDE_4095) != HAL_OK)
 800059e:	f44f 6230 	mov.w	r2, #2816	; 0xb00
 80005a2:	2100      	movs	r1, #0
 80005a4:	4805      	ldr	r0, [pc, #20]	; (80005bc <MX_DAC2_Init+0x80>)
 80005a6:	f002 febb 	bl	8003320 <HAL_DACEx_TriangleWaveGenerate>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_DAC2_Init+0x78>
  {
    Error_Handler();
 80005b0:	f000 fb39 	bl	8000c26 <Error_Handler>
  }

}
 80005b4:	bf00      	nop
 80005b6:	3730      	adds	r7, #48	; 0x30
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}
 80005bc:	20000198 	.word	0x20000198
 80005c0:	50000c00 	.word	0x50000c00

080005c4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b08c      	sub	sp, #48	; 0x30
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005cc:	f107 031c 	add.w	r3, r7, #28
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a2b      	ldr	r2, [pc, #172]	; (8000690 <HAL_DAC_MspInit+0xcc>)
 80005e2:	4293      	cmp	r3, r2
 80005e4:	d125      	bne.n	8000632 <HAL_DAC_MspInit+0x6e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80005e6:	4b2b      	ldr	r3, [pc, #172]	; (8000694 <HAL_DAC_MspInit+0xd0>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	4a2a      	ldr	r2, [pc, #168]	; (8000694 <HAL_DAC_MspInit+0xd0>)
 80005ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005f2:	4b28      	ldr	r3, [pc, #160]	; (8000694 <HAL_DAC_MspInit+0xd0>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80005fa:	61bb      	str	r3, [r7, #24]
 80005fc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005fe:	4b25      	ldr	r3, [pc, #148]	; (8000694 <HAL_DAC_MspInit+0xd0>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	4a24      	ldr	r2, [pc, #144]	; (8000694 <HAL_DAC_MspInit+0xd0>)
 8000604:	f043 0301 	orr.w	r3, r3, #1
 8000608:	64d3      	str	r3, [r2, #76]	; 0x4c
 800060a:	4b22      	ldr	r3, [pc, #136]	; (8000694 <HAL_DAC_MspInit+0xd0>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	f003 0301 	and.w	r3, r3, #1
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000616:	2330      	movs	r3, #48	; 0x30
 8000618:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800061a:	2303      	movs	r3, #3
 800061c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000622:	f107 031c 	add.w	r3, r7, #28
 8000626:	4619      	mov	r1, r3
 8000628:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800062c:	f003 f86a 	bl	8003704 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8000630:	e029      	b.n	8000686 <HAL_DAC_MspInit+0xc2>
  else if(dacHandle->Instance==DAC2)
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a18      	ldr	r2, [pc, #96]	; (8000698 <HAL_DAC_MspInit+0xd4>)
 8000638:	4293      	cmp	r3, r2
 800063a:	d124      	bne.n	8000686 <HAL_DAC_MspInit+0xc2>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800063c:	4b15      	ldr	r3, [pc, #84]	; (8000694 <HAL_DAC_MspInit+0xd0>)
 800063e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000640:	4a14      	ldr	r2, [pc, #80]	; (8000694 <HAL_DAC_MspInit+0xd0>)
 8000642:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000646:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <HAL_DAC_MspInit+0xd0>)
 800064a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000650:	613b      	str	r3, [r7, #16]
 8000652:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000654:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <HAL_DAC_MspInit+0xd0>)
 8000656:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000658:	4a0e      	ldr	r2, [pc, #56]	; (8000694 <HAL_DAC_MspInit+0xd0>)
 800065a:	f043 0301 	orr.w	r3, r3, #1
 800065e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000660:	4b0c      	ldr	r3, [pc, #48]	; (8000694 <HAL_DAC_MspInit+0xd0>)
 8000662:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000664:	f003 0301 	and.w	r3, r3, #1
 8000668:	60fb      	str	r3, [r7, #12]
 800066a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800066c:	2340      	movs	r3, #64	; 0x40
 800066e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000670:	2303      	movs	r3, #3
 8000672:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000674:	2300      	movs	r3, #0
 8000676:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000678:	f107 031c 	add.w	r3, r7, #28
 800067c:	4619      	mov	r1, r3
 800067e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000682:	f003 f83f 	bl	8003704 <HAL_GPIO_Init>
}
 8000686:	bf00      	nop
 8000688:	3730      	adds	r7, #48	; 0x30
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	50000800 	.word	0x50000800
 8000694:	40021000 	.word	0x40021000
 8000698:	50000c00 	.word	0x50000c00

0800069c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <MX_DMA_Init+0x50>)
 80006a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006a6:	4a11      	ldr	r2, [pc, #68]	; (80006ec <MX_DMA_Init+0x50>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	6493      	str	r3, [r2, #72]	; 0x48
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <MX_DMA_Init+0x50>)
 80006b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006b2:	f003 0304 	and.w	r3, r3, #4
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006ba:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_DMA_Init+0x50>)
 80006bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006be:	4a0b      	ldr	r2, [pc, #44]	; (80006ec <MX_DMA_Init+0x50>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6493      	str	r3, [r2, #72]	; 0x48
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_DMA_Init+0x50>)
 80006c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80006d2:	2200      	movs	r2, #0
 80006d4:	2101      	movs	r1, #1
 80006d6:	200b      	movs	r0, #11
 80006d8:	f002 fba5 	bl	8002e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80006dc:	200b      	movs	r0, #11
 80006de:	f002 fbbc 	bl	8002e5a <HAL_NVIC_EnableIRQ>

}
 80006e2:	bf00      	nop
 80006e4:	3708      	adds	r7, #8
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	40021000 	.word	0x40021000

080006f0 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 80006f4:	4b20      	ldr	r3, [pc, #128]	; (8000778 <update_dc_bias_sweep+0x88>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d006      	beq.n	800070a <update_dc_bias_sweep+0x1a>
 80006fc:	4b1f      	ldr	r3, [pc, #124]	; (800077c <update_dc_bias_sweep+0x8c>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	3301      	adds	r3, #1
 8000702:	b29a      	uxth	r2, r3
 8000704:	4b1d      	ldr	r3, [pc, #116]	; (800077c <update_dc_bias_sweep+0x8c>)
 8000706:	801a      	strh	r2, [r3, #0]
 8000708:	e005      	b.n	8000716 <update_dc_bias_sweep+0x26>
 800070a:	4b1c      	ldr	r3, [pc, #112]	; (800077c <update_dc_bias_sweep+0x8c>)
 800070c:	881b      	ldrh	r3, [r3, #0]
 800070e:	3b01      	subs	r3, #1
 8000710:	b29a      	uxth	r2, r3
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <update_dc_bias_sweep+0x8c>)
 8000714:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 8000716:	4b19      	ldr	r3, [pc, #100]	; (800077c <update_dc_bias_sweep+0x8c>)
 8000718:	881b      	ldrh	r3, [r3, #0]
 800071a:	2b00      	cmp	r3, #0
 800071c:	d10a      	bne.n	8000734 <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 800071e:	4b18      	ldr	r3, [pc, #96]	; (8000780 <update_dc_bias_sweep+0x90>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	2b00      	cmp	r3, #0
 8000724:	d003      	beq.n	800072e <update_dc_bias_sweep+0x3e>
 8000726:	4b16      	ldr	r3, [pc, #88]	; (8000780 <update_dc_bias_sweep+0x90>)
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	e002      	b.n	8000734 <update_dc_bias_sweep+0x44>
 800072e:	4b14      	ldr	r3, [pc, #80]	; (8000780 <update_dc_bias_sweep+0x90>)
 8000730:	2201      	movs	r2, #1
 8000732:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 8000734:	4b11      	ldr	r3, [pc, #68]	; (800077c <update_dc_bias_sweep+0x8c>)
 8000736:	881b      	ldrh	r3, [r3, #0]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d102      	bne.n	8000742 <update_dc_bias_sweep+0x52>
 800073c:	4b0e      	ldr	r3, [pc, #56]	; (8000778 <update_dc_bias_sweep+0x88>)
 800073e:	2201      	movs	r2, #1
 8000740:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <update_dc_bias_sweep+0x8c>)
 8000744:	881b      	ldrh	r3, [r3, #0]
 8000746:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800074a:	d302      	bcc.n	8000752 <update_dc_bias_sweep+0x62>
 800074c:	4b0a      	ldr	r3, [pc, #40]	; (8000778 <update_dc_bias_sweep+0x88>)
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 8000752:	4b0b      	ldr	r3, [pc, #44]	; (8000780 <update_dc_bias_sweep+0x90>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	b2db      	uxtb	r3, r3
 8000758:	461a      	mov	r2, r3
 800075a:	2108      	movs	r1, #8
 800075c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000760:	f003 f952 	bl	8003a08 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <update_dc_bias_sweep+0x8c>)
 8000766:	881b      	ldrh	r3, [r3, #0]
 8000768:	2200      	movs	r2, #0
 800076a:	2110      	movs	r1, #16
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <update_dc_bias_sweep+0x94>)
 800076e:	f002 fc03 	bl	8002f78 <HAL_DAC_SetValue>
}
 8000772:	bf00      	nop
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000000 	.word	0x20000000
 800077c:	20000094 	.word	0x20000094
 8000780:	20000098 	.word	0x20000098
 8000784:	200001ac 	.word	0x200001ac

08000788 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b088      	sub	sp, #32
 800078c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800078e:	f107 030c 	add.w	r3, r7, #12
 8000792:	2200      	movs	r2, #0
 8000794:	601a      	str	r2, [r3, #0]
 8000796:	605a      	str	r2, [r3, #4]
 8000798:	609a      	str	r2, [r3, #8]
 800079a:	60da      	str	r2, [r3, #12]
 800079c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800079e:	4b4b      	ldr	r3, [pc, #300]	; (80008cc <MX_GPIO_Init+0x144>)
 80007a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007a2:	4a4a      	ldr	r2, [pc, #296]	; (80008cc <MX_GPIO_Init+0x144>)
 80007a4:	f043 0304 	orr.w	r3, r3, #4
 80007a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007aa:	4b48      	ldr	r3, [pc, #288]	; (80008cc <MX_GPIO_Init+0x144>)
 80007ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ae:	f003 0304 	and.w	r3, r3, #4
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	4b45      	ldr	r3, [pc, #276]	; (80008cc <MX_GPIO_Init+0x144>)
 80007b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ba:	4a44      	ldr	r2, [pc, #272]	; (80008cc <MX_GPIO_Init+0x144>)
 80007bc:	f043 0301 	orr.w	r3, r3, #1
 80007c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c2:	4b42      	ldr	r3, [pc, #264]	; (80008cc <MX_GPIO_Init+0x144>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	f003 0301 	and.w	r3, r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
 80007cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007ce:	4b3f      	ldr	r3, [pc, #252]	; (80008cc <MX_GPIO_Init+0x144>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	4a3e      	ldr	r2, [pc, #248]	; (80008cc <MX_GPIO_Init+0x144>)
 80007d4:	f043 0302 	orr.w	r3, r3, #2
 80007d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007da:	4b3c      	ldr	r3, [pc, #240]	; (80008cc <MX_GPIO_Init+0x144>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	f003 0302 	and.w	r3, r3, #2
 80007e2:	603b      	str	r3, [r7, #0]
 80007e4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_TEST_Pin|TRIGMODE_Pin|SG2_Pin|SG1_Pin 
 80007e6:	2200      	movs	r2, #0
 80007e8:	f244 3138 	movw	r1, #17208	; 0x4338
 80007ec:	4838      	ldr	r0, [pc, #224]	; (80008d0 <MX_GPIO_Init+0x148>)
 80007ee:	f003 f90b 	bl	8003a08 <HAL_GPIO_WritePin>
                          |TRIGMUX1_Pin|TRIGMUX2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	2108      	movs	r1, #8
 80007f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007fa:	f003 f905 	bl	8003a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SG0_Pin|DC_Pin|CS_Pin|RST_Pin, GPIO_PIN_RESET);
 80007fe:	2200      	movs	r2, #0
 8000800:	f240 21c1 	movw	r1, #705	; 0x2c1
 8000804:	4833      	ldr	r0, [pc, #204]	; (80008d4 <MX_GPIO_Init+0x14c>)
 8000806:	f003 f8ff 	bl	8003a08 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin 
                           PCPin */
  GPIO_InitStruct.Pin = LED_TEST_Pin|SG2_Pin|SG1_Pin|TRIGMUX1_Pin 
 800080a:	f244 3330 	movw	r3, #17200	; 0x4330
 800080e:	60fb      	str	r3, [r7, #12]
                          |TRIGMUX2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000810:	2301      	movs	r3, #1
 8000812:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000814:	2300      	movs	r3, #0
 8000816:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000818:	2300      	movs	r3, #0
 800081a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800081c:	f107 030c 	add.w	r3, r7, #12
 8000820:	4619      	mov	r1, r3
 8000822:	482b      	ldr	r0, [pc, #172]	; (80008d0 <MX_GPIO_Init+0x148>)
 8000824:	f002 ff6e 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_SW_Pin;
 8000828:	2304      	movs	r3, #4
 800082a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800082c:	4b2a      	ldr	r3, [pc, #168]	; (80008d8 <MX_GPIO_Init+0x150>)
 800082e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000830:	2301      	movs	r3, #1
 8000832:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(ENC_SW_GPIO_Port, &GPIO_InitStruct);
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	4619      	mov	r1, r3
 800083a:	4825      	ldr	r0, [pc, #148]	; (80008d0 <MX_GPIO_Init+0x148>)
 800083c:	f002 ff62 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8000840:	2308      	movs	r3, #8
 8000842:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000844:	2301      	movs	r3, #1
 8000846:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000848:	2302      	movs	r3, #2
 800084a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084c:	2300      	movs	r3, #0
 800084e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	4619      	mov	r1, r3
 8000856:	481e      	ldr	r0, [pc, #120]	; (80008d0 <MX_GPIO_Init+0x148>)
 8000858:	f002 ff54 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 800085c:	2308      	movs	r3, #8
 800085e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	4619      	mov	r1, r3
 8000872:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000876:	f002 ff45 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SG0_Pin;
 800087a:	2301      	movs	r3, #1
 800087c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087e:	2301      	movs	r3, #1
 8000880:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000882:	2300      	movs	r3, #0
 8000884:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000886:	2300      	movs	r3, #0
 8000888:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 800088a:	f107 030c 	add.w	r3, r7, #12
 800088e:	4619      	mov	r1, r3
 8000890:	4810      	ldr	r0, [pc, #64]	; (80008d4 <MX_GPIO_Init+0x14c>)
 8000892:	f002 ff37 	bl	8003704 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = DC_Pin|CS_Pin|RST_Pin;
 8000896:	f44f 7330 	mov.w	r3, #704	; 0x2c0
 800089a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089c:	2301      	movs	r3, #1
 800089e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a0:	2300      	movs	r3, #0
 80008a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a4:	2303      	movs	r3, #3
 80008a6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	f107 030c 	add.w	r3, r7, #12
 80008ac:	4619      	mov	r1, r3
 80008ae:	4809      	ldr	r0, [pc, #36]	; (80008d4 <MX_GPIO_Init+0x14c>)
 80008b0:	f002 ff28 	bl	8003704 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	2008      	movs	r0, #8
 80008ba:	f002 fab4 	bl	8002e26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80008be:	2008      	movs	r0, #8
 80008c0:	f002 facb 	bl	8002e5a <HAL_NVIC_EnableIRQ>

}
 80008c4:	bf00      	nop
 80008c6:	3720      	adds	r7, #32
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40021000 	.word	0x40021000
 80008d0:	48000800 	.word	0x48000800
 80008d4:	48000400 	.word	0x48000400
 80008d8:	10210000 	.word	0x10210000

080008dc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80008e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008e8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80008ec:	f003 0301 	and.w	r3, r3, #1
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d013      	beq.n	800091c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80008f4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008f8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80008fc:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000900:	2b00      	cmp	r3, #0
 8000902:	d00b      	beq.n	800091c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000904:	e000      	b.n	8000908 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000906:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000908:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	2b00      	cmp	r3, #0
 8000910:	d0f9      	beq.n	8000906 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000912:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000916:	687a      	ldr	r2, [r7, #4]
 8000918:	b2d2      	uxtb	r2, r2
 800091a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800091c:	687b      	ldr	r3, [r7, #4]
}
 800091e:	4618      	mov	r0, r3
 8000920:	370c      	adds	r7, #12
 8000922:	46bd      	mov	sp, r7
 8000924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000928:	4770      	bx	lr

0800092a <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800092a:	b580      	push	{r7, lr}
 800092c:	b086      	sub	sp, #24
 800092e:	af00      	add	r7, sp, #0
 8000930:	60f8      	str	r0, [r7, #12]
 8000932:	60b9      	str	r1, [r7, #8]
 8000934:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800093a:	2300      	movs	r3, #0
 800093c:	617b      	str	r3, [r7, #20]
 800093e:	e009      	b.n	8000954 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	1c5a      	adds	r2, r3, #1
 8000944:	60ba      	str	r2, [r7, #8]
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	4618      	mov	r0, r3
 800094a:	f7ff ffc7 	bl	80008dc <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800094e:	697b      	ldr	r3, [r7, #20]
 8000950:	3301      	adds	r3, #1
 8000952:	617b      	str	r3, [r7, #20]
 8000954:	697a      	ldr	r2, [r7, #20]
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	429a      	cmp	r2, r3
 800095a:	dbf1      	blt.n	8000940 <_write+0x16>
  return len;
 800095c:	687b      	ldr	r3, [r7, #4]
}
 800095e:	4618      	mov	r0, r3
 8000960:	3718      	adds	r7, #24
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
	...

08000968 <update_tft>:

void update_tft()
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b084      	sub	sp, #16
 800096c:	af00      	add	r7, sp, #0
	  //----------------------------------------------------------FILLED CIRCLES EXAMPLE


				uint32_t random_num = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
	  			uint16_t xr = 0;
 8000972:	2300      	movs	r3, #0
 8000974:	81fb      	strh	r3, [r7, #14]
	  			uint16_t yr = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	81bb      	strh	r3, [r7, #12]
	  			uint16_t radiusr = 0;
 800097a:	2300      	movs	r3, #0
 800097c:	817b      	strh	r3, [r7, #10]
	  			uint16_t colourr = 0;
 800097e:	2300      	movs	r3, #0
 8000980:	813b      	strh	r3, [r7, #8]
	  			HAL_RNG_GenerateRandomNumber(&hrng, &random_num);
 8000982:	1d3b      	adds	r3, r7, #4
 8000984:	4619      	mov	r1, r3
 8000986:	4819      	ldr	r0, [pc, #100]	; (80009ec <update_tft+0x84>)
 8000988:	f004 f8c1 	bl	8004b0e <HAL_RNG_GenerateRandomNumber>
	  			xr = random_num;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	81fb      	strh	r3, [r7, #14]
	  			HAL_RNG_GenerateRandomNumber(&hrng, &random_num);
 8000990:	1d3b      	adds	r3, r7, #4
 8000992:	4619      	mov	r1, r3
 8000994:	4815      	ldr	r0, [pc, #84]	; (80009ec <update_tft+0x84>)
 8000996:	f004 f8ba 	bl	8004b0e <HAL_RNG_GenerateRandomNumber>
	  			yr = random_num;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	81bb      	strh	r3, [r7, #12]
	  			HAL_RNG_GenerateRandomNumber(&hrng, &random_num);
 800099e:	1d3b      	adds	r3, r7, #4
 80009a0:	4619      	mov	r1, r3
 80009a2:	4812      	ldr	r0, [pc, #72]	; (80009ec <update_tft+0x84>)
 80009a4:	f004 f8b3 	bl	8004b0e <HAL_RNG_GenerateRandomNumber>
	  			radiusr = random_num;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	817b      	strh	r3, [r7, #10]
	  			HAL_RNG_GenerateRandomNumber(&hrng, &random_num);
 80009ac:	1d3b      	adds	r3, r7, #4
 80009ae:	4619      	mov	r1, r3
 80009b0:	480e      	ldr	r0, [pc, #56]	; (80009ec <update_tft+0x84>)
 80009b2:	f004 f8ac 	bl	8004b0e <HAL_RNG_GenerateRandomNumber>
	  			colourr = random_num;
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	813b      	strh	r3, [r7, #8]

	  			xr &= 0x01FF;
 80009ba:	89fb      	ldrh	r3, [r7, #14]
 80009bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009c0:	81fb      	strh	r3, [r7, #14]
	  			yr &= 0x01FF;
 80009c2:	89bb      	ldrh	r3, [r7, #12]
 80009c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80009c8:	81bb      	strh	r3, [r7, #12]
	  			radiusr &= 0x001F;
 80009ca:	897b      	ldrh	r3, [r7, #10]
 80009cc:	f003 031f 	and.w	r3, r3, #31
 80009d0:	817b      	strh	r3, [r7, #10]
	  			//ili9341_drawpixel(xr, yr, WHITE);
	  			ILI9341_Draw_Filled_Circle(xr, yr, radiusr/2, colourr);
 80009d2:	897b      	ldrh	r3, [r7, #10]
 80009d4:	085b      	lsrs	r3, r3, #1
 80009d6:	b29a      	uxth	r2, r3
 80009d8:	893b      	ldrh	r3, [r7, #8]
 80009da:	89b9      	ldrh	r1, [r7, #12]
 80009dc:	89f8      	ldrh	r0, [r7, #14]
 80009de:	f005 fbcd 	bl	800617c <ILI9341_Draw_Filled_Circle>

	  		//HAL_Delay(1);
}
 80009e2:	bf00      	nop
 80009e4:	3710      	adds	r7, #16
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	200001c0 	.word	0x200001c0

080009f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f6:	f000 fd68 	bl	80014ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fa:	f000 f8a5 	bl	8000b48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009fe:	f7ff fec3 	bl	8000788 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a02:	f7ff fe4b 	bl	800069c <MX_DMA_Init>
  MX_DAC1_Init();
 8000a06:	f7ff fd45 	bl	8000494 <MX_DAC1_Init>
  MX_DAC2_Init();
 8000a0a:	f7ff fd97 	bl	800053c <MX_DAC2_Init>
  MX_ADC1_Init();
 8000a0e:	f7ff fc03 	bl	8000218 <MX_ADC1_Init>
  MX_COMP1_Init();
 8000a12:	f7ff fce5 	bl	80003e0 <MX_COMP1_Init>
  MX_TIM2_Init();
 8000a16:	f000 fb6b 	bl	80010f0 <MX_TIM2_Init>
  MX_TIM17_Init();
 8000a1a:	f000 fc3b 	bl	8001294 <MX_TIM17_Init>
  MX_SPI3_Init();
 8000a1e:	f000 f93f 	bl	8000ca0 <MX_SPI3_Init>
  MX_RNG_Init();
 8000a22:	f000 f907 	bl	8000c34 <MX_RNG_Init>
  MX_TIM1_Init();
 8000a26:	f000 faf3 	bl	8001010 <MX_TIM1_Init>
  MX_TIM8_Init();
 8000a2a:	f000 fbcb 	bl	80011c4 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_1);
 8000a2e:	2100      	movs	r1, #0
 8000a30:	483b      	ldr	r0, [pc, #236]	; (8000b20 <main+0x130>)
 8000a32:	f002 fa4e 	bl	8002ed2 <HAL_DAC_Start>
  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8000a36:	2110      	movs	r1, #16
 8000a38:	4839      	ldr	r0, [pc, #228]	; (8000b20 <main+0x130>)
 8000a3a:	f002 fa4a 	bl	8002ed2 <HAL_DAC_Start>
  // auxilliary signal sync output (external)
  HAL_DAC_Start(&hdac2, DAC2_CHANNEL_1);
 8000a3e:	2100      	movs	r1, #0
 8000a40:	4838      	ldr	r0, [pc, #224]	; (8000b24 <main+0x134>)
 8000a42:	f002 fa46 	bl	8002ed2 <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
#ifndef DISABLE_ALL_TIMERS
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 8000a46:	4838      	ldr	r0, [pc, #224]	; (8000b28 <main+0x138>)
 8000a48:	f004 fc1c 	bl	8005284 <HAL_TIM_Base_Start>
#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	2108      	movs	r1, #8
 8000a50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a54:	f002 ffd8 	bl	8003a08 <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	2101      	movs	r1, #1
 8000a5c:	4833      	ldr	r0, [pc, #204]	; (8000b2c <main+0x13c>)
 8000a5e:	f002 ffd3 	bl	8003a08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2120      	movs	r1, #32
 8000a66:	4832      	ldr	r0, [pc, #200]	; (8000b30 <main+0x140>)
 8000a68:	f002 ffce 	bl	8003a08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	2110      	movs	r1, #16
 8000a70:	482f      	ldr	r0, [pc, #188]	; (8000b30 <main+0x140>)
 8000a72:	f002 ffc9 	bl	8003a08 <HAL_GPIO_WritePin>

#ifndef DISABLE_ALL_TIMERS
  // start test routine (update_dc_bias_sweep())
  HAL_TIM_Base_Start_IT(&htim17);
 8000a76:	482f      	ldr	r0, [pc, #188]	; (8000b34 <main+0x144>)
 8000a78:	f004 fc32 	bl	80052e0 <HAL_TIM_Base_Start_IT>
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a82:	482b      	ldr	r0, [pc, #172]	; (8000b30 <main+0x140>)
 8000a84:	f002 ffc0 	bl	8003a08 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8000a88:	2200      	movs	r2, #0
 8000a8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a8e:	4828      	ldr	r0, [pc, #160]	; (8000b30 <main+0x140>)
 8000a90:	f002 ffba 	bl	8003a08 <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 8000a94:	2201      	movs	r2, #1
 8000a96:	2108      	movs	r1, #8
 8000a98:	4825      	ldr	r0, [pc, #148]	; (8000b30 <main+0x140>)
 8000a9a:	f002 ffb5 	bl	8003a08 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 8000a9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000aa2:	689b      	ldr	r3, [r3, #8]
 8000aa4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aa8:	f023 0307 	bic.w	r3, r3, #7
 8000aac:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 8000aae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ab8:	f043 0305 	orr.w	r3, r3, #5
 8000abc:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 8000abe:	481e      	ldr	r0, [pc, #120]	; (8000b38 <main+0x148>)
 8000ac0:	f004 fc0e 	bl	80052e0 <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);
 8000ac4:	481d      	ldr	r0, [pc, #116]	; (8000b3c <main+0x14c>)
 8000ac6:	f004 fbdd 	bl	8005284 <HAL_TIM_Base_Start>
#endif	//DISABLE_ALL_TIMERS

  // TFT lib enable
  ILI9341_Init();
 8000aca:	f005 fdc5 	bl	8006658 <ILI9341_Init>


	ILI9341_Fill_Screen(WHITE);
 8000ace:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000ad2:	f005 ff65 	bl	80069a0 <ILI9341_Fill_Screen>
	ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000ad6:	2003      	movs	r0, #3
 8000ad8:	f005 fd64 	bl	80065a4 <ILI9341_Set_Rotation>
	ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 8000adc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ae0:	9301      	str	r3, [sp, #4]
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	220a      	movs	r2, #10
 8000aea:	210a      	movs	r1, #10
 8000aec:	4814      	ldr	r0, [pc, #80]	; (8000b40 <main+0x150>)
 8000aee:	f005 fc67 	bl	80063c0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("Filled Circles", 10, 20, BLACK, 1, WHITE);
 8000af2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000af6:	9301      	str	r3, [sp, #4]
 8000af8:	2301      	movs	r3, #1
 8000afa:	9300      	str	r3, [sp, #0]
 8000afc:	2300      	movs	r3, #0
 8000afe:	2214      	movs	r2, #20
 8000b00:	210a      	movs	r1, #10
 8000b02:	4810      	ldr	r0, [pc, #64]	; (8000b44 <main+0x154>)
 8000b04:	f005 fc5c 	bl	80063c0 <ILI9341_Draw_Text>
	HAL_Delay(2000);
 8000b08:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b0c:	f000 fd4e 	bl	80015ac <HAL_Delay>
	ILI9341_Fill_Screen(WHITE);
 8000b10:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b14:	f005 ff44 	bl	80069a0 <ILI9341_Fill_Screen>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	//printf("TFT\n");
	update_tft();
 8000b18:	f7ff ff26 	bl	8000968 <update_tft>
 8000b1c:	e7fc      	b.n	8000b18 <main+0x128>
 8000b1e:	bf00      	nop
 8000b20:	200001ac 	.word	0x200001ac
 8000b24:	20000198 	.word	0x20000198
 8000b28:	20000238 	.word	0x20000238
 8000b2c:	48000400 	.word	0x48000400
 8000b30:	48000800 	.word	0x48000800
 8000b34:	20000284 	.word	0x20000284
 8000b38:	2000031c 	.word	0x2000031c
 8000b3c:	200002d0 	.word	0x200002d0
 8000b40:	08007584 	.word	0x08007584
 8000b44:	080075a0 	.word	0x080075a0

08000b48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b0a8      	sub	sp, #160	; 0xa0
 8000b4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b4e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000b52:	2238      	movs	r2, #56	; 0x38
 8000b54:	2100      	movs	r1, #0
 8000b56:	4618      	mov	r0, r3
 8000b58:	f006 f898 	bl	8006c8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b5c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
 8000b64:	605a      	str	r2, [r3, #4]
 8000b66:	609a      	str	r2, [r3, #8]
 8000b68:	60da      	str	r2, [r3, #12]
 8000b6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	2254      	movs	r2, #84	; 0x54
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f006 f88a 	bl	8006c8c <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b78:	2000      	movs	r0, #0
 8000b7a:	f002 ff9b 	bl	8003ab4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8000b7e:	2322      	movs	r3, #34	; 0x22
 8000b80:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b82:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b86:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b88:	2340      	movs	r3, #64	; 0x40
 8000b8a:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b92:	2302      	movs	r3, #2
 8000b94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b98:	2302      	movs	r3, #2
 8000b9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8000ba4:	232a      	movs	r3, #42	; 0x2a
 8000ba6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000baa:	2302      	movs	r3, #2
 8000bac:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000bb0:	2304      	movs	r3, #4
 8000bb2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bbc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f003 f81b 	bl	8003bfc <HAL_RCC_OscConfig>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8000bcc:	f000 f82b 	bl	8000c26 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bd0:	230f      	movs	r3, #15
 8000bd2:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bdc:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000be0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000be2:	2300      	movs	r3, #0
 8000be4:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8000be6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bea:	2108      	movs	r1, #8
 8000bec:	4618      	mov	r0, r3
 8000bee:	f003 fb1d 	bl	800422c <HAL_RCC_ClockConfig>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000bf8:	f000 f815 	bl	8000c26 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8000bfc:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000c00:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8000c02:	2300      	movs	r3, #0
 8000c04:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000c06:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000c0a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	4618      	mov	r0, r3
 8000c10:	f003 fcfc 	bl	800460c <HAL_RCCEx_PeriphCLKConfig>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d001      	beq.n	8000c1e <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8000c1a:	f000 f804 	bl	8000c26 <Error_Handler>
  }
}
 8000c1e:	bf00      	nop
 8000c20:	37a0      	adds	r7, #160	; 0xa0
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c26:	b480      	push	{r7}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000c2a:	bf00      	nop
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr

08000c34 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0

  hrng.Instance = RNG;
 8000c38:	4b07      	ldr	r3, [pc, #28]	; (8000c58 <MX_RNG_Init+0x24>)
 8000c3a:	4a08      	ldr	r2, [pc, #32]	; (8000c5c <MX_RNG_Init+0x28>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <MX_RNG_Init+0x24>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8000c44:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_RNG_Init+0x24>)
 8000c46:	f003 ff2d 	bl	8004aa4 <HAL_RNG_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8000c50:	f7ff ffe9 	bl	8000c26 <Error_Handler>
  }

}
 8000c54:	bf00      	nop
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	200001c0 	.word	0x200001c0
 8000c5c:	50060800 	.word	0x50060800

08000c60 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 8000c60:	b480      	push	{r7}
 8000c62:	b085      	sub	sp, #20
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <HAL_RNG_MspInit+0x38>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d10b      	bne.n	8000c8a <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8000c72:	4b0a      	ldr	r3, [pc, #40]	; (8000c9c <HAL_RNG_MspInit+0x3c>)
 8000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c76:	4a09      	ldr	r2, [pc, #36]	; (8000c9c <HAL_RNG_MspInit+0x3c>)
 8000c78:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c7e:	4b07      	ldr	r3, [pc, #28]	; (8000c9c <HAL_RNG_MspInit+0x3c>)
 8000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c82:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 8000c8a:	bf00      	nop
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	50060800 	.word	0x50060800
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8000ca4:	4b1b      	ldr	r3, [pc, #108]	; (8000d14 <MX_SPI3_Init+0x74>)
 8000ca6:	4a1c      	ldr	r2, [pc, #112]	; (8000d18 <MX_SPI3_Init+0x78>)
 8000ca8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000caa:	4b1a      	ldr	r3, [pc, #104]	; (8000d14 <MX_SPI3_Init+0x74>)
 8000cac:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cb0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000cb2:	4b18      	ldr	r3, [pc, #96]	; (8000d14 <MX_SPI3_Init+0x74>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cb8:	4b16      	ldr	r3, [pc, #88]	; (8000d14 <MX_SPI3_Init+0x74>)
 8000cba:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000cbe:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	; (8000d14 <MX_SPI3_Init+0x74>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	; (8000d14 <MX_SPI3_Init+0x74>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <MX_SPI3_Init+0x74>)
 8000cce:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cd2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	; (8000d14 <MX_SPI3_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <MX_SPI3_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <MX_SPI3_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <MX_SPI3_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_SPI3_Init+0x74>)
 8000cee:	2207      	movs	r2, #7
 8000cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <MX_SPI3_Init+0x74>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <MX_SPI3_Init+0x74>)
 8000cfa:	2208      	movs	r2, #8
 8000cfc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_SPI3_Init+0x74>)
 8000d00:	f003 ff54 	bl	8004bac <HAL_SPI_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000d0a:	f7ff ff8c 	bl	8000c26 <Error_Handler>
  }

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200001d4 	.word	0x200001d4
 8000d18:	40003c00 	.word	0x40003c00

08000d1c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08a      	sub	sp, #40	; 0x28
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0314 	add.w	r3, r7, #20
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a17      	ldr	r2, [pc, #92]	; (8000d98 <HAL_SPI_MspInit+0x7c>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d128      	bne.n	8000d90 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d3e:	4b17      	ldr	r3, [pc, #92]	; (8000d9c <HAL_SPI_MspInit+0x80>)
 8000d40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d42:	4a16      	ldr	r2, [pc, #88]	; (8000d9c <HAL_SPI_MspInit+0x80>)
 8000d44:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d48:	6593      	str	r3, [r2, #88]	; 0x58
 8000d4a:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <HAL_SPI_MspInit+0x80>)
 8000d4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d52:	613b      	str	r3, [r7, #16]
 8000d54:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d56:	4b11      	ldr	r3, [pc, #68]	; (8000d9c <HAL_SPI_MspInit+0x80>)
 8000d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d5a:	4a10      	ldr	r2, [pc, #64]	; (8000d9c <HAL_SPI_MspInit+0x80>)
 8000d5c:	f043 0304 	orr.w	r3, r3, #4
 8000d60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d62:	4b0e      	ldr	r3, [pc, #56]	; (8000d9c <HAL_SPI_MspInit+0x80>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	f003 0304 	and.w	r3, r3, #4
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8000d6e:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d80:	2306      	movs	r3, #6
 8000d82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4805      	ldr	r0, [pc, #20]	; (8000da0 <HAL_SPI_MspInit+0x84>)
 8000d8c:	f002 fcba 	bl	8003704 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000d90:	bf00      	nop
 8000d92:	3728      	adds	r7, #40	; 0x28
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	40003c00 	.word	0x40003c00
 8000d9c:	40021000 	.word	0x40021000
 8000da0:	48000800 	.word	0x48000800

08000da4 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8000da8:	4b05      	ldr	r3, [pc, #20]	; (8000dc0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000daa:	689b      	ldr	r3, [r3, #8]
 8000dac:	4a04      	ldr	r2, [pc, #16]	; (8000dc0 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8000dae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db2:	6093      	str	r3, [r2, #8]
}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop
 8000dc0:	40007000 	.word	0x40007000

08000dc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dca:	4b0f      	ldr	r3, [pc, #60]	; (8000e08 <HAL_MspInit+0x44>)
 8000dcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dce:	4a0e      	ldr	r2, [pc, #56]	; (8000e08 <HAL_MspInit+0x44>)
 8000dd0:	f043 0301 	orr.w	r3, r3, #1
 8000dd4:	6613      	str	r3, [r2, #96]	; 0x60
 8000dd6:	4b0c      	ldr	r3, [pc, #48]	; (8000e08 <HAL_MspInit+0x44>)
 8000dd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dda:	f003 0301 	and.w	r3, r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
 8000de0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000de2:	4b09      	ldr	r3, [pc, #36]	; (8000e08 <HAL_MspInit+0x44>)
 8000de4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000de6:	4a08      	ldr	r2, [pc, #32]	; (8000e08 <HAL_MspInit+0x44>)
 8000de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dec:	6593      	str	r3, [r2, #88]	; 0x58
 8000dee:	4b06      	ldr	r3, [pc, #24]	; (8000e08 <HAL_MspInit+0x44>)
 8000df0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000df6:	603b      	str	r3, [r7, #0]
 8000df8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8000dfa:	f7ff ffd3 	bl	8000da4 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	40021000 	.word	0x40021000

08000e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e1e:	e7fe      	b.n	8000e1e <HardFault_Handler+0x4>

08000e20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e24:	e7fe      	b.n	8000e24 <MemManage_Handler+0x4>

08000e26 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e26:	b480      	push	{r7}
 8000e28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e2a:	e7fe      	b.n	8000e2a <BusFault_Handler+0x4>

08000e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <UsageFault_Handler+0x4>

08000e32 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e32:	b480      	push	{r7}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e36:	bf00      	nop
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr

08000e40 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e40:	b480      	push	{r7}
 8000e42:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr

08000e4e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e4e:	b480      	push	{r7}
 8000e50:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e52:	bf00      	nop
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e60:	f000 fb86 	bl	8001570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e64:	bf00      	nop
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	printf("SW\n");
 8000e6c:	4803      	ldr	r0, [pc, #12]	; (8000e7c <EXTI2_IRQHandler+0x14>)
 8000e6e:	f005 ff71 	bl	8006d54 <puts>
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000e72:	2004      	movs	r0, #4
 8000e74:	f002 fdfa 	bl	8003a6c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000e78:	bf00      	nop
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	080075b0 	.word	0x080075b0

08000e80 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <DMA1_Channel1_IRQHandler+0x10>)
 8000e86:	f002 fb2b 	bl	80034e0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000114 	.word	0x20000114

08000e94 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000e98:	4802      	ldr	r0, [pc, #8]	; (8000ea4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8000e9a:	f004 fafd 	bl	8005498 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8000e9e:	bf00      	nop
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	200002d0 	.word	0x200002d0

08000ea8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 8000eac:	f7ff fc20 	bl	80006f0 <update_dc_bias_sweep>
//	printf("%lu\n", TIM1->CNT);
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000eb0:	4803      	ldr	r0, [pc, #12]	; (8000ec0 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8000eb2:	f004 faf1 	bl	8005498 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8000eb6:	4803      	ldr	r0, [pc, #12]	; (8000ec4 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8000eb8:	f004 faee 	bl	8005498 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000ebc:	bf00      	nop
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	200002d0 	.word	0x200002d0
 8000ec4:	20000284 	.word	0x20000284

08000ec8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	HAL_GPIO_TogglePin(LED_TEST_GPIO_Port, LED_TEST_Pin);
 8000ecc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ed0:	4803      	ldr	r0, [pc, #12]	; (8000ee0 <TIM2_IRQHandler+0x18>)
 8000ed2:	f002 fdb1 	bl	8003a38 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ed6:	4803      	ldr	r0, [pc, #12]	; (8000ee4 <TIM2_IRQHandler+0x1c>)
 8000ed8:	f004 fade 	bl	8005498 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	48000800 	.word	0x48000800
 8000ee4:	2000031c 	.word	0x2000031c

08000ee8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]
 8000ef8:	e00a      	b.n	8000f10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000efa:	f3af 8000 	nop.w
 8000efe:	4601      	mov	r1, r0
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	1c5a      	adds	r2, r3, #1
 8000f04:	60ba      	str	r2, [r7, #8]
 8000f06:	b2ca      	uxtb	r2, r1
 8000f08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0a:	697b      	ldr	r3, [r7, #20]
 8000f0c:	3301      	adds	r3, #1
 8000f0e:	617b      	str	r3, [r7, #20]
 8000f10:	697a      	ldr	r2, [r7, #20]
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	429a      	cmp	r2, r3
 8000f16:	dbf0      	blt.n	8000efa <_read+0x12>
	}

return len;
 8000f18:	687b      	ldr	r3, [r7, #4]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3718      	adds	r7, #24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
	return -1;
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	370c      	adds	r7, #12
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr

08000f3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f3a:	b480      	push	{r7}
 8000f3c:	b083      	sub	sp, #12
 8000f3e:	af00      	add	r7, sp, #0
 8000f40:	6078      	str	r0, [r7, #4]
 8000f42:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f4a:	605a      	str	r2, [r3, #4]
	return 0;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	370c      	adds	r7, #12
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr

08000f5a <_isatty>:

int _isatty(int file)
{
 8000f5a:	b480      	push	{r7}
 8000f5c:	b083      	sub	sp, #12
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	6078      	str	r0, [r7, #4]
	return 1;
 8000f62:	2301      	movs	r3, #1
}
 8000f64:	4618      	mov	r0, r3
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
	return 0;
 8000f7c:	2300      	movs	r3, #0
}
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3714      	adds	r7, #20
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
	...

08000f8c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b084      	sub	sp, #16
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <_sbrk+0x50>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d102      	bne.n	8000fa2 <_sbrk+0x16>
		heap_end = &end;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <_sbrk+0x50>)
 8000f9e:	4a10      	ldr	r2, [pc, #64]	; (8000fe0 <_sbrk+0x54>)
 8000fa0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <_sbrk+0x50>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <_sbrk+0x50>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	4413      	add	r3, r2
 8000fb0:	466a      	mov	r2, sp
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d907      	bls.n	8000fc6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000fb6:	f005 fe3f 	bl	8006c38 <__errno>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	230c      	movs	r3, #12
 8000fbe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000fc0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fc4:	e006      	b.n	8000fd4 <_sbrk+0x48>
	}

	heap_end += incr;
 8000fc6:	4b05      	ldr	r3, [pc, #20]	; (8000fdc <_sbrk+0x50>)
 8000fc8:	681a      	ldr	r2, [r3, #0]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	4413      	add	r3, r2
 8000fce:	4a03      	ldr	r2, [pc, #12]	; (8000fdc <_sbrk+0x50>)
 8000fd0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000fd2:	68fb      	ldr	r3, [r7, #12]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3710      	adds	r7, #16
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	2000009c 	.word	0x2000009c
 8000fe0:	20000370 	.word	0x20000370

08000fe4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000fe8:	4b08      	ldr	r3, [pc, #32]	; (800100c <SystemInit+0x28>)
 8000fea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fee:	4a07      	ldr	r2, [pc, #28]	; (800100c <SystemInit+0x28>)
 8000ff0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ff8:	4b04      	ldr	r3, [pc, #16]	; (800100c <SystemInit+0x28>)
 8000ffa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ffe:	609a      	str	r2, [r3, #8]
#endif
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000ed00 	.word	0xe000ed00

08001010 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b09a      	sub	sp, #104	; 0x68
 8001014:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8001016:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800101a:	2224      	movs	r2, #36	; 0x24
 800101c:	2100      	movs	r1, #0
 800101e:	4618      	mov	r0, r3
 8001020:	f005 fe34 	bl	8006c8c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001024:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001030:	1d3b      	adds	r3, r7, #4
 8001032:	2234      	movs	r2, #52	; 0x34
 8001034:	2100      	movs	r1, #0
 8001036:	4618      	mov	r0, r3
 8001038:	f005 fe28 	bl	8006c8c <memset>

  htim1.Instance = TIM1;
 800103c:	4b2a      	ldr	r3, [pc, #168]	; (80010e8 <MX_TIM1_Init+0xd8>)
 800103e:	4a2b      	ldr	r2, [pc, #172]	; (80010ec <MX_TIM1_Init+0xdc>)
 8001040:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001042:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <MX_TIM1_Init+0xd8>)
 8001044:	2200      	movs	r2, #0
 8001046:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001048:	4b27      	ldr	r3, [pc, #156]	; (80010e8 <MX_TIM1_Init+0xd8>)
 800104a:	2200      	movs	r2, #0
 800104c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800104e:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <MX_TIM1_Init+0xd8>)
 8001050:	22ff      	movs	r2, #255	; 0xff
 8001052:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001054:	4b24      	ldr	r3, [pc, #144]	; (80010e8 <MX_TIM1_Init+0xd8>)
 8001056:	2200      	movs	r2, #0
 8001058:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800105a:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <MX_TIM1_Init+0xd8>)
 800105c:	2200      	movs	r2, #0
 800105e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001060:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <MX_TIM1_Init+0xd8>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001066:	2303      	movs	r3, #3
 8001068:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800106a:	2300      	movs	r3, #0
 800106c:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800106e:	2301      	movs	r3, #1
 8001070:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001072:	2300      	movs	r3, #0
 8001074:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8001076:	2300      	movs	r3, #0
 8001078:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800107a:	2300      	movs	r3, #0
 800107c:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800107e:	2301      	movs	r3, #1
 8001080:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001082:	2300      	movs	r3, #0
 8001084:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800108a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800108e:	4619      	mov	r1, r3
 8001090:	4815      	ldr	r0, [pc, #84]	; (80010e8 <MX_TIM1_Init+0xd8>)
 8001092:	f004 f95b 	bl	800534c <HAL_TIM_Encoder_Init>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800109c:	f7ff fdc3 	bl	8000c26 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010a0:	2300      	movs	r3, #0
 80010a2:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010a4:	2300      	movs	r3, #0
 80010a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010a8:	2300      	movs	r3, #0
 80010aa:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010ac:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010b0:	4619      	mov	r1, r3
 80010b2:	480d      	ldr	r0, [pc, #52]	; (80010e8 <MX_TIM1_Init+0xd8>)
 80010b4:	f004 fed4 	bl	8005e60 <HAL_TIMEx_MasterConfigSynchronization>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM1_Init+0xb2>
  {
    Error_Handler();
 80010be:	f7ff fdb2 	bl	8000c26 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80010c2:	2300      	movs	r3, #0
 80010c4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80010c6:	2300      	movs	r3, #0
 80010c8:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010ca:	1d3b      	adds	r3, r7, #4
 80010cc:	4619      	mov	r1, r3
 80010ce:	4806      	ldr	r0, [pc, #24]	; (80010e8 <MX_TIM1_Init+0xd8>)
 80010d0:	f004 ff5c 	bl	8005f8c <HAL_TIMEx_ConfigBreakDeadTime>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80010da:	f7ff fda4 	bl	8000c26 <Error_Handler>
  }

}
 80010de:	bf00      	nop
 80010e0:	3768      	adds	r7, #104	; 0x68
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200002d0 	.word	0x200002d0
 80010ec:	40012c00 	.word	0x40012c00

080010f0 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08c      	sub	sp, #48	; 0x30
 80010f4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010f6:	f107 0320 	add.w	r3, r7, #32
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001104:	f107 030c 	add.w	r3, r7, #12
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
 8001112:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001114:	463b      	mov	r3, r7
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	605a      	str	r2, [r3, #4]
 800111c:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800111e:	4b28      	ldr	r3, [pc, #160]	; (80011c0 <MX_TIM2_Init+0xd0>)
 8001120:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001124:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 8001126:	4b26      	ldr	r3, [pc, #152]	; (80011c0 <MX_TIM2_Init+0xd0>)
 8001128:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800112c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800112e:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <MX_TIM2_Init+0xd0>)
 8001130:	2200      	movs	r2, #0
 8001132:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8001134:	4b22      	ldr	r3, [pc, #136]	; (80011c0 <MX_TIM2_Init+0xd0>)
 8001136:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800113a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800113c:	4b20      	ldr	r3, [pc, #128]	; (80011c0 <MX_TIM2_Init+0xd0>)
 800113e:	2200      	movs	r2, #0
 8001140:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001142:	4b1f      	ldr	r3, [pc, #124]	; (80011c0 <MX_TIM2_Init+0xd0>)
 8001144:	2200      	movs	r2, #0
 8001146:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001148:	481d      	ldr	r0, [pc, #116]	; (80011c0 <MX_TIM2_Init+0xd0>)
 800114a:	f004 f844 	bl	80051d6 <HAL_TIM_Base_Init>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001154:	f7ff fd67 	bl	8000c26 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800115c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800115e:	f107 0320 	add.w	r3, r7, #32
 8001162:	4619      	mov	r1, r3
 8001164:	4816      	ldr	r0, [pc, #88]	; (80011c0 <MX_TIM2_Init+0xd0>)
 8001166:	f004 fb17 	bl	8005798 <HAL_TIM_ConfigClockSource>
 800116a:	4603      	mov	r3, r0
 800116c:	2b00      	cmp	r3, #0
 800116e:	d001      	beq.n	8001174 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001170:	f7ff fd59 	bl	8000c26 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8001174:	2305      	movs	r3, #5
 8001176:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8001178:	2350      	movs	r3, #80	; 0x50
 800117a:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 800117c:	2300      	movs	r3, #0
 800117e:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001184:	f107 030c 	add.w	r3, r7, #12
 8001188:	4619      	mov	r1, r3
 800118a:	480d      	ldr	r0, [pc, #52]	; (80011c0 <MX_TIM2_Init+0xd0>)
 800118c:	f004 fbf4 	bl	8005978 <HAL_TIM_SlaveConfigSynchro>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8001196:	f7ff fd46 	bl	8000c26 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800119a:	2300      	movs	r3, #0
 800119c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119e:	2300      	movs	r3, #0
 80011a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011a2:	463b      	mov	r3, r7
 80011a4:	4619      	mov	r1, r3
 80011a6:	4806      	ldr	r0, [pc, #24]	; (80011c0 <MX_TIM2_Init+0xd0>)
 80011a8:	f004 fe5a 	bl	8005e60 <HAL_TIMEx_MasterConfigSynchronization>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 80011b2:	f7ff fd38 	bl	8000c26 <Error_Handler>
  }

}
 80011b6:	bf00      	nop
 80011b8:	3730      	adds	r7, #48	; 0x30
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	2000031c 	.word	0x2000031c

080011c4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b094      	sub	sp, #80	; 0x50
 80011c8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011e4:	463b      	mov	r3, r7
 80011e6:	2234      	movs	r2, #52	; 0x34
 80011e8:	2100      	movs	r1, #0
 80011ea:	4618      	mov	r0, r3
 80011ec:	f005 fd4e 	bl	8006c8c <memset>

  htim8.Instance = TIM8;
 80011f0:	4b26      	ldr	r3, [pc, #152]	; (800128c <MX_TIM8_Init+0xc8>)
 80011f2:	4a27      	ldr	r2, [pc, #156]	; (8001290 <MX_TIM8_Init+0xcc>)
 80011f4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80011f6:	4b25      	ldr	r3, [pc, #148]	; (800128c <MX_TIM8_Init+0xc8>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011fc:	4b23      	ldr	r3, [pc, #140]	; (800128c <MX_TIM8_Init+0xc8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8001202:	4b22      	ldr	r3, [pc, #136]	; (800128c <MX_TIM8_Init+0xc8>)
 8001204:	2201      	movs	r2, #1
 8001206:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001208:	4b20      	ldr	r3, [pc, #128]	; (800128c <MX_TIM8_Init+0xc8>)
 800120a:	2200      	movs	r2, #0
 800120c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800120e:	4b1f      	ldr	r3, [pc, #124]	; (800128c <MX_TIM8_Init+0xc8>)
 8001210:	2200      	movs	r2, #0
 8001212:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001214:	4b1d      	ldr	r3, [pc, #116]	; (800128c <MX_TIM8_Init+0xc8>)
 8001216:	2200      	movs	r2, #0
 8001218:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800121a:	481c      	ldr	r0, [pc, #112]	; (800128c <MX_TIM8_Init+0xc8>)
 800121c:	f003 ffdb 	bl	80051d6 <HAL_TIM_Base_Init>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8001226:	f7ff fcfe 	bl	8000c26 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001230:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001234:	4619      	mov	r1, r3
 8001236:	4815      	ldr	r0, [pc, #84]	; (800128c <MX_TIM8_Init+0xc8>)
 8001238:	f004 faae 	bl	8005798 <HAL_TIM_ConfigClockSource>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001242:	f7ff fcf0 	bl	8000c26 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001246:	2320      	movs	r3, #32
 8001248:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800124a:	2300      	movs	r3, #0
 800124c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001252:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001256:	4619      	mov	r1, r3
 8001258:	480c      	ldr	r0, [pc, #48]	; (800128c <MX_TIM8_Init+0xc8>)
 800125a:	f004 fe01 	bl	8005e60 <HAL_TIMEx_MasterConfigSynchronization>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001264:	f7ff fcdf 	bl	8000c26 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001268:	2300      	movs	r3, #0
 800126a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800126c:	2300      	movs	r3, #0
 800126e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001270:	463b      	mov	r3, r7
 8001272:	4619      	mov	r1, r3
 8001274:	4805      	ldr	r0, [pc, #20]	; (800128c <MX_TIM8_Init+0xc8>)
 8001276:	f004 fe89 	bl	8005f8c <HAL_TIMEx_ConfigBreakDeadTime>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d001      	beq.n	8001284 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8001280:	f7ff fcd1 	bl	8000c26 <Error_Handler>
  }

}
 8001284:	bf00      	nop
 8001286:	3750      	adds	r7, #80	; 0x50
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000238 	.word	0x20000238
 8001290:	40013400 	.word	0x40013400

08001294 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8001298:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <MX_TIM17_Init+0x44>)
 800129a:	4a10      	ldr	r2, [pc, #64]	; (80012dc <MX_TIM17_Init+0x48>)
 800129c:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 2047;
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <MX_TIM17_Init+0x44>)
 80012a0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80012a4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a6:	4b0c      	ldr	r3, [pc, #48]	; (80012d8 <MX_TIM17_Init+0x44>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 80012ac:	4b0a      	ldr	r3, [pc, #40]	; (80012d8 <MX_TIM17_Init+0x44>)
 80012ae:	2240      	movs	r2, #64	; 0x40
 80012b0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <MX_TIM17_Init+0x44>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80012b8:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <MX_TIM17_Init+0x44>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012be:	4b06      	ldr	r3, [pc, #24]	; (80012d8 <MX_TIM17_Init+0x44>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80012c4:	4804      	ldr	r0, [pc, #16]	; (80012d8 <MX_TIM17_Init+0x44>)
 80012c6:	f003 ff86 	bl	80051d6 <HAL_TIM_Base_Init>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80012d0:	f7ff fca9 	bl	8000c26 <Error_Handler>
  }

}
 80012d4:	bf00      	nop
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	20000284 	.word	0x20000284
 80012dc:	40014800 	.word	0x40014800

080012e0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b08a      	sub	sp, #40	; 0x28
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012e8:	f107 0314 	add.w	r3, r7, #20
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
 80012f6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a1f      	ldr	r2, [pc, #124]	; (800137c <HAL_TIM_Encoder_MspInit+0x9c>)
 80012fe:	4293      	cmp	r3, r2
 8001300:	d137      	bne.n	8001372 <HAL_TIM_Encoder_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001302:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001306:	4a1e      	ldr	r2, [pc, #120]	; (8001380 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001308:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800130c:	6613      	str	r3, [r2, #96]	; 0x60
 800130e:	4b1c      	ldr	r3, [pc, #112]	; (8001380 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001310:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001312:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800131a:	4b19      	ldr	r3, [pc, #100]	; (8001380 <HAL_TIM_Encoder_MspInit+0xa0>)
 800131c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800131e:	4a18      	ldr	r2, [pc, #96]	; (8001380 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001320:	f043 0304 	orr.w	r3, r3, #4
 8001324:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001326:	4b16      	ldr	r3, [pc, #88]	; (8001380 <HAL_TIM_Encoder_MspInit+0xa0>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	60fb      	str	r3, [r7, #12]
 8001330:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001332:	2303      	movs	r3, #3
 8001334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133e:	2300      	movs	r3, #0
 8001340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001342:	2302      	movs	r3, #2
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	480d      	ldr	r0, [pc, #52]	; (8001384 <HAL_TIM_Encoder_MspInit+0xa4>)
 800134e:	f002 f9d9 	bl	8003704 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	2019      	movs	r0, #25
 8001358:	f001 fd65 	bl	8002e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800135c:	2019      	movs	r0, #25
 800135e:	f001 fd7c 	bl	8002e5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8001362:	2200      	movs	r2, #0
 8001364:	2101      	movs	r1, #1
 8001366:	201a      	movs	r0, #26
 8001368:	f001 fd5d 	bl	8002e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800136c:	201a      	movs	r0, #26
 800136e:	f001 fd74 	bl	8002e5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001372:	bf00      	nop
 8001374:	3728      	adds	r7, #40	; 0x28
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40012c00 	.word	0x40012c00
 8001380:	40021000 	.word	0x40021000
 8001384:	48000800 	.word	0x48000800

08001388 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08c      	sub	sp, #48	; 0x30
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 031c 	add.w	r3, r7, #28
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80013a8:	d131      	bne.n	800140e <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80013aa:	4b30      	ldr	r3, [pc, #192]	; (800146c <HAL_TIM_Base_MspInit+0xe4>)
 80013ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ae:	4a2f      	ldr	r2, [pc, #188]	; (800146c <HAL_TIM_Base_MspInit+0xe4>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6593      	str	r3, [r2, #88]	; 0x58
 80013b6:	4b2d      	ldr	r3, [pc, #180]	; (800146c <HAL_TIM_Base_MspInit+0xe4>)
 80013b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	61bb      	str	r3, [r7, #24]
 80013c0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013c2:	4b2a      	ldr	r3, [pc, #168]	; (800146c <HAL_TIM_Base_MspInit+0xe4>)
 80013c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013c6:	4a29      	ldr	r2, [pc, #164]	; (800146c <HAL_TIM_Base_MspInit+0xe4>)
 80013c8:	f043 0301 	orr.w	r3, r3, #1
 80013cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80013ce:	4b27      	ldr	r3, [pc, #156]	; (800146c <HAL_TIM_Base_MspInit+0xe4>)
 80013d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013d2:	f003 0301 	and.w	r3, r3, #1
 80013d6:	617b      	str	r3, [r7, #20]
 80013d8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013da:	2301      	movs	r3, #1
 80013dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013de:	2302      	movs	r3, #2
 80013e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013ea:	2301      	movs	r3, #1
 80013ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ee:	f107 031c 	add.w	r3, r7, #28
 80013f2:	4619      	mov	r1, r3
 80013f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f8:	f002 f984 	bl	8003704 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2101      	movs	r1, #1
 8001400:	201c      	movs	r0, #28
 8001402:	f001 fd10 	bl	8002e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001406:	201c      	movs	r0, #28
 8001408:	f001 fd27 	bl	8002e5a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 800140c:	e02a      	b.n	8001464 <HAL_TIM_Base_MspInit+0xdc>
  else if(tim_baseHandle->Instance==TIM8)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4a17      	ldr	r2, [pc, #92]	; (8001470 <HAL_TIM_Base_MspInit+0xe8>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d10c      	bne.n	8001432 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001418:	4b14      	ldr	r3, [pc, #80]	; (800146c <HAL_TIM_Base_MspInit+0xe4>)
 800141a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800141c:	4a13      	ldr	r2, [pc, #76]	; (800146c <HAL_TIM_Base_MspInit+0xe4>)
 800141e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001422:	6613      	str	r3, [r2, #96]	; 0x60
 8001424:	4b11      	ldr	r3, [pc, #68]	; (800146c <HAL_TIM_Base_MspInit+0xe4>)
 8001426:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001428:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	693b      	ldr	r3, [r7, #16]
}
 8001430:	e018      	b.n	8001464 <HAL_TIM_Base_MspInit+0xdc>
  else if(tim_baseHandle->Instance==TIM17)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a0f      	ldr	r2, [pc, #60]	; (8001474 <HAL_TIM_Base_MspInit+0xec>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d113      	bne.n	8001464 <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800143c:	4b0b      	ldr	r3, [pc, #44]	; (800146c <HAL_TIM_Base_MspInit+0xe4>)
 800143e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001440:	4a0a      	ldr	r2, [pc, #40]	; (800146c <HAL_TIM_Base_MspInit+0xe4>)
 8001442:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001446:	6613      	str	r3, [r2, #96]	; 0x60
 8001448:	4b08      	ldr	r3, [pc, #32]	; (800146c <HAL_TIM_Base_MspInit+0xe4>)
 800144a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8001454:	2200      	movs	r2, #0
 8001456:	2101      	movs	r1, #1
 8001458:	201a      	movs	r0, #26
 800145a:	f001 fce4 	bl	8002e26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 800145e:	201a      	movs	r0, #26
 8001460:	f001 fcfb 	bl	8002e5a <HAL_NVIC_EnableIRQ>
}
 8001464:	bf00      	nop
 8001466:	3730      	adds	r7, #48	; 0x30
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	40021000 	.word	0x40021000
 8001470:	40013400 	.word	0x40013400
 8001474:	40014800 	.word	0x40014800

08001478 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001478:	480d      	ldr	r0, [pc, #52]	; (80014b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800147a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800147c:	480d      	ldr	r0, [pc, #52]	; (80014b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800147e:	490e      	ldr	r1, [pc, #56]	; (80014b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001480:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <LoopForever+0xe>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001484:	e002      	b.n	800148c <LoopCopyDataInit>

08001486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148a:	3304      	adds	r3, #4

0800148c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800148c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001490:	d3f9      	bcc.n	8001486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001492:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001494:	4c0b      	ldr	r4, [pc, #44]	; (80014c4 <LoopForever+0x16>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001498:	e001      	b.n	800149e <LoopFillZerobss>

0800149a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800149c:	3204      	adds	r2, #4

0800149e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a0:	d3fb      	bcc.n	800149a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80014a2:	f7ff fd9f 	bl	8000fe4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014a6:	f005 fbcd 	bl	8006c44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014aa:	f7ff faa1 	bl	80009f0 <main>

080014ae <LoopForever>:

LoopForever:
    b LoopForever
 80014ae:	e7fe      	b.n	80014ae <LoopForever>
  ldr   r0, =_estack
 80014b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 80014bc:	08007870 	.word	0x08007870
  ldr r2, =_sbss
 80014c0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 80014c4:	20000370 	.word	0x20000370

080014c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014c8:	e7fe      	b.n	80014c8 <ADC1_2_IRQHandler>

080014ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014ca:	b580      	push	{r7, lr}
 80014cc:	b082      	sub	sp, #8
 80014ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80014d0:	2300      	movs	r3, #0
 80014d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d4:	2003      	movs	r0, #3
 80014d6:	f001 fc9b 	bl	8002e10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014da:	2000      	movs	r0, #0
 80014dc:	f000 f80e 	bl	80014fc <HAL_InitTick>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d002      	beq.n	80014ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	71fb      	strb	r3, [r7, #7]
 80014ea:	e001      	b.n	80014f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014ec:	f7ff fc6a 	bl	8000dc4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014f0:	79fb      	ldrb	r3, [r7, #7]

}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
	...

080014fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b084      	sub	sp, #16
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001504:	2300      	movs	r3, #0
 8001506:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001508:	4b16      	ldr	r3, [pc, #88]	; (8001564 <HAL_InitTick+0x68>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d022      	beq.n	8001556 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <HAL_InitTick+0x6c>)
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	4b13      	ldr	r3, [pc, #76]	; (8001564 <HAL_InitTick+0x68>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800151c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001520:	fbb2 f3f3 	udiv	r3, r2, r3
 8001524:	4618      	mov	r0, r3
 8001526:	f001 fca6 	bl	8002e76 <HAL_SYSTICK_Config>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d10f      	bne.n	8001550 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2b0f      	cmp	r3, #15
 8001534:	d809      	bhi.n	800154a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001536:	2200      	movs	r2, #0
 8001538:	6879      	ldr	r1, [r7, #4]
 800153a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800153e:	f001 fc72 	bl	8002e26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001542:	4a0a      	ldr	r2, [pc, #40]	; (800156c <HAL_InitTick+0x70>)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6013      	str	r3, [r2, #0]
 8001548:	e007      	b.n	800155a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	73fb      	strb	r3, [r7, #15]
 800154e:	e004      	b.n	800155a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	73fb      	strb	r3, [r7, #15]
 8001554:	e001      	b.n	800155a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800155a:	7bfb      	ldrb	r3, [r7, #15]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3710      	adds	r7, #16
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	2000000c 	.word	0x2000000c
 8001568:	20000004 	.word	0x20000004
 800156c:	20000008 	.word	0x20000008

08001570 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <HAL_IncTick+0x1c>)
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <HAL_IncTick+0x20>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	4413      	add	r3, r2
 800157e:	4a03      	ldr	r2, [pc, #12]	; (800158c <HAL_IncTick+0x1c>)
 8001580:	6013      	str	r3, [r2, #0]
}
 8001582:	bf00      	nop
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr
 800158c:	20000368 	.word	0x20000368
 8001590:	2000000c 	.word	0x2000000c

08001594 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001594:	b480      	push	{r7}
 8001596:	af00      	add	r7, sp, #0
  return uwTick;
 8001598:	4b03      	ldr	r3, [pc, #12]	; (80015a8 <HAL_GetTick+0x14>)
 800159a:	681b      	ldr	r3, [r3, #0]
}
 800159c:	4618      	mov	r0, r3
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	20000368 	.word	0x20000368

080015ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b084      	sub	sp, #16
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015b4:	f7ff ffee 	bl	8001594 <HAL_GetTick>
 80015b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80015c4:	d004      	beq.n	80015d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_Delay+0x40>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	4413      	add	r3, r2
 80015ce:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015d0:	bf00      	nop
 80015d2:	f7ff ffdf 	bl	8001594 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	68fa      	ldr	r2, [r7, #12]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d8f7      	bhi.n	80015d2 <HAL_Delay+0x26>
  {
  }
}
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	2000000c 	.word	0x2000000c

080015f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	431a      	orrs	r2, r3
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	609a      	str	r2, [r3, #8]
}
 800160a:	bf00      	nop
 800160c:	370c      	adds	r7, #12
 800160e:	46bd      	mov	sp, r7
 8001610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001614:	4770      	bx	lr

08001616 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001616:	b480      	push	{r7}
 8001618:	b083      	sub	sp, #12
 800161a:	af00      	add	r7, sp, #0
 800161c:	6078      	str	r0, [r7, #4]
 800161e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	609a      	str	r2, [r3, #8]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001658:	b490      	push	{r4, r7}
 800165a:	b084      	sub	sp, #16
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
 8001664:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	3360      	adds	r3, #96	; 0x60
 800166a:	461a      	mov	r2, r3
 800166c:	68bb      	ldr	r3, [r7, #8]
 800166e:	009b      	lsls	r3, r3, #2
 8001670:	4413      	add	r3, r2
 8001672:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8001674:	6822      	ldr	r2, [r4, #0]
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <LL_ADC_SetOffset+0x40>)
 8001678:	4013      	ands	r3, r2
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001680:	683a      	ldr	r2, [r7, #0]
 8001682:	430a      	orrs	r2, r1
 8001684:	4313      	orrs	r3, r2
 8001686:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800168a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800168c:	bf00      	nop
 800168e:	3710      	adds	r7, #16
 8001690:	46bd      	mov	sp, r7
 8001692:	bc90      	pop	{r4, r7}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	03fff000 	.word	0x03fff000

0800169c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800169c:	b490      	push	{r4, r7}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	3360      	adds	r3, #96	; 0x60
 80016aa:	461a      	mov	r2, r3
 80016ac:	683b      	ldr	r3, [r7, #0]
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	4413      	add	r3, r2
 80016b2:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80016b4:	6823      	ldr	r3, [r4, #0]
 80016b6:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80016ba:	4618      	mov	r0, r3
 80016bc:	3708      	adds	r7, #8
 80016be:	46bd      	mov	sp, r7
 80016c0:	bc90      	pop	{r4, r7}
 80016c2:	4770      	bx	lr

080016c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80016c4:	b490      	push	{r4, r7}
 80016c6:	b084      	sub	sp, #16
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	3360      	adds	r3, #96	; 0x60
 80016d4:	461a      	mov	r2, r3
 80016d6:	68bb      	ldr	r3, [r7, #8]
 80016d8:	009b      	lsls	r3, r3, #2
 80016da:	4413      	add	r3, r2
 80016dc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80016de:	6823      	ldr	r3, [r4, #0]
 80016e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80016ea:	bf00      	nop
 80016ec:	3710      	adds	r7, #16
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc90      	pop	{r4, r7}
 80016f2:	4770      	bx	lr

080016f4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80016f4:	b490      	push	{r4, r7}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	60f8      	str	r0, [r7, #12]
 80016fc:	60b9      	str	r1, [r7, #8]
 80016fe:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	3360      	adds	r3, #96	; 0x60
 8001704:	461a      	mov	r2, r3
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	4413      	add	r3, r2
 800170c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800170e:	6823      	ldr	r3, [r4, #0]
 8001710:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4313      	orrs	r3, r2
 8001718:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bc90      	pop	{r4, r7}
 8001722:	4770      	bx	lr

08001724 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001724:	b490      	push	{r4, r7}
 8001726:	b084      	sub	sp, #16
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	3360      	adds	r3, #96	; 0x60
 8001734:	461a      	mov	r2, r3
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	009b      	lsls	r3, r3, #2
 800173a:	4413      	add	r3, r2
 800173c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800173e:	6823      	ldr	r3, [r4, #0]
 8001740:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	4313      	orrs	r3, r2
 8001748:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bc90      	pop	{r4, r7}
 8001752:	4770      	bx	lr

08001754 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
 800175c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	695b      	ldr	r3, [r3, #20]
 8001762:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	431a      	orrs	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	615a      	str	r2, [r3, #20]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr

0800177a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800177a:	b490      	push	{r4, r7}
 800177c:	b084      	sub	sp, #16
 800177e:	af00      	add	r7, sp, #0
 8001780:	60f8      	str	r0, [r7, #12]
 8001782:	60b9      	str	r1, [r7, #8]
 8001784:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	3330      	adds	r3, #48	; 0x30
 800178a:	461a      	mov	r2, r3
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	0a1b      	lsrs	r3, r3, #8
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	f003 030c 	and.w	r3, r3, #12
 8001796:	4413      	add	r3, r2
 8001798:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800179a:	6822      	ldr	r2, [r4, #0]
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	f003 031f 	and.w	r3, r3, #31
 80017a2:	211f      	movs	r1, #31
 80017a4:	fa01 f303 	lsl.w	r3, r1, r3
 80017a8:	43db      	mvns	r3, r3
 80017aa:	401a      	ands	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	0e9b      	lsrs	r3, r3, #26
 80017b0:	f003 011f 	and.w	r1, r3, #31
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	f003 031f 	and.w	r3, r3, #31
 80017ba:	fa01 f303 	lsl.w	r3, r1, r3
 80017be:	4313      	orrs	r3, r2
 80017c0:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017c2:	bf00      	nop
 80017c4:	3710      	adds	r7, #16
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bc90      	pop	{r4, r7}
 80017ca:	4770      	bx	lr

080017cc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80017cc:	b490      	push	{r4, r7}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	3314      	adds	r3, #20
 80017dc:	461a      	mov	r2, r3
 80017de:	68bb      	ldr	r3, [r7, #8]
 80017e0:	0e5b      	lsrs	r3, r3, #25
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	4413      	add	r3, r2
 80017ea:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80017ec:	6822      	ldr	r2, [r4, #0]
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	0d1b      	lsrs	r3, r3, #20
 80017f2:	f003 031f 	and.w	r3, r3, #31
 80017f6:	2107      	movs	r1, #7
 80017f8:	fa01 f303 	lsl.w	r3, r1, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	401a      	ands	r2, r3
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	0d1b      	lsrs	r3, r3, #20
 8001804:	f003 031f 	and.w	r3, r3, #31
 8001808:	6879      	ldr	r1, [r7, #4]
 800180a:	fa01 f303 	lsl.w	r3, r1, r3
 800180e:	4313      	orrs	r3, r2
 8001810:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001812:	bf00      	nop
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bc90      	pop	{r4, r7}
 800181a:	4770      	bx	lr

0800181c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800181c:	b480      	push	{r7}
 800181e:	b085      	sub	sp, #20
 8001820:	af00      	add	r7, sp, #0
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800182e:	68bb      	ldr	r3, [r7, #8]
 8001830:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001834:	43db      	mvns	r3, r3
 8001836:	401a      	ands	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f003 0318 	and.w	r3, r3, #24
 800183e:	4908      	ldr	r1, [pc, #32]	; (8001860 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001840:	40d9      	lsrs	r1, r3
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	400b      	ands	r3, r1
 8001846:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800184a:	431a      	orrs	r2, r3
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001852:	bf00      	nop
 8001854:	3714      	adds	r7, #20
 8001856:	46bd      	mov	sp, r7
 8001858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	0007ffff 	.word	0x0007ffff

08001864 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001874:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	6093      	str	r3, [r2, #8]
}
 800187c:	bf00      	nop
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001898:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800189c:	d101      	bne.n	80018a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800189e:	2301      	movs	r3, #1
 80018a0:	e000      	b.n	80018a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80018c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80018c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80018ec:	d101      	bne.n	80018f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80018ee:	2301      	movs	r3, #1
 80018f0:	e000      	b.n	80018f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 0301 	and.w	r3, r3, #1
 8001910:	2b01      	cmp	r3, #1
 8001912:	d101      	bne.n	8001918 <LL_ADC_IsEnabled+0x18>
 8001914:	2301      	movs	r3, #1
 8001916:	e000      	b.n	800191a <LL_ADC_IsEnabled+0x1a>
 8001918:	2300      	movs	r3, #0
}
 800191a:	4618      	mov	r0, r3
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	2b04      	cmp	r3, #4
 8001938:	d101      	bne.n	800193e <LL_ADC_REG_IsConversionOngoing+0x18>
 800193a:	2301      	movs	r3, #1
 800193c:	e000      	b.n	8001940 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800193e:	2300      	movs	r3, #0
}
 8001940:	4618      	mov	r0, r3
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	2b08      	cmp	r3, #8
 800195e:	d101      	bne.n	8001964 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001960:	2301      	movs	r3, #1
 8001962:	e000      	b.n	8001966 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001974:	b590      	push	{r4, r7, lr}
 8001976:	b089      	sub	sp, #36	; 0x24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800197c:	2300      	movs	r3, #0
 800197e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001980:	2300      	movs	r3, #0
 8001982:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e1ad      	b.n	8001cea <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001998:	2b00      	cmp	r3, #0
 800199a:	d109      	bne.n	80019b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f7fe fcb3 	bl	8000308 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2200      	movs	r2, #0
 80019ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff ff67 	bl	8001888 <LL_ADC_IsDeepPowerDownEnabled>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d004      	beq.n	80019ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff4d 	bl	8001864 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7ff ff82 	bl	80018d8 <LL_ADC_IsInternalRegulatorEnabled>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d113      	bne.n	8001a02 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff ff66 	bl	80018b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80019e4:	4b9e      	ldr	r3, [pc, #632]	; (8001c60 <HAL_ADC_Init+0x2ec>)
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	099b      	lsrs	r3, r3, #6
 80019ea:	4a9e      	ldr	r2, [pc, #632]	; (8001c64 <HAL_ADC_Init+0x2f0>)
 80019ec:	fba2 2303 	umull	r2, r3, r2, r3
 80019f0:	099b      	lsrs	r3, r3, #6
 80019f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019f4:	e002      	b.n	80019fc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80019f6:	68bb      	ldr	r3, [r7, #8]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1f9      	bne.n	80019f6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7ff ff66 	bl	80018d8 <LL_ADC_IsInternalRegulatorEnabled>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10d      	bne.n	8001a2e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a16:	f043 0210 	orr.w	r2, r3, #16
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a22:	f043 0201 	orr.w	r2, r3, #1
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	4618      	mov	r0, r3
 8001a34:	f7ff ff77 	bl	8001926 <LL_ADC_REG_IsConversionOngoing>
 8001a38:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a3e:	f003 0310 	and.w	r3, r3, #16
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	f040 8148 	bne.w	8001cd8 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a48:	697b      	ldr	r3, [r7, #20]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	f040 8144 	bne.w	8001cd8 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a54:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001a58:	f043 0202 	orr.w	r2, r3, #2
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff ff4b 	bl	8001900 <LL_ADC_IsEnabled>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d141      	bne.n	8001af4 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001a78:	d004      	beq.n	8001a84 <HAL_ADC_Init+0x110>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a7a      	ldr	r2, [pc, #488]	; (8001c68 <HAL_ADC_Init+0x2f4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d10f      	bne.n	8001aa4 <HAL_ADC_Init+0x130>
 8001a84:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001a88:	f7ff ff3a 	bl	8001900 <LL_ADC_IsEnabled>
 8001a8c:	4604      	mov	r4, r0
 8001a8e:	4876      	ldr	r0, [pc, #472]	; (8001c68 <HAL_ADC_Init+0x2f4>)
 8001a90:	f7ff ff36 	bl	8001900 <LL_ADC_IsEnabled>
 8001a94:	4603      	mov	r3, r0
 8001a96:	4323      	orrs	r3, r4
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	bf0c      	ite	eq
 8001a9c:	2301      	moveq	r3, #1
 8001a9e:	2300      	movne	r3, #0
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	e012      	b.n	8001aca <HAL_ADC_Init+0x156>
 8001aa4:	4871      	ldr	r0, [pc, #452]	; (8001c6c <HAL_ADC_Init+0x2f8>)
 8001aa6:	f7ff ff2b 	bl	8001900 <LL_ADC_IsEnabled>
 8001aaa:	4604      	mov	r4, r0
 8001aac:	4870      	ldr	r0, [pc, #448]	; (8001c70 <HAL_ADC_Init+0x2fc>)
 8001aae:	f7ff ff27 	bl	8001900 <LL_ADC_IsEnabled>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	431c      	orrs	r4, r3
 8001ab6:	486f      	ldr	r0, [pc, #444]	; (8001c74 <HAL_ADC_Init+0x300>)
 8001ab8:	f7ff ff22 	bl	8001900 <LL_ADC_IsEnabled>
 8001abc:	4603      	mov	r3, r0
 8001abe:	4323      	orrs	r3, r4
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	bf0c      	ite	eq
 8001ac4:	2301      	moveq	r3, #1
 8001ac6:	2300      	movne	r3, #0
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d012      	beq.n	8001af4 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ad6:	d004      	beq.n	8001ae2 <HAL_ADC_Init+0x16e>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	4a62      	ldr	r2, [pc, #392]	; (8001c68 <HAL_ADC_Init+0x2f4>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ADC_Init+0x172>
 8001ae2:	4a65      	ldr	r2, [pc, #404]	; (8001c78 <HAL_ADC_Init+0x304>)
 8001ae4:	e000      	b.n	8001ae8 <HAL_ADC_Init+0x174>
 8001ae6:	4a65      	ldr	r2, [pc, #404]	; (8001c7c <HAL_ADC_Init+0x308>)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	4619      	mov	r1, r3
 8001aee:	4610      	mov	r0, r2
 8001af0:	f7ff fd7e 	bl	80015f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	7f5b      	ldrb	r3, [r3, #29]
 8001af8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001afe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001b04:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001b0a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b12:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d106      	bne.n	8001b30 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b26:	3b01      	subs	r3, #1
 8001b28:	045b      	lsls	r3, r3, #17
 8001b2a:	69ba      	ldr	r2, [r7, #24]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d009      	beq.n	8001b4c <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b44:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	4b4b      	ldr	r3, [pc, #300]	; (8001c80 <HAL_ADC_Init+0x30c>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6812      	ldr	r2, [r2, #0]
 8001b5a:	69b9      	ldr	r1, [r7, #24]
 8001b5c:	430b      	orrs	r3, r1
 8001b5e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	430a      	orrs	r2, r1
 8001b74:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff fed3 	bl	8001926 <LL_ADC_REG_IsConversionOngoing>
 8001b80:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4618      	mov	r0, r3
 8001b88:	f7ff fee0 	bl	800194c <LL_ADC_INJ_IsConversionOngoing>
 8001b8c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d17f      	bne.n	8001c94 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d17c      	bne.n	8001c94 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001b9e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001ba6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bb6:	f023 0302 	bic.w	r3, r3, #2
 8001bba:	687a      	ldr	r2, [r7, #4]
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	69b9      	ldr	r1, [r7, #24]
 8001bc0:	430b      	orrs	r3, r1
 8001bc2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d017      	beq.n	8001bfc <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	691a      	ldr	r2, [r3, #16]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001bda:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001be4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001be8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	6911      	ldr	r1, [r2, #16]
 8001bf0:	687a      	ldr	r2, [r7, #4]
 8001bf2:	6812      	ldr	r2, [r2, #0]
 8001bf4:	430b      	orrs	r3, r1
 8001bf6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001bfa:	e013      	b.n	8001c24 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	691a      	ldr	r2, [r3, #16]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c0a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001c1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c20:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d12a      	bne.n	8001c84 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	691b      	ldr	r3, [r3, #16]
 8001c34:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001c38:	f023 0304 	bic.w	r3, r3, #4
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001c40:	687a      	ldr	r2, [r7, #4]
 8001c42:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c44:	4311      	orrs	r1, r2
 8001c46:	687a      	ldr	r2, [r7, #4]
 8001c48:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001c4a:	4311      	orrs	r1, r2
 8001c4c:	687a      	ldr	r2, [r7, #4]
 8001c4e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001c50:	430a      	orrs	r2, r1
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f042 0201 	orr.w	r2, r2, #1
 8001c5c:	611a      	str	r2, [r3, #16]
 8001c5e:	e019      	b.n	8001c94 <HAL_ADC_Init+0x320>
 8001c60:	20000004 	.word	0x20000004
 8001c64:	053e2d63 	.word	0x053e2d63
 8001c68:	50000100 	.word	0x50000100
 8001c6c:	50000400 	.word	0x50000400
 8001c70:	50000500 	.word	0x50000500
 8001c74:	50000600 	.word	0x50000600
 8001c78:	50000300 	.word	0x50000300
 8001c7c:	50000700 	.word	0x50000700
 8001c80:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	691a      	ldr	r2, [r3, #16]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f022 0201 	bic.w	r2, r2, #1
 8001c92:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	695b      	ldr	r3, [r3, #20]
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d10c      	bne.n	8001cb6 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	f023 010f 	bic.w	r1, r3, #15
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	1e5a      	subs	r2, r3, #1
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	631a      	str	r2, [r3, #48]	; 0x30
 8001cb4:	e007      	b.n	8001cc6 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f022 020f 	bic.w	r2, r2, #15
 8001cc4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cca:	f023 0303 	bic.w	r3, r3, #3
 8001cce:	f043 0201 	orr.w	r2, r3, #1
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	65da      	str	r2, [r3, #92]	; 0x5c
 8001cd6:	e007      	b.n	8001ce8 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cdc:	f043 0210 	orr.w	r2, r3, #16
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001ce4:	2301      	movs	r3, #1
 8001ce6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001ce8:	7ffb      	ldrb	r3, [r7, #31]
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3724      	adds	r7, #36	; 0x24
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd90      	pop	{r4, r7, pc}
 8001cf2:	bf00      	nop

08001cf4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b0a6      	sub	sp, #152	; 0x98
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001d04:	2300      	movs	r3, #0
 8001d06:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d101      	bne.n	8001d16 <HAL_ADC_ConfigChannel+0x22>
 8001d12:	2302      	movs	r3, #2
 8001d14:	e38e      	b.n	8002434 <HAL_ADC_ConfigChannel+0x740>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4618      	mov	r0, r3
 8001d24:	f7ff fdff 	bl	8001926 <LL_ADC_REG_IsConversionOngoing>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f040 836f 	bne.w	800240e <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6818      	ldr	r0, [r3, #0]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	6859      	ldr	r1, [r3, #4]
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	f7ff fd1c 	bl	800177a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f7ff fded 	bl	8001926 <LL_ADC_REG_IsConversionOngoing>
 8001d4c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7ff fdf9 	bl	800194c <LL_ADC_INJ_IsConversionOngoing>
 8001d5a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001d5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	f040 817b 	bne.w	800205e <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001d68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	f040 8176 	bne.w	800205e <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d7a:	d10f      	bne.n	8001d9c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6818      	ldr	r0, [r3, #0]
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	2200      	movs	r2, #0
 8001d86:	4619      	mov	r1, r3
 8001d88:	f7ff fd20 	bl	80017cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7ff fcdd 	bl	8001754 <LL_ADC_SetSamplingTimeCommonConfig>
 8001d9a:	e00e      	b.n	8001dba <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6818      	ldr	r0, [r3, #0]
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	6819      	ldr	r1, [r3, #0]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	461a      	mov	r2, r3
 8001daa:	f7ff fd0f 	bl	80017cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f7ff fccd 	bl	8001754 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	695a      	ldr	r2, [r3, #20]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68db      	ldr	r3, [r3, #12]
 8001dc4:	08db      	lsrs	r3, r3, #3
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	2b04      	cmp	r3, #4
 8001dda:	d022      	beq.n	8001e22 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6818      	ldr	r0, [r3, #0]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	6919      	ldr	r1, [r3, #16]
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001dec:	f7ff fc34 	bl	8001658 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6818      	ldr	r0, [r3, #0]
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	6919      	ldr	r1, [r3, #16]
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	f7ff fc79 	bl	80016f4 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6818      	ldr	r0, [r3, #0]
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	6919      	ldr	r1, [r3, #16]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	7f1b      	ldrb	r3, [r3, #28]
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d102      	bne.n	8001e18 <HAL_ADC_ConfigChannel+0x124>
 8001e12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e16:	e000      	b.n	8001e1a <HAL_ADC_ConfigChannel+0x126>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	f7ff fc82 	bl	8001724 <LL_ADC_SetOffsetSaturation>
 8001e20:	e11d      	b.n	800205e <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	2100      	movs	r1, #0
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f7ff fc37 	bl	800169c <LL_ADC_GetOffsetChannel>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d10a      	bne.n	8001e4e <HAL_ADC_ConfigChannel+0x15a>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff fc2c 	bl	800169c <LL_ADC_GetOffsetChannel>
 8001e44:	4603      	mov	r3, r0
 8001e46:	0e9b      	lsrs	r3, r3, #26
 8001e48:	f003 021f 	and.w	r2, r3, #31
 8001e4c:	e012      	b.n	8001e74 <HAL_ADC_ConfigChannel+0x180>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2100      	movs	r1, #0
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fc21 	bl	800169c <LL_ADC_GetOffsetChannel>
 8001e5a:	4603      	mov	r3, r0
 8001e5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001e64:	fa93 f3a3 	rbit	r3, r3
 8001e68:	67fb      	str	r3, [r7, #124]	; 0x7c
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001e6c:	fab3 f383 	clz	r3, r3
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	461a      	mov	r2, r3
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d105      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x198>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	0e9b      	lsrs	r3, r3, #26
 8001e86:	f003 031f 	and.w	r3, r3, #31
 8001e8a:	e00a      	b.n	8001ea2 <HAL_ADC_ConfigChannel+0x1ae>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001e94:	fa93 f3a3 	rbit	r3, r3
 8001e98:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8001e9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001e9c:	fab3 f383 	clz	r3, r3
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	429a      	cmp	r2, r3
 8001ea4:	d106      	bne.n	8001eb4 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2200      	movs	r2, #0
 8001eac:	2100      	movs	r1, #0
 8001eae:	4618      	mov	r0, r3
 8001eb0:	f7ff fc08 	bl	80016c4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2101      	movs	r1, #1
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7ff fbee 	bl	800169c <LL_ADC_GetOffsetChannel>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d10a      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x1ec>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2101      	movs	r1, #1
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fbe3 	bl	800169c <LL_ADC_GetOffsetChannel>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	0e9b      	lsrs	r3, r3, #26
 8001eda:	f003 021f 	and.w	r2, r3, #31
 8001ede:	e010      	b.n	8001f02 <HAL_ADC_ConfigChannel+0x20e>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f7ff fbd8 	bl	800169c <LL_ADC_GetOffsetChannel>
 8001eec:	4603      	mov	r3, r0
 8001eee:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ef2:	fa93 f3a3 	rbit	r3, r3
 8001ef6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001ef8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8001efa:	fab3 f383 	clz	r3, r3
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d105      	bne.n	8001f1a <HAL_ADC_ConfigChannel+0x226>
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	0e9b      	lsrs	r3, r3, #26
 8001f14:	f003 031f 	and.w	r3, r3, #31
 8001f18:	e00a      	b.n	8001f30 <HAL_ADC_ConfigChannel+0x23c>
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f22:	fa93 f3a3 	rbit	r3, r3
 8001f26:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8001f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f2a:	fab3 f383 	clz	r3, r3
 8001f2e:	b2db      	uxtb	r3, r3
 8001f30:	429a      	cmp	r2, r3
 8001f32:	d106      	bne.n	8001f42 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	2101      	movs	r1, #1
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f7ff fbc1 	bl	80016c4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2102      	movs	r1, #2
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff fba7 	bl	800169c <LL_ADC_GetOffsetChannel>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d10a      	bne.n	8001f6e <HAL_ADC_ConfigChannel+0x27a>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2102      	movs	r1, #2
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff fb9c 	bl	800169c <LL_ADC_GetOffsetChannel>
 8001f64:	4603      	mov	r3, r0
 8001f66:	0e9b      	lsrs	r3, r3, #26
 8001f68:	f003 021f 	and.w	r2, r3, #31
 8001f6c:	e010      	b.n	8001f90 <HAL_ADC_ConfigChannel+0x29c>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2102      	movs	r1, #2
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff fb91 	bl	800169c <LL_ADC_GetOffsetChannel>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f80:	fa93 f3a3 	rbit	r3, r3
 8001f84:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8001f86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f88:	fab3 f383 	clz	r3, r3
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	461a      	mov	r2, r3
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d105      	bne.n	8001fa8 <HAL_ADC_ConfigChannel+0x2b4>
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	0e9b      	lsrs	r3, r3, #26
 8001fa2:	f003 031f 	and.w	r3, r3, #31
 8001fa6:	e00a      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x2ca>
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001fb0:	fa93 f3a3 	rbit	r3, r3
 8001fb4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8001fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb8:	fab3 f383 	clz	r3, r3
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d106      	bne.n	8001fd0 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	2102      	movs	r1, #2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff fb7a 	bl	80016c4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	2103      	movs	r1, #3
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f7ff fb60 	bl	800169c <LL_ADC_GetOffsetChannel>
 8001fdc:	4603      	mov	r3, r0
 8001fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d10a      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x308>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2103      	movs	r1, #3
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fb55 	bl	800169c <LL_ADC_GetOffsetChannel>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	0e9b      	lsrs	r3, r3, #26
 8001ff6:	f003 021f 	and.w	r2, r3, #31
 8001ffa:	e010      	b.n	800201e <HAL_ADC_ConfigChannel+0x32a>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	2103      	movs	r1, #3
 8002002:	4618      	mov	r0, r3
 8002004:	f7ff fb4a 	bl	800169c <LL_ADC_GetOffsetChannel>
 8002008:	4603      	mov	r3, r0
 800200a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800200c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800200e:	fa93 f3a3 	rbit	r3, r3
 8002012:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002016:	fab3 f383 	clz	r3, r3
 800201a:	b2db      	uxtb	r3, r3
 800201c:	461a      	mov	r2, r3
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002026:	2b00      	cmp	r3, #0
 8002028:	d105      	bne.n	8002036 <HAL_ADC_ConfigChannel+0x342>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	0e9b      	lsrs	r3, r3, #26
 8002030:	f003 031f 	and.w	r3, r3, #31
 8002034:	e00a      	b.n	800204c <HAL_ADC_ConfigChannel+0x358>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8002044:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002046:	fab3 f383 	clz	r3, r3
 800204a:	b2db      	uxtb	r3, r3
 800204c:	429a      	cmp	r2, r3
 800204e:	d106      	bne.n	800205e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2200      	movs	r2, #0
 8002056:	2103      	movs	r1, #3
 8002058:	4618      	mov	r0, r3
 800205a:	f7ff fb33 	bl	80016c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4618      	mov	r0, r3
 8002064:	f7ff fc4c 	bl	8001900 <LL_ADC_IsEnabled>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	f040 810c 	bne.w	8002288 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6818      	ldr	r0, [r3, #0]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	6819      	ldr	r1, [r3, #0]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	461a      	mov	r2, r3
 800207e:	f7ff fbcd 	bl	800181c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	4aaf      	ldr	r2, [pc, #700]	; (8002344 <HAL_ADC_ConfigChannel+0x650>)
 8002088:	4293      	cmp	r3, r2
 800208a:	f040 80fd 	bne.w	8002288 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800209a:	2b00      	cmp	r3, #0
 800209c:	d10b      	bne.n	80020b6 <HAL_ADC_ConfigChannel+0x3c2>
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	0e9b      	lsrs	r3, r3, #26
 80020a4:	3301      	adds	r3, #1
 80020a6:	f003 031f 	and.w	r3, r3, #31
 80020aa:	2b09      	cmp	r3, #9
 80020ac:	bf94      	ite	ls
 80020ae:	2301      	movls	r3, #1
 80020b0:	2300      	movhi	r3, #0
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	e012      	b.n	80020dc <HAL_ADC_ConfigChannel+0x3e8>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020be:	fa93 f3a3 	rbit	r3, r3
 80020c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80020c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80020c6:	fab3 f383 	clz	r3, r3
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	3301      	adds	r3, #1
 80020ce:	f003 031f 	and.w	r3, r3, #31
 80020d2:	2b09      	cmp	r3, #9
 80020d4:	bf94      	ite	ls
 80020d6:	2301      	movls	r3, #1
 80020d8:	2300      	movhi	r3, #0
 80020da:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d064      	beq.n	80021aa <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d107      	bne.n	80020fc <HAL_ADC_ConfigChannel+0x408>
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	0e9b      	lsrs	r3, r3, #26
 80020f2:	3301      	adds	r3, #1
 80020f4:	069b      	lsls	r3, r3, #26
 80020f6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020fa:	e00e      	b.n	800211a <HAL_ADC_ConfigChannel+0x426>
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002104:	fa93 f3a3 	rbit	r3, r3
 8002108:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800210a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800210c:	fab3 f383 	clz	r3, r3
 8002110:	b2db      	uxtb	r3, r3
 8002112:	3301      	adds	r3, #1
 8002114:	069b      	lsls	r3, r3, #26
 8002116:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002122:	2b00      	cmp	r3, #0
 8002124:	d109      	bne.n	800213a <HAL_ADC_ConfigChannel+0x446>
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	0e9b      	lsrs	r3, r3, #26
 800212c:	3301      	adds	r3, #1
 800212e:	f003 031f 	and.w	r3, r3, #31
 8002132:	2101      	movs	r1, #1
 8002134:	fa01 f303 	lsl.w	r3, r1, r3
 8002138:	e010      	b.n	800215c <HAL_ADC_ConfigChannel+0x468>
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002142:	fa93 f3a3 	rbit	r3, r3
 8002146:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002148:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214a:	fab3 f383 	clz	r3, r3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	3301      	adds	r3, #1
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	2101      	movs	r1, #1
 8002158:	fa01 f303 	lsl.w	r3, r1, r3
 800215c:	ea42 0103 	orr.w	r1, r2, r3
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002168:	2b00      	cmp	r3, #0
 800216a:	d10a      	bne.n	8002182 <HAL_ADC_ConfigChannel+0x48e>
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	0e9b      	lsrs	r3, r3, #26
 8002172:	3301      	adds	r3, #1
 8002174:	f003 021f 	and.w	r2, r3, #31
 8002178:	4613      	mov	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4413      	add	r3, r2
 800217e:	051b      	lsls	r3, r3, #20
 8002180:	e011      	b.n	80021a6 <HAL_ADC_ConfigChannel+0x4b2>
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800218a:	fa93 f3a3 	rbit	r3, r3
 800218e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002192:	fab3 f383 	clz	r3, r3
 8002196:	b2db      	uxtb	r3, r3
 8002198:	3301      	adds	r3, #1
 800219a:	f003 021f 	and.w	r2, r3, #31
 800219e:	4613      	mov	r3, r2
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	4413      	add	r3, r2
 80021a4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021a6:	430b      	orrs	r3, r1
 80021a8:	e069      	b.n	800227e <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d107      	bne.n	80021c6 <HAL_ADC_ConfigChannel+0x4d2>
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	0e9b      	lsrs	r3, r3, #26
 80021bc:	3301      	adds	r3, #1
 80021be:	069b      	lsls	r3, r3, #26
 80021c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021c4:	e00e      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x4f0>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021cc:	6a3b      	ldr	r3, [r7, #32]
 80021ce:	fa93 f3a3 	rbit	r3, r3
 80021d2:	61fb      	str	r3, [r7, #28]
  return result;
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	3301      	adds	r3, #1
 80021de:	069b      	lsls	r3, r3, #26
 80021e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d109      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x510>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	0e9b      	lsrs	r3, r3, #26
 80021f6:	3301      	adds	r3, #1
 80021f8:	f003 031f 	and.w	r3, r3, #31
 80021fc:	2101      	movs	r1, #1
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	e010      	b.n	8002226 <HAL_ADC_ConfigChannel+0x532>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	fa93 f3a3 	rbit	r3, r3
 8002210:	617b      	str	r3, [r7, #20]
  return result;
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	fab3 f383 	clz	r3, r3
 8002218:	b2db      	uxtb	r3, r3
 800221a:	3301      	adds	r3, #1
 800221c:	f003 031f 	and.w	r3, r3, #31
 8002220:	2101      	movs	r1, #1
 8002222:	fa01 f303 	lsl.w	r3, r1, r3
 8002226:	ea42 0103 	orr.w	r1, r2, r3
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10d      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x55e>
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	0e9b      	lsrs	r3, r3, #26
 800223c:	3301      	adds	r3, #1
 800223e:	f003 021f 	and.w	r2, r3, #31
 8002242:	4613      	mov	r3, r2
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	4413      	add	r3, r2
 8002248:	3b1e      	subs	r3, #30
 800224a:	051b      	lsls	r3, r3, #20
 800224c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002250:	e014      	b.n	800227c <HAL_ADC_ConfigChannel+0x588>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	fa93 f3a3 	rbit	r3, r3
 800225e:	60fb      	str	r3, [r7, #12]
  return result;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	fab3 f383 	clz	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	3301      	adds	r3, #1
 800226a:	f003 021f 	and.w	r2, r3, #31
 800226e:	4613      	mov	r3, r2
 8002270:	005b      	lsls	r3, r3, #1
 8002272:	4413      	add	r3, r2
 8002274:	3b1e      	subs	r3, #30
 8002276:	051b      	lsls	r3, r3, #20
 8002278:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800227c:	430b      	orrs	r3, r1
 800227e:	683a      	ldr	r2, [r7, #0]
 8002280:	6892      	ldr	r2, [r2, #8]
 8002282:	4619      	mov	r1, r3
 8002284:	f7ff faa2 	bl	80017cc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681a      	ldr	r2, [r3, #0]
 800228c:	4b2e      	ldr	r3, [pc, #184]	; (8002348 <HAL_ADC_ConfigChannel+0x654>)
 800228e:	4013      	ands	r3, r2
 8002290:	2b00      	cmp	r3, #0
 8002292:	f000 80c9 	beq.w	8002428 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800229e:	d004      	beq.n	80022aa <HAL_ADC_ConfigChannel+0x5b6>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a29      	ldr	r2, [pc, #164]	; (800234c <HAL_ADC_ConfigChannel+0x658>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d101      	bne.n	80022ae <HAL_ADC_ConfigChannel+0x5ba>
 80022aa:	4b29      	ldr	r3, [pc, #164]	; (8002350 <HAL_ADC_ConfigChannel+0x65c>)
 80022ac:	e000      	b.n	80022b0 <HAL_ADC_ConfigChannel+0x5bc>
 80022ae:	4b29      	ldr	r3, [pc, #164]	; (8002354 <HAL_ADC_ConfigChannel+0x660>)
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff f9c3 	bl	800163c <LL_ADC_GetCommonPathInternalCh>
 80022b6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a26      	ldr	r2, [pc, #152]	; (8002358 <HAL_ADC_ConfigChannel+0x664>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d004      	beq.n	80022ce <HAL_ADC_ConfigChannel+0x5da>
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a24      	ldr	r2, [pc, #144]	; (800235c <HAL_ADC_ConfigChannel+0x668>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d14e      	bne.n	800236c <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80022ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80022d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d148      	bne.n	800236c <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022e2:	d005      	beq.n	80022f0 <HAL_ADC_ConfigChannel+0x5fc>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a1d      	ldr	r2, [pc, #116]	; (8002360 <HAL_ADC_ConfigChannel+0x66c>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	f040 8099 	bne.w	8002422 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80022f8:	d004      	beq.n	8002304 <HAL_ADC_ConfigChannel+0x610>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4a13      	ldr	r2, [pc, #76]	; (800234c <HAL_ADC_ConfigChannel+0x658>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d101      	bne.n	8002308 <HAL_ADC_ConfigChannel+0x614>
 8002304:	4a12      	ldr	r2, [pc, #72]	; (8002350 <HAL_ADC_ConfigChannel+0x65c>)
 8002306:	e000      	b.n	800230a <HAL_ADC_ConfigChannel+0x616>
 8002308:	4a12      	ldr	r2, [pc, #72]	; (8002354 <HAL_ADC_ConfigChannel+0x660>)
 800230a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800230e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002312:	4619      	mov	r1, r3
 8002314:	4610      	mov	r0, r2
 8002316:	f7ff f97e 	bl	8001616 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800231a:	4b12      	ldr	r3, [pc, #72]	; (8002364 <HAL_ADC_ConfigChannel+0x670>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	099b      	lsrs	r3, r3, #6
 8002320:	4a11      	ldr	r2, [pc, #68]	; (8002368 <HAL_ADC_ConfigChannel+0x674>)
 8002322:	fba2 2303 	umull	r2, r3, r2, r3
 8002326:	099a      	lsrs	r2, r3, #6
 8002328:	4613      	mov	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	4413      	add	r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8002332:	e002      	b.n	800233a <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	3b01      	subs	r3, #1
 8002338:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1f9      	bne.n	8002334 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002340:	e06f      	b.n	8002422 <HAL_ADC_ConfigChannel+0x72e>
 8002342:	bf00      	nop
 8002344:	407f0000 	.word	0x407f0000
 8002348:	80080000 	.word	0x80080000
 800234c:	50000100 	.word	0x50000100
 8002350:	50000300 	.word	0x50000300
 8002354:	50000700 	.word	0x50000700
 8002358:	c3210000 	.word	0xc3210000
 800235c:	90c00010 	.word	0x90c00010
 8002360:	50000600 	.word	0x50000600
 8002364:	20000004 	.word	0x20000004
 8002368:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a32      	ldr	r2, [pc, #200]	; (800243c <HAL_ADC_ConfigChannel+0x748>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d125      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x6ce>
 8002376:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800237a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d11f      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	4a2e      	ldr	r2, [pc, #184]	; (8002440 <HAL_ADC_ConfigChannel+0x74c>)
 8002388:	4293      	cmp	r3, r2
 800238a:	d104      	bne.n	8002396 <HAL_ADC_ConfigChannel+0x6a2>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a2c      	ldr	r2, [pc, #176]	; (8002444 <HAL_ADC_ConfigChannel+0x750>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d047      	beq.n	8002426 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800239e:	d004      	beq.n	80023aa <HAL_ADC_ConfigChannel+0x6b6>
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a26      	ldr	r2, [pc, #152]	; (8002440 <HAL_ADC_ConfigChannel+0x74c>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d101      	bne.n	80023ae <HAL_ADC_ConfigChannel+0x6ba>
 80023aa:	4a27      	ldr	r2, [pc, #156]	; (8002448 <HAL_ADC_ConfigChannel+0x754>)
 80023ac:	e000      	b.n	80023b0 <HAL_ADC_ConfigChannel+0x6bc>
 80023ae:	4a27      	ldr	r2, [pc, #156]	; (800244c <HAL_ADC_ConfigChannel+0x758>)
 80023b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023b8:	4619      	mov	r1, r3
 80023ba:	4610      	mov	r0, r2
 80023bc:	f7ff f92b 	bl	8001616 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80023c0:	e031      	b.n	8002426 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a22      	ldr	r2, [pc, #136]	; (8002450 <HAL_ADC_ConfigChannel+0x75c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d12d      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80023cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d127      	bne.n	8002428 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a18      	ldr	r2, [pc, #96]	; (8002440 <HAL_ADC_ConfigChannel+0x74c>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d022      	beq.n	8002428 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80023ea:	d004      	beq.n	80023f6 <HAL_ADC_ConfigChannel+0x702>
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a13      	ldr	r2, [pc, #76]	; (8002440 <HAL_ADC_ConfigChannel+0x74c>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d101      	bne.n	80023fa <HAL_ADC_ConfigChannel+0x706>
 80023f6:	4a14      	ldr	r2, [pc, #80]	; (8002448 <HAL_ADC_ConfigChannel+0x754>)
 80023f8:	e000      	b.n	80023fc <HAL_ADC_ConfigChannel+0x708>
 80023fa:	4a14      	ldr	r2, [pc, #80]	; (800244c <HAL_ADC_ConfigChannel+0x758>)
 80023fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002400:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002404:	4619      	mov	r1, r3
 8002406:	4610      	mov	r0, r2
 8002408:	f7ff f905 	bl	8001616 <LL_ADC_SetCommonPathInternalCh>
 800240c:	e00c      	b.n	8002428 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002412:	f043 0220 	orr.w	r2, r3, #32
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8002420:	e002      	b.n	8002428 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002422:	bf00      	nop
 8002424:	e000      	b.n	8002428 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002426:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002430:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8002434:	4618      	mov	r0, r3
 8002436:	3798      	adds	r7, #152	; 0x98
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	c7520000 	.word	0xc7520000
 8002440:	50000100 	.word	0x50000100
 8002444:	50000500 	.word	0x50000500
 8002448:	50000300 	.word	0x50000300
 800244c:	50000700 	.word	0x50000700
 8002450:	cb840000 	.word	0xcb840000

08002454 <LL_ADC_IsEnabled>:
{
 8002454:	b480      	push	{r7}
 8002456:	b083      	sub	sp, #12
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f003 0301 	and.w	r3, r3, #1
 8002464:	2b01      	cmp	r3, #1
 8002466:	d101      	bne.n	800246c <LL_ADC_IsEnabled+0x18>
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <LL_ADC_IsEnabled+0x1a>
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	370c      	adds	r7, #12
 8002472:	46bd      	mov	sp, r7
 8002474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002478:	4770      	bx	lr

0800247a <LL_ADC_REG_IsConversionOngoing>:
{
 800247a:	b480      	push	{r7}
 800247c:	b083      	sub	sp, #12
 800247e:	af00      	add	r7, sp, #0
 8002480:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f003 0304 	and.w	r3, r3, #4
 800248a:	2b04      	cmp	r3, #4
 800248c:	d101      	bne.n	8002492 <LL_ADC_REG_IsConversionOngoing+0x18>
 800248e:	2301      	movs	r3, #1
 8002490:	e000      	b.n	8002494 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80024a0:	b590      	push	{r4, r7, lr}
 80024a2:	b0a1      	sub	sp, #132	; 0x84
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
 80024a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024aa:	2300      	movs	r3, #0
 80024ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d101      	bne.n	80024be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80024ba:	2302      	movs	r3, #2
 80024bc:	e0e3      	b.n	8002686 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80024ce:	d102      	bne.n	80024d6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80024d0:	4b6f      	ldr	r3, [pc, #444]	; (8002690 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80024d2:	60bb      	str	r3, [r7, #8]
 80024d4:	e009      	b.n	80024ea <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a6e      	ldr	r2, [pc, #440]	; (8002694 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d102      	bne.n	80024e6 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80024e0:	4b6d      	ldr	r3, [pc, #436]	; (8002698 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80024e2:	60bb      	str	r3, [r7, #8]
 80024e4:	e001      	b.n	80024ea <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80024e6:	2300      	movs	r3, #0
 80024e8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d10b      	bne.n	8002508 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024f4:	f043 0220 	orr.w	r2, r3, #32
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	2200      	movs	r2, #0
 8002500:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	e0be      	b.n	8002686 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002508:	68bb      	ldr	r3, [r7, #8]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff ffb5 	bl	800247a <LL_ADC_REG_IsConversionOngoing>
 8002510:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff ffaf 	bl	800247a <LL_ADC_REG_IsConversionOngoing>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	f040 80a0 	bne.w	8002664 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002524:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002526:	2b00      	cmp	r3, #0
 8002528:	f040 809c 	bne.w	8002664 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002534:	d004      	beq.n	8002540 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a55      	ldr	r2, [pc, #340]	; (8002690 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d101      	bne.n	8002544 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8002540:	4b56      	ldr	r3, [pc, #344]	; (800269c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002542:	e000      	b.n	8002546 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8002544:	4b56      	ldr	r3, [pc, #344]	; (80026a0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002546:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d04b      	beq.n	80025e8 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002550:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	6859      	ldr	r1, [r3, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002562:	035b      	lsls	r3, r3, #13
 8002564:	430b      	orrs	r3, r1
 8002566:	431a      	orrs	r2, r3
 8002568:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800256a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002574:	d004      	beq.n	8002580 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a45      	ldr	r2, [pc, #276]	; (8002690 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d10f      	bne.n	80025a0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8002580:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002584:	f7ff ff66 	bl	8002454 <LL_ADC_IsEnabled>
 8002588:	4604      	mov	r4, r0
 800258a:	4841      	ldr	r0, [pc, #260]	; (8002690 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800258c:	f7ff ff62 	bl	8002454 <LL_ADC_IsEnabled>
 8002590:	4603      	mov	r3, r0
 8002592:	4323      	orrs	r3, r4
 8002594:	2b00      	cmp	r3, #0
 8002596:	bf0c      	ite	eq
 8002598:	2301      	moveq	r3, #1
 800259a:	2300      	movne	r3, #0
 800259c:	b2db      	uxtb	r3, r3
 800259e:	e012      	b.n	80025c6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80025a0:	483c      	ldr	r0, [pc, #240]	; (8002694 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80025a2:	f7ff ff57 	bl	8002454 <LL_ADC_IsEnabled>
 80025a6:	4604      	mov	r4, r0
 80025a8:	483b      	ldr	r0, [pc, #236]	; (8002698 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80025aa:	f7ff ff53 	bl	8002454 <LL_ADC_IsEnabled>
 80025ae:	4603      	mov	r3, r0
 80025b0:	431c      	orrs	r4, r3
 80025b2:	483c      	ldr	r0, [pc, #240]	; (80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80025b4:	f7ff ff4e 	bl	8002454 <LL_ADC_IsEnabled>
 80025b8:	4603      	mov	r3, r0
 80025ba:	4323      	orrs	r3, r4
 80025bc:	2b00      	cmp	r3, #0
 80025be:	bf0c      	ite	eq
 80025c0:	2301      	moveq	r3, #1
 80025c2:	2300      	movne	r3, #0
 80025c4:	b2db      	uxtb	r3, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d056      	beq.n	8002678 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80025ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80025d2:	f023 030f 	bic.w	r3, r3, #15
 80025d6:	683a      	ldr	r2, [r7, #0]
 80025d8:	6811      	ldr	r1, [r2, #0]
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	6892      	ldr	r2, [r2, #8]
 80025de:	430a      	orrs	r2, r1
 80025e0:	431a      	orrs	r2, r3
 80025e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025e4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80025e6:	e047      	b.n	8002678 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80025e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80025f2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80025fc:	d004      	beq.n	8002608 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a23      	ldr	r2, [pc, #140]	; (8002690 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d10f      	bne.n	8002628 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002608:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800260c:	f7ff ff22 	bl	8002454 <LL_ADC_IsEnabled>
 8002610:	4604      	mov	r4, r0
 8002612:	481f      	ldr	r0, [pc, #124]	; (8002690 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8002614:	f7ff ff1e 	bl	8002454 <LL_ADC_IsEnabled>
 8002618:	4603      	mov	r3, r0
 800261a:	4323      	orrs	r3, r4
 800261c:	2b00      	cmp	r3, #0
 800261e:	bf0c      	ite	eq
 8002620:	2301      	moveq	r3, #1
 8002622:	2300      	movne	r3, #0
 8002624:	b2db      	uxtb	r3, r3
 8002626:	e012      	b.n	800264e <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8002628:	481a      	ldr	r0, [pc, #104]	; (8002694 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800262a:	f7ff ff13 	bl	8002454 <LL_ADC_IsEnabled>
 800262e:	4604      	mov	r4, r0
 8002630:	4819      	ldr	r0, [pc, #100]	; (8002698 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002632:	f7ff ff0f 	bl	8002454 <LL_ADC_IsEnabled>
 8002636:	4603      	mov	r3, r0
 8002638:	431c      	orrs	r4, r3
 800263a:	481a      	ldr	r0, [pc, #104]	; (80026a4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800263c:	f7ff ff0a 	bl	8002454 <LL_ADC_IsEnabled>
 8002640:	4603      	mov	r3, r0
 8002642:	4323      	orrs	r3, r4
 8002644:	2b00      	cmp	r3, #0
 8002646:	bf0c      	ite	eq
 8002648:	2301      	moveq	r3, #1
 800264a:	2300      	movne	r3, #0
 800264c:	b2db      	uxtb	r3, r3
 800264e:	2b00      	cmp	r3, #0
 8002650:	d012      	beq.n	8002678 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002652:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800265a:	f023 030f 	bic.w	r3, r3, #15
 800265e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002660:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002662:	e009      	b.n	8002678 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002668:	f043 0220 	orr.w	r2, r3, #32
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002676:	e000      	b.n	800267a <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002678:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002682:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002686:	4618      	mov	r0, r3
 8002688:	3784      	adds	r7, #132	; 0x84
 800268a:	46bd      	mov	sp, r7
 800268c:	bd90      	pop	{r4, r7, pc}
 800268e:	bf00      	nop
 8002690:	50000100 	.word	0x50000100
 8002694:	50000400 	.word	0x50000400
 8002698:	50000500 	.word	0x50000500
 800269c:	50000300 	.word	0x50000300
 80026a0:	50000700 	.word	0x50000700
 80026a4:	50000600 	.word	0x50000600

080026a8 <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80026b0:	4b05      	ldr	r3, [pc, #20]	; (80026c8 <LL_EXTI_EnableIT_0_31+0x20>)
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	4904      	ldr	r1, [pc, #16]	; (80026c8 <LL_EXTI_EnableIT_0_31+0x20>)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	600b      	str	r3, [r1, #0]
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr
 80026c8:	40010400 	.word	0x40010400

080026cc <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80026cc:	b480      	push	{r7}
 80026ce:	b083      	sub	sp, #12
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80026d4:	4b05      	ldr	r3, [pc, #20]	; (80026ec <LL_EXTI_EnableIT_32_63+0x20>)
 80026d6:	6a1a      	ldr	r2, [r3, #32]
 80026d8:	4904      	ldr	r1, [pc, #16]	; (80026ec <LL_EXTI_EnableIT_32_63+0x20>)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	4313      	orrs	r3, r2
 80026de:	620b      	str	r3, [r1, #32]
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	40010400 	.word	0x40010400

080026f0 <LL_EXTI_DisableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80026f0:	b480      	push	{r7}
 80026f2:	b083      	sub	sp, #12
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80026f8:	4b06      	ldr	r3, [pc, #24]	; (8002714 <LL_EXTI_DisableIT_0_31+0x24>)
 80026fa:	681a      	ldr	r2, [r3, #0]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	43db      	mvns	r3, r3
 8002700:	4904      	ldr	r1, [pc, #16]	; (8002714 <LL_EXTI_DisableIT_0_31+0x24>)
 8002702:	4013      	ands	r3, r2
 8002704:	600b      	str	r3, [r1, #0]
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40010400 	.word	0x40010400

08002718 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8002718:	b480      	push	{r7}
 800271a:	b083      	sub	sp, #12
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002720:	4b06      	ldr	r3, [pc, #24]	; (800273c <LL_EXTI_DisableIT_32_63+0x24>)
 8002722:	6a1a      	ldr	r2, [r3, #32]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	43db      	mvns	r3, r3
 8002728:	4904      	ldr	r1, [pc, #16]	; (800273c <LL_EXTI_DisableIT_32_63+0x24>)
 800272a:	4013      	ands	r3, r2
 800272c:	620b      	str	r3, [r1, #32]
}
 800272e:	bf00      	nop
 8002730:	370c      	adds	r7, #12
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	40010400 	.word	0x40010400

08002740 <LL_EXTI_EnableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002748:	4b05      	ldr	r3, [pc, #20]	; (8002760 <LL_EXTI_EnableEvent_0_31+0x20>)
 800274a:	685a      	ldr	r2, [r3, #4]
 800274c:	4904      	ldr	r1, [pc, #16]	; (8002760 <LL_EXTI_EnableEvent_0_31+0x20>)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4313      	orrs	r3, r2
 8002752:	604b      	str	r3, [r1, #4]

}
 8002754:	bf00      	nop
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr
 8002760:	40010400 	.word	0x40010400

08002764 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800276c:	4b05      	ldr	r3, [pc, #20]	; (8002784 <LL_EXTI_EnableEvent_32_63+0x20>)
 800276e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002770:	4904      	ldr	r1, [pc, #16]	; (8002784 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4313      	orrs	r3, r2
 8002776:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr
 8002784:	40010400 	.word	0x40010400

08002788 <LL_EXTI_DisableEvent_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002790:	4b06      	ldr	r3, [pc, #24]	; (80027ac <LL_EXTI_DisableEvent_0_31+0x24>)
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	43db      	mvns	r3, r3
 8002798:	4904      	ldr	r1, [pc, #16]	; (80027ac <LL_EXTI_DisableEvent_0_31+0x24>)
 800279a:	4013      	ands	r3, r2
 800279c:	604b      	str	r3, [r1, #4]
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a8:	4770      	bx	lr
 80027aa:	bf00      	nop
 80027ac:	40010400 	.word	0x40010400

080027b0 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b083      	sub	sp, #12
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80027b8:	4b06      	ldr	r3, [pc, #24]	; (80027d4 <LL_EXTI_DisableEvent_32_63+0x24>)
 80027ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	43db      	mvns	r3, r3
 80027c0:	4904      	ldr	r1, [pc, #16]	; (80027d4 <LL_EXTI_DisableEvent_32_63+0x24>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr
 80027d2:	bf00      	nop
 80027d4:	40010400 	.word	0x40010400

080027d8 <LL_EXTI_EnableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80027d8:	b480      	push	{r7}
 80027da:	b083      	sub	sp, #12
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80027e2:	689a      	ldr	r2, [r3, #8]
 80027e4:	4904      	ldr	r1, [pc, #16]	; (80027f8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	608b      	str	r3, [r1, #8]

}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	40010400 	.word	0x40010400

080027fc <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002804:	4b05      	ldr	r3, [pc, #20]	; (800281c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002806:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002808:	4904      	ldr	r1, [pc, #16]	; (800281c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4313      	orrs	r3, r2
 800280e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002810:	bf00      	nop
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr
 800281c:	40010400 	.word	0x40010400

08002820 <LL_EXTI_DisableRisingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002828:	4b06      	ldr	r3, [pc, #24]	; (8002844 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800282a:	689a      	ldr	r2, [r3, #8]
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	43db      	mvns	r3, r3
 8002830:	4904      	ldr	r1, [pc, #16]	; (8002844 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002832:	4013      	ands	r3, r2
 8002834:	608b      	str	r3, [r1, #8]

}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002840:	4770      	bx	lr
 8002842:	bf00      	nop
 8002844:	40010400 	.word	0x40010400

08002848 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002850:	4b06      	ldr	r3, [pc, #24]	; (800286c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002852:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	43db      	mvns	r3, r3
 8002858:	4904      	ldr	r1, [pc, #16]	; (800286c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800285a:	4013      	ands	r3, r2
 800285c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	40010400 	.word	0x40010400

08002870 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002878:	4b05      	ldr	r3, [pc, #20]	; (8002890 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800287a:	68da      	ldr	r2, [r3, #12]
 800287c:	4904      	ldr	r1, [pc, #16]	; (8002890 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4313      	orrs	r3, r2
 8002882:	60cb      	str	r3, [r1, #12]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr
 8002890:	40010400 	.word	0x40010400

08002894 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002894:	b480      	push	{r7}
 8002896:	b083      	sub	sp, #12
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800289e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028a0:	4904      	ldr	r1, [pc, #16]	; (80028b4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80028a8:	bf00      	nop
 80028aa:	370c      	adds	r7, #12
 80028ac:	46bd      	mov	sp, r7
 80028ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b2:	4770      	bx	lr
 80028b4:	40010400 	.word	0x40010400

080028b8 <LL_EXTI_DisableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80028c0:	4b06      	ldr	r3, [pc, #24]	; (80028dc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80028c2:	68da      	ldr	r2, [r3, #12]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	43db      	mvns	r3, r3
 80028c8:	4904      	ldr	r1, [pc, #16]	; (80028dc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80028ca:	4013      	ands	r3, r2
 80028cc:	60cb      	str	r3, [r1, #12]
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d8:	4770      	bx	lr
 80028da:	bf00      	nop
 80028dc:	40010400 	.word	0x40010400

080028e0 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80028e8:	4b06      	ldr	r3, [pc, #24]	; (8002904 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80028ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	43db      	mvns	r3, r3
 80028f0:	4904      	ldr	r1, [pc, #16]	; (8002904 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80028f2:	4013      	ands	r3, r2
 80028f4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80028f6:	bf00      	nop
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr
 8002902:	bf00      	nop
 8002904:	40010400 	.word	0x40010400

08002908 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8002910:	4a04      	ldr	r2, [pc, #16]	; (8002924 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6153      	str	r3, [r2, #20]
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002920:	4770      	bx	lr
 8002922:	bf00      	nop
 8002924:	40010400 	.word	0x40010400

08002928 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8002928:	b480      	push	{r7}
 800292a:	b083      	sub	sp, #12
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8002930:	4a04      	ldr	r2, [pc, #16]	; (8002944 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6353      	str	r3, [r2, #52]	; 0x34
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40010400 	.word	0x40010400

08002948 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b088      	sub	sp, #32
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8002950:	2300      	movs	r3, #0
 8002952:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8002954:	2300      	movs	r3, #0
 8002956:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d102      	bne.n	8002964 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	77fb      	strb	r3, [r7, #31]
 8002962:	e180      	b.n	8002c66 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800296e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002972:	d102      	bne.n	800297a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	77fb      	strb	r3, [r7, #31]
 8002978:	e175      	b.n	8002c66 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	7f5b      	ldrb	r3, [r3, #29]
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b00      	cmp	r3, #0
 8002982:	d108      	bne.n	8002996 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2200      	movs	r2, #0
 8002988:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7fd fd4d 	bl	8000430 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029a0:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	68db      	ldr	r3, [r3, #12]
 80029b6:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 80029bc:	4313      	orrs	r3, r2
 80029be:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	4b98      	ldr	r3, [pc, #608]	; (8002c28 <HAL_COMP_Init+0x2e0>)
 80029c8:	4013      	ands	r3, r2
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	6812      	ldr	r2, [r2, #0]
 80029ce:	6979      	ldr	r1, [r7, #20]
 80029d0:	430b      	orrs	r3, r1
 80029d2:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d015      	beq.n	8002a0e <HAL_COMP_Init+0xc6>
 80029e2:	69bb      	ldr	r3, [r7, #24]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d112      	bne.n	8002a0e <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80029e8:	4b90      	ldr	r3, [pc, #576]	; (8002c2c <HAL_COMP_Init+0x2e4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	099b      	lsrs	r3, r3, #6
 80029ee:	4a90      	ldr	r2, [pc, #576]	; (8002c30 <HAL_COMP_Init+0x2e8>)
 80029f0:	fba2 2303 	umull	r2, r3, r2, r3
 80029f4:	099a      	lsrs	r2, r3, #6
 80029f6:	4613      	mov	r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	4413      	add	r3, r2
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8002a00:	e002      	b.n	8002a08 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	3b01      	subs	r3, #1
 8002a06:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1f9      	bne.n	8002a02 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a88      	ldr	r2, [pc, #544]	; (8002c34 <HAL_COMP_Init+0x2ec>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d028      	beq.n	8002a6a <HAL_COMP_Init+0x122>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a86      	ldr	r2, [pc, #536]	; (8002c38 <HAL_COMP_Init+0x2f0>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d020      	beq.n	8002a64 <HAL_COMP_Init+0x11c>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a85      	ldr	r2, [pc, #532]	; (8002c3c <HAL_COMP_Init+0x2f4>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d018      	beq.n	8002a5e <HAL_COMP_Init+0x116>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	4a83      	ldr	r2, [pc, #524]	; (8002c40 <HAL_COMP_Init+0x2f8>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d010      	beq.n	8002a58 <HAL_COMP_Init+0x110>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a82      	ldr	r2, [pc, #520]	; (8002c44 <HAL_COMP_Init+0x2fc>)
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d008      	beq.n	8002a52 <HAL_COMP_Init+0x10a>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a80      	ldr	r2, [pc, #512]	; (8002c48 <HAL_COMP_Init+0x300>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d101      	bne.n	8002a4e <HAL_COMP_Init+0x106>
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e00f      	b.n	8002a6e <HAL_COMP_Init+0x126>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e00d      	b.n	8002a6e <HAL_COMP_Init+0x126>
 8002a52:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002a56:	e00a      	b.n	8002a6e <HAL_COMP_Init+0x126>
 8002a58:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002a5c:	e007      	b.n	8002a6e <HAL_COMP_Init+0x126>
 8002a5e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8002a62:	e004      	b.n	8002a6e <HAL_COMP_Init+0x126>
 8002a64:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a68:	e001      	b.n	8002a6e <HAL_COMP_Init+0x126>
 8002a6a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002a6e:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	f003 0303 	and.w	r3, r3, #3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	f000 80b6 	beq.w	8002bea <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	f003 0310 	and.w	r3, r3, #16
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d011      	beq.n	8002aae <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a6e      	ldr	r2, [pc, #440]	; (8002c48 <HAL_COMP_Init+0x300>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d004      	beq.n	8002a9e <HAL_COMP_Init+0x156>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a6c      	ldr	r2, [pc, #432]	; (8002c4c <HAL_COMP_Init+0x304>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d103      	bne.n	8002aa6 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8002a9e:	6938      	ldr	r0, [r7, #16]
 8002aa0:	f7ff feac 	bl	80027fc <LL_EXTI_EnableRisingTrig_32_63>
 8002aa4:	e014      	b.n	8002ad0 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8002aa6:	6938      	ldr	r0, [r7, #16]
 8002aa8:	f7ff fe96 	bl	80027d8 <LL_EXTI_EnableRisingTrig_0_31>
 8002aac:	e010      	b.n	8002ad0 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a65      	ldr	r2, [pc, #404]	; (8002c48 <HAL_COMP_Init+0x300>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d004      	beq.n	8002ac2 <HAL_COMP_Init+0x17a>
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a63      	ldr	r2, [pc, #396]	; (8002c4c <HAL_COMP_Init+0x304>)
 8002abe:	4293      	cmp	r3, r2
 8002ac0:	d103      	bne.n	8002aca <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8002ac2:	6938      	ldr	r0, [r7, #16]
 8002ac4:	f7ff fec0 	bl	8002848 <LL_EXTI_DisableRisingTrig_32_63>
 8002ac8:	e002      	b.n	8002ad0 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8002aca:	6938      	ldr	r0, [r7, #16]
 8002acc:	f7ff fea8 	bl	8002820 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d011      	beq.n	8002b00 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a59      	ldr	r2, [pc, #356]	; (8002c48 <HAL_COMP_Init+0x300>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d004      	beq.n	8002af0 <HAL_COMP_Init+0x1a8>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4a58      	ldr	r2, [pc, #352]	; (8002c4c <HAL_COMP_Init+0x304>)
 8002aec:	4293      	cmp	r3, r2
 8002aee:	d103      	bne.n	8002af8 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8002af0:	6938      	ldr	r0, [r7, #16]
 8002af2:	f7ff fecf 	bl	8002894 <LL_EXTI_EnableFallingTrig_32_63>
 8002af6:	e014      	b.n	8002b22 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8002af8:	6938      	ldr	r0, [r7, #16]
 8002afa:	f7ff feb9 	bl	8002870 <LL_EXTI_EnableFallingTrig_0_31>
 8002afe:	e010      	b.n	8002b22 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a50      	ldr	r2, [pc, #320]	; (8002c48 <HAL_COMP_Init+0x300>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d004      	beq.n	8002b14 <HAL_COMP_Init+0x1cc>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a4f      	ldr	r2, [pc, #316]	; (8002c4c <HAL_COMP_Init+0x304>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d103      	bne.n	8002b1c <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8002b14:	6938      	ldr	r0, [r7, #16]
 8002b16:	f7ff fee3 	bl	80028e0 <LL_EXTI_DisableFallingTrig_32_63>
 8002b1a:	e002      	b.n	8002b22 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8002b1c:	6938      	ldr	r0, [r7, #16]
 8002b1e:	f7ff fecb 	bl	80028b8 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a48      	ldr	r2, [pc, #288]	; (8002c48 <HAL_COMP_Init+0x300>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d004      	beq.n	8002b36 <HAL_COMP_Init+0x1ee>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a46      	ldr	r2, [pc, #280]	; (8002c4c <HAL_COMP_Init+0x304>)
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d103      	bne.n	8002b3e <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8002b36:	6938      	ldr	r0, [r7, #16]
 8002b38:	f7ff fef6 	bl	8002928 <LL_EXTI_ClearFlag_32_63>
 8002b3c:	e002      	b.n	8002b44 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8002b3e:	6938      	ldr	r0, [r7, #16]
 8002b40:	f7ff fee2 	bl	8002908 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	699b      	ldr	r3, [r3, #24]
 8002b48:	f003 0302 	and.w	r3, r3, #2
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d011      	beq.n	8002b74 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	4a3c      	ldr	r2, [pc, #240]	; (8002c48 <HAL_COMP_Init+0x300>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d004      	beq.n	8002b64 <HAL_COMP_Init+0x21c>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a3b      	ldr	r2, [pc, #236]	; (8002c4c <HAL_COMP_Init+0x304>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d103      	bne.n	8002b6c <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8002b64:	6938      	ldr	r0, [r7, #16]
 8002b66:	f7ff fdfd 	bl	8002764 <LL_EXTI_EnableEvent_32_63>
 8002b6a:	e014      	b.n	8002b96 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8002b6c:	6938      	ldr	r0, [r7, #16]
 8002b6e:	f7ff fde7 	bl	8002740 <LL_EXTI_EnableEvent_0_31>
 8002b72:	e010      	b.n	8002b96 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a33      	ldr	r2, [pc, #204]	; (8002c48 <HAL_COMP_Init+0x300>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d004      	beq.n	8002b88 <HAL_COMP_Init+0x240>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a32      	ldr	r2, [pc, #200]	; (8002c4c <HAL_COMP_Init+0x304>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d103      	bne.n	8002b90 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8002b88:	6938      	ldr	r0, [r7, #16]
 8002b8a:	f7ff fe11 	bl	80027b0 <LL_EXTI_DisableEvent_32_63>
 8002b8e:	e002      	b.n	8002b96 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8002b90:	6938      	ldr	r0, [r7, #16]
 8002b92:	f7ff fdf9 	bl	8002788 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d011      	beq.n	8002bc6 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a28      	ldr	r2, [pc, #160]	; (8002c48 <HAL_COMP_Init+0x300>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d004      	beq.n	8002bb6 <HAL_COMP_Init+0x26e>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a26      	ldr	r2, [pc, #152]	; (8002c4c <HAL_COMP_Init+0x304>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d103      	bne.n	8002bbe <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8002bb6:	6938      	ldr	r0, [r7, #16]
 8002bb8:	f7ff fd88 	bl	80026cc <LL_EXTI_EnableIT_32_63>
 8002bbc:	e04b      	b.n	8002c56 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8002bbe:	6938      	ldr	r0, [r7, #16]
 8002bc0:	f7ff fd72 	bl	80026a8 <LL_EXTI_EnableIT_0_31>
 8002bc4:	e047      	b.n	8002c56 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a1f      	ldr	r2, [pc, #124]	; (8002c48 <HAL_COMP_Init+0x300>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d004      	beq.n	8002bda <HAL_COMP_Init+0x292>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a1d      	ldr	r2, [pc, #116]	; (8002c4c <HAL_COMP_Init+0x304>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d103      	bne.n	8002be2 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8002bda:	6938      	ldr	r0, [r7, #16]
 8002bdc:	f7ff fd9c 	bl	8002718 <LL_EXTI_DisableIT_32_63>
 8002be0:	e039      	b.n	8002c56 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8002be2:	6938      	ldr	r0, [r7, #16]
 8002be4:	f7ff fd84 	bl	80026f0 <LL_EXTI_DisableIT_0_31>
 8002be8:	e035      	b.n	8002c56 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	4a16      	ldr	r2, [pc, #88]	; (8002c48 <HAL_COMP_Init+0x300>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d004      	beq.n	8002bfe <HAL_COMP_Init+0x2b6>
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a14      	ldr	r2, [pc, #80]	; (8002c4c <HAL_COMP_Init+0x304>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d103      	bne.n	8002c06 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8002bfe:	6938      	ldr	r0, [r7, #16]
 8002c00:	f7ff fdd6 	bl	80027b0 <LL_EXTI_DisableEvent_32_63>
 8002c04:	e002      	b.n	8002c0c <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8002c06:	6938      	ldr	r0, [r7, #16]
 8002c08:	f7ff fdbe 	bl	8002788 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a0d      	ldr	r2, [pc, #52]	; (8002c48 <HAL_COMP_Init+0x300>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d004      	beq.n	8002c20 <HAL_COMP_Init+0x2d8>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a0c      	ldr	r2, [pc, #48]	; (8002c4c <HAL_COMP_Init+0x304>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d117      	bne.n	8002c50 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8002c20:	6938      	ldr	r0, [r7, #16]
 8002c22:	f7ff fd79 	bl	8002718 <LL_EXTI_DisableIT_32_63>
 8002c26:	e016      	b.n	8002c56 <HAL_COMP_Init+0x30e>
 8002c28:	ff007e0f 	.word	0xff007e0f
 8002c2c:	20000004 	.word	0x20000004
 8002c30:	053e2d63 	.word	0x053e2d63
 8002c34:	40010200 	.word	0x40010200
 8002c38:	40010204 	.word	0x40010204
 8002c3c:	40010208 	.word	0x40010208
 8002c40:	4001020c 	.word	0x4001020c
 8002c44:	40010210 	.word	0x40010210
 8002c48:	40010214 	.word	0x40010214
 8002c4c:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8002c50:	6938      	ldr	r0, [r7, #16]
 8002c52:	f7ff fd4d 	bl	80026f0 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	7f5b      	ldrb	r3, [r3, #29]
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d102      	bne.n	8002c66 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8002c66:	7ffb      	ldrb	r3, [r7, #31]
}
 8002c68:	4618      	mov	r0, r3
 8002c6a:	3720      	adds	r7, #32
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <__NVIC_SetPriorityGrouping>:
{
 8002c70:	b480      	push	{r7}
 8002c72:	b085      	sub	sp, #20
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	f003 0307 	and.w	r3, r3, #7
 8002c7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c8c:	4013      	ands	r3, r2
 8002c8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ca2:	4a04      	ldr	r2, [pc, #16]	; (8002cb4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	60d3      	str	r3, [r2, #12]
}
 8002ca8:	bf00      	nop
 8002caa:	3714      	adds	r7, #20
 8002cac:	46bd      	mov	sp, r7
 8002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb2:	4770      	bx	lr
 8002cb4:	e000ed00 	.word	0xe000ed00

08002cb8 <__NVIC_GetPriorityGrouping>:
{
 8002cb8:	b480      	push	{r7}
 8002cba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cbc:	4b04      	ldr	r3, [pc, #16]	; (8002cd0 <__NVIC_GetPriorityGrouping+0x18>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	0a1b      	lsrs	r3, r3, #8
 8002cc2:	f003 0307 	and.w	r3, r3, #7
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cce:	4770      	bx	lr
 8002cd0:	e000ed00 	.word	0xe000ed00

08002cd4 <__NVIC_EnableIRQ>:
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	db0b      	blt.n	8002cfe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	f003 021f 	and.w	r2, r3, #31
 8002cec:	4907      	ldr	r1, [pc, #28]	; (8002d0c <__NVIC_EnableIRQ+0x38>)
 8002cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf2:	095b      	lsrs	r3, r3, #5
 8002cf4:	2001      	movs	r0, #1
 8002cf6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	e000e100 	.word	0xe000e100

08002d10 <__NVIC_SetPriority>:
{
 8002d10:	b480      	push	{r7}
 8002d12:	b083      	sub	sp, #12
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	4603      	mov	r3, r0
 8002d18:	6039      	str	r1, [r7, #0]
 8002d1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	db0a      	blt.n	8002d3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	b2da      	uxtb	r2, r3
 8002d28:	490c      	ldr	r1, [pc, #48]	; (8002d5c <__NVIC_SetPriority+0x4c>)
 8002d2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d2e:	0112      	lsls	r2, r2, #4
 8002d30:	b2d2      	uxtb	r2, r2
 8002d32:	440b      	add	r3, r1
 8002d34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002d38:	e00a      	b.n	8002d50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	b2da      	uxtb	r2, r3
 8002d3e:	4908      	ldr	r1, [pc, #32]	; (8002d60 <__NVIC_SetPriority+0x50>)
 8002d40:	79fb      	ldrb	r3, [r7, #7]
 8002d42:	f003 030f 	and.w	r3, r3, #15
 8002d46:	3b04      	subs	r3, #4
 8002d48:	0112      	lsls	r2, r2, #4
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	761a      	strb	r2, [r3, #24]
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr
 8002d5c:	e000e100 	.word	0xe000e100
 8002d60:	e000ed00 	.word	0xe000ed00

08002d64 <NVIC_EncodePriority>:
{
 8002d64:	b480      	push	{r7}
 8002d66:	b089      	sub	sp, #36	; 0x24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f003 0307 	and.w	r3, r3, #7
 8002d76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	f1c3 0307 	rsb	r3, r3, #7
 8002d7e:	2b04      	cmp	r3, #4
 8002d80:	bf28      	it	cs
 8002d82:	2304      	movcs	r3, #4
 8002d84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3304      	adds	r3, #4
 8002d8a:	2b06      	cmp	r3, #6
 8002d8c:	d902      	bls.n	8002d94 <NVIC_EncodePriority+0x30>
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	3b03      	subs	r3, #3
 8002d92:	e000      	b.n	8002d96 <NVIC_EncodePriority+0x32>
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43da      	mvns	r2, r3
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	401a      	ands	r2, r3
 8002da8:	697b      	ldr	r3, [r7, #20]
 8002daa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002db0:	697b      	ldr	r3, [r7, #20]
 8002db2:	fa01 f303 	lsl.w	r3, r1, r3
 8002db6:	43d9      	mvns	r1, r3
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dbc:	4313      	orrs	r3, r2
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3724      	adds	r7, #36	; 0x24
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr
	...

08002dcc <SysTick_Config>:
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b082      	sub	sp, #8
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3b01      	subs	r3, #1
 8002dd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ddc:	d301      	bcc.n	8002de2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002dde:	2301      	movs	r3, #1
 8002de0:	e00f      	b.n	8002e02 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002de2:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <SysTick_Config+0x40>)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3b01      	subs	r3, #1
 8002de8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dea:	210f      	movs	r1, #15
 8002dec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002df0:	f7ff ff8e 	bl	8002d10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002df4:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <SysTick_Config+0x40>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dfa:	4b04      	ldr	r3, [pc, #16]	; (8002e0c <SysTick_Config+0x40>)
 8002dfc:	2207      	movs	r2, #7
 8002dfe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002e00:	2300      	movs	r3, #0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	e000e010 	.word	0xe000e010

08002e10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff ff29 	bl	8002c70 <__NVIC_SetPriorityGrouping>
}
 8002e1e:	bf00      	nop
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b086      	sub	sp, #24
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	60b9      	str	r1, [r7, #8]
 8002e30:	607a      	str	r2, [r7, #4]
 8002e32:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002e34:	f7ff ff40 	bl	8002cb8 <__NVIC_GetPriorityGrouping>
 8002e38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	68b9      	ldr	r1, [r7, #8]
 8002e3e:	6978      	ldr	r0, [r7, #20]
 8002e40:	f7ff ff90 	bl	8002d64 <NVIC_EncodePriority>
 8002e44:	4602      	mov	r2, r0
 8002e46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e4a:	4611      	mov	r1, r2
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f7ff ff5f 	bl	8002d10 <__NVIC_SetPriority>
}
 8002e52:	bf00      	nop
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	4603      	mov	r3, r0
 8002e62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff ff33 	bl	8002cd4 <__NVIC_EnableIRQ>
}
 8002e6e:	bf00      	nop
 8002e70:	3708      	adds	r7, #8
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b082      	sub	sp, #8
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e7e:	6878      	ldr	r0, [r7, #4]
 8002e80:	f7ff ffa4 	bl	8002dcc <SysTick_Config>
 8002e84:	4603      	mov	r3, r0
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002e8e:	b580      	push	{r7, lr}
 8002e90:	b082      	sub	sp, #8
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d101      	bne.n	8002ea0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e014      	b.n	8002eca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	791b      	ldrb	r3, [r3, #4]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d105      	bne.n	8002eb6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	f7fd fb87 	bl	80005c4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	2202      	movs	r2, #2
 8002eba:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002ec8:	2300      	movs	r3, #0
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
 8002eda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	795b      	ldrb	r3, [r3, #5]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d101      	bne.n	8002ee8 <HAL_DAC_Start+0x16>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	e043      	b.n	8002f70 <HAL_DAC_Start+0x9e>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6819      	ldr	r1, [r3, #0]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	f003 0310 	and.w	r3, r3, #16
 8002f00:	2201      	movs	r2, #1
 8002f02:	409a      	lsls	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8002f0c:	2001      	movs	r0, #1
 8002f0e:	f7fe fb4d 	bl	80015ac <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10f      	bne.n	8002f38 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d11d      	bne.n	8002f62 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	685a      	ldr	r2, [r3, #4]
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f042 0201 	orr.w	r2, r2, #1
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	e014      	b.n	8002f62 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	f003 0310 	and.w	r3, r3, #16
 8002f48:	2102      	movs	r1, #2
 8002f4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d107      	bne.n	8002f62 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f042 0202 	orr.w	r2, r2, #2
 8002f60:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2201      	movs	r2, #1
 8002f66:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b087      	sub	sp, #28
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	60f8      	str	r0, [r7, #12]
 8002f80:	60b9      	str	r1, [r7, #8]
 8002f82:	607a      	str	r2, [r7, #4]
 8002f84:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d105      	bne.n	8002fa8 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002f9c:	697a      	ldr	r2, [r7, #20]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4413      	add	r3, r2
 8002fa2:	3308      	adds	r3, #8
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	e004      	b.n	8002fb2 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002fa8:	697a      	ldr	r2, [r7, #20]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4413      	add	r3, r2
 8002fae:	3314      	adds	r3, #20
 8002fb0:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002fb2:	697b      	ldr	r3, [r7, #20]
 8002fb4:	461a      	mov	r2, r3
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002fba:	2300      	movs	r3, #0
}
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	371c      	adds	r7, #28
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b08a      	sub	sp, #40	; 0x28
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	60f8      	str	r0, [r7, #12]
 8002fd0:	60b9      	str	r1, [r7, #8]
 8002fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	795b      	ldrb	r3, [r3, #5]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	d101      	bne.n	8002fe4 <HAL_DAC_ConfigChannel+0x1c>
 8002fe0:	2302      	movs	r3, #2
 8002fe2:	e194      	b.n	800330e <HAL_DAC_ConfigChannel+0x346>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2202      	movs	r2, #2
 8002fee:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d174      	bne.n	80030e2 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d137      	bne.n	800306e <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8002ffe:	f7fe fac9 	bl	8001594 <HAL_GetTick>
 8003002:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003004:	e011      	b.n	800302a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003006:	f7fe fac5 	bl	8001594 <HAL_GetTick>
 800300a:	4602      	mov	r2, r0
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	2b01      	cmp	r3, #1
 8003012:	d90a      	bls.n	800302a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	691b      	ldr	r3, [r3, #16]
 8003018:	f043 0208 	orr.w	r2, r3, #8
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2203      	movs	r2, #3
 8003024:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e171      	b.n	800330e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003030:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003034:	2b00      	cmp	r3, #0
 8003036:	d1e6      	bne.n	8003006 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8003038:	2001      	movs	r0, #1
 800303a:	f7fe fab7 	bl	80015ac <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003046:	641a      	str	r2, [r3, #64]	; 0x40
 8003048:	e01e      	b.n	8003088 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800304a:	f7fe faa3 	bl	8001594 <HAL_GetTick>
 800304e:	4602      	mov	r2, r0
 8003050:	69fb      	ldr	r3, [r7, #28]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	2b01      	cmp	r3, #1
 8003056:	d90a      	bls.n	800306e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	f043 0208 	orr.w	r2, r3, #8
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2203      	movs	r2, #3
 8003068:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e14f      	b.n	800330e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003074:	2b00      	cmp	r3, #0
 8003076:	dbe8      	blt.n	800304a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8003078:	2001      	movs	r0, #1
 800307a:	f7fe fa97 	bl	80015ac <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68ba      	ldr	r2, [r7, #8]
 8003084:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003086:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f003 0310 	and.w	r3, r3, #16
 8003094:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8003098:	fa01 f303 	lsl.w	r3, r1, r3
 800309c:	43db      	mvns	r3, r3
 800309e:	ea02 0103 	and.w	r1, r2, r3
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f003 0310 	and.w	r3, r3, #16
 80030ac:	409a      	lsls	r2, r3
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f003 0310 	and.w	r3, r3, #16
 80030c2:	21ff      	movs	r1, #255	; 0xff
 80030c4:	fa01 f303 	lsl.w	r3, r1, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	ea02 0103 	and.w	r1, r2, r3
 80030ce:	68bb      	ldr	r3, [r7, #8]
 80030d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	409a      	lsls	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d11d      	bne.n	8003126 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f003 0310 	and.w	r3, r3, #16
 80030f8:	221f      	movs	r2, #31
 80030fa:	fa02 f303 	lsl.w	r3, r2, r3
 80030fe:	43db      	mvns	r3, r3
 8003100:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003102:	4013      	ands	r3, r2
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	6a1b      	ldr	r3, [r3, #32]
 800310a:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	f003 0310 	and.w	r3, r3, #16
 8003112:	69ba      	ldr	r2, [r7, #24]
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800311a:	4313      	orrs	r3, r2
 800311c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003124:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800312c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f003 0310 	and.w	r3, r3, #16
 8003134:	2207      	movs	r2, #7
 8003136:	fa02 f303 	lsl.w	r3, r2, r3
 800313a:	43db      	mvns	r3, r3
 800313c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800313e:	4013      	ands	r3, r2
 8003140:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d002      	beq.n	8003154 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800314e:	2300      	movs	r3, #0
 8003150:	623b      	str	r3, [r7, #32]
 8003152:	e011      	b.n	8003178 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d002      	beq.n	8003166 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003160:	2301      	movs	r3, #1
 8003162:	623b      	str	r3, [r7, #32]
 8003164:	e008      	b.n	8003178 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d102      	bne.n	8003174 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800316e:	2301      	movs	r3, #1
 8003170:	623b      	str	r3, [r7, #32]
 8003172:	e001      	b.n	8003178 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003174:	2300      	movs	r3, #0
 8003176:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	68bb      	ldr	r3, [r7, #8]
 800317e:	695b      	ldr	r3, [r3, #20]
 8003180:	4313      	orrs	r3, r2
 8003182:	6a3a      	ldr	r2, [r7, #32]
 8003184:	4313      	orrs	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	f003 0310 	and.w	r3, r3, #16
 800318e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003192:	fa02 f303 	lsl.w	r3, r2, r3
 8003196:	43db      	mvns	r3, r3
 8003198:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800319a:	4013      	ands	r3, r2
 800319c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	791b      	ldrb	r3, [r3, #4]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d102      	bne.n	80031ac <HAL_DAC_ConfigChannel+0x1e4>
 80031a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031aa:	e000      	b.n	80031ae <HAL_DAC_ConfigChannel+0x1e6>
 80031ac:	2300      	movs	r3, #0
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f003 0310 	and.w	r3, r3, #16
 80031ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80031be:	fa02 f303 	lsl.w	r3, r2, r3
 80031c2:	43db      	mvns	r3, r3
 80031c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031c6:	4013      	ands	r3, r2
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	795b      	ldrb	r3, [r3, #5]
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d102      	bne.n	80031d8 <HAL_DAC_ConfigChannel+0x210>
 80031d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80031d6:	e000      	b.n	80031da <HAL_DAC_ConfigChannel+0x212>
 80031d8:	2300      	movs	r3, #0
 80031da:	69ba      	ldr	r2, [r7, #24]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80031e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80031e6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2b02      	cmp	r3, #2
 80031ee:	d114      	bne.n	800321a <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80031f0:	f001 f9ba 	bl	8004568 <HAL_RCC_GetHCLKFreq>
 80031f4:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80031f6:	697b      	ldr	r3, [r7, #20]
 80031f8:	4a47      	ldr	r2, [pc, #284]	; (8003318 <HAL_DAC_ConfigChannel+0x350>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d904      	bls.n	8003208 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80031fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003200:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003204:	627b      	str	r3, [r7, #36]	; 0x24
 8003206:	e00d      	b.n	8003224 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	4a44      	ldr	r2, [pc, #272]	; (800331c <HAL_DAC_ConfigChannel+0x354>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d909      	bls.n	8003224 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
 8003218:	e004      	b.n	8003224 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003220:	4313      	orrs	r3, r2
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	f003 0310 	and.w	r3, r3, #16
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	fa02 f303 	lsl.w	r3, r2, r3
 8003230:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003232:	4313      	orrs	r3, r2
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	6819      	ldr	r1, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f003 0310 	and.w	r3, r3, #16
 800324a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	43da      	mvns	r2, r3
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	400a      	ands	r2, r1
 800325a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	f003 0310 	and.w	r3, r3, #16
 800326a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800326e:	fa02 f303 	lsl.w	r3, r2, r3
 8003272:	43db      	mvns	r3, r3
 8003274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003276:	4013      	ands	r3, r2
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	68db      	ldr	r3, [r3, #12]
 800327e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	f003 0310 	and.w	r3, r3, #16
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	fa02 f303 	lsl.w	r3, r2, r3
 800328c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800328e:	4313      	orrs	r3, r2
 8003290:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003298:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	6819      	ldr	r1, [r3, #0]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	f003 0310 	and.w	r3, r3, #16
 80032a6:	22c0      	movs	r2, #192	; 0xc0
 80032a8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ac:	43da      	mvns	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	400a      	ands	r2, r1
 80032b4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	089b      	lsrs	r3, r3, #2
 80032bc:	f003 030f 	and.w	r3, r3, #15
 80032c0:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80032c2:	68bb      	ldr	r3, [r7, #8]
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	089b      	lsrs	r3, r3, #2
 80032c8:	021b      	lsls	r3, r3, #8
 80032ca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80032ce:	69ba      	ldr	r2, [r7, #24]
 80032d0:	4313      	orrs	r3, r2
 80032d2:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f003 0310 	and.w	r3, r3, #16
 80032e0:	f640 710f 	movw	r1, #3855	; 0xf0f
 80032e4:	fa01 f303 	lsl.w	r3, r1, r3
 80032e8:	43db      	mvns	r3, r3
 80032ea:	ea02 0103 	and.w	r1, r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f003 0310 	and.w	r3, r3, #16
 80032f4:	69ba      	ldr	r2, [r7, #24]
 80032f6:	409a      	lsls	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2201      	movs	r2, #1
 8003304:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2200      	movs	r2, #0
 800330a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800330c:	2300      	movs	r3, #0
}
 800330e:	4618      	mov	r0, r3
 8003310:	3728      	adds	r7, #40	; 0x28
 8003312:	46bd      	mov	sp, r7
 8003314:	bd80      	pop	{r7, pc}
 8003316:	bf00      	nop
 8003318:	09896800 	.word	0x09896800
 800331c:	04c4b400 	.word	0x04c4b400

08003320 <HAL_DACEx_TriangleWaveGenerate>:
  *            @arg DAC_TRIANGLEAMPLITUDE_2047: Select max triangle amplitude of 2047
  *            @arg DAC_TRIANGLEAMPLITUDE_4095: Select max triangle amplitude of 4095
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_TriangleWaveGenerate(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Amplitude)
{
 8003320:	b480      	push	{r7}
 8003322:	b085      	sub	sp, #20
 8003324:	af00      	add	r7, sp, #0
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_LFSR_UNMASK_TRIANGLE_AMPLITUDE(Amplitude));

  /* Process locked */
  __HAL_LOCK(hdac);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	795b      	ldrb	r3, [r3, #5]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_DACEx_TriangleWaveGenerate+0x18>
 8003334:	2302      	movs	r3, #2
 8003336:	e024      	b.n	8003382 <HAL_DACEx_TriangleWaveGenerate+0x62>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2202      	movs	r2, #2
 8003342:	711a      	strb	r2, [r3, #4]

  /* Enable the triangle wave generation for the selected DAC channel */
  MODIFY_REG(hdac->Instance->CR, ((DAC_CR_WAVE1) | (DAC_CR_MAMP1)) << (Channel & 0x10UL), (DAC_CR_WAVE1_1 | Amplitude) << (Channel & 0x10UL));
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681a      	ldr	r2, [r3, #0]
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	f003 0310 	and.w	r3, r3, #16
 8003350:	f44f 617c 	mov.w	r1, #4032	; 0xfc0
 8003354:	fa01 f303 	lsl.w	r3, r1, r3
 8003358:	43db      	mvns	r3, r3
 800335a:	ea02 0103 	and.w	r1, r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f003 0310 	and.w	r3, r3, #16
 800336a:	409a      	lsls	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	2201      	movs	r2, #1
 8003378:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3714      	adds	r7, #20
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
	...

08003390 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	b084      	sub	sp, #16
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d101      	bne.n	80033a2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800339e:	2301      	movs	r3, #1
 80033a0:	e08d      	b.n	80034be <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	461a      	mov	r2, r3
 80033a8:	4b47      	ldr	r3, [pc, #284]	; (80034c8 <HAL_DMA_Init+0x138>)
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d80f      	bhi.n	80033ce <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	461a      	mov	r2, r3
 80033b4:	4b45      	ldr	r3, [pc, #276]	; (80034cc <HAL_DMA_Init+0x13c>)
 80033b6:	4413      	add	r3, r2
 80033b8:	4a45      	ldr	r2, [pc, #276]	; (80034d0 <HAL_DMA_Init+0x140>)
 80033ba:	fba2 2303 	umull	r2, r3, r2, r3
 80033be:	091b      	lsrs	r3, r3, #4
 80033c0:	009a      	lsls	r2, r3, #2
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a42      	ldr	r2, [pc, #264]	; (80034d4 <HAL_DMA_Init+0x144>)
 80033ca:	641a      	str	r2, [r3, #64]	; 0x40
 80033cc:	e00e      	b.n	80033ec <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	461a      	mov	r2, r3
 80033d4:	4b40      	ldr	r3, [pc, #256]	; (80034d8 <HAL_DMA_Init+0x148>)
 80033d6:	4413      	add	r3, r2
 80033d8:	4a3d      	ldr	r2, [pc, #244]	; (80034d0 <HAL_DMA_Init+0x140>)
 80033da:	fba2 2303 	umull	r2, r3, r2, r3
 80033de:	091b      	lsrs	r3, r3, #4
 80033e0:	009a      	lsls	r2, r3, #2
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a3c      	ldr	r2, [pc, #240]	; (80034dc <HAL_DMA_Init+0x14c>)
 80033ea:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2202      	movs	r2, #2
 80033f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003402:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003406:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003410:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	691b      	ldr	r3, [r3, #16]
 8003416:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800341c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003428:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003430:	68fa      	ldr	r2, [r7, #12]
 8003432:	4313      	orrs	r3, r2
 8003434:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	68fa      	ldr	r2, [r7, #12]
 800343c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 f8fe 	bl	8003640 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800344c:	d102      	bne.n	8003454 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685a      	ldr	r2, [r3, #4]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800345c:	b2d2      	uxtb	r2, r2
 800345e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003468:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d010      	beq.n	8003494 <HAL_DMA_Init+0x104>
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b04      	cmp	r3, #4
 8003478:	d80c      	bhi.n	8003494 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800347a:	6878      	ldr	r0, [r7, #4]
 800347c:	f000 f91e 	bl	80036bc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003484:	2200      	movs	r2, #0
 8003486:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8003490:	605a      	str	r2, [r3, #4]
 8003492:	e008      	b.n	80034a6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2200      	movs	r2, #0
 8003498:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	2200      	movs	r2, #0
 800349e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40020407 	.word	0x40020407
 80034cc:	bffdfff8 	.word	0xbffdfff8
 80034d0:	cccccccd 	.word	0xcccccccd
 80034d4:	40020000 	.word	0x40020000
 80034d8:	bffdfbf8 	.word	0xbffdfbf8
 80034dc:	40020400 	.word	0x40020400

080034e0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034fc:	f003 031f 	and.w	r3, r3, #31
 8003500:	2204      	movs	r2, #4
 8003502:	409a      	lsls	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4013      	ands	r3, r2
 8003508:	2b00      	cmp	r3, #0
 800350a:	d026      	beq.n	800355a <HAL_DMA_IRQHandler+0x7a>
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f003 0304 	and.w	r3, r3, #4
 8003512:	2b00      	cmp	r3, #0
 8003514:	d021      	beq.n	800355a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0320 	and.w	r3, r3, #32
 8003520:	2b00      	cmp	r3, #0
 8003522:	d107      	bne.n	8003534 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	681a      	ldr	r2, [r3, #0]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f022 0204 	bic.w	r2, r2, #4
 8003532:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003538:	f003 021f 	and.w	r2, r3, #31
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	2104      	movs	r1, #4
 8003542:	fa01 f202 	lsl.w	r2, r1, r2
 8003546:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354c:	2b00      	cmp	r3, #0
 800354e:	d071      	beq.n	8003634 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8003558:	e06c      	b.n	8003634 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	f003 031f 	and.w	r3, r3, #31
 8003562:	2202      	movs	r2, #2
 8003564:	409a      	lsls	r2, r3
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	4013      	ands	r3, r2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d02e      	beq.n	80035cc <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d029      	beq.n	80035cc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f003 0320 	and.w	r3, r3, #32
 8003582:	2b00      	cmp	r3, #0
 8003584:	d10b      	bne.n	800359e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 020a 	bic.w	r2, r2, #10
 8003594:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2201      	movs	r2, #1
 800359a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a2:	f003 021f 	and.w	r2, r3, #31
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035aa:	2102      	movs	r1, #2
 80035ac:	fa01 f202 	lsl.w	r2, r1, r2
 80035b0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2200      	movs	r2, #0
 80035b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d038      	beq.n	8003634 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80035ca:	e033      	b.n	8003634 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d0:	f003 031f 	and.w	r3, r3, #31
 80035d4:	2208      	movs	r2, #8
 80035d6:	409a      	lsls	r2, r3
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	4013      	ands	r3, r2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d02a      	beq.n	8003636 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80035e0:	68bb      	ldr	r3, [r7, #8]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d025      	beq.n	8003636 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f022 020e 	bic.w	r2, r2, #14
 80035f8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	f003 021f 	and.w	r2, r3, #31
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	2101      	movs	r1, #1
 8003608:	fa01 f202 	lsl.w	r2, r1, r2
 800360c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2201      	movs	r2, #1
 8003612:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003628:	2b00      	cmp	r3, #0
 800362a:	d004      	beq.n	8003636 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003634:	bf00      	nop
 8003636:	bf00      	nop
}
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
	...

08003640 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003640:	b480      	push	{r7}
 8003642:	b087      	sub	sp, #28
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	4b16      	ldr	r3, [pc, #88]	; (80036a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003650:	429a      	cmp	r2, r3
 8003652:	d802      	bhi.n	800365a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003654:	4b15      	ldr	r3, [pc, #84]	; (80036ac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	e001      	b.n	800365e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800365a:	4b15      	ldr	r3, [pc, #84]	; (80036b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800365c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	b2db      	uxtb	r3, r3
 8003668:	3b08      	subs	r3, #8
 800366a:	4a12      	ldr	r2, [pc, #72]	; (80036b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800366c:	fba2 2303 	umull	r2, r3, r2, r3
 8003670:	091b      	lsrs	r3, r3, #4
 8003672:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003678:	089b      	lsrs	r3, r3, #2
 800367a:	009a      	lsls	r2, r3, #2
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4413      	add	r3, r2
 8003680:	461a      	mov	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a0b      	ldr	r2, [pc, #44]	; (80036b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800368a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f003 031f 	and.w	r3, r3, #31
 8003692:	2201      	movs	r2, #1
 8003694:	409a      	lsls	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	651a      	str	r2, [r3, #80]	; 0x50
}
 800369a:	bf00      	nop
 800369c:	371c      	adds	r7, #28
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40020407 	.word	0x40020407
 80036ac:	40020800 	.word	0x40020800
 80036b0:	40020820 	.word	0x40020820
 80036b4:	cccccccd 	.word	0xcccccccd
 80036b8:	40020880 	.word	0x40020880

080036bc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80036bc:	b480      	push	{r7}
 80036be:	b085      	sub	sp, #20
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	b2db      	uxtb	r3, r3
 80036ca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80036cc:	68fa      	ldr	r2, [r7, #12]
 80036ce:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80036d0:	4413      	add	r3, r2
 80036d2:	009b      	lsls	r3, r3, #2
 80036d4:	461a      	mov	r2, r3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a08      	ldr	r2, [pc, #32]	; (8003700 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80036de:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	3b01      	subs	r3, #1
 80036e4:	f003 031f 	and.w	r3, r3, #31
 80036e8:	2201      	movs	r2, #1
 80036ea:	409a      	lsls	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80036f0:	bf00      	nop
 80036f2:	3714      	adds	r7, #20
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	1000823f 	.word	0x1000823f
 8003700:	40020940 	.word	0x40020940

08003704 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800370e:	2300      	movs	r3, #0
 8003710:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003712:	e15a      	b.n	80039ca <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681a      	ldr	r2, [r3, #0]
 8003718:	2101      	movs	r1, #1
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	fa01 f303 	lsl.w	r3, r1, r3
 8003720:	4013      	ands	r3, r2
 8003722:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2b00      	cmp	r3, #0
 8003728:	f000 814c 	beq.w	80039c4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	2b01      	cmp	r3, #1
 8003732:	d00b      	beq.n	800374c <HAL_GPIO_Init+0x48>
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d007      	beq.n	800374c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003740:	2b11      	cmp	r3, #17
 8003742:	d003      	beq.n	800374c <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	2b12      	cmp	r3, #18
 800374a:	d130      	bne.n	80037ae <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	689b      	ldr	r3, [r3, #8]
 8003750:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	005b      	lsls	r3, r3, #1
 8003756:	2203      	movs	r2, #3
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	43db      	mvns	r3, r3
 800375e:	693a      	ldr	r2, [r7, #16]
 8003760:	4013      	ands	r3, r2
 8003762:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	68da      	ldr	r2, [r3, #12]
 8003768:	697b      	ldr	r3, [r7, #20]
 800376a:	005b      	lsls	r3, r3, #1
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	693a      	ldr	r2, [r7, #16]
 8003772:	4313      	orrs	r3, r2
 8003774:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003782:	2201      	movs	r2, #1
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	43db      	mvns	r3, r3
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4013      	ands	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	091b      	lsrs	r3, r3, #4
 8003798:	f003 0201 	and.w	r2, r3, #1
 800379c:	697b      	ldr	r3, [r7, #20]
 800379e:	fa02 f303 	lsl.w	r3, r2, r3
 80037a2:	693a      	ldr	r2, [r7, #16]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	693a      	ldr	r2, [r7, #16]
 80037ac:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68db      	ldr	r3, [r3, #12]
 80037b2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80037b4:	697b      	ldr	r3, [r7, #20]
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	2203      	movs	r2, #3
 80037ba:	fa02 f303 	lsl.w	r3, r2, r3
 80037be:	43db      	mvns	r3, r3
 80037c0:	693a      	ldr	r2, [r7, #16]
 80037c2:	4013      	ands	r3, r2
 80037c4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	689a      	ldr	r2, [r3, #8]
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	fa02 f303 	lsl.w	r3, r2, r3
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	4313      	orrs	r3, r2
 80037d6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d003      	beq.n	80037ee <HAL_GPIO_Init+0xea>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b12      	cmp	r3, #18
 80037ec:	d123      	bne.n	8003836 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80037ee:	697b      	ldr	r3, [r7, #20]
 80037f0:	08da      	lsrs	r2, r3, #3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	3208      	adds	r2, #8
 80037f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80037fa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f003 0307 	and.w	r3, r3, #7
 8003802:	009b      	lsls	r3, r3, #2
 8003804:	220f      	movs	r2, #15
 8003806:	fa02 f303 	lsl.w	r3, r2, r3
 800380a:	43db      	mvns	r3, r3
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	4013      	ands	r3, r2
 8003810:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	691a      	ldr	r2, [r3, #16]
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	f003 0307 	and.w	r3, r3, #7
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	fa02 f303 	lsl.w	r3, r2, r3
 8003822:	693a      	ldr	r2, [r7, #16]
 8003824:	4313      	orrs	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	08da      	lsrs	r2, r3, #3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3208      	adds	r2, #8
 8003830:	6939      	ldr	r1, [r7, #16]
 8003832:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	2203      	movs	r2, #3
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	43db      	mvns	r3, r3
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4013      	ands	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f003 0203 	and.w	r2, r3, #3
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003872:	2b00      	cmp	r3, #0
 8003874:	f000 80a6 	beq.w	80039c4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003878:	4b5b      	ldr	r3, [pc, #364]	; (80039e8 <HAL_GPIO_Init+0x2e4>)
 800387a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800387c:	4a5a      	ldr	r2, [pc, #360]	; (80039e8 <HAL_GPIO_Init+0x2e4>)
 800387e:	f043 0301 	orr.w	r3, r3, #1
 8003882:	6613      	str	r3, [r2, #96]	; 0x60
 8003884:	4b58      	ldr	r3, [pc, #352]	; (80039e8 <HAL_GPIO_Init+0x2e4>)
 8003886:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	60bb      	str	r3, [r7, #8]
 800388e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003890:	4a56      	ldr	r2, [pc, #344]	; (80039ec <HAL_GPIO_Init+0x2e8>)
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	089b      	lsrs	r3, r3, #2
 8003896:	3302      	adds	r3, #2
 8003898:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800389c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	f003 0303 	and.w	r3, r3, #3
 80038a4:	009b      	lsls	r3, r3, #2
 80038a6:	220f      	movs	r2, #15
 80038a8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ac:	43db      	mvns	r3, r3
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	4013      	ands	r3, r2
 80038b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80038ba:	d01f      	beq.n	80038fc <HAL_GPIO_Init+0x1f8>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	4a4c      	ldr	r2, [pc, #304]	; (80039f0 <HAL_GPIO_Init+0x2ec>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d019      	beq.n	80038f8 <HAL_GPIO_Init+0x1f4>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a4b      	ldr	r2, [pc, #300]	; (80039f4 <HAL_GPIO_Init+0x2f0>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d013      	beq.n	80038f4 <HAL_GPIO_Init+0x1f0>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a4a      	ldr	r2, [pc, #296]	; (80039f8 <HAL_GPIO_Init+0x2f4>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d00d      	beq.n	80038f0 <HAL_GPIO_Init+0x1ec>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a49      	ldr	r2, [pc, #292]	; (80039fc <HAL_GPIO_Init+0x2f8>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d007      	beq.n	80038ec <HAL_GPIO_Init+0x1e8>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a48      	ldr	r2, [pc, #288]	; (8003a00 <HAL_GPIO_Init+0x2fc>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d101      	bne.n	80038e8 <HAL_GPIO_Init+0x1e4>
 80038e4:	2305      	movs	r3, #5
 80038e6:	e00a      	b.n	80038fe <HAL_GPIO_Init+0x1fa>
 80038e8:	2306      	movs	r3, #6
 80038ea:	e008      	b.n	80038fe <HAL_GPIO_Init+0x1fa>
 80038ec:	2304      	movs	r3, #4
 80038ee:	e006      	b.n	80038fe <HAL_GPIO_Init+0x1fa>
 80038f0:	2303      	movs	r3, #3
 80038f2:	e004      	b.n	80038fe <HAL_GPIO_Init+0x1fa>
 80038f4:	2302      	movs	r3, #2
 80038f6:	e002      	b.n	80038fe <HAL_GPIO_Init+0x1fa>
 80038f8:	2301      	movs	r3, #1
 80038fa:	e000      	b.n	80038fe <HAL_GPIO_Init+0x1fa>
 80038fc:	2300      	movs	r3, #0
 80038fe:	697a      	ldr	r2, [r7, #20]
 8003900:	f002 0203 	and.w	r2, r2, #3
 8003904:	0092      	lsls	r2, r2, #2
 8003906:	4093      	lsls	r3, r2
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	4313      	orrs	r3, r2
 800390c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800390e:	4937      	ldr	r1, [pc, #220]	; (80039ec <HAL_GPIO_Init+0x2e8>)
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	089b      	lsrs	r3, r3, #2
 8003914:	3302      	adds	r3, #2
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800391c:	4b39      	ldr	r3, [pc, #228]	; (8003a04 <HAL_GPIO_Init+0x300>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	43db      	mvns	r3, r3
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	4013      	ands	r3, r2
 800392a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003934:	2b00      	cmp	r3, #0
 8003936:	d003      	beq.n	8003940 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	4313      	orrs	r3, r2
 800393e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003940:	4a30      	ldr	r2, [pc, #192]	; (8003a04 <HAL_GPIO_Init+0x300>)
 8003942:	693b      	ldr	r3, [r7, #16]
 8003944:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8003946:	4b2f      	ldr	r3, [pc, #188]	; (8003a04 <HAL_GPIO_Init+0x300>)
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	43db      	mvns	r3, r3
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	4013      	ands	r3, r2
 8003954:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d003      	beq.n	800396a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003962:	693a      	ldr	r2, [r7, #16]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800396a:	4a26      	ldr	r2, [pc, #152]	; (8003a04 <HAL_GPIO_Init+0x300>)
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003970:	4b24      	ldr	r3, [pc, #144]	; (8003a04 <HAL_GPIO_Init+0x300>)
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	43db      	mvns	r3, r3
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	4013      	ands	r3, r2
 800397e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d003      	beq.n	8003994 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003994:	4a1b      	ldr	r2, [pc, #108]	; (8003a04 <HAL_GPIO_Init+0x300>)
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800399a:	4b1a      	ldr	r3, [pc, #104]	; (8003a04 <HAL_GPIO_Init+0x300>)
 800399c:	68db      	ldr	r3, [r3, #12]
 800399e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	43db      	mvns	r3, r3
 80039a4:	693a      	ldr	r2, [r7, #16]
 80039a6:	4013      	ands	r3, r2
 80039a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d003      	beq.n	80039be <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80039b6:	693a      	ldr	r2, [r7, #16]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4313      	orrs	r3, r2
 80039bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80039be:	4a11      	ldr	r2, [pc, #68]	; (8003a04 <HAL_GPIO_Init+0x300>)
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80039c4:	697b      	ldr	r3, [r7, #20]
 80039c6:	3301      	adds	r3, #1
 80039c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	fa22 f303 	lsr.w	r3, r2, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	f47f ae9d 	bne.w	8003714 <HAL_GPIO_Init+0x10>
  }
}
 80039da:	bf00      	nop
 80039dc:	371c      	adds	r7, #28
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr
 80039e6:	bf00      	nop
 80039e8:	40021000 	.word	0x40021000
 80039ec:	40010000 	.word	0x40010000
 80039f0:	48000400 	.word	0x48000400
 80039f4:	48000800 	.word	0x48000800
 80039f8:	48000c00 	.word	0x48000c00
 80039fc:	48001000 	.word	0x48001000
 8003a00:	48001400 	.word	0x48001400
 8003a04:	40010400 	.word	0x40010400

08003a08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	460b      	mov	r3, r1
 8003a12:	807b      	strh	r3, [r7, #2]
 8003a14:	4613      	mov	r3, r2
 8003a16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a18:	787b      	ldrb	r3, [r7, #1]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d003      	beq.n	8003a26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a1e:	887a      	ldrh	r2, [r7, #2]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a24:	e002      	b.n	8003a2c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a26:	887a      	ldrh	r2, [r7, #2]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a2c:	bf00      	nop
 8003a2e:	370c      	adds	r7, #12
 8003a30:	46bd      	mov	sp, r7
 8003a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a36:	4770      	bx	lr

08003a38 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	460b      	mov	r3, r1
 8003a42:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	695a      	ldr	r2, [r3, #20]
 8003a48:	887b      	ldrh	r3, [r7, #2]
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a50:	887a      	ldrh	r2, [r7, #2]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8003a56:	e002      	b.n	8003a5e <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a58:	887a      	ldrh	r2, [r7, #2]
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	619a      	str	r2, [r3, #24]
}
 8003a5e:	bf00      	nop
 8003a60:	370c      	adds	r7, #12
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
	...

08003a6c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	4603      	mov	r3, r0
 8003a74:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003a76:	4b08      	ldr	r3, [pc, #32]	; (8003a98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a78:	695a      	ldr	r2, [r3, #20]
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d006      	beq.n	8003a90 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003a82:	4a05      	ldr	r2, [pc, #20]	; (8003a98 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003a84:	88fb      	ldrh	r3, [r7, #6]
 8003a86:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003a88:	88fb      	ldrh	r3, [r7, #6]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 f806 	bl	8003a9c <HAL_GPIO_EXTI_Callback>
  }
}
 8003a90:	bf00      	nop
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40010400 	.word	0x40010400

08003a9c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b083      	sub	sp, #12
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003aa6:	bf00      	nop
 8003aa8:	370c      	adds	r7, #12
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab0:	4770      	bx	lr
	...

08003ab4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b085      	sub	sp, #20
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d141      	bne.n	8003b46 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003ac2:	4b4b      	ldr	r3, [pc, #300]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003aca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ace:	d131      	bne.n	8003b34 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003ad0:	4b47      	ldr	r3, [pc, #284]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ad2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ad6:	4a46      	ldr	r2, [pc, #280]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ad8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003adc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ae0:	4b43      	ldr	r3, [pc, #268]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ae8:	4a41      	ldr	r2, [pc, #260]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003aea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003aee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003af0:	4b40      	ldr	r3, [pc, #256]	; (8003bf4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	2232      	movs	r2, #50	; 0x32
 8003af6:	fb02 f303 	mul.w	r3, r2, r3
 8003afa:	4a3f      	ldr	r2, [pc, #252]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003afc:	fba2 2303 	umull	r2, r3, r2, r3
 8003b00:	0c9b      	lsrs	r3, r3, #18
 8003b02:	3301      	adds	r3, #1
 8003b04:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b06:	e002      	b.n	8003b0e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b0e:	4b38      	ldr	r3, [pc, #224]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b1a:	d102      	bne.n	8003b22 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1f2      	bne.n	8003b08 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b22:	4b33      	ldr	r3, [pc, #204]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2e:	d158      	bne.n	8003be2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003b30:	2303      	movs	r3, #3
 8003b32:	e057      	b.n	8003be4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b34:	4b2e      	ldr	r3, [pc, #184]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b36:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b3a:	4a2d      	ldr	r2, [pc, #180]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b40:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003b44:	e04d      	b.n	8003be2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b4c:	d141      	bne.n	8003bd2 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b4e:	4b28      	ldr	r3, [pc, #160]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b5a:	d131      	bne.n	8003bc0 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b5c:	4b24      	ldr	r3, [pc, #144]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b62:	4a23      	ldr	r2, [pc, #140]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b68:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b6c:	4b20      	ldr	r3, [pc, #128]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b74:	4a1e      	ldr	r2, [pc, #120]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b76:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b7a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b7c:	4b1d      	ldr	r3, [pc, #116]	; (8003bf4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2232      	movs	r2, #50	; 0x32
 8003b82:	fb02 f303 	mul.w	r3, r2, r3
 8003b86:	4a1c      	ldr	r2, [pc, #112]	; (8003bf8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b88:	fba2 2303 	umull	r2, r3, r2, r3
 8003b8c:	0c9b      	lsrs	r3, r3, #18
 8003b8e:	3301      	adds	r3, #1
 8003b90:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b92:	e002      	b.n	8003b9a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	3b01      	subs	r3, #1
 8003b98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b9a:	4b15      	ldr	r3, [pc, #84]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b9c:	695b      	ldr	r3, [r3, #20]
 8003b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba6:	d102      	bne.n	8003bae <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d1f2      	bne.n	8003b94 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bae:	4b10      	ldr	r3, [pc, #64]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bba:	d112      	bne.n	8003be2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003bbc:	2303      	movs	r3, #3
 8003bbe:	e011      	b.n	8003be4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bc0:	4b0b      	ldr	r3, [pc, #44]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bc6:	4a0a      	ldr	r2, [pc, #40]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bcc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003bd0:	e007      	b.n	8003be2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003bd2:	4b07      	ldr	r3, [pc, #28]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003bda:	4a05      	ldr	r2, [pc, #20]	; (8003bf0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bdc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003be0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003be2:	2300      	movs	r3, #0
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr
 8003bf0:	40007000 	.word	0x40007000
 8003bf4:	20000004 	.word	0x20000004
 8003bf8:	431bde83 	.word	0x431bde83

08003bfc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b088      	sub	sp, #32
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e308      	b.n	8004220 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d075      	beq.n	8003d06 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c1a:	4ba3      	ldr	r3, [pc, #652]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003c1c:	689b      	ldr	r3, [r3, #8]
 8003c1e:	f003 030c 	and.w	r3, r3, #12
 8003c22:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c24:	4ba0      	ldr	r3, [pc, #640]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0303 	and.w	r3, r3, #3
 8003c2c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003c2e:	69bb      	ldr	r3, [r7, #24]
 8003c30:	2b0c      	cmp	r3, #12
 8003c32:	d102      	bne.n	8003c3a <HAL_RCC_OscConfig+0x3e>
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	2b03      	cmp	r3, #3
 8003c38:	d002      	beq.n	8003c40 <HAL_RCC_OscConfig+0x44>
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d10b      	bne.n	8003c58 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c40:	4b99      	ldr	r3, [pc, #612]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d05b      	beq.n	8003d04 <HAL_RCC_OscConfig+0x108>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d157      	bne.n	8003d04 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c54:	2301      	movs	r3, #1
 8003c56:	e2e3      	b.n	8004220 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c60:	d106      	bne.n	8003c70 <HAL_RCC_OscConfig+0x74>
 8003c62:	4b91      	ldr	r3, [pc, #580]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a90      	ldr	r2, [pc, #576]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003c68:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	e01d      	b.n	8003cac <HAL_RCC_OscConfig+0xb0>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c78:	d10c      	bne.n	8003c94 <HAL_RCC_OscConfig+0x98>
 8003c7a:	4b8b      	ldr	r3, [pc, #556]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a8a      	ldr	r2, [pc, #552]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c84:	6013      	str	r3, [r2, #0]
 8003c86:	4b88      	ldr	r3, [pc, #544]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a87      	ldr	r2, [pc, #540]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c90:	6013      	str	r3, [r2, #0]
 8003c92:	e00b      	b.n	8003cac <HAL_RCC_OscConfig+0xb0>
 8003c94:	4b84      	ldr	r3, [pc, #528]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	4a83      	ldr	r2, [pc, #524]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003c9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c9e:	6013      	str	r3, [r2, #0]
 8003ca0:	4b81      	ldr	r3, [pc, #516]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	4a80      	ldr	r2, [pc, #512]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003ca6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003caa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d013      	beq.n	8003cdc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb4:	f7fd fc6e 	bl	8001594 <HAL_GetTick>
 8003cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cba:	e008      	b.n	8003cce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cbc:	f7fd fc6a 	bl	8001594 <HAL_GetTick>
 8003cc0:	4602      	mov	r2, r0
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	1ad3      	subs	r3, r2, r3
 8003cc6:	2b64      	cmp	r3, #100	; 0x64
 8003cc8:	d901      	bls.n	8003cce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e2a8      	b.n	8004220 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003cce:	4b76      	ldr	r3, [pc, #472]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d0f0      	beq.n	8003cbc <HAL_RCC_OscConfig+0xc0>
 8003cda:	e014      	b.n	8003d06 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cdc:	f7fd fc5a 	bl	8001594 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ce4:	f7fd fc56 	bl	8001594 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b64      	cmp	r3, #100	; 0x64
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e294      	b.n	8004220 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cf6:	4b6c      	ldr	r3, [pc, #432]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d1f0      	bne.n	8003ce4 <HAL_RCC_OscConfig+0xe8>
 8003d02:	e000      	b.n	8003d06 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0302 	and.w	r3, r3, #2
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d075      	beq.n	8003dfe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d12:	4b65      	ldr	r3, [pc, #404]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	f003 030c 	and.w	r3, r3, #12
 8003d1a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d1c:	4b62      	ldr	r3, [pc, #392]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003d1e:	68db      	ldr	r3, [r3, #12]
 8003d20:	f003 0303 	and.w	r3, r3, #3
 8003d24:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	2b0c      	cmp	r3, #12
 8003d2a:	d102      	bne.n	8003d32 <HAL_RCC_OscConfig+0x136>
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d002      	beq.n	8003d38 <HAL_RCC_OscConfig+0x13c>
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	2b04      	cmp	r3, #4
 8003d36:	d11f      	bne.n	8003d78 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d38:	4b5b      	ldr	r3, [pc, #364]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d005      	beq.n	8003d50 <HAL_RCC_OscConfig+0x154>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	68db      	ldr	r3, [r3, #12]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d101      	bne.n	8003d50 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e267      	b.n	8004220 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d50:	4b55      	ldr	r3, [pc, #340]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	691b      	ldr	r3, [r3, #16]
 8003d5c:	061b      	lsls	r3, r3, #24
 8003d5e:	4952      	ldr	r1, [pc, #328]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003d64:	4b51      	ldr	r3, [pc, #324]	; (8003eac <HAL_RCC_OscConfig+0x2b0>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fd fbc7 	bl	80014fc <HAL_InitTick>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d043      	beq.n	8003dfc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e253      	b.n	8004220 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d023      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d80:	4b49      	ldr	r3, [pc, #292]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a48      	ldr	r2, [pc, #288]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003d86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8c:	f7fd fc02 	bl	8001594 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d94:	f7fd fbfe 	bl	8001594 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e23c      	b.n	8004220 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003da6:	4b40      	ldr	r3, [pc, #256]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d0f0      	beq.n	8003d94 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003db2:	4b3d      	ldr	r3, [pc, #244]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	061b      	lsls	r3, r3, #24
 8003dc0:	4939      	ldr	r1, [pc, #228]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	604b      	str	r3, [r1, #4]
 8003dc6:	e01a      	b.n	8003dfe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dc8:	4b37      	ldr	r3, [pc, #220]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a36      	ldr	r2, [pc, #216]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003dce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dd4:	f7fd fbde 	bl	8001594 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ddc:	f7fd fbda 	bl	8001594 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b02      	cmp	r3, #2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e218      	b.n	8004220 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003dee:	4b2e      	ldr	r3, [pc, #184]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1f0      	bne.n	8003ddc <HAL_RCC_OscConfig+0x1e0>
 8003dfa:	e000      	b.n	8003dfe <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003dfc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0308 	and.w	r3, r3, #8
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d03c      	beq.n	8003e84 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d01c      	beq.n	8003e4c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e12:	4b25      	ldr	r3, [pc, #148]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003e14:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e18:	4a23      	ldr	r2, [pc, #140]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003e1a:	f043 0301 	orr.w	r3, r3, #1
 8003e1e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e22:	f7fd fbb7 	bl	8001594 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e28:	e008      	b.n	8003e3c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e2a:	f7fd fbb3 	bl	8001594 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d901      	bls.n	8003e3c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e1f1      	b.n	8004220 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003e3c:	4b1a      	ldr	r3, [pc, #104]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003e3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e42:	f003 0302 	and.w	r3, r3, #2
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d0ef      	beq.n	8003e2a <HAL_RCC_OscConfig+0x22e>
 8003e4a:	e01b      	b.n	8003e84 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e4c:	4b16      	ldr	r3, [pc, #88]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003e4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e52:	4a15      	ldr	r2, [pc, #84]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003e54:	f023 0301 	bic.w	r3, r3, #1
 8003e58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e5c:	f7fd fb9a 	bl	8001594 <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e62:	e008      	b.n	8003e76 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e64:	f7fd fb96 	bl	8001594 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b02      	cmp	r3, #2
 8003e70:	d901      	bls.n	8003e76 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e1d4      	b.n	8004220 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e76:	4b0c      	ldr	r3, [pc, #48]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003e78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1ef      	bne.n	8003e64 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 80ab 	beq.w	8003fe8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e92:	2300      	movs	r3, #0
 8003e94:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003e96:	4b04      	ldr	r3, [pc, #16]	; (8003ea8 <HAL_RCC_OscConfig+0x2ac>)
 8003e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d106      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x2b4>
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e005      	b.n	8003eb2 <HAL_RCC_OscConfig+0x2b6>
 8003ea6:	bf00      	nop
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	20000008 	.word	0x20000008
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00d      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003eb6:	4baf      	ldr	r3, [pc, #700]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eba:	4aae      	ldr	r2, [pc, #696]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003ebc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ec0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ec2:	4bac      	ldr	r3, [pc, #688]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003eca:	60fb      	str	r3, [r7, #12]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ed2:	4ba9      	ldr	r3, [pc, #676]	; (8004178 <HAL_RCC_OscConfig+0x57c>)
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d118      	bne.n	8003f10 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ede:	4ba6      	ldr	r3, [pc, #664]	; (8004178 <HAL_RCC_OscConfig+0x57c>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4aa5      	ldr	r2, [pc, #660]	; (8004178 <HAL_RCC_OscConfig+0x57c>)
 8003ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ee8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003eea:	f7fd fb53 	bl	8001594 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ef0:	e008      	b.n	8003f04 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ef2:	f7fd fb4f 	bl	8001594 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d901      	bls.n	8003f04 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e18d      	b.n	8004220 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f04:	4b9c      	ldr	r3, [pc, #624]	; (8004178 <HAL_RCC_OscConfig+0x57c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d0f0      	beq.n	8003ef2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d108      	bne.n	8003f2a <HAL_RCC_OscConfig+0x32e>
 8003f18:	4b96      	ldr	r3, [pc, #600]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f1e:	4a95      	ldr	r2, [pc, #596]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003f20:	f043 0301 	orr.w	r3, r3, #1
 8003f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f28:	e024      	b.n	8003f74 <HAL_RCC_OscConfig+0x378>
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	689b      	ldr	r3, [r3, #8]
 8003f2e:	2b05      	cmp	r3, #5
 8003f30:	d110      	bne.n	8003f54 <HAL_RCC_OscConfig+0x358>
 8003f32:	4b90      	ldr	r3, [pc, #576]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f38:	4a8e      	ldr	r2, [pc, #568]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003f3a:	f043 0304 	orr.w	r3, r3, #4
 8003f3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f42:	4b8c      	ldr	r3, [pc, #560]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f48:	4a8a      	ldr	r2, [pc, #552]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003f4a:	f043 0301 	orr.w	r3, r3, #1
 8003f4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f52:	e00f      	b.n	8003f74 <HAL_RCC_OscConfig+0x378>
 8003f54:	4b87      	ldr	r3, [pc, #540]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f5a:	4a86      	ldr	r2, [pc, #536]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003f5c:	f023 0301 	bic.w	r3, r3, #1
 8003f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003f64:	4b83      	ldr	r3, [pc, #524]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6a:	4a82      	ldr	r2, [pc, #520]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003f6c:	f023 0304 	bic.w	r3, r3, #4
 8003f70:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d016      	beq.n	8003faa <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f7c:	f7fd fb0a 	bl	8001594 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f82:	e00a      	b.n	8003f9a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f84:	f7fd fb06 	bl	8001594 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e142      	b.n	8004220 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f9a:	4b76      	ldr	r3, [pc, #472]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0ed      	beq.n	8003f84 <HAL_RCC_OscConfig+0x388>
 8003fa8:	e015      	b.n	8003fd6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003faa:	f7fd faf3 	bl	8001594 <HAL_GetTick>
 8003fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fb0:	e00a      	b.n	8003fc8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fb2:	f7fd faef 	bl	8001594 <HAL_GetTick>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	1ad3      	subs	r3, r2, r3
 8003fbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d901      	bls.n	8003fc8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003fc4:	2303      	movs	r3, #3
 8003fc6:	e12b      	b.n	8004220 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003fc8:	4b6a      	ldr	r3, [pc, #424]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1ed      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003fd6:	7ffb      	ldrb	r3, [r7, #31]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d105      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fdc:	4b65      	ldr	r3, [pc, #404]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003fde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fe0:	4a64      	ldr	r2, [pc, #400]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003fe2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fe6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0320 	and.w	r3, r3, #32
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d03c      	beq.n	800406e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d01c      	beq.n	8004036 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003ffc:	4b5d      	ldr	r3, [pc, #372]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8003ffe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004002:	4a5c      	ldr	r2, [pc, #368]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8004004:	f043 0301 	orr.w	r3, r3, #1
 8004008:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800400c:	f7fd fac2 	bl	8001594 <HAL_GetTick>
 8004010:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004012:	e008      	b.n	8004026 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004014:	f7fd fabe 	bl	8001594 <HAL_GetTick>
 8004018:	4602      	mov	r2, r0
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	1ad3      	subs	r3, r2, r3
 800401e:	2b02      	cmp	r3, #2
 8004020:	d901      	bls.n	8004026 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e0fc      	b.n	8004220 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004026:	4b53      	ldr	r3, [pc, #332]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8004028:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800402c:	f003 0302 	and.w	r3, r3, #2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d0ef      	beq.n	8004014 <HAL_RCC_OscConfig+0x418>
 8004034:	e01b      	b.n	800406e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004036:	4b4f      	ldr	r3, [pc, #316]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8004038:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800403c:	4a4d      	ldr	r2, [pc, #308]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 800403e:	f023 0301 	bic.w	r3, r3, #1
 8004042:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004046:	f7fd faa5 	bl	8001594 <HAL_GetTick>
 800404a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800404c:	e008      	b.n	8004060 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800404e:	f7fd faa1 	bl	8001594 <HAL_GetTick>
 8004052:	4602      	mov	r2, r0
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	1ad3      	subs	r3, r2, r3
 8004058:	2b02      	cmp	r3, #2
 800405a:	d901      	bls.n	8004060 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800405c:	2303      	movs	r3, #3
 800405e:	e0df      	b.n	8004220 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004060:	4b44      	ldr	r3, [pc, #272]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8004062:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1ef      	bne.n	800404e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 80d3 	beq.w	800421e <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004078:	4b3e      	ldr	r3, [pc, #248]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 800407a:	689b      	ldr	r3, [r3, #8]
 800407c:	f003 030c 	and.w	r3, r3, #12
 8004080:	2b0c      	cmp	r3, #12
 8004082:	f000 808d 	beq.w	80041a0 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	2b02      	cmp	r3, #2
 800408c:	d15a      	bne.n	8004144 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800408e:	4b39      	ldr	r3, [pc, #228]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a38      	ldr	r2, [pc, #224]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8004094:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004098:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800409a:	f7fd fa7b 	bl	8001594 <HAL_GetTick>
 800409e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040a0:	e008      	b.n	80040b4 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040a2:	f7fd fa77 	bl	8001594 <HAL_GetTick>
 80040a6:	4602      	mov	r2, r0
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	1ad3      	subs	r3, r2, r3
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d901      	bls.n	80040b4 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e0b5      	b.n	8004220 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80040b4:	4b2f      	ldr	r3, [pc, #188]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1f0      	bne.n	80040a2 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040c0:	4b2c      	ldr	r3, [pc, #176]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	4b2d      	ldr	r3, [pc, #180]	; (800417c <HAL_RCC_OscConfig+0x580>)
 80040c6:	4013      	ands	r3, r2
 80040c8:	687a      	ldr	r2, [r7, #4]
 80040ca:	6a11      	ldr	r1, [r2, #32]
 80040cc:	687a      	ldr	r2, [r7, #4]
 80040ce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040d0:	3a01      	subs	r2, #1
 80040d2:	0112      	lsls	r2, r2, #4
 80040d4:	4311      	orrs	r1, r2
 80040d6:	687a      	ldr	r2, [r7, #4]
 80040d8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80040da:	0212      	lsls	r2, r2, #8
 80040dc:	4311      	orrs	r1, r2
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80040e2:	0852      	lsrs	r2, r2, #1
 80040e4:	3a01      	subs	r2, #1
 80040e6:	0552      	lsls	r2, r2, #21
 80040e8:	4311      	orrs	r1, r2
 80040ea:	687a      	ldr	r2, [r7, #4]
 80040ec:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80040ee:	0852      	lsrs	r2, r2, #1
 80040f0:	3a01      	subs	r2, #1
 80040f2:	0652      	lsls	r2, r2, #25
 80040f4:	4311      	orrs	r1, r2
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80040fa:	06d2      	lsls	r2, r2, #27
 80040fc:	430a      	orrs	r2, r1
 80040fe:	491d      	ldr	r1, [pc, #116]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8004100:	4313      	orrs	r3, r2
 8004102:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004104:	4b1b      	ldr	r3, [pc, #108]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a1a      	ldr	r2, [pc, #104]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 800410a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800410e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004110:	4b18      	ldr	r3, [pc, #96]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	4a17      	ldr	r2, [pc, #92]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8004116:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800411a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411c:	f7fd fa3a 	bl	8001594 <HAL_GetTick>
 8004120:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004122:	e008      	b.n	8004136 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004124:	f7fd fa36 	bl	8001594 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	2b02      	cmp	r3, #2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e074      	b.n	8004220 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004136:	4b0f      	ldr	r3, [pc, #60]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d0f0      	beq.n	8004124 <HAL_RCC_OscConfig+0x528>
 8004142:	e06c      	b.n	800421e <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004144:	4b0b      	ldr	r3, [pc, #44]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a0a      	ldr	r2, [pc, #40]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 800414a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800414e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004150:	4b08      	ldr	r3, [pc, #32]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	4a07      	ldr	r2, [pc, #28]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8004156:	f023 0303 	bic.w	r3, r3, #3
 800415a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800415c:	4b05      	ldr	r3, [pc, #20]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 800415e:	68db      	ldr	r3, [r3, #12]
 8004160:	4a04      	ldr	r2, [pc, #16]	; (8004174 <HAL_RCC_OscConfig+0x578>)
 8004162:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004166:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800416a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7fd fa12 	bl	8001594 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004172:	e00e      	b.n	8004192 <HAL_RCC_OscConfig+0x596>
 8004174:	40021000 	.word	0x40021000
 8004178:	40007000 	.word	0x40007000
 800417c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004180:	f7fd fa08 	bl	8001594 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e046      	b.n	8004220 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004192:	4b25      	ldr	r3, [pc, #148]	; (8004228 <HAL_RCC_OscConfig+0x62c>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <HAL_RCC_OscConfig+0x584>
 800419e:	e03e      	b.n	800421e <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	69db      	ldr	r3, [r3, #28]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d101      	bne.n	80041ac <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e039      	b.n	8004220 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 80041ac:	4b1e      	ldr	r3, [pc, #120]	; (8004228 <HAL_RCC_OscConfig+0x62c>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041b2:	697b      	ldr	r3, [r7, #20]
 80041b4:	f003 0203 	and.w	r2, r3, #3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6a1b      	ldr	r3, [r3, #32]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d12c      	bne.n	800421a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	3b01      	subs	r3, #1
 80041cc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d123      	bne.n	800421a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041dc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041de:	429a      	cmp	r2, r3
 80041e0:	d11b      	bne.n	800421a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80041e2:	697b      	ldr	r3, [r7, #20]
 80041e4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ec:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80041ee:	429a      	cmp	r2, r3
 80041f0:	d113      	bne.n	800421a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fc:	085b      	lsrs	r3, r3, #1
 80041fe:	3b01      	subs	r3, #1
 8004200:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004202:	429a      	cmp	r2, r3
 8004204:	d109      	bne.n	800421a <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004210:	085b      	lsrs	r3, r3, #1
 8004212:	3b01      	subs	r3, #1
 8004214:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004216:	429a      	cmp	r2, r3
 8004218:	d001      	beq.n	800421e <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e000      	b.n	8004220 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3720      	adds	r7, #32
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}
 8004228:	40021000 	.word	0x40021000

0800422c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b086      	sub	sp, #24
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004236:	2300      	movs	r3, #0
 8004238:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d101      	bne.n	8004244 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004240:	2301      	movs	r3, #1
 8004242:	e11e      	b.n	8004482 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004244:	4b91      	ldr	r3, [pc, #580]	; (800448c <HAL_RCC_ClockConfig+0x260>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f003 030f 	and.w	r3, r3, #15
 800424c:	683a      	ldr	r2, [r7, #0]
 800424e:	429a      	cmp	r2, r3
 8004250:	d910      	bls.n	8004274 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004252:	4b8e      	ldr	r3, [pc, #568]	; (800448c <HAL_RCC_ClockConfig+0x260>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f023 020f 	bic.w	r2, r3, #15
 800425a:	498c      	ldr	r1, [pc, #560]	; (800448c <HAL_RCC_ClockConfig+0x260>)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	4313      	orrs	r3, r2
 8004260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004262:	4b8a      	ldr	r3, [pc, #552]	; (800448c <HAL_RCC_ClockConfig+0x260>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 030f 	and.w	r3, r3, #15
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	429a      	cmp	r2, r3
 800426e:	d001      	beq.n	8004274 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e106      	b.n	8004482 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f003 0301 	and.w	r3, r3, #1
 800427c:	2b00      	cmp	r3, #0
 800427e:	d073      	beq.n	8004368 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	2b03      	cmp	r3, #3
 8004286:	d129      	bne.n	80042dc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004288:	4b81      	ldr	r3, [pc, #516]	; (8004490 <HAL_RCC_ClockConfig+0x264>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e0f4      	b.n	8004482 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004298:	f000 f972 	bl	8004580 <RCC_GetSysClockFreqFromPLLSource>
 800429c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	4a7c      	ldr	r2, [pc, #496]	; (8004494 <HAL_RCC_ClockConfig+0x268>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d93f      	bls.n	8004326 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80042a6:	4b7a      	ldr	r3, [pc, #488]	; (8004490 <HAL_RCC_ClockConfig+0x264>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d009      	beq.n	80042c6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d033      	beq.n	8004326 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d12f      	bne.n	8004326 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80042c6:	4b72      	ldr	r3, [pc, #456]	; (8004490 <HAL_RCC_ClockConfig+0x264>)
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80042ce:	4a70      	ldr	r2, [pc, #448]	; (8004490 <HAL_RCC_ClockConfig+0x264>)
 80042d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042d4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80042d6:	2380      	movs	r3, #128	; 0x80
 80042d8:	617b      	str	r3, [r7, #20]
 80042da:	e024      	b.n	8004326 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	2b02      	cmp	r3, #2
 80042e2:	d107      	bne.n	80042f4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80042e4:	4b6a      	ldr	r3, [pc, #424]	; (8004490 <HAL_RCC_ClockConfig+0x264>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d109      	bne.n	8004304 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80042f0:	2301      	movs	r3, #1
 80042f2:	e0c6      	b.n	8004482 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80042f4:	4b66      	ldr	r3, [pc, #408]	; (8004490 <HAL_RCC_ClockConfig+0x264>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d101      	bne.n	8004304 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004300:	2301      	movs	r3, #1
 8004302:	e0be      	b.n	8004482 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004304:	f000 f8ce 	bl	80044a4 <HAL_RCC_GetSysClockFreq>
 8004308:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	4a61      	ldr	r2, [pc, #388]	; (8004494 <HAL_RCC_ClockConfig+0x268>)
 800430e:	4293      	cmp	r3, r2
 8004310:	d909      	bls.n	8004326 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8004312:	4b5f      	ldr	r3, [pc, #380]	; (8004490 <HAL_RCC_ClockConfig+0x264>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800431a:	4a5d      	ldr	r2, [pc, #372]	; (8004490 <HAL_RCC_ClockConfig+0x264>)
 800431c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004320:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004322:	2380      	movs	r3, #128	; 0x80
 8004324:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004326:	4b5a      	ldr	r3, [pc, #360]	; (8004490 <HAL_RCC_ClockConfig+0x264>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f023 0203 	bic.w	r2, r3, #3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	685b      	ldr	r3, [r3, #4]
 8004332:	4957      	ldr	r1, [pc, #348]	; (8004490 <HAL_RCC_ClockConfig+0x264>)
 8004334:	4313      	orrs	r3, r2
 8004336:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004338:	f7fd f92c 	bl	8001594 <HAL_GetTick>
 800433c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800433e:	e00a      	b.n	8004356 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004340:	f7fd f928 	bl	8001594 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	f241 3288 	movw	r2, #5000	; 0x1388
 800434e:	4293      	cmp	r3, r2
 8004350:	d901      	bls.n	8004356 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e095      	b.n	8004482 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004356:	4b4e      	ldr	r3, [pc, #312]	; (8004490 <HAL_RCC_ClockConfig+0x264>)
 8004358:	689b      	ldr	r3, [r3, #8]
 800435a:	f003 020c 	and.w	r2, r3, #12
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	429a      	cmp	r2, r3
 8004366:	d1eb      	bne.n	8004340 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d023      	beq.n	80043bc <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0304 	and.w	r3, r3, #4
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004380:	4b43      	ldr	r3, [pc, #268]	; (8004490 <HAL_RCC_ClockConfig+0x264>)
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	4a42      	ldr	r2, [pc, #264]	; (8004490 <HAL_RCC_ClockConfig+0x264>)
 8004386:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800438a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0308 	and.w	r3, r3, #8
 8004394:	2b00      	cmp	r3, #0
 8004396:	d007      	beq.n	80043a8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004398:	4b3d      	ldr	r3, [pc, #244]	; (8004490 <HAL_RCC_ClockConfig+0x264>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80043a0:	4a3b      	ldr	r2, [pc, #236]	; (8004490 <HAL_RCC_ClockConfig+0x264>)
 80043a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80043a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80043a8:	4b39      	ldr	r3, [pc, #228]	; (8004490 <HAL_RCC_ClockConfig+0x264>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	4936      	ldr	r1, [pc, #216]	; (8004490 <HAL_RCC_ClockConfig+0x264>)
 80043b6:	4313      	orrs	r3, r2
 80043b8:	608b      	str	r3, [r1, #8]
 80043ba:	e008      	b.n	80043ce <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	2b80      	cmp	r3, #128	; 0x80
 80043c0:	d105      	bne.n	80043ce <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80043c2:	4b33      	ldr	r3, [pc, #204]	; (8004490 <HAL_RCC_ClockConfig+0x264>)
 80043c4:	689b      	ldr	r3, [r3, #8]
 80043c6:	4a32      	ldr	r2, [pc, #200]	; (8004490 <HAL_RCC_ClockConfig+0x264>)
 80043c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043cc:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80043ce:	4b2f      	ldr	r3, [pc, #188]	; (800448c <HAL_RCC_ClockConfig+0x260>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f003 030f 	and.w	r3, r3, #15
 80043d6:	683a      	ldr	r2, [r7, #0]
 80043d8:	429a      	cmp	r2, r3
 80043da:	d21d      	bcs.n	8004418 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043dc:	4b2b      	ldr	r3, [pc, #172]	; (800448c <HAL_RCC_ClockConfig+0x260>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f023 020f 	bic.w	r2, r3, #15
 80043e4:	4929      	ldr	r1, [pc, #164]	; (800448c <HAL_RCC_ClockConfig+0x260>)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80043ec:	f7fd f8d2 	bl	8001594 <HAL_GetTick>
 80043f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f2:	e00a      	b.n	800440a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f4:	f7fd f8ce 	bl	8001594 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e03b      	b.n	8004482 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800440a:	4b20      	ldr	r3, [pc, #128]	; (800448c <HAL_RCC_ClockConfig+0x260>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f003 030f 	and.w	r3, r3, #15
 8004412:	683a      	ldr	r2, [r7, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d1ed      	bne.n	80043f4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004424:	4b1a      	ldr	r3, [pc, #104]	; (8004490 <HAL_RCC_ClockConfig+0x264>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	4917      	ldr	r1, [pc, #92]	; (8004490 <HAL_RCC_ClockConfig+0x264>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0308 	and.w	r3, r3, #8
 800443e:	2b00      	cmp	r3, #0
 8004440:	d009      	beq.n	8004456 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004442:	4b13      	ldr	r3, [pc, #76]	; (8004490 <HAL_RCC_ClockConfig+0x264>)
 8004444:	689b      	ldr	r3, [r3, #8]
 8004446:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	490f      	ldr	r1, [pc, #60]	; (8004490 <HAL_RCC_ClockConfig+0x264>)
 8004452:	4313      	orrs	r3, r2
 8004454:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004456:	f000 f825 	bl	80044a4 <HAL_RCC_GetSysClockFreq>
 800445a:	4601      	mov	r1, r0
 800445c:	4b0c      	ldr	r3, [pc, #48]	; (8004490 <HAL_RCC_ClockConfig+0x264>)
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	091b      	lsrs	r3, r3, #4
 8004462:	f003 030f 	and.w	r3, r3, #15
 8004466:	4a0c      	ldr	r2, [pc, #48]	; (8004498 <HAL_RCC_ClockConfig+0x26c>)
 8004468:	5cd3      	ldrb	r3, [r2, r3]
 800446a:	f003 031f 	and.w	r3, r3, #31
 800446e:	fa21 f303 	lsr.w	r3, r1, r3
 8004472:	4a0a      	ldr	r2, [pc, #40]	; (800449c <HAL_RCC_ClockConfig+0x270>)
 8004474:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004476:	4b0a      	ldr	r3, [pc, #40]	; (80044a0 <HAL_RCC_ClockConfig+0x274>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f7fd f83e 	bl	80014fc <HAL_InitTick>
 8004480:	4603      	mov	r3, r0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3718      	adds	r7, #24
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
 800448a:	bf00      	nop
 800448c:	40022000 	.word	0x40022000
 8004490:	40021000 	.word	0x40021000
 8004494:	04c4b400 	.word	0x04c4b400
 8004498:	080075b4 	.word	0x080075b4
 800449c:	20000004 	.word	0x20000004
 80044a0:	20000008 	.word	0x20000008

080044a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044a4:	b480      	push	{r7}
 80044a6:	b087      	sub	sp, #28
 80044a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80044aa:	4b2c      	ldr	r3, [pc, #176]	; (800455c <HAL_RCC_GetSysClockFreq+0xb8>)
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f003 030c 	and.w	r3, r3, #12
 80044b2:	2b04      	cmp	r3, #4
 80044b4:	d102      	bne.n	80044bc <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80044b6:	4b2a      	ldr	r3, [pc, #168]	; (8004560 <HAL_RCC_GetSysClockFreq+0xbc>)
 80044b8:	613b      	str	r3, [r7, #16]
 80044ba:	e047      	b.n	800454c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80044bc:	4b27      	ldr	r3, [pc, #156]	; (800455c <HAL_RCC_GetSysClockFreq+0xb8>)
 80044be:	689b      	ldr	r3, [r3, #8]
 80044c0:	f003 030c 	and.w	r3, r3, #12
 80044c4:	2b08      	cmp	r3, #8
 80044c6:	d102      	bne.n	80044ce <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80044c8:	4b26      	ldr	r3, [pc, #152]	; (8004564 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044ca:	613b      	str	r3, [r7, #16]
 80044cc:	e03e      	b.n	800454c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80044ce:	4b23      	ldr	r3, [pc, #140]	; (800455c <HAL_RCC_GetSysClockFreq+0xb8>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 030c 	and.w	r3, r3, #12
 80044d6:	2b0c      	cmp	r3, #12
 80044d8:	d136      	bne.n	8004548 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80044da:	4b20      	ldr	r3, [pc, #128]	; (800455c <HAL_RCC_GetSysClockFreq+0xb8>)
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	f003 0303 	and.w	r3, r3, #3
 80044e2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80044e4:	4b1d      	ldr	r3, [pc, #116]	; (800455c <HAL_RCC_GetSysClockFreq+0xb8>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	091b      	lsrs	r3, r3, #4
 80044ea:	f003 030f 	and.w	r3, r3, #15
 80044ee:	3301      	adds	r3, #1
 80044f0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	2b03      	cmp	r3, #3
 80044f6:	d10c      	bne.n	8004512 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80044f8:	4a1a      	ldr	r2, [pc, #104]	; (8004564 <HAL_RCC_GetSysClockFreq+0xc0>)
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004500:	4a16      	ldr	r2, [pc, #88]	; (800455c <HAL_RCC_GetSysClockFreq+0xb8>)
 8004502:	68d2      	ldr	r2, [r2, #12]
 8004504:	0a12      	lsrs	r2, r2, #8
 8004506:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800450a:	fb02 f303 	mul.w	r3, r2, r3
 800450e:	617b      	str	r3, [r7, #20]
      break;
 8004510:	e00c      	b.n	800452c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004512:	4a13      	ldr	r2, [pc, #76]	; (8004560 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	fbb2 f3f3 	udiv	r3, r2, r3
 800451a:	4a10      	ldr	r2, [pc, #64]	; (800455c <HAL_RCC_GetSysClockFreq+0xb8>)
 800451c:	68d2      	ldr	r2, [r2, #12]
 800451e:	0a12      	lsrs	r2, r2, #8
 8004520:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004524:	fb02 f303 	mul.w	r3, r2, r3
 8004528:	617b      	str	r3, [r7, #20]
      break;
 800452a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800452c:	4b0b      	ldr	r3, [pc, #44]	; (800455c <HAL_RCC_GetSysClockFreq+0xb8>)
 800452e:	68db      	ldr	r3, [r3, #12]
 8004530:	0e5b      	lsrs	r3, r3, #25
 8004532:	f003 0303 	and.w	r3, r3, #3
 8004536:	3301      	adds	r3, #1
 8004538:	005b      	lsls	r3, r3, #1
 800453a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	fbb2 f3f3 	udiv	r3, r2, r3
 8004544:	613b      	str	r3, [r7, #16]
 8004546:	e001      	b.n	800454c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004548:	2300      	movs	r3, #0
 800454a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800454c:	693b      	ldr	r3, [r7, #16]
}
 800454e:	4618      	mov	r0, r3
 8004550:	371c      	adds	r7, #28
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr
 800455a:	bf00      	nop
 800455c:	40021000 	.word	0x40021000
 8004560:	00f42400 	.word	0x00f42400
 8004564:	007a1200 	.word	0x007a1200

08004568 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004568:	b480      	push	{r7}
 800456a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800456c:	4b03      	ldr	r3, [pc, #12]	; (800457c <HAL_RCC_GetHCLKFreq+0x14>)
 800456e:	681b      	ldr	r3, [r3, #0]
}
 8004570:	4618      	mov	r0, r3
 8004572:	46bd      	mov	sp, r7
 8004574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	20000004 	.word	0x20000004

08004580 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004580:	b480      	push	{r7}
 8004582:	b087      	sub	sp, #28
 8004584:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004586:	4b1e      	ldr	r3, [pc, #120]	; (8004600 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	f003 0303 	and.w	r3, r3, #3
 800458e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004590:	4b1b      	ldr	r3, [pc, #108]	; (8004600 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	091b      	lsrs	r3, r3, #4
 8004596:	f003 030f 	and.w	r3, r3, #15
 800459a:	3301      	adds	r3, #1
 800459c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b03      	cmp	r3, #3
 80045a2:	d10c      	bne.n	80045be <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045a4:	4a17      	ldr	r2, [pc, #92]	; (8004604 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ac:	4a14      	ldr	r2, [pc, #80]	; (8004600 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045ae:	68d2      	ldr	r2, [r2, #12]
 80045b0:	0a12      	lsrs	r2, r2, #8
 80045b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045b6:	fb02 f303 	mul.w	r3, r2, r3
 80045ba:	617b      	str	r3, [r7, #20]
    break;
 80045bc:	e00c      	b.n	80045d8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045be:	4a12      	ldr	r2, [pc, #72]	; (8004608 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c6:	4a0e      	ldr	r2, [pc, #56]	; (8004600 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045c8:	68d2      	ldr	r2, [r2, #12]
 80045ca:	0a12      	lsrs	r2, r2, #8
 80045cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045d0:	fb02 f303 	mul.w	r3, r2, r3
 80045d4:	617b      	str	r3, [r7, #20]
    break;
 80045d6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045d8:	4b09      	ldr	r3, [pc, #36]	; (8004600 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	0e5b      	lsrs	r3, r3, #25
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	3301      	adds	r3, #1
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80045e8:	697a      	ldr	r2, [r7, #20]
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80045f0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80045f2:	687b      	ldr	r3, [r7, #4]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	371c      	adds	r7, #28
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	40021000 	.word	0x40021000
 8004604:	007a1200 	.word	0x007a1200
 8004608:	00f42400 	.word	0x00f42400

0800460c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004614:	2300      	movs	r3, #0
 8004616:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004618:	2300      	movs	r3, #0
 800461a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 8098 	beq.w	800475a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800462a:	2300      	movs	r3, #0
 800462c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800462e:	4b43      	ldr	r3, [pc, #268]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10d      	bne.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800463a:	4b40      	ldr	r3, [pc, #256]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800463c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800463e:	4a3f      	ldr	r2, [pc, #252]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004644:	6593      	str	r3, [r2, #88]	; 0x58
 8004646:	4b3d      	ldr	r3, [pc, #244]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800464a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800464e:	60bb      	str	r3, [r7, #8]
 8004650:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004652:	2301      	movs	r3, #1
 8004654:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004656:	4b3a      	ldr	r3, [pc, #232]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a39      	ldr	r2, [pc, #228]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800465c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004660:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004662:	f7fc ff97 	bl	8001594 <HAL_GetTick>
 8004666:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004668:	e009      	b.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800466a:	f7fc ff93 	bl	8001594 <HAL_GetTick>
 800466e:	4602      	mov	r2, r0
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	1ad3      	subs	r3, r2, r3
 8004674:	2b02      	cmp	r3, #2
 8004676:	d902      	bls.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004678:	2303      	movs	r3, #3
 800467a:	74fb      	strb	r3, [r7, #19]
        break;
 800467c:	e005      	b.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800467e:	4b30      	ldr	r3, [pc, #192]	; (8004740 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004686:	2b00      	cmp	r3, #0
 8004688:	d0ef      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800468a:	7cfb      	ldrb	r3, [r7, #19]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d159      	bne.n	8004744 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004690:	4b2a      	ldr	r3, [pc, #168]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800469a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d01e      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	429a      	cmp	r2, r3
 80046aa:	d019      	beq.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80046ac:	4b23      	ldr	r3, [pc, #140]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80046b8:	4b20      	ldr	r3, [pc, #128]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046be:	4a1f      	ldr	r2, [pc, #124]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80046c8:	4b1c      	ldr	r3, [pc, #112]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ce:	4a1b      	ldr	r2, [pc, #108]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80046d8:	4a18      	ldr	r2, [pc, #96]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	f003 0301 	and.w	r3, r3, #1
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d016      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046ea:	f7fc ff53 	bl	8001594 <HAL_GetTick>
 80046ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80046f0:	e00b      	b.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046f2:	f7fc ff4f 	bl	8001594 <HAL_GetTick>
 80046f6:	4602      	mov	r2, r0
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	1ad3      	subs	r3, r2, r3
 80046fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004700:	4293      	cmp	r3, r2
 8004702:	d902      	bls.n	800470a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004704:	2303      	movs	r3, #3
 8004706:	74fb      	strb	r3, [r7, #19]
            break;
 8004708:	e006      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800470a:	4b0c      	ldr	r3, [pc, #48]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800470c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004710:	f003 0302 	and.w	r3, r3, #2
 8004714:	2b00      	cmp	r3, #0
 8004716:	d0ec      	beq.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004718:	7cfb      	ldrb	r3, [r7, #19]
 800471a:	2b00      	cmp	r3, #0
 800471c:	d10b      	bne.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800471e:	4b07      	ldr	r3, [pc, #28]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004724:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800472c:	4903      	ldr	r1, [pc, #12]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800472e:	4313      	orrs	r3, r2
 8004730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004734:	e008      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004736:	7cfb      	ldrb	r3, [r7, #19]
 8004738:	74bb      	strb	r3, [r7, #18]
 800473a:	e005      	b.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800473c:	40021000 	.word	0x40021000
 8004740:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004744:	7cfb      	ldrb	r3, [r7, #19]
 8004746:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004748:	7c7b      	ldrb	r3, [r7, #17]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d105      	bne.n	800475a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800474e:	4baf      	ldr	r3, [pc, #700]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004752:	4aae      	ldr	r2, [pc, #696]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004754:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004758:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b00      	cmp	r3, #0
 8004764:	d00a      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004766:	4ba9      	ldr	r3, [pc, #676]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800476c:	f023 0203 	bic.w	r2, r3, #3
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	49a5      	ldr	r1, [pc, #660]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004776:	4313      	orrs	r3, r2
 8004778:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00a      	beq.n	800479e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004788:	4ba0      	ldr	r3, [pc, #640]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800478a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800478e:	f023 020c 	bic.w	r2, r3, #12
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	499d      	ldr	r1, [pc, #628]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004798:	4313      	orrs	r3, r2
 800479a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0304 	and.w	r3, r3, #4
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00a      	beq.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80047aa:	4b98      	ldr	r3, [pc, #608]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047b0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	4994      	ldr	r1, [pc, #592]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047ba:	4313      	orrs	r3, r2
 80047bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 0308 	and.w	r3, r3, #8
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d00a      	beq.n	80047e2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80047cc:	4b8f      	ldr	r3, [pc, #572]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047d2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	498c      	ldr	r1, [pc, #560]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047dc:	4313      	orrs	r3, r2
 80047de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f003 0310 	and.w	r3, r3, #16
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d00a      	beq.n	8004804 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80047ee:	4b87      	ldr	r3, [pc, #540]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	695b      	ldr	r3, [r3, #20]
 80047fc:	4983      	ldr	r1, [pc, #524]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80047fe:	4313      	orrs	r3, r2
 8004800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	f003 0320 	and.w	r3, r3, #32
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00a      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004810:	4b7e      	ldr	r3, [pc, #504]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004816:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	497b      	ldr	r1, [pc, #492]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004820:	4313      	orrs	r3, r2
 8004822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482e:	2b00      	cmp	r3, #0
 8004830:	d00a      	beq.n	8004848 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004832:	4b76      	ldr	r3, [pc, #472]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004838:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	4972      	ldr	r1, [pc, #456]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004842:	4313      	orrs	r3, r2
 8004844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004850:	2b00      	cmp	r3, #0
 8004852:	d00a      	beq.n	800486a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004854:	4b6d      	ldr	r3, [pc, #436]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6a1b      	ldr	r3, [r3, #32]
 8004862:	496a      	ldr	r1, [pc, #424]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004864:	4313      	orrs	r3, r2
 8004866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00a      	beq.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004876:	4b65      	ldr	r3, [pc, #404]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004878:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800487c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004884:	4961      	ldr	r1, [pc, #388]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004886:	4313      	orrs	r3, r2
 8004888:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004894:	2b00      	cmp	r3, #0
 8004896:	d00a      	beq.n	80048ae <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004898:	4b5c      	ldr	r3, [pc, #368]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800489a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800489e:	f023 0203 	bic.w	r2, r3, #3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048a6:	4959      	ldr	r1, [pc, #356]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048a8:	4313      	orrs	r3, r2
 80048aa:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00a      	beq.n	80048d0 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048ba:	4b54      	ldr	r3, [pc, #336]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c8:	4950      	ldr	r1, [pc, #320]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d015      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80048dc:	4b4b      	ldr	r3, [pc, #300]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048ea:	4948      	ldr	r1, [pc, #288]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80048fa:	d105      	bne.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80048fc:	4b43      	ldr	r3, [pc, #268]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	4a42      	ldr	r2, [pc, #264]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004906:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004910:	2b00      	cmp	r3, #0
 8004912:	d015      	beq.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004914:	4b3d      	ldr	r3, [pc, #244]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800491a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004922:	493a      	ldr	r1, [pc, #232]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004924:	4313      	orrs	r3, r2
 8004926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800492e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004932:	d105      	bne.n	8004940 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004934:	4b35      	ldr	r3, [pc, #212]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004936:	68db      	ldr	r3, [r3, #12]
 8004938:	4a34      	ldr	r2, [pc, #208]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800493a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800493e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004948:	2b00      	cmp	r3, #0
 800494a:	d015      	beq.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800494c:	4b2f      	ldr	r3, [pc, #188]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800494e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004952:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800495a:	492c      	ldr	r1, [pc, #176]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800495c:	4313      	orrs	r3, r2
 800495e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004966:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800496a:	d105      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800496c:	4b27      	ldr	r3, [pc, #156]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	4a26      	ldr	r2, [pc, #152]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004972:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004976:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d015      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004984:	4b21      	ldr	r3, [pc, #132]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800498a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004992:	491e      	ldr	r1, [pc, #120]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004994:	4313      	orrs	r3, r2
 8004996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800499e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049a2:	d105      	bne.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049a4:	4b19      	ldr	r3, [pc, #100]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80049a6:	68db      	ldr	r3, [r3, #12]
 80049a8:	4a18      	ldr	r2, [pc, #96]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80049aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049ae:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d015      	beq.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80049bc:	4b13      	ldr	r3, [pc, #76]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ca:	4910      	ldr	r1, [pc, #64]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80049da:	d105      	bne.n	80049e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049dc:	4b0b      	ldr	r3, [pc, #44]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	4a0a      	ldr	r2, [pc, #40]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80049e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049e6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d018      	beq.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80049f4:	4b05      	ldr	r3, [pc, #20]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80049f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049fa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a02:	4902      	ldr	r1, [pc, #8]	; (8004a0c <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8004a04:	4313      	orrs	r3, r2
 8004a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004a0a:	e001      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8004a0c:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a14:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a18:	d105      	bne.n	8004a26 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a1a:	4b21      	ldr	r3, [pc, #132]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	4a20      	ldr	r2, [pc, #128]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a24:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d015      	beq.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004a32:	4b1b      	ldr	r3, [pc, #108]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a38:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a40:	4917      	ldr	r1, [pc, #92]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a50:	d105      	bne.n	8004a5e <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a52:	4b13      	ldr	r3, [pc, #76]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	4a12      	ldr	r2, [pc, #72]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a5c:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d015      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004a6a:	4b0d      	ldr	r3, [pc, #52]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a78:	4909      	ldr	r1, [pc, #36]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a84:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a88:	d105      	bne.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a8a:	4b05      	ldr	r3, [pc, #20]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	4a04      	ldr	r2, [pc, #16]	; (8004aa0 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8004a90:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a94:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004a96:	7cbb      	ldrb	r3, [r7, #18]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3718      	adds	r7, #24
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}
 8004aa0:	40021000 	.word	0x40021000

08004aa4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e027      	b.n	8004b06 <HAL_RNG_Init+0x62>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	7a5b      	ldrb	r3, [r3, #9]
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d105      	bne.n	8004acc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fc f8ca 	bl	8000c60 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2202      	movs	r2, #2
 8004ad0:	725a      	strb	r2, [r3, #9]

  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f023 0108 	bic.w	r1, r3, #8
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	685a      	ldr	r2, [r3, #4]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	601a      	str	r2, [r3, #0]

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0204 	orr.w	r2, r2, #4
 8004af6:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2201      	movs	r2, #1
 8004afc:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b084      	sub	sp, #16
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	6078      	str	r0, [r7, #4]
 8004b16:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b18:	2300      	movs	r3, #0
 8004b1a:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	7a1b      	ldrb	r3, [r3, #8]
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d101      	bne.n	8004b28 <HAL_RNG_GenerateRandomNumber+0x1a>
 8004b24:	2302      	movs	r3, #2
 8004b26:	e03d      	b.n	8004ba4 <HAL_RNG_GenerateRandomNumber+0x96>
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	7a5b      	ldrb	r3, [r3, #9]
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b01      	cmp	r3, #1
 8004b36:	d12c      	bne.n	8004b92 <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	725a      	strb	r2, [r3, #9]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004b3e:	f7fc fd29 	bl	8001594 <HAL_GetTick>
 8004b42:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004b44:	e011      	b.n	8004b6a <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004b46:	f7fc fd25 	bl	8001594 <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	2b02      	cmp	r3, #2
 8004b52:	d90a      	bls.n	8004b6a <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2202      	movs	r2, #2
 8004b5e:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2200      	movs	r2, #0
 8004b64:	721a      	strb	r2, [r3, #8]
        return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e01c      	b.n	8004ba4 <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d1e6      	bne.n	8004b46 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689a      	ldr	r2, [r3, #8]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	611a      	str	r2, [r3, #16]
    *random32bit = hrng->RandomNumber;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691a      	ldr	r2, [r3, #16]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	725a      	strb	r2, [r3, #9]
 8004b90:	e004      	b.n	8004b9c <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2204      	movs	r2, #4
 8004b96:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8004b98:	2301      	movs	r3, #1
 8004b9a:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	721a      	strb	r2, [r3, #8]

  return status;
 8004ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e084      	b.n	8004cc8 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d106      	bne.n	8004bde <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7fc f89f 	bl	8000d1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2202      	movs	r2, #2
 8004be2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	681a      	ldr	r2, [r3, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004bf4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	68db      	ldr	r3, [r3, #12]
 8004bfa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004bfe:	d902      	bls.n	8004c06 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004c00:	2300      	movs	r3, #0
 8004c02:	60fb      	str	r3, [r7, #12]
 8004c04:	e002      	b.n	8004c0c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004c06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c0a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	68db      	ldr	r3, [r3, #12]
 8004c10:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004c14:	d007      	beq.n	8004c26 <HAL_SPI_Init+0x7a>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	68db      	ldr	r3, [r3, #12]
 8004c1a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c1e:	d002      	beq.n	8004c26 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d10b      	bne.n	8004c46 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004c36:	d903      	bls.n	8004c40 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2202      	movs	r2, #2
 8004c3c:	631a      	str	r2, [r3, #48]	; 0x30
 8004c3e:	e002      	b.n	8004c46 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685a      	ldr	r2, [r3, #4]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	431a      	orrs	r2, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c64:	431a      	orrs	r2, r3
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	69db      	ldr	r3, [r3, #28]
 8004c6a:	431a      	orrs	r2, r3
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	ea42 0103 	orr.w	r1, r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	699b      	ldr	r3, [r3, #24]
 8004c84:	0c1b      	lsrs	r3, r3, #16
 8004c86:	f003 0204 	and.w	r2, r3, #4
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8e:	431a      	orrs	r2, r3
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c94:	431a      	orrs	r2, r3
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	ea42 0103 	orr.w	r1, r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68fa      	ldr	r2, [r7, #12]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	69da      	ldr	r2, [r3, #28]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004cb6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3710      	adds	r7, #16
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}

08004cd0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b088      	sub	sp, #32
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d101      	bne.n	8004cf2 <HAL_SPI_Transmit+0x22>
 8004cee:	2302      	movs	r3, #2
 8004cf0:	e150      	b.n	8004f94 <HAL_SPI_Transmit+0x2c4>
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cfa:	f7fc fc4b 	bl	8001594 <HAL_GetTick>
 8004cfe:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004d00:	88fb      	ldrh	r3, [r7, #6]
 8004d02:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004d0a:	b2db      	uxtb	r3, r3
 8004d0c:	2b01      	cmp	r3, #1
 8004d0e:	d002      	beq.n	8004d16 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004d10:	2302      	movs	r3, #2
 8004d12:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d14:	e135      	b.n	8004f82 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d002      	beq.n	8004d22 <HAL_SPI_Transmit+0x52>
 8004d1c:	88fb      	ldrh	r3, [r7, #6]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d102      	bne.n	8004d28 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004d26:	e12c      	b.n	8004f82 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2203      	movs	r2, #3
 8004d2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	88fa      	ldrh	r2, [r7, #6]
 8004d40:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	88fa      	ldrh	r2, [r7, #6]
 8004d46:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2200      	movs	r2, #0
 8004d4c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d72:	d107      	bne.n	8004d84 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	681a      	ldr	r2, [r3, #0]
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004d82:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8e:	2b40      	cmp	r3, #64	; 0x40
 8004d90:	d007      	beq.n	8004da2 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004da0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004daa:	d94b      	bls.n	8004e44 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <HAL_SPI_Transmit+0xea>
 8004db4:	8afb      	ldrh	r3, [r7, #22]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d13e      	bne.n	8004e38 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dbe:	881a      	ldrh	r2, [r3, #0]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dca:	1c9a      	adds	r2, r3, #2
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dd4:	b29b      	uxth	r3, r3
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004dde:	e02b      	b.n	8004e38 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d112      	bne.n	8004e14 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df2:	881a      	ldrh	r2, [r3, #0]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfe:	1c9a      	adds	r2, r3, #2
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e12:	e011      	b.n	8004e38 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e14:	f7fc fbbe 	bl	8001594 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	683a      	ldr	r2, [r7, #0]
 8004e20:	429a      	cmp	r2, r3
 8004e22:	d803      	bhi.n	8004e2c <HAL_SPI_Transmit+0x15c>
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004e2a:	d102      	bne.n	8004e32 <HAL_SPI_Transmit+0x162>
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d102      	bne.n	8004e38 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e36:	e0a4      	b.n	8004f82 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e3c:	b29b      	uxth	r3, r3
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1ce      	bne.n	8004de0 <HAL_SPI_Transmit+0x110>
 8004e42:	e07c      	b.n	8004f3e <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d002      	beq.n	8004e52 <HAL_SPI_Transmit+0x182>
 8004e4c:	8afb      	ldrh	r3, [r7, #22]
 8004e4e:	2b01      	cmp	r3, #1
 8004e50:	d170      	bne.n	8004f34 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b01      	cmp	r3, #1
 8004e5a:	d912      	bls.n	8004e82 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e60:	881a      	ldrh	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e6c:	1c9a      	adds	r2, r3, #2
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	3b02      	subs	r3, #2
 8004e7a:	b29a      	uxth	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e80:	e058      	b.n	8004f34 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	330c      	adds	r3, #12
 8004e8c:	7812      	ldrb	r2, [r2, #0]
 8004e8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e94:	1c5a      	adds	r2, r3, #1
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e9e:	b29b      	uxth	r3, r3
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	b29a      	uxth	r2, r3
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004ea8:	e044      	b.n	8004f34 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	f003 0302 	and.w	r3, r3, #2
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d12b      	bne.n	8004f10 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d912      	bls.n	8004ee8 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec6:	881a      	ldrh	r2, [r3, #0]
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed2:	1c9a      	adds	r2, r3, #2
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	3b02      	subs	r3, #2
 8004ee0:	b29a      	uxth	r2, r3
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004ee6:	e025      	b.n	8004f34 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	330c      	adds	r3, #12
 8004ef2:	7812      	ldrb	r2, [r2, #0]
 8004ef4:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efa:	1c5a      	adds	r2, r3, #1
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f04:	b29b      	uxth	r3, r3
 8004f06:	3b01      	subs	r3, #1
 8004f08:	b29a      	uxth	r2, r3
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004f0e:	e011      	b.n	8004f34 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004f10:	f7fc fb40 	bl	8001594 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	683a      	ldr	r2, [r7, #0]
 8004f1c:	429a      	cmp	r2, r3
 8004f1e:	d803      	bhi.n	8004f28 <HAL_SPI_Transmit+0x258>
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f26:	d102      	bne.n	8004f2e <HAL_SPI_Transmit+0x25e>
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d102      	bne.n	8004f34 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004f32:	e026      	b.n	8004f82 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1b5      	bne.n	8004eaa <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	6839      	ldr	r1, [r7, #0]
 8004f42:	68f8      	ldr	r0, [r7, #12]
 8004f44:	f000 f901 	bl	800514a <SPI_EndRxTxTransaction>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d002      	beq.n	8004f54 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2220      	movs	r2, #32
 8004f52:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	689b      	ldr	r3, [r3, #8]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10a      	bne.n	8004f72 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	613b      	str	r3, [r7, #16]
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	68db      	ldr	r3, [r3, #12]
 8004f66:	613b      	str	r3, [r7, #16]
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	613b      	str	r3, [r7, #16]
 8004f70:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d002      	beq.n	8004f80 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	77fb      	strb	r3, [r7, #31]
 8004f7e:	e000      	b.n	8004f82 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8004f80:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2201      	movs	r2, #1
 8004f86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004f92:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f94:	4618      	mov	r0, r3
 8004f96:	3720      	adds	r7, #32
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}

08004f9c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	603b      	str	r3, [r7, #0]
 8004fa8:	4613      	mov	r3, r2
 8004faa:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004fac:	e04c      	b.n	8005048 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fb4:	d048      	beq.n	8005048 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004fb6:	f7fc faed 	bl	8001594 <HAL_GetTick>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	69bb      	ldr	r3, [r7, #24]
 8004fbe:	1ad3      	subs	r3, r2, r3
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	429a      	cmp	r2, r3
 8004fc4:	d902      	bls.n	8004fcc <SPI_WaitFlagStateUntilTimeout+0x30>
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d13d      	bne.n	8005048 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	685a      	ldr	r2, [r3, #4]
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004fda:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004fe4:	d111      	bne.n	800500a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fee:	d004      	beq.n	8004ffa <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ff8:	d107      	bne.n	800500a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005008:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800500e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005012:	d10f      	bne.n	8005034 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005022:	601a      	str	r2, [r3, #0]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005032:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e00f      	b.n	8005068 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	689a      	ldr	r2, [r3, #8]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	4013      	ands	r3, r2
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	429a      	cmp	r2, r3
 8005056:	bf0c      	ite	eq
 8005058:	2301      	moveq	r3, #1
 800505a:	2300      	movne	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	461a      	mov	r2, r3
 8005060:	79fb      	ldrb	r3, [r7, #7]
 8005062:	429a      	cmp	r2, r3
 8005064:	d1a3      	bne.n	8004fae <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	60f8      	str	r0, [r7, #12]
 8005078:	60b9      	str	r1, [r7, #8]
 800507a:	607a      	str	r2, [r7, #4]
 800507c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800507e:	e057      	b.n	8005130 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005086:	d106      	bne.n	8005096 <SPI_WaitFifoStateUntilTimeout+0x26>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d103      	bne.n	8005096 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	330c      	adds	r3, #12
 8005094:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800509c:	d048      	beq.n	8005130 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800509e:	f7fc fa79 	bl	8001594 <HAL_GetTick>
 80050a2:	4602      	mov	r2, r0
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	1ad3      	subs	r3, r2, r3
 80050a8:	683a      	ldr	r2, [r7, #0]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d902      	bls.n	80050b4 <SPI_WaitFifoStateUntilTimeout+0x44>
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d13d      	bne.n	8005130 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	685a      	ldr	r2, [r3, #4]
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80050c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050cc:	d111      	bne.n	80050f2 <SPI_WaitFifoStateUntilTimeout+0x82>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050d6:	d004      	beq.n	80050e2 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80050e0:	d107      	bne.n	80050f2 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050fa:	d10f      	bne.n	800511c <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	681a      	ldr	r2, [r3, #0]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800510a:	601a      	str	r2, [r3, #0]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800511a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2200      	movs	r2, #0
 8005128:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800512c:	2303      	movs	r3, #3
 800512e:	e008      	b.n	8005142 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	689a      	ldr	r2, [r3, #8]
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	4013      	ands	r3, r2
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	429a      	cmp	r2, r3
 800513e:	d19f      	bne.n	8005080 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b086      	sub	sp, #24
 800514e:	af02      	add	r7, sp, #8
 8005150:	60f8      	str	r0, [r7, #12]
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	2200      	movs	r2, #0
 800515e:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005162:	68f8      	ldr	r0, [r7, #12]
 8005164:	f7ff ff84 	bl	8005070 <SPI_WaitFifoStateUntilTimeout>
 8005168:	4603      	mov	r3, r0
 800516a:	2b00      	cmp	r3, #0
 800516c:	d007      	beq.n	800517e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005172:	f043 0220 	orr.w	r2, r3, #32
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e027      	b.n	80051ce <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	9300      	str	r3, [sp, #0]
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	2200      	movs	r2, #0
 8005186:	2180      	movs	r1, #128	; 0x80
 8005188:	68f8      	ldr	r0, [r7, #12]
 800518a:	f7ff ff07 	bl	8004f9c <SPI_WaitFlagStateUntilTimeout>
 800518e:	4603      	mov	r3, r0
 8005190:	2b00      	cmp	r3, #0
 8005192:	d007      	beq.n	80051a4 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005198:	f043 0220 	orr.w	r2, r3, #32
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e014      	b.n	80051ce <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80051b0:	68f8      	ldr	r0, [r7, #12]
 80051b2:	f7ff ff5d 	bl	8005070 <SPI_WaitFifoStateUntilTimeout>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d007      	beq.n	80051cc <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051c0:	f043 0220 	orr.w	r2, r3, #32
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e000      	b.n	80051ce <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80051cc:	2300      	movs	r3, #0
}
 80051ce:	4618      	mov	r0, r3
 80051d0:	3710      	adds	r7, #16
 80051d2:	46bd      	mov	sp, r7
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	b082      	sub	sp, #8
 80051da:	af00      	add	r7, sp, #0
 80051dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051e4:	2301      	movs	r3, #1
 80051e6:	e049      	b.n	800527c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d106      	bne.n	8005202 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f7fc f8c3 	bl	8001388 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2202      	movs	r2, #2
 8005206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681a      	ldr	r2, [r3, #0]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	3304      	adds	r3, #4
 8005212:	4619      	mov	r1, r3
 8005214:	4610      	mov	r0, r2
 8005216:	f000 fc23 	bl	8005a60 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2201      	movs	r2, #1
 800521e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2201      	movs	r2, #1
 8005226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2201      	movs	r2, #1
 800522e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2201      	movs	r2, #1
 800523e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2201      	movs	r2, #1
 8005246:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2201      	movs	r2, #1
 800524e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2201      	movs	r2, #1
 8005266:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2201      	movs	r2, #1
 8005276:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800527a:	2300      	movs	r3, #0
}
 800527c:	4618      	mov	r0, r3
 800527e:	3708      	adds	r7, #8
 8005280:	46bd      	mov	sp, r7
 8005282:	bd80      	pop	{r7, pc}

08005284 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b01      	cmp	r3, #1
 8005296:	d001      	beq.n	800529c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005298:	2301      	movs	r3, #1
 800529a:	e019      	b.n	80052d0 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2202      	movs	r2, #2
 80052a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	689a      	ldr	r2, [r3, #8]
 80052aa:	4b0c      	ldr	r3, [pc, #48]	; (80052dc <HAL_TIM_Base_Start+0x58>)
 80052ac:	4013      	ands	r3, r2
 80052ae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2b06      	cmp	r3, #6
 80052b4:	d00b      	beq.n	80052ce <HAL_TIM_Base_Start+0x4a>
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80052bc:	d007      	beq.n	80052ce <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	681a      	ldr	r2, [r3, #0]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f042 0201 	orr.w	r2, r2, #1
 80052cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3714      	adds	r7, #20
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr
 80052dc:	00010007 	.word	0x00010007

080052e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ee:	b2db      	uxtb	r3, r3
 80052f0:	2b01      	cmp	r3, #1
 80052f2:	d001      	beq.n	80052f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80052f4:	2301      	movs	r3, #1
 80052f6:	e021      	b.n	800533c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	2202      	movs	r2, #2
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	68da      	ldr	r2, [r3, #12]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0201 	orr.w	r2, r2, #1
 800530e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689a      	ldr	r2, [r3, #8]
 8005316:	4b0c      	ldr	r3, [pc, #48]	; (8005348 <HAL_TIM_Base_Start_IT+0x68>)
 8005318:	4013      	ands	r3, r2
 800531a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2b06      	cmp	r3, #6
 8005320:	d00b      	beq.n	800533a <HAL_TIM_Base_Start_IT+0x5a>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005328:	d007      	beq.n	800533a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	681a      	ldr	r2, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f042 0201 	orr.w	r2, r2, #1
 8005338:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3714      	adds	r7, #20
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr
 8005348:	00010007 	.word	0x00010007

0800534c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800534c:	b580      	push	{r7, lr}
 800534e:	b086      	sub	sp, #24
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
 8005354:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2b00      	cmp	r3, #0
 800535a:	d101      	bne.n	8005360 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	e097      	b.n	8005490 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005366:	b2db      	uxtb	r3, r3
 8005368:	2b00      	cmp	r3, #0
 800536a:	d106      	bne.n	800537a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f7fb ffb3 	bl	80012e0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2202      	movs	r2, #2
 800537e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	6812      	ldr	r2, [r2, #0]
 800538c:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8005390:	f023 0307 	bic.w	r3, r3, #7
 8005394:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	3304      	adds	r3, #4
 800539e:	4619      	mov	r1, r3
 80053a0:	4610      	mov	r0, r2
 80053a2:	f000 fb5d 	bl	8005a60 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	699b      	ldr	r3, [r3, #24]
 80053b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	6a1b      	ldr	r3, [r3, #32]
 80053bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	697a      	ldr	r2, [r7, #20]
 80053c4:	4313      	orrs	r3, r2
 80053c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ce:	f023 0303 	bic.w	r3, r3, #3
 80053d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	021b      	lsls	r3, r3, #8
 80053de:	4313      	orrs	r3, r2
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80053ec:	f023 030c 	bic.w	r3, r3, #12
 80053f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80053f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	69db      	ldr	r3, [r3, #28]
 8005406:	021b      	lsls	r3, r3, #8
 8005408:	4313      	orrs	r3, r2
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	4313      	orrs	r3, r2
 800540e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	691b      	ldr	r3, [r3, #16]
 8005414:	011a      	lsls	r2, r3, #4
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	6a1b      	ldr	r3, [r3, #32]
 800541a:	031b      	lsls	r3, r3, #12
 800541c:	4313      	orrs	r3, r2
 800541e:	693a      	ldr	r2, [r7, #16]
 8005420:	4313      	orrs	r3, r2
 8005422:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800542a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005432:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	695b      	ldr	r3, [r3, #20]
 800543c:	011b      	lsls	r3, r3, #4
 800543e:	4313      	orrs	r3, r2
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	4313      	orrs	r3, r2
 8005444:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	697a      	ldr	r2, [r7, #20]
 800544c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2201      	movs	r2, #1
 800546a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2201      	movs	r2, #1
 800547a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2201      	movs	r2, #1
 8005482:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2201      	movs	r2, #1
 800548a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3718      	adds	r7, #24
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d122      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	68db      	ldr	r3, [r3, #12]
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b02      	cmp	r3, #2
 80054ba:	d11b      	bne.n	80054f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f06f 0202 	mvn.w	r2, #2
 80054c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2201      	movs	r2, #1
 80054ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	f003 0303 	and.w	r3, r3, #3
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054da:	6878      	ldr	r0, [r7, #4]
 80054dc:	f000 faa2 	bl	8005a24 <HAL_TIM_IC_CaptureCallback>
 80054e0:	e005      	b.n	80054ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 fa94 	bl	8005a10 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 faa5 	bl	8005a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	691b      	ldr	r3, [r3, #16]
 80054fa:	f003 0304 	and.w	r3, r3, #4
 80054fe:	2b04      	cmp	r3, #4
 8005500:	d122      	bne.n	8005548 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68db      	ldr	r3, [r3, #12]
 8005508:	f003 0304 	and.w	r3, r3, #4
 800550c:	2b04      	cmp	r3, #4
 800550e:	d11b      	bne.n	8005548 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f06f 0204 	mvn.w	r2, #4
 8005518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2202      	movs	r2, #2
 800551e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800552a:	2b00      	cmp	r3, #0
 800552c:	d003      	beq.n	8005536 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800552e:	6878      	ldr	r0, [r7, #4]
 8005530:	f000 fa78 	bl	8005a24 <HAL_TIM_IC_CaptureCallback>
 8005534:	e005      	b.n	8005542 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005536:	6878      	ldr	r0, [r7, #4]
 8005538:	f000 fa6a 	bl	8005a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f000 fa7b 	bl	8005a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	f003 0308 	and.w	r3, r3, #8
 8005552:	2b08      	cmp	r3, #8
 8005554:	d122      	bne.n	800559c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	f003 0308 	and.w	r3, r3, #8
 8005560:	2b08      	cmp	r3, #8
 8005562:	d11b      	bne.n	800559c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f06f 0208 	mvn.w	r2, #8
 800556c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2204      	movs	r2, #4
 8005572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	69db      	ldr	r3, [r3, #28]
 800557a:	f003 0303 	and.w	r3, r3, #3
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fa4e 	bl	8005a24 <HAL_TIM_IC_CaptureCallback>
 8005588:	e005      	b.n	8005596 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 fa40 	bl	8005a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005590:	6878      	ldr	r0, [r7, #4]
 8005592:	f000 fa51 	bl	8005a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2200      	movs	r2, #0
 800559a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	f003 0310 	and.w	r3, r3, #16
 80055a6:	2b10      	cmp	r3, #16
 80055a8:	d122      	bne.n	80055f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	68db      	ldr	r3, [r3, #12]
 80055b0:	f003 0310 	and.w	r3, r3, #16
 80055b4:	2b10      	cmp	r3, #16
 80055b6:	d11b      	bne.n	80055f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0210 	mvn.w	r2, #16
 80055c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2208      	movs	r2, #8
 80055c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	69db      	ldr	r3, [r3, #28]
 80055ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 fa24 	bl	8005a24 <HAL_TIM_IC_CaptureCallback>
 80055dc:	e005      	b.n	80055ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 fa16 	bl	8005a10 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 fa27 	bl	8005a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d10e      	bne.n	800561c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b01      	cmp	r3, #1
 800560a:	d107      	bne.n	800561c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f06f 0201 	mvn.w	r2, #1
 8005614:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f000 f9f0 	bl	80059fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	691b      	ldr	r3, [r3, #16]
 8005622:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005626:	2b80      	cmp	r3, #128	; 0x80
 8005628:	d10e      	bne.n	8005648 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005634:	2b80      	cmp	r3, #128	; 0x80
 8005636:	d107      	bne.n	8005648 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005640:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 fd5e 	bl	8006104 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005652:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005656:	d10e      	bne.n	8005676 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005662:	2b80      	cmp	r3, #128	; 0x80
 8005664:	d107      	bne.n	8005676 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800566e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 fd51 	bl	8006118 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	691b      	ldr	r3, [r3, #16]
 800567c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005680:	2b40      	cmp	r3, #64	; 0x40
 8005682:	d10e      	bne.n	80056a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800568e:	2b40      	cmp	r3, #64	; 0x40
 8005690:	d107      	bne.n	80056a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800569a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800569c:	6878      	ldr	r0, [r7, #4]
 800569e:	f000 f9d5 	bl	8005a4c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	691b      	ldr	r3, [r3, #16]
 80056a8:	f003 0320 	and.w	r3, r3, #32
 80056ac:	2b20      	cmp	r3, #32
 80056ae:	d10e      	bne.n	80056ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	68db      	ldr	r3, [r3, #12]
 80056b6:	f003 0320 	and.w	r3, r3, #32
 80056ba:	2b20      	cmp	r3, #32
 80056bc:	d107      	bne.n	80056ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f06f 0220 	mvn.w	r2, #32
 80056c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 fd11 	bl	80060f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	691b      	ldr	r3, [r3, #16]
 80056d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056dc:	d10f      	bne.n	80056fe <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056ec:	d107      	bne.n	80056fe <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80056f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	f000 fd17 	bl	800612c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005708:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800570c:	d10f      	bne.n	800572e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005718:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800571c:	d107      	bne.n	800572e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005726:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f000 fd09 	bl	8006140 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005738:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800573c:	d10f      	bne.n	800575e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005748:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800574c:	d107      	bne.n	800575e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f000 fcfb 	bl	8006154 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005768:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800576c:	d10f      	bne.n	800578e <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005778:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800577c:	d107      	bne.n	800578e <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8005786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8005788:	6878      	ldr	r0, [r7, #4]
 800578a:	f000 fced 	bl	8006168 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800578e:	bf00      	nop
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}
	...

08005798 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b084      	sub	sp, #16
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_TIM_ConfigClockSource+0x18>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e0d2      	b.n	8005956 <HAL_TIM_ConfigClockSource+0x1be>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80057ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80057d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ec:	f000 80a9 	beq.w	8005942 <HAL_TIM_ConfigClockSource+0x1aa>
 80057f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057f4:	d81a      	bhi.n	800582c <HAL_TIM_ConfigClockSource+0x94>
 80057f6:	2b30      	cmp	r3, #48	; 0x30
 80057f8:	f000 809a 	beq.w	8005930 <HAL_TIM_ConfigClockSource+0x198>
 80057fc:	2b30      	cmp	r3, #48	; 0x30
 80057fe:	d809      	bhi.n	8005814 <HAL_TIM_ConfigClockSource+0x7c>
 8005800:	2b10      	cmp	r3, #16
 8005802:	f000 8095 	beq.w	8005930 <HAL_TIM_ConfigClockSource+0x198>
 8005806:	2b20      	cmp	r3, #32
 8005808:	f000 8092 	beq.w	8005930 <HAL_TIM_ConfigClockSource+0x198>
 800580c:	2b00      	cmp	r3, #0
 800580e:	f000 808f 	beq.w	8005930 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005812:	e097      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8005814:	2b50      	cmp	r3, #80	; 0x50
 8005816:	d05b      	beq.n	80058d0 <HAL_TIM_ConfigClockSource+0x138>
 8005818:	2b50      	cmp	r3, #80	; 0x50
 800581a:	d802      	bhi.n	8005822 <HAL_TIM_ConfigClockSource+0x8a>
 800581c:	2b40      	cmp	r3, #64	; 0x40
 800581e:	d077      	beq.n	8005910 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8005820:	e090      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8005822:	2b60      	cmp	r3, #96	; 0x60
 8005824:	d064      	beq.n	80058f0 <HAL_TIM_ConfigClockSource+0x158>
 8005826:	2b70      	cmp	r3, #112	; 0x70
 8005828:	d028      	beq.n	800587c <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800582a:	e08b      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800582c:	4a4c      	ldr	r2, [pc, #304]	; (8005960 <HAL_TIM_ConfigClockSource+0x1c8>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d07e      	beq.n	8005930 <HAL_TIM_ConfigClockSource+0x198>
 8005832:	4a4b      	ldr	r2, [pc, #300]	; (8005960 <HAL_TIM_ConfigClockSource+0x1c8>)
 8005834:	4293      	cmp	r3, r2
 8005836:	d810      	bhi.n	800585a <HAL_TIM_ConfigClockSource+0xc2>
 8005838:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800583c:	d078      	beq.n	8005930 <HAL_TIM_ConfigClockSource+0x198>
 800583e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005842:	d803      	bhi.n	800584c <HAL_TIM_ConfigClockSource+0xb4>
 8005844:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005848:	d02f      	beq.n	80058aa <HAL_TIM_ConfigClockSource+0x112>
      break;
 800584a:	e07b      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800584c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005850:	d06e      	beq.n	8005930 <HAL_TIM_ConfigClockSource+0x198>
 8005852:	4a44      	ldr	r2, [pc, #272]	; (8005964 <HAL_TIM_ConfigClockSource+0x1cc>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d06b      	beq.n	8005930 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8005858:	e074      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800585a:	4a43      	ldr	r2, [pc, #268]	; (8005968 <HAL_TIM_ConfigClockSource+0x1d0>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d067      	beq.n	8005930 <HAL_TIM_ConfigClockSource+0x198>
 8005860:	4a41      	ldr	r2, [pc, #260]	; (8005968 <HAL_TIM_ConfigClockSource+0x1d0>)
 8005862:	4293      	cmp	r3, r2
 8005864:	d803      	bhi.n	800586e <HAL_TIM_ConfigClockSource+0xd6>
 8005866:	4a41      	ldr	r2, [pc, #260]	; (800596c <HAL_TIM_ConfigClockSource+0x1d4>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d061      	beq.n	8005930 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800586c:	e06a      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800586e:	4a40      	ldr	r2, [pc, #256]	; (8005970 <HAL_TIM_ConfigClockSource+0x1d8>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d05d      	beq.n	8005930 <HAL_TIM_ConfigClockSource+0x198>
 8005874:	4a3f      	ldr	r2, [pc, #252]	; (8005974 <HAL_TIM_ConfigClockSource+0x1dc>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d05a      	beq.n	8005930 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800587a:	e063      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6818      	ldr	r0, [r3, #0]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	6899      	ldr	r1, [r3, #8]
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f000 fac8 	bl	8005e20 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	689b      	ldr	r3, [r3, #8]
 8005896:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800589e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	609a      	str	r2, [r3, #8]
      break;
 80058a8:	e04c      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6818      	ldr	r0, [r3, #0]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	6899      	ldr	r1, [r3, #8]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	685a      	ldr	r2, [r3, #4]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	68db      	ldr	r3, [r3, #12]
 80058ba:	f000 fab1 	bl	8005e20 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058cc:	609a      	str	r2, [r3, #8]
      break;
 80058ce:	e039      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6818      	ldr	r0, [r3, #0]
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	6859      	ldr	r1, [r3, #4]
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	461a      	mov	r2, r3
 80058de:	f000 fa23 	bl	8005d28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	2150      	movs	r1, #80	; 0x50
 80058e8:	4618      	mov	r0, r3
 80058ea:	f000 fa7c 	bl	8005de6 <TIM_ITRx_SetConfig>
      break;
 80058ee:	e029      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6818      	ldr	r0, [r3, #0]
 80058f4:	683b      	ldr	r3, [r7, #0]
 80058f6:	6859      	ldr	r1, [r3, #4]
 80058f8:	683b      	ldr	r3, [r7, #0]
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	461a      	mov	r2, r3
 80058fe:	f000 fa42 	bl	8005d86 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2160      	movs	r1, #96	; 0x60
 8005908:	4618      	mov	r0, r3
 800590a:	f000 fa6c 	bl	8005de6 <TIM_ITRx_SetConfig>
      break;
 800590e:	e019      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6818      	ldr	r0, [r3, #0]
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	6859      	ldr	r1, [r3, #4]
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	461a      	mov	r2, r3
 800591e:	f000 fa03 	bl	8005d28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	2140      	movs	r1, #64	; 0x40
 8005928:	4618      	mov	r0, r3
 800592a:	f000 fa5c 	bl	8005de6 <TIM_ITRx_SetConfig>
      break;
 800592e:	e009      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681a      	ldr	r2, [r3, #0]
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4619      	mov	r1, r3
 800593a:	4610      	mov	r0, r2
 800593c:	f000 fa53 	bl	8005de6 <TIM_ITRx_SetConfig>
      break;
 8005940:	e000      	b.n	8005944 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 8005942:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2201      	movs	r2, #1
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005954:	2300      	movs	r3, #0
}
 8005956:	4618      	mov	r0, r3
 8005958:	3710      	adds	r7, #16
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
 800595e:	bf00      	nop
 8005960:	00100030 	.word	0x00100030
 8005964:	00100020 	.word	0x00100020
 8005968:	00100050 	.word	0x00100050
 800596c:	00100040 	.word	0x00100040
 8005970:	00100060 	.word	0x00100060
 8005974:	00100070 	.word	0x00100070

08005978 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005988:	2b01      	cmp	r3, #1
 800598a:	d101      	bne.n	8005990 <HAL_TIM_SlaveConfigSynchro+0x18>
 800598c:	2302      	movs	r3, #2
 800598e:	e031      	b.n	80059f4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2202      	movs	r2, #2
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80059a0:	6839      	ldr	r1, [r7, #0]
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 f904 	bl	8005bb0 <TIM_SlaveTimer_SetConfig>
 80059a8:	4603      	mov	r3, r0
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d009      	beq.n	80059c2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	2200      	movs	r2, #0
 80059ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e018      	b.n	80059f4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68da      	ldr	r2, [r3, #12]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059d0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	68da      	ldr	r2, [r3, #12]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80059e0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2201      	movs	r2, #1
 80059e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059f2:	2300      	movs	r3, #0
}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3708      	adds	r7, #8
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}

080059fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b083      	sub	sp, #12
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005a04:	bf00      	nop
 8005a06:	370c      	adds	r7, #12
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr

08005a10 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b083      	sub	sp, #12
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005a18:	bf00      	nop
 8005a1a:	370c      	adds	r7, #12
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a22:	4770      	bx	lr

08005a24 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005a40:	bf00      	nop
 8005a42:	370c      	adds	r7, #12
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005a54:	bf00      	nop
 8005a56:	370c      	adds	r7, #12
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5e:	4770      	bx	lr

08005a60 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a60:	b480      	push	{r7}
 8005a62:	b085      	sub	sp, #20
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
 8005a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a46      	ldr	r2, [pc, #280]	; (8005b8c <TIM_Base_SetConfig+0x12c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d017      	beq.n	8005aa8 <TIM_Base_SetConfig+0x48>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a7e:	d013      	beq.n	8005aa8 <TIM_Base_SetConfig+0x48>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a43      	ldr	r2, [pc, #268]	; (8005b90 <TIM_Base_SetConfig+0x130>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d00f      	beq.n	8005aa8 <TIM_Base_SetConfig+0x48>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	4a42      	ldr	r2, [pc, #264]	; (8005b94 <TIM_Base_SetConfig+0x134>)
 8005a8c:	4293      	cmp	r3, r2
 8005a8e:	d00b      	beq.n	8005aa8 <TIM_Base_SetConfig+0x48>
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a41      	ldr	r2, [pc, #260]	; (8005b98 <TIM_Base_SetConfig+0x138>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d007      	beq.n	8005aa8 <TIM_Base_SetConfig+0x48>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	4a40      	ldr	r2, [pc, #256]	; (8005b9c <TIM_Base_SetConfig+0x13c>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d003      	beq.n	8005aa8 <TIM_Base_SetConfig+0x48>
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a3f      	ldr	r2, [pc, #252]	; (8005ba0 <TIM_Base_SetConfig+0x140>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d108      	bne.n	8005aba <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	4313      	orrs	r3, r2
 8005ab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a33      	ldr	r2, [pc, #204]	; (8005b8c <TIM_Base_SetConfig+0x12c>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d023      	beq.n	8005b0a <TIM_Base_SetConfig+0xaa>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ac8:	d01f      	beq.n	8005b0a <TIM_Base_SetConfig+0xaa>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a30      	ldr	r2, [pc, #192]	; (8005b90 <TIM_Base_SetConfig+0x130>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d01b      	beq.n	8005b0a <TIM_Base_SetConfig+0xaa>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a2f      	ldr	r2, [pc, #188]	; (8005b94 <TIM_Base_SetConfig+0x134>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d017      	beq.n	8005b0a <TIM_Base_SetConfig+0xaa>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a2e      	ldr	r2, [pc, #184]	; (8005b98 <TIM_Base_SetConfig+0x138>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d013      	beq.n	8005b0a <TIM_Base_SetConfig+0xaa>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a2d      	ldr	r2, [pc, #180]	; (8005b9c <TIM_Base_SetConfig+0x13c>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d00f      	beq.n	8005b0a <TIM_Base_SetConfig+0xaa>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a2d      	ldr	r2, [pc, #180]	; (8005ba4 <TIM_Base_SetConfig+0x144>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00b      	beq.n	8005b0a <TIM_Base_SetConfig+0xaa>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a2c      	ldr	r2, [pc, #176]	; (8005ba8 <TIM_Base_SetConfig+0x148>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d007      	beq.n	8005b0a <TIM_Base_SetConfig+0xaa>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	4a2b      	ldr	r2, [pc, #172]	; (8005bac <TIM_Base_SetConfig+0x14c>)
 8005afe:	4293      	cmp	r3, r2
 8005b00:	d003      	beq.n	8005b0a <TIM_Base_SetConfig+0xaa>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	4a26      	ldr	r2, [pc, #152]	; (8005ba0 <TIM_Base_SetConfig+0x140>)
 8005b06:	4293      	cmp	r3, r2
 8005b08:	d108      	bne.n	8005b1c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	4313      	orrs	r3, r2
 8005b1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	695b      	ldr	r3, [r3, #20]
 8005b26:	4313      	orrs	r3, r2
 8005b28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68fa      	ldr	r2, [r7, #12]
 8005b2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4a12      	ldr	r2, [pc, #72]	; (8005b8c <TIM_Base_SetConfig+0x12c>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d013      	beq.n	8005b70 <TIM_Base_SetConfig+0x110>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	4a14      	ldr	r2, [pc, #80]	; (8005b9c <TIM_Base_SetConfig+0x13c>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d00f      	beq.n	8005b70 <TIM_Base_SetConfig+0x110>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	4a14      	ldr	r2, [pc, #80]	; (8005ba4 <TIM_Base_SetConfig+0x144>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d00b      	beq.n	8005b70 <TIM_Base_SetConfig+0x110>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	4a13      	ldr	r2, [pc, #76]	; (8005ba8 <TIM_Base_SetConfig+0x148>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d007      	beq.n	8005b70 <TIM_Base_SetConfig+0x110>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	4a12      	ldr	r2, [pc, #72]	; (8005bac <TIM_Base_SetConfig+0x14c>)
 8005b64:	4293      	cmp	r3, r2
 8005b66:	d003      	beq.n	8005b70 <TIM_Base_SetConfig+0x110>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	4a0d      	ldr	r2, [pc, #52]	; (8005ba0 <TIM_Base_SetConfig+0x140>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d103      	bne.n	8005b78 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	691a      	ldr	r2, [r3, #16]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	615a      	str	r2, [r3, #20]
}
 8005b7e:	bf00      	nop
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr
 8005b8a:	bf00      	nop
 8005b8c:	40012c00 	.word	0x40012c00
 8005b90:	40000400 	.word	0x40000400
 8005b94:	40000800 	.word	0x40000800
 8005b98:	40000c00 	.word	0x40000c00
 8005b9c:	40013400 	.word	0x40013400
 8005ba0:	40015000 	.word	0x40015000
 8005ba4:	40014000 	.word	0x40014000
 8005ba8:	40014400 	.word	0x40014400
 8005bac:	40014800 	.word	0x40014800

08005bb0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b086      	sub	sp, #24
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005bc8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005bcc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	697a      	ldr	r2, [r7, #20]
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bde:	f023 0307 	bic.w	r3, r3, #7
 8005be2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	697a      	ldr	r2, [r7, #20]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	697a      	ldr	r2, [r7, #20]
 8005bf4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8005bf6:	683b      	ldr	r3, [r7, #0]
 8005bf8:	685b      	ldr	r3, [r3, #4]
 8005bfa:	2b70      	cmp	r3, #112	; 0x70
 8005bfc:	d034      	beq.n	8005c68 <TIM_SlaveTimer_SetConfig+0xb8>
 8005bfe:	2b70      	cmp	r3, #112	; 0x70
 8005c00:	d811      	bhi.n	8005c26 <TIM_SlaveTimer_SetConfig+0x76>
 8005c02:	2b30      	cmp	r3, #48	; 0x30
 8005c04:	d07d      	beq.n	8005d02 <TIM_SlaveTimer_SetConfig+0x152>
 8005c06:	2b30      	cmp	r3, #48	; 0x30
 8005c08:	d806      	bhi.n	8005c18 <TIM_SlaveTimer_SetConfig+0x68>
 8005c0a:	2b10      	cmp	r3, #16
 8005c0c:	d079      	beq.n	8005d02 <TIM_SlaveTimer_SetConfig+0x152>
 8005c0e:	2b20      	cmp	r3, #32
 8005c10:	d077      	beq.n	8005d02 <TIM_SlaveTimer_SetConfig+0x152>
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d075      	beq.n	8005d02 <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8005c16:	e075      	b.n	8005d04 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8005c18:	2b50      	cmp	r3, #80	; 0x50
 8005c1a:	d05e      	beq.n	8005cda <TIM_SlaveTimer_SetConfig+0x12a>
 8005c1c:	2b60      	cmp	r3, #96	; 0x60
 8005c1e:	d066      	beq.n	8005cee <TIM_SlaveTimer_SetConfig+0x13e>
 8005c20:	2b40      	cmp	r3, #64	; 0x40
 8005c22:	d02c      	beq.n	8005c7e <TIM_SlaveTimer_SetConfig+0xce>
      break;
 8005c24:	e06e      	b.n	8005d04 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8005c26:	4a3a      	ldr	r2, [pc, #232]	; (8005d10 <TIM_SlaveTimer_SetConfig+0x160>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d06a      	beq.n	8005d02 <TIM_SlaveTimer_SetConfig+0x152>
 8005c2c:	4a38      	ldr	r2, [pc, #224]	; (8005d10 <TIM_SlaveTimer_SetConfig+0x160>)
 8005c2e:	4293      	cmp	r3, r2
 8005c30:	d809      	bhi.n	8005c46 <TIM_SlaveTimer_SetConfig+0x96>
 8005c32:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8005c36:	d064      	beq.n	8005d02 <TIM_SlaveTimer_SetConfig+0x152>
 8005c38:	4a36      	ldr	r2, [pc, #216]	; (8005d14 <TIM_SlaveTimer_SetConfig+0x164>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d061      	beq.n	8005d02 <TIM_SlaveTimer_SetConfig+0x152>
 8005c3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c42:	d05e      	beq.n	8005d02 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8005c44:	e05e      	b.n	8005d04 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8005c46:	4a34      	ldr	r2, [pc, #208]	; (8005d18 <TIM_SlaveTimer_SetConfig+0x168>)
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d05a      	beq.n	8005d02 <TIM_SlaveTimer_SetConfig+0x152>
 8005c4c:	4a32      	ldr	r2, [pc, #200]	; (8005d18 <TIM_SlaveTimer_SetConfig+0x168>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d803      	bhi.n	8005c5a <TIM_SlaveTimer_SetConfig+0xaa>
 8005c52:	4a32      	ldr	r2, [pc, #200]	; (8005d1c <TIM_SlaveTimer_SetConfig+0x16c>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d054      	beq.n	8005d02 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8005c58:	e054      	b.n	8005d04 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8005c5a:	4a31      	ldr	r2, [pc, #196]	; (8005d20 <TIM_SlaveTimer_SetConfig+0x170>)
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d050      	beq.n	8005d02 <TIM_SlaveTimer_SetConfig+0x152>
 8005c60:	4a30      	ldr	r2, [pc, #192]	; (8005d24 <TIM_SlaveTimer_SetConfig+0x174>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d04d      	beq.n	8005d02 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8005c66:	e04d      	b.n	8005d04 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6818      	ldr	r0, [r3, #0]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	68d9      	ldr	r1, [r3, #12]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	689a      	ldr	r2, [r3, #8]
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	691b      	ldr	r3, [r3, #16]
 8005c78:	f000 f8d2 	bl	8005e20 <TIM_ETR_SetConfig>
      break;
 8005c7c:	e042      	b.n	8005d04 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	2b05      	cmp	r3, #5
 8005c84:	d004      	beq.n	8005c90 <TIM_SlaveTimer_SetConfig+0xe0>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 8005c8e:	d101      	bne.n	8005c94 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 8005c90:	2301      	movs	r3, #1
 8005c92:	e038      	b.n	8005d06 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	6a1b      	ldr	r3, [r3, #32]
 8005c9a:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6a1a      	ldr	r2, [r3, #32]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0201 	bic.w	r2, r2, #1
 8005caa:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	699b      	ldr	r3, [r3, #24]
 8005cb2:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cba:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	691b      	ldr	r3, [r3, #16]
 8005cc0:	011b      	lsls	r3, r3, #4
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	68fa      	ldr	r2, [r7, #12]
 8005cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	621a      	str	r2, [r3, #32]
      break;
 8005cd8:	e014      	b.n	8005d04 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6818      	ldr	r0, [r3, #0]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	6899      	ldr	r1, [r3, #8]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	691b      	ldr	r3, [r3, #16]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f000 f81e 	bl	8005d28 <TIM_TI1_ConfigInputStage>
      break;
 8005cec:	e00a      	b.n	8005d04 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6818      	ldr	r0, [r3, #0]
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	6899      	ldr	r1, [r3, #8]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	691b      	ldr	r3, [r3, #16]
 8005cfa:	461a      	mov	r2, r3
 8005cfc:	f000 f843 	bl	8005d86 <TIM_TI2_ConfigInputStage>
      break;
 8005d00:	e000      	b.n	8005d04 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 8005d02:	bf00      	nop
  }
  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3718      	adds	r7, #24
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}
 8005d0e:	bf00      	nop
 8005d10:	00100030 	.word	0x00100030
 8005d14:	00100020 	.word	0x00100020
 8005d18:	00100050 	.word	0x00100050
 8005d1c:	00100040 	.word	0x00100040
 8005d20:	00100060 	.word	0x00100060
 8005d24:	00100070 	.word	0x00100070

08005d28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b087      	sub	sp, #28
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	60f8      	str	r0, [r7, #12]
 8005d30:	60b9      	str	r1, [r7, #8]
 8005d32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	6a1b      	ldr	r3, [r3, #32]
 8005d3e:	f023 0201 	bic.w	r2, r3, #1
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d52:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	011b      	lsls	r3, r3, #4
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d5e:	697b      	ldr	r3, [r7, #20]
 8005d60:	f023 030a 	bic.w	r3, r3, #10
 8005d64:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	693a      	ldr	r2, [r7, #16]
 8005d72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	621a      	str	r2, [r3, #32]
}
 8005d7a:	bf00      	nop
 8005d7c:	371c      	adds	r7, #28
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d84:	4770      	bx	lr

08005d86 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d86:	b480      	push	{r7}
 8005d88:	b087      	sub	sp, #28
 8005d8a:	af00      	add	r7, sp, #0
 8005d8c:	60f8      	str	r0, [r7, #12]
 8005d8e:	60b9      	str	r1, [r7, #8]
 8005d90:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	f023 0210 	bic.w	r2, r3, #16
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	699b      	ldr	r3, [r3, #24]
 8005da2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6a1b      	ldr	r3, [r3, #32]
 8005da8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005db0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	031b      	lsls	r3, r3, #12
 8005db6:	697a      	ldr	r2, [r7, #20]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dc2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	011b      	lsls	r3, r3, #4
 8005dc8:	693a      	ldr	r2, [r7, #16]
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	621a      	str	r2, [r3, #32]
}
 8005dda:	bf00      	nop
 8005ddc:	371c      	adds	r7, #28
 8005dde:	46bd      	mov	sp, r7
 8005de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de4:	4770      	bx	lr

08005de6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005de6:	b480      	push	{r7}
 8005de8:	b085      	sub	sp, #20
 8005dea:	af00      	add	r7, sp, #0
 8005dec:	6078      	str	r0, [r7, #4]
 8005dee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	689b      	ldr	r3, [r3, #8]
 8005df4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005dfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	f043 0307 	orr.w	r3, r3, #7
 8005e0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	609a      	str	r2, [r3, #8]
}
 8005e14:	bf00      	nop
 8005e16:	3714      	adds	r7, #20
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr

08005e20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e20:	b480      	push	{r7}
 8005e22:	b087      	sub	sp, #28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	60f8      	str	r0, [r7, #12]
 8005e28:	60b9      	str	r1, [r7, #8]
 8005e2a:	607a      	str	r2, [r7, #4]
 8005e2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	021a      	lsls	r2, r3, #8
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	431a      	orrs	r2, r3
 8005e44:	68bb      	ldr	r3, [r7, #8]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	697a      	ldr	r2, [r7, #20]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	697a      	ldr	r2, [r7, #20]
 8005e52:	609a      	str	r2, [r3, #8]
}
 8005e54:	bf00      	nop
 8005e56:	371c      	adds	r7, #28
 8005e58:	46bd      	mov	sp, r7
 8005e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5e:	4770      	bx	lr

08005e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
 8005e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e70:	2b01      	cmp	r3, #1
 8005e72:	d101      	bne.n	8005e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e74:	2302      	movs	r3, #2
 8005e76:	e074      	b.n	8005f62 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2202      	movs	r2, #2
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a34      	ldr	r2, [pc, #208]	; (8005f70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e9e:	4293      	cmp	r3, r2
 8005ea0:	d009      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	4a33      	ldr	r2, [pc, #204]	; (8005f74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	d004      	beq.n	8005eb6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4a31      	ldr	r2, [pc, #196]	; (8005f78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005eb2:	4293      	cmp	r3, r2
 8005eb4:	d108      	bne.n	8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005ebc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	68fa      	ldr	r2, [r7, #12]
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005ece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ed2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	68fa      	ldr	r2, [r7, #12]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68fa      	ldr	r2, [r7, #12]
 8005ee4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a21      	ldr	r2, [pc, #132]	; (8005f70 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d022      	beq.n	8005f36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ef8:	d01d      	beq.n	8005f36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a1f      	ldr	r2, [pc, #124]	; (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d018      	beq.n	8005f36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4a1d      	ldr	r2, [pc, #116]	; (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005f0a:	4293      	cmp	r3, r2
 8005f0c:	d013      	beq.n	8005f36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	4a1c      	ldr	r2, [pc, #112]	; (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d00e      	beq.n	8005f36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a15      	ldr	r2, [pc, #84]	; (8005f74 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f1e:	4293      	cmp	r3, r2
 8005f20:	d009      	beq.n	8005f36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a18      	ldr	r2, [pc, #96]	; (8005f88 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d004      	beq.n	8005f36 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a11      	ldr	r2, [pc, #68]	; (8005f78 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d10c      	bne.n	8005f50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	68ba      	ldr	r2, [r7, #8]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6c:	4770      	bx	lr
 8005f6e:	bf00      	nop
 8005f70:	40012c00 	.word	0x40012c00
 8005f74:	40013400 	.word	0x40013400
 8005f78:	40015000 	.word	0x40015000
 8005f7c:	40000400 	.word	0x40000400
 8005f80:	40000800 	.word	0x40000800
 8005f84:	40000c00 	.word	0x40000c00
 8005f88:	40014000 	.word	0x40014000

08005f8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
 8005f94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f96:	2300      	movs	r3, #0
 8005f98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005fa0:	2b01      	cmp	r3, #1
 8005fa2:	d101      	bne.n	8005fa8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005fa4:	2302      	movs	r3, #2
 8005fa6:	e096      	b.n	80060d6 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005fb6:	683b      	ldr	r3, [r7, #0]
 8005fb8:	68db      	ldr	r3, [r3, #12]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	689b      	ldr	r3, [r3, #8]
 8005fc8:	4313      	orrs	r3, r2
 8005fca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	4313      	orrs	r3, r2
 8006002:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800600e:	4313      	orrs	r3, r2
 8006010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	699b      	ldr	r3, [r3, #24]
 800601c:	041b      	lsls	r3, r3, #16
 800601e:	4313      	orrs	r3, r2
 8006020:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	4a2f      	ldr	r2, [pc, #188]	; (80060e4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006028:	4293      	cmp	r3, r2
 800602a:	d009      	beq.n	8006040 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	4a2d      	ldr	r2, [pc, #180]	; (80060e8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8006032:	4293      	cmp	r3, r2
 8006034:	d004      	beq.n	8006040 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4a2c      	ldr	r2, [pc, #176]	; (80060ec <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800603c:	4293      	cmp	r3, r2
 800603e:	d106      	bne.n	800604e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	4313      	orrs	r3, r2
 800604c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a24      	ldr	r2, [pc, #144]	; (80060e4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d009      	beq.n	800606c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a22      	ldr	r2, [pc, #136]	; (80060e8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d004      	beq.n	800606c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a21      	ldr	r2, [pc, #132]	; (80060ec <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d12b      	bne.n	80060c4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006076:	051b      	lsls	r3, r3, #20
 8006078:	4313      	orrs	r3, r2
 800607a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	6a1b      	ldr	r3, [r3, #32]
 8006086:	4313      	orrs	r3, r2
 8006088:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006094:	4313      	orrs	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a11      	ldr	r2, [pc, #68]	; (80060e4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d009      	beq.n	80060b6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a10      	ldr	r2, [pc, #64]	; (80060e8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d004      	beq.n	80060b6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a0e      	ldr	r2, [pc, #56]	; (80060ec <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d106      	bne.n	80060c4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c0:	4313      	orrs	r3, r2
 80060c2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68fa      	ldr	r2, [r7, #12]
 80060ca:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3714      	adds	r7, #20
 80060da:	46bd      	mov	sp, r7
 80060dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e0:	4770      	bx	lr
 80060e2:	bf00      	nop
 80060e4:	40012c00 	.word	0x40012c00
 80060e8:	40013400 	.word	0x40013400
 80060ec:	40015000 	.word	0x40015000

080060f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006140:	b480      	push	{r7}
 8006142:	b083      	sub	sp, #12
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006148:	bf00      	nop
 800614a:	370c      	adds	r7, #12
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800615c:	bf00      	nop
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006168:	b480      	push	{r7}
 800616a:	b083      	sub	sp, #12
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006170:	bf00      	nop
 8006172:	370c      	adds	r7, #12
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr

0800617c <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 800617c:	b590      	push	{r4, r7, lr}
 800617e:	b08b      	sub	sp, #44	; 0x2c
 8006180:	af00      	add	r7, sp, #0
 8006182:	4604      	mov	r4, r0
 8006184:	4608      	mov	r0, r1
 8006186:	4611      	mov	r1, r2
 8006188:	461a      	mov	r2, r3
 800618a:	4623      	mov	r3, r4
 800618c:	80fb      	strh	r3, [r7, #6]
 800618e:	4603      	mov	r3, r0
 8006190:	80bb      	strh	r3, [r7, #4]
 8006192:	460b      	mov	r3, r1
 8006194:	807b      	strh	r3, [r7, #2]
 8006196:	4613      	mov	r3, r2
 8006198:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 800619a:	887b      	ldrh	r3, [r7, #2]
 800619c:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 800619e:	2300      	movs	r3, #0
 80061a0:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 80061a2:	887b      	ldrh	r3, [r7, #2]
 80061a4:	005b      	lsls	r3, r3, #1
 80061a6:	f1c3 0301 	rsb	r3, r3, #1
 80061aa:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80061ac:	2300      	movs	r3, #0
 80061ae:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80061b0:	2300      	movs	r3, #0
 80061b2:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80061b4:	e061      	b.n	800627a <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80061b6:	88fa      	ldrh	r2, [r7, #6]
 80061b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	613b      	str	r3, [r7, #16]
 80061be:	e018      	b.n	80061f2 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	b298      	uxth	r0, r3
 80061c4:	6a3b      	ldr	r3, [r7, #32]
 80061c6:	b29a      	uxth	r2, r3
 80061c8:	88bb      	ldrh	r3, [r7, #4]
 80061ca:	4413      	add	r3, r2
 80061cc:	b29b      	uxth	r3, r3
 80061ce:	883a      	ldrh	r2, [r7, #0]
 80061d0:	4619      	mov	r1, r3
 80061d2:	f000 fc0b 	bl	80069ec <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	b298      	uxth	r0, r3
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	b29b      	uxth	r3, r3
 80061de:	88ba      	ldrh	r2, [r7, #4]
 80061e0:	1ad3      	subs	r3, r2, r3
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	883a      	ldrh	r2, [r7, #0]
 80061e6:	4619      	mov	r1, r3
 80061e8:	f000 fc00 	bl	80069ec <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	3301      	adds	r3, #1
 80061f0:	613b      	str	r3, [r7, #16]
 80061f2:	88fa      	ldrh	r2, [r7, #6]
 80061f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f6:	4413      	add	r3, r2
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	dde0      	ble.n	80061c0 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 80061fe:	88fa      	ldrh	r2, [r7, #6]
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	1ad3      	subs	r3, r2, r3
 8006204:	60fb      	str	r3, [r7, #12]
 8006206:	e018      	b.n	800623a <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	b298      	uxth	r0, r3
 800620c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800620e:	b29a      	uxth	r2, r3
 8006210:	88bb      	ldrh	r3, [r7, #4]
 8006212:	4413      	add	r3, r2
 8006214:	b29b      	uxth	r3, r3
 8006216:	883a      	ldrh	r2, [r7, #0]
 8006218:	4619      	mov	r1, r3
 800621a:	f000 fbe7 	bl	80069ec <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	b298      	uxth	r0, r3
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	b29b      	uxth	r3, r3
 8006226:	88ba      	ldrh	r2, [r7, #4]
 8006228:	1ad3      	subs	r3, r2, r3
 800622a:	b29b      	uxth	r3, r3
 800622c:	883a      	ldrh	r2, [r7, #0]
 800622e:	4619      	mov	r1, r3
 8006230:	f000 fbdc 	bl	80069ec <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	3301      	adds	r3, #1
 8006238:	60fb      	str	r3, [r7, #12]
 800623a:	88fa      	ldrh	r2, [r7, #6]
 800623c:	6a3b      	ldr	r3, [r7, #32]
 800623e:	4413      	add	r3, r2
 8006240:	68fa      	ldr	r2, [r7, #12]
 8006242:	429a      	cmp	r2, r3
 8006244:	dde0      	ble.n	8006208 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	3301      	adds	r3, #1
 800624a:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 800624c:	697a      	ldr	r2, [r7, #20]
 800624e:	69bb      	ldr	r3, [r7, #24]
 8006250:	4413      	add	r3, r2
 8006252:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8006254:	69bb      	ldr	r3, [r7, #24]
 8006256:	3302      	adds	r3, #2
 8006258:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 800625a:	697b      	ldr	r3, [r7, #20]
 800625c:	005a      	lsls	r2, r3, #1
 800625e:	69fb      	ldr	r3, [r7, #28]
 8006260:	4413      	add	r3, r2
 8006262:	2b00      	cmp	r3, #0
 8006264:	dd09      	ble.n	800627a <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8006266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006268:	3b01      	subs	r3, #1
 800626a:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	4413      	add	r3, r2
 8006272:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	3302      	adds	r3, #2
 8006278:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 800627a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800627c:	6a3b      	ldr	r3, [r7, #32]
 800627e:	429a      	cmp	r2, r3
 8006280:	da99      	bge.n	80061b6 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8006282:	bf00      	nop
 8006284:	372c      	adds	r7, #44	; 0x2c
 8006286:	46bd      	mov	sp, r7
 8006288:	bd90      	pop	{r4, r7, pc}
	...

0800628c <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 800628c:	b590      	push	{r4, r7, lr}
 800628e:	b089      	sub	sp, #36	; 0x24
 8006290:	af02      	add	r7, sp, #8
 8006292:	4604      	mov	r4, r0
 8006294:	4608      	mov	r0, r1
 8006296:	4611      	mov	r1, r2
 8006298:	461a      	mov	r2, r3
 800629a:	4623      	mov	r3, r4
 800629c:	71fb      	strb	r3, [r7, #7]
 800629e:	4603      	mov	r3, r0
 80062a0:	71bb      	strb	r3, [r7, #6]
 80062a2:	460b      	mov	r3, r1
 80062a4:	717b      	strb	r3, [r7, #5]
 80062a6:	4613      	mov	r3, r2
 80062a8:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 80062aa:	79fb      	ldrb	r3, [r7, #7]
 80062ac:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 80062ae:	7dfb      	ldrb	r3, [r7, #23]
 80062b0:	2b1f      	cmp	r3, #31
 80062b2:	d802      	bhi.n	80062ba <ILI9341_Draw_Char+0x2e>
        Character = 0;
 80062b4:	2300      	movs	r3, #0
 80062b6:	71fb      	strb	r3, [r7, #7]
 80062b8:	e002      	b.n	80062c0 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 80062ba:	7dfb      	ldrb	r3, [r7, #23]
 80062bc:	3b20      	subs	r3, #32
 80062be:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80062c0:	2300      	movs	r3, #0
 80062c2:	753b      	strb	r3, [r7, #20]
 80062c4:	e012      	b.n	80062ec <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 80062c6:	7dfa      	ldrb	r2, [r7, #23]
 80062c8:	7d38      	ldrb	r0, [r7, #20]
 80062ca:	7d39      	ldrb	r1, [r7, #20]
 80062cc:	4c3b      	ldr	r4, [pc, #236]	; (80063bc <ILI9341_Draw_Char+0x130>)
 80062ce:	4613      	mov	r3, r2
 80062d0:	005b      	lsls	r3, r3, #1
 80062d2:	4413      	add	r3, r2
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	4423      	add	r3, r4
 80062d8:	4403      	add	r3, r0
 80062da:	781a      	ldrb	r2, [r3, #0]
 80062dc:	f107 0318 	add.w	r3, r7, #24
 80062e0:	440b      	add	r3, r1
 80062e2:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80062e6:	7d3b      	ldrb	r3, [r7, #20]
 80062e8:	3301      	adds	r3, #1
 80062ea:	753b      	strb	r3, [r7, #20]
 80062ec:	7d3b      	ldrb	r3, [r7, #20]
 80062ee:	2b05      	cmp	r3, #5
 80062f0:	d9e9      	bls.n	80062c6 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 80062f2:	79bb      	ldrb	r3, [r7, #6]
 80062f4:	b298      	uxth	r0, r3
 80062f6:	797b      	ldrb	r3, [r7, #5]
 80062f8:	b299      	uxth	r1, r3
 80062fa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80062fc:	461a      	mov	r2, r3
 80062fe:	0052      	lsls	r2, r2, #1
 8006300:	4413      	add	r3, r2
 8006302:	005b      	lsls	r3, r3, #1
 8006304:	b29a      	uxth	r2, r3
 8006306:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006308:	00db      	lsls	r3, r3, #3
 800630a:	b29c      	uxth	r4, r3
 800630c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	4623      	mov	r3, r4
 8006312:	f000 fc33 	bl	8006b7c <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8006316:	2300      	movs	r3, #0
 8006318:	757b      	strb	r3, [r7, #21]
 800631a:	e048      	b.n	80063ae <ILI9341_Draw_Char+0x122>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800631c:	2300      	movs	r3, #0
 800631e:	75bb      	strb	r3, [r7, #22]
 8006320:	e03f      	b.n	80063a2 <ILI9341_Draw_Char+0x116>
            if (temp[j] & (1<<i)) {			
 8006322:	7d7b      	ldrb	r3, [r7, #21]
 8006324:	f107 0218 	add.w	r2, r7, #24
 8006328:	4413      	add	r3, r2
 800632a:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800632e:	461a      	mov	r2, r3
 8006330:	7dbb      	ldrb	r3, [r7, #22]
 8006332:	fa42 f303 	asr.w	r3, r2, r3
 8006336:	f003 0301 	and.w	r3, r3, #1
 800633a:	2b00      	cmp	r3, #0
 800633c:	d02e      	beq.n	800639c <ILI9341_Draw_Char+0x110>
							if(Size == 1)
 800633e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006340:	2b01      	cmp	r3, #1
 8006342:	d110      	bne.n	8006366 <ILI9341_Draw_Char+0xda>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8006344:	79bb      	ldrb	r3, [r7, #6]
 8006346:	b29a      	uxth	r2, r3
 8006348:	7d7b      	ldrb	r3, [r7, #21]
 800634a:	b29b      	uxth	r3, r3
 800634c:	4413      	add	r3, r2
 800634e:	b298      	uxth	r0, r3
 8006350:	797b      	ldrb	r3, [r7, #5]
 8006352:	b29a      	uxth	r2, r3
 8006354:	7dbb      	ldrb	r3, [r7, #22]
 8006356:	b29b      	uxth	r3, r3
 8006358:	4413      	add	r3, r2
 800635a:	b29b      	uxth	r3, r3
 800635c:	887a      	ldrh	r2, [r7, #2]
 800635e:	4619      	mov	r1, r3
 8006360:	f000 fb44 	bl	80069ec <ILI9341_Draw_Pixel>
 8006364:	e01a      	b.n	800639c <ILI9341_Draw_Char+0x110>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8006366:	79bb      	ldrb	r3, [r7, #6]
 8006368:	b29a      	uxth	r2, r3
 800636a:	7d7b      	ldrb	r3, [r7, #21]
 800636c:	b29b      	uxth	r3, r3
 800636e:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8006370:	fb11 f303 	smulbb	r3, r1, r3
 8006374:	b29b      	uxth	r3, r3
 8006376:	4413      	add	r3, r2
 8006378:	b298      	uxth	r0, r3
 800637a:	797b      	ldrb	r3, [r7, #5]
 800637c:	b29a      	uxth	r2, r3
 800637e:	7dbb      	ldrb	r3, [r7, #22]
 8006380:	b29b      	uxth	r3, r3
 8006382:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8006384:	fb11 f303 	smulbb	r3, r1, r3
 8006388:	b29b      	uxth	r3, r3
 800638a:	4413      	add	r3, r2
 800638c:	b299      	uxth	r1, r3
 800638e:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8006390:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006392:	887b      	ldrh	r3, [r7, #2]
 8006394:	9300      	str	r3, [sp, #0]
 8006396:	4623      	mov	r3, r4
 8006398:	f000 fbf0 	bl	8006b7c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 800639c:	7dbb      	ldrb	r3, [r7, #22]
 800639e:	3301      	adds	r3, #1
 80063a0:	75bb      	strb	r3, [r7, #22]
 80063a2:	7dbb      	ldrb	r3, [r7, #22]
 80063a4:	2b07      	cmp	r3, #7
 80063a6:	d9bc      	bls.n	8006322 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 80063a8:	7d7b      	ldrb	r3, [r7, #21]
 80063aa:	3301      	adds	r3, #1
 80063ac:	757b      	strb	r3, [r7, #21]
 80063ae:	7d7b      	ldrb	r3, [r7, #21]
 80063b0:	2b05      	cmp	r3, #5
 80063b2:	d9b3      	bls.n	800631c <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 80063b4:	bf00      	nop
 80063b6:	371c      	adds	r7, #28
 80063b8:	46bd      	mov	sp, r7
 80063ba:	bd90      	pop	{r4, r7, pc}
 80063bc:	080075c4 	.word	0x080075c4

080063c0 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80063c0:	b590      	push	{r4, r7, lr}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af02      	add	r7, sp, #8
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	4608      	mov	r0, r1
 80063ca:	4611      	mov	r1, r2
 80063cc:	461a      	mov	r2, r3
 80063ce:	4603      	mov	r3, r0
 80063d0:	70fb      	strb	r3, [r7, #3]
 80063d2:	460b      	mov	r3, r1
 80063d4:	70bb      	strb	r3, [r7, #2]
 80063d6:	4613      	mov	r3, r2
 80063d8:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 80063da:	e017      	b.n	800640c <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	1c5a      	adds	r2, r3, #1
 80063e0:	607a      	str	r2, [r7, #4]
 80063e2:	7818      	ldrb	r0, [r3, #0]
 80063e4:	883c      	ldrh	r4, [r7, #0]
 80063e6:	78ba      	ldrb	r2, [r7, #2]
 80063e8:	78f9      	ldrb	r1, [r7, #3]
 80063ea:	8bbb      	ldrh	r3, [r7, #28]
 80063ec:	9301      	str	r3, [sp, #4]
 80063ee:	8b3b      	ldrh	r3, [r7, #24]
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	4623      	mov	r3, r4
 80063f4:	f7ff ff4a 	bl	800628c <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 80063f8:	8b3b      	ldrh	r3, [r7, #24]
 80063fa:	b2db      	uxtb	r3, r3
 80063fc:	461a      	mov	r2, r3
 80063fe:	0052      	lsls	r2, r2, #1
 8006400:	4413      	add	r3, r2
 8006402:	005b      	lsls	r3, r3, #1
 8006404:	b2da      	uxtb	r2, r3
 8006406:	78fb      	ldrb	r3, [r7, #3]
 8006408:	4413      	add	r3, r2
 800640a:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d1e3      	bne.n	80063dc <ILI9341_Draw_Text+0x1c>
    }
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	bd90      	pop	{r4, r7, pc}

0800641c <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{																							//GPIO INIT
 800641c:	b580      	push	{r7, lr}
 800641e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8006420:	2200      	movs	r2, #0
 8006422:	2180      	movs	r1, #128	; 0x80
 8006424:	4802      	ldr	r0, [pc, #8]	; (8006430 <ILI9341_SPI_Init+0x14>)
 8006426:	f7fd faef 	bl	8003a08 <HAL_GPIO_WritePin>
}
 800642a:	bf00      	nop
 800642c:	bd80      	pop	{r7, pc}
 800642e:	bf00      	nop
 8006430:	48000400 	.word	0x48000400

08006434 <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	4603      	mov	r3, r0
 800643c:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 800643e:	1df9      	adds	r1, r7, #7
 8006440:	2301      	movs	r3, #1
 8006442:	2201      	movs	r2, #1
 8006444:	4803      	ldr	r0, [pc, #12]	; (8006454 <ILI9341_SPI_Send+0x20>)
 8006446:	f7fe fc43 	bl	8004cd0 <HAL_SPI_Transmit>
}
 800644a:	bf00      	nop
 800644c:	3708      	adds	r7, #8
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	200001d4 	.word	0x200001d4

08006458 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b082      	sub	sp, #8
 800645c:	af00      	add	r7, sp, #0
 800645e:	4603      	mov	r3, r0
 8006460:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006462:	2200      	movs	r2, #0
 8006464:	2180      	movs	r1, #128	; 0x80
 8006466:	480a      	ldr	r0, [pc, #40]	; (8006490 <ILI9341_Write_Command+0x38>)
 8006468:	f7fd face 	bl	8003a08 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800646c:	2200      	movs	r2, #0
 800646e:	2140      	movs	r1, #64	; 0x40
 8006470:	4807      	ldr	r0, [pc, #28]	; (8006490 <ILI9341_Write_Command+0x38>)
 8006472:	f7fd fac9 	bl	8003a08 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8006476:	79fb      	ldrb	r3, [r7, #7]
 8006478:	4618      	mov	r0, r3
 800647a:	f7ff ffdb 	bl	8006434 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 800647e:	2201      	movs	r2, #1
 8006480:	2180      	movs	r1, #128	; 0x80
 8006482:	4803      	ldr	r0, [pc, #12]	; (8006490 <ILI9341_Write_Command+0x38>)
 8006484:	f7fd fac0 	bl	8003a08 <HAL_GPIO_WritePin>
}
 8006488:	bf00      	nop
 800648a:	3708      	adds	r7, #8
 800648c:	46bd      	mov	sp, r7
 800648e:	bd80      	pop	{r7, pc}
 8006490:	48000400 	.word	0x48000400

08006494 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8006494:	b580      	push	{r7, lr}
 8006496:	b082      	sub	sp, #8
 8006498:	af00      	add	r7, sp, #0
 800649a:	4603      	mov	r3, r0
 800649c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800649e:	2201      	movs	r2, #1
 80064a0:	2140      	movs	r1, #64	; 0x40
 80064a2:	480a      	ldr	r0, [pc, #40]	; (80064cc <ILI9341_Write_Data+0x38>)
 80064a4:	f7fd fab0 	bl	8003a08 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80064a8:	2200      	movs	r2, #0
 80064aa:	2180      	movs	r1, #128	; 0x80
 80064ac:	4807      	ldr	r0, [pc, #28]	; (80064cc <ILI9341_Write_Data+0x38>)
 80064ae:	f7fd faab 	bl	8003a08 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 80064b2:	79fb      	ldrb	r3, [r7, #7]
 80064b4:	4618      	mov	r0, r3
 80064b6:	f7ff ffbd 	bl	8006434 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80064ba:	2201      	movs	r2, #1
 80064bc:	2180      	movs	r1, #128	; 0x80
 80064be:	4803      	ldr	r0, [pc, #12]	; (80064cc <ILI9341_Write_Data+0x38>)
 80064c0:	f7fd faa2 	bl	8003a08 <HAL_GPIO_WritePin>
}
 80064c4:	bf00      	nop
 80064c6:	3708      	adds	r7, #8
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd80      	pop	{r7, pc}
 80064cc:	48000400 	.word	0x48000400

080064d0 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 80064d0:	b590      	push	{r4, r7, lr}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	4604      	mov	r4, r0
 80064d8:	4608      	mov	r0, r1
 80064da:	4611      	mov	r1, r2
 80064dc:	461a      	mov	r2, r3
 80064de:	4623      	mov	r3, r4
 80064e0:	80fb      	strh	r3, [r7, #6]
 80064e2:	4603      	mov	r3, r0
 80064e4:	80bb      	strh	r3, [r7, #4]
 80064e6:	460b      	mov	r3, r1
 80064e8:	807b      	strh	r3, [r7, #2]
 80064ea:	4613      	mov	r3, r2
 80064ec:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 80064ee:	202a      	movs	r0, #42	; 0x2a
 80064f0:	f7ff ffb2 	bl	8006458 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 80064f4:	88fb      	ldrh	r3, [r7, #6]
 80064f6:	0a1b      	lsrs	r3, r3, #8
 80064f8:	b29b      	uxth	r3, r3
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7ff ffc9 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8006502:	88fb      	ldrh	r3, [r7, #6]
 8006504:	b2db      	uxtb	r3, r3
 8006506:	4618      	mov	r0, r3
 8006508:	f7ff ffc4 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 800650c:	887b      	ldrh	r3, [r7, #2]
 800650e:	0a1b      	lsrs	r3, r3, #8
 8006510:	b29b      	uxth	r3, r3
 8006512:	b2db      	uxtb	r3, r3
 8006514:	4618      	mov	r0, r3
 8006516:	f7ff ffbd 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 800651a:	887b      	ldrh	r3, [r7, #2]
 800651c:	b2db      	uxtb	r3, r3
 800651e:	4618      	mov	r0, r3
 8006520:	f7ff ffb8 	bl	8006494 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8006524:	202b      	movs	r0, #43	; 0x2b
 8006526:	f7ff ff97 	bl	8006458 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 800652a:	88bb      	ldrh	r3, [r7, #4]
 800652c:	0a1b      	lsrs	r3, r3, #8
 800652e:	b29b      	uxth	r3, r3
 8006530:	b2db      	uxtb	r3, r3
 8006532:	4618      	mov	r0, r3
 8006534:	f7ff ffae 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8006538:	88bb      	ldrh	r3, [r7, #4]
 800653a:	b2db      	uxtb	r3, r3
 800653c:	4618      	mov	r0, r3
 800653e:	f7ff ffa9 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8006542:	883b      	ldrh	r3, [r7, #0]
 8006544:	0a1b      	lsrs	r3, r3, #8
 8006546:	b29b      	uxth	r3, r3
 8006548:	b2db      	uxtb	r3, r3
 800654a:	4618      	mov	r0, r3
 800654c:	f7ff ffa2 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8006550:	883b      	ldrh	r3, [r7, #0]
 8006552:	b2db      	uxtb	r3, r3
 8006554:	4618      	mov	r0, r3
 8006556:	f7ff ff9d 	bl	8006494 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 800655a:	202c      	movs	r0, #44	; 0x2c
 800655c:	f7ff ff7c 	bl	8006458 <ILI9341_Write_Command>
}
 8006560:	bf00      	nop
 8006562:	370c      	adds	r7, #12
 8006564:	46bd      	mov	sp, r7
 8006566:	bd90      	pop	{r4, r7, pc}

08006568 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET);
 800656c:	2200      	movs	r2, #0
 800656e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006572:	480b      	ldr	r0, [pc, #44]	; (80065a0 <ILI9341_Reset+0x38>)
 8006574:	f7fd fa48 	bl	8003a08 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8006578:	20c8      	movs	r0, #200	; 0xc8
 800657a:	f7fb f817 	bl	80015ac <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800657e:	2200      	movs	r2, #0
 8006580:	2180      	movs	r1, #128	; 0x80
 8006582:	4807      	ldr	r0, [pc, #28]	; (80065a0 <ILI9341_Reset+0x38>)
 8006584:	f7fd fa40 	bl	8003a08 <HAL_GPIO_WritePin>
HAL_Delay(200);
 8006588:	20c8      	movs	r0, #200	; 0xc8
 800658a:	f7fb f80f 	bl	80015ac <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 800658e:	2201      	movs	r2, #1
 8006590:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006594:	4802      	ldr	r0, [pc, #8]	; (80065a0 <ILI9341_Reset+0x38>)
 8006596:	f7fd fa37 	bl	8003a08 <HAL_GPIO_WritePin>
}
 800659a:	bf00      	nop
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	48000400 	.word	0x48000400

080065a4 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	4603      	mov	r3, r0
 80065ac:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 80065ae:	79fb      	ldrb	r3, [r7, #7]
 80065b0:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 80065b2:	2036      	movs	r0, #54	; 0x36
 80065b4:	f7ff ff50 	bl	8006458 <ILI9341_Write_Command>
//HAL_Delay(1);
	
switch(screen_rotation) 
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
 80065ba:	2b03      	cmp	r3, #3
 80065bc:	d836      	bhi.n	800662c <ILI9341_Set_Rotation+0x88>
 80065be:	a201      	add	r2, pc, #4	; (adr r2, 80065c4 <ILI9341_Set_Rotation+0x20>)
 80065c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065c4:	080065d5 	.word	0x080065d5
 80065c8:	080065eb 	.word	0x080065eb
 80065cc:	08006601 	.word	0x08006601
 80065d0:	08006617 	.word	0x08006617
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 80065d4:	2048      	movs	r0, #72	; 0x48
 80065d6:	f7ff ff5d 	bl	8006494 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 80065da:	4b17      	ldr	r3, [pc, #92]	; (8006638 <ILI9341_Set_Rotation+0x94>)
 80065dc:	22f0      	movs	r2, #240	; 0xf0
 80065de:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80065e0:	4b16      	ldr	r3, [pc, #88]	; (800663c <ILI9341_Set_Rotation+0x98>)
 80065e2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80065e6:	801a      	strh	r2, [r3, #0]
			break;
 80065e8:	e021      	b.n	800662e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80065ea:	2028      	movs	r0, #40	; 0x28
 80065ec:	f7ff ff52 	bl	8006494 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80065f0:	4b11      	ldr	r3, [pc, #68]	; (8006638 <ILI9341_Set_Rotation+0x94>)
 80065f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80065f6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80065f8:	4b10      	ldr	r3, [pc, #64]	; (800663c <ILI9341_Set_Rotation+0x98>)
 80065fa:	22f0      	movs	r2, #240	; 0xf0
 80065fc:	801a      	strh	r2, [r3, #0]
			break;
 80065fe:	e016      	b.n	800662e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8006600:	2088      	movs	r0, #136	; 0x88
 8006602:	f7ff ff47 	bl	8006494 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8006606:	4b0c      	ldr	r3, [pc, #48]	; (8006638 <ILI9341_Set_Rotation+0x94>)
 8006608:	22f0      	movs	r2, #240	; 0xf0
 800660a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800660c:	4b0b      	ldr	r3, [pc, #44]	; (800663c <ILI9341_Set_Rotation+0x98>)
 800660e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006612:	801a      	strh	r2, [r3, #0]
			break;
 8006614:	e00b      	b.n	800662e <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8006616:	20e8      	movs	r0, #232	; 0xe8
 8006618:	f7ff ff3c 	bl	8006494 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800661c:	4b06      	ldr	r3, [pc, #24]	; (8006638 <ILI9341_Set_Rotation+0x94>)
 800661e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8006622:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8006624:	4b05      	ldr	r3, [pc, #20]	; (800663c <ILI9341_Set_Rotation+0x98>)
 8006626:	22f0      	movs	r2, #240	; 0xf0
 8006628:	801a      	strh	r2, [r3, #0]
			break;
 800662a:	e000      	b.n	800662e <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800662c:	bf00      	nop
	}
}
 800662e:	bf00      	nop
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
 8006636:	bf00      	nop
 8006638:	20000012 	.word	0x20000012
 800663c:	20000010 	.word	0x20000010

08006640 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8006644:	2201      	movs	r2, #1
 8006646:	f44f 7100 	mov.w	r1, #512	; 0x200
 800664a:	4802      	ldr	r0, [pc, #8]	; (8006654 <ILI9341_Enable+0x14>)
 800664c:	f7fd f9dc 	bl	8003a08 <HAL_GPIO_WritePin>
}
 8006650:	bf00      	nop
 8006652:	bd80      	pop	{r7, pc}
 8006654:	48000400 	.word	0x48000400

08006658 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	af00      	add	r7, sp, #0

ILI9341_Enable();
 800665c:	f7ff fff0 	bl	8006640 <ILI9341_Enable>
ILI9341_SPI_Init();
 8006660:	f7ff fedc 	bl	800641c <ILI9341_SPI_Init>
ILI9341_Reset();
 8006664:	f7ff ff80 	bl	8006568 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8006668:	2001      	movs	r0, #1
 800666a:	f7ff fef5 	bl	8006458 <ILI9341_Write_Command>
HAL_Delay(2000);
 800666e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006672:	f7fa ff9b 	bl	80015ac <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8006676:	20cb      	movs	r0, #203	; 0xcb
 8006678:	f7ff feee 	bl	8006458 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 800667c:	2039      	movs	r0, #57	; 0x39
 800667e:	f7ff ff09 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8006682:	202c      	movs	r0, #44	; 0x2c
 8006684:	f7ff ff06 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8006688:	2000      	movs	r0, #0
 800668a:	f7ff ff03 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 800668e:	2034      	movs	r0, #52	; 0x34
 8006690:	f7ff ff00 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8006694:	2002      	movs	r0, #2
 8006696:	f7ff fefd 	bl	8006494 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 800669a:	20cf      	movs	r0, #207	; 0xcf
 800669c:	f7ff fedc 	bl	8006458 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80066a0:	2000      	movs	r0, #0
 80066a2:	f7ff fef7 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80066a6:	20c1      	movs	r0, #193	; 0xc1
 80066a8:	f7ff fef4 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 80066ac:	2030      	movs	r0, #48	; 0x30
 80066ae:	f7ff fef1 	bl	8006494 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 80066b2:	20e8      	movs	r0, #232	; 0xe8
 80066b4:	f7ff fed0 	bl	8006458 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 80066b8:	2085      	movs	r0, #133	; 0x85
 80066ba:	f7ff feeb 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80066be:	2000      	movs	r0, #0
 80066c0:	f7ff fee8 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 80066c4:	2078      	movs	r0, #120	; 0x78
 80066c6:	f7ff fee5 	bl	8006494 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 80066ca:	20ea      	movs	r0, #234	; 0xea
 80066cc:	f7ff fec4 	bl	8006458 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80066d0:	2000      	movs	r0, #0
 80066d2:	f7ff fedf 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80066d6:	2000      	movs	r0, #0
 80066d8:	f7ff fedc 	bl	8006494 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 80066dc:	20ed      	movs	r0, #237	; 0xed
 80066de:	f7ff febb 	bl	8006458 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 80066e2:	2064      	movs	r0, #100	; 0x64
 80066e4:	f7ff fed6 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80066e8:	2003      	movs	r0, #3
 80066ea:	f7ff fed3 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 80066ee:	2012      	movs	r0, #18
 80066f0:	f7ff fed0 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 80066f4:	2081      	movs	r0, #129	; 0x81
 80066f6:	f7ff fecd 	bl	8006494 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 80066fa:	20f7      	movs	r0, #247	; 0xf7
 80066fc:	f7ff feac 	bl	8006458 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8006700:	2020      	movs	r0, #32
 8006702:	f7ff fec7 	bl	8006494 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8006706:	20c0      	movs	r0, #192	; 0xc0
 8006708:	f7ff fea6 	bl	8006458 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 800670c:	2023      	movs	r0, #35	; 0x23
 800670e:	f7ff fec1 	bl	8006494 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8006712:	20c1      	movs	r0, #193	; 0xc1
 8006714:	f7ff fea0 	bl	8006458 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8006718:	2010      	movs	r0, #16
 800671a:	f7ff febb 	bl	8006494 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800671e:	20c5      	movs	r0, #197	; 0xc5
 8006720:	f7ff fe9a 	bl	8006458 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8006724:	203e      	movs	r0, #62	; 0x3e
 8006726:	f7ff feb5 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 800672a:	2028      	movs	r0, #40	; 0x28
 800672c:	f7ff feb2 	bl	8006494 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8006730:	20c7      	movs	r0, #199	; 0xc7
 8006732:	f7ff fe91 	bl	8006458 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8006736:	2086      	movs	r0, #134	; 0x86
 8006738:	f7ff feac 	bl	8006494 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 800673c:	2036      	movs	r0, #54	; 0x36
 800673e:	f7ff fe8b 	bl	8006458 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8006742:	2048      	movs	r0, #72	; 0x48
 8006744:	f7ff fea6 	bl	8006494 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8006748:	203a      	movs	r0, #58	; 0x3a
 800674a:	f7ff fe85 	bl	8006458 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 800674e:	2055      	movs	r0, #85	; 0x55
 8006750:	f7ff fea0 	bl	8006494 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8006754:	20b1      	movs	r0, #177	; 0xb1
 8006756:	f7ff fe7f 	bl	8006458 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800675a:	2000      	movs	r0, #0
 800675c:	f7ff fe9a 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8006760:	2018      	movs	r0, #24
 8006762:	f7ff fe97 	bl	8006494 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8006766:	20b6      	movs	r0, #182	; 0xb6
 8006768:	f7ff fe76 	bl	8006458 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 800676c:	2008      	movs	r0, #8
 800676e:	f7ff fe91 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8006772:	2082      	movs	r0, #130	; 0x82
 8006774:	f7ff fe8e 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8006778:	2027      	movs	r0, #39	; 0x27
 800677a:	f7ff fe8b 	bl	8006494 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 800677e:	20f2      	movs	r0, #242	; 0xf2
 8006780:	f7ff fe6a 	bl	8006458 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8006784:	2000      	movs	r0, #0
 8006786:	f7ff fe85 	bl	8006494 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 800678a:	2026      	movs	r0, #38	; 0x26
 800678c:	f7ff fe64 	bl	8006458 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8006790:	2001      	movs	r0, #1
 8006792:	f7ff fe7f 	bl	8006494 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8006796:	20e0      	movs	r0, #224	; 0xe0
 8006798:	f7ff fe5e 	bl	8006458 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 800679c:	200f      	movs	r0, #15
 800679e:	f7ff fe79 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80067a2:	2031      	movs	r0, #49	; 0x31
 80067a4:	f7ff fe76 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 80067a8:	202b      	movs	r0, #43	; 0x2b
 80067aa:	f7ff fe73 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80067ae:	200c      	movs	r0, #12
 80067b0:	f7ff fe70 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80067b4:	200e      	movs	r0, #14
 80067b6:	f7ff fe6d 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80067ba:	2008      	movs	r0, #8
 80067bc:	f7ff fe6a 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 80067c0:	204e      	movs	r0, #78	; 0x4e
 80067c2:	f7ff fe67 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 80067c6:	20f1      	movs	r0, #241	; 0xf1
 80067c8:	f7ff fe64 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 80067cc:	2037      	movs	r0, #55	; 0x37
 80067ce:	f7ff fe61 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 80067d2:	2007      	movs	r0, #7
 80067d4:	f7ff fe5e 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 80067d8:	2010      	movs	r0, #16
 80067da:	f7ff fe5b 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 80067de:	2003      	movs	r0, #3
 80067e0:	f7ff fe58 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 80067e4:	200e      	movs	r0, #14
 80067e6:	f7ff fe55 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 80067ea:	2009      	movs	r0, #9
 80067ec:	f7ff fe52 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 80067f0:	2000      	movs	r0, #0
 80067f2:	f7ff fe4f 	bl	8006494 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 80067f6:	20e1      	movs	r0, #225	; 0xe1
 80067f8:	f7ff fe2e 	bl	8006458 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80067fc:	2000      	movs	r0, #0
 80067fe:	f7ff fe49 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8006802:	200e      	movs	r0, #14
 8006804:	f7ff fe46 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8006808:	2014      	movs	r0, #20
 800680a:	f7ff fe43 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800680e:	2003      	movs	r0, #3
 8006810:	f7ff fe40 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8006814:	2011      	movs	r0, #17
 8006816:	f7ff fe3d 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800681a:	2007      	movs	r0, #7
 800681c:	f7ff fe3a 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8006820:	2031      	movs	r0, #49	; 0x31
 8006822:	f7ff fe37 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8006826:	20c1      	movs	r0, #193	; 0xc1
 8006828:	f7ff fe34 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 800682c:	2048      	movs	r0, #72	; 0x48
 800682e:	f7ff fe31 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8006832:	2008      	movs	r0, #8
 8006834:	f7ff fe2e 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8006838:	200f      	movs	r0, #15
 800683a:	f7ff fe2b 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800683e:	200c      	movs	r0, #12
 8006840:	f7ff fe28 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8006844:	2031      	movs	r0, #49	; 0x31
 8006846:	f7ff fe25 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 800684a:	2036      	movs	r0, #54	; 0x36
 800684c:	f7ff fe22 	bl	8006494 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8006850:	200f      	movs	r0, #15
 8006852:	f7ff fe1f 	bl	8006494 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8006856:	2011      	movs	r0, #17
 8006858:	f7ff fdfe 	bl	8006458 <ILI9341_Write_Command>
HAL_Delay(240);
 800685c:	20f0      	movs	r0, #240	; 0xf0
 800685e:	f7fa fea5 	bl	80015ac <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8006862:	2029      	movs	r0, #41	; 0x29
 8006864:	f7ff fdf8 	bl	8006458 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8006868:	2000      	movs	r0, #0
 800686a:	f7ff fe9b 	bl	80065a4 <ILI9341_Set_Rotation>
}
 800686e:	bf00      	nop
 8006870:	bd80      	pop	{r7, pc}
	...

08006874 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8006874:	b5b0      	push	{r4, r5, r7, lr}
 8006876:	b08c      	sub	sp, #48	; 0x30
 8006878:	af00      	add	r7, sp, #0
 800687a:	4603      	mov	r3, r0
 800687c:	6039      	str	r1, [r7, #0]
 800687e:	80fb      	strh	r3, [r7, #6]
 8006880:	466b      	mov	r3, sp
 8006882:	461d      	mov	r5, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8006884:	2300      	movs	r3, #0
 8006886:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	005b      	lsls	r3, r3, #1
 800688c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006890:	d202      	bcs.n	8006898 <ILI9341_Draw_Colour_Burst+0x24>
{
	Buffer_Size = Size;
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	627b      	str	r3, [r7, #36]	; 0x24
 8006896:	e002      	b.n	800689e <ILI9341_Draw_Colour_Burst+0x2a>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8006898:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800689c:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800689e:	2201      	movs	r2, #1
 80068a0:	2140      	movs	r1, #64	; 0x40
 80068a2:	483d      	ldr	r0, [pc, #244]	; (8006998 <ILI9341_Draw_Colour_Burst+0x124>)
 80068a4:	f7fd f8b0 	bl	8003a08 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80068a8:	2200      	movs	r2, #0
 80068aa:	2180      	movs	r1, #128	; 0x80
 80068ac:	483a      	ldr	r0, [pc, #232]	; (8006998 <ILI9341_Draw_Colour_Burst+0x124>)
 80068ae:	f7fd f8ab 	bl	8003a08 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 80068b2:	88fb      	ldrh	r3, [r7, #6]
 80068b4:	0a1b      	lsrs	r3, r3, #8
 80068b6:	b29b      	uxth	r3, r3
 80068b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 80068bc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80068be:	4603      	mov	r3, r0
 80068c0:	3b01      	subs	r3, #1
 80068c2:	61fb      	str	r3, [r7, #28]
 80068c4:	4601      	mov	r1, r0
 80068c6:	f04f 0200 	mov.w	r2, #0
 80068ca:	f04f 0300 	mov.w	r3, #0
 80068ce:	f04f 0400 	mov.w	r4, #0
 80068d2:	00d4      	lsls	r4, r2, #3
 80068d4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80068d8:	00cb      	lsls	r3, r1, #3
 80068da:	4601      	mov	r1, r0
 80068dc:	f04f 0200 	mov.w	r2, #0
 80068e0:	f04f 0300 	mov.w	r3, #0
 80068e4:	f04f 0400 	mov.w	r4, #0
 80068e8:	00d4      	lsls	r4, r2, #3
 80068ea:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80068ee:	00cb      	lsls	r3, r1, #3
 80068f0:	1dc3      	adds	r3, r0, #7
 80068f2:	08db      	lsrs	r3, r3, #3
 80068f4:	00db      	lsls	r3, r3, #3
 80068f6:	ebad 0d03 	sub.w	sp, sp, r3
 80068fa:	466b      	mov	r3, sp
 80068fc:	3300      	adds	r3, #0
 80068fe:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8006900:	2300      	movs	r3, #0
 8006902:	62bb      	str	r3, [r7, #40]	; 0x28
 8006904:	e00e      	b.n	8006924 <ILI9341_Draw_Colour_Burst+0xb0>
	{
		burst_buffer[j] = 	chifted;
 8006906:	69ba      	ldr	r2, [r7, #24]
 8006908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800690a:	4413      	add	r3, r2
 800690c:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8006910:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8006912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006914:	3301      	adds	r3, #1
 8006916:	88fa      	ldrh	r2, [r7, #6]
 8006918:	b2d1      	uxtb	r1, r2
 800691a:	69ba      	ldr	r2, [r7, #24]
 800691c:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800691e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006920:	3302      	adds	r3, #2
 8006922:	62bb      	str	r3, [r7, #40]	; 0x28
 8006924:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006928:	429a      	cmp	r2, r3
 800692a:	d3ec      	bcc.n	8006906 <ILI9341_Draw_Colour_Burst+0x92>
	}

uint32_t Sending_Size = Size*2;
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	005b      	lsls	r3, r3, #1
 8006930:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8006932:	697a      	ldr	r2, [r7, #20]
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	fbb2 f3f3 	udiv	r3, r2, r3
 800693a:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006940:	fbb3 f2f2 	udiv	r2, r3, r2
 8006944:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006946:	fb01 f202 	mul.w	r2, r1, r2
 800694a:	1a9b      	subs	r3, r3, r2
 800694c:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d010      	beq.n	8006976 <ILI9341_Draw_Colour_Burst+0x102>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8006954:	2300      	movs	r3, #0
 8006956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006958:	e009      	b.n	800696e <ILI9341_Draw_Colour_Burst+0xfa>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 800695a:	69b9      	ldr	r1, [r7, #24]
 800695c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800695e:	b29a      	uxth	r2, r3
 8006960:	230a      	movs	r3, #10
 8006962:	480e      	ldr	r0, [pc, #56]	; (800699c <ILI9341_Draw_Colour_Burst+0x128>)
 8006964:	f7fe f9b4 	bl	8004cd0 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8006968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800696a:	3301      	adds	r3, #1
 800696c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800696e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	429a      	cmp	r2, r3
 8006974:	d3f1      	bcc.n	800695a <ILI9341_Draw_Colour_Burst+0xe6>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8006976:	69b9      	ldr	r1, [r7, #24]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	b29a      	uxth	r2, r3
 800697c:	230a      	movs	r3, #10
 800697e:	4807      	ldr	r0, [pc, #28]	; (800699c <ILI9341_Draw_Colour_Burst+0x128>)
 8006980:	f7fe f9a6 	bl	8004cd0 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8006984:	2201      	movs	r2, #1
 8006986:	2180      	movs	r1, #128	; 0x80
 8006988:	4803      	ldr	r0, [pc, #12]	; (8006998 <ILI9341_Draw_Colour_Burst+0x124>)
 800698a:	f7fd f83d 	bl	8003a08 <HAL_GPIO_WritePin>
 800698e:	46ad      	mov	sp, r5
}
 8006990:	bf00      	nop
 8006992:	3730      	adds	r7, #48	; 0x30
 8006994:	46bd      	mov	sp, r7
 8006996:	bdb0      	pop	{r4, r5, r7, pc}
 8006998:	48000400 	.word	0x48000400
 800699c:	200001d4 	.word	0x200001d4

080069a0 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	4603      	mov	r3, r0
 80069a8:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 80069aa:	4b0e      	ldr	r3, [pc, #56]	; (80069e4 <ILI9341_Fill_Screen+0x44>)
 80069ac:	881b      	ldrh	r3, [r3, #0]
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	4b0d      	ldr	r3, [pc, #52]	; (80069e8 <ILI9341_Fill_Screen+0x48>)
 80069b2:	881b      	ldrh	r3, [r3, #0]
 80069b4:	b29b      	uxth	r3, r3
 80069b6:	2100      	movs	r1, #0
 80069b8:	2000      	movs	r0, #0
 80069ba:	f7ff fd89 	bl	80064d0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 80069be:	4b09      	ldr	r3, [pc, #36]	; (80069e4 <ILI9341_Fill_Screen+0x44>)
 80069c0:	881b      	ldrh	r3, [r3, #0]
 80069c2:	b29b      	uxth	r3, r3
 80069c4:	461a      	mov	r2, r3
 80069c6:	4b08      	ldr	r3, [pc, #32]	; (80069e8 <ILI9341_Fill_Screen+0x48>)
 80069c8:	881b      	ldrh	r3, [r3, #0]
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	fb03 f302 	mul.w	r3, r3, r2
 80069d0:	461a      	mov	r2, r3
 80069d2:	88fb      	ldrh	r3, [r7, #6]
 80069d4:	4611      	mov	r1, r2
 80069d6:	4618      	mov	r0, r3
 80069d8:	f7ff ff4c 	bl	8006874 <ILI9341_Draw_Colour_Burst>
}
 80069dc:	bf00      	nop
 80069de:	3708      	adds	r7, #8
 80069e0:	46bd      	mov	sp, r7
 80069e2:	bd80      	pop	{r7, pc}
 80069e4:	20000012 	.word	0x20000012
 80069e8:	20000010 	.word	0x20000010

080069ec <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b086      	sub	sp, #24
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	4603      	mov	r3, r0
 80069f4:	80fb      	strh	r3, [r7, #6]
 80069f6:	460b      	mov	r3, r1
 80069f8:	80bb      	strh	r3, [r7, #4]
 80069fa:	4613      	mov	r3, r2
 80069fc:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 80069fe:	4b5b      	ldr	r3, [pc, #364]	; (8006b6c <ILI9341_Draw_Pixel+0x180>)
 8006a00:	881b      	ldrh	r3, [r3, #0]
 8006a02:	b29b      	uxth	r3, r3
 8006a04:	88fa      	ldrh	r2, [r7, #6]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	f080 80ac 	bcs.w	8006b64 <ILI9341_Draw_Pixel+0x178>
 8006a0c:	4b58      	ldr	r3, [pc, #352]	; (8006b70 <ILI9341_Draw_Pixel+0x184>)
 8006a0e:	881b      	ldrh	r3, [r3, #0]
 8006a10:	b29b      	uxth	r3, r3
 8006a12:	88ba      	ldrh	r2, [r7, #4]
 8006a14:	429a      	cmp	r2, r3
 8006a16:	f080 80a5 	bcs.w	8006b64 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	2140      	movs	r1, #64	; 0x40
 8006a1e:	4855      	ldr	r0, [pc, #340]	; (8006b74 <ILI9341_Draw_Pixel+0x188>)
 8006a20:	f7fc fff2 	bl	8003a08 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006a24:	2200      	movs	r2, #0
 8006a26:	2180      	movs	r1, #128	; 0x80
 8006a28:	4852      	ldr	r0, [pc, #328]	; (8006b74 <ILI9341_Draw_Pixel+0x188>)
 8006a2a:	f7fc ffed 	bl	8003a08 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8006a2e:	202a      	movs	r0, #42	; 0x2a
 8006a30:	f7ff fd00 	bl	8006434 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8006a34:	2201      	movs	r2, #1
 8006a36:	2140      	movs	r1, #64	; 0x40
 8006a38:	484e      	ldr	r0, [pc, #312]	; (8006b74 <ILI9341_Draw_Pixel+0x188>)
 8006a3a:	f7fc ffe5 	bl	8003a08 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8006a3e:	2201      	movs	r2, #1
 8006a40:	2180      	movs	r1, #128	; 0x80
 8006a42:	484c      	ldr	r0, [pc, #304]	; (8006b74 <ILI9341_Draw_Pixel+0x188>)
 8006a44:	f7fc ffe0 	bl	8003a08 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8006a48:	2200      	movs	r2, #0
 8006a4a:	2180      	movs	r1, #128	; 0x80
 8006a4c:	4849      	ldr	r0, [pc, #292]	; (8006b74 <ILI9341_Draw_Pixel+0x188>)
 8006a4e:	f7fc ffdb 	bl	8003a08 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8006a52:	88fb      	ldrh	r3, [r7, #6]
 8006a54:	0a1b      	lsrs	r3, r3, #8
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	753b      	strb	r3, [r7, #20]
 8006a5c:	88fb      	ldrh	r3, [r7, #6]
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	757b      	strb	r3, [r7, #21]
 8006a62:	88fb      	ldrh	r3, [r7, #6]
 8006a64:	3301      	adds	r3, #1
 8006a66:	121b      	asrs	r3, r3, #8
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	75bb      	strb	r3, [r7, #22]
 8006a6c:	88fb      	ldrh	r3, [r7, #6]
 8006a6e:	b2db      	uxtb	r3, r3
 8006a70:	3301      	adds	r3, #1
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8006a76:	f107 0114 	add.w	r1, r7, #20
 8006a7a:	2301      	movs	r3, #1
 8006a7c:	2204      	movs	r2, #4
 8006a7e:	483e      	ldr	r0, [pc, #248]	; (8006b78 <ILI9341_Draw_Pixel+0x18c>)
 8006a80:	f7fe f926 	bl	8004cd0 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8006a84:	2201      	movs	r2, #1
 8006a86:	2180      	movs	r1, #128	; 0x80
 8006a88:	483a      	ldr	r0, [pc, #232]	; (8006b74 <ILI9341_Draw_Pixel+0x188>)
 8006a8a:	f7fc ffbd 	bl	8003a08 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8006a8e:	2200      	movs	r2, #0
 8006a90:	2140      	movs	r1, #64	; 0x40
 8006a92:	4838      	ldr	r0, [pc, #224]	; (8006b74 <ILI9341_Draw_Pixel+0x188>)
 8006a94:	f7fc ffb8 	bl	8003a08 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8006a98:	2200      	movs	r2, #0
 8006a9a:	2180      	movs	r1, #128	; 0x80
 8006a9c:	4835      	ldr	r0, [pc, #212]	; (8006b74 <ILI9341_Draw_Pixel+0x188>)
 8006a9e:	f7fc ffb3 	bl	8003a08 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8006aa2:	202b      	movs	r0, #43	; 0x2b
 8006aa4:	f7ff fcc6 	bl	8006434 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	2140      	movs	r1, #64	; 0x40
 8006aac:	4831      	ldr	r0, [pc, #196]	; (8006b74 <ILI9341_Draw_Pixel+0x188>)
 8006aae:	f7fc ffab 	bl	8003a08 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8006ab2:	2201      	movs	r2, #1
 8006ab4:	2180      	movs	r1, #128	; 0x80
 8006ab6:	482f      	ldr	r0, [pc, #188]	; (8006b74 <ILI9341_Draw_Pixel+0x188>)
 8006ab8:	f7fc ffa6 	bl	8003a08 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006abc:	2200      	movs	r2, #0
 8006abe:	2180      	movs	r1, #128	; 0x80
 8006ac0:	482c      	ldr	r0, [pc, #176]	; (8006b74 <ILI9341_Draw_Pixel+0x188>)
 8006ac2:	f7fc ffa1 	bl	8003a08 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8006ac6:	88bb      	ldrh	r3, [r7, #4]
 8006ac8:	0a1b      	lsrs	r3, r3, #8
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	743b      	strb	r3, [r7, #16]
 8006ad0:	88bb      	ldrh	r3, [r7, #4]
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	747b      	strb	r3, [r7, #17]
 8006ad6:	88bb      	ldrh	r3, [r7, #4]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	121b      	asrs	r3, r3, #8
 8006adc:	b2db      	uxtb	r3, r3
 8006ade:	74bb      	strb	r3, [r7, #18]
 8006ae0:	88bb      	ldrh	r3, [r7, #4]
 8006ae2:	b2db      	uxtb	r3, r3
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8006aea:	f107 0110 	add.w	r1, r7, #16
 8006aee:	2301      	movs	r3, #1
 8006af0:	2204      	movs	r2, #4
 8006af2:	4821      	ldr	r0, [pc, #132]	; (8006b78 <ILI9341_Draw_Pixel+0x18c>)
 8006af4:	f7fe f8ec 	bl	8004cd0 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8006af8:	2201      	movs	r2, #1
 8006afa:	2180      	movs	r1, #128	; 0x80
 8006afc:	481d      	ldr	r0, [pc, #116]	; (8006b74 <ILI9341_Draw_Pixel+0x188>)
 8006afe:	f7fc ff83 	bl	8003a08 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8006b02:	2200      	movs	r2, #0
 8006b04:	2140      	movs	r1, #64	; 0x40
 8006b06:	481b      	ldr	r0, [pc, #108]	; (8006b74 <ILI9341_Draw_Pixel+0x188>)
 8006b08:	f7fc ff7e 	bl	8003a08 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8006b0c:	2200      	movs	r2, #0
 8006b0e:	2180      	movs	r1, #128	; 0x80
 8006b10:	4818      	ldr	r0, [pc, #96]	; (8006b74 <ILI9341_Draw_Pixel+0x188>)
 8006b12:	f7fc ff79 	bl	8003a08 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8006b16:	202c      	movs	r0, #44	; 0x2c
 8006b18:	f7ff fc8c 	bl	8006434 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	2140      	movs	r1, #64	; 0x40
 8006b20:	4814      	ldr	r0, [pc, #80]	; (8006b74 <ILI9341_Draw_Pixel+0x188>)
 8006b22:	f7fc ff71 	bl	8003a08 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8006b26:	2201      	movs	r2, #1
 8006b28:	2180      	movs	r1, #128	; 0x80
 8006b2a:	4812      	ldr	r0, [pc, #72]	; (8006b74 <ILI9341_Draw_Pixel+0x188>)
 8006b2c:	f7fc ff6c 	bl	8003a08 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8006b30:	2200      	movs	r2, #0
 8006b32:	2180      	movs	r1, #128	; 0x80
 8006b34:	480f      	ldr	r0, [pc, #60]	; (8006b74 <ILI9341_Draw_Pixel+0x188>)
 8006b36:	f7fc ff67 	bl	8003a08 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8006b3a:	887b      	ldrh	r3, [r7, #2]
 8006b3c:	0a1b      	lsrs	r3, r3, #8
 8006b3e:	b29b      	uxth	r3, r3
 8006b40:	b2db      	uxtb	r3, r3
 8006b42:	733b      	strb	r3, [r7, #12]
 8006b44:	887b      	ldrh	r3, [r7, #2]
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8006b4a:	f107 010c 	add.w	r1, r7, #12
 8006b4e:	2301      	movs	r3, #1
 8006b50:	2202      	movs	r2, #2
 8006b52:	4809      	ldr	r0, [pc, #36]	; (8006b78 <ILI9341_Draw_Pixel+0x18c>)
 8006b54:	f7fe f8bc 	bl	8004cd0 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8006b58:	2201      	movs	r2, #1
 8006b5a:	2180      	movs	r1, #128	; 0x80
 8006b5c:	4805      	ldr	r0, [pc, #20]	; (8006b74 <ILI9341_Draw_Pixel+0x188>)
 8006b5e:	f7fc ff53 	bl	8003a08 <HAL_GPIO_WritePin>
 8006b62:	e000      	b.n	8006b66 <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8006b64:	bf00      	nop
	
}
 8006b66:	3718      	adds	r7, #24
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	20000012 	.word	0x20000012
 8006b70:	20000010 	.word	0x20000010
 8006b74:	48000400 	.word	0x48000400
 8006b78:	200001d4 	.word	0x200001d4

08006b7c <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8006b7c:	b590      	push	{r4, r7, lr}
 8006b7e:	b083      	sub	sp, #12
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	4604      	mov	r4, r0
 8006b84:	4608      	mov	r0, r1
 8006b86:	4611      	mov	r1, r2
 8006b88:	461a      	mov	r2, r3
 8006b8a:	4623      	mov	r3, r4
 8006b8c:	80fb      	strh	r3, [r7, #6]
 8006b8e:	4603      	mov	r3, r0
 8006b90:	80bb      	strh	r3, [r7, #4]
 8006b92:	460b      	mov	r3, r1
 8006b94:	807b      	strh	r3, [r7, #2]
 8006b96:	4613      	mov	r3, r2
 8006b98:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8006b9a:	4b25      	ldr	r3, [pc, #148]	; (8006c30 <ILI9341_Draw_Rectangle+0xb4>)
 8006b9c:	881b      	ldrh	r3, [r3, #0]
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	88fa      	ldrh	r2, [r7, #6]
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d23f      	bcs.n	8006c26 <ILI9341_Draw_Rectangle+0xaa>
 8006ba6:	4b23      	ldr	r3, [pc, #140]	; (8006c34 <ILI9341_Draw_Rectangle+0xb8>)
 8006ba8:	881b      	ldrh	r3, [r3, #0]
 8006baa:	b29b      	uxth	r3, r3
 8006bac:	88ba      	ldrh	r2, [r7, #4]
 8006bae:	429a      	cmp	r2, r3
 8006bb0:	d239      	bcs.n	8006c26 <ILI9341_Draw_Rectangle+0xaa>
if((X+Width-1)>=LCD_WIDTH)
 8006bb2:	88fa      	ldrh	r2, [r7, #6]
 8006bb4:	887b      	ldrh	r3, [r7, #2]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	3b01      	subs	r3, #1
 8006bba:	4a1d      	ldr	r2, [pc, #116]	; (8006c30 <ILI9341_Draw_Rectangle+0xb4>)
 8006bbc:	8812      	ldrh	r2, [r2, #0]
 8006bbe:	b292      	uxth	r2, r2
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	db05      	blt.n	8006bd0 <ILI9341_Draw_Rectangle+0x54>
	{
		Width=LCD_WIDTH-X;
 8006bc4:	4b1a      	ldr	r3, [pc, #104]	; (8006c30 <ILI9341_Draw_Rectangle+0xb4>)
 8006bc6:	881b      	ldrh	r3, [r3, #0]
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	88fb      	ldrh	r3, [r7, #6]
 8006bcc:	1ad3      	subs	r3, r2, r3
 8006bce:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8006bd0:	88ba      	ldrh	r2, [r7, #4]
 8006bd2:	883b      	ldrh	r3, [r7, #0]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	4a16      	ldr	r2, [pc, #88]	; (8006c34 <ILI9341_Draw_Rectangle+0xb8>)
 8006bda:	8812      	ldrh	r2, [r2, #0]
 8006bdc:	b292      	uxth	r2, r2
 8006bde:	4293      	cmp	r3, r2
 8006be0:	db05      	blt.n	8006bee <ILI9341_Draw_Rectangle+0x72>
	{
		Height=LCD_HEIGHT-Y;
 8006be2:	4b14      	ldr	r3, [pc, #80]	; (8006c34 <ILI9341_Draw_Rectangle+0xb8>)
 8006be4:	881b      	ldrh	r3, [r3, #0]
 8006be6:	b29a      	uxth	r2, r3
 8006be8:	88bb      	ldrh	r3, [r7, #4]
 8006bea:	1ad3      	subs	r3, r2, r3
 8006bec:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8006bee:	88fa      	ldrh	r2, [r7, #6]
 8006bf0:	887b      	ldrh	r3, [r7, #2]
 8006bf2:	4413      	add	r3, r2
 8006bf4:	b29b      	uxth	r3, r3
 8006bf6:	3b01      	subs	r3, #1
 8006bf8:	b29c      	uxth	r4, r3
 8006bfa:	88ba      	ldrh	r2, [r7, #4]
 8006bfc:	883b      	ldrh	r3, [r7, #0]
 8006bfe:	4413      	add	r3, r2
 8006c00:	b29b      	uxth	r3, r3
 8006c02:	3b01      	subs	r3, #1
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	88b9      	ldrh	r1, [r7, #4]
 8006c08:	88f8      	ldrh	r0, [r7, #6]
 8006c0a:	4622      	mov	r2, r4
 8006c0c:	f7ff fc60 	bl	80064d0 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8006c10:	883b      	ldrh	r3, [r7, #0]
 8006c12:	887a      	ldrh	r2, [r7, #2]
 8006c14:	fb02 f303 	mul.w	r3, r2, r3
 8006c18:	461a      	mov	r2, r3
 8006c1a:	8b3b      	ldrh	r3, [r7, #24]
 8006c1c:	4611      	mov	r1, r2
 8006c1e:	4618      	mov	r0, r3
 8006c20:	f7ff fe28 	bl	8006874 <ILI9341_Draw_Colour_Burst>
 8006c24:	e000      	b.n	8006c28 <ILI9341_Draw_Rectangle+0xac>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8006c26:	bf00      	nop
}
 8006c28:	370c      	adds	r7, #12
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd90      	pop	{r4, r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	20000012 	.word	0x20000012
 8006c34:	20000010 	.word	0x20000010

08006c38 <__errno>:
 8006c38:	4b01      	ldr	r3, [pc, #4]	; (8006c40 <__errno+0x8>)
 8006c3a:	6818      	ldr	r0, [r3, #0]
 8006c3c:	4770      	bx	lr
 8006c3e:	bf00      	nop
 8006c40:	20000014 	.word	0x20000014

08006c44 <__libc_init_array>:
 8006c44:	b570      	push	{r4, r5, r6, lr}
 8006c46:	4e0d      	ldr	r6, [pc, #52]	; (8006c7c <__libc_init_array+0x38>)
 8006c48:	4c0d      	ldr	r4, [pc, #52]	; (8006c80 <__libc_init_array+0x3c>)
 8006c4a:	1ba4      	subs	r4, r4, r6
 8006c4c:	10a4      	asrs	r4, r4, #2
 8006c4e:	2500      	movs	r5, #0
 8006c50:	42a5      	cmp	r5, r4
 8006c52:	d109      	bne.n	8006c68 <__libc_init_array+0x24>
 8006c54:	4e0b      	ldr	r6, [pc, #44]	; (8006c84 <__libc_init_array+0x40>)
 8006c56:	4c0c      	ldr	r4, [pc, #48]	; (8006c88 <__libc_init_array+0x44>)
 8006c58:	f000 fc88 	bl	800756c <_init>
 8006c5c:	1ba4      	subs	r4, r4, r6
 8006c5e:	10a4      	asrs	r4, r4, #2
 8006c60:	2500      	movs	r5, #0
 8006c62:	42a5      	cmp	r5, r4
 8006c64:	d105      	bne.n	8006c72 <__libc_init_array+0x2e>
 8006c66:	bd70      	pop	{r4, r5, r6, pc}
 8006c68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c6c:	4798      	blx	r3
 8006c6e:	3501      	adds	r5, #1
 8006c70:	e7ee      	b.n	8006c50 <__libc_init_array+0xc>
 8006c72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c76:	4798      	blx	r3
 8006c78:	3501      	adds	r5, #1
 8006c7a:	e7f2      	b.n	8006c62 <__libc_init_array+0x1e>
 8006c7c:	08007868 	.word	0x08007868
 8006c80:	08007868 	.word	0x08007868
 8006c84:	08007868 	.word	0x08007868
 8006c88:	0800786c 	.word	0x0800786c

08006c8c <memset>:
 8006c8c:	4402      	add	r2, r0
 8006c8e:	4603      	mov	r3, r0
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d100      	bne.n	8006c96 <memset+0xa>
 8006c94:	4770      	bx	lr
 8006c96:	f803 1b01 	strb.w	r1, [r3], #1
 8006c9a:	e7f9      	b.n	8006c90 <memset+0x4>

08006c9c <_puts_r>:
 8006c9c:	b570      	push	{r4, r5, r6, lr}
 8006c9e:	460e      	mov	r6, r1
 8006ca0:	4605      	mov	r5, r0
 8006ca2:	b118      	cbz	r0, 8006cac <_puts_r+0x10>
 8006ca4:	6983      	ldr	r3, [r0, #24]
 8006ca6:	b90b      	cbnz	r3, 8006cac <_puts_r+0x10>
 8006ca8:	f000 fa0c 	bl	80070c4 <__sinit>
 8006cac:	69ab      	ldr	r3, [r5, #24]
 8006cae:	68ac      	ldr	r4, [r5, #8]
 8006cb0:	b913      	cbnz	r3, 8006cb8 <_puts_r+0x1c>
 8006cb2:	4628      	mov	r0, r5
 8006cb4:	f000 fa06 	bl	80070c4 <__sinit>
 8006cb8:	4b23      	ldr	r3, [pc, #140]	; (8006d48 <_puts_r+0xac>)
 8006cba:	429c      	cmp	r4, r3
 8006cbc:	d117      	bne.n	8006cee <_puts_r+0x52>
 8006cbe:	686c      	ldr	r4, [r5, #4]
 8006cc0:	89a3      	ldrh	r3, [r4, #12]
 8006cc2:	071b      	lsls	r3, r3, #28
 8006cc4:	d51d      	bpl.n	8006d02 <_puts_r+0x66>
 8006cc6:	6923      	ldr	r3, [r4, #16]
 8006cc8:	b1db      	cbz	r3, 8006d02 <_puts_r+0x66>
 8006cca:	3e01      	subs	r6, #1
 8006ccc:	68a3      	ldr	r3, [r4, #8]
 8006cce:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	60a3      	str	r3, [r4, #8]
 8006cd6:	b9e9      	cbnz	r1, 8006d14 <_puts_r+0x78>
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	da2e      	bge.n	8006d3a <_puts_r+0x9e>
 8006cdc:	4622      	mov	r2, r4
 8006cde:	210a      	movs	r1, #10
 8006ce0:	4628      	mov	r0, r5
 8006ce2:	f000 f83f 	bl	8006d64 <__swbuf_r>
 8006ce6:	3001      	adds	r0, #1
 8006ce8:	d011      	beq.n	8006d0e <_puts_r+0x72>
 8006cea:	200a      	movs	r0, #10
 8006cec:	e011      	b.n	8006d12 <_puts_r+0x76>
 8006cee:	4b17      	ldr	r3, [pc, #92]	; (8006d4c <_puts_r+0xb0>)
 8006cf0:	429c      	cmp	r4, r3
 8006cf2:	d101      	bne.n	8006cf8 <_puts_r+0x5c>
 8006cf4:	68ac      	ldr	r4, [r5, #8]
 8006cf6:	e7e3      	b.n	8006cc0 <_puts_r+0x24>
 8006cf8:	4b15      	ldr	r3, [pc, #84]	; (8006d50 <_puts_r+0xb4>)
 8006cfa:	429c      	cmp	r4, r3
 8006cfc:	bf08      	it	eq
 8006cfe:	68ec      	ldreq	r4, [r5, #12]
 8006d00:	e7de      	b.n	8006cc0 <_puts_r+0x24>
 8006d02:	4621      	mov	r1, r4
 8006d04:	4628      	mov	r0, r5
 8006d06:	f000 f87f 	bl	8006e08 <__swsetup_r>
 8006d0a:	2800      	cmp	r0, #0
 8006d0c:	d0dd      	beq.n	8006cca <_puts_r+0x2e>
 8006d0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d12:	bd70      	pop	{r4, r5, r6, pc}
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	da04      	bge.n	8006d22 <_puts_r+0x86>
 8006d18:	69a2      	ldr	r2, [r4, #24]
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	dc06      	bgt.n	8006d2c <_puts_r+0x90>
 8006d1e:	290a      	cmp	r1, #10
 8006d20:	d004      	beq.n	8006d2c <_puts_r+0x90>
 8006d22:	6823      	ldr	r3, [r4, #0]
 8006d24:	1c5a      	adds	r2, r3, #1
 8006d26:	6022      	str	r2, [r4, #0]
 8006d28:	7019      	strb	r1, [r3, #0]
 8006d2a:	e7cf      	b.n	8006ccc <_puts_r+0x30>
 8006d2c:	4622      	mov	r2, r4
 8006d2e:	4628      	mov	r0, r5
 8006d30:	f000 f818 	bl	8006d64 <__swbuf_r>
 8006d34:	3001      	adds	r0, #1
 8006d36:	d1c9      	bne.n	8006ccc <_puts_r+0x30>
 8006d38:	e7e9      	b.n	8006d0e <_puts_r+0x72>
 8006d3a:	6823      	ldr	r3, [r4, #0]
 8006d3c:	200a      	movs	r0, #10
 8006d3e:	1c5a      	adds	r2, r3, #1
 8006d40:	6022      	str	r2, [r4, #0]
 8006d42:	7018      	strb	r0, [r3, #0]
 8006d44:	e7e5      	b.n	8006d12 <_puts_r+0x76>
 8006d46:	bf00      	nop
 8006d48:	08007828 	.word	0x08007828
 8006d4c:	08007848 	.word	0x08007848
 8006d50:	08007808 	.word	0x08007808

08006d54 <puts>:
 8006d54:	4b02      	ldr	r3, [pc, #8]	; (8006d60 <puts+0xc>)
 8006d56:	4601      	mov	r1, r0
 8006d58:	6818      	ldr	r0, [r3, #0]
 8006d5a:	f7ff bf9f 	b.w	8006c9c <_puts_r>
 8006d5e:	bf00      	nop
 8006d60:	20000014 	.word	0x20000014

08006d64 <__swbuf_r>:
 8006d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d66:	460e      	mov	r6, r1
 8006d68:	4614      	mov	r4, r2
 8006d6a:	4605      	mov	r5, r0
 8006d6c:	b118      	cbz	r0, 8006d76 <__swbuf_r+0x12>
 8006d6e:	6983      	ldr	r3, [r0, #24]
 8006d70:	b90b      	cbnz	r3, 8006d76 <__swbuf_r+0x12>
 8006d72:	f000 f9a7 	bl	80070c4 <__sinit>
 8006d76:	4b21      	ldr	r3, [pc, #132]	; (8006dfc <__swbuf_r+0x98>)
 8006d78:	429c      	cmp	r4, r3
 8006d7a:	d12a      	bne.n	8006dd2 <__swbuf_r+0x6e>
 8006d7c:	686c      	ldr	r4, [r5, #4]
 8006d7e:	69a3      	ldr	r3, [r4, #24]
 8006d80:	60a3      	str	r3, [r4, #8]
 8006d82:	89a3      	ldrh	r3, [r4, #12]
 8006d84:	071a      	lsls	r2, r3, #28
 8006d86:	d52e      	bpl.n	8006de6 <__swbuf_r+0x82>
 8006d88:	6923      	ldr	r3, [r4, #16]
 8006d8a:	b363      	cbz	r3, 8006de6 <__swbuf_r+0x82>
 8006d8c:	6923      	ldr	r3, [r4, #16]
 8006d8e:	6820      	ldr	r0, [r4, #0]
 8006d90:	1ac0      	subs	r0, r0, r3
 8006d92:	6963      	ldr	r3, [r4, #20]
 8006d94:	b2f6      	uxtb	r6, r6
 8006d96:	4283      	cmp	r3, r0
 8006d98:	4637      	mov	r7, r6
 8006d9a:	dc04      	bgt.n	8006da6 <__swbuf_r+0x42>
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	4628      	mov	r0, r5
 8006da0:	f000 f926 	bl	8006ff0 <_fflush_r>
 8006da4:	bb28      	cbnz	r0, 8006df2 <__swbuf_r+0x8e>
 8006da6:	68a3      	ldr	r3, [r4, #8]
 8006da8:	3b01      	subs	r3, #1
 8006daa:	60a3      	str	r3, [r4, #8]
 8006dac:	6823      	ldr	r3, [r4, #0]
 8006dae:	1c5a      	adds	r2, r3, #1
 8006db0:	6022      	str	r2, [r4, #0]
 8006db2:	701e      	strb	r6, [r3, #0]
 8006db4:	6963      	ldr	r3, [r4, #20]
 8006db6:	3001      	adds	r0, #1
 8006db8:	4283      	cmp	r3, r0
 8006dba:	d004      	beq.n	8006dc6 <__swbuf_r+0x62>
 8006dbc:	89a3      	ldrh	r3, [r4, #12]
 8006dbe:	07db      	lsls	r3, r3, #31
 8006dc0:	d519      	bpl.n	8006df6 <__swbuf_r+0x92>
 8006dc2:	2e0a      	cmp	r6, #10
 8006dc4:	d117      	bne.n	8006df6 <__swbuf_r+0x92>
 8006dc6:	4621      	mov	r1, r4
 8006dc8:	4628      	mov	r0, r5
 8006dca:	f000 f911 	bl	8006ff0 <_fflush_r>
 8006dce:	b190      	cbz	r0, 8006df6 <__swbuf_r+0x92>
 8006dd0:	e00f      	b.n	8006df2 <__swbuf_r+0x8e>
 8006dd2:	4b0b      	ldr	r3, [pc, #44]	; (8006e00 <__swbuf_r+0x9c>)
 8006dd4:	429c      	cmp	r4, r3
 8006dd6:	d101      	bne.n	8006ddc <__swbuf_r+0x78>
 8006dd8:	68ac      	ldr	r4, [r5, #8]
 8006dda:	e7d0      	b.n	8006d7e <__swbuf_r+0x1a>
 8006ddc:	4b09      	ldr	r3, [pc, #36]	; (8006e04 <__swbuf_r+0xa0>)
 8006dde:	429c      	cmp	r4, r3
 8006de0:	bf08      	it	eq
 8006de2:	68ec      	ldreq	r4, [r5, #12]
 8006de4:	e7cb      	b.n	8006d7e <__swbuf_r+0x1a>
 8006de6:	4621      	mov	r1, r4
 8006de8:	4628      	mov	r0, r5
 8006dea:	f000 f80d 	bl	8006e08 <__swsetup_r>
 8006dee:	2800      	cmp	r0, #0
 8006df0:	d0cc      	beq.n	8006d8c <__swbuf_r+0x28>
 8006df2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006df6:	4638      	mov	r0, r7
 8006df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	08007828 	.word	0x08007828
 8006e00:	08007848 	.word	0x08007848
 8006e04:	08007808 	.word	0x08007808

08006e08 <__swsetup_r>:
 8006e08:	4b32      	ldr	r3, [pc, #200]	; (8006ed4 <__swsetup_r+0xcc>)
 8006e0a:	b570      	push	{r4, r5, r6, lr}
 8006e0c:	681d      	ldr	r5, [r3, #0]
 8006e0e:	4606      	mov	r6, r0
 8006e10:	460c      	mov	r4, r1
 8006e12:	b125      	cbz	r5, 8006e1e <__swsetup_r+0x16>
 8006e14:	69ab      	ldr	r3, [r5, #24]
 8006e16:	b913      	cbnz	r3, 8006e1e <__swsetup_r+0x16>
 8006e18:	4628      	mov	r0, r5
 8006e1a:	f000 f953 	bl	80070c4 <__sinit>
 8006e1e:	4b2e      	ldr	r3, [pc, #184]	; (8006ed8 <__swsetup_r+0xd0>)
 8006e20:	429c      	cmp	r4, r3
 8006e22:	d10f      	bne.n	8006e44 <__swsetup_r+0x3c>
 8006e24:	686c      	ldr	r4, [r5, #4]
 8006e26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	0715      	lsls	r5, r2, #28
 8006e2e:	d42c      	bmi.n	8006e8a <__swsetup_r+0x82>
 8006e30:	06d0      	lsls	r0, r2, #27
 8006e32:	d411      	bmi.n	8006e58 <__swsetup_r+0x50>
 8006e34:	2209      	movs	r2, #9
 8006e36:	6032      	str	r2, [r6, #0]
 8006e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e3c:	81a3      	strh	r3, [r4, #12]
 8006e3e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006e42:	e03e      	b.n	8006ec2 <__swsetup_r+0xba>
 8006e44:	4b25      	ldr	r3, [pc, #148]	; (8006edc <__swsetup_r+0xd4>)
 8006e46:	429c      	cmp	r4, r3
 8006e48:	d101      	bne.n	8006e4e <__swsetup_r+0x46>
 8006e4a:	68ac      	ldr	r4, [r5, #8]
 8006e4c:	e7eb      	b.n	8006e26 <__swsetup_r+0x1e>
 8006e4e:	4b24      	ldr	r3, [pc, #144]	; (8006ee0 <__swsetup_r+0xd8>)
 8006e50:	429c      	cmp	r4, r3
 8006e52:	bf08      	it	eq
 8006e54:	68ec      	ldreq	r4, [r5, #12]
 8006e56:	e7e6      	b.n	8006e26 <__swsetup_r+0x1e>
 8006e58:	0751      	lsls	r1, r2, #29
 8006e5a:	d512      	bpl.n	8006e82 <__swsetup_r+0x7a>
 8006e5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e5e:	b141      	cbz	r1, 8006e72 <__swsetup_r+0x6a>
 8006e60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e64:	4299      	cmp	r1, r3
 8006e66:	d002      	beq.n	8006e6e <__swsetup_r+0x66>
 8006e68:	4630      	mov	r0, r6
 8006e6a:	f000 fa19 	bl	80072a0 <_free_r>
 8006e6e:	2300      	movs	r3, #0
 8006e70:	6363      	str	r3, [r4, #52]	; 0x34
 8006e72:	89a3      	ldrh	r3, [r4, #12]
 8006e74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006e78:	81a3      	strh	r3, [r4, #12]
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	6063      	str	r3, [r4, #4]
 8006e7e:	6923      	ldr	r3, [r4, #16]
 8006e80:	6023      	str	r3, [r4, #0]
 8006e82:	89a3      	ldrh	r3, [r4, #12]
 8006e84:	f043 0308 	orr.w	r3, r3, #8
 8006e88:	81a3      	strh	r3, [r4, #12]
 8006e8a:	6923      	ldr	r3, [r4, #16]
 8006e8c:	b94b      	cbnz	r3, 8006ea2 <__swsetup_r+0x9a>
 8006e8e:	89a3      	ldrh	r3, [r4, #12]
 8006e90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e98:	d003      	beq.n	8006ea2 <__swsetup_r+0x9a>
 8006e9a:	4621      	mov	r1, r4
 8006e9c:	4630      	mov	r0, r6
 8006e9e:	f000 f9bf 	bl	8007220 <__smakebuf_r>
 8006ea2:	89a2      	ldrh	r2, [r4, #12]
 8006ea4:	f012 0301 	ands.w	r3, r2, #1
 8006ea8:	d00c      	beq.n	8006ec4 <__swsetup_r+0xbc>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	60a3      	str	r3, [r4, #8]
 8006eae:	6963      	ldr	r3, [r4, #20]
 8006eb0:	425b      	negs	r3, r3
 8006eb2:	61a3      	str	r3, [r4, #24]
 8006eb4:	6923      	ldr	r3, [r4, #16]
 8006eb6:	b953      	cbnz	r3, 8006ece <__swsetup_r+0xc6>
 8006eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ebc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006ec0:	d1ba      	bne.n	8006e38 <__swsetup_r+0x30>
 8006ec2:	bd70      	pop	{r4, r5, r6, pc}
 8006ec4:	0792      	lsls	r2, r2, #30
 8006ec6:	bf58      	it	pl
 8006ec8:	6963      	ldrpl	r3, [r4, #20]
 8006eca:	60a3      	str	r3, [r4, #8]
 8006ecc:	e7f2      	b.n	8006eb4 <__swsetup_r+0xac>
 8006ece:	2000      	movs	r0, #0
 8006ed0:	e7f7      	b.n	8006ec2 <__swsetup_r+0xba>
 8006ed2:	bf00      	nop
 8006ed4:	20000014 	.word	0x20000014
 8006ed8:	08007828 	.word	0x08007828
 8006edc:	08007848 	.word	0x08007848
 8006ee0:	08007808 	.word	0x08007808

08006ee4 <__sflush_r>:
 8006ee4:	898a      	ldrh	r2, [r1, #12]
 8006ee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006eea:	4605      	mov	r5, r0
 8006eec:	0710      	lsls	r0, r2, #28
 8006eee:	460c      	mov	r4, r1
 8006ef0:	d458      	bmi.n	8006fa4 <__sflush_r+0xc0>
 8006ef2:	684b      	ldr	r3, [r1, #4]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	dc05      	bgt.n	8006f04 <__sflush_r+0x20>
 8006ef8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	dc02      	bgt.n	8006f04 <__sflush_r+0x20>
 8006efe:	2000      	movs	r0, #0
 8006f00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f06:	2e00      	cmp	r6, #0
 8006f08:	d0f9      	beq.n	8006efe <__sflush_r+0x1a>
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f10:	682f      	ldr	r7, [r5, #0]
 8006f12:	6a21      	ldr	r1, [r4, #32]
 8006f14:	602b      	str	r3, [r5, #0]
 8006f16:	d032      	beq.n	8006f7e <__sflush_r+0x9a>
 8006f18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006f1a:	89a3      	ldrh	r3, [r4, #12]
 8006f1c:	075a      	lsls	r2, r3, #29
 8006f1e:	d505      	bpl.n	8006f2c <__sflush_r+0x48>
 8006f20:	6863      	ldr	r3, [r4, #4]
 8006f22:	1ac0      	subs	r0, r0, r3
 8006f24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006f26:	b10b      	cbz	r3, 8006f2c <__sflush_r+0x48>
 8006f28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006f2a:	1ac0      	subs	r0, r0, r3
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	4602      	mov	r2, r0
 8006f30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f32:	6a21      	ldr	r1, [r4, #32]
 8006f34:	4628      	mov	r0, r5
 8006f36:	47b0      	blx	r6
 8006f38:	1c43      	adds	r3, r0, #1
 8006f3a:	89a3      	ldrh	r3, [r4, #12]
 8006f3c:	d106      	bne.n	8006f4c <__sflush_r+0x68>
 8006f3e:	6829      	ldr	r1, [r5, #0]
 8006f40:	291d      	cmp	r1, #29
 8006f42:	d848      	bhi.n	8006fd6 <__sflush_r+0xf2>
 8006f44:	4a29      	ldr	r2, [pc, #164]	; (8006fec <__sflush_r+0x108>)
 8006f46:	40ca      	lsrs	r2, r1
 8006f48:	07d6      	lsls	r6, r2, #31
 8006f4a:	d544      	bpl.n	8006fd6 <__sflush_r+0xf2>
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	6062      	str	r2, [r4, #4]
 8006f50:	04d9      	lsls	r1, r3, #19
 8006f52:	6922      	ldr	r2, [r4, #16]
 8006f54:	6022      	str	r2, [r4, #0]
 8006f56:	d504      	bpl.n	8006f62 <__sflush_r+0x7e>
 8006f58:	1c42      	adds	r2, r0, #1
 8006f5a:	d101      	bne.n	8006f60 <__sflush_r+0x7c>
 8006f5c:	682b      	ldr	r3, [r5, #0]
 8006f5e:	b903      	cbnz	r3, 8006f62 <__sflush_r+0x7e>
 8006f60:	6560      	str	r0, [r4, #84]	; 0x54
 8006f62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f64:	602f      	str	r7, [r5, #0]
 8006f66:	2900      	cmp	r1, #0
 8006f68:	d0c9      	beq.n	8006efe <__sflush_r+0x1a>
 8006f6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006f6e:	4299      	cmp	r1, r3
 8006f70:	d002      	beq.n	8006f78 <__sflush_r+0x94>
 8006f72:	4628      	mov	r0, r5
 8006f74:	f000 f994 	bl	80072a0 <_free_r>
 8006f78:	2000      	movs	r0, #0
 8006f7a:	6360      	str	r0, [r4, #52]	; 0x34
 8006f7c:	e7c0      	b.n	8006f00 <__sflush_r+0x1c>
 8006f7e:	2301      	movs	r3, #1
 8006f80:	4628      	mov	r0, r5
 8006f82:	47b0      	blx	r6
 8006f84:	1c41      	adds	r1, r0, #1
 8006f86:	d1c8      	bne.n	8006f1a <__sflush_r+0x36>
 8006f88:	682b      	ldr	r3, [r5, #0]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d0c5      	beq.n	8006f1a <__sflush_r+0x36>
 8006f8e:	2b1d      	cmp	r3, #29
 8006f90:	d001      	beq.n	8006f96 <__sflush_r+0xb2>
 8006f92:	2b16      	cmp	r3, #22
 8006f94:	d101      	bne.n	8006f9a <__sflush_r+0xb6>
 8006f96:	602f      	str	r7, [r5, #0]
 8006f98:	e7b1      	b.n	8006efe <__sflush_r+0x1a>
 8006f9a:	89a3      	ldrh	r3, [r4, #12]
 8006f9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fa0:	81a3      	strh	r3, [r4, #12]
 8006fa2:	e7ad      	b.n	8006f00 <__sflush_r+0x1c>
 8006fa4:	690f      	ldr	r7, [r1, #16]
 8006fa6:	2f00      	cmp	r7, #0
 8006fa8:	d0a9      	beq.n	8006efe <__sflush_r+0x1a>
 8006faa:	0793      	lsls	r3, r2, #30
 8006fac:	680e      	ldr	r6, [r1, #0]
 8006fae:	bf08      	it	eq
 8006fb0:	694b      	ldreq	r3, [r1, #20]
 8006fb2:	600f      	str	r7, [r1, #0]
 8006fb4:	bf18      	it	ne
 8006fb6:	2300      	movne	r3, #0
 8006fb8:	eba6 0807 	sub.w	r8, r6, r7
 8006fbc:	608b      	str	r3, [r1, #8]
 8006fbe:	f1b8 0f00 	cmp.w	r8, #0
 8006fc2:	dd9c      	ble.n	8006efe <__sflush_r+0x1a>
 8006fc4:	4643      	mov	r3, r8
 8006fc6:	463a      	mov	r2, r7
 8006fc8:	6a21      	ldr	r1, [r4, #32]
 8006fca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006fcc:	4628      	mov	r0, r5
 8006fce:	47b0      	blx	r6
 8006fd0:	2800      	cmp	r0, #0
 8006fd2:	dc06      	bgt.n	8006fe2 <__sflush_r+0xfe>
 8006fd4:	89a3      	ldrh	r3, [r4, #12]
 8006fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fda:	81a3      	strh	r3, [r4, #12]
 8006fdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006fe0:	e78e      	b.n	8006f00 <__sflush_r+0x1c>
 8006fe2:	4407      	add	r7, r0
 8006fe4:	eba8 0800 	sub.w	r8, r8, r0
 8006fe8:	e7e9      	b.n	8006fbe <__sflush_r+0xda>
 8006fea:	bf00      	nop
 8006fec:	20400001 	.word	0x20400001

08006ff0 <_fflush_r>:
 8006ff0:	b538      	push	{r3, r4, r5, lr}
 8006ff2:	690b      	ldr	r3, [r1, #16]
 8006ff4:	4605      	mov	r5, r0
 8006ff6:	460c      	mov	r4, r1
 8006ff8:	b1db      	cbz	r3, 8007032 <_fflush_r+0x42>
 8006ffa:	b118      	cbz	r0, 8007004 <_fflush_r+0x14>
 8006ffc:	6983      	ldr	r3, [r0, #24]
 8006ffe:	b90b      	cbnz	r3, 8007004 <_fflush_r+0x14>
 8007000:	f000 f860 	bl	80070c4 <__sinit>
 8007004:	4b0c      	ldr	r3, [pc, #48]	; (8007038 <_fflush_r+0x48>)
 8007006:	429c      	cmp	r4, r3
 8007008:	d109      	bne.n	800701e <_fflush_r+0x2e>
 800700a:	686c      	ldr	r4, [r5, #4]
 800700c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007010:	b17b      	cbz	r3, 8007032 <_fflush_r+0x42>
 8007012:	4621      	mov	r1, r4
 8007014:	4628      	mov	r0, r5
 8007016:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800701a:	f7ff bf63 	b.w	8006ee4 <__sflush_r>
 800701e:	4b07      	ldr	r3, [pc, #28]	; (800703c <_fflush_r+0x4c>)
 8007020:	429c      	cmp	r4, r3
 8007022:	d101      	bne.n	8007028 <_fflush_r+0x38>
 8007024:	68ac      	ldr	r4, [r5, #8]
 8007026:	e7f1      	b.n	800700c <_fflush_r+0x1c>
 8007028:	4b05      	ldr	r3, [pc, #20]	; (8007040 <_fflush_r+0x50>)
 800702a:	429c      	cmp	r4, r3
 800702c:	bf08      	it	eq
 800702e:	68ec      	ldreq	r4, [r5, #12]
 8007030:	e7ec      	b.n	800700c <_fflush_r+0x1c>
 8007032:	2000      	movs	r0, #0
 8007034:	bd38      	pop	{r3, r4, r5, pc}
 8007036:	bf00      	nop
 8007038:	08007828 	.word	0x08007828
 800703c:	08007848 	.word	0x08007848
 8007040:	08007808 	.word	0x08007808

08007044 <std>:
 8007044:	2300      	movs	r3, #0
 8007046:	b510      	push	{r4, lr}
 8007048:	4604      	mov	r4, r0
 800704a:	e9c0 3300 	strd	r3, r3, [r0]
 800704e:	6083      	str	r3, [r0, #8]
 8007050:	8181      	strh	r1, [r0, #12]
 8007052:	6643      	str	r3, [r0, #100]	; 0x64
 8007054:	81c2      	strh	r2, [r0, #14]
 8007056:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800705a:	6183      	str	r3, [r0, #24]
 800705c:	4619      	mov	r1, r3
 800705e:	2208      	movs	r2, #8
 8007060:	305c      	adds	r0, #92	; 0x5c
 8007062:	f7ff fe13 	bl	8006c8c <memset>
 8007066:	4b05      	ldr	r3, [pc, #20]	; (800707c <std+0x38>)
 8007068:	6263      	str	r3, [r4, #36]	; 0x24
 800706a:	4b05      	ldr	r3, [pc, #20]	; (8007080 <std+0x3c>)
 800706c:	62a3      	str	r3, [r4, #40]	; 0x28
 800706e:	4b05      	ldr	r3, [pc, #20]	; (8007084 <std+0x40>)
 8007070:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007072:	4b05      	ldr	r3, [pc, #20]	; (8007088 <std+0x44>)
 8007074:	6224      	str	r4, [r4, #32]
 8007076:	6323      	str	r3, [r4, #48]	; 0x30
 8007078:	bd10      	pop	{r4, pc}
 800707a:	bf00      	nop
 800707c:	08007411 	.word	0x08007411
 8007080:	08007433 	.word	0x08007433
 8007084:	0800746b 	.word	0x0800746b
 8007088:	0800748f 	.word	0x0800748f

0800708c <_cleanup_r>:
 800708c:	4901      	ldr	r1, [pc, #4]	; (8007094 <_cleanup_r+0x8>)
 800708e:	f000 b885 	b.w	800719c <_fwalk_reent>
 8007092:	bf00      	nop
 8007094:	08006ff1 	.word	0x08006ff1

08007098 <__sfmoreglue>:
 8007098:	b570      	push	{r4, r5, r6, lr}
 800709a:	1e4a      	subs	r2, r1, #1
 800709c:	2568      	movs	r5, #104	; 0x68
 800709e:	4355      	muls	r5, r2
 80070a0:	460e      	mov	r6, r1
 80070a2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80070a6:	f000 f949 	bl	800733c <_malloc_r>
 80070aa:	4604      	mov	r4, r0
 80070ac:	b140      	cbz	r0, 80070c0 <__sfmoreglue+0x28>
 80070ae:	2100      	movs	r1, #0
 80070b0:	e9c0 1600 	strd	r1, r6, [r0]
 80070b4:	300c      	adds	r0, #12
 80070b6:	60a0      	str	r0, [r4, #8]
 80070b8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80070bc:	f7ff fde6 	bl	8006c8c <memset>
 80070c0:	4620      	mov	r0, r4
 80070c2:	bd70      	pop	{r4, r5, r6, pc}

080070c4 <__sinit>:
 80070c4:	6983      	ldr	r3, [r0, #24]
 80070c6:	b510      	push	{r4, lr}
 80070c8:	4604      	mov	r4, r0
 80070ca:	bb33      	cbnz	r3, 800711a <__sinit+0x56>
 80070cc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80070d0:	6503      	str	r3, [r0, #80]	; 0x50
 80070d2:	4b12      	ldr	r3, [pc, #72]	; (800711c <__sinit+0x58>)
 80070d4:	4a12      	ldr	r2, [pc, #72]	; (8007120 <__sinit+0x5c>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	6282      	str	r2, [r0, #40]	; 0x28
 80070da:	4298      	cmp	r0, r3
 80070dc:	bf04      	itt	eq
 80070de:	2301      	moveq	r3, #1
 80070e0:	6183      	streq	r3, [r0, #24]
 80070e2:	f000 f81f 	bl	8007124 <__sfp>
 80070e6:	6060      	str	r0, [r4, #4]
 80070e8:	4620      	mov	r0, r4
 80070ea:	f000 f81b 	bl	8007124 <__sfp>
 80070ee:	60a0      	str	r0, [r4, #8]
 80070f0:	4620      	mov	r0, r4
 80070f2:	f000 f817 	bl	8007124 <__sfp>
 80070f6:	2200      	movs	r2, #0
 80070f8:	60e0      	str	r0, [r4, #12]
 80070fa:	2104      	movs	r1, #4
 80070fc:	6860      	ldr	r0, [r4, #4]
 80070fe:	f7ff ffa1 	bl	8007044 <std>
 8007102:	2201      	movs	r2, #1
 8007104:	2109      	movs	r1, #9
 8007106:	68a0      	ldr	r0, [r4, #8]
 8007108:	f7ff ff9c 	bl	8007044 <std>
 800710c:	2202      	movs	r2, #2
 800710e:	2112      	movs	r1, #18
 8007110:	68e0      	ldr	r0, [r4, #12]
 8007112:	f7ff ff97 	bl	8007044 <std>
 8007116:	2301      	movs	r3, #1
 8007118:	61a3      	str	r3, [r4, #24]
 800711a:	bd10      	pop	{r4, pc}
 800711c:	08007804 	.word	0x08007804
 8007120:	0800708d 	.word	0x0800708d

08007124 <__sfp>:
 8007124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007126:	4b1b      	ldr	r3, [pc, #108]	; (8007194 <__sfp+0x70>)
 8007128:	681e      	ldr	r6, [r3, #0]
 800712a:	69b3      	ldr	r3, [r6, #24]
 800712c:	4607      	mov	r7, r0
 800712e:	b913      	cbnz	r3, 8007136 <__sfp+0x12>
 8007130:	4630      	mov	r0, r6
 8007132:	f7ff ffc7 	bl	80070c4 <__sinit>
 8007136:	3648      	adds	r6, #72	; 0x48
 8007138:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800713c:	3b01      	subs	r3, #1
 800713e:	d503      	bpl.n	8007148 <__sfp+0x24>
 8007140:	6833      	ldr	r3, [r6, #0]
 8007142:	b133      	cbz	r3, 8007152 <__sfp+0x2e>
 8007144:	6836      	ldr	r6, [r6, #0]
 8007146:	e7f7      	b.n	8007138 <__sfp+0x14>
 8007148:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800714c:	b16d      	cbz	r5, 800716a <__sfp+0x46>
 800714e:	3468      	adds	r4, #104	; 0x68
 8007150:	e7f4      	b.n	800713c <__sfp+0x18>
 8007152:	2104      	movs	r1, #4
 8007154:	4638      	mov	r0, r7
 8007156:	f7ff ff9f 	bl	8007098 <__sfmoreglue>
 800715a:	6030      	str	r0, [r6, #0]
 800715c:	2800      	cmp	r0, #0
 800715e:	d1f1      	bne.n	8007144 <__sfp+0x20>
 8007160:	230c      	movs	r3, #12
 8007162:	603b      	str	r3, [r7, #0]
 8007164:	4604      	mov	r4, r0
 8007166:	4620      	mov	r0, r4
 8007168:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800716a:	4b0b      	ldr	r3, [pc, #44]	; (8007198 <__sfp+0x74>)
 800716c:	6665      	str	r5, [r4, #100]	; 0x64
 800716e:	e9c4 5500 	strd	r5, r5, [r4]
 8007172:	60a5      	str	r5, [r4, #8]
 8007174:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007178:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800717c:	2208      	movs	r2, #8
 800717e:	4629      	mov	r1, r5
 8007180:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007184:	f7ff fd82 	bl	8006c8c <memset>
 8007188:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800718c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007190:	e7e9      	b.n	8007166 <__sfp+0x42>
 8007192:	bf00      	nop
 8007194:	08007804 	.word	0x08007804
 8007198:	ffff0001 	.word	0xffff0001

0800719c <_fwalk_reent>:
 800719c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071a0:	4680      	mov	r8, r0
 80071a2:	4689      	mov	r9, r1
 80071a4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80071a8:	2600      	movs	r6, #0
 80071aa:	b914      	cbnz	r4, 80071b2 <_fwalk_reent+0x16>
 80071ac:	4630      	mov	r0, r6
 80071ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071b2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80071b6:	3f01      	subs	r7, #1
 80071b8:	d501      	bpl.n	80071be <_fwalk_reent+0x22>
 80071ba:	6824      	ldr	r4, [r4, #0]
 80071bc:	e7f5      	b.n	80071aa <_fwalk_reent+0xe>
 80071be:	89ab      	ldrh	r3, [r5, #12]
 80071c0:	2b01      	cmp	r3, #1
 80071c2:	d907      	bls.n	80071d4 <_fwalk_reent+0x38>
 80071c4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80071c8:	3301      	adds	r3, #1
 80071ca:	d003      	beq.n	80071d4 <_fwalk_reent+0x38>
 80071cc:	4629      	mov	r1, r5
 80071ce:	4640      	mov	r0, r8
 80071d0:	47c8      	blx	r9
 80071d2:	4306      	orrs	r6, r0
 80071d4:	3568      	adds	r5, #104	; 0x68
 80071d6:	e7ee      	b.n	80071b6 <_fwalk_reent+0x1a>

080071d8 <__swhatbuf_r>:
 80071d8:	b570      	push	{r4, r5, r6, lr}
 80071da:	460e      	mov	r6, r1
 80071dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071e0:	2900      	cmp	r1, #0
 80071e2:	b096      	sub	sp, #88	; 0x58
 80071e4:	4614      	mov	r4, r2
 80071e6:	461d      	mov	r5, r3
 80071e8:	da07      	bge.n	80071fa <__swhatbuf_r+0x22>
 80071ea:	2300      	movs	r3, #0
 80071ec:	602b      	str	r3, [r5, #0]
 80071ee:	89b3      	ldrh	r3, [r6, #12]
 80071f0:	061a      	lsls	r2, r3, #24
 80071f2:	d410      	bmi.n	8007216 <__swhatbuf_r+0x3e>
 80071f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071f8:	e00e      	b.n	8007218 <__swhatbuf_r+0x40>
 80071fa:	466a      	mov	r2, sp
 80071fc:	f000 f96e 	bl	80074dc <_fstat_r>
 8007200:	2800      	cmp	r0, #0
 8007202:	dbf2      	blt.n	80071ea <__swhatbuf_r+0x12>
 8007204:	9a01      	ldr	r2, [sp, #4]
 8007206:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800720a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800720e:	425a      	negs	r2, r3
 8007210:	415a      	adcs	r2, r3
 8007212:	602a      	str	r2, [r5, #0]
 8007214:	e7ee      	b.n	80071f4 <__swhatbuf_r+0x1c>
 8007216:	2340      	movs	r3, #64	; 0x40
 8007218:	2000      	movs	r0, #0
 800721a:	6023      	str	r3, [r4, #0]
 800721c:	b016      	add	sp, #88	; 0x58
 800721e:	bd70      	pop	{r4, r5, r6, pc}

08007220 <__smakebuf_r>:
 8007220:	898b      	ldrh	r3, [r1, #12]
 8007222:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007224:	079d      	lsls	r5, r3, #30
 8007226:	4606      	mov	r6, r0
 8007228:	460c      	mov	r4, r1
 800722a:	d507      	bpl.n	800723c <__smakebuf_r+0x1c>
 800722c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007230:	6023      	str	r3, [r4, #0]
 8007232:	6123      	str	r3, [r4, #16]
 8007234:	2301      	movs	r3, #1
 8007236:	6163      	str	r3, [r4, #20]
 8007238:	b002      	add	sp, #8
 800723a:	bd70      	pop	{r4, r5, r6, pc}
 800723c:	ab01      	add	r3, sp, #4
 800723e:	466a      	mov	r2, sp
 8007240:	f7ff ffca 	bl	80071d8 <__swhatbuf_r>
 8007244:	9900      	ldr	r1, [sp, #0]
 8007246:	4605      	mov	r5, r0
 8007248:	4630      	mov	r0, r6
 800724a:	f000 f877 	bl	800733c <_malloc_r>
 800724e:	b948      	cbnz	r0, 8007264 <__smakebuf_r+0x44>
 8007250:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007254:	059a      	lsls	r2, r3, #22
 8007256:	d4ef      	bmi.n	8007238 <__smakebuf_r+0x18>
 8007258:	f023 0303 	bic.w	r3, r3, #3
 800725c:	f043 0302 	orr.w	r3, r3, #2
 8007260:	81a3      	strh	r3, [r4, #12]
 8007262:	e7e3      	b.n	800722c <__smakebuf_r+0xc>
 8007264:	4b0d      	ldr	r3, [pc, #52]	; (800729c <__smakebuf_r+0x7c>)
 8007266:	62b3      	str	r3, [r6, #40]	; 0x28
 8007268:	89a3      	ldrh	r3, [r4, #12]
 800726a:	6020      	str	r0, [r4, #0]
 800726c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007270:	81a3      	strh	r3, [r4, #12]
 8007272:	9b00      	ldr	r3, [sp, #0]
 8007274:	6163      	str	r3, [r4, #20]
 8007276:	9b01      	ldr	r3, [sp, #4]
 8007278:	6120      	str	r0, [r4, #16]
 800727a:	b15b      	cbz	r3, 8007294 <__smakebuf_r+0x74>
 800727c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007280:	4630      	mov	r0, r6
 8007282:	f000 f93d 	bl	8007500 <_isatty_r>
 8007286:	b128      	cbz	r0, 8007294 <__smakebuf_r+0x74>
 8007288:	89a3      	ldrh	r3, [r4, #12]
 800728a:	f023 0303 	bic.w	r3, r3, #3
 800728e:	f043 0301 	orr.w	r3, r3, #1
 8007292:	81a3      	strh	r3, [r4, #12]
 8007294:	89a3      	ldrh	r3, [r4, #12]
 8007296:	431d      	orrs	r5, r3
 8007298:	81a5      	strh	r5, [r4, #12]
 800729a:	e7cd      	b.n	8007238 <__smakebuf_r+0x18>
 800729c:	0800708d 	.word	0x0800708d

080072a0 <_free_r>:
 80072a0:	b538      	push	{r3, r4, r5, lr}
 80072a2:	4605      	mov	r5, r0
 80072a4:	2900      	cmp	r1, #0
 80072a6:	d045      	beq.n	8007334 <_free_r+0x94>
 80072a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072ac:	1f0c      	subs	r4, r1, #4
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	bfb8      	it	lt
 80072b2:	18e4      	addlt	r4, r4, r3
 80072b4:	f000 f946 	bl	8007544 <__malloc_lock>
 80072b8:	4a1f      	ldr	r2, [pc, #124]	; (8007338 <_free_r+0x98>)
 80072ba:	6813      	ldr	r3, [r2, #0]
 80072bc:	4610      	mov	r0, r2
 80072be:	b933      	cbnz	r3, 80072ce <_free_r+0x2e>
 80072c0:	6063      	str	r3, [r4, #4]
 80072c2:	6014      	str	r4, [r2, #0]
 80072c4:	4628      	mov	r0, r5
 80072c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072ca:	f000 b93c 	b.w	8007546 <__malloc_unlock>
 80072ce:	42a3      	cmp	r3, r4
 80072d0:	d90c      	bls.n	80072ec <_free_r+0x4c>
 80072d2:	6821      	ldr	r1, [r4, #0]
 80072d4:	1862      	adds	r2, r4, r1
 80072d6:	4293      	cmp	r3, r2
 80072d8:	bf04      	itt	eq
 80072da:	681a      	ldreq	r2, [r3, #0]
 80072dc:	685b      	ldreq	r3, [r3, #4]
 80072de:	6063      	str	r3, [r4, #4]
 80072e0:	bf04      	itt	eq
 80072e2:	1852      	addeq	r2, r2, r1
 80072e4:	6022      	streq	r2, [r4, #0]
 80072e6:	6004      	str	r4, [r0, #0]
 80072e8:	e7ec      	b.n	80072c4 <_free_r+0x24>
 80072ea:	4613      	mov	r3, r2
 80072ec:	685a      	ldr	r2, [r3, #4]
 80072ee:	b10a      	cbz	r2, 80072f4 <_free_r+0x54>
 80072f0:	42a2      	cmp	r2, r4
 80072f2:	d9fa      	bls.n	80072ea <_free_r+0x4a>
 80072f4:	6819      	ldr	r1, [r3, #0]
 80072f6:	1858      	adds	r0, r3, r1
 80072f8:	42a0      	cmp	r0, r4
 80072fa:	d10b      	bne.n	8007314 <_free_r+0x74>
 80072fc:	6820      	ldr	r0, [r4, #0]
 80072fe:	4401      	add	r1, r0
 8007300:	1858      	adds	r0, r3, r1
 8007302:	4282      	cmp	r2, r0
 8007304:	6019      	str	r1, [r3, #0]
 8007306:	d1dd      	bne.n	80072c4 <_free_r+0x24>
 8007308:	6810      	ldr	r0, [r2, #0]
 800730a:	6852      	ldr	r2, [r2, #4]
 800730c:	605a      	str	r2, [r3, #4]
 800730e:	4401      	add	r1, r0
 8007310:	6019      	str	r1, [r3, #0]
 8007312:	e7d7      	b.n	80072c4 <_free_r+0x24>
 8007314:	d902      	bls.n	800731c <_free_r+0x7c>
 8007316:	230c      	movs	r3, #12
 8007318:	602b      	str	r3, [r5, #0]
 800731a:	e7d3      	b.n	80072c4 <_free_r+0x24>
 800731c:	6820      	ldr	r0, [r4, #0]
 800731e:	1821      	adds	r1, r4, r0
 8007320:	428a      	cmp	r2, r1
 8007322:	bf04      	itt	eq
 8007324:	6811      	ldreq	r1, [r2, #0]
 8007326:	6852      	ldreq	r2, [r2, #4]
 8007328:	6062      	str	r2, [r4, #4]
 800732a:	bf04      	itt	eq
 800732c:	1809      	addeq	r1, r1, r0
 800732e:	6021      	streq	r1, [r4, #0]
 8007330:	605c      	str	r4, [r3, #4]
 8007332:	e7c7      	b.n	80072c4 <_free_r+0x24>
 8007334:	bd38      	pop	{r3, r4, r5, pc}
 8007336:	bf00      	nop
 8007338:	200000a0 	.word	0x200000a0

0800733c <_malloc_r>:
 800733c:	b570      	push	{r4, r5, r6, lr}
 800733e:	1ccd      	adds	r5, r1, #3
 8007340:	f025 0503 	bic.w	r5, r5, #3
 8007344:	3508      	adds	r5, #8
 8007346:	2d0c      	cmp	r5, #12
 8007348:	bf38      	it	cc
 800734a:	250c      	movcc	r5, #12
 800734c:	2d00      	cmp	r5, #0
 800734e:	4606      	mov	r6, r0
 8007350:	db01      	blt.n	8007356 <_malloc_r+0x1a>
 8007352:	42a9      	cmp	r1, r5
 8007354:	d903      	bls.n	800735e <_malloc_r+0x22>
 8007356:	230c      	movs	r3, #12
 8007358:	6033      	str	r3, [r6, #0]
 800735a:	2000      	movs	r0, #0
 800735c:	bd70      	pop	{r4, r5, r6, pc}
 800735e:	f000 f8f1 	bl	8007544 <__malloc_lock>
 8007362:	4a21      	ldr	r2, [pc, #132]	; (80073e8 <_malloc_r+0xac>)
 8007364:	6814      	ldr	r4, [r2, #0]
 8007366:	4621      	mov	r1, r4
 8007368:	b991      	cbnz	r1, 8007390 <_malloc_r+0x54>
 800736a:	4c20      	ldr	r4, [pc, #128]	; (80073ec <_malloc_r+0xb0>)
 800736c:	6823      	ldr	r3, [r4, #0]
 800736e:	b91b      	cbnz	r3, 8007378 <_malloc_r+0x3c>
 8007370:	4630      	mov	r0, r6
 8007372:	f000 f83d 	bl	80073f0 <_sbrk_r>
 8007376:	6020      	str	r0, [r4, #0]
 8007378:	4629      	mov	r1, r5
 800737a:	4630      	mov	r0, r6
 800737c:	f000 f838 	bl	80073f0 <_sbrk_r>
 8007380:	1c43      	adds	r3, r0, #1
 8007382:	d124      	bne.n	80073ce <_malloc_r+0x92>
 8007384:	230c      	movs	r3, #12
 8007386:	6033      	str	r3, [r6, #0]
 8007388:	4630      	mov	r0, r6
 800738a:	f000 f8dc 	bl	8007546 <__malloc_unlock>
 800738e:	e7e4      	b.n	800735a <_malloc_r+0x1e>
 8007390:	680b      	ldr	r3, [r1, #0]
 8007392:	1b5b      	subs	r3, r3, r5
 8007394:	d418      	bmi.n	80073c8 <_malloc_r+0x8c>
 8007396:	2b0b      	cmp	r3, #11
 8007398:	d90f      	bls.n	80073ba <_malloc_r+0x7e>
 800739a:	600b      	str	r3, [r1, #0]
 800739c:	50cd      	str	r5, [r1, r3]
 800739e:	18cc      	adds	r4, r1, r3
 80073a0:	4630      	mov	r0, r6
 80073a2:	f000 f8d0 	bl	8007546 <__malloc_unlock>
 80073a6:	f104 000b 	add.w	r0, r4, #11
 80073aa:	1d23      	adds	r3, r4, #4
 80073ac:	f020 0007 	bic.w	r0, r0, #7
 80073b0:	1ac3      	subs	r3, r0, r3
 80073b2:	d0d3      	beq.n	800735c <_malloc_r+0x20>
 80073b4:	425a      	negs	r2, r3
 80073b6:	50e2      	str	r2, [r4, r3]
 80073b8:	e7d0      	b.n	800735c <_malloc_r+0x20>
 80073ba:	428c      	cmp	r4, r1
 80073bc:	684b      	ldr	r3, [r1, #4]
 80073be:	bf16      	itet	ne
 80073c0:	6063      	strne	r3, [r4, #4]
 80073c2:	6013      	streq	r3, [r2, #0]
 80073c4:	460c      	movne	r4, r1
 80073c6:	e7eb      	b.n	80073a0 <_malloc_r+0x64>
 80073c8:	460c      	mov	r4, r1
 80073ca:	6849      	ldr	r1, [r1, #4]
 80073cc:	e7cc      	b.n	8007368 <_malloc_r+0x2c>
 80073ce:	1cc4      	adds	r4, r0, #3
 80073d0:	f024 0403 	bic.w	r4, r4, #3
 80073d4:	42a0      	cmp	r0, r4
 80073d6:	d005      	beq.n	80073e4 <_malloc_r+0xa8>
 80073d8:	1a21      	subs	r1, r4, r0
 80073da:	4630      	mov	r0, r6
 80073dc:	f000 f808 	bl	80073f0 <_sbrk_r>
 80073e0:	3001      	adds	r0, #1
 80073e2:	d0cf      	beq.n	8007384 <_malloc_r+0x48>
 80073e4:	6025      	str	r5, [r4, #0]
 80073e6:	e7db      	b.n	80073a0 <_malloc_r+0x64>
 80073e8:	200000a0 	.word	0x200000a0
 80073ec:	200000a4 	.word	0x200000a4

080073f0 <_sbrk_r>:
 80073f0:	b538      	push	{r3, r4, r5, lr}
 80073f2:	4c06      	ldr	r4, [pc, #24]	; (800740c <_sbrk_r+0x1c>)
 80073f4:	2300      	movs	r3, #0
 80073f6:	4605      	mov	r5, r0
 80073f8:	4608      	mov	r0, r1
 80073fa:	6023      	str	r3, [r4, #0]
 80073fc:	f7f9 fdc6 	bl	8000f8c <_sbrk>
 8007400:	1c43      	adds	r3, r0, #1
 8007402:	d102      	bne.n	800740a <_sbrk_r+0x1a>
 8007404:	6823      	ldr	r3, [r4, #0]
 8007406:	b103      	cbz	r3, 800740a <_sbrk_r+0x1a>
 8007408:	602b      	str	r3, [r5, #0]
 800740a:	bd38      	pop	{r3, r4, r5, pc}
 800740c:	2000036c 	.word	0x2000036c

08007410 <__sread>:
 8007410:	b510      	push	{r4, lr}
 8007412:	460c      	mov	r4, r1
 8007414:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007418:	f000 f896 	bl	8007548 <_read_r>
 800741c:	2800      	cmp	r0, #0
 800741e:	bfab      	itete	ge
 8007420:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007422:	89a3      	ldrhlt	r3, [r4, #12]
 8007424:	181b      	addge	r3, r3, r0
 8007426:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800742a:	bfac      	ite	ge
 800742c:	6563      	strge	r3, [r4, #84]	; 0x54
 800742e:	81a3      	strhlt	r3, [r4, #12]
 8007430:	bd10      	pop	{r4, pc}

08007432 <__swrite>:
 8007432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007436:	461f      	mov	r7, r3
 8007438:	898b      	ldrh	r3, [r1, #12]
 800743a:	05db      	lsls	r3, r3, #23
 800743c:	4605      	mov	r5, r0
 800743e:	460c      	mov	r4, r1
 8007440:	4616      	mov	r6, r2
 8007442:	d505      	bpl.n	8007450 <__swrite+0x1e>
 8007444:	2302      	movs	r3, #2
 8007446:	2200      	movs	r2, #0
 8007448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800744c:	f000 f868 	bl	8007520 <_lseek_r>
 8007450:	89a3      	ldrh	r3, [r4, #12]
 8007452:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007456:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800745a:	81a3      	strh	r3, [r4, #12]
 800745c:	4632      	mov	r2, r6
 800745e:	463b      	mov	r3, r7
 8007460:	4628      	mov	r0, r5
 8007462:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007466:	f000 b817 	b.w	8007498 <_write_r>

0800746a <__sseek>:
 800746a:	b510      	push	{r4, lr}
 800746c:	460c      	mov	r4, r1
 800746e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007472:	f000 f855 	bl	8007520 <_lseek_r>
 8007476:	1c43      	adds	r3, r0, #1
 8007478:	89a3      	ldrh	r3, [r4, #12]
 800747a:	bf15      	itete	ne
 800747c:	6560      	strne	r0, [r4, #84]	; 0x54
 800747e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007482:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007486:	81a3      	strheq	r3, [r4, #12]
 8007488:	bf18      	it	ne
 800748a:	81a3      	strhne	r3, [r4, #12]
 800748c:	bd10      	pop	{r4, pc}

0800748e <__sclose>:
 800748e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007492:	f000 b813 	b.w	80074bc <_close_r>
	...

08007498 <_write_r>:
 8007498:	b538      	push	{r3, r4, r5, lr}
 800749a:	4c07      	ldr	r4, [pc, #28]	; (80074b8 <_write_r+0x20>)
 800749c:	4605      	mov	r5, r0
 800749e:	4608      	mov	r0, r1
 80074a0:	4611      	mov	r1, r2
 80074a2:	2200      	movs	r2, #0
 80074a4:	6022      	str	r2, [r4, #0]
 80074a6:	461a      	mov	r2, r3
 80074a8:	f7f9 fa3f 	bl	800092a <_write>
 80074ac:	1c43      	adds	r3, r0, #1
 80074ae:	d102      	bne.n	80074b6 <_write_r+0x1e>
 80074b0:	6823      	ldr	r3, [r4, #0]
 80074b2:	b103      	cbz	r3, 80074b6 <_write_r+0x1e>
 80074b4:	602b      	str	r3, [r5, #0]
 80074b6:	bd38      	pop	{r3, r4, r5, pc}
 80074b8:	2000036c 	.word	0x2000036c

080074bc <_close_r>:
 80074bc:	b538      	push	{r3, r4, r5, lr}
 80074be:	4c06      	ldr	r4, [pc, #24]	; (80074d8 <_close_r+0x1c>)
 80074c0:	2300      	movs	r3, #0
 80074c2:	4605      	mov	r5, r0
 80074c4:	4608      	mov	r0, r1
 80074c6:	6023      	str	r3, [r4, #0]
 80074c8:	f7f9 fd2b 	bl	8000f22 <_close>
 80074cc:	1c43      	adds	r3, r0, #1
 80074ce:	d102      	bne.n	80074d6 <_close_r+0x1a>
 80074d0:	6823      	ldr	r3, [r4, #0]
 80074d2:	b103      	cbz	r3, 80074d6 <_close_r+0x1a>
 80074d4:	602b      	str	r3, [r5, #0]
 80074d6:	bd38      	pop	{r3, r4, r5, pc}
 80074d8:	2000036c 	.word	0x2000036c

080074dc <_fstat_r>:
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	4c07      	ldr	r4, [pc, #28]	; (80074fc <_fstat_r+0x20>)
 80074e0:	2300      	movs	r3, #0
 80074e2:	4605      	mov	r5, r0
 80074e4:	4608      	mov	r0, r1
 80074e6:	4611      	mov	r1, r2
 80074e8:	6023      	str	r3, [r4, #0]
 80074ea:	f7f9 fd26 	bl	8000f3a <_fstat>
 80074ee:	1c43      	adds	r3, r0, #1
 80074f0:	d102      	bne.n	80074f8 <_fstat_r+0x1c>
 80074f2:	6823      	ldr	r3, [r4, #0]
 80074f4:	b103      	cbz	r3, 80074f8 <_fstat_r+0x1c>
 80074f6:	602b      	str	r3, [r5, #0]
 80074f8:	bd38      	pop	{r3, r4, r5, pc}
 80074fa:	bf00      	nop
 80074fc:	2000036c 	.word	0x2000036c

08007500 <_isatty_r>:
 8007500:	b538      	push	{r3, r4, r5, lr}
 8007502:	4c06      	ldr	r4, [pc, #24]	; (800751c <_isatty_r+0x1c>)
 8007504:	2300      	movs	r3, #0
 8007506:	4605      	mov	r5, r0
 8007508:	4608      	mov	r0, r1
 800750a:	6023      	str	r3, [r4, #0]
 800750c:	f7f9 fd25 	bl	8000f5a <_isatty>
 8007510:	1c43      	adds	r3, r0, #1
 8007512:	d102      	bne.n	800751a <_isatty_r+0x1a>
 8007514:	6823      	ldr	r3, [r4, #0]
 8007516:	b103      	cbz	r3, 800751a <_isatty_r+0x1a>
 8007518:	602b      	str	r3, [r5, #0]
 800751a:	bd38      	pop	{r3, r4, r5, pc}
 800751c:	2000036c 	.word	0x2000036c

08007520 <_lseek_r>:
 8007520:	b538      	push	{r3, r4, r5, lr}
 8007522:	4c07      	ldr	r4, [pc, #28]	; (8007540 <_lseek_r+0x20>)
 8007524:	4605      	mov	r5, r0
 8007526:	4608      	mov	r0, r1
 8007528:	4611      	mov	r1, r2
 800752a:	2200      	movs	r2, #0
 800752c:	6022      	str	r2, [r4, #0]
 800752e:	461a      	mov	r2, r3
 8007530:	f7f9 fd1e 	bl	8000f70 <_lseek>
 8007534:	1c43      	adds	r3, r0, #1
 8007536:	d102      	bne.n	800753e <_lseek_r+0x1e>
 8007538:	6823      	ldr	r3, [r4, #0]
 800753a:	b103      	cbz	r3, 800753e <_lseek_r+0x1e>
 800753c:	602b      	str	r3, [r5, #0]
 800753e:	bd38      	pop	{r3, r4, r5, pc}
 8007540:	2000036c 	.word	0x2000036c

08007544 <__malloc_lock>:
 8007544:	4770      	bx	lr

08007546 <__malloc_unlock>:
 8007546:	4770      	bx	lr

08007548 <_read_r>:
 8007548:	b538      	push	{r3, r4, r5, lr}
 800754a:	4c07      	ldr	r4, [pc, #28]	; (8007568 <_read_r+0x20>)
 800754c:	4605      	mov	r5, r0
 800754e:	4608      	mov	r0, r1
 8007550:	4611      	mov	r1, r2
 8007552:	2200      	movs	r2, #0
 8007554:	6022      	str	r2, [r4, #0]
 8007556:	461a      	mov	r2, r3
 8007558:	f7f9 fcc6 	bl	8000ee8 <_read>
 800755c:	1c43      	adds	r3, r0, #1
 800755e:	d102      	bne.n	8007566 <_read_r+0x1e>
 8007560:	6823      	ldr	r3, [r4, #0]
 8007562:	b103      	cbz	r3, 8007566 <_read_r+0x1e>
 8007564:	602b      	str	r3, [r5, #0]
 8007566:	bd38      	pop	{r3, r4, r5, pc}
 8007568:	2000036c 	.word	0x2000036c

0800756c <_init>:
 800756c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756e:	bf00      	nop
 8007570:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007572:	bc08      	pop	{r3}
 8007574:	469e      	mov	lr, r3
 8007576:	4770      	bx	lr

08007578 <_fini>:
 8007578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757a:	bf00      	nop
 800757c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800757e:	bc08      	pop	{r3}
 8007580:	469e      	mov	lr, r3
 8007582:	4770      	bx	lr
