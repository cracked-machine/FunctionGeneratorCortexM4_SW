
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e500  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000990  0800e6e0  0800e6e0  0001e6e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f070  0800f070  000213e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800f070  0800f070  000213e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800f070  0800f070  000213e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f070  0800f070  0001f070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f074  0800f074  0001f074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000013e4  20000000  0800f078  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000049c  200013e4  0801045c  000213e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001880  0801045c  00021880  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000213e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002bbdb  00000000  00000000  00021414  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005b5a  00000000  00000000  0004cfef  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001e80  00000000  00000000  00052b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001b20  00000000  00000000  000549d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000307a3  00000000  00000000  000564f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000219c1  00000000  00000000  00086c93  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00124b65  00000000  00000000  000a8654  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001cd1b9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088a0  00000000  00000000  001cd234  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200013e4 	.word	0x200013e4
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e6c8 	.word	0x0800e6c8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200013e8 	.word	0x200013e8
 800021c:	0800e6c8 	.word	0x0800e6c8

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000bfc:	f00a fb74 	bl	800b2e8 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000c00:	2003      	movs	r0, #3
 8000c02:	f00a ff61 	bl	800bac8 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000c06:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c0a:	f00a fd75 	bl	800b6f8 <ILI9341_Fill_Screen>

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 8000c1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	2301      	movs	r3, #1
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	2300      	movs	r3, #0
 8000c26:	220a      	movs	r2, #10
 8000c28:	210a      	movs	r1, #10
 8000c2a:	4807      	ldr	r0, [pc, #28]	; (8000c48 <DM_PostInit+0x34>)
 8000c2c:	f00a fb0a 	bl	800b244 <ILI9341_Draw_Text>
	  HAL_Delay(500);
 8000c30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c34:	f004 fdf8 	bl	8005828 <HAL_Delay>

	  DM_RefreshBackgroundLayout();
 8000c38:	f000 fc2c 	bl	8001494 <DM_RefreshBackgroundLayout>
	  printf("Init Completed\n");
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <DM_PostInit+0x38>)
 8000c3e:	f00b fdeb 	bl	800c818 <puts>
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	0800e6e0 	.word	0x0800e6e0
 8000c4c:	0800e6f0 	.word	0x0800e6f0

08000c50 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b091      	sub	sp, #68	; 0x44
 8000c54:	af02      	add	r7, sp, #8
	char out_hertz[13] = "";
 8000c56:	2300      	movs	r3, #0
 8000c58:	61fb      	str	r3, [r7, #28]
 8000c5a:	f107 0320 	add.w	r3, r7, #32
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	721a      	strb	r2, [r3, #8]
	uint8_t out_hertz_x = 70;
 8000c66:	2346      	movs	r3, #70	; 0x46
 8000c68:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t out_hertz_y = 50;
 8000c6c:	2332      	movs	r3, #50	; 0x32
 8000c6e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	char out_decibels[8] = "";
 8000c72:	2300      	movs	r3, #0
 8000c74:	617b      	str	r3, [r7, #20]
 8000c76:	2300      	movs	r3, #0
 8000c78:	61bb      	str	r3, [r7, #24]
	uint8_t out_decibels_x = 70;
 8000c7a:	2346      	movs	r3, #70	; 0x46
 8000c7c:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
	uint8_t out_decibels_y = 80;
 8000c80:	2350      	movs	r3, #80	; 0x50
 8000c82:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30

	float volts_per_thou = 0.00075;
 8000c86:	4b6c      	ldr	r3, [pc, #432]	; (8000e38 <DM_DisplayFormattedOutput+0x1e8>)
 8000c88:	62fb      	str	r3, [r7, #44]	; 0x2c
	char out_dcvolts[10] = "";
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	60bb      	str	r3, [r7, #8]
 8000c8e:	f107 030c 	add.w	r3, r7, #12
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
 8000c96:	809a      	strh	r2, [r3, #4]
	uint8_t out_dcvolts_x = 70;
 8000c98:	2346      	movs	r3, #70	; 0x46
 8000c9a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	uint8_t out_dcvolts_y = 110;
 8000c9e:	236e      	movs	r3, #110	; 0x6e
 8000ca0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), "%4.2f Hz", SM_GetOutputInHertz());
 8000ca4:	f002 ff1e 	bl	8003ae4 <SM_GetOutputInHertz>
 8000ca8:	ee10 3a10 	vmov	r3, s0
 8000cac:	4618      	mov	r0, r3
 8000cae:	f7ff fc73 	bl	8000598 <__aeabi_f2d>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	460c      	mov	r4, r1
 8000cb6:	f107 001c 	add.w	r0, r7, #28
 8000cba:	e9cd 3400 	strd	r3, r4, [sp]
 8000cbe:	4a5f      	ldr	r2, [pc, #380]	; (8000e3c <DM_DisplayFormattedOutput+0x1ec>)
 8000cc0:	210d      	movs	r1, #13
 8000cc2:	f00b fdb1 	bl	800c828 <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, BLACK, 3, WHITE);
 8000cc6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000cca:	b299      	uxth	r1, r3
 8000ccc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	f107 001c 	add.w	r0, r7, #28
 8000cd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cda:	9301      	str	r3, [sp, #4]
 8000cdc:	2303      	movs	r3, #3
 8000cde:	9300      	str	r3, [sp, #0]
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	f00a faaf 	bl	800b244 <ILI9341_Draw_Text>

	// display output in decibels
	if(GO_GetGainInDecibels(GO_GetOutputGain()) < 0)
 8000ce6:	f002 fed5 	bl	8003a94 <GO_GetOutputGain>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4618      	mov	r0, r3
 8000cee:	f002 fdd3 	bl	8003898 <GO_GetGainInDecibels>
 8000cf2:	4603      	mov	r3, r0
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	da06      	bge.n	8000d06 <DM_DisplayFormattedOutput+0xb6>
		snprintf(out_decibels, sizeof(out_decibels), "AMP OFF");
 8000cf8:	4a51      	ldr	r2, [pc, #324]	; (8000e40 <DM_DisplayFormattedOutput+0x1f0>)
 8000cfa:	f107 0314 	add.w	r3, r7, #20
 8000cfe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000d02:	e883 0003 	stmia.w	r3, {r0, r1}
	if(GO_GetGainInDecibels(GO_GetOutputGain()) == 0)
 8000d06:	f002 fec5 	bl	8003a94 <GO_GetOutputGain>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f002 fdc3 	bl	8003898 <GO_GetGainInDecibels>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d10c      	bne.n	8000d32 <DM_DisplayFormattedOutput+0xe2>
		snprintf(out_decibels, sizeof(out_decibels), "  %2d dB", GO_GetGainInDecibels(GO_GetOutputGain()));
 8000d18:	f002 febc 	bl	8003a94 <GO_GetOutputGain>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	4618      	mov	r0, r3
 8000d20:	f002 fdba 	bl	8003898 <GO_GetGainInDecibels>
 8000d24:	4603      	mov	r3, r0
 8000d26:	f107 0014 	add.w	r0, r7, #20
 8000d2a:	4a46      	ldr	r2, [pc, #280]	; (8000e44 <DM_DisplayFormattedOutput+0x1f4>)
 8000d2c:	2108      	movs	r1, #8
 8000d2e:	f00b fd7b 	bl	800c828 <sniprintf>
	if(GO_GetGainInDecibels(GO_GetOutputGain()) > 0)
 8000d32:	f002 feaf 	bl	8003a94 <GO_GetOutputGain>
 8000d36:	4603      	mov	r3, r0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f002 fdad 	bl	8003898 <GO_GetGainInDecibels>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	dd0c      	ble.n	8000d5e <DM_DisplayFormattedOutput+0x10e>
		snprintf(out_decibels, sizeof(out_decibels), " +%2d dB", GO_GetGainInDecibels(GO_GetOutputGain()));
 8000d44:	f002 fea6 	bl	8003a94 <GO_GetOutputGain>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f002 fda4 	bl	8003898 <GO_GetGainInDecibels>
 8000d50:	4603      	mov	r3, r0
 8000d52:	f107 0014 	add.w	r0, r7, #20
 8000d56:	4a3c      	ldr	r2, [pc, #240]	; (8000e48 <DM_DisplayFormattedOutput+0x1f8>)
 8000d58:	2108      	movs	r1, #8
 8000d5a:	f00b fd65 	bl	800c828 <sniprintf>

	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, BLACK, 3, WHITE);
 8000d5e:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 8000d62:	b299      	uxth	r1, r3
 8000d64:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000d68:	b29a      	uxth	r2, r3
 8000d6a:	f107 0014 	add.w	r0, r7, #20
 8000d6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d72:	9301      	str	r3, [sp, #4]
 8000d74:	2303      	movs	r3, #3
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f00a fa63 	bl	800b244 <ILI9341_Draw_Text>

	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8000d7e:	f002 fa81 	bl	8003284 <BO_GetOutputBias>
 8000d82:	4603      	mov	r3, r0
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d103      	bne.n	8000d90 <DM_DisplayFormattedOutput+0x140>
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8000d8e:	e00b      	b.n	8000da8 <DM_DisplayFormattedOutput+0x158>
 8000d90:	f002 fa78 	bl	8003284 <BO_GetOutputBias>
 8000d94:	ee07 0a90 	vmov	s15, r0
 8000d98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000d9c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8000da0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000da4:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%1.4f v", dc_volts);
 8000da8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000daa:	f7ff fbf5 	bl	8000598 <__aeabi_f2d>
 8000dae:	4603      	mov	r3, r0
 8000db0:	460c      	mov	r4, r1
 8000db2:	f107 0008 	add.w	r0, r7, #8
 8000db6:	e9cd 3400 	strd	r3, r4, [sp]
 8000dba:	4a24      	ldr	r2, [pc, #144]	; (8000e4c <DM_DisplayFormattedOutput+0x1fc>)
 8000dbc:	210a      	movs	r1, #10
 8000dbe:	f00b fd33 	bl	800c828 <sniprintf>
	//if(DM_AddDigitPadding(dc_volts, out_dcvolts, sizeof(out_dcvolts)) == 0)
	//{
		if(BO_GetBiasPolarity())
 8000dc2:	f002 fa0d 	bl	80031e0 <BO_GetBiasPolarity>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d018      	beq.n	8000dfe <DM_DisplayFormattedOutput+0x1ae>
		{
			char symbol[2] = "+\0";
 8000dcc:	4b20      	ldr	r3, [pc, #128]	; (8000e50 <DM_DisplayFormattedOutput+0x200>)
 8000dce:	881b      	ldrh	r3, [r3, #0]
 8000dd0:	80bb      	strh	r3, [r7, #4]
			ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
 8000dd2:	f107 0208 	add.w	r2, r7, #8
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f00b fd58 	bl	800c890 <strcat>
 8000de0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000de4:	b299      	uxth	r1, r3
 8000de6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000dea:	b29a      	uxth	r2, r3
 8000dec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000df0:	9301      	str	r3, [sp, #4]
 8000df2:	2303      	movs	r3, #3
 8000df4:	9300      	str	r3, [sp, #0]
 8000df6:	2300      	movs	r3, #0
 8000df8:	f00a fa24 	bl	800b244 <ILI9341_Draw_Text>
		{
			char symbol[2] = "-\0";
			ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
		}
	//}
}
 8000dfc:	e017      	b.n	8000e2e <DM_DisplayFormattedOutput+0x1de>
			char symbol[2] = "-\0";
 8000dfe:	4b15      	ldr	r3, [pc, #84]	; (8000e54 <DM_DisplayFormattedOutput+0x204>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	803b      	strh	r3, [r7, #0]
			ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
 8000e04:	f107 0208 	add.w	r2, r7, #8
 8000e08:	463b      	mov	r3, r7
 8000e0a:	4611      	mov	r1, r2
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f00b fd3f 	bl	800c890 <strcat>
 8000e12:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8000e16:	b299      	uxth	r1, r3
 8000e18:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e22:	9301      	str	r3, [sp, #4]
 8000e24:	2303      	movs	r3, #3
 8000e26:	9300      	str	r3, [sp, #0]
 8000e28:	2300      	movs	r3, #0
 8000e2a:	f00a fa0b 	bl	800b244 <ILI9341_Draw_Text>
}
 8000e2e:	bf00      	nop
 8000e30:	373c      	adds	r7, #60	; 0x3c
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd90      	pop	{r4, r7, pc}
 8000e36:	bf00      	nop
 8000e38:	3a449ba6 	.word	0x3a449ba6
 8000e3c:	0800e700 	.word	0x0800e700
 8000e40:	0800e70c 	.word	0x0800e70c
 8000e44:	0800e714 	.word	0x0800e714
 8000e48:	0800e720 	.word	0x0800e720
 8000e4c:	0800e72c 	.word	0x0800e72c
 8000e50:	0800e734 	.word	0x0800e734
 8000e54:	0800e738 	.word	0x0800e738

08000e58 <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af02      	add	r7, sp, #8


	if(eNextFuncMenuStatus)		//  == ENABLE_FUNCMENU
 8000e5e:	4b4c      	ldr	r3, [pc, #304]	; (8000f90 <DM_UpdateDisplay+0x138>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d002      	beq.n	8000e6c <DM_UpdateDisplay+0x14>
 		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		_DrawFuncSelectMenu();
 8000e66:	f000 f8b7 	bl	8000fd8 <_DrawFuncSelectMenu>
 8000e6a:	e071      	b.n	8000f50 <DM_UpdateDisplay+0xf8>
	}
	else if(eNextGainMenuStatus)		//  == ENABLE_GAINMENU
 8000e6c:	4b49      	ldr	r3, [pc, #292]	; (8000f94 <DM_UpdateDisplay+0x13c>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d004      	beq.n	8000e7e <DM_UpdateDisplay+0x26>
		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		DM_DisplayFormattedOutput();
 8000e74:	f7ff feec 	bl	8000c50 <DM_DisplayFormattedOutput>
		_DrawGainSelectMenu();
 8000e78:	f000 fa9a 	bl	80013b0 <_DrawGainSelectMenu>
 8000e7c:	e068      	b.n	8000f50 <DM_UpdateDisplay+0xf8>
	}
	else if(eNextFreqMenuStatus)		//  frequency menu enabled
 8000e7e:	4b46      	ldr	r3, [pc, #280]	; (8000f98 <DM_UpdateDisplay+0x140>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d02a      	beq.n	8000edc <DM_UpdateDisplay+0x84>
	{

		ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);
 8000e86:	2300      	movs	r3, #0
 8000e88:	9301      	str	r3, [sp, #4]
 8000e8a:	2303      	movs	r3, #3
 8000e8c:	9300      	str	r3, [sp, #0]
 8000e8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e92:	220a      	movs	r2, #10
 8000e94:	211e      	movs	r1, #30
 8000e96:	4841      	ldr	r0, [pc, #260]	; (8000f9c <DM_UpdateDisplay+0x144>)
 8000e98:	f00a f9d4 	bl	800b244 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("1Hz", 24, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("100Hz", 93, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("1KHz", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("100KHz", 247, 210, BLACK, 2, RED);
*/
		switch(eNextFreqMenuStatus)
 8000e9c:	4b3e      	ldr	r3, [pc, #248]	; (8000f98 <DM_UpdateDisplay+0x140>)
 8000e9e:	781b      	ldrb	r3, [r3, #0]
 8000ea0:	3b01      	subs	r3, #1
 8000ea2:	2b03      	cmp	r3, #3
 8000ea4:	d853      	bhi.n	8000f4e <DM_UpdateDisplay+0xf6>
 8000ea6:	a201      	add	r2, pc, #4	; (adr r2, 8000eac <DM_UpdateDisplay+0x54>)
 8000ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eac:	08000ebd 	.word	0x08000ebd
 8000eb0:	08000ec7 	.word	0x08000ec7
 8000eb4:	08000ecd 	.word	0x08000ecd
 8000eb8:	08000ed7 	.word	0x08000ed7
		{
			case ENABLE_FREQ_MAIN_MENU:

				DM_DisplayFormattedOutput();
 8000ebc:	f7ff fec8 	bl	8000c50 <DM_DisplayFormattedOutput>

				FreqMenu_DrawFreqMainMenu();
 8000ec0:	f000 fb94 	bl	80015ec <FreqMenu_DrawFreqMainMenu>

				break;
 8000ec4:	e044      	b.n	8000f50 <DM_UpdateDisplay+0xf8>

			case ENABLE_FREQ_PRESET_MENU:
				FreqMenu_DrawFreqPresetMenu();
 8000ec6:	f000 fbcb 	bl	8001660 <FreqMenu_DrawFreqPresetMenu>
				break;
 8000eca:	e041      	b.n	8000f50 <DM_UpdateDisplay+0xf8>

			case ENABLE_FREQ_ADJUST_MENU:

				DM_DisplayFormattedOutput();
 8000ecc:	f7ff fec0 	bl	8000c50 <DM_DisplayFormattedOutput>

				FreqMenu_DrawFreqAdjustMenu();
 8000ed0:	f001 fe4c 	bl	8002b6c <FreqMenu_DrawFreqAdjustMenu>

				break;
 8000ed4:	e03c      	b.n	8000f50 <DM_UpdateDisplay+0xf8>

			case ENABLE_FREQ_SWEEP_MENU:
				FreqMenu_DrawFreqSweepMenu();
 8000ed6:	f001 fe79 	bl	8002bcc <FreqMenu_DrawFreqSweepMenu>
				break;
 8000eda:	e039      	b.n	8000f50 <DM_UpdateDisplay+0xf8>
			default:
				break;
		}

	}
	else if(eNextBiasMenuStatus)		//  == ENABLE_BIASMENU
 8000edc:	4b30      	ldr	r3, [pc, #192]	; (8000fa0 <DM_UpdateDisplay+0x148>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d004      	beq.n	8000eee <DM_UpdateDisplay+0x96>
		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		DM_DisplayFormattedOutput();
 8000ee4:	f7ff feb4 	bl	8000c50 <DM_DisplayFormattedOutput>
		_DrawBiasSelectMenu();
 8000ee8:	f000 fa96 	bl	8001418 <_DrawBiasSelectMenu>
 8000eec:	e030      	b.n	8000f50 <DM_UpdateDisplay+0xf8>
	}
	else
	{
		DM_DisplayFormattedOutput();
 8000eee:	f7ff feaf 	bl	8000c50 <DM_DisplayFormattedOutput>

		ILI9341_Draw_Text("FUNC", 10, 210, BLACK, 2, DARKCYAN);
 8000ef2:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000ef6:	9301      	str	r3, [sp, #4]
 8000ef8:	2302      	movs	r3, #2
 8000efa:	9300      	str	r3, [sp, #0]
 8000efc:	2300      	movs	r3, #0
 8000efe:	22d2      	movs	r2, #210	; 0xd2
 8000f00:	210a      	movs	r1, #10
 8000f02:	4828      	ldr	r0, [pc, #160]	; (8000fa4 <DM_UpdateDisplay+0x14c>)
 8000f04:	f00a f99e 	bl	800b244 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("FREQ", 100, 210, BLACK, 2, DARKGREEN);
 8000f08:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000f0c:	9301      	str	r3, [sp, #4]
 8000f0e:	2302      	movs	r3, #2
 8000f10:	9300      	str	r3, [sp, #0]
 8000f12:	2300      	movs	r3, #0
 8000f14:	22d2      	movs	r2, #210	; 0xd2
 8000f16:	2164      	movs	r1, #100	; 0x64
 8000f18:	4823      	ldr	r0, [pc, #140]	; (8000fa8 <DM_UpdateDisplay+0x150>)
 8000f1a:	f00a f993 	bl	800b244 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("GAIN", 175, 210, BLACK, 2, YELLOW);
 8000f1e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	2302      	movs	r3, #2
 8000f26:	9300      	str	r3, [sp, #0]
 8000f28:	2300      	movs	r3, #0
 8000f2a:	22d2      	movs	r2, #210	; 0xd2
 8000f2c:	21af      	movs	r1, #175	; 0xaf
 8000f2e:	481f      	ldr	r0, [pc, #124]	; (8000fac <DM_UpdateDisplay+0x154>)
 8000f30:	f00a f988 	bl	800b244 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("BIAS", 260, 210, BLACK, 2, RED);
 8000f34:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f38:	9301      	str	r3, [sp, #4]
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	9300      	str	r3, [sp, #0]
 8000f3e:	2300      	movs	r3, #0
 8000f40:	22d2      	movs	r2, #210	; 0xd2
 8000f42:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000f46:	481a      	ldr	r0, [pc, #104]	; (8000fb0 <DM_UpdateDisplay+0x158>)
 8000f48:	f00a f97c 	bl	800b244 <ILI9341_Draw_Text>
 8000f4c:	e000      	b.n	8000f50 <DM_UpdateDisplay+0xf8>
				break;
 8000f4e:	bf00      	nop
	}

#ifdef ENCODER_DEBUG
	char tim1tmp[5] = "";
 8000f50:	2300      	movs	r3, #0
 8000f52:	603b      	str	r3, [r7, #0]
 8000f54:	2300      	movs	r3, #0
 8000f56:	713b      	strb	r3, [r7, #4]
	//snprintf(tim1tmp, sizeof(tim1tmp), "%lu", ENCODER_TIMER->CNT);
	if(DM_AddDigitPadding(ENCODER_TIMER->CNT, tim1tmp, sizeof(tim1tmp)) == 0)
 8000f58:	4b16      	ldr	r3, [pc, #88]	; (8000fb4 <DM_UpdateDisplay+0x15c>)
 8000f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	4639      	mov	r1, r7
 8000f60:	2205      	movs	r2, #5
 8000f62:	4618      	mov	r0, r3
 8000f64:	f000 fad8 	bl	8001518 <DM_AddDigitPadding>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d10b      	bne.n	8000f86 <DM_UpdateDisplay+0x12e>
		ILI9341_Draw_Text(tim1tmp, 260, 180, BLACK, 2, RED);
 8000f6e:	4638      	mov	r0, r7
 8000f70:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f74:	9301      	str	r3, [sp, #4]
 8000f76:	2302      	movs	r3, #2
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	22b4      	movs	r2, #180	; 0xb4
 8000f7e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000f82:	f00a f95f 	bl	800b244 <ILI9341_Draw_Text>
/*
	if((TIM1->SR & TIM_SR_IDXF) == TIM_SR_IDXF)
	{
		TIM1->SR &= ~(TIM_SR_IDXF);
	}*/
}
 8000f86:	bf00      	nop
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	20001400 	.word	0x20001400
 8000f94:	20001401 	.word	0x20001401
 8000f98:	20001402 	.word	0x20001402
 8000f9c:	0800e73c 	.word	0x0800e73c
 8000fa0:	20001403 	.word	0x20001403
 8000fa4:	0800e74c 	.word	0x0800e74c
 8000fa8:	0800e754 	.word	0x0800e754
 8000fac:	0800e75c 	.word	0x0800e75c
 8000fb0:	0800e764 	.word	0x0800e764
 8000fb4:	40012c00 	.word	0x40012c00

08000fb8 <DM_ShowFuncSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowFuncSelectMenu(eFuncMenu_Status pValue)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
	eNextFuncMenuStatus = pValue;
 8000fc2:	4a04      	ldr	r2, [pc, #16]	; (8000fd4 <DM_ShowFuncSelectMenu+0x1c>)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	7013      	strb	r3, [r2, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	20001400 	.word	0x20001400

08000fd8 <_DrawFuncSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void _DrawFuncSelectMenu()
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b084      	sub	sp, #16
 8000fdc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("SELECT FUNCTION", 	10, 10, WHITE, 3, BLACK);
 8000fde:	2300      	movs	r3, #0
 8000fe0:	9301      	str	r3, [sp, #4]
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	9300      	str	r3, [sp, #0]
 8000fe6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fea:	220a      	movs	r2, #10
 8000fec:	210a      	movs	r1, #10
 8000fee:	48b7      	ldr	r0, [pc, #732]	; (80012cc <_DrawFuncSelectMenu+0x2f4>)
 8000ff0:	f00a f928 	bl	800b244 <ILI9341_Draw_Text>

	Func_Preset_Encoder_Pos_t *pFuncPresetTmp = FuncO_GetFPresetObject();
 8000ff4:	f002 fc38 	bl	8003868 <FuncO_GetFPresetObject>
 8000ff8:	6078      	str	r0, [r7, #4]
	if(pFuncPresetTmp)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	f000 81b6 	beq.w	800136e <_DrawFuncSelectMenu+0x396>
	{
		switch(pFuncPresetTmp->func)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	781b      	ldrb	r3, [r3, #0]
 8001006:	2b05      	cmp	r3, #5
 8001008:	f200 81b1 	bhi.w	800136e <_DrawFuncSelectMenu+0x396>
 800100c:	a201      	add	r2, pc, #4	; (adr r2, 8001014 <_DrawFuncSelectMenu+0x3c>)
 800100e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001012:	bf00      	nop
 8001014:	0800102d 	.word	0x0800102d
 8001018:	080010b3 	.word	0x080010b3
 800101c:	08001139 	.word	0x08001139
 8001020:	080011bf 	.word	0x080011bf
 8001024:	08001245 	.word	0x08001245
 8001028:	080012e9 	.word	0x080012e9
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, WHITE, 2, BLACK);
 800102c:	2300      	movs	r3, #0
 800102e:	9301      	str	r3, [sp, #4]
 8001030:	2302      	movs	r3, #2
 8001032:	9300      	str	r3, [sp, #0]
 8001034:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001038:	2232      	movs	r2, #50	; 0x32
 800103a:	210a      	movs	r1, #10
 800103c:	48a4      	ldr	r0, [pc, #656]	; (80012d0 <_DrawFuncSelectMenu+0x2f8>)
 800103e:	f00a f901 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8001042:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	2302      	movs	r3, #2
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2300      	movs	r3, #0
 800104e:	2246      	movs	r2, #70	; 0x46
 8001050:	210a      	movs	r1, #10
 8001052:	48a0      	ldr	r0, [pc, #640]	; (80012d4 <_DrawFuncSelectMenu+0x2fc>)
 8001054:	f00a f8f6 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8001058:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800105c:	9301      	str	r3, [sp, #4]
 800105e:	2302      	movs	r3, #2
 8001060:	9300      	str	r3, [sp, #0]
 8001062:	2300      	movs	r3, #0
 8001064:	225a      	movs	r2, #90	; 0x5a
 8001066:	210a      	movs	r1, #10
 8001068:	489b      	ldr	r0, [pc, #620]	; (80012d8 <_DrawFuncSelectMenu+0x300>)
 800106a:	f00a f8eb 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 800106e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001072:	9301      	str	r3, [sp, #4]
 8001074:	2302      	movs	r3, #2
 8001076:	9300      	str	r3, [sp, #0]
 8001078:	2300      	movs	r3, #0
 800107a:	226e      	movs	r2, #110	; 0x6e
 800107c:	210a      	movs	r1, #10
 800107e:	4897      	ldr	r0, [pc, #604]	; (80012dc <_DrawFuncSelectMenu+0x304>)
 8001080:	f00a f8e0 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8001084:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001088:	9301      	str	r3, [sp, #4]
 800108a:	2302      	movs	r3, #2
 800108c:	9300      	str	r3, [sp, #0]
 800108e:	2300      	movs	r3, #0
 8001090:	2282      	movs	r2, #130	; 0x82
 8001092:	210a      	movs	r1, #10
 8001094:	4892      	ldr	r0, [pc, #584]	; (80012e0 <_DrawFuncSelectMenu+0x308>)
 8001096:	f00a f8d5 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 800109a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800109e:	9301      	str	r3, [sp, #4]
 80010a0:	2302      	movs	r3, #2
 80010a2:	9300      	str	r3, [sp, #0]
 80010a4:	2300      	movs	r3, #0
 80010a6:	2296      	movs	r2, #150	; 0x96
 80010a8:	210a      	movs	r1, #10
 80010aa:	488e      	ldr	r0, [pc, #568]	; (80012e4 <_DrawFuncSelectMenu+0x30c>)
 80010ac:	f00a f8ca 	bl	800b244 <ILI9341_Draw_Text>
				break;
 80010b0:	e15d      	b.n	800136e <_DrawFuncSelectMenu+0x396>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 80010b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010b6:	9301      	str	r3, [sp, #4]
 80010b8:	2302      	movs	r3, #2
 80010ba:	9300      	str	r3, [sp, #0]
 80010bc:	2300      	movs	r3, #0
 80010be:	2232      	movs	r2, #50	; 0x32
 80010c0:	210a      	movs	r1, #10
 80010c2:	4883      	ldr	r0, [pc, #524]	; (80012d0 <_DrawFuncSelectMenu+0x2f8>)
 80010c4:	f00a f8be 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, WHITE, 2, BLACK);
 80010c8:	2300      	movs	r3, #0
 80010ca:	9301      	str	r3, [sp, #4]
 80010cc:	2302      	movs	r3, #2
 80010ce:	9300      	str	r3, [sp, #0]
 80010d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010d4:	2246      	movs	r2, #70	; 0x46
 80010d6:	210a      	movs	r1, #10
 80010d8:	487e      	ldr	r0, [pc, #504]	; (80012d4 <_DrawFuncSelectMenu+0x2fc>)
 80010da:	f00a f8b3 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 80010de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010e2:	9301      	str	r3, [sp, #4]
 80010e4:	2302      	movs	r3, #2
 80010e6:	9300      	str	r3, [sp, #0]
 80010e8:	2300      	movs	r3, #0
 80010ea:	225a      	movs	r2, #90	; 0x5a
 80010ec:	210a      	movs	r1, #10
 80010ee:	487a      	ldr	r0, [pc, #488]	; (80012d8 <_DrawFuncSelectMenu+0x300>)
 80010f0:	f00a f8a8 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 80010f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010f8:	9301      	str	r3, [sp, #4]
 80010fa:	2302      	movs	r3, #2
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	2300      	movs	r3, #0
 8001100:	226e      	movs	r2, #110	; 0x6e
 8001102:	210a      	movs	r1, #10
 8001104:	4875      	ldr	r0, [pc, #468]	; (80012dc <_DrawFuncSelectMenu+0x304>)
 8001106:	f00a f89d 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 800110a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	2302      	movs	r3, #2
 8001112:	9300      	str	r3, [sp, #0]
 8001114:	2300      	movs	r3, #0
 8001116:	2282      	movs	r2, #130	; 0x82
 8001118:	210a      	movs	r1, #10
 800111a:	4871      	ldr	r0, [pc, #452]	; (80012e0 <_DrawFuncSelectMenu+0x308>)
 800111c:	f00a f892 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8001120:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001124:	9301      	str	r3, [sp, #4]
 8001126:	2302      	movs	r3, #2
 8001128:	9300      	str	r3, [sp, #0]
 800112a:	2300      	movs	r3, #0
 800112c:	2296      	movs	r2, #150	; 0x96
 800112e:	210a      	movs	r1, #10
 8001130:	486c      	ldr	r0, [pc, #432]	; (80012e4 <_DrawFuncSelectMenu+0x30c>)
 8001132:	f00a f887 	bl	800b244 <ILI9341_Draw_Text>
				break;
 8001136:	e11a      	b.n	800136e <_DrawFuncSelectMenu+0x396>
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8001138:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800113c:	9301      	str	r3, [sp, #4]
 800113e:	2302      	movs	r3, #2
 8001140:	9300      	str	r3, [sp, #0]
 8001142:	2300      	movs	r3, #0
 8001144:	2232      	movs	r2, #50	; 0x32
 8001146:	210a      	movs	r1, #10
 8001148:	4861      	ldr	r0, [pc, #388]	; (80012d0 <_DrawFuncSelectMenu+0x2f8>)
 800114a:	f00a f87b 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 800114e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001152:	9301      	str	r3, [sp, #4]
 8001154:	2302      	movs	r3, #2
 8001156:	9300      	str	r3, [sp, #0]
 8001158:	2300      	movs	r3, #0
 800115a:	2246      	movs	r2, #70	; 0x46
 800115c:	210a      	movs	r1, #10
 800115e:	485d      	ldr	r0, [pc, #372]	; (80012d4 <_DrawFuncSelectMenu+0x2fc>)
 8001160:	f00a f870 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, WHITE, 2, BLACK);
 8001164:	2300      	movs	r3, #0
 8001166:	9301      	str	r3, [sp, #4]
 8001168:	2302      	movs	r3, #2
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001170:	225a      	movs	r2, #90	; 0x5a
 8001172:	210a      	movs	r1, #10
 8001174:	4858      	ldr	r0, [pc, #352]	; (80012d8 <_DrawFuncSelectMenu+0x300>)
 8001176:	f00a f865 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 800117a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800117e:	9301      	str	r3, [sp, #4]
 8001180:	2302      	movs	r3, #2
 8001182:	9300      	str	r3, [sp, #0]
 8001184:	2300      	movs	r3, #0
 8001186:	226e      	movs	r2, #110	; 0x6e
 8001188:	210a      	movs	r1, #10
 800118a:	4854      	ldr	r0, [pc, #336]	; (80012dc <_DrawFuncSelectMenu+0x304>)
 800118c:	f00a f85a 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8001190:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001194:	9301      	str	r3, [sp, #4]
 8001196:	2302      	movs	r3, #2
 8001198:	9300      	str	r3, [sp, #0]
 800119a:	2300      	movs	r3, #0
 800119c:	2282      	movs	r2, #130	; 0x82
 800119e:	210a      	movs	r1, #10
 80011a0:	484f      	ldr	r0, [pc, #316]	; (80012e0 <_DrawFuncSelectMenu+0x308>)
 80011a2:	f00a f84f 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 80011a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	2302      	movs	r3, #2
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	2300      	movs	r3, #0
 80011b2:	2296      	movs	r2, #150	; 0x96
 80011b4:	210a      	movs	r1, #10
 80011b6:	484b      	ldr	r0, [pc, #300]	; (80012e4 <_DrawFuncSelectMenu+0x30c>)
 80011b8:	f00a f844 	bl	800b244 <ILI9341_Draw_Text>
				break;
 80011bc:	e0d7      	b.n	800136e <_DrawFuncSelectMenu+0x396>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 80011be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011c2:	9301      	str	r3, [sp, #4]
 80011c4:	2302      	movs	r3, #2
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	2300      	movs	r3, #0
 80011ca:	2232      	movs	r2, #50	; 0x32
 80011cc:	210a      	movs	r1, #10
 80011ce:	4840      	ldr	r0, [pc, #256]	; (80012d0 <_DrawFuncSelectMenu+0x2f8>)
 80011d0:	f00a f838 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 80011d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011d8:	9301      	str	r3, [sp, #4]
 80011da:	2302      	movs	r3, #2
 80011dc:	9300      	str	r3, [sp, #0]
 80011de:	2300      	movs	r3, #0
 80011e0:	2246      	movs	r2, #70	; 0x46
 80011e2:	210a      	movs	r1, #10
 80011e4:	483b      	ldr	r0, [pc, #236]	; (80012d4 <_DrawFuncSelectMenu+0x2fc>)
 80011e6:	f00a f82d 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 80011ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011ee:	9301      	str	r3, [sp, #4]
 80011f0:	2302      	movs	r3, #2
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2300      	movs	r3, #0
 80011f6:	225a      	movs	r2, #90	; 0x5a
 80011f8:	210a      	movs	r1, #10
 80011fa:	4837      	ldr	r0, [pc, #220]	; (80012d8 <_DrawFuncSelectMenu+0x300>)
 80011fc:	f00a f822 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, WHITE, 2, BLACK);
 8001200:	2300      	movs	r3, #0
 8001202:	9301      	str	r3, [sp, #4]
 8001204:	2302      	movs	r3, #2
 8001206:	9300      	str	r3, [sp, #0]
 8001208:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800120c:	226e      	movs	r2, #110	; 0x6e
 800120e:	210a      	movs	r1, #10
 8001210:	4832      	ldr	r0, [pc, #200]	; (80012dc <_DrawFuncSelectMenu+0x304>)
 8001212:	f00a f817 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8001216:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800121a:	9301      	str	r3, [sp, #4]
 800121c:	2302      	movs	r3, #2
 800121e:	9300      	str	r3, [sp, #0]
 8001220:	2300      	movs	r3, #0
 8001222:	2282      	movs	r2, #130	; 0x82
 8001224:	210a      	movs	r1, #10
 8001226:	482e      	ldr	r0, [pc, #184]	; (80012e0 <_DrawFuncSelectMenu+0x308>)
 8001228:	f00a f80c 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 800122c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001230:	9301      	str	r3, [sp, #4]
 8001232:	2302      	movs	r3, #2
 8001234:	9300      	str	r3, [sp, #0]
 8001236:	2300      	movs	r3, #0
 8001238:	2296      	movs	r2, #150	; 0x96
 800123a:	210a      	movs	r1, #10
 800123c:	4829      	ldr	r0, [pc, #164]	; (80012e4 <_DrawFuncSelectMenu+0x30c>)
 800123e:	f00a f801 	bl	800b244 <ILI9341_Draw_Text>
				break;
 8001242:	e094      	b.n	800136e <_DrawFuncSelectMenu+0x396>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8001244:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001248:	9301      	str	r3, [sp, #4]
 800124a:	2302      	movs	r3, #2
 800124c:	9300      	str	r3, [sp, #0]
 800124e:	2300      	movs	r3, #0
 8001250:	2232      	movs	r2, #50	; 0x32
 8001252:	210a      	movs	r1, #10
 8001254:	481e      	ldr	r0, [pc, #120]	; (80012d0 <_DrawFuncSelectMenu+0x2f8>)
 8001256:	f009 fff5 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 800125a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800125e:	9301      	str	r3, [sp, #4]
 8001260:	2302      	movs	r3, #2
 8001262:	9300      	str	r3, [sp, #0]
 8001264:	2300      	movs	r3, #0
 8001266:	2246      	movs	r2, #70	; 0x46
 8001268:	210a      	movs	r1, #10
 800126a:	481a      	ldr	r0, [pc, #104]	; (80012d4 <_DrawFuncSelectMenu+0x2fc>)
 800126c:	f009 ffea 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8001270:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	2302      	movs	r3, #2
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2300      	movs	r3, #0
 800127c:	225a      	movs	r2, #90	; 0x5a
 800127e:	210a      	movs	r1, #10
 8001280:	4815      	ldr	r0, [pc, #84]	; (80012d8 <_DrawFuncSelectMenu+0x300>)
 8001282:	f009 ffdf 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8001286:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800128a:	9301      	str	r3, [sp, #4]
 800128c:	2302      	movs	r3, #2
 800128e:	9300      	str	r3, [sp, #0]
 8001290:	2300      	movs	r3, #0
 8001292:	226e      	movs	r2, #110	; 0x6e
 8001294:	210a      	movs	r1, #10
 8001296:	4811      	ldr	r0, [pc, #68]	; (80012dc <_DrawFuncSelectMenu+0x304>)
 8001298:	f009 ffd4 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, WHITE, 2, BLACK);
 800129c:	2300      	movs	r3, #0
 800129e:	9301      	str	r3, [sp, #4]
 80012a0:	2302      	movs	r3, #2
 80012a2:	9300      	str	r3, [sp, #0]
 80012a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012a8:	2282      	movs	r2, #130	; 0x82
 80012aa:	210a      	movs	r1, #10
 80012ac:	480c      	ldr	r0, [pc, #48]	; (80012e0 <_DrawFuncSelectMenu+0x308>)
 80012ae:	f009 ffc9 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 80012b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012b6:	9301      	str	r3, [sp, #4]
 80012b8:	2302      	movs	r3, #2
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2300      	movs	r3, #0
 80012be:	2296      	movs	r2, #150	; 0x96
 80012c0:	210a      	movs	r1, #10
 80012c2:	4808      	ldr	r0, [pc, #32]	; (80012e4 <_DrawFuncSelectMenu+0x30c>)
 80012c4:	f009 ffbe 	bl	800b244 <ILI9341_Draw_Text>
				break;
 80012c8:	e051      	b.n	800136e <_DrawFuncSelectMenu+0x396>
 80012ca:	bf00      	nop
 80012cc:	0800e76c 	.word	0x0800e76c
 80012d0:	0800e77c 	.word	0x0800e77c
 80012d4:	0800e784 	.word	0x0800e784
 80012d8:	0800e790 	.word	0x0800e790
 80012dc:	0800e798 	.word	0x0800e798
 80012e0:	0800e7a4 	.word	0x0800e7a4
 80012e4:	0800e7b0 	.word	0x0800e7b0
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 80012e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	2302      	movs	r3, #2
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2300      	movs	r3, #0
 80012f4:	2232      	movs	r2, #50	; 0x32
 80012f6:	210a      	movs	r1, #10
 80012f8:	481f      	ldr	r0, [pc, #124]	; (8001378 <_DrawFuncSelectMenu+0x3a0>)
 80012fa:	f009 ffa3 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 80012fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001302:	9301      	str	r3, [sp, #4]
 8001304:	2302      	movs	r3, #2
 8001306:	9300      	str	r3, [sp, #0]
 8001308:	2300      	movs	r3, #0
 800130a:	2246      	movs	r2, #70	; 0x46
 800130c:	210a      	movs	r1, #10
 800130e:	481b      	ldr	r0, [pc, #108]	; (800137c <_DrawFuncSelectMenu+0x3a4>)
 8001310:	f009 ff98 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8001314:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	2302      	movs	r3, #2
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2300      	movs	r3, #0
 8001320:	225a      	movs	r2, #90	; 0x5a
 8001322:	210a      	movs	r1, #10
 8001324:	4816      	ldr	r0, [pc, #88]	; (8001380 <_DrawFuncSelectMenu+0x3a8>)
 8001326:	f009 ff8d 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 800132a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800132e:	9301      	str	r3, [sp, #4]
 8001330:	2302      	movs	r3, #2
 8001332:	9300      	str	r3, [sp, #0]
 8001334:	2300      	movs	r3, #0
 8001336:	226e      	movs	r2, #110	; 0x6e
 8001338:	210a      	movs	r1, #10
 800133a:	4812      	ldr	r0, [pc, #72]	; (8001384 <_DrawFuncSelectMenu+0x3ac>)
 800133c:	f009 ff82 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8001340:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001344:	9301      	str	r3, [sp, #4]
 8001346:	2302      	movs	r3, #2
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2300      	movs	r3, #0
 800134c:	2282      	movs	r2, #130	; 0x82
 800134e:	210a      	movs	r1, #10
 8001350:	480d      	ldr	r0, [pc, #52]	; (8001388 <_DrawFuncSelectMenu+0x3b0>)
 8001352:	f009 ff77 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, WHITE, 2, BLACK);
 8001356:	2300      	movs	r3, #0
 8001358:	9301      	str	r3, [sp, #4]
 800135a:	2302      	movs	r3, #2
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001362:	2296      	movs	r2, #150	; 0x96
 8001364:	210a      	movs	r1, #10
 8001366:	4809      	ldr	r0, [pc, #36]	; (800138c <_DrawFuncSelectMenu+0x3b4>)
 8001368:	f009 ff6c 	bl	800b244 <ILI9341_Draw_Text>
				break;
 800136c:	bf00      	nop

		}
	}


}
 800136e:	bf00      	nop
 8001370:	3708      	adds	r7, #8
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	0800e77c 	.word	0x0800e77c
 800137c:	0800e784 	.word	0x0800e784
 8001380:	0800e790 	.word	0x0800e790
 8001384:	0800e798 	.word	0x0800e798
 8001388:	0800e7a4 	.word	0x0800e7a4
 800138c:	0800e7b0 	.word	0x0800e7b0

08001390 <DM_ShowGainSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowGainSelectMenu(eGainMenu_Status pValue)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
	eNextGainMenuStatus = pValue;
 800139a:	4a04      	ldr	r2, [pc, #16]	; (80013ac <DM_ShowGainSelectMenu+0x1c>)
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	7013      	strb	r3, [r2, #0]
}
 80013a0:	bf00      	nop
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr
 80013ac:	20001401 	.word	0x20001401

080013b0 <_DrawGainSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void _DrawGainSelectMenu()
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("ADJUST GAIN", 	40, 10, WHITE, 3, BLACK);
 80013b6:	2300      	movs	r3, #0
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	2303      	movs	r3, #3
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013c2:	220a      	movs	r2, #10
 80013c4:	2128      	movs	r1, #40	; 0x28
 80013c6:	4803      	ldr	r0, [pc, #12]	; (80013d4 <_DrawGainSelectMenu+0x24>)
 80013c8:	f009 ff3c 	bl	800b244 <ILI9341_Draw_Text>
	char gain[4] = "";
	//snprintf(gain, sizeof(gain), "%u", GO_GetOutputGain());
	if(DM_AddDigitPadding((uint16_t)GO_GetOutputGain(), gain, sizeof(gain)) == 0)
		ILI9341_Draw_Text(gain, 250, 150, WHITE, 1, BLACK);
*/
}
 80013cc:	bf00      	nop
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	0800e7b8 	.word	0x0800e7b8

080013d8 <DM_ShowFreqMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowFreqMenu(eFreqMenu_Status pValue)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
	eNextFreqMenuStatus = pValue;
 80013e2:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <DM_ShowFreqMenu+0x1c>)
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	7013      	strb	r3, [r2, #0]
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr
 80013f4:	20001402 	.word	0x20001402

080013f8 <DM_ShowBiasSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowBiasSelectMenu(eBiasMenu_Status pValue)
{
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	71fb      	strb	r3, [r7, #7]
	eNextBiasMenuStatus = pValue;
 8001402:	4a04      	ldr	r2, [pc, #16]	; (8001414 <DM_ShowBiasSelectMenu+0x1c>)
 8001404:	79fb      	ldrb	r3, [r7, #7]
 8001406:	7013      	strb	r3, [r2, #0]
}
 8001408:	bf00      	nop
 800140a:	370c      	adds	r7, #12
 800140c:	46bd      	mov	sp, r7
 800140e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001412:	4770      	bx	lr
 8001414:	20001403 	.word	0x20001403

08001418 <_DrawBiasSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void _DrawBiasSelectMenu()
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("ADJUST DC BIAS", 	30, 10, WHITE, 3, BLACK);
 800141e:	2300      	movs	r3, #0
 8001420:	9301      	str	r3, [sp, #4]
 8001422:	2303      	movs	r3, #3
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800142a:	220a      	movs	r2, #10
 800142c:	211e      	movs	r1, #30
 800142e:	4803      	ldr	r0, [pc, #12]	; (800143c <_DrawBiasSelectMenu+0x24>)
 8001430:	f009 ff08 	bl	800b244 <ILI9341_Draw_Text>
			char symbol[2] = "-\0";
			ILI9341_Draw_Text(strcat(symbol, bias), 250, 150, WHITE, 1, BLACK);
		}
	}
*/
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	0800e7c4 	.word	0x0800e7c4

08001440 <DM_DigitCount>:
 *	@param None
 *	@retval None
 *
 */
int DM_DigitCount(int num)
{
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
	if(num < 10)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2b09      	cmp	r3, #9
 800144c:	dc01      	bgt.n	8001452 <DM_DigitCount+0x12>
		return 1;
 800144e:	2301      	movs	r3, #1
 8001450:	e018      	b.n	8001484 <DM_DigitCount+0x44>
	if(num < 100)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2b63      	cmp	r3, #99	; 0x63
 8001456:	dc01      	bgt.n	800145c <DM_DigitCount+0x1c>
		return 2;
 8001458:	2302      	movs	r3, #2
 800145a:	e013      	b.n	8001484 <DM_DigitCount+0x44>
	if(num < 1000)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001462:	da01      	bge.n	8001468 <DM_DigitCount+0x28>
		return 3;
 8001464:	2303      	movs	r3, #3
 8001466:	e00d      	b.n	8001484 <DM_DigitCount+0x44>
	if(num < 10000)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f242 720f 	movw	r2, #9999	; 0x270f
 800146e:	4293      	cmp	r3, r2
 8001470:	dc01      	bgt.n	8001476 <DM_DigitCount+0x36>
		return 4;
 8001472:	2304      	movs	r3, #4
 8001474:	e006      	b.n	8001484 <DM_DigitCount+0x44>
	if(num < 100000)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	4a05      	ldr	r2, [pc, #20]	; (8001490 <DM_DigitCount+0x50>)
 800147a:	4293      	cmp	r3, r2
 800147c:	dc01      	bgt.n	8001482 <DM_DigitCount+0x42>
		return 5;
 800147e:	2305      	movs	r3, #5
 8001480:	e000      	b.n	8001484 <DM_DigitCount+0x44>
	else
		return 0;
 8001482:	2300      	movs	r3, #0
}
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr
 8001490:	0001869f 	.word	0x0001869f

08001494 <DM_RefreshBackgroundLayout>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshBackgroundLayout()
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af04      	add	r7, sp, #16


	//ILI9341_Fill_Screen(WHITE);
	ILI9341_FillScreenGradient();
 800149a:	f009 ff01 	bl	800b2a0 <ILI9341_FillScreenGradient>

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 800149e:	4b1d      	ldr	r3, [pc, #116]	; (8001514 <DM_RefreshBackgroundLayout+0x80>)
 80014a0:	8818      	ldrh	r0, [r3, #0]
 80014a2:	2300      	movs	r3, #0
 80014a4:	9302      	str	r3, [sp, #8]
 80014a6:	2302      	movs	r3, #2
 80014a8:	9301      	str	r3, [sp, #4]
 80014aa:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	2332      	movs	r3, #50	; 0x32
 80014b2:	2250      	movs	r2, #80	; 0x50
 80014b4:	21c8      	movs	r1, #200	; 0xc8
 80014b6:	f009 fd5b 	bl	800af70 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <DM_RefreshBackgroundLayout+0x80>)
 80014bc:	8858      	ldrh	r0, [r3, #2]
 80014be:	2300      	movs	r3, #0
 80014c0:	9302      	str	r3, [sp, #8]
 80014c2:	2302      	movs	r3, #2
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2332      	movs	r3, #50	; 0x32
 80014ce:	2250      	movs	r2, #80	; 0x50
 80014d0:	21c8      	movs	r1, #200	; 0xc8
 80014d2:	f009 fd4d 	bl	800af70 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 80014d6:	4b0f      	ldr	r3, [pc, #60]	; (8001514 <DM_RefreshBackgroundLayout+0x80>)
 80014d8:	8898      	ldrh	r0, [r3, #4]
 80014da:	2300      	movs	r3, #0
 80014dc:	9302      	str	r3, [sp, #8]
 80014de:	2302      	movs	r3, #2
 80014e0:	9301      	str	r3, [sp, #4]
 80014e2:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2332      	movs	r3, #50	; 0x32
 80014ea:	2250      	movs	r2, #80	; 0x50
 80014ec:	21c8      	movs	r1, #200	; 0xc8
 80014ee:	f009 fd3f 	bl	800af70 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <DM_RefreshBackgroundLayout+0x80>)
 80014f4:	88d8      	ldrh	r0, [r3, #6]
 80014f6:	2300      	movs	r3, #0
 80014f8:	9302      	str	r3, [sp, #8]
 80014fa:	2302      	movs	r3, #2
 80014fc:	9301      	str	r3, [sp, #4]
 80014fe:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	2332      	movs	r3, #50	; 0x32
 8001506:	2250      	movs	r2, #80	; 0x50
 8001508:	21c8      	movs	r1, #200	; 0xc8
 800150a:	f009 fd31 	bl	800af70 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_WIDTH,
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
}
 800150e:	bf00      	nop
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	20000000 	.word	0x20000000

08001518 <DM_AddDigitPadding>:
 *			1 if buflen is invalid size
 *			2 unknown error
 *
 */
int DM_AddDigitPadding(uint16_t num, char *buffer, uint16_t buflen)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b084      	sub	sp, #16
 800151c:	af00      	add	r7, sp, #0
 800151e:	4603      	mov	r3, r0
 8001520:	6039      	str	r1, [r7, #0]
 8001522:	80fb      	strh	r3, [r7, #6]
 8001524:	4613      	mov	r3, r2
 8001526:	80bb      	strh	r3, [r7, #4]
	if((buflen < 1) || (buflen > 6))
 8001528:	88bb      	ldrh	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d002      	beq.n	8001534 <DM_AddDigitPadding+0x1c>
 800152e:	88bb      	ldrh	r3, [r7, #4]
 8001530:	2b06      	cmp	r3, #6
 8001532:	d901      	bls.n	8001538 <DM_AddDigitPadding+0x20>
		return 1;
 8001534:	2301      	movs	r3, #1
 8001536:	e048      	b.n	80015ca <DM_AddDigitPadding+0xb2>

	//char* tmpbuf = malloc(sizeof(buffer) * buflen);

	uint16_t tmpcnt = num;
 8001538:	88fb      	ldrh	r3, [r7, #6]
 800153a:	81fb      	strh	r3, [r7, #14]
	switch(DM_DigitCount(tmpcnt))
 800153c:	89fb      	ldrh	r3, [r7, #14]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff ff7e 	bl	8001440 <DM_DigitCount>
 8001544:	4603      	mov	r3, r0
 8001546:	2b05      	cmp	r3, #5
 8001548:	d83e      	bhi.n	80015c8 <DM_AddDigitPadding+0xb0>
 800154a:	a201      	add	r2, pc, #4	; (adr r2, 8001550 <DM_AddDigitPadding+0x38>)
 800154c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001550:	08001569 	.word	0x08001569
 8001554:	08001579 	.word	0x08001579
 8001558:	08001589 	.word	0x08001589
 800155c:	08001599 	.word	0x08001599
 8001560:	080015a9 	.word	0x080015a9
 8001564:	080015b9 	.word	0x080015b9
	{

		case 0:
			snprintf(buffer,buflen, "     ");
 8001568:	88bb      	ldrh	r3, [r7, #4]
 800156a:	4a1a      	ldr	r2, [pc, #104]	; (80015d4 <DM_AddDigitPadding+0xbc>)
 800156c:	4619      	mov	r1, r3
 800156e:	6838      	ldr	r0, [r7, #0]
 8001570:	f00b f95a 	bl	800c828 <sniprintf>
			return 0;
 8001574:	2300      	movs	r3, #0
 8001576:	e028      	b.n	80015ca <DM_AddDigitPadding+0xb2>
		case 1:
			snprintf(buffer, buflen, "%u    ", tmpcnt);
 8001578:	88b9      	ldrh	r1, [r7, #4]
 800157a:	89fb      	ldrh	r3, [r7, #14]
 800157c:	4a16      	ldr	r2, [pc, #88]	; (80015d8 <DM_AddDigitPadding+0xc0>)
 800157e:	6838      	ldr	r0, [r7, #0]
 8001580:	f00b f952 	bl	800c828 <sniprintf>
			return 0;
 8001584:	2300      	movs	r3, #0
 8001586:	e020      	b.n	80015ca <DM_AddDigitPadding+0xb2>
		case 2:
			snprintf(buffer, buflen, "%u   ", tmpcnt);
 8001588:	88b9      	ldrh	r1, [r7, #4]
 800158a:	89fb      	ldrh	r3, [r7, #14]
 800158c:	4a13      	ldr	r2, [pc, #76]	; (80015dc <DM_AddDigitPadding+0xc4>)
 800158e:	6838      	ldr	r0, [r7, #0]
 8001590:	f00b f94a 	bl	800c828 <sniprintf>
			return 0;
 8001594:	2300      	movs	r3, #0
 8001596:	e018      	b.n	80015ca <DM_AddDigitPadding+0xb2>
		case 3:
			snprintf(buffer, buflen, "%u  ", tmpcnt);
 8001598:	88b9      	ldrh	r1, [r7, #4]
 800159a:	89fb      	ldrh	r3, [r7, #14]
 800159c:	4a10      	ldr	r2, [pc, #64]	; (80015e0 <DM_AddDigitPadding+0xc8>)
 800159e:	6838      	ldr	r0, [r7, #0]
 80015a0:	f00b f942 	bl	800c828 <sniprintf>
			return 0;
 80015a4:	2300      	movs	r3, #0
 80015a6:	e010      	b.n	80015ca <DM_AddDigitPadding+0xb2>
		case 4:
			snprintf(buffer, buflen, "%u ", tmpcnt);
 80015a8:	88b9      	ldrh	r1, [r7, #4]
 80015aa:	89fb      	ldrh	r3, [r7, #14]
 80015ac:	4a0d      	ldr	r2, [pc, #52]	; (80015e4 <DM_AddDigitPadding+0xcc>)
 80015ae:	6838      	ldr	r0, [r7, #0]
 80015b0:	f00b f93a 	bl	800c828 <sniprintf>
			return 0;
 80015b4:	2300      	movs	r3, #0
 80015b6:	e008      	b.n	80015ca <DM_AddDigitPadding+0xb2>
		case 5:
			snprintf(buffer, buflen, "%u", tmpcnt);
 80015b8:	88b9      	ldrh	r1, [r7, #4]
 80015ba:	89fb      	ldrh	r3, [r7, #14]
 80015bc:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <DM_AddDigitPadding+0xd0>)
 80015be:	6838      	ldr	r0, [r7, #0]
 80015c0:	f00b f932 	bl	800c828 <sniprintf>
			return 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	e000      	b.n	80015ca <DM_AddDigitPadding+0xb2>

	}

	return 2;
 80015c8:	2302      	movs	r3, #2


}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	0800e80c 	.word	0x0800e80c
 80015d8:	0800e814 	.word	0x0800e814
 80015dc:	0800e81c 	.word	0x0800e81c
 80015e0:	0800e824 	.word	0x0800e824
 80015e4:	0800e82c 	.word	0x0800e82c
 80015e8:	0800e830 	.word	0x0800e830

080015ec <FreqMenu_DrawFreqMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawFreqMainMenu()
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("Select an option below", 	30, 150, BLACK, 2, WHITE);
 80015f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	2302      	movs	r3, #2
 80015fa:	9300      	str	r3, [sp, #0]
 80015fc:	2300      	movs	r3, #0
 80015fe:	2296      	movs	r2, #150	; 0x96
 8001600:	211e      	movs	r1, #30
 8001602:	4813      	ldr	r0, [pc, #76]	; (8001650 <FreqMenu_DrawFreqMainMenu+0x64>)
 8001604:	f009 fe1e 	bl	800b244 <ILI9341_Draw_Text>

	// buttons
	ILI9341_Draw_Text("PRESET", 5, 210, BLACK, 2, DARKCYAN);
 8001608:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800160c:	9301      	str	r3, [sp, #4]
 800160e:	2302      	movs	r3, #2
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	2300      	movs	r3, #0
 8001614:	22d2      	movs	r2, #210	; 0xd2
 8001616:	2105      	movs	r1, #5
 8001618:	480e      	ldr	r0, [pc, #56]	; (8001654 <FreqMenu_DrawFreqMainMenu+0x68>)
 800161a:	f009 fe13 	bl	800b244 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 87, 210, BLACK, 2, DARKGREEN);
 800161e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001622:	9301      	str	r3, [sp, #4]
 8001624:	2302      	movs	r3, #2
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	2300      	movs	r3, #0
 800162a:	22d2      	movs	r2, #210	; 0xd2
 800162c:	2157      	movs	r1, #87	; 0x57
 800162e:	480a      	ldr	r0, [pc, #40]	; (8001658 <FreqMenu_DrawFreqMainMenu+0x6c>)
 8001630:	f009 fe08 	bl	800b244 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP", 174, 210, BLACK, 2, YELLOW);
 8001634:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	2302      	movs	r3, #2
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	2300      	movs	r3, #0
 8001640:	22d2      	movs	r2, #210	; 0xd2
 8001642:	21ae      	movs	r1, #174	; 0xae
 8001644:	4805      	ldr	r0, [pc, #20]	; (800165c <FreqMenu_DrawFreqMainMenu+0x70>)
 8001646:	f009 fdfd 	bl	800b244 <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}
 8001650:	0800e834 	.word	0x0800e834
 8001654:	0800e84c 	.word	0x0800e84c
 8001658:	0800e854 	.word	0x0800e854
 800165c:	0800e85c 	.word	0x0800e85c

08001660 <FreqMenu_DrawFreqPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawFreqPresetMenu()
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b086      	sub	sp, #24
 8001664:	af02      	add	r7, sp, #8

	uint8_t menu_pos_y1 = 50;
 8001666:	2332      	movs	r3, #50	; 0x32
 8001668:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 70;
 800166a:	2346      	movs	r3, #70	; 0x46
 800166c:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 90;
 800166e:	235a      	movs	r3, #90	; 0x5a
 8001670:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 110;
 8001672:	236e      	movs	r3, #110	; 0x6e
 8001674:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 130;
 8001676:	2382      	movs	r3, #130	; 0x82
 8001678:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 150;
 800167a:	2396      	movs	r3, #150	; 0x96
 800167c:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 170;
 800167e:	23aa      	movs	r3, #170	; 0xaa
 8001680:	727b      	strb	r3, [r7, #9]
	Freq_Preset_Encoder_Pos_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8001682:	f001 ffaf 	bl	80035e4 <FreqO_GetFPresetObject>
 8001686:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	f001 823f 	beq.w	8002b0e <FreqMenu_DrawFreqPresetMenu+0x14ae>
	{
		switch(pFreqPresetTmp->hertz)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001698:	4293      	cmp	r3, r2
 800169a:	f000 8499 	beq.w	8001fd0 <FreqMenu_DrawFreqPresetMenu+0x970>
 800169e:	f240 22ee 	movw	r2, #750	; 0x2ee
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d817      	bhi.n	80016d6 <FreqMenu_DrawFreqPresetMenu+0x76>
 80016a6:	2b32      	cmp	r3, #50	; 0x32
 80016a8:	f000 81b2 	beq.w	8001a10 <FreqMenu_DrawFreqPresetMenu+0x3b0>
 80016ac:	2b32      	cmp	r3, #50	; 0x32
 80016ae:	d806      	bhi.n	80016be <FreqMenu_DrawFreqPresetMenu+0x5e>
 80016b0:	2b01      	cmp	r3, #1
 80016b2:	d038      	beq.n	8001726 <FreqMenu_DrawFreqPresetMenu+0xc6>
 80016b4:	2b0a      	cmp	r3, #10
 80016b6:	f000 80e0 	beq.w	800187a <FreqMenu_DrawFreqPresetMenu+0x21a>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		10, 180, RED, 1, BLACK);
	}

}
 80016ba:	f001 ba34 	b.w	8002b26 <FreqMenu_DrawFreqPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 80016be:	2bfa      	cmp	r3, #250	; 0xfa
 80016c0:	f000 8316 	beq.w	8001cf0 <FreqMenu_DrawFreqPresetMenu+0x690>
 80016c4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80016c8:	f000 83bc 	beq.w	8001e44 <FreqMenu_DrawFreqPresetMenu+0x7e4>
 80016cc:	2b64      	cmp	r3, #100	; 0x64
 80016ce:	f000 8249 	beq.w	8001b64 <FreqMenu_DrawFreqPresetMenu+0x504>
}
 80016d2:	f001 ba28 	b.w	8002b26 <FreqMenu_DrawFreqPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 80016d6:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80016da:	4293      	cmp	r3, r2
 80016dc:	f000 8756 	beq.w	800258c <FreqMenu_DrawFreqPresetMenu+0xf2c>
 80016e0:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d80f      	bhi.n	8001708 <FreqMenu_DrawFreqPresetMenu+0xa8>
 80016e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ec:	4293      	cmp	r3, r2
 80016ee:	f000 85df 	beq.w	80022b0 <FreqMenu_DrawFreqPresetMenu+0xc50>
 80016f2:	f242 7210 	movw	r2, #10000	; 0x2710
 80016f6:	4293      	cmp	r3, r2
 80016f8:	f000 8683 	beq.w	8002402 <FreqMenu_DrawFreqPresetMenu+0xda2>
 80016fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001700:	f000 8510 	beq.w	8002124 <FreqMenu_DrawFreqPresetMenu+0xac4>
}
 8001704:	f001 ba0f 	b.w	8002b26 <FreqMenu_DrawFreqPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 8001708:	4ab1      	ldr	r2, [pc, #708]	; (80019d0 <FreqMenu_DrawFreqPresetMenu+0x370>)
 800170a:	4293      	cmp	r3, r2
 800170c:	f001 80ac 	beq.w	8002868 <FreqMenu_DrawFreqPresetMenu+0x1208>
 8001710:	4ab0      	ldr	r2, [pc, #704]	; (80019d4 <FreqMenu_DrawFreqPresetMenu+0x374>)
 8001712:	4293      	cmp	r3, r2
 8001714:	f001 8151 	beq.w	80029ba <FreqMenu_DrawFreqPresetMenu+0x135a>
 8001718:	f24c 3250 	movw	r2, #50000	; 0xc350
 800171c:	4293      	cmp	r3, r2
 800171e:	f000 87de 	beq.w	80026de <FreqMenu_DrawFreqPresetMenu+0x107e>
}
 8001722:	f001 ba00 	b.w	8002b26 <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, WHITE, 2, BLACK);
 8001726:	7bfb      	ldrb	r3, [r7, #15]
 8001728:	b29a      	uxth	r2, r3
 800172a:	2300      	movs	r3, #0
 800172c:	9301      	str	r3, [sp, #4]
 800172e:	2302      	movs	r3, #2
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001736:	210a      	movs	r1, #10
 8001738:	48a7      	ldr	r0, [pc, #668]	; (80019d8 <FreqMenu_DrawFreqPresetMenu+0x378>)
 800173a:	f009 fd83 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 800173e:	7bbb      	ldrb	r3, [r7, #14]
 8001740:	b29a      	uxth	r2, r3
 8001742:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001746:	9301      	str	r3, [sp, #4]
 8001748:	2302      	movs	r3, #2
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	2300      	movs	r3, #0
 800174e:	210a      	movs	r1, #10
 8001750:	48a2      	ldr	r0, [pc, #648]	; (80019dc <FreqMenu_DrawFreqPresetMenu+0x37c>)
 8001752:	f009 fd77 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001756:	7b7b      	ldrb	r3, [r7, #13]
 8001758:	b29a      	uxth	r2, r3
 800175a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800175e:	9301      	str	r3, [sp, #4]
 8001760:	2302      	movs	r3, #2
 8001762:	9300      	str	r3, [sp, #0]
 8001764:	2300      	movs	r3, #0
 8001766:	210a      	movs	r1, #10
 8001768:	489d      	ldr	r0, [pc, #628]	; (80019e0 <FreqMenu_DrawFreqPresetMenu+0x380>)
 800176a:	f009 fd6b 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800176e:	7b3b      	ldrb	r3, [r7, #12]
 8001770:	b29a      	uxth	r2, r3
 8001772:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001776:	9301      	str	r3, [sp, #4]
 8001778:	2302      	movs	r3, #2
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	2300      	movs	r3, #0
 800177e:	210a      	movs	r1, #10
 8001780:	4898      	ldr	r0, [pc, #608]	; (80019e4 <FreqMenu_DrawFreqPresetMenu+0x384>)
 8001782:	f009 fd5f 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001786:	7afb      	ldrb	r3, [r7, #11]
 8001788:	b29a      	uxth	r2, r3
 800178a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800178e:	9301      	str	r3, [sp, #4]
 8001790:	2302      	movs	r3, #2
 8001792:	9300      	str	r3, [sp, #0]
 8001794:	2300      	movs	r3, #0
 8001796:	210a      	movs	r1, #10
 8001798:	4893      	ldr	r0, [pc, #588]	; (80019e8 <FreqMenu_DrawFreqPresetMenu+0x388>)
 800179a:	f009 fd53 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800179e:	7abb      	ldrb	r3, [r7, #10]
 80017a0:	b29a      	uxth	r2, r3
 80017a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017a6:	9301      	str	r3, [sp, #4]
 80017a8:	2302      	movs	r3, #2
 80017aa:	9300      	str	r3, [sp, #0]
 80017ac:	2300      	movs	r3, #0
 80017ae:	210a      	movs	r1, #10
 80017b0:	488e      	ldr	r0, [pc, #568]	; (80019ec <FreqMenu_DrawFreqPresetMenu+0x38c>)
 80017b2:	f009 fd47 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80017b6:	7a7b      	ldrb	r3, [r7, #9]
 80017b8:	b29a      	uxth	r2, r3
 80017ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017be:	9301      	str	r3, [sp, #4]
 80017c0:	2302      	movs	r3, #2
 80017c2:	9300      	str	r3, [sp, #0]
 80017c4:	2300      	movs	r3, #0
 80017c6:	210a      	movs	r1, #10
 80017c8:	4889      	ldr	r0, [pc, #548]	; (80019f0 <FreqMenu_DrawFreqPresetMenu+0x390>)
 80017ca:	f009 fd3b 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80017ce:	7bfb      	ldrb	r3, [r7, #15]
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017d6:	9301      	str	r3, [sp, #4]
 80017d8:	2302      	movs	r3, #2
 80017da:	9300      	str	r3, [sp, #0]
 80017dc:	2300      	movs	r3, #0
 80017de:	2178      	movs	r1, #120	; 0x78
 80017e0:	4884      	ldr	r0, [pc, #528]	; (80019f4 <FreqMenu_DrawFreqPresetMenu+0x394>)
 80017e2:	f009 fd2f 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80017e6:	7bbb      	ldrb	r3, [r7, #14]
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017ee:	9301      	str	r3, [sp, #4]
 80017f0:	2302      	movs	r3, #2
 80017f2:	9300      	str	r3, [sp, #0]
 80017f4:	2300      	movs	r3, #0
 80017f6:	2178      	movs	r1, #120	; 0x78
 80017f8:	487f      	ldr	r0, [pc, #508]	; (80019f8 <FreqMenu_DrawFreqPresetMenu+0x398>)
 80017fa:	f009 fd23 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80017fe:	7b7b      	ldrb	r3, [r7, #13]
 8001800:	b29a      	uxth	r2, r3
 8001802:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001806:	9301      	str	r3, [sp, #4]
 8001808:	2302      	movs	r3, #2
 800180a:	9300      	str	r3, [sp, #0]
 800180c:	2300      	movs	r3, #0
 800180e:	2178      	movs	r1, #120	; 0x78
 8001810:	487a      	ldr	r0, [pc, #488]	; (80019fc <FreqMenu_DrawFreqPresetMenu+0x39c>)
 8001812:	f009 fd17 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001816:	7b3b      	ldrb	r3, [r7, #12]
 8001818:	b29a      	uxth	r2, r3
 800181a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800181e:	9301      	str	r3, [sp, #4]
 8001820:	2302      	movs	r3, #2
 8001822:	9300      	str	r3, [sp, #0]
 8001824:	2300      	movs	r3, #0
 8001826:	2178      	movs	r1, #120	; 0x78
 8001828:	4875      	ldr	r0, [pc, #468]	; (8001a00 <FreqMenu_DrawFreqPresetMenu+0x3a0>)
 800182a:	f009 fd0b 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 800182e:	7afb      	ldrb	r3, [r7, #11]
 8001830:	b29a      	uxth	r2, r3
 8001832:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001836:	9301      	str	r3, [sp, #4]
 8001838:	2302      	movs	r3, #2
 800183a:	9300      	str	r3, [sp, #0]
 800183c:	2300      	movs	r3, #0
 800183e:	2178      	movs	r1, #120	; 0x78
 8001840:	4870      	ldr	r0, [pc, #448]	; (8001a04 <FreqMenu_DrawFreqPresetMenu+0x3a4>)
 8001842:	f009 fcff 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001846:	7abb      	ldrb	r3, [r7, #10]
 8001848:	b29a      	uxth	r2, r3
 800184a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800184e:	9301      	str	r3, [sp, #4]
 8001850:	2302      	movs	r3, #2
 8001852:	9300      	str	r3, [sp, #0]
 8001854:	2300      	movs	r3, #0
 8001856:	2178      	movs	r1, #120	; 0x78
 8001858:	486b      	ldr	r0, [pc, #428]	; (8001a08 <FreqMenu_DrawFreqPresetMenu+0x3a8>)
 800185a:	f009 fcf3 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 800185e:	7a7b      	ldrb	r3, [r7, #9]
 8001860:	b29a      	uxth	r2, r3
 8001862:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001866:	9301      	str	r3, [sp, #4]
 8001868:	2302      	movs	r3, #2
 800186a:	9300      	str	r3, [sp, #0]
 800186c:	2300      	movs	r3, #0
 800186e:	2178      	movs	r1, #120	; 0x78
 8001870:	4866      	ldr	r0, [pc, #408]	; (8001a0c <FreqMenu_DrawFreqPresetMenu+0x3ac>)
 8001872:	f009 fce7 	bl	800b244 <ILI9341_Draw_Text>
				break;
 8001876:	f001 b956 	b.w	8002b26 <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	b29a      	uxth	r2, r3
 800187e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001882:	9301      	str	r3, [sp, #4]
 8001884:	2302      	movs	r3, #2
 8001886:	9300      	str	r3, [sp, #0]
 8001888:	2300      	movs	r3, #0
 800188a:	210a      	movs	r1, #10
 800188c:	4852      	ldr	r0, [pc, #328]	; (80019d8 <FreqMenu_DrawFreqPresetMenu+0x378>)
 800188e:	f009 fcd9 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, WHITE, 2, BLACK);
 8001892:	7bbb      	ldrb	r3, [r7, #14]
 8001894:	b29a      	uxth	r2, r3
 8001896:	2300      	movs	r3, #0
 8001898:	9301      	str	r3, [sp, #4]
 800189a:	2302      	movs	r3, #2
 800189c:	9300      	str	r3, [sp, #0]
 800189e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018a2:	210a      	movs	r1, #10
 80018a4:	484d      	ldr	r0, [pc, #308]	; (80019dc <FreqMenu_DrawFreqPresetMenu+0x37c>)
 80018a6:	f009 fccd 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80018aa:	7b7b      	ldrb	r3, [r7, #13]
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018b2:	9301      	str	r3, [sp, #4]
 80018b4:	2302      	movs	r3, #2
 80018b6:	9300      	str	r3, [sp, #0]
 80018b8:	2300      	movs	r3, #0
 80018ba:	210a      	movs	r1, #10
 80018bc:	4848      	ldr	r0, [pc, #288]	; (80019e0 <FreqMenu_DrawFreqPresetMenu+0x380>)
 80018be:	f009 fcc1 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80018c2:	7b3b      	ldrb	r3, [r7, #12]
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ca:	9301      	str	r3, [sp, #4]
 80018cc:	2302      	movs	r3, #2
 80018ce:	9300      	str	r3, [sp, #0]
 80018d0:	2300      	movs	r3, #0
 80018d2:	210a      	movs	r1, #10
 80018d4:	4843      	ldr	r0, [pc, #268]	; (80019e4 <FreqMenu_DrawFreqPresetMenu+0x384>)
 80018d6:	f009 fcb5 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80018da:	7afb      	ldrb	r3, [r7, #11]
 80018dc:	b29a      	uxth	r2, r3
 80018de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018e2:	9301      	str	r3, [sp, #4]
 80018e4:	2302      	movs	r3, #2
 80018e6:	9300      	str	r3, [sp, #0]
 80018e8:	2300      	movs	r3, #0
 80018ea:	210a      	movs	r1, #10
 80018ec:	483e      	ldr	r0, [pc, #248]	; (80019e8 <FreqMenu_DrawFreqPresetMenu+0x388>)
 80018ee:	f009 fca9 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80018f2:	7abb      	ldrb	r3, [r7, #10]
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018fa:	9301      	str	r3, [sp, #4]
 80018fc:	2302      	movs	r3, #2
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	2300      	movs	r3, #0
 8001902:	210a      	movs	r1, #10
 8001904:	4839      	ldr	r0, [pc, #228]	; (80019ec <FreqMenu_DrawFreqPresetMenu+0x38c>)
 8001906:	f009 fc9d 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 800190a:	7a7b      	ldrb	r3, [r7, #9]
 800190c:	b29a      	uxth	r2, r3
 800190e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001912:	9301      	str	r3, [sp, #4]
 8001914:	2302      	movs	r3, #2
 8001916:	9300      	str	r3, [sp, #0]
 8001918:	2300      	movs	r3, #0
 800191a:	210a      	movs	r1, #10
 800191c:	4834      	ldr	r0, [pc, #208]	; (80019f0 <FreqMenu_DrawFreqPresetMenu+0x390>)
 800191e:	f009 fc91 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	b29a      	uxth	r2, r3
 8001926:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800192a:	9301      	str	r3, [sp, #4]
 800192c:	2302      	movs	r3, #2
 800192e:	9300      	str	r3, [sp, #0]
 8001930:	2300      	movs	r3, #0
 8001932:	2178      	movs	r1, #120	; 0x78
 8001934:	482f      	ldr	r0, [pc, #188]	; (80019f4 <FreqMenu_DrawFreqPresetMenu+0x394>)
 8001936:	f009 fc85 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800193a:	7bbb      	ldrb	r3, [r7, #14]
 800193c:	b29a      	uxth	r2, r3
 800193e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001942:	9301      	str	r3, [sp, #4]
 8001944:	2302      	movs	r3, #2
 8001946:	9300      	str	r3, [sp, #0]
 8001948:	2300      	movs	r3, #0
 800194a:	2178      	movs	r1, #120	; 0x78
 800194c:	482a      	ldr	r0, [pc, #168]	; (80019f8 <FreqMenu_DrawFreqPresetMenu+0x398>)
 800194e:	f009 fc79 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001952:	7b7b      	ldrb	r3, [r7, #13]
 8001954:	b29a      	uxth	r2, r3
 8001956:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800195a:	9301      	str	r3, [sp, #4]
 800195c:	2302      	movs	r3, #2
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	2300      	movs	r3, #0
 8001962:	2178      	movs	r1, #120	; 0x78
 8001964:	4825      	ldr	r0, [pc, #148]	; (80019fc <FreqMenu_DrawFreqPresetMenu+0x39c>)
 8001966:	f009 fc6d 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 800196a:	7b3b      	ldrb	r3, [r7, #12]
 800196c:	b29a      	uxth	r2, r3
 800196e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001972:	9301      	str	r3, [sp, #4]
 8001974:	2302      	movs	r3, #2
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	2300      	movs	r3, #0
 800197a:	2178      	movs	r1, #120	; 0x78
 800197c:	4820      	ldr	r0, [pc, #128]	; (8001a00 <FreqMenu_DrawFreqPresetMenu+0x3a0>)
 800197e:	f009 fc61 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001982:	7afb      	ldrb	r3, [r7, #11]
 8001984:	b29a      	uxth	r2, r3
 8001986:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800198a:	9301      	str	r3, [sp, #4]
 800198c:	2302      	movs	r3, #2
 800198e:	9300      	str	r3, [sp, #0]
 8001990:	2300      	movs	r3, #0
 8001992:	2178      	movs	r1, #120	; 0x78
 8001994:	481b      	ldr	r0, [pc, #108]	; (8001a04 <FreqMenu_DrawFreqPresetMenu+0x3a4>)
 8001996:	f009 fc55 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 800199a:	7abb      	ldrb	r3, [r7, #10]
 800199c:	b29a      	uxth	r2, r3
 800199e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019a2:	9301      	str	r3, [sp, #4]
 80019a4:	2302      	movs	r3, #2
 80019a6:	9300      	str	r3, [sp, #0]
 80019a8:	2300      	movs	r3, #0
 80019aa:	2178      	movs	r1, #120	; 0x78
 80019ac:	4816      	ldr	r0, [pc, #88]	; (8001a08 <FreqMenu_DrawFreqPresetMenu+0x3a8>)
 80019ae:	f009 fc49 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80019b2:	7a7b      	ldrb	r3, [r7, #9]
 80019b4:	b29a      	uxth	r2, r3
 80019b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019ba:	9301      	str	r3, [sp, #4]
 80019bc:	2302      	movs	r3, #2
 80019be:	9300      	str	r3, [sp, #0]
 80019c0:	2300      	movs	r3, #0
 80019c2:	2178      	movs	r1, #120	; 0x78
 80019c4:	4811      	ldr	r0, [pc, #68]	; (8001a0c <FreqMenu_DrawFreqPresetMenu+0x3ac>)
 80019c6:	f009 fc3d 	bl	800b244 <ILI9341_Draw_Text>
				break;
 80019ca:	f001 b8ac 	b.w	8002b26 <FreqMenu_DrawFreqPresetMenu+0x14c6>
 80019ce:	bf00      	nop
 80019d0:	000124f8 	.word	0x000124f8
 80019d4:	000186a0 	.word	0x000186a0
 80019d8:	0800e864 	.word	0x0800e864
 80019dc:	0800e86c 	.word	0x0800e86c
 80019e0:	0800e874 	.word	0x0800e874
 80019e4:	0800e87c 	.word	0x0800e87c
 80019e8:	0800e884 	.word	0x0800e884
 80019ec:	0800e88c 	.word	0x0800e88c
 80019f0:	0800e894 	.word	0x0800e894
 80019f4:	0800e89c 	.word	0x0800e89c
 80019f8:	0800e8a4 	.word	0x0800e8a4
 80019fc:	0800e8ac 	.word	0x0800e8ac
 8001a00:	0800e8b4 	.word	0x0800e8b4
 8001a04:	0800e8bc 	.word	0x0800e8bc
 8001a08:	0800e8c4 	.word	0x0800e8c4
 8001a0c:	0800e8cc 	.word	0x0800e8cc
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a18:	9301      	str	r3, [sp, #4]
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	9300      	str	r3, [sp, #0]
 8001a1e:	2300      	movs	r3, #0
 8001a20:	210a      	movs	r1, #10
 8001a22:	48a5      	ldr	r0, [pc, #660]	; (8001cb8 <FreqMenu_DrawFreqPresetMenu+0x658>)
 8001a24:	f009 fc0e 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001a28:	7bbb      	ldrb	r3, [r7, #14]
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a30:	9301      	str	r3, [sp, #4]
 8001a32:	2302      	movs	r3, #2
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	2300      	movs	r3, #0
 8001a38:	210a      	movs	r1, #10
 8001a3a:	48a0      	ldr	r0, [pc, #640]	; (8001cbc <FreqMenu_DrawFreqPresetMenu+0x65c>)
 8001a3c:	f009 fc02 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, WHITE, 2, BLACK);
 8001a40:	7b7b      	ldrb	r3, [r7, #13]
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	2300      	movs	r3, #0
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	2302      	movs	r3, #2
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a50:	210a      	movs	r1, #10
 8001a52:	489b      	ldr	r0, [pc, #620]	; (8001cc0 <FreqMenu_DrawFreqPresetMenu+0x660>)
 8001a54:	f009 fbf6 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001a58:	7b3b      	ldrb	r3, [r7, #12]
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a60:	9301      	str	r3, [sp, #4]
 8001a62:	2302      	movs	r3, #2
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	2300      	movs	r3, #0
 8001a68:	210a      	movs	r1, #10
 8001a6a:	4896      	ldr	r0, [pc, #600]	; (8001cc4 <FreqMenu_DrawFreqPresetMenu+0x664>)
 8001a6c:	f009 fbea 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001a70:	7afb      	ldrb	r3, [r7, #11]
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	210a      	movs	r1, #10
 8001a82:	4891      	ldr	r0, [pc, #580]	; (8001cc8 <FreqMenu_DrawFreqPresetMenu+0x668>)
 8001a84:	f009 fbde 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001a88:	7abb      	ldrb	r3, [r7, #10]
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a90:	9301      	str	r3, [sp, #4]
 8001a92:	2302      	movs	r3, #2
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	2300      	movs	r3, #0
 8001a98:	210a      	movs	r1, #10
 8001a9a:	488c      	ldr	r0, [pc, #560]	; (8001ccc <FreqMenu_DrawFreqPresetMenu+0x66c>)
 8001a9c:	f009 fbd2 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001aa0:	7a7b      	ldrb	r3, [r7, #9]
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aa8:	9301      	str	r3, [sp, #4]
 8001aaa:	2302      	movs	r3, #2
 8001aac:	9300      	str	r3, [sp, #0]
 8001aae:	2300      	movs	r3, #0
 8001ab0:	210a      	movs	r1, #10
 8001ab2:	4887      	ldr	r0, [pc, #540]	; (8001cd0 <FreqMenu_DrawFreqPresetMenu+0x670>)
 8001ab4:	f009 fbc6 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ac0:	9301      	str	r3, [sp, #4]
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	9300      	str	r3, [sp, #0]
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	2178      	movs	r1, #120	; 0x78
 8001aca:	4882      	ldr	r0, [pc, #520]	; (8001cd4 <FreqMenu_DrawFreqPresetMenu+0x674>)
 8001acc:	f009 fbba 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001ad0:	7bbb      	ldrb	r3, [r7, #14]
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ad8:	9301      	str	r3, [sp, #4]
 8001ada:	2302      	movs	r3, #2
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	2300      	movs	r3, #0
 8001ae0:	2178      	movs	r1, #120	; 0x78
 8001ae2:	487d      	ldr	r0, [pc, #500]	; (8001cd8 <FreqMenu_DrawFreqPresetMenu+0x678>)
 8001ae4:	f009 fbae 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001ae8:	7b7b      	ldrb	r3, [r7, #13]
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001af0:	9301      	str	r3, [sp, #4]
 8001af2:	2302      	movs	r3, #2
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	2300      	movs	r3, #0
 8001af8:	2178      	movs	r1, #120	; 0x78
 8001afa:	4878      	ldr	r0, [pc, #480]	; (8001cdc <FreqMenu_DrawFreqPresetMenu+0x67c>)
 8001afc:	f009 fba2 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001b00:	7b3b      	ldrb	r3, [r7, #12]
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b08:	9301      	str	r3, [sp, #4]
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	9300      	str	r3, [sp, #0]
 8001b0e:	2300      	movs	r3, #0
 8001b10:	2178      	movs	r1, #120	; 0x78
 8001b12:	4873      	ldr	r0, [pc, #460]	; (8001ce0 <FreqMenu_DrawFreqPresetMenu+0x680>)
 8001b14:	f009 fb96 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001b18:	7afb      	ldrb	r3, [r7, #11]
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b20:	9301      	str	r3, [sp, #4]
 8001b22:	2302      	movs	r3, #2
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	2300      	movs	r3, #0
 8001b28:	2178      	movs	r1, #120	; 0x78
 8001b2a:	486e      	ldr	r0, [pc, #440]	; (8001ce4 <FreqMenu_DrawFreqPresetMenu+0x684>)
 8001b2c:	f009 fb8a 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001b30:	7abb      	ldrb	r3, [r7, #10]
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b38:	9301      	str	r3, [sp, #4]
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	9300      	str	r3, [sp, #0]
 8001b3e:	2300      	movs	r3, #0
 8001b40:	2178      	movs	r1, #120	; 0x78
 8001b42:	4869      	ldr	r0, [pc, #420]	; (8001ce8 <FreqMenu_DrawFreqPresetMenu+0x688>)
 8001b44:	f009 fb7e 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001b48:	7a7b      	ldrb	r3, [r7, #9]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b50:	9301      	str	r3, [sp, #4]
 8001b52:	2302      	movs	r3, #2
 8001b54:	9300      	str	r3, [sp, #0]
 8001b56:	2300      	movs	r3, #0
 8001b58:	2178      	movs	r1, #120	; 0x78
 8001b5a:	4864      	ldr	r0, [pc, #400]	; (8001cec <FreqMenu_DrawFreqPresetMenu+0x68c>)
 8001b5c:	f009 fb72 	bl	800b244 <ILI9341_Draw_Text>
				break;
 8001b60:	f000 bfe1 	b.w	8002b26 <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
 8001b66:	b29a      	uxth	r2, r3
 8001b68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b6c:	9301      	str	r3, [sp, #4]
 8001b6e:	2302      	movs	r3, #2
 8001b70:	9300      	str	r3, [sp, #0]
 8001b72:	2300      	movs	r3, #0
 8001b74:	210a      	movs	r1, #10
 8001b76:	4850      	ldr	r0, [pc, #320]	; (8001cb8 <FreqMenu_DrawFreqPresetMenu+0x658>)
 8001b78:	f009 fb64 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001b7c:	7bbb      	ldrb	r3, [r7, #14]
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b84:	9301      	str	r3, [sp, #4]
 8001b86:	2302      	movs	r3, #2
 8001b88:	9300      	str	r3, [sp, #0]
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	210a      	movs	r1, #10
 8001b8e:	484b      	ldr	r0, [pc, #300]	; (8001cbc <FreqMenu_DrawFreqPresetMenu+0x65c>)
 8001b90:	f009 fb58 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001b94:	7b7b      	ldrb	r3, [r7, #13]
 8001b96:	b29a      	uxth	r2, r3
 8001b98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b9c:	9301      	str	r3, [sp, #4]
 8001b9e:	2302      	movs	r3, #2
 8001ba0:	9300      	str	r3, [sp, #0]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	210a      	movs	r1, #10
 8001ba6:	4846      	ldr	r0, [pc, #280]	; (8001cc0 <FreqMenu_DrawFreqPresetMenu+0x660>)
 8001ba8:	f009 fb4c 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, WHITE, 2, BLACK);
 8001bac:	7b3b      	ldrb	r3, [r7, #12]
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	9301      	str	r3, [sp, #4]
 8001bb4:	2302      	movs	r3, #2
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bbc:	210a      	movs	r1, #10
 8001bbe:	4841      	ldr	r0, [pc, #260]	; (8001cc4 <FreqMenu_DrawFreqPresetMenu+0x664>)
 8001bc0:	f009 fb40 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001bc4:	7afb      	ldrb	r3, [r7, #11]
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bcc:	9301      	str	r3, [sp, #4]
 8001bce:	2302      	movs	r3, #2
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	210a      	movs	r1, #10
 8001bd6:	483c      	ldr	r0, [pc, #240]	; (8001cc8 <FreqMenu_DrawFreqPresetMenu+0x668>)
 8001bd8:	f009 fb34 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001bdc:	7abb      	ldrb	r3, [r7, #10]
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001be4:	9301      	str	r3, [sp, #4]
 8001be6:	2302      	movs	r3, #2
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	2300      	movs	r3, #0
 8001bec:	210a      	movs	r1, #10
 8001bee:	4837      	ldr	r0, [pc, #220]	; (8001ccc <FreqMenu_DrawFreqPresetMenu+0x66c>)
 8001bf0:	f009 fb28 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001bf4:	7a7b      	ldrb	r3, [r7, #9]
 8001bf6:	b29a      	uxth	r2, r3
 8001bf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bfc:	9301      	str	r3, [sp, #4]
 8001bfe:	2302      	movs	r3, #2
 8001c00:	9300      	str	r3, [sp, #0]
 8001c02:	2300      	movs	r3, #0
 8001c04:	210a      	movs	r1, #10
 8001c06:	4832      	ldr	r0, [pc, #200]	; (8001cd0 <FreqMenu_DrawFreqPresetMenu+0x670>)
 8001c08:	f009 fb1c 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
 8001c0e:	b29a      	uxth	r2, r3
 8001c10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c14:	9301      	str	r3, [sp, #4]
 8001c16:	2302      	movs	r3, #2
 8001c18:	9300      	str	r3, [sp, #0]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	2178      	movs	r1, #120	; 0x78
 8001c1e:	482d      	ldr	r0, [pc, #180]	; (8001cd4 <FreqMenu_DrawFreqPresetMenu+0x674>)
 8001c20:	f009 fb10 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001c24:	7bbb      	ldrb	r3, [r7, #14]
 8001c26:	b29a      	uxth	r2, r3
 8001c28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c2c:	9301      	str	r3, [sp, #4]
 8001c2e:	2302      	movs	r3, #2
 8001c30:	9300      	str	r3, [sp, #0]
 8001c32:	2300      	movs	r3, #0
 8001c34:	2178      	movs	r1, #120	; 0x78
 8001c36:	4828      	ldr	r0, [pc, #160]	; (8001cd8 <FreqMenu_DrawFreqPresetMenu+0x678>)
 8001c38:	f009 fb04 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001c3c:	7b7b      	ldrb	r3, [r7, #13]
 8001c3e:	b29a      	uxth	r2, r3
 8001c40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c44:	9301      	str	r3, [sp, #4]
 8001c46:	2302      	movs	r3, #2
 8001c48:	9300      	str	r3, [sp, #0]
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	2178      	movs	r1, #120	; 0x78
 8001c4e:	4823      	ldr	r0, [pc, #140]	; (8001cdc <FreqMenu_DrawFreqPresetMenu+0x67c>)
 8001c50:	f009 faf8 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001c54:	7b3b      	ldrb	r3, [r7, #12]
 8001c56:	b29a      	uxth	r2, r3
 8001c58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c5c:	9301      	str	r3, [sp, #4]
 8001c5e:	2302      	movs	r3, #2
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	2300      	movs	r3, #0
 8001c64:	2178      	movs	r1, #120	; 0x78
 8001c66:	481e      	ldr	r0, [pc, #120]	; (8001ce0 <FreqMenu_DrawFreqPresetMenu+0x680>)
 8001c68:	f009 faec 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001c6c:	7afb      	ldrb	r3, [r7, #11]
 8001c6e:	b29a      	uxth	r2, r3
 8001c70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c74:	9301      	str	r3, [sp, #4]
 8001c76:	2302      	movs	r3, #2
 8001c78:	9300      	str	r3, [sp, #0]
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	2178      	movs	r1, #120	; 0x78
 8001c7e:	4819      	ldr	r0, [pc, #100]	; (8001ce4 <FreqMenu_DrawFreqPresetMenu+0x684>)
 8001c80:	f009 fae0 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001c84:	7abb      	ldrb	r3, [r7, #10]
 8001c86:	b29a      	uxth	r2, r3
 8001c88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c8c:	9301      	str	r3, [sp, #4]
 8001c8e:	2302      	movs	r3, #2
 8001c90:	9300      	str	r3, [sp, #0]
 8001c92:	2300      	movs	r3, #0
 8001c94:	2178      	movs	r1, #120	; 0x78
 8001c96:	4814      	ldr	r0, [pc, #80]	; (8001ce8 <FreqMenu_DrawFreqPresetMenu+0x688>)
 8001c98:	f009 fad4 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001c9c:	7a7b      	ldrb	r3, [r7, #9]
 8001c9e:	b29a      	uxth	r2, r3
 8001ca0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ca4:	9301      	str	r3, [sp, #4]
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	2300      	movs	r3, #0
 8001cac:	2178      	movs	r1, #120	; 0x78
 8001cae:	480f      	ldr	r0, [pc, #60]	; (8001cec <FreqMenu_DrawFreqPresetMenu+0x68c>)
 8001cb0:	f009 fac8 	bl	800b244 <ILI9341_Draw_Text>
				break;
 8001cb4:	f000 bf37 	b.w	8002b26 <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8001cb8:	0800e864 	.word	0x0800e864
 8001cbc:	0800e86c 	.word	0x0800e86c
 8001cc0:	0800e874 	.word	0x0800e874
 8001cc4:	0800e87c 	.word	0x0800e87c
 8001cc8:	0800e884 	.word	0x0800e884
 8001ccc:	0800e88c 	.word	0x0800e88c
 8001cd0:	0800e894 	.word	0x0800e894
 8001cd4:	0800e89c 	.word	0x0800e89c
 8001cd8:	0800e8a4 	.word	0x0800e8a4
 8001cdc:	0800e8ac 	.word	0x0800e8ac
 8001ce0:	0800e8b4 	.word	0x0800e8b4
 8001ce4:	0800e8bc 	.word	0x0800e8bc
 8001ce8:	0800e8c4 	.word	0x0800e8c4
 8001cec:	0800e8cc 	.word	0x0800e8cc
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cf8:	9301      	str	r3, [sp, #4]
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	9300      	str	r3, [sp, #0]
 8001cfe:	2300      	movs	r3, #0
 8001d00:	210a      	movs	r1, #10
 8001d02:	48a5      	ldr	r0, [pc, #660]	; (8001f98 <FreqMenu_DrawFreqPresetMenu+0x938>)
 8001d04:	f009 fa9e 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001d08:	7bbb      	ldrb	r3, [r7, #14]
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d10:	9301      	str	r3, [sp, #4]
 8001d12:	2302      	movs	r3, #2
 8001d14:	9300      	str	r3, [sp, #0]
 8001d16:	2300      	movs	r3, #0
 8001d18:	210a      	movs	r1, #10
 8001d1a:	48a0      	ldr	r0, [pc, #640]	; (8001f9c <FreqMenu_DrawFreqPresetMenu+0x93c>)
 8001d1c:	f009 fa92 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001d20:	7b7b      	ldrb	r3, [r7, #13]
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d28:	9301      	str	r3, [sp, #4]
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	2300      	movs	r3, #0
 8001d30:	210a      	movs	r1, #10
 8001d32:	489b      	ldr	r0, [pc, #620]	; (8001fa0 <FreqMenu_DrawFreqPresetMenu+0x940>)
 8001d34:	f009 fa86 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001d38:	7b3b      	ldrb	r3, [r7, #12]
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d40:	9301      	str	r3, [sp, #4]
 8001d42:	2302      	movs	r3, #2
 8001d44:	9300      	str	r3, [sp, #0]
 8001d46:	2300      	movs	r3, #0
 8001d48:	210a      	movs	r1, #10
 8001d4a:	4896      	ldr	r0, [pc, #600]	; (8001fa4 <FreqMenu_DrawFreqPresetMenu+0x944>)
 8001d4c:	f009 fa7a 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, WHITE, 2, BLACK);
 8001d50:	7afb      	ldrb	r3, [r7, #11]
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	2300      	movs	r3, #0
 8001d56:	9301      	str	r3, [sp, #4]
 8001d58:	2302      	movs	r3, #2
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d60:	210a      	movs	r1, #10
 8001d62:	4891      	ldr	r0, [pc, #580]	; (8001fa8 <FreqMenu_DrawFreqPresetMenu+0x948>)
 8001d64:	f009 fa6e 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001d68:	7abb      	ldrb	r3, [r7, #10]
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d70:	9301      	str	r3, [sp, #4]
 8001d72:	2302      	movs	r3, #2
 8001d74:	9300      	str	r3, [sp, #0]
 8001d76:	2300      	movs	r3, #0
 8001d78:	210a      	movs	r1, #10
 8001d7a:	488c      	ldr	r0, [pc, #560]	; (8001fac <FreqMenu_DrawFreqPresetMenu+0x94c>)
 8001d7c:	f009 fa62 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001d80:	7a7b      	ldrb	r3, [r7, #9]
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d88:	9301      	str	r3, [sp, #4]
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	210a      	movs	r1, #10
 8001d92:	4887      	ldr	r0, [pc, #540]	; (8001fb0 <FreqMenu_DrawFreqPresetMenu+0x950>)
 8001d94:	f009 fa56 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001da0:	9301      	str	r3, [sp, #4]
 8001da2:	2302      	movs	r3, #2
 8001da4:	9300      	str	r3, [sp, #0]
 8001da6:	2300      	movs	r3, #0
 8001da8:	2178      	movs	r1, #120	; 0x78
 8001daa:	4882      	ldr	r0, [pc, #520]	; (8001fb4 <FreqMenu_DrawFreqPresetMenu+0x954>)
 8001dac:	f009 fa4a 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001db0:	7bbb      	ldrb	r3, [r7, #14]
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001db8:	9301      	str	r3, [sp, #4]
 8001dba:	2302      	movs	r3, #2
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	2178      	movs	r1, #120	; 0x78
 8001dc2:	487d      	ldr	r0, [pc, #500]	; (8001fb8 <FreqMenu_DrawFreqPresetMenu+0x958>)
 8001dc4:	f009 fa3e 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001dc8:	7b7b      	ldrb	r3, [r7, #13]
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dd0:	9301      	str	r3, [sp, #4]
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	2178      	movs	r1, #120	; 0x78
 8001dda:	4878      	ldr	r0, [pc, #480]	; (8001fbc <FreqMenu_DrawFreqPresetMenu+0x95c>)
 8001ddc:	f009 fa32 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001de0:	7b3b      	ldrb	r3, [r7, #12]
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001de8:	9301      	str	r3, [sp, #4]
 8001dea:	2302      	movs	r3, #2
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	2300      	movs	r3, #0
 8001df0:	2178      	movs	r1, #120	; 0x78
 8001df2:	4873      	ldr	r0, [pc, #460]	; (8001fc0 <FreqMenu_DrawFreqPresetMenu+0x960>)
 8001df4:	f009 fa26 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001df8:	7afb      	ldrb	r3, [r7, #11]
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e00:	9301      	str	r3, [sp, #4]
 8001e02:	2302      	movs	r3, #2
 8001e04:	9300      	str	r3, [sp, #0]
 8001e06:	2300      	movs	r3, #0
 8001e08:	2178      	movs	r1, #120	; 0x78
 8001e0a:	486e      	ldr	r0, [pc, #440]	; (8001fc4 <FreqMenu_DrawFreqPresetMenu+0x964>)
 8001e0c:	f009 fa1a 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001e10:	7abb      	ldrb	r3, [r7, #10]
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e18:	9301      	str	r3, [sp, #4]
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	9300      	str	r3, [sp, #0]
 8001e1e:	2300      	movs	r3, #0
 8001e20:	2178      	movs	r1, #120	; 0x78
 8001e22:	4869      	ldr	r0, [pc, #420]	; (8001fc8 <FreqMenu_DrawFreqPresetMenu+0x968>)
 8001e24:	f009 fa0e 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001e28:	7a7b      	ldrb	r3, [r7, #9]
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e30:	9301      	str	r3, [sp, #4]
 8001e32:	2302      	movs	r3, #2
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	2300      	movs	r3, #0
 8001e38:	2178      	movs	r1, #120	; 0x78
 8001e3a:	4864      	ldr	r0, [pc, #400]	; (8001fcc <FreqMenu_DrawFreqPresetMenu+0x96c>)
 8001e3c:	f009 fa02 	bl	800b244 <ILI9341_Draw_Text>
				break;
 8001e40:	f000 be71 	b.w	8002b26 <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001e44:	7bfb      	ldrb	r3, [r7, #15]
 8001e46:	b29a      	uxth	r2, r3
 8001e48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e4c:	9301      	str	r3, [sp, #4]
 8001e4e:	2302      	movs	r3, #2
 8001e50:	9300      	str	r3, [sp, #0]
 8001e52:	2300      	movs	r3, #0
 8001e54:	210a      	movs	r1, #10
 8001e56:	4850      	ldr	r0, [pc, #320]	; (8001f98 <FreqMenu_DrawFreqPresetMenu+0x938>)
 8001e58:	f009 f9f4 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001e5c:	7bbb      	ldrb	r3, [r7, #14]
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e64:	9301      	str	r3, [sp, #4]
 8001e66:	2302      	movs	r3, #2
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	210a      	movs	r1, #10
 8001e6e:	484b      	ldr	r0, [pc, #300]	; (8001f9c <FreqMenu_DrawFreqPresetMenu+0x93c>)
 8001e70:	f009 f9e8 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001e74:	7b7b      	ldrb	r3, [r7, #13]
 8001e76:	b29a      	uxth	r2, r3
 8001e78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e7c:	9301      	str	r3, [sp, #4]
 8001e7e:	2302      	movs	r3, #2
 8001e80:	9300      	str	r3, [sp, #0]
 8001e82:	2300      	movs	r3, #0
 8001e84:	210a      	movs	r1, #10
 8001e86:	4846      	ldr	r0, [pc, #280]	; (8001fa0 <FreqMenu_DrawFreqPresetMenu+0x940>)
 8001e88:	f009 f9dc 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001e8c:	7b3b      	ldrb	r3, [r7, #12]
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e94:	9301      	str	r3, [sp, #4]
 8001e96:	2302      	movs	r3, #2
 8001e98:	9300      	str	r3, [sp, #0]
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	210a      	movs	r1, #10
 8001e9e:	4841      	ldr	r0, [pc, #260]	; (8001fa4 <FreqMenu_DrawFreqPresetMenu+0x944>)
 8001ea0:	f009 f9d0 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001ea4:	7afb      	ldrb	r3, [r7, #11]
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eac:	9301      	str	r3, [sp, #4]
 8001eae:	2302      	movs	r3, #2
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	210a      	movs	r1, #10
 8001eb6:	483c      	ldr	r0, [pc, #240]	; (8001fa8 <FreqMenu_DrawFreqPresetMenu+0x948>)
 8001eb8:	f009 f9c4 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, WHITE, 2, BLACK);
 8001ebc:	7abb      	ldrb	r3, [r7, #10]
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	9301      	str	r3, [sp, #4]
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	9300      	str	r3, [sp, #0]
 8001ec8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ecc:	210a      	movs	r1, #10
 8001ece:	4837      	ldr	r0, [pc, #220]	; (8001fac <FreqMenu_DrawFreqPresetMenu+0x94c>)
 8001ed0:	f009 f9b8 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001ed4:	7a7b      	ldrb	r3, [r7, #9]
 8001ed6:	b29a      	uxth	r2, r3
 8001ed8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001edc:	9301      	str	r3, [sp, #4]
 8001ede:	2302      	movs	r3, #2
 8001ee0:	9300      	str	r3, [sp, #0]
 8001ee2:	2300      	movs	r3, #0
 8001ee4:	210a      	movs	r1, #10
 8001ee6:	4832      	ldr	r0, [pc, #200]	; (8001fb0 <FreqMenu_DrawFreqPresetMenu+0x950>)
 8001ee8:	f009 f9ac 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ef4:	9301      	str	r3, [sp, #4]
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	9300      	str	r3, [sp, #0]
 8001efa:	2300      	movs	r3, #0
 8001efc:	2178      	movs	r1, #120	; 0x78
 8001efe:	482d      	ldr	r0, [pc, #180]	; (8001fb4 <FreqMenu_DrawFreqPresetMenu+0x954>)
 8001f00:	f009 f9a0 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001f04:	7bbb      	ldrb	r3, [r7, #14]
 8001f06:	b29a      	uxth	r2, r3
 8001f08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f0c:	9301      	str	r3, [sp, #4]
 8001f0e:	2302      	movs	r3, #2
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	2300      	movs	r3, #0
 8001f14:	2178      	movs	r1, #120	; 0x78
 8001f16:	4828      	ldr	r0, [pc, #160]	; (8001fb8 <FreqMenu_DrawFreqPresetMenu+0x958>)
 8001f18:	f009 f994 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001f1c:	7b7b      	ldrb	r3, [r7, #13]
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f24:	9301      	str	r3, [sp, #4]
 8001f26:	2302      	movs	r3, #2
 8001f28:	9300      	str	r3, [sp, #0]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	2178      	movs	r1, #120	; 0x78
 8001f2e:	4823      	ldr	r0, [pc, #140]	; (8001fbc <FreqMenu_DrawFreqPresetMenu+0x95c>)
 8001f30:	f009 f988 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001f34:	7b3b      	ldrb	r3, [r7, #12]
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f3c:	9301      	str	r3, [sp, #4]
 8001f3e:	2302      	movs	r3, #2
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	2300      	movs	r3, #0
 8001f44:	2178      	movs	r1, #120	; 0x78
 8001f46:	481e      	ldr	r0, [pc, #120]	; (8001fc0 <FreqMenu_DrawFreqPresetMenu+0x960>)
 8001f48:	f009 f97c 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001f4c:	7afb      	ldrb	r3, [r7, #11]
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f54:	9301      	str	r3, [sp, #4]
 8001f56:	2302      	movs	r3, #2
 8001f58:	9300      	str	r3, [sp, #0]
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	2178      	movs	r1, #120	; 0x78
 8001f5e:	4819      	ldr	r0, [pc, #100]	; (8001fc4 <FreqMenu_DrawFreqPresetMenu+0x964>)
 8001f60:	f009 f970 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001f64:	7abb      	ldrb	r3, [r7, #10]
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f6c:	9301      	str	r3, [sp, #4]
 8001f6e:	2302      	movs	r3, #2
 8001f70:	9300      	str	r3, [sp, #0]
 8001f72:	2300      	movs	r3, #0
 8001f74:	2178      	movs	r1, #120	; 0x78
 8001f76:	4814      	ldr	r0, [pc, #80]	; (8001fc8 <FreqMenu_DrawFreqPresetMenu+0x968>)
 8001f78:	f009 f964 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001f7c:	7a7b      	ldrb	r3, [r7, #9]
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f84:	9301      	str	r3, [sp, #4]
 8001f86:	2302      	movs	r3, #2
 8001f88:	9300      	str	r3, [sp, #0]
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	2178      	movs	r1, #120	; 0x78
 8001f8e:	480f      	ldr	r0, [pc, #60]	; (8001fcc <FreqMenu_DrawFreqPresetMenu+0x96c>)
 8001f90:	f009 f958 	bl	800b244 <ILI9341_Draw_Text>
				break;
 8001f94:	f000 bdc7 	b.w	8002b26 <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8001f98:	0800e864 	.word	0x0800e864
 8001f9c:	0800e86c 	.word	0x0800e86c
 8001fa0:	0800e874 	.word	0x0800e874
 8001fa4:	0800e87c 	.word	0x0800e87c
 8001fa8:	0800e884 	.word	0x0800e884
 8001fac:	0800e88c 	.word	0x0800e88c
 8001fb0:	0800e894 	.word	0x0800e894
 8001fb4:	0800e89c 	.word	0x0800e89c
 8001fb8:	0800e8a4 	.word	0x0800e8a4
 8001fbc:	0800e8ac 	.word	0x0800e8ac
 8001fc0:	0800e8b4 	.word	0x0800e8b4
 8001fc4:	0800e8bc 	.word	0x0800e8bc
 8001fc8:	0800e8c4 	.word	0x0800e8c4
 8001fcc:	0800e8cc 	.word	0x0800e8cc
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fd8:	9301      	str	r3, [sp, #4]
 8001fda:	2302      	movs	r3, #2
 8001fdc:	9300      	str	r3, [sp, #0]
 8001fde:	2300      	movs	r3, #0
 8001fe0:	210a      	movs	r1, #10
 8001fe2:	48a5      	ldr	r0, [pc, #660]	; (8002278 <FreqMenu_DrawFreqPresetMenu+0xc18>)
 8001fe4:	f009 f92e 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001fe8:	7bbb      	ldrb	r3, [r7, #14]
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ff0:	9301      	str	r3, [sp, #4]
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	210a      	movs	r1, #10
 8001ffa:	48a0      	ldr	r0, [pc, #640]	; (800227c <FreqMenu_DrawFreqPresetMenu+0xc1c>)
 8001ffc:	f009 f922 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002000:	7b7b      	ldrb	r3, [r7, #13]
 8002002:	b29a      	uxth	r2, r3
 8002004:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002008:	9301      	str	r3, [sp, #4]
 800200a:	2302      	movs	r3, #2
 800200c:	9300      	str	r3, [sp, #0]
 800200e:	2300      	movs	r3, #0
 8002010:	210a      	movs	r1, #10
 8002012:	489b      	ldr	r0, [pc, #620]	; (8002280 <FreqMenu_DrawFreqPresetMenu+0xc20>)
 8002014:	f009 f916 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002018:	7b3b      	ldrb	r3, [r7, #12]
 800201a:	b29a      	uxth	r2, r3
 800201c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002020:	9301      	str	r3, [sp, #4]
 8002022:	2302      	movs	r3, #2
 8002024:	9300      	str	r3, [sp, #0]
 8002026:	2300      	movs	r3, #0
 8002028:	210a      	movs	r1, #10
 800202a:	4896      	ldr	r0, [pc, #600]	; (8002284 <FreqMenu_DrawFreqPresetMenu+0xc24>)
 800202c:	f009 f90a 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002030:	7afb      	ldrb	r3, [r7, #11]
 8002032:	b29a      	uxth	r2, r3
 8002034:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002038:	9301      	str	r3, [sp, #4]
 800203a:	2302      	movs	r3, #2
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	2300      	movs	r3, #0
 8002040:	210a      	movs	r1, #10
 8002042:	4891      	ldr	r0, [pc, #580]	; (8002288 <FreqMenu_DrawFreqPresetMenu+0xc28>)
 8002044:	f009 f8fe 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002048:	7abb      	ldrb	r3, [r7, #10]
 800204a:	b29a      	uxth	r2, r3
 800204c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002050:	9301      	str	r3, [sp, #4]
 8002052:	2302      	movs	r3, #2
 8002054:	9300      	str	r3, [sp, #0]
 8002056:	2300      	movs	r3, #0
 8002058:	210a      	movs	r1, #10
 800205a:	488c      	ldr	r0, [pc, #560]	; (800228c <FreqMenu_DrawFreqPresetMenu+0xc2c>)
 800205c:	f009 f8f2 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, WHITE, 2, BLACK);
 8002060:	7a7b      	ldrb	r3, [r7, #9]
 8002062:	b29a      	uxth	r2, r3
 8002064:	2300      	movs	r3, #0
 8002066:	9301      	str	r3, [sp, #4]
 8002068:	2302      	movs	r3, #2
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002070:	210a      	movs	r1, #10
 8002072:	4887      	ldr	r0, [pc, #540]	; (8002290 <FreqMenu_DrawFreqPresetMenu+0xc30>)
 8002074:	f009 f8e6 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002078:	7bfb      	ldrb	r3, [r7, #15]
 800207a:	b29a      	uxth	r2, r3
 800207c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002080:	9301      	str	r3, [sp, #4]
 8002082:	2302      	movs	r3, #2
 8002084:	9300      	str	r3, [sp, #0]
 8002086:	2300      	movs	r3, #0
 8002088:	2178      	movs	r1, #120	; 0x78
 800208a:	4882      	ldr	r0, [pc, #520]	; (8002294 <FreqMenu_DrawFreqPresetMenu+0xc34>)
 800208c:	f009 f8da 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002090:	7bbb      	ldrb	r3, [r7, #14]
 8002092:	b29a      	uxth	r2, r3
 8002094:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002098:	9301      	str	r3, [sp, #4]
 800209a:	2302      	movs	r3, #2
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	2300      	movs	r3, #0
 80020a0:	2178      	movs	r1, #120	; 0x78
 80020a2:	487d      	ldr	r0, [pc, #500]	; (8002298 <FreqMenu_DrawFreqPresetMenu+0xc38>)
 80020a4:	f009 f8ce 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80020a8:	7b7b      	ldrb	r3, [r7, #13]
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020b0:	9301      	str	r3, [sp, #4]
 80020b2:	2302      	movs	r3, #2
 80020b4:	9300      	str	r3, [sp, #0]
 80020b6:	2300      	movs	r3, #0
 80020b8:	2178      	movs	r1, #120	; 0x78
 80020ba:	4878      	ldr	r0, [pc, #480]	; (800229c <FreqMenu_DrawFreqPresetMenu+0xc3c>)
 80020bc:	f009 f8c2 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80020c0:	7b3b      	ldrb	r3, [r7, #12]
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020c8:	9301      	str	r3, [sp, #4]
 80020ca:	2302      	movs	r3, #2
 80020cc:	9300      	str	r3, [sp, #0]
 80020ce:	2300      	movs	r3, #0
 80020d0:	2178      	movs	r1, #120	; 0x78
 80020d2:	4873      	ldr	r0, [pc, #460]	; (80022a0 <FreqMenu_DrawFreqPresetMenu+0xc40>)
 80020d4:	f009 f8b6 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80020d8:	7afb      	ldrb	r3, [r7, #11]
 80020da:	b29a      	uxth	r2, r3
 80020dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020e0:	9301      	str	r3, [sp, #4]
 80020e2:	2302      	movs	r3, #2
 80020e4:	9300      	str	r3, [sp, #0]
 80020e6:	2300      	movs	r3, #0
 80020e8:	2178      	movs	r1, #120	; 0x78
 80020ea:	486e      	ldr	r0, [pc, #440]	; (80022a4 <FreqMenu_DrawFreqPresetMenu+0xc44>)
 80020ec:	f009 f8aa 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80020f0:	7abb      	ldrb	r3, [r7, #10]
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020f8:	9301      	str	r3, [sp, #4]
 80020fa:	2302      	movs	r3, #2
 80020fc:	9300      	str	r3, [sp, #0]
 80020fe:	2300      	movs	r3, #0
 8002100:	2178      	movs	r1, #120	; 0x78
 8002102:	4869      	ldr	r0, [pc, #420]	; (80022a8 <FreqMenu_DrawFreqPresetMenu+0xc48>)
 8002104:	f009 f89e 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002108:	7a7b      	ldrb	r3, [r7, #9]
 800210a:	b29a      	uxth	r2, r3
 800210c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002110:	9301      	str	r3, [sp, #4]
 8002112:	2302      	movs	r3, #2
 8002114:	9300      	str	r3, [sp, #0]
 8002116:	2300      	movs	r3, #0
 8002118:	2178      	movs	r1, #120	; 0x78
 800211a:	4864      	ldr	r0, [pc, #400]	; (80022ac <FreqMenu_DrawFreqPresetMenu+0xc4c>)
 800211c:	f009 f892 	bl	800b244 <ILI9341_Draw_Text>
				break;
 8002120:	f000 bd01 	b.w	8002b26 <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002124:	7bfb      	ldrb	r3, [r7, #15]
 8002126:	b29a      	uxth	r2, r3
 8002128:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800212c:	9301      	str	r3, [sp, #4]
 800212e:	2302      	movs	r3, #2
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	2300      	movs	r3, #0
 8002134:	210a      	movs	r1, #10
 8002136:	4850      	ldr	r0, [pc, #320]	; (8002278 <FreqMenu_DrawFreqPresetMenu+0xc18>)
 8002138:	f009 f884 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 800213c:	7bbb      	ldrb	r3, [r7, #14]
 800213e:	b29a      	uxth	r2, r3
 8002140:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	2302      	movs	r3, #2
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	2300      	movs	r3, #0
 800214c:	210a      	movs	r1, #10
 800214e:	484b      	ldr	r0, [pc, #300]	; (800227c <FreqMenu_DrawFreqPresetMenu+0xc1c>)
 8002150:	f009 f878 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002154:	7b7b      	ldrb	r3, [r7, #13]
 8002156:	b29a      	uxth	r2, r3
 8002158:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	2302      	movs	r3, #2
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	2300      	movs	r3, #0
 8002164:	210a      	movs	r1, #10
 8002166:	4846      	ldr	r0, [pc, #280]	; (8002280 <FreqMenu_DrawFreqPresetMenu+0xc20>)
 8002168:	f009 f86c 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800216c:	7b3b      	ldrb	r3, [r7, #12]
 800216e:	b29a      	uxth	r2, r3
 8002170:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	2302      	movs	r3, #2
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	2300      	movs	r3, #0
 800217c:	210a      	movs	r1, #10
 800217e:	4841      	ldr	r0, [pc, #260]	; (8002284 <FreqMenu_DrawFreqPresetMenu+0xc24>)
 8002180:	f009 f860 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002184:	7afb      	ldrb	r3, [r7, #11]
 8002186:	b29a      	uxth	r2, r3
 8002188:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800218c:	9301      	str	r3, [sp, #4]
 800218e:	2302      	movs	r3, #2
 8002190:	9300      	str	r3, [sp, #0]
 8002192:	2300      	movs	r3, #0
 8002194:	210a      	movs	r1, #10
 8002196:	483c      	ldr	r0, [pc, #240]	; (8002288 <FreqMenu_DrawFreqPresetMenu+0xc28>)
 8002198:	f009 f854 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800219c:	7abb      	ldrb	r3, [r7, #10]
 800219e:	b29a      	uxth	r2, r3
 80021a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021a4:	9301      	str	r3, [sp, #4]
 80021a6:	2302      	movs	r3, #2
 80021a8:	9300      	str	r3, [sp, #0]
 80021aa:	2300      	movs	r3, #0
 80021ac:	210a      	movs	r1, #10
 80021ae:	4837      	ldr	r0, [pc, #220]	; (800228c <FreqMenu_DrawFreqPresetMenu+0xc2c>)
 80021b0:	f009 f848 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80021b4:	7a7b      	ldrb	r3, [r7, #9]
 80021b6:	b29a      	uxth	r2, r3
 80021b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	2302      	movs	r3, #2
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	2300      	movs	r3, #0
 80021c4:	210a      	movs	r1, #10
 80021c6:	4832      	ldr	r0, [pc, #200]	; (8002290 <FreqMenu_DrawFreqPresetMenu+0xc30>)
 80021c8:	f009 f83c 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, WHITE, 2, BLACK);
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	2300      	movs	r3, #0
 80021d2:	9301      	str	r3, [sp, #4]
 80021d4:	2302      	movs	r3, #2
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021dc:	2178      	movs	r1, #120	; 0x78
 80021de:	482d      	ldr	r0, [pc, #180]	; (8002294 <FreqMenu_DrawFreqPresetMenu+0xc34>)
 80021e0:	f009 f830 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80021e4:	7bbb      	ldrb	r3, [r7, #14]
 80021e6:	b29a      	uxth	r2, r3
 80021e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021ec:	9301      	str	r3, [sp, #4]
 80021ee:	2302      	movs	r3, #2
 80021f0:	9300      	str	r3, [sp, #0]
 80021f2:	2300      	movs	r3, #0
 80021f4:	2178      	movs	r1, #120	; 0x78
 80021f6:	4828      	ldr	r0, [pc, #160]	; (8002298 <FreqMenu_DrawFreqPresetMenu+0xc38>)
 80021f8:	f009 f824 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80021fc:	7b7b      	ldrb	r3, [r7, #13]
 80021fe:	b29a      	uxth	r2, r3
 8002200:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002204:	9301      	str	r3, [sp, #4]
 8002206:	2302      	movs	r3, #2
 8002208:	9300      	str	r3, [sp, #0]
 800220a:	2300      	movs	r3, #0
 800220c:	2178      	movs	r1, #120	; 0x78
 800220e:	4823      	ldr	r0, [pc, #140]	; (800229c <FreqMenu_DrawFreqPresetMenu+0xc3c>)
 8002210:	f009 f818 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002214:	7b3b      	ldrb	r3, [r7, #12]
 8002216:	b29a      	uxth	r2, r3
 8002218:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800221c:	9301      	str	r3, [sp, #4]
 800221e:	2302      	movs	r3, #2
 8002220:	9300      	str	r3, [sp, #0]
 8002222:	2300      	movs	r3, #0
 8002224:	2178      	movs	r1, #120	; 0x78
 8002226:	481e      	ldr	r0, [pc, #120]	; (80022a0 <FreqMenu_DrawFreqPresetMenu+0xc40>)
 8002228:	f009 f80c 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 800222c:	7afb      	ldrb	r3, [r7, #11]
 800222e:	b29a      	uxth	r2, r3
 8002230:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002234:	9301      	str	r3, [sp, #4]
 8002236:	2302      	movs	r3, #2
 8002238:	9300      	str	r3, [sp, #0]
 800223a:	2300      	movs	r3, #0
 800223c:	2178      	movs	r1, #120	; 0x78
 800223e:	4819      	ldr	r0, [pc, #100]	; (80022a4 <FreqMenu_DrawFreqPresetMenu+0xc44>)
 8002240:	f009 f800 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002244:	7abb      	ldrb	r3, [r7, #10]
 8002246:	b29a      	uxth	r2, r3
 8002248:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800224c:	9301      	str	r3, [sp, #4]
 800224e:	2302      	movs	r3, #2
 8002250:	9300      	str	r3, [sp, #0]
 8002252:	2300      	movs	r3, #0
 8002254:	2178      	movs	r1, #120	; 0x78
 8002256:	4814      	ldr	r0, [pc, #80]	; (80022a8 <FreqMenu_DrawFreqPresetMenu+0xc48>)
 8002258:	f008 fff4 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 800225c:	7a7b      	ldrb	r3, [r7, #9]
 800225e:	b29a      	uxth	r2, r3
 8002260:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002264:	9301      	str	r3, [sp, #4]
 8002266:	2302      	movs	r3, #2
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	2300      	movs	r3, #0
 800226c:	2178      	movs	r1, #120	; 0x78
 800226e:	480f      	ldr	r0, [pc, #60]	; (80022ac <FreqMenu_DrawFreqPresetMenu+0xc4c>)
 8002270:	f008 ffe8 	bl	800b244 <ILI9341_Draw_Text>
				break;
 8002274:	f000 bc57 	b.w	8002b26 <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8002278:	0800e864 	.word	0x0800e864
 800227c:	0800e86c 	.word	0x0800e86c
 8002280:	0800e874 	.word	0x0800e874
 8002284:	0800e87c 	.word	0x0800e87c
 8002288:	0800e884 	.word	0x0800e884
 800228c:	0800e88c 	.word	0x0800e88c
 8002290:	0800e894 	.word	0x0800e894
 8002294:	0800e89c 	.word	0x0800e89c
 8002298:	0800e8a4 	.word	0x0800e8a4
 800229c:	0800e8ac 	.word	0x0800e8ac
 80022a0:	0800e8b4 	.word	0x0800e8b4
 80022a4:	0800e8bc 	.word	0x0800e8bc
 80022a8:	0800e8c4 	.word	0x0800e8c4
 80022ac:	0800e8cc 	.word	0x0800e8cc
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022b8:	9301      	str	r3, [sp, #4]
 80022ba:	2302      	movs	r3, #2
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	2300      	movs	r3, #0
 80022c0:	210a      	movs	r1, #10
 80022c2:	48a4      	ldr	r0, [pc, #656]	; (8002554 <FreqMenu_DrawFreqPresetMenu+0xef4>)
 80022c4:	f008 ffbe 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80022c8:	7bbb      	ldrb	r3, [r7, #14]
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022d0:	9301      	str	r3, [sp, #4]
 80022d2:	2302      	movs	r3, #2
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	2300      	movs	r3, #0
 80022d8:	210a      	movs	r1, #10
 80022da:	489f      	ldr	r0, [pc, #636]	; (8002558 <FreqMenu_DrawFreqPresetMenu+0xef8>)
 80022dc:	f008 ffb2 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80022e0:	7b7b      	ldrb	r3, [r7, #13]
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022e8:	9301      	str	r3, [sp, #4]
 80022ea:	2302      	movs	r3, #2
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	2300      	movs	r3, #0
 80022f0:	210a      	movs	r1, #10
 80022f2:	489a      	ldr	r0, [pc, #616]	; (800255c <FreqMenu_DrawFreqPresetMenu+0xefc>)
 80022f4:	f008 ffa6 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80022f8:	7b3b      	ldrb	r3, [r7, #12]
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002300:	9301      	str	r3, [sp, #4]
 8002302:	2302      	movs	r3, #2
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	2300      	movs	r3, #0
 8002308:	210a      	movs	r1, #10
 800230a:	4895      	ldr	r0, [pc, #596]	; (8002560 <FreqMenu_DrawFreqPresetMenu+0xf00>)
 800230c:	f008 ff9a 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002310:	7afb      	ldrb	r3, [r7, #11]
 8002312:	b29a      	uxth	r2, r3
 8002314:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002318:	9301      	str	r3, [sp, #4]
 800231a:	2302      	movs	r3, #2
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	2300      	movs	r3, #0
 8002320:	210a      	movs	r1, #10
 8002322:	4890      	ldr	r0, [pc, #576]	; (8002564 <FreqMenu_DrawFreqPresetMenu+0xf04>)
 8002324:	f008 ff8e 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002328:	7abb      	ldrb	r3, [r7, #10]
 800232a:	b29a      	uxth	r2, r3
 800232c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002330:	9301      	str	r3, [sp, #4]
 8002332:	2302      	movs	r3, #2
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	2300      	movs	r3, #0
 8002338:	210a      	movs	r1, #10
 800233a:	488b      	ldr	r0, [pc, #556]	; (8002568 <FreqMenu_DrawFreqPresetMenu+0xf08>)
 800233c:	f008 ff82 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002340:	7a7b      	ldrb	r3, [r7, #9]
 8002342:	b29a      	uxth	r2, r3
 8002344:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002348:	9301      	str	r3, [sp, #4]
 800234a:	2302      	movs	r3, #2
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	2300      	movs	r3, #0
 8002350:	210a      	movs	r1, #10
 8002352:	4886      	ldr	r0, [pc, #536]	; (800256c <FreqMenu_DrawFreqPresetMenu+0xf0c>)
 8002354:	f008 ff76 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	b29a      	uxth	r2, r3
 800235c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002360:	9301      	str	r3, [sp, #4]
 8002362:	2302      	movs	r3, #2
 8002364:	9300      	str	r3, [sp, #0]
 8002366:	2300      	movs	r3, #0
 8002368:	2178      	movs	r1, #120	; 0x78
 800236a:	4881      	ldr	r0, [pc, #516]	; (8002570 <FreqMenu_DrawFreqPresetMenu+0xf10>)
 800236c:	f008 ff6a 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, WHITE, 2, BLACK);
 8002370:	7bbb      	ldrb	r3, [r7, #14]
 8002372:	b29a      	uxth	r2, r3
 8002374:	2300      	movs	r3, #0
 8002376:	9301      	str	r3, [sp, #4]
 8002378:	2302      	movs	r3, #2
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002380:	2178      	movs	r1, #120	; 0x78
 8002382:	487c      	ldr	r0, [pc, #496]	; (8002574 <FreqMenu_DrawFreqPresetMenu+0xf14>)
 8002384:	f008 ff5e 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002388:	7b7b      	ldrb	r3, [r7, #13]
 800238a:	b29a      	uxth	r2, r3
 800238c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002390:	9301      	str	r3, [sp, #4]
 8002392:	2302      	movs	r3, #2
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	2300      	movs	r3, #0
 8002398:	2178      	movs	r1, #120	; 0x78
 800239a:	4877      	ldr	r0, [pc, #476]	; (8002578 <FreqMenu_DrawFreqPresetMenu+0xf18>)
 800239c:	f008 ff52 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80023a0:	7b3b      	ldrb	r3, [r7, #12]
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	2302      	movs	r3, #2
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	2300      	movs	r3, #0
 80023b0:	2178      	movs	r1, #120	; 0x78
 80023b2:	4872      	ldr	r0, [pc, #456]	; (800257c <FreqMenu_DrawFreqPresetMenu+0xf1c>)
 80023b4:	f008 ff46 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80023b8:	7afb      	ldrb	r3, [r7, #11]
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023c0:	9301      	str	r3, [sp, #4]
 80023c2:	2302      	movs	r3, #2
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	2300      	movs	r3, #0
 80023c8:	2178      	movs	r1, #120	; 0x78
 80023ca:	486d      	ldr	r0, [pc, #436]	; (8002580 <FreqMenu_DrawFreqPresetMenu+0xf20>)
 80023cc:	f008 ff3a 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80023d0:	7abb      	ldrb	r3, [r7, #10]
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023d8:	9301      	str	r3, [sp, #4]
 80023da:	2302      	movs	r3, #2
 80023dc:	9300      	str	r3, [sp, #0]
 80023de:	2300      	movs	r3, #0
 80023e0:	2178      	movs	r1, #120	; 0x78
 80023e2:	4868      	ldr	r0, [pc, #416]	; (8002584 <FreqMenu_DrawFreqPresetMenu+0xf24>)
 80023e4:	f008 ff2e 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80023e8:	7a7b      	ldrb	r3, [r7, #9]
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023f0:	9301      	str	r3, [sp, #4]
 80023f2:	2302      	movs	r3, #2
 80023f4:	9300      	str	r3, [sp, #0]
 80023f6:	2300      	movs	r3, #0
 80023f8:	2178      	movs	r1, #120	; 0x78
 80023fa:	4863      	ldr	r0, [pc, #396]	; (8002588 <FreqMenu_DrawFreqPresetMenu+0xf28>)
 80023fc:	f008 ff22 	bl	800b244 <ILI9341_Draw_Text>
				break;
 8002400:	e391      	b.n	8002b26 <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002402:	7bfb      	ldrb	r3, [r7, #15]
 8002404:	b29a      	uxth	r2, r3
 8002406:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800240a:	9301      	str	r3, [sp, #4]
 800240c:	2302      	movs	r3, #2
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	2300      	movs	r3, #0
 8002412:	210a      	movs	r1, #10
 8002414:	484f      	ldr	r0, [pc, #316]	; (8002554 <FreqMenu_DrawFreqPresetMenu+0xef4>)
 8002416:	f008 ff15 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 800241a:	7bbb      	ldrb	r3, [r7, #14]
 800241c:	b29a      	uxth	r2, r3
 800241e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	2302      	movs	r3, #2
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2300      	movs	r3, #0
 800242a:	210a      	movs	r1, #10
 800242c:	484a      	ldr	r0, [pc, #296]	; (8002558 <FreqMenu_DrawFreqPresetMenu+0xef8>)
 800242e:	f008 ff09 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002432:	7b7b      	ldrb	r3, [r7, #13]
 8002434:	b29a      	uxth	r2, r3
 8002436:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800243a:	9301      	str	r3, [sp, #4]
 800243c:	2302      	movs	r3, #2
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	2300      	movs	r3, #0
 8002442:	210a      	movs	r1, #10
 8002444:	4845      	ldr	r0, [pc, #276]	; (800255c <FreqMenu_DrawFreqPresetMenu+0xefc>)
 8002446:	f008 fefd 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800244a:	7b3b      	ldrb	r3, [r7, #12]
 800244c:	b29a      	uxth	r2, r3
 800244e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	2302      	movs	r3, #2
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	2300      	movs	r3, #0
 800245a:	210a      	movs	r1, #10
 800245c:	4840      	ldr	r0, [pc, #256]	; (8002560 <FreqMenu_DrawFreqPresetMenu+0xf00>)
 800245e:	f008 fef1 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002462:	7afb      	ldrb	r3, [r7, #11]
 8002464:	b29a      	uxth	r2, r3
 8002466:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800246a:	9301      	str	r3, [sp, #4]
 800246c:	2302      	movs	r3, #2
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	2300      	movs	r3, #0
 8002472:	210a      	movs	r1, #10
 8002474:	483b      	ldr	r0, [pc, #236]	; (8002564 <FreqMenu_DrawFreqPresetMenu+0xf04>)
 8002476:	f008 fee5 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800247a:	7abb      	ldrb	r3, [r7, #10]
 800247c:	b29a      	uxth	r2, r3
 800247e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002482:	9301      	str	r3, [sp, #4]
 8002484:	2302      	movs	r3, #2
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	2300      	movs	r3, #0
 800248a:	210a      	movs	r1, #10
 800248c:	4836      	ldr	r0, [pc, #216]	; (8002568 <FreqMenu_DrawFreqPresetMenu+0xf08>)
 800248e:	f008 fed9 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002492:	7a7b      	ldrb	r3, [r7, #9]
 8002494:	b29a      	uxth	r2, r3
 8002496:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800249a:	9301      	str	r3, [sp, #4]
 800249c:	2302      	movs	r3, #2
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	2300      	movs	r3, #0
 80024a2:	210a      	movs	r1, #10
 80024a4:	4831      	ldr	r0, [pc, #196]	; (800256c <FreqMenu_DrawFreqPresetMenu+0xf0c>)
 80024a6:	f008 fecd 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80024aa:	7bfb      	ldrb	r3, [r7, #15]
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	2302      	movs	r3, #2
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	2300      	movs	r3, #0
 80024ba:	2178      	movs	r1, #120	; 0x78
 80024bc:	482c      	ldr	r0, [pc, #176]	; (8002570 <FreqMenu_DrawFreqPresetMenu+0xf10>)
 80024be:	f008 fec1 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80024c2:	7bbb      	ldrb	r3, [r7, #14]
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ca:	9301      	str	r3, [sp, #4]
 80024cc:	2302      	movs	r3, #2
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	2300      	movs	r3, #0
 80024d2:	2178      	movs	r1, #120	; 0x78
 80024d4:	4827      	ldr	r0, [pc, #156]	; (8002574 <FreqMenu_DrawFreqPresetMenu+0xf14>)
 80024d6:	f008 feb5 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, WHITE, 2, BLACK);
 80024da:	7b7b      	ldrb	r3, [r7, #13]
 80024dc:	b29a      	uxth	r2, r3
 80024de:	2300      	movs	r3, #0
 80024e0:	9301      	str	r3, [sp, #4]
 80024e2:	2302      	movs	r3, #2
 80024e4:	9300      	str	r3, [sp, #0]
 80024e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ea:	2178      	movs	r1, #120	; 0x78
 80024ec:	4822      	ldr	r0, [pc, #136]	; (8002578 <FreqMenu_DrawFreqPresetMenu+0xf18>)
 80024ee:	f008 fea9 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80024f2:	7b3b      	ldrb	r3, [r7, #12]
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024fa:	9301      	str	r3, [sp, #4]
 80024fc:	2302      	movs	r3, #2
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	2300      	movs	r3, #0
 8002502:	2178      	movs	r1, #120	; 0x78
 8002504:	481d      	ldr	r0, [pc, #116]	; (800257c <FreqMenu_DrawFreqPresetMenu+0xf1c>)
 8002506:	f008 fe9d 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 800250a:	7afb      	ldrb	r3, [r7, #11]
 800250c:	b29a      	uxth	r2, r3
 800250e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002512:	9301      	str	r3, [sp, #4]
 8002514:	2302      	movs	r3, #2
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	2300      	movs	r3, #0
 800251a:	2178      	movs	r1, #120	; 0x78
 800251c:	4818      	ldr	r0, [pc, #96]	; (8002580 <FreqMenu_DrawFreqPresetMenu+0xf20>)
 800251e:	f008 fe91 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002522:	7abb      	ldrb	r3, [r7, #10]
 8002524:	b29a      	uxth	r2, r3
 8002526:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800252a:	9301      	str	r3, [sp, #4]
 800252c:	2302      	movs	r3, #2
 800252e:	9300      	str	r3, [sp, #0]
 8002530:	2300      	movs	r3, #0
 8002532:	2178      	movs	r1, #120	; 0x78
 8002534:	4813      	ldr	r0, [pc, #76]	; (8002584 <FreqMenu_DrawFreqPresetMenu+0xf24>)
 8002536:	f008 fe85 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 800253a:	7a7b      	ldrb	r3, [r7, #9]
 800253c:	b29a      	uxth	r2, r3
 800253e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002542:	9301      	str	r3, [sp, #4]
 8002544:	2302      	movs	r3, #2
 8002546:	9300      	str	r3, [sp, #0]
 8002548:	2300      	movs	r3, #0
 800254a:	2178      	movs	r1, #120	; 0x78
 800254c:	480e      	ldr	r0, [pc, #56]	; (8002588 <FreqMenu_DrawFreqPresetMenu+0xf28>)
 800254e:	f008 fe79 	bl	800b244 <ILI9341_Draw_Text>
				break;
 8002552:	e2e8      	b.n	8002b26 <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8002554:	0800e864 	.word	0x0800e864
 8002558:	0800e86c 	.word	0x0800e86c
 800255c:	0800e874 	.word	0x0800e874
 8002560:	0800e87c 	.word	0x0800e87c
 8002564:	0800e884 	.word	0x0800e884
 8002568:	0800e88c 	.word	0x0800e88c
 800256c:	0800e894 	.word	0x0800e894
 8002570:	0800e89c 	.word	0x0800e89c
 8002574:	0800e8a4 	.word	0x0800e8a4
 8002578:	0800e8ac 	.word	0x0800e8ac
 800257c:	0800e8b4 	.word	0x0800e8b4
 8002580:	0800e8bc 	.word	0x0800e8bc
 8002584:	0800e8c4 	.word	0x0800e8c4
 8002588:	0800e8cc 	.word	0x0800e8cc
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 800258c:	7bfb      	ldrb	r3, [r7, #15]
 800258e:	b29a      	uxth	r2, r3
 8002590:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	2302      	movs	r3, #2
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	2300      	movs	r3, #0
 800259c:	210a      	movs	r1, #10
 800259e:	48a4      	ldr	r0, [pc, #656]	; (8002830 <FreqMenu_DrawFreqPresetMenu+0x11d0>)
 80025a0:	f008 fe50 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80025a4:	7bbb      	ldrb	r3, [r7, #14]
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025ac:	9301      	str	r3, [sp, #4]
 80025ae:	2302      	movs	r3, #2
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	2300      	movs	r3, #0
 80025b4:	210a      	movs	r1, #10
 80025b6:	489f      	ldr	r0, [pc, #636]	; (8002834 <FreqMenu_DrawFreqPresetMenu+0x11d4>)
 80025b8:	f008 fe44 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80025bc:	7b7b      	ldrb	r3, [r7, #13]
 80025be:	b29a      	uxth	r2, r3
 80025c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025c4:	9301      	str	r3, [sp, #4]
 80025c6:	2302      	movs	r3, #2
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	2300      	movs	r3, #0
 80025cc:	210a      	movs	r1, #10
 80025ce:	489a      	ldr	r0, [pc, #616]	; (8002838 <FreqMenu_DrawFreqPresetMenu+0x11d8>)
 80025d0:	f008 fe38 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80025d4:	7b3b      	ldrb	r3, [r7, #12]
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025dc:	9301      	str	r3, [sp, #4]
 80025de:	2302      	movs	r3, #2
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	2300      	movs	r3, #0
 80025e4:	210a      	movs	r1, #10
 80025e6:	4895      	ldr	r0, [pc, #596]	; (800283c <FreqMenu_DrawFreqPresetMenu+0x11dc>)
 80025e8:	f008 fe2c 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80025ec:	7afb      	ldrb	r3, [r7, #11]
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025f4:	9301      	str	r3, [sp, #4]
 80025f6:	2302      	movs	r3, #2
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	2300      	movs	r3, #0
 80025fc:	210a      	movs	r1, #10
 80025fe:	4890      	ldr	r0, [pc, #576]	; (8002840 <FreqMenu_DrawFreqPresetMenu+0x11e0>)
 8002600:	f008 fe20 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002604:	7abb      	ldrb	r3, [r7, #10]
 8002606:	b29a      	uxth	r2, r3
 8002608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800260c:	9301      	str	r3, [sp, #4]
 800260e:	2302      	movs	r3, #2
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	2300      	movs	r3, #0
 8002614:	210a      	movs	r1, #10
 8002616:	488b      	ldr	r0, [pc, #556]	; (8002844 <FreqMenu_DrawFreqPresetMenu+0x11e4>)
 8002618:	f008 fe14 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 800261c:	7a7b      	ldrb	r3, [r7, #9]
 800261e:	b29a      	uxth	r2, r3
 8002620:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002624:	9301      	str	r3, [sp, #4]
 8002626:	2302      	movs	r3, #2
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	2300      	movs	r3, #0
 800262c:	210a      	movs	r1, #10
 800262e:	4886      	ldr	r0, [pc, #536]	; (8002848 <FreqMenu_DrawFreqPresetMenu+0x11e8>)
 8002630:	f008 fe08 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002634:	7bfb      	ldrb	r3, [r7, #15]
 8002636:	b29a      	uxth	r2, r3
 8002638:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800263c:	9301      	str	r3, [sp, #4]
 800263e:	2302      	movs	r3, #2
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	2300      	movs	r3, #0
 8002644:	2178      	movs	r1, #120	; 0x78
 8002646:	4881      	ldr	r0, [pc, #516]	; (800284c <FreqMenu_DrawFreqPresetMenu+0x11ec>)
 8002648:	f008 fdfc 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800264c:	7bbb      	ldrb	r3, [r7, #14]
 800264e:	b29a      	uxth	r2, r3
 8002650:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002654:	9301      	str	r3, [sp, #4]
 8002656:	2302      	movs	r3, #2
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	2300      	movs	r3, #0
 800265c:	2178      	movs	r1, #120	; 0x78
 800265e:	487c      	ldr	r0, [pc, #496]	; (8002850 <FreqMenu_DrawFreqPresetMenu+0x11f0>)
 8002660:	f008 fdf0 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002664:	7b7b      	ldrb	r3, [r7, #13]
 8002666:	b29a      	uxth	r2, r3
 8002668:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800266c:	9301      	str	r3, [sp, #4]
 800266e:	2302      	movs	r3, #2
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	2300      	movs	r3, #0
 8002674:	2178      	movs	r1, #120	; 0x78
 8002676:	4877      	ldr	r0, [pc, #476]	; (8002854 <FreqMenu_DrawFreqPresetMenu+0x11f4>)
 8002678:	f008 fde4 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, WHITE, 2, BLACK);
 800267c:	7b3b      	ldrb	r3, [r7, #12]
 800267e:	b29a      	uxth	r2, r3
 8002680:	2300      	movs	r3, #0
 8002682:	9301      	str	r3, [sp, #4]
 8002684:	2302      	movs	r3, #2
 8002686:	9300      	str	r3, [sp, #0]
 8002688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800268c:	2178      	movs	r1, #120	; 0x78
 800268e:	4872      	ldr	r0, [pc, #456]	; (8002858 <FreqMenu_DrawFreqPresetMenu+0x11f8>)
 8002690:	f008 fdd8 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002694:	7afb      	ldrb	r3, [r7, #11]
 8002696:	b29a      	uxth	r2, r3
 8002698:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800269c:	9301      	str	r3, [sp, #4]
 800269e:	2302      	movs	r3, #2
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	2300      	movs	r3, #0
 80026a4:	2178      	movs	r1, #120	; 0x78
 80026a6:	486d      	ldr	r0, [pc, #436]	; (800285c <FreqMenu_DrawFreqPresetMenu+0x11fc>)
 80026a8:	f008 fdcc 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80026ac:	7abb      	ldrb	r3, [r7, #10]
 80026ae:	b29a      	uxth	r2, r3
 80026b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026b4:	9301      	str	r3, [sp, #4]
 80026b6:	2302      	movs	r3, #2
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	2300      	movs	r3, #0
 80026bc:	2178      	movs	r1, #120	; 0x78
 80026be:	4868      	ldr	r0, [pc, #416]	; (8002860 <FreqMenu_DrawFreqPresetMenu+0x1200>)
 80026c0:	f008 fdc0 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80026c4:	7a7b      	ldrb	r3, [r7, #9]
 80026c6:	b29a      	uxth	r2, r3
 80026c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026cc:	9301      	str	r3, [sp, #4]
 80026ce:	2302      	movs	r3, #2
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	2300      	movs	r3, #0
 80026d4:	2178      	movs	r1, #120	; 0x78
 80026d6:	4863      	ldr	r0, [pc, #396]	; (8002864 <FreqMenu_DrawFreqPresetMenu+0x1204>)
 80026d8:	f008 fdb4 	bl	800b244 <ILI9341_Draw_Text>
				break;
 80026dc:	e223      	b.n	8002b26 <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80026de:	7bfb      	ldrb	r3, [r7, #15]
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026e6:	9301      	str	r3, [sp, #4]
 80026e8:	2302      	movs	r3, #2
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	2300      	movs	r3, #0
 80026ee:	210a      	movs	r1, #10
 80026f0:	484f      	ldr	r0, [pc, #316]	; (8002830 <FreqMenu_DrawFreqPresetMenu+0x11d0>)
 80026f2:	f008 fda7 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80026f6:	7bbb      	ldrb	r3, [r7, #14]
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026fe:	9301      	str	r3, [sp, #4]
 8002700:	2302      	movs	r3, #2
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	2300      	movs	r3, #0
 8002706:	210a      	movs	r1, #10
 8002708:	484a      	ldr	r0, [pc, #296]	; (8002834 <FreqMenu_DrawFreqPresetMenu+0x11d4>)
 800270a:	f008 fd9b 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 800270e:	7b7b      	ldrb	r3, [r7, #13]
 8002710:	b29a      	uxth	r2, r3
 8002712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002716:	9301      	str	r3, [sp, #4]
 8002718:	2302      	movs	r3, #2
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	2300      	movs	r3, #0
 800271e:	210a      	movs	r1, #10
 8002720:	4845      	ldr	r0, [pc, #276]	; (8002838 <FreqMenu_DrawFreqPresetMenu+0x11d8>)
 8002722:	f008 fd8f 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002726:	7b3b      	ldrb	r3, [r7, #12]
 8002728:	b29a      	uxth	r2, r3
 800272a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800272e:	9301      	str	r3, [sp, #4]
 8002730:	2302      	movs	r3, #2
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	2300      	movs	r3, #0
 8002736:	210a      	movs	r1, #10
 8002738:	4840      	ldr	r0, [pc, #256]	; (800283c <FreqMenu_DrawFreqPresetMenu+0x11dc>)
 800273a:	f008 fd83 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 800273e:	7afb      	ldrb	r3, [r7, #11]
 8002740:	b29a      	uxth	r2, r3
 8002742:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002746:	9301      	str	r3, [sp, #4]
 8002748:	2302      	movs	r3, #2
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	2300      	movs	r3, #0
 800274e:	210a      	movs	r1, #10
 8002750:	483b      	ldr	r0, [pc, #236]	; (8002840 <FreqMenu_DrawFreqPresetMenu+0x11e0>)
 8002752:	f008 fd77 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002756:	7abb      	ldrb	r3, [r7, #10]
 8002758:	b29a      	uxth	r2, r3
 800275a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	2302      	movs	r3, #2
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2300      	movs	r3, #0
 8002766:	210a      	movs	r1, #10
 8002768:	4836      	ldr	r0, [pc, #216]	; (8002844 <FreqMenu_DrawFreqPresetMenu+0x11e4>)
 800276a:	f008 fd6b 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 800276e:	7a7b      	ldrb	r3, [r7, #9]
 8002770:	b29a      	uxth	r2, r3
 8002772:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	2302      	movs	r3, #2
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	2300      	movs	r3, #0
 800277e:	210a      	movs	r1, #10
 8002780:	4831      	ldr	r0, [pc, #196]	; (8002848 <FreqMenu_DrawFreqPresetMenu+0x11e8>)
 8002782:	f008 fd5f 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002786:	7bfb      	ldrb	r3, [r7, #15]
 8002788:	b29a      	uxth	r2, r3
 800278a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	2302      	movs	r3, #2
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	2300      	movs	r3, #0
 8002796:	2178      	movs	r1, #120	; 0x78
 8002798:	482c      	ldr	r0, [pc, #176]	; (800284c <FreqMenu_DrawFreqPresetMenu+0x11ec>)
 800279a:	f008 fd53 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800279e:	7bbb      	ldrb	r3, [r7, #14]
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027a6:	9301      	str	r3, [sp, #4]
 80027a8:	2302      	movs	r3, #2
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2300      	movs	r3, #0
 80027ae:	2178      	movs	r1, #120	; 0x78
 80027b0:	4827      	ldr	r0, [pc, #156]	; (8002850 <FreqMenu_DrawFreqPresetMenu+0x11f0>)
 80027b2:	f008 fd47 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80027b6:	7b7b      	ldrb	r3, [r7, #13]
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027be:	9301      	str	r3, [sp, #4]
 80027c0:	2302      	movs	r3, #2
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	2300      	movs	r3, #0
 80027c6:	2178      	movs	r1, #120	; 0x78
 80027c8:	4822      	ldr	r0, [pc, #136]	; (8002854 <FreqMenu_DrawFreqPresetMenu+0x11f4>)
 80027ca:	f008 fd3b 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80027ce:	7b3b      	ldrb	r3, [r7, #12]
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027d6:	9301      	str	r3, [sp, #4]
 80027d8:	2302      	movs	r3, #2
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	2300      	movs	r3, #0
 80027de:	2178      	movs	r1, #120	; 0x78
 80027e0:	481d      	ldr	r0, [pc, #116]	; (8002858 <FreqMenu_DrawFreqPresetMenu+0x11f8>)
 80027e2:	f008 fd2f 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, WHITE, 2, BLACK);
 80027e6:	7afb      	ldrb	r3, [r7, #11]
 80027e8:	b29a      	uxth	r2, r3
 80027ea:	2300      	movs	r3, #0
 80027ec:	9301      	str	r3, [sp, #4]
 80027ee:	2302      	movs	r3, #2
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027f6:	2178      	movs	r1, #120	; 0x78
 80027f8:	4818      	ldr	r0, [pc, #96]	; (800285c <FreqMenu_DrawFreqPresetMenu+0x11fc>)
 80027fa:	f008 fd23 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80027fe:	7abb      	ldrb	r3, [r7, #10]
 8002800:	b29a      	uxth	r2, r3
 8002802:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002806:	9301      	str	r3, [sp, #4]
 8002808:	2302      	movs	r3, #2
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	2300      	movs	r3, #0
 800280e:	2178      	movs	r1, #120	; 0x78
 8002810:	4813      	ldr	r0, [pc, #76]	; (8002860 <FreqMenu_DrawFreqPresetMenu+0x1200>)
 8002812:	f008 fd17 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002816:	7a7b      	ldrb	r3, [r7, #9]
 8002818:	b29a      	uxth	r2, r3
 800281a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800281e:	9301      	str	r3, [sp, #4]
 8002820:	2302      	movs	r3, #2
 8002822:	9300      	str	r3, [sp, #0]
 8002824:	2300      	movs	r3, #0
 8002826:	2178      	movs	r1, #120	; 0x78
 8002828:	480e      	ldr	r0, [pc, #56]	; (8002864 <FreqMenu_DrawFreqPresetMenu+0x1204>)
 800282a:	f008 fd0b 	bl	800b244 <ILI9341_Draw_Text>
			break;
 800282e:	e17a      	b.n	8002b26 <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8002830:	0800e864 	.word	0x0800e864
 8002834:	0800e86c 	.word	0x0800e86c
 8002838:	0800e874 	.word	0x0800e874
 800283c:	0800e87c 	.word	0x0800e87c
 8002840:	0800e884 	.word	0x0800e884
 8002844:	0800e88c 	.word	0x0800e88c
 8002848:	0800e894 	.word	0x0800e894
 800284c:	0800e89c 	.word	0x0800e89c
 8002850:	0800e8a4 	.word	0x0800e8a4
 8002854:	0800e8ac 	.word	0x0800e8ac
 8002858:	0800e8b4 	.word	0x0800e8b4
 800285c:	0800e8bc 	.word	0x0800e8bc
 8002860:	0800e8c4 	.word	0x0800e8c4
 8002864:	0800e8cc 	.word	0x0800e8cc
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002868:	7bfb      	ldrb	r3, [r7, #15]
 800286a:	b29a      	uxth	r2, r3
 800286c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002870:	9301      	str	r3, [sp, #4]
 8002872:	2302      	movs	r3, #2
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	2300      	movs	r3, #0
 8002878:	210a      	movs	r1, #10
 800287a:	48ad      	ldr	r0, [pc, #692]	; (8002b30 <FreqMenu_DrawFreqPresetMenu+0x14d0>)
 800287c:	f008 fce2 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002880:	7bbb      	ldrb	r3, [r7, #14]
 8002882:	b29a      	uxth	r2, r3
 8002884:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002888:	9301      	str	r3, [sp, #4]
 800288a:	2302      	movs	r3, #2
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	2300      	movs	r3, #0
 8002890:	210a      	movs	r1, #10
 8002892:	48a8      	ldr	r0, [pc, #672]	; (8002b34 <FreqMenu_DrawFreqPresetMenu+0x14d4>)
 8002894:	f008 fcd6 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002898:	7b7b      	ldrb	r3, [r7, #13]
 800289a:	b29a      	uxth	r2, r3
 800289c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028a0:	9301      	str	r3, [sp, #4]
 80028a2:	2302      	movs	r3, #2
 80028a4:	9300      	str	r3, [sp, #0]
 80028a6:	2300      	movs	r3, #0
 80028a8:	210a      	movs	r1, #10
 80028aa:	48a3      	ldr	r0, [pc, #652]	; (8002b38 <FreqMenu_DrawFreqPresetMenu+0x14d8>)
 80028ac:	f008 fcca 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80028b0:	7b3b      	ldrb	r3, [r7, #12]
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028b8:	9301      	str	r3, [sp, #4]
 80028ba:	2302      	movs	r3, #2
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	2300      	movs	r3, #0
 80028c0:	210a      	movs	r1, #10
 80028c2:	489e      	ldr	r0, [pc, #632]	; (8002b3c <FreqMenu_DrawFreqPresetMenu+0x14dc>)
 80028c4:	f008 fcbe 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80028c8:	7afb      	ldrb	r3, [r7, #11]
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028d0:	9301      	str	r3, [sp, #4]
 80028d2:	2302      	movs	r3, #2
 80028d4:	9300      	str	r3, [sp, #0]
 80028d6:	2300      	movs	r3, #0
 80028d8:	210a      	movs	r1, #10
 80028da:	4899      	ldr	r0, [pc, #612]	; (8002b40 <FreqMenu_DrawFreqPresetMenu+0x14e0>)
 80028dc:	f008 fcb2 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80028e0:	7abb      	ldrb	r3, [r7, #10]
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028e8:	9301      	str	r3, [sp, #4]
 80028ea:	2302      	movs	r3, #2
 80028ec:	9300      	str	r3, [sp, #0]
 80028ee:	2300      	movs	r3, #0
 80028f0:	210a      	movs	r1, #10
 80028f2:	4894      	ldr	r0, [pc, #592]	; (8002b44 <FreqMenu_DrawFreqPresetMenu+0x14e4>)
 80028f4:	f008 fca6 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80028f8:	7a7b      	ldrb	r3, [r7, #9]
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002900:	9301      	str	r3, [sp, #4]
 8002902:	2302      	movs	r3, #2
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	2300      	movs	r3, #0
 8002908:	210a      	movs	r1, #10
 800290a:	488f      	ldr	r0, [pc, #572]	; (8002b48 <FreqMenu_DrawFreqPresetMenu+0x14e8>)
 800290c:	f008 fc9a 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002910:	7bfb      	ldrb	r3, [r7, #15]
 8002912:	b29a      	uxth	r2, r3
 8002914:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002918:	9301      	str	r3, [sp, #4]
 800291a:	2302      	movs	r3, #2
 800291c:	9300      	str	r3, [sp, #0]
 800291e:	2300      	movs	r3, #0
 8002920:	2178      	movs	r1, #120	; 0x78
 8002922:	488a      	ldr	r0, [pc, #552]	; (8002b4c <FreqMenu_DrawFreqPresetMenu+0x14ec>)
 8002924:	f008 fc8e 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002928:	7bbb      	ldrb	r3, [r7, #14]
 800292a:	b29a      	uxth	r2, r3
 800292c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002930:	9301      	str	r3, [sp, #4]
 8002932:	2302      	movs	r3, #2
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	2300      	movs	r3, #0
 8002938:	2178      	movs	r1, #120	; 0x78
 800293a:	4885      	ldr	r0, [pc, #532]	; (8002b50 <FreqMenu_DrawFreqPresetMenu+0x14f0>)
 800293c:	f008 fc82 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002940:	7b7b      	ldrb	r3, [r7, #13]
 8002942:	b29a      	uxth	r2, r3
 8002944:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002948:	9301      	str	r3, [sp, #4]
 800294a:	2302      	movs	r3, #2
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	2300      	movs	r3, #0
 8002950:	2178      	movs	r1, #120	; 0x78
 8002952:	4880      	ldr	r0, [pc, #512]	; (8002b54 <FreqMenu_DrawFreqPresetMenu+0x14f4>)
 8002954:	f008 fc76 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002958:	7b3b      	ldrb	r3, [r7, #12]
 800295a:	b29a      	uxth	r2, r3
 800295c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	2302      	movs	r3, #2
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	2300      	movs	r3, #0
 8002968:	2178      	movs	r1, #120	; 0x78
 800296a:	487b      	ldr	r0, [pc, #492]	; (8002b58 <FreqMenu_DrawFreqPresetMenu+0x14f8>)
 800296c:	f008 fc6a 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002970:	7afb      	ldrb	r3, [r7, #11]
 8002972:	b29a      	uxth	r2, r3
 8002974:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002978:	9301      	str	r3, [sp, #4]
 800297a:	2302      	movs	r3, #2
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	2300      	movs	r3, #0
 8002980:	2178      	movs	r1, #120	; 0x78
 8002982:	4876      	ldr	r0, [pc, #472]	; (8002b5c <FreqMenu_DrawFreqPresetMenu+0x14fc>)
 8002984:	f008 fc5e 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, WHITE, 2, BLACK);
 8002988:	7abb      	ldrb	r3, [r7, #10]
 800298a:	b29a      	uxth	r2, r3
 800298c:	2300      	movs	r3, #0
 800298e:	9301      	str	r3, [sp, #4]
 8002990:	2302      	movs	r3, #2
 8002992:	9300      	str	r3, [sp, #0]
 8002994:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002998:	2178      	movs	r1, #120	; 0x78
 800299a:	4871      	ldr	r0, [pc, #452]	; (8002b60 <FreqMenu_DrawFreqPresetMenu+0x1500>)
 800299c:	f008 fc52 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80029a0:	7a7b      	ldrb	r3, [r7, #9]
 80029a2:	b29a      	uxth	r2, r3
 80029a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029a8:	9301      	str	r3, [sp, #4]
 80029aa:	2302      	movs	r3, #2
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	2300      	movs	r3, #0
 80029b0:	2178      	movs	r1, #120	; 0x78
 80029b2:	486c      	ldr	r0, [pc, #432]	; (8002b64 <FreqMenu_DrawFreqPresetMenu+0x1504>)
 80029b4:	f008 fc46 	bl	800b244 <ILI9341_Draw_Text>
			break;
 80029b8:	e0b5      	b.n	8002b26 <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80029ba:	7bfb      	ldrb	r3, [r7, #15]
 80029bc:	b29a      	uxth	r2, r3
 80029be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029c2:	9301      	str	r3, [sp, #4]
 80029c4:	2302      	movs	r3, #2
 80029c6:	9300      	str	r3, [sp, #0]
 80029c8:	2300      	movs	r3, #0
 80029ca:	210a      	movs	r1, #10
 80029cc:	4858      	ldr	r0, [pc, #352]	; (8002b30 <FreqMenu_DrawFreqPresetMenu+0x14d0>)
 80029ce:	f008 fc39 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80029d2:	7bbb      	ldrb	r3, [r7, #14]
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029da:	9301      	str	r3, [sp, #4]
 80029dc:	2302      	movs	r3, #2
 80029de:	9300      	str	r3, [sp, #0]
 80029e0:	2300      	movs	r3, #0
 80029e2:	210a      	movs	r1, #10
 80029e4:	4853      	ldr	r0, [pc, #332]	; (8002b34 <FreqMenu_DrawFreqPresetMenu+0x14d4>)
 80029e6:	f008 fc2d 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80029ea:	7b7b      	ldrb	r3, [r7, #13]
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029f2:	9301      	str	r3, [sp, #4]
 80029f4:	2302      	movs	r3, #2
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	2300      	movs	r3, #0
 80029fa:	210a      	movs	r1, #10
 80029fc:	484e      	ldr	r0, [pc, #312]	; (8002b38 <FreqMenu_DrawFreqPresetMenu+0x14d8>)
 80029fe:	f008 fc21 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002a02:	7b3b      	ldrb	r3, [r7, #12]
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a0a:	9301      	str	r3, [sp, #4]
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	2300      	movs	r3, #0
 8002a12:	210a      	movs	r1, #10
 8002a14:	4849      	ldr	r0, [pc, #292]	; (8002b3c <FreqMenu_DrawFreqPresetMenu+0x14dc>)
 8002a16:	f008 fc15 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002a1a:	7afb      	ldrb	r3, [r7, #11]
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a22:	9301      	str	r3, [sp, #4]
 8002a24:	2302      	movs	r3, #2
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	2300      	movs	r3, #0
 8002a2a:	210a      	movs	r1, #10
 8002a2c:	4844      	ldr	r0, [pc, #272]	; (8002b40 <FreqMenu_DrawFreqPresetMenu+0x14e0>)
 8002a2e:	f008 fc09 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002a32:	7abb      	ldrb	r3, [r7, #10]
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a3a:	9301      	str	r3, [sp, #4]
 8002a3c:	2302      	movs	r3, #2
 8002a3e:	9300      	str	r3, [sp, #0]
 8002a40:	2300      	movs	r3, #0
 8002a42:	210a      	movs	r1, #10
 8002a44:	483f      	ldr	r0, [pc, #252]	; (8002b44 <FreqMenu_DrawFreqPresetMenu+0x14e4>)
 8002a46:	f008 fbfd 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002a4a:	7a7b      	ldrb	r3, [r7, #9]
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a52:	9301      	str	r3, [sp, #4]
 8002a54:	2302      	movs	r3, #2
 8002a56:	9300      	str	r3, [sp, #0]
 8002a58:	2300      	movs	r3, #0
 8002a5a:	210a      	movs	r1, #10
 8002a5c:	483a      	ldr	r0, [pc, #232]	; (8002b48 <FreqMenu_DrawFreqPresetMenu+0x14e8>)
 8002a5e:	f008 fbf1 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002a62:	7bfb      	ldrb	r3, [r7, #15]
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	2300      	movs	r3, #0
 8002a72:	2178      	movs	r1, #120	; 0x78
 8002a74:	4835      	ldr	r0, [pc, #212]	; (8002b4c <FreqMenu_DrawFreqPresetMenu+0x14ec>)
 8002a76:	f008 fbe5 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002a7a:	7bbb      	ldrb	r3, [r7, #14]
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a82:	9301      	str	r3, [sp, #4]
 8002a84:	2302      	movs	r3, #2
 8002a86:	9300      	str	r3, [sp, #0]
 8002a88:	2300      	movs	r3, #0
 8002a8a:	2178      	movs	r1, #120	; 0x78
 8002a8c:	4830      	ldr	r0, [pc, #192]	; (8002b50 <FreqMenu_DrawFreqPresetMenu+0x14f0>)
 8002a8e:	f008 fbd9 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002a92:	7b7b      	ldrb	r3, [r7, #13]
 8002a94:	b29a      	uxth	r2, r3
 8002a96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a9a:	9301      	str	r3, [sp, #4]
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	9300      	str	r3, [sp, #0]
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	2178      	movs	r1, #120	; 0x78
 8002aa4:	482b      	ldr	r0, [pc, #172]	; (8002b54 <FreqMenu_DrawFreqPresetMenu+0x14f4>)
 8002aa6:	f008 fbcd 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002aaa:	7b3b      	ldrb	r3, [r7, #12]
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ab2:	9301      	str	r3, [sp, #4]
 8002ab4:	2302      	movs	r3, #2
 8002ab6:	9300      	str	r3, [sp, #0]
 8002ab8:	2300      	movs	r3, #0
 8002aba:	2178      	movs	r1, #120	; 0x78
 8002abc:	4826      	ldr	r0, [pc, #152]	; (8002b58 <FreqMenu_DrawFreqPresetMenu+0x14f8>)
 8002abe:	f008 fbc1 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002ac2:	7afb      	ldrb	r3, [r7, #11]
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aca:	9301      	str	r3, [sp, #4]
 8002acc:	2302      	movs	r3, #2
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	2178      	movs	r1, #120	; 0x78
 8002ad4:	4821      	ldr	r0, [pc, #132]	; (8002b5c <FreqMenu_DrawFreqPresetMenu+0x14fc>)
 8002ad6:	f008 fbb5 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002ada:	7abb      	ldrb	r3, [r7, #10]
 8002adc:	b29a      	uxth	r2, r3
 8002ade:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ae2:	9301      	str	r3, [sp, #4]
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	2178      	movs	r1, #120	; 0x78
 8002aec:	481c      	ldr	r0, [pc, #112]	; (8002b60 <FreqMenu_DrawFreqPresetMenu+0x1500>)
 8002aee:	f008 fba9 	bl	800b244 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, WHITE, 2, BLACK);
 8002af2:	7a7b      	ldrb	r3, [r7, #9]
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	2300      	movs	r3, #0
 8002af8:	9301      	str	r3, [sp, #4]
 8002afa:	2302      	movs	r3, #2
 8002afc:	9300      	str	r3, [sp, #0]
 8002afe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b02:	2178      	movs	r1, #120	; 0x78
 8002b04:	4817      	ldr	r0, [pc, #92]	; (8002b64 <FreqMenu_DrawFreqPresetMenu+0x1504>)
 8002b06:	f008 fb9d 	bl	800b244 <ILI9341_Draw_Text>
			break;
 8002b0a:	bf00      	nop
 8002b0c:	e00b      	b.n	8002b26 <FreqMenu_DrawFreqPresetMenu+0x14c6>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		10, 180, RED, 1, BLACK);
 8002b0e:	2300      	movs	r3, #0
 8002b10:	9301      	str	r3, [sp, #4]
 8002b12:	2301      	movs	r3, #1
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002b1a:	22b4      	movs	r2, #180	; 0xb4
 8002b1c:	210a      	movs	r1, #10
 8002b1e:	4812      	ldr	r0, [pc, #72]	; (8002b68 <FreqMenu_DrawFreqPresetMenu+0x1508>)
 8002b20:	f008 fb90 	bl	800b244 <ILI9341_Draw_Text>
}
 8002b24:	e7ff      	b.n	8002b26 <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8002b26:	bf00      	nop
 8002b28:	3710      	adds	r7, #16
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	0800e864 	.word	0x0800e864
 8002b34:	0800e86c 	.word	0x0800e86c
 8002b38:	0800e874 	.word	0x0800e874
 8002b3c:	0800e87c 	.word	0x0800e87c
 8002b40:	0800e884 	.word	0x0800e884
 8002b44:	0800e88c 	.word	0x0800e88c
 8002b48:	0800e894 	.word	0x0800e894
 8002b4c:	0800e89c 	.word	0x0800e89c
 8002b50:	0800e8a4 	.word	0x0800e8a4
 8002b54:	0800e8ac 	.word	0x0800e8ac
 8002b58:	0800e8b4 	.word	0x0800e8b4
 8002b5c:	0800e8bc 	.word	0x0800e8bc
 8002b60:	0800e8c4 	.word	0x0800e8c4
 8002b64:	0800e8cc 	.word	0x0800e8cc
 8002b68:	0800e8d8 	.word	0x0800e8d8

08002b6c <FreqMenu_DrawFreqAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawFreqAdjustMenu()
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b084      	sub	sp, #16
 8002b70:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Output Signal Freq: ", 	10, 150, BLACK, 1, WHITE);
 8002b72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b76:	9301      	str	r3, [sp, #4]
 8002b78:	2301      	movs	r3, #1
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	2296      	movs	r2, #150	; 0x96
 8002b80:	210a      	movs	r1, #10
 8002b82:	4811      	ldr	r0, [pc, #68]	; (8002bc8 <FreqMenu_DrawFreqAdjustMenu+0x5c>)
 8002b84:	f008 fb5e 	bl	800b244 <ILI9341_Draw_Text>

	char freq[6] = "";
 8002b88:	2300      	movs	r3, #0
 8002b8a:	603b      	str	r3, [r7, #0]
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	80bb      	strh	r3, [r7, #4]
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
 8002b90:	f000 fd62 	bl	8003658 <FreqO_GetOutputFreq>
 8002b94:	4603      	mov	r3, r0
 8002b96:	b29b      	uxth	r3, r3
 8002b98:	4639      	mov	r1, r7
 8002b9a:	2206      	movs	r2, #6
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fe fcbb 	bl	8001518 <DM_AddDigitPadding>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d10a      	bne.n	8002bbe <FreqMenu_DrawFreqAdjustMenu+0x52>
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
 8002ba8:	4638      	mov	r0, r7
 8002baa:	2300      	movs	r3, #0
 8002bac:	9301      	str	r3, [sp, #4]
 8002bae:	2301      	movs	r3, #1
 8002bb0:	9300      	str	r3, [sp, #0]
 8002bb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bb6:	2296      	movs	r2, #150	; 0x96
 8002bb8:	21fa      	movs	r1, #250	; 0xfa
 8002bba:	f008 fb43 	bl	800b244 <ILI9341_Draw_Text>


}
 8002bbe:	bf00      	nop
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	0800e908 	.word	0x0800e908

08002bcc <FreqMenu_DrawFreqSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawFreqSweepMenu()
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("TODO: Freq Sweep Menu", 	10, 120, BLACK, 2, WHITE);
 8002bd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bd6:	9301      	str	r3, [sp, #4]
 8002bd8:	2302      	movs	r3, #2
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	2300      	movs	r3, #0
 8002bde:	2278      	movs	r2, #120	; 0x78
 8002be0:	210a      	movs	r1, #10
 8002be2:	4803      	ldr	r0, [pc, #12]	; (8002bf0 <FreqMenu_DrawFreqSweepMenu+0x24>)
 8002be4:	f008 fb2e 	bl	800b244 <ILI9341_Draw_Text>




}
 8002be8:	bf00      	nop
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	0800e920 	.word	0x0800e920

08002bf4 <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	af00      	add	r7, sp, #0

	switch(eNextState)
 8002bf8:	4b79      	ldr	r3, [pc, #484]	; (8002de0 <EM_ProcessEvent+0x1ec>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b07      	cmp	r3, #7
 8002bfe:	f200 80db 	bhi.w	8002db8 <EM_ProcessEvent+0x1c4>
 8002c02:	a201      	add	r2, pc, #4	; (adr r2, 8002c08 <EM_ProcessEvent+0x14>)
 8002c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c08:	08002c29 	.word	0x08002c29
 8002c0c:	08002c7d 	.word	0x08002c7d
 8002c10:	08002ca9 	.word	0x08002ca9
 8002c14:	08002cd3 	.word	0x08002cd3
 8002c18:	08002d25 	.word	0x08002d25
 8002c1c:	08002d4f 	.word	0x08002d4f
 8002c20:	08002d79 	.word	0x08002d79
 8002c24:	08002d8f 	.word	0x08002d8f
	{
		case Idle_State:

			if(eNewEvent == evBlueBtn)
 8002c28:	4b6e      	ldr	r3, [pc, #440]	; (8002de4 <EM_ProcessEvent+0x1f0>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d105      	bne.n	8002c3c <EM_ProcessEvent+0x48>
			{
				eNextState = _FuncMenuEntryHandler();
 8002c30:	f000 f8da 	bl	8002de8 <_FuncMenuEntryHandler>
 8002c34:	4603      	mov	r3, r0
 8002c36:	461a      	mov	r2, r3
 8002c38:	4b69      	ldr	r3, [pc, #420]	; (8002de0 <EM_ProcessEvent+0x1ec>)
 8002c3a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8002c3c:	4b69      	ldr	r3, [pc, #420]	; (8002de4 <EM_ProcessEvent+0x1f0>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d105      	bne.n	8002c50 <EM_ProcessEvent+0x5c>
			{
				eNextState = _FreqMainMenuEntryHandler();
 8002c44:	f000 f9b6 	bl	8002fb4 <_FreqMainMenuEntryHandler>
 8002c48:	4603      	mov	r3, r0
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	4b64      	ldr	r3, [pc, #400]	; (8002de0 <EM_ProcessEvent+0x1ec>)
 8002c4e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8002c50:	4b64      	ldr	r3, [pc, #400]	; (8002de4 <EM_ProcessEvent+0x1f0>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d105      	bne.n	8002c64 <EM_ProcessEvent+0x70>
			{
				eNextState = _GainMenuEntryHandler();
 8002c58:	f000 f91a 	bl	8002e90 <_GainMenuEntryHandler>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	461a      	mov	r2, r3
 8002c60:	4b5f      	ldr	r3, [pc, #380]	; (8002de0 <EM_ProcessEvent+0x1ec>)
 8002c62:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8002c64:	4b5f      	ldr	r3, [pc, #380]	; (8002de4 <EM_ProcessEvent+0x1f0>)
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b04      	cmp	r3, #4
 8002c6a:	f040 80a7 	bne.w	8002dbc <EM_ProcessEvent+0x1c8>
			{
				eNextState = _BiasMenuEntryHandler();
 8002c6e:	f000 f95b 	bl	8002f28 <_BiasMenuEntryHandler>
 8002c72:	4603      	mov	r3, r0
 8002c74:	461a      	mov	r2, r3
 8002c76:	4b5a      	ldr	r3, [pc, #360]	; (8002de0 <EM_ProcessEvent+0x1ec>)
 8002c78:	701a      	strb	r2, [r3, #0]
			}

			break;
 8002c7a:	e09f      	b.n	8002dbc <EM_ProcessEvent+0x1c8>

		case Func_Menu_State:

			if(eNewEvent == evEncoderSet)
 8002c7c:	4b59      	ldr	r3, [pc, #356]	; (8002de4 <EM_ProcessEvent+0x1f0>)
 8002c7e:	781b      	ldrb	r3, [r3, #0]
 8002c80:	2b05      	cmp	r3, #5
 8002c82:	d105      	bne.n	8002c90 <EM_ProcessEvent+0x9c>
			{
				eNextState = _FuncMenuInputHandler();
 8002c84:	f000 f8d4 	bl	8002e30 <_FuncMenuInputHandler>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	4b54      	ldr	r3, [pc, #336]	; (8002de0 <EM_ProcessEvent+0x1ec>)
 8002c8e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002c90:	4b54      	ldr	r3, [pc, #336]	; (8002de4 <EM_ProcessEvent+0x1f0>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b06      	cmp	r3, #6
 8002c96:	f040 8093 	bne.w	8002dc0 <EM_ProcessEvent+0x1cc>
			{
				eNextState = _FuncMenuExitHandler();
 8002c9a:	f000 f8df 	bl	8002e5c <_FuncMenuExitHandler>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	4b4f      	ldr	r3, [pc, #316]	; (8002de0 <EM_ProcessEvent+0x1ec>)
 8002ca4:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002ca6:	e08b      	b.n	8002dc0 <EM_ProcessEvent+0x1cc>

		case Gain_Menu_State:

			if(eNewEvent == evEncoderSet)
 8002ca8:	4b4e      	ldr	r3, [pc, #312]	; (8002de4 <EM_ProcessEvent+0x1f0>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b05      	cmp	r3, #5
 8002cae:	d105      	bne.n	8002cbc <EM_ProcessEvent+0xc8>
			{
				eNextState = _GainMenuInputHandler();
 8002cb0:	f000 f908 	bl	8002ec4 <_GainMenuInputHandler>
 8002cb4:	4603      	mov	r3, r0
 8002cb6:	461a      	mov	r2, r3
 8002cb8:	4b49      	ldr	r3, [pc, #292]	; (8002de0 <EM_ProcessEvent+0x1ec>)
 8002cba:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002cbc:	4b49      	ldr	r3, [pc, #292]	; (8002de4 <EM_ProcessEvent+0x1f0>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b06      	cmp	r3, #6
 8002cc2:	d17f      	bne.n	8002dc4 <EM_ProcessEvent+0x1d0>
			{
				eNextState = _GainMenuExitHandler();
 8002cc4:	f000 f916 	bl	8002ef4 <_GainMenuExitHandler>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	461a      	mov	r2, r3
 8002ccc:	4b44      	ldr	r3, [pc, #272]	; (8002de0 <EM_ProcessEvent+0x1ec>)
 8002cce:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002cd0:	e078      	b.n	8002dc4 <EM_ProcessEvent+0x1d0>

			if(eNewEvent == evEncoderSet)
			{
//				eNextState = _FreqMainMenuSetHandler();
			}
			if(eNewEvent == evEncoderPush)
 8002cd2:	4b44      	ldr	r3, [pc, #272]	; (8002de4 <EM_ProcessEvent+0x1f0>)
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	2b06      	cmp	r3, #6
 8002cd8:	d105      	bne.n	8002ce6 <EM_ProcessEvent+0xf2>
			{
				eNextState = _FreqMainMenuExitHandler();
 8002cda:	f000 f97f 	bl	8002fdc <_FreqMainMenuExitHandler>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	4b3f      	ldr	r3, [pc, #252]	; (8002de0 <EM_ProcessEvent+0x1ec>)
 8002ce4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8002ce6:	4b3f      	ldr	r3, [pc, #252]	; (8002de4 <EM_ProcessEvent+0x1f0>)
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d105      	bne.n	8002cfa <EM_ProcessEvent+0x106>
			{
//				FreqO_ApplyPreset(FPRESET_1HZ);
				eNextState = _FreqPresetMenuEntryHandler();
 8002cee:	f000 f98f 	bl	8003010 <_FreqPresetMenuEntryHandler>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	4b3a      	ldr	r3, [pc, #232]	; (8002de0 <EM_ProcessEvent+0x1ec>)
 8002cf8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8002cfa:	4b3a      	ldr	r3, [pc, #232]	; (8002de4 <EM_ProcessEvent+0x1f0>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d105      	bne.n	8002d0e <EM_ProcessEvent+0x11a>
			{
//				FreqO_ApplyPreset(FPRESET_100HZ);
				eNextState = _FreqAdjustMenuEntryHandler();
 8002d02:	f000 f9d7 	bl	80030b4 <_FreqAdjustMenuEntryHandler>
 8002d06:	4603      	mov	r3, r0
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4b35      	ldr	r3, [pc, #212]	; (8002de0 <EM_ProcessEvent+0x1ec>)
 8002d0c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8002d0e:	4b35      	ldr	r3, [pc, #212]	; (8002de4 <EM_ProcessEvent+0x1f0>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b03      	cmp	r3, #3
 8002d14:	d158      	bne.n	8002dc8 <EM_ProcessEvent+0x1d4>
			{
//				FreqO_ApplyPreset(FPRESET_1KHZ);
				eNextState = _FreqSweepMenuEntryHandler();
 8002d16:	f000 fa11 	bl	800313c <_FreqSweepMenuEntryHandler>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	4b30      	ldr	r3, [pc, #192]	; (8002de0 <EM_ProcessEvent+0x1ec>)
 8002d20:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// No menu action
			}
			break;
 8002d22:	e051      	b.n	8002dc8 <EM_ProcessEvent+0x1d4>

		case Freq_Preset_Menu_State:
			if(eNewEvent == evEncoderSet)
 8002d24:	4b2f      	ldr	r3, [pc, #188]	; (8002de4 <EM_ProcessEvent+0x1f0>)
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b05      	cmp	r3, #5
 8002d2a:	d105      	bne.n	8002d38 <EM_ProcessEvent+0x144>
			{
				eNextState = _FreqPresetMenuInputHandler();
 8002d2c:	f000 f99a 	bl	8003064 <_FreqPresetMenuInputHandler>
 8002d30:	4603      	mov	r3, r0
 8002d32:	461a      	mov	r2, r3
 8002d34:	4b2a      	ldr	r3, [pc, #168]	; (8002de0 <EM_ProcessEvent+0x1ec>)
 8002d36:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002d38:	4b2a      	ldr	r3, [pc, #168]	; (8002de4 <EM_ProcessEvent+0x1f0>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b06      	cmp	r3, #6
 8002d3e:	d145      	bne.n	8002dcc <EM_ProcessEvent+0x1d8>
			{
				eNextState = _FreqPresetMenuExitHandler();
 8002d40:	f000 f9a6 	bl	8003090 <_FreqPresetMenuExitHandler>
 8002d44:	4603      	mov	r3, r0
 8002d46:	461a      	mov	r2, r3
 8002d48:	4b25      	ldr	r3, [pc, #148]	; (8002de0 <EM_ProcessEvent+0x1ec>)
 8002d4a:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002d4c:	e03e      	b.n	8002dcc <EM_ProcessEvent+0x1d8>

		case Freq_Adjust_Menu_State:
			if(eNewEvent == evEncoderSet)
 8002d4e:	4b25      	ldr	r3, [pc, #148]	; (8002de4 <EM_ProcessEvent+0x1f0>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	2b05      	cmp	r3, #5
 8002d54:	d105      	bne.n	8002d62 <EM_ProcessEvent+0x16e>
			{
				eNextState = _FreqAdjustMenuInputHandler();
 8002d56:	f000 f9cd 	bl	80030f4 <_FreqAdjustMenuInputHandler>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	4b20      	ldr	r3, [pc, #128]	; (8002de0 <EM_ProcessEvent+0x1ec>)
 8002d60:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002d62:	4b20      	ldr	r3, [pc, #128]	; (8002de4 <EM_ProcessEvent+0x1f0>)
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b06      	cmp	r3, #6
 8002d68:	d132      	bne.n	8002dd0 <EM_ProcessEvent+0x1dc>
			{
				eNextState = _FreqAdjustMenuExitHandler();
 8002d6a:	f000 f9d5 	bl	8003118 <_FreqAdjustMenuExitHandler>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	461a      	mov	r2, r3
 8002d72:	4b1b      	ldr	r3, [pc, #108]	; (8002de0 <EM_ProcessEvent+0x1ec>)
 8002d74:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002d76:	e02b      	b.n	8002dd0 <EM_ProcessEvent+0x1dc>
		case Freq_Sweep_Menu_State:
			if(eNewEvent == evEncoderSet)
			{
//				eNextState = _FreqMainMenuSetHandler();
			}
			if(eNewEvent == evEncoderPush)
 8002d78:	4b1a      	ldr	r3, [pc, #104]	; (8002de4 <EM_ProcessEvent+0x1f0>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b06      	cmp	r3, #6
 8002d7e:	d129      	bne.n	8002dd4 <EM_ProcessEvent+0x1e0>
			{
				eNextState = _FreqSweepMenuExitHandler();
 8002d80:	f000 f9f8 	bl	8003174 <_FreqSweepMenuExitHandler>
 8002d84:	4603      	mov	r3, r0
 8002d86:	461a      	mov	r2, r3
 8002d88:	4b15      	ldr	r3, [pc, #84]	; (8002de0 <EM_ProcessEvent+0x1ec>)
 8002d8a:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002d8c:	e022      	b.n	8002dd4 <EM_ProcessEvent+0x1e0>

		case Bias_Menu_State:
			if(eNewEvent == evEncoderSet)
 8002d8e:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <EM_ProcessEvent+0x1f0>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2b05      	cmp	r3, #5
 8002d94:	d105      	bne.n	8002da2 <EM_ProcessEvent+0x1ae>
			{
				eNextState = _BiasMenuInputHandler();
 8002d96:	f000 f8e1 	bl	8002f5c <_BiasMenuInputHandler>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4b10      	ldr	r3, [pc, #64]	; (8002de0 <EM_ProcessEvent+0x1ec>)
 8002da0:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002da2:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <EM_ProcessEvent+0x1f0>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b06      	cmp	r3, #6
 8002da8:	d116      	bne.n	8002dd8 <EM_ProcessEvent+0x1e4>
			{
				eNextState = _BiasMenuExitHandler();
 8002daa:	f000 f8e9 	bl	8002f80 <_BiasMenuExitHandler>
 8002dae:	4603      	mov	r3, r0
 8002db0:	461a      	mov	r2, r3
 8002db2:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <EM_ProcessEvent+0x1ec>)
 8002db4:	701a      	strb	r2, [r3, #0]
			}

			break;
 8002db6:	e00f      	b.n	8002dd8 <EM_ProcessEvent+0x1e4>

		default:
			break;
 8002db8:	bf00      	nop
 8002dba:	e00e      	b.n	8002dda <EM_ProcessEvent+0x1e6>
			break;
 8002dbc:	bf00      	nop
 8002dbe:	e00c      	b.n	8002dda <EM_ProcessEvent+0x1e6>
			break;
 8002dc0:	bf00      	nop
 8002dc2:	e00a      	b.n	8002dda <EM_ProcessEvent+0x1e6>
			break;
 8002dc4:	bf00      	nop
 8002dc6:	e008      	b.n	8002dda <EM_ProcessEvent+0x1e6>
			break;
 8002dc8:	bf00      	nop
 8002dca:	e006      	b.n	8002dda <EM_ProcessEvent+0x1e6>
			break;
 8002dcc:	bf00      	nop
 8002dce:	e004      	b.n	8002dda <EM_ProcessEvent+0x1e6>
			break;
 8002dd0:	bf00      	nop
 8002dd2:	e002      	b.n	8002dda <EM_ProcessEvent+0x1e6>
			break;
 8002dd4:	bf00      	nop
 8002dd6:	e000      	b.n	8002dda <EM_ProcessEvent+0x1e6>
			break;
 8002dd8:	bf00      	nop
	}

}
 8002dda:	bf00      	nop
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	20001404 	.word	0x20001404
 8002de4:	20001405 	.word	0x20001405

08002de8 <_FuncMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FuncMenuEntryHandler(void)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionMenu Event captured\n");
 8002dee:	480e      	ldr	r0, [pc, #56]	; (8002e28 <_FuncMenuEntryHandler+0x40>)
 8002df0:	f009 fd12 	bl	800c818 <puts>
#endif

	_RefreshDisplay();
 8002df4:	f000 f9e6 	bl	80031c4 <_RefreshDisplay>

	DM_ShowFuncSelectMenu(ENABLE_FUNCMENU);
 8002df8:	2001      	movs	r0, #1
 8002dfa:	f7fe f8dd 	bl	8000fb8 <DM_ShowFuncSelectMenu>

	Func_Preset_Encoder_Pos_t *pFuncPresetTmp =  FuncO_GetFPresetObject();
 8002dfe:	f000 fd33 	bl	8003868 <FuncO_GetFPresetObject>
 8002e02:	6078      	str	r0, [r7, #4]
	if(pFuncPresetTmp)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d009      	beq.n	8002e1e <_FuncMenuEntryHandler+0x36>
	{
		ENCODER_TIMER->CNT = pFuncPresetTmp->epos;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	785a      	ldrb	r2, [r3, #1]
 8002e0e:	4b07      	ldr	r3, [pc, #28]	; (8002e2c <_FuncMenuEntryHandler+0x44>)
 8002e10:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 8002e12:	f000 fd35 	bl	8003880 <FuncO_GetFuncPresetEncoderRange>
 8002e16:	4603      	mov	r3, r0
 8002e18:	461a      	mov	r2, r3
 8002e1a:	4b04      	ldr	r3, [pc, #16]	; (8002e2c <_FuncMenuEntryHandler+0x44>)
 8002e1c:	62da      	str	r2, [r3, #44]	; 0x2c
	}


	return Func_Menu_State;
 8002e1e:	2301      	movs	r3, #1
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	0800e938 	.word	0x0800e938
 8002e2c:	40012c00 	.word	0x40012c00

08002e30 <_FuncMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FuncMenuInputHandler(void)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionAdjust Event captured\n");
 8002e34:	4807      	ldr	r0, [pc, #28]	; (8002e54 <_FuncMenuInputHandler+0x24>)
 8002e36:	f009 fcef 	bl	800c818 <puts>
#endif


	FuncO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8002e3a:	2001      	movs	r0, #1
 8002e3c:	f000 fe36 	bl	8003aac <SM_GetEncoderValue>
 8002e40:	4603      	mov	r3, r0
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 fc14 	bl	8003670 <FuncO_ModifyOutput>
	eNewEvent = evBlueBtn;
 8002e48:	4b03      	ldr	r3, [pc, #12]	; (8002e58 <_FuncMenuInputHandler+0x28>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	701a      	strb	r2, [r3, #0]
	return Func_Menu_State;
 8002e4e:	2301      	movs	r3, #1
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	0800e954 	.word	0x0800e954
 8002e58:	20001405 	.word	0x20001405

08002e5c <_FuncMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FuncMenuExitHandler()
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFuncMenu Event captured\n");
 8002e60:	4808      	ldr	r0, [pc, #32]	; (8002e84 <_FuncMenuExitHandler+0x28>)
 8002e62:	f009 fcd9 	bl	800c818 <puts>
#endif

	// disable the menu

	DM_ShowFuncSelectMenu(DISABLE_FUNCMENU);
 8002e66:	2000      	movs	r0, #0
 8002e68:	f7fe f8a6 	bl	8000fb8 <DM_ShowFuncSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8002e6c:	4b06      	ldr	r3, [pc, #24]	; (8002e88 <_FuncMenuExitHandler+0x2c>)
 8002e6e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e72:	62da      	str	r2, [r3, #44]	; 0x2c

	_RefreshDisplay();
 8002e74:	f000 f9a6 	bl	80031c4 <_RefreshDisplay>

	eNewEvent = evIdle;
 8002e78:	4b04      	ldr	r3, [pc, #16]	; (8002e8c <_FuncMenuExitHandler+0x30>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	0800e974 	.word	0x0800e974
 8002e88:	40012c00 	.word	0x40012c00
 8002e8c:	20001405 	.word	0x20001405

08002e90 <_GainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _GainMenuEntryHandler()
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainMenu Event captured\n");
 8002e94:	4809      	ldr	r0, [pc, #36]	; (8002ebc <_GainMenuEntryHandler+0x2c>)
 8002e96:	f009 fcbf 	bl	800c818 <puts>
#endif

	_RefreshDisplay();
 8002e9a:	f000 f993 	bl	80031c4 <_RefreshDisplay>

	DM_ShowGainSelectMenu(ENABLE_GAINMENU);
 8002e9e:	2001      	movs	r0, #1
 8002ea0:	f7fe fa76 	bl	8001390 <DM_ShowGainSelectMenu>

	// set the rotary encoder limits to 0-32 for this menu
	ENCODER_TIMER->CNT = GO_GetOutputGain();
 8002ea4:	f000 fdf6 	bl	8003a94 <GO_GetOutputGain>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	461a      	mov	r2, r3
 8002eac:	4b04      	ldr	r3, [pc, #16]	; (8002ec0 <_GainMenuEntryHandler+0x30>)
 8002eae:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 32;
 8002eb0:	4b03      	ldr	r3, [pc, #12]	; (8002ec0 <_GainMenuEntryHandler+0x30>)
 8002eb2:	2220      	movs	r2, #32
 8002eb4:	62da      	str	r2, [r3, #44]	; 0x2c

	return Gain_Menu_State;
 8002eb6:	2302      	movs	r3, #2
}
 8002eb8:	4618      	mov	r0, r3
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	0800e990 	.word	0x0800e990
 8002ec0:	40012c00 	.word	0x40012c00

08002ec4 <_GainMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _GainMenuInputHandler()
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainSet Event captured\n");
 8002ec8:	4808      	ldr	r0, [pc, #32]	; (8002eec <_GainMenuInputHandler+0x28>)
 8002eca:	f009 fca5 	bl	800c818 <puts>
#endif

	GO_SetOutputToEncoder(SM_GetEncoderValue(ENCODER_REVERSE));
 8002ece:	2001      	movs	r0, #1
 8002ed0:	f000 fdec 	bl	8003aac <SM_GetEncoderValue>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 fced 	bl	80038b8 <GO_SetOutputToEncoder>

	eNewEvent = evYellowBtn;
 8002ede:	4b04      	ldr	r3, [pc, #16]	; (8002ef0 <_GainMenuInputHandler+0x2c>)
 8002ee0:	2203      	movs	r2, #3
 8002ee2:	701a      	strb	r2, [r3, #0]
	return Gain_Menu_State;
 8002ee4:	2302      	movs	r3, #2
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	0800e9a8 	.word	0x0800e9a8
 8002ef0:	20001405 	.word	0x20001405

08002ef4 <_GainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _GainMenuExitHandler()
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitGainMenu Event captured\n");
 8002ef8:	4808      	ldr	r0, [pc, #32]	; (8002f1c <_GainMenuExitHandler+0x28>)
 8002efa:	f009 fc8d 	bl	800c818 <puts>
#endif


	// disable the menu
	DM_ShowGainSelectMenu(DISABLE_GAINMENU);
 8002efe:	2000      	movs	r0, #0
 8002f00:	f7fe fa46 	bl	8001390 <DM_ShowGainSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8002f04:	4b06      	ldr	r3, [pc, #24]	; (8002f20 <_GainMenuExitHandler+0x2c>)
 8002f06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f0a:	62da      	str	r2, [r3, #44]	; 0x2c

	_RefreshDisplay();
 8002f0c:	f000 f95a 	bl	80031c4 <_RefreshDisplay>

	eNewEvent = evIdle;
 8002f10:	4b04      	ldr	r3, [pc, #16]	; (8002f24 <_GainMenuExitHandler+0x30>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8002f16:	2300      	movs	r3, #0
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	0800e9c0 	.word	0x0800e9c0
 8002f20:	40012c00 	.word	0x40012c00
 8002f24:	20001405 	.word	0x20001405

08002f28 <_BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _BiasMenuEntryHandler()
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasMenu Event captured\n");
 8002f2c:	4809      	ldr	r0, [pc, #36]	; (8002f54 <_BiasMenuEntryHandler+0x2c>)
 8002f2e:	f009 fc73 	bl	800c818 <puts>
#endif

	_RefreshDisplay();
 8002f32:	f000 f947 	bl	80031c4 <_RefreshDisplay>

	DM_ShowBiasSelectMenu(ENABLE_BIASMENU);
 8002f36:	2001      	movs	r0, #1
 8002f38:	f7fe fa5e 	bl	80013f8 <DM_ShowBiasSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu


	ENCODER_TIMER->ARR = BIAS_MAX;
 8002f3c:	4b06      	ldr	r3, [pc, #24]	; (8002f58 <_BiasMenuEntryHandler+0x30>)
 8002f3e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002f42:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BIAS_CENTER;
 8002f44:	4b04      	ldr	r3, [pc, #16]	; (8002f58 <_BiasMenuEntryHandler+0x30>)
 8002f46:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002f4a:	625a      	str	r2, [r3, #36]	; 0x24

	return Bias_Menu_State;
 8002f4c:	2307      	movs	r3, #7
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	0800e9dc 	.word	0x0800e9dc
 8002f58:	40012c00 	.word	0x40012c00

08002f5c <_BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _BiasMenuInputHandler()
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasSet Event captured\n");
 8002f60:	4805      	ldr	r0, [pc, #20]	; (8002f78 <_BiasMenuInputHandler+0x1c>)
 8002f62:	f009 fc59 	bl	800c818 <puts>
#endif

	BO_ModifyOutput();
 8002f66:	f000 f947 	bl	80031f8 <BO_ModifyOutput>

	eNewEvent = evRedBtn;
 8002f6a:	4b04      	ldr	r3, [pc, #16]	; (8002f7c <_BiasMenuInputHandler+0x20>)
 8002f6c:	2204      	movs	r2, #4
 8002f6e:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8002f70:	2307      	movs	r3, #7
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	0800e9f4 	.word	0x0800e9f4
 8002f7c:	20001405 	.word	0x20001405

08002f80 <_BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _BiasMenuExitHandler()
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitBiasMenu Event captured\n");
 8002f84:	4808      	ldr	r0, [pc, #32]	; (8002fa8 <_BiasMenuExitHandler+0x28>)
 8002f86:	f009 fc47 	bl	800c818 <puts>
#endif


	// disable the menu
	DM_ShowBiasSelectMenu(DISABLE_BIASMENU);
 8002f8a:	2000      	movs	r0, #0
 8002f8c:	f7fe fa34 	bl	80013f8 <DM_ShowBiasSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8002f90:	4b06      	ldr	r3, [pc, #24]	; (8002fac <_BiasMenuExitHandler+0x2c>)
 8002f92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f96:	62da      	str	r2, [r3, #44]	; 0x2c

	_RefreshDisplay();
 8002f98:	f000 f914 	bl	80031c4 <_RefreshDisplay>

	eNewEvent = evIdle;
 8002f9c:	4b04      	ldr	r3, [pc, #16]	; (8002fb0 <_BiasMenuExitHandler+0x30>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8002fa2:	2300      	movs	r3, #0
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	0800ea0c 	.word	0x0800ea0c
 8002fac:	40012c00 	.word	0x40012c00
 8002fb0:	20001405 	.word	0x20001405

08002fb4 <_FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqMainMenuEntryHandler()
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqMenu Event captured\n");
 8002fb8:	4806      	ldr	r0, [pc, #24]	; (8002fd4 <_FreqMainMenuEntryHandler+0x20>)
 8002fba:	f009 fc2d 	bl	800c818 <puts>
#endif

	_RefreshDisplay();
 8002fbe:	f000 f901 	bl	80031c4 <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_MAIN_MENU);
 8002fc2:	2001      	movs	r0, #1
 8002fc4:	f7fe fa08 	bl	80013d8 <DM_ShowFreqMenu>
	// set the rotary encoder limits to 0-? for this menu
//	ENCODER_TIMER->CNT = 0;
//	ENCODER_TIMER->ARR = 56;

	// stay in this state
	eNewEvent = evIdle;
 8002fc8:	4b03      	ldr	r3, [pc, #12]	; (8002fd8 <_FreqMainMenuEntryHandler+0x24>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8002fce:	2303      	movs	r3, #3
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	bd80      	pop	{r7, pc}
 8002fd4:	0800ea28 	.word	0x0800ea28
 8002fd8:	20001405 	.word	0x20001405

08002fdc <_FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqMainMenuExitHandler()
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Main Menu Event captured\n");
 8002fe0:	4808      	ldr	r0, [pc, #32]	; (8003004 <_FreqMainMenuExitHandler+0x28>)
 8002fe2:	f009 fc19 	bl	800c818 <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	f7fe f9f6 	bl	80013d8 <DM_ShowFreqMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8002fec:	4b06      	ldr	r3, [pc, #24]	; (8003008 <_FreqMainMenuExitHandler+0x2c>)
 8002fee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ff2:	62da      	str	r2, [r3, #44]	; 0x2c

	_RefreshDisplay();
 8002ff4:	f000 f8e6 	bl	80031c4 <_RefreshDisplay>

	eNewEvent = evIdle;
 8002ff8:	4b04      	ldr	r3, [pc, #16]	; (800300c <_FreqMainMenuExitHandler+0x30>)
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	bd80      	pop	{r7, pc}
 8003004:	0800ea58 	.word	0x0800ea58
 8003008:	40012c00 	.word	0x40012c00
 800300c:	20001405 	.word	0x20001405

08003010 <_FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqPresetMenuEntryHandler()
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Preset Menu Entry Event captured\n");
 8003016:	4810      	ldr	r0, [pc, #64]	; (8003058 <_FreqPresetMenuEntryHandler+0x48>)
 8003018:	f009 fbfe 	bl	800c818 <puts>
#endif

	_RefreshDisplay();
 800301c:	f000 f8d2 	bl	80031c4 <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_PRESET_MENU);
 8003020:	2002      	movs	r0, #2
 8003022:	f7fe f9d9 	bl	80013d8 <DM_ShowFreqMenu>

	Freq_Preset_Encoder_Pos_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8003026:	f000 fadd 	bl	80035e4 <FreqO_GetFPresetObject>
 800302a:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d009      	beq.n	8003046 <_FreqPresetMenuEntryHandler+0x36>
	{
		ENCODER_TIMER->CNT = pFreqPresetTmp->epos;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	791a      	ldrb	r2, [r3, #4]
 8003036:	4b09      	ldr	r3, [pc, #36]	; (800305c <_FreqPresetMenuEntryHandler+0x4c>)
 8003038:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FreqO_GetFreqPresetEncoderRange();
 800303a:	f000 fb01 	bl	8003640 <FreqO_GetFreqPresetEncoderRange>
 800303e:	4603      	mov	r3, r0
 8003040:	461a      	mov	r2, r3
 8003042:	4b06      	ldr	r3, [pc, #24]	; (800305c <_FreqPresetMenuEntryHandler+0x4c>)
 8003044:	62da      	str	r2, [r3, #44]	; 0x2c
	}


	// stay in this state
	eNewEvent = evIdle;
 8003046:	4b06      	ldr	r3, [pc, #24]	; (8003060 <_FreqPresetMenuEntryHandler+0x50>)
 8003048:	2200      	movs	r2, #0
 800304a:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 800304c:	2304      	movs	r3, #4
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	0800ea7c 	.word	0x0800ea7c
 800305c:	40012c00 	.word	0x40012c00
 8003060:	20001405 	.word	0x20001405

08003064 <_FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqPresetMenuInputHandler()
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 8003068:	4807      	ldr	r0, [pc, #28]	; (8003088 <_FreqPresetMenuInputHandler+0x24>)
 800306a:	f009 fbd5 	bl	800c818 <puts>
#endif

	FreqO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800306e:	2001      	movs	r0, #1
 8003070:	f000 fd1c 	bl	8003aac <SM_GetEncoderValue>
 8003074:	4603      	mov	r3, r0
 8003076:	4618      	mov	r0, r3
 8003078:	f000 f9c8 	bl	800340c <FreqO_ModifyOutput>

	// stay in this state
	eNewEvent = evIdle;
 800307c:	4b03      	ldr	r3, [pc, #12]	; (800308c <_FreqPresetMenuInputHandler+0x28>)
 800307e:	2200      	movs	r2, #0
 8003080:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8003082:	2304      	movs	r3, #4
}
 8003084:	4618      	mov	r0, r3
 8003086:	bd80      	pop	{r7, pc}
 8003088:	0800ea40 	.word	0x0800ea40
 800308c:	20001405 	.word	0x20001405

08003090 <_FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqPresetMenuExitHandler()
{
 8003090:	b580      	push	{r7, lr}
 8003092:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Menu Event captured\n");
 8003094:	4805      	ldr	r0, [pc, #20]	; (80030ac <_FreqPresetMenuExitHandler+0x1c>)
 8003096:	f009 fbbf 	bl	800c818 <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 800309a:	2000      	movs	r0, #0
 800309c:	f7fe f99c 	bl	80013d8 <DM_ShowFreqMenu>
	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	// back to main freq menu
	eNewEvent = evGreenBtn;
 80030a0:	4b03      	ldr	r3, [pc, #12]	; (80030b0 <_FreqPresetMenuExitHandler+0x20>)
 80030a2:	2202      	movs	r2, #2
 80030a4:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	0800eaa4 	.word	0x0800eaa4
 80030b0:	20001405 	.word	0x20001405

080030b4 <_FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqAdjustMenuEntryHandler()
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Adjust Menu Event captured\n");
 80030b8:	480a      	ldr	r0, [pc, #40]	; (80030e4 <_FreqAdjustMenuEntryHandler+0x30>)
 80030ba:	f009 fbad 	bl	800c818 <puts>
#endif

	_RefreshDisplay();
 80030be:	f000 f881 	bl	80031c4 <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_ADJUST_MENU);
 80030c2:	2003      	movs	r0, #3
 80030c4:	f7fe f988 	bl	80013d8 <DM_ShowFreqMenu>

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = TIM8->ARR;
 80030c8:	4b07      	ldr	r3, [pc, #28]	; (80030e8 <_FreqAdjustMenuEntryHandler+0x34>)
 80030ca:	4a08      	ldr	r2, [pc, #32]	; (80030ec <_FreqAdjustMenuEntryHandler+0x38>)
 80030cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ce:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 80030d0:	4b06      	ldr	r3, [pc, #24]	; (80030ec <_FreqAdjustMenuEntryHandler+0x38>)
 80030d2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030d6:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 80030d8:	4b05      	ldr	r3, [pc, #20]	; (80030f0 <_FreqAdjustMenuEntryHandler+0x3c>)
 80030da:	2200      	movs	r2, #0
 80030dc:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 80030de:	2305      	movs	r3, #5
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	bd80      	pop	{r7, pc}
 80030e4:	0800eac4 	.word	0x0800eac4
 80030e8:	40013400 	.word	0x40013400
 80030ec:	40012c00 	.word	0x40012c00
 80030f0:	20001405 	.word	0x20001405

080030f4 <_FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqAdjustMenuInputHandler()
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 80030f8:	4805      	ldr	r0, [pc, #20]	; (8003110 <_FreqAdjustMenuInputHandler+0x1c>)
 80030fa:	f009 fb8d 	bl	800c818 <puts>
#endif

	FreqO_AdjustFreq();
 80030fe:	f000 f977 	bl	80033f0 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 8003102:	4b04      	ldr	r3, [pc, #16]	; (8003114 <_FreqAdjustMenuInputHandler+0x20>)
 8003104:	2200      	movs	r2, #0
 8003106:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8003108:	2305      	movs	r3, #5
}
 800310a:	4618      	mov	r0, r3
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop
 8003110:	0800ea40 	.word	0x0800ea40
 8003114:	20001405 	.word	0x20001405

08003118 <_FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqAdjustMenuExitHandler()
{
 8003118:	b580      	push	{r7, lr}
 800311a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Adjust Menu Exit Event captured\n");
 800311c:	4805      	ldr	r0, [pc, #20]	; (8003134 <_FreqAdjustMenuExitHandler+0x1c>)
 800311e:	f009 fb7b 	bl	800c818 <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 8003122:	2000      	movs	r0, #0
 8003124:	f7fe f958 	bl	80013d8 <DM_ShowFreqMenu>
	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	// back to main freq menu
	eNewEvent = evGreenBtn;
 8003128:	4b03      	ldr	r3, [pc, #12]	; (8003138 <_FreqAdjustMenuExitHandler+0x20>)
 800312a:	2202      	movs	r2, #2
 800312c:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 800312e:	2300      	movs	r3, #0
}
 8003130:	4618      	mov	r0, r3
 8003132:	bd80      	pop	{r7, pc}
 8003134:	0800eae4 	.word	0x0800eae4
 8003138:	20001405 	.word	0x20001405

0800313c <_FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqSweepMenuEntryHandler()
{
 800313c:	b580      	push	{r7, lr}
 800313e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Sweep Menu Event captured\n");
 8003140:	4809      	ldr	r0, [pc, #36]	; (8003168 <_FreqSweepMenuEntryHandler+0x2c>)
 8003142:	f009 fb69 	bl	800c818 <puts>
#endif

	_RefreshDisplay();
 8003146:	f000 f83d 	bl	80031c4 <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_SWEEP_MENU);
 800314a:	2004      	movs	r0, #4
 800314c:	f7fe f944 	bl	80013d8 <DM_ShowFreqMenu>

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = 0;
 8003150:	4b06      	ldr	r3, [pc, #24]	; (800316c <_FreqSweepMenuEntryHandler+0x30>)
 8003152:	2200      	movs	r2, #0
 8003154:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 56;
 8003156:	4b05      	ldr	r3, [pc, #20]	; (800316c <_FreqSweepMenuEntryHandler+0x30>)
 8003158:	2238      	movs	r2, #56	; 0x38
 800315a:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 800315c:	4b04      	ldr	r3, [pc, #16]	; (8003170 <_FreqSweepMenuEntryHandler+0x34>)
 800315e:	2200      	movs	r2, #0
 8003160:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8003162:	2306      	movs	r3, #6
}
 8003164:	4618      	mov	r0, r3
 8003166:	bd80      	pop	{r7, pc}
 8003168:	0800eb10 	.word	0x0800eb10
 800316c:	40012c00 	.word	0x40012c00
 8003170:	20001405 	.word	0x20001405

08003174 <_FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqSweepMenuExitHandler()
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Sweep Menu Exit Event captured\n");
 8003178:	4807      	ldr	r0, [pc, #28]	; (8003198 <_FreqSweepMenuExitHandler+0x24>)
 800317a:	f009 fb4d 	bl	800c818 <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 800317e:	2000      	movs	r0, #0
 8003180:	f7fe f92a 	bl	80013d8 <DM_ShowFreqMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8003184:	4b05      	ldr	r3, [pc, #20]	; (800319c <_FreqSweepMenuExitHandler+0x28>)
 8003186:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800318a:	62da      	str	r2, [r3, #44]	; 0x2c

	// back to main freq menu
	eNewEvent = evGreenBtn;
 800318c:	4b04      	ldr	r3, [pc, #16]	; (80031a0 <_FreqSweepMenuExitHandler+0x2c>)
 800318e:	2202      	movs	r2, #2
 8003190:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	bd80      	pop	{r7, pc}
 8003198:	0800eb30 	.word	0x0800eb30
 800319c:	40012c00 	.word	0x40012c00
 80031a0:	20001405 	.word	0x20001405

080031a4 <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 80031ae:	4a04      	ldr	r2, [pc, #16]	; (80031c0 <EM_SetNewEvent+0x1c>)
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	7013      	strb	r3, [r2, #0]
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	20001405 	.word	0x20001405

080031c4 <_RefreshDisplay>:
 *	@param None
 *	@retval None
 *
 */
void _RefreshDisplay()
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 80031c8:	4804      	ldr	r0, [pc, #16]	; (80031dc <_RefreshDisplay+0x18>)
 80031ca:	f006 fbf9 	bl	80099c0 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 80031ce:	f7fe f961 	bl	8001494 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 80031d2:	4802      	ldr	r0, [pc, #8]	; (80031dc <_RefreshDisplay+0x18>)
 80031d4:	f006 fbbe 	bl	8009954 <HAL_TIM_Base_Start_IT>
}
 80031d8:	bf00      	nop
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	200016b0 	.word	0x200016b0

080031e0 <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 80031e4:	4b03      	ldr	r3, [pc, #12]	; (80031f4 <BO_GetBiasPolarity+0x14>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	20000008 	.word	0x20000008

080031f8 <BO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_ModifyOutput()
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	af00      	add	r7, sp, #0
	// apply negative dc bias
	if(SM_GetEncoderValue(ENCODER_REVERSE) < BIAS_CENTER) {
 80031fc:	2001      	movs	r0, #1
 80031fe:	f000 fc55 	bl	8003aac <SM_GetEncoderValue>
 8003202:	4603      	mov	r3, r0
 8003204:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003208:	d217      	bcs.n	800323a <BO_ModifyOutput+0x42>

		eBiasPolarity = INVERSEBIAS;
 800320a:	4b1c      	ldr	r3, [pc, #112]	; (800327c <BO_ModifyOutput+0x84>)
 800320c:	2200      	movs	r2, #0
 800320e:	701a      	strb	r2, [r3, #0]

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							(BIAS_CENTER - SM_GetEncoderValue(ENCODER_REVERSE)) * BIAS_MAG);
 8003210:	2001      	movs	r0, #1
 8003212:	f000 fc4b 	bl	8003aac <SM_GetEncoderValue>
 8003216:	4603      	mov	r3, r0
 8003218:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8003224:	2200      	movs	r2, #0
 8003226:	2110      	movs	r1, #16
 8003228:	4815      	ldr	r0, [pc, #84]	; (8003280 <BO_ModifyOutput+0x88>)
 800322a:	f004 f8fb 	bl	8007424 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 800322e:	2201      	movs	r2, #1
 8003230:	2108      	movs	r1, #8
 8003232:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003236:	f004 ffe3 	bl	8008200 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(SM_GetEncoderValue(ENCODER_REVERSE) >= BIAS_CENTER) {
 800323a:	2001      	movs	r0, #1
 800323c:	f000 fc36 	bl	8003aac <SM_GetEncoderValue>
 8003240:	4603      	mov	r3, r0
 8003242:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003246:	d317      	bcc.n	8003278 <BO_ModifyOutput+0x80>

		eBiasPolarity = NORMALBIAS;
 8003248:	4b0c      	ldr	r3, [pc, #48]	; (800327c <BO_ModifyOutput+0x84>)
 800324a:	2201      	movs	r2, #1
 800324c:	701a      	strb	r2, [r3, #0]

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							(SM_GetEncoderValue(ENCODER_REVERSE) - BIAS_CENTER) * BIAS_MAG);
 800324e:	2001      	movs	r0, #1
 8003250:	f000 fc2c 	bl	8003aac <SM_GetEncoderValue>
 8003254:	4603      	mov	r3, r0
 8003256:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 800325a:	4613      	mov	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	4413      	add	r3, r2
 8003260:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8003262:	2200      	movs	r2, #0
 8003264:	2110      	movs	r1, #16
 8003266:	4806      	ldr	r0, [pc, #24]	; (8003280 <BO_ModifyOutput+0x88>)
 8003268:	f004 f8dc 	bl	8007424 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 800326c:	2200      	movs	r2, #0
 800326e:	2108      	movs	r1, #8
 8003270:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003274:	f004 ffc4 	bl	8008200 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 8003278:	bf00      	nop
 800327a:	bd80      	pop	{r7, pc}
 800327c:	20000008 	.word	0x20000008
 8003280:	2000152c 	.word	0x2000152c

08003284 <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 8003284:	b580      	push	{r7, lr}
 8003286:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8003288:	2110      	movs	r1, #16
 800328a:	4803      	ldr	r0, [pc, #12]	; (8003298 <BO_GetOutputBias+0x14>)
 800328c:	f004 f906 	bl	800749c <HAL_DAC_GetValue>
 8003290:	4603      	mov	r3, r0
}
 8003292:	4618      	mov	r0, r3
 8003294:	bd80      	pop	{r7, pc}
 8003296:	bf00      	nop
 8003298:	2000152c 	.word	0x2000152c

0800329c <DT_InitRegister>:
 *	@param None
 *	@retval None
 *
 */
void DT_InitRegister()
{
 800329c:	b480      	push	{r7}
 800329e:	b083      	sub	sp, #12
 80032a0:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 80032a2:	2300      	movs	r3, #0
 80032a4:	607b      	str	r3, [r7, #4]
 80032a6:	e06b      	b.n	8003380 <DT_InitRegister+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(DacTimerReg[i].psc == 0)
 80032a8:	493a      	ldr	r1, [pc, #232]	; (8003394 <DT_InitRegister+0xf8>)
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	4613      	mov	r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	4413      	add	r3, r2
 80032b2:	009b      	lsls	r3, r3, #2
 80032b4:	440b      	add	r3, r1
 80032b6:	3308      	adds	r3, #8
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d129      	bne.n	8003312 <DT_InitRegister+0x76>
			DacTimerReg[i].arr = ((SM_MCLK / DacTimerReg[i].hertz) / SM_FSAMP) * DacTimerReg[i].error;
 80032be:	4935      	ldr	r1, [pc, #212]	; (8003394 <DT_InitRegister+0xf8>)
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4413      	add	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	3304      	adds	r3, #4
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a31      	ldr	r2, [pc, #196]	; (8003398 <DT_InitRegister+0xfc>)
 80032d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80032de:	492d      	ldr	r1, [pc, #180]	; (8003394 <DT_InitRegister+0xf8>)
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	4613      	mov	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	4413      	add	r3, r2
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	440b      	add	r3, r1
 80032ec:	3310      	adds	r3, #16
 80032ee:	edd3 7a00 	vldr	s15, [r3]
 80032f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032fa:	ee17 0a90 	vmov	r0, s15
 80032fe:	4925      	ldr	r1, [pc, #148]	; (8003394 <DT_InitRegister+0xf8>)
 8003300:	687a      	ldr	r2, [r7, #4]
 8003302:	4613      	mov	r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	4413      	add	r3, r2
 8003308:	009b      	lsls	r3, r3, #2
 800330a:	440b      	add	r3, r1
 800330c:	330c      	adds	r3, #12
 800330e:	6018      	str	r0, [r3, #0]
 8003310:	e033      	b.n	800337a <DT_InitRegister+0xde>
		else
			DacTimerReg[i].arr = (((SM_MCLK / DacTimerReg[i].hertz) / DacTimerReg[i].psc) / SM_FSAMP) * DacTimerReg[i].error;
 8003312:	4920      	ldr	r1, [pc, #128]	; (8003394 <DT_InitRegister+0xf8>)
 8003314:	687a      	ldr	r2, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	4413      	add	r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	3304      	adds	r3, #4
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a1c      	ldr	r2, [pc, #112]	; (8003398 <DT_InitRegister+0xfc>)
 8003326:	fbb2 f1f3 	udiv	r1, r2, r3
 800332a:	481a      	ldr	r0, [pc, #104]	; (8003394 <DT_InitRegister+0xf8>)
 800332c:	687a      	ldr	r2, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4403      	add	r3, r0
 8003338:	3308      	adds	r3, #8
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003340:	ee07 3a90 	vmov	s15, r3
 8003344:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003348:	4912      	ldr	r1, [pc, #72]	; (8003394 <DT_InitRegister+0xf8>)
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	4613      	mov	r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	440b      	add	r3, r1
 8003356:	3310      	adds	r3, #16
 8003358:	edd3 7a00 	vldr	s15, [r3]
 800335c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003360:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003364:	ee17 0a90 	vmov	r0, s15
 8003368:	490a      	ldr	r1, [pc, #40]	; (8003394 <DT_InitRegister+0xf8>)
 800336a:	687a      	ldr	r2, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	330c      	adds	r3, #12
 8003378:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	3301      	adds	r3, #1
 800337e:	607b      	str	r3, [r7, #4]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2b0d      	cmp	r3, #13
 8003384:	dd90      	ble.n	80032a8 <DT_InitRegister+0xc>
	}
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
 8003392:	bf00      	nop
 8003394:	2000000c 	.word	0x2000000c
 8003398:	00155cc0 	.word	0x00155cc0

0800339c <DT_GetRegisterByEnum>:
 *	@param pEnum Enummeration (eFreq_Preset) search criteria. Not an index
 *	@retval Pointer to the found DacTimeReg_t struct. Null if no result!
 *
 */
DacTimeReg_t* DT_GetRegisterByEnum(eFreq_Preset pEnum)
{
 800339c:	b480      	push	{r7}
 800339e:	b085      	sub	sp, #20
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
 80033a8:	e016      	b.n	80033d8 <DT_GetRegisterByEnum+0x3c>
		if(DacTimerReg[i].hertz == pEnum)
 80033aa:	4910      	ldr	r1, [pc, #64]	; (80033ec <DT_GetRegisterByEnum+0x50>)
 80033ac:	68fa      	ldr	r2, [r7, #12]
 80033ae:	4613      	mov	r3, r2
 80033b0:	009b      	lsls	r3, r3, #2
 80033b2:	4413      	add	r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	3304      	adds	r3, #4
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	687a      	ldr	r2, [r7, #4]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d107      	bne.n	80033d2 <DT_GetRegisterByEnum+0x36>
			return &DacTimerReg[i];
 80033c2:	68fa      	ldr	r2, [r7, #12]
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4a07      	ldr	r2, [pc, #28]	; (80033ec <DT_GetRegisterByEnum+0x50>)
 80033ce:	4413      	add	r3, r2
 80033d0:	e006      	b.n	80033e0 <DT_GetRegisterByEnum+0x44>
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	3301      	adds	r3, #1
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2b0d      	cmp	r3, #13
 80033dc:	dde5      	ble.n	80033aa <DT_GetRegisterByEnum+0xe>

	return 0;
 80033de:	2300      	movs	r3, #0
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	3714      	adds	r7, #20
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr
 80033ec:	2000000c 	.word	0x2000000c

080033f0 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
		//TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_HIFREQ_MAG;
		TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 80033f4:	2000      	movs	r0, #0
 80033f6:	f000 fb59 	bl	8003aac <SM_GetEncoderValue>
 80033fa:	4603      	mov	r3, r0
 80033fc:	461a      	mov	r2, r3
 80033fe:	4b02      	ldr	r3, [pc, #8]	; (8003408 <FreqO_AdjustFreq+0x18>)
 8003400:	62da      	str	r2, [r3, #44]	; 0x2c
		//TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_LOFREQ_MAG;
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	40013400 	.word	0x40013400

0800340c <FreqO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ModifyOutput(uint16_t pEncValue)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	80fb      	strh	r3, [r7, #6]

	switch(pEncValue)
 8003416:	88fb      	ldrh	r3, [r7, #6]
 8003418:	2b38      	cmp	r3, #56	; 0x38
 800341a:	f200 80b4 	bhi.w	8003586 <FreqO_ModifyOutput+0x17a>
 800341e:	a201      	add	r2, pc, #4	; (adr r2, 8003424 <FreqO_ModifyOutput+0x18>)
 8003420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003424:	08003509 	.word	0x08003509
 8003428:	08003509 	.word	0x08003509
 800342c:	08003509 	.word	0x08003509
 8003430:	08003509 	.word	0x08003509
 8003434:	08003511 	.word	0x08003511
 8003438:	08003511 	.word	0x08003511
 800343c:	08003511 	.word	0x08003511
 8003440:	08003511 	.word	0x08003511
 8003444:	08003519 	.word	0x08003519
 8003448:	08003519 	.word	0x08003519
 800344c:	08003519 	.word	0x08003519
 8003450:	08003519 	.word	0x08003519
 8003454:	08003521 	.word	0x08003521
 8003458:	08003521 	.word	0x08003521
 800345c:	08003521 	.word	0x08003521
 8003460:	08003521 	.word	0x08003521
 8003464:	08003529 	.word	0x08003529
 8003468:	08003529 	.word	0x08003529
 800346c:	08003529 	.word	0x08003529
 8003470:	08003529 	.word	0x08003529
 8003474:	08003531 	.word	0x08003531
 8003478:	08003531 	.word	0x08003531
 800347c:	08003531 	.word	0x08003531
 8003480:	08003531 	.word	0x08003531
 8003484:	0800353b 	.word	0x0800353b
 8003488:	0800353b 	.word	0x0800353b
 800348c:	0800353b 	.word	0x0800353b
 8003490:	0800353b 	.word	0x0800353b
 8003494:	08003545 	.word	0x08003545
 8003498:	08003545 	.word	0x08003545
 800349c:	08003545 	.word	0x08003545
 80034a0:	08003587 	.word	0x08003587
 80034a4:	08003545 	.word	0x08003545
 80034a8:	0800354f 	.word	0x0800354f
 80034ac:	0800354f 	.word	0x0800354f
 80034b0:	0800354f 	.word	0x0800354f
 80034b4:	0800354f 	.word	0x0800354f
 80034b8:	08003559 	.word	0x08003559
 80034bc:	08003559 	.word	0x08003559
 80034c0:	08003559 	.word	0x08003559
 80034c4:	08003559 	.word	0x08003559
 80034c8:	08003563 	.word	0x08003563
 80034cc:	08003563 	.word	0x08003563
 80034d0:	08003563 	.word	0x08003563
 80034d4:	08003563 	.word	0x08003563
 80034d8:	0800356d 	.word	0x0800356d
 80034dc:	0800356d 	.word	0x0800356d
 80034e0:	0800356d 	.word	0x0800356d
 80034e4:	0800356d 	.word	0x0800356d
 80034e8:	08003577 	.word	0x08003577
 80034ec:	08003577 	.word	0x08003577
 80034f0:	08003577 	.word	0x08003577
 80034f4:	08003577 	.word	0x08003577
 80034f8:	0800357f 	.word	0x0800357f
 80034fc:	0800357f 	.word	0x0800357f
 8003500:	0800357f 	.word	0x0800357f
 8003504:	0800357f 	.word	0x0800357f
	{
		case 0:
		case 1:
		case 2:
		case 3:
			FreqO_ApplyPreset(FPRESET_1HZ);
 8003508:	2001      	movs	r0, #1
 800350a:	f000 f845 	bl	8003598 <FreqO_ApplyPreset>
			break;
 800350e:	e03a      	b.n	8003586 <FreqO_ModifyOutput+0x17a>
		case 4:
		case 5:
		case 6:
		case 7:
			FreqO_ApplyPreset(FPRESET_10HZ);
 8003510:	200a      	movs	r0, #10
 8003512:	f000 f841 	bl	8003598 <FreqO_ApplyPreset>
			break;
 8003516:	e036      	b.n	8003586 <FreqO_ModifyOutput+0x17a>
		case 8:
		case 9:
		case 10:
		case 11:
			FreqO_ApplyPreset(FPRESET_50HZ);
 8003518:	2032      	movs	r0, #50	; 0x32
 800351a:	f000 f83d 	bl	8003598 <FreqO_ApplyPreset>
			break;
 800351e:	e032      	b.n	8003586 <FreqO_ModifyOutput+0x17a>
		case 12:
		case 13:
		case 14:
		case 15:
			FreqO_ApplyPreset(FPRESET_100HZ);
 8003520:	2064      	movs	r0, #100	; 0x64
 8003522:	f000 f839 	bl	8003598 <FreqO_ApplyPreset>
			break;
 8003526:	e02e      	b.n	8003586 <FreqO_ModifyOutput+0x17a>
		case 16:
		case 17:
		case 18:
		case 19:
			FreqO_ApplyPreset(FPRESET_250HZ);
 8003528:	20fa      	movs	r0, #250	; 0xfa
 800352a:	f000 f835 	bl	8003598 <FreqO_ApplyPreset>
			break;
 800352e:	e02a      	b.n	8003586 <FreqO_ModifyOutput+0x17a>
		case 20:
		case 21:
		case 22:
		case 23:
			FreqO_ApplyPreset(FPRESET_500HZ);
 8003530:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003534:	f000 f830 	bl	8003598 <FreqO_ApplyPreset>
			break;
 8003538:	e025      	b.n	8003586 <FreqO_ModifyOutput+0x17a>
		case 24:
		case 25:
		case 26:
		case 27:
			FreqO_ApplyPreset(FPRESET_750HZ);
 800353a:	f240 20ee 	movw	r0, #750	; 0x2ee
 800353e:	f000 f82b 	bl	8003598 <FreqO_ApplyPreset>
			break;
 8003542:	e020      	b.n	8003586 <FreqO_ModifyOutput+0x17a>
		case 28:
		case 29:
		case 30:
		case 32:
			FreqO_ApplyPreset(FPRESET_1KHZ);
 8003544:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003548:	f000 f826 	bl	8003598 <FreqO_ApplyPreset>
			break;
 800354c:	e01b      	b.n	8003586 <FreqO_ModifyOutput+0x17a>
		case 33:
		case 34:
		case 35:
		case 36:
			FreqO_ApplyPreset(FPRESET_5KHZ);
 800354e:	f241 3088 	movw	r0, #5000	; 0x1388
 8003552:	f000 f821 	bl	8003598 <FreqO_ApplyPreset>
			break;
 8003556:	e016      	b.n	8003586 <FreqO_ModifyOutput+0x17a>
		case 37:
		case 38:
		case 39:
		case 40:
			FreqO_ApplyPreset(FPRESET_10KHZ);
 8003558:	f242 7010 	movw	r0, #10000	; 0x2710
 800355c:	f000 f81c 	bl	8003598 <FreqO_ApplyPreset>
			break;
 8003560:	e011      	b.n	8003586 <FreqO_ModifyOutput+0x17a>
		case 41:
		case 42:
		case 43:
		case 44:
			FreqO_ApplyPreset(FPRESET_25KHZ);
 8003562:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8003566:	f000 f817 	bl	8003598 <FreqO_ApplyPreset>
			break;
 800356a:	e00c      	b.n	8003586 <FreqO_ModifyOutput+0x17a>
		case 45:
		case 46:
		case 47:
		case 48:
			FreqO_ApplyPreset(FPRESET_50KHZ);
 800356c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003570:	f000 f812 	bl	8003598 <FreqO_ApplyPreset>
			break;
 8003574:	e007      	b.n	8003586 <FreqO_ModifyOutput+0x17a>
		case 49:
		case 50:
		case 51:
		case 52:
			FreqO_ApplyPreset(FPRESET_75KHZ);
 8003576:	4806      	ldr	r0, [pc, #24]	; (8003590 <FreqO_ModifyOutput+0x184>)
 8003578:	f000 f80e 	bl	8003598 <FreqO_ApplyPreset>
			break;
 800357c:	e003      	b.n	8003586 <FreqO_ModifyOutput+0x17a>
		case 53:
		case 54:
		case 55:
		case 56:
			FreqO_ApplyPreset(FPRESET_100KHZ);
 800357e:	4805      	ldr	r0, [pc, #20]	; (8003594 <FreqO_ModifyOutput+0x188>)
 8003580:	f000 f80a 	bl	8003598 <FreqO_ApplyPreset>
			break;
 8003584:	bf00      	nop
	}

}
 8003586:	bf00      	nop
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}
 800358e:	bf00      	nop
 8003590:	000124f8 	.word	0x000124f8
 8003594:	000186a0 	.word	0x000186a0

08003598 <FreqO_ApplyPreset>:

 *	@retval None
 *
 */
void FreqO_ApplyPreset(eFreq_Preset pPresetEnum)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
	DacTimeReg_t* tmp = DT_GetRegisterByEnum(pPresetEnum);
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f7ff fefb 	bl	800339c <DT_GetRegisterByEnum>
 80035a6:	60f8      	str	r0, [r7, #12]
	if(tmp)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d011      	beq.n	80035d2 <FreqO_ApplyPreset+0x3a>
	{
		TIM8->PSC = tmp->psc;
 80035ae:	4a0b      	ldr	r2, [pc, #44]	; (80035dc <FreqO_ApplyPreset+0x44>)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	6293      	str	r3, [r2, #40]	; 0x28
		TIM8->ARR = tmp->arr;
 80035b6:	4a09      	ldr	r2, [pc, #36]	; (80035dc <FreqO_ApplyPreset+0x44>)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	62d3      	str	r3, [r2, #44]	; 0x2c
		//eNewFreqPreset = pPresetEnum;
		Freq_Preset_Encoder_Pos_t * tmp = FreqO_FindFPresetObject(pPresetEnum);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f81c 	bl	80035fc <FreqO_FindFPresetObject>
 80035c4:	60b8      	str	r0, [r7, #8]
		if(tmp)
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <FreqO_ApplyPreset+0x3a>
		{
			pNewFreqPresetEncoderPos = tmp;
 80035cc:	4a04      	ldr	r2, [pc, #16]	; (80035e0 <FreqO_ApplyPreset+0x48>)
 80035ce:	68bb      	ldr	r3, [r7, #8]
 80035d0:	6013      	str	r3, [r2, #0]
		}

	}
}
 80035d2:	bf00      	nop
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	40013400 	.word	0x40013400
 80035e0:	20000198 	.word	0x20000198

080035e4 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to Freq_Preset_Encoder_Pos_t struct
 *
 */
Freq_Preset_Encoder_Pos_t * FreqO_GetFPresetObject()
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
	return pNewFreqPresetEncoderPos;
 80035e8:	4b03      	ldr	r3, [pc, #12]	; (80035f8 <FreqO_GetFPresetObject+0x14>)
 80035ea:	681b      	ldr	r3, [r3, #0]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	20000198 	.word	0x20000198

080035fc <FreqO_FindFPresetObject>:

 *	@retval pointer to Freq_Preset_Encoder_Pos_t struct
 *
 */
Freq_Preset_Encoder_Pos_t * FreqO_FindFPresetObject(eFreq_Preset pEnum)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b085      	sub	sp, #20
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8003604:	2300      	movs	r3, #0
 8003606:	60fb      	str	r3, [r7, #12]
 8003608:	e00e      	b.n	8003628 <FreqO_FindFPresetObject+0x2c>
	{
		if(aFreqPresetEncoderPos[i].hertz == pEnum)
 800360a:	4a0c      	ldr	r2, [pc, #48]	; (800363c <FreqO_FindFPresetObject+0x40>)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003612:	687a      	ldr	r2, [r7, #4]
 8003614:	429a      	cmp	r2, r3
 8003616:	d104      	bne.n	8003622 <FreqO_FindFPresetObject+0x26>
		{
			return &aFreqPresetEncoderPos[i];
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	00db      	lsls	r3, r3, #3
 800361c:	4a07      	ldr	r2, [pc, #28]	; (800363c <FreqO_FindFPresetObject+0x40>)
 800361e:	4413      	add	r3, r2
 8003620:	e006      	b.n	8003630 <FreqO_FindFPresetObject+0x34>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	3301      	adds	r3, #1
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b0d      	cmp	r3, #13
 800362c:	dded      	ble.n	800360a <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	return 0;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3714      	adds	r7, #20
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr
 800363c:	20000128 	.word	0x20000128

08003640 <FreqO_GetFreqPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FreqO_GetFreqPresetEncoderRange()
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
	return FreqPresetEncoderRange;
 8003644:	4b03      	ldr	r3, [pc, #12]	; (8003654 <FreqO_GetFreqPresetEncoderRange+0x14>)
 8003646:	781b      	ldrb	r3, [r3, #0]
}
 8003648:	4618      	mov	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	20000124 	.word	0x20000124

08003658 <FreqO_GetOutputFreq>:
 *	@param None
 *	@retval uint32_t
 *
 */
uint32_t FreqO_GetOutputFreq()
{
 8003658:	b480      	push	{r7}
 800365a:	af00      	add	r7, sp, #0
	return TIM8->ARR;
 800365c:	4b03      	ldr	r3, [pc, #12]	; (800366c <FreqO_GetOutputFreq+0x14>)
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8003660:	4618      	mov	r0, r3
 8003662:	46bd      	mov	sp, r7
 8003664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003668:	4770      	bx	lr
 800366a:	bf00      	nop
 800366c:	40013400 	.word	0x40013400

08003670 <FuncO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ModifyOutput(uint16_t pEncoderValue)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b082      	sub	sp, #8
 8003674:	af00      	add	r7, sp, #0
 8003676:	4603      	mov	r3, r0
 8003678:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 800367a:	88fb      	ldrh	r3, [r7, #6]
 800367c:	2b17      	cmp	r3, #23
 800367e:	d84b      	bhi.n	8003718 <FuncO_ModifyOutput+0xa8>
 8003680:	a201      	add	r2, pc, #4	; (adr r2, 8003688 <FuncO_ModifyOutput+0x18>)
 8003682:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003686:	bf00      	nop
 8003688:	080036e9 	.word	0x080036e9
 800368c:	080036e9 	.word	0x080036e9
 8003690:	080036e9 	.word	0x080036e9
 8003694:	080036f1 	.word	0x080036f1
 8003698:	080036f1 	.word	0x080036f1
 800369c:	080036f1 	.word	0x080036f1
 80036a0:	080036f1 	.word	0x080036f1
 80036a4:	080036f9 	.word	0x080036f9
 80036a8:	080036f9 	.word	0x080036f9
 80036ac:	080036f9 	.word	0x080036f9
 80036b0:	080036f9 	.word	0x080036f9
 80036b4:	08003701 	.word	0x08003701
 80036b8:	08003701 	.word	0x08003701
 80036bc:	08003701 	.word	0x08003701
 80036c0:	08003701 	.word	0x08003701
 80036c4:	08003709 	.word	0x08003709
 80036c8:	08003709 	.word	0x08003709
 80036cc:	08003709 	.word	0x08003709
 80036d0:	08003709 	.word	0x08003709
 80036d4:	08003711 	.word	0x08003711
 80036d8:	08003711 	.word	0x08003711
 80036dc:	08003711 	.word	0x08003711
 80036e0:	08003711 	.word	0x08003711
 80036e4:	08003711 	.word	0x08003711
	{
		case 0:
		case 1:
		case 2:

			FuncO_ApplyPreset_Fast(SINE_FUNC_MODE);
 80036e8:	2000      	movs	r0, #0
 80036ea:	f000 f819 	bl	8003720 <FuncO_ApplyPreset_Fast>
			break;
 80036ee:	e013      	b.n	8003718 <FuncO_ModifyOutput+0xa8>
		case 3:
		case 4:
		case 5:
		case 6:

			FuncO_ApplyPreset_Fast(SQUARE_FUNC_MODE);
 80036f0:	2001      	movs	r0, #1
 80036f2:	f000 f815 	bl	8003720 <FuncO_ApplyPreset_Fast>

			break;
 80036f6:	e00f      	b.n	8003718 <FuncO_ModifyOutput+0xa8>
		case 7:
		case 8:
		case 9:
		case 10:

			FuncO_ApplyPreset_Fast(SAW_FUNC_MODE);
 80036f8:	2002      	movs	r0, #2
 80036fa:	f000 f811 	bl	8003720 <FuncO_ApplyPreset_Fast>
			break;
 80036fe:	e00b      	b.n	8003718 <FuncO_ModifyOutput+0xa8>
		case 11:
		case 12:
		case 13:
		case 14:

			FuncO_ApplyPreset_Fast(REV_SAW_FUNC_MODE);
 8003700:	2003      	movs	r0, #3
 8003702:	f000 f80d 	bl	8003720 <FuncO_ApplyPreset_Fast>
			break;
 8003706:	e007      	b.n	8003718 <FuncO_ModifyOutput+0xa8>
		case 15:
		case 16:
		case 17:
		case 18:

			FuncO_ApplyPreset_Fast(TRIANGLE_FUNC_MODE);
 8003708:	2004      	movs	r0, #4
 800370a:	f000 f809 	bl	8003720 <FuncO_ApplyPreset_Fast>
			break;
 800370e:	e003      	b.n	8003718 <FuncO_ModifyOutput+0xa8>
		case 20:
		case 21:
		case 22:
		case 23:

			FuncO_ApplyPreset_Fast(IMPULSE_FUNC_MODE);
 8003710:	2005      	movs	r0, #5
 8003712:	f000 f805 	bl	8003720 <FuncO_ApplyPreset_Fast>
			break;
 8003716:	bf00      	nop
	}
}
 8003718:	bf00      	nop
 800371a:	3708      	adds	r7, #8
 800371c:	46bd      	mov	sp, r7
 800371e:	bd80      	pop	{r7, pc}

08003720 <FuncO_ApplyPreset_Fast>:

 *	@retval None
 *
 */
void FuncO_ApplyPreset_Fast(eOutput_mode pPresetEnum)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	b084      	sub	sp, #16
 8003724:	af02      	add	r7, sp, #8
 8003726:	4603      	mov	r3, r0
 8003728:	71fb      	strb	r3, [r7, #7]

	switch(pPresetEnum)
 800372a:	79fb      	ldrb	r3, [r7, #7]
 800372c:	2b05      	cmp	r3, #5
 800372e:	d86f      	bhi.n	8003810 <FuncO_ApplyPreset_Fast+0xf0>
 8003730:	a201      	add	r2, pc, #4	; (adr r2, 8003738 <FuncO_ApplyPreset_Fast+0x18>)
 8003732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003736:	bf00      	nop
 8003738:	08003751 	.word	0x08003751
 800373c:	08003771 	.word	0x08003771
 8003740:	08003791 	.word	0x08003791
 8003744:	080037b1 	.word	0x080037b1
 8003748:	080037d1 	.word	0x080037d1
 800374c:	080037f1 	.word	0x080037f1
	{
		case SINE_FUNC_MODE:
			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[0];
 8003750:	4b31      	ldr	r3, [pc, #196]	; (8003818 <FuncO_ApplyPreset_Fast+0xf8>)
 8003752:	4a32      	ldr	r2, [pc, #200]	; (800381c <FuncO_ApplyPreset_Fast+0xfc>)
 8003754:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8003756:	2100      	movs	r1, #0
 8003758:	4831      	ldr	r0, [pc, #196]	; (8003820 <FuncO_ApplyPreset_Fast+0x100>)
 800375a:	f003 fe0d 	bl	8007378 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800375e:	2300      	movs	r3, #0
 8003760:	9300      	str	r3, [sp, #0]
 8003762:	2378      	movs	r3, #120	; 0x78
 8003764:	4a2f      	ldr	r2, [pc, #188]	; (8003824 <FuncO_ApplyPreset_Fast+0x104>)
 8003766:	2100      	movs	r1, #0
 8003768:	482d      	ldr	r0, [pc, #180]	; (8003820 <FuncO_ApplyPreset_Fast+0x100>)
 800376a:	f003 fd43 	bl	80071f4 <HAL_DAC_Start_DMA>
			break;
 800376e:	e04f      	b.n	8003810 <FuncO_ApplyPreset_Fast+0xf0>

		case SQUARE_FUNC_MODE:
			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[1];
 8003770:	4b29      	ldr	r3, [pc, #164]	; (8003818 <FuncO_ApplyPreset_Fast+0xf8>)
 8003772:	4a2d      	ldr	r2, [pc, #180]	; (8003828 <FuncO_ApplyPreset_Fast+0x108>)
 8003774:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8003776:	2100      	movs	r1, #0
 8003778:	4829      	ldr	r0, [pc, #164]	; (8003820 <FuncO_ApplyPreset_Fast+0x100>)
 800377a:	f003 fdfd 	bl	8007378 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
 800377e:	2300      	movs	r3, #0
 8003780:	9300      	str	r3, [sp, #0]
 8003782:	2378      	movs	r3, #120	; 0x78
 8003784:	4a29      	ldr	r2, [pc, #164]	; (800382c <FuncO_ApplyPreset_Fast+0x10c>)
 8003786:	2100      	movs	r1, #0
 8003788:	4825      	ldr	r0, [pc, #148]	; (8003820 <FuncO_ApplyPreset_Fast+0x100>)
 800378a:	f003 fd33 	bl	80071f4 <HAL_DAC_Start_DMA>
			break;
 800378e:	e03f      	b.n	8003810 <FuncO_ApplyPreset_Fast+0xf0>

		case SAW_FUNC_MODE:
			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[2];
 8003790:	4b21      	ldr	r3, [pc, #132]	; (8003818 <FuncO_ApplyPreset_Fast+0xf8>)
 8003792:	4a27      	ldr	r2, [pc, #156]	; (8003830 <FuncO_ApplyPreset_Fast+0x110>)
 8003794:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8003796:	2100      	movs	r1, #0
 8003798:	4821      	ldr	r0, [pc, #132]	; (8003820 <FuncO_ApplyPreset_Fast+0x100>)
 800379a:	f003 fded 	bl	8007378 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
 800379e:	2300      	movs	r3, #0
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	2378      	movs	r3, #120	; 0x78
 80037a4:	4a23      	ldr	r2, [pc, #140]	; (8003834 <FuncO_ApplyPreset_Fast+0x114>)
 80037a6:	2100      	movs	r1, #0
 80037a8:	481d      	ldr	r0, [pc, #116]	; (8003820 <FuncO_ApplyPreset_Fast+0x100>)
 80037aa:	f003 fd23 	bl	80071f4 <HAL_DAC_Start_DMA>
			break;
 80037ae:	e02f      	b.n	8003810 <FuncO_ApplyPreset_Fast+0xf0>

		case REV_SAW_FUNC_MODE:
			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[3];
 80037b0:	4b19      	ldr	r3, [pc, #100]	; (8003818 <FuncO_ApplyPreset_Fast+0xf8>)
 80037b2:	4a21      	ldr	r2, [pc, #132]	; (8003838 <FuncO_ApplyPreset_Fast+0x118>)
 80037b4:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80037b6:	2100      	movs	r1, #0
 80037b8:	4819      	ldr	r0, [pc, #100]	; (8003820 <FuncO_ApplyPreset_Fast+0x100>)
 80037ba:	f003 fddd 	bl	8007378 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
 80037be:	2300      	movs	r3, #0
 80037c0:	9300      	str	r3, [sp, #0]
 80037c2:	2378      	movs	r3, #120	; 0x78
 80037c4:	4a1d      	ldr	r2, [pc, #116]	; (800383c <FuncO_ApplyPreset_Fast+0x11c>)
 80037c6:	2100      	movs	r1, #0
 80037c8:	4815      	ldr	r0, [pc, #84]	; (8003820 <FuncO_ApplyPreset_Fast+0x100>)
 80037ca:	f003 fd13 	bl	80071f4 <HAL_DAC_Start_DMA>
			break;
 80037ce:	e01f      	b.n	8003810 <FuncO_ApplyPreset_Fast+0xf0>

		case TRIANGLE_FUNC_MODE:
			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[4];
 80037d0:	4b11      	ldr	r3, [pc, #68]	; (8003818 <FuncO_ApplyPreset_Fast+0xf8>)
 80037d2:	4a1b      	ldr	r2, [pc, #108]	; (8003840 <FuncO_ApplyPreset_Fast+0x120>)
 80037d4:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80037d6:	2100      	movs	r1, #0
 80037d8:	4811      	ldr	r0, [pc, #68]	; (8003820 <FuncO_ApplyPreset_Fast+0x100>)
 80037da:	f003 fdcd 	bl	8007378 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 80037de:	2300      	movs	r3, #0
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	2378      	movs	r3, #120	; 0x78
 80037e4:	4a17      	ldr	r2, [pc, #92]	; (8003844 <FuncO_ApplyPreset_Fast+0x124>)
 80037e6:	2100      	movs	r1, #0
 80037e8:	480d      	ldr	r0, [pc, #52]	; (8003820 <FuncO_ApplyPreset_Fast+0x100>)
 80037ea:	f003 fd03 	bl	80071f4 <HAL_DAC_Start_DMA>
			break;
 80037ee:	e00f      	b.n	8003810 <FuncO_ApplyPreset_Fast+0xf0>

		case IMPULSE_FUNC_MODE:
			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[5];
 80037f0:	4b09      	ldr	r3, [pc, #36]	; (8003818 <FuncO_ApplyPreset_Fast+0xf8>)
 80037f2:	4a15      	ldr	r2, [pc, #84]	; (8003848 <FuncO_ApplyPreset_Fast+0x128>)
 80037f4:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80037f6:	2100      	movs	r1, #0
 80037f8:	4809      	ldr	r0, [pc, #36]	; (8003820 <FuncO_ApplyPreset_Fast+0x100>)
 80037fa:	f003 fdbd 	bl	8007378 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE,  DAC_ALIGN_12B_R);
 80037fe:	2300      	movs	r3, #0
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	2378      	movs	r3, #120	; 0x78
 8003804:	4a11      	ldr	r2, [pc, #68]	; (800384c <FuncO_ApplyPreset_Fast+0x12c>)
 8003806:	2100      	movs	r1, #0
 8003808:	4805      	ldr	r0, [pc, #20]	; (8003820 <FuncO_ApplyPreset_Fast+0x100>)
 800380a:	f003 fcf3 	bl	80071f4 <HAL_DAC_Start_DMA>
			break;
 800380e:	bf00      	nop

	//
	}

}
 8003810:	bf00      	nop
 8003812:	3708      	adds	r7, #8
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	200001ac 	.word	0x200001ac
 800381c:	200001a0 	.word	0x200001a0
 8003820:	2000152c 	.word	0x2000152c
 8003824:	20000a94 	.word	0x20000a94
 8003828:	200001a2 	.word	0x200001a2
 800382c:	20000c74 	.word	0x20000c74
 8003830:	200001a4 	.word	0x200001a4
 8003834:	200006d4 	.word	0x200006d4
 8003838:	200001a6 	.word	0x200001a6
 800383c:	200008b4 	.word	0x200008b4
 8003840:	200001a8 	.word	0x200001a8
 8003844:	20000e54 	.word	0x20000e54
 8003848:	200001aa 	.word	0x200001aa
 800384c:	20001034 	.word	0x20001034

08003850 <FuncO_ApplyPreset>:

 *	@retval None
 *
 */
void FuncO_ApplyPreset(eOutput_mode pPresetEnum)
{
 8003850:	b480      	push	{r7}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	71fb      	strb	r3, [r7, #7]
	if(tmp)
	{

	}
	*/
}
 800385a:	bf00      	nop
 800385c:	370c      	adds	r7, #12
 800385e:	46bd      	mov	sp, r7
 8003860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003864:	4770      	bx	lr
	...

08003868 <FuncO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to Func_Preset_Encoder_Pos_t struct
 *
 */
Func_Preset_Encoder_Pos_t * FuncO_GetFPresetObject()
{
 8003868:	b480      	push	{r7}
 800386a:	af00      	add	r7, sp, #0
	return pNewFuncPresetEncoderPos;
 800386c:	4b03      	ldr	r3, [pc, #12]	; (800387c <FuncO_GetFPresetObject+0x14>)
 800386e:	681b      	ldr	r3, [r3, #0]
}
 8003870:	4618      	mov	r0, r3
 8003872:	46bd      	mov	sp, r7
 8003874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	200001ac 	.word	0x200001ac

08003880 <FuncO_GetFuncPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FuncO_GetFuncPresetEncoderRange()
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
	return FuncPresetEncoderRange;
 8003884:	4b03      	ldr	r3, [pc, #12]	; (8003894 <FuncO_GetFuncPresetEncoderRange+0x14>)
 8003886:	781b      	ldrb	r3, [r3, #0]
}
 8003888:	4618      	mov	r0, r3
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	2000019c 	.word	0x2000019c

08003898 <GO_GetGainInDecibels>:
 *	@param None
 *	@retval None
 *
 */
int8_t GO_GetGainInDecibels(eOutput_gain pGain)
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	4603      	mov	r3, r0
 80038a0:	71fb      	strb	r3, [r7, #7]
	return gain_decibels[pGain];
 80038a2:	79fb      	ldrb	r3, [r7, #7]
 80038a4:	4a03      	ldr	r2, [pc, #12]	; (80038b4 <GO_GetGainInDecibels+0x1c>)
 80038a6:	56d3      	ldrsb	r3, [r2, r3]
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	370c      	adds	r7, #12
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr
 80038b4:	200001b0 	.word	0x200001b0

080038b8 <GO_SetOutputToEncoder>:
 *	@param None
 *	@retval None
 *
 */
void GO_SetOutputToEncoder(uint8_t pGain)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b082      	sub	sp, #8
 80038bc:	af00      	add	r7, sp, #0
 80038be:	4603      	mov	r3, r0
 80038c0:	71fb      	strb	r3, [r7, #7]

	// PGA Truth table for LTC6910:
	// https://www.analog.com/media/en/technical-documentation/data-sheets/6910fb.pdf
	switch(pGain)
 80038c2:	79fb      	ldrb	r3, [r7, #7]
 80038c4:	2b1f      	cmp	r3, #31
 80038c6:	f200 80db 	bhi.w	8003a80 <GO_SetOutputToEncoder+0x1c8>
 80038ca:	a201      	add	r2, pc, #4	; (adr r2, 80038d0 <GO_SetOutputToEncoder+0x18>)
 80038cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038d0:	08003951 	.word	0x08003951
 80038d4:	08003951 	.word	0x08003951
 80038d8:	08003951 	.word	0x08003951
 80038dc:	08003951 	.word	0x08003951
 80038e0:	08003977 	.word	0x08003977
 80038e4:	08003977 	.word	0x08003977
 80038e8:	08003977 	.word	0x08003977
 80038ec:	08003977 	.word	0x08003977
 80038f0:	0800399d 	.word	0x0800399d
 80038f4:	0800399d 	.word	0x0800399d
 80038f8:	0800399d 	.word	0x0800399d
 80038fc:	0800399d 	.word	0x0800399d
 8003900:	080039c3 	.word	0x080039c3
 8003904:	080039c3 	.word	0x080039c3
 8003908:	080039c3 	.word	0x080039c3
 800390c:	080039c3 	.word	0x080039c3
 8003910:	080039e9 	.word	0x080039e9
 8003914:	080039e9 	.word	0x080039e9
 8003918:	080039e9 	.word	0x080039e9
 800391c:	080039e9 	.word	0x080039e9
 8003920:	08003a0f 	.word	0x08003a0f
 8003924:	08003a0f 	.word	0x08003a0f
 8003928:	08003a0f 	.word	0x08003a0f
 800392c:	08003a0f 	.word	0x08003a0f
 8003930:	08003a35 	.word	0x08003a35
 8003934:	08003a35 	.word	0x08003a35
 8003938:	08003a35 	.word	0x08003a35
 800393c:	08003a35 	.word	0x08003a35
 8003940:	08003a5b 	.word	0x08003a5b
 8003944:	08003a5b 	.word	0x08003a5b
 8003948:	08003a5b 	.word	0x08003a5b
 800394c:	08003a5b 	.word	0x08003a5b
	{
		case 0:
		case 1:
		case 2:
		case 3:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8003950:	2200      	movs	r2, #0
 8003952:	2101      	movs	r1, #1
 8003954:	484c      	ldr	r0, [pc, #304]	; (8003a88 <GO_SetOutputToEncoder+0x1d0>)
 8003956:	f004 fc53 	bl	8008200 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800395a:	2200      	movs	r2, #0
 800395c:	2120      	movs	r1, #32
 800395e:	484b      	ldr	r0, [pc, #300]	; (8003a8c <GO_SetOutputToEncoder+0x1d4>)
 8003960:	f004 fc4e 	bl	8008200 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8003964:	2200      	movs	r2, #0
 8003966:	2110      	movs	r1, #16
 8003968:	4848      	ldr	r0, [pc, #288]	; (8003a8c <GO_SetOutputToEncoder+0x1d4>)
 800396a:	f004 fc49 	bl	8008200 <HAL_GPIO_WritePin>
			eNewOutGain = Zero_Gain;
 800396e:	4b48      	ldr	r3, [pc, #288]	; (8003a90 <GO_SetOutputToEncoder+0x1d8>)
 8003970:	2200      	movs	r2, #0
 8003972:	701a      	strb	r2, [r3, #0]
			break;
 8003974:	e084      	b.n	8003a80 <GO_SetOutputToEncoder+0x1c8>
		case 4:
		case 5:
		case 6:
		case 7:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8003976:	2201      	movs	r2, #1
 8003978:	2101      	movs	r1, #1
 800397a:	4843      	ldr	r0, [pc, #268]	; (8003a88 <GO_SetOutputToEncoder+0x1d0>)
 800397c:	f004 fc40 	bl	8008200 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8003980:	2200      	movs	r2, #0
 8003982:	2120      	movs	r1, #32
 8003984:	4841      	ldr	r0, [pc, #260]	; (8003a8c <GO_SetOutputToEncoder+0x1d4>)
 8003986:	f004 fc3b 	bl	8008200 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 800398a:	2200      	movs	r2, #0
 800398c:	2110      	movs	r1, #16
 800398e:	483f      	ldr	r0, [pc, #252]	; (8003a8c <GO_SetOutputToEncoder+0x1d4>)
 8003990:	f004 fc36 	bl	8008200 <HAL_GPIO_WritePin>
			eNewOutGain = One_Gain;
 8003994:	4b3e      	ldr	r3, [pc, #248]	; (8003a90 <GO_SetOutputToEncoder+0x1d8>)
 8003996:	2201      	movs	r2, #1
 8003998:	701a      	strb	r2, [r3, #0]
			break;
 800399a:	e071      	b.n	8003a80 <GO_SetOutputToEncoder+0x1c8>
		case 8:
		case 9:
		case 10:
		case 11:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 800399c:	2200      	movs	r2, #0
 800399e:	2101      	movs	r1, #1
 80039a0:	4839      	ldr	r0, [pc, #228]	; (8003a88 <GO_SetOutputToEncoder+0x1d0>)
 80039a2:	f004 fc2d 	bl	8008200 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80039a6:	2201      	movs	r2, #1
 80039a8:	2120      	movs	r1, #32
 80039aa:	4838      	ldr	r0, [pc, #224]	; (8003a8c <GO_SetOutputToEncoder+0x1d4>)
 80039ac:	f004 fc28 	bl	8008200 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80039b0:	2200      	movs	r2, #0
 80039b2:	2110      	movs	r1, #16
 80039b4:	4835      	ldr	r0, [pc, #212]	; (8003a8c <GO_SetOutputToEncoder+0x1d4>)
 80039b6:	f004 fc23 	bl	8008200 <HAL_GPIO_WritePin>
			eNewOutGain = Two_Gain;
 80039ba:	4b35      	ldr	r3, [pc, #212]	; (8003a90 <GO_SetOutputToEncoder+0x1d8>)
 80039bc:	2202      	movs	r2, #2
 80039be:	701a      	strb	r2, [r3, #0]
			break;
 80039c0:	e05e      	b.n	8003a80 <GO_SetOutputToEncoder+0x1c8>
		case 12:
		case 13:
		case 14:
		case 15:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80039c2:	2201      	movs	r2, #1
 80039c4:	2101      	movs	r1, #1
 80039c6:	4830      	ldr	r0, [pc, #192]	; (8003a88 <GO_SetOutputToEncoder+0x1d0>)
 80039c8:	f004 fc1a 	bl	8008200 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80039cc:	2201      	movs	r2, #1
 80039ce:	2120      	movs	r1, #32
 80039d0:	482e      	ldr	r0, [pc, #184]	; (8003a8c <GO_SetOutputToEncoder+0x1d4>)
 80039d2:	f004 fc15 	bl	8008200 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80039d6:	2200      	movs	r2, #0
 80039d8:	2110      	movs	r1, #16
 80039da:	482c      	ldr	r0, [pc, #176]	; (8003a8c <GO_SetOutputToEncoder+0x1d4>)
 80039dc:	f004 fc10 	bl	8008200 <HAL_GPIO_WritePin>
			eNewOutGain = Three_Gain;
 80039e0:	4b2b      	ldr	r3, [pc, #172]	; (8003a90 <GO_SetOutputToEncoder+0x1d8>)
 80039e2:	2203      	movs	r2, #3
 80039e4:	701a      	strb	r2, [r3, #0]
			break;
 80039e6:	e04b      	b.n	8003a80 <GO_SetOutputToEncoder+0x1c8>
		case 16:
		case 17:
		case 18:
		case 19:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80039e8:	2200      	movs	r2, #0
 80039ea:	2101      	movs	r1, #1
 80039ec:	4826      	ldr	r0, [pc, #152]	; (8003a88 <GO_SetOutputToEncoder+0x1d0>)
 80039ee:	f004 fc07 	bl	8008200 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80039f2:	2200      	movs	r2, #0
 80039f4:	2120      	movs	r1, #32
 80039f6:	4825      	ldr	r0, [pc, #148]	; (8003a8c <GO_SetOutputToEncoder+0x1d4>)
 80039f8:	f004 fc02 	bl	8008200 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80039fc:	2201      	movs	r2, #1
 80039fe:	2110      	movs	r1, #16
 8003a00:	4822      	ldr	r0, [pc, #136]	; (8003a8c <GO_SetOutputToEncoder+0x1d4>)
 8003a02:	f004 fbfd 	bl	8008200 <HAL_GPIO_WritePin>
			eNewOutGain = Four_Gain;
 8003a06:	4b22      	ldr	r3, [pc, #136]	; (8003a90 <GO_SetOutputToEncoder+0x1d8>)
 8003a08:	2204      	movs	r2, #4
 8003a0a:	701a      	strb	r2, [r3, #0]
			break;
 8003a0c:	e038      	b.n	8003a80 <GO_SetOutputToEncoder+0x1c8>
		case 20:
		case 21:
		case 22:
		case 23:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8003a0e:	2201      	movs	r2, #1
 8003a10:	2101      	movs	r1, #1
 8003a12:	481d      	ldr	r0, [pc, #116]	; (8003a88 <GO_SetOutputToEncoder+0x1d0>)
 8003a14:	f004 fbf4 	bl	8008200 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8003a18:	2200      	movs	r2, #0
 8003a1a:	2120      	movs	r1, #32
 8003a1c:	481b      	ldr	r0, [pc, #108]	; (8003a8c <GO_SetOutputToEncoder+0x1d4>)
 8003a1e:	f004 fbef 	bl	8008200 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8003a22:	2201      	movs	r2, #1
 8003a24:	2110      	movs	r1, #16
 8003a26:	4819      	ldr	r0, [pc, #100]	; (8003a8c <GO_SetOutputToEncoder+0x1d4>)
 8003a28:	f004 fbea 	bl	8008200 <HAL_GPIO_WritePin>
			eNewOutGain = Five_Gain;
 8003a2c:	4b18      	ldr	r3, [pc, #96]	; (8003a90 <GO_SetOutputToEncoder+0x1d8>)
 8003a2e:	2205      	movs	r2, #5
 8003a30:	701a      	strb	r2, [r3, #0]
			break;
 8003a32:	e025      	b.n	8003a80 <GO_SetOutputToEncoder+0x1c8>
		case 24:
		case 25:
		case 26:
		case 27:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8003a34:	2200      	movs	r2, #0
 8003a36:	2101      	movs	r1, #1
 8003a38:	4813      	ldr	r0, [pc, #76]	; (8003a88 <GO_SetOutputToEncoder+0x1d0>)
 8003a3a:	f004 fbe1 	bl	8008200 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8003a3e:	2201      	movs	r2, #1
 8003a40:	2120      	movs	r1, #32
 8003a42:	4812      	ldr	r0, [pc, #72]	; (8003a8c <GO_SetOutputToEncoder+0x1d4>)
 8003a44:	f004 fbdc 	bl	8008200 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8003a48:	2201      	movs	r2, #1
 8003a4a:	2110      	movs	r1, #16
 8003a4c:	480f      	ldr	r0, [pc, #60]	; (8003a8c <GO_SetOutputToEncoder+0x1d4>)
 8003a4e:	f004 fbd7 	bl	8008200 <HAL_GPIO_WritePin>
			eNewOutGain = Six_Gain;
 8003a52:	4b0f      	ldr	r3, [pc, #60]	; (8003a90 <GO_SetOutputToEncoder+0x1d8>)
 8003a54:	2206      	movs	r2, #6
 8003a56:	701a      	strb	r2, [r3, #0]
			break;
 8003a58:	e012      	b.n	8003a80 <GO_SetOutputToEncoder+0x1c8>
		case 28:
		case 29:
		case 30:
		case 31:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	480a      	ldr	r0, [pc, #40]	; (8003a88 <GO_SetOutputToEncoder+0x1d0>)
 8003a60:	f004 fbce 	bl	8008200 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8003a64:	2201      	movs	r2, #1
 8003a66:	2120      	movs	r1, #32
 8003a68:	4808      	ldr	r0, [pc, #32]	; (8003a8c <GO_SetOutputToEncoder+0x1d4>)
 8003a6a:	f004 fbc9 	bl	8008200 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8003a6e:	2201      	movs	r2, #1
 8003a70:	2110      	movs	r1, #16
 8003a72:	4806      	ldr	r0, [pc, #24]	; (8003a8c <GO_SetOutputToEncoder+0x1d4>)
 8003a74:	f004 fbc4 	bl	8008200 <HAL_GPIO_WritePin>
			eNewOutGain = Seven_Gain;
 8003a78:	4b05      	ldr	r3, [pc, #20]	; (8003a90 <GO_SetOutputToEncoder+0x1d8>)
 8003a7a:	2207      	movs	r2, #7
 8003a7c:	701a      	strb	r2, [r3, #0]
			break;
 8003a7e:	bf00      	nop
	}

}
 8003a80:	bf00      	nop
 8003a82:	3708      	adds	r7, #8
 8003a84:	46bd      	mov	sp, r7
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	48000400 	.word	0x48000400
 8003a8c:	48000800 	.word	0x48000800
 8003a90:	200001b8 	.word	0x200001b8

08003a94 <GO_GetOutputGain>:
 *	@param None
 *	@retval None
 *
 */
uint8_t GO_GetOutputGain()
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
	return (uint8_t)eNewOutGain;
 8003a98:	4b03      	ldr	r3, [pc, #12]	; (8003aa8 <GO_GetOutputGain+0x14>)
 8003a9a:	781b      	ldrb	r3, [r3, #0]
}
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa4:	4770      	bx	lr
 8003aa6:	bf00      	nop
 8003aa8:	200001b8 	.word	0x200001b8

08003aac <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	71fb      	strb	r3, [r7, #7]
	if(direction)
 8003ab6:	79fb      	ldrb	r3, [r7, #7]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d008      	beq.n	8003ace <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8003abc:	4b08      	ldr	r3, [pc, #32]	; (8003ae0 <SM_GetEncoderValue+0x34>)
 8003abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ac0:	b29a      	uxth	r2, r3
 8003ac2:	4b07      	ldr	r3, [pc, #28]	; (8003ae0 <SM_GetEncoderValue+0x34>)
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	e002      	b.n	8003ad4 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8003ace:	4b04      	ldr	r3, [pc, #16]	; (8003ae0 <SM_GetEncoderValue+0x34>)
 8003ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad2:	b29b      	uxth	r3, r3
	}
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	40012c00 	.word	0x40012c00

08003ae4 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
	volatile float tim8_psc;
	volatile float tim8_arr;

	// safe-guard against divide by zero
	(TIM8->PSC == 0) ? (tim8_psc = 1) : (tim8_psc = TIM8->PSC);
 8003aea:	4b1d      	ldr	r3, [pc, #116]	; (8003b60 <SM_GetOutputInHertz+0x7c>)
 8003aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d103      	bne.n	8003afa <SM_GetOutputInHertz+0x16>
 8003af2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003af6:	60bb      	str	r3, [r7, #8]
 8003af8:	e007      	b.n	8003b0a <SM_GetOutputInHertz+0x26>
 8003afa:	4b19      	ldr	r3, [pc, #100]	; (8003b60 <SM_GetOutputInHertz+0x7c>)
 8003afc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afe:	ee07 3a90 	vmov	s15, r3
 8003b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b06:	edc7 7a02 	vstr	s15, [r7, #8]
	(TIM8->ARR == 0) ? (tim8_arr = 1) : (tim8_arr = TIM8->ARR);
 8003b0a:	4b15      	ldr	r3, [pc, #84]	; (8003b60 <SM_GetOutputInHertz+0x7c>)
 8003b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d103      	bne.n	8003b1a <SM_GetOutputInHertz+0x36>
 8003b12:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003b16:	607b      	str	r3, [r7, #4]
 8003b18:	e007      	b.n	8003b2a <SM_GetOutputInHertz+0x46>
 8003b1a:	4b11      	ldr	r3, [pc, #68]	; (8003b60 <SM_GetOutputInHertz+0x7c>)
 8003b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b1e:	ee07 3a90 	vmov	s15, r3
 8003b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b26:	edc7 7a01 	vstr	s15, [r7, #4]

	float tim8_freq = SM_MCLK / (tim8_psc * tim8_arr);
 8003b2a:	ed97 7a02 	vldr	s14, [r7, #8]
 8003b2e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b36:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8003b64 <SM_GetOutputInHertz+0x80>
 8003b3a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b3e:	edc7 7a03 	vstr	s15, [r7, #12]


	return tim8_freq / SM_FSAMP;
 8003b42:	edd7 7a03 	vldr	s15, [r7, #12]
 8003b46:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003b68 <SM_GetOutputInHertz+0x84>
 8003b4a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003b4e:	eef0 7a66 	vmov.f32	s15, s13
}
 8003b52:	eeb0 0a67 	vmov.f32	s0, s15
 8003b56:	3714      	adds	r7, #20
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	40013400 	.word	0x40013400
 8003b64:	4d2037a0 	.word	0x4d2037a0
 8003b68:	42f00000 	.word	0x42f00000

08003b6c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b08c      	sub	sp, #48	; 0x30
 8003b70:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8003b72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
 8003b7a:	605a      	str	r2, [r3, #4]
 8003b7c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003b7e:	1d3b      	adds	r3, r7, #4
 8003b80:	2220      	movs	r2, #32
 8003b82:	2100      	movs	r1, #0
 8003b84:	4618      	mov	r0, r3
 8003b86:	f008 f987 	bl	800be98 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8003b8a:	4b32      	ldr	r3, [pc, #200]	; (8003c54 <MX_ADC1_Init+0xe8>)
 8003b8c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003b90:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003b92:	4b30      	ldr	r3, [pc, #192]	; (8003c54 <MX_ADC1_Init+0xe8>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003b98:	4b2e      	ldr	r3, [pc, #184]	; (8003c54 <MX_ADC1_Init+0xe8>)
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003b9e:	4b2d      	ldr	r3, [pc, #180]	; (8003c54 <MX_ADC1_Init+0xe8>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8003ba4:	4b2b      	ldr	r3, [pc, #172]	; (8003c54 <MX_ADC1_Init+0xe8>)
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003baa:	4b2a      	ldr	r3, [pc, #168]	; (8003c54 <MX_ADC1_Init+0xe8>)
 8003bac:	2200      	movs	r2, #0
 8003bae:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003bb0:	4b28      	ldr	r3, [pc, #160]	; (8003c54 <MX_ADC1_Init+0xe8>)
 8003bb2:	2204      	movs	r2, #4
 8003bb4:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003bb6:	4b27      	ldr	r3, [pc, #156]	; (8003c54 <MX_ADC1_Init+0xe8>)
 8003bb8:	2200      	movs	r2, #0
 8003bba:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8003bbc:	4b25      	ldr	r3, [pc, #148]	; (8003c54 <MX_ADC1_Init+0xe8>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8003bc2:	4b24      	ldr	r3, [pc, #144]	; (8003c54 <MX_ADC1_Init+0xe8>)
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003bc8:	4b22      	ldr	r3, [pc, #136]	; (8003c54 <MX_ADC1_Init+0xe8>)
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003bd0:	4b20      	ldr	r3, [pc, #128]	; (8003c54 <MX_ADC1_Init+0xe8>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003bd6:	4b1f      	ldr	r3, [pc, #124]	; (8003c54 <MX_ADC1_Init+0xe8>)
 8003bd8:	2200      	movs	r2, #0
 8003bda:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003bdc:	4b1d      	ldr	r3, [pc, #116]	; (8003c54 <MX_ADC1_Init+0xe8>)
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003be4:	4b1b      	ldr	r3, [pc, #108]	; (8003c54 <MX_ADC1_Init+0xe8>)
 8003be6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003bea:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8003bec:	4b19      	ldr	r3, [pc, #100]	; (8003c54 <MX_ADC1_Init+0xe8>)
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003bf4:	4817      	ldr	r0, [pc, #92]	; (8003c54 <MX_ADC1_Init+0xe8>)
 8003bf6:	f001 fffb 	bl	8005bf0 <HAL_ADC_Init>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d001      	beq.n	8003c04 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8003c00:	f000 ff38 	bl	8004a74 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003c04:	2300      	movs	r3, #0
 8003c06:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003c08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003c0c:	4619      	mov	r1, r3
 8003c0e:	4811      	ldr	r0, [pc, #68]	; (8003c54 <MX_ADC1_Init+0xe8>)
 8003c10:	f002 fd84 	bl	800671c <HAL_ADCEx_MultiModeConfigChannel>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8003c1a:	f000 ff2b 	bl	8004a74 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8003c1e:	4b0e      	ldr	r3, [pc, #56]	; (8003c58 <MX_ADC1_Init+0xec>)
 8003c20:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003c22:	2306      	movs	r3, #6
 8003c24:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003c2a:	237f      	movs	r3, #127	; 0x7f
 8003c2c:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003c2e:	2304      	movs	r3, #4
 8003c30:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8003c32:	2300      	movs	r3, #0
 8003c34:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003c36:	1d3b      	adds	r3, r7, #4
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4806      	ldr	r0, [pc, #24]	; (8003c54 <MX_ADC1_Init+0xe8>)
 8003c3c:	f002 f998 	bl	8005f70 <HAL_ADC_ConfigChannel>
 8003c40:	4603      	mov	r3, r0
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d001      	beq.n	8003c4a <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8003c46:	f000 ff15 	bl	8004a74 <Error_Handler>
  }

}
 8003c4a:	bf00      	nop
 8003c4c:	3730      	adds	r7, #48	; 0x30
 8003c4e:	46bd      	mov	sp, r7
 8003c50:	bd80      	pop	{r7, pc}
 8003c52:	bf00      	nop
 8003c54:	20001428 	.word	0x20001428
 8003c58:	0c900008 	.word	0x0c900008

08003c5c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b08a      	sub	sp, #40	; 0x28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c64:	f107 0314 	add.w	r3, r7, #20
 8003c68:	2200      	movs	r2, #0
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	605a      	str	r2, [r3, #4]
 8003c6e:	609a      	str	r2, [r3, #8]
 8003c70:	60da      	str	r2, [r3, #12]
 8003c72:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c7c:	d14f      	bne.n	8003d1e <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8003c7e:	4b2a      	ldr	r3, [pc, #168]	; (8003d28 <HAL_ADC_MspInit+0xcc>)
 8003c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c82:	4a29      	ldr	r2, [pc, #164]	; (8003d28 <HAL_ADC_MspInit+0xcc>)
 8003c84:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003c88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c8a:	4b27      	ldr	r3, [pc, #156]	; (8003d28 <HAL_ADC_MspInit+0xcc>)
 8003c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c92:	613b      	str	r3, [r7, #16]
 8003c94:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c96:	4b24      	ldr	r3, [pc, #144]	; (8003d28 <HAL_ADC_MspInit+0xcc>)
 8003c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c9a:	4a23      	ldr	r2, [pc, #140]	; (8003d28 <HAL_ADC_MspInit+0xcc>)
 8003c9c:	f043 0301 	orr.w	r3, r3, #1
 8003ca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ca2:	4b21      	ldr	r3, [pc, #132]	; (8003d28 <HAL_ADC_MspInit+0xcc>)
 8003ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003cae:	2304      	movs	r3, #4
 8003cb0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003cba:	f107 0314 	add.w	r3, r7, #20
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cc4:	f004 f902 	bl	8007ecc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8003cc8:	4b18      	ldr	r3, [pc, #96]	; (8003d2c <HAL_ADC_MspInit+0xd0>)
 8003cca:	4a19      	ldr	r2, [pc, #100]	; (8003d30 <HAL_ADC_MspInit+0xd4>)
 8003ccc:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8003cce:	4b17      	ldr	r3, [pc, #92]	; (8003d2c <HAL_ADC_MspInit+0xd0>)
 8003cd0:	2205      	movs	r2, #5
 8003cd2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003cd4:	4b15      	ldr	r3, [pc, #84]	; (8003d2c <HAL_ADC_MspInit+0xd0>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003cda:	4b14      	ldr	r3, [pc, #80]	; (8003d2c <HAL_ADC_MspInit+0xd0>)
 8003cdc:	2200      	movs	r2, #0
 8003cde:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8003ce0:	4b12      	ldr	r3, [pc, #72]	; (8003d2c <HAL_ADC_MspInit+0xd0>)
 8003ce2:	2280      	movs	r2, #128	; 0x80
 8003ce4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003ce6:	4b11      	ldr	r3, [pc, #68]	; (8003d2c <HAL_ADC_MspInit+0xd0>)
 8003ce8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003cee:	4b0f      	ldr	r3, [pc, #60]	; (8003d2c <HAL_ADC_MspInit+0xd0>)
 8003cf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cf4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003cf6:	4b0d      	ldr	r3, [pc, #52]	; (8003d2c <HAL_ADC_MspInit+0xd0>)
 8003cf8:	2220      	movs	r2, #32
 8003cfa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <HAL_ADC_MspInit+0xd0>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003d02:	480a      	ldr	r0, [pc, #40]	; (8003d2c <HAL_ADC_MspInit+0xd0>)
 8003d04:	f003 fe16 	bl	8007934 <HAL_DMA_Init>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d001      	beq.n	8003d12 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8003d0e:	f000 feb1 	bl	8004a74 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a05      	ldr	r2, [pc, #20]	; (8003d2c <HAL_ADC_MspInit+0xd0>)
 8003d16:	655a      	str	r2, [r3, #84]	; 0x54
 8003d18:	4a04      	ldr	r2, [pc, #16]	; (8003d2c <HAL_ADC_MspInit+0xd0>)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8003d1e:	bf00      	nop
 8003d20:	3728      	adds	r7, #40	; 0x28
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	20001494 	.word	0x20001494
 8003d30:	40020008 	.word	0x40020008

08003d34 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8003d38:	4b0f      	ldr	r3, [pc, #60]	; (8003d78 <MX_COMP1_Init+0x44>)
 8003d3a:	4a10      	ldr	r2, [pc, #64]	; (8003d7c <MX_COMP1_Init+0x48>)
 8003d3c:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8003d3e:	4b0e      	ldr	r3, [pc, #56]	; (8003d78 <MX_COMP1_Init+0x44>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8003d44:	4b0c      	ldr	r3, [pc, #48]	; (8003d78 <MX_COMP1_Init+0x44>)
 8003d46:	4a0e      	ldr	r2, [pc, #56]	; (8003d80 <MX_COMP1_Init+0x4c>)
 8003d48:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8003d4a:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <MX_COMP1_Init+0x44>)
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8003d50:	4b09      	ldr	r3, [pc, #36]	; (8003d78 <MX_COMP1_Init+0x44>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8003d56:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <MX_COMP1_Init+0x44>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8003d5c:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <MX_COMP1_Init+0x44>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8003d62:	4805      	ldr	r0, [pc, #20]	; (8003d78 <MX_COMP1_Init+0x44>)
 8003d64:	f002 ff2e 	bl	8006bc4 <HAL_COMP_Init>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d001      	beq.n	8003d72 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8003d6e:	f000 fe81 	bl	8004a74 <Error_Handler>
  }

}
 8003d72:	bf00      	nop
 8003d74:	bd80      	pop	{r7, pc}
 8003d76:	bf00      	nop
 8003d78:	200014f4 	.word	0x200014f4
 8003d7c:	40010200 	.word	0x40010200
 8003d80:	00800030 	.word	0x00800030

08003d84 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b088      	sub	sp, #32
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d8c:	f107 030c 	add.w	r3, r7, #12
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]
 8003d94:	605a      	str	r2, [r3, #4]
 8003d96:	609a      	str	r2, [r3, #8]
 8003d98:	60da      	str	r2, [r3, #12]
 8003d9a:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a0f      	ldr	r2, [pc, #60]	; (8003de0 <HAL_COMP_MspInit+0x5c>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d118      	bne.n	8003dd8 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003da6:	4b0f      	ldr	r3, [pc, #60]	; (8003de4 <HAL_COMP_MspInit+0x60>)
 8003da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003daa:	4a0e      	ldr	r2, [pc, #56]	; (8003de4 <HAL_COMP_MspInit+0x60>)
 8003dac:	f043 0301 	orr.w	r3, r3, #1
 8003db0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003db2:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <HAL_COMP_MspInit+0x60>)
 8003db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	60bb      	str	r3, [r7, #8]
 8003dbc:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8003dbe:	2302      	movs	r3, #2
 8003dc0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dc2:	2303      	movs	r3, #3
 8003dc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dca:	f107 030c 	add.w	r3, r7, #12
 8003dce:	4619      	mov	r1, r3
 8003dd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003dd4:	f004 f87a 	bl	8007ecc <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8003dd8:	bf00      	nop
 8003dda:	3720      	adds	r7, #32
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40010200 	.word	0x40010200
 8003de4:	40021000 	.word	0x40021000

08003de8 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b08c      	sub	sp, #48	; 0x30
 8003dec:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8003dee:	463b      	mov	r3, r7
 8003df0:	2230      	movs	r2, #48	; 0x30
 8003df2:	2100      	movs	r1, #0
 8003df4:	4618      	mov	r0, r3
 8003df6:	f008 f84f 	bl	800be98 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8003dfa:	4b1e      	ldr	r3, [pc, #120]	; (8003e74 <MX_DAC1_Init+0x8c>)
 8003dfc:	4a1e      	ldr	r2, [pc, #120]	; (8003e78 <MX_DAC1_Init+0x90>)
 8003dfe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003e00:	481c      	ldr	r0, [pc, #112]	; (8003e74 <MX_DAC1_Init+0x8c>)
 8003e02:	f003 f982 	bl	800710a <HAL_DAC_Init>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8003e0c:	f000 fe32 	bl	8004a74 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003e10:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003e14:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003e16:	2300      	movs	r3, #0
 8003e18:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003e1e:	2300      	movs	r3, #0
 8003e20:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8003e22:	2306      	movs	r3, #6
 8003e24:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8003e26:	2300      	movs	r3, #0
 8003e28:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003e32:	2300      	movs	r3, #0
 8003e34:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003e36:	463b      	mov	r3, r7
 8003e38:	2200      	movs	r2, #0
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	480d      	ldr	r0, [pc, #52]	; (8003e74 <MX_DAC1_Init+0x8c>)
 8003e3e:	f003 fb43 	bl	80074c8 <HAL_DAC_ConfigChannel>
 8003e42:	4603      	mov	r3, r0
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8003e48:	f000 fe14 	bl	8004a74 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003e50:	2301      	movs	r3, #1
 8003e52:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003e54:	463b      	mov	r3, r7
 8003e56:	2210      	movs	r2, #16
 8003e58:	4619      	mov	r1, r3
 8003e5a:	4806      	ldr	r0, [pc, #24]	; (8003e74 <MX_DAC1_Init+0x8c>)
 8003e5c:	f003 fb34 	bl	80074c8 <HAL_DAC_ConfigChannel>
 8003e60:	4603      	mov	r3, r0
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d001      	beq.n	8003e6a <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8003e66:	f000 fe05 	bl	8004a74 <Error_Handler>
  }

}
 8003e6a:	bf00      	nop
 8003e6c:	3730      	adds	r7, #48	; 0x30
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}
 8003e72:	bf00      	nop
 8003e74:	2000152c 	.word	0x2000152c
 8003e78:	50000800 	.word	0x50000800

08003e7c <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b08c      	sub	sp, #48	; 0x30
 8003e80:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8003e82:	463b      	mov	r3, r7
 8003e84:	2230      	movs	r2, #48	; 0x30
 8003e86:	2100      	movs	r1, #0
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f008 f805 	bl	800be98 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8003e8e:	4b16      	ldr	r3, [pc, #88]	; (8003ee8 <MX_DAC2_Init+0x6c>)
 8003e90:	4a16      	ldr	r2, [pc, #88]	; (8003eec <MX_DAC2_Init+0x70>)
 8003e92:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8003e94:	4814      	ldr	r0, [pc, #80]	; (8003ee8 <MX_DAC2_Init+0x6c>)
 8003e96:	f003 f938 	bl	800710a <HAL_DAC_Init>
 8003e9a:	4603      	mov	r3, r0
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d001      	beq.n	8003ea4 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8003ea0:	f000 fde8 	bl	8004a74 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003ea4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003ea8:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8003eb6:	2306      	movs	r3, #6
 8003eb8:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003eca:	463b      	mov	r3, r7
 8003ecc:	2200      	movs	r2, #0
 8003ece:	4619      	mov	r1, r3
 8003ed0:	4805      	ldr	r0, [pc, #20]	; (8003ee8 <MX_DAC2_Init+0x6c>)
 8003ed2:	f003 faf9 	bl	80074c8 <HAL_DAC_ConfigChannel>
 8003ed6:	4603      	mov	r3, r0
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d001      	beq.n	8003ee0 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8003edc:	f000 fdca 	bl	8004a74 <Error_Handler>
  }

}
 8003ee0:	bf00      	nop
 8003ee2:	3730      	adds	r7, #48	; 0x30
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	20001518 	.word	0x20001518
 8003eec:	50000c00 	.word	0x50000c00

08003ef0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b08c      	sub	sp, #48	; 0x30
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ef8:	f107 031c 	add.w	r3, r7, #28
 8003efc:	2200      	movs	r2, #0
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	605a      	str	r2, [r3, #4]
 8003f02:	609a      	str	r2, [r3, #8]
 8003f04:	60da      	str	r2, [r3, #12]
 8003f06:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a56      	ldr	r2, [pc, #344]	; (8004068 <HAL_DAC_MspInit+0x178>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d150      	bne.n	8003fb4 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003f12:	4b56      	ldr	r3, [pc, #344]	; (800406c <HAL_DAC_MspInit+0x17c>)
 8003f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f16:	4a55      	ldr	r2, [pc, #340]	; (800406c <HAL_DAC_MspInit+0x17c>)
 8003f18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f1e:	4b53      	ldr	r3, [pc, #332]	; (800406c <HAL_DAC_MspInit+0x17c>)
 8003f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f26:	61bb      	str	r3, [r7, #24]
 8003f28:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f2a:	4b50      	ldr	r3, [pc, #320]	; (800406c <HAL_DAC_MspInit+0x17c>)
 8003f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f2e:	4a4f      	ldr	r2, [pc, #316]	; (800406c <HAL_DAC_MspInit+0x17c>)
 8003f30:	f043 0301 	orr.w	r3, r3, #1
 8003f34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f36:	4b4d      	ldr	r3, [pc, #308]	; (800406c <HAL_DAC_MspInit+0x17c>)
 8003f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	617b      	str	r3, [r7, #20]
 8003f40:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003f42:	2330      	movs	r3, #48	; 0x30
 8003f44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f46:	2303      	movs	r3, #3
 8003f48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f4e:	f107 031c 	add.w	r3, r7, #28
 8003f52:	4619      	mov	r1, r3
 8003f54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f58:	f003 ffb8 	bl	8007ecc <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8003f5c:	4b44      	ldr	r3, [pc, #272]	; (8004070 <HAL_DAC_MspInit+0x180>)
 8003f5e:	4a45      	ldr	r2, [pc, #276]	; (8004074 <HAL_DAC_MspInit+0x184>)
 8003f60:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8003f62:	4b43      	ldr	r3, [pc, #268]	; (8004070 <HAL_DAC_MspInit+0x180>)
 8003f64:	2206      	movs	r2, #6
 8003f66:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003f68:	4b41      	ldr	r3, [pc, #260]	; (8004070 <HAL_DAC_MspInit+0x180>)
 8003f6a:	2210      	movs	r2, #16
 8003f6c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003f6e:	4b40      	ldr	r3, [pc, #256]	; (8004070 <HAL_DAC_MspInit+0x180>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003f74:	4b3e      	ldr	r3, [pc, #248]	; (8004070 <HAL_DAC_MspInit+0x180>)
 8003f76:	2280      	movs	r2, #128	; 0x80
 8003f78:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003f7a:	4b3d      	ldr	r3, [pc, #244]	; (8004070 <HAL_DAC_MspInit+0x180>)
 8003f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f80:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003f82:	4b3b      	ldr	r3, [pc, #236]	; (8004070 <HAL_DAC_MspInit+0x180>)
 8003f84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f88:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8003f8a:	4b39      	ldr	r3, [pc, #228]	; (8004070 <HAL_DAC_MspInit+0x180>)
 8003f8c:	2220      	movs	r2, #32
 8003f8e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8003f90:	4b37      	ldr	r3, [pc, #220]	; (8004070 <HAL_DAC_MspInit+0x180>)
 8003f92:	2200      	movs	r2, #0
 8003f94:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8003f96:	4836      	ldr	r0, [pc, #216]	; (8004070 <HAL_DAC_MspInit+0x180>)
 8003f98:	f003 fccc 	bl	8007934 <HAL_DMA_Init>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d001      	beq.n	8003fa6 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8003fa2:	f000 fd67 	bl	8004a74 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	4a31      	ldr	r2, [pc, #196]	; (8004070 <HAL_DAC_MspInit+0x180>)
 8003faa:	609a      	str	r2, [r3, #8]
 8003fac:	4a30      	ldr	r2, [pc, #192]	; (8004070 <HAL_DAC_MspInit+0x180>)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8003fb2:	e054      	b.n	800405e <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a2f      	ldr	r2, [pc, #188]	; (8004078 <HAL_DAC_MspInit+0x188>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d14f      	bne.n	800405e <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8003fbe:	4b2b      	ldr	r3, [pc, #172]	; (800406c <HAL_DAC_MspInit+0x17c>)
 8003fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc2:	4a2a      	ldr	r2, [pc, #168]	; (800406c <HAL_DAC_MspInit+0x17c>)
 8003fc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fca:	4b28      	ldr	r3, [pc, #160]	; (800406c <HAL_DAC_MspInit+0x17c>)
 8003fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fd6:	4b25      	ldr	r3, [pc, #148]	; (800406c <HAL_DAC_MspInit+0x17c>)
 8003fd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fda:	4a24      	ldr	r2, [pc, #144]	; (800406c <HAL_DAC_MspInit+0x17c>)
 8003fdc:	f043 0301 	orr.w	r3, r3, #1
 8003fe0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003fe2:	4b22      	ldr	r3, [pc, #136]	; (800406c <HAL_DAC_MspInit+0x17c>)
 8003fe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	60fb      	str	r3, [r7, #12]
 8003fec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003fee:	2340      	movs	r3, #64	; 0x40
 8003ff0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ff2:	2303      	movs	r3, #3
 8003ff4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ffa:	f107 031c 	add.w	r3, r7, #28
 8003ffe:	4619      	mov	r1, r3
 8004000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004004:	f003 ff62 	bl	8007ecc <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8004008:	4b1c      	ldr	r3, [pc, #112]	; (800407c <HAL_DAC_MspInit+0x18c>)
 800400a:	4a1d      	ldr	r2, [pc, #116]	; (8004080 <HAL_DAC_MspInit+0x190>)
 800400c:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 800400e:	4b1b      	ldr	r3, [pc, #108]	; (800407c <HAL_DAC_MspInit+0x18c>)
 8004010:	2229      	movs	r2, #41	; 0x29
 8004012:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004014:	4b19      	ldr	r3, [pc, #100]	; (800407c <HAL_DAC_MspInit+0x18c>)
 8004016:	2210      	movs	r2, #16
 8004018:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800401a:	4b18      	ldr	r3, [pc, #96]	; (800407c <HAL_DAC_MspInit+0x18c>)
 800401c:	2200      	movs	r2, #0
 800401e:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004020:	4b16      	ldr	r3, [pc, #88]	; (800407c <HAL_DAC_MspInit+0x18c>)
 8004022:	2280      	movs	r2, #128	; 0x80
 8004024:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004026:	4b15      	ldr	r3, [pc, #84]	; (800407c <HAL_DAC_MspInit+0x18c>)
 8004028:	f44f 7200 	mov.w	r2, #512	; 0x200
 800402c:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800402e:	4b13      	ldr	r3, [pc, #76]	; (800407c <HAL_DAC_MspInit+0x18c>)
 8004030:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004034:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8004036:	4b11      	ldr	r3, [pc, #68]	; (800407c <HAL_DAC_MspInit+0x18c>)
 8004038:	2220      	movs	r2, #32
 800403a:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800403c:	4b0f      	ldr	r3, [pc, #60]	; (800407c <HAL_DAC_MspInit+0x18c>)
 800403e:	2200      	movs	r2, #0
 8004040:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8004042:	480e      	ldr	r0, [pc, #56]	; (800407c <HAL_DAC_MspInit+0x18c>)
 8004044:	f003 fc76 	bl	8007934 <HAL_DMA_Init>
 8004048:	4603      	mov	r3, r0
 800404a:	2b00      	cmp	r3, #0
 800404c:	d001      	beq.n	8004052 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 800404e:	f000 fd11 	bl	8004a74 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a09      	ldr	r2, [pc, #36]	; (800407c <HAL_DAC_MspInit+0x18c>)
 8004056:	609a      	str	r2, [r3, #8]
 8004058:	4a08      	ldr	r2, [pc, #32]	; (800407c <HAL_DAC_MspInit+0x18c>)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800405e:	bf00      	nop
 8004060:	3730      	adds	r7, #48	; 0x30
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
 8004066:	bf00      	nop
 8004068:	50000800 	.word	0x50000800
 800406c:	40021000 	.word	0x40021000
 8004070:	20001540 	.word	0x20001540
 8004074:	4002001c 	.word	0x4002001c
 8004078:	50000c00 	.word	0x50000c00
 800407c:	200015a0 	.word	0x200015a0
 8004080:	40020030 	.word	0x40020030

08004084 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800408a:	4b1a      	ldr	r3, [pc, #104]	; (80040f4 <MX_DMA_Init+0x70>)
 800408c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800408e:	4a19      	ldr	r2, [pc, #100]	; (80040f4 <MX_DMA_Init+0x70>)
 8004090:	f043 0304 	orr.w	r3, r3, #4
 8004094:	6493      	str	r3, [r2, #72]	; 0x48
 8004096:	4b17      	ldr	r3, [pc, #92]	; (80040f4 <MX_DMA_Init+0x70>)
 8004098:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800409a:	f003 0304 	and.w	r3, r3, #4
 800409e:	607b      	str	r3, [r7, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80040a2:	4b14      	ldr	r3, [pc, #80]	; (80040f4 <MX_DMA_Init+0x70>)
 80040a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040a6:	4a13      	ldr	r2, [pc, #76]	; (80040f4 <MX_DMA_Init+0x70>)
 80040a8:	f043 0301 	orr.w	r3, r3, #1
 80040ac:	6493      	str	r3, [r2, #72]	; 0x48
 80040ae:	4b11      	ldr	r3, [pc, #68]	; (80040f4 <MX_DMA_Init+0x70>)
 80040b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	603b      	str	r3, [r7, #0]
 80040b8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 80040ba:	2200      	movs	r2, #0
 80040bc:	2101      	movs	r1, #1
 80040be:	200b      	movs	r0, #11
 80040c0:	f002 ffef 	bl	80070a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80040c4:	200b      	movs	r0, #11
 80040c6:	f003 f806 	bl	80070d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80040ca:	2200      	movs	r2, #0
 80040cc:	2100      	movs	r1, #0
 80040ce:	200c      	movs	r0, #12
 80040d0:	f002 ffe7 	bl	80070a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80040d4:	200c      	movs	r0, #12
 80040d6:	f002 fffe 	bl	80070d6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 80040da:	2200      	movs	r2, #0
 80040dc:	2100      	movs	r1, #0
 80040de:	200d      	movs	r0, #13
 80040e0:	f002 ffdf 	bl	80070a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 80040e4:	200d      	movs	r0, #13
 80040e6:	f002 fff6 	bl	80070d6 <HAL_NVIC_EnableIRQ>

}
 80040ea:	bf00      	nop
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	40021000 	.word	0x40021000

080040f8 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 80040fc:	4b20      	ldr	r3, [pc, #128]	; (8004180 <update_dc_bias_sweep+0x88>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d006      	beq.n	8004112 <update_dc_bias_sweep+0x1a>
 8004104:	4b1f      	ldr	r3, [pc, #124]	; (8004184 <update_dc_bias_sweep+0x8c>)
 8004106:	881b      	ldrh	r3, [r3, #0]
 8004108:	3301      	adds	r3, #1
 800410a:	b29a      	uxth	r2, r3
 800410c:	4b1d      	ldr	r3, [pc, #116]	; (8004184 <update_dc_bias_sweep+0x8c>)
 800410e:	801a      	strh	r2, [r3, #0]
 8004110:	e005      	b.n	800411e <update_dc_bias_sweep+0x26>
 8004112:	4b1c      	ldr	r3, [pc, #112]	; (8004184 <update_dc_bias_sweep+0x8c>)
 8004114:	881b      	ldrh	r3, [r3, #0]
 8004116:	3b01      	subs	r3, #1
 8004118:	b29a      	uxth	r2, r3
 800411a:	4b1a      	ldr	r3, [pc, #104]	; (8004184 <update_dc_bias_sweep+0x8c>)
 800411c:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 800411e:	4b19      	ldr	r3, [pc, #100]	; (8004184 <update_dc_bias_sweep+0x8c>)
 8004120:	881b      	ldrh	r3, [r3, #0]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10a      	bne.n	800413c <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 8004126:	4b18      	ldr	r3, [pc, #96]	; (8004188 <update_dc_bias_sweep+0x90>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <update_dc_bias_sweep+0x3e>
 800412e:	4b16      	ldr	r3, [pc, #88]	; (8004188 <update_dc_bias_sweep+0x90>)
 8004130:	2200      	movs	r2, #0
 8004132:	601a      	str	r2, [r3, #0]
 8004134:	e002      	b.n	800413c <update_dc_bias_sweep+0x44>
 8004136:	4b14      	ldr	r3, [pc, #80]	; (8004188 <update_dc_bias_sweep+0x90>)
 8004138:	2201      	movs	r2, #1
 800413a:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 800413c:	4b11      	ldr	r3, [pc, #68]	; (8004184 <update_dc_bias_sweep+0x8c>)
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d102      	bne.n	800414a <update_dc_bias_sweep+0x52>
 8004144:	4b0e      	ldr	r3, [pc, #56]	; (8004180 <update_dc_bias_sweep+0x88>)
 8004146:	2201      	movs	r2, #1
 8004148:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 800414a:	4b0e      	ldr	r3, [pc, #56]	; (8004184 <update_dc_bias_sweep+0x8c>)
 800414c:	881b      	ldrh	r3, [r3, #0]
 800414e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004152:	d302      	bcc.n	800415a <update_dc_bias_sweep+0x62>
 8004154:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <update_dc_bias_sweep+0x88>)
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 800415a:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <update_dc_bias_sweep+0x90>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	b2db      	uxtb	r3, r3
 8004160:	461a      	mov	r2, r3
 8004162:	2108      	movs	r1, #8
 8004164:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004168:	f004 f84a 	bl	8008200 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 800416c:	4b05      	ldr	r3, [pc, #20]	; (8004184 <update_dc_bias_sweep+0x8c>)
 800416e:	881b      	ldrh	r3, [r3, #0]
 8004170:	2200      	movs	r2, #0
 8004172:	2110      	movs	r1, #16
 8004174:	4805      	ldr	r0, [pc, #20]	; (800418c <update_dc_bias_sweep+0x94>)
 8004176:	f003 f955 	bl	8007424 <HAL_DAC_SetValue>
}
 800417a:	bf00      	nop
 800417c:	bd80      	pop	{r7, pc}
 800417e:	bf00      	nop
 8004180:	200001bc 	.word	0x200001bc
 8004184:	20001406 	.word	0x20001406
 8004188:	20001408 	.word	0x20001408
 800418c:	2000152c 	.word	0x2000152c

08004190 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004190:	b480      	push	{r7}
 8004192:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004194:	4b04      	ldr	r3, [pc, #16]	; (80041a8 <__NVIC_GetPriorityGrouping+0x18>)
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	0a1b      	lsrs	r3, r3, #8
 800419a:	f003 0307 	and.w	r3, r3, #7
}
 800419e:	4618      	mov	r0, r3
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	e000ed00 	.word	0xe000ed00

080041ac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b083      	sub	sp, #12
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	4603      	mov	r3, r0
 80041b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	db0b      	blt.n	80041d6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041be:	79fb      	ldrb	r3, [r7, #7]
 80041c0:	f003 021f 	and.w	r2, r3, #31
 80041c4:	4907      	ldr	r1, [pc, #28]	; (80041e4 <__NVIC_EnableIRQ+0x38>)
 80041c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041ca:	095b      	lsrs	r3, r3, #5
 80041cc:	2001      	movs	r0, #1
 80041ce:	fa00 f202 	lsl.w	r2, r0, r2
 80041d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	e000e100 	.word	0xe000e100

080041e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	4603      	mov	r3, r0
 80041f0:	6039      	str	r1, [r7, #0]
 80041f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	db0a      	blt.n	8004212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041fc:	683b      	ldr	r3, [r7, #0]
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	490c      	ldr	r1, [pc, #48]	; (8004234 <__NVIC_SetPriority+0x4c>)
 8004202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004206:	0112      	lsls	r2, r2, #4
 8004208:	b2d2      	uxtb	r2, r2
 800420a:	440b      	add	r3, r1
 800420c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004210:	e00a      	b.n	8004228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	b2da      	uxtb	r2, r3
 8004216:	4908      	ldr	r1, [pc, #32]	; (8004238 <__NVIC_SetPriority+0x50>)
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	f003 030f 	and.w	r3, r3, #15
 800421e:	3b04      	subs	r3, #4
 8004220:	0112      	lsls	r2, r2, #4
 8004222:	b2d2      	uxtb	r2, r2
 8004224:	440b      	add	r3, r1
 8004226:	761a      	strb	r2, [r3, #24]
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr
 8004234:	e000e100 	.word	0xe000e100
 8004238:	e000ed00 	.word	0xe000ed00

0800423c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800423c:	b480      	push	{r7}
 800423e:	b089      	sub	sp, #36	; 0x24
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f003 0307 	and.w	r3, r3, #7
 800424e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f1c3 0307 	rsb	r3, r3, #7
 8004256:	2b04      	cmp	r3, #4
 8004258:	bf28      	it	cs
 800425a:	2304      	movcs	r3, #4
 800425c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800425e:	69fb      	ldr	r3, [r7, #28]
 8004260:	3304      	adds	r3, #4
 8004262:	2b06      	cmp	r3, #6
 8004264:	d902      	bls.n	800426c <NVIC_EncodePriority+0x30>
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	3b03      	subs	r3, #3
 800426a:	e000      	b.n	800426e <NVIC_EncodePriority+0x32>
 800426c:	2300      	movs	r3, #0
 800426e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004270:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004274:	69bb      	ldr	r3, [r7, #24]
 8004276:	fa02 f303 	lsl.w	r3, r2, r3
 800427a:	43da      	mvns	r2, r3
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	401a      	ands	r2, r3
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004284:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	fa01 f303 	lsl.w	r3, r1, r3
 800428e:	43d9      	mvns	r1, r3
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004294:	4313      	orrs	r3, r2
         );
}
 8004296:	4618      	mov	r0, r3
 8004298:	3724      	adds	r7, #36	; 0x24
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
	...

080042a4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 80042ae:	4a14      	ldr	r2, [pc, #80]	; (8004300 <LL_SYSCFG_SetEXTISource+0x5c>)
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	f003 0303 	and.w	r3, r3, #3
 80042b6:	3302      	adds	r3, #2
 80042b8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	0c1b      	lsrs	r3, r3, #16
 80042c0:	43db      	mvns	r3, r3
 80042c2:	ea02 0103 	and.w	r1, r2, r3
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	0c1b      	lsrs	r3, r3, #16
 80042ca:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	fa93 f3a3 	rbit	r3, r3
 80042d2:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	fab3 f383 	clz	r3, r3
 80042da:	b2db      	uxtb	r3, r3
 80042dc:	f003 031f 	and.w	r3, r3, #31
 80042e0:	687a      	ldr	r2, [r7, #4]
 80042e2:	409a      	lsls	r2, r3
 80042e4:	4806      	ldr	r0, [pc, #24]	; (8004300 <LL_SYSCFG_SetEXTISource+0x5c>)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	f003 0303 	and.w	r3, r3, #3
 80042ec:	430a      	orrs	r2, r1
 80042ee:	3302      	adds	r3, #2
 80042f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80042f4:	bf00      	nop
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	40010000 	.word	0x40010000

08004304 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004304:	b480      	push	{r7}
 8004306:	b089      	sub	sp, #36	; 0x24
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681a      	ldr	r2, [r3, #0]
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	fa93 f3a3 	rbit	r3, r3
 800431e:	613b      	str	r3, [r7, #16]
  return result;
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	fab3 f383 	clz	r3, r3
 8004326:	b2db      	uxtb	r3, r3
 8004328:	005b      	lsls	r3, r3, #1
 800432a:	2103      	movs	r1, #3
 800432c:	fa01 f303 	lsl.w	r3, r1, r3
 8004330:	43db      	mvns	r3, r3
 8004332:	401a      	ands	r2, r3
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004338:	69fb      	ldr	r3, [r7, #28]
 800433a:	fa93 f3a3 	rbit	r3, r3
 800433e:	61bb      	str	r3, [r7, #24]
  return result;
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	fab3 f383 	clz	r3, r3
 8004346:	b2db      	uxtb	r3, r3
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	6879      	ldr	r1, [r7, #4]
 800434c:	fa01 f303 	lsl.w	r3, r1, r3
 8004350:	431a      	orrs	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	601a      	str	r2, [r3, #0]
}
 8004356:	bf00      	nop
 8004358:	3724      	adds	r7, #36	; 0x24
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr

08004362 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004362:	b480      	push	{r7}
 8004364:	b089      	sub	sp, #36	; 0x24
 8004366:	af00      	add	r7, sp, #0
 8004368:	60f8      	str	r0, [r7, #12]
 800436a:	60b9      	str	r1, [r7, #8]
 800436c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	68da      	ldr	r2, [r3, #12]
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	fa93 f3a3 	rbit	r3, r3
 800437c:	613b      	str	r3, [r7, #16]
  return result;
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	fab3 f383 	clz	r3, r3
 8004384:	b2db      	uxtb	r3, r3
 8004386:	005b      	lsls	r3, r3, #1
 8004388:	2103      	movs	r1, #3
 800438a:	fa01 f303 	lsl.w	r3, r1, r3
 800438e:	43db      	mvns	r3, r3
 8004390:	401a      	ands	r2, r3
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	fa93 f3a3 	rbit	r3, r3
 800439c:	61bb      	str	r3, [r7, #24]
  return result;
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	fab3 f383 	clz	r3, r3
 80043a4:	b2db      	uxtb	r3, r3
 80043a6:	005b      	lsls	r3, r3, #1
 80043a8:	6879      	ldr	r1, [r7, #4]
 80043aa:	fa01 f303 	lsl.w	r3, r1, r3
 80043ae:	431a      	orrs	r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	60da      	str	r2, [r3, #12]
}
 80043b4:	bf00      	nop
 80043b6:	3724      	adds	r7, #36	; 0x24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr

080043c0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	683a      	ldr	r2, [r7, #0]
 80043ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043d0:	bf00      	nop
 80043d2:	370c      	adds	r7, #12
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80043e4:	4b08      	ldr	r3, [pc, #32]	; (8004408 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80043e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043e8:	4907      	ldr	r1, [pc, #28]	; (8004408 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80043f0:	4b05      	ldr	r3, [pc, #20]	; (8004408 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80043f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	4013      	ands	r3, r2
 80043f8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80043fa:	68fb      	ldr	r3, [r7, #12]
}
 80043fc:	bf00      	nop
 80043fe:	3714      	adds	r7, #20
 8004400:	46bd      	mov	sp, r7
 8004402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004406:	4770      	bx	lr
 8004408:	40021000 	.word	0x40021000

0800440c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b08a      	sub	sp, #40	; 0x28
 8004410:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8004412:	f107 031c 	add.w	r3, r7, #28
 8004416:	2200      	movs	r2, #0
 8004418:	601a      	str	r2, [r3, #0]
 800441a:	605a      	str	r2, [r3, #4]
 800441c:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800441e:	1d3b      	adds	r3, r7, #4
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	605a      	str	r2, [r3, #4]
 8004426:	609a      	str	r2, [r3, #8]
 8004428:	60da      	str	r2, [r3, #12]
 800442a:	611a      	str	r2, [r3, #16]
 800442c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800442e:	2004      	movs	r0, #4
 8004430:	f7ff ffd4 	bl	80043dc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8004434:	2020      	movs	r0, #32
 8004436:	f7ff ffd1 	bl	80043dc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800443a:	2001      	movs	r0, #1
 800443c:	f7ff ffce 	bl	80043dc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8004440:	2002      	movs	r0, #2
 8004442:	f7ff ffcb 	bl	80043dc <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8004446:	2108      	movs	r1, #8
 8004448:	48d3      	ldr	r0, [pc, #844]	; (8004798 <MX_GPIO_Init+0x38c>)
 800444a:	f7ff ffb9 	bl	80043c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 800444e:	2108      	movs	r1, #8
 8004450:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004454:	f7ff ffb4 	bl	80043c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8004458:	2110      	movs	r1, #16
 800445a:	48cf      	ldr	r0, [pc, #828]	; (8004798 <MX_GPIO_Init+0x38c>)
 800445c:	f7ff ffb0 	bl	80043c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8004460:	2120      	movs	r1, #32
 8004462:	48cd      	ldr	r0, [pc, #820]	; (8004798 <MX_GPIO_Init+0x38c>)
 8004464:	f7ff ffac 	bl	80043c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8004468:	2101      	movs	r1, #1
 800446a:	48cc      	ldr	r0, [pc, #816]	; (800479c <MX_GPIO_Init+0x390>)
 800446c:	f7ff ffa8 	bl	80043c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8004470:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004474:	48c8      	ldr	r0, [pc, #800]	; (8004798 <MX_GPIO_Init+0x38c>)
 8004476:	f7ff ffa3 	bl	80043c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 800447a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800447e:	48c6      	ldr	r0, [pc, #792]	; (8004798 <MX_GPIO_Init+0x38c>)
 8004480:	f7ff ff9e 	bl	80043c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8004484:	2140      	movs	r1, #64	; 0x40
 8004486:	48c5      	ldr	r0, [pc, #788]	; (800479c <MX_GPIO_Init+0x390>)
 8004488:	f7ff ff9a 	bl	80043c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 800448c:	2180      	movs	r1, #128	; 0x80
 800448e:	48c3      	ldr	r0, [pc, #780]	; (800479c <MX_GPIO_Init+0x390>)
 8004490:	f7ff ff96 	bl	80043c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8004494:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004498:	48c0      	ldr	r0, [pc, #768]	; (800479c <MX_GPIO_Init+0x390>)
 800449a:	f7ff ff91 	bl	80043c0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 800449e:	49c0      	ldr	r1, [pc, #768]	; (80047a0 <MX_GPIO_Init+0x394>)
 80044a0:	2002      	movs	r0, #2
 80044a2:	f7ff feff 	bl	80042a4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 80044a6:	49bf      	ldr	r1, [pc, #764]	; (80047a4 <MX_GPIO_Init+0x398>)
 80044a8:	2002      	movs	r0, #2
 80044aa:	f7ff fefb 	bl	80042a4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 80044ae:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80044b2:	2005      	movs	r0, #5
 80044b4:	f7ff fef6 	bl	80042a4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 80044b8:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 80044bc:	2005      	movs	r0, #5
 80044be:	f7ff fef1 	bl	80042a4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 80044c2:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80044c6:	2002      	movs	r0, #2
 80044c8:	f7ff feec 	bl	80042a4 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 80044cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80044d0:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80044d2:	2301      	movs	r3, #1
 80044d4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80044d8:	2300      	movs	r3, #0
 80044da:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80044de:	2302      	movs	r3, #2
 80044e0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80044e4:	f107 031c 	add.w	r3, r7, #28
 80044e8:	4618      	mov	r0, r3
 80044ea:	f006 fadf 	bl	800aaac <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 80044ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044f2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80044f4:	2301      	movs	r3, #1
 80044f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80044fa:	2300      	movs	r3, #0
 80044fc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8004500:	2302      	movs	r3, #2
 8004502:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8004506:	f107 031c 	add.w	r3, r7, #28
 800450a:	4618      	mov	r0, r3
 800450c:	f006 face 	bl	800aaac <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8004510:	2301      	movs	r3, #1
 8004512:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8004514:	2301      	movs	r3, #1
 8004516:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800451a:	2300      	movs	r3, #0
 800451c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8004520:	2302      	movs	r3, #2
 8004522:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8004526:	f107 031c 	add.w	r3, r7, #28
 800452a:	4618      	mov	r0, r3
 800452c:	f006 fabe 	bl	800aaac <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8004530:	2302      	movs	r3, #2
 8004532:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8004534:	2301      	movs	r3, #1
 8004536:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800453a:	2300      	movs	r3, #0
 800453c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8004540:	2302      	movs	r3, #2
 8004542:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8004546:	f107 031c 	add.w	r3, r7, #28
 800454a:	4618      	mov	r0, r3
 800454c:	f006 faae 	bl	800aaac <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8004550:	2304      	movs	r3, #4
 8004552:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8004554:	2301      	movs	r3, #1
 8004556:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800455a:	2300      	movs	r3, #0
 800455c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8004560:	2302      	movs	r3, #2
 8004562:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8004566:	f107 031c 	add.w	r3, r7, #28
 800456a:	4618      	mov	r0, r3
 800456c:	f006 fa9e 	bl	800aaac <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8004570:	2201      	movs	r2, #1
 8004572:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004576:	4888      	ldr	r0, [pc, #544]	; (8004798 <MX_GPIO_Init+0x38c>)
 8004578:	f7ff fef3 	bl	8004362 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 800457c:	2201      	movs	r2, #1
 800457e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004582:	4885      	ldr	r0, [pc, #532]	; (8004798 <MX_GPIO_Init+0x38c>)
 8004584:	f7ff feed 	bl	8004362 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8004588:	2201      	movs	r2, #1
 800458a:	2101      	movs	r1, #1
 800458c:	4886      	ldr	r0, [pc, #536]	; (80047a8 <MX_GPIO_Init+0x39c>)
 800458e:	f7ff fee8 	bl	8004362 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8004592:	2201      	movs	r2, #1
 8004594:	2102      	movs	r1, #2
 8004596:	4884      	ldr	r0, [pc, #528]	; (80047a8 <MX_GPIO_Init+0x39c>)
 8004598:	f7ff fee3 	bl	8004362 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 800459c:	2201      	movs	r2, #1
 800459e:	2104      	movs	r1, #4
 80045a0:	487d      	ldr	r0, [pc, #500]	; (8004798 <MX_GPIO_Init+0x38c>)
 80045a2:	f7ff fede 	bl	8004362 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 80045a6:	2200      	movs	r2, #0
 80045a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80045ac:	487a      	ldr	r0, [pc, #488]	; (8004798 <MX_GPIO_Init+0x38c>)
 80045ae:	f7ff fea9 	bl	8004304 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 80045b2:	2200      	movs	r2, #0
 80045b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80045b8:	4877      	ldr	r0, [pc, #476]	; (8004798 <MX_GPIO_Init+0x38c>)
 80045ba:	f7ff fea3 	bl	8004304 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 80045be:	2200      	movs	r2, #0
 80045c0:	2101      	movs	r1, #1
 80045c2:	4879      	ldr	r0, [pc, #484]	; (80047a8 <MX_GPIO_Init+0x39c>)
 80045c4:	f7ff fe9e 	bl	8004304 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 80045c8:	2200      	movs	r2, #0
 80045ca:	2102      	movs	r1, #2
 80045cc:	4876      	ldr	r0, [pc, #472]	; (80047a8 <MX_GPIO_Init+0x39c>)
 80045ce:	f7ff fe99 	bl	8004304 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 80045d2:	2200      	movs	r2, #0
 80045d4:	2104      	movs	r1, #4
 80045d6:	4870      	ldr	r0, [pc, #448]	; (8004798 <MX_GPIO_Init+0x38c>)
 80045d8:	f7ff fe94 	bl	8004304 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 80045dc:	2308      	movs	r3, #8
 80045de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80045e0:	2301      	movs	r3, #1
 80045e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 80045ec:	2302      	movs	r3, #2
 80045ee:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 80045f0:	1d3b      	adds	r3, r7, #4
 80045f2:	4619      	mov	r1, r3
 80045f4:	4868      	ldr	r0, [pc, #416]	; (8004798 <MX_GPIO_Init+0x38c>)
 80045f6:	f006 fc4c 	bl	800ae92 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 80045fa:	2308      	movs	r3, #8
 80045fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80045fe:	2301      	movs	r3, #1
 8004600:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004602:	2300      	movs	r3, #0
 8004604:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004606:	2300      	movs	r3, #0
 8004608:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800460a:	2300      	movs	r3, #0
 800460c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 800460e:	1d3b      	adds	r3, r7, #4
 8004610:	4619      	mov	r1, r3
 8004612:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004616:	f006 fc3c 	bl	800ae92 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 800461a:	2310      	movs	r3, #16
 800461c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800461e:	2301      	movs	r3, #1
 8004620:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004622:	2300      	movs	r3, #0
 8004624:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004626:	2300      	movs	r3, #0
 8004628:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800462a:	2300      	movs	r3, #0
 800462c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 800462e:	1d3b      	adds	r3, r7, #4
 8004630:	4619      	mov	r1, r3
 8004632:	4859      	ldr	r0, [pc, #356]	; (8004798 <MX_GPIO_Init+0x38c>)
 8004634:	f006 fc2d 	bl	800ae92 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8004638:	2320      	movs	r3, #32
 800463a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800463c:	2301      	movs	r3, #1
 800463e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8004640:	2300      	movs	r3, #0
 8004642:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004644:	2300      	movs	r3, #0
 8004646:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004648:	2300      	movs	r3, #0
 800464a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 800464c:	1d3b      	adds	r3, r7, #4
 800464e:	4619      	mov	r1, r3
 8004650:	4851      	ldr	r0, [pc, #324]	; (8004798 <MX_GPIO_Init+0x38c>)
 8004652:	f006 fc1e 	bl	800ae92 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8004656:	2301      	movs	r3, #1
 8004658:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800465a:	2301      	movs	r3, #1
 800465c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800465e:	2300      	movs	r3, #0
 8004660:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004662:	2300      	movs	r3, #0
 8004664:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004666:	2300      	movs	r3, #0
 8004668:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 800466a:	1d3b      	adds	r3, r7, #4
 800466c:	4619      	mov	r1, r3
 800466e:	484b      	ldr	r0, [pc, #300]	; (800479c <MX_GPIO_Init+0x390>)
 8004670:	f006 fc0f 	bl	800ae92 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8004674:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004678:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800467a:	2301      	movs	r3, #1
 800467c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800467e:	2300      	movs	r3, #0
 8004680:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8004682:	2300      	movs	r3, #0
 8004684:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004686:	2300      	movs	r3, #0
 8004688:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 800468a:	1d3b      	adds	r3, r7, #4
 800468c:	4619      	mov	r1, r3
 800468e:	4842      	ldr	r0, [pc, #264]	; (8004798 <MX_GPIO_Init+0x38c>)
 8004690:	f006 fbff 	bl	800ae92 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8004694:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004698:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800469a:	2301      	movs	r3, #1
 800469c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800469e:	2300      	movs	r3, #0
 80046a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80046a6:	2300      	movs	r3, #0
 80046a8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 80046aa:	1d3b      	adds	r3, r7, #4
 80046ac:	4619      	mov	r1, r3
 80046ae:	483a      	ldr	r0, [pc, #232]	; (8004798 <MX_GPIO_Init+0x38c>)
 80046b0:	f006 fbef 	bl	800ae92 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 80046b4:	2340      	movs	r3, #64	; 0x40
 80046b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80046b8:	2301      	movs	r3, #1
 80046ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80046bc:	2303      	movs	r3, #3
 80046be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80046c0:	2300      	movs	r3, #0
 80046c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80046c4:	2300      	movs	r3, #0
 80046c6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 80046c8:	1d3b      	adds	r3, r7, #4
 80046ca:	4619      	mov	r1, r3
 80046cc:	4833      	ldr	r0, [pc, #204]	; (800479c <MX_GPIO_Init+0x390>)
 80046ce:	f006 fbe0 	bl	800ae92 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 80046d2:	2380      	movs	r3, #128	; 0x80
 80046d4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80046d6:	2301      	movs	r3, #1
 80046d8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80046da:	2303      	movs	r3, #3
 80046dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80046de:	2300      	movs	r3, #0
 80046e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80046e2:	2300      	movs	r3, #0
 80046e4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 80046e6:	1d3b      	adds	r3, r7, #4
 80046e8:	4619      	mov	r1, r3
 80046ea:	482c      	ldr	r0, [pc, #176]	; (800479c <MX_GPIO_Init+0x390>)
 80046ec:	f006 fbd1 	bl	800ae92 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 80046f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80046f6:	2301      	movs	r3, #1
 80046f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80046fa:	2303      	movs	r3, #3
 80046fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80046fe:	2300      	movs	r3, #0
 8004700:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8004702:	2300      	movs	r3, #0
 8004704:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8004706:	1d3b      	adds	r3, r7, #4
 8004708:	4619      	mov	r1, r3
 800470a:	4824      	ldr	r0, [pc, #144]	; (800479c <MX_GPIO_Init+0x390>)
 800470c:	f006 fbc1 	bl	800ae92 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004710:	f7ff fd3e 	bl	8004190 <__NVIC_GetPriorityGrouping>
 8004714:	4603      	mov	r3, r0
 8004716:	2200      	movs	r2, #0
 8004718:	2100      	movs	r1, #0
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff fd8e 	bl	800423c <NVIC_EncodePriority>
 8004720:	4603      	mov	r3, r0
 8004722:	4619      	mov	r1, r3
 8004724:	2006      	movs	r0, #6
 8004726:	f7ff fd5f 	bl	80041e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 800472a:	2006      	movs	r0, #6
 800472c:	f7ff fd3e 	bl	80041ac <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004730:	f7ff fd2e 	bl	8004190 <__NVIC_GetPriorityGrouping>
 8004734:	4603      	mov	r3, r0
 8004736:	2200      	movs	r2, #0
 8004738:	2100      	movs	r1, #0
 800473a:	4618      	mov	r0, r3
 800473c:	f7ff fd7e 	bl	800423c <NVIC_EncodePriority>
 8004740:	4603      	mov	r3, r0
 8004742:	4619      	mov	r1, r3
 8004744:	2007      	movs	r0, #7
 8004746:	f7ff fd4f 	bl	80041e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 800474a:	2007      	movs	r0, #7
 800474c:	f7ff fd2e 	bl	80041ac <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004750:	f7ff fd1e 	bl	8004190 <__NVIC_GetPriorityGrouping>
 8004754:	4603      	mov	r3, r0
 8004756:	2200      	movs	r2, #0
 8004758:	2100      	movs	r1, #0
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff fd6e 	bl	800423c <NVIC_EncodePriority>
 8004760:	4603      	mov	r3, r0
 8004762:	4619      	mov	r1, r3
 8004764:	2008      	movs	r0, #8
 8004766:	f7ff fd3f 	bl	80041e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 800476a:	2008      	movs	r0, #8
 800476c:	f7ff fd1e 	bl	80041ac <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8004770:	f7ff fd0e 	bl	8004190 <__NVIC_GetPriorityGrouping>
 8004774:	4603      	mov	r3, r0
 8004776:	2200      	movs	r2, #0
 8004778:	2100      	movs	r1, #0
 800477a:	4618      	mov	r0, r3
 800477c:	f7ff fd5e 	bl	800423c <NVIC_EncodePriority>
 8004780:	4603      	mov	r3, r0
 8004782:	4619      	mov	r1, r3
 8004784:	2028      	movs	r0, #40	; 0x28
 8004786:	f7ff fd2f 	bl	80041e8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 800478a:	2028      	movs	r0, #40	; 0x28
 800478c:	f7ff fd0e 	bl	80041ac <__NVIC_EnableIRQ>

}
 8004790:	bf00      	nop
 8004792:	3728      	adds	r7, #40	; 0x28
 8004794:	46bd      	mov	sp, r7
 8004796:	e009      	b.n	80047ac <MX_GPIO_Init+0x3a0>
 8004798:	48000800 	.word	0x48000800
 800479c:	48000400 	.word	0x48000400
 80047a0:	0f000003 	.word	0x0f000003
 80047a4:	f0000003 	.word	0xf0000003
 80047a8:	48001400 	.word	0x48001400
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop

080047b0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80047b8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80047bc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80047c0:	f003 0301 	and.w	r3, r3, #1
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d013      	beq.n	80047f0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80047c8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80047cc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80047d0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d00b      	beq.n	80047f0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80047d8:	e000      	b.n	80047dc <ITM_SendChar+0x2c>
    {
      __NOP();
 80047da:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80047dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0f9      	beq.n	80047da <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80047e6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80047ea:	687a      	ldr	r2, [r7, #4]
 80047ec:	b2d2      	uxtb	r2, r2
 80047ee:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80047f0:	687b      	ldr	r3, [r7, #4]
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 80047fe:	b580      	push	{r7, lr}
 8004800:	b086      	sub	sp, #24
 8004802:	af00      	add	r7, sp, #0
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 800480a:	2300      	movs	r3, #0
 800480c:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800480e:	2300      	movs	r3, #0
 8004810:	617b      	str	r3, [r7, #20]
 8004812:	e009      	b.n	8004828 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8004814:	68bb      	ldr	r3, [r7, #8]
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	60ba      	str	r2, [r7, #8]
 800481a:	781b      	ldrb	r3, [r3, #0]
 800481c:	4618      	mov	r0, r3
 800481e:	f7ff ffc7 	bl	80047b0 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	3301      	adds	r3, #1
 8004826:	617b      	str	r3, [r7, #20]
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	429a      	cmp	r2, r3
 800482e:	dbf1      	blt.n	8004814 <_write+0x16>
  return len;
 8004830:	687b      	ldr	r3, [r7, #4]
}
 8004832:	4618      	mov	r0, r3
 8004834:	3718      	adds	r7, #24
 8004836:	46bd      	mov	sp, r7
 8004838:	bd80      	pop	{r7, pc}

0800483a <HAL_DAC_ErrorCallbackCh1>:

void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800483a:	b480      	push	{r7}
 800483c:	b083      	sub	sp, #12
 800483e:	af00      	add	r7, sp, #0
 8004840:	6078      	str	r0, [r7, #4]
	// do something
}
 8004842:	bf00      	nop
 8004844:	370c      	adds	r7, #12
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
	...

08004850 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b082      	sub	sp, #8
 8004854:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8004856:	f000 ff76 	bl	8005746 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800485a:	f000 f89d 	bl	8004998 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800485e:	f7ff fdd5 	bl	800440c <MX_GPIO_Init>
  MX_DMA_Init();
 8004862:	f7ff fc0f 	bl	8004084 <MX_DMA_Init>
  MX_DAC1_Init();
 8004866:	f7ff fabf 	bl	8003de8 <MX_DAC1_Init>
  MX_DAC2_Init();
 800486a:	f7ff fb07 	bl	8003e7c <MX_DAC2_Init>
  MX_ADC1_Init();
 800486e:	f7ff f97d 	bl	8003b6c <MX_ADC1_Init>
  MX_COMP1_Init();
 8004872:	f7ff fa5f 	bl	8003d34 <MX_COMP1_Init>
  MX_TIM2_Init();
 8004876:	f000 fc5d 	bl	8005134 <MX_TIM2_Init>
  MX_TIM17_Init();
 800487a:	f000 fdf5 	bl	8005468 <MX_TIM17_Init>
  MX_SPI3_Init();
 800487e:	f000 f937 	bl	8004af0 <MX_SPI3_Init>
  MX_RNG_Init();
 8004882:	f000 f927 	bl	8004ad4 <MX_RNG_Init>
  MX_TIM1_Init();
 8004886:	f000 fbe5 	bl	8005054 <MX_TIM1_Init>
  MX_TIM8_Init();
 800488a:	f000 fd0d 	bl	80052a8 <MX_TIM8_Init>
  MX_TIM16_Init();
 800488e:	f000 fdc5 	bl	800541c <MX_TIM16_Init>
  MX_TIM15_Init();
 8004892:	f000 fd71 	bl	8005378 <MX_TIM15_Init>
  MX_TIM5_Init();
 8004896:	f000 fcb7 	bl	8005208 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  DT_InitRegister();
 800489a:	f7fe fcff 	bl	800329c <DT_InitRegister>

  // main signal function output (external)
  FuncO_ApplyPreset(eDefaultFuncPreset);
 800489e:	2000      	movs	r0, #0
 80048a0:	f7fe ffd6 	bl	8003850 <FuncO_ApplyPreset>
  //HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 80048a4:	2110      	movs	r1, #16
 80048a6:	4831      	ldr	r0, [pc, #196]	; (800496c <main+0x11c>)
 80048a8:	f002 fc51 	bl	800714e <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 80048ac:	2300      	movs	r3, #0
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	2378      	movs	r3, #120	; 0x78
 80048b2:	4a2f      	ldr	r2, [pc, #188]	; (8004970 <main+0x120>)
 80048b4:	2100      	movs	r1, #0
 80048b6:	482f      	ldr	r0, [pc, #188]	; (8004974 <main+0x124>)
 80048b8:	f002 fc9c 	bl	80071f4 <HAL_DAC_Start_DMA>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

#ifndef DISABLE_ALL_TIMERS

  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 80048bc:	482e      	ldr	r0, [pc, #184]	; (8004978 <main+0x128>)
 80048be:	f005 f81b 	bl	80098f8 <HAL_TIM_Base_Start>
  FreqO_ApplyPreset(eDefaultFreqPreset);
 80048c2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80048c6:	f7fe fe67 	bl	8003598 <FreqO_ApplyPreset>

#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 80048ca:	2201      	movs	r2, #1
 80048cc:	2108      	movs	r1, #8
 80048ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048d2:	f003 fc95 	bl	8008200 <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80048d6:	2201      	movs	r2, #1
 80048d8:	2101      	movs	r1, #1
 80048da:	4828      	ldr	r0, [pc, #160]	; (800497c <main+0x12c>)
 80048dc:	f003 fc90 	bl	8008200 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80048e0:	2201      	movs	r2, #1
 80048e2:	2120      	movs	r1, #32
 80048e4:	4826      	ldr	r0, [pc, #152]	; (8004980 <main+0x130>)
 80048e6:	f003 fc8b 	bl	8008200 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80048ea:	2201      	movs	r2, #1
 80048ec:	2110      	movs	r1, #16
 80048ee:	4824      	ldr	r0, [pc, #144]	; (8004980 <main+0x130>)
 80048f0:	f003 fc86 	bl	8008200 <HAL_GPIO_WritePin>
  //HAL_TIM_Base_Start_IT(&htim17);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 80048f4:	2200      	movs	r2, #0
 80048f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80048fa:	4821      	ldr	r0, [pc, #132]	; (8004980 <main+0x130>)
 80048fc:	f003 fc80 	bl	8008200 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8004900:	2200      	movs	r2, #0
 8004902:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004906:	481e      	ldr	r0, [pc, #120]	; (8004980 <main+0x130>)
 8004908:	f003 fc7a 	bl	8008200 <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 800490c:	2201      	movs	r2, #1
 800490e:	2108      	movs	r1, #8
 8004910:	481b      	ldr	r0, [pc, #108]	; (8004980 <main+0x130>)
 8004912:	f003 fc75 	bl	8008200 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 8004916:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004920:	f023 0307 	bic.w	r3, r3, #7
 8004924:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 8004926:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004930:	f043 0305 	orr.w	r3, r3, #5
 8004934:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 8004936:	4813      	ldr	r0, [pc, #76]	; (8004984 <main+0x134>)
 8004938:	f005 f80c 	bl	8009954 <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 800493c:	4812      	ldr	r0, [pc, #72]	; (8004988 <main+0x138>)
 800493e:	f004 ffdb 	bl	80098f8 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8004942:	4b12      	ldr	r3, [pc, #72]	; (800498c <main+0x13c>)
 8004944:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004948:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 800494a:	4b10      	ldr	r3, [pc, #64]	; (800498c <main+0x13c>)
 800494c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004950:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 8004952:	f7fc f951 	bl	8000bf8 <DM_Init>
  DM_PostInit();
 8004956:	f7fc f95d 	bl	8000c14 <DM_PostInit>


  HAL_TIM_Base_Start_IT(&htim15);
 800495a:	480d      	ldr	r0, [pc, #52]	; (8004990 <main+0x140>)
 800495c:	f004 fffa 	bl	8009954 <HAL_TIM_Base_Start_IT>

  // debounce timer
  HAL_TIM_Base_Start(&htim5);
 8004960:	480c      	ldr	r0, [pc, #48]	; (8004994 <main+0x144>)
 8004962:	f004 ffc9 	bl	80098f8 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 8004966:	f7fe f945 	bl	8002bf4 <EM_ProcessEvent>
 800496a:	e7fc      	b.n	8004966 <main+0x116>
 800496c:	2000152c 	.word	0x2000152c
 8004970:	20000e54 	.word	0x20000e54
 8004974:	20001518 	.word	0x20001518
 8004978:	20001664 	.word	0x20001664
 800497c:	48000400 	.word	0x48000400
 8004980:	48000800 	.word	0x48000800
 8004984:	200017e0 	.word	0x200017e0
 8004988:	20001794 	.word	0x20001794
 800498c:	40001000 	.word	0x40001000
 8004990:	200016b0 	.word	0x200016b0
 8004994:	20001748 	.word	0x20001748

08004998 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b0a8      	sub	sp, #160	; 0xa0
 800499c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800499e:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80049a2:	2238      	movs	r2, #56	; 0x38
 80049a4:	2100      	movs	r1, #0
 80049a6:	4618      	mov	r0, r3
 80049a8:	f007 fa76 	bl	800be98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049ac:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80049b0:	2200      	movs	r2, #0
 80049b2:	601a      	str	r2, [r3, #0]
 80049b4:	605a      	str	r2, [r3, #4]
 80049b6:	609a      	str	r2, [r3, #8]
 80049b8:	60da      	str	r2, [r3, #12]
 80049ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80049bc:	463b      	mov	r3, r7
 80049be:	2254      	movs	r2, #84	; 0x54
 80049c0:	2100      	movs	r1, #0
 80049c2:	4618      	mov	r0, r3
 80049c4:	f007 fa68 	bl	800be98 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80049c8:	2000      	movs	r0, #0
 80049ca:	f003 fc31 	bl	8008230 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80049ce:	2322      	movs	r3, #34	; 0x22
 80049d0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80049d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049d6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80049d8:	2340      	movs	r3, #64	; 0x40
 80049da:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80049dc:	2301      	movs	r3, #1
 80049de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80049e2:	2302      	movs	r3, #2
 80049e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80049e8:	2302      	movs	r3, #2
 80049ea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 80049ee:	2302      	movs	r3, #2
 80049f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 80049f4:	232a      	movs	r3, #42	; 0x2a
 80049f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80049fa:	2302      	movs	r3, #2
 80049fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8004a00:	2304      	movs	r3, #4
 8004a02:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8004a06:	2302      	movs	r3, #2
 8004a08:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a0c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8004a10:	4618      	mov	r0, r3
 8004a12:	f003 fcb1 	bl	8008378 <HAL_RCC_OscConfig>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8004a1c:	f000 f82a 	bl	8004a74 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a20:	230f      	movs	r3, #15
 8004a22:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004a24:	2303      	movs	r3, #3
 8004a26:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a30:	2300      	movs	r3, #0
 8004a32:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8004a34:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8004a38:	2108      	movs	r1, #8
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f003 ffb4 	bl	80089a8 <HAL_RCC_ClockConfig>
 8004a40:	4603      	mov	r3, r0
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d001      	beq.n	8004a4a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8004a46:	f000 f815 	bl	8004a74 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8004a4a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004a4e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8004a50:	2300      	movs	r3, #0
 8004a52:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8004a54:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8004a58:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a5a:	463b      	mov	r3, r7
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	f004 f993 	bl	8008d88 <HAL_RCCEx_PeriphCLKConfig>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8004a68:	f000 f804 	bl	8004a74 <Error_Handler>
  }
}
 8004a6c:	bf00      	nop
 8004a6e:	37a0      	adds	r7, #160	; 0xa0
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004a74:	b480      	push	{r7}
 8004a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004a78:	bf00      	nop
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr

08004a82 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8004a82:	b480      	push	{r7}
 8004a84:	b083      	sub	sp, #12
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f043 0204 	orr.w	r2, r3, #4
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	601a      	str	r2, [r3, #0]
}
 8004a96:	bf00      	nop
 8004a98:	370c      	adds	r7, #12
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
	...

08004aa4 <LL_AHB2_GRP1_EnableClock>:
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b085      	sub	sp, #20
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004aac:	4b08      	ldr	r3, [pc, #32]	; (8004ad0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004aae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004ab0:	4907      	ldr	r1, [pc, #28]	; (8004ad0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004ab8:	4b05      	ldr	r3, [pc, #20]	; (8004ad0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004aba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	4013      	ands	r3, r2
 8004ac0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
}
 8004ac4:	bf00      	nop
 8004ac6:	3714      	adds	r7, #20
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	40021000 	.word	0x40021000

08004ad4 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8004ad8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8004adc:	f7ff ffe2 	bl	8004aa4 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8004ae0:	4802      	ldr	r0, [pc, #8]	; (8004aec <MX_RNG_Init+0x18>)
 8004ae2:	f7ff ffce 	bl	8004a82 <LL_RNG_Enable>

}
 8004ae6:	bf00      	nop
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	50060800 	.word	0x50060800

08004af0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8004af4:	4b1b      	ldr	r3, [pc, #108]	; (8004b64 <MX_SPI3_Init+0x74>)
 8004af6:	4a1c      	ldr	r2, [pc, #112]	; (8004b68 <MX_SPI3_Init+0x78>)
 8004af8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8004afa:	4b1a      	ldr	r3, [pc, #104]	; (8004b64 <MX_SPI3_Init+0x74>)
 8004afc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8004b00:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8004b02:	4b18      	ldr	r3, [pc, #96]	; (8004b64 <MX_SPI3_Init+0x74>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8004b08:	4b16      	ldr	r3, [pc, #88]	; (8004b64 <MX_SPI3_Init+0x74>)
 8004b0a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8004b0e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004b10:	4b14      	ldr	r3, [pc, #80]	; (8004b64 <MX_SPI3_Init+0x74>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004b16:	4b13      	ldr	r3, [pc, #76]	; (8004b64 <MX_SPI3_Init+0x74>)
 8004b18:	2200      	movs	r2, #0
 8004b1a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8004b1c:	4b11      	ldr	r3, [pc, #68]	; (8004b64 <MX_SPI3_Init+0x74>)
 8004b1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b22:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8004b24:	4b0f      	ldr	r3, [pc, #60]	; (8004b64 <MX_SPI3_Init+0x74>)
 8004b26:	2210      	movs	r2, #16
 8004b28:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004b2a:	4b0e      	ldr	r3, [pc, #56]	; (8004b64 <MX_SPI3_Init+0x74>)
 8004b2c:	2200      	movs	r2, #0
 8004b2e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8004b30:	4b0c      	ldr	r3, [pc, #48]	; (8004b64 <MX_SPI3_Init+0x74>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b36:	4b0b      	ldr	r3, [pc, #44]	; (8004b64 <MX_SPI3_Init+0x74>)
 8004b38:	2200      	movs	r2, #0
 8004b3a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8004b3c:	4b09      	ldr	r3, [pc, #36]	; (8004b64 <MX_SPI3_Init+0x74>)
 8004b3e:	2207      	movs	r2, #7
 8004b40:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8004b42:	4b08      	ldr	r3, [pc, #32]	; (8004b64 <MX_SPI3_Init+0x74>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8004b48:	4b06      	ldr	r3, [pc, #24]	; (8004b64 <MX_SPI3_Init+0x74>)
 8004b4a:	2208      	movs	r2, #8
 8004b4c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8004b4e:	4805      	ldr	r0, [pc, #20]	; (8004b64 <MX_SPI3_Init+0x74>)
 8004b50:	f004 fb66 	bl	8009220 <HAL_SPI_Init>
 8004b54:	4603      	mov	r3, r0
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d001      	beq.n	8004b5e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8004b5a:	f7ff ff8b 	bl	8004a74 <Error_Handler>
  }

}
 8004b5e:	bf00      	nop
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	20001600 	.word	0x20001600
 8004b68:	40003c00 	.word	0x40003c00

08004b6c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b08a      	sub	sp, #40	; 0x28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b74:	f107 0314 	add.w	r3, r7, #20
 8004b78:	2200      	movs	r2, #0
 8004b7a:	601a      	str	r2, [r3, #0]
 8004b7c:	605a      	str	r2, [r3, #4]
 8004b7e:	609a      	str	r2, [r3, #8]
 8004b80:	60da      	str	r2, [r3, #12]
 8004b82:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a17      	ldr	r2, [pc, #92]	; (8004be8 <HAL_SPI_MspInit+0x7c>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d128      	bne.n	8004be0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8004b8e:	4b17      	ldr	r3, [pc, #92]	; (8004bec <HAL_SPI_MspInit+0x80>)
 8004b90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b92:	4a16      	ldr	r2, [pc, #88]	; (8004bec <HAL_SPI_MspInit+0x80>)
 8004b94:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b98:	6593      	str	r3, [r2, #88]	; 0x58
 8004b9a:	4b14      	ldr	r3, [pc, #80]	; (8004bec <HAL_SPI_MspInit+0x80>)
 8004b9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ba2:	613b      	str	r3, [r7, #16]
 8004ba4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ba6:	4b11      	ldr	r3, [pc, #68]	; (8004bec <HAL_SPI_MspInit+0x80>)
 8004ba8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004baa:	4a10      	ldr	r2, [pc, #64]	; (8004bec <HAL_SPI_MspInit+0x80>)
 8004bac:	f043 0304 	orr.w	r3, r3, #4
 8004bb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bb2:	4b0e      	ldr	r3, [pc, #56]	; (8004bec <HAL_SPI_MspInit+0x80>)
 8004bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bb6:	f003 0304 	and.w	r3, r3, #4
 8004bba:	60fb      	str	r3, [r7, #12]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8004bbe:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8004bc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004bd0:	2306      	movs	r3, #6
 8004bd2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004bd4:	f107 0314 	add.w	r3, r7, #20
 8004bd8:	4619      	mov	r1, r3
 8004bda:	4805      	ldr	r0, [pc, #20]	; (8004bf0 <HAL_SPI_MspInit+0x84>)
 8004bdc:	f003 f976 	bl	8007ecc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8004be0:	bf00      	nop
 8004be2:	3728      	adds	r7, #40	; 0x28
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}
 8004be8:	40003c00 	.word	0x40003c00
 8004bec:	40021000 	.word	0x40021000
 8004bf0:	48000800 	.word	0x48000800

08004bf4 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8004bf4:	b480      	push	{r7}
 8004bf6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004bf8:	4b05      	ldr	r3, [pc, #20]	; (8004c10 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8004bfa:	689b      	ldr	r3, [r3, #8]
 8004bfc:	4a04      	ldr	r2, [pc, #16]	; (8004c10 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8004bfe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c02:	6093      	str	r3, [r2, #8]
}
 8004c04:	bf00      	nop
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	40007000 	.word	0x40007000

08004c14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c1a:	4b0f      	ldr	r3, [pc, #60]	; (8004c58 <HAL_MspInit+0x44>)
 8004c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c1e:	4a0e      	ldr	r2, [pc, #56]	; (8004c58 <HAL_MspInit+0x44>)
 8004c20:	f043 0301 	orr.w	r3, r3, #1
 8004c24:	6613      	str	r3, [r2, #96]	; 0x60
 8004c26:	4b0c      	ldr	r3, [pc, #48]	; (8004c58 <HAL_MspInit+0x44>)
 8004c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c2a:	f003 0301 	and.w	r3, r3, #1
 8004c2e:	607b      	str	r3, [r7, #4]
 8004c30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c32:	4b09      	ldr	r3, [pc, #36]	; (8004c58 <HAL_MspInit+0x44>)
 8004c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c36:	4a08      	ldr	r2, [pc, #32]	; (8004c58 <HAL_MspInit+0x44>)
 8004c38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c3c:	6593      	str	r3, [r2, #88]	; 0x58
 8004c3e:	4b06      	ldr	r3, [pc, #24]	; (8004c58 <HAL_MspInit+0x44>)
 8004c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8004c4a:	f7ff ffd3 	bl	8004bf4 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c4e:	bf00      	nop
 8004c50:	3708      	adds	r7, #8
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	40021000 	.word	0x40021000

08004c5c <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8004c64:	4b07      	ldr	r3, [pc, #28]	; (8004c84 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8004c66:	695a      	ldr	r2, [r3, #20]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	429a      	cmp	r2, r3
 8004c70:	d101      	bne.n	8004c76 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8004c72:	2301      	movs	r3, #1
 8004c74:	e000      	b.n	8004c78 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	370c      	adds	r7, #12
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	40010400 	.word	0x40010400

08004c88 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b083      	sub	sp, #12
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8004c90:	4a04      	ldr	r2, [pc, #16]	; (8004ca4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6153      	str	r3, [r2, #20]
}
 8004c96:	bf00      	nop
 8004c98:	370c      	adds	r7, #12
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	40010400 	.word	0x40010400

08004ca8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004cac:	bf00      	nop
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004cb6:	b480      	push	{r7}
 8004cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004cba:	e7fe      	b.n	8004cba <HardFault_Handler+0x4>

08004cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004cc0:	e7fe      	b.n	8004cc0 <MemManage_Handler+0x4>

08004cc2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004cc2:	b480      	push	{r7}
 8004cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004cc6:	e7fe      	b.n	8004cc6 <BusFault_Handler+0x4>

08004cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ccc:	e7fe      	b.n	8004ccc <UsageFault_Handler+0x4>

08004cce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004cce:	b480      	push	{r7}
 8004cd0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004cd2:	bf00      	nop
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr

08004cdc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004cdc:	b480      	push	{r7}
 8004cde:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ce0:	bf00      	nop
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce8:	4770      	bx	lr

08004cea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004cea:	b480      	push	{r7}
 8004cec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004cee:	bf00      	nop
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004cfc:	f000 fd76 	bl	80057ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004d00:	bf00      	nop
 8004d02:	bd80      	pop	{r7, pc}

08004d04 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	uint16_t interrupt_time = TIM5->CNT;
 8004d0a:	4b0e      	ldr	r3, [pc, #56]	; (8004d44 <EXTI0_IRQHandler+0x40>)
 8004d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0e:	80fb      	strh	r3, [r7, #6]
	if (interrupt_time - last_interrupt_time > DEBOUNCE_DELAY)
 8004d10:	88fb      	ldrh	r3, [r7, #6]
 8004d12:	4a0d      	ldr	r2, [pc, #52]	; (8004d48 <EXTI0_IRQHandler+0x44>)
 8004d14:	8812      	ldrh	r2, [r2, #0]
 8004d16:	1a9b      	subs	r3, r3, r2
 8004d18:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d1c:	dd02      	ble.n	8004d24 <EXTI0_IRQHandler+0x20>
	{
		EM_SetNewEvent(evRedBtn);
 8004d1e:	2004      	movs	r0, #4
 8004d20:	f7fe fa40 	bl	80031a4 <EM_SetNewEvent>
	}
	last_interrupt_time = interrupt_time;
 8004d24:	4a08      	ldr	r2, [pc, #32]	; (8004d48 <EXTI0_IRQHandler+0x44>)
 8004d26:	88fb      	ldrh	r3, [r7, #6]
 8004d28:	8013      	strh	r3, [r2, #0]

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8004d2a:	2001      	movs	r0, #1
 8004d2c:	f7ff ff96 	bl	8004c5c <LL_EXTI_IsActiveFlag_0_31>
 8004d30:	4603      	mov	r3, r0
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d002      	beq.n	8004d3c <EXTI0_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8004d36:	2001      	movs	r0, #1
 8004d38:	f7ff ffa6 	bl	8004c88 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8004d3c:	bf00      	nop
 8004d3e:	3708      	adds	r7, #8
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	40000c00 	.word	0x40000c00
 8004d48:	2000140e 	.word	0x2000140e

08004d4c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b082      	sub	sp, #8
 8004d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	uint16_t interrupt_time = TIM5->CNT;
 8004d52:	4b0e      	ldr	r3, [pc, #56]	; (8004d8c <EXTI1_IRQHandler+0x40>)
 8004d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d56:	80fb      	strh	r3, [r7, #6]
	if (interrupt_time - last_interrupt_time > DEBOUNCE_DELAY)
 8004d58:	88fb      	ldrh	r3, [r7, #6]
 8004d5a:	4a0d      	ldr	r2, [pc, #52]	; (8004d90 <EXTI1_IRQHandler+0x44>)
 8004d5c:	8812      	ldrh	r2, [r2, #0]
 8004d5e:	1a9b      	subs	r3, r3, r2
 8004d60:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004d64:	dd02      	ble.n	8004d6c <EXTI1_IRQHandler+0x20>
	{
		EM_SetNewEvent(evGreenBtn);
 8004d66:	2002      	movs	r0, #2
 8004d68:	f7fe fa1c 	bl	80031a4 <EM_SetNewEvent>
	}
	last_interrupt_time = interrupt_time;
 8004d6c:	4a08      	ldr	r2, [pc, #32]	; (8004d90 <EXTI1_IRQHandler+0x44>)
 8004d6e:	88fb      	ldrh	r3, [r7, #6]
 8004d70:	8013      	strh	r3, [r2, #0]

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8004d72:	2002      	movs	r0, #2
 8004d74:	f7ff ff72 	bl	8004c5c <LL_EXTI_IsActiveFlag_0_31>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d002      	beq.n	8004d84 <EXTI1_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8004d7e:	2002      	movs	r0, #2
 8004d80:	f7ff ff82 	bl	8004c88 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8004d84:	bf00      	nop
 8004d86:	3708      	adds	r7, #8
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	bd80      	pop	{r7, pc}
 8004d8c:	40000c00 	.word	0x40000c00
 8004d90:	2000140e 	.word	0x2000140e

08004d94 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004d94:	b580      	push	{r7, lr}
 8004d96:	b082      	sub	sp, #8
 8004d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


	uint16_t interrupt_time = TIM5->CNT;
 8004d9a:	4b0e      	ldr	r3, [pc, #56]	; (8004dd4 <EXTI2_IRQHandler+0x40>)
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	80fb      	strh	r3, [r7, #6]
	if (interrupt_time - last_interrupt_time > DEBOUNCE_DELAY)
 8004da0:	88fb      	ldrh	r3, [r7, #6]
 8004da2:	4a0d      	ldr	r2, [pc, #52]	; (8004dd8 <EXTI2_IRQHandler+0x44>)
 8004da4:	8812      	ldrh	r2, [r2, #0]
 8004da6:	1a9b      	subs	r3, r3, r2
 8004da8:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004dac:	dd02      	ble.n	8004db4 <EXTI2_IRQHandler+0x20>
	{
		EM_SetNewEvent(evEncoderPush);
 8004dae:	2006      	movs	r0, #6
 8004db0:	f7fe f9f8 	bl	80031a4 <EM_SetNewEvent>
	}
	last_interrupt_time = interrupt_time;
 8004db4:	4a08      	ldr	r2, [pc, #32]	; (8004dd8 <EXTI2_IRQHandler+0x44>)
 8004db6:	88fb      	ldrh	r3, [r7, #6]
 8004db8:	8013      	strh	r3, [r2, #0]


  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8004dba:	2004      	movs	r0, #4
 8004dbc:	f7ff ff4e 	bl	8004c5c <LL_EXTI_IsActiveFlag_0_31>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d002      	beq.n	8004dcc <EXTI2_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8004dc6:	2004      	movs	r0, #4
 8004dc8:	f7ff ff5e 	bl	8004c88 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004dcc:	bf00      	nop
 8004dce:	3708      	adds	r7, #8
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}
 8004dd4:	40000c00 	.word	0x40000c00
 8004dd8:	2000140e 	.word	0x2000140e

08004ddc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004de0:	4802      	ldr	r0, [pc, #8]	; (8004dec <DMA1_Channel1_IRQHandler+0x10>)
 8004de2:	f002 ff23 	bl	8007c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8004de6:	bf00      	nop
 8004de8:	bd80      	pop	{r7, pc}
 8004dea:	bf00      	nop
 8004dec:	20001494 	.word	0x20001494

08004df0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8004df4:	4802      	ldr	r0, [pc, #8]	; (8004e00 <DMA1_Channel2_IRQHandler+0x10>)
 8004df6:	f002 ff19 	bl	8007c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8004dfa:	bf00      	nop
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	20001540 	.word	0x20001540

08004e04 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8004e08:	4802      	ldr	r0, [pc, #8]	; (8004e14 <DMA1_Channel3_IRQHandler+0x10>)
 8004e0a:	f002 ff0f 	bl	8007c2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8004e0e:	bf00      	nop
 8004e10:	bd80      	pop	{r7, pc}
 8004e12:	bf00      	nop
 8004e14:	200015a0 	.word	0x200015a0

08004e18 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	DM_UpdateDisplay();
 8004e1c:	f7fc f81c 	bl	8000e58 <DM_UpdateDisplay>
	//DM_TestScreen();

	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 8004e20:	4b0d      	ldr	r3, [pc, #52]	; (8004e58 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8004e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e24:	4a0d      	ldr	r2, [pc, #52]	; (8004e5c <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8004e26:	8812      	ldrh	r2, [r2, #0]
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d305      	bcc.n	8004e38 <TIM1_BRK_TIM15_IRQHandler+0x20>
 8004e2c:	4b0a      	ldr	r3, [pc, #40]	; (8004e58 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8004e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e30:	4a0a      	ldr	r2, [pc, #40]	; (8004e5c <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8004e32:	8812      	ldrh	r2, [r2, #0]
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d902      	bls.n	8004e3e <TIM1_BRK_TIM15_IRQHandler+0x26>
	{

		EM_SetNewEvent(evEncoderSet);
 8004e38:	2005      	movs	r0, #5
 8004e3a:	f7fe f9b3 	bl	80031a4 <EM_SetNewEvent>

	}
	last_enc_value = TIM1->CNT;
 8004e3e:	4b06      	ldr	r3, [pc, #24]	; (8004e58 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8004e46:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e48:	4805      	ldr	r0, [pc, #20]	; (8004e60 <TIM1_BRK_TIM15_IRQHandler+0x48>)
 8004e4a:	f004 fe8e 	bl	8009b6a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8004e4e:	4805      	ldr	r0, [pc, #20]	; (8004e64 <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 8004e50:	f004 fe8b 	bl	8009b6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8004e54:	bf00      	nop
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	40012c00 	.word	0x40012c00
 8004e5c:	2000140c 	.word	0x2000140c
 8004e60:	20001794 	.word	0x20001794
 8004e64:	200016b0 	.word	0x200016b0

08004e68 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 8004e6c:	4a05      	ldr	r2, [pc, #20]	; (8004e84 <TIM1_UP_TIM16_IRQHandler+0x1c>)
 8004e6e:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <TIM1_UP_TIM16_IRQHandler+0x20>)
 8004e70:	881b      	ldrh	r3, [r3, #0]
 8004e72:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e74:	4805      	ldr	r0, [pc, #20]	; (8004e8c <TIM1_UP_TIM16_IRQHandler+0x24>)
 8004e76:	f004 fe78 	bl	8009b6a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8004e7a:	4805      	ldr	r0, [pc, #20]	; (8004e90 <TIM1_UP_TIM16_IRQHandler+0x28>)
 8004e7c:	f004 fe75 	bl	8009b6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8004e80:	bf00      	nop
 8004e82:	bd80      	pop	{r7, pc}
 8004e84:	2000141c 	.word	0x2000141c
 8004e88:	0800eb5c 	.word	0x0800eb5c
 8004e8c:	20001794 	.word	0x20001794
 8004e90:	2000182c 	.word	0x2000182c

08004e94 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 8004e98:	f7ff f92e 	bl	80040f8 <update_dc_bias_sweep>




  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e9c:	4803      	ldr	r0, [pc, #12]	; (8004eac <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8004e9e:	f004 fe64 	bl	8009b6a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8004ea2:	4803      	ldr	r0, [pc, #12]	; (8004eb0 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8004ea4:	f004 fe61 	bl	8009b6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8004ea8:	bf00      	nop
 8004eaa:	bd80      	pop	{r7, pc}
 8004eac:	20001794 	.word	0x20001794
 8004eb0:	200016fc 	.word	0x200016fc

08004eb4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004eb8:	4802      	ldr	r0, [pc, #8]	; (8004ec4 <TIM2_IRQHandler+0x10>)
 8004eba:	f004 fe56 	bl	8009b6a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004ebe:	bf00      	nop
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	200017e0 	.word	0x200017e0

08004ec8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin))
 8004ecc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004ed0:	4815      	ldr	r0, [pc, #84]	; (8004f28 <EXTI15_10_IRQHandler+0x60>)
 8004ed2:	f003 f97d 	bl	80081d0 <HAL_GPIO_ReadPin>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d002      	beq.n	8004ee2 <EXTI15_10_IRQHandler+0x1a>
	{
//		uint16_t interrupt_time = TIM5->CNT;
//		if (interrupt_time - last_interrupt_time > DEBOUNCE_DELAY)
//		{
			EM_SetNewEvent(evYellowBtn);
 8004edc:	2003      	movs	r0, #3
 8004ede:	f7fe f961 	bl	80031a4 <EM_SetNewEvent>
//		}
//		last_interrupt_time = interrupt_time;
		//snprintf(control_pressed, sizeof(control_pressed), "BTN1");
		//printf("BTN1_EXTI14_Pin\n");
	}
	if(HAL_GPIO_ReadPin(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin))
 8004ee2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004ee6:	4810      	ldr	r0, [pc, #64]	; (8004f28 <EXTI15_10_IRQHandler+0x60>)
 8004ee8:	f003 f972 	bl	80081d0 <HAL_GPIO_ReadPin>
 8004eec:	4603      	mov	r3, r0
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d002      	beq.n	8004ef8 <EXTI15_10_IRQHandler+0x30>
	{
//		uint16_t interrupt_time = TIM5->CNT;
//		if (interrupt_time - last_interrupt_time > DEBOUNCE_DELAY)
//		{
			EM_SetNewEvent(evBlueBtn);
 8004ef2:	2001      	movs	r0, #1
 8004ef4:	f7fe f956 	bl	80031a4 <EM_SetNewEvent>
		//snprintf(control_pressed, sizeof(control_pressed), "BTN2");
		//printf("BTN2_EXTI15_Pin\n");
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8004ef8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004efc:	f7ff feae 	bl	8004c5c <LL_EXTI_IsActiveFlag_0_31>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d003      	beq.n	8004f0e <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8004f06:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8004f0a:	f7ff febd 	bl	8004c88 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8004f0e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004f12:	f7ff fea3 	bl	8004c5c <LL_EXTI_IsActiveFlag_0_31>
 8004f16:	4603      	mov	r3, r0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d003      	beq.n	8004f24 <EXTI15_10_IRQHandler+0x5c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8004f1c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004f20:	f7ff feb2 	bl	8004c88 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004f24:	bf00      	nop
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	48000800 	.word	0x48000800

08004f2c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b086      	sub	sp, #24
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	60f8      	str	r0, [r7, #12]
 8004f34:	60b9      	str	r1, [r7, #8]
 8004f36:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f38:	2300      	movs	r3, #0
 8004f3a:	617b      	str	r3, [r7, #20]
 8004f3c:	e00a      	b.n	8004f54 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004f3e:	f3af 8000 	nop.w
 8004f42:	4601      	mov	r1, r0
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	1c5a      	adds	r2, r3, #1
 8004f48:	60ba      	str	r2, [r7, #8]
 8004f4a:	b2ca      	uxtb	r2, r1
 8004f4c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	3301      	adds	r3, #1
 8004f52:	617b      	str	r3, [r7, #20]
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	dbf0      	blt.n	8004f3e <_read+0x12>
	}

return len;
 8004f5c:	687b      	ldr	r3, [r7, #4]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3718      	adds	r7, #24
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}

08004f66 <_close>:
	}
	return len;
}

int _close(int file)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
	return -1;
 8004f6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8004f72:	4618      	mov	r0, r3
 8004f74:	370c      	adds	r7, #12
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr

08004f7e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f7e:	b480      	push	{r7}
 8004f80:	b083      	sub	sp, #12
 8004f82:	af00      	add	r7, sp, #0
 8004f84:	6078      	str	r0, [r7, #4]
 8004f86:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f8e:	605a      	str	r2, [r3, #4]
	return 0;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <_isatty>:

int _isatty(int file)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
	return 1;
 8004fa6:	2301      	movs	r3, #1
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	370c      	adds	r7, #12
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
	return 0;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	3714      	adds	r7, #20
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr
	...

08004fd0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8004fd8:	4b11      	ldr	r3, [pc, #68]	; (8005020 <_sbrk+0x50>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d102      	bne.n	8004fe6 <_sbrk+0x16>
		heap_end = &end;
 8004fe0:	4b0f      	ldr	r3, [pc, #60]	; (8005020 <_sbrk+0x50>)
 8004fe2:	4a10      	ldr	r2, [pc, #64]	; (8005024 <_sbrk+0x54>)
 8004fe4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8004fe6:	4b0e      	ldr	r3, [pc, #56]	; (8005020 <_sbrk+0x50>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004fec:	4b0c      	ldr	r3, [pc, #48]	; (8005020 <_sbrk+0x50>)
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	466a      	mov	r2, sp
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d907      	bls.n	800500a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8004ffa:	f006 ff23 	bl	800be44 <__errno>
 8004ffe:	4602      	mov	r2, r0
 8005000:	230c      	movs	r3, #12
 8005002:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005008:	e006      	b.n	8005018 <_sbrk+0x48>
	}

	heap_end += incr;
 800500a:	4b05      	ldr	r3, [pc, #20]	; (8005020 <_sbrk+0x50>)
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4413      	add	r3, r2
 8005012:	4a03      	ldr	r2, [pc, #12]	; (8005020 <_sbrk+0x50>)
 8005014:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005016:	68fb      	ldr	r3, [r7, #12]
}
 8005018:	4618      	mov	r0, r3
 800501a:	3710      	adds	r7, #16
 800501c:	46bd      	mov	sp, r7
 800501e:	bd80      	pop	{r7, pc}
 8005020:	20001410 	.word	0x20001410
 8005024:	20001880 	.word	0x20001880

08005028 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005028:	b480      	push	{r7}
 800502a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800502c:	4b08      	ldr	r3, [pc, #32]	; (8005050 <SystemInit+0x28>)
 800502e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005032:	4a07      	ldr	r2, [pc, #28]	; (8005050 <SystemInit+0x28>)
 8005034:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005038:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800503c:	4b04      	ldr	r3, [pc, #16]	; (8005050 <SystemInit+0x28>)
 800503e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005042:	609a      	str	r2, [r3, #8]
#endif
}
 8005044:	bf00      	nop
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
 800504e:	bf00      	nop
 8005050:	e000ed00 	.word	0xe000ed00

08005054 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b09a      	sub	sp, #104	; 0x68
 8005058:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 800505a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800505e:	2224      	movs	r2, #36	; 0x24
 8005060:	2100      	movs	r1, #0
 8005062:	4618      	mov	r0, r3
 8005064:	f006 ff18 	bl	800be98 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005068:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800506c:	2200      	movs	r2, #0
 800506e:	601a      	str	r2, [r3, #0]
 8005070:	605a      	str	r2, [r3, #4]
 8005072:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005074:	1d3b      	adds	r3, r7, #4
 8005076:	2234      	movs	r2, #52	; 0x34
 8005078:	2100      	movs	r1, #0
 800507a:	4618      	mov	r0, r3
 800507c:	f006 ff0c 	bl	800be98 <memset>

  htim1.Instance = TIM1;
 8005080:	4b2a      	ldr	r3, [pc, #168]	; (800512c <MX_TIM1_Init+0xd8>)
 8005082:	4a2b      	ldr	r2, [pc, #172]	; (8005130 <MX_TIM1_Init+0xdc>)
 8005084:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005086:	4b29      	ldr	r3, [pc, #164]	; (800512c <MX_TIM1_Init+0xd8>)
 8005088:	2200      	movs	r2, #0
 800508a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 800508c:	4b27      	ldr	r3, [pc, #156]	; (800512c <MX_TIM1_Init+0xd8>)
 800508e:	2240      	movs	r2, #64	; 0x40
 8005090:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8005092:	4b26      	ldr	r3, [pc, #152]	; (800512c <MX_TIM1_Init+0xd8>)
 8005094:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005098:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800509a:	4b24      	ldr	r3, [pc, #144]	; (800512c <MX_TIM1_Init+0xd8>)
 800509c:	2200      	movs	r2, #0
 800509e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80050a0:	4b22      	ldr	r3, [pc, #136]	; (800512c <MX_TIM1_Init+0xd8>)
 80050a2:	2200      	movs	r2, #0
 80050a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80050a6:	4b21      	ldr	r3, [pc, #132]	; (800512c <MX_TIM1_Init+0xd8>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80050ac:	2303      	movs	r3, #3
 80050ae:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80050b0:	2300      	movs	r3, #0
 80050b2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80050b4:	2301      	movs	r3, #1
 80050b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80050b8:	2300      	movs	r3, #0
 80050ba:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80050bc:	2300      	movs	r3, #0
 80050be:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80050c0:	2300      	movs	r3, #0
 80050c2:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80050c4:	2301      	movs	r3, #1
 80050c6:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80050c8:	2300      	movs	r3, #0
 80050ca:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80050cc:	2300      	movs	r3, #0
 80050ce:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80050d0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80050d4:	4619      	mov	r1, r3
 80050d6:	4815      	ldr	r0, [pc, #84]	; (800512c <MX_TIM1_Init+0xd8>)
 80050d8:	f004 fca1 	bl	8009a1e <HAL_TIM_Encoder_Init>
 80050dc:	4603      	mov	r3, r0
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d001      	beq.n	80050e6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80050e2:	f7ff fcc7 	bl	8004a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80050e6:	2300      	movs	r3, #0
 80050e8:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80050ea:	2300      	movs	r3, #0
 80050ec:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80050ee:	2300      	movs	r3, #0
 80050f0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80050f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80050f6:	4619      	mov	r1, r3
 80050f8:	480c      	ldr	r0, [pc, #48]	; (800512c <MX_TIM1_Init+0xd8>)
 80050fa:	f005 fa19 	bl	800a530 <HAL_TIMEx_MasterConfigSynchronization>
 80050fe:	4603      	mov	r3, r0
 8005100:	2b00      	cmp	r3, #0
 8005102:	d001      	beq.n	8005108 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8005104:	f7ff fcb6 	bl	8004a74 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005108:	2300      	movs	r3, #0
 800510a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800510c:	2300      	movs	r3, #0
 800510e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005110:	1d3b      	adds	r3, r7, #4
 8005112:	4619      	mov	r1, r3
 8005114:	4805      	ldr	r0, [pc, #20]	; (800512c <MX_TIM1_Init+0xd8>)
 8005116:	f005 faa1 	bl	800a65c <HAL_TIMEx_ConfigBreakDeadTime>
 800511a:	4603      	mov	r3, r0
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8005120:	f7ff fca8 	bl	8004a74 <Error_Handler>
  }

}
 8005124:	bf00      	nop
 8005126:	3768      	adds	r7, #104	; 0x68
 8005128:	46bd      	mov	sp, r7
 800512a:	bd80      	pop	{r7, pc}
 800512c:	20001794 	.word	0x20001794
 8005130:	40012c00 	.word	0x40012c00

08005134 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b08c      	sub	sp, #48	; 0x30
 8005138:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800513a:	f107 0320 	add.w	r3, r7, #32
 800513e:	2200      	movs	r2, #0
 8005140:	601a      	str	r2, [r3, #0]
 8005142:	605a      	str	r2, [r3, #4]
 8005144:	609a      	str	r2, [r3, #8]
 8005146:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8005148:	f107 030c 	add.w	r3, r7, #12
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]
 8005150:	605a      	str	r2, [r3, #4]
 8005152:	609a      	str	r2, [r3, #8]
 8005154:	60da      	str	r2, [r3, #12]
 8005156:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005158:	463b      	mov	r3, r7
 800515a:	2200      	movs	r2, #0
 800515c:	601a      	str	r2, [r3, #0]
 800515e:	605a      	str	r2, [r3, #4]
 8005160:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8005162:	4b28      	ldr	r3, [pc, #160]	; (8005204 <MX_TIM2_Init+0xd0>)
 8005164:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005168:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 800516a:	4b26      	ldr	r3, [pc, #152]	; (8005204 <MX_TIM2_Init+0xd0>)
 800516c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005170:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005172:	4b24      	ldr	r3, [pc, #144]	; (8005204 <MX_TIM2_Init+0xd0>)
 8005174:	2200      	movs	r2, #0
 8005176:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8005178:	4b22      	ldr	r3, [pc, #136]	; (8005204 <MX_TIM2_Init+0xd0>)
 800517a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800517e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005180:	4b20      	ldr	r3, [pc, #128]	; (8005204 <MX_TIM2_Init+0xd0>)
 8005182:	2200      	movs	r2, #0
 8005184:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005186:	4b1f      	ldr	r3, [pc, #124]	; (8005204 <MX_TIM2_Init+0xd0>)
 8005188:	2200      	movs	r2, #0
 800518a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800518c:	481d      	ldr	r0, [pc, #116]	; (8005204 <MX_TIM2_Init+0xd0>)
 800518e:	f004 fb5c 	bl	800984a <HAL_TIM_Base_Init>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d001      	beq.n	800519c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8005198:	f7ff fc6c 	bl	8004a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800519c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051a0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80051a2:	f107 0320 	add.w	r3, r7, #32
 80051a6:	4619      	mov	r1, r3
 80051a8:	4816      	ldr	r0, [pc, #88]	; (8005204 <MX_TIM2_Init+0xd0>)
 80051aa:	f004 fe5d 	bl	8009e68 <HAL_TIM_ConfigClockSource>
 80051ae:	4603      	mov	r3, r0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d001      	beq.n	80051b8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80051b4:	f7ff fc5e 	bl	8004a74 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 80051b8:	2305      	movs	r3, #5
 80051ba:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80051bc:	2350      	movs	r3, #80	; 0x50
 80051be:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80051c0:	2300      	movs	r3, #0
 80051c2:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 80051c4:	2300      	movs	r3, #0
 80051c6:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80051c8:	f107 030c 	add.w	r3, r7, #12
 80051cc:	4619      	mov	r1, r3
 80051ce:	480d      	ldr	r0, [pc, #52]	; (8005204 <MX_TIM2_Init+0xd0>)
 80051d0:	f004 ff3a 	bl	800a048 <HAL_TIM_SlaveConfigSynchro>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d001      	beq.n	80051de <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80051da:	f7ff fc4b 	bl	8004a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80051de:	2300      	movs	r3, #0
 80051e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80051e2:	2300      	movs	r3, #0
 80051e4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80051e6:	463b      	mov	r3, r7
 80051e8:	4619      	mov	r1, r3
 80051ea:	4806      	ldr	r0, [pc, #24]	; (8005204 <MX_TIM2_Init+0xd0>)
 80051ec:	f005 f9a0 	bl	800a530 <HAL_TIMEx_MasterConfigSynchronization>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d001      	beq.n	80051fa <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 80051f6:	f7ff fc3d 	bl	8004a74 <Error_Handler>
  }

}
 80051fa:	bf00      	nop
 80051fc:	3730      	adds	r7, #48	; 0x30
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	200017e0 	.word	0x200017e0

08005208 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b088      	sub	sp, #32
 800520c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800520e:	f107 0310 	add.w	r3, r7, #16
 8005212:	2200      	movs	r2, #0
 8005214:	601a      	str	r2, [r3, #0]
 8005216:	605a      	str	r2, [r3, #4]
 8005218:	609a      	str	r2, [r3, #8]
 800521a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800521c:	1d3b      	adds	r3, r7, #4
 800521e:	2200      	movs	r2, #0
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	605a      	str	r2, [r3, #4]
 8005224:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8005226:	4b1e      	ldr	r3, [pc, #120]	; (80052a0 <MX_TIM5_Init+0x98>)
 8005228:	4a1e      	ldr	r2, [pc, #120]	; (80052a4 <MX_TIM5_Init+0x9c>)
 800522a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 800522c:	4b1c      	ldr	r3, [pc, #112]	; (80052a0 <MX_TIM5_Init+0x98>)
 800522e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005232:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005234:	4b1a      	ldr	r3, [pc, #104]	; (80052a0 <MX_TIM5_Init+0x98>)
 8005236:	2200      	movs	r2, #0
 8005238:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800523a:	4b19      	ldr	r3, [pc, #100]	; (80052a0 <MX_TIM5_Init+0x98>)
 800523c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005240:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8005242:	4b17      	ldr	r3, [pc, #92]	; (80052a0 <MX_TIM5_Init+0x98>)
 8005244:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005248:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800524a:	4b15      	ldr	r3, [pc, #84]	; (80052a0 <MX_TIM5_Init+0x98>)
 800524c:	2200      	movs	r2, #0
 800524e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005250:	4813      	ldr	r0, [pc, #76]	; (80052a0 <MX_TIM5_Init+0x98>)
 8005252:	f004 fafa 	bl	800984a <HAL_TIM_Base_Init>
 8005256:	4603      	mov	r3, r0
 8005258:	2b00      	cmp	r3, #0
 800525a:	d001      	beq.n	8005260 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 800525c:	f7ff fc0a 	bl	8004a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005260:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005264:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005266:	f107 0310 	add.w	r3, r7, #16
 800526a:	4619      	mov	r1, r3
 800526c:	480c      	ldr	r0, [pc, #48]	; (80052a0 <MX_TIM5_Init+0x98>)
 800526e:	f004 fdfb 	bl	8009e68 <HAL_TIM_ConfigClockSource>
 8005272:	4603      	mov	r3, r0
 8005274:	2b00      	cmp	r3, #0
 8005276:	d001      	beq.n	800527c <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8005278:	f7ff fbfc 	bl	8004a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800527c:	2300      	movs	r3, #0
 800527e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005280:	2300      	movs	r3, #0
 8005282:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005284:	1d3b      	adds	r3, r7, #4
 8005286:	4619      	mov	r1, r3
 8005288:	4805      	ldr	r0, [pc, #20]	; (80052a0 <MX_TIM5_Init+0x98>)
 800528a:	f005 f951 	bl	800a530 <HAL_TIMEx_MasterConfigSynchronization>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d001      	beq.n	8005298 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8005294:	f7ff fbee 	bl	8004a74 <Error_Handler>
  }

}
 8005298:	bf00      	nop
 800529a:	3720      	adds	r7, #32
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}
 80052a0:	20001748 	.word	0x20001748
 80052a4:	40000c00 	.word	0x40000c00

080052a8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b094      	sub	sp, #80	; 0x50
 80052ac:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80052ae:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80052b2:	2200      	movs	r2, #0
 80052b4:	601a      	str	r2, [r3, #0]
 80052b6:	605a      	str	r2, [r3, #4]
 80052b8:	609a      	str	r2, [r3, #8]
 80052ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80052bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80052c0:	2200      	movs	r2, #0
 80052c2:	601a      	str	r2, [r3, #0]
 80052c4:	605a      	str	r2, [r3, #4]
 80052c6:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80052c8:	463b      	mov	r3, r7
 80052ca:	2234      	movs	r2, #52	; 0x34
 80052cc:	2100      	movs	r1, #0
 80052ce:	4618      	mov	r0, r3
 80052d0:	f006 fde2 	bl	800be98 <memset>

  htim8.Instance = TIM8;
 80052d4:	4b26      	ldr	r3, [pc, #152]	; (8005370 <MX_TIM8_Init+0xc8>)
 80052d6:	4a27      	ldr	r2, [pc, #156]	; (8005374 <MX_TIM8_Init+0xcc>)
 80052d8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80052da:	4b25      	ldr	r3, [pc, #148]	; (8005370 <MX_TIM8_Init+0xc8>)
 80052dc:	2200      	movs	r2, #0
 80052de:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052e0:	4b23      	ldr	r3, [pc, #140]	; (8005370 <MX_TIM8_Init+0xc8>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 80052e6:	4b22      	ldr	r3, [pc, #136]	; (8005370 <MX_TIM8_Init+0xc8>)
 80052e8:	2201      	movs	r2, #1
 80052ea:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80052ec:	4b20      	ldr	r3, [pc, #128]	; (8005370 <MX_TIM8_Init+0xc8>)
 80052ee:	2200      	movs	r2, #0
 80052f0:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80052f2:	4b1f      	ldr	r3, [pc, #124]	; (8005370 <MX_TIM8_Init+0xc8>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052f8:	4b1d      	ldr	r3, [pc, #116]	; (8005370 <MX_TIM8_Init+0xc8>)
 80052fa:	2200      	movs	r2, #0
 80052fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80052fe:	481c      	ldr	r0, [pc, #112]	; (8005370 <MX_TIM8_Init+0xc8>)
 8005300:	f004 faa3 	bl	800984a <HAL_TIM_Base_Init>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d001      	beq.n	800530e <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 800530a:	f7ff fbb3 	bl	8004a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800530e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005312:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005314:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005318:	4619      	mov	r1, r3
 800531a:	4815      	ldr	r0, [pc, #84]	; (8005370 <MX_TIM8_Init+0xc8>)
 800531c:	f004 fda4 	bl	8009e68 <HAL_TIM_ConfigClockSource>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d001      	beq.n	800532a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8005326:	f7ff fba5 	bl	8004a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800532a:	2320      	movs	r3, #32
 800532c:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800532e:	2300      	movs	r3, #0
 8005330:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005332:	2300      	movs	r3, #0
 8005334:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005336:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800533a:	4619      	mov	r1, r3
 800533c:	480c      	ldr	r0, [pc, #48]	; (8005370 <MX_TIM8_Init+0xc8>)
 800533e:	f005 f8f7 	bl	800a530 <HAL_TIMEx_MasterConfigSynchronization>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d001      	beq.n	800534c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8005348:	f7ff fb94 	bl	8004a74 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800534c:	2300      	movs	r3, #0
 800534e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005350:	2300      	movs	r3, #0
 8005352:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8005354:	463b      	mov	r3, r7
 8005356:	4619      	mov	r1, r3
 8005358:	4805      	ldr	r0, [pc, #20]	; (8005370 <MX_TIM8_Init+0xc8>)
 800535a:	f005 f97f 	bl	800a65c <HAL_TIMEx_ConfigBreakDeadTime>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d001      	beq.n	8005368 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8005364:	f7ff fb86 	bl	8004a74 <Error_Handler>
  }

}
 8005368:	bf00      	nop
 800536a:	3750      	adds	r7, #80	; 0x50
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}
 8005370:	20001664 	.word	0x20001664
 8005374:	40013400 	.word	0x40013400

08005378 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b088      	sub	sp, #32
 800537c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800537e:	f107 0310 	add.w	r3, r7, #16
 8005382:	2200      	movs	r2, #0
 8005384:	601a      	str	r2, [r3, #0]
 8005386:	605a      	str	r2, [r3, #4]
 8005388:	609a      	str	r2, [r3, #8]
 800538a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800538c:	1d3b      	adds	r3, r7, #4
 800538e:	2200      	movs	r2, #0
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	605a      	str	r2, [r3, #4]
 8005394:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8005396:	4b1f      	ldr	r3, [pc, #124]	; (8005414 <MX_TIM15_Init+0x9c>)
 8005398:	4a1f      	ldr	r2, [pc, #124]	; (8005418 <MX_TIM15_Init+0xa0>)
 800539a:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 800539c:	4b1d      	ldr	r3, [pc, #116]	; (8005414 <MX_TIM15_Init+0x9c>)
 800539e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053a2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053a4:	4b1b      	ldr	r3, [pc, #108]	; (8005414 <MX_TIM15_Init+0x9c>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 80053aa:	4b1a      	ldr	r3, [pc, #104]	; (8005414 <MX_TIM15_Init+0x9c>)
 80053ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80053b0:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053b2:	4b18      	ldr	r3, [pc, #96]	; (8005414 <MX_TIM15_Init+0x9c>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80053b8:	4b16      	ldr	r3, [pc, #88]	; (8005414 <MX_TIM15_Init+0x9c>)
 80053ba:	2200      	movs	r2, #0
 80053bc:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053be:	4b15      	ldr	r3, [pc, #84]	; (8005414 <MX_TIM15_Init+0x9c>)
 80053c0:	2200      	movs	r2, #0
 80053c2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80053c4:	4813      	ldr	r0, [pc, #76]	; (8005414 <MX_TIM15_Init+0x9c>)
 80053c6:	f004 fa40 	bl	800984a <HAL_TIM_Base_Init>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 80053d0:	f7ff fb50 	bl	8004a74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053d4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80053d8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80053da:	f107 0310 	add.w	r3, r7, #16
 80053de:	4619      	mov	r1, r3
 80053e0:	480c      	ldr	r0, [pc, #48]	; (8005414 <MX_TIM15_Init+0x9c>)
 80053e2:	f004 fd41 	bl	8009e68 <HAL_TIM_ConfigClockSource>
 80053e6:	4603      	mov	r3, r0
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d001      	beq.n	80053f0 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80053ec:	f7ff fb42 	bl	8004a74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80053f0:	2300      	movs	r3, #0
 80053f2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80053f4:	2300      	movs	r3, #0
 80053f6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80053f8:	1d3b      	adds	r3, r7, #4
 80053fa:	4619      	mov	r1, r3
 80053fc:	4805      	ldr	r0, [pc, #20]	; (8005414 <MX_TIM15_Init+0x9c>)
 80053fe:	f005 f897 	bl	800a530 <HAL_TIMEx_MasterConfigSynchronization>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d001      	beq.n	800540c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8005408:	f7ff fb34 	bl	8004a74 <Error_Handler>
  }

}
 800540c:	bf00      	nop
 800540e:	3720      	adds	r7, #32
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}
 8005414:	200016b0 	.word	0x200016b0
 8005418:	40014000 	.word	0x40014000

0800541c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 800541c:	b580      	push	{r7, lr}
 800541e:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8005420:	4b0f      	ldr	r3, [pc, #60]	; (8005460 <MX_TIM16_Init+0x44>)
 8005422:	4a10      	ldr	r2, [pc, #64]	; (8005464 <MX_TIM16_Init+0x48>)
 8005424:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8005426:	4b0e      	ldr	r3, [pc, #56]	; (8005460 <MX_TIM16_Init+0x44>)
 8005428:	2200      	movs	r2, #0
 800542a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800542c:	4b0c      	ldr	r3, [pc, #48]	; (8005460 <MX_TIM16_Init+0x44>)
 800542e:	2200      	movs	r2, #0
 8005430:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 8005432:	4b0b      	ldr	r3, [pc, #44]	; (8005460 <MX_TIM16_Init+0x44>)
 8005434:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8005438:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800543a:	4b09      	ldr	r3, [pc, #36]	; (8005460 <MX_TIM16_Init+0x44>)
 800543c:	2200      	movs	r2, #0
 800543e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005440:	4b07      	ldr	r3, [pc, #28]	; (8005460 <MX_TIM16_Init+0x44>)
 8005442:	2200      	movs	r2, #0
 8005444:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005446:	4b06      	ldr	r3, [pc, #24]	; (8005460 <MX_TIM16_Init+0x44>)
 8005448:	2200      	movs	r2, #0
 800544a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800544c:	4804      	ldr	r0, [pc, #16]	; (8005460 <MX_TIM16_Init+0x44>)
 800544e:	f004 f9fc 	bl	800984a <HAL_TIM_Base_Init>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d001      	beq.n	800545c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8005458:	f7ff fb0c 	bl	8004a74 <Error_Handler>
  }

}
 800545c:	bf00      	nop
 800545e:	bd80      	pop	{r7, pc}
 8005460:	2000182c 	.word	0x2000182c
 8005464:	40014400 	.word	0x40014400

08005468 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 800546c:	4b0f      	ldr	r3, [pc, #60]	; (80054ac <MX_TIM17_Init+0x44>)
 800546e:	4a10      	ldr	r2, [pc, #64]	; (80054b0 <MX_TIM17_Init+0x48>)
 8005470:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 8005472:	4b0e      	ldr	r3, [pc, #56]	; (80054ac <MX_TIM17_Init+0x44>)
 8005474:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005478:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800547a:	4b0c      	ldr	r3, [pc, #48]	; (80054ac <MX_TIM17_Init+0x44>)
 800547c:	2200      	movs	r2, #0
 800547e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 8005480:	4b0a      	ldr	r3, [pc, #40]	; (80054ac <MX_TIM17_Init+0x44>)
 8005482:	2240      	movs	r2, #64	; 0x40
 8005484:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005486:	4b09      	ldr	r3, [pc, #36]	; (80054ac <MX_TIM17_Init+0x44>)
 8005488:	2200      	movs	r2, #0
 800548a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800548c:	4b07      	ldr	r3, [pc, #28]	; (80054ac <MX_TIM17_Init+0x44>)
 800548e:	2200      	movs	r2, #0
 8005490:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005492:	4b06      	ldr	r3, [pc, #24]	; (80054ac <MX_TIM17_Init+0x44>)
 8005494:	2200      	movs	r2, #0
 8005496:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8005498:	4804      	ldr	r0, [pc, #16]	; (80054ac <MX_TIM17_Init+0x44>)
 800549a:	f004 f9d6 	bl	800984a <HAL_TIM_Base_Init>
 800549e:	4603      	mov	r3, r0
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d001      	beq.n	80054a8 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80054a4:	f7ff fae6 	bl	8004a74 <Error_Handler>
  }

}
 80054a8:	bf00      	nop
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	200016fc 	.word	0x200016fc
 80054b0:	40014800 	.word	0x40014800

080054b4 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b08a      	sub	sp, #40	; 0x28
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80054bc:	f107 0314 	add.w	r3, r7, #20
 80054c0:	2200      	movs	r2, #0
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	605a      	str	r2, [r3, #4]
 80054c6:	609a      	str	r2, [r3, #8]
 80054c8:	60da      	str	r2, [r3, #12]
 80054ca:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a23      	ldr	r2, [pc, #140]	; (8005560 <HAL_TIM_Encoder_MspInit+0xac>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d13f      	bne.n	8005556 <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80054d6:	4b23      	ldr	r3, [pc, #140]	; (8005564 <HAL_TIM_Encoder_MspInit+0xb0>)
 80054d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054da:	4a22      	ldr	r2, [pc, #136]	; (8005564 <HAL_TIM_Encoder_MspInit+0xb0>)
 80054dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80054e0:	6613      	str	r3, [r2, #96]	; 0x60
 80054e2:	4b20      	ldr	r3, [pc, #128]	; (8005564 <HAL_TIM_Encoder_MspInit+0xb0>)
 80054e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054ea:	613b      	str	r3, [r7, #16]
 80054ec:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80054ee:	4b1d      	ldr	r3, [pc, #116]	; (8005564 <HAL_TIM_Encoder_MspInit+0xb0>)
 80054f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054f2:	4a1c      	ldr	r2, [pc, #112]	; (8005564 <HAL_TIM_Encoder_MspInit+0xb0>)
 80054f4:	f043 0304 	orr.w	r3, r3, #4
 80054f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80054fa:	4b1a      	ldr	r3, [pc, #104]	; (8005564 <HAL_TIM_Encoder_MspInit+0xb0>)
 80054fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80054fe:	f003 0304 	and.w	r3, r3, #4
 8005502:	60fb      	str	r3, [r7, #12]
 8005504:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8005506:	2303      	movs	r3, #3
 8005508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800550a:	2302      	movs	r3, #2
 800550c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800550e:	2300      	movs	r3, #0
 8005510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005512:	2300      	movs	r3, #0
 8005514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8005516:	2302      	movs	r3, #2
 8005518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800551a:	f107 0314 	add.w	r3, r7, #20
 800551e:	4619      	mov	r1, r3
 8005520:	4811      	ldr	r0, [pc, #68]	; (8005568 <HAL_TIM_Encoder_MspInit+0xb4>)
 8005522:	f002 fcd3 	bl	8007ecc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8005526:	2200      	movs	r2, #0
 8005528:	2100      	movs	r1, #0
 800552a:	2018      	movs	r0, #24
 800552c:	f001 fdb9 	bl	80070a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8005530:	2018      	movs	r0, #24
 8005532:	f001 fdd0 	bl	80070d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8005536:	2200      	movs	r2, #0
 8005538:	2101      	movs	r1, #1
 800553a:	2019      	movs	r0, #25
 800553c:	f001 fdb1 	bl	80070a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005540:	2019      	movs	r0, #25
 8005542:	f001 fdc8 	bl	80070d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8005546:	2200      	movs	r2, #0
 8005548:	2101      	movs	r1, #1
 800554a:	201a      	movs	r0, #26
 800554c:	f001 fda9 	bl	80070a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8005550:	201a      	movs	r0, #26
 8005552:	f001 fdc0 	bl	80070d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8005556:	bf00      	nop
 8005558:	3728      	adds	r7, #40	; 0x28
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	40012c00 	.word	0x40012c00
 8005564:	40021000 	.word	0x40021000
 8005568:	48000800 	.word	0x48000800

0800556c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b08e      	sub	sp, #56	; 0x38
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005578:	2200      	movs	r2, #0
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	605a      	str	r2, [r3, #4]
 800557e:	609a      	str	r2, [r3, #8]
 8005580:	60da      	str	r2, [r3, #12]
 8005582:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800558c:	d131      	bne.n	80055f2 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800558e:	4b53      	ldr	r3, [pc, #332]	; (80056dc <HAL_TIM_Base_MspInit+0x170>)
 8005590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005592:	4a52      	ldr	r2, [pc, #328]	; (80056dc <HAL_TIM_Base_MspInit+0x170>)
 8005594:	f043 0301 	orr.w	r3, r3, #1
 8005598:	6593      	str	r3, [r2, #88]	; 0x58
 800559a:	4b50      	ldr	r3, [pc, #320]	; (80056dc <HAL_TIM_Base_MspInit+0x170>)
 800559c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	623b      	str	r3, [r7, #32]
 80055a4:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80055a6:	4b4d      	ldr	r3, [pc, #308]	; (80056dc <HAL_TIM_Base_MspInit+0x170>)
 80055a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055aa:	4a4c      	ldr	r2, [pc, #304]	; (80056dc <HAL_TIM_Base_MspInit+0x170>)
 80055ac:	f043 0301 	orr.w	r3, r3, #1
 80055b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80055b2:	4b4a      	ldr	r3, [pc, #296]	; (80056dc <HAL_TIM_Base_MspInit+0x170>)
 80055b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055b6:	f003 0301 	and.w	r3, r3, #1
 80055ba:	61fb      	str	r3, [r7, #28]
 80055bc:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80055be:	2301      	movs	r3, #1
 80055c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055c2:	2302      	movs	r3, #2
 80055c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055c6:	2300      	movs	r3, #0
 80055c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055ca:	2300      	movs	r3, #0
 80055cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80055ce:	2301      	movs	r3, #1
 80055d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80055d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80055d6:	4619      	mov	r1, r3
 80055d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80055dc:	f002 fc76 	bl	8007ecc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80055e0:	2200      	movs	r2, #0
 80055e2:	2101      	movs	r1, #1
 80055e4:	201c      	movs	r0, #28
 80055e6:	f001 fd5c 	bl	80070a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80055ea:	201c      	movs	r0, #28
 80055ec:	f001 fd73 	bl	80070d6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80055f0:	e070      	b.n	80056d4 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM5)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4a3a      	ldr	r2, [pc, #232]	; (80056e0 <HAL_TIM_Base_MspInit+0x174>)
 80055f8:	4293      	cmp	r3, r2
 80055fa:	d10c      	bne.n	8005616 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80055fc:	4b37      	ldr	r3, [pc, #220]	; (80056dc <HAL_TIM_Base_MspInit+0x170>)
 80055fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005600:	4a36      	ldr	r2, [pc, #216]	; (80056dc <HAL_TIM_Base_MspInit+0x170>)
 8005602:	f043 0308 	orr.w	r3, r3, #8
 8005606:	6593      	str	r3, [r2, #88]	; 0x58
 8005608:	4b34      	ldr	r3, [pc, #208]	; (80056dc <HAL_TIM_Base_MspInit+0x170>)
 800560a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800560c:	f003 0308 	and.w	r3, r3, #8
 8005610:	61bb      	str	r3, [r7, #24]
 8005612:	69bb      	ldr	r3, [r7, #24]
}
 8005614:	e05e      	b.n	80056d4 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM8)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a32      	ldr	r2, [pc, #200]	; (80056e4 <HAL_TIM_Base_MspInit+0x178>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d10c      	bne.n	800563a <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8005620:	4b2e      	ldr	r3, [pc, #184]	; (80056dc <HAL_TIM_Base_MspInit+0x170>)
 8005622:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005624:	4a2d      	ldr	r2, [pc, #180]	; (80056dc <HAL_TIM_Base_MspInit+0x170>)
 8005626:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800562a:	6613      	str	r3, [r2, #96]	; 0x60
 800562c:	4b2b      	ldr	r3, [pc, #172]	; (80056dc <HAL_TIM_Base_MspInit+0x170>)
 800562e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005630:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005634:	617b      	str	r3, [r7, #20]
 8005636:	697b      	ldr	r3, [r7, #20]
}
 8005638:	e04c      	b.n	80056d4 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM15)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a2a      	ldr	r2, [pc, #168]	; (80056e8 <HAL_TIM_Base_MspInit+0x17c>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d114      	bne.n	800566e <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8005644:	4b25      	ldr	r3, [pc, #148]	; (80056dc <HAL_TIM_Base_MspInit+0x170>)
 8005646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005648:	4a24      	ldr	r2, [pc, #144]	; (80056dc <HAL_TIM_Base_MspInit+0x170>)
 800564a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800564e:	6613      	str	r3, [r2, #96]	; 0x60
 8005650:	4b22      	ldr	r3, [pc, #136]	; (80056dc <HAL_TIM_Base_MspInit+0x170>)
 8005652:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005654:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005658:	613b      	str	r3, [r7, #16]
 800565a:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800565c:	2200      	movs	r2, #0
 800565e:	2100      	movs	r1, #0
 8005660:	2018      	movs	r0, #24
 8005662:	f001 fd1e 	bl	80070a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8005666:	2018      	movs	r0, #24
 8005668:	f001 fd35 	bl	80070d6 <HAL_NVIC_EnableIRQ>
}
 800566c:	e032      	b.n	80056d4 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM16)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a1e      	ldr	r2, [pc, #120]	; (80056ec <HAL_TIM_Base_MspInit+0x180>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d114      	bne.n	80056a2 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8005678:	4b18      	ldr	r3, [pc, #96]	; (80056dc <HAL_TIM_Base_MspInit+0x170>)
 800567a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800567c:	4a17      	ldr	r2, [pc, #92]	; (80056dc <HAL_TIM_Base_MspInit+0x170>)
 800567e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005682:	6613      	str	r3, [r2, #96]	; 0x60
 8005684:	4b15      	ldr	r3, [pc, #84]	; (80056dc <HAL_TIM_Base_MspInit+0x170>)
 8005686:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568c:	60fb      	str	r3, [r7, #12]
 800568e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8005690:	2200      	movs	r2, #0
 8005692:	2101      	movs	r1, #1
 8005694:	2019      	movs	r0, #25
 8005696:	f001 fd04 	bl	80070a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800569a:	2019      	movs	r0, #25
 800569c:	f001 fd1b 	bl	80070d6 <HAL_NVIC_EnableIRQ>
}
 80056a0:	e018      	b.n	80056d4 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM17)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a12      	ldr	r2, [pc, #72]	; (80056f0 <HAL_TIM_Base_MspInit+0x184>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d113      	bne.n	80056d4 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80056ac:	4b0b      	ldr	r3, [pc, #44]	; (80056dc <HAL_TIM_Base_MspInit+0x170>)
 80056ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056b0:	4a0a      	ldr	r2, [pc, #40]	; (80056dc <HAL_TIM_Base_MspInit+0x170>)
 80056b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80056b6:	6613      	str	r3, [r2, #96]	; 0x60
 80056b8:	4b08      	ldr	r3, [pc, #32]	; (80056dc <HAL_TIM_Base_MspInit+0x170>)
 80056ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80056bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056c0:	60bb      	str	r3, [r7, #8]
 80056c2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 80056c4:	2200      	movs	r2, #0
 80056c6:	2101      	movs	r1, #1
 80056c8:	201a      	movs	r0, #26
 80056ca:	f001 fcea 	bl	80070a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80056ce:	201a      	movs	r0, #26
 80056d0:	f001 fd01 	bl	80070d6 <HAL_NVIC_EnableIRQ>
}
 80056d4:	bf00      	nop
 80056d6:	3738      	adds	r7, #56	; 0x38
 80056d8:	46bd      	mov	sp, r7
 80056da:	bd80      	pop	{r7, pc}
 80056dc:	40021000 	.word	0x40021000
 80056e0:	40000c00 	.word	0x40000c00
 80056e4:	40013400 	.word	0x40013400
 80056e8:	40014000 	.word	0x40014000
 80056ec:	40014400 	.word	0x40014400
 80056f0:	40014800 	.word	0x40014800

080056f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80056f4:	480d      	ldr	r0, [pc, #52]	; (800572c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80056f6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80056f8:	480d      	ldr	r0, [pc, #52]	; (8005730 <LoopForever+0x6>)
  ldr r1, =_edata
 80056fa:	490e      	ldr	r1, [pc, #56]	; (8005734 <LoopForever+0xa>)
  ldr r2, =_sidata
 80056fc:	4a0e      	ldr	r2, [pc, #56]	; (8005738 <LoopForever+0xe>)
  movs r3, #0
 80056fe:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8005700:	e002      	b.n	8005708 <LoopCopyDataInit>

08005702 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005702:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005704:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005706:	3304      	adds	r3, #4

08005708 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005708:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800570a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800570c:	d3f9      	bcc.n	8005702 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800570e:	4a0b      	ldr	r2, [pc, #44]	; (800573c <LoopForever+0x12>)
  ldr r4, =_ebss
 8005710:	4c0b      	ldr	r4, [pc, #44]	; (8005740 <LoopForever+0x16>)
  movs r3, #0
 8005712:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005714:	e001      	b.n	800571a <LoopFillZerobss>

08005716 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005716:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005718:	3204      	adds	r2, #4

0800571a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800571a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800571c:	d3fb      	bcc.n	8005716 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800571e:	f7ff fc83 	bl	8005028 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005722:	f006 fb95 	bl	800be50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005726:	f7ff f893 	bl	8004850 <main>

0800572a <LoopForever>:

LoopForever:
    b LoopForever
 800572a:	e7fe      	b.n	800572a <LoopForever>
  ldr   r0, =_estack
 800572c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005730:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005734:	200013e4 	.word	0x200013e4
  ldr r2, =_sidata
 8005738:	0800f078 	.word	0x0800f078
  ldr r2, =_sbss
 800573c:	200013e4 	.word	0x200013e4
  ldr r4, =_ebss
 8005740:	20001880 	.word	0x20001880

08005744 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005744:	e7fe      	b.n	8005744 <ADC1_2_IRQHandler>

08005746 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b082      	sub	sp, #8
 800574a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800574c:	2300      	movs	r3, #0
 800574e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005750:	2003      	movs	r0, #3
 8005752:	f001 fc9b 	bl	800708c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005756:	2000      	movs	r0, #0
 8005758:	f000 f80e 	bl	8005778 <HAL_InitTick>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8005762:	2301      	movs	r3, #1
 8005764:	71fb      	strb	r3, [r7, #7]
 8005766:	e001      	b.n	800576c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8005768:	f7ff fa54 	bl	8004c14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800576c:	79fb      	ldrb	r3, [r7, #7]

}
 800576e:	4618      	mov	r0, r3
 8005770:	3708      	adds	r7, #8
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
	...

08005778 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8005780:	2300      	movs	r3, #0
 8005782:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8005784:	4b16      	ldr	r3, [pc, #88]	; (80057e0 <HAL_InitTick+0x68>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d022      	beq.n	80057d2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800578c:	4b15      	ldr	r3, [pc, #84]	; (80057e4 <HAL_InitTick+0x6c>)
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	4b13      	ldr	r3, [pc, #76]	; (80057e0 <HAL_InitTick+0x68>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005798:	fbb1 f3f3 	udiv	r3, r1, r3
 800579c:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a0:	4618      	mov	r0, r3
 80057a2:	f001 fca6 	bl	80070f2 <HAL_SYSTICK_Config>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d10f      	bne.n	80057cc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2b0f      	cmp	r3, #15
 80057b0:	d809      	bhi.n	80057c6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80057b2:	2200      	movs	r2, #0
 80057b4:	6879      	ldr	r1, [r7, #4]
 80057b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80057ba:	f001 fc72 	bl	80070a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80057be:	4a0a      	ldr	r2, [pc, #40]	; (80057e8 <HAL_InitTick+0x70>)
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6013      	str	r3, [r2, #0]
 80057c4:	e007      	b.n	80057d6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	73fb      	strb	r3, [r7, #15]
 80057ca:	e004      	b.n	80057d6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	73fb      	strb	r3, [r7, #15]
 80057d0:	e001      	b.n	80057d6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80057d2:	2301      	movs	r3, #1
 80057d4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80057d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	200001c8 	.word	0x200001c8
 80057e4:	200001c0 	.word	0x200001c0
 80057e8:	200001c4 	.word	0x200001c4

080057ec <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80057ec:	b480      	push	{r7}
 80057ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80057f0:	4b05      	ldr	r3, [pc, #20]	; (8005808 <HAL_IncTick+0x1c>)
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	4b05      	ldr	r3, [pc, #20]	; (800580c <HAL_IncTick+0x20>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4413      	add	r3, r2
 80057fa:	4a03      	ldr	r2, [pc, #12]	; (8005808 <HAL_IncTick+0x1c>)
 80057fc:	6013      	str	r3, [r2, #0]
}
 80057fe:	bf00      	nop
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	20001878 	.word	0x20001878
 800580c:	200001c8 	.word	0x200001c8

08005810 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
  return uwTick;
 8005814:	4b03      	ldr	r3, [pc, #12]	; (8005824 <HAL_GetTick+0x14>)
 8005816:	681b      	ldr	r3, [r3, #0]
}
 8005818:	4618      	mov	r0, r3
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	20001878 	.word	0x20001878

08005828 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	b084      	sub	sp, #16
 800582c:	af00      	add	r7, sp, #0
 800582e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005830:	f7ff ffee 	bl	8005810 <HAL_GetTick>
 8005834:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005840:	d004      	beq.n	800584c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8005842:	4b09      	ldr	r3, [pc, #36]	; (8005868 <HAL_Delay+0x40>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68fa      	ldr	r2, [r7, #12]
 8005848:	4413      	add	r3, r2
 800584a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800584c:	bf00      	nop
 800584e:	f7ff ffdf 	bl	8005810 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	68bb      	ldr	r3, [r7, #8]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	68fa      	ldr	r2, [r7, #12]
 800585a:	429a      	cmp	r2, r3
 800585c:	d8f7      	bhi.n	800584e <HAL_Delay+0x26>
  {
  }
}
 800585e:	bf00      	nop
 8005860:	3710      	adds	r7, #16
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	200001c8 	.word	0x200001c8

0800586c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800587e:	683b      	ldr	r3, [r7, #0]
 8005880:	431a      	orrs	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	609a      	str	r2, [r3, #8]
}
 8005886:	bf00      	nop
 8005888:	370c      	adds	r7, #12
 800588a:	46bd      	mov	sp, r7
 800588c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005890:	4770      	bx	lr

08005892 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005892:	b480      	push	{r7}
 8005894:	b083      	sub	sp, #12
 8005896:	af00      	add	r7, sp, #0
 8005898:	6078      	str	r0, [r7, #4]
 800589a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	431a      	orrs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	609a      	str	r2, [r3, #8]
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	689b      	ldr	r3, [r3, #8]
 80058c4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	370c      	adds	r7, #12
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr

080058d4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80058d4:	b490      	push	{r4, r7}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	607a      	str	r2, [r7, #4]
 80058e0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	3360      	adds	r3, #96	; 0x60
 80058e6:	461a      	mov	r2, r3
 80058e8:	68bb      	ldr	r3, [r7, #8]
 80058ea:	009b      	lsls	r3, r3, #2
 80058ec:	4413      	add	r3, r2
 80058ee:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80058f0:	6822      	ldr	r2, [r4, #0]
 80058f2:	4b08      	ldr	r3, [pc, #32]	; (8005914 <LL_ADC_SetOffset+0x40>)
 80058f4:	4013      	ands	r3, r2
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	430a      	orrs	r2, r1
 8005900:	4313      	orrs	r3, r2
 8005902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005906:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8005908:	bf00      	nop
 800590a:	3710      	adds	r7, #16
 800590c:	46bd      	mov	sp, r7
 800590e:	bc90      	pop	{r4, r7}
 8005910:	4770      	bx	lr
 8005912:	bf00      	nop
 8005914:	03fff000 	.word	0x03fff000

08005918 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8005918:	b490      	push	{r4, r7}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
 8005920:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	3360      	adds	r3, #96	; 0x60
 8005926:	461a      	mov	r2, r3
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	009b      	lsls	r3, r3, #2
 800592c:	4413      	add	r3, r2
 800592e:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005930:	6823      	ldr	r3, [r4, #0]
 8005932:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bc90      	pop	{r4, r7}
 800593e:	4770      	bx	lr

08005940 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005940:	b490      	push	{r4, r7}
 8005942:	b084      	sub	sp, #16
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	3360      	adds	r3, #96	; 0x60
 8005950:	461a      	mov	r2, r3
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	4413      	add	r3, r2
 8005958:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800595a:	6823      	ldr	r3, [r4, #0]
 800595c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4313      	orrs	r3, r2
 8005964:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005966:	bf00      	nop
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bc90      	pop	{r4, r7}
 800596e:	4770      	bx	lr

08005970 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8005970:	b490      	push	{r4, r7}
 8005972:	b084      	sub	sp, #16
 8005974:	af00      	add	r7, sp, #0
 8005976:	60f8      	str	r0, [r7, #12]
 8005978:	60b9      	str	r1, [r7, #8]
 800597a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	3360      	adds	r3, #96	; 0x60
 8005980:	461a      	mov	r2, r3
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	009b      	lsls	r3, r3, #2
 8005986:	4413      	add	r3, r2
 8005988:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800598a:	6823      	ldr	r3, [r4, #0]
 800598c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4313      	orrs	r3, r2
 8005994:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8005996:	bf00      	nop
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bc90      	pop	{r4, r7}
 800599e:	4770      	bx	lr

080059a0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80059a0:	b490      	push	{r4, r7}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	3360      	adds	r3, #96	; 0x60
 80059b0:	461a      	mov	r2, r3
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	009b      	lsls	r3, r3, #2
 80059b6:	4413      	add	r3, r2
 80059b8:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80059ba:	6823      	ldr	r3, [r4, #0]
 80059bc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4313      	orrs	r3, r2
 80059c4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80059c6:	bf00      	nop
 80059c8:	3710      	adds	r7, #16
 80059ca:	46bd      	mov	sp, r7
 80059cc:	bc90      	pop	{r4, r7}
 80059ce:	4770      	bx	lr

080059d0 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	431a      	orrs	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	615a      	str	r2, [r3, #20]
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80059f6:	b490      	push	{r4, r7}
 80059f8:	b084      	sub	sp, #16
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	60f8      	str	r0, [r7, #12]
 80059fe:	60b9      	str	r1, [r7, #8]
 8005a00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	3330      	adds	r3, #48	; 0x30
 8005a06:	461a      	mov	r2, r3
 8005a08:	68bb      	ldr	r3, [r7, #8]
 8005a0a:	0a1b      	lsrs	r3, r3, #8
 8005a0c:	009b      	lsls	r3, r3, #2
 8005a0e:	f003 030c 	and.w	r3, r3, #12
 8005a12:	4413      	add	r3, r2
 8005a14:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005a16:	6822      	ldr	r2, [r4, #0]
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	f003 031f 	and.w	r3, r3, #31
 8005a1e:	211f      	movs	r1, #31
 8005a20:	fa01 f303 	lsl.w	r3, r1, r3
 8005a24:	43db      	mvns	r3, r3
 8005a26:	401a      	ands	r2, r3
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	0e9b      	lsrs	r3, r3, #26
 8005a2c:	f003 011f 	and.w	r1, r3, #31
 8005a30:	68bb      	ldr	r3, [r7, #8]
 8005a32:	f003 031f 	and.w	r3, r3, #31
 8005a36:	fa01 f303 	lsl.w	r3, r1, r3
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8005a3e:	bf00      	nop
 8005a40:	3710      	adds	r7, #16
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bc90      	pop	{r4, r7}
 8005a46:	4770      	bx	lr

08005a48 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8005a48:	b490      	push	{r4, r7}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	3314      	adds	r3, #20
 8005a58:	461a      	mov	r2, r3
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	0e5b      	lsrs	r3, r3, #25
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	f003 0304 	and.w	r3, r3, #4
 8005a64:	4413      	add	r3, r2
 8005a66:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8005a68:	6822      	ldr	r2, [r4, #0]
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	0d1b      	lsrs	r3, r3, #20
 8005a6e:	f003 031f 	and.w	r3, r3, #31
 8005a72:	2107      	movs	r1, #7
 8005a74:	fa01 f303 	lsl.w	r3, r1, r3
 8005a78:	43db      	mvns	r3, r3
 8005a7a:	401a      	ands	r2, r3
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	0d1b      	lsrs	r3, r3, #20
 8005a80:	f003 031f 	and.w	r3, r3, #31
 8005a84:	6879      	ldr	r1, [r7, #4]
 8005a86:	fa01 f303 	lsl.w	r3, r1, r3
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005a8e:	bf00      	nop
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bc90      	pop	{r4, r7}
 8005a96:	4770      	bx	lr

08005a98 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b085      	sub	sp, #20
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	60f8      	str	r0, [r7, #12]
 8005aa0:	60b9      	str	r1, [r7, #8]
 8005aa2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ab0:	43db      	mvns	r3, r3
 8005ab2:	401a      	ands	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	f003 0318 	and.w	r3, r3, #24
 8005aba:	4908      	ldr	r1, [pc, #32]	; (8005adc <LL_ADC_SetChannelSingleDiff+0x44>)
 8005abc:	40d9      	lsrs	r1, r3
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	400b      	ands	r3, r1
 8005ac2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ac6:	431a      	orrs	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005ace:	bf00      	nop
 8005ad0:	3714      	adds	r7, #20
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr
 8005ada:	bf00      	nop
 8005adc:	0007ffff 	.word	0x0007ffff

08005ae0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b083      	sub	sp, #12
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005af0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	6093      	str	r3, [r2, #8]
}
 8005af8:	bf00      	nop
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b18:	d101      	bne.n	8005b1e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	e000      	b.n	8005b20 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8005b3c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005b40:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8005b48:	bf00      	nop
 8005b4a:	370c      	adds	r7, #12
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b083      	sub	sp, #12
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005b64:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b68:	d101      	bne.n	8005b6e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e000      	b.n	8005b70 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8005b6e:	2300      	movs	r3, #0
}
 8005b70:	4618      	mov	r0, r3
 8005b72:	370c      	adds	r7, #12
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b083      	sub	sp, #12
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f003 0301 	and.w	r3, r3, #1
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d101      	bne.n	8005b94 <LL_ADC_IsEnabled+0x18>
 8005b90:	2301      	movs	r3, #1
 8005b92:	e000      	b.n	8005b96 <LL_ADC_IsEnabled+0x1a>
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	370c      	adds	r7, #12
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b083      	sub	sp, #12
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	689b      	ldr	r3, [r3, #8]
 8005bae:	f003 0304 	and.w	r3, r3, #4
 8005bb2:	2b04      	cmp	r3, #4
 8005bb4:	d101      	bne.n	8005bba <LL_ADC_REG_IsConversionOngoing+0x18>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e000      	b.n	8005bbc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	370c      	adds	r7, #12
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b083      	sub	sp, #12
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	f003 0308 	and.w	r3, r3, #8
 8005bd8:	2b08      	cmp	r3, #8
 8005bda:	d101      	bne.n	8005be0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005bdc:	2301      	movs	r3, #1
 8005bde:	e000      	b.n	8005be2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005be0:	2300      	movs	r3, #0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
	...

08005bf0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005bf0:	b590      	push	{r4, r7, lr}
 8005bf2:	b089      	sub	sp, #36	; 0x24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8005c06:	2301      	movs	r3, #1
 8005c08:	e1ad      	b.n	8005f66 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d109      	bne.n	8005c2c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005c18:	6878      	ldr	r0, [r7, #4]
 8005c1a:	f7fe f81f 	bl	8003c5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2200      	movs	r2, #0
 8005c22:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2200      	movs	r2, #0
 8005c28:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f7ff ff67 	bl	8005b04 <LL_ADC_IsDeepPowerDownEnabled>
 8005c36:	4603      	mov	r3, r0
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d004      	beq.n	8005c46 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7ff ff4d 	bl	8005ae0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7ff ff82 	bl	8005b54 <LL_ADC_IsInternalRegulatorEnabled>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d113      	bne.n	8005c7e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7ff ff66 	bl	8005b2c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8005c60:	4b9e      	ldr	r3, [pc, #632]	; (8005edc <HAL_ADC_Init+0x2ec>)
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	099b      	lsrs	r3, r3, #6
 8005c66:	4a9e      	ldr	r2, [pc, #632]	; (8005ee0 <HAL_ADC_Init+0x2f0>)
 8005c68:	fba2 2303 	umull	r2, r3, r2, r3
 8005c6c:	099b      	lsrs	r3, r3, #6
 8005c6e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005c70:	e002      	b.n	8005c78 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	3b01      	subs	r3, #1
 8005c76:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d1f9      	bne.n	8005c72 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7ff ff66 	bl	8005b54 <LL_ADC_IsInternalRegulatorEnabled>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10d      	bne.n	8005caa <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c92:	f043 0210 	orr.w	r2, r3, #16
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c9e:	f043 0201 	orr.w	r2, r3, #1
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7ff ff77 	bl	8005ba2 <LL_ADC_REG_IsConversionOngoing>
 8005cb4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cba:	f003 0310 	and.w	r3, r3, #16
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	f040 8148 	bne.w	8005f54 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	f040 8144 	bne.w	8005f54 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cd0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8005cd4:	f043 0202 	orr.w	r2, r3, #2
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7ff ff4b 	bl	8005b7c <LL_ADC_IsEnabled>
 8005ce6:	4603      	mov	r3, r0
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d141      	bne.n	8005d70 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005cf4:	d004      	beq.n	8005d00 <HAL_ADC_Init+0x110>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a7a      	ldr	r2, [pc, #488]	; (8005ee4 <HAL_ADC_Init+0x2f4>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d10f      	bne.n	8005d20 <HAL_ADC_Init+0x130>
 8005d00:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8005d04:	f7ff ff3a 	bl	8005b7c <LL_ADC_IsEnabled>
 8005d08:	4604      	mov	r4, r0
 8005d0a:	4876      	ldr	r0, [pc, #472]	; (8005ee4 <HAL_ADC_Init+0x2f4>)
 8005d0c:	f7ff ff36 	bl	8005b7c <LL_ADC_IsEnabled>
 8005d10:	4603      	mov	r3, r0
 8005d12:	4323      	orrs	r3, r4
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	bf0c      	ite	eq
 8005d18:	2301      	moveq	r3, #1
 8005d1a:	2300      	movne	r3, #0
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	e012      	b.n	8005d46 <HAL_ADC_Init+0x156>
 8005d20:	4871      	ldr	r0, [pc, #452]	; (8005ee8 <HAL_ADC_Init+0x2f8>)
 8005d22:	f7ff ff2b 	bl	8005b7c <LL_ADC_IsEnabled>
 8005d26:	4604      	mov	r4, r0
 8005d28:	4870      	ldr	r0, [pc, #448]	; (8005eec <HAL_ADC_Init+0x2fc>)
 8005d2a:	f7ff ff27 	bl	8005b7c <LL_ADC_IsEnabled>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	431c      	orrs	r4, r3
 8005d32:	486f      	ldr	r0, [pc, #444]	; (8005ef0 <HAL_ADC_Init+0x300>)
 8005d34:	f7ff ff22 	bl	8005b7c <LL_ADC_IsEnabled>
 8005d38:	4603      	mov	r3, r0
 8005d3a:	4323      	orrs	r3, r4
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	bf0c      	ite	eq
 8005d40:	2301      	moveq	r3, #1
 8005d42:	2300      	movne	r3, #0
 8005d44:	b2db      	uxtb	r3, r3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d012      	beq.n	8005d70 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005d52:	d004      	beq.n	8005d5e <HAL_ADC_Init+0x16e>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a62      	ldr	r2, [pc, #392]	; (8005ee4 <HAL_ADC_Init+0x2f4>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d101      	bne.n	8005d62 <HAL_ADC_Init+0x172>
 8005d5e:	4a65      	ldr	r2, [pc, #404]	; (8005ef4 <HAL_ADC_Init+0x304>)
 8005d60:	e000      	b.n	8005d64 <HAL_ADC_Init+0x174>
 8005d62:	4a65      	ldr	r2, [pc, #404]	; (8005ef8 <HAL_ADC_Init+0x308>)
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	685b      	ldr	r3, [r3, #4]
 8005d68:	4619      	mov	r1, r3
 8005d6a:	4610      	mov	r0, r2
 8005d6c:	f7ff fd7e 	bl	800586c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	7f5b      	ldrb	r3, [r3, #29]
 8005d74:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005d7a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8005d80:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005d86:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d8e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005d90:	4313      	orrs	r3, r2
 8005d92:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d106      	bne.n	8005dac <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005da2:	3b01      	subs	r3, #1
 8005da4:	045b      	lsls	r3, r3, #17
 8005da6:	69ba      	ldr	r2, [r7, #24]
 8005da8:	4313      	orrs	r3, r2
 8005daa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d009      	beq.n	8005dc8 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005db8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dc0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8005dc2:	69ba      	ldr	r2, [r7, #24]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	68da      	ldr	r2, [r3, #12]
 8005dce:	4b4b      	ldr	r3, [pc, #300]	; (8005efc <HAL_ADC_Init+0x30c>)
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	6812      	ldr	r2, [r2, #0]
 8005dd6:	69b9      	ldr	r1, [r7, #24]
 8005dd8:	430b      	orrs	r3, r1
 8005dda:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	691b      	ldr	r3, [r3, #16]
 8005de2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	430a      	orrs	r2, r1
 8005df0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7ff fed3 	bl	8005ba2 <LL_ADC_REG_IsConversionOngoing>
 8005dfc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f7ff fee0 	bl	8005bc8 <LL_ADC_INJ_IsConversionOngoing>
 8005e08:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d17f      	bne.n	8005f10 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d17c      	bne.n	8005f10 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005e1a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e22:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005e24:	4313      	orrs	r3, r2
 8005e26:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e32:	f023 0302 	bic.w	r3, r3, #2
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	6812      	ldr	r2, [r2, #0]
 8005e3a:	69b9      	ldr	r1, [r7, #24]
 8005e3c:	430b      	orrs	r3, r1
 8005e3e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	691b      	ldr	r3, [r3, #16]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d017      	beq.n	8005e78 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	691a      	ldr	r2, [r3, #16]
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005e56:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005e60:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005e64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005e68:	687a      	ldr	r2, [r7, #4]
 8005e6a:	6911      	ldr	r1, [r2, #16]
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	6812      	ldr	r2, [r2, #0]
 8005e70:	430b      	orrs	r3, r1
 8005e72:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8005e76:	e013      	b.n	8005ea0 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	691a      	ldr	r2, [r3, #16]
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005e86:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8005e90:	687a      	ldr	r2, [r7, #4]
 8005e92:	6812      	ldr	r2, [r2, #0]
 8005e94:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8005e98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005e9c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ea6:	2b01      	cmp	r3, #1
 8005ea8:	d12a      	bne.n	8005f00 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	691b      	ldr	r3, [r3, #16]
 8005eb0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005eb4:	f023 0304 	bic.w	r3, r3, #4
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005ec0:	4311      	orrs	r1, r2
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005ec6:	4311      	orrs	r1, r2
 8005ec8:	687a      	ldr	r2, [r7, #4]
 8005eca:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	431a      	orrs	r2, r3
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	f042 0201 	orr.w	r2, r2, #1
 8005ed8:	611a      	str	r2, [r3, #16]
 8005eda:	e019      	b.n	8005f10 <HAL_ADC_Init+0x320>
 8005edc:	200001c0 	.word	0x200001c0
 8005ee0:	053e2d63 	.word	0x053e2d63
 8005ee4:	50000100 	.word	0x50000100
 8005ee8:	50000400 	.word	0x50000400
 8005eec:	50000500 	.word	0x50000500
 8005ef0:	50000600 	.word	0x50000600
 8005ef4:	50000300 	.word	0x50000300
 8005ef8:	50000700 	.word	0x50000700
 8005efc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691a      	ldr	r2, [r3, #16]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0201 	bic.w	r2, r2, #1
 8005f0e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	695b      	ldr	r3, [r3, #20]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d10c      	bne.n	8005f32 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f1e:	f023 010f 	bic.w	r1, r3, #15
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6a1b      	ldr	r3, [r3, #32]
 8005f26:	1e5a      	subs	r2, r3, #1
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	631a      	str	r2, [r3, #48]	; 0x30
 8005f30:	e007      	b.n	8005f42 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f022 020f 	bic.w	r2, r2, #15
 8005f40:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f46:	f023 0303 	bic.w	r3, r3, #3
 8005f4a:	f043 0201 	orr.w	r2, r3, #1
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	65da      	str	r2, [r3, #92]	; 0x5c
 8005f52:	e007      	b.n	8005f64 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f58:	f043 0210 	orr.w	r2, r3, #16
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005f64:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3724      	adds	r7, #36	; 0x24
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd90      	pop	{r4, r7, pc}
 8005f6e:	bf00      	nop

08005f70 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b0a6      	sub	sp, #152	; 0x98
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
 8005f78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005f80:	2300      	movs	r3, #0
 8005f82:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d101      	bne.n	8005f92 <HAL_ADC_ConfigChannel+0x22>
 8005f8e:	2302      	movs	r3, #2
 8005f90:	e38e      	b.n	80066b0 <HAL_ADC_ConfigChannel+0x740>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	2201      	movs	r2, #1
 8005f96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	f7ff fdff 	bl	8005ba2 <LL_ADC_REG_IsConversionOngoing>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f040 836f 	bne.w	800668a <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6818      	ldr	r0, [r3, #0]
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	6859      	ldr	r1, [r3, #4]
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	461a      	mov	r2, r3
 8005fba:	f7ff fd1c 	bl	80059f6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	f7ff fded 	bl	8005ba2 <LL_ADC_REG_IsConversionOngoing>
 8005fc8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7ff fdf9 	bl	8005bc8 <LL_ADC_INJ_IsConversionOngoing>
 8005fd6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005fda:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	f040 817b 	bne.w	80062da <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005fe4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	f040 8176 	bne.w	80062da <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ff6:	d10f      	bne.n	8006018 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6818      	ldr	r0, [r3, #0]
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2200      	movs	r2, #0
 8006002:	4619      	mov	r1, r3
 8006004:	f7ff fd20 	bl	8005a48 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006010:	4618      	mov	r0, r3
 8006012:	f7ff fcdd 	bl	80059d0 <LL_ADC_SetSamplingTimeCommonConfig>
 8006016:	e00e      	b.n	8006036 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6818      	ldr	r0, [r3, #0]
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	6819      	ldr	r1, [r3, #0]
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	689b      	ldr	r3, [r3, #8]
 8006024:	461a      	mov	r2, r3
 8006026:	f7ff fd0f 	bl	8005a48 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	2100      	movs	r1, #0
 8006030:	4618      	mov	r0, r3
 8006032:	f7ff fccd 	bl	80059d0 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	695a      	ldr	r2, [r3, #20]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	08db      	lsrs	r3, r3, #3
 8006042:	f003 0303 	and.w	r3, r3, #3
 8006046:	005b      	lsls	r3, r3, #1
 8006048:	fa02 f303 	lsl.w	r3, r2, r3
 800604c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	691b      	ldr	r3, [r3, #16]
 8006054:	2b04      	cmp	r3, #4
 8006056:	d022      	beq.n	800609e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6818      	ldr	r0, [r3, #0]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	6919      	ldr	r1, [r3, #16]
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	681a      	ldr	r2, [r3, #0]
 8006064:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006068:	f7ff fc34 	bl	80058d4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6818      	ldr	r0, [r3, #0]
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	6919      	ldr	r1, [r3, #16]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	699b      	ldr	r3, [r3, #24]
 8006078:	461a      	mov	r2, r3
 800607a:	f7ff fc79 	bl	8005970 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6818      	ldr	r0, [r3, #0]
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	6919      	ldr	r1, [r3, #16]
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	7f1b      	ldrb	r3, [r3, #28]
 800608a:	2b01      	cmp	r3, #1
 800608c:	d102      	bne.n	8006094 <HAL_ADC_ConfigChannel+0x124>
 800608e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006092:	e000      	b.n	8006096 <HAL_ADC_ConfigChannel+0x126>
 8006094:	2300      	movs	r3, #0
 8006096:	461a      	mov	r2, r3
 8006098:	f7ff fc82 	bl	80059a0 <LL_ADC_SetOffsetSaturation>
 800609c:	e11d      	b.n	80062da <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	2100      	movs	r1, #0
 80060a4:	4618      	mov	r0, r3
 80060a6:	f7ff fc37 	bl	8005918 <LL_ADC_GetOffsetChannel>
 80060aa:	4603      	mov	r3, r0
 80060ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d10a      	bne.n	80060ca <HAL_ADC_ConfigChannel+0x15a>
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2100      	movs	r1, #0
 80060ba:	4618      	mov	r0, r3
 80060bc:	f7ff fc2c 	bl	8005918 <LL_ADC_GetOffsetChannel>
 80060c0:	4603      	mov	r3, r0
 80060c2:	0e9b      	lsrs	r3, r3, #26
 80060c4:	f003 021f 	and.w	r2, r3, #31
 80060c8:	e012      	b.n	80060f0 <HAL_ADC_ConfigChannel+0x180>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2100      	movs	r1, #0
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7ff fc21 	bl	8005918 <LL_ADC_GetOffsetChannel>
 80060d6:	4603      	mov	r3, r0
 80060d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80060e0:	fa93 f3a3 	rbit	r3, r3
 80060e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80060e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80060e8:	fab3 f383 	clz	r3, r3
 80060ec:	b2db      	uxtb	r3, r3
 80060ee:	461a      	mov	r2, r3
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d105      	bne.n	8006108 <HAL_ADC_ConfigChannel+0x198>
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	0e9b      	lsrs	r3, r3, #26
 8006102:	f003 031f 	and.w	r3, r3, #31
 8006106:	e00a      	b.n	800611e <HAL_ADC_ConfigChannel+0x1ae>
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800610e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006110:	fa93 f3a3 	rbit	r3, r3
 8006114:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8006116:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006118:	fab3 f383 	clz	r3, r3
 800611c:	b2db      	uxtb	r3, r3
 800611e:	429a      	cmp	r2, r3
 8006120:	d106      	bne.n	8006130 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	2200      	movs	r2, #0
 8006128:	2100      	movs	r1, #0
 800612a:	4618      	mov	r0, r3
 800612c:	f7ff fc08 	bl	8005940 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2101      	movs	r1, #1
 8006136:	4618      	mov	r0, r3
 8006138:	f7ff fbee 	bl	8005918 <LL_ADC_GetOffsetChannel>
 800613c:	4603      	mov	r3, r0
 800613e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006142:	2b00      	cmp	r3, #0
 8006144:	d10a      	bne.n	800615c <HAL_ADC_ConfigChannel+0x1ec>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2101      	movs	r1, #1
 800614c:	4618      	mov	r0, r3
 800614e:	f7ff fbe3 	bl	8005918 <LL_ADC_GetOffsetChannel>
 8006152:	4603      	mov	r3, r0
 8006154:	0e9b      	lsrs	r3, r3, #26
 8006156:	f003 021f 	and.w	r2, r3, #31
 800615a:	e010      	b.n	800617e <HAL_ADC_ConfigChannel+0x20e>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2101      	movs	r1, #1
 8006162:	4618      	mov	r0, r3
 8006164:	f7ff fbd8 	bl	8005918 <LL_ADC_GetOffsetChannel>
 8006168:	4603      	mov	r3, r0
 800616a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800616c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800616e:	fa93 f3a3 	rbit	r3, r3
 8006172:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006174:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006176:	fab3 f383 	clz	r3, r3
 800617a:	b2db      	uxtb	r3, r3
 800617c:	461a      	mov	r2, r3
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006186:	2b00      	cmp	r3, #0
 8006188:	d105      	bne.n	8006196 <HAL_ADC_ConfigChannel+0x226>
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	0e9b      	lsrs	r3, r3, #26
 8006190:	f003 031f 	and.w	r3, r3, #31
 8006194:	e00a      	b.n	80061ac <HAL_ADC_ConfigChannel+0x23c>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800619c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800619e:	fa93 f3a3 	rbit	r3, r3
 80061a2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80061a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80061a6:	fab3 f383 	clz	r3, r3
 80061aa:	b2db      	uxtb	r3, r3
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d106      	bne.n	80061be <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2200      	movs	r2, #0
 80061b6:	2101      	movs	r1, #1
 80061b8:	4618      	mov	r0, r3
 80061ba:	f7ff fbc1 	bl	8005940 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	2102      	movs	r1, #2
 80061c4:	4618      	mov	r0, r3
 80061c6:	f7ff fba7 	bl	8005918 <LL_ADC_GetOffsetChannel>
 80061ca:	4603      	mov	r3, r0
 80061cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d10a      	bne.n	80061ea <HAL_ADC_ConfigChannel+0x27a>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2102      	movs	r1, #2
 80061da:	4618      	mov	r0, r3
 80061dc:	f7ff fb9c 	bl	8005918 <LL_ADC_GetOffsetChannel>
 80061e0:	4603      	mov	r3, r0
 80061e2:	0e9b      	lsrs	r3, r3, #26
 80061e4:	f003 021f 	and.w	r2, r3, #31
 80061e8:	e010      	b.n	800620c <HAL_ADC_ConfigChannel+0x29c>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2102      	movs	r1, #2
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7ff fb91 	bl	8005918 <LL_ADC_GetOffsetChannel>
 80061f6:	4603      	mov	r3, r0
 80061f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80061fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80061fc:	fa93 f3a3 	rbit	r3, r3
 8006200:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8006202:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006204:	fab3 f383 	clz	r3, r3
 8006208:	b2db      	uxtb	r3, r3
 800620a:	461a      	mov	r2, r3
 800620c:	683b      	ldr	r3, [r7, #0]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006214:	2b00      	cmp	r3, #0
 8006216:	d105      	bne.n	8006224 <HAL_ADC_ConfigChannel+0x2b4>
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	0e9b      	lsrs	r3, r3, #26
 800621e:	f003 031f 	and.w	r3, r3, #31
 8006222:	e00a      	b.n	800623a <HAL_ADC_ConfigChannel+0x2ca>
 8006224:	683b      	ldr	r3, [r7, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800622a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800622c:	fa93 f3a3 	rbit	r3, r3
 8006230:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006232:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006234:	fab3 f383 	clz	r3, r3
 8006238:	b2db      	uxtb	r3, r3
 800623a:	429a      	cmp	r2, r3
 800623c:	d106      	bne.n	800624c <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2200      	movs	r2, #0
 8006244:	2102      	movs	r1, #2
 8006246:	4618      	mov	r0, r3
 8006248:	f7ff fb7a 	bl	8005940 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2103      	movs	r1, #3
 8006252:	4618      	mov	r0, r3
 8006254:	f7ff fb60 	bl	8005918 <LL_ADC_GetOffsetChannel>
 8006258:	4603      	mov	r3, r0
 800625a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800625e:	2b00      	cmp	r3, #0
 8006260:	d10a      	bne.n	8006278 <HAL_ADC_ConfigChannel+0x308>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2103      	movs	r1, #3
 8006268:	4618      	mov	r0, r3
 800626a:	f7ff fb55 	bl	8005918 <LL_ADC_GetOffsetChannel>
 800626e:	4603      	mov	r3, r0
 8006270:	0e9b      	lsrs	r3, r3, #26
 8006272:	f003 021f 	and.w	r2, r3, #31
 8006276:	e010      	b.n	800629a <HAL_ADC_ConfigChannel+0x32a>
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2103      	movs	r1, #3
 800627e:	4618      	mov	r0, r3
 8006280:	f7ff fb4a 	bl	8005918 <LL_ADC_GetOffsetChannel>
 8006284:	4603      	mov	r3, r0
 8006286:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006288:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800628a:	fa93 f3a3 	rbit	r3, r3
 800628e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006290:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006292:	fab3 f383 	clz	r3, r3
 8006296:	b2db      	uxtb	r3, r3
 8006298:	461a      	mov	r2, r3
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d105      	bne.n	80062b2 <HAL_ADC_ConfigChannel+0x342>
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	0e9b      	lsrs	r3, r3, #26
 80062ac:	f003 031f 	and.w	r3, r3, #31
 80062b0:	e00a      	b.n	80062c8 <HAL_ADC_ConfigChannel+0x358>
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80062b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80062ba:	fa93 f3a3 	rbit	r3, r3
 80062be:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80062c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80062c2:	fab3 f383 	clz	r3, r3
 80062c6:	b2db      	uxtb	r3, r3
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d106      	bne.n	80062da <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2200      	movs	r2, #0
 80062d2:	2103      	movs	r1, #3
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7ff fb33 	bl	8005940 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	4618      	mov	r0, r3
 80062e0:	f7ff fc4c 	bl	8005b7c <LL_ADC_IsEnabled>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	f040 810c 	bne.w	8006504 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6818      	ldr	r0, [r3, #0]
 80062f0:	683b      	ldr	r3, [r7, #0]
 80062f2:	6819      	ldr	r1, [r3, #0]
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	68db      	ldr	r3, [r3, #12]
 80062f8:	461a      	mov	r2, r3
 80062fa:	f7ff fbcd 	bl	8005a98 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80062fe:	683b      	ldr	r3, [r7, #0]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	4aaf      	ldr	r2, [pc, #700]	; (80065c0 <HAL_ADC_ConfigChannel+0x650>)
 8006304:	4293      	cmp	r3, r2
 8006306:	f040 80fd 	bne.w	8006504 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10b      	bne.n	8006332 <HAL_ADC_ConfigChannel+0x3c2>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	0e9b      	lsrs	r3, r3, #26
 8006320:	3301      	adds	r3, #1
 8006322:	f003 031f 	and.w	r3, r3, #31
 8006326:	2b09      	cmp	r3, #9
 8006328:	bf94      	ite	ls
 800632a:	2301      	movls	r3, #1
 800632c:	2300      	movhi	r3, #0
 800632e:	b2db      	uxtb	r3, r3
 8006330:	e012      	b.n	8006358 <HAL_ADC_ConfigChannel+0x3e8>
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800633a:	fa93 f3a3 	rbit	r3, r3
 800633e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006342:	fab3 f383 	clz	r3, r3
 8006346:	b2db      	uxtb	r3, r3
 8006348:	3301      	adds	r3, #1
 800634a:	f003 031f 	and.w	r3, r3, #31
 800634e:	2b09      	cmp	r3, #9
 8006350:	bf94      	ite	ls
 8006352:	2301      	movls	r3, #1
 8006354:	2300      	movhi	r3, #0
 8006356:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006358:	2b00      	cmp	r3, #0
 800635a:	d064      	beq.n	8006426 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006364:	2b00      	cmp	r3, #0
 8006366:	d107      	bne.n	8006378 <HAL_ADC_ConfigChannel+0x408>
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	0e9b      	lsrs	r3, r3, #26
 800636e:	3301      	adds	r3, #1
 8006370:	069b      	lsls	r3, r3, #26
 8006372:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006376:	e00e      	b.n	8006396 <HAL_ADC_ConfigChannel+0x426>
 8006378:	683b      	ldr	r3, [r7, #0]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800637e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006380:	fa93 f3a3 	rbit	r3, r3
 8006384:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006386:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006388:	fab3 f383 	clz	r3, r3
 800638c:	b2db      	uxtb	r3, r3
 800638e:	3301      	adds	r3, #1
 8006390:	069b      	lsls	r3, r3, #26
 8006392:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d109      	bne.n	80063b6 <HAL_ADC_ConfigChannel+0x446>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	0e9b      	lsrs	r3, r3, #26
 80063a8:	3301      	adds	r3, #1
 80063aa:	f003 031f 	and.w	r3, r3, #31
 80063ae:	2101      	movs	r1, #1
 80063b0:	fa01 f303 	lsl.w	r3, r1, r3
 80063b4:	e010      	b.n	80063d8 <HAL_ADC_ConfigChannel+0x468>
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80063bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063be:	fa93 f3a3 	rbit	r3, r3
 80063c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80063c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c6:	fab3 f383 	clz	r3, r3
 80063ca:	b2db      	uxtb	r3, r3
 80063cc:	3301      	adds	r3, #1
 80063ce:	f003 031f 	and.w	r3, r3, #31
 80063d2:	2101      	movs	r1, #1
 80063d4:	fa01 f303 	lsl.w	r3, r1, r3
 80063d8:	ea42 0103 	orr.w	r1, r2, r3
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d10a      	bne.n	80063fe <HAL_ADC_ConfigChannel+0x48e>
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	0e9b      	lsrs	r3, r3, #26
 80063ee:	3301      	adds	r3, #1
 80063f0:	f003 021f 	and.w	r2, r3, #31
 80063f4:	4613      	mov	r3, r2
 80063f6:	005b      	lsls	r3, r3, #1
 80063f8:	4413      	add	r3, r2
 80063fa:	051b      	lsls	r3, r3, #20
 80063fc:	e011      	b.n	8006422 <HAL_ADC_ConfigChannel+0x4b2>
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006406:	fa93 f3a3 	rbit	r3, r3
 800640a:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800640c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640e:	fab3 f383 	clz	r3, r3
 8006412:	b2db      	uxtb	r3, r3
 8006414:	3301      	adds	r3, #1
 8006416:	f003 021f 	and.w	r2, r3, #31
 800641a:	4613      	mov	r3, r2
 800641c:	005b      	lsls	r3, r3, #1
 800641e:	4413      	add	r3, r2
 8006420:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006422:	430b      	orrs	r3, r1
 8006424:	e069      	b.n	80064fa <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800642e:	2b00      	cmp	r3, #0
 8006430:	d107      	bne.n	8006442 <HAL_ADC_ConfigChannel+0x4d2>
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	0e9b      	lsrs	r3, r3, #26
 8006438:	3301      	adds	r3, #1
 800643a:	069b      	lsls	r3, r3, #26
 800643c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006440:	e00e      	b.n	8006460 <HAL_ADC_ConfigChannel+0x4f0>
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	fa93 f3a3 	rbit	r3, r3
 800644e:	61fb      	str	r3, [r7, #28]
  return result;
 8006450:	69fb      	ldr	r3, [r7, #28]
 8006452:	fab3 f383 	clz	r3, r3
 8006456:	b2db      	uxtb	r3, r3
 8006458:	3301      	adds	r3, #1
 800645a:	069b      	lsls	r3, r3, #26
 800645c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006468:	2b00      	cmp	r3, #0
 800646a:	d109      	bne.n	8006480 <HAL_ADC_ConfigChannel+0x510>
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	0e9b      	lsrs	r3, r3, #26
 8006472:	3301      	adds	r3, #1
 8006474:	f003 031f 	and.w	r3, r3, #31
 8006478:	2101      	movs	r1, #1
 800647a:	fa01 f303 	lsl.w	r3, r1, r3
 800647e:	e010      	b.n	80064a2 <HAL_ADC_ConfigChannel+0x532>
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006486:	69bb      	ldr	r3, [r7, #24]
 8006488:	fa93 f3a3 	rbit	r3, r3
 800648c:	617b      	str	r3, [r7, #20]
  return result;
 800648e:	697b      	ldr	r3, [r7, #20]
 8006490:	fab3 f383 	clz	r3, r3
 8006494:	b2db      	uxtb	r3, r3
 8006496:	3301      	adds	r3, #1
 8006498:	f003 031f 	and.w	r3, r3, #31
 800649c:	2101      	movs	r1, #1
 800649e:	fa01 f303 	lsl.w	r3, r1, r3
 80064a2:	ea42 0103 	orr.w	r1, r2, r3
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d10d      	bne.n	80064ce <HAL_ADC_ConfigChannel+0x55e>
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	0e9b      	lsrs	r3, r3, #26
 80064b8:	3301      	adds	r3, #1
 80064ba:	f003 021f 	and.w	r2, r3, #31
 80064be:	4613      	mov	r3, r2
 80064c0:	005b      	lsls	r3, r3, #1
 80064c2:	4413      	add	r3, r2
 80064c4:	3b1e      	subs	r3, #30
 80064c6:	051b      	lsls	r3, r3, #20
 80064c8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80064cc:	e014      	b.n	80064f8 <HAL_ADC_ConfigChannel+0x588>
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	fa93 f3a3 	rbit	r3, r3
 80064da:	60fb      	str	r3, [r7, #12]
  return result;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	fab3 f383 	clz	r3, r3
 80064e2:	b2db      	uxtb	r3, r3
 80064e4:	3301      	adds	r3, #1
 80064e6:	f003 021f 	and.w	r2, r3, #31
 80064ea:	4613      	mov	r3, r2
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	4413      	add	r3, r2
 80064f0:	3b1e      	subs	r3, #30
 80064f2:	051b      	lsls	r3, r3, #20
 80064f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80064f8:	430b      	orrs	r3, r1
 80064fa:	683a      	ldr	r2, [r7, #0]
 80064fc:	6892      	ldr	r2, [r2, #8]
 80064fe:	4619      	mov	r1, r3
 8006500:	f7ff faa2 	bl	8005a48 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	4b2e      	ldr	r3, [pc, #184]	; (80065c4 <HAL_ADC_ConfigChannel+0x654>)
 800650a:	4013      	ands	r3, r2
 800650c:	2b00      	cmp	r3, #0
 800650e:	f000 80c9 	beq.w	80066a4 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800651a:	d004      	beq.n	8006526 <HAL_ADC_ConfigChannel+0x5b6>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	4a29      	ldr	r2, [pc, #164]	; (80065c8 <HAL_ADC_ConfigChannel+0x658>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d101      	bne.n	800652a <HAL_ADC_ConfigChannel+0x5ba>
 8006526:	4b29      	ldr	r3, [pc, #164]	; (80065cc <HAL_ADC_ConfigChannel+0x65c>)
 8006528:	e000      	b.n	800652c <HAL_ADC_ConfigChannel+0x5bc>
 800652a:	4b29      	ldr	r3, [pc, #164]	; (80065d0 <HAL_ADC_ConfigChannel+0x660>)
 800652c:	4618      	mov	r0, r3
 800652e:	f7ff f9c3 	bl	80058b8 <LL_ADC_GetCommonPathInternalCh>
 8006532:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	4a26      	ldr	r2, [pc, #152]	; (80065d4 <HAL_ADC_ConfigChannel+0x664>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d004      	beq.n	800654a <HAL_ADC_ConfigChannel+0x5da>
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a24      	ldr	r2, [pc, #144]	; (80065d8 <HAL_ADC_ConfigChannel+0x668>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d14e      	bne.n	80065e8 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800654a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800654e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006552:	2b00      	cmp	r3, #0
 8006554:	d148      	bne.n	80065e8 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800655e:	d005      	beq.n	800656c <HAL_ADC_ConfigChannel+0x5fc>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a1d      	ldr	r2, [pc, #116]	; (80065dc <HAL_ADC_ConfigChannel+0x66c>)
 8006566:	4293      	cmp	r3, r2
 8006568:	f040 8099 	bne.w	800669e <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006574:	d004      	beq.n	8006580 <HAL_ADC_ConfigChannel+0x610>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a13      	ldr	r2, [pc, #76]	; (80065c8 <HAL_ADC_ConfigChannel+0x658>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d101      	bne.n	8006584 <HAL_ADC_ConfigChannel+0x614>
 8006580:	4a12      	ldr	r2, [pc, #72]	; (80065cc <HAL_ADC_ConfigChannel+0x65c>)
 8006582:	e000      	b.n	8006586 <HAL_ADC_ConfigChannel+0x616>
 8006584:	4a12      	ldr	r2, [pc, #72]	; (80065d0 <HAL_ADC_ConfigChannel+0x660>)
 8006586:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800658a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800658e:	4619      	mov	r1, r3
 8006590:	4610      	mov	r0, r2
 8006592:	f7ff f97e 	bl	8005892 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006596:	4b12      	ldr	r3, [pc, #72]	; (80065e0 <HAL_ADC_ConfigChannel+0x670>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	099b      	lsrs	r3, r3, #6
 800659c:	4a11      	ldr	r2, [pc, #68]	; (80065e4 <HAL_ADC_ConfigChannel+0x674>)
 800659e:	fba2 2303 	umull	r2, r3, r2, r3
 80065a2:	099a      	lsrs	r2, r3, #6
 80065a4:	4613      	mov	r3, r2
 80065a6:	005b      	lsls	r3, r3, #1
 80065a8:	4413      	add	r3, r2
 80065aa:	009b      	lsls	r3, r3, #2
 80065ac:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80065ae:	e002      	b.n	80065b6 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	3b01      	subs	r3, #1
 80065b4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d1f9      	bne.n	80065b0 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80065bc:	e06f      	b.n	800669e <HAL_ADC_ConfigChannel+0x72e>
 80065be:	bf00      	nop
 80065c0:	407f0000 	.word	0x407f0000
 80065c4:	80080000 	.word	0x80080000
 80065c8:	50000100 	.word	0x50000100
 80065cc:	50000300 	.word	0x50000300
 80065d0:	50000700 	.word	0x50000700
 80065d4:	c3210000 	.word	0xc3210000
 80065d8:	90c00010 	.word	0x90c00010
 80065dc:	50000600 	.word	0x50000600
 80065e0:	200001c0 	.word	0x200001c0
 80065e4:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	4a32      	ldr	r2, [pc, #200]	; (80066b8 <HAL_ADC_ConfigChannel+0x748>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d125      	bne.n	800663e <HAL_ADC_ConfigChannel+0x6ce>
 80065f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80065f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d11f      	bne.n	800663e <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4a2e      	ldr	r2, [pc, #184]	; (80066bc <HAL_ADC_ConfigChannel+0x74c>)
 8006604:	4293      	cmp	r3, r2
 8006606:	d104      	bne.n	8006612 <HAL_ADC_ConfigChannel+0x6a2>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a2c      	ldr	r2, [pc, #176]	; (80066c0 <HAL_ADC_ConfigChannel+0x750>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d047      	beq.n	80066a2 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800661a:	d004      	beq.n	8006626 <HAL_ADC_ConfigChannel+0x6b6>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4a26      	ldr	r2, [pc, #152]	; (80066bc <HAL_ADC_ConfigChannel+0x74c>)
 8006622:	4293      	cmp	r3, r2
 8006624:	d101      	bne.n	800662a <HAL_ADC_ConfigChannel+0x6ba>
 8006626:	4a27      	ldr	r2, [pc, #156]	; (80066c4 <HAL_ADC_ConfigChannel+0x754>)
 8006628:	e000      	b.n	800662c <HAL_ADC_ConfigChannel+0x6bc>
 800662a:	4a27      	ldr	r2, [pc, #156]	; (80066c8 <HAL_ADC_ConfigChannel+0x758>)
 800662c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006630:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006634:	4619      	mov	r1, r3
 8006636:	4610      	mov	r0, r2
 8006638:	f7ff f92b 	bl	8005892 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800663c:	e031      	b.n	80066a2 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800663e:	683b      	ldr	r3, [r7, #0]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a22      	ldr	r2, [pc, #136]	; (80066cc <HAL_ADC_ConfigChannel+0x75c>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d12d      	bne.n	80066a4 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006648:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800664c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006650:	2b00      	cmp	r3, #0
 8006652:	d127      	bne.n	80066a4 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a18      	ldr	r2, [pc, #96]	; (80066bc <HAL_ADC_ConfigChannel+0x74c>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d022      	beq.n	80066a4 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006666:	d004      	beq.n	8006672 <HAL_ADC_ConfigChannel+0x702>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a13      	ldr	r2, [pc, #76]	; (80066bc <HAL_ADC_ConfigChannel+0x74c>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d101      	bne.n	8006676 <HAL_ADC_ConfigChannel+0x706>
 8006672:	4a14      	ldr	r2, [pc, #80]	; (80066c4 <HAL_ADC_ConfigChannel+0x754>)
 8006674:	e000      	b.n	8006678 <HAL_ADC_ConfigChannel+0x708>
 8006676:	4a14      	ldr	r2, [pc, #80]	; (80066c8 <HAL_ADC_ConfigChannel+0x758>)
 8006678:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800667c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006680:	4619      	mov	r1, r3
 8006682:	4610      	mov	r0, r2
 8006684:	f7ff f905 	bl	8005892 <LL_ADC_SetCommonPathInternalCh>
 8006688:	e00c      	b.n	80066a4 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800668e:	f043 0220 	orr.w	r2, r3, #32
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800669c:	e002      	b.n	80066a4 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800669e:	bf00      	nop
 80066a0:	e000      	b.n	80066a4 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80066a2:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	2200      	movs	r2, #0
 80066a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80066ac:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	3798      	adds	r7, #152	; 0x98
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	c7520000 	.word	0xc7520000
 80066bc:	50000100 	.word	0x50000100
 80066c0:	50000500 	.word	0x50000500
 80066c4:	50000300 	.word	0x50000300
 80066c8:	50000700 	.word	0x50000700
 80066cc:	cb840000 	.word	0xcb840000

080066d0 <LL_ADC_IsEnabled>:
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d101      	bne.n	80066e8 <LL_ADC_IsEnabled+0x18>
 80066e4:	2301      	movs	r3, #1
 80066e6:	e000      	b.n	80066ea <LL_ADC_IsEnabled+0x1a>
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <LL_ADC_REG_IsConversionOngoing>:
{
 80066f6:	b480      	push	{r7}
 80066f8:	b083      	sub	sp, #12
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f003 0304 	and.w	r3, r3, #4
 8006706:	2b04      	cmp	r3, #4
 8006708:	d101      	bne.n	800670e <LL_ADC_REG_IsConversionOngoing+0x18>
 800670a:	2301      	movs	r3, #1
 800670c:	e000      	b.n	8006710 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800671c:	b590      	push	{r4, r7, lr}
 800671e:	b0a1      	sub	sp, #132	; 0x84
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006726:	2300      	movs	r3, #0
 8006728:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006732:	2b01      	cmp	r3, #1
 8006734:	d101      	bne.n	800673a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8006736:	2302      	movs	r3, #2
 8006738:	e0e3      	b.n	8006902 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2201      	movs	r2, #1
 800673e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800674a:	d102      	bne.n	8006752 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800674c:	4b6f      	ldr	r3, [pc, #444]	; (800690c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800674e:	60bb      	str	r3, [r7, #8]
 8006750:	e009      	b.n	8006766 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4a6e      	ldr	r2, [pc, #440]	; (8006910 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d102      	bne.n	8006762 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 800675c:	4b6d      	ldr	r3, [pc, #436]	; (8006914 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800675e:	60bb      	str	r3, [r7, #8]
 8006760:	e001      	b.n	8006766 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8006762:	2300      	movs	r3, #0
 8006764:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10b      	bne.n	8006784 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006770:	f043 0220 	orr.w	r2, r3, #32
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e0be      	b.n	8006902 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	4618      	mov	r0, r3
 8006788:	f7ff ffb5 	bl	80066f6 <LL_ADC_REG_IsConversionOngoing>
 800678c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4618      	mov	r0, r3
 8006794:	f7ff ffaf 	bl	80066f6 <LL_ADC_REG_IsConversionOngoing>
 8006798:	4603      	mov	r3, r0
 800679a:	2b00      	cmp	r3, #0
 800679c:	f040 80a0 	bne.w	80068e0 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80067a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	f040 809c 	bne.w	80068e0 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067b0:	d004      	beq.n	80067bc <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a55      	ldr	r2, [pc, #340]	; (800690c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d101      	bne.n	80067c0 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 80067bc:	4b56      	ldr	r3, [pc, #344]	; (8006918 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80067be:	e000      	b.n	80067c2 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 80067c0:	4b56      	ldr	r3, [pc, #344]	; (800691c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80067c2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d04b      	beq.n	8006864 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80067cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067ce:	689b      	ldr	r3, [r3, #8]
 80067d0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	6859      	ldr	r1, [r3, #4]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80067de:	035b      	lsls	r3, r3, #13
 80067e0:	430b      	orrs	r3, r1
 80067e2:	431a      	orrs	r2, r3
 80067e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80067e6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80067f0:	d004      	beq.n	80067fc <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a45      	ldr	r2, [pc, #276]	; (800690c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80067f8:	4293      	cmp	r3, r2
 80067fa:	d10f      	bne.n	800681c <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80067fc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006800:	f7ff ff66 	bl	80066d0 <LL_ADC_IsEnabled>
 8006804:	4604      	mov	r4, r0
 8006806:	4841      	ldr	r0, [pc, #260]	; (800690c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8006808:	f7ff ff62 	bl	80066d0 <LL_ADC_IsEnabled>
 800680c:	4603      	mov	r3, r0
 800680e:	4323      	orrs	r3, r4
 8006810:	2b00      	cmp	r3, #0
 8006812:	bf0c      	ite	eq
 8006814:	2301      	moveq	r3, #1
 8006816:	2300      	movne	r3, #0
 8006818:	b2db      	uxtb	r3, r3
 800681a:	e012      	b.n	8006842 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800681c:	483c      	ldr	r0, [pc, #240]	; (8006910 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800681e:	f7ff ff57 	bl	80066d0 <LL_ADC_IsEnabled>
 8006822:	4604      	mov	r4, r0
 8006824:	483b      	ldr	r0, [pc, #236]	; (8006914 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8006826:	f7ff ff53 	bl	80066d0 <LL_ADC_IsEnabled>
 800682a:	4603      	mov	r3, r0
 800682c:	431c      	orrs	r4, r3
 800682e:	483c      	ldr	r0, [pc, #240]	; (8006920 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8006830:	f7ff ff4e 	bl	80066d0 <LL_ADC_IsEnabled>
 8006834:	4603      	mov	r3, r0
 8006836:	4323      	orrs	r3, r4
 8006838:	2b00      	cmp	r3, #0
 800683a:	bf0c      	ite	eq
 800683c:	2301      	moveq	r3, #1
 800683e:	2300      	movne	r3, #0
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d056      	beq.n	80068f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8006846:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800684e:	f023 030f 	bic.w	r3, r3, #15
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	6811      	ldr	r1, [r2, #0]
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	6892      	ldr	r2, [r2, #8]
 800685a:	430a      	orrs	r2, r1
 800685c:	431a      	orrs	r2, r3
 800685e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006860:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8006862:	e047      	b.n	80068f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8006864:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006866:	689b      	ldr	r3, [r3, #8]
 8006868:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800686c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800686e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006878:	d004      	beq.n	8006884 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4a23      	ldr	r2, [pc, #140]	; (800690c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8006880:	4293      	cmp	r3, r2
 8006882:	d10f      	bne.n	80068a4 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8006884:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006888:	f7ff ff22 	bl	80066d0 <LL_ADC_IsEnabled>
 800688c:	4604      	mov	r4, r0
 800688e:	481f      	ldr	r0, [pc, #124]	; (800690c <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8006890:	f7ff ff1e 	bl	80066d0 <LL_ADC_IsEnabled>
 8006894:	4603      	mov	r3, r0
 8006896:	4323      	orrs	r3, r4
 8006898:	2b00      	cmp	r3, #0
 800689a:	bf0c      	ite	eq
 800689c:	2301      	moveq	r3, #1
 800689e:	2300      	movne	r3, #0
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	e012      	b.n	80068ca <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 80068a4:	481a      	ldr	r0, [pc, #104]	; (8006910 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80068a6:	f7ff ff13 	bl	80066d0 <LL_ADC_IsEnabled>
 80068aa:	4604      	mov	r4, r0
 80068ac:	4819      	ldr	r0, [pc, #100]	; (8006914 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80068ae:	f7ff ff0f 	bl	80066d0 <LL_ADC_IsEnabled>
 80068b2:	4603      	mov	r3, r0
 80068b4:	431c      	orrs	r4, r3
 80068b6:	481a      	ldr	r0, [pc, #104]	; (8006920 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80068b8:	f7ff ff0a 	bl	80066d0 <LL_ADC_IsEnabled>
 80068bc:	4603      	mov	r3, r0
 80068be:	4323      	orrs	r3, r4
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	bf0c      	ite	eq
 80068c4:	2301      	moveq	r3, #1
 80068c6:	2300      	movne	r3, #0
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d012      	beq.n	80068f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80068ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80068d6:	f023 030f 	bic.w	r3, r3, #15
 80068da:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80068dc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80068de:	e009      	b.n	80068f4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80068e4:	f043 0220 	orr.w	r2, r3, #32
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80068ec:	2301      	movs	r3, #1
 80068ee:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80068f2:	e000      	b.n	80068f6 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80068f4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80068fe:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8006902:	4618      	mov	r0, r3
 8006904:	3784      	adds	r7, #132	; 0x84
 8006906:	46bd      	mov	sp, r7
 8006908:	bd90      	pop	{r4, r7, pc}
 800690a:	bf00      	nop
 800690c:	50000100 	.word	0x50000100
 8006910:	50000400 	.word	0x50000400
 8006914:	50000500 	.word	0x50000500
 8006918:	50000300 	.word	0x50000300
 800691c:	50000700 	.word	0x50000700
 8006920:	50000600 	.word	0x50000600

08006924 <LL_EXTI_EnableIT_0_31>:
{
 8006924:	b480      	push	{r7}
 8006926:	b083      	sub	sp, #12
 8006928:	af00      	add	r7, sp, #0
 800692a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800692c:	4b05      	ldr	r3, [pc, #20]	; (8006944 <LL_EXTI_EnableIT_0_31+0x20>)
 800692e:	681a      	ldr	r2, [r3, #0]
 8006930:	4904      	ldr	r1, [pc, #16]	; (8006944 <LL_EXTI_EnableIT_0_31+0x20>)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4313      	orrs	r3, r2
 8006936:	600b      	str	r3, [r1, #0]
}
 8006938:	bf00      	nop
 800693a:	370c      	adds	r7, #12
 800693c:	46bd      	mov	sp, r7
 800693e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006942:	4770      	bx	lr
 8006944:	40010400 	.word	0x40010400

08006948 <LL_EXTI_EnableIT_32_63>:
{
 8006948:	b480      	push	{r7}
 800694a:	b083      	sub	sp, #12
 800694c:	af00      	add	r7, sp, #0
 800694e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8006950:	4b05      	ldr	r3, [pc, #20]	; (8006968 <LL_EXTI_EnableIT_32_63+0x20>)
 8006952:	6a1a      	ldr	r2, [r3, #32]
 8006954:	4904      	ldr	r1, [pc, #16]	; (8006968 <LL_EXTI_EnableIT_32_63+0x20>)
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4313      	orrs	r3, r2
 800695a:	620b      	str	r3, [r1, #32]
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr
 8006968:	40010400 	.word	0x40010400

0800696c <LL_EXTI_DisableIT_0_31>:
{
 800696c:	b480      	push	{r7}
 800696e:	b083      	sub	sp, #12
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8006974:	4b06      	ldr	r3, [pc, #24]	; (8006990 <LL_EXTI_DisableIT_0_31+0x24>)
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	43db      	mvns	r3, r3
 800697c:	4904      	ldr	r1, [pc, #16]	; (8006990 <LL_EXTI_DisableIT_0_31+0x24>)
 800697e:	4013      	ands	r3, r2
 8006980:	600b      	str	r3, [r1, #0]
}
 8006982:	bf00      	nop
 8006984:	370c      	adds	r7, #12
 8006986:	46bd      	mov	sp, r7
 8006988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	40010400 	.word	0x40010400

08006994 <LL_EXTI_DisableIT_32_63>:
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800699c:	4b06      	ldr	r3, [pc, #24]	; (80069b8 <LL_EXTI_DisableIT_32_63+0x24>)
 800699e:	6a1a      	ldr	r2, [r3, #32]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	43db      	mvns	r3, r3
 80069a4:	4904      	ldr	r1, [pc, #16]	; (80069b8 <LL_EXTI_DisableIT_32_63+0x24>)
 80069a6:	4013      	ands	r3, r2
 80069a8:	620b      	str	r3, [r1, #32]
}
 80069aa:	bf00      	nop
 80069ac:	370c      	adds	r7, #12
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	40010400 	.word	0x40010400

080069bc <LL_EXTI_EnableEvent_0_31>:
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80069c4:	4b05      	ldr	r3, [pc, #20]	; (80069dc <LL_EXTI_EnableEvent_0_31+0x20>)
 80069c6:	685a      	ldr	r2, [r3, #4]
 80069c8:	4904      	ldr	r1, [pc, #16]	; (80069dc <LL_EXTI_EnableEvent_0_31+0x20>)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	4313      	orrs	r3, r2
 80069ce:	604b      	str	r3, [r1, #4]
}
 80069d0:	bf00      	nop
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	40010400 	.word	0x40010400

080069e0 <LL_EXTI_EnableEvent_32_63>:
{
 80069e0:	b480      	push	{r7}
 80069e2:	b083      	sub	sp, #12
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80069e8:	4b05      	ldr	r3, [pc, #20]	; (8006a00 <LL_EXTI_EnableEvent_32_63+0x20>)
 80069ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80069ec:	4904      	ldr	r1, [pc, #16]	; (8006a00 <LL_EXTI_EnableEvent_32_63+0x20>)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	4313      	orrs	r3, r2
 80069f2:	624b      	str	r3, [r1, #36]	; 0x24
}
 80069f4:	bf00      	nop
 80069f6:	370c      	adds	r7, #12
 80069f8:	46bd      	mov	sp, r7
 80069fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fe:	4770      	bx	lr
 8006a00:	40010400 	.word	0x40010400

08006a04 <LL_EXTI_DisableEvent_0_31>:
{
 8006a04:	b480      	push	{r7}
 8006a06:	b083      	sub	sp, #12
 8006a08:	af00      	add	r7, sp, #0
 8006a0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8006a0c:	4b06      	ldr	r3, [pc, #24]	; (8006a28 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006a0e:	685a      	ldr	r2, [r3, #4]
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	43db      	mvns	r3, r3
 8006a14:	4904      	ldr	r1, [pc, #16]	; (8006a28 <LL_EXTI_DisableEvent_0_31+0x24>)
 8006a16:	4013      	ands	r3, r2
 8006a18:	604b      	str	r3, [r1, #4]
}
 8006a1a:	bf00      	nop
 8006a1c:	370c      	adds	r7, #12
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	40010400 	.word	0x40010400

08006a2c <LL_EXTI_DisableEvent_32_63>:
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b083      	sub	sp, #12
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8006a34:	4b06      	ldr	r3, [pc, #24]	; (8006a50 <LL_EXTI_DisableEvent_32_63+0x24>)
 8006a36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	43db      	mvns	r3, r3
 8006a3c:	4904      	ldr	r1, [pc, #16]	; (8006a50 <LL_EXTI_DisableEvent_32_63+0x24>)
 8006a3e:	4013      	ands	r3, r2
 8006a40:	624b      	str	r3, [r1, #36]	; 0x24
}
 8006a42:	bf00      	nop
 8006a44:	370c      	adds	r7, #12
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	40010400 	.word	0x40010400

08006a54 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8006a5c:	4b05      	ldr	r3, [pc, #20]	; (8006a74 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006a5e:	689a      	ldr	r2, [r3, #8]
 8006a60:	4904      	ldr	r1, [pc, #16]	; (8006a74 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4313      	orrs	r3, r2
 8006a66:	608b      	str	r3, [r1, #8]
}
 8006a68:	bf00      	nop
 8006a6a:	370c      	adds	r7, #12
 8006a6c:	46bd      	mov	sp, r7
 8006a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a72:	4770      	bx	lr
 8006a74:	40010400 	.word	0x40010400

08006a78 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8006a80:	4b05      	ldr	r3, [pc, #20]	; (8006a98 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006a82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006a84:	4904      	ldr	r1, [pc, #16]	; (8006a98 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	628b      	str	r3, [r1, #40]	; 0x28
}
 8006a8c:	bf00      	nop
 8006a8e:	370c      	adds	r7, #12
 8006a90:	46bd      	mov	sp, r7
 8006a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a96:	4770      	bx	lr
 8006a98:	40010400 	.word	0x40010400

08006a9c <LL_EXTI_DisableRisingTrig_0_31>:
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b083      	sub	sp, #12
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8006aa4:	4b06      	ldr	r3, [pc, #24]	; (8006ac0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006aa6:	689a      	ldr	r2, [r3, #8]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	43db      	mvns	r3, r3
 8006aac:	4904      	ldr	r1, [pc, #16]	; (8006ac0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8006aae:	4013      	ands	r3, r2
 8006ab0:	608b      	str	r3, [r1, #8]
}
 8006ab2:	bf00      	nop
 8006ab4:	370c      	adds	r7, #12
 8006ab6:	46bd      	mov	sp, r7
 8006ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop
 8006ac0:	40010400 	.word	0x40010400

08006ac4 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8006acc:	4b06      	ldr	r3, [pc, #24]	; (8006ae8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006ace:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	43db      	mvns	r3, r3
 8006ad4:	4904      	ldr	r1, [pc, #16]	; (8006ae8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8006ad6:	4013      	ands	r3, r2
 8006ad8:	628b      	str	r3, [r1, #40]	; 0x28
}
 8006ada:	bf00      	nop
 8006adc:	370c      	adds	r7, #12
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	40010400 	.word	0x40010400

08006aec <LL_EXTI_EnableFallingTrig_0_31>:
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8006af4:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006af6:	68da      	ldr	r2, [r3, #12]
 8006af8:	4904      	ldr	r1, [pc, #16]	; (8006b0c <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	60cb      	str	r3, [r1, #12]
}
 8006b00:	bf00      	nop
 8006b02:	370c      	adds	r7, #12
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr
 8006b0c:	40010400 	.word	0x40010400

08006b10 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8006b18:	4b05      	ldr	r3, [pc, #20]	; (8006b30 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b1c:	4904      	ldr	r1, [pc, #16]	; (8006b30 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	4313      	orrs	r3, r2
 8006b22:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr
 8006b30:	40010400 	.word	0x40010400

08006b34 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8006b3c:	4b06      	ldr	r3, [pc, #24]	; (8006b58 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006b3e:	68da      	ldr	r2, [r3, #12]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	43db      	mvns	r3, r3
 8006b44:	4904      	ldr	r1, [pc, #16]	; (8006b58 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8006b46:	4013      	ands	r3, r2
 8006b48:	60cb      	str	r3, [r1, #12]
}
 8006b4a:	bf00      	nop
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	40010400 	.word	0x40010400

08006b5c <LL_EXTI_DisableFallingTrig_32_63>:
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8006b64:	4b06      	ldr	r3, [pc, #24]	; (8006b80 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8006b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	43db      	mvns	r3, r3
 8006b6c:	4904      	ldr	r1, [pc, #16]	; (8006b80 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8006b6e:	4013      	ands	r3, r2
 8006b70:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8006b72:	bf00      	nop
 8006b74:	370c      	adds	r7, #12
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr
 8006b7e:	bf00      	nop
 8006b80:	40010400 	.word	0x40010400

08006b84 <LL_EXTI_ClearFlag_0_31>:
{
 8006b84:	b480      	push	{r7}
 8006b86:	b083      	sub	sp, #12
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8006b8c:	4a04      	ldr	r2, [pc, #16]	; (8006ba0 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6153      	str	r3, [r2, #20]
}
 8006b92:	bf00      	nop
 8006b94:	370c      	adds	r7, #12
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	40010400 	.word	0x40010400

08006ba4 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8006bac:	4a04      	ldr	r2, [pc, #16]	; (8006bc0 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6353      	str	r3, [r2, #52]	; 0x34
}
 8006bb2:	bf00      	nop
 8006bb4:	370c      	adds	r7, #12
 8006bb6:	46bd      	mov	sp, r7
 8006bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbc:	4770      	bx	lr
 8006bbe:	bf00      	nop
 8006bc0:	40010400 	.word	0x40010400

08006bc4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b088      	sub	sp, #32
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d102      	bne.n	8006be0 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	77fb      	strb	r3, [r7, #31]
 8006bde:	e180      	b.n	8006ee2 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006bea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006bee:	d102      	bne.n	8006bf6 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	77fb      	strb	r3, [r7, #31]
 8006bf4:	e175      	b.n	8006ee2 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	7f5b      	ldrb	r3, [r3, #29]
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d108      	bne.n	8006c12 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2200      	movs	r2, #0
 8006c04:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7fd f8b9 	bl	8003d84 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c1c:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	685b      	ldr	r3, [r3, #4]
 8006c26:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	695b      	ldr	r3, [r3, #20]
 8006c2c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	681a      	ldr	r2, [r3, #0]
 8006c42:	4b98      	ldr	r3, [pc, #608]	; (8006ea4 <HAL_COMP_Init+0x2e0>)
 8006c44:	4013      	ands	r3, r2
 8006c46:	687a      	ldr	r2, [r7, #4]
 8006c48:	6812      	ldr	r2, [r2, #0]
 8006c4a:	6979      	ldr	r1, [r7, #20]
 8006c4c:	430b      	orrs	r3, r1
 8006c4e:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d015      	beq.n	8006c8a <HAL_COMP_Init+0xc6>
 8006c5e:	69bb      	ldr	r3, [r7, #24]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d112      	bne.n	8006c8a <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8006c64:	4b90      	ldr	r3, [pc, #576]	; (8006ea8 <HAL_COMP_Init+0x2e4>)
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	099b      	lsrs	r3, r3, #6
 8006c6a:	4a90      	ldr	r2, [pc, #576]	; (8006eac <HAL_COMP_Init+0x2e8>)
 8006c6c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c70:	099a      	lsrs	r2, r3, #6
 8006c72:	4613      	mov	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4413      	add	r3, r2
 8006c78:	009b      	lsls	r3, r3, #2
 8006c7a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8006c7c:	e002      	b.n	8006c84 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	3b01      	subs	r3, #1
 8006c82:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d1f9      	bne.n	8006c7e <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a88      	ldr	r2, [pc, #544]	; (8006eb0 <HAL_COMP_Init+0x2ec>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d028      	beq.n	8006ce6 <HAL_COMP_Init+0x122>
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a86      	ldr	r2, [pc, #536]	; (8006eb4 <HAL_COMP_Init+0x2f0>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d020      	beq.n	8006ce0 <HAL_COMP_Init+0x11c>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4a85      	ldr	r2, [pc, #532]	; (8006eb8 <HAL_COMP_Init+0x2f4>)
 8006ca4:	4293      	cmp	r3, r2
 8006ca6:	d018      	beq.n	8006cda <HAL_COMP_Init+0x116>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	4a83      	ldr	r2, [pc, #524]	; (8006ebc <HAL_COMP_Init+0x2f8>)
 8006cae:	4293      	cmp	r3, r2
 8006cb0:	d010      	beq.n	8006cd4 <HAL_COMP_Init+0x110>
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	4a82      	ldr	r2, [pc, #520]	; (8006ec0 <HAL_COMP_Init+0x2fc>)
 8006cb8:	4293      	cmp	r3, r2
 8006cba:	d008      	beq.n	8006cce <HAL_COMP_Init+0x10a>
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a80      	ldr	r2, [pc, #512]	; (8006ec4 <HAL_COMP_Init+0x300>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d101      	bne.n	8006cca <HAL_COMP_Init+0x106>
 8006cc6:	2301      	movs	r3, #1
 8006cc8:	e00f      	b.n	8006cea <HAL_COMP_Init+0x126>
 8006cca:	2302      	movs	r3, #2
 8006ccc:	e00d      	b.n	8006cea <HAL_COMP_Init+0x126>
 8006cce:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8006cd2:	e00a      	b.n	8006cea <HAL_COMP_Init+0x126>
 8006cd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8006cd8:	e007      	b.n	8006cea <HAL_COMP_Init+0x126>
 8006cda:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8006cde:	e004      	b.n	8006cea <HAL_COMP_Init+0x126>
 8006ce0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006ce4:	e001      	b.n	8006cea <HAL_COMP_Init+0x126>
 8006ce6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006cea:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	699b      	ldr	r3, [r3, #24]
 8006cf0:	f003 0303 	and.w	r3, r3, #3
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f000 80b6 	beq.w	8006e66 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	699b      	ldr	r3, [r3, #24]
 8006cfe:	f003 0310 	and.w	r3, r3, #16
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d011      	beq.n	8006d2a <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	4a6e      	ldr	r2, [pc, #440]	; (8006ec4 <HAL_COMP_Init+0x300>)
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d004      	beq.n	8006d1a <HAL_COMP_Init+0x156>
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a6c      	ldr	r2, [pc, #432]	; (8006ec8 <HAL_COMP_Init+0x304>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d103      	bne.n	8006d22 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8006d1a:	6938      	ldr	r0, [r7, #16]
 8006d1c:	f7ff feac 	bl	8006a78 <LL_EXTI_EnableRisingTrig_32_63>
 8006d20:	e014      	b.n	8006d4c <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8006d22:	6938      	ldr	r0, [r7, #16]
 8006d24:	f7ff fe96 	bl	8006a54 <LL_EXTI_EnableRisingTrig_0_31>
 8006d28:	e010      	b.n	8006d4c <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a65      	ldr	r2, [pc, #404]	; (8006ec4 <HAL_COMP_Init+0x300>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d004      	beq.n	8006d3e <HAL_COMP_Init+0x17a>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a63      	ldr	r2, [pc, #396]	; (8006ec8 <HAL_COMP_Init+0x304>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d103      	bne.n	8006d46 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8006d3e:	6938      	ldr	r0, [r7, #16]
 8006d40:	f7ff fec0 	bl	8006ac4 <LL_EXTI_DisableRisingTrig_32_63>
 8006d44:	e002      	b.n	8006d4c <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8006d46:	6938      	ldr	r0, [r7, #16]
 8006d48:	f7ff fea8 	bl	8006a9c <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	699b      	ldr	r3, [r3, #24]
 8006d50:	f003 0320 	and.w	r3, r3, #32
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d011      	beq.n	8006d7c <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	4a59      	ldr	r2, [pc, #356]	; (8006ec4 <HAL_COMP_Init+0x300>)
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d004      	beq.n	8006d6c <HAL_COMP_Init+0x1a8>
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	4a58      	ldr	r2, [pc, #352]	; (8006ec8 <HAL_COMP_Init+0x304>)
 8006d68:	4293      	cmp	r3, r2
 8006d6a:	d103      	bne.n	8006d74 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8006d6c:	6938      	ldr	r0, [r7, #16]
 8006d6e:	f7ff fecf 	bl	8006b10 <LL_EXTI_EnableFallingTrig_32_63>
 8006d72:	e014      	b.n	8006d9e <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8006d74:	6938      	ldr	r0, [r7, #16]
 8006d76:	f7ff feb9 	bl	8006aec <LL_EXTI_EnableFallingTrig_0_31>
 8006d7a:	e010      	b.n	8006d9e <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	4a50      	ldr	r2, [pc, #320]	; (8006ec4 <HAL_COMP_Init+0x300>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d004      	beq.n	8006d90 <HAL_COMP_Init+0x1cc>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	4a4f      	ldr	r2, [pc, #316]	; (8006ec8 <HAL_COMP_Init+0x304>)
 8006d8c:	4293      	cmp	r3, r2
 8006d8e:	d103      	bne.n	8006d98 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8006d90:	6938      	ldr	r0, [r7, #16]
 8006d92:	f7ff fee3 	bl	8006b5c <LL_EXTI_DisableFallingTrig_32_63>
 8006d96:	e002      	b.n	8006d9e <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8006d98:	6938      	ldr	r0, [r7, #16]
 8006d9a:	f7ff fecb 	bl	8006b34 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	4a48      	ldr	r2, [pc, #288]	; (8006ec4 <HAL_COMP_Init+0x300>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d004      	beq.n	8006db2 <HAL_COMP_Init+0x1ee>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a46      	ldr	r2, [pc, #280]	; (8006ec8 <HAL_COMP_Init+0x304>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d103      	bne.n	8006dba <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8006db2:	6938      	ldr	r0, [r7, #16]
 8006db4:	f7ff fef6 	bl	8006ba4 <LL_EXTI_ClearFlag_32_63>
 8006db8:	e002      	b.n	8006dc0 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8006dba:	6938      	ldr	r0, [r7, #16]
 8006dbc:	f7ff fee2 	bl	8006b84 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	699b      	ldr	r3, [r3, #24]
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d011      	beq.n	8006df0 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	4a3c      	ldr	r2, [pc, #240]	; (8006ec4 <HAL_COMP_Init+0x300>)
 8006dd2:	4293      	cmp	r3, r2
 8006dd4:	d004      	beq.n	8006de0 <HAL_COMP_Init+0x21c>
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	4a3b      	ldr	r2, [pc, #236]	; (8006ec8 <HAL_COMP_Init+0x304>)
 8006ddc:	4293      	cmp	r3, r2
 8006dde:	d103      	bne.n	8006de8 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8006de0:	6938      	ldr	r0, [r7, #16]
 8006de2:	f7ff fdfd 	bl	80069e0 <LL_EXTI_EnableEvent_32_63>
 8006de6:	e014      	b.n	8006e12 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8006de8:	6938      	ldr	r0, [r7, #16]
 8006dea:	f7ff fde7 	bl	80069bc <LL_EXTI_EnableEvent_0_31>
 8006dee:	e010      	b.n	8006e12 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4a33      	ldr	r2, [pc, #204]	; (8006ec4 <HAL_COMP_Init+0x300>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d004      	beq.n	8006e04 <HAL_COMP_Init+0x240>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a32      	ldr	r2, [pc, #200]	; (8006ec8 <HAL_COMP_Init+0x304>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d103      	bne.n	8006e0c <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8006e04:	6938      	ldr	r0, [r7, #16]
 8006e06:	f7ff fe11 	bl	8006a2c <LL_EXTI_DisableEvent_32_63>
 8006e0a:	e002      	b.n	8006e12 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8006e0c:	6938      	ldr	r0, [r7, #16]
 8006e0e:	f7ff fdf9 	bl	8006a04 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	699b      	ldr	r3, [r3, #24]
 8006e16:	f003 0301 	and.w	r3, r3, #1
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d011      	beq.n	8006e42 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a28      	ldr	r2, [pc, #160]	; (8006ec4 <HAL_COMP_Init+0x300>)
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d004      	beq.n	8006e32 <HAL_COMP_Init+0x26e>
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	4a26      	ldr	r2, [pc, #152]	; (8006ec8 <HAL_COMP_Init+0x304>)
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d103      	bne.n	8006e3a <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8006e32:	6938      	ldr	r0, [r7, #16]
 8006e34:	f7ff fd88 	bl	8006948 <LL_EXTI_EnableIT_32_63>
 8006e38:	e04b      	b.n	8006ed2 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8006e3a:	6938      	ldr	r0, [r7, #16]
 8006e3c:	f7ff fd72 	bl	8006924 <LL_EXTI_EnableIT_0_31>
 8006e40:	e047      	b.n	8006ed2 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a1f      	ldr	r2, [pc, #124]	; (8006ec4 <HAL_COMP_Init+0x300>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d004      	beq.n	8006e56 <HAL_COMP_Init+0x292>
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	4a1d      	ldr	r2, [pc, #116]	; (8006ec8 <HAL_COMP_Init+0x304>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d103      	bne.n	8006e5e <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8006e56:	6938      	ldr	r0, [r7, #16]
 8006e58:	f7ff fd9c 	bl	8006994 <LL_EXTI_DisableIT_32_63>
 8006e5c:	e039      	b.n	8006ed2 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8006e5e:	6938      	ldr	r0, [r7, #16]
 8006e60:	f7ff fd84 	bl	800696c <LL_EXTI_DisableIT_0_31>
 8006e64:	e035      	b.n	8006ed2 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	4a16      	ldr	r2, [pc, #88]	; (8006ec4 <HAL_COMP_Init+0x300>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d004      	beq.n	8006e7a <HAL_COMP_Init+0x2b6>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	4a14      	ldr	r2, [pc, #80]	; (8006ec8 <HAL_COMP_Init+0x304>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d103      	bne.n	8006e82 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8006e7a:	6938      	ldr	r0, [r7, #16]
 8006e7c:	f7ff fdd6 	bl	8006a2c <LL_EXTI_DisableEvent_32_63>
 8006e80:	e002      	b.n	8006e88 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8006e82:	6938      	ldr	r0, [r7, #16]
 8006e84:	f7ff fdbe 	bl	8006a04 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a0d      	ldr	r2, [pc, #52]	; (8006ec4 <HAL_COMP_Init+0x300>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d004      	beq.n	8006e9c <HAL_COMP_Init+0x2d8>
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	4a0c      	ldr	r2, [pc, #48]	; (8006ec8 <HAL_COMP_Init+0x304>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d117      	bne.n	8006ecc <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8006e9c:	6938      	ldr	r0, [r7, #16]
 8006e9e:	f7ff fd79 	bl	8006994 <LL_EXTI_DisableIT_32_63>
 8006ea2:	e016      	b.n	8006ed2 <HAL_COMP_Init+0x30e>
 8006ea4:	ff007e0f 	.word	0xff007e0f
 8006ea8:	200001c0 	.word	0x200001c0
 8006eac:	053e2d63 	.word	0x053e2d63
 8006eb0:	40010200 	.word	0x40010200
 8006eb4:	40010204 	.word	0x40010204
 8006eb8:	40010208 	.word	0x40010208
 8006ebc:	4001020c 	.word	0x4001020c
 8006ec0:	40010210 	.word	0x40010210
 8006ec4:	40010214 	.word	0x40010214
 8006ec8:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8006ecc:	6938      	ldr	r0, [r7, #16]
 8006ece:	f7ff fd4d 	bl	800696c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	7f5b      	ldrb	r3, [r3, #29]
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d102      	bne.n	8006ee2 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8006ee2:	7ffb      	ldrb	r3, [r7, #31]
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3720      	adds	r7, #32
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}

08006eec <__NVIC_SetPriorityGrouping>:
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f003 0307 	and.w	r3, r3, #7
 8006efa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006efc:	4b0c      	ldr	r3, [pc, #48]	; (8006f30 <__NVIC_SetPriorityGrouping+0x44>)
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006f02:	68ba      	ldr	r2, [r7, #8]
 8006f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006f08:	4013      	ands	r3, r2
 8006f0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006f1e:	4a04      	ldr	r2, [pc, #16]	; (8006f30 <__NVIC_SetPriorityGrouping+0x44>)
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	60d3      	str	r3, [r2, #12]
}
 8006f24:	bf00      	nop
 8006f26:	3714      	adds	r7, #20
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2e:	4770      	bx	lr
 8006f30:	e000ed00 	.word	0xe000ed00

08006f34 <__NVIC_GetPriorityGrouping>:
{
 8006f34:	b480      	push	{r7}
 8006f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006f38:	4b04      	ldr	r3, [pc, #16]	; (8006f4c <__NVIC_GetPriorityGrouping+0x18>)
 8006f3a:	68db      	ldr	r3, [r3, #12]
 8006f3c:	0a1b      	lsrs	r3, r3, #8
 8006f3e:	f003 0307 	and.w	r3, r3, #7
}
 8006f42:	4618      	mov	r0, r3
 8006f44:	46bd      	mov	sp, r7
 8006f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4a:	4770      	bx	lr
 8006f4c:	e000ed00 	.word	0xe000ed00

08006f50 <__NVIC_EnableIRQ>:
{
 8006f50:	b480      	push	{r7}
 8006f52:	b083      	sub	sp, #12
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	4603      	mov	r3, r0
 8006f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	db0b      	blt.n	8006f7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006f62:	79fb      	ldrb	r3, [r7, #7]
 8006f64:	f003 021f 	and.w	r2, r3, #31
 8006f68:	4907      	ldr	r1, [pc, #28]	; (8006f88 <__NVIC_EnableIRQ+0x38>)
 8006f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f6e:	095b      	lsrs	r3, r3, #5
 8006f70:	2001      	movs	r0, #1
 8006f72:	fa00 f202 	lsl.w	r2, r0, r2
 8006f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006f7a:	bf00      	nop
 8006f7c:	370c      	adds	r7, #12
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	e000e100 	.word	0xe000e100

08006f8c <__NVIC_SetPriority>:
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	4603      	mov	r3, r0
 8006f94:	6039      	str	r1, [r7, #0]
 8006f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	db0a      	blt.n	8006fb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	b2da      	uxtb	r2, r3
 8006fa4:	490c      	ldr	r1, [pc, #48]	; (8006fd8 <__NVIC_SetPriority+0x4c>)
 8006fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006faa:	0112      	lsls	r2, r2, #4
 8006fac:	b2d2      	uxtb	r2, r2
 8006fae:	440b      	add	r3, r1
 8006fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006fb4:	e00a      	b.n	8006fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	b2da      	uxtb	r2, r3
 8006fba:	4908      	ldr	r1, [pc, #32]	; (8006fdc <__NVIC_SetPriority+0x50>)
 8006fbc:	79fb      	ldrb	r3, [r7, #7]
 8006fbe:	f003 030f 	and.w	r3, r3, #15
 8006fc2:	3b04      	subs	r3, #4
 8006fc4:	0112      	lsls	r2, r2, #4
 8006fc6:	b2d2      	uxtb	r2, r2
 8006fc8:	440b      	add	r3, r1
 8006fca:	761a      	strb	r2, [r3, #24]
}
 8006fcc:	bf00      	nop
 8006fce:	370c      	adds	r7, #12
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr
 8006fd8:	e000e100 	.word	0xe000e100
 8006fdc:	e000ed00 	.word	0xe000ed00

08006fe0 <NVIC_EncodePriority>:
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b089      	sub	sp, #36	; 0x24
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	60f8      	str	r0, [r7, #12]
 8006fe8:	60b9      	str	r1, [r7, #8]
 8006fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	f003 0307 	and.w	r3, r3, #7
 8006ff2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006ff4:	69fb      	ldr	r3, [r7, #28]
 8006ff6:	f1c3 0307 	rsb	r3, r3, #7
 8006ffa:	2b04      	cmp	r3, #4
 8006ffc:	bf28      	it	cs
 8006ffe:	2304      	movcs	r3, #4
 8007000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007002:	69fb      	ldr	r3, [r7, #28]
 8007004:	3304      	adds	r3, #4
 8007006:	2b06      	cmp	r3, #6
 8007008:	d902      	bls.n	8007010 <NVIC_EncodePriority+0x30>
 800700a:	69fb      	ldr	r3, [r7, #28]
 800700c:	3b03      	subs	r3, #3
 800700e:	e000      	b.n	8007012 <NVIC_EncodePriority+0x32>
 8007010:	2300      	movs	r3, #0
 8007012:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007014:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	fa02 f303 	lsl.w	r3, r2, r3
 800701e:	43da      	mvns	r2, r3
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	401a      	ands	r2, r3
 8007024:	697b      	ldr	r3, [r7, #20]
 8007026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007028:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	fa01 f303 	lsl.w	r3, r1, r3
 8007032:	43d9      	mvns	r1, r3
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007038:	4313      	orrs	r3, r2
}
 800703a:	4618      	mov	r0, r3
 800703c:	3724      	adds	r7, #36	; 0x24
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
	...

08007048 <SysTick_Config>:
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	3b01      	subs	r3, #1
 8007054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007058:	d301      	bcc.n	800705e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800705a:	2301      	movs	r3, #1
 800705c:	e00f      	b.n	800707e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800705e:	4a0a      	ldr	r2, [pc, #40]	; (8007088 <SysTick_Config+0x40>)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	3b01      	subs	r3, #1
 8007064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007066:	210f      	movs	r1, #15
 8007068:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800706c:	f7ff ff8e 	bl	8006f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007070:	4b05      	ldr	r3, [pc, #20]	; (8007088 <SysTick_Config+0x40>)
 8007072:	2200      	movs	r2, #0
 8007074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007076:	4b04      	ldr	r3, [pc, #16]	; (8007088 <SysTick_Config+0x40>)
 8007078:	2207      	movs	r2, #7
 800707a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800707c:	2300      	movs	r3, #0
}
 800707e:	4618      	mov	r0, r3
 8007080:	3708      	adds	r7, #8
 8007082:	46bd      	mov	sp, r7
 8007084:	bd80      	pop	{r7, pc}
 8007086:	bf00      	nop
 8007088:	e000e010 	.word	0xe000e010

0800708c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af00      	add	r7, sp, #0
 8007092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007094:	6878      	ldr	r0, [r7, #4]
 8007096:	f7ff ff29 	bl	8006eec <__NVIC_SetPriorityGrouping>
}
 800709a:	bf00      	nop
 800709c:	3708      	adds	r7, #8
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b086      	sub	sp, #24
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	4603      	mov	r3, r0
 80070aa:	60b9      	str	r1, [r7, #8]
 80070ac:	607a      	str	r2, [r7, #4]
 80070ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80070b0:	f7ff ff40 	bl	8006f34 <__NVIC_GetPriorityGrouping>
 80070b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80070b6:	687a      	ldr	r2, [r7, #4]
 80070b8:	68b9      	ldr	r1, [r7, #8]
 80070ba:	6978      	ldr	r0, [r7, #20]
 80070bc:	f7ff ff90 	bl	8006fe0 <NVIC_EncodePriority>
 80070c0:	4602      	mov	r2, r0
 80070c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80070c6:	4611      	mov	r1, r2
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7ff ff5f 	bl	8006f8c <__NVIC_SetPriority>
}
 80070ce:	bf00      	nop
 80070d0:	3718      	adds	r7, #24
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}

080070d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80070d6:	b580      	push	{r7, lr}
 80070d8:	b082      	sub	sp, #8
 80070da:	af00      	add	r7, sp, #0
 80070dc:	4603      	mov	r3, r0
 80070de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80070e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7ff ff33 	bl	8006f50 <__NVIC_EnableIRQ>
}
 80070ea:	bf00      	nop
 80070ec:	3708      	adds	r7, #8
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bd80      	pop	{r7, pc}

080070f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80070f2:	b580      	push	{r7, lr}
 80070f4:	b082      	sub	sp, #8
 80070f6:	af00      	add	r7, sp, #0
 80070f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80070fa:	6878      	ldr	r0, [r7, #4]
 80070fc:	f7ff ffa4 	bl	8007048 <SysTick_Config>
 8007100:	4603      	mov	r3, r0
}
 8007102:	4618      	mov	r0, r3
 8007104:	3708      	adds	r7, #8
 8007106:	46bd      	mov	sp, r7
 8007108:	bd80      	pop	{r7, pc}

0800710a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800710a:	b580      	push	{r7, lr}
 800710c:	b082      	sub	sp, #8
 800710e:	af00      	add	r7, sp, #0
 8007110:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d101      	bne.n	800711c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007118:	2301      	movs	r3, #1
 800711a:	e014      	b.n	8007146 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	791b      	ldrb	r3, [r3, #4]
 8007120:	b2db      	uxtb	r3, r3
 8007122:	2b00      	cmp	r3, #0
 8007124:	d105      	bne.n	8007132 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f7fc fedf 	bl	8003ef0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2202      	movs	r2, #2
 8007136:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2200      	movs	r2, #0
 800713c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	2201      	movs	r2, #1
 8007142:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007144:	2300      	movs	r3, #0
}
 8007146:	4618      	mov	r0, r3
 8007148:	3708      	adds	r7, #8
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}

0800714e <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800714e:	b580      	push	{r7, lr}
 8007150:	b082      	sub	sp, #8
 8007152:	af00      	add	r7, sp, #0
 8007154:	6078      	str	r0, [r7, #4]
 8007156:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	795b      	ldrb	r3, [r3, #5]
 800715c:	2b01      	cmp	r3, #1
 800715e:	d101      	bne.n	8007164 <HAL_DAC_Start+0x16>
 8007160:	2302      	movs	r3, #2
 8007162:	e043      	b.n	80071ec <HAL_DAC_Start+0x9e>
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2201      	movs	r2, #1
 8007168:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2202      	movs	r2, #2
 800716e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	6819      	ldr	r1, [r3, #0]
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	f003 0310 	and.w	r3, r3, #16
 800717c:	2201      	movs	r2, #1
 800717e:	409a      	lsls	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	430a      	orrs	r2, r1
 8007186:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8007188:	2001      	movs	r0, #1
 800718a:	f7fe fb4d 	bl	8005828 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d10f      	bne.n	80071b4 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800719e:	2b02      	cmp	r3, #2
 80071a0:	d11d      	bne.n	80071de <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	685a      	ldr	r2, [r3, #4]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f042 0201 	orr.w	r2, r2, #1
 80071b0:	605a      	str	r2, [r3, #4]
 80071b2:	e014      	b.n	80071de <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	f003 0310 	and.w	r3, r3, #16
 80071c4:	2102      	movs	r1, #2
 80071c6:	fa01 f303 	lsl.w	r3, r1, r3
 80071ca:	429a      	cmp	r2, r3
 80071cc:	d107      	bne.n	80071de <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	685a      	ldr	r2, [r3, #4]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f042 0202 	orr.w	r2, r2, #2
 80071dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2200      	movs	r2, #0
 80071e8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80071ea:	2300      	movs	r3, #0
}
 80071ec:	4618      	mov	r0, r3
 80071ee:	3708      	adds	r7, #8
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b086      	sub	sp, #24
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	60f8      	str	r0, [r7, #12]
 80071fc:	60b9      	str	r1, [r7, #8]
 80071fe:	607a      	str	r2, [r7, #4]
 8007200:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8007202:	2300      	movs	r3, #0
 8007204:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	795b      	ldrb	r3, [r3, #5]
 800720a:	2b01      	cmp	r3, #1
 800720c:	d101      	bne.n	8007212 <HAL_DAC_Start_DMA+0x1e>
 800720e:	2302      	movs	r3, #2
 8007210:	e0a1      	b.n	8007356 <HAL_DAC_Start_DMA+0x162>
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2201      	movs	r2, #1
 8007216:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2202      	movs	r2, #2
 800721c:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d12a      	bne.n	800727a <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	689b      	ldr	r3, [r3, #8]
 8007228:	4a4d      	ldr	r2, [pc, #308]	; (8007360 <HAL_DAC_Start_DMA+0x16c>)
 800722a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	4a4c      	ldr	r2, [pc, #304]	; (8007364 <HAL_DAC_Start_DMA+0x170>)
 8007232:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	689b      	ldr	r3, [r3, #8]
 8007238:	4a4b      	ldr	r2, [pc, #300]	; (8007368 <HAL_DAC_Start_DMA+0x174>)
 800723a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	681a      	ldr	r2, [r3, #0]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800724a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800724c:	6a3b      	ldr	r3, [r7, #32]
 800724e:	2b04      	cmp	r3, #4
 8007250:	d009      	beq.n	8007266 <HAL_DAC_Start_DMA+0x72>
 8007252:	2b08      	cmp	r3, #8
 8007254:	d00c      	beq.n	8007270 <HAL_DAC_Start_DMA+0x7c>
 8007256:	2b00      	cmp	r3, #0
 8007258:	d000      	beq.n	800725c <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800725a:	e039      	b.n	80072d0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	3308      	adds	r3, #8
 8007262:	613b      	str	r3, [r7, #16]
        break;
 8007264:	e034      	b.n	80072d0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	330c      	adds	r3, #12
 800726c:	613b      	str	r3, [r7, #16]
        break;
 800726e:	e02f      	b.n	80072d0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	3310      	adds	r3, #16
 8007276:	613b      	str	r3, [r7, #16]
        break;
 8007278:	e02a      	b.n	80072d0 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	68db      	ldr	r3, [r3, #12]
 800727e:	4a3b      	ldr	r2, [pc, #236]	; (800736c <HAL_DAC_Start_DMA+0x178>)
 8007280:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	68db      	ldr	r3, [r3, #12]
 8007286:	4a3a      	ldr	r2, [pc, #232]	; (8007370 <HAL_DAC_Start_DMA+0x17c>)
 8007288:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	68db      	ldr	r3, [r3, #12]
 800728e:	4a39      	ldr	r2, [pc, #228]	; (8007374 <HAL_DAC_Start_DMA+0x180>)
 8007290:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	681a      	ldr	r2, [r3, #0]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80072a0:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80072a2:	6a3b      	ldr	r3, [r7, #32]
 80072a4:	2b04      	cmp	r3, #4
 80072a6:	d009      	beq.n	80072bc <HAL_DAC_Start_DMA+0xc8>
 80072a8:	2b08      	cmp	r3, #8
 80072aa:	d00c      	beq.n	80072c6 <HAL_DAC_Start_DMA+0xd2>
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d000      	beq.n	80072b2 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80072b0:	e00e      	b.n	80072d0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	3314      	adds	r3, #20
 80072b8:	613b      	str	r3, [r7, #16]
        break;
 80072ba:	e009      	b.n	80072d0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	3318      	adds	r3, #24
 80072c2:	613b      	str	r3, [r7, #16]
        break;
 80072c4:	e004      	b.n	80072d0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	331c      	adds	r3, #28
 80072cc:	613b      	str	r3, [r7, #16]
        break;
 80072ce:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d111      	bne.n	80072fa <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	681a      	ldr	r2, [r3, #0]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072e4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	6898      	ldr	r0, [r3, #8]
 80072ea:	6879      	ldr	r1, [r7, #4]
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	693a      	ldr	r2, [r7, #16]
 80072f0:	f000 fbc8 	bl	8007a84 <HAL_DMA_Start_IT>
 80072f4:	4603      	mov	r3, r0
 80072f6:	75fb      	strb	r3, [r7, #23]
 80072f8:	e010      	b.n	800731c <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	681a      	ldr	r2, [r3, #0]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007308:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	68d8      	ldr	r0, [r3, #12]
 800730e:	6879      	ldr	r1, [r7, #4]
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	693a      	ldr	r2, [r7, #16]
 8007314:	f000 fbb6 	bl	8007a84 <HAL_DMA_Start_IT>
 8007318:	4603      	mov	r3, r0
 800731a:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	2200      	movs	r2, #0
 8007320:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007322:	7dfb      	ldrb	r3, [r7, #23]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10f      	bne.n	8007348 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6819      	ldr	r1, [r3, #0]
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	f003 0310 	and.w	r3, r3, #16
 8007334:	2201      	movs	r2, #1
 8007336:	409a      	lsls	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	430a      	orrs	r2, r1
 800733e:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8007340:	2001      	movs	r0, #1
 8007342:	f7fe fa71 	bl	8005828 <HAL_Delay>
 8007346:	e005      	b.n	8007354 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	f043 0204 	orr.w	r2, r3, #4
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8007354:	7dfb      	ldrb	r3, [r7, #23]
}
 8007356:	4618      	mov	r0, r3
 8007358:	3718      	adds	r7, #24
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	08007821 	.word	0x08007821
 8007364:	08007843 	.word	0x08007843
 8007368:	0800785f 	.word	0x0800785f
 800736c:	080078c9 	.word	0x080078c9
 8007370:	080078eb 	.word	0x080078eb
 8007374:	08007907 	.word	0x08007907

08007378 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	6819      	ldr	r1, [r3, #0]
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	f003 0310 	and.w	r3, r3, #16
 800738e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007392:	fa02 f303 	lsl.w	r3, r2, r3
 8007396:	43da      	mvns	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	400a      	ands	r2, r1
 800739e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6819      	ldr	r1, [r3, #0]
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	f003 0310 	and.w	r3, r3, #16
 80073ac:	2201      	movs	r2, #1
 80073ae:	fa02 f303 	lsl.w	r3, r2, r3
 80073b2:	43da      	mvns	r2, r3
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	400a      	ands	r2, r1
 80073ba:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 80073bc:	2001      	movs	r0, #1
 80073be:	f7fe fa33 	bl	8005828 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10f      	bne.n	80073e8 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	689b      	ldr	r3, [r3, #8]
 80073cc:	4618      	mov	r0, r3
 80073ce:	f000 fbd4 	bl	8007b7a <HAL_DMA_Abort>
 80073d2:	4603      	mov	r3, r0
 80073d4:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80073e4:	601a      	str	r2, [r3, #0]
 80073e6:	e00e      	b.n	8007406 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	4618      	mov	r0, r3
 80073ee:	f000 fbc4 	bl	8007b7a <HAL_DMA_Abort>
 80073f2:	4603      	mov	r3, r0
 80073f4:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8007404:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8007406:	7bfb      	ldrb	r3, [r7, #15]
 8007408:	2b00      	cmp	r3, #0
 800740a:	d003      	beq.n	8007414 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2204      	movs	r2, #4
 8007410:	711a      	strb	r2, [r3, #4]
 8007412:	e002      	b.n	800741a <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800741a:	7bfb      	ldrb	r3, [r7, #15]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007424:	b480      	push	{r7}
 8007426:	b087      	sub	sp, #28
 8007428:	af00      	add	r7, sp, #0
 800742a:	60f8      	str	r0, [r7, #12]
 800742c:	60b9      	str	r1, [r7, #8]
 800742e:	607a      	str	r2, [r7, #4]
 8007430:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8007432:	2300      	movs	r3, #0
 8007434:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d105      	bne.n	8007454 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007448:	697a      	ldr	r2, [r7, #20]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	4413      	add	r3, r2
 800744e:	3308      	adds	r3, #8
 8007450:	617b      	str	r3, [r7, #20]
 8007452:	e004      	b.n	800745e <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	4413      	add	r3, r2
 800745a:	3314      	adds	r3, #20
 800745c:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	461a      	mov	r2, r3
 8007462:	683b      	ldr	r3, [r7, #0]
 8007464:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007466:	2300      	movs	r3, #0
}
 8007468:	4618      	mov	r0, r3
 800746a:	371c      	adds	r7, #28
 800746c:	46bd      	mov	sp, r7
 800746e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007472:	4770      	bx	lr

08007474 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007474:	b480      	push	{r7}
 8007476:	b083      	sub	sp, #12
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800747c:	bf00      	nop
 800747e:	370c      	adds	r7, #12
 8007480:	46bd      	mov	sp, r7
 8007482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007486:	4770      	bx	lr

08007488 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007488:	b480      	push	{r7}
 800748a:	b083      	sub	sp, #12
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8007490:	bf00      	nop
 8007492:	370c      	adds	r7, #12
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr

0800749c <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d103      	bne.n	80074b4 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074b2:	e002      	b.n	80074ba <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 80074ba:	4618      	mov	r0, r3
 80074bc:	370c      	adds	r7, #12
 80074be:	46bd      	mov	sp, r7
 80074c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c4:	4770      	bx	lr
	...

080074c8 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b08a      	sub	sp, #40	; 0x28
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80074d4:	2300      	movs	r3, #0
 80074d6:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	795b      	ldrb	r3, [r3, #5]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d101      	bne.n	80074e4 <HAL_DAC_ConfigChannel+0x1c>
 80074e0:	2302      	movs	r3, #2
 80074e2:	e194      	b.n	800780e <HAL_DAC_ConfigChannel+0x346>
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	2201      	movs	r2, #1
 80074e8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	2202      	movs	r2, #2
 80074ee:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	2b04      	cmp	r3, #4
 80074f6:	d174      	bne.n	80075e2 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d137      	bne.n	800756e <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 80074fe:	f7fe f987 	bl	8005810 <HAL_GetTick>
 8007502:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007504:	e011      	b.n	800752a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8007506:	f7fe f983 	bl	8005810 <HAL_GetTick>
 800750a:	4602      	mov	r2, r0
 800750c:	69fb      	ldr	r3, [r7, #28]
 800750e:	1ad3      	subs	r3, r2, r3
 8007510:	2b01      	cmp	r3, #1
 8007512:	d90a      	bls.n	800752a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	691b      	ldr	r3, [r3, #16]
 8007518:	f043 0208 	orr.w	r2, r3, #8
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2203      	movs	r2, #3
 8007524:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8007526:	2303      	movs	r3, #3
 8007528:	e171      	b.n	800780e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007530:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d1e6      	bne.n	8007506 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8007538:	2001      	movs	r0, #1
 800753a:	f7fe f975 	bl	8005828 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68ba      	ldr	r2, [r7, #8]
 8007544:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007546:	641a      	str	r2, [r3, #64]	; 0x40
 8007548:	e01e      	b.n	8007588 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800754a:	f7fe f961 	bl	8005810 <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	69fb      	ldr	r3, [r7, #28]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	2b01      	cmp	r3, #1
 8007556:	d90a      	bls.n	800756e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	691b      	ldr	r3, [r3, #16]
 800755c:	f043 0208 	orr.w	r2, r3, #8
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	2203      	movs	r2, #3
 8007568:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800756a:	2303      	movs	r3, #3
 800756c:	e14f      	b.n	800780e <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007574:	2b00      	cmp	r3, #0
 8007576:	dbe8      	blt.n	800754a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8007578:	2001      	movs	r0, #1
 800757a:	f7fe f955 	bl	8005828 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007586:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f003 0310 	and.w	r3, r3, #16
 8007594:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007598:	fa01 f303 	lsl.w	r3, r1, r3
 800759c:	43db      	mvns	r3, r3
 800759e:	ea02 0103 	and.w	r1, r2, r3
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f003 0310 	and.w	r3, r3, #16
 80075ac:	409a      	lsls	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	430a      	orrs	r2, r1
 80075b4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f003 0310 	and.w	r3, r3, #16
 80075c2:	21ff      	movs	r1, #255	; 0xff
 80075c4:	fa01 f303 	lsl.w	r3, r1, r3
 80075c8:	43db      	mvns	r3, r3
 80075ca:	ea02 0103 	and.w	r1, r2, r3
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f003 0310 	and.w	r3, r3, #16
 80075d8:	409a      	lsls	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	430a      	orrs	r2, r1
 80075e0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	69db      	ldr	r3, [r3, #28]
 80075e6:	2b01      	cmp	r3, #1
 80075e8:	d11d      	bne.n	8007626 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075f0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f003 0310 	and.w	r3, r3, #16
 80075f8:	221f      	movs	r2, #31
 80075fa:	fa02 f303 	lsl.w	r3, r2, r3
 80075fe:	43db      	mvns	r3, r3
 8007600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007602:	4013      	ands	r3, r2
 8007604:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	6a1b      	ldr	r3, [r3, #32]
 800760a:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	f003 0310 	and.w	r3, r3, #16
 8007612:	69ba      	ldr	r2, [r7, #24]
 8007614:	fa02 f303 	lsl.w	r3, r2, r3
 8007618:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800761a:	4313      	orrs	r3, r2
 800761c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007624:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800762c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	f003 0310 	and.w	r3, r3, #16
 8007634:	2207      	movs	r2, #7
 8007636:	fa02 f303 	lsl.w	r3, r2, r3
 800763a:	43db      	mvns	r3, r3
 800763c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800763e:	4013      	ands	r3, r2
 8007640:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	699b      	ldr	r3, [r3, #24]
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	2b00      	cmp	r3, #0
 800764c:	d002      	beq.n	8007654 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800764e:	2300      	movs	r3, #0
 8007650:	623b      	str	r3, [r7, #32]
 8007652:	e011      	b.n	8007678 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	699b      	ldr	r3, [r3, #24]
 8007658:	f003 0302 	and.w	r3, r3, #2
 800765c:	2b00      	cmp	r3, #0
 800765e:	d002      	beq.n	8007666 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8007660:	2301      	movs	r3, #1
 8007662:	623b      	str	r3, [r7, #32]
 8007664:	e008      	b.n	8007678 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	695b      	ldr	r3, [r3, #20]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d102      	bne.n	8007674 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800766e:	2301      	movs	r3, #1
 8007670:	623b      	str	r3, [r7, #32]
 8007672:	e001      	b.n	8007678 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8007674:	2300      	movs	r3, #0
 8007676:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	689a      	ldr	r2, [r3, #8]
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	695b      	ldr	r3, [r3, #20]
 8007680:	4313      	orrs	r3, r2
 8007682:	6a3a      	ldr	r2, [r7, #32]
 8007684:	4313      	orrs	r3, r2
 8007686:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f003 0310 	and.w	r3, r3, #16
 800768e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007692:	fa02 f303 	lsl.w	r3, r2, r3
 8007696:	43db      	mvns	r3, r3
 8007698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800769a:	4013      	ands	r3, r2
 800769c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	791b      	ldrb	r3, [r3, #4]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d102      	bne.n	80076ac <HAL_DAC_ConfigChannel+0x1e4>
 80076a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80076aa:	e000      	b.n	80076ae <HAL_DAC_ConfigChannel+0x1e6>
 80076ac:	2300      	movs	r3, #0
 80076ae:	69ba      	ldr	r2, [r7, #24]
 80076b0:	4313      	orrs	r3, r2
 80076b2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	f003 0310 	and.w	r3, r3, #16
 80076ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80076be:	fa02 f303 	lsl.w	r3, r2, r3
 80076c2:	43db      	mvns	r3, r3
 80076c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076c6:	4013      	ands	r3, r2
 80076c8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	795b      	ldrb	r3, [r3, #5]
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d102      	bne.n	80076d8 <HAL_DAC_ConfigChannel+0x210>
 80076d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80076d6:	e000      	b.n	80076da <HAL_DAC_ConfigChannel+0x212>
 80076d8:	2300      	movs	r3, #0
 80076da:	69ba      	ldr	r2, [r7, #24]
 80076dc:	4313      	orrs	r3, r2
 80076de:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80076e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80076e6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b02      	cmp	r3, #2
 80076ee:	d114      	bne.n	800771a <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80076f0:	f001 faf8 	bl	8008ce4 <HAL_RCC_GetHCLKFreq>
 80076f4:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80076f6:	697b      	ldr	r3, [r7, #20]
 80076f8:	4a47      	ldr	r2, [pc, #284]	; (8007818 <HAL_DAC_ConfigChannel+0x350>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d904      	bls.n	8007708 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80076fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007700:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007704:	627b      	str	r3, [r7, #36]	; 0x24
 8007706:	e00d      	b.n	8007724 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	4a44      	ldr	r2, [pc, #272]	; (800781c <HAL_DAC_ConfigChannel+0x354>)
 800770c:	4293      	cmp	r3, r2
 800770e:	d909      	bls.n	8007724 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8007710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007712:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007716:	627b      	str	r3, [r7, #36]	; 0x24
 8007718:	e004      	b.n	8007724 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007720:	4313      	orrs	r3, r2
 8007722:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f003 0310 	and.w	r3, r3, #16
 800772a:	69ba      	ldr	r2, [r7, #24]
 800772c:	fa02 f303 	lsl.w	r3, r2, r3
 8007730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007732:	4313      	orrs	r3, r2
 8007734:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800773c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	6819      	ldr	r1, [r3, #0]
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f003 0310 	and.w	r3, r3, #16
 800774a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800774e:	fa02 f303 	lsl.w	r3, r2, r3
 8007752:	43da      	mvns	r2, r3
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	400a      	ands	r2, r1
 800775a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	f003 0310 	and.w	r3, r3, #16
 800776a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800776e:	fa02 f303 	lsl.w	r3, r2, r3
 8007772:	43db      	mvns	r3, r3
 8007774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007776:	4013      	ands	r3, r2
 8007778:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	68db      	ldr	r3, [r3, #12]
 800777e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	f003 0310 	and.w	r3, r3, #16
 8007786:	69ba      	ldr	r2, [r7, #24]
 8007788:	fa02 f303 	lsl.w	r3, r2, r3
 800778c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800778e:	4313      	orrs	r3, r2
 8007790:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007798:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	6819      	ldr	r1, [r3, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	f003 0310 	and.w	r3, r3, #16
 80077a6:	22c0      	movs	r2, #192	; 0xc0
 80077a8:	fa02 f303 	lsl.w	r3, r2, r3
 80077ac:	43da      	mvns	r2, r3
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	400a      	ands	r2, r1
 80077b4:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	68db      	ldr	r3, [r3, #12]
 80077ba:	089b      	lsrs	r3, r3, #2
 80077bc:	f003 030f 	and.w	r3, r3, #15
 80077c0:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	089b      	lsrs	r3, r3, #2
 80077c8:	021b      	lsls	r3, r3, #8
 80077ca:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80077ce:	69ba      	ldr	r2, [r7, #24]
 80077d0:	4313      	orrs	r3, r2
 80077d2:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	f003 0310 	and.w	r3, r3, #16
 80077e0:	f640 710f 	movw	r1, #3855	; 0xf0f
 80077e4:	fa01 f303 	lsl.w	r3, r1, r3
 80077e8:	43db      	mvns	r3, r3
 80077ea:	ea02 0103 	and.w	r1, r2, r3
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	f003 0310 	and.w	r3, r3, #16
 80077f4:	69ba      	ldr	r2, [r7, #24]
 80077f6:	409a      	lsls	r2, r3
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	430a      	orrs	r2, r1
 80077fe:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2201      	movs	r2, #1
 8007804:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2200      	movs	r2, #0
 800780a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800780c:	2300      	movs	r3, #0
}
 800780e:	4618      	mov	r0, r3
 8007810:	3728      	adds	r7, #40	; 0x28
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	09896800 	.word	0x09896800
 800781c:	04c4b400 	.word	0x04c4b400

08007820 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800782c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f7ff fe20 	bl	8007474 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2201      	movs	r2, #1
 8007838:	711a      	strb	r2, [r3, #4]
}
 800783a:	bf00      	nop
 800783c:	3710      	adds	r7, #16
 800783e:	46bd      	mov	sp, r7
 8007840:	bd80      	pop	{r7, pc}

08007842 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007842:	b580      	push	{r7, lr}
 8007844:	b084      	sub	sp, #16
 8007846:	af00      	add	r7, sp, #0
 8007848:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800784e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007850:	68f8      	ldr	r0, [r7, #12]
 8007852:	f7ff fe19 	bl	8007488 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007856:	bf00      	nop
 8007858:	3710      	adds	r7, #16
 800785a:	46bd      	mov	sp, r7
 800785c:	bd80      	pop	{r7, pc}

0800785e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800785e:	b580      	push	{r7, lr}
 8007860:	b084      	sub	sp, #16
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	f043 0204 	orr.w	r2, r3, #4
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8007878:	68f8      	ldr	r0, [r7, #12]
 800787a:	f7fc ffde 	bl	800483a <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2201      	movs	r2, #1
 8007882:	711a      	strb	r2, [r3, #4]
}
 8007884:	bf00      	nop
 8007886:	3710      	adds	r7, #16
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800788c:	b480      	push	{r7}
 800788e:	b083      	sub	sp, #12
 8007890:	af00      	add	r7, sp, #0
 8007892:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8007894:	bf00      	nop
 8007896:	370c      	adds	r7, #12
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80078a8:	bf00      	nop
 80078aa:	370c      	adds	r7, #12
 80078ac:	46bd      	mov	sp, r7
 80078ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b2:	4770      	bx	lr

080078b4 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80078b4:	b480      	push	{r7}
 80078b6:	b083      	sub	sp, #12
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80078bc:	bf00      	nop
 80078be:	370c      	adds	r7, #12
 80078c0:	46bd      	mov	sp, r7
 80078c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c6:	4770      	bx	lr

080078c8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b084      	sub	sp, #16
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078d4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80078d6:	68f8      	ldr	r0, [r7, #12]
 80078d8:	f7ff ffd8 	bl	800788c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2201      	movs	r2, #1
 80078e0:	711a      	strb	r2, [r3, #4]
}
 80078e2:	bf00      	nop
 80078e4:	3710      	adds	r7, #16
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}

080078ea <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80078ea:	b580      	push	{r7, lr}
 80078ec:	b084      	sub	sp, #16
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078f6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80078f8:	68f8      	ldr	r0, [r7, #12]
 80078fa:	f7ff ffd1 	bl	80078a0 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80078fe:	bf00      	nop
 8007900:	3710      	adds	r7, #16
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b084      	sub	sp, #16
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007912:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	691b      	ldr	r3, [r3, #16]
 8007918:	f043 0204 	orr.w	r2, r3, #4
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007920:	68f8      	ldr	r0, [r7, #12]
 8007922:	f7ff ffc7 	bl	80078b4 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2201      	movs	r2, #1
 800792a:	711a      	strb	r2, [r3, #4]
}
 800792c:	bf00      	nop
 800792e:	3710      	adds	r7, #16
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b084      	sub	sp, #16
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d101      	bne.n	8007946 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	e08d      	b.n	8007a62 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	461a      	mov	r2, r3
 800794c:	4b47      	ldr	r3, [pc, #284]	; (8007a6c <HAL_DMA_Init+0x138>)
 800794e:	429a      	cmp	r2, r3
 8007950:	d80f      	bhi.n	8007972 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	4b45      	ldr	r3, [pc, #276]	; (8007a70 <HAL_DMA_Init+0x13c>)
 800795a:	4413      	add	r3, r2
 800795c:	4a45      	ldr	r2, [pc, #276]	; (8007a74 <HAL_DMA_Init+0x140>)
 800795e:	fba2 2303 	umull	r2, r3, r2, r3
 8007962:	091b      	lsrs	r3, r3, #4
 8007964:	009a      	lsls	r2, r3, #2
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	4a42      	ldr	r2, [pc, #264]	; (8007a78 <HAL_DMA_Init+0x144>)
 800796e:	641a      	str	r2, [r3, #64]	; 0x40
 8007970:	e00e      	b.n	8007990 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	461a      	mov	r2, r3
 8007978:	4b40      	ldr	r3, [pc, #256]	; (8007a7c <HAL_DMA_Init+0x148>)
 800797a:	4413      	add	r3, r2
 800797c:	4a3d      	ldr	r2, [pc, #244]	; (8007a74 <HAL_DMA_Init+0x140>)
 800797e:	fba2 2303 	umull	r2, r3, r2, r3
 8007982:	091b      	lsrs	r3, r3, #4
 8007984:	009a      	lsls	r2, r3, #2
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	4a3c      	ldr	r2, [pc, #240]	; (8007a80 <HAL_DMA_Init+0x14c>)
 800798e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2202      	movs	r2, #2
 8007994:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80079a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80079aa:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80079b4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	691b      	ldr	r3, [r3, #16]
 80079ba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80079c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80079cc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a1b      	ldr	r3, [r3, #32]
 80079d2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80079d4:	68fa      	ldr	r2, [r7, #12]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fa10 	bl	8007e08 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	689b      	ldr	r3, [r3, #8]
 80079ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079f0:	d102      	bne.n	80079f8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	2200      	movs	r2, #0
 80079f6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	685a      	ldr	r2, [r3, #4]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007a00:	b2d2      	uxtb	r2, r2
 8007a02:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a08:	687a      	ldr	r2, [r7, #4]
 8007a0a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007a0c:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d010      	beq.n	8007a38 <HAL_DMA_Init+0x104>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	685b      	ldr	r3, [r3, #4]
 8007a1a:	2b04      	cmp	r3, #4
 8007a1c:	d80c      	bhi.n	8007a38 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fa30 	bl	8007e84 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007a28:	2200      	movs	r2, #0
 8007a2a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a30:	687a      	ldr	r2, [r7, #4]
 8007a32:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007a34:	605a      	str	r2, [r3, #4]
 8007a36:	e008      	b.n	8007a4a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2200      	movs	r2, #0
 8007a48:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2201      	movs	r2, #1
 8007a54:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007a60:	2300      	movs	r3, #0
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	40020407 	.word	0x40020407
 8007a70:	bffdfff8 	.word	0xbffdfff8
 8007a74:	cccccccd 	.word	0xcccccccd
 8007a78:	40020000 	.word	0x40020000
 8007a7c:	bffdfbf8 	.word	0xbffdfbf8
 8007a80:	40020400 	.word	0x40020400

08007a84 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b086      	sub	sp, #24
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	607a      	str	r2, [r7, #4]
 8007a90:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a92:	2300      	movs	r3, #0
 8007a94:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d101      	bne.n	8007aa4 <HAL_DMA_Start_IT+0x20>
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	e066      	b.n	8007b72 <HAL_DMA_Start_IT+0xee>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d155      	bne.n	8007b64 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2202      	movs	r2, #2
 8007abc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f022 0201 	bic.w	r2, r2, #1
 8007ad4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	687a      	ldr	r2, [r7, #4]
 8007ada:	68b9      	ldr	r1, [r7, #8]
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 f954 	bl	8007d8a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d008      	beq.n	8007afc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	f042 020e 	orr.w	r2, r2, #14
 8007af8:	601a      	str	r2, [r3, #0]
 8007afa:	e00f      	b.n	8007b1c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	681a      	ldr	r2, [r3, #0]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f022 0204 	bic.w	r2, r2, #4
 8007b0a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	681a      	ldr	r2, [r3, #0]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f042 020a 	orr.w	r2, r2, #10
 8007b1a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d007      	beq.n	8007b3a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b38:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d007      	beq.n	8007b52 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007b4c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b50:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	681a      	ldr	r2, [r3, #0]
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	f042 0201 	orr.w	r2, r2, #1
 8007b60:	601a      	str	r2, [r3, #0]
 8007b62:	e005      	b.n	8007b70 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8007b6c:	2302      	movs	r3, #2
 8007b6e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8007b70:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	3718      	adds	r7, #24
 8007b76:	46bd      	mov	sp, r7
 8007b78:	bd80      	pop	{r7, pc}

08007b7a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	b085      	sub	sp, #20
 8007b7e:	af00      	add	r7, sp, #0
 8007b80:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b82:	2300      	movs	r3, #0
 8007b84:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8007b8c:	b2db      	uxtb	r3, r3
 8007b8e:	2b02      	cmp	r3, #2
 8007b90:	d005      	beq.n	8007b9e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2204      	movs	r2, #4
 8007b96:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8007b98:	2301      	movs	r3, #1
 8007b9a:	73fb      	strb	r3, [r7, #15]
 8007b9c:	e037      	b.n	8007c0e <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f022 020e 	bic.w	r2, r2, #14
 8007bac:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007bb8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007bbc:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f022 0201 	bic.w	r2, r2, #1
 8007bcc:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bd2:	f003 021f 	and.w	r2, r3, #31
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bda:	2101      	movs	r1, #1
 8007bdc:	fa01 f202 	lsl.w	r2, r1, r2
 8007be0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007be6:	687a      	ldr	r2, [r7, #4]
 8007be8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007bea:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d00c      	beq.n	8007c0e <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf8:	681a      	ldr	r2, [r3, #0]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bfe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c02:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c08:	687a      	ldr	r2, [r7, #4]
 8007c0a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007c0c:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2201      	movs	r2, #1
 8007c12:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2200      	movs	r2, #0
 8007c1a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8007c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3714      	adds	r7, #20
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b084      	sub	sp, #16
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c48:	f003 031f 	and.w	r3, r3, #31
 8007c4c:	2204      	movs	r2, #4
 8007c4e:	409a      	lsls	r2, r3
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	4013      	ands	r3, r2
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d026      	beq.n	8007ca6 <HAL_DMA_IRQHandler+0x7a>
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	f003 0304 	and.w	r3, r3, #4
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d021      	beq.n	8007ca6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0320 	and.w	r3, r3, #32
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d107      	bne.n	8007c80 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f022 0204 	bic.w	r2, r2, #4
 8007c7e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c84:	f003 021f 	and.w	r2, r3, #31
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8c:	2104      	movs	r1, #4
 8007c8e:	fa01 f202 	lsl.w	r2, r1, r2
 8007c92:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d071      	beq.n	8007d80 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8007ca4:	e06c      	b.n	8007d80 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007caa:	f003 031f 	and.w	r3, r3, #31
 8007cae:	2202      	movs	r2, #2
 8007cb0:	409a      	lsls	r2, r3
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	4013      	ands	r3, r2
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d02e      	beq.n	8007d18 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	f003 0302 	and.w	r3, r3, #2
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d029      	beq.n	8007d18 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f003 0320 	and.w	r3, r3, #32
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d10b      	bne.n	8007cea <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	681a      	ldr	r2, [r3, #0]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	f022 020a 	bic.w	r2, r2, #10
 8007ce0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cee:	f003 021f 	and.w	r2, r3, #31
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf6:	2102      	movs	r1, #2
 8007cf8:	fa01 f202 	lsl.w	r2, r1, r2
 8007cfc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d038      	beq.n	8007d80 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d12:	6878      	ldr	r0, [r7, #4]
 8007d14:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8007d16:	e033      	b.n	8007d80 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d1c:	f003 031f 	and.w	r3, r3, #31
 8007d20:	2208      	movs	r2, #8
 8007d22:	409a      	lsls	r2, r3
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	4013      	ands	r3, r2
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d02a      	beq.n	8007d82 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	f003 0308 	and.w	r3, r3, #8
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d025      	beq.n	8007d82 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f022 020e 	bic.w	r2, r2, #14
 8007d44:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d4a:	f003 021f 	and.w	r2, r3, #31
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d52:	2101      	movs	r1, #1
 8007d54:	fa01 f202 	lsl.w	r2, r1, r2
 8007d58:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2201      	movs	r2, #1
 8007d5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d004      	beq.n	8007d82 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007d80:	bf00      	nop
 8007d82:	bf00      	nop
}
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b085      	sub	sp, #20
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	60f8      	str	r0, [r7, #12]
 8007d92:	60b9      	str	r1, [r7, #8]
 8007d94:	607a      	str	r2, [r7, #4]
 8007d96:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d9c:	68fa      	ldr	r2, [r7, #12]
 8007d9e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007da0:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d004      	beq.n	8007db4 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007dae:	68fa      	ldr	r2, [r7, #12]
 8007db0:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8007db2:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007db8:	f003 021f 	and.w	r2, r3, #31
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc0:	2101      	movs	r1, #1
 8007dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8007dc6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	683a      	ldr	r2, [r7, #0]
 8007dce:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	2b10      	cmp	r3, #16
 8007dd6:	d108      	bne.n	8007dea <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	68ba      	ldr	r2, [r7, #8]
 8007de6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007de8:	e007      	b.n	8007dfa <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	68ba      	ldr	r2, [r7, #8]
 8007df0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	60da      	str	r2, [r3, #12]
}
 8007dfa:	bf00      	nop
 8007dfc:	3714      	adds	r7, #20
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e04:	4770      	bx	lr
	...

08007e08 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b087      	sub	sp, #28
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	461a      	mov	r2, r3
 8007e16:	4b16      	ldr	r3, [pc, #88]	; (8007e70 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8007e18:	429a      	cmp	r2, r3
 8007e1a:	d802      	bhi.n	8007e22 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8007e1c:	4b15      	ldr	r3, [pc, #84]	; (8007e74 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8007e1e:	617b      	str	r3, [r7, #20]
 8007e20:	e001      	b.n	8007e26 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8007e22:	4b15      	ldr	r3, [pc, #84]	; (8007e78 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8007e24:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	b2db      	uxtb	r3, r3
 8007e30:	3b08      	subs	r3, #8
 8007e32:	4a12      	ldr	r2, [pc, #72]	; (8007e7c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8007e34:	fba2 2303 	umull	r2, r3, r2, r3
 8007e38:	091b      	lsrs	r3, r3, #4
 8007e3a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e40:	089b      	lsrs	r3, r3, #2
 8007e42:	009a      	lsls	r2, r3, #2
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	4413      	add	r3, r2
 8007e48:	461a      	mov	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	4a0b      	ldr	r2, [pc, #44]	; (8007e80 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8007e52:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f003 031f 	and.w	r3, r3, #31
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	409a      	lsls	r2, r3
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007e62:	bf00      	nop
 8007e64:	371c      	adds	r7, #28
 8007e66:	46bd      	mov	sp, r7
 8007e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6c:	4770      	bx	lr
 8007e6e:	bf00      	nop
 8007e70:	40020407 	.word	0x40020407
 8007e74:	40020800 	.word	0x40020800
 8007e78:	40020820 	.word	0x40020820
 8007e7c:	cccccccd 	.word	0xcccccccd
 8007e80:	40020880 	.word	0x40020880

08007e84 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	4b0b      	ldr	r3, [pc, #44]	; (8007ec4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8007e98:	4413      	add	r3, r2
 8007e9a:	009b      	lsls	r3, r3, #2
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	4a08      	ldr	r2, [pc, #32]	; (8007ec8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8007ea6:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	3b01      	subs	r3, #1
 8007eac:	f003 031f 	and.w	r3, r3, #31
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	409a      	lsls	r2, r3
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8007eb8:	bf00      	nop
 8007eba:	3714      	adds	r7, #20
 8007ebc:	46bd      	mov	sp, r7
 8007ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec2:	4770      	bx	lr
 8007ec4:	1000823f 	.word	0x1000823f
 8007ec8:	40020940 	.word	0x40020940

08007ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007ecc:	b480      	push	{r7}
 8007ece:	b087      	sub	sp, #28
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8007eda:	e15a      	b.n	8008192 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	2101      	movs	r1, #1
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	fa01 f303 	lsl.w	r3, r1, r3
 8007ee8:	4013      	ands	r3, r2
 8007eea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	f000 814c 	beq.w	800818c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d00b      	beq.n	8007f14 <HAL_GPIO_Init+0x48>
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	2b02      	cmp	r3, #2
 8007f02:	d007      	beq.n	8007f14 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8007f08:	2b11      	cmp	r3, #17
 8007f0a:	d003      	beq.n	8007f14 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	2b12      	cmp	r3, #18
 8007f12:	d130      	bne.n	8007f76 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	689b      	ldr	r3, [r3, #8]
 8007f18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	005b      	lsls	r3, r3, #1
 8007f1e:	2203      	movs	r2, #3
 8007f20:	fa02 f303 	lsl.w	r3, r2, r3
 8007f24:	43db      	mvns	r3, r3
 8007f26:	693a      	ldr	r2, [r7, #16]
 8007f28:	4013      	ands	r3, r2
 8007f2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	68da      	ldr	r2, [r3, #12]
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	005b      	lsls	r3, r3, #1
 8007f34:	fa02 f303 	lsl.w	r3, r2, r3
 8007f38:	693a      	ldr	r2, [r7, #16]
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	693a      	ldr	r2, [r7, #16]
 8007f42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	685b      	ldr	r3, [r3, #4]
 8007f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007f4a:	2201      	movs	r2, #1
 8007f4c:	697b      	ldr	r3, [r7, #20]
 8007f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f52:	43db      	mvns	r3, r3
 8007f54:	693a      	ldr	r2, [r7, #16]
 8007f56:	4013      	ands	r3, r2
 8007f58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	091b      	lsrs	r3, r3, #4
 8007f60:	f003 0201 	and.w	r2, r3, #1
 8007f64:	697b      	ldr	r3, [r7, #20]
 8007f66:	fa02 f303 	lsl.w	r3, r2, r3
 8007f6a:	693a      	ldr	r2, [r7, #16]
 8007f6c:	4313      	orrs	r3, r2
 8007f6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	005b      	lsls	r3, r3, #1
 8007f80:	2203      	movs	r2, #3
 8007f82:	fa02 f303 	lsl.w	r3, r2, r3
 8007f86:	43db      	mvns	r3, r3
 8007f88:	693a      	ldr	r2, [r7, #16]
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	689a      	ldr	r2, [r3, #8]
 8007f92:	697b      	ldr	r3, [r7, #20]
 8007f94:	005b      	lsls	r3, r3, #1
 8007f96:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9a:	693a      	ldr	r2, [r7, #16]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	693a      	ldr	r2, [r7, #16]
 8007fa4:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8007fa6:	683b      	ldr	r3, [r7, #0]
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	2b02      	cmp	r3, #2
 8007fac:	d003      	beq.n	8007fb6 <HAL_GPIO_Init+0xea>
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	2b12      	cmp	r3, #18
 8007fb4:	d123      	bne.n	8007ffe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	08da      	lsrs	r2, r3, #3
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	3208      	adds	r2, #8
 8007fbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007fc4:	697b      	ldr	r3, [r7, #20]
 8007fc6:	f003 0307 	and.w	r3, r3, #7
 8007fca:	009b      	lsls	r3, r3, #2
 8007fcc:	220f      	movs	r2, #15
 8007fce:	fa02 f303 	lsl.w	r3, r2, r3
 8007fd2:	43db      	mvns	r3, r3
 8007fd4:	693a      	ldr	r2, [r7, #16]
 8007fd6:	4013      	ands	r3, r2
 8007fd8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	691a      	ldr	r2, [r3, #16]
 8007fde:	697b      	ldr	r3, [r7, #20]
 8007fe0:	f003 0307 	and.w	r3, r3, #7
 8007fe4:	009b      	lsls	r3, r3, #2
 8007fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fea:	693a      	ldr	r2, [r7, #16]
 8007fec:	4313      	orrs	r3, r2
 8007fee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8007ff0:	697b      	ldr	r3, [r7, #20]
 8007ff2:	08da      	lsrs	r2, r3, #3
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	3208      	adds	r2, #8
 8007ff8:	6939      	ldr	r1, [r7, #16]
 8007ffa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	005b      	lsls	r3, r3, #1
 8008008:	2203      	movs	r2, #3
 800800a:	fa02 f303 	lsl.w	r3, r2, r3
 800800e:	43db      	mvns	r3, r3
 8008010:	693a      	ldr	r2, [r7, #16]
 8008012:	4013      	ands	r3, r2
 8008014:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	f003 0203 	and.w	r2, r3, #3
 800801e:	697b      	ldr	r3, [r7, #20]
 8008020:	005b      	lsls	r3, r3, #1
 8008022:	fa02 f303 	lsl.w	r3, r2, r3
 8008026:	693a      	ldr	r2, [r7, #16]
 8008028:	4313      	orrs	r3, r2
 800802a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	693a      	ldr	r2, [r7, #16]
 8008030:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800803a:	2b00      	cmp	r3, #0
 800803c:	f000 80a6 	beq.w	800818c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008040:	4b5b      	ldr	r3, [pc, #364]	; (80081b0 <HAL_GPIO_Init+0x2e4>)
 8008042:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008044:	4a5a      	ldr	r2, [pc, #360]	; (80081b0 <HAL_GPIO_Init+0x2e4>)
 8008046:	f043 0301 	orr.w	r3, r3, #1
 800804a:	6613      	str	r3, [r2, #96]	; 0x60
 800804c:	4b58      	ldr	r3, [pc, #352]	; (80081b0 <HAL_GPIO_Init+0x2e4>)
 800804e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008050:	f003 0301 	and.w	r3, r3, #1
 8008054:	60bb      	str	r3, [r7, #8]
 8008056:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008058:	4a56      	ldr	r2, [pc, #344]	; (80081b4 <HAL_GPIO_Init+0x2e8>)
 800805a:	697b      	ldr	r3, [r7, #20]
 800805c:	089b      	lsrs	r3, r3, #2
 800805e:	3302      	adds	r3, #2
 8008060:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008064:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008066:	697b      	ldr	r3, [r7, #20]
 8008068:	f003 0303 	and.w	r3, r3, #3
 800806c:	009b      	lsls	r3, r3, #2
 800806e:	220f      	movs	r2, #15
 8008070:	fa02 f303 	lsl.w	r3, r2, r3
 8008074:	43db      	mvns	r3, r3
 8008076:	693a      	ldr	r2, [r7, #16]
 8008078:	4013      	ands	r3, r2
 800807a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008082:	d01f      	beq.n	80080c4 <HAL_GPIO_Init+0x1f8>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4a4c      	ldr	r2, [pc, #304]	; (80081b8 <HAL_GPIO_Init+0x2ec>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d019      	beq.n	80080c0 <HAL_GPIO_Init+0x1f4>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a4b      	ldr	r2, [pc, #300]	; (80081bc <HAL_GPIO_Init+0x2f0>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d013      	beq.n	80080bc <HAL_GPIO_Init+0x1f0>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a4a      	ldr	r2, [pc, #296]	; (80081c0 <HAL_GPIO_Init+0x2f4>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d00d      	beq.n	80080b8 <HAL_GPIO_Init+0x1ec>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a49      	ldr	r2, [pc, #292]	; (80081c4 <HAL_GPIO_Init+0x2f8>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d007      	beq.n	80080b4 <HAL_GPIO_Init+0x1e8>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a48      	ldr	r2, [pc, #288]	; (80081c8 <HAL_GPIO_Init+0x2fc>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d101      	bne.n	80080b0 <HAL_GPIO_Init+0x1e4>
 80080ac:	2305      	movs	r3, #5
 80080ae:	e00a      	b.n	80080c6 <HAL_GPIO_Init+0x1fa>
 80080b0:	2306      	movs	r3, #6
 80080b2:	e008      	b.n	80080c6 <HAL_GPIO_Init+0x1fa>
 80080b4:	2304      	movs	r3, #4
 80080b6:	e006      	b.n	80080c6 <HAL_GPIO_Init+0x1fa>
 80080b8:	2303      	movs	r3, #3
 80080ba:	e004      	b.n	80080c6 <HAL_GPIO_Init+0x1fa>
 80080bc:	2302      	movs	r3, #2
 80080be:	e002      	b.n	80080c6 <HAL_GPIO_Init+0x1fa>
 80080c0:	2301      	movs	r3, #1
 80080c2:	e000      	b.n	80080c6 <HAL_GPIO_Init+0x1fa>
 80080c4:	2300      	movs	r3, #0
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	f002 0203 	and.w	r2, r2, #3
 80080cc:	0092      	lsls	r2, r2, #2
 80080ce:	4093      	lsls	r3, r2
 80080d0:	693a      	ldr	r2, [r7, #16]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80080d6:	4937      	ldr	r1, [pc, #220]	; (80081b4 <HAL_GPIO_Init+0x2e8>)
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	089b      	lsrs	r3, r3, #2
 80080dc:	3302      	adds	r3, #2
 80080de:	693a      	ldr	r2, [r7, #16]
 80080e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80080e4:	4b39      	ldr	r3, [pc, #228]	; (80081cc <HAL_GPIO_Init+0x300>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	43db      	mvns	r3, r3
 80080ee:	693a      	ldr	r2, [r7, #16]
 80080f0:	4013      	ands	r3, r2
 80080f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80080f4:	683b      	ldr	r3, [r7, #0]
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d003      	beq.n	8008108 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008100:	693a      	ldr	r2, [r7, #16]
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	4313      	orrs	r3, r2
 8008106:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008108:	4a30      	ldr	r2, [pc, #192]	; (80081cc <HAL_GPIO_Init+0x300>)
 800810a:	693b      	ldr	r3, [r7, #16]
 800810c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800810e:	4b2f      	ldr	r3, [pc, #188]	; (80081cc <HAL_GPIO_Init+0x300>)
 8008110:	685b      	ldr	r3, [r3, #4]
 8008112:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	43db      	mvns	r3, r3
 8008118:	693a      	ldr	r2, [r7, #16]
 800811a:	4013      	ands	r3, r2
 800811c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	685b      	ldr	r3, [r3, #4]
 8008122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008126:	2b00      	cmp	r3, #0
 8008128:	d003      	beq.n	8008132 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800812a:	693a      	ldr	r2, [r7, #16]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	4313      	orrs	r3, r2
 8008130:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008132:	4a26      	ldr	r2, [pc, #152]	; (80081cc <HAL_GPIO_Init+0x300>)
 8008134:	693b      	ldr	r3, [r7, #16]
 8008136:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008138:	4b24      	ldr	r3, [pc, #144]	; (80081cc <HAL_GPIO_Init+0x300>)
 800813a:	689b      	ldr	r3, [r3, #8]
 800813c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	43db      	mvns	r3, r3
 8008142:	693a      	ldr	r2, [r7, #16]
 8008144:	4013      	ands	r3, r2
 8008146:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	685b      	ldr	r3, [r3, #4]
 800814c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008150:	2b00      	cmp	r3, #0
 8008152:	d003      	beq.n	800815c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008154:	693a      	ldr	r2, [r7, #16]
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	4313      	orrs	r3, r2
 800815a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800815c:	4a1b      	ldr	r2, [pc, #108]	; (80081cc <HAL_GPIO_Init+0x300>)
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008162:	4b1a      	ldr	r3, [pc, #104]	; (80081cc <HAL_GPIO_Init+0x300>)
 8008164:	68db      	ldr	r3, [r3, #12]
 8008166:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	43db      	mvns	r3, r3
 800816c:	693a      	ldr	r2, [r7, #16]
 800816e:	4013      	ands	r3, r2
 8008170:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	685b      	ldr	r3, [r3, #4]
 8008176:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800817a:	2b00      	cmp	r3, #0
 800817c:	d003      	beq.n	8008186 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800817e:	693a      	ldr	r2, [r7, #16]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	4313      	orrs	r3, r2
 8008184:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008186:	4a11      	ldr	r2, [pc, #68]	; (80081cc <HAL_GPIO_Init+0x300>)
 8008188:	693b      	ldr	r3, [r7, #16]
 800818a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	3301      	adds	r3, #1
 8008190:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008192:	683b      	ldr	r3, [r7, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	fa22 f303 	lsr.w	r3, r2, r3
 800819c:	2b00      	cmp	r3, #0
 800819e:	f47f ae9d 	bne.w	8007edc <HAL_GPIO_Init+0x10>
  }
}
 80081a2:	bf00      	nop
 80081a4:	371c      	adds	r7, #28
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	40021000 	.word	0x40021000
 80081b4:	40010000 	.word	0x40010000
 80081b8:	48000400 	.word	0x48000400
 80081bc:	48000800 	.word	0x48000800
 80081c0:	48000c00 	.word	0x48000c00
 80081c4:	48001000 	.word	0x48001000
 80081c8:	48001400 	.word	0x48001400
 80081cc:	40010400 	.word	0x40010400

080081d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80081d0:	b480      	push	{r7}
 80081d2:	b085      	sub	sp, #20
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
 80081d8:	460b      	mov	r3, r1
 80081da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	691a      	ldr	r2, [r3, #16]
 80081e0:	887b      	ldrh	r3, [r7, #2]
 80081e2:	4013      	ands	r3, r2
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d002      	beq.n	80081ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80081e8:	2301      	movs	r3, #1
 80081ea:	73fb      	strb	r3, [r7, #15]
 80081ec:	e001      	b.n	80081f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80081ee:	2300      	movs	r3, #0
 80081f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80081f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3714      	adds	r7, #20
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
 8008208:	460b      	mov	r3, r1
 800820a:	807b      	strh	r3, [r7, #2]
 800820c:	4613      	mov	r3, r2
 800820e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008210:	787b      	ldrb	r3, [r7, #1]
 8008212:	2b00      	cmp	r3, #0
 8008214:	d003      	beq.n	800821e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008216:	887a      	ldrh	r2, [r7, #2]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800821c:	e002      	b.n	8008224 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800821e:	887a      	ldrh	r2, [r7, #2]
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008230:	b480      	push	{r7}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d141      	bne.n	80082c2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800823e:	4b4b      	ldr	r3, [pc, #300]	; (800836c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008246:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800824a:	d131      	bne.n	80082b0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800824c:	4b47      	ldr	r3, [pc, #284]	; (800836c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800824e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008252:	4a46      	ldr	r2, [pc, #280]	; (800836c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008254:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008258:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800825c:	4b43      	ldr	r3, [pc, #268]	; (800836c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008264:	4a41      	ldr	r2, [pc, #260]	; (800836c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008266:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800826a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800826c:	4b40      	ldr	r3, [pc, #256]	; (8008370 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2232      	movs	r2, #50	; 0x32
 8008272:	fb02 f303 	mul.w	r3, r2, r3
 8008276:	4a3f      	ldr	r2, [pc, #252]	; (8008374 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008278:	fba2 2303 	umull	r2, r3, r2, r3
 800827c:	0c9b      	lsrs	r3, r3, #18
 800827e:	3301      	adds	r3, #1
 8008280:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008282:	e002      	b.n	800828a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	3b01      	subs	r3, #1
 8008288:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800828a:	4b38      	ldr	r3, [pc, #224]	; (800836c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800828c:	695b      	ldr	r3, [r3, #20]
 800828e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008292:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008296:	d102      	bne.n	800829e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d1f2      	bne.n	8008284 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800829e:	4b33      	ldr	r3, [pc, #204]	; (800836c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082a0:	695b      	ldr	r3, [r3, #20]
 80082a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082aa:	d158      	bne.n	800835e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80082ac:	2303      	movs	r3, #3
 80082ae:	e057      	b.n	8008360 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80082b0:	4b2e      	ldr	r3, [pc, #184]	; (800836c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082b6:	4a2d      	ldr	r2, [pc, #180]	; (800836c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80082c0:	e04d      	b.n	800835e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082c8:	d141      	bne.n	800834e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80082ca:	4b28      	ldr	r3, [pc, #160]	; (800836c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80082d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082d6:	d131      	bne.n	800833c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80082d8:	4b24      	ldr	r3, [pc, #144]	; (800836c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80082de:	4a23      	ldr	r2, [pc, #140]	; (800836c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80082e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80082e8:	4b20      	ldr	r3, [pc, #128]	; (800836c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80082f0:	4a1e      	ldr	r2, [pc, #120]	; (800836c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80082f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80082f6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80082f8:	4b1d      	ldr	r3, [pc, #116]	; (8008370 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2232      	movs	r2, #50	; 0x32
 80082fe:	fb02 f303 	mul.w	r3, r2, r3
 8008302:	4a1c      	ldr	r2, [pc, #112]	; (8008374 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008304:	fba2 2303 	umull	r2, r3, r2, r3
 8008308:	0c9b      	lsrs	r3, r3, #18
 800830a:	3301      	adds	r3, #1
 800830c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800830e:	e002      	b.n	8008316 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	3b01      	subs	r3, #1
 8008314:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008316:	4b15      	ldr	r3, [pc, #84]	; (800836c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008318:	695b      	ldr	r3, [r3, #20]
 800831a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800831e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008322:	d102      	bne.n	800832a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d1f2      	bne.n	8008310 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800832a:	4b10      	ldr	r3, [pc, #64]	; (800836c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800832c:	695b      	ldr	r3, [r3, #20]
 800832e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008336:	d112      	bne.n	800835e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008338:	2303      	movs	r3, #3
 800833a:	e011      	b.n	8008360 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800833c:	4b0b      	ldr	r3, [pc, #44]	; (800836c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800833e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008342:	4a0a      	ldr	r2, [pc, #40]	; (800836c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008348:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800834c:	e007      	b.n	800835e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800834e:	4b07      	ldr	r3, [pc, #28]	; (800836c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008356:	4a05      	ldr	r2, [pc, #20]	; (800836c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008358:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800835c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800835e:	2300      	movs	r3, #0
}
 8008360:	4618      	mov	r0, r3
 8008362:	3714      	adds	r7, #20
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr
 800836c:	40007000 	.word	0x40007000
 8008370:	200001c0 	.word	0x200001c0
 8008374:	431bde83 	.word	0x431bde83

08008378 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b088      	sub	sp, #32
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	2b00      	cmp	r3, #0
 8008384:	d101      	bne.n	800838a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008386:	2301      	movs	r3, #1
 8008388:	e308      	b.n	800899c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f003 0301 	and.w	r3, r3, #1
 8008392:	2b00      	cmp	r3, #0
 8008394:	d075      	beq.n	8008482 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008396:	4ba3      	ldr	r3, [pc, #652]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 8008398:	689b      	ldr	r3, [r3, #8]
 800839a:	f003 030c 	and.w	r3, r3, #12
 800839e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80083a0:	4ba0      	ldr	r3, [pc, #640]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 80083a2:	68db      	ldr	r3, [r3, #12]
 80083a4:	f003 0303 	and.w	r3, r3, #3
 80083a8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	2b0c      	cmp	r3, #12
 80083ae:	d102      	bne.n	80083b6 <HAL_RCC_OscConfig+0x3e>
 80083b0:	697b      	ldr	r3, [r7, #20]
 80083b2:	2b03      	cmp	r3, #3
 80083b4:	d002      	beq.n	80083bc <HAL_RCC_OscConfig+0x44>
 80083b6:	69bb      	ldr	r3, [r7, #24]
 80083b8:	2b08      	cmp	r3, #8
 80083ba:	d10b      	bne.n	80083d4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80083bc:	4b99      	ldr	r3, [pc, #612]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083c4:	2b00      	cmp	r3, #0
 80083c6:	d05b      	beq.n	8008480 <HAL_RCC_OscConfig+0x108>
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d157      	bne.n	8008480 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80083d0:	2301      	movs	r3, #1
 80083d2:	e2e3      	b.n	800899c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083dc:	d106      	bne.n	80083ec <HAL_RCC_OscConfig+0x74>
 80083de:	4b91      	ldr	r3, [pc, #580]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	4a90      	ldr	r2, [pc, #576]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 80083e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80083e8:	6013      	str	r3, [r2, #0]
 80083ea:	e01d      	b.n	8008428 <HAL_RCC_OscConfig+0xb0>
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083f4:	d10c      	bne.n	8008410 <HAL_RCC_OscConfig+0x98>
 80083f6:	4b8b      	ldr	r3, [pc, #556]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	4a8a      	ldr	r2, [pc, #552]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 80083fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008400:	6013      	str	r3, [r2, #0]
 8008402:	4b88      	ldr	r3, [pc, #544]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a87      	ldr	r2, [pc, #540]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 8008408:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800840c:	6013      	str	r3, [r2, #0]
 800840e:	e00b      	b.n	8008428 <HAL_RCC_OscConfig+0xb0>
 8008410:	4b84      	ldr	r3, [pc, #528]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	4a83      	ldr	r2, [pc, #524]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 8008416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800841a:	6013      	str	r3, [r2, #0]
 800841c:	4b81      	ldr	r3, [pc, #516]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a80      	ldr	r2, [pc, #512]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 8008422:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008426:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d013      	beq.n	8008458 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008430:	f7fd f9ee 	bl	8005810 <HAL_GetTick>
 8008434:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008436:	e008      	b.n	800844a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008438:	f7fd f9ea 	bl	8005810 <HAL_GetTick>
 800843c:	4602      	mov	r2, r0
 800843e:	693b      	ldr	r3, [r7, #16]
 8008440:	1ad3      	subs	r3, r2, r3
 8008442:	2b64      	cmp	r3, #100	; 0x64
 8008444:	d901      	bls.n	800844a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008446:	2303      	movs	r3, #3
 8008448:	e2a8      	b.n	800899c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800844a:	4b76      	ldr	r3, [pc, #472]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008452:	2b00      	cmp	r3, #0
 8008454:	d0f0      	beq.n	8008438 <HAL_RCC_OscConfig+0xc0>
 8008456:	e014      	b.n	8008482 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008458:	f7fd f9da 	bl	8005810 <HAL_GetTick>
 800845c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800845e:	e008      	b.n	8008472 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008460:	f7fd f9d6 	bl	8005810 <HAL_GetTick>
 8008464:	4602      	mov	r2, r0
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	1ad3      	subs	r3, r2, r3
 800846a:	2b64      	cmp	r3, #100	; 0x64
 800846c:	d901      	bls.n	8008472 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800846e:	2303      	movs	r3, #3
 8008470:	e294      	b.n	800899c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008472:	4b6c      	ldr	r3, [pc, #432]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d1f0      	bne.n	8008460 <HAL_RCC_OscConfig+0xe8>
 800847e:	e000      	b.n	8008482 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008480:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	f003 0302 	and.w	r3, r3, #2
 800848a:	2b00      	cmp	r3, #0
 800848c:	d075      	beq.n	800857a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800848e:	4b65      	ldr	r3, [pc, #404]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	f003 030c 	and.w	r3, r3, #12
 8008496:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008498:	4b62      	ldr	r3, [pc, #392]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 800849a:	68db      	ldr	r3, [r3, #12]
 800849c:	f003 0303 	and.w	r3, r3, #3
 80084a0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80084a2:	69bb      	ldr	r3, [r7, #24]
 80084a4:	2b0c      	cmp	r3, #12
 80084a6:	d102      	bne.n	80084ae <HAL_RCC_OscConfig+0x136>
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d002      	beq.n	80084b4 <HAL_RCC_OscConfig+0x13c>
 80084ae:	69bb      	ldr	r3, [r7, #24]
 80084b0:	2b04      	cmp	r3, #4
 80084b2:	d11f      	bne.n	80084f4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80084b4:	4b5b      	ldr	r3, [pc, #364]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d005      	beq.n	80084cc <HAL_RCC_OscConfig+0x154>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	68db      	ldr	r3, [r3, #12]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d101      	bne.n	80084cc <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80084c8:	2301      	movs	r3, #1
 80084ca:	e267      	b.n	800899c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80084cc:	4b55      	ldr	r3, [pc, #340]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	691b      	ldr	r3, [r3, #16]
 80084d8:	061b      	lsls	r3, r3, #24
 80084da:	4952      	ldr	r1, [pc, #328]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 80084dc:	4313      	orrs	r3, r2
 80084de:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80084e0:	4b51      	ldr	r3, [pc, #324]	; (8008628 <HAL_RCC_OscConfig+0x2b0>)
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	4618      	mov	r0, r3
 80084e6:	f7fd f947 	bl	8005778 <HAL_InitTick>
 80084ea:	4603      	mov	r3, r0
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d043      	beq.n	8008578 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80084f0:	2301      	movs	r3, #1
 80084f2:	e253      	b.n	800899c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d023      	beq.n	8008544 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80084fc:	4b49      	ldr	r3, [pc, #292]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	4a48      	ldr	r2, [pc, #288]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 8008502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008506:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008508:	f7fd f982 	bl	8005810 <HAL_GetTick>
 800850c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800850e:	e008      	b.n	8008522 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008510:	f7fd f97e 	bl	8005810 <HAL_GetTick>
 8008514:	4602      	mov	r2, r0
 8008516:	693b      	ldr	r3, [r7, #16]
 8008518:	1ad3      	subs	r3, r2, r3
 800851a:	2b02      	cmp	r3, #2
 800851c:	d901      	bls.n	8008522 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800851e:	2303      	movs	r3, #3
 8008520:	e23c      	b.n	800899c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008522:	4b40      	ldr	r3, [pc, #256]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800852a:	2b00      	cmp	r3, #0
 800852c:	d0f0      	beq.n	8008510 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800852e:	4b3d      	ldr	r3, [pc, #244]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	691b      	ldr	r3, [r3, #16]
 800853a:	061b      	lsls	r3, r3, #24
 800853c:	4939      	ldr	r1, [pc, #228]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 800853e:	4313      	orrs	r3, r2
 8008540:	604b      	str	r3, [r1, #4]
 8008542:	e01a      	b.n	800857a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008544:	4b37      	ldr	r3, [pc, #220]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	4a36      	ldr	r2, [pc, #216]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 800854a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800854e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008550:	f7fd f95e 	bl	8005810 <HAL_GetTick>
 8008554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008556:	e008      	b.n	800856a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008558:	f7fd f95a 	bl	8005810 <HAL_GetTick>
 800855c:	4602      	mov	r2, r0
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	1ad3      	subs	r3, r2, r3
 8008562:	2b02      	cmp	r3, #2
 8008564:	d901      	bls.n	800856a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8008566:	2303      	movs	r3, #3
 8008568:	e218      	b.n	800899c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800856a:	4b2e      	ldr	r3, [pc, #184]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008572:	2b00      	cmp	r3, #0
 8008574:	d1f0      	bne.n	8008558 <HAL_RCC_OscConfig+0x1e0>
 8008576:	e000      	b.n	800857a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008578:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 0308 	and.w	r3, r3, #8
 8008582:	2b00      	cmp	r3, #0
 8008584:	d03c      	beq.n	8008600 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	695b      	ldr	r3, [r3, #20]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d01c      	beq.n	80085c8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800858e:	4b25      	ldr	r3, [pc, #148]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 8008590:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008594:	4a23      	ldr	r2, [pc, #140]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 8008596:	f043 0301 	orr.w	r3, r3, #1
 800859a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800859e:	f7fd f937 	bl	8005810 <HAL_GetTick>
 80085a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80085a4:	e008      	b.n	80085b8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085a6:	f7fd f933 	bl	8005810 <HAL_GetTick>
 80085aa:	4602      	mov	r2, r0
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	1ad3      	subs	r3, r2, r3
 80085b0:	2b02      	cmp	r3, #2
 80085b2:	d901      	bls.n	80085b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80085b4:	2303      	movs	r3, #3
 80085b6:	e1f1      	b.n	800899c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80085b8:	4b1a      	ldr	r3, [pc, #104]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 80085ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085be:	f003 0302 	and.w	r3, r3, #2
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d0ef      	beq.n	80085a6 <HAL_RCC_OscConfig+0x22e>
 80085c6:	e01b      	b.n	8008600 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80085c8:	4b16      	ldr	r3, [pc, #88]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 80085ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085ce:	4a15      	ldr	r2, [pc, #84]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 80085d0:	f023 0301 	bic.w	r3, r3, #1
 80085d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80085d8:	f7fd f91a 	bl	8005810 <HAL_GetTick>
 80085dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80085de:	e008      	b.n	80085f2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80085e0:	f7fd f916 	bl	8005810 <HAL_GetTick>
 80085e4:	4602      	mov	r2, r0
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	1ad3      	subs	r3, r2, r3
 80085ea:	2b02      	cmp	r3, #2
 80085ec:	d901      	bls.n	80085f2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 80085ee:	2303      	movs	r3, #3
 80085f0:	e1d4      	b.n	800899c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80085f2:	4b0c      	ldr	r3, [pc, #48]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 80085f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80085f8:	f003 0302 	and.w	r3, r3, #2
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d1ef      	bne.n	80085e0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 0304 	and.w	r3, r3, #4
 8008608:	2b00      	cmp	r3, #0
 800860a:	f000 80ab 	beq.w	8008764 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800860e:	2300      	movs	r3, #0
 8008610:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008612:	4b04      	ldr	r3, [pc, #16]	; (8008624 <HAL_RCC_OscConfig+0x2ac>)
 8008614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d106      	bne.n	800862c <HAL_RCC_OscConfig+0x2b4>
 800861e:	2301      	movs	r3, #1
 8008620:	e005      	b.n	800862e <HAL_RCC_OscConfig+0x2b6>
 8008622:	bf00      	nop
 8008624:	40021000 	.word	0x40021000
 8008628:	200001c4 	.word	0x200001c4
 800862c:	2300      	movs	r3, #0
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00d      	beq.n	800864e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008632:	4baf      	ldr	r3, [pc, #700]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 8008634:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008636:	4aae      	ldr	r2, [pc, #696]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 8008638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800863c:	6593      	str	r3, [r2, #88]	; 0x58
 800863e:	4bac      	ldr	r3, [pc, #688]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 8008640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008646:	60fb      	str	r3, [r7, #12]
 8008648:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800864a:	2301      	movs	r3, #1
 800864c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800864e:	4ba9      	ldr	r3, [pc, #676]	; (80088f4 <HAL_RCC_OscConfig+0x57c>)
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008656:	2b00      	cmp	r3, #0
 8008658:	d118      	bne.n	800868c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800865a:	4ba6      	ldr	r3, [pc, #664]	; (80088f4 <HAL_RCC_OscConfig+0x57c>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	4aa5      	ldr	r2, [pc, #660]	; (80088f4 <HAL_RCC_OscConfig+0x57c>)
 8008660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008666:	f7fd f8d3 	bl	8005810 <HAL_GetTick>
 800866a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800866c:	e008      	b.n	8008680 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800866e:	f7fd f8cf 	bl	8005810 <HAL_GetTick>
 8008672:	4602      	mov	r2, r0
 8008674:	693b      	ldr	r3, [r7, #16]
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	2b02      	cmp	r3, #2
 800867a:	d901      	bls.n	8008680 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800867c:	2303      	movs	r3, #3
 800867e:	e18d      	b.n	800899c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008680:	4b9c      	ldr	r3, [pc, #624]	; (80088f4 <HAL_RCC_OscConfig+0x57c>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008688:	2b00      	cmp	r3, #0
 800868a:	d0f0      	beq.n	800866e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	2b01      	cmp	r3, #1
 8008692:	d108      	bne.n	80086a6 <HAL_RCC_OscConfig+0x32e>
 8008694:	4b96      	ldr	r3, [pc, #600]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 8008696:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800869a:	4a95      	ldr	r2, [pc, #596]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 800869c:	f043 0301 	orr.w	r3, r3, #1
 80086a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80086a4:	e024      	b.n	80086f0 <HAL_RCC_OscConfig+0x378>
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	689b      	ldr	r3, [r3, #8]
 80086aa:	2b05      	cmp	r3, #5
 80086ac:	d110      	bne.n	80086d0 <HAL_RCC_OscConfig+0x358>
 80086ae:	4b90      	ldr	r3, [pc, #576]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 80086b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086b4:	4a8e      	ldr	r2, [pc, #568]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 80086b6:	f043 0304 	orr.w	r3, r3, #4
 80086ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80086be:	4b8c      	ldr	r3, [pc, #560]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 80086c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086c4:	4a8a      	ldr	r2, [pc, #552]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 80086c6:	f043 0301 	orr.w	r3, r3, #1
 80086ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80086ce:	e00f      	b.n	80086f0 <HAL_RCC_OscConfig+0x378>
 80086d0:	4b87      	ldr	r3, [pc, #540]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 80086d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086d6:	4a86      	ldr	r2, [pc, #536]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 80086d8:	f023 0301 	bic.w	r3, r3, #1
 80086dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80086e0:	4b83      	ldr	r3, [pc, #524]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 80086e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086e6:	4a82      	ldr	r2, [pc, #520]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 80086e8:	f023 0304 	bic.w	r3, r3, #4
 80086ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d016      	beq.n	8008726 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80086f8:	f7fd f88a 	bl	8005810 <HAL_GetTick>
 80086fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086fe:	e00a      	b.n	8008716 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008700:	f7fd f886 	bl	8005810 <HAL_GetTick>
 8008704:	4602      	mov	r2, r0
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	f241 3288 	movw	r2, #5000	; 0x1388
 800870e:	4293      	cmp	r3, r2
 8008710:	d901      	bls.n	8008716 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8008712:	2303      	movs	r3, #3
 8008714:	e142      	b.n	800899c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008716:	4b76      	ldr	r3, [pc, #472]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 8008718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800871c:	f003 0302 	and.w	r3, r3, #2
 8008720:	2b00      	cmp	r3, #0
 8008722:	d0ed      	beq.n	8008700 <HAL_RCC_OscConfig+0x388>
 8008724:	e015      	b.n	8008752 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008726:	f7fd f873 	bl	8005810 <HAL_GetTick>
 800872a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800872c:	e00a      	b.n	8008744 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800872e:	f7fd f86f 	bl	8005810 <HAL_GetTick>
 8008732:	4602      	mov	r2, r0
 8008734:	693b      	ldr	r3, [r7, #16]
 8008736:	1ad3      	subs	r3, r2, r3
 8008738:	f241 3288 	movw	r2, #5000	; 0x1388
 800873c:	4293      	cmp	r3, r2
 800873e:	d901      	bls.n	8008744 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8008740:	2303      	movs	r3, #3
 8008742:	e12b      	b.n	800899c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008744:	4b6a      	ldr	r3, [pc, #424]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 8008746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800874a:	f003 0302 	and.w	r3, r3, #2
 800874e:	2b00      	cmp	r3, #0
 8008750:	d1ed      	bne.n	800872e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008752:	7ffb      	ldrb	r3, [r7, #31]
 8008754:	2b01      	cmp	r3, #1
 8008756:	d105      	bne.n	8008764 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008758:	4b65      	ldr	r3, [pc, #404]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 800875a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800875c:	4a64      	ldr	r2, [pc, #400]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 800875e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008762:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f003 0320 	and.w	r3, r3, #32
 800876c:	2b00      	cmp	r3, #0
 800876e:	d03c      	beq.n	80087ea <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	2b00      	cmp	r3, #0
 8008776:	d01c      	beq.n	80087b2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008778:	4b5d      	ldr	r3, [pc, #372]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 800877a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800877e:	4a5c      	ldr	r2, [pc, #368]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 8008780:	f043 0301 	orr.w	r3, r3, #1
 8008784:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008788:	f7fd f842 	bl	8005810 <HAL_GetTick>
 800878c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800878e:	e008      	b.n	80087a2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008790:	f7fd f83e 	bl	8005810 <HAL_GetTick>
 8008794:	4602      	mov	r2, r0
 8008796:	693b      	ldr	r3, [r7, #16]
 8008798:	1ad3      	subs	r3, r2, r3
 800879a:	2b02      	cmp	r3, #2
 800879c:	d901      	bls.n	80087a2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800879e:	2303      	movs	r3, #3
 80087a0:	e0fc      	b.n	800899c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80087a2:	4b53      	ldr	r3, [pc, #332]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 80087a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80087a8:	f003 0302 	and.w	r3, r3, #2
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d0ef      	beq.n	8008790 <HAL_RCC_OscConfig+0x418>
 80087b0:	e01b      	b.n	80087ea <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80087b2:	4b4f      	ldr	r3, [pc, #316]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 80087b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80087b8:	4a4d      	ldr	r2, [pc, #308]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 80087ba:	f023 0301 	bic.w	r3, r3, #1
 80087be:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80087c2:	f7fd f825 	bl	8005810 <HAL_GetTick>
 80087c6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80087c8:	e008      	b.n	80087dc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80087ca:	f7fd f821 	bl	8005810 <HAL_GetTick>
 80087ce:	4602      	mov	r2, r0
 80087d0:	693b      	ldr	r3, [r7, #16]
 80087d2:	1ad3      	subs	r3, r2, r3
 80087d4:	2b02      	cmp	r3, #2
 80087d6:	d901      	bls.n	80087dc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80087d8:	2303      	movs	r3, #3
 80087da:	e0df      	b.n	800899c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80087dc:	4b44      	ldr	r3, [pc, #272]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 80087de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80087e2:	f003 0302 	and.w	r3, r3, #2
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d1ef      	bne.n	80087ca <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	69db      	ldr	r3, [r3, #28]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	f000 80d3 	beq.w	800899a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80087f4:	4b3e      	ldr	r3, [pc, #248]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 80087f6:	689b      	ldr	r3, [r3, #8]
 80087f8:	f003 030c 	and.w	r3, r3, #12
 80087fc:	2b0c      	cmp	r3, #12
 80087fe:	f000 808d 	beq.w	800891c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	69db      	ldr	r3, [r3, #28]
 8008806:	2b02      	cmp	r3, #2
 8008808:	d15a      	bne.n	80088c0 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800880a:	4b39      	ldr	r3, [pc, #228]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	4a38      	ldr	r2, [pc, #224]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 8008810:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008816:	f7fc fffb 	bl	8005810 <HAL_GetTick>
 800881a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800881c:	e008      	b.n	8008830 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800881e:	f7fc fff7 	bl	8005810 <HAL_GetTick>
 8008822:	4602      	mov	r2, r0
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	1ad3      	subs	r3, r2, r3
 8008828:	2b02      	cmp	r3, #2
 800882a:	d901      	bls.n	8008830 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800882c:	2303      	movs	r3, #3
 800882e:	e0b5      	b.n	800899c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008830:	4b2f      	ldr	r3, [pc, #188]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008838:	2b00      	cmp	r3, #0
 800883a:	d1f0      	bne.n	800881e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800883c:	4b2c      	ldr	r3, [pc, #176]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 800883e:	68da      	ldr	r2, [r3, #12]
 8008840:	4b2d      	ldr	r3, [pc, #180]	; (80088f8 <HAL_RCC_OscConfig+0x580>)
 8008842:	4013      	ands	r3, r2
 8008844:	687a      	ldr	r2, [r7, #4]
 8008846:	6a11      	ldr	r1, [r2, #32]
 8008848:	687a      	ldr	r2, [r7, #4]
 800884a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800884c:	3a01      	subs	r2, #1
 800884e:	0112      	lsls	r2, r2, #4
 8008850:	4311      	orrs	r1, r2
 8008852:	687a      	ldr	r2, [r7, #4]
 8008854:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8008856:	0212      	lsls	r2, r2, #8
 8008858:	4311      	orrs	r1, r2
 800885a:	687a      	ldr	r2, [r7, #4]
 800885c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800885e:	0852      	lsrs	r2, r2, #1
 8008860:	3a01      	subs	r2, #1
 8008862:	0552      	lsls	r2, r2, #21
 8008864:	4311      	orrs	r1, r2
 8008866:	687a      	ldr	r2, [r7, #4]
 8008868:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800886a:	0852      	lsrs	r2, r2, #1
 800886c:	3a01      	subs	r2, #1
 800886e:	0652      	lsls	r2, r2, #25
 8008870:	4311      	orrs	r1, r2
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008876:	06d2      	lsls	r2, r2, #27
 8008878:	430a      	orrs	r2, r1
 800887a:	491d      	ldr	r1, [pc, #116]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 800887c:	4313      	orrs	r3, r2
 800887e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008880:	4b1b      	ldr	r3, [pc, #108]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a1a      	ldr	r2, [pc, #104]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 8008886:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800888a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800888c:	4b18      	ldr	r3, [pc, #96]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	4a17      	ldr	r2, [pc, #92]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 8008892:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008896:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008898:	f7fc ffba 	bl	8005810 <HAL_GetTick>
 800889c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800889e:	e008      	b.n	80088b2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088a0:	f7fc ffb6 	bl	8005810 <HAL_GetTick>
 80088a4:	4602      	mov	r2, r0
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d901      	bls.n	80088b2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80088ae:	2303      	movs	r3, #3
 80088b0:	e074      	b.n	800899c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80088b2:	4b0f      	ldr	r3, [pc, #60]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d0f0      	beq.n	80088a0 <HAL_RCC_OscConfig+0x528>
 80088be:	e06c      	b.n	800899a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088c0:	4b0b      	ldr	r3, [pc, #44]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a0a      	ldr	r2, [pc, #40]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 80088c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80088ca:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80088cc:	4b08      	ldr	r3, [pc, #32]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	4a07      	ldr	r2, [pc, #28]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 80088d2:	f023 0303 	bic.w	r3, r3, #3
 80088d6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80088d8:	4b05      	ldr	r3, [pc, #20]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	4a04      	ldr	r2, [pc, #16]	; (80088f0 <HAL_RCC_OscConfig+0x578>)
 80088de:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80088e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088e6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088e8:	f7fc ff92 	bl	8005810 <HAL_GetTick>
 80088ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80088ee:	e00e      	b.n	800890e <HAL_RCC_OscConfig+0x596>
 80088f0:	40021000 	.word	0x40021000
 80088f4:	40007000 	.word	0x40007000
 80088f8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80088fc:	f7fc ff88 	bl	8005810 <HAL_GetTick>
 8008900:	4602      	mov	r2, r0
 8008902:	693b      	ldr	r3, [r7, #16]
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	2b02      	cmp	r3, #2
 8008908:	d901      	bls.n	800890e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800890a:	2303      	movs	r3, #3
 800890c:	e046      	b.n	800899c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800890e:	4b25      	ldr	r3, [pc, #148]	; (80089a4 <HAL_RCC_OscConfig+0x62c>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008916:	2b00      	cmp	r3, #0
 8008918:	d1f0      	bne.n	80088fc <HAL_RCC_OscConfig+0x584>
 800891a:	e03e      	b.n	800899a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	69db      	ldr	r3, [r3, #28]
 8008920:	2b01      	cmp	r3, #1
 8008922:	d101      	bne.n	8008928 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	e039      	b.n	800899c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8008928:	4b1e      	ldr	r3, [pc, #120]	; (80089a4 <HAL_RCC_OscConfig+0x62c>)
 800892a:	68db      	ldr	r3, [r3, #12]
 800892c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	f003 0203 	and.w	r2, r3, #3
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6a1b      	ldr	r3, [r3, #32]
 8008938:	429a      	cmp	r2, r3
 800893a:	d12c      	bne.n	8008996 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800893c:	697b      	ldr	r3, [r7, #20]
 800893e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008946:	3b01      	subs	r3, #1
 8008948:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800894a:	429a      	cmp	r2, r3
 800894c:	d123      	bne.n	8008996 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008958:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800895a:	429a      	cmp	r2, r3
 800895c:	d11b      	bne.n	8008996 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800895e:	697b      	ldr	r3, [r7, #20]
 8008960:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008968:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800896a:	429a      	cmp	r2, r3
 800896c:	d113      	bne.n	8008996 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800896e:	697b      	ldr	r3, [r7, #20]
 8008970:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008978:	085b      	lsrs	r3, r3, #1
 800897a:	3b01      	subs	r3, #1
 800897c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800897e:	429a      	cmp	r2, r3
 8008980:	d109      	bne.n	8008996 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008982:	697b      	ldr	r3, [r7, #20]
 8008984:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800898c:	085b      	lsrs	r3, r3, #1
 800898e:	3b01      	subs	r3, #1
 8008990:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008992:	429a      	cmp	r2, r3
 8008994:	d001      	beq.n	800899a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8008996:	2301      	movs	r3, #1
 8008998:	e000      	b.n	800899c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3720      	adds	r7, #32
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}
 80089a4:	40021000 	.word	0x40021000

080089a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b086      	sub	sp, #24
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80089b2:	2300      	movs	r3, #0
 80089b4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d101      	bne.n	80089c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	e11e      	b.n	8008bfe <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80089c0:	4b91      	ldr	r3, [pc, #580]	; (8008c08 <HAL_RCC_ClockConfig+0x260>)
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	f003 030f 	and.w	r3, r3, #15
 80089c8:	683a      	ldr	r2, [r7, #0]
 80089ca:	429a      	cmp	r2, r3
 80089cc:	d910      	bls.n	80089f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80089ce:	4b8e      	ldr	r3, [pc, #568]	; (8008c08 <HAL_RCC_ClockConfig+0x260>)
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f023 020f 	bic.w	r2, r3, #15
 80089d6:	498c      	ldr	r1, [pc, #560]	; (8008c08 <HAL_RCC_ClockConfig+0x260>)
 80089d8:	683b      	ldr	r3, [r7, #0]
 80089da:	4313      	orrs	r3, r2
 80089dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80089de:	4b8a      	ldr	r3, [pc, #552]	; (8008c08 <HAL_RCC_ClockConfig+0x260>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	f003 030f 	and.w	r3, r3, #15
 80089e6:	683a      	ldr	r2, [r7, #0]
 80089e8:	429a      	cmp	r2, r3
 80089ea:	d001      	beq.n	80089f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80089ec:	2301      	movs	r3, #1
 80089ee:	e106      	b.n	8008bfe <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f003 0301 	and.w	r3, r3, #1
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d073      	beq.n	8008ae4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	2b03      	cmp	r3, #3
 8008a02:	d129      	bne.n	8008a58 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008a04:	4b81      	ldr	r3, [pc, #516]	; (8008c0c <HAL_RCC_ClockConfig+0x264>)
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d101      	bne.n	8008a14 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8008a10:	2301      	movs	r3, #1
 8008a12:	e0f4      	b.n	8008bfe <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8008a14:	f000 f972 	bl	8008cfc <RCC_GetSysClockFreqFromPLLSource>
 8008a18:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8008a1a:	693b      	ldr	r3, [r7, #16]
 8008a1c:	4a7c      	ldr	r2, [pc, #496]	; (8008c10 <HAL_RCC_ClockConfig+0x268>)
 8008a1e:	4293      	cmp	r3, r2
 8008a20:	d93f      	bls.n	8008aa2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008a22:	4b7a      	ldr	r3, [pc, #488]	; (8008c0c <HAL_RCC_ClockConfig+0x264>)
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d009      	beq.n	8008a42 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d033      	beq.n	8008aa2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8008a3e:	2b00      	cmp	r3, #0
 8008a40:	d12f      	bne.n	8008aa2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008a42:	4b72      	ldr	r3, [pc, #456]	; (8008c0c <HAL_RCC_ClockConfig+0x264>)
 8008a44:	689b      	ldr	r3, [r3, #8]
 8008a46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a4a:	4a70      	ldr	r2, [pc, #448]	; (8008c0c <HAL_RCC_ClockConfig+0x264>)
 8008a4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a50:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8008a52:	2380      	movs	r3, #128	; 0x80
 8008a54:	617b      	str	r3, [r7, #20]
 8008a56:	e024      	b.n	8008aa2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	2b02      	cmp	r3, #2
 8008a5e:	d107      	bne.n	8008a70 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008a60:	4b6a      	ldr	r3, [pc, #424]	; (8008c0c <HAL_RCC_ClockConfig+0x264>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d109      	bne.n	8008a80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	e0c6      	b.n	8008bfe <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008a70:	4b66      	ldr	r3, [pc, #408]	; (8008c0c <HAL_RCC_ClockConfig+0x264>)
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d101      	bne.n	8008a80 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	e0be      	b.n	8008bfe <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8008a80:	f000 f8ce 	bl	8008c20 <HAL_RCC_GetSysClockFreq>
 8008a84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8008a86:	693b      	ldr	r3, [r7, #16]
 8008a88:	4a61      	ldr	r2, [pc, #388]	; (8008c10 <HAL_RCC_ClockConfig+0x268>)
 8008a8a:	4293      	cmp	r3, r2
 8008a8c:	d909      	bls.n	8008aa2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8008a8e:	4b5f      	ldr	r3, [pc, #380]	; (8008c0c <HAL_RCC_ClockConfig+0x264>)
 8008a90:	689b      	ldr	r3, [r3, #8]
 8008a92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a96:	4a5d      	ldr	r2, [pc, #372]	; (8008c0c <HAL_RCC_ClockConfig+0x264>)
 8008a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a9c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8008a9e:	2380      	movs	r3, #128	; 0x80
 8008aa0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008aa2:	4b5a      	ldr	r3, [pc, #360]	; (8008c0c <HAL_RCC_ClockConfig+0x264>)
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	f023 0203 	bic.w	r2, r3, #3
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	4957      	ldr	r1, [pc, #348]	; (8008c0c <HAL_RCC_ClockConfig+0x264>)
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ab4:	f7fc feac 	bl	8005810 <HAL_GetTick>
 8008ab8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008aba:	e00a      	b.n	8008ad2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008abc:	f7fc fea8 	bl	8005810 <HAL_GetTick>
 8008ac0:	4602      	mov	r2, r0
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	1ad3      	subs	r3, r2, r3
 8008ac6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d901      	bls.n	8008ad2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e095      	b.n	8008bfe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ad2:	4b4e      	ldr	r3, [pc, #312]	; (8008c0c <HAL_RCC_ClockConfig+0x264>)
 8008ad4:	689b      	ldr	r3, [r3, #8]
 8008ad6:	f003 020c 	and.w	r2, r3, #12
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	009b      	lsls	r3, r3, #2
 8008ae0:	429a      	cmp	r2, r3
 8008ae2:	d1eb      	bne.n	8008abc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f003 0302 	and.w	r3, r3, #2
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d023      	beq.n	8008b38 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	f003 0304 	and.w	r3, r3, #4
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d005      	beq.n	8008b08 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008afc:	4b43      	ldr	r3, [pc, #268]	; (8008c0c <HAL_RCC_ClockConfig+0x264>)
 8008afe:	689b      	ldr	r3, [r3, #8]
 8008b00:	4a42      	ldr	r2, [pc, #264]	; (8008c0c <HAL_RCC_ClockConfig+0x264>)
 8008b02:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008b06:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f003 0308 	and.w	r3, r3, #8
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d007      	beq.n	8008b24 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8008b14:	4b3d      	ldr	r3, [pc, #244]	; (8008c0c <HAL_RCC_ClockConfig+0x264>)
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8008b1c:	4a3b      	ldr	r2, [pc, #236]	; (8008c0c <HAL_RCC_ClockConfig+0x264>)
 8008b1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8008b22:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008b24:	4b39      	ldr	r3, [pc, #228]	; (8008c0c <HAL_RCC_ClockConfig+0x264>)
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	689b      	ldr	r3, [r3, #8]
 8008b30:	4936      	ldr	r1, [pc, #216]	; (8008c0c <HAL_RCC_ClockConfig+0x264>)
 8008b32:	4313      	orrs	r3, r2
 8008b34:	608b      	str	r3, [r1, #8]
 8008b36:	e008      	b.n	8008b4a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	2b80      	cmp	r3, #128	; 0x80
 8008b3c:	d105      	bne.n	8008b4a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8008b3e:	4b33      	ldr	r3, [pc, #204]	; (8008c0c <HAL_RCC_ClockConfig+0x264>)
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	4a32      	ldr	r2, [pc, #200]	; (8008c0c <HAL_RCC_ClockConfig+0x264>)
 8008b44:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b48:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008b4a:	4b2f      	ldr	r3, [pc, #188]	; (8008c08 <HAL_RCC_ClockConfig+0x260>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	f003 030f 	and.w	r3, r3, #15
 8008b52:	683a      	ldr	r2, [r7, #0]
 8008b54:	429a      	cmp	r2, r3
 8008b56:	d21d      	bcs.n	8008b94 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b58:	4b2b      	ldr	r3, [pc, #172]	; (8008c08 <HAL_RCC_ClockConfig+0x260>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f023 020f 	bic.w	r2, r3, #15
 8008b60:	4929      	ldr	r1, [pc, #164]	; (8008c08 <HAL_RCC_ClockConfig+0x260>)
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8008b68:	f7fc fe52 	bl	8005810 <HAL_GetTick>
 8008b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b6e:	e00a      	b.n	8008b86 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b70:	f7fc fe4e 	bl	8005810 <HAL_GetTick>
 8008b74:	4602      	mov	r2, r0
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	1ad3      	subs	r3, r2, r3
 8008b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b7e:	4293      	cmp	r3, r2
 8008b80:	d901      	bls.n	8008b86 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8008b82:	2303      	movs	r3, #3
 8008b84:	e03b      	b.n	8008bfe <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b86:	4b20      	ldr	r3, [pc, #128]	; (8008c08 <HAL_RCC_ClockConfig+0x260>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 030f 	and.w	r3, r3, #15
 8008b8e:	683a      	ldr	r2, [r7, #0]
 8008b90:	429a      	cmp	r2, r3
 8008b92:	d1ed      	bne.n	8008b70 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	f003 0304 	and.w	r3, r3, #4
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d008      	beq.n	8008bb2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008ba0:	4b1a      	ldr	r3, [pc, #104]	; (8008c0c <HAL_RCC_ClockConfig+0x264>)
 8008ba2:	689b      	ldr	r3, [r3, #8]
 8008ba4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	68db      	ldr	r3, [r3, #12]
 8008bac:	4917      	ldr	r1, [pc, #92]	; (8008c0c <HAL_RCC_ClockConfig+0x264>)
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	f003 0308 	and.w	r3, r3, #8
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d009      	beq.n	8008bd2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008bbe:	4b13      	ldr	r3, [pc, #76]	; (8008c0c <HAL_RCC_ClockConfig+0x264>)
 8008bc0:	689b      	ldr	r3, [r3, #8]
 8008bc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	691b      	ldr	r3, [r3, #16]
 8008bca:	00db      	lsls	r3, r3, #3
 8008bcc:	490f      	ldr	r1, [pc, #60]	; (8008c0c <HAL_RCC_ClockConfig+0x264>)
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008bd2:	f000 f825 	bl	8008c20 <HAL_RCC_GetSysClockFreq>
 8008bd6:	4601      	mov	r1, r0
 8008bd8:	4b0c      	ldr	r3, [pc, #48]	; (8008c0c <HAL_RCC_ClockConfig+0x264>)
 8008bda:	689b      	ldr	r3, [r3, #8]
 8008bdc:	091b      	lsrs	r3, r3, #4
 8008bde:	f003 030f 	and.w	r3, r3, #15
 8008be2:	4a0c      	ldr	r2, [pc, #48]	; (8008c14 <HAL_RCC_ClockConfig+0x26c>)
 8008be4:	5cd3      	ldrb	r3, [r2, r3]
 8008be6:	f003 031f 	and.w	r3, r3, #31
 8008bea:	fa21 f303 	lsr.w	r3, r1, r3
 8008bee:	4a0a      	ldr	r2, [pc, #40]	; (8008c18 <HAL_RCC_ClockConfig+0x270>)
 8008bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8008bf2:	4b0a      	ldr	r3, [pc, #40]	; (8008c1c <HAL_RCC_ClockConfig+0x274>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7fc fdbe 	bl	8005778 <HAL_InitTick>
 8008bfc:	4603      	mov	r3, r0
}
 8008bfe:	4618      	mov	r0, r3
 8008c00:	3718      	adds	r7, #24
 8008c02:	46bd      	mov	sp, r7
 8008c04:	bd80      	pop	{r7, pc}
 8008c06:	bf00      	nop
 8008c08:	40022000 	.word	0x40022000
 8008c0c:	40021000 	.word	0x40021000
 8008c10:	04c4b400 	.word	0x04c4b400
 8008c14:	0800eb60 	.word	0x0800eb60
 8008c18:	200001c0 	.word	0x200001c0
 8008c1c:	200001c4 	.word	0x200001c4

08008c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b087      	sub	sp, #28
 8008c24:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8008c26:	4b2c      	ldr	r3, [pc, #176]	; (8008cd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c28:	689b      	ldr	r3, [r3, #8]
 8008c2a:	f003 030c 	and.w	r3, r3, #12
 8008c2e:	2b04      	cmp	r3, #4
 8008c30:	d102      	bne.n	8008c38 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008c32:	4b2a      	ldr	r3, [pc, #168]	; (8008cdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8008c34:	613b      	str	r3, [r7, #16]
 8008c36:	e047      	b.n	8008cc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8008c38:	4b27      	ldr	r3, [pc, #156]	; (8008cd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c3a:	689b      	ldr	r3, [r3, #8]
 8008c3c:	f003 030c 	and.w	r3, r3, #12
 8008c40:	2b08      	cmp	r3, #8
 8008c42:	d102      	bne.n	8008c4a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008c44:	4b26      	ldr	r3, [pc, #152]	; (8008ce0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008c46:	613b      	str	r3, [r7, #16]
 8008c48:	e03e      	b.n	8008cc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8008c4a:	4b23      	ldr	r3, [pc, #140]	; (8008cd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f003 030c 	and.w	r3, r3, #12
 8008c52:	2b0c      	cmp	r3, #12
 8008c54:	d136      	bne.n	8008cc4 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008c56:	4b20      	ldr	r3, [pc, #128]	; (8008cd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	f003 0303 	and.w	r3, r3, #3
 8008c5e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008c60:	4b1d      	ldr	r3, [pc, #116]	; (8008cd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c62:	68db      	ldr	r3, [r3, #12]
 8008c64:	091b      	lsrs	r3, r3, #4
 8008c66:	f003 030f 	and.w	r3, r3, #15
 8008c6a:	3301      	adds	r3, #1
 8008c6c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	2b03      	cmp	r3, #3
 8008c72:	d10c      	bne.n	8008c8e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008c74:	4a1a      	ldr	r2, [pc, #104]	; (8008ce0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8008c76:	68bb      	ldr	r3, [r7, #8]
 8008c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c7c:	4a16      	ldr	r2, [pc, #88]	; (8008cd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c7e:	68d2      	ldr	r2, [r2, #12]
 8008c80:	0a12      	lsrs	r2, r2, #8
 8008c82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008c86:	fb02 f303 	mul.w	r3, r2, r3
 8008c8a:	617b      	str	r3, [r7, #20]
      break;
 8008c8c:	e00c      	b.n	8008ca8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008c8e:	4a13      	ldr	r2, [pc, #76]	; (8008cdc <HAL_RCC_GetSysClockFreq+0xbc>)
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008c96:	4a10      	ldr	r2, [pc, #64]	; (8008cd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008c98:	68d2      	ldr	r2, [r2, #12]
 8008c9a:	0a12      	lsrs	r2, r2, #8
 8008c9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008ca0:	fb02 f303 	mul.w	r3, r2, r3
 8008ca4:	617b      	str	r3, [r7, #20]
      break;
 8008ca6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008ca8:	4b0b      	ldr	r3, [pc, #44]	; (8008cd8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	0e5b      	lsrs	r3, r3, #25
 8008cae:	f003 0303 	and.w	r3, r3, #3
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	005b      	lsls	r3, r3, #1
 8008cb6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8008cb8:	697a      	ldr	r2, [r7, #20]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cc0:	613b      	str	r3, [r7, #16]
 8008cc2:	e001      	b.n	8008cc8 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8008cc8:	693b      	ldr	r3, [r7, #16]
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	371c      	adds	r7, #28
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr
 8008cd6:	bf00      	nop
 8008cd8:	40021000 	.word	0x40021000
 8008cdc:	00f42400 	.word	0x00f42400
 8008ce0:	007a1200 	.word	0x007a1200

08008ce4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ce8:	4b03      	ldr	r3, [pc, #12]	; (8008cf8 <HAL_RCC_GetHCLKFreq+0x14>)
 8008cea:	681b      	ldr	r3, [r3, #0]
}
 8008cec:	4618      	mov	r0, r3
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
 8008cf6:	bf00      	nop
 8008cf8:	200001c0 	.word	0x200001c0

08008cfc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8008cfc:	b480      	push	{r7}
 8008cfe:	b087      	sub	sp, #28
 8008d00:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008d02:	4b1e      	ldr	r3, [pc, #120]	; (8008d7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d04:	68db      	ldr	r3, [r3, #12]
 8008d06:	f003 0303 	and.w	r3, r3, #3
 8008d0a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008d0c:	4b1b      	ldr	r3, [pc, #108]	; (8008d7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d0e:	68db      	ldr	r3, [r3, #12]
 8008d10:	091b      	lsrs	r3, r3, #4
 8008d12:	f003 030f 	and.w	r3, r3, #15
 8008d16:	3301      	adds	r3, #1
 8008d18:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	2b03      	cmp	r3, #3
 8008d1e:	d10c      	bne.n	8008d3a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008d20:	4a17      	ldr	r2, [pc, #92]	; (8008d80 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d28:	4a14      	ldr	r2, [pc, #80]	; (8008d7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d2a:	68d2      	ldr	r2, [r2, #12]
 8008d2c:	0a12      	lsrs	r2, r2, #8
 8008d2e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008d32:	fb02 f303 	mul.w	r3, r2, r3
 8008d36:	617b      	str	r3, [r7, #20]
    break;
 8008d38:	e00c      	b.n	8008d54 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8008d3a:	4a12      	ldr	r2, [pc, #72]	; (8008d84 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d42:	4a0e      	ldr	r2, [pc, #56]	; (8008d7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d44:	68d2      	ldr	r2, [r2, #12]
 8008d46:	0a12      	lsrs	r2, r2, #8
 8008d48:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008d4c:	fb02 f303 	mul.w	r3, r2, r3
 8008d50:	617b      	str	r3, [r7, #20]
    break;
 8008d52:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008d54:	4b09      	ldr	r3, [pc, #36]	; (8008d7c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8008d56:	68db      	ldr	r3, [r3, #12]
 8008d58:	0e5b      	lsrs	r3, r3, #25
 8008d5a:	f003 0303 	and.w	r3, r3, #3
 8008d5e:	3301      	adds	r3, #1
 8008d60:	005b      	lsls	r3, r3, #1
 8008d62:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d6c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8008d6e:	687b      	ldr	r3, [r7, #4]
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	371c      	adds	r7, #28
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr
 8008d7c:	40021000 	.word	0x40021000
 8008d80:	007a1200 	.word	0x007a1200
 8008d84:	00f42400 	.word	0x00f42400

08008d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b086      	sub	sp, #24
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008d90:	2300      	movs	r3, #0
 8008d92:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8008d94:	2300      	movs	r3, #0
 8008d96:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	f000 8098 	beq.w	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008da6:	2300      	movs	r3, #0
 8008da8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008daa:	4b43      	ldr	r3, [pc, #268]	; (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d10d      	bne.n	8008dd2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008db6:	4b40      	ldr	r3, [pc, #256]	; (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dba:	4a3f      	ldr	r2, [pc, #252]	; (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008dbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dc0:	6593      	str	r3, [r2, #88]	; 0x58
 8008dc2:	4b3d      	ldr	r3, [pc, #244]	; (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008dc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dca:	60bb      	str	r3, [r7, #8]
 8008dcc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008dce:	2301      	movs	r3, #1
 8008dd0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008dd2:	4b3a      	ldr	r3, [pc, #232]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4a39      	ldr	r2, [pc, #228]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ddc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008dde:	f7fc fd17 	bl	8005810 <HAL_GetTick>
 8008de2:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008de4:	e009      	b.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008de6:	f7fc fd13 	bl	8005810 <HAL_GetTick>
 8008dea:	4602      	mov	r2, r0
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	1ad3      	subs	r3, r2, r3
 8008df0:	2b02      	cmp	r3, #2
 8008df2:	d902      	bls.n	8008dfa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8008df4:	2303      	movs	r3, #3
 8008df6:	74fb      	strb	r3, [r7, #19]
        break;
 8008df8:	e005      	b.n	8008e06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008dfa:	4b30      	ldr	r3, [pc, #192]	; (8008ebc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d0ef      	beq.n	8008de6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8008e06:	7cfb      	ldrb	r3, [r7, #19]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d159      	bne.n	8008ec0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8008e0c:	4b2a      	ldr	r3, [pc, #168]	; (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e16:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d01e      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e22:	697a      	ldr	r2, [r7, #20]
 8008e24:	429a      	cmp	r2, r3
 8008e26:	d019      	beq.n	8008e5c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8008e28:	4b23      	ldr	r3, [pc, #140]	; (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e32:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008e34:	4b20      	ldr	r3, [pc, #128]	; (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e3a:	4a1f      	ldr	r2, [pc, #124]	; (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008e44:	4b1c      	ldr	r3, [pc, #112]	; (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e4a:	4a1b      	ldr	r2, [pc, #108]	; (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008e50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008e54:	4a18      	ldr	r2, [pc, #96]	; (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008e5c:	697b      	ldr	r3, [r7, #20]
 8008e5e:	f003 0301 	and.w	r3, r3, #1
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d016      	beq.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e66:	f7fc fcd3 	bl	8005810 <HAL_GetTick>
 8008e6a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e6c:	e00b      	b.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e6e:	f7fc fccf 	bl	8005810 <HAL_GetTick>
 8008e72:	4602      	mov	r2, r0
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	1ad3      	subs	r3, r2, r3
 8008e78:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e7c:	4293      	cmp	r3, r2
 8008e7e:	d902      	bls.n	8008e86 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8008e80:	2303      	movs	r3, #3
 8008e82:	74fb      	strb	r3, [r7, #19]
            break;
 8008e84:	e006      	b.n	8008e94 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008e86:	4b0c      	ldr	r3, [pc, #48]	; (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008e8c:	f003 0302 	and.w	r3, r3, #2
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d0ec      	beq.n	8008e6e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8008e94:	7cfb      	ldrb	r3, [r7, #19]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d10b      	bne.n	8008eb2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008e9a:	4b07      	ldr	r3, [pc, #28]	; (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008ea0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ea8:	4903      	ldr	r1, [pc, #12]	; (8008eb8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8008eaa:	4313      	orrs	r3, r2
 8008eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008eb0:	e008      	b.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008eb2:	7cfb      	ldrb	r3, [r7, #19]
 8008eb4:	74bb      	strb	r3, [r7, #18]
 8008eb6:	e005      	b.n	8008ec4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8008eb8:	40021000 	.word	0x40021000
 8008ebc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ec0:	7cfb      	ldrb	r3, [r7, #19]
 8008ec2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008ec4:	7c7b      	ldrb	r3, [r7, #17]
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d105      	bne.n	8008ed6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008eca:	4baf      	ldr	r3, [pc, #700]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ece:	4aae      	ldr	r2, [pc, #696]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ed4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	f003 0301 	and.w	r3, r3, #1
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d00a      	beq.n	8008ef8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008ee2:	4ba9      	ldr	r3, [pc, #676]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ee8:	f023 0203 	bic.w	r2, r3, #3
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	49a5      	ldr	r1, [pc, #660]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 0302 	and.w	r3, r3, #2
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d00a      	beq.n	8008f1a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008f04:	4ba0      	ldr	r3, [pc, #640]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f0a:	f023 020c 	bic.w	r2, r3, #12
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	689b      	ldr	r3, [r3, #8]
 8008f12:	499d      	ldr	r1, [pc, #628]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f14:	4313      	orrs	r3, r2
 8008f16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f003 0304 	and.w	r3, r3, #4
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d00a      	beq.n	8008f3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008f26:	4b98      	ldr	r3, [pc, #608]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	4994      	ldr	r1, [pc, #592]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f36:	4313      	orrs	r3, r2
 8008f38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	f003 0308 	and.w	r3, r3, #8
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d00a      	beq.n	8008f5e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8008f48:	4b8f      	ldr	r3, [pc, #572]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	691b      	ldr	r3, [r3, #16]
 8008f56:	498c      	ldr	r1, [pc, #560]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f58:	4313      	orrs	r3, r2
 8008f5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	f003 0310 	and.w	r3, r3, #16
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d00a      	beq.n	8008f80 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008f6a:	4b87      	ldr	r3, [pc, #540]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	695b      	ldr	r3, [r3, #20]
 8008f78:	4983      	ldr	r1, [pc, #524]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f003 0320 	and.w	r3, r3, #32
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d00a      	beq.n	8008fa2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8008f8c:	4b7e      	ldr	r3, [pc, #504]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008f92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	497b      	ldr	r1, [pc, #492]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008f9c:	4313      	orrs	r3, r2
 8008f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d00a      	beq.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008fae:	4b76      	ldr	r3, [pc, #472]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fb4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	69db      	ldr	r3, [r3, #28]
 8008fbc:	4972      	ldr	r1, [pc, #456]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008fbe:	4313      	orrs	r3, r2
 8008fc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d00a      	beq.n	8008fe6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008fd0:	4b6d      	ldr	r3, [pc, #436]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008fd6:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	496a      	ldr	r1, [pc, #424]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fee:	2b00      	cmp	r3, #0
 8008ff0:	d00a      	beq.n	8009008 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008ff2:	4b65      	ldr	r3, [pc, #404]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8008ff4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ff8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009000:	4961      	ldr	r1, [pc, #388]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009002:	4313      	orrs	r3, r2
 8009004:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009010:	2b00      	cmp	r3, #0
 8009012:	d00a      	beq.n	800902a <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009014:	4b5c      	ldr	r3, [pc, #368]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009016:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800901a:	f023 0203 	bic.w	r2, r3, #3
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009022:	4959      	ldr	r1, [pc, #356]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009024:	4313      	orrs	r3, r2
 8009026:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009032:	2b00      	cmp	r3, #0
 8009034:	d00a      	beq.n	800904c <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009036:	4b54      	ldr	r3, [pc, #336]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800903c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009044:	4950      	ldr	r1, [pc, #320]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009046:	4313      	orrs	r3, r2
 8009048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009054:	2b00      	cmp	r3, #0
 8009056:	d015      	beq.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009058:	4b4b      	ldr	r3, [pc, #300]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800905a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800905e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009066:	4948      	ldr	r1, [pc, #288]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009068:	4313      	orrs	r3, r2
 800906a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009072:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009076:	d105      	bne.n	8009084 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009078:	4b43      	ldr	r3, [pc, #268]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	4a42      	ldr	r2, [pc, #264]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800907e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009082:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800908c:	2b00      	cmp	r3, #0
 800908e:	d015      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009090:	4b3d      	ldr	r3, [pc, #244]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009096:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800909e:	493a      	ldr	r1, [pc, #232]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80090a0:	4313      	orrs	r3, r2
 80090a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80090ae:	d105      	bne.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80090b0:	4b35      	ldr	r3, [pc, #212]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80090b2:	68db      	ldr	r3, [r3, #12]
 80090b4:	4a34      	ldr	r2, [pc, #208]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80090b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090ba:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d015      	beq.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80090c8:	4b2f      	ldr	r3, [pc, #188]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80090ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80090ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090d6:	492c      	ldr	r1, [pc, #176]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80090d8:	4313      	orrs	r3, r2
 80090da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80090e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80090e6:	d105      	bne.n	80090f4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80090e8:	4b27      	ldr	r3, [pc, #156]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80090ea:	68db      	ldr	r3, [r3, #12]
 80090ec:	4a26      	ldr	r2, [pc, #152]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80090ee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80090f2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d015      	beq.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009100:	4b21      	ldr	r3, [pc, #132]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009106:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800910e:	491e      	ldr	r1, [pc, #120]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009110:	4313      	orrs	r3, r2
 8009112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800911a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800911e:	d105      	bne.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009120:	4b19      	ldr	r3, [pc, #100]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	4a18      	ldr	r2, [pc, #96]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009126:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800912a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009134:	2b00      	cmp	r3, #0
 8009136:	d015      	beq.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009138:	4b13      	ldr	r3, [pc, #76]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800913a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800913e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009146:	4910      	ldr	r1, [pc, #64]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009148:	4313      	orrs	r3, r2
 800914a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009152:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009156:	d105      	bne.n	8009164 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009158:	4b0b      	ldr	r3, [pc, #44]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800915a:	68db      	ldr	r3, [r3, #12]
 800915c:	4a0a      	ldr	r2, [pc, #40]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800915e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009162:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800916c:	2b00      	cmp	r3, #0
 800916e:	d018      	beq.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009170:	4b05      	ldr	r3, [pc, #20]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009176:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800917e:	4902      	ldr	r1, [pc, #8]	; (8009188 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009180:	4313      	orrs	r3, r2
 8009182:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009186:	e001      	b.n	800918c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8009188:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009190:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009194:	d105      	bne.n	80091a2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009196:	4b21      	ldr	r3, [pc, #132]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009198:	68db      	ldr	r3, [r3, #12]
 800919a:	4a20      	ldr	r2, [pc, #128]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800919c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091a0:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d015      	beq.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80091ae:	4b1b      	ldr	r3, [pc, #108]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80091b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091b4:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091bc:	4917      	ldr	r1, [pc, #92]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80091be:	4313      	orrs	r3, r2
 80091c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091cc:	d105      	bne.n	80091da <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80091ce:	4b13      	ldr	r3, [pc, #76]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80091d0:	68db      	ldr	r3, [r3, #12]
 80091d2:	4a12      	ldr	r2, [pc, #72]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80091d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091d8:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d015      	beq.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80091e6:	4b0d      	ldr	r3, [pc, #52]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80091e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80091ec:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80091f4:	4909      	ldr	r1, [pc, #36]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80091f6:	4313      	orrs	r3, r2
 80091f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009200:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009204:	d105      	bne.n	8009212 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009206:	4b05      	ldr	r3, [pc, #20]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	4a04      	ldr	r2, [pc, #16]	; (800921c <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800920c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009210:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009212:	7cbb      	ldrb	r3, [r7, #18]
}
 8009214:	4618      	mov	r0, r3
 8009216:	3718      	adds	r7, #24
 8009218:	46bd      	mov	sp, r7
 800921a:	bd80      	pop	{r7, pc}
 800921c:	40021000 	.word	0x40021000

08009220 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009220:	b580      	push	{r7, lr}
 8009222:	b084      	sub	sp, #16
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d101      	bne.n	8009232 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800922e:	2301      	movs	r3, #1
 8009230:	e084      	b.n	800933c <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800923e:	b2db      	uxtb	r3, r3
 8009240:	2b00      	cmp	r3, #0
 8009242:	d106      	bne.n	8009252 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2200      	movs	r2, #0
 8009248:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f7fb fc8d 	bl	8004b6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	2202      	movs	r2, #2
 8009256:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	681a      	ldr	r2, [r3, #0]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009268:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	68db      	ldr	r3, [r3, #12]
 800926e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009272:	d902      	bls.n	800927a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009274:	2300      	movs	r3, #0
 8009276:	60fb      	str	r3, [r7, #12]
 8009278:	e002      	b.n	8009280 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800927a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800927e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	68db      	ldr	r3, [r3, #12]
 8009284:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009288:	d007      	beq.n	800929a <HAL_SPI_Init+0x7a>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009292:	d002      	beq.n	800929a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2200      	movs	r2, #0
 8009298:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d10b      	bne.n	80092ba <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	68db      	ldr	r3, [r3, #12]
 80092a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80092aa:	d903      	bls.n	80092b4 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2202      	movs	r2, #2
 80092b0:	631a      	str	r2, [r3, #48]	; 0x30
 80092b2:	e002      	b.n	80092ba <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2201      	movs	r2, #1
 80092b8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	685a      	ldr	r2, [r3, #4]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	431a      	orrs	r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	691b      	ldr	r3, [r3, #16]
 80092c8:	431a      	orrs	r2, r3
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	695b      	ldr	r3, [r3, #20]
 80092ce:	431a      	orrs	r2, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	699b      	ldr	r3, [r3, #24]
 80092d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80092d8:	431a      	orrs	r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	69db      	ldr	r3, [r3, #28]
 80092de:	431a      	orrs	r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	6a1b      	ldr	r3, [r3, #32]
 80092e4:	ea42 0103 	orr.w	r1, r2, r3
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	430a      	orrs	r2, r1
 80092f2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	0c1b      	lsrs	r3, r3, #16
 80092fa:	f003 0204 	and.w	r2, r3, #4
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009302:	431a      	orrs	r2, r3
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009308:	431a      	orrs	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	ea42 0103 	orr.w	r1, r2, r3
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	430a      	orrs	r2, r1
 800931a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	69da      	ldr	r2, [r3, #28]
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800932a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	2200      	movs	r2, #0
 8009330:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2201      	movs	r2, #1
 8009336:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3710      	adds	r7, #16
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b088      	sub	sp, #32
 8009348:	af00      	add	r7, sp, #0
 800934a:	60f8      	str	r0, [r7, #12]
 800934c:	60b9      	str	r1, [r7, #8]
 800934e:	603b      	str	r3, [r7, #0]
 8009350:	4613      	mov	r3, r2
 8009352:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009354:	2300      	movs	r3, #0
 8009356:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800935e:	2b01      	cmp	r3, #1
 8009360:	d101      	bne.n	8009366 <HAL_SPI_Transmit+0x22>
 8009362:	2302      	movs	r3, #2
 8009364:	e150      	b.n	8009608 <HAL_SPI_Transmit+0x2c4>
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	2201      	movs	r2, #1
 800936a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800936e:	f7fc fa4f 	bl	8005810 <HAL_GetTick>
 8009372:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009374:	88fb      	ldrh	r3, [r7, #6]
 8009376:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800937e:	b2db      	uxtb	r3, r3
 8009380:	2b01      	cmp	r3, #1
 8009382:	d002      	beq.n	800938a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8009384:	2302      	movs	r3, #2
 8009386:	77fb      	strb	r3, [r7, #31]
    goto error;
 8009388:	e135      	b.n	80095f6 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d002      	beq.n	8009396 <HAL_SPI_Transmit+0x52>
 8009390:	88fb      	ldrh	r3, [r7, #6]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d102      	bne.n	800939c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8009396:	2301      	movs	r3, #1
 8009398:	77fb      	strb	r3, [r7, #31]
    goto error;
 800939a:	e12c      	b.n	80095f6 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	2203      	movs	r2, #3
 80093a0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2200      	movs	r2, #0
 80093a8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	68ba      	ldr	r2, [r7, #8]
 80093ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	88fa      	ldrh	r2, [r7, #6]
 80093b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	88fa      	ldrh	r2, [r7, #6]
 80093ba:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	2200      	movs	r2, #0
 80093c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	2200      	movs	r2, #0
 80093c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	2200      	movs	r2, #0
 80093ce:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	2200      	movs	r2, #0
 80093d6:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	2200      	movs	r2, #0
 80093dc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80093de:	68fb      	ldr	r3, [r7, #12]
 80093e0:	689b      	ldr	r3, [r3, #8]
 80093e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093e6:	d107      	bne.n	80093f8 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80093f6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009402:	2b40      	cmp	r3, #64	; 0x40
 8009404:	d007      	beq.n	8009416 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	681a      	ldr	r2, [r3, #0]
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009414:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800941e:	d94b      	bls.n	80094b8 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	685b      	ldr	r3, [r3, #4]
 8009424:	2b00      	cmp	r3, #0
 8009426:	d002      	beq.n	800942e <HAL_SPI_Transmit+0xea>
 8009428:	8afb      	ldrh	r3, [r7, #22]
 800942a:	2b01      	cmp	r3, #1
 800942c:	d13e      	bne.n	80094ac <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009432:	881a      	ldrh	r2, [r3, #0]
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800943e:	1c9a      	adds	r2, r3, #2
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009448:	b29b      	uxth	r3, r3
 800944a:	3b01      	subs	r3, #1
 800944c:	b29a      	uxth	r2, r3
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009452:	e02b      	b.n	80094ac <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	689b      	ldr	r3, [r3, #8]
 800945a:	f003 0302 	and.w	r3, r3, #2
 800945e:	2b02      	cmp	r3, #2
 8009460:	d112      	bne.n	8009488 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009466:	881a      	ldrh	r2, [r3, #0]
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009472:	1c9a      	adds	r2, r3, #2
 8009474:	68fb      	ldr	r3, [r7, #12]
 8009476:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800947c:	b29b      	uxth	r3, r3
 800947e:	3b01      	subs	r3, #1
 8009480:	b29a      	uxth	r2, r3
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009486:	e011      	b.n	80094ac <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009488:	f7fc f9c2 	bl	8005810 <HAL_GetTick>
 800948c:	4602      	mov	r2, r0
 800948e:	69bb      	ldr	r3, [r7, #24]
 8009490:	1ad3      	subs	r3, r2, r3
 8009492:	683a      	ldr	r2, [r7, #0]
 8009494:	429a      	cmp	r2, r3
 8009496:	d803      	bhi.n	80094a0 <HAL_SPI_Transmit+0x15c>
 8009498:	683b      	ldr	r3, [r7, #0]
 800949a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800949e:	d102      	bne.n	80094a6 <HAL_SPI_Transmit+0x162>
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d102      	bne.n	80094ac <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80094a6:	2303      	movs	r3, #3
 80094a8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80094aa:	e0a4      	b.n	80095f6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1ce      	bne.n	8009454 <HAL_SPI_Transmit+0x110>
 80094b6:	e07c      	b.n	80095b2 <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	685b      	ldr	r3, [r3, #4]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d002      	beq.n	80094c6 <HAL_SPI_Transmit+0x182>
 80094c0:	8afb      	ldrh	r3, [r7, #22]
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d170      	bne.n	80095a8 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094ca:	b29b      	uxth	r3, r3
 80094cc:	2b01      	cmp	r3, #1
 80094ce:	d912      	bls.n	80094f6 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094d4:	881a      	ldrh	r2, [r3, #0]
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e0:	1c9a      	adds	r2, r3, #2
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80094ea:	b29b      	uxth	r3, r3
 80094ec:	3b02      	subs	r3, #2
 80094ee:	b29a      	uxth	r2, r3
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80094f4:	e058      	b.n	80095a8 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	330c      	adds	r3, #12
 8009500:	7812      	ldrb	r2, [r2, #0]
 8009502:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009508:	1c5a      	adds	r2, r3, #1
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009512:	b29b      	uxth	r3, r3
 8009514:	3b01      	subs	r3, #1
 8009516:	b29a      	uxth	r2, r3
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800951c:	e044      	b.n	80095a8 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	689b      	ldr	r3, [r3, #8]
 8009524:	f003 0302 	and.w	r3, r3, #2
 8009528:	2b02      	cmp	r3, #2
 800952a:	d12b      	bne.n	8009584 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009530:	b29b      	uxth	r3, r3
 8009532:	2b01      	cmp	r3, #1
 8009534:	d912      	bls.n	800955c <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800953a:	881a      	ldrh	r2, [r3, #0]
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8009542:	68fb      	ldr	r3, [r7, #12]
 8009544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009546:	1c9a      	adds	r2, r3, #2
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009550:	b29b      	uxth	r3, r3
 8009552:	3b02      	subs	r3, #2
 8009554:	b29a      	uxth	r2, r3
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	87da      	strh	r2, [r3, #62]	; 0x3e
 800955a:	e025      	b.n	80095a8 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	330c      	adds	r3, #12
 8009566:	7812      	ldrb	r2, [r2, #0]
 8009568:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800956e:	1c5a      	adds	r2, r3, #1
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009578:	b29b      	uxth	r3, r3
 800957a:	3b01      	subs	r3, #1
 800957c:	b29a      	uxth	r2, r3
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009582:	e011      	b.n	80095a8 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009584:	f7fc f944 	bl	8005810 <HAL_GetTick>
 8009588:	4602      	mov	r2, r0
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	1ad3      	subs	r3, r2, r3
 800958e:	683a      	ldr	r2, [r7, #0]
 8009590:	429a      	cmp	r2, r3
 8009592:	d803      	bhi.n	800959c <HAL_SPI_Transmit+0x258>
 8009594:	683b      	ldr	r3, [r7, #0]
 8009596:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800959a:	d102      	bne.n	80095a2 <HAL_SPI_Transmit+0x25e>
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	2b00      	cmp	r3, #0
 80095a0:	d102      	bne.n	80095a8 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80095a2:	2303      	movs	r3, #3
 80095a4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80095a6:	e026      	b.n	80095f6 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80095ac:	b29b      	uxth	r3, r3
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d1b5      	bne.n	800951e <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80095b2:	69ba      	ldr	r2, [r7, #24]
 80095b4:	6839      	ldr	r1, [r7, #0]
 80095b6:	68f8      	ldr	r0, [r7, #12]
 80095b8:	f000 f901 	bl	80097be <SPI_EndRxTxTransaction>
 80095bc:	4603      	mov	r3, r0
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d002      	beq.n	80095c8 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2220      	movs	r2, #32
 80095c6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10a      	bne.n	80095e6 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80095d0:	2300      	movs	r3, #0
 80095d2:	613b      	str	r3, [r7, #16]
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	613b      	str	r3, [r7, #16]
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	689b      	ldr	r3, [r3, #8]
 80095e2:	613b      	str	r3, [r7, #16]
 80095e4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d002      	beq.n	80095f4 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 80095ee:	2301      	movs	r3, #1
 80095f0:	77fb      	strb	r3, [r7, #31]
 80095f2:	e000      	b.n	80095f6 <HAL_SPI_Transmit+0x2b2>
  }

error:
 80095f4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	2201      	movs	r2, #1
 80095fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	2200      	movs	r2, #0
 8009602:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009606:	7ffb      	ldrb	r3, [r7, #31]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3720      	adds	r7, #32
 800960c:	46bd      	mov	sp, r7
 800960e:	bd80      	pop	{r7, pc}

08009610 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b084      	sub	sp, #16
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	603b      	str	r3, [r7, #0]
 800961c:	4613      	mov	r3, r2
 800961e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009620:	e04c      	b.n	80096bc <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009628:	d048      	beq.n	80096bc <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800962a:	f7fc f8f1 	bl	8005810 <HAL_GetTick>
 800962e:	4602      	mov	r2, r0
 8009630:	69bb      	ldr	r3, [r7, #24]
 8009632:	1ad3      	subs	r3, r2, r3
 8009634:	683a      	ldr	r2, [r7, #0]
 8009636:	429a      	cmp	r2, r3
 8009638:	d902      	bls.n	8009640 <SPI_WaitFlagStateUntilTimeout+0x30>
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d13d      	bne.n	80096bc <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	685a      	ldr	r2, [r3, #4]
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800964e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	685b      	ldr	r3, [r3, #4]
 8009654:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009658:	d111      	bne.n	800967e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	689b      	ldr	r3, [r3, #8]
 800965e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009662:	d004      	beq.n	800966e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	689b      	ldr	r3, [r3, #8]
 8009668:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800966c:	d107      	bne.n	800967e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800967c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009682:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009686:	d10f      	bne.n	80096a8 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	681a      	ldr	r2, [r3, #0]
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009696:	601a      	str	r2, [r3, #0]
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	681a      	ldr	r2, [r3, #0]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80096a6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	2201      	movs	r2, #1
 80096ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	2200      	movs	r2, #0
 80096b4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80096b8:	2303      	movs	r3, #3
 80096ba:	e00f      	b.n	80096dc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	689a      	ldr	r2, [r3, #8]
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	4013      	ands	r3, r2
 80096c6:	68ba      	ldr	r2, [r7, #8]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	bf0c      	ite	eq
 80096cc:	2301      	moveq	r3, #1
 80096ce:	2300      	movne	r3, #0
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	461a      	mov	r2, r3
 80096d4:	79fb      	ldrb	r3, [r7, #7]
 80096d6:	429a      	cmp	r2, r3
 80096d8:	d1a3      	bne.n	8009622 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80096da:	2300      	movs	r3, #0
}
 80096dc:	4618      	mov	r0, r3
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	60f8      	str	r0, [r7, #12]
 80096ec:	60b9      	str	r1, [r7, #8]
 80096ee:	607a      	str	r2, [r7, #4]
 80096f0:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 80096f2:	e057      	b.n	80097a4 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80096fa:	d106      	bne.n	800970a <SPI_WaitFifoStateUntilTimeout+0x26>
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d103      	bne.n	800970a <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	330c      	adds	r3, #12
 8009708:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009710:	d048      	beq.n	80097a4 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009712:	f7fc f87d 	bl	8005810 <HAL_GetTick>
 8009716:	4602      	mov	r2, r0
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	1ad3      	subs	r3, r2, r3
 800971c:	683a      	ldr	r2, [r7, #0]
 800971e:	429a      	cmp	r2, r3
 8009720:	d902      	bls.n	8009728 <SPI_WaitFifoStateUntilTimeout+0x44>
 8009722:	683b      	ldr	r3, [r7, #0]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d13d      	bne.n	80097a4 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	685a      	ldr	r2, [r3, #4]
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009736:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009740:	d111      	bne.n	8009766 <SPI_WaitFifoStateUntilTimeout+0x82>
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800974a:	d004      	beq.n	8009756 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	689b      	ldr	r3, [r3, #8]
 8009750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009754:	d107      	bne.n	8009766 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009764:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800976a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800976e:	d10f      	bne.n	8009790 <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800977e:	601a      	str	r2, [r3, #0]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800978e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	2201      	movs	r2, #1
 8009794:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009798:	68fb      	ldr	r3, [r7, #12]
 800979a:	2200      	movs	r2, #0
 800979c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80097a0:	2303      	movs	r3, #3
 80097a2:	e008      	b.n	80097b6 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	689a      	ldr	r2, [r3, #8]
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	4013      	ands	r3, r2
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d19f      	bne.n	80096f4 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3710      	adds	r7, #16
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80097be:	b580      	push	{r7, lr}
 80097c0:	b086      	sub	sp, #24
 80097c2:	af02      	add	r7, sp, #8
 80097c4:	60f8      	str	r0, [r7, #12]
 80097c6:	60b9      	str	r1, [r7, #8]
 80097c8:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	9300      	str	r3, [sp, #0]
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	2200      	movs	r2, #0
 80097d2:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80097d6:	68f8      	ldr	r0, [r7, #12]
 80097d8:	f7ff ff84 	bl	80096e4 <SPI_WaitFifoStateUntilTimeout>
 80097dc:	4603      	mov	r3, r0
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d007      	beq.n	80097f2 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80097e6:	f043 0220 	orr.w	r2, r3, #32
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80097ee:	2303      	movs	r3, #3
 80097f0:	e027      	b.n	8009842 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	9300      	str	r3, [sp, #0]
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	2200      	movs	r2, #0
 80097fa:	2180      	movs	r1, #128	; 0x80
 80097fc:	68f8      	ldr	r0, [r7, #12]
 80097fe:	f7ff ff07 	bl	8009610 <SPI_WaitFlagStateUntilTimeout>
 8009802:	4603      	mov	r3, r0
 8009804:	2b00      	cmp	r3, #0
 8009806:	d007      	beq.n	8009818 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800980c:	f043 0220 	orr.w	r2, r3, #32
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8009814:	2303      	movs	r3, #3
 8009816:	e014      	b.n	8009842 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	9300      	str	r3, [sp, #0]
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	2200      	movs	r2, #0
 8009820:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8009824:	68f8      	ldr	r0, [r7, #12]
 8009826:	f7ff ff5d 	bl	80096e4 <SPI_WaitFifoStateUntilTimeout>
 800982a:	4603      	mov	r3, r0
 800982c:	2b00      	cmp	r3, #0
 800982e:	d007      	beq.n	8009840 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009834:	f043 0220 	orr.w	r2, r3, #32
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800983c:	2303      	movs	r3, #3
 800983e:	e000      	b.n	8009842 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8009840:	2300      	movs	r3, #0
}
 8009842:	4618      	mov	r0, r3
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b082      	sub	sp, #8
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2b00      	cmp	r3, #0
 8009856:	d101      	bne.n	800985c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	e049      	b.n	80098f0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009862:	b2db      	uxtb	r3, r3
 8009864:	2b00      	cmp	r3, #0
 8009866:	d106      	bne.n	8009876 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2200      	movs	r2, #0
 800986c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009870:	6878      	ldr	r0, [r7, #4]
 8009872:	f7fb fe7b 	bl	800556c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2202      	movs	r2, #2
 800987a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681a      	ldr	r2, [r3, #0]
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	3304      	adds	r3, #4
 8009886:	4619      	mov	r1, r3
 8009888:	4610      	mov	r0, r2
 800988a:	f000 fc51 	bl	800a130 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2201      	movs	r2, #1
 8009892:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2201      	movs	r2, #1
 800989a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2201      	movs	r2, #1
 80098a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2201      	movs	r2, #1
 80098aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2201      	movs	r2, #1
 80098b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2201      	movs	r2, #1
 80098c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2201      	movs	r2, #1
 80098ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2201      	movs	r2, #1
 80098d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2201      	movs	r2, #1
 80098da:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2201      	movs	r2, #1
 80098e2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098ee:	2300      	movs	r3, #0
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3708      	adds	r7, #8
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}

080098f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80098f8:	b480      	push	{r7}
 80098fa:	b085      	sub	sp, #20
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009906:	b2db      	uxtb	r3, r3
 8009908:	2b01      	cmp	r3, #1
 800990a:	d001      	beq.n	8009910 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800990c:	2301      	movs	r3, #1
 800990e:	e019      	b.n	8009944 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2202      	movs	r2, #2
 8009914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	689a      	ldr	r2, [r3, #8]
 800991e:	4b0c      	ldr	r3, [pc, #48]	; (8009950 <HAL_TIM_Base_Start+0x58>)
 8009920:	4013      	ands	r3, r2
 8009922:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2b06      	cmp	r3, #6
 8009928:	d00b      	beq.n	8009942 <HAL_TIM_Base_Start+0x4a>
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009930:	d007      	beq.n	8009942 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	681a      	ldr	r2, [r3, #0]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	f042 0201 	orr.w	r2, r2, #1
 8009940:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009942:	2300      	movs	r3, #0
}
 8009944:	4618      	mov	r0, r3
 8009946:	3714      	adds	r7, #20
 8009948:	46bd      	mov	sp, r7
 800994a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994e:	4770      	bx	lr
 8009950:	00010007 	.word	0x00010007

08009954 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009954:	b480      	push	{r7}
 8009956:	b085      	sub	sp, #20
 8009958:	af00      	add	r7, sp, #0
 800995a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009962:	b2db      	uxtb	r3, r3
 8009964:	2b01      	cmp	r3, #1
 8009966:	d001      	beq.n	800996c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009968:	2301      	movs	r3, #1
 800996a:	e021      	b.n	80099b0 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2202      	movs	r2, #2
 8009970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	68da      	ldr	r2, [r3, #12]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f042 0201 	orr.w	r2, r2, #1
 8009982:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	689a      	ldr	r2, [r3, #8]
 800998a:	4b0c      	ldr	r3, [pc, #48]	; (80099bc <HAL_TIM_Base_Start_IT+0x68>)
 800998c:	4013      	ands	r3, r2
 800998e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	2b06      	cmp	r3, #6
 8009994:	d00b      	beq.n	80099ae <HAL_TIM_Base_Start_IT+0x5a>
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800999c:	d007      	beq.n	80099ae <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	681a      	ldr	r2, [r3, #0]
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f042 0201 	orr.w	r2, r2, #1
 80099ac:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80099ae:	2300      	movs	r3, #0
}
 80099b0:	4618      	mov	r0, r3
 80099b2:	3714      	adds	r7, #20
 80099b4:	46bd      	mov	sp, r7
 80099b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ba:	4770      	bx	lr
 80099bc:	00010007 	.word	0x00010007

080099c0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80099c0:	b480      	push	{r7}
 80099c2:	b083      	sub	sp, #12
 80099c4:	af00      	add	r7, sp, #0
 80099c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	68da      	ldr	r2, [r3, #12]
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	f022 0201 	bic.w	r2, r2, #1
 80099d6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	6a1a      	ldr	r2, [r3, #32]
 80099de:	f241 1311 	movw	r3, #4369	; 0x1111
 80099e2:	4013      	ands	r3, r2
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d10f      	bne.n	8009a08 <HAL_TIM_Base_Stop_IT+0x48>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	6a1a      	ldr	r2, [r3, #32]
 80099ee:	f244 4344 	movw	r3, #17476	; 0x4444
 80099f2:	4013      	ands	r3, r2
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d107      	bne.n	8009a08 <HAL_TIM_Base_Stop_IT+0x48>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	681a      	ldr	r2, [r3, #0]
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f022 0201 	bic.w	r2, r2, #1
 8009a06:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009a10:	2300      	movs	r3, #0
}
 8009a12:	4618      	mov	r0, r3
 8009a14:	370c      	adds	r7, #12
 8009a16:	46bd      	mov	sp, r7
 8009a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1c:	4770      	bx	lr

08009a1e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009a1e:	b580      	push	{r7, lr}
 8009a20:	b086      	sub	sp, #24
 8009a22:	af00      	add	r7, sp, #0
 8009a24:	6078      	str	r0, [r7, #4]
 8009a26:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2b00      	cmp	r3, #0
 8009a2c:	d101      	bne.n	8009a32 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009a2e:	2301      	movs	r3, #1
 8009a30:	e097      	b.n	8009b62 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a38:	b2db      	uxtb	r3, r3
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d106      	bne.n	8009a4c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	2200      	movs	r2, #0
 8009a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8009a46:	6878      	ldr	r0, [r7, #4]
 8009a48:	f7fb fd34 	bl	80054b4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2202      	movs	r2, #2
 8009a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	689b      	ldr	r3, [r3, #8]
 8009a5a:	687a      	ldr	r2, [r7, #4]
 8009a5c:	6812      	ldr	r2, [r2, #0]
 8009a5e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8009a62:	f023 0307 	bic.w	r3, r3, #7
 8009a66:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681a      	ldr	r2, [r3, #0]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	3304      	adds	r3, #4
 8009a70:	4619      	mov	r1, r3
 8009a72:	4610      	mov	r0, r2
 8009a74:	f000 fb5c 	bl	800a130 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	699b      	ldr	r3, [r3, #24]
 8009a86:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	6a1b      	ldr	r3, [r3, #32]
 8009a8e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009a90:	683b      	ldr	r3, [r7, #0]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	697a      	ldr	r2, [r7, #20]
 8009a96:	4313      	orrs	r3, r2
 8009a98:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009a9a:	693b      	ldr	r3, [r7, #16]
 8009a9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009aa0:	f023 0303 	bic.w	r3, r3, #3
 8009aa4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	689a      	ldr	r2, [r3, #8]
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	699b      	ldr	r3, [r3, #24]
 8009aae:	021b      	lsls	r3, r3, #8
 8009ab0:	4313      	orrs	r3, r2
 8009ab2:	693a      	ldr	r2, [r7, #16]
 8009ab4:	4313      	orrs	r3, r2
 8009ab6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009ab8:	693b      	ldr	r3, [r7, #16]
 8009aba:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009abe:	f023 030c 	bic.w	r3, r3, #12
 8009ac2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009aca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009ace:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009ad0:	683b      	ldr	r3, [r7, #0]
 8009ad2:	68da      	ldr	r2, [r3, #12]
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	69db      	ldr	r3, [r3, #28]
 8009ad8:	021b      	lsls	r3, r3, #8
 8009ada:	4313      	orrs	r3, r2
 8009adc:	693a      	ldr	r2, [r7, #16]
 8009ade:	4313      	orrs	r3, r2
 8009ae0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	691b      	ldr	r3, [r3, #16]
 8009ae6:	011a      	lsls	r2, r3, #4
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	6a1b      	ldr	r3, [r3, #32]
 8009aec:	031b      	lsls	r3, r3, #12
 8009aee:	4313      	orrs	r3, r2
 8009af0:	693a      	ldr	r2, [r7, #16]
 8009af2:	4313      	orrs	r3, r2
 8009af4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009afc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009b04:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	685a      	ldr	r2, [r3, #4]
 8009b0a:	683b      	ldr	r3, [r7, #0]
 8009b0c:	695b      	ldr	r3, [r3, #20]
 8009b0e:	011b      	lsls	r3, r3, #4
 8009b10:	4313      	orrs	r3, r2
 8009b12:	68fa      	ldr	r2, [r7, #12]
 8009b14:	4313      	orrs	r3, r2
 8009b16:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	697a      	ldr	r2, [r7, #20]
 8009b1e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	681b      	ldr	r3, [r3, #0]
 8009b24:	693a      	ldr	r2, [r7, #16]
 8009b26:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	68fa      	ldr	r2, [r7, #12]
 8009b2e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2201      	movs	r2, #1
 8009b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2201      	movs	r2, #1
 8009b44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	2201      	movs	r2, #1
 8009b54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	2201      	movs	r2, #1
 8009b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b60:	2300      	movs	r3, #0
}
 8009b62:	4618      	mov	r0, r3
 8009b64:	3718      	adds	r7, #24
 8009b66:	46bd      	mov	sp, r7
 8009b68:	bd80      	pop	{r7, pc}

08009b6a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009b6a:	b580      	push	{r7, lr}
 8009b6c:	b082      	sub	sp, #8
 8009b6e:	af00      	add	r7, sp, #0
 8009b70:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	691b      	ldr	r3, [r3, #16]
 8009b78:	f003 0302 	and.w	r3, r3, #2
 8009b7c:	2b02      	cmp	r3, #2
 8009b7e:	d122      	bne.n	8009bc6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68db      	ldr	r3, [r3, #12]
 8009b86:	f003 0302 	and.w	r3, r3, #2
 8009b8a:	2b02      	cmp	r3, #2
 8009b8c:	d11b      	bne.n	8009bc6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f06f 0202 	mvn.w	r2, #2
 8009b96:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2201      	movs	r2, #1
 8009b9c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	699b      	ldr	r3, [r3, #24]
 8009ba4:	f003 0303 	and.w	r3, r3, #3
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d003      	beq.n	8009bb4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 faa1 	bl	800a0f4 <HAL_TIM_IC_CaptureCallback>
 8009bb2:	e005      	b.n	8009bc0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f000 fa93 	bl	800a0e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f000 faa4 	bl	800a108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009bc6:	687b      	ldr	r3, [r7, #4]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	691b      	ldr	r3, [r3, #16]
 8009bcc:	f003 0304 	and.w	r3, r3, #4
 8009bd0:	2b04      	cmp	r3, #4
 8009bd2:	d122      	bne.n	8009c1a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	68db      	ldr	r3, [r3, #12]
 8009bda:	f003 0304 	and.w	r3, r3, #4
 8009bde:	2b04      	cmp	r3, #4
 8009be0:	d11b      	bne.n	8009c1a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f06f 0204 	mvn.w	r2, #4
 8009bea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2202      	movs	r2, #2
 8009bf0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	699b      	ldr	r3, [r3, #24]
 8009bf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d003      	beq.n	8009c08 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 fa77 	bl	800a0f4 <HAL_TIM_IC_CaptureCallback>
 8009c06:	e005      	b.n	8009c14 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f000 fa69 	bl	800a0e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f000 fa7a 	bl	800a108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	2200      	movs	r2, #0
 8009c18:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	691b      	ldr	r3, [r3, #16]
 8009c20:	f003 0308 	and.w	r3, r3, #8
 8009c24:	2b08      	cmp	r3, #8
 8009c26:	d122      	bne.n	8009c6e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	68db      	ldr	r3, [r3, #12]
 8009c2e:	f003 0308 	and.w	r3, r3, #8
 8009c32:	2b08      	cmp	r3, #8
 8009c34:	d11b      	bne.n	8009c6e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	f06f 0208 	mvn.w	r2, #8
 8009c3e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	2204      	movs	r2, #4
 8009c44:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	69db      	ldr	r3, [r3, #28]
 8009c4c:	f003 0303 	and.w	r3, r3, #3
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d003      	beq.n	8009c5c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 fa4d 	bl	800a0f4 <HAL_TIM_IC_CaptureCallback>
 8009c5a:	e005      	b.n	8009c68 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 fa3f 	bl	800a0e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f000 fa50 	bl	800a108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	691b      	ldr	r3, [r3, #16]
 8009c74:	f003 0310 	and.w	r3, r3, #16
 8009c78:	2b10      	cmp	r3, #16
 8009c7a:	d122      	bne.n	8009cc2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	68db      	ldr	r3, [r3, #12]
 8009c82:	f003 0310 	and.w	r3, r3, #16
 8009c86:	2b10      	cmp	r3, #16
 8009c88:	d11b      	bne.n	8009cc2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f06f 0210 	mvn.w	r2, #16
 8009c92:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2208      	movs	r2, #8
 8009c98:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	69db      	ldr	r3, [r3, #28]
 8009ca0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d003      	beq.n	8009cb0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009ca8:	6878      	ldr	r0, [r7, #4]
 8009caa:	f000 fa23 	bl	800a0f4 <HAL_TIM_IC_CaptureCallback>
 8009cae:	e005      	b.n	8009cbc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cb0:	6878      	ldr	r0, [r7, #4]
 8009cb2:	f000 fa15 	bl	800a0e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f000 fa26 	bl	800a108 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2200      	movs	r2, #0
 8009cc0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	691b      	ldr	r3, [r3, #16]
 8009cc8:	f003 0301 	and.w	r3, r3, #1
 8009ccc:	2b01      	cmp	r3, #1
 8009cce:	d10e      	bne.n	8009cee <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	68db      	ldr	r3, [r3, #12]
 8009cd6:	f003 0301 	and.w	r3, r3, #1
 8009cda:	2b01      	cmp	r3, #1
 8009cdc:	d107      	bne.n	8009cee <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	681b      	ldr	r3, [r3, #0]
 8009ce2:	f06f 0201 	mvn.w	r2, #1
 8009ce6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009ce8:	6878      	ldr	r0, [r7, #4]
 8009cea:	f000 f9ef 	bl	800a0cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	691b      	ldr	r3, [r3, #16]
 8009cf4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cf8:	2b80      	cmp	r3, #128	; 0x80
 8009cfa:	d10e      	bne.n	8009d1a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d06:	2b80      	cmp	r3, #128	; 0x80
 8009d08:	d107      	bne.n	8009d1a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009d12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	f000 fd5d 	bl	800a7d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	691b      	ldr	r3, [r3, #16]
 8009d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d28:	d10e      	bne.n	8009d48 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009d34:	2b80      	cmp	r3, #128	; 0x80
 8009d36:	d107      	bne.n	8009d48 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009d40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f000 fd50 	bl	800a7e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	691b      	ldr	r3, [r3, #16]
 8009d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d52:	2b40      	cmp	r3, #64	; 0x40
 8009d54:	d10e      	bne.n	8009d74 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	68db      	ldr	r3, [r3, #12]
 8009d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d60:	2b40      	cmp	r3, #64	; 0x40
 8009d62:	d107      	bne.n	8009d74 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009d6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	f000 f9d4 	bl	800a11c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	691b      	ldr	r3, [r3, #16]
 8009d7a:	f003 0320 	and.w	r3, r3, #32
 8009d7e:	2b20      	cmp	r3, #32
 8009d80:	d10e      	bne.n	8009da0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	68db      	ldr	r3, [r3, #12]
 8009d88:	f003 0320 	and.w	r3, r3, #32
 8009d8c:	2b20      	cmp	r3, #32
 8009d8e:	d107      	bne.n	8009da0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f06f 0220 	mvn.w	r2, #32
 8009d98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 fd10 	bl	800a7c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009daa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dae:	d10f      	bne.n	8009dd0 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	68db      	ldr	r3, [r3, #12]
 8009db6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009dba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dbe:	d107      	bne.n	8009dd0 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8009dc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 fd16 	bl	800a7fc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	691b      	ldr	r3, [r3, #16]
 8009dd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009dda:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009dde:	d10f      	bne.n	8009e00 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	68db      	ldr	r3, [r3, #12]
 8009de6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009dea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009dee:	d107      	bne.n	8009e00 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8009df8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 fd08 	bl	800a810 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	691b      	ldr	r3, [r3, #16]
 8009e06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e0a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e0e:	d10f      	bne.n	8009e30 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	68db      	ldr	r3, [r3, #12]
 8009e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009e1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009e1e:	d107      	bne.n	8009e30 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8009e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 fcfa 	bl	800a824 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	691b      	ldr	r3, [r3, #16]
 8009e36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e3a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e3e:	d10f      	bne.n	8009e60 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	68db      	ldr	r3, [r3, #12]
 8009e46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009e4a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009e4e:	d107      	bne.n	8009e60 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8009e58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f000 fcec 	bl	800a838 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009e60:	bf00      	nop
 8009e62:	3708      	adds	r7, #8
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b084      	sub	sp, #16
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
 8009e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e78:	2b01      	cmp	r3, #1
 8009e7a:	d101      	bne.n	8009e80 <HAL_TIM_ConfigClockSource+0x18>
 8009e7c:	2302      	movs	r3, #2
 8009e7e:	e0d2      	b.n	800a026 <HAL_TIM_ConfigClockSource+0x1be>
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	2201      	movs	r2, #1
 8009e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2202      	movs	r2, #2
 8009e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	689b      	ldr	r3, [r3, #8]
 8009e96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8009e9e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009ea2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009eaa:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ebc:	f000 80a9 	beq.w	800a012 <HAL_TIM_ConfigClockSource+0x1aa>
 8009ec0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009ec4:	d81a      	bhi.n	8009efc <HAL_TIM_ConfigClockSource+0x94>
 8009ec6:	2b30      	cmp	r3, #48	; 0x30
 8009ec8:	f000 809a 	beq.w	800a000 <HAL_TIM_ConfigClockSource+0x198>
 8009ecc:	2b30      	cmp	r3, #48	; 0x30
 8009ece:	d809      	bhi.n	8009ee4 <HAL_TIM_ConfigClockSource+0x7c>
 8009ed0:	2b10      	cmp	r3, #16
 8009ed2:	f000 8095 	beq.w	800a000 <HAL_TIM_ConfigClockSource+0x198>
 8009ed6:	2b20      	cmp	r3, #32
 8009ed8:	f000 8092 	beq.w	800a000 <HAL_TIM_ConfigClockSource+0x198>
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	f000 808f 	beq.w	800a000 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009ee2:	e097      	b.n	800a014 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8009ee4:	2b50      	cmp	r3, #80	; 0x50
 8009ee6:	d05b      	beq.n	8009fa0 <HAL_TIM_ConfigClockSource+0x138>
 8009ee8:	2b50      	cmp	r3, #80	; 0x50
 8009eea:	d802      	bhi.n	8009ef2 <HAL_TIM_ConfigClockSource+0x8a>
 8009eec:	2b40      	cmp	r3, #64	; 0x40
 8009eee:	d077      	beq.n	8009fe0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009ef0:	e090      	b.n	800a014 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8009ef2:	2b60      	cmp	r3, #96	; 0x60
 8009ef4:	d064      	beq.n	8009fc0 <HAL_TIM_ConfigClockSource+0x158>
 8009ef6:	2b70      	cmp	r3, #112	; 0x70
 8009ef8:	d028      	beq.n	8009f4c <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8009efa:	e08b      	b.n	800a014 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8009efc:	4a4c      	ldr	r2, [pc, #304]	; (800a030 <HAL_TIM_ConfigClockSource+0x1c8>)
 8009efe:	4293      	cmp	r3, r2
 8009f00:	d07e      	beq.n	800a000 <HAL_TIM_ConfigClockSource+0x198>
 8009f02:	4a4b      	ldr	r2, [pc, #300]	; (800a030 <HAL_TIM_ConfigClockSource+0x1c8>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d810      	bhi.n	8009f2a <HAL_TIM_ConfigClockSource+0xc2>
 8009f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f0c:	d078      	beq.n	800a000 <HAL_TIM_ConfigClockSource+0x198>
 8009f0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f12:	d803      	bhi.n	8009f1c <HAL_TIM_ConfigClockSource+0xb4>
 8009f14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f18:	d02f      	beq.n	8009f7a <HAL_TIM_ConfigClockSource+0x112>
      break;
 8009f1a:	e07b      	b.n	800a014 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8009f1c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8009f20:	d06e      	beq.n	800a000 <HAL_TIM_ConfigClockSource+0x198>
 8009f22:	4a44      	ldr	r2, [pc, #272]	; (800a034 <HAL_TIM_ConfigClockSource+0x1cc>)
 8009f24:	4293      	cmp	r3, r2
 8009f26:	d06b      	beq.n	800a000 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8009f28:	e074      	b.n	800a014 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8009f2a:	4a43      	ldr	r2, [pc, #268]	; (800a038 <HAL_TIM_ConfigClockSource+0x1d0>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d067      	beq.n	800a000 <HAL_TIM_ConfigClockSource+0x198>
 8009f30:	4a41      	ldr	r2, [pc, #260]	; (800a038 <HAL_TIM_ConfigClockSource+0x1d0>)
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d803      	bhi.n	8009f3e <HAL_TIM_ConfigClockSource+0xd6>
 8009f36:	4a41      	ldr	r2, [pc, #260]	; (800a03c <HAL_TIM_ConfigClockSource+0x1d4>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d061      	beq.n	800a000 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8009f3c:	e06a      	b.n	800a014 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8009f3e:	4a40      	ldr	r2, [pc, #256]	; (800a040 <HAL_TIM_ConfigClockSource+0x1d8>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d05d      	beq.n	800a000 <HAL_TIM_ConfigClockSource+0x198>
 8009f44:	4a3f      	ldr	r2, [pc, #252]	; (800a044 <HAL_TIM_ConfigClockSource+0x1dc>)
 8009f46:	4293      	cmp	r3, r2
 8009f48:	d05a      	beq.n	800a000 <HAL_TIM_ConfigClockSource+0x198>
      break;
 8009f4a:	e063      	b.n	800a014 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	6818      	ldr	r0, [r3, #0]
 8009f50:	683b      	ldr	r3, [r7, #0]
 8009f52:	6899      	ldr	r1, [r3, #8]
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	685a      	ldr	r2, [r3, #4]
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	68db      	ldr	r3, [r3, #12]
 8009f5c:	f000 fac8 	bl	800a4f0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	689b      	ldr	r3, [r3, #8]
 8009f66:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009f6e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	609a      	str	r2, [r3, #8]
      break;
 8009f78:	e04c      	b.n	800a014 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6818      	ldr	r0, [r3, #0]
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	6899      	ldr	r1, [r3, #8]
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	685a      	ldr	r2, [r3, #4]
 8009f86:	683b      	ldr	r3, [r7, #0]
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	f000 fab1 	bl	800a4f0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	689a      	ldr	r2, [r3, #8]
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009f9c:	609a      	str	r2, [r3, #8]
      break;
 8009f9e:	e039      	b.n	800a014 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	6818      	ldr	r0, [r3, #0]
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	6859      	ldr	r1, [r3, #4]
 8009fa8:	683b      	ldr	r3, [r7, #0]
 8009faa:	68db      	ldr	r3, [r3, #12]
 8009fac:	461a      	mov	r2, r3
 8009fae:	f000 fa23 	bl	800a3f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	2150      	movs	r1, #80	; 0x50
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f000 fa7c 	bl	800a4b6 <TIM_ITRx_SetConfig>
      break;
 8009fbe:	e029      	b.n	800a014 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	6818      	ldr	r0, [r3, #0]
 8009fc4:	683b      	ldr	r3, [r7, #0]
 8009fc6:	6859      	ldr	r1, [r3, #4]
 8009fc8:	683b      	ldr	r3, [r7, #0]
 8009fca:	68db      	ldr	r3, [r3, #12]
 8009fcc:	461a      	mov	r2, r3
 8009fce:	f000 fa42 	bl	800a456 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	2160      	movs	r1, #96	; 0x60
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f000 fa6c 	bl	800a4b6 <TIM_ITRx_SetConfig>
      break;
 8009fde:	e019      	b.n	800a014 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6818      	ldr	r0, [r3, #0]
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	6859      	ldr	r1, [r3, #4]
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	68db      	ldr	r3, [r3, #12]
 8009fec:	461a      	mov	r2, r3
 8009fee:	f000 fa03 	bl	800a3f8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	2140      	movs	r1, #64	; 0x40
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	f000 fa5c 	bl	800a4b6 <TIM_ITRx_SetConfig>
      break;
 8009ffe:	e009      	b.n	800a014 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	4619      	mov	r1, r3
 800a00a:	4610      	mov	r0, r2
 800a00c:	f000 fa53 	bl	800a4b6 <TIM_ITRx_SetConfig>
      break;
 800a010:	e000      	b.n	800a014 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800a012:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	2201      	movs	r2, #1
 800a018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2200      	movs	r2, #0
 800a020:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a024:	2300      	movs	r3, #0
}
 800a026:	4618      	mov	r0, r3
 800a028:	3710      	adds	r7, #16
 800a02a:	46bd      	mov	sp, r7
 800a02c:	bd80      	pop	{r7, pc}
 800a02e:	bf00      	nop
 800a030:	00100030 	.word	0x00100030
 800a034:	00100020 	.word	0x00100020
 800a038:	00100050 	.word	0x00100050
 800a03c:	00100040 	.word	0x00100040
 800a040:	00100060 	.word	0x00100060
 800a044:	00100070 	.word	0x00100070

0800a048 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d101      	bne.n	800a060 <HAL_TIM_SlaveConfigSynchro+0x18>
 800a05c:	2302      	movs	r3, #2
 800a05e:	e031      	b.n	800a0c4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2201      	movs	r2, #1
 800a064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	2202      	movs	r2, #2
 800a06c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800a070:	6839      	ldr	r1, [r7, #0]
 800a072:	6878      	ldr	r0, [r7, #4]
 800a074:	f000 f904 	bl	800a280 <TIM_SlaveTimer_SetConfig>
 800a078:	4603      	mov	r3, r0
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d009      	beq.n	800a092 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2201      	movs	r2, #1
 800a082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	2200      	movs	r2, #0
 800a08a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800a08e:	2301      	movs	r3, #1
 800a090:	e018      	b.n	800a0c4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	68da      	ldr	r2, [r3, #12]
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a0a0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	68da      	ldr	r2, [r3, #12]
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a0b0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2201      	movs	r2, #1
 800a0b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2200      	movs	r2, #0
 800a0be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a0c2:	2300      	movs	r3, #0
}
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3708      	adds	r7, #8
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	bd80      	pop	{r7, pc}

0800a0cc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a0d4:	bf00      	nop
 800a0d6:	370c      	adds	r7, #12
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr

0800a0e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b083      	sub	sp, #12
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a0e8:	bf00      	nop
 800a0ea:	370c      	adds	r7, #12
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr

0800a0f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a0fc:	bf00      	nop
 800a0fe:	370c      	adds	r7, #12
 800a100:	46bd      	mov	sp, r7
 800a102:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a106:	4770      	bx	lr

0800a108 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a108:	b480      	push	{r7}
 800a10a:	b083      	sub	sp, #12
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a110:	bf00      	nop
 800a112:	370c      	adds	r7, #12
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b083      	sub	sp, #12
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a124:	bf00      	nop
 800a126:	370c      	adds	r7, #12
 800a128:	46bd      	mov	sp, r7
 800a12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12e:	4770      	bx	lr

0800a130 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a130:	b480      	push	{r7}
 800a132:	b085      	sub	sp, #20
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
 800a138:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	681b      	ldr	r3, [r3, #0]
 800a13e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	4a46      	ldr	r2, [pc, #280]	; (800a25c <TIM_Base_SetConfig+0x12c>)
 800a144:	4293      	cmp	r3, r2
 800a146:	d017      	beq.n	800a178 <TIM_Base_SetConfig+0x48>
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a14e:	d013      	beq.n	800a178 <TIM_Base_SetConfig+0x48>
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	4a43      	ldr	r2, [pc, #268]	; (800a260 <TIM_Base_SetConfig+0x130>)
 800a154:	4293      	cmp	r3, r2
 800a156:	d00f      	beq.n	800a178 <TIM_Base_SetConfig+0x48>
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	4a42      	ldr	r2, [pc, #264]	; (800a264 <TIM_Base_SetConfig+0x134>)
 800a15c:	4293      	cmp	r3, r2
 800a15e:	d00b      	beq.n	800a178 <TIM_Base_SetConfig+0x48>
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	4a41      	ldr	r2, [pc, #260]	; (800a268 <TIM_Base_SetConfig+0x138>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d007      	beq.n	800a178 <TIM_Base_SetConfig+0x48>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4a40      	ldr	r2, [pc, #256]	; (800a26c <TIM_Base_SetConfig+0x13c>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d003      	beq.n	800a178 <TIM_Base_SetConfig+0x48>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4a3f      	ldr	r2, [pc, #252]	; (800a270 <TIM_Base_SetConfig+0x140>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d108      	bne.n	800a18a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a17e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	68fa      	ldr	r2, [r7, #12]
 800a186:	4313      	orrs	r3, r2
 800a188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	4a33      	ldr	r2, [pc, #204]	; (800a25c <TIM_Base_SetConfig+0x12c>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d023      	beq.n	800a1da <TIM_Base_SetConfig+0xaa>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a198:	d01f      	beq.n	800a1da <TIM_Base_SetConfig+0xaa>
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	4a30      	ldr	r2, [pc, #192]	; (800a260 <TIM_Base_SetConfig+0x130>)
 800a19e:	4293      	cmp	r3, r2
 800a1a0:	d01b      	beq.n	800a1da <TIM_Base_SetConfig+0xaa>
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	4a2f      	ldr	r2, [pc, #188]	; (800a264 <TIM_Base_SetConfig+0x134>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d017      	beq.n	800a1da <TIM_Base_SetConfig+0xaa>
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	4a2e      	ldr	r2, [pc, #184]	; (800a268 <TIM_Base_SetConfig+0x138>)
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	d013      	beq.n	800a1da <TIM_Base_SetConfig+0xaa>
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	4a2d      	ldr	r2, [pc, #180]	; (800a26c <TIM_Base_SetConfig+0x13c>)
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d00f      	beq.n	800a1da <TIM_Base_SetConfig+0xaa>
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	4a2d      	ldr	r2, [pc, #180]	; (800a274 <TIM_Base_SetConfig+0x144>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d00b      	beq.n	800a1da <TIM_Base_SetConfig+0xaa>
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	4a2c      	ldr	r2, [pc, #176]	; (800a278 <TIM_Base_SetConfig+0x148>)
 800a1c6:	4293      	cmp	r3, r2
 800a1c8:	d007      	beq.n	800a1da <TIM_Base_SetConfig+0xaa>
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	4a2b      	ldr	r2, [pc, #172]	; (800a27c <TIM_Base_SetConfig+0x14c>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d003      	beq.n	800a1da <TIM_Base_SetConfig+0xaa>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	4a26      	ldr	r2, [pc, #152]	; (800a270 <TIM_Base_SetConfig+0x140>)
 800a1d6:	4293      	cmp	r3, r2
 800a1d8:	d108      	bne.n	800a1ec <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	68fa      	ldr	r2, [r7, #12]
 800a1e8:	4313      	orrs	r3, r2
 800a1ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	695b      	ldr	r3, [r3, #20]
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	68fa      	ldr	r2, [r7, #12]
 800a1fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a200:	683b      	ldr	r3, [r7, #0]
 800a202:	689a      	ldr	r2, [r3, #8]
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a208:	683b      	ldr	r3, [r7, #0]
 800a20a:	681a      	ldr	r2, [r3, #0]
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a12      	ldr	r2, [pc, #72]	; (800a25c <TIM_Base_SetConfig+0x12c>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d013      	beq.n	800a240 <TIM_Base_SetConfig+0x110>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4a14      	ldr	r2, [pc, #80]	; (800a26c <TIM_Base_SetConfig+0x13c>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d00f      	beq.n	800a240 <TIM_Base_SetConfig+0x110>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	4a14      	ldr	r2, [pc, #80]	; (800a274 <TIM_Base_SetConfig+0x144>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d00b      	beq.n	800a240 <TIM_Base_SetConfig+0x110>
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	4a13      	ldr	r2, [pc, #76]	; (800a278 <TIM_Base_SetConfig+0x148>)
 800a22c:	4293      	cmp	r3, r2
 800a22e:	d007      	beq.n	800a240 <TIM_Base_SetConfig+0x110>
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	4a12      	ldr	r2, [pc, #72]	; (800a27c <TIM_Base_SetConfig+0x14c>)
 800a234:	4293      	cmp	r3, r2
 800a236:	d003      	beq.n	800a240 <TIM_Base_SetConfig+0x110>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	4a0d      	ldr	r2, [pc, #52]	; (800a270 <TIM_Base_SetConfig+0x140>)
 800a23c:	4293      	cmp	r3, r2
 800a23e:	d103      	bne.n	800a248 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	691a      	ldr	r2, [r3, #16]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2201      	movs	r2, #1
 800a24c:	615a      	str	r2, [r3, #20]
}
 800a24e:	bf00      	nop
 800a250:	3714      	adds	r7, #20
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	40012c00 	.word	0x40012c00
 800a260:	40000400 	.word	0x40000400
 800a264:	40000800 	.word	0x40000800
 800a268:	40000c00 	.word	0x40000c00
 800a26c:	40013400 	.word	0x40013400
 800a270:	40015000 	.word	0x40015000
 800a274:	40014000 	.word	0x40014000
 800a278:	40014400 	.word	0x40014400
 800a27c:	40014800 	.word	0x40014800

0800a280 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a280:	b580      	push	{r7, lr}
 800a282:	b086      	sub	sp, #24
 800a284:	af00      	add	r7, sp, #0
 800a286:	6078      	str	r0, [r7, #4]
 800a288:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	689b      	ldr	r3, [r3, #8]
 800a290:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a292:	697b      	ldr	r3, [r7, #20]
 800a294:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a29c:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	697a      	ldr	r2, [r7, #20]
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2ae:	f023 0307 	bic.w	r3, r3, #7
 800a2b2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	697a      	ldr	r2, [r7, #20]
 800a2ba:	4313      	orrs	r3, r2
 800a2bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	697a      	ldr	r2, [r7, #20]
 800a2c4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	2b70      	cmp	r3, #112	; 0x70
 800a2cc:	d034      	beq.n	800a338 <TIM_SlaveTimer_SetConfig+0xb8>
 800a2ce:	2b70      	cmp	r3, #112	; 0x70
 800a2d0:	d811      	bhi.n	800a2f6 <TIM_SlaveTimer_SetConfig+0x76>
 800a2d2:	2b30      	cmp	r3, #48	; 0x30
 800a2d4:	d07d      	beq.n	800a3d2 <TIM_SlaveTimer_SetConfig+0x152>
 800a2d6:	2b30      	cmp	r3, #48	; 0x30
 800a2d8:	d806      	bhi.n	800a2e8 <TIM_SlaveTimer_SetConfig+0x68>
 800a2da:	2b10      	cmp	r3, #16
 800a2dc:	d079      	beq.n	800a3d2 <TIM_SlaveTimer_SetConfig+0x152>
 800a2de:	2b20      	cmp	r3, #32
 800a2e0:	d077      	beq.n	800a3d2 <TIM_SlaveTimer_SetConfig+0x152>
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d075      	beq.n	800a3d2 <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800a2e6:	e075      	b.n	800a3d4 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800a2e8:	2b50      	cmp	r3, #80	; 0x50
 800a2ea:	d05e      	beq.n	800a3aa <TIM_SlaveTimer_SetConfig+0x12a>
 800a2ec:	2b60      	cmp	r3, #96	; 0x60
 800a2ee:	d066      	beq.n	800a3be <TIM_SlaveTimer_SetConfig+0x13e>
 800a2f0:	2b40      	cmp	r3, #64	; 0x40
 800a2f2:	d02c      	beq.n	800a34e <TIM_SlaveTimer_SetConfig+0xce>
      break;
 800a2f4:	e06e      	b.n	800a3d4 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800a2f6:	4a3a      	ldr	r2, [pc, #232]	; (800a3e0 <TIM_SlaveTimer_SetConfig+0x160>)
 800a2f8:	4293      	cmp	r3, r2
 800a2fa:	d06a      	beq.n	800a3d2 <TIM_SlaveTimer_SetConfig+0x152>
 800a2fc:	4a38      	ldr	r2, [pc, #224]	; (800a3e0 <TIM_SlaveTimer_SetConfig+0x160>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d809      	bhi.n	800a316 <TIM_SlaveTimer_SetConfig+0x96>
 800a302:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a306:	d064      	beq.n	800a3d2 <TIM_SlaveTimer_SetConfig+0x152>
 800a308:	4a36      	ldr	r2, [pc, #216]	; (800a3e4 <TIM_SlaveTimer_SetConfig+0x164>)
 800a30a:	4293      	cmp	r3, r2
 800a30c:	d061      	beq.n	800a3d2 <TIM_SlaveTimer_SetConfig+0x152>
 800a30e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a312:	d05e      	beq.n	800a3d2 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800a314:	e05e      	b.n	800a3d4 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800a316:	4a34      	ldr	r2, [pc, #208]	; (800a3e8 <TIM_SlaveTimer_SetConfig+0x168>)
 800a318:	4293      	cmp	r3, r2
 800a31a:	d05a      	beq.n	800a3d2 <TIM_SlaveTimer_SetConfig+0x152>
 800a31c:	4a32      	ldr	r2, [pc, #200]	; (800a3e8 <TIM_SlaveTimer_SetConfig+0x168>)
 800a31e:	4293      	cmp	r3, r2
 800a320:	d803      	bhi.n	800a32a <TIM_SlaveTimer_SetConfig+0xaa>
 800a322:	4a32      	ldr	r2, [pc, #200]	; (800a3ec <TIM_SlaveTimer_SetConfig+0x16c>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d054      	beq.n	800a3d2 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800a328:	e054      	b.n	800a3d4 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800a32a:	4a31      	ldr	r2, [pc, #196]	; (800a3f0 <TIM_SlaveTimer_SetConfig+0x170>)
 800a32c:	4293      	cmp	r3, r2
 800a32e:	d050      	beq.n	800a3d2 <TIM_SlaveTimer_SetConfig+0x152>
 800a330:	4a30      	ldr	r2, [pc, #192]	; (800a3f4 <TIM_SlaveTimer_SetConfig+0x174>)
 800a332:	4293      	cmp	r3, r2
 800a334:	d04d      	beq.n	800a3d2 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800a336:	e04d      	b.n	800a3d4 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	6818      	ldr	r0, [r3, #0]
 800a33c:	683b      	ldr	r3, [r7, #0]
 800a33e:	68d9      	ldr	r1, [r3, #12]
 800a340:	683b      	ldr	r3, [r7, #0]
 800a342:	689a      	ldr	r2, [r3, #8]
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	691b      	ldr	r3, [r3, #16]
 800a348:	f000 f8d2 	bl	800a4f0 <TIM_ETR_SetConfig>
      break;
 800a34c:	e042      	b.n	800a3d4 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800a34e:	683b      	ldr	r3, [r7, #0]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	2b05      	cmp	r3, #5
 800a354:	d004      	beq.n	800a360 <TIM_SlaveTimer_SetConfig+0xe0>
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800a35e:	d101      	bne.n	800a364 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 800a360:	2301      	movs	r3, #1
 800a362:	e038      	b.n	800a3d6 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	6a1b      	ldr	r3, [r3, #32]
 800a36a:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	6a1a      	ldr	r2, [r3, #32]
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	f022 0201 	bic.w	r2, r2, #1
 800a37a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	699b      	ldr	r3, [r3, #24]
 800a382:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a38a:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	691b      	ldr	r3, [r3, #16]
 800a390:	011b      	lsls	r3, r3, #4
 800a392:	68fa      	ldr	r2, [r7, #12]
 800a394:	4313      	orrs	r3, r2
 800a396:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	693a      	ldr	r2, [r7, #16]
 800a3a6:	621a      	str	r2, [r3, #32]
      break;
 800a3a8:	e014      	b.n	800a3d4 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	6818      	ldr	r0, [r3, #0]
 800a3ae:	683b      	ldr	r3, [r7, #0]
 800a3b0:	6899      	ldr	r1, [r3, #8]
 800a3b2:	683b      	ldr	r3, [r7, #0]
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	f000 f81e 	bl	800a3f8 <TIM_TI1_ConfigInputStage>
      break;
 800a3bc:	e00a      	b.n	800a3d4 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	6818      	ldr	r0, [r3, #0]
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	6899      	ldr	r1, [r3, #8]
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	691b      	ldr	r3, [r3, #16]
 800a3ca:	461a      	mov	r2, r3
 800a3cc:	f000 f843 	bl	800a456 <TIM_TI2_ConfigInputStage>
      break;
 800a3d0:	e000      	b.n	800a3d4 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 800a3d2:	bf00      	nop
  }
  return HAL_OK;
 800a3d4:	2300      	movs	r3, #0
}
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	3718      	adds	r7, #24
 800a3da:	46bd      	mov	sp, r7
 800a3dc:	bd80      	pop	{r7, pc}
 800a3de:	bf00      	nop
 800a3e0:	00100030 	.word	0x00100030
 800a3e4:	00100020 	.word	0x00100020
 800a3e8:	00100050 	.word	0x00100050
 800a3ec:	00100040 	.word	0x00100040
 800a3f0:	00100060 	.word	0x00100060
 800a3f4:	00100070 	.word	0x00100070

0800a3f8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3f8:	b480      	push	{r7}
 800a3fa:	b087      	sub	sp, #28
 800a3fc:	af00      	add	r7, sp, #0
 800a3fe:	60f8      	str	r0, [r7, #12]
 800a400:	60b9      	str	r1, [r7, #8]
 800a402:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	6a1b      	ldr	r3, [r3, #32]
 800a408:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6a1b      	ldr	r3, [r3, #32]
 800a40e:	f023 0201 	bic.w	r2, r3, #1
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	699b      	ldr	r3, [r3, #24]
 800a41a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a41c:	693b      	ldr	r3, [r7, #16]
 800a41e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a422:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	011b      	lsls	r3, r3, #4
 800a428:	693a      	ldr	r2, [r7, #16]
 800a42a:	4313      	orrs	r3, r2
 800a42c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a42e:	697b      	ldr	r3, [r7, #20]
 800a430:	f023 030a 	bic.w	r3, r3, #10
 800a434:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a436:	697a      	ldr	r2, [r7, #20]
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	4313      	orrs	r3, r2
 800a43c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	693a      	ldr	r2, [r7, #16]
 800a442:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	697a      	ldr	r2, [r7, #20]
 800a448:	621a      	str	r2, [r3, #32]
}
 800a44a:	bf00      	nop
 800a44c:	371c      	adds	r7, #28
 800a44e:	46bd      	mov	sp, r7
 800a450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a454:	4770      	bx	lr

0800a456 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a456:	b480      	push	{r7}
 800a458:	b087      	sub	sp, #28
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	60f8      	str	r0, [r7, #12]
 800a45e:	60b9      	str	r1, [r7, #8]
 800a460:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	6a1b      	ldr	r3, [r3, #32]
 800a466:	f023 0210 	bic.w	r2, r3, #16
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	699b      	ldr	r3, [r3, #24]
 800a472:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	6a1b      	ldr	r3, [r3, #32]
 800a478:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a47a:	697b      	ldr	r3, [r7, #20]
 800a47c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a480:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	031b      	lsls	r3, r3, #12
 800a486:	697a      	ldr	r2, [r7, #20]
 800a488:	4313      	orrs	r3, r2
 800a48a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a48c:	693b      	ldr	r3, [r7, #16]
 800a48e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a492:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	011b      	lsls	r3, r3, #4
 800a498:	693a      	ldr	r2, [r7, #16]
 800a49a:	4313      	orrs	r3, r2
 800a49c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	697a      	ldr	r2, [r7, #20]
 800a4a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	693a      	ldr	r2, [r7, #16]
 800a4a8:	621a      	str	r2, [r3, #32]
}
 800a4aa:	bf00      	nop
 800a4ac:	371c      	adds	r7, #28
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr

0800a4b6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	b085      	sub	sp, #20
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
 800a4be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	689b      	ldr	r3, [r3, #8]
 800a4c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a4cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a4d2:	683a      	ldr	r2, [r7, #0]
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	4313      	orrs	r3, r2
 800a4d8:	f043 0307 	orr.w	r3, r3, #7
 800a4dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	68fa      	ldr	r2, [r7, #12]
 800a4e2:	609a      	str	r2, [r3, #8]
}
 800a4e4:	bf00      	nop
 800a4e6:	3714      	adds	r7, #20
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ee:	4770      	bx	lr

0800a4f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a4f0:	b480      	push	{r7}
 800a4f2:	b087      	sub	sp, #28
 800a4f4:	af00      	add	r7, sp, #0
 800a4f6:	60f8      	str	r0, [r7, #12]
 800a4f8:	60b9      	str	r1, [r7, #8]
 800a4fa:	607a      	str	r2, [r7, #4]
 800a4fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	689b      	ldr	r3, [r3, #8]
 800a502:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a50a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a50c:	683b      	ldr	r3, [r7, #0]
 800a50e:	021a      	lsls	r2, r3, #8
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	431a      	orrs	r2, r3
 800a514:	68bb      	ldr	r3, [r7, #8]
 800a516:	4313      	orrs	r3, r2
 800a518:	697a      	ldr	r2, [r7, #20]
 800a51a:	4313      	orrs	r3, r2
 800a51c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a51e:	68fb      	ldr	r3, [r7, #12]
 800a520:	697a      	ldr	r2, [r7, #20]
 800a522:	609a      	str	r2, [r3, #8]
}
 800a524:	bf00      	nop
 800a526:	371c      	adds	r7, #28
 800a528:	46bd      	mov	sp, r7
 800a52a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a52e:	4770      	bx	lr

0800a530 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a530:	b480      	push	{r7}
 800a532:	b085      	sub	sp, #20
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
 800a538:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a540:	2b01      	cmp	r3, #1
 800a542:	d101      	bne.n	800a548 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a544:	2302      	movs	r3, #2
 800a546:	e074      	b.n	800a632 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2201      	movs	r2, #1
 800a54c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2202      	movs	r2, #2
 800a554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	685b      	ldr	r3, [r3, #4]
 800a55e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	689b      	ldr	r3, [r3, #8]
 800a566:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	4a34      	ldr	r2, [pc, #208]	; (800a640 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a56e:	4293      	cmp	r3, r2
 800a570:	d009      	beq.n	800a586 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	4a33      	ldr	r2, [pc, #204]	; (800a644 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a578:	4293      	cmp	r3, r2
 800a57a:	d004      	beq.n	800a586 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	4a31      	ldr	r2, [pc, #196]	; (800a648 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a582:	4293      	cmp	r3, r2
 800a584:	d108      	bne.n	800a598 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a58c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a58e:	683b      	ldr	r3, [r7, #0]
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	68fa      	ldr	r2, [r7, #12]
 800a594:	4313      	orrs	r3, r2
 800a596:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a59e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a5a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	68fa      	ldr	r2, [r7, #12]
 800a5aa:	4313      	orrs	r3, r2
 800a5ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	68fa      	ldr	r2, [r7, #12]
 800a5b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	4a21      	ldr	r2, [pc, #132]	; (800a640 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a5bc:	4293      	cmp	r3, r2
 800a5be:	d022      	beq.n	800a606 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5c8:	d01d      	beq.n	800a606 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	4a1f      	ldr	r2, [pc, #124]	; (800a64c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800a5d0:	4293      	cmp	r3, r2
 800a5d2:	d018      	beq.n	800a606 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	4a1d      	ldr	r2, [pc, #116]	; (800a650 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d013      	beq.n	800a606 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	4a1c      	ldr	r2, [pc, #112]	; (800a654 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800a5e4:	4293      	cmp	r3, r2
 800a5e6:	d00e      	beq.n	800a606 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	4a15      	ldr	r2, [pc, #84]	; (800a644 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a5ee:	4293      	cmp	r3, r2
 800a5f0:	d009      	beq.n	800a606 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	4a18      	ldr	r2, [pc, #96]	; (800a658 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d004      	beq.n	800a606 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	4a11      	ldr	r2, [pc, #68]	; (800a648 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a602:	4293      	cmp	r3, r2
 800a604:	d10c      	bne.n	800a620 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a60c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	689b      	ldr	r3, [r3, #8]
 800a612:	68ba      	ldr	r2, [r7, #8]
 800a614:	4313      	orrs	r3, r2
 800a616:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	68ba      	ldr	r2, [r7, #8]
 800a61e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	2201      	movs	r2, #1
 800a624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2200      	movs	r2, #0
 800a62c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a630:	2300      	movs	r3, #0
}
 800a632:	4618      	mov	r0, r3
 800a634:	3714      	adds	r7, #20
 800a636:	46bd      	mov	sp, r7
 800a638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a63c:	4770      	bx	lr
 800a63e:	bf00      	nop
 800a640:	40012c00 	.word	0x40012c00
 800a644:	40013400 	.word	0x40013400
 800a648:	40015000 	.word	0x40015000
 800a64c:	40000400 	.word	0x40000400
 800a650:	40000800 	.word	0x40000800
 800a654:	40000c00 	.word	0x40000c00
 800a658:	40014000 	.word	0x40014000

0800a65c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a65c:	b480      	push	{r7}
 800a65e:	b085      	sub	sp, #20
 800a660:	af00      	add	r7, sp, #0
 800a662:	6078      	str	r0, [r7, #4]
 800a664:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a666:	2300      	movs	r3, #0
 800a668:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a670:	2b01      	cmp	r3, #1
 800a672:	d101      	bne.n	800a678 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a674:	2302      	movs	r3, #2
 800a676:	e096      	b.n	800a7a6 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2201      	movs	r2, #1
 800a67c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	68db      	ldr	r3, [r3, #12]
 800a68a:	4313      	orrs	r3, r2
 800a68c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a694:	683b      	ldr	r3, [r7, #0]
 800a696:	689b      	ldr	r3, [r3, #8]
 800a698:	4313      	orrs	r3, r2
 800a69a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	685b      	ldr	r3, [r3, #4]
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a6b0:	683b      	ldr	r3, [r7, #0]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a6be:	683b      	ldr	r3, [r7, #0]
 800a6c0:	691b      	ldr	r3, [r3, #16]
 800a6c2:	4313      	orrs	r3, r2
 800a6c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	695b      	ldr	r3, [r3, #20]
 800a6d0:	4313      	orrs	r3, r2
 800a6d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a6da:	683b      	ldr	r3, [r7, #0]
 800a6dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6de:	4313      	orrs	r3, r2
 800a6e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	699b      	ldr	r3, [r3, #24]
 800a6ec:	041b      	lsls	r3, r3, #16
 800a6ee:	4313      	orrs	r3, r2
 800a6f0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	4a2f      	ldr	r2, [pc, #188]	; (800a7b4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d009      	beq.n	800a710 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a2d      	ldr	r2, [pc, #180]	; (800a7b8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d004      	beq.n	800a710 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	4a2c      	ldr	r2, [pc, #176]	; (800a7bc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a70c:	4293      	cmp	r3, r2
 800a70e:	d106      	bne.n	800a71e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800a716:	683b      	ldr	r3, [r7, #0]
 800a718:	69db      	ldr	r3, [r3, #28]
 800a71a:	4313      	orrs	r3, r2
 800a71c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	4a24      	ldr	r2, [pc, #144]	; (800a7b4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d009      	beq.n	800a73c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a22      	ldr	r2, [pc, #136]	; (800a7b8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d004      	beq.n	800a73c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a21      	ldr	r2, [pc, #132]	; (800a7bc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d12b      	bne.n	800a794 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a742:	683b      	ldr	r3, [r7, #0]
 800a744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a746:	051b      	lsls	r3, r3, #20
 800a748:	4313      	orrs	r3, r2
 800a74a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	6a1b      	ldr	r3, [r3, #32]
 800a756:	4313      	orrs	r3, r2
 800a758:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a764:	4313      	orrs	r3, r2
 800a766:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	4a11      	ldr	r2, [pc, #68]	; (800a7b4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d009      	beq.n	800a786 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	4a10      	ldr	r2, [pc, #64]	; (800a7b8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800a778:	4293      	cmp	r3, r2
 800a77a:	d004      	beq.n	800a786 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	4a0e      	ldr	r2, [pc, #56]	; (800a7bc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800a782:	4293      	cmp	r3, r2
 800a784:	d106      	bne.n	800a794 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800a78c:	683b      	ldr	r3, [r7, #0]
 800a78e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a790:	4313      	orrs	r3, r2
 800a792:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	2200      	movs	r2, #0
 800a7a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7a4:	2300      	movs	r3, #0
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3714      	adds	r7, #20
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b0:	4770      	bx	lr
 800a7b2:	bf00      	nop
 800a7b4:	40012c00 	.word	0x40012c00
 800a7b8:	40013400 	.word	0x40013400
 800a7bc:	40015000 	.word	0x40015000

0800a7c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b083      	sub	sp, #12
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a7c8:	bf00      	nop
 800a7ca:	370c      	adds	r7, #12
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a7d4:	b480      	push	{r7}
 800a7d6:	b083      	sub	sp, #12
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a7dc:	bf00      	nop
 800a7de:	370c      	adds	r7, #12
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b083      	sub	sp, #12
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a7f0:	bf00      	nop
 800a7f2:	370c      	adds	r7, #12
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr

0800a7fc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a7fc:	b480      	push	{r7}
 800a7fe:	b083      	sub	sp, #12
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a804:	bf00      	nop
 800a806:	370c      	adds	r7, #12
 800a808:	46bd      	mov	sp, r7
 800a80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80e:	4770      	bx	lr

0800a810 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a810:	b480      	push	{r7}
 800a812:	b083      	sub	sp, #12
 800a814:	af00      	add	r7, sp, #0
 800a816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a818:	bf00      	nop
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr

0800a824 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a82c:	bf00      	nop
 800a82e:	370c      	adds	r7, #12
 800a830:	46bd      	mov	sp, r7
 800a832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a836:	4770      	bx	lr

0800a838 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a838:	b480      	push	{r7}
 800a83a:	b083      	sub	sp, #12
 800a83c:	af00      	add	r7, sp, #0
 800a83e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a840:	bf00      	nop
 800a842:	370c      	adds	r7, #12
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <LL_EXTI_EnableIT_0_31>:
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800a854:	4b05      	ldr	r3, [pc, #20]	; (800a86c <LL_EXTI_EnableIT_0_31+0x20>)
 800a856:	681a      	ldr	r2, [r3, #0]
 800a858:	4904      	ldr	r1, [pc, #16]	; (800a86c <LL_EXTI_EnableIT_0_31+0x20>)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4313      	orrs	r3, r2
 800a85e:	600b      	str	r3, [r1, #0]
}
 800a860:	bf00      	nop
 800a862:	370c      	adds	r7, #12
 800a864:	46bd      	mov	sp, r7
 800a866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86a:	4770      	bx	lr
 800a86c:	40010400 	.word	0x40010400

0800a870 <LL_EXTI_EnableIT_32_63>:
{
 800a870:	b480      	push	{r7}
 800a872:	b083      	sub	sp, #12
 800a874:	af00      	add	r7, sp, #0
 800a876:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800a878:	4b05      	ldr	r3, [pc, #20]	; (800a890 <LL_EXTI_EnableIT_32_63+0x20>)
 800a87a:	6a1a      	ldr	r2, [r3, #32]
 800a87c:	4904      	ldr	r1, [pc, #16]	; (800a890 <LL_EXTI_EnableIT_32_63+0x20>)
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	4313      	orrs	r3, r2
 800a882:	620b      	str	r3, [r1, #32]
}
 800a884:	bf00      	nop
 800a886:	370c      	adds	r7, #12
 800a888:	46bd      	mov	sp, r7
 800a88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a88e:	4770      	bx	lr
 800a890:	40010400 	.word	0x40010400

0800a894 <LL_EXTI_DisableIT_0_31>:
{
 800a894:	b480      	push	{r7}
 800a896:	b083      	sub	sp, #12
 800a898:	af00      	add	r7, sp, #0
 800a89a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800a89c:	4b06      	ldr	r3, [pc, #24]	; (800a8b8 <LL_EXTI_DisableIT_0_31+0x24>)
 800a89e:	681a      	ldr	r2, [r3, #0]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	43db      	mvns	r3, r3
 800a8a4:	4904      	ldr	r1, [pc, #16]	; (800a8b8 <LL_EXTI_DisableIT_0_31+0x24>)
 800a8a6:	4013      	ands	r3, r2
 800a8a8:	600b      	str	r3, [r1, #0]
}
 800a8aa:	bf00      	nop
 800a8ac:	370c      	adds	r7, #12
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b4:	4770      	bx	lr
 800a8b6:	bf00      	nop
 800a8b8:	40010400 	.word	0x40010400

0800a8bc <LL_EXTI_DisableIT_32_63>:
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800a8c4:	4b06      	ldr	r3, [pc, #24]	; (800a8e0 <LL_EXTI_DisableIT_32_63+0x24>)
 800a8c6:	6a1a      	ldr	r2, [r3, #32]
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	43db      	mvns	r3, r3
 800a8cc:	4904      	ldr	r1, [pc, #16]	; (800a8e0 <LL_EXTI_DisableIT_32_63+0x24>)
 800a8ce:	4013      	ands	r3, r2
 800a8d0:	620b      	str	r3, [r1, #32]
}
 800a8d2:	bf00      	nop
 800a8d4:	370c      	adds	r7, #12
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr
 800a8de:	bf00      	nop
 800a8e0:	40010400 	.word	0x40010400

0800a8e4 <LL_EXTI_EnableEvent_0_31>:
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800a8ec:	4b05      	ldr	r3, [pc, #20]	; (800a904 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a8ee:	685a      	ldr	r2, [r3, #4]
 800a8f0:	4904      	ldr	r1, [pc, #16]	; (800a904 <LL_EXTI_EnableEvent_0_31+0x20>)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	4313      	orrs	r3, r2
 800a8f6:	604b      	str	r3, [r1, #4]
}
 800a8f8:	bf00      	nop
 800a8fa:	370c      	adds	r7, #12
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a902:	4770      	bx	lr
 800a904:	40010400 	.word	0x40010400

0800a908 <LL_EXTI_EnableEvent_32_63>:
{
 800a908:	b480      	push	{r7}
 800a90a:	b083      	sub	sp, #12
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800a910:	4b05      	ldr	r3, [pc, #20]	; (800a928 <LL_EXTI_EnableEvent_32_63+0x20>)
 800a912:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a914:	4904      	ldr	r1, [pc, #16]	; (800a928 <LL_EXTI_EnableEvent_32_63+0x20>)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	4313      	orrs	r3, r2
 800a91a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a91c:	bf00      	nop
 800a91e:	370c      	adds	r7, #12
 800a920:	46bd      	mov	sp, r7
 800a922:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a926:	4770      	bx	lr
 800a928:	40010400 	.word	0x40010400

0800a92c <LL_EXTI_DisableEvent_0_31>:
{
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800a934:	4b06      	ldr	r3, [pc, #24]	; (800a950 <LL_EXTI_DisableEvent_0_31+0x24>)
 800a936:	685a      	ldr	r2, [r3, #4]
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	43db      	mvns	r3, r3
 800a93c:	4904      	ldr	r1, [pc, #16]	; (800a950 <LL_EXTI_DisableEvent_0_31+0x24>)
 800a93e:	4013      	ands	r3, r2
 800a940:	604b      	str	r3, [r1, #4]
}
 800a942:	bf00      	nop
 800a944:	370c      	adds	r7, #12
 800a946:	46bd      	mov	sp, r7
 800a948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94c:	4770      	bx	lr
 800a94e:	bf00      	nop
 800a950:	40010400 	.word	0x40010400

0800a954 <LL_EXTI_DisableEvent_32_63>:
{
 800a954:	b480      	push	{r7}
 800a956:	b083      	sub	sp, #12
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800a95c:	4b06      	ldr	r3, [pc, #24]	; (800a978 <LL_EXTI_DisableEvent_32_63+0x24>)
 800a95e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	43db      	mvns	r3, r3
 800a964:	4904      	ldr	r1, [pc, #16]	; (800a978 <LL_EXTI_DisableEvent_32_63+0x24>)
 800a966:	4013      	ands	r3, r2
 800a968:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a96a:	bf00      	nop
 800a96c:	370c      	adds	r7, #12
 800a96e:	46bd      	mov	sp, r7
 800a970:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a974:	4770      	bx	lr
 800a976:	bf00      	nop
 800a978:	40010400 	.word	0x40010400

0800a97c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800a97c:	b480      	push	{r7}
 800a97e:	b083      	sub	sp, #12
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800a984:	4b05      	ldr	r3, [pc, #20]	; (800a99c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a986:	689a      	ldr	r2, [r3, #8]
 800a988:	4904      	ldr	r1, [pc, #16]	; (800a99c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4313      	orrs	r3, r2
 800a98e:	608b      	str	r3, [r1, #8]
}
 800a990:	bf00      	nop
 800a992:	370c      	adds	r7, #12
 800a994:	46bd      	mov	sp, r7
 800a996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99a:	4770      	bx	lr
 800a99c:	40010400 	.word	0x40010400

0800a9a0 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800a9a0:	b480      	push	{r7}
 800a9a2:	b083      	sub	sp, #12
 800a9a4:	af00      	add	r7, sp, #0
 800a9a6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800a9a8:	4b05      	ldr	r3, [pc, #20]	; (800a9c0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a9aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a9ac:	4904      	ldr	r1, [pc, #16]	; (800a9c0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a9ae:	687b      	ldr	r3, [r7, #4]
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	628b      	str	r3, [r1, #40]	; 0x28
}
 800a9b4:	bf00      	nop
 800a9b6:	370c      	adds	r7, #12
 800a9b8:	46bd      	mov	sp, r7
 800a9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9be:	4770      	bx	lr
 800a9c0:	40010400 	.word	0x40010400

0800a9c4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800a9c4:	b480      	push	{r7}
 800a9c6:	b083      	sub	sp, #12
 800a9c8:	af00      	add	r7, sp, #0
 800a9ca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800a9cc:	4b06      	ldr	r3, [pc, #24]	; (800a9e8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a9ce:	689a      	ldr	r2, [r3, #8]
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	43db      	mvns	r3, r3
 800a9d4:	4904      	ldr	r1, [pc, #16]	; (800a9e8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a9d6:	4013      	ands	r3, r2
 800a9d8:	608b      	str	r3, [r1, #8]
}
 800a9da:	bf00      	nop
 800a9dc:	370c      	adds	r7, #12
 800a9de:	46bd      	mov	sp, r7
 800a9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9e4:	4770      	bx	lr
 800a9e6:	bf00      	nop
 800a9e8:	40010400 	.word	0x40010400

0800a9ec <LL_EXTI_DisableRisingTrig_32_63>:
{
 800a9ec:	b480      	push	{r7}
 800a9ee:	b083      	sub	sp, #12
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800a9f4:	4b06      	ldr	r3, [pc, #24]	; (800aa10 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800a9f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	43db      	mvns	r3, r3
 800a9fc:	4904      	ldr	r1, [pc, #16]	; (800aa10 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800a9fe:	4013      	ands	r3, r2
 800aa00:	628b      	str	r3, [r1, #40]	; 0x28
}
 800aa02:	bf00      	nop
 800aa04:	370c      	adds	r7, #12
 800aa06:	46bd      	mov	sp, r7
 800aa08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0c:	4770      	bx	lr
 800aa0e:	bf00      	nop
 800aa10:	40010400 	.word	0x40010400

0800aa14 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800aa14:	b480      	push	{r7}
 800aa16:	b083      	sub	sp, #12
 800aa18:	af00      	add	r7, sp, #0
 800aa1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800aa1c:	4b05      	ldr	r3, [pc, #20]	; (800aa34 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800aa1e:	68da      	ldr	r2, [r3, #12]
 800aa20:	4904      	ldr	r1, [pc, #16]	; (800aa34 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	60cb      	str	r3, [r1, #12]
}
 800aa28:	bf00      	nop
 800aa2a:	370c      	adds	r7, #12
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa32:	4770      	bx	lr
 800aa34:	40010400 	.word	0x40010400

0800aa38 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800aa38:	b480      	push	{r7}
 800aa3a:	b083      	sub	sp, #12
 800aa3c:	af00      	add	r7, sp, #0
 800aa3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800aa40:	4b05      	ldr	r3, [pc, #20]	; (800aa58 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800aa42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa44:	4904      	ldr	r1, [pc, #16]	; (800aa58 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4313      	orrs	r3, r2
 800aa4a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800aa4c:	bf00      	nop
 800aa4e:	370c      	adds	r7, #12
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr
 800aa58:	40010400 	.word	0x40010400

0800aa5c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800aa5c:	b480      	push	{r7}
 800aa5e:	b083      	sub	sp, #12
 800aa60:	af00      	add	r7, sp, #0
 800aa62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800aa64:	4b06      	ldr	r3, [pc, #24]	; (800aa80 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800aa66:	68da      	ldr	r2, [r3, #12]
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	43db      	mvns	r3, r3
 800aa6c:	4904      	ldr	r1, [pc, #16]	; (800aa80 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800aa6e:	4013      	ands	r3, r2
 800aa70:	60cb      	str	r3, [r1, #12]
}
 800aa72:	bf00      	nop
 800aa74:	370c      	adds	r7, #12
 800aa76:	46bd      	mov	sp, r7
 800aa78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7c:	4770      	bx	lr
 800aa7e:	bf00      	nop
 800aa80:	40010400 	.word	0x40010400

0800aa84 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800aa84:	b480      	push	{r7}
 800aa86:	b083      	sub	sp, #12
 800aa88:	af00      	add	r7, sp, #0
 800aa8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800aa8c:	4b06      	ldr	r3, [pc, #24]	; (800aaa8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800aa8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	43db      	mvns	r3, r3
 800aa94:	4904      	ldr	r1, [pc, #16]	; (800aaa8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800aa96:	4013      	ands	r3, r2
 800aa98:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800aa9a:	bf00      	nop
 800aa9c:	370c      	adds	r7, #12
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr
 800aaa6:	bf00      	nop
 800aaa8:	40010400 	.word	0x40010400

0800aaac <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800aab4:	2300      	movs	r3, #0
 800aab6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	7a1b      	ldrb	r3, [r3, #8]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	f000 80c8 	beq.w	800ac52 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d05d      	beq.n	800ab86 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	7a5b      	ldrb	r3, [r3, #9]
 800aace:	2b01      	cmp	r3, #1
 800aad0:	d00e      	beq.n	800aaf0 <LL_EXTI_Init+0x44>
 800aad2:	2b02      	cmp	r3, #2
 800aad4:	d017      	beq.n	800ab06 <LL_EXTI_Init+0x5a>
 800aad6:	2b00      	cmp	r3, #0
 800aad8:	d120      	bne.n	800ab1c <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	4618      	mov	r0, r3
 800aae0:	f7ff ff24 	bl	800a92c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4618      	mov	r0, r3
 800aaea:	f7ff feaf 	bl	800a84c <LL_EXTI_EnableIT_0_31>
          break;
 800aaee:	e018      	b.n	800ab22 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	4618      	mov	r0, r3
 800aaf6:	f7ff fecd 	bl	800a894 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	4618      	mov	r0, r3
 800ab00:	f7ff fef0 	bl	800a8e4 <LL_EXTI_EnableEvent_0_31>
          break;
 800ab04:	e00d      	b.n	800ab22 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4618      	mov	r0, r3
 800ab0c:	f7ff fe9e 	bl	800a84c <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4618      	mov	r0, r3
 800ab16:	f7ff fee5 	bl	800a8e4 <LL_EXTI_EnableEvent_0_31>
          break;
 800ab1a:	e002      	b.n	800ab22 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	60fb      	str	r3, [r7, #12]
          break;
 800ab20:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	7a9b      	ldrb	r3, [r3, #10]
 800ab26:	2b00      	cmp	r3, #0
 800ab28:	d02d      	beq.n	800ab86 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	7a9b      	ldrb	r3, [r3, #10]
 800ab2e:	2b02      	cmp	r3, #2
 800ab30:	d00e      	beq.n	800ab50 <LL_EXTI_Init+0xa4>
 800ab32:	2b03      	cmp	r3, #3
 800ab34:	d017      	beq.n	800ab66 <LL_EXTI_Init+0xba>
 800ab36:	2b01      	cmp	r3, #1
 800ab38:	d120      	bne.n	800ab7c <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f7ff ff8c 	bl	800aa5c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	681b      	ldr	r3, [r3, #0]
 800ab48:	4618      	mov	r0, r3
 800ab4a:	f7ff ff17 	bl	800a97c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800ab4e:	e01b      	b.n	800ab88 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	4618      	mov	r0, r3
 800ab56:	f7ff ff35 	bl	800a9c4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	4618      	mov	r0, r3
 800ab60:	f7ff ff58 	bl	800aa14 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800ab64:	e010      	b.n	800ab88 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	f7ff ff06 	bl	800a97c <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	4618      	mov	r0, r3
 800ab76:	f7ff ff4d 	bl	800aa14 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800ab7a:	e005      	b.n	800ab88 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	f043 0302 	orr.w	r3, r3, #2
 800ab82:	60fb      	str	r3, [r7, #12]
            break;
 800ab84:	e000      	b.n	800ab88 <LL_EXTI_Init+0xdc>
        }
      }
 800ab86:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d075      	beq.n	800ac7c <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	7a5b      	ldrb	r3, [r3, #9]
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d00e      	beq.n	800abb6 <LL_EXTI_Init+0x10a>
 800ab98:	2b02      	cmp	r3, #2
 800ab9a:	d017      	beq.n	800abcc <LL_EXTI_Init+0x120>
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d120      	bne.n	800abe2 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7ff fed5 	bl	800a954 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	4618      	mov	r0, r3
 800abb0:	f7ff fe5e 	bl	800a870 <LL_EXTI_EnableIT_32_63>
          break;
 800abb4:	e01a      	b.n	800abec <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	685b      	ldr	r3, [r3, #4]
 800abba:	4618      	mov	r0, r3
 800abbc:	f7ff fe7e 	bl	800a8bc <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	685b      	ldr	r3, [r3, #4]
 800abc4:	4618      	mov	r0, r3
 800abc6:	f7ff fe9f 	bl	800a908 <LL_EXTI_EnableEvent_32_63>
          break;
 800abca:	e00f      	b.n	800abec <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	685b      	ldr	r3, [r3, #4]
 800abd0:	4618      	mov	r0, r3
 800abd2:	f7ff fe4d 	bl	800a870 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	685b      	ldr	r3, [r3, #4]
 800abda:	4618      	mov	r0, r3
 800abdc:	f7ff fe94 	bl	800a908 <LL_EXTI_EnableEvent_32_63>
          break;
 800abe0:	e004      	b.n	800abec <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f043 0304 	orr.w	r3, r3, #4
 800abe8:	60fb      	str	r3, [r7, #12]
          break;
 800abea:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	7a9b      	ldrb	r3, [r3, #10]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d043      	beq.n	800ac7c <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	7a9b      	ldrb	r3, [r3, #10]
 800abf8:	2b02      	cmp	r3, #2
 800abfa:	d00e      	beq.n	800ac1a <LL_EXTI_Init+0x16e>
 800abfc:	2b03      	cmp	r3, #3
 800abfe:	d017      	beq.n	800ac30 <LL_EXTI_Init+0x184>
 800ac00:	2b01      	cmp	r3, #1
 800ac02:	d120      	bne.n	800ac46 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	685b      	ldr	r3, [r3, #4]
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f7ff ff3b 	bl	800aa84 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7ff fec4 	bl	800a9a0 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800ac18:	e031      	b.n	800ac7e <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	4618      	mov	r0, r3
 800ac20:	f7ff fee4 	bl	800a9ec <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f7ff ff05 	bl	800aa38 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800ac2e:	e026      	b.n	800ac7e <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	4618      	mov	r0, r3
 800ac36:	f7ff feb3 	bl	800a9a0 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	685b      	ldr	r3, [r3, #4]
 800ac3e:	4618      	mov	r0, r3
 800ac40:	f7ff fefa 	bl	800aa38 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800ac44:	e01b      	b.n	800ac7e <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f043 0305 	orr.w	r3, r3, #5
 800ac4c:	60fb      	str	r3, [r7, #12]
            break;
 800ac4e:	bf00      	nop
 800ac50:	e015      	b.n	800ac7e <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	4618      	mov	r0, r3
 800ac58:	f7ff fe1c 	bl	800a894 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4618      	mov	r0, r3
 800ac62:	f7ff fe63 	bl	800a92c <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	685b      	ldr	r3, [r3, #4]
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	f7ff fe26 	bl	800a8bc <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	685b      	ldr	r3, [r3, #4]
 800ac74:	4618      	mov	r0, r3
 800ac76:	f7ff fe6d 	bl	800a954 <LL_EXTI_DisableEvent_32_63>
 800ac7a:	e000      	b.n	800ac7e <LL_EXTI_Init+0x1d2>
      }
 800ac7c:	bf00      	nop
  }

  return status;
 800ac7e:	68fb      	ldr	r3, [r7, #12]
}
 800ac80:	4618      	mov	r0, r3
 800ac82:	3710      	adds	r7, #16
 800ac84:	46bd      	mov	sp, r7
 800ac86:	bd80      	pop	{r7, pc}

0800ac88 <LL_GPIO_SetPinMode>:
{
 800ac88:	b480      	push	{r7}
 800ac8a:	b089      	sub	sp, #36	; 0x24
 800ac8c:	af00      	add	r7, sp, #0
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	60b9      	str	r1, [r7, #8]
 800ac92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681a      	ldr	r2, [r3, #0]
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	fa93 f3a3 	rbit	r3, r3
 800aca2:	613b      	str	r3, [r7, #16]
  return result;
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	fab3 f383 	clz	r3, r3
 800acaa:	b2db      	uxtb	r3, r3
 800acac:	005b      	lsls	r3, r3, #1
 800acae:	2103      	movs	r1, #3
 800acb0:	fa01 f303 	lsl.w	r3, r1, r3
 800acb4:	43db      	mvns	r3, r3
 800acb6:	401a      	ands	r2, r3
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800acbc:	69fb      	ldr	r3, [r7, #28]
 800acbe:	fa93 f3a3 	rbit	r3, r3
 800acc2:	61bb      	str	r3, [r7, #24]
  return result;
 800acc4:	69bb      	ldr	r3, [r7, #24]
 800acc6:	fab3 f383 	clz	r3, r3
 800acca:	b2db      	uxtb	r3, r3
 800accc:	005b      	lsls	r3, r3, #1
 800acce:	6879      	ldr	r1, [r7, #4]
 800acd0:	fa01 f303 	lsl.w	r3, r1, r3
 800acd4:	431a      	orrs	r2, r3
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	601a      	str	r2, [r3, #0]
}
 800acda:	bf00      	nop
 800acdc:	3724      	adds	r7, #36	; 0x24
 800acde:	46bd      	mov	sp, r7
 800ace0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ace4:	4770      	bx	lr

0800ace6 <LL_GPIO_SetPinOutputType>:
{
 800ace6:	b480      	push	{r7}
 800ace8:	b085      	sub	sp, #20
 800acea:	af00      	add	r7, sp, #0
 800acec:	60f8      	str	r0, [r7, #12]
 800acee:	60b9      	str	r1, [r7, #8]
 800acf0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	685a      	ldr	r2, [r3, #4]
 800acf6:	68bb      	ldr	r3, [r7, #8]
 800acf8:	43db      	mvns	r3, r3
 800acfa:	401a      	ands	r2, r3
 800acfc:	68bb      	ldr	r3, [r7, #8]
 800acfe:	6879      	ldr	r1, [r7, #4]
 800ad00:	fb01 f303 	mul.w	r3, r1, r3
 800ad04:	431a      	orrs	r2, r3
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	605a      	str	r2, [r3, #4]
}
 800ad0a:	bf00      	nop
 800ad0c:	3714      	adds	r7, #20
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad14:	4770      	bx	lr

0800ad16 <LL_GPIO_SetPinSpeed>:
{
 800ad16:	b480      	push	{r7}
 800ad18:	b089      	sub	sp, #36	; 0x24
 800ad1a:	af00      	add	r7, sp, #0
 800ad1c:	60f8      	str	r0, [r7, #12]
 800ad1e:	60b9      	str	r1, [r7, #8]
 800ad20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	689a      	ldr	r2, [r3, #8]
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	fa93 f3a3 	rbit	r3, r3
 800ad30:	613b      	str	r3, [r7, #16]
  return result;
 800ad32:	693b      	ldr	r3, [r7, #16]
 800ad34:	fab3 f383 	clz	r3, r3
 800ad38:	b2db      	uxtb	r3, r3
 800ad3a:	005b      	lsls	r3, r3, #1
 800ad3c:	2103      	movs	r1, #3
 800ad3e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad42:	43db      	mvns	r3, r3
 800ad44:	401a      	ands	r2, r3
 800ad46:	68bb      	ldr	r3, [r7, #8]
 800ad48:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad4a:	69fb      	ldr	r3, [r7, #28]
 800ad4c:	fa93 f3a3 	rbit	r3, r3
 800ad50:	61bb      	str	r3, [r7, #24]
  return result;
 800ad52:	69bb      	ldr	r3, [r7, #24]
 800ad54:	fab3 f383 	clz	r3, r3
 800ad58:	b2db      	uxtb	r3, r3
 800ad5a:	005b      	lsls	r3, r3, #1
 800ad5c:	6879      	ldr	r1, [r7, #4]
 800ad5e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad62:	431a      	orrs	r2, r3
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	609a      	str	r2, [r3, #8]
}
 800ad68:	bf00      	nop
 800ad6a:	3724      	adds	r7, #36	; 0x24
 800ad6c:	46bd      	mov	sp, r7
 800ad6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad72:	4770      	bx	lr

0800ad74 <LL_GPIO_SetPinPull>:
{
 800ad74:	b480      	push	{r7}
 800ad76:	b089      	sub	sp, #36	; 0x24
 800ad78:	af00      	add	r7, sp, #0
 800ad7a:	60f8      	str	r0, [r7, #12]
 800ad7c:	60b9      	str	r1, [r7, #8]
 800ad7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	68da      	ldr	r2, [r3, #12]
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	fa93 f3a3 	rbit	r3, r3
 800ad8e:	613b      	str	r3, [r7, #16]
  return result;
 800ad90:	693b      	ldr	r3, [r7, #16]
 800ad92:	fab3 f383 	clz	r3, r3
 800ad96:	b2db      	uxtb	r3, r3
 800ad98:	005b      	lsls	r3, r3, #1
 800ad9a:	2103      	movs	r1, #3
 800ad9c:	fa01 f303 	lsl.w	r3, r1, r3
 800ada0:	43db      	mvns	r3, r3
 800ada2:	401a      	ands	r2, r3
 800ada4:	68bb      	ldr	r3, [r7, #8]
 800ada6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ada8:	69fb      	ldr	r3, [r7, #28]
 800adaa:	fa93 f3a3 	rbit	r3, r3
 800adae:	61bb      	str	r3, [r7, #24]
  return result;
 800adb0:	69bb      	ldr	r3, [r7, #24]
 800adb2:	fab3 f383 	clz	r3, r3
 800adb6:	b2db      	uxtb	r3, r3
 800adb8:	005b      	lsls	r3, r3, #1
 800adba:	6879      	ldr	r1, [r7, #4]
 800adbc:	fa01 f303 	lsl.w	r3, r1, r3
 800adc0:	431a      	orrs	r2, r3
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	60da      	str	r2, [r3, #12]
}
 800adc6:	bf00      	nop
 800adc8:	3724      	adds	r7, #36	; 0x24
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr

0800add2 <LL_GPIO_SetAFPin_0_7>:
{
 800add2:	b480      	push	{r7}
 800add4:	b089      	sub	sp, #36	; 0x24
 800add6:	af00      	add	r7, sp, #0
 800add8:	60f8      	str	r0, [r7, #12]
 800adda:	60b9      	str	r1, [r7, #8]
 800addc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	6a1a      	ldr	r2, [r3, #32]
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	fa93 f3a3 	rbit	r3, r3
 800adec:	613b      	str	r3, [r7, #16]
  return result;
 800adee:	693b      	ldr	r3, [r7, #16]
 800adf0:	fab3 f383 	clz	r3, r3
 800adf4:	b2db      	uxtb	r3, r3
 800adf6:	009b      	lsls	r3, r3, #2
 800adf8:	210f      	movs	r1, #15
 800adfa:	fa01 f303 	lsl.w	r3, r1, r3
 800adfe:	43db      	mvns	r3, r3
 800ae00:	401a      	ands	r2, r3
 800ae02:	68bb      	ldr	r3, [r7, #8]
 800ae04:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae06:	69fb      	ldr	r3, [r7, #28]
 800ae08:	fa93 f3a3 	rbit	r3, r3
 800ae0c:	61bb      	str	r3, [r7, #24]
  return result;
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	fab3 f383 	clz	r3, r3
 800ae14:	b2db      	uxtb	r3, r3
 800ae16:	009b      	lsls	r3, r3, #2
 800ae18:	6879      	ldr	r1, [r7, #4]
 800ae1a:	fa01 f303 	lsl.w	r3, r1, r3
 800ae1e:	431a      	orrs	r2, r3
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	621a      	str	r2, [r3, #32]
}
 800ae24:	bf00      	nop
 800ae26:	3724      	adds	r7, #36	; 0x24
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <LL_GPIO_SetAFPin_8_15>:
{
 800ae30:	b480      	push	{r7}
 800ae32:	b089      	sub	sp, #36	; 0x24
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	60f8      	str	r0, [r7, #12]
 800ae38:	60b9      	str	r1, [r7, #8]
 800ae3a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae40:	68bb      	ldr	r3, [r7, #8]
 800ae42:	0a1b      	lsrs	r3, r3, #8
 800ae44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae46:	697b      	ldr	r3, [r7, #20]
 800ae48:	fa93 f3a3 	rbit	r3, r3
 800ae4c:	613b      	str	r3, [r7, #16]
  return result;
 800ae4e:	693b      	ldr	r3, [r7, #16]
 800ae50:	fab3 f383 	clz	r3, r3
 800ae54:	b2db      	uxtb	r3, r3
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	210f      	movs	r1, #15
 800ae5a:	fa01 f303 	lsl.w	r3, r1, r3
 800ae5e:	43db      	mvns	r3, r3
 800ae60:	401a      	ands	r2, r3
 800ae62:	68bb      	ldr	r3, [r7, #8]
 800ae64:	0a1b      	lsrs	r3, r3, #8
 800ae66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ae68:	69fb      	ldr	r3, [r7, #28]
 800ae6a:	fa93 f3a3 	rbit	r3, r3
 800ae6e:	61bb      	str	r3, [r7, #24]
  return result;
 800ae70:	69bb      	ldr	r3, [r7, #24]
 800ae72:	fab3 f383 	clz	r3, r3
 800ae76:	b2db      	uxtb	r3, r3
 800ae78:	009b      	lsls	r3, r3, #2
 800ae7a:	6879      	ldr	r1, [r7, #4]
 800ae7c:	fa01 f303 	lsl.w	r3, r1, r3
 800ae80:	431a      	orrs	r2, r3
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ae86:	bf00      	nop
 800ae88:	3724      	adds	r7, #36	; 0x24
 800ae8a:	46bd      	mov	sp, r7
 800ae8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae90:	4770      	bx	lr

0800ae92 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800ae92:	b580      	push	{r7, lr}
 800ae94:	b086      	sub	sp, #24
 800ae96:	af00      	add	r7, sp, #0
 800ae98:	6078      	str	r0, [r7, #4]
 800ae9a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800ae9c:	683b      	ldr	r3, [r7, #0]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	fa93 f3a3 	rbit	r3, r3
 800aea8:	60bb      	str	r3, [r7, #8]
  return result;
 800aeaa:	68bb      	ldr	r3, [r7, #8]
 800aeac:	fab3 f383 	clz	r3, r3
 800aeb0:	b2db      	uxtb	r3, r3
 800aeb2:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800aeb4:	e040      	b.n	800af38 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800aeb6:	683b      	ldr	r3, [r7, #0]
 800aeb8:	681a      	ldr	r2, [r3, #0]
 800aeba:	2101      	movs	r1, #1
 800aebc:	697b      	ldr	r3, [r7, #20]
 800aebe:	fa01 f303 	lsl.w	r3, r1, r3
 800aec2:	4013      	ands	r3, r2
 800aec4:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800aec6:	693b      	ldr	r3, [r7, #16]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d032      	beq.n	800af32 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	685b      	ldr	r3, [r3, #4]
 800aed0:	461a      	mov	r2, r3
 800aed2:	6939      	ldr	r1, [r7, #16]
 800aed4:	6878      	ldr	r0, [r7, #4]
 800aed6:	f7ff fed7 	bl	800ac88 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d003      	beq.n	800aeea <LL_GPIO_Init+0x58>
 800aee2:	683b      	ldr	r3, [r7, #0]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	2b02      	cmp	r3, #2
 800aee8:	d106      	bne.n	800aef8 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800aeea:	683b      	ldr	r3, [r7, #0]
 800aeec:	689b      	ldr	r3, [r3, #8]
 800aeee:	461a      	mov	r2, r3
 800aef0:	6939      	ldr	r1, [r7, #16]
 800aef2:	6878      	ldr	r0, [r7, #4]
 800aef4:	f7ff ff0f 	bl	800ad16 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800aef8:	683b      	ldr	r3, [r7, #0]
 800aefa:	691b      	ldr	r3, [r3, #16]
 800aefc:	461a      	mov	r2, r3
 800aefe:	6939      	ldr	r1, [r7, #16]
 800af00:	6878      	ldr	r0, [r7, #4]
 800af02:	f7ff ff37 	bl	800ad74 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800af06:	683b      	ldr	r3, [r7, #0]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	2b02      	cmp	r3, #2
 800af0c:	d111      	bne.n	800af32 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800af0e:	693b      	ldr	r3, [r7, #16]
 800af10:	2bff      	cmp	r3, #255	; 0xff
 800af12:	d807      	bhi.n	800af24 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	695b      	ldr	r3, [r3, #20]
 800af18:	461a      	mov	r2, r3
 800af1a:	6939      	ldr	r1, [r7, #16]
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f7ff ff58 	bl	800add2 <LL_GPIO_SetAFPin_0_7>
 800af22:	e006      	b.n	800af32 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	695b      	ldr	r3, [r3, #20]
 800af28:	461a      	mov	r2, r3
 800af2a:	6939      	ldr	r1, [r7, #16]
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f7ff ff7f 	bl	800ae30 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800af32:	697b      	ldr	r3, [r7, #20]
 800af34:	3301      	adds	r3, #1
 800af36:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	681a      	ldr	r2, [r3, #0]
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	fa22 f303 	lsr.w	r3, r2, r3
 800af42:	2b00      	cmp	r3, #0
 800af44:	d1b7      	bne.n	800aeb6 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800af46:	683b      	ldr	r3, [r7, #0]
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	2b01      	cmp	r3, #1
 800af4c:	d003      	beq.n	800af56 <LL_GPIO_Init+0xc4>
 800af4e:	683b      	ldr	r3, [r7, #0]
 800af50:	685b      	ldr	r3, [r3, #4]
 800af52:	2b02      	cmp	r3, #2
 800af54:	d107      	bne.n	800af66 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	6819      	ldr	r1, [r3, #0]
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	68db      	ldr	r3, [r3, #12]
 800af5e:	461a      	mov	r2, r3
 800af60:	6878      	ldr	r0, [r7, #4]
 800af62:	f7ff fec0 	bl	800ace6 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800af66:	2300      	movs	r3, #0
}
 800af68:	4618      	mov	r0, r3
 800af6a:	3718      	adds	r7, #24
 800af6c:	46bd      	mov	sp, r7
 800af6e:	bd80      	pop	{r7, pc}

0800af70 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 800af70:	b590      	push	{r4, r7, lr}
 800af72:	b087      	sub	sp, #28
 800af74:	af02      	add	r7, sp, #8
 800af76:	4604      	mov	r4, r0
 800af78:	4608      	mov	r0, r1
 800af7a:	4611      	mov	r1, r2
 800af7c:	461a      	mov	r2, r3
 800af7e:	4623      	mov	r3, r4
 800af80:	80fb      	strh	r3, [r7, #6]
 800af82:	4603      	mov	r3, r0
 800af84:	80bb      	strh	r3, [r7, #4]
 800af86:	460b      	mov	r3, r1
 800af88:	807b      	strh	r3, [r7, #2]
 800af8a:	4613      	mov	r3, r2
 800af8c:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800af8e:	2300      	movs	r3, #0
 800af90:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800af92:	7bfa      	ldrb	r2, [r7, #15]
 800af94:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800af98:	429a      	cmp	r2, r3
 800af9a:	d93a      	bls.n	800b012 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800af9c:	88ba      	ldrh	r2, [r7, #4]
 800af9e:	7bfb      	ldrb	r3, [r7, #15]
 800afa0:	441a      	add	r2, r3
 800afa2:	88b9      	ldrh	r1, [r7, #4]
 800afa4:	883b      	ldrh	r3, [r7, #0]
 800afa6:	4419      	add	r1, r3
 800afa8:	7bfb      	ldrb	r3, [r7, #15]
 800afaa:	1acb      	subs	r3, r1, r3
 800afac:	429a      	cmp	r2, r3
 800afae:	f000 8090 	beq.w	800b0d2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 800afb2:	88fa      	ldrh	r2, [r7, #6]
 800afb4:	7bfb      	ldrb	r3, [r7, #15]
 800afb6:	441a      	add	r2, r3
 800afb8:	88f9      	ldrh	r1, [r7, #6]
 800afba:	887b      	ldrh	r3, [r7, #2]
 800afbc:	4419      	add	r1, r3
 800afbe:	7bfb      	ldrb	r3, [r7, #15]
 800afc0:	1acb      	subs	r3, r1, r3
 800afc2:	429a      	cmp	r2, r3
 800afc4:	f000 8085 	beq.w	800b0d2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800afc8:	7bfb      	ldrb	r3, [r7, #15]
 800afca:	b29a      	uxth	r2, r3
 800afcc:	88fb      	ldrh	r3, [r7, #6]
 800afce:	4413      	add	r3, r2
 800afd0:	b298      	uxth	r0, r3
 800afd2:	7bfb      	ldrb	r3, [r7, #15]
 800afd4:	b29a      	uxth	r2, r3
 800afd6:	88bb      	ldrh	r3, [r7, #4]
 800afd8:	4413      	add	r3, r2
 800afda:	b299      	uxth	r1, r3
 800afdc:	7bfb      	ldrb	r3, [r7, #15]
 800afde:	b29b      	uxth	r3, r3
 800afe0:	005b      	lsls	r3, r3, #1
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	887a      	ldrh	r2, [r7, #2]
 800afe6:	1ad3      	subs	r3, r2, r3
 800afe8:	b29b      	uxth	r3, r3
 800afea:	3301      	adds	r3, #1
 800afec:	b29c      	uxth	r4, r3
 800afee:	7bfb      	ldrb	r3, [r7, #15]
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	005b      	lsls	r3, r3, #1
 800aff4:	b29b      	uxth	r3, r3
 800aff6:	883a      	ldrh	r2, [r7, #0]
 800aff8:	1ad3      	subs	r3, r2, r3
 800affa:	b29b      	uxth	r3, r3
 800affc:	3301      	adds	r3, #1
 800affe:	b29a      	uxth	r2, r3
 800b000:	2304      	movs	r3, #4
 800b002:	9301      	str	r3, [sp, #4]
 800b004:	8c3b      	ldrh	r3, [r7, #32]
 800b006:	9300      	str	r3, [sp, #0]
 800b008:	4613      	mov	r3, r2
 800b00a:	4622      	mov	r2, r4
 800b00c:	f000 fcd6 	bl	800b9bc <ILI9341_Draw_Rectangle>
				goto finish;
 800b010:	e060      	b.n	800b0d4 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 800b012:	7bfb      	ldrb	r3, [r7, #15]
 800b014:	b29a      	uxth	r2, r3
 800b016:	88fb      	ldrh	r3, [r7, #6]
 800b018:	4413      	add	r3, r2
 800b01a:	b298      	uxth	r0, r3
 800b01c:	7bfb      	ldrb	r3, [r7, #15]
 800b01e:	b29a      	uxth	r2, r3
 800b020:	88bb      	ldrh	r3, [r7, #4]
 800b022:	4413      	add	r3, r2
 800b024:	b299      	uxth	r1, r3
 800b026:	7bfb      	ldrb	r3, [r7, #15]
 800b028:	b29b      	uxth	r3, r3
 800b02a:	005b      	lsls	r3, r3, #1
 800b02c:	b29b      	uxth	r3, r3
 800b02e:	887a      	ldrh	r2, [r7, #2]
 800b030:	1ad3      	subs	r3, r2, r3
 800b032:	b29a      	uxth	r2, r3
 800b034:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b038:	b29b      	uxth	r3, r3
 800b03a:	f000 fa81 	bl	800b540 <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 800b03e:	7bfb      	ldrb	r3, [r7, #15]
 800b040:	b29a      	uxth	r2, r3
 800b042:	88fb      	ldrh	r3, [r7, #6]
 800b044:	4413      	add	r3, r2
 800b046:	b298      	uxth	r0, r3
										(y + h) - b,
 800b048:	88ba      	ldrh	r2, [r7, #4]
 800b04a:	883b      	ldrh	r3, [r7, #0]
 800b04c:	4413      	add	r3, r2
 800b04e:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800b050:	7bfb      	ldrb	r3, [r7, #15]
 800b052:	b29b      	uxth	r3, r3
 800b054:	1ad3      	subs	r3, r2, r3
 800b056:	b299      	uxth	r1, r3
 800b058:	7bfb      	ldrb	r3, [r7, #15]
 800b05a:	b29b      	uxth	r3, r3
 800b05c:	887a      	ldrh	r2, [r7, #2]
 800b05e:	1ad3      	subs	r3, r2, r3
 800b060:	b29a      	uxth	r2, r3
 800b062:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b066:	b29b      	uxth	r3, r3
 800b068:	f000 fa6a 	bl	800b540 <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 800b06c:	7bfb      	ldrb	r3, [r7, #15]
 800b06e:	b29a      	uxth	r2, r3
 800b070:	88fb      	ldrh	r3, [r7, #6]
 800b072:	4413      	add	r3, r2
 800b074:	b298      	uxth	r0, r3
 800b076:	7bfb      	ldrb	r3, [r7, #15]
 800b078:	b29a      	uxth	r2, r3
 800b07a:	88bb      	ldrh	r3, [r7, #4]
 800b07c:	4413      	add	r3, r2
 800b07e:	b299      	uxth	r1, r3
 800b080:	7bfb      	ldrb	r3, [r7, #15]
 800b082:	b29b      	uxth	r3, r3
 800b084:	005b      	lsls	r3, r3, #1
 800b086:	b29b      	uxth	r3, r3
 800b088:	883a      	ldrh	r2, [r7, #0]
 800b08a:	1ad3      	subs	r3, r2, r3
 800b08c:	b29a      	uxth	r2, r3
 800b08e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b092:	b29b      	uxth	r3, r3
 800b094:	f000 fa9c 	bl	800b5d0 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 800b098:	88fa      	ldrh	r2, [r7, #6]
 800b09a:	887b      	ldrh	r3, [r7, #2]
 800b09c:	4413      	add	r3, r2
 800b09e:	b29a      	uxth	r2, r3
 800b0a0:	7bfb      	ldrb	r3, [r7, #15]
 800b0a2:	b29b      	uxth	r3, r3
 800b0a4:	1ad3      	subs	r3, r2, r3
 800b0a6:	b298      	uxth	r0, r3
 800b0a8:	7bfb      	ldrb	r3, [r7, #15]
 800b0aa:	b29a      	uxth	r2, r3
 800b0ac:	88bb      	ldrh	r3, [r7, #4]
 800b0ae:	4413      	add	r3, r2
 800b0b0:	b299      	uxth	r1, r3
 800b0b2:	7bfb      	ldrb	r3, [r7, #15]
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	005b      	lsls	r3, r3, #1
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	883a      	ldrh	r2, [r7, #0]
 800b0bc:	1ad3      	subs	r3, r2, r3
 800b0be:	b29a      	uxth	r2, r3
 800b0c0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b0c4:	b29b      	uxth	r3, r3
 800b0c6:	f000 fa83 	bl	800b5d0 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800b0ca:	7bfb      	ldrb	r3, [r7, #15]
 800b0cc:	3301      	adds	r3, #1
 800b0ce:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800b0d0:	e75f      	b.n	800af92 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800b0d2:	bf00      	nop
	// done
	return;
 800b0d4:	bf00      	nop
}
 800b0d6:	3714      	adds	r7, #20
 800b0d8:	46bd      	mov	sp, r7
 800b0da:	bd90      	pop	{r4, r7, pc}

0800b0dc <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800b0dc:	b590      	push	{r4, r7, lr}
 800b0de:	b089      	sub	sp, #36	; 0x24
 800b0e0:	af02      	add	r7, sp, #8
 800b0e2:	4604      	mov	r4, r0
 800b0e4:	4608      	mov	r0, r1
 800b0e6:	4611      	mov	r1, r2
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	4623      	mov	r3, r4
 800b0ec:	71fb      	strb	r3, [r7, #7]
 800b0ee:	4603      	mov	r3, r0
 800b0f0:	80bb      	strh	r3, [r7, #4]
 800b0f2:	460b      	mov	r3, r1
 800b0f4:	807b      	strh	r3, [r7, #2]
 800b0f6:	4613      	mov	r3, r2
 800b0f8:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800b0fa:	79fb      	ldrb	r3, [r7, #7]
 800b0fc:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800b0fe:	7dfb      	ldrb	r3, [r7, #23]
 800b100:	2b1f      	cmp	r3, #31
 800b102:	d802      	bhi.n	800b10a <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800b104:	2300      	movs	r3, #0
 800b106:	71fb      	strb	r3, [r7, #7]
 800b108:	e002      	b.n	800b110 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800b10a:	7dfb      	ldrb	r3, [r7, #23]
 800b10c:	3b20      	subs	r3, #32
 800b10e:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800b110:	2300      	movs	r3, #0
 800b112:	753b      	strb	r3, [r7, #20]
 800b114:	e012      	b.n	800b13c <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800b116:	7dfa      	ldrb	r2, [r7, #23]
 800b118:	7d38      	ldrb	r0, [r7, #20]
 800b11a:	7d39      	ldrb	r1, [r7, #20]
 800b11c:	4c48      	ldr	r4, [pc, #288]	; (800b240 <ILI9341_Draw_Char+0x164>)
 800b11e:	4613      	mov	r3, r2
 800b120:	005b      	lsls	r3, r3, #1
 800b122:	4413      	add	r3, r2
 800b124:	005b      	lsls	r3, r3, #1
 800b126:	4423      	add	r3, r4
 800b128:	4403      	add	r3, r0
 800b12a:	781a      	ldrb	r2, [r3, #0]
 800b12c:	f107 0318 	add.w	r3, r7, #24
 800b130:	440b      	add	r3, r1
 800b132:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800b136:	7d3b      	ldrb	r3, [r7, #20]
 800b138:	3301      	adds	r3, #1
 800b13a:	753b      	strb	r3, [r7, #20]
 800b13c:	7d3b      	ldrb	r3, [r7, #20]
 800b13e:	2b05      	cmp	r3, #5
 800b140:	d9e9      	bls.n	800b116 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800b142:	2300      	movs	r3, #0
 800b144:	757b      	strb	r3, [r7, #21]
 800b146:	e074      	b.n	800b232 <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800b148:	2300      	movs	r3, #0
 800b14a:	75bb      	strb	r3, [r7, #22]
 800b14c:	e06b      	b.n	800b226 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800b14e:	7d7b      	ldrb	r3, [r7, #21]
 800b150:	f107 0218 	add.w	r2, r7, #24
 800b154:	4413      	add	r3, r2
 800b156:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800b15a:	461a      	mov	r2, r3
 800b15c:	7dbb      	ldrb	r3, [r7, #22]
 800b15e:	fa42 f303 	asr.w	r3, r2, r3
 800b162:	f003 0301 	and.w	r3, r3, #1
 800b166:	2b00      	cmp	r3, #0
 800b168:	d02d      	beq.n	800b1c6 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800b16a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b16c:	2b01      	cmp	r3, #1
 800b16e:	d10e      	bne.n	800b18e <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800b170:	7d7b      	ldrb	r3, [r7, #21]
 800b172:	b29a      	uxth	r2, r3
 800b174:	88bb      	ldrh	r3, [r7, #4]
 800b176:	4413      	add	r3, r2
 800b178:	b298      	uxth	r0, r3
 800b17a:	7dbb      	ldrb	r3, [r7, #22]
 800b17c:	b29a      	uxth	r2, r3
 800b17e:	887b      	ldrh	r3, [r7, #2]
 800b180:	4413      	add	r3, r2
 800b182:	b29b      	uxth	r3, r3
 800b184:	883a      	ldrh	r2, [r7, #0]
 800b186:	4619      	mov	r1, r3
 800b188:	f000 fae0 	bl	800b74c <ILI9341_Draw_Pixel>
 800b18c:	e048      	b.n	800b220 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800b18e:	7d7b      	ldrb	r3, [r7, #21]
 800b190:	b29b      	uxth	r3, r3
 800b192:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b194:	fb12 f303 	smulbb	r3, r2, r3
 800b198:	b29a      	uxth	r2, r3
 800b19a:	88bb      	ldrh	r3, [r7, #4]
 800b19c:	4413      	add	r3, r2
 800b19e:	b298      	uxth	r0, r3
 800b1a0:	7dbb      	ldrb	r3, [r7, #22]
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b1a6:	fb12 f303 	smulbb	r3, r2, r3
 800b1aa:	b29a      	uxth	r2, r3
 800b1ac:	887b      	ldrh	r3, [r7, #2]
 800b1ae:	4413      	add	r3, r2
 800b1b0:	b299      	uxth	r1, r3
 800b1b2:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800b1b4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b1b6:	2301      	movs	r3, #1
 800b1b8:	9301      	str	r3, [sp, #4]
 800b1ba:	883b      	ldrh	r3, [r7, #0]
 800b1bc:	9300      	str	r3, [sp, #0]
 800b1be:	4623      	mov	r3, r4
 800b1c0:	f000 fbfc 	bl	800b9bc <ILI9341_Draw_Rectangle>
 800b1c4:	e02c      	b.n	800b220 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800b1c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d10e      	bne.n	800b1ea <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800b1cc:	7d7b      	ldrb	r3, [r7, #21]
 800b1ce:	b29a      	uxth	r2, r3
 800b1d0:	88bb      	ldrh	r3, [r7, #4]
 800b1d2:	4413      	add	r3, r2
 800b1d4:	b298      	uxth	r0, r3
 800b1d6:	7dbb      	ldrb	r3, [r7, #22]
 800b1d8:	b29a      	uxth	r2, r3
 800b1da:	887b      	ldrh	r3, [r7, #2]
 800b1dc:	4413      	add	r3, r2
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	f000 fab2 	bl	800b74c <ILI9341_Draw_Pixel>
 800b1e8:	e01a      	b.n	800b220 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800b1ea:	7d7b      	ldrb	r3, [r7, #21]
 800b1ec:	b29b      	uxth	r3, r3
 800b1ee:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b1f0:	fb12 f303 	smulbb	r3, r2, r3
 800b1f4:	b29a      	uxth	r2, r3
 800b1f6:	88bb      	ldrh	r3, [r7, #4]
 800b1f8:	4413      	add	r3, r2
 800b1fa:	b298      	uxth	r0, r3
 800b1fc:	7dbb      	ldrb	r3, [r7, #22]
 800b1fe:	b29b      	uxth	r3, r3
 800b200:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b202:	fb12 f303 	smulbb	r3, r2, r3
 800b206:	b29a      	uxth	r2, r3
 800b208:	887b      	ldrh	r3, [r7, #2]
 800b20a:	4413      	add	r3, r2
 800b20c:	b299      	uxth	r1, r3
 800b20e:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800b210:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b212:	2301      	movs	r3, #1
 800b214:	9301      	str	r3, [sp, #4]
 800b216:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b218:	9300      	str	r3, [sp, #0]
 800b21a:	4623      	mov	r3, r4
 800b21c:	f000 fbce 	bl	800b9bc <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800b220:	7dbb      	ldrb	r3, [r7, #22]
 800b222:	3301      	adds	r3, #1
 800b224:	75bb      	strb	r3, [r7, #22]
 800b226:	7dbb      	ldrb	r3, [r7, #22]
 800b228:	2b07      	cmp	r3, #7
 800b22a:	d990      	bls.n	800b14e <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800b22c:	7d7b      	ldrb	r3, [r7, #21]
 800b22e:	3301      	adds	r3, #1
 800b230:	757b      	strb	r3, [r7, #21]
 800b232:	7d7b      	ldrb	r3, [r7, #21]
 800b234:	2b05      	cmp	r3, #5
 800b236:	d987      	bls.n	800b148 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800b238:	bf00      	nop
 800b23a:	371c      	adds	r7, #28
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd90      	pop	{r4, r7, pc}
 800b240:	0800eb70 	.word	0x0800eb70

0800b244 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800b244:	b590      	push	{r4, r7, lr}
 800b246:	b087      	sub	sp, #28
 800b248:	af02      	add	r7, sp, #8
 800b24a:	60f8      	str	r0, [r7, #12]
 800b24c:	4608      	mov	r0, r1
 800b24e:	4611      	mov	r1, r2
 800b250:	461a      	mov	r2, r3
 800b252:	4603      	mov	r3, r0
 800b254:	817b      	strh	r3, [r7, #10]
 800b256:	460b      	mov	r3, r1
 800b258:	813b      	strh	r3, [r7, #8]
 800b25a:	4613      	mov	r3, r2
 800b25c:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 800b25e:	e016      	b.n	800b28e <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	1c5a      	adds	r2, r3, #1
 800b264:	60fa      	str	r2, [r7, #12]
 800b266:	7818      	ldrb	r0, [r3, #0]
 800b268:	88fc      	ldrh	r4, [r7, #6]
 800b26a:	893a      	ldrh	r2, [r7, #8]
 800b26c:	8979      	ldrh	r1, [r7, #10]
 800b26e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b270:	9301      	str	r3, [sp, #4]
 800b272:	8c3b      	ldrh	r3, [r7, #32]
 800b274:	9300      	str	r3, [sp, #0]
 800b276:	4623      	mov	r3, r4
 800b278:	f7ff ff30 	bl	800b0dc <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800b27c:	8c3b      	ldrh	r3, [r7, #32]
 800b27e:	461a      	mov	r2, r3
 800b280:	0052      	lsls	r2, r2, #1
 800b282:	4413      	add	r3, r2
 800b284:	005b      	lsls	r3, r3, #1
 800b286:	b29a      	uxth	r2, r3
 800b288:	897b      	ldrh	r3, [r7, #10]
 800b28a:	4413      	add	r3, r2
 800b28c:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	781b      	ldrb	r3, [r3, #0]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d1e4      	bne.n	800b260 <ILI9341_Draw_Text+0x1c>
    }


}
 800b296:	bf00      	nop
 800b298:	3714      	adds	r7, #20
 800b29a:	46bd      	mov	sp, r7
 800b29c:	bd90      	pop	{r4, r7, pc}
	...

0800b2a0 <ILI9341_FillScreenGradient>:
		GPIOC->ODR |= CS_Pin;
	}
}

void ILI9341_FillScreenGradient()
{
 800b2a0:	b580      	push	{r7, lr}
 800b2a2:	b084      	sub	sp, #16
 800b2a4:	af02      	add	r7, sp, #8
	uint16_t x = 0;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	80bb      	strh	r3, [r7, #4]
	//ILI9341_Draw_Text("Colour gradient", 10, 10, BLACK, 1, WHITE);
	//ILI9341_Draw_Text("Grayscale", 10, 20, BLACK, 1, WHITE);



	for(uint16_t i = 0; i <= (320); i++)
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	80fb      	strh	r3, [r7, #6]
 800b2ae:	e010      	b.n	800b2d2 <ILI9341_FillScreenGradient+0x32>

		uint16_t RGB_color = Red + Green + Blue;
		ILI9341_Draw_Rectangle(i, x, 1, 240, RGB_color, AREA_CHUNK);
*/

	ILI9341_Draw_Rectangle(i, x, 1, 240, (uint16_t)fade_log_seq_data_table[i], AREA_CHUNK);
 800b2b0:	88fb      	ldrh	r3, [r7, #6]
 800b2b2:	4a0c      	ldr	r2, [pc, #48]	; (800b2e4 <ILI9341_FillScreenGradient+0x44>)
 800b2b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b2b8:	b29b      	uxth	r3, r3
 800b2ba:	88b9      	ldrh	r1, [r7, #4]
 800b2bc:	88f8      	ldrh	r0, [r7, #6]
 800b2be:	2204      	movs	r2, #4
 800b2c0:	9201      	str	r2, [sp, #4]
 800b2c2:	9300      	str	r3, [sp, #0]
 800b2c4:	23f0      	movs	r3, #240	; 0xf0
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	f000 fb78 	bl	800b9bc <ILI9341_Draw_Rectangle>
	for(uint16_t i = 0; i <= (320); i++)
 800b2cc:	88fb      	ldrh	r3, [r7, #6]
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	80fb      	strh	r3, [r7, #6]
 800b2d2:	88fb      	ldrh	r3, [r7, #6]
 800b2d4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b2d8:	d9ea      	bls.n	800b2b0 <ILI9341_FillScreenGradient+0x10>

	}
}
 800b2da:	bf00      	nop
 800b2dc:	3708      	adds	r7, #8
 800b2de:	46bd      	mov	sp, r7
 800b2e0:	bd80      	pop	{r7, pc}
 800b2e2:	bf00      	nop
 800b2e4:	200001d4 	.word	0x200001d4

0800b2e8 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800b2ec:	f000 fc3a 	bl	800bb64 <_LCD_Enable>
	ILI9341_SPI_Init();
 800b2f0:	f000 f908 	bl	800b504 <ILI9341_SPI_Init>
	_LCD_Reset();
 800b2f4:	f000 fc46 	bl	800bb84 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800b2f8:	2001      	movs	r0, #1
 800b2fa:	f000 fd11 	bl	800bd20 <_LCD_SendCommand>
	HAL_Delay(2000);
 800b2fe:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b302:	f7fa fa91 	bl	8005828 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800b306:	20cb      	movs	r0, #203	; 0xcb
 800b308:	f000 fd0a 	bl	800bd20 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800b30c:	2039      	movs	r0, #57	; 0x39
 800b30e:	f000 fd39 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800b312:	202c      	movs	r0, #44	; 0x2c
 800b314:	f000 fd36 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x00);
 800b318:	2000      	movs	r0, #0
 800b31a:	f000 fd33 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x34);
 800b31e:	2034      	movs	r0, #52	; 0x34
 800b320:	f000 fd30 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x02);
 800b324:	2002      	movs	r0, #2
 800b326:	f000 fd2d 	bl	800bd84 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800b32a:	20cf      	movs	r0, #207	; 0xcf
 800b32c:	f000 fcf8 	bl	800bd20 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800b330:	2000      	movs	r0, #0
 800b332:	f000 fd27 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800b336:	20c1      	movs	r0, #193	; 0xc1
 800b338:	f000 fd24 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x30);
 800b33c:	2030      	movs	r0, #48	; 0x30
 800b33e:	f000 fd21 	bl	800bd84 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800b342:	20e8      	movs	r0, #232	; 0xe8
 800b344:	f000 fcec 	bl	800bd20 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800b348:	2085      	movs	r0, #133	; 0x85
 800b34a:	f000 fd1b 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x00);
 800b34e:	2000      	movs	r0, #0
 800b350:	f000 fd18 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x78);
 800b354:	2078      	movs	r0, #120	; 0x78
 800b356:	f000 fd15 	bl	800bd84 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800b35a:	20ea      	movs	r0, #234	; 0xea
 800b35c:	f000 fce0 	bl	800bd20 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800b360:	2000      	movs	r0, #0
 800b362:	f000 fd0f 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x00);
 800b366:	2000      	movs	r0, #0
 800b368:	f000 fd0c 	bl	800bd84 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800b36c:	20ed      	movs	r0, #237	; 0xed
 800b36e:	f000 fcd7 	bl	800bd20 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800b372:	2064      	movs	r0, #100	; 0x64
 800b374:	f000 fd06 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x03);
 800b378:	2003      	movs	r0, #3
 800b37a:	f000 fd03 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x12);
 800b37e:	2012      	movs	r0, #18
 800b380:	f000 fd00 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x81);
 800b384:	2081      	movs	r0, #129	; 0x81
 800b386:	f000 fcfd 	bl	800bd84 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800b38a:	20f7      	movs	r0, #247	; 0xf7
 800b38c:	f000 fcc8 	bl	800bd20 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800b390:	2020      	movs	r0, #32
 800b392:	f000 fcf7 	bl	800bd84 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800b396:	20c0      	movs	r0, #192	; 0xc0
 800b398:	f000 fcc2 	bl	800bd20 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800b39c:	2023      	movs	r0, #35	; 0x23
 800b39e:	f000 fcf1 	bl	800bd84 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800b3a2:	20c1      	movs	r0, #193	; 0xc1
 800b3a4:	f000 fcbc 	bl	800bd20 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800b3a8:	2010      	movs	r0, #16
 800b3aa:	f000 fceb 	bl	800bd84 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800b3ae:	20c5      	movs	r0, #197	; 0xc5
 800b3b0:	f000 fcb6 	bl	800bd20 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800b3b4:	203e      	movs	r0, #62	; 0x3e
 800b3b6:	f000 fce5 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x28);
 800b3ba:	2028      	movs	r0, #40	; 0x28
 800b3bc:	f000 fce2 	bl	800bd84 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800b3c0:	20c7      	movs	r0, #199	; 0xc7
 800b3c2:	f000 fcad 	bl	800bd20 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800b3c6:	2086      	movs	r0, #134	; 0x86
 800b3c8:	f000 fcdc 	bl	800bd84 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800b3cc:	2036      	movs	r0, #54	; 0x36
 800b3ce:	f000 fca7 	bl	800bd20 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800b3d2:	2048      	movs	r0, #72	; 0x48
 800b3d4:	f000 fcd6 	bl	800bd84 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800b3d8:	203a      	movs	r0, #58	; 0x3a
 800b3da:	f000 fca1 	bl	800bd20 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800b3de:	2055      	movs	r0, #85	; 0x55
 800b3e0:	f000 fcd0 	bl	800bd84 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800b3e4:	20b1      	movs	r0, #177	; 0xb1
 800b3e6:	f000 fc9b 	bl	800bd20 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800b3ea:	2000      	movs	r0, #0
 800b3ec:	f000 fcca 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x18);
 800b3f0:	2018      	movs	r0, #24
 800b3f2:	f000 fcc7 	bl	800bd84 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800b3f6:	20b6      	movs	r0, #182	; 0xb6
 800b3f8:	f000 fc92 	bl	800bd20 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800b3fc:	2008      	movs	r0, #8
 800b3fe:	f000 fcc1 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x82);
 800b402:	2082      	movs	r0, #130	; 0x82
 800b404:	f000 fcbe 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x27);
 800b408:	2027      	movs	r0, #39	; 0x27
 800b40a:	f000 fcbb 	bl	800bd84 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800b40e:	20f2      	movs	r0, #242	; 0xf2
 800b410:	f000 fc86 	bl	800bd20 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800b414:	2000      	movs	r0, #0
 800b416:	f000 fcb5 	bl	800bd84 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800b41a:	2026      	movs	r0, #38	; 0x26
 800b41c:	f000 fc80 	bl	800bd20 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800b420:	2001      	movs	r0, #1
 800b422:	f000 fcaf 	bl	800bd84 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800b426:	20e0      	movs	r0, #224	; 0xe0
 800b428:	f000 fc7a 	bl	800bd20 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800b42c:	200f      	movs	r0, #15
 800b42e:	f000 fca9 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x31);
 800b432:	2031      	movs	r0, #49	; 0x31
 800b434:	f000 fca6 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x2B);
 800b438:	202b      	movs	r0, #43	; 0x2b
 800b43a:	f000 fca3 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800b43e:	200c      	movs	r0, #12
 800b440:	f000 fca0 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800b444:	200e      	movs	r0, #14
 800b446:	f000 fc9d 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x08);
 800b44a:	2008      	movs	r0, #8
 800b44c:	f000 fc9a 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x4E);
 800b450:	204e      	movs	r0, #78	; 0x4e
 800b452:	f000 fc97 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0xF1);
 800b456:	20f1      	movs	r0, #241	; 0xf1
 800b458:	f000 fc94 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x37);
 800b45c:	2037      	movs	r0, #55	; 0x37
 800b45e:	f000 fc91 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x07);
 800b462:	2007      	movs	r0, #7
 800b464:	f000 fc8e 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x10);
 800b468:	2010      	movs	r0, #16
 800b46a:	f000 fc8b 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x03);
 800b46e:	2003      	movs	r0, #3
 800b470:	f000 fc88 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800b474:	200e      	movs	r0, #14
 800b476:	f000 fc85 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x09);
 800b47a:	2009      	movs	r0, #9
 800b47c:	f000 fc82 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x00);
 800b480:	2000      	movs	r0, #0
 800b482:	f000 fc7f 	bl	800bd84 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800b486:	20e1      	movs	r0, #225	; 0xe1
 800b488:	f000 fc4a 	bl	800bd20 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800b48c:	2000      	movs	r0, #0
 800b48e:	f000 fc79 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800b492:	200e      	movs	r0, #14
 800b494:	f000 fc76 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x14);
 800b498:	2014      	movs	r0, #20
 800b49a:	f000 fc73 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x03);
 800b49e:	2003      	movs	r0, #3
 800b4a0:	f000 fc70 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x11);
 800b4a4:	2011      	movs	r0, #17
 800b4a6:	f000 fc6d 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x07);
 800b4aa:	2007      	movs	r0, #7
 800b4ac:	f000 fc6a 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x31);
 800b4b0:	2031      	movs	r0, #49	; 0x31
 800b4b2:	f000 fc67 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800b4b6:	20c1      	movs	r0, #193	; 0xc1
 800b4b8:	f000 fc64 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x48);
 800b4bc:	2048      	movs	r0, #72	; 0x48
 800b4be:	f000 fc61 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x08);
 800b4c2:	2008      	movs	r0, #8
 800b4c4:	f000 fc5e 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800b4c8:	200f      	movs	r0, #15
 800b4ca:	f000 fc5b 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800b4ce:	200c      	movs	r0, #12
 800b4d0:	f000 fc58 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x31);
 800b4d4:	2031      	movs	r0, #49	; 0x31
 800b4d6:	f000 fc55 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x36);
 800b4da:	2036      	movs	r0, #54	; 0x36
 800b4dc:	f000 fc52 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800b4e0:	200f      	movs	r0, #15
 800b4e2:	f000 fc4f 	bl	800bd84 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800b4e6:	2011      	movs	r0, #17
 800b4e8:	f000 fc1a 	bl	800bd20 <_LCD_SendCommand>
	HAL_Delay(240);
 800b4ec:	20f0      	movs	r0, #240	; 0xf0
 800b4ee:	f7fa f99b 	bl	8005828 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800b4f2:	2029      	movs	r0, #41	; 0x29
 800b4f4:	f000 fc14 	bl	800bd20 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800b4f8:	2000      	movs	r0, #0
 800b4fa:	f000 fae5 	bl	800bac8 <ILI9341_Set_Rotation>
}
 800b4fe:	bf00      	nop
 800b500:	bd80      	pop	{r7, pc}
	...

0800b504 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800b504:	b480      	push	{r7}
 800b506:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b508:	4b0b      	ldr	r3, [pc, #44]	; (800b538 <ILI9341_SPI_Init+0x34>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b510:	2b40      	cmp	r3, #64	; 0x40
 800b512:	d005      	beq.n	800b520 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800b514:	4b08      	ldr	r3, [pc, #32]	; (800b538 <ILI9341_SPI_Init+0x34>)
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4a07      	ldr	r2, [pc, #28]	; (800b538 <ILI9341_SPI_Init+0x34>)
 800b51a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b51e:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b520:	4b06      	ldr	r3, [pc, #24]	; (800b53c <ILI9341_SPI_Init+0x38>)
 800b522:	695b      	ldr	r3, [r3, #20]
 800b524:	4a05      	ldr	r2, [pc, #20]	; (800b53c <ILI9341_SPI_Init+0x38>)
 800b526:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b52a:	6153      	str	r3, [r2, #20]
}
 800b52c:	bf00      	nop
 800b52e:	46bd      	mov	sp, r7
 800b530:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b534:	4770      	bx	lr
 800b536:	bf00      	nop
 800b538:	40003c00 	.word	0x40003c00
 800b53c:	48000400 	.word	0x48000400

0800b540 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800b540:	b590      	push	{r4, r7, lr}
 800b542:	b085      	sub	sp, #20
 800b544:	af02      	add	r7, sp, #8
 800b546:	4604      	mov	r4, r0
 800b548:	4608      	mov	r0, r1
 800b54a:	4611      	mov	r1, r2
 800b54c:	461a      	mov	r2, r3
 800b54e:	4623      	mov	r3, r4
 800b550:	80fb      	strh	r3, [r7, #6]
 800b552:	4603      	mov	r3, r0
 800b554:	80bb      	strh	r3, [r7, #4]
 800b556:	460b      	mov	r3, r1
 800b558:	807b      	strh	r3, [r7, #2]
 800b55a:	4613      	mov	r3, r2
 800b55c:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800b55e:	4b1a      	ldr	r3, [pc, #104]	; (800b5c8 <ILI9341_Draw_Horizontal_Line+0x88>)
 800b560:	881b      	ldrh	r3, [r3, #0]
 800b562:	b29b      	uxth	r3, r3
 800b564:	88fa      	ldrh	r2, [r7, #6]
 800b566:	429a      	cmp	r2, r3
 800b568:	d229      	bcs.n	800b5be <ILI9341_Draw_Horizontal_Line+0x7e>
 800b56a:	4b18      	ldr	r3, [pc, #96]	; (800b5cc <ILI9341_Draw_Horizontal_Line+0x8c>)
 800b56c:	881b      	ldrh	r3, [r3, #0]
 800b56e:	b29b      	uxth	r3, r3
 800b570:	88ba      	ldrh	r2, [r7, #4]
 800b572:	429a      	cmp	r2, r3
 800b574:	d223      	bcs.n	800b5be <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800b576:	88fa      	ldrh	r2, [r7, #6]
 800b578:	887b      	ldrh	r3, [r7, #2]
 800b57a:	4413      	add	r3, r2
 800b57c:	3b01      	subs	r3, #1
 800b57e:	4a12      	ldr	r2, [pc, #72]	; (800b5c8 <ILI9341_Draw_Horizontal_Line+0x88>)
 800b580:	8812      	ldrh	r2, [r2, #0]
 800b582:	b292      	uxth	r2, r2
 800b584:	4293      	cmp	r3, r2
 800b586:	db05      	blt.n	800b594 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800b588:	4b0f      	ldr	r3, [pc, #60]	; (800b5c8 <ILI9341_Draw_Horizontal_Line+0x88>)
 800b58a:	881b      	ldrh	r3, [r3, #0]
 800b58c:	b29a      	uxth	r2, r3
 800b58e:	88fb      	ldrh	r3, [r7, #6]
 800b590:	1ad3      	subs	r3, r2, r3
 800b592:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800b594:	88fa      	ldrh	r2, [r7, #6]
 800b596:	887b      	ldrh	r3, [r7, #2]
 800b598:	4413      	add	r3, r2
 800b59a:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800b59c:	3b01      	subs	r3, #1
 800b59e:	b29a      	uxth	r2, r3
 800b5a0:	88bb      	ldrh	r3, [r7, #4]
 800b5a2:	88b9      	ldrh	r1, [r7, #4]
 800b5a4:	88f8      	ldrh	r0, [r7, #6]
 800b5a6:	f000 f85b 	bl	800b660 <ILI9341_Set_Frame>
							ypos);

	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800b5aa:	887c      	ldrh	r4, [r7, #2]
 800b5ac:	883a      	ldrh	r2, [r7, #0]
 800b5ae:	88b9      	ldrh	r1, [r7, #4]
 800b5b0:	88f8      	ldrh	r0, [r7, #6]
 800b5b2:	2303      	movs	r3, #3
 800b5b4:	9300      	str	r3, [sp, #0]
 800b5b6:	4623      	mov	r3, r4
 800b5b8:	f000 fb02 	bl	800bbc0 <_LCD_Write_Frame>
 800b5bc:	e000      	b.n	800b5c0 <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800b5be:	bf00      	nop
}
 800b5c0:	370c      	adds	r7, #12
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	bd90      	pop	{r4, r7, pc}
 800b5c6:	bf00      	nop
 800b5c8:	200001ce 	.word	0x200001ce
 800b5cc:	200001cc 	.word	0x200001cc

0800b5d0 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800b5d0:	b590      	push	{r4, r7, lr}
 800b5d2:	b085      	sub	sp, #20
 800b5d4:	af02      	add	r7, sp, #8
 800b5d6:	4604      	mov	r4, r0
 800b5d8:	4608      	mov	r0, r1
 800b5da:	4611      	mov	r1, r2
 800b5dc:	461a      	mov	r2, r3
 800b5de:	4623      	mov	r3, r4
 800b5e0:	80fb      	strh	r3, [r7, #6]
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	80bb      	strh	r3, [r7, #4]
 800b5e6:	460b      	mov	r3, r1
 800b5e8:	807b      	strh	r3, [r7, #2]
 800b5ea:	4613      	mov	r3, r2
 800b5ec:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800b5ee:	4b1a      	ldr	r3, [pc, #104]	; (800b658 <ILI9341_Draw_Vertical_Line+0x88>)
 800b5f0:	881b      	ldrh	r3, [r3, #0]
 800b5f2:	b29b      	uxth	r3, r3
 800b5f4:	88fa      	ldrh	r2, [r7, #6]
 800b5f6:	429a      	cmp	r2, r3
 800b5f8:	d229      	bcs.n	800b64e <ILI9341_Draw_Vertical_Line+0x7e>
 800b5fa:	4b18      	ldr	r3, [pc, #96]	; (800b65c <ILI9341_Draw_Vertical_Line+0x8c>)
 800b5fc:	881b      	ldrh	r3, [r3, #0]
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	88ba      	ldrh	r2, [r7, #4]
 800b602:	429a      	cmp	r2, r3
 800b604:	d223      	bcs.n	800b64e <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800b606:	88ba      	ldrh	r2, [r7, #4]
 800b608:	887b      	ldrh	r3, [r7, #2]
 800b60a:	4413      	add	r3, r2
 800b60c:	3b01      	subs	r3, #1
 800b60e:	4a13      	ldr	r2, [pc, #76]	; (800b65c <ILI9341_Draw_Vertical_Line+0x8c>)
 800b610:	8812      	ldrh	r2, [r2, #0]
 800b612:	b292      	uxth	r2, r2
 800b614:	4293      	cmp	r3, r2
 800b616:	db05      	blt.n	800b624 <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 800b618:	4b10      	ldr	r3, [pc, #64]	; (800b65c <ILI9341_Draw_Vertical_Line+0x8c>)
 800b61a:	881b      	ldrh	r3, [r3, #0]
 800b61c:	b29a      	uxth	r2, r3
 800b61e:	88bb      	ldrh	r3, [r7, #4]
 800b620:	1ad3      	subs	r3, r2, r3
 800b622:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800b624:	88ba      	ldrh	r2, [r7, #4]
 800b626:	887b      	ldrh	r3, [r7, #2]
 800b628:	4413      	add	r3, r2
 800b62a:	b29b      	uxth	r3, r3
 800b62c:	3b01      	subs	r3, #1
 800b62e:	b29b      	uxth	r3, r3
 800b630:	88fa      	ldrh	r2, [r7, #6]
 800b632:	88b9      	ldrh	r1, [r7, #4]
 800b634:	88f8      	ldrh	r0, [r7, #6]
 800b636:	f000 f813 	bl	800b660 <ILI9341_Set_Frame>
	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800b63a:	887c      	ldrh	r4, [r7, #2]
 800b63c:	883a      	ldrh	r2, [r7, #0]
 800b63e:	88b9      	ldrh	r1, [r7, #4]
 800b640:	88f8      	ldrh	r0, [r7, #6]
 800b642:	2303      	movs	r3, #3
 800b644:	9300      	str	r3, [sp, #0]
 800b646:	4623      	mov	r3, r4
 800b648:	f000 faba 	bl	800bbc0 <_LCD_Write_Frame>
 800b64c:	e000      	b.n	800b650 <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800b64e:	bf00      	nop
}
 800b650:	370c      	adds	r7, #12
 800b652:	46bd      	mov	sp, r7
 800b654:	bd90      	pop	{r4, r7, pc}
 800b656:	bf00      	nop
 800b658:	200001ce 	.word	0x200001ce
 800b65c:	200001cc 	.word	0x200001cc

0800b660 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800b660:	b590      	push	{r4, r7, lr}
 800b662:	b083      	sub	sp, #12
 800b664:	af00      	add	r7, sp, #0
 800b666:	4604      	mov	r4, r0
 800b668:	4608      	mov	r0, r1
 800b66a:	4611      	mov	r1, r2
 800b66c:	461a      	mov	r2, r3
 800b66e:	4623      	mov	r3, r4
 800b670:	80fb      	strh	r3, [r7, #6]
 800b672:	4603      	mov	r3, r0
 800b674:	80bb      	strh	r3, [r7, #4]
 800b676:	460b      	mov	r3, r1
 800b678:	807b      	strh	r3, [r7, #2]
 800b67a:	4613      	mov	r3, r2
 800b67c:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800b67e:	202a      	movs	r0, #42	; 0x2a
 800b680:	f000 fb4e 	bl	800bd20 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800b684:	88fb      	ldrh	r3, [r7, #6]
 800b686:	0a1b      	lsrs	r3, r3, #8
 800b688:	b29b      	uxth	r3, r3
 800b68a:	b2db      	uxtb	r3, r3
 800b68c:	4618      	mov	r0, r3
 800b68e:	f000 fb79 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(sc);
 800b692:	88fb      	ldrh	r3, [r7, #6]
 800b694:	b2db      	uxtb	r3, r3
 800b696:	4618      	mov	r0, r3
 800b698:	f000 fb74 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800b69c:	887b      	ldrh	r3, [r7, #2]
 800b69e:	0a1b      	lsrs	r3, r3, #8
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	b2db      	uxtb	r3, r3
 800b6a4:	4618      	mov	r0, r3
 800b6a6:	f000 fb6d 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(ec);
 800b6aa:	887b      	ldrh	r3, [r7, #2]
 800b6ac:	b2db      	uxtb	r3, r3
 800b6ae:	4618      	mov	r0, r3
 800b6b0:	f000 fb68 	bl	800bd84 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800b6b4:	202b      	movs	r0, #43	; 0x2b
 800b6b6:	f000 fb33 	bl	800bd20 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800b6ba:	88bb      	ldrh	r3, [r7, #4]
 800b6bc:	0a1b      	lsrs	r3, r3, #8
 800b6be:	b29b      	uxth	r3, r3
 800b6c0:	b2db      	uxtb	r3, r3
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f000 fb5e 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(sp);
 800b6c8:	88bb      	ldrh	r3, [r7, #4]
 800b6ca:	b2db      	uxtb	r3, r3
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	f000 fb59 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800b6d2:	883b      	ldrh	r3, [r7, #0]
 800b6d4:	0a1b      	lsrs	r3, r3, #8
 800b6d6:	b29b      	uxth	r3, r3
 800b6d8:	b2db      	uxtb	r3, r3
 800b6da:	4618      	mov	r0, r3
 800b6dc:	f000 fb52 	bl	800bd84 <_LCD_SendData>
	_LCD_SendData(ep);
 800b6e0:	883b      	ldrh	r3, [r7, #0]
 800b6e2:	b2db      	uxtb	r3, r3
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	f000 fb4d 	bl	800bd84 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800b6ea:	202c      	movs	r0, #44	; 0x2c
 800b6ec:	f000 fb18 	bl	800bd20 <_LCD_SendCommand>
}
 800b6f0:	bf00      	nop
 800b6f2:	370c      	adds	r7, #12
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd90      	pop	{r4, r7, pc}

0800b6f8 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b084      	sub	sp, #16
 800b6fc:	af02      	add	r7, sp, #8
 800b6fe:	4603      	mov	r3, r0
 800b700:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800b702:	4b10      	ldr	r3, [pc, #64]	; (800b744 <ILI9341_Fill_Screen+0x4c>)
 800b704:	881b      	ldrh	r3, [r3, #0]
 800b706:	b29a      	uxth	r2, r3
 800b708:	4b0f      	ldr	r3, [pc, #60]	; (800b748 <ILI9341_Fill_Screen+0x50>)
 800b70a:	881b      	ldrh	r3, [r3, #0]
 800b70c:	b29b      	uxth	r3, r3
 800b70e:	2100      	movs	r1, #0
 800b710:	2000      	movs	r0, #0
 800b712:	f7ff ffa5 	bl	800b660 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800b716:	4b0b      	ldr	r3, [pc, #44]	; (800b744 <ILI9341_Fill_Screen+0x4c>)
 800b718:	881b      	ldrh	r3, [r3, #0]
 800b71a:	b29b      	uxth	r3, r3
 800b71c:	461a      	mov	r2, r3
 800b71e:	4b0a      	ldr	r3, [pc, #40]	; (800b748 <ILI9341_Fill_Screen+0x50>)
 800b720:	881b      	ldrh	r3, [r3, #0]
 800b722:	b29b      	uxth	r3, r3
 800b724:	fb03 f302 	mul.w	r3, r3, r2
 800b728:	4619      	mov	r1, r3
 800b72a:	88fa      	ldrh	r2, [r7, #6]
 800b72c:	2304      	movs	r3, #4
 800b72e:	9300      	str	r3, [sp, #0]
 800b730:	460b      	mov	r3, r1
 800b732:	2100      	movs	r1, #0
 800b734:	2000      	movs	r0, #0
 800b736:	f000 fa43 	bl	800bbc0 <_LCD_Write_Frame>
}
 800b73a:	bf00      	nop
 800b73c:	3708      	adds	r7, #8
 800b73e:	46bd      	mov	sp, r7
 800b740:	bd80      	pop	{r7, pc}
 800b742:	bf00      	nop
 800b744:	200001ce 	.word	0x200001ce
 800b748:	200001cc 	.word	0x200001cc

0800b74c <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b08c      	sub	sp, #48	; 0x30
 800b750:	af00      	add	r7, sp, #0
 800b752:	4603      	mov	r3, r0
 800b754:	80fb      	strh	r3, [r7, #6]
 800b756:	460b      	mov	r3, r1
 800b758:	80bb      	strh	r3, [r7, #4]
 800b75a:	4613      	mov	r3, r2
 800b75c:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800b75e:	4b94      	ldr	r3, [pc, #592]	; (800b9b0 <ILI9341_Draw_Pixel+0x264>)
 800b760:	881b      	ldrh	r3, [r3, #0]
 800b762:	b29b      	uxth	r3, r3
 800b764:	88fa      	ldrh	r2, [r7, #6]
 800b766:	429a      	cmp	r2, r3
 800b768:	f080 811e 	bcs.w	800b9a8 <ILI9341_Draw_Pixel+0x25c>
 800b76c:	4b91      	ldr	r3, [pc, #580]	; (800b9b4 <ILI9341_Draw_Pixel+0x268>)
 800b76e:	881b      	ldrh	r3, [r3, #0]
 800b770:	b29b      	uxth	r3, r3
 800b772:	88ba      	ldrh	r2, [r7, #4]
 800b774:	429a      	cmp	r2, r3
 800b776:	f080 8117 	bcs.w	800b9a8 <ILI9341_Draw_Pixel+0x25c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800b77a:	4b8f      	ldr	r3, [pc, #572]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b77c:	695b      	ldr	r3, [r3, #20]
 800b77e:	4a8e      	ldr	r2, [pc, #568]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b784:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b786:	4b8c      	ldr	r3, [pc, #560]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b788:	695b      	ldr	r3, [r3, #20]
 800b78a:	4a8b      	ldr	r2, [pc, #556]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b78c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b790:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2A, 0, 0);
 800b792:	2200      	movs	r2, #0
 800b794:	2100      	movs	r1, #0
 800b796:	202a      	movs	r0, #42	; 0x2a
 800b798:	f000 fb26 	bl	800bde8 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b79c:	2300      	movs	r3, #0
 800b79e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7a0:	e008      	b.n	800b7b4 <ILI9341_Draw_Pixel+0x68>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b7a2:	4b85      	ldr	r3, [pc, #532]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b7a4:	695b      	ldr	r3, [r3, #20]
 800b7a6:	4a84      	ldr	r2, [pc, #528]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b7a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7ac:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b7ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b0:	3301      	adds	r3, #1
 800b7b2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b7b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b7b6:	2b02      	cmp	r3, #2
 800b7b8:	ddf3      	ble.n	800b7a2 <ILI9341_Draw_Pixel+0x56>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800b7ba:	4b7f      	ldr	r3, [pc, #508]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b7bc:	695b      	ldr	r3, [r3, #20]
 800b7be:	4a7e      	ldr	r2, [pc, #504]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b7c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b7c4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800b7c6:	4b7c      	ldr	r3, [pc, #496]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b7c8:	695b      	ldr	r3, [r3, #20]
 800b7ca:	4a7b      	ldr	r2, [pc, #492]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b7cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7d0:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b7d2:	4b79      	ldr	r3, [pc, #484]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b7d4:	695b      	ldr	r3, [r3, #20]
 800b7d6:	4a78      	ldr	r2, [pc, #480]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b7d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b7dc:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] =
 800b7de:	88fb      	ldrh	r3, [r7, #6]
 800b7e0:	0a1b      	lsrs	r3, r3, #8
 800b7e2:	b29b      	uxth	r3, r3
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	753b      	strb	r3, [r7, #20]
 800b7e8:	88fb      	ldrh	r3, [r7, #6]
 800b7ea:	b2db      	uxtb	r3, r3
 800b7ec:	757b      	strb	r3, [r7, #21]
	{
			x >> 8,
			x,
			(x + 1) >> 8,
 800b7ee:	88fb      	ldrh	r3, [r7, #6]
 800b7f0:	3301      	adds	r3, #1
 800b7f2:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer[4] =
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	75bb      	strb	r3, [r7, #22]
			(x + 1)
 800b7f8:	88fb      	ldrh	r3, [r7, #6]
 800b7fa:	b2db      	uxtb	r3, r3
 800b7fc:	3301      	adds	r3, #1
 800b7fe:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer[4] =
 800b800:	75fb      	strb	r3, [r7, #23]
	};

	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 9);
 800b802:	f107 0014 	add.w	r0, r7, #20
 800b806:	2309      	movs	r3, #9
 800b808:	2200      	movs	r2, #0
 800b80a:	2104      	movs	r1, #4
 800b80c:	f000 fb02 	bl	800be14 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b810:	2300      	movs	r3, #0
 800b812:	62bb      	str	r3, [r7, #40]	; 0x28
 800b814:	e008      	b.n	800b828 <ILI9341_Draw_Pixel+0xdc>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b816:	4b68      	ldr	r3, [pc, #416]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b818:	695b      	ldr	r3, [r3, #20]
 800b81a:	4a67      	ldr	r2, [pc, #412]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b81c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b820:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b824:	3301      	adds	r3, #1
 800b826:	62bb      	str	r3, [r7, #40]	; 0x28
 800b828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b82a:	2b02      	cmp	r3, #2
 800b82c:	ddf3      	ble.n	800b816 <ILI9341_Draw_Pixel+0xca>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800b82e:	4b62      	ldr	r3, [pc, #392]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b830:	695b      	ldr	r3, [r3, #20]
 800b832:	4a61      	ldr	r2, [pc, #388]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b838:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800b83a:	4b5f      	ldr	r3, [pc, #380]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b83c:	695b      	ldr	r3, [r3, #20]
 800b83e:	4a5e      	ldr	r2, [pc, #376]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b840:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b844:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b846:	4b5c      	ldr	r3, [pc, #368]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b848:	695b      	ldr	r3, [r3, #20]
 800b84a:	4a5b      	ldr	r2, [pc, #364]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b84c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b850:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2B, 0, 0);
 800b852:	2200      	movs	r2, #0
 800b854:	2100      	movs	r1, #0
 800b856:	202b      	movs	r0, #43	; 0x2b
 800b858:	f000 fac6 	bl	800bde8 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b85c:	2300      	movs	r3, #0
 800b85e:	627b      	str	r3, [r7, #36]	; 0x24
 800b860:	e008      	b.n	800b874 <ILI9341_Draw_Pixel+0x128>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b862:	4b55      	ldr	r3, [pc, #340]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b864:	695b      	ldr	r3, [r3, #20]
 800b866:	4a54      	ldr	r2, [pc, #336]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b868:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b86c:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b86e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b870:	3301      	adds	r3, #1
 800b872:	627b      	str	r3, [r7, #36]	; 0x24
 800b874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b876:	2b02      	cmp	r3, #2
 800b878:	ddf3      	ble.n	800b862 <ILI9341_Draw_Pixel+0x116>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800b87a:	4b4f      	ldr	r3, [pc, #316]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b87c:	695b      	ldr	r3, [r3, #20]
 800b87e:	4a4e      	ldr	r2, [pc, #312]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b880:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b884:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800b886:	4b4c      	ldr	r3, [pc, #304]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b888:	695b      	ldr	r3, [r3, #20]
 800b88a:	4a4b      	ldr	r2, [pc, #300]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b88c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b890:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b892:	4b49      	ldr	r3, [pc, #292]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b894:	695b      	ldr	r3, [r3, #20]
 800b896:	4a48      	ldr	r2, [pc, #288]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b898:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b89c:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] =
 800b89e:	88bb      	ldrh	r3, [r7, #4]
 800b8a0:	0a1b      	lsrs	r3, r3, #8
 800b8a2:	b29b      	uxth	r3, r3
 800b8a4:	b2db      	uxtb	r3, r3
 800b8a6:	743b      	strb	r3, [r7, #16]
 800b8a8:	88bb      	ldrh	r3, [r7, #4]
 800b8aa:	b2db      	uxtb	r3, r3
 800b8ac:	747b      	strb	r3, [r7, #17]
	{
			y >> 8,
			y,
			(y + 1) >> 8,
 800b8ae:	88bb      	ldrh	r3, [r7, #4]
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer1[4] =
 800b8b4:	b2db      	uxtb	r3, r3
 800b8b6:	74bb      	strb	r3, [r7, #18]
			(y + 1)
 800b8b8:	88bb      	ldrh	r3, [r7, #4]
 800b8ba:	b2db      	uxtb	r3, r3
 800b8bc:	3301      	adds	r3, #1
 800b8be:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer1[4] =
 800b8c0:	74fb      	strb	r3, [r7, #19]
	};

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 9);
 800b8c2:	f107 0010 	add.w	r0, r7, #16
 800b8c6:	2309      	movs	r3, #9
 800b8c8:	2200      	movs	r2, #0
 800b8ca:	2104      	movs	r1, #4
 800b8cc:	f000 faa2 	bl	800be14 <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	623b      	str	r3, [r7, #32]
 800b8d4:	e008      	b.n	800b8e8 <ILI9341_Draw_Pixel+0x19c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b8d6:	4b38      	ldr	r3, [pc, #224]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b8d8:	695b      	ldr	r3, [r3, #20]
 800b8da:	4a37      	ldr	r2, [pc, #220]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b8dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b8e0:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b8e2:	6a3b      	ldr	r3, [r7, #32]
 800b8e4:	3301      	adds	r3, #1
 800b8e6:	623b      	str	r3, [r7, #32]
 800b8e8:	6a3b      	ldr	r3, [r7, #32]
 800b8ea:	2b02      	cmp	r3, #2
 800b8ec:	ddf3      	ble.n	800b8d6 <ILI9341_Draw_Pixel+0x18a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800b8ee:	4b32      	ldr	r3, [pc, #200]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b8f0:	695b      	ldr	r3, [r3, #20]
 800b8f2:	4a31      	ldr	r2, [pc, #196]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b8f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b8f8:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800b8fa:	4b2f      	ldr	r3, [pc, #188]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b8fc:	695b      	ldr	r3, [r3, #20]
 800b8fe:	4a2e      	ldr	r2, [pc, #184]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b900:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b904:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b906:	4b2c      	ldr	r3, [pc, #176]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b908:	695b      	ldr	r3, [r3, #20]
 800b90a:	4a2b      	ldr	r2, [pc, #172]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b90c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b910:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2C, 0, 0);
 800b912:	2200      	movs	r2, #0
 800b914:	2100      	movs	r1, #0
 800b916:	202c      	movs	r0, #44	; 0x2c
 800b918:	f000 fa66 	bl	800bde8 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b91c:	2300      	movs	r3, #0
 800b91e:	61fb      	str	r3, [r7, #28]
 800b920:	e008      	b.n	800b934 <ILI9341_Draw_Pixel+0x1e8>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b922:	4b25      	ldr	r3, [pc, #148]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b924:	695b      	ldr	r3, [r3, #20]
 800b926:	4a24      	ldr	r2, [pc, #144]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b928:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b92c:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b92e:	69fb      	ldr	r3, [r7, #28]
 800b930:	3301      	adds	r3, #1
 800b932:	61fb      	str	r3, [r7, #28]
 800b934:	69fb      	ldr	r3, [r7, #28]
 800b936:	2b02      	cmp	r3, #2
 800b938:	ddf3      	ble.n	800b922 <ILI9341_Draw_Pixel+0x1d6>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800b93a:	4b1f      	ldr	r3, [pc, #124]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b93c:	695b      	ldr	r3, [r3, #20]
 800b93e:	4a1e      	ldr	r2, [pc, #120]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b944:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800b946:	4b1c      	ldr	r3, [pc, #112]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b948:	695b      	ldr	r3, [r3, #20]
 800b94a:	4a1b      	ldr	r2, [pc, #108]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b94c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b950:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b952:	4b19      	ldr	r3, [pc, #100]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b954:	695b      	ldr	r3, [r3, #20]
 800b956:	4a18      	ldr	r2, [pc, #96]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b958:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b95c:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800b95e:	887b      	ldrh	r3, [r7, #2]
 800b960:	0a1b      	lsrs	r3, r3, #8
 800b962:	b29b      	uxth	r3, r3
 800b964:	b2db      	uxtb	r3, r3
 800b966:	733b      	strb	r3, [r7, #12]
 800b968:	887b      	ldrh	r3, [r7, #2]
 800b96a:	b2db      	uxtb	r3, r3
 800b96c:	737b      	strb	r3, [r7, #13]

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 4, 0, 9);
 800b96e:	f107 000c 	add.w	r0, r7, #12
 800b972:	2309      	movs	r3, #9
 800b974:	2200      	movs	r2, #0
 800b976:	2104      	movs	r1, #4
 800b978:	f000 fa4c 	bl	800be14 <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b97c:	2300      	movs	r3, #0
 800b97e:	61bb      	str	r3, [r7, #24]
 800b980:	e008      	b.n	800b994 <ILI9341_Draw_Pixel+0x248>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800b982:	4b0d      	ldr	r3, [pc, #52]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b984:	695b      	ldr	r3, [r3, #20]
 800b986:	4a0c      	ldr	r2, [pc, #48]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b988:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b98c:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800b98e:	69bb      	ldr	r3, [r7, #24]
 800b990:	3301      	adds	r3, #1
 800b992:	61bb      	str	r3, [r7, #24]
 800b994:	69bb      	ldr	r3, [r7, #24]
 800b996:	2b02      	cmp	r3, #2
 800b998:	ddf3      	ble.n	800b982 <ILI9341_Draw_Pixel+0x236>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800b99a:	4b07      	ldr	r3, [pc, #28]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b99c:	695b      	ldr	r3, [r3, #20]
 800b99e:	4a06      	ldr	r2, [pc, #24]	; (800b9b8 <ILI9341_Draw_Pixel+0x26c>)
 800b9a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9a4:	6153      	str	r3, [r2, #20]
 800b9a6:	e000      	b.n	800b9aa <ILI9341_Draw_Pixel+0x25e>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800b9a8:	bf00      	nop


}
 800b9aa:	3730      	adds	r7, #48	; 0x30
 800b9ac:	46bd      	mov	sp, r7
 800b9ae:	bd80      	pop	{r7, pc}
 800b9b0:	200001ce 	.word	0x200001ce
 800b9b4:	200001cc 	.word	0x200001cc
 800b9b8:	48000400 	.word	0x48000400

0800b9bc <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800b9bc:	b590      	push	{r4, r7, lr}
 800b9be:	b087      	sub	sp, #28
 800b9c0:	af02      	add	r7, sp, #8
 800b9c2:	4604      	mov	r4, r0
 800b9c4:	4608      	mov	r0, r1
 800b9c6:	4611      	mov	r1, r2
 800b9c8:	461a      	mov	r2, r3
 800b9ca:	4623      	mov	r3, r4
 800b9cc:	80fb      	strh	r3, [r7, #6]
 800b9ce:	4603      	mov	r3, r0
 800b9d0:	80bb      	strh	r3, [r7, #4]
 800b9d2:	460b      	mov	r3, r1
 800b9d4:	807b      	strh	r3, [r7, #2]
 800b9d6:	4613      	mov	r3, r2
 800b9d8:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800b9da:	4b39      	ldr	r3, [pc, #228]	; (800bac0 <ILI9341_Draw_Rectangle+0x104>)
 800b9dc:	881b      	ldrh	r3, [r3, #0]
 800b9de:	b29b      	uxth	r3, r3
 800b9e0:	88fa      	ldrh	r2, [r7, #6]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d268      	bcs.n	800bab8 <ILI9341_Draw_Rectangle+0xfc>
 800b9e6:	4b37      	ldr	r3, [pc, #220]	; (800bac4 <ILI9341_Draw_Rectangle+0x108>)
 800b9e8:	881b      	ldrh	r3, [r3, #0]
 800b9ea:	b29b      	uxth	r3, r3
 800b9ec:	88ba      	ldrh	r2, [r7, #4]
 800b9ee:	429a      	cmp	r2, r3
 800b9f0:	d262      	bcs.n	800bab8 <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 800b9f2:	88fa      	ldrh	r2, [r7, #6]
 800b9f4:	887b      	ldrh	r3, [r7, #2]
 800b9f6:	4413      	add	r3, r2
 800b9f8:	3b01      	subs	r3, #1
 800b9fa:	4a31      	ldr	r2, [pc, #196]	; (800bac0 <ILI9341_Draw_Rectangle+0x104>)
 800b9fc:	8812      	ldrh	r2, [r2, #0]
 800b9fe:	b292      	uxth	r2, r2
 800ba00:	4293      	cmp	r3, r2
 800ba02:	db05      	blt.n	800ba10 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800ba04:	4b2e      	ldr	r3, [pc, #184]	; (800bac0 <ILI9341_Draw_Rectangle+0x104>)
 800ba06:	881b      	ldrh	r3, [r3, #0]
 800ba08:	b29a      	uxth	r2, r3
 800ba0a:	88fb      	ldrh	r3, [r7, #6]
 800ba0c:	1ad3      	subs	r3, r2, r3
 800ba0e:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800ba10:	88ba      	ldrh	r2, [r7, #4]
 800ba12:	883b      	ldrh	r3, [r7, #0]
 800ba14:	4413      	add	r3, r2
 800ba16:	3b01      	subs	r3, #1
 800ba18:	4a2a      	ldr	r2, [pc, #168]	; (800bac4 <ILI9341_Draw_Rectangle+0x108>)
 800ba1a:	8812      	ldrh	r2, [r2, #0]
 800ba1c:	b292      	uxth	r2, r2
 800ba1e:	4293      	cmp	r3, r2
 800ba20:	db05      	blt.n	800ba2e <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800ba22:	4b28      	ldr	r3, [pc, #160]	; (800bac4 <ILI9341_Draw_Rectangle+0x108>)
 800ba24:	881b      	ldrh	r3, [r3, #0]
 800ba26:	b29a      	uxth	r2, r3
 800ba28:	88bb      	ldrh	r3, [r7, #4]
 800ba2a:	1ad3      	subs	r3, r2, r3
 800ba2c:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800ba2e:	88fa      	ldrh	r2, [r7, #6]
 800ba30:	887b      	ldrh	r3, [r7, #2]
 800ba32:	4413      	add	r3, r2
 800ba34:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800ba36:	3b01      	subs	r3, #1
 800ba38:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800ba3a:	88ba      	ldrh	r2, [r7, #4]
 800ba3c:	883b      	ldrh	r3, [r7, #0]
 800ba3e:	4413      	add	r3, r2
 800ba40:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800ba42:	3b01      	subs	r3, #1
 800ba44:	b29b      	uxth	r3, r3
 800ba46:	88b9      	ldrh	r1, [r7, #4]
 800ba48:	88f8      	ldrh	r0, [r7, #6]
 800ba4a:	4622      	mov	r2, r4
 800ba4c:	f7ff fe08 	bl	800b660 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800ba50:	883a      	ldrh	r2, [r7, #0]
 800ba52:	887b      	ldrh	r3, [r7, #2]
 800ba54:	fb12 f303 	smulbb	r3, r2, r3
 800ba58:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800ba5e:	89fb      	ldrh	r3, [r7, #14]
 800ba60:	f003 0301 	and.w	r3, r3, #1
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d009      	beq.n	800ba7c <ILI9341_Draw_Rectangle+0xc0>
 800ba68:	89fb      	ldrh	r3, [r7, #14]
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d906      	bls.n	800ba7c <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800ba6e:	2301      	movs	r3, #1
 800ba70:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800ba72:	89fb      	ldrh	r3, [r7, #14]
 800ba74:	085b      	lsrs	r3, r3, #1
 800ba76:	b29b      	uxth	r3, r3
 800ba78:	005b      	lsls	r3, r3, #1
 800ba7a:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800ba7c:	89fc      	ldrh	r4, [r7, #14]
 800ba7e:	8c3a      	ldrh	r2, [r7, #32]
 800ba80:	88b9      	ldrh	r1, [r7, #4]
 800ba82:	88f8      	ldrh	r0, [r7, #6]
 800ba84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800ba88:	9300      	str	r3, [sp, #0]
 800ba8a:	4623      	mov	r3, r4
 800ba8c:	f000 f898 	bl	800bbc0 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800ba90:	7b7b      	ldrb	r3, [r7, #13]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d011      	beq.n	800baba <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800ba96:	88fa      	ldrh	r2, [r7, #6]
 800ba98:	887b      	ldrh	r3, [r7, #2]
 800ba9a:	4413      	add	r3, r2
 800ba9c:	b29b      	uxth	r3, r3
 800ba9e:	3b01      	subs	r3, #1
 800baa0:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800baa2:	88ba      	ldrh	r2, [r7, #4]
 800baa4:	883b      	ldrh	r3, [r7, #0]
 800baa6:	4413      	add	r3, r2
 800baa8:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800baaa:	3b01      	subs	r3, #1
 800baac:	b29b      	uxth	r3, r3
 800baae:	8c3a      	ldrh	r2, [r7, #32]
 800bab0:	4619      	mov	r1, r3
 800bab2:	f7ff fe4b 	bl	800b74c <ILI9341_Draw_Pixel>
 800bab6:	e000      	b.n	800baba <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800bab8:	bf00      	nop
							colour);
	}
}
 800baba:	3714      	adds	r7, #20
 800babc:	46bd      	mov	sp, r7
 800babe:	bd90      	pop	{r4, r7, pc}
 800bac0:	200001ce 	.word	0x200001ce
 800bac4:	200001cc 	.word	0x200001cc

0800bac8 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	4603      	mov	r3, r0
 800bad0:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800bad2:	79fb      	ldrb	r3, [r7, #7]
 800bad4:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800bad6:	2036      	movs	r0, #54	; 0x36
 800bad8:	f000 f922 	bl	800bd20 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800badc:	7bfb      	ldrb	r3, [r7, #15]
 800bade:	2b03      	cmp	r3, #3
 800bae0:	d836      	bhi.n	800bb50 <ILI9341_Set_Rotation+0x88>
 800bae2:	a201      	add	r2, pc, #4	; (adr r2, 800bae8 <ILI9341_Set_Rotation+0x20>)
 800bae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bae8:	0800baf9 	.word	0x0800baf9
 800baec:	0800bb0f 	.word	0x0800bb0f
 800baf0:	0800bb25 	.word	0x0800bb25
 800baf4:	0800bb3b 	.word	0x0800bb3b
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800baf8:	2048      	movs	r0, #72	; 0x48
 800bafa:	f000 f943 	bl	800bd84 <_LCD_SendData>
			LCD_WIDTH = 240;
 800bafe:	4b17      	ldr	r3, [pc, #92]	; (800bb5c <ILI9341_Set_Rotation+0x94>)
 800bb00:	22f0      	movs	r2, #240	; 0xf0
 800bb02:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800bb04:	4b16      	ldr	r3, [pc, #88]	; (800bb60 <ILI9341_Set_Rotation+0x98>)
 800bb06:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800bb0a:	801a      	strh	r2, [r3, #0]
			break;
 800bb0c:	e021      	b.n	800bb52 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800bb0e:	2028      	movs	r0, #40	; 0x28
 800bb10:	f000 f938 	bl	800bd84 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800bb14:	4b11      	ldr	r3, [pc, #68]	; (800bb5c <ILI9341_Set_Rotation+0x94>)
 800bb16:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800bb1a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800bb1c:	4b10      	ldr	r3, [pc, #64]	; (800bb60 <ILI9341_Set_Rotation+0x98>)
 800bb1e:	22f0      	movs	r2, #240	; 0xf0
 800bb20:	801a      	strh	r2, [r3, #0]
			break;
 800bb22:	e016      	b.n	800bb52 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800bb24:	2088      	movs	r0, #136	; 0x88
 800bb26:	f000 f92d 	bl	800bd84 <_LCD_SendData>
			LCD_WIDTH  = 240;
 800bb2a:	4b0c      	ldr	r3, [pc, #48]	; (800bb5c <ILI9341_Set_Rotation+0x94>)
 800bb2c:	22f0      	movs	r2, #240	; 0xf0
 800bb2e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800bb30:	4b0b      	ldr	r3, [pc, #44]	; (800bb60 <ILI9341_Set_Rotation+0x98>)
 800bb32:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800bb36:	801a      	strh	r2, [r3, #0]
			break;
 800bb38:	e00b      	b.n	800bb52 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800bb3a:	20e8      	movs	r0, #232	; 0xe8
 800bb3c:	f000 f922 	bl	800bd84 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800bb40:	4b06      	ldr	r3, [pc, #24]	; (800bb5c <ILI9341_Set_Rotation+0x94>)
 800bb42:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800bb46:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800bb48:	4b05      	ldr	r3, [pc, #20]	; (800bb60 <ILI9341_Set_Rotation+0x98>)
 800bb4a:	22f0      	movs	r2, #240	; 0xf0
 800bb4c:	801a      	strh	r2, [r3, #0]
			break;
 800bb4e:	e000      	b.n	800bb52 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800bb50:	bf00      	nop
	}
}
 800bb52:	bf00      	nop
 800bb54:	3710      	adds	r7, #16
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	200001ce 	.word	0x200001ce
 800bb60:	200001cc 	.word	0x200001cc

0800bb64 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800bb64:	b480      	push	{r7}
 800bb66:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800bb68:	4b05      	ldr	r3, [pc, #20]	; (800bb80 <_LCD_Enable+0x1c>)
 800bb6a:	695b      	ldr	r3, [r3, #20]
 800bb6c:	4a04      	ldr	r2, [pc, #16]	; (800bb80 <_LCD_Enable+0x1c>)
 800bb6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bb72:	6153      	str	r3, [r2, #20]
}
 800bb74:	bf00      	nop
 800bb76:	46bd      	mov	sp, r7
 800bb78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7c:	4770      	bx	lr
 800bb7e:	bf00      	nop
 800bb80:	48000400 	.word	0x48000400

0800bb84 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800bb84:	b580      	push	{r7, lr}
 800bb86:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800bb88:	4b0c      	ldr	r3, [pc, #48]	; (800bbbc <_LCD_Reset+0x38>)
 800bb8a:	695b      	ldr	r3, [r3, #20]
 800bb8c:	4a0b      	ldr	r2, [pc, #44]	; (800bbbc <_LCD_Reset+0x38>)
 800bb8e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800bb92:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800bb94:	20c8      	movs	r0, #200	; 0xc8
 800bb96:	f7f9 fe47 	bl	8005828 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bb9a:	4b08      	ldr	r3, [pc, #32]	; (800bbbc <_LCD_Reset+0x38>)
 800bb9c:	695b      	ldr	r3, [r3, #20]
 800bb9e:	4a07      	ldr	r2, [pc, #28]	; (800bbbc <_LCD_Reset+0x38>)
 800bba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bba4:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800bba6:	20c8      	movs	r0, #200	; 0xc8
 800bba8:	f7f9 fe3e 	bl	8005828 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800bbac:	4b03      	ldr	r3, [pc, #12]	; (800bbbc <_LCD_Reset+0x38>)
 800bbae:	695b      	ldr	r3, [r3, #20]
 800bbb0:	4a02      	ldr	r2, [pc, #8]	; (800bbbc <_LCD_Reset+0x38>)
 800bbb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bbb6:	6153      	str	r3, [r2, #20]
}
 800bbb8:	bf00      	nop
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	48000400 	.word	0x48000400

0800bbc0 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800bbc0:	b5b0      	push	{r4, r5, r7, lr}
 800bbc2:	b08e      	sub	sp, #56	; 0x38
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	607b      	str	r3, [r7, #4]
 800bbc8:	4603      	mov	r3, r0
 800bbca:	81fb      	strh	r3, [r7, #14]
 800bbcc:	460b      	mov	r3, r1
 800bbce:	81bb      	strh	r3, [r7, #12]
 800bbd0:	4613      	mov	r3, r2
 800bbd2:	817b      	strh	r3, [r7, #10]
 800bbd4:	466b      	mov	r3, sp
 800bbd6:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800bbd8:	2300      	movs	r3, #0
 800bbda:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	005b      	lsls	r3, r3, #1
 800bbe0:	4a4d      	ldr	r2, [pc, #308]	; (800bd18 <_LCD_Write_Frame+0x158>)
 800bbe2:	8812      	ldrh	r2, [r2, #0]
 800bbe4:	4293      	cmp	r3, r2
 800bbe6:	d202      	bcs.n	800bbee <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bbec:	e002      	b.n	800bbf4 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800bbee:	4b4a      	ldr	r3, [pc, #296]	; (800bd18 <_LCD_Write_Frame+0x158>)
 800bbf0:	881b      	ldrh	r3, [r3, #0]
 800bbf2:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800bbf4:	897b      	ldrh	r3, [r7, #10]
 800bbf6:	0a1b      	lsrs	r3, r3, #8
 800bbf8:	b29b      	uxth	r3, r3
 800bbfa:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800bbfc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bbfe:	4603      	mov	r3, r0
 800bc00:	3b01      	subs	r3, #1
 800bc02:	61bb      	str	r3, [r7, #24]
 800bc04:	4601      	mov	r1, r0
 800bc06:	f04f 0200 	mov.w	r2, #0
 800bc0a:	f04f 0300 	mov.w	r3, #0
 800bc0e:	f04f 0400 	mov.w	r4, #0
 800bc12:	00d4      	lsls	r4, r2, #3
 800bc14:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800bc18:	00cb      	lsls	r3, r1, #3
 800bc1a:	4601      	mov	r1, r0
 800bc1c:	f04f 0200 	mov.w	r2, #0
 800bc20:	f04f 0300 	mov.w	r3, #0
 800bc24:	f04f 0400 	mov.w	r4, #0
 800bc28:	00d4      	lsls	r4, r2, #3
 800bc2a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800bc2e:	00cb      	lsls	r3, r1, #3
 800bc30:	1dc3      	adds	r3, r0, #7
 800bc32:	08db      	lsrs	r3, r3, #3
 800bc34:	00db      	lsls	r3, r3, #3
 800bc36:	ebad 0d03 	sub.w	sp, sp, r3
 800bc3a:	466b      	mov	r3, sp
 800bc3c:	3300      	adds	r3, #0
 800bc3e:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800bc40:	2300      	movs	r3, #0
 800bc42:	633b      	str	r3, [r7, #48]	; 0x30
 800bc44:	e00d      	b.n	800bc62 <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800bc46:	697a      	ldr	r2, [r7, #20]
 800bc48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc4a:	4413      	add	r3, r2
 800bc4c:	7ffa      	ldrb	r2, [r7, #31]
 800bc4e:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800bc50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc52:	3301      	adds	r3, #1
 800bc54:	897a      	ldrh	r2, [r7, #10]
 800bc56:	b2d1      	uxtb	r1, r2
 800bc58:	697a      	ldr	r2, [r7, #20]
 800bc5a:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800bc5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc5e:	3302      	adds	r3, #2
 800bc60:	633b      	str	r3, [r7, #48]	; 0x30
 800bc62:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bc64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc66:	429a      	cmp	r2, r3
 800bc68:	d3ed      	bcc.n	800bc46 <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	005b      	lsls	r3, r3, #1
 800bc6e:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800bc70:	2301      	movs	r3, #1
 800bc72:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800bc74:	2300      	movs	r3, #0
 800bc76:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	2b00      	cmp	r3, #0
 800bc7c:	d00d      	beq.n	800bc9a <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800bc7e:	693a      	ldr	r2, [r7, #16]
 800bc80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc82:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc86:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bc8c:	fbb3 f2f2 	udiv	r2, r3, r2
 800bc90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bc92:	fb01 f202 	mul.w	r2, r1, r2
 800bc96:	1a9b      	subs	r3, r3, r2
 800bc98:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800bc9a:	4b20      	ldr	r3, [pc, #128]	; (800bd1c <_LCD_Write_Frame+0x15c>)
 800bc9c:	695b      	ldr	r3, [r3, #20]
 800bc9e:	4a1f      	ldr	r2, [pc, #124]	; (800bd1c <_LCD_Write_Frame+0x15c>)
 800bca0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bca4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bca6:	4b1d      	ldr	r3, [pc, #116]	; (800bd1c <_LCD_Write_Frame+0x15c>)
 800bca8:	695b      	ldr	r3, [r3, #20]
 800bcaa:	4a1c      	ldr	r2, [pc, #112]	; (800bd1c <_LCD_Write_Frame+0x15c>)
 800bcac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcb0:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 800bcb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	d00f      	beq.n	800bcd8 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800bcb8:	2300      	movs	r3, #0
 800bcba:	627b      	str	r3, [r7, #36]	; 0x24
 800bcbc:	e008      	b.n	800bcd0 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 9);
 800bcbe:	6978      	ldr	r0, [r7, #20]
 800bcc0:	2309      	movs	r3, #9
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bcc6:	f000 f8a5 	bl	800be14 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800bcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bccc:	3301      	adds	r3, #1
 800bcce:	627b      	str	r3, [r7, #36]	; 0x24
 800bcd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d3f2      	bcc.n	800bcbe <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 9);
 800bcd8:	6978      	ldr	r0, [r7, #20]
 800bcda:	2309      	movs	r3, #9
 800bcdc:	2200      	movs	r2, #0
 800bcde:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bce0:	f000 f898 	bl	800be14 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800bce4:	2300      	movs	r3, #0
 800bce6:	623b      	str	r3, [r7, #32]
 800bce8:	e008      	b.n	800bcfc <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bcea:	4b0c      	ldr	r3, [pc, #48]	; (800bd1c <_LCD_Write_Frame+0x15c>)
 800bcec:	695b      	ldr	r3, [r3, #20]
 800bcee:	4a0b      	ldr	r2, [pc, #44]	; (800bd1c <_LCD_Write_Frame+0x15c>)
 800bcf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bcf4:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800bcf6:	6a3b      	ldr	r3, [r7, #32]
 800bcf8:	3301      	adds	r3, #1
 800bcfa:	623b      	str	r3, [r7, #32]
 800bcfc:	6a3b      	ldr	r3, [r7, #32]
 800bcfe:	2b02      	cmp	r3, #2
 800bd00:	ddf3      	ble.n	800bcea <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800bd02:	4b06      	ldr	r3, [pc, #24]	; (800bd1c <_LCD_Write_Frame+0x15c>)
 800bd04:	695b      	ldr	r3, [r3, #20]
 800bd06:	4a05      	ldr	r2, [pc, #20]	; (800bd1c <_LCD_Write_Frame+0x15c>)
 800bd08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd0c:	6153      	str	r3, [r2, #20]
 800bd0e:	46ad      	mov	sp, r5

}
 800bd10:	bf00      	nop
 800bd12:	3738      	adds	r7, #56	; 0x38
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bdb0      	pop	{r4, r5, r7, pc}
 800bd18:	200001d0 	.word	0x200001d0
 800bd1c:	48000400 	.word	0x48000400

0800bd20 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b084      	sub	sp, #16
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	4603      	mov	r3, r0
 800bd28:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bd2a:	4b15      	ldr	r3, [pc, #84]	; (800bd80 <_LCD_SendCommand+0x60>)
 800bd2c:	695b      	ldr	r3, [r3, #20]
 800bd2e:	4a14      	ldr	r2, [pc, #80]	; (800bd80 <_LCD_SendCommand+0x60>)
 800bd30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd34:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800bd36:	4b12      	ldr	r3, [pc, #72]	; (800bd80 <_LCD_SendCommand+0x60>)
 800bd38:	695b      	ldr	r3, [r3, #20]
 800bd3a:	4a11      	ldr	r2, [pc, #68]	; (800bd80 <_LCD_SendCommand+0x60>)
 800bd3c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bd40:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800bd42:	79fb      	ldrb	r3, [r7, #7]
 800bd44:	2200      	movs	r2, #0
 800bd46:	2100      	movs	r1, #0
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f000 f84d 	bl	800bde8 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800bd4e:	2300      	movs	r3, #0
 800bd50:	60fb      	str	r3, [r7, #12]
 800bd52:	e008      	b.n	800bd66 <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bd54:	4b0a      	ldr	r3, [pc, #40]	; (800bd80 <_LCD_SendCommand+0x60>)
 800bd56:	695b      	ldr	r3, [r3, #20]
 800bd58:	4a09      	ldr	r2, [pc, #36]	; (800bd80 <_LCD_SendCommand+0x60>)
 800bd5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bd5e:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	3301      	adds	r3, #1
 800bd64:	60fb      	str	r3, [r7, #12]
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	2b02      	cmp	r3, #2
 800bd6a:	ddf3      	ble.n	800bd54 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800bd6c:	4b04      	ldr	r3, [pc, #16]	; (800bd80 <_LCD_SendCommand+0x60>)
 800bd6e:	695b      	ldr	r3, [r3, #20]
 800bd70:	4a03      	ldr	r2, [pc, #12]	; (800bd80 <_LCD_SendCommand+0x60>)
 800bd72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd76:	6153      	str	r3, [r2, #20]
}
 800bd78:	bf00      	nop
 800bd7a:	3710      	adds	r7, #16
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bd80      	pop	{r7, pc}
 800bd80:	48000400 	.word	0x48000400

0800bd84 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800bd84:	b580      	push	{r7, lr}
 800bd86:	b084      	sub	sp, #16
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	4603      	mov	r3, r0
 800bd8c:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800bd8e:	4b15      	ldr	r3, [pc, #84]	; (800bde4 <_LCD_SendData+0x60>)
 800bd90:	695b      	ldr	r3, [r3, #20]
 800bd92:	4a14      	ldr	r2, [pc, #80]	; (800bde4 <_LCD_SendData+0x60>)
 800bd94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd98:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bd9a:	4b12      	ldr	r3, [pc, #72]	; (800bde4 <_LCD_SendData+0x60>)
 800bd9c:	695b      	ldr	r3, [r3, #20]
 800bd9e:	4a11      	ldr	r2, [pc, #68]	; (800bde4 <_LCD_SendData+0x60>)
 800bda0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bda4:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800bda6:	79fb      	ldrb	r3, [r7, #7]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	2100      	movs	r1, #0
 800bdac:	4618      	mov	r0, r3
 800bdae:	f000 f81b 	bl	800bde8 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800bdb2:	2300      	movs	r3, #0
 800bdb4:	60fb      	str	r3, [r7, #12]
 800bdb6:	e008      	b.n	800bdca <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bdb8:	4b0a      	ldr	r3, [pc, #40]	; (800bde4 <_LCD_SendData+0x60>)
 800bdba:	695b      	ldr	r3, [r3, #20]
 800bdbc:	4a09      	ldr	r2, [pc, #36]	; (800bde4 <_LCD_SendData+0x60>)
 800bdbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdc2:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	3301      	adds	r3, #1
 800bdc8:	60fb      	str	r3, [r7, #12]
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	2b02      	cmp	r3, #2
 800bdce:	ddf3      	ble.n	800bdb8 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bdd0:	4b04      	ldr	r3, [pc, #16]	; (800bde4 <_LCD_SendData+0x60>)
 800bdd2:	695b      	ldr	r3, [r3, #20]
 800bdd4:	4a03      	ldr	r2, [pc, #12]	; (800bde4 <_LCD_SendData+0x60>)
 800bdd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdda:	6153      	str	r3, [r2, #20]
}
 800bddc:	bf00      	nop
 800bdde:	3710      	adds	r7, #16
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	48000400 	.word	0x48000400

0800bde8 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b082      	sub	sp, #8
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	4603      	mov	r3, r0
 800bdf0:	71fb      	strb	r3, [r7, #7]
 800bdf2:	460b      	mov	r3, r1
 800bdf4:	71bb      	strb	r3, [r7, #6]
 800bdf6:	4613      	mov	r3, r2
 800bdf8:	717b      	strb	r3, [r7, #5]

#ifdef USE_HAL_SPI
	HAL_SPI_Transmit(HSPI_INSTANCE, &data_buffer, 1, 1);
 800bdfa:	1df9      	adds	r1, r7, #7
 800bdfc:	2301      	movs	r3, #1
 800bdfe:	2201      	movs	r2, #1
 800be00:	4803      	ldr	r0, [pc, #12]	; (800be10 <_SPI_SendByte+0x28>)
 800be02:	f7fd fa9f 	bl	8009344 <HAL_SPI_Transmit>
   	for(int d = 0; d < post_frame_delay ; d++)
   		asm("nop");

#endif

}
 800be06:	bf00      	nop
 800be08:	3708      	adds	r7, #8
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}
 800be0e:	bf00      	nop
 800be10:	20001600 	.word	0x20001600

0800be14 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	60f8      	str	r0, [r7, #12]
 800be1c:	60b9      	str	r1, [r7, #8]
 800be1e:	4611      	mov	r1, r2
 800be20:	461a      	mov	r2, r3
 800be22:	460b      	mov	r3, r1
 800be24:	71fb      	strb	r3, [r7, #7]
 800be26:	4613      	mov	r3, r2
 800be28:	71bb      	strb	r3, [r7, #6]

#ifdef USE_HAL_SPI
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)data_buffer, buffer_size, 2 );
 800be2a:	68bb      	ldr	r3, [r7, #8]
 800be2c:	b29a      	uxth	r2, r3
 800be2e:	2302      	movs	r3, #2
 800be30:	68f9      	ldr	r1, [r7, #12]
 800be32:	4803      	ldr	r0, [pc, #12]	; (800be40 <_SPI_SendByteMultiByte+0x2c>)
 800be34:	f7fd fa86 	bl	8009344 <HAL_SPI_Transmit>
   	for(int d = 0; d < post_frame_delay ; d++)
   		asm("nop");

#endif

}
 800be38:	bf00      	nop
 800be3a:	3710      	adds	r7, #16
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}
 800be40:	20001600 	.word	0x20001600

0800be44 <__errno>:
 800be44:	4b01      	ldr	r3, [pc, #4]	; (800be4c <__errno+0x8>)
 800be46:	6818      	ldr	r0, [r3, #0]
 800be48:	4770      	bx	lr
 800be4a:	bf00      	nop
 800be4c:	20001214 	.word	0x20001214

0800be50 <__libc_init_array>:
 800be50:	b570      	push	{r4, r5, r6, lr}
 800be52:	4e0d      	ldr	r6, [pc, #52]	; (800be88 <__libc_init_array+0x38>)
 800be54:	4c0d      	ldr	r4, [pc, #52]	; (800be8c <__libc_init_array+0x3c>)
 800be56:	1ba4      	subs	r4, r4, r6
 800be58:	10a4      	asrs	r4, r4, #2
 800be5a:	2500      	movs	r5, #0
 800be5c:	42a5      	cmp	r5, r4
 800be5e:	d109      	bne.n	800be74 <__libc_init_array+0x24>
 800be60:	4e0b      	ldr	r6, [pc, #44]	; (800be90 <__libc_init_array+0x40>)
 800be62:	4c0c      	ldr	r4, [pc, #48]	; (800be94 <__libc_init_array+0x44>)
 800be64:	f002 fc30 	bl	800e6c8 <_init>
 800be68:	1ba4      	subs	r4, r4, r6
 800be6a:	10a4      	asrs	r4, r4, #2
 800be6c:	2500      	movs	r5, #0
 800be6e:	42a5      	cmp	r5, r4
 800be70:	d105      	bne.n	800be7e <__libc_init_array+0x2e>
 800be72:	bd70      	pop	{r4, r5, r6, pc}
 800be74:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800be78:	4798      	blx	r3
 800be7a:	3501      	adds	r5, #1
 800be7c:	e7ee      	b.n	800be5c <__libc_init_array+0xc>
 800be7e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800be82:	4798      	blx	r3
 800be84:	3501      	adds	r5, #1
 800be86:	e7f2      	b.n	800be6e <__libc_init_array+0x1e>
 800be88:	0800f070 	.word	0x0800f070
 800be8c:	0800f070 	.word	0x0800f070
 800be90:	0800f070 	.word	0x0800f070
 800be94:	0800f074 	.word	0x0800f074

0800be98 <memset>:
 800be98:	4402      	add	r2, r0
 800be9a:	4603      	mov	r3, r0
 800be9c:	4293      	cmp	r3, r2
 800be9e:	d100      	bne.n	800bea2 <memset+0xa>
 800bea0:	4770      	bx	lr
 800bea2:	f803 1b01 	strb.w	r1, [r3], #1
 800bea6:	e7f9      	b.n	800be9c <memset+0x4>

0800bea8 <__cvt>:
 800bea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800beac:	ec55 4b10 	vmov	r4, r5, d0
 800beb0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800beb2:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800beb6:	2d00      	cmp	r5, #0
 800beb8:	460e      	mov	r6, r1
 800beba:	4691      	mov	r9, r2
 800bebc:	4619      	mov	r1, r3
 800bebe:	bfb8      	it	lt
 800bec0:	4622      	movlt	r2, r4
 800bec2:	462b      	mov	r3, r5
 800bec4:	f027 0720 	bic.w	r7, r7, #32
 800bec8:	bfbb      	ittet	lt
 800beca:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800bece:	461d      	movlt	r5, r3
 800bed0:	2300      	movge	r3, #0
 800bed2:	232d      	movlt	r3, #45	; 0x2d
 800bed4:	bfb8      	it	lt
 800bed6:	4614      	movlt	r4, r2
 800bed8:	2f46      	cmp	r7, #70	; 0x46
 800beda:	700b      	strb	r3, [r1, #0]
 800bedc:	d004      	beq.n	800bee8 <__cvt+0x40>
 800bede:	2f45      	cmp	r7, #69	; 0x45
 800bee0:	d100      	bne.n	800bee4 <__cvt+0x3c>
 800bee2:	3601      	adds	r6, #1
 800bee4:	2102      	movs	r1, #2
 800bee6:	e000      	b.n	800beea <__cvt+0x42>
 800bee8:	2103      	movs	r1, #3
 800beea:	ab03      	add	r3, sp, #12
 800beec:	9301      	str	r3, [sp, #4]
 800beee:	ab02      	add	r3, sp, #8
 800bef0:	9300      	str	r3, [sp, #0]
 800bef2:	4632      	mov	r2, r6
 800bef4:	4653      	mov	r3, sl
 800bef6:	ec45 4b10 	vmov	d0, r4, r5
 800befa:	f000 fe25 	bl	800cb48 <_dtoa_r>
 800befe:	2f47      	cmp	r7, #71	; 0x47
 800bf00:	4680      	mov	r8, r0
 800bf02:	d102      	bne.n	800bf0a <__cvt+0x62>
 800bf04:	f019 0f01 	tst.w	r9, #1
 800bf08:	d026      	beq.n	800bf58 <__cvt+0xb0>
 800bf0a:	2f46      	cmp	r7, #70	; 0x46
 800bf0c:	eb08 0906 	add.w	r9, r8, r6
 800bf10:	d111      	bne.n	800bf36 <__cvt+0x8e>
 800bf12:	f898 3000 	ldrb.w	r3, [r8]
 800bf16:	2b30      	cmp	r3, #48	; 0x30
 800bf18:	d10a      	bne.n	800bf30 <__cvt+0x88>
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	4620      	mov	r0, r4
 800bf20:	4629      	mov	r1, r5
 800bf22:	f7f4 fdf9 	bl	8000b18 <__aeabi_dcmpeq>
 800bf26:	b918      	cbnz	r0, 800bf30 <__cvt+0x88>
 800bf28:	f1c6 0601 	rsb	r6, r6, #1
 800bf2c:	f8ca 6000 	str.w	r6, [sl]
 800bf30:	f8da 3000 	ldr.w	r3, [sl]
 800bf34:	4499      	add	r9, r3
 800bf36:	2200      	movs	r2, #0
 800bf38:	2300      	movs	r3, #0
 800bf3a:	4620      	mov	r0, r4
 800bf3c:	4629      	mov	r1, r5
 800bf3e:	f7f4 fdeb 	bl	8000b18 <__aeabi_dcmpeq>
 800bf42:	b938      	cbnz	r0, 800bf54 <__cvt+0xac>
 800bf44:	2230      	movs	r2, #48	; 0x30
 800bf46:	9b03      	ldr	r3, [sp, #12]
 800bf48:	454b      	cmp	r3, r9
 800bf4a:	d205      	bcs.n	800bf58 <__cvt+0xb0>
 800bf4c:	1c59      	adds	r1, r3, #1
 800bf4e:	9103      	str	r1, [sp, #12]
 800bf50:	701a      	strb	r2, [r3, #0]
 800bf52:	e7f8      	b.n	800bf46 <__cvt+0x9e>
 800bf54:	f8cd 900c 	str.w	r9, [sp, #12]
 800bf58:	9b03      	ldr	r3, [sp, #12]
 800bf5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf5c:	eba3 0308 	sub.w	r3, r3, r8
 800bf60:	4640      	mov	r0, r8
 800bf62:	6013      	str	r3, [r2, #0]
 800bf64:	b004      	add	sp, #16
 800bf66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800bf6a <__exponent>:
 800bf6a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf6c:	2900      	cmp	r1, #0
 800bf6e:	4604      	mov	r4, r0
 800bf70:	bfba      	itte	lt
 800bf72:	4249      	neglt	r1, r1
 800bf74:	232d      	movlt	r3, #45	; 0x2d
 800bf76:	232b      	movge	r3, #43	; 0x2b
 800bf78:	2909      	cmp	r1, #9
 800bf7a:	f804 2b02 	strb.w	r2, [r4], #2
 800bf7e:	7043      	strb	r3, [r0, #1]
 800bf80:	dd20      	ble.n	800bfc4 <__exponent+0x5a>
 800bf82:	f10d 0307 	add.w	r3, sp, #7
 800bf86:	461f      	mov	r7, r3
 800bf88:	260a      	movs	r6, #10
 800bf8a:	fb91 f5f6 	sdiv	r5, r1, r6
 800bf8e:	fb06 1115 	mls	r1, r6, r5, r1
 800bf92:	3130      	adds	r1, #48	; 0x30
 800bf94:	2d09      	cmp	r5, #9
 800bf96:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bf9a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800bf9e:	4629      	mov	r1, r5
 800bfa0:	dc09      	bgt.n	800bfb6 <__exponent+0x4c>
 800bfa2:	3130      	adds	r1, #48	; 0x30
 800bfa4:	3b02      	subs	r3, #2
 800bfa6:	f802 1c01 	strb.w	r1, [r2, #-1]
 800bfaa:	42bb      	cmp	r3, r7
 800bfac:	4622      	mov	r2, r4
 800bfae:	d304      	bcc.n	800bfba <__exponent+0x50>
 800bfb0:	1a10      	subs	r0, r2, r0
 800bfb2:	b003      	add	sp, #12
 800bfb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfb6:	4613      	mov	r3, r2
 800bfb8:	e7e7      	b.n	800bf8a <__exponent+0x20>
 800bfba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bfbe:	f804 2b01 	strb.w	r2, [r4], #1
 800bfc2:	e7f2      	b.n	800bfaa <__exponent+0x40>
 800bfc4:	2330      	movs	r3, #48	; 0x30
 800bfc6:	4419      	add	r1, r3
 800bfc8:	7083      	strb	r3, [r0, #2]
 800bfca:	1d02      	adds	r2, r0, #4
 800bfcc:	70c1      	strb	r1, [r0, #3]
 800bfce:	e7ef      	b.n	800bfb0 <__exponent+0x46>

0800bfd0 <_printf_float>:
 800bfd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd4:	b08d      	sub	sp, #52	; 0x34
 800bfd6:	460c      	mov	r4, r1
 800bfd8:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800bfdc:	4616      	mov	r6, r2
 800bfde:	461f      	mov	r7, r3
 800bfe0:	4605      	mov	r5, r0
 800bfe2:	f001 fce3 	bl	800d9ac <_localeconv_r>
 800bfe6:	6803      	ldr	r3, [r0, #0]
 800bfe8:	9304      	str	r3, [sp, #16]
 800bfea:	4618      	mov	r0, r3
 800bfec:	f7f4 f918 	bl	8000220 <strlen>
 800bff0:	2300      	movs	r3, #0
 800bff2:	930a      	str	r3, [sp, #40]	; 0x28
 800bff4:	f8d8 3000 	ldr.w	r3, [r8]
 800bff8:	9005      	str	r0, [sp, #20]
 800bffa:	3307      	adds	r3, #7
 800bffc:	f023 0307 	bic.w	r3, r3, #7
 800c000:	f103 0208 	add.w	r2, r3, #8
 800c004:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c008:	f8d4 b000 	ldr.w	fp, [r4]
 800c00c:	f8c8 2000 	str.w	r2, [r8]
 800c010:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c014:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c018:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c01c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c020:	9307      	str	r3, [sp, #28]
 800c022:	f8cd 8018 	str.w	r8, [sp, #24]
 800c026:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c02a:	4ba7      	ldr	r3, [pc, #668]	; (800c2c8 <_printf_float+0x2f8>)
 800c02c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c030:	f7f4 fda4 	bl	8000b7c <__aeabi_dcmpun>
 800c034:	bb70      	cbnz	r0, 800c094 <_printf_float+0xc4>
 800c036:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c03a:	4ba3      	ldr	r3, [pc, #652]	; (800c2c8 <_printf_float+0x2f8>)
 800c03c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c040:	f7f4 fd7e 	bl	8000b40 <__aeabi_dcmple>
 800c044:	bb30      	cbnz	r0, 800c094 <_printf_float+0xc4>
 800c046:	2200      	movs	r2, #0
 800c048:	2300      	movs	r3, #0
 800c04a:	4640      	mov	r0, r8
 800c04c:	4649      	mov	r1, r9
 800c04e:	f7f4 fd6d 	bl	8000b2c <__aeabi_dcmplt>
 800c052:	b110      	cbz	r0, 800c05a <_printf_float+0x8a>
 800c054:	232d      	movs	r3, #45	; 0x2d
 800c056:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c05a:	4a9c      	ldr	r2, [pc, #624]	; (800c2cc <_printf_float+0x2fc>)
 800c05c:	4b9c      	ldr	r3, [pc, #624]	; (800c2d0 <_printf_float+0x300>)
 800c05e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c062:	bf8c      	ite	hi
 800c064:	4690      	movhi	r8, r2
 800c066:	4698      	movls	r8, r3
 800c068:	2303      	movs	r3, #3
 800c06a:	f02b 0204 	bic.w	r2, fp, #4
 800c06e:	6123      	str	r3, [r4, #16]
 800c070:	6022      	str	r2, [r4, #0]
 800c072:	f04f 0900 	mov.w	r9, #0
 800c076:	9700      	str	r7, [sp, #0]
 800c078:	4633      	mov	r3, r6
 800c07a:	aa0b      	add	r2, sp, #44	; 0x2c
 800c07c:	4621      	mov	r1, r4
 800c07e:	4628      	mov	r0, r5
 800c080:	f000 f9e6 	bl	800c450 <_printf_common>
 800c084:	3001      	adds	r0, #1
 800c086:	f040 808d 	bne.w	800c1a4 <_printf_float+0x1d4>
 800c08a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c08e:	b00d      	add	sp, #52	; 0x34
 800c090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c094:	4642      	mov	r2, r8
 800c096:	464b      	mov	r3, r9
 800c098:	4640      	mov	r0, r8
 800c09a:	4649      	mov	r1, r9
 800c09c:	f7f4 fd6e 	bl	8000b7c <__aeabi_dcmpun>
 800c0a0:	b110      	cbz	r0, 800c0a8 <_printf_float+0xd8>
 800c0a2:	4a8c      	ldr	r2, [pc, #560]	; (800c2d4 <_printf_float+0x304>)
 800c0a4:	4b8c      	ldr	r3, [pc, #560]	; (800c2d8 <_printf_float+0x308>)
 800c0a6:	e7da      	b.n	800c05e <_printf_float+0x8e>
 800c0a8:	6861      	ldr	r1, [r4, #4]
 800c0aa:	1c4b      	adds	r3, r1, #1
 800c0ac:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800c0b0:	a80a      	add	r0, sp, #40	; 0x28
 800c0b2:	d13e      	bne.n	800c132 <_printf_float+0x162>
 800c0b4:	2306      	movs	r3, #6
 800c0b6:	6063      	str	r3, [r4, #4]
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c0be:	ab09      	add	r3, sp, #36	; 0x24
 800c0c0:	9300      	str	r3, [sp, #0]
 800c0c2:	ec49 8b10 	vmov	d0, r8, r9
 800c0c6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c0ca:	6022      	str	r2, [r4, #0]
 800c0cc:	f8cd a004 	str.w	sl, [sp, #4]
 800c0d0:	6861      	ldr	r1, [r4, #4]
 800c0d2:	4628      	mov	r0, r5
 800c0d4:	f7ff fee8 	bl	800bea8 <__cvt>
 800c0d8:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c0dc:	2b47      	cmp	r3, #71	; 0x47
 800c0de:	4680      	mov	r8, r0
 800c0e0:	d109      	bne.n	800c0f6 <_printf_float+0x126>
 800c0e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0e4:	1cd8      	adds	r0, r3, #3
 800c0e6:	db02      	blt.n	800c0ee <_printf_float+0x11e>
 800c0e8:	6862      	ldr	r2, [r4, #4]
 800c0ea:	4293      	cmp	r3, r2
 800c0ec:	dd47      	ble.n	800c17e <_printf_float+0x1ae>
 800c0ee:	f1aa 0a02 	sub.w	sl, sl, #2
 800c0f2:	fa5f fa8a 	uxtb.w	sl, sl
 800c0f6:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c0fa:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c0fc:	d824      	bhi.n	800c148 <_printf_float+0x178>
 800c0fe:	3901      	subs	r1, #1
 800c100:	4652      	mov	r2, sl
 800c102:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c106:	9109      	str	r1, [sp, #36]	; 0x24
 800c108:	f7ff ff2f 	bl	800bf6a <__exponent>
 800c10c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c10e:	1813      	adds	r3, r2, r0
 800c110:	2a01      	cmp	r2, #1
 800c112:	4681      	mov	r9, r0
 800c114:	6123      	str	r3, [r4, #16]
 800c116:	dc02      	bgt.n	800c11e <_printf_float+0x14e>
 800c118:	6822      	ldr	r2, [r4, #0]
 800c11a:	07d1      	lsls	r1, r2, #31
 800c11c:	d501      	bpl.n	800c122 <_printf_float+0x152>
 800c11e:	3301      	adds	r3, #1
 800c120:	6123      	str	r3, [r4, #16]
 800c122:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c126:	2b00      	cmp	r3, #0
 800c128:	d0a5      	beq.n	800c076 <_printf_float+0xa6>
 800c12a:	232d      	movs	r3, #45	; 0x2d
 800c12c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c130:	e7a1      	b.n	800c076 <_printf_float+0xa6>
 800c132:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c136:	f000 8177 	beq.w	800c428 <_printf_float+0x458>
 800c13a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c13e:	d1bb      	bne.n	800c0b8 <_printf_float+0xe8>
 800c140:	2900      	cmp	r1, #0
 800c142:	d1b9      	bne.n	800c0b8 <_printf_float+0xe8>
 800c144:	2301      	movs	r3, #1
 800c146:	e7b6      	b.n	800c0b6 <_printf_float+0xe6>
 800c148:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800c14c:	d119      	bne.n	800c182 <_printf_float+0x1b2>
 800c14e:	2900      	cmp	r1, #0
 800c150:	6863      	ldr	r3, [r4, #4]
 800c152:	dd0c      	ble.n	800c16e <_printf_float+0x19e>
 800c154:	6121      	str	r1, [r4, #16]
 800c156:	b913      	cbnz	r3, 800c15e <_printf_float+0x18e>
 800c158:	6822      	ldr	r2, [r4, #0]
 800c15a:	07d2      	lsls	r2, r2, #31
 800c15c:	d502      	bpl.n	800c164 <_printf_float+0x194>
 800c15e:	3301      	adds	r3, #1
 800c160:	440b      	add	r3, r1
 800c162:	6123      	str	r3, [r4, #16]
 800c164:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c166:	65a3      	str	r3, [r4, #88]	; 0x58
 800c168:	f04f 0900 	mov.w	r9, #0
 800c16c:	e7d9      	b.n	800c122 <_printf_float+0x152>
 800c16e:	b913      	cbnz	r3, 800c176 <_printf_float+0x1a6>
 800c170:	6822      	ldr	r2, [r4, #0]
 800c172:	07d0      	lsls	r0, r2, #31
 800c174:	d501      	bpl.n	800c17a <_printf_float+0x1aa>
 800c176:	3302      	adds	r3, #2
 800c178:	e7f3      	b.n	800c162 <_printf_float+0x192>
 800c17a:	2301      	movs	r3, #1
 800c17c:	e7f1      	b.n	800c162 <_printf_float+0x192>
 800c17e:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c182:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c186:	4293      	cmp	r3, r2
 800c188:	db05      	blt.n	800c196 <_printf_float+0x1c6>
 800c18a:	6822      	ldr	r2, [r4, #0]
 800c18c:	6123      	str	r3, [r4, #16]
 800c18e:	07d1      	lsls	r1, r2, #31
 800c190:	d5e8      	bpl.n	800c164 <_printf_float+0x194>
 800c192:	3301      	adds	r3, #1
 800c194:	e7e5      	b.n	800c162 <_printf_float+0x192>
 800c196:	2b00      	cmp	r3, #0
 800c198:	bfd4      	ite	le
 800c19a:	f1c3 0302 	rsble	r3, r3, #2
 800c19e:	2301      	movgt	r3, #1
 800c1a0:	4413      	add	r3, r2
 800c1a2:	e7de      	b.n	800c162 <_printf_float+0x192>
 800c1a4:	6823      	ldr	r3, [r4, #0]
 800c1a6:	055a      	lsls	r2, r3, #21
 800c1a8:	d407      	bmi.n	800c1ba <_printf_float+0x1ea>
 800c1aa:	6923      	ldr	r3, [r4, #16]
 800c1ac:	4642      	mov	r2, r8
 800c1ae:	4631      	mov	r1, r6
 800c1b0:	4628      	mov	r0, r5
 800c1b2:	47b8      	blx	r7
 800c1b4:	3001      	adds	r0, #1
 800c1b6:	d12b      	bne.n	800c210 <_printf_float+0x240>
 800c1b8:	e767      	b.n	800c08a <_printf_float+0xba>
 800c1ba:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c1be:	f240 80dc 	bls.w	800c37a <_printf_float+0x3aa>
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c1ca:	f7f4 fca5 	bl	8000b18 <__aeabi_dcmpeq>
 800c1ce:	2800      	cmp	r0, #0
 800c1d0:	d033      	beq.n	800c23a <_printf_float+0x26a>
 800c1d2:	2301      	movs	r3, #1
 800c1d4:	4a41      	ldr	r2, [pc, #260]	; (800c2dc <_printf_float+0x30c>)
 800c1d6:	4631      	mov	r1, r6
 800c1d8:	4628      	mov	r0, r5
 800c1da:	47b8      	blx	r7
 800c1dc:	3001      	adds	r0, #1
 800c1de:	f43f af54 	beq.w	800c08a <_printf_float+0xba>
 800c1e2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	db02      	blt.n	800c1f0 <_printf_float+0x220>
 800c1ea:	6823      	ldr	r3, [r4, #0]
 800c1ec:	07d8      	lsls	r0, r3, #31
 800c1ee:	d50f      	bpl.n	800c210 <_printf_float+0x240>
 800c1f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1f4:	4631      	mov	r1, r6
 800c1f6:	4628      	mov	r0, r5
 800c1f8:	47b8      	blx	r7
 800c1fa:	3001      	adds	r0, #1
 800c1fc:	f43f af45 	beq.w	800c08a <_printf_float+0xba>
 800c200:	f04f 0800 	mov.w	r8, #0
 800c204:	f104 091a 	add.w	r9, r4, #26
 800c208:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c20a:	3b01      	subs	r3, #1
 800c20c:	4543      	cmp	r3, r8
 800c20e:	dc09      	bgt.n	800c224 <_printf_float+0x254>
 800c210:	6823      	ldr	r3, [r4, #0]
 800c212:	079b      	lsls	r3, r3, #30
 800c214:	f100 8103 	bmi.w	800c41e <_printf_float+0x44e>
 800c218:	68e0      	ldr	r0, [r4, #12]
 800c21a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c21c:	4298      	cmp	r0, r3
 800c21e:	bfb8      	it	lt
 800c220:	4618      	movlt	r0, r3
 800c222:	e734      	b.n	800c08e <_printf_float+0xbe>
 800c224:	2301      	movs	r3, #1
 800c226:	464a      	mov	r2, r9
 800c228:	4631      	mov	r1, r6
 800c22a:	4628      	mov	r0, r5
 800c22c:	47b8      	blx	r7
 800c22e:	3001      	adds	r0, #1
 800c230:	f43f af2b 	beq.w	800c08a <_printf_float+0xba>
 800c234:	f108 0801 	add.w	r8, r8, #1
 800c238:	e7e6      	b.n	800c208 <_printf_float+0x238>
 800c23a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	dc2b      	bgt.n	800c298 <_printf_float+0x2c8>
 800c240:	2301      	movs	r3, #1
 800c242:	4a26      	ldr	r2, [pc, #152]	; (800c2dc <_printf_float+0x30c>)
 800c244:	4631      	mov	r1, r6
 800c246:	4628      	mov	r0, r5
 800c248:	47b8      	blx	r7
 800c24a:	3001      	adds	r0, #1
 800c24c:	f43f af1d 	beq.w	800c08a <_printf_float+0xba>
 800c250:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c252:	b923      	cbnz	r3, 800c25e <_printf_float+0x28e>
 800c254:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c256:	b913      	cbnz	r3, 800c25e <_printf_float+0x28e>
 800c258:	6823      	ldr	r3, [r4, #0]
 800c25a:	07d9      	lsls	r1, r3, #31
 800c25c:	d5d8      	bpl.n	800c210 <_printf_float+0x240>
 800c25e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c262:	4631      	mov	r1, r6
 800c264:	4628      	mov	r0, r5
 800c266:	47b8      	blx	r7
 800c268:	3001      	adds	r0, #1
 800c26a:	f43f af0e 	beq.w	800c08a <_printf_float+0xba>
 800c26e:	f04f 0900 	mov.w	r9, #0
 800c272:	f104 0a1a 	add.w	sl, r4, #26
 800c276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c278:	425b      	negs	r3, r3
 800c27a:	454b      	cmp	r3, r9
 800c27c:	dc01      	bgt.n	800c282 <_printf_float+0x2b2>
 800c27e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c280:	e794      	b.n	800c1ac <_printf_float+0x1dc>
 800c282:	2301      	movs	r3, #1
 800c284:	4652      	mov	r2, sl
 800c286:	4631      	mov	r1, r6
 800c288:	4628      	mov	r0, r5
 800c28a:	47b8      	blx	r7
 800c28c:	3001      	adds	r0, #1
 800c28e:	f43f aefc 	beq.w	800c08a <_printf_float+0xba>
 800c292:	f109 0901 	add.w	r9, r9, #1
 800c296:	e7ee      	b.n	800c276 <_printf_float+0x2a6>
 800c298:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c29a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c29c:	429a      	cmp	r2, r3
 800c29e:	bfa8      	it	ge
 800c2a0:	461a      	movge	r2, r3
 800c2a2:	2a00      	cmp	r2, #0
 800c2a4:	4691      	mov	r9, r2
 800c2a6:	dd07      	ble.n	800c2b8 <_printf_float+0x2e8>
 800c2a8:	4613      	mov	r3, r2
 800c2aa:	4631      	mov	r1, r6
 800c2ac:	4642      	mov	r2, r8
 800c2ae:	4628      	mov	r0, r5
 800c2b0:	47b8      	blx	r7
 800c2b2:	3001      	adds	r0, #1
 800c2b4:	f43f aee9 	beq.w	800c08a <_printf_float+0xba>
 800c2b8:	f104 031a 	add.w	r3, r4, #26
 800c2bc:	f04f 0b00 	mov.w	fp, #0
 800c2c0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c2c4:	9306      	str	r3, [sp, #24]
 800c2c6:	e015      	b.n	800c2f4 <_printf_float+0x324>
 800c2c8:	7fefffff 	.word	0x7fefffff
 800c2cc:	0800edb8 	.word	0x0800edb8
 800c2d0:	0800edb4 	.word	0x0800edb4
 800c2d4:	0800edc0 	.word	0x0800edc0
 800c2d8:	0800edbc 	.word	0x0800edbc
 800c2dc:	0800edc4 	.word	0x0800edc4
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	9a06      	ldr	r2, [sp, #24]
 800c2e4:	4631      	mov	r1, r6
 800c2e6:	4628      	mov	r0, r5
 800c2e8:	47b8      	blx	r7
 800c2ea:	3001      	adds	r0, #1
 800c2ec:	f43f aecd 	beq.w	800c08a <_printf_float+0xba>
 800c2f0:	f10b 0b01 	add.w	fp, fp, #1
 800c2f4:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c2f8:	ebaa 0309 	sub.w	r3, sl, r9
 800c2fc:	455b      	cmp	r3, fp
 800c2fe:	dcef      	bgt.n	800c2e0 <_printf_float+0x310>
 800c300:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c304:	429a      	cmp	r2, r3
 800c306:	44d0      	add	r8, sl
 800c308:	db15      	blt.n	800c336 <_printf_float+0x366>
 800c30a:	6823      	ldr	r3, [r4, #0]
 800c30c:	07da      	lsls	r2, r3, #31
 800c30e:	d412      	bmi.n	800c336 <_printf_float+0x366>
 800c310:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c312:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c314:	eba3 020a 	sub.w	r2, r3, sl
 800c318:	eba3 0a01 	sub.w	sl, r3, r1
 800c31c:	4592      	cmp	sl, r2
 800c31e:	bfa8      	it	ge
 800c320:	4692      	movge	sl, r2
 800c322:	f1ba 0f00 	cmp.w	sl, #0
 800c326:	dc0e      	bgt.n	800c346 <_printf_float+0x376>
 800c328:	f04f 0800 	mov.w	r8, #0
 800c32c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c330:	f104 091a 	add.w	r9, r4, #26
 800c334:	e019      	b.n	800c36a <_printf_float+0x39a>
 800c336:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c33a:	4631      	mov	r1, r6
 800c33c:	4628      	mov	r0, r5
 800c33e:	47b8      	blx	r7
 800c340:	3001      	adds	r0, #1
 800c342:	d1e5      	bne.n	800c310 <_printf_float+0x340>
 800c344:	e6a1      	b.n	800c08a <_printf_float+0xba>
 800c346:	4653      	mov	r3, sl
 800c348:	4642      	mov	r2, r8
 800c34a:	4631      	mov	r1, r6
 800c34c:	4628      	mov	r0, r5
 800c34e:	47b8      	blx	r7
 800c350:	3001      	adds	r0, #1
 800c352:	d1e9      	bne.n	800c328 <_printf_float+0x358>
 800c354:	e699      	b.n	800c08a <_printf_float+0xba>
 800c356:	2301      	movs	r3, #1
 800c358:	464a      	mov	r2, r9
 800c35a:	4631      	mov	r1, r6
 800c35c:	4628      	mov	r0, r5
 800c35e:	47b8      	blx	r7
 800c360:	3001      	adds	r0, #1
 800c362:	f43f ae92 	beq.w	800c08a <_printf_float+0xba>
 800c366:	f108 0801 	add.w	r8, r8, #1
 800c36a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c36e:	1a9b      	subs	r3, r3, r2
 800c370:	eba3 030a 	sub.w	r3, r3, sl
 800c374:	4543      	cmp	r3, r8
 800c376:	dcee      	bgt.n	800c356 <_printf_float+0x386>
 800c378:	e74a      	b.n	800c210 <_printf_float+0x240>
 800c37a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c37c:	2a01      	cmp	r2, #1
 800c37e:	dc01      	bgt.n	800c384 <_printf_float+0x3b4>
 800c380:	07db      	lsls	r3, r3, #31
 800c382:	d53a      	bpl.n	800c3fa <_printf_float+0x42a>
 800c384:	2301      	movs	r3, #1
 800c386:	4642      	mov	r2, r8
 800c388:	4631      	mov	r1, r6
 800c38a:	4628      	mov	r0, r5
 800c38c:	47b8      	blx	r7
 800c38e:	3001      	adds	r0, #1
 800c390:	f43f ae7b 	beq.w	800c08a <_printf_float+0xba>
 800c394:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c398:	4631      	mov	r1, r6
 800c39a:	4628      	mov	r0, r5
 800c39c:	47b8      	blx	r7
 800c39e:	3001      	adds	r0, #1
 800c3a0:	f108 0801 	add.w	r8, r8, #1
 800c3a4:	f43f ae71 	beq.w	800c08a <_printf_float+0xba>
 800c3a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3aa:	2200      	movs	r2, #0
 800c3ac:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800c3b0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	f7f4 fbaf 	bl	8000b18 <__aeabi_dcmpeq>
 800c3ba:	b9c8      	cbnz	r0, 800c3f0 <_printf_float+0x420>
 800c3bc:	4653      	mov	r3, sl
 800c3be:	4642      	mov	r2, r8
 800c3c0:	4631      	mov	r1, r6
 800c3c2:	4628      	mov	r0, r5
 800c3c4:	47b8      	blx	r7
 800c3c6:	3001      	adds	r0, #1
 800c3c8:	d10e      	bne.n	800c3e8 <_printf_float+0x418>
 800c3ca:	e65e      	b.n	800c08a <_printf_float+0xba>
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	4652      	mov	r2, sl
 800c3d0:	4631      	mov	r1, r6
 800c3d2:	4628      	mov	r0, r5
 800c3d4:	47b8      	blx	r7
 800c3d6:	3001      	adds	r0, #1
 800c3d8:	f43f ae57 	beq.w	800c08a <_printf_float+0xba>
 800c3dc:	f108 0801 	add.w	r8, r8, #1
 800c3e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3e2:	3b01      	subs	r3, #1
 800c3e4:	4543      	cmp	r3, r8
 800c3e6:	dcf1      	bgt.n	800c3cc <_printf_float+0x3fc>
 800c3e8:	464b      	mov	r3, r9
 800c3ea:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c3ee:	e6de      	b.n	800c1ae <_printf_float+0x1de>
 800c3f0:	f04f 0800 	mov.w	r8, #0
 800c3f4:	f104 0a1a 	add.w	sl, r4, #26
 800c3f8:	e7f2      	b.n	800c3e0 <_printf_float+0x410>
 800c3fa:	2301      	movs	r3, #1
 800c3fc:	e7df      	b.n	800c3be <_printf_float+0x3ee>
 800c3fe:	2301      	movs	r3, #1
 800c400:	464a      	mov	r2, r9
 800c402:	4631      	mov	r1, r6
 800c404:	4628      	mov	r0, r5
 800c406:	47b8      	blx	r7
 800c408:	3001      	adds	r0, #1
 800c40a:	f43f ae3e 	beq.w	800c08a <_printf_float+0xba>
 800c40e:	f108 0801 	add.w	r8, r8, #1
 800c412:	68e3      	ldr	r3, [r4, #12]
 800c414:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c416:	1a9b      	subs	r3, r3, r2
 800c418:	4543      	cmp	r3, r8
 800c41a:	dcf0      	bgt.n	800c3fe <_printf_float+0x42e>
 800c41c:	e6fc      	b.n	800c218 <_printf_float+0x248>
 800c41e:	f04f 0800 	mov.w	r8, #0
 800c422:	f104 0919 	add.w	r9, r4, #25
 800c426:	e7f4      	b.n	800c412 <_printf_float+0x442>
 800c428:	2900      	cmp	r1, #0
 800c42a:	f43f ae8b 	beq.w	800c144 <_printf_float+0x174>
 800c42e:	2300      	movs	r3, #0
 800c430:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c434:	ab09      	add	r3, sp, #36	; 0x24
 800c436:	9300      	str	r3, [sp, #0]
 800c438:	ec49 8b10 	vmov	d0, r8, r9
 800c43c:	6022      	str	r2, [r4, #0]
 800c43e:	f8cd a004 	str.w	sl, [sp, #4]
 800c442:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c446:	4628      	mov	r0, r5
 800c448:	f7ff fd2e 	bl	800bea8 <__cvt>
 800c44c:	4680      	mov	r8, r0
 800c44e:	e648      	b.n	800c0e2 <_printf_float+0x112>

0800c450 <_printf_common>:
 800c450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c454:	4691      	mov	r9, r2
 800c456:	461f      	mov	r7, r3
 800c458:	688a      	ldr	r2, [r1, #8]
 800c45a:	690b      	ldr	r3, [r1, #16]
 800c45c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c460:	4293      	cmp	r3, r2
 800c462:	bfb8      	it	lt
 800c464:	4613      	movlt	r3, r2
 800c466:	f8c9 3000 	str.w	r3, [r9]
 800c46a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c46e:	4606      	mov	r6, r0
 800c470:	460c      	mov	r4, r1
 800c472:	b112      	cbz	r2, 800c47a <_printf_common+0x2a>
 800c474:	3301      	adds	r3, #1
 800c476:	f8c9 3000 	str.w	r3, [r9]
 800c47a:	6823      	ldr	r3, [r4, #0]
 800c47c:	0699      	lsls	r1, r3, #26
 800c47e:	bf42      	ittt	mi
 800c480:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c484:	3302      	addmi	r3, #2
 800c486:	f8c9 3000 	strmi.w	r3, [r9]
 800c48a:	6825      	ldr	r5, [r4, #0]
 800c48c:	f015 0506 	ands.w	r5, r5, #6
 800c490:	d107      	bne.n	800c4a2 <_printf_common+0x52>
 800c492:	f104 0a19 	add.w	sl, r4, #25
 800c496:	68e3      	ldr	r3, [r4, #12]
 800c498:	f8d9 2000 	ldr.w	r2, [r9]
 800c49c:	1a9b      	subs	r3, r3, r2
 800c49e:	42ab      	cmp	r3, r5
 800c4a0:	dc28      	bgt.n	800c4f4 <_printf_common+0xa4>
 800c4a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c4a6:	6822      	ldr	r2, [r4, #0]
 800c4a8:	3300      	adds	r3, #0
 800c4aa:	bf18      	it	ne
 800c4ac:	2301      	movne	r3, #1
 800c4ae:	0692      	lsls	r2, r2, #26
 800c4b0:	d42d      	bmi.n	800c50e <_printf_common+0xbe>
 800c4b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c4b6:	4639      	mov	r1, r7
 800c4b8:	4630      	mov	r0, r6
 800c4ba:	47c0      	blx	r8
 800c4bc:	3001      	adds	r0, #1
 800c4be:	d020      	beq.n	800c502 <_printf_common+0xb2>
 800c4c0:	6823      	ldr	r3, [r4, #0]
 800c4c2:	68e5      	ldr	r5, [r4, #12]
 800c4c4:	f8d9 2000 	ldr.w	r2, [r9]
 800c4c8:	f003 0306 	and.w	r3, r3, #6
 800c4cc:	2b04      	cmp	r3, #4
 800c4ce:	bf08      	it	eq
 800c4d0:	1aad      	subeq	r5, r5, r2
 800c4d2:	68a3      	ldr	r3, [r4, #8]
 800c4d4:	6922      	ldr	r2, [r4, #16]
 800c4d6:	bf0c      	ite	eq
 800c4d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c4dc:	2500      	movne	r5, #0
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	bfc4      	itt	gt
 800c4e2:	1a9b      	subgt	r3, r3, r2
 800c4e4:	18ed      	addgt	r5, r5, r3
 800c4e6:	f04f 0900 	mov.w	r9, #0
 800c4ea:	341a      	adds	r4, #26
 800c4ec:	454d      	cmp	r5, r9
 800c4ee:	d11a      	bne.n	800c526 <_printf_common+0xd6>
 800c4f0:	2000      	movs	r0, #0
 800c4f2:	e008      	b.n	800c506 <_printf_common+0xb6>
 800c4f4:	2301      	movs	r3, #1
 800c4f6:	4652      	mov	r2, sl
 800c4f8:	4639      	mov	r1, r7
 800c4fa:	4630      	mov	r0, r6
 800c4fc:	47c0      	blx	r8
 800c4fe:	3001      	adds	r0, #1
 800c500:	d103      	bne.n	800c50a <_printf_common+0xba>
 800c502:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c50a:	3501      	adds	r5, #1
 800c50c:	e7c3      	b.n	800c496 <_printf_common+0x46>
 800c50e:	18e1      	adds	r1, r4, r3
 800c510:	1c5a      	adds	r2, r3, #1
 800c512:	2030      	movs	r0, #48	; 0x30
 800c514:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c518:	4422      	add	r2, r4
 800c51a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c51e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c522:	3302      	adds	r3, #2
 800c524:	e7c5      	b.n	800c4b2 <_printf_common+0x62>
 800c526:	2301      	movs	r3, #1
 800c528:	4622      	mov	r2, r4
 800c52a:	4639      	mov	r1, r7
 800c52c:	4630      	mov	r0, r6
 800c52e:	47c0      	blx	r8
 800c530:	3001      	adds	r0, #1
 800c532:	d0e6      	beq.n	800c502 <_printf_common+0xb2>
 800c534:	f109 0901 	add.w	r9, r9, #1
 800c538:	e7d8      	b.n	800c4ec <_printf_common+0x9c>
	...

0800c53c <_printf_i>:
 800c53c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c540:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c544:	460c      	mov	r4, r1
 800c546:	7e09      	ldrb	r1, [r1, #24]
 800c548:	b085      	sub	sp, #20
 800c54a:	296e      	cmp	r1, #110	; 0x6e
 800c54c:	4617      	mov	r7, r2
 800c54e:	4606      	mov	r6, r0
 800c550:	4698      	mov	r8, r3
 800c552:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c554:	f000 80b3 	beq.w	800c6be <_printf_i+0x182>
 800c558:	d822      	bhi.n	800c5a0 <_printf_i+0x64>
 800c55a:	2963      	cmp	r1, #99	; 0x63
 800c55c:	d036      	beq.n	800c5cc <_printf_i+0x90>
 800c55e:	d80a      	bhi.n	800c576 <_printf_i+0x3a>
 800c560:	2900      	cmp	r1, #0
 800c562:	f000 80b9 	beq.w	800c6d8 <_printf_i+0x19c>
 800c566:	2958      	cmp	r1, #88	; 0x58
 800c568:	f000 8083 	beq.w	800c672 <_printf_i+0x136>
 800c56c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c570:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c574:	e032      	b.n	800c5dc <_printf_i+0xa0>
 800c576:	2964      	cmp	r1, #100	; 0x64
 800c578:	d001      	beq.n	800c57e <_printf_i+0x42>
 800c57a:	2969      	cmp	r1, #105	; 0x69
 800c57c:	d1f6      	bne.n	800c56c <_printf_i+0x30>
 800c57e:	6820      	ldr	r0, [r4, #0]
 800c580:	6813      	ldr	r3, [r2, #0]
 800c582:	0605      	lsls	r5, r0, #24
 800c584:	f103 0104 	add.w	r1, r3, #4
 800c588:	d52a      	bpl.n	800c5e0 <_printf_i+0xa4>
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	6011      	str	r1, [r2, #0]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	da03      	bge.n	800c59a <_printf_i+0x5e>
 800c592:	222d      	movs	r2, #45	; 0x2d
 800c594:	425b      	negs	r3, r3
 800c596:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c59a:	486f      	ldr	r0, [pc, #444]	; (800c758 <_printf_i+0x21c>)
 800c59c:	220a      	movs	r2, #10
 800c59e:	e039      	b.n	800c614 <_printf_i+0xd8>
 800c5a0:	2973      	cmp	r1, #115	; 0x73
 800c5a2:	f000 809d 	beq.w	800c6e0 <_printf_i+0x1a4>
 800c5a6:	d808      	bhi.n	800c5ba <_printf_i+0x7e>
 800c5a8:	296f      	cmp	r1, #111	; 0x6f
 800c5aa:	d020      	beq.n	800c5ee <_printf_i+0xb2>
 800c5ac:	2970      	cmp	r1, #112	; 0x70
 800c5ae:	d1dd      	bne.n	800c56c <_printf_i+0x30>
 800c5b0:	6823      	ldr	r3, [r4, #0]
 800c5b2:	f043 0320 	orr.w	r3, r3, #32
 800c5b6:	6023      	str	r3, [r4, #0]
 800c5b8:	e003      	b.n	800c5c2 <_printf_i+0x86>
 800c5ba:	2975      	cmp	r1, #117	; 0x75
 800c5bc:	d017      	beq.n	800c5ee <_printf_i+0xb2>
 800c5be:	2978      	cmp	r1, #120	; 0x78
 800c5c0:	d1d4      	bne.n	800c56c <_printf_i+0x30>
 800c5c2:	2378      	movs	r3, #120	; 0x78
 800c5c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c5c8:	4864      	ldr	r0, [pc, #400]	; (800c75c <_printf_i+0x220>)
 800c5ca:	e055      	b.n	800c678 <_printf_i+0x13c>
 800c5cc:	6813      	ldr	r3, [r2, #0]
 800c5ce:	1d19      	adds	r1, r3, #4
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	6011      	str	r1, [r2, #0]
 800c5d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c5dc:	2301      	movs	r3, #1
 800c5de:	e08c      	b.n	800c6fa <_printf_i+0x1be>
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	6011      	str	r1, [r2, #0]
 800c5e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c5e8:	bf18      	it	ne
 800c5ea:	b21b      	sxthne	r3, r3
 800c5ec:	e7cf      	b.n	800c58e <_printf_i+0x52>
 800c5ee:	6813      	ldr	r3, [r2, #0]
 800c5f0:	6825      	ldr	r5, [r4, #0]
 800c5f2:	1d18      	adds	r0, r3, #4
 800c5f4:	6010      	str	r0, [r2, #0]
 800c5f6:	0628      	lsls	r0, r5, #24
 800c5f8:	d501      	bpl.n	800c5fe <_printf_i+0xc2>
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	e002      	b.n	800c604 <_printf_i+0xc8>
 800c5fe:	0668      	lsls	r0, r5, #25
 800c600:	d5fb      	bpl.n	800c5fa <_printf_i+0xbe>
 800c602:	881b      	ldrh	r3, [r3, #0]
 800c604:	4854      	ldr	r0, [pc, #336]	; (800c758 <_printf_i+0x21c>)
 800c606:	296f      	cmp	r1, #111	; 0x6f
 800c608:	bf14      	ite	ne
 800c60a:	220a      	movne	r2, #10
 800c60c:	2208      	moveq	r2, #8
 800c60e:	2100      	movs	r1, #0
 800c610:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c614:	6865      	ldr	r5, [r4, #4]
 800c616:	60a5      	str	r5, [r4, #8]
 800c618:	2d00      	cmp	r5, #0
 800c61a:	f2c0 8095 	blt.w	800c748 <_printf_i+0x20c>
 800c61e:	6821      	ldr	r1, [r4, #0]
 800c620:	f021 0104 	bic.w	r1, r1, #4
 800c624:	6021      	str	r1, [r4, #0]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d13d      	bne.n	800c6a6 <_printf_i+0x16a>
 800c62a:	2d00      	cmp	r5, #0
 800c62c:	f040 808e 	bne.w	800c74c <_printf_i+0x210>
 800c630:	4665      	mov	r5, ip
 800c632:	2a08      	cmp	r2, #8
 800c634:	d10b      	bne.n	800c64e <_printf_i+0x112>
 800c636:	6823      	ldr	r3, [r4, #0]
 800c638:	07db      	lsls	r3, r3, #31
 800c63a:	d508      	bpl.n	800c64e <_printf_i+0x112>
 800c63c:	6923      	ldr	r3, [r4, #16]
 800c63e:	6862      	ldr	r2, [r4, #4]
 800c640:	429a      	cmp	r2, r3
 800c642:	bfde      	ittt	le
 800c644:	2330      	movle	r3, #48	; 0x30
 800c646:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c64a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800c64e:	ebac 0305 	sub.w	r3, ip, r5
 800c652:	6123      	str	r3, [r4, #16]
 800c654:	f8cd 8000 	str.w	r8, [sp]
 800c658:	463b      	mov	r3, r7
 800c65a:	aa03      	add	r2, sp, #12
 800c65c:	4621      	mov	r1, r4
 800c65e:	4630      	mov	r0, r6
 800c660:	f7ff fef6 	bl	800c450 <_printf_common>
 800c664:	3001      	adds	r0, #1
 800c666:	d14d      	bne.n	800c704 <_printf_i+0x1c8>
 800c668:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c66c:	b005      	add	sp, #20
 800c66e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c672:	4839      	ldr	r0, [pc, #228]	; (800c758 <_printf_i+0x21c>)
 800c674:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c678:	6813      	ldr	r3, [r2, #0]
 800c67a:	6821      	ldr	r1, [r4, #0]
 800c67c:	1d1d      	adds	r5, r3, #4
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	6015      	str	r5, [r2, #0]
 800c682:	060a      	lsls	r2, r1, #24
 800c684:	d50b      	bpl.n	800c69e <_printf_i+0x162>
 800c686:	07ca      	lsls	r2, r1, #31
 800c688:	bf44      	itt	mi
 800c68a:	f041 0120 	orrmi.w	r1, r1, #32
 800c68e:	6021      	strmi	r1, [r4, #0]
 800c690:	b91b      	cbnz	r3, 800c69a <_printf_i+0x15e>
 800c692:	6822      	ldr	r2, [r4, #0]
 800c694:	f022 0220 	bic.w	r2, r2, #32
 800c698:	6022      	str	r2, [r4, #0]
 800c69a:	2210      	movs	r2, #16
 800c69c:	e7b7      	b.n	800c60e <_printf_i+0xd2>
 800c69e:	064d      	lsls	r5, r1, #25
 800c6a0:	bf48      	it	mi
 800c6a2:	b29b      	uxthmi	r3, r3
 800c6a4:	e7ef      	b.n	800c686 <_printf_i+0x14a>
 800c6a6:	4665      	mov	r5, ip
 800c6a8:	fbb3 f1f2 	udiv	r1, r3, r2
 800c6ac:	fb02 3311 	mls	r3, r2, r1, r3
 800c6b0:	5cc3      	ldrb	r3, [r0, r3]
 800c6b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c6b6:	460b      	mov	r3, r1
 800c6b8:	2900      	cmp	r1, #0
 800c6ba:	d1f5      	bne.n	800c6a8 <_printf_i+0x16c>
 800c6bc:	e7b9      	b.n	800c632 <_printf_i+0xf6>
 800c6be:	6813      	ldr	r3, [r2, #0]
 800c6c0:	6825      	ldr	r5, [r4, #0]
 800c6c2:	6961      	ldr	r1, [r4, #20]
 800c6c4:	1d18      	adds	r0, r3, #4
 800c6c6:	6010      	str	r0, [r2, #0]
 800c6c8:	0628      	lsls	r0, r5, #24
 800c6ca:	681b      	ldr	r3, [r3, #0]
 800c6cc:	d501      	bpl.n	800c6d2 <_printf_i+0x196>
 800c6ce:	6019      	str	r1, [r3, #0]
 800c6d0:	e002      	b.n	800c6d8 <_printf_i+0x19c>
 800c6d2:	066a      	lsls	r2, r5, #25
 800c6d4:	d5fb      	bpl.n	800c6ce <_printf_i+0x192>
 800c6d6:	8019      	strh	r1, [r3, #0]
 800c6d8:	2300      	movs	r3, #0
 800c6da:	6123      	str	r3, [r4, #16]
 800c6dc:	4665      	mov	r5, ip
 800c6de:	e7b9      	b.n	800c654 <_printf_i+0x118>
 800c6e0:	6813      	ldr	r3, [r2, #0]
 800c6e2:	1d19      	adds	r1, r3, #4
 800c6e4:	6011      	str	r1, [r2, #0]
 800c6e6:	681d      	ldr	r5, [r3, #0]
 800c6e8:	6862      	ldr	r2, [r4, #4]
 800c6ea:	2100      	movs	r1, #0
 800c6ec:	4628      	mov	r0, r5
 800c6ee:	f7f3 fd9f 	bl	8000230 <memchr>
 800c6f2:	b108      	cbz	r0, 800c6f8 <_printf_i+0x1bc>
 800c6f4:	1b40      	subs	r0, r0, r5
 800c6f6:	6060      	str	r0, [r4, #4]
 800c6f8:	6863      	ldr	r3, [r4, #4]
 800c6fa:	6123      	str	r3, [r4, #16]
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c702:	e7a7      	b.n	800c654 <_printf_i+0x118>
 800c704:	6923      	ldr	r3, [r4, #16]
 800c706:	462a      	mov	r2, r5
 800c708:	4639      	mov	r1, r7
 800c70a:	4630      	mov	r0, r6
 800c70c:	47c0      	blx	r8
 800c70e:	3001      	adds	r0, #1
 800c710:	d0aa      	beq.n	800c668 <_printf_i+0x12c>
 800c712:	6823      	ldr	r3, [r4, #0]
 800c714:	079b      	lsls	r3, r3, #30
 800c716:	d413      	bmi.n	800c740 <_printf_i+0x204>
 800c718:	68e0      	ldr	r0, [r4, #12]
 800c71a:	9b03      	ldr	r3, [sp, #12]
 800c71c:	4298      	cmp	r0, r3
 800c71e:	bfb8      	it	lt
 800c720:	4618      	movlt	r0, r3
 800c722:	e7a3      	b.n	800c66c <_printf_i+0x130>
 800c724:	2301      	movs	r3, #1
 800c726:	464a      	mov	r2, r9
 800c728:	4639      	mov	r1, r7
 800c72a:	4630      	mov	r0, r6
 800c72c:	47c0      	blx	r8
 800c72e:	3001      	adds	r0, #1
 800c730:	d09a      	beq.n	800c668 <_printf_i+0x12c>
 800c732:	3501      	adds	r5, #1
 800c734:	68e3      	ldr	r3, [r4, #12]
 800c736:	9a03      	ldr	r2, [sp, #12]
 800c738:	1a9b      	subs	r3, r3, r2
 800c73a:	42ab      	cmp	r3, r5
 800c73c:	dcf2      	bgt.n	800c724 <_printf_i+0x1e8>
 800c73e:	e7eb      	b.n	800c718 <_printf_i+0x1dc>
 800c740:	2500      	movs	r5, #0
 800c742:	f104 0919 	add.w	r9, r4, #25
 800c746:	e7f5      	b.n	800c734 <_printf_i+0x1f8>
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d1ac      	bne.n	800c6a6 <_printf_i+0x16a>
 800c74c:	7803      	ldrb	r3, [r0, #0]
 800c74e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c752:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c756:	e76c      	b.n	800c632 <_printf_i+0xf6>
 800c758:	0800edc6 	.word	0x0800edc6
 800c75c:	0800edd7 	.word	0x0800edd7

0800c760 <_puts_r>:
 800c760:	b570      	push	{r4, r5, r6, lr}
 800c762:	460e      	mov	r6, r1
 800c764:	4605      	mov	r5, r0
 800c766:	b118      	cbz	r0, 800c770 <_puts_r+0x10>
 800c768:	6983      	ldr	r3, [r0, #24]
 800c76a:	b90b      	cbnz	r3, 800c770 <_puts_r+0x10>
 800c76c:	f001 f894 	bl	800d898 <__sinit>
 800c770:	69ab      	ldr	r3, [r5, #24]
 800c772:	68ac      	ldr	r4, [r5, #8]
 800c774:	b913      	cbnz	r3, 800c77c <_puts_r+0x1c>
 800c776:	4628      	mov	r0, r5
 800c778:	f001 f88e 	bl	800d898 <__sinit>
 800c77c:	4b23      	ldr	r3, [pc, #140]	; (800c80c <_puts_r+0xac>)
 800c77e:	429c      	cmp	r4, r3
 800c780:	d117      	bne.n	800c7b2 <_puts_r+0x52>
 800c782:	686c      	ldr	r4, [r5, #4]
 800c784:	89a3      	ldrh	r3, [r4, #12]
 800c786:	071b      	lsls	r3, r3, #28
 800c788:	d51d      	bpl.n	800c7c6 <_puts_r+0x66>
 800c78a:	6923      	ldr	r3, [r4, #16]
 800c78c:	b1db      	cbz	r3, 800c7c6 <_puts_r+0x66>
 800c78e:	3e01      	subs	r6, #1
 800c790:	68a3      	ldr	r3, [r4, #8]
 800c792:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800c796:	3b01      	subs	r3, #1
 800c798:	60a3      	str	r3, [r4, #8]
 800c79a:	b9e9      	cbnz	r1, 800c7d8 <_puts_r+0x78>
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	da2e      	bge.n	800c7fe <_puts_r+0x9e>
 800c7a0:	4622      	mov	r2, r4
 800c7a2:	210a      	movs	r1, #10
 800c7a4:	4628      	mov	r0, r5
 800c7a6:	f000 f883 	bl	800c8b0 <__swbuf_r>
 800c7aa:	3001      	adds	r0, #1
 800c7ac:	d011      	beq.n	800c7d2 <_puts_r+0x72>
 800c7ae:	200a      	movs	r0, #10
 800c7b0:	e011      	b.n	800c7d6 <_puts_r+0x76>
 800c7b2:	4b17      	ldr	r3, [pc, #92]	; (800c810 <_puts_r+0xb0>)
 800c7b4:	429c      	cmp	r4, r3
 800c7b6:	d101      	bne.n	800c7bc <_puts_r+0x5c>
 800c7b8:	68ac      	ldr	r4, [r5, #8]
 800c7ba:	e7e3      	b.n	800c784 <_puts_r+0x24>
 800c7bc:	4b15      	ldr	r3, [pc, #84]	; (800c814 <_puts_r+0xb4>)
 800c7be:	429c      	cmp	r4, r3
 800c7c0:	bf08      	it	eq
 800c7c2:	68ec      	ldreq	r4, [r5, #12]
 800c7c4:	e7de      	b.n	800c784 <_puts_r+0x24>
 800c7c6:	4621      	mov	r1, r4
 800c7c8:	4628      	mov	r0, r5
 800c7ca:	f000 f8c3 	bl	800c954 <__swsetup_r>
 800c7ce:	2800      	cmp	r0, #0
 800c7d0:	d0dd      	beq.n	800c78e <_puts_r+0x2e>
 800c7d2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c7d6:	bd70      	pop	{r4, r5, r6, pc}
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	da04      	bge.n	800c7e6 <_puts_r+0x86>
 800c7dc:	69a2      	ldr	r2, [r4, #24]
 800c7de:	429a      	cmp	r2, r3
 800c7e0:	dc06      	bgt.n	800c7f0 <_puts_r+0x90>
 800c7e2:	290a      	cmp	r1, #10
 800c7e4:	d004      	beq.n	800c7f0 <_puts_r+0x90>
 800c7e6:	6823      	ldr	r3, [r4, #0]
 800c7e8:	1c5a      	adds	r2, r3, #1
 800c7ea:	6022      	str	r2, [r4, #0]
 800c7ec:	7019      	strb	r1, [r3, #0]
 800c7ee:	e7cf      	b.n	800c790 <_puts_r+0x30>
 800c7f0:	4622      	mov	r2, r4
 800c7f2:	4628      	mov	r0, r5
 800c7f4:	f000 f85c 	bl	800c8b0 <__swbuf_r>
 800c7f8:	3001      	adds	r0, #1
 800c7fa:	d1c9      	bne.n	800c790 <_puts_r+0x30>
 800c7fc:	e7e9      	b.n	800c7d2 <_puts_r+0x72>
 800c7fe:	6823      	ldr	r3, [r4, #0]
 800c800:	200a      	movs	r0, #10
 800c802:	1c5a      	adds	r2, r3, #1
 800c804:	6022      	str	r2, [r4, #0]
 800c806:	7018      	strb	r0, [r3, #0]
 800c808:	e7e5      	b.n	800c7d6 <_puts_r+0x76>
 800c80a:	bf00      	nop
 800c80c:	0800ee18 	.word	0x0800ee18
 800c810:	0800ee38 	.word	0x0800ee38
 800c814:	0800edf8 	.word	0x0800edf8

0800c818 <puts>:
 800c818:	4b02      	ldr	r3, [pc, #8]	; (800c824 <puts+0xc>)
 800c81a:	4601      	mov	r1, r0
 800c81c:	6818      	ldr	r0, [r3, #0]
 800c81e:	f7ff bf9f 	b.w	800c760 <_puts_r>
 800c822:	bf00      	nop
 800c824:	20001214 	.word	0x20001214

0800c828 <sniprintf>:
 800c828:	b40c      	push	{r2, r3}
 800c82a:	b530      	push	{r4, r5, lr}
 800c82c:	4b17      	ldr	r3, [pc, #92]	; (800c88c <sniprintf+0x64>)
 800c82e:	1e0c      	subs	r4, r1, #0
 800c830:	b09d      	sub	sp, #116	; 0x74
 800c832:	681d      	ldr	r5, [r3, #0]
 800c834:	da08      	bge.n	800c848 <sniprintf+0x20>
 800c836:	238b      	movs	r3, #139	; 0x8b
 800c838:	602b      	str	r3, [r5, #0]
 800c83a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c83e:	b01d      	add	sp, #116	; 0x74
 800c840:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c844:	b002      	add	sp, #8
 800c846:	4770      	bx	lr
 800c848:	f44f 7302 	mov.w	r3, #520	; 0x208
 800c84c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c850:	bf14      	ite	ne
 800c852:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800c856:	4623      	moveq	r3, r4
 800c858:	9304      	str	r3, [sp, #16]
 800c85a:	9307      	str	r3, [sp, #28]
 800c85c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800c860:	9002      	str	r0, [sp, #8]
 800c862:	9006      	str	r0, [sp, #24]
 800c864:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c868:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800c86a:	ab21      	add	r3, sp, #132	; 0x84
 800c86c:	a902      	add	r1, sp, #8
 800c86e:	4628      	mov	r0, r5
 800c870:	9301      	str	r3, [sp, #4]
 800c872:	f001 fd0b 	bl	800e28c <_svfiprintf_r>
 800c876:	1c43      	adds	r3, r0, #1
 800c878:	bfbc      	itt	lt
 800c87a:	238b      	movlt	r3, #139	; 0x8b
 800c87c:	602b      	strlt	r3, [r5, #0]
 800c87e:	2c00      	cmp	r4, #0
 800c880:	d0dd      	beq.n	800c83e <sniprintf+0x16>
 800c882:	9b02      	ldr	r3, [sp, #8]
 800c884:	2200      	movs	r2, #0
 800c886:	701a      	strb	r2, [r3, #0]
 800c888:	e7d9      	b.n	800c83e <sniprintf+0x16>
 800c88a:	bf00      	nop
 800c88c:	20001214 	.word	0x20001214

0800c890 <strcat>:
 800c890:	b510      	push	{r4, lr}
 800c892:	4603      	mov	r3, r0
 800c894:	781a      	ldrb	r2, [r3, #0]
 800c896:	1c5c      	adds	r4, r3, #1
 800c898:	b93a      	cbnz	r2, 800c8aa <strcat+0x1a>
 800c89a:	3b01      	subs	r3, #1
 800c89c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8a0:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c8a4:	2a00      	cmp	r2, #0
 800c8a6:	d1f9      	bne.n	800c89c <strcat+0xc>
 800c8a8:	bd10      	pop	{r4, pc}
 800c8aa:	4623      	mov	r3, r4
 800c8ac:	e7f2      	b.n	800c894 <strcat+0x4>
	...

0800c8b0 <__swbuf_r>:
 800c8b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c8b2:	460e      	mov	r6, r1
 800c8b4:	4614      	mov	r4, r2
 800c8b6:	4605      	mov	r5, r0
 800c8b8:	b118      	cbz	r0, 800c8c2 <__swbuf_r+0x12>
 800c8ba:	6983      	ldr	r3, [r0, #24]
 800c8bc:	b90b      	cbnz	r3, 800c8c2 <__swbuf_r+0x12>
 800c8be:	f000 ffeb 	bl	800d898 <__sinit>
 800c8c2:	4b21      	ldr	r3, [pc, #132]	; (800c948 <__swbuf_r+0x98>)
 800c8c4:	429c      	cmp	r4, r3
 800c8c6:	d12a      	bne.n	800c91e <__swbuf_r+0x6e>
 800c8c8:	686c      	ldr	r4, [r5, #4]
 800c8ca:	69a3      	ldr	r3, [r4, #24]
 800c8cc:	60a3      	str	r3, [r4, #8]
 800c8ce:	89a3      	ldrh	r3, [r4, #12]
 800c8d0:	071a      	lsls	r2, r3, #28
 800c8d2:	d52e      	bpl.n	800c932 <__swbuf_r+0x82>
 800c8d4:	6923      	ldr	r3, [r4, #16]
 800c8d6:	b363      	cbz	r3, 800c932 <__swbuf_r+0x82>
 800c8d8:	6923      	ldr	r3, [r4, #16]
 800c8da:	6820      	ldr	r0, [r4, #0]
 800c8dc:	1ac0      	subs	r0, r0, r3
 800c8de:	6963      	ldr	r3, [r4, #20]
 800c8e0:	b2f6      	uxtb	r6, r6
 800c8e2:	4283      	cmp	r3, r0
 800c8e4:	4637      	mov	r7, r6
 800c8e6:	dc04      	bgt.n	800c8f2 <__swbuf_r+0x42>
 800c8e8:	4621      	mov	r1, r4
 800c8ea:	4628      	mov	r0, r5
 800c8ec:	f000 ff6a 	bl	800d7c4 <_fflush_r>
 800c8f0:	bb28      	cbnz	r0, 800c93e <__swbuf_r+0x8e>
 800c8f2:	68a3      	ldr	r3, [r4, #8]
 800c8f4:	3b01      	subs	r3, #1
 800c8f6:	60a3      	str	r3, [r4, #8]
 800c8f8:	6823      	ldr	r3, [r4, #0]
 800c8fa:	1c5a      	adds	r2, r3, #1
 800c8fc:	6022      	str	r2, [r4, #0]
 800c8fe:	701e      	strb	r6, [r3, #0]
 800c900:	6963      	ldr	r3, [r4, #20]
 800c902:	3001      	adds	r0, #1
 800c904:	4283      	cmp	r3, r0
 800c906:	d004      	beq.n	800c912 <__swbuf_r+0x62>
 800c908:	89a3      	ldrh	r3, [r4, #12]
 800c90a:	07db      	lsls	r3, r3, #31
 800c90c:	d519      	bpl.n	800c942 <__swbuf_r+0x92>
 800c90e:	2e0a      	cmp	r6, #10
 800c910:	d117      	bne.n	800c942 <__swbuf_r+0x92>
 800c912:	4621      	mov	r1, r4
 800c914:	4628      	mov	r0, r5
 800c916:	f000 ff55 	bl	800d7c4 <_fflush_r>
 800c91a:	b190      	cbz	r0, 800c942 <__swbuf_r+0x92>
 800c91c:	e00f      	b.n	800c93e <__swbuf_r+0x8e>
 800c91e:	4b0b      	ldr	r3, [pc, #44]	; (800c94c <__swbuf_r+0x9c>)
 800c920:	429c      	cmp	r4, r3
 800c922:	d101      	bne.n	800c928 <__swbuf_r+0x78>
 800c924:	68ac      	ldr	r4, [r5, #8]
 800c926:	e7d0      	b.n	800c8ca <__swbuf_r+0x1a>
 800c928:	4b09      	ldr	r3, [pc, #36]	; (800c950 <__swbuf_r+0xa0>)
 800c92a:	429c      	cmp	r4, r3
 800c92c:	bf08      	it	eq
 800c92e:	68ec      	ldreq	r4, [r5, #12]
 800c930:	e7cb      	b.n	800c8ca <__swbuf_r+0x1a>
 800c932:	4621      	mov	r1, r4
 800c934:	4628      	mov	r0, r5
 800c936:	f000 f80d 	bl	800c954 <__swsetup_r>
 800c93a:	2800      	cmp	r0, #0
 800c93c:	d0cc      	beq.n	800c8d8 <__swbuf_r+0x28>
 800c93e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800c942:	4638      	mov	r0, r7
 800c944:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c946:	bf00      	nop
 800c948:	0800ee18 	.word	0x0800ee18
 800c94c:	0800ee38 	.word	0x0800ee38
 800c950:	0800edf8 	.word	0x0800edf8

0800c954 <__swsetup_r>:
 800c954:	4b32      	ldr	r3, [pc, #200]	; (800ca20 <__swsetup_r+0xcc>)
 800c956:	b570      	push	{r4, r5, r6, lr}
 800c958:	681d      	ldr	r5, [r3, #0]
 800c95a:	4606      	mov	r6, r0
 800c95c:	460c      	mov	r4, r1
 800c95e:	b125      	cbz	r5, 800c96a <__swsetup_r+0x16>
 800c960:	69ab      	ldr	r3, [r5, #24]
 800c962:	b913      	cbnz	r3, 800c96a <__swsetup_r+0x16>
 800c964:	4628      	mov	r0, r5
 800c966:	f000 ff97 	bl	800d898 <__sinit>
 800c96a:	4b2e      	ldr	r3, [pc, #184]	; (800ca24 <__swsetup_r+0xd0>)
 800c96c:	429c      	cmp	r4, r3
 800c96e:	d10f      	bne.n	800c990 <__swsetup_r+0x3c>
 800c970:	686c      	ldr	r4, [r5, #4]
 800c972:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c976:	b29a      	uxth	r2, r3
 800c978:	0715      	lsls	r5, r2, #28
 800c97a:	d42c      	bmi.n	800c9d6 <__swsetup_r+0x82>
 800c97c:	06d0      	lsls	r0, r2, #27
 800c97e:	d411      	bmi.n	800c9a4 <__swsetup_r+0x50>
 800c980:	2209      	movs	r2, #9
 800c982:	6032      	str	r2, [r6, #0]
 800c984:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c988:	81a3      	strh	r3, [r4, #12]
 800c98a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c98e:	e03e      	b.n	800ca0e <__swsetup_r+0xba>
 800c990:	4b25      	ldr	r3, [pc, #148]	; (800ca28 <__swsetup_r+0xd4>)
 800c992:	429c      	cmp	r4, r3
 800c994:	d101      	bne.n	800c99a <__swsetup_r+0x46>
 800c996:	68ac      	ldr	r4, [r5, #8]
 800c998:	e7eb      	b.n	800c972 <__swsetup_r+0x1e>
 800c99a:	4b24      	ldr	r3, [pc, #144]	; (800ca2c <__swsetup_r+0xd8>)
 800c99c:	429c      	cmp	r4, r3
 800c99e:	bf08      	it	eq
 800c9a0:	68ec      	ldreq	r4, [r5, #12]
 800c9a2:	e7e6      	b.n	800c972 <__swsetup_r+0x1e>
 800c9a4:	0751      	lsls	r1, r2, #29
 800c9a6:	d512      	bpl.n	800c9ce <__swsetup_r+0x7a>
 800c9a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c9aa:	b141      	cbz	r1, 800c9be <__swsetup_r+0x6a>
 800c9ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c9b0:	4299      	cmp	r1, r3
 800c9b2:	d002      	beq.n	800c9ba <__swsetup_r+0x66>
 800c9b4:	4630      	mov	r0, r6
 800c9b6:	f001 fb67 	bl	800e088 <_free_r>
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	6363      	str	r3, [r4, #52]	; 0x34
 800c9be:	89a3      	ldrh	r3, [r4, #12]
 800c9c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c9c4:	81a3      	strh	r3, [r4, #12]
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	6063      	str	r3, [r4, #4]
 800c9ca:	6923      	ldr	r3, [r4, #16]
 800c9cc:	6023      	str	r3, [r4, #0]
 800c9ce:	89a3      	ldrh	r3, [r4, #12]
 800c9d0:	f043 0308 	orr.w	r3, r3, #8
 800c9d4:	81a3      	strh	r3, [r4, #12]
 800c9d6:	6923      	ldr	r3, [r4, #16]
 800c9d8:	b94b      	cbnz	r3, 800c9ee <__swsetup_r+0x9a>
 800c9da:	89a3      	ldrh	r3, [r4, #12]
 800c9dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c9e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9e4:	d003      	beq.n	800c9ee <__swsetup_r+0x9a>
 800c9e6:	4621      	mov	r1, r4
 800c9e8:	4630      	mov	r0, r6
 800c9ea:	f001 f811 	bl	800da10 <__smakebuf_r>
 800c9ee:	89a2      	ldrh	r2, [r4, #12]
 800c9f0:	f012 0301 	ands.w	r3, r2, #1
 800c9f4:	d00c      	beq.n	800ca10 <__swsetup_r+0xbc>
 800c9f6:	2300      	movs	r3, #0
 800c9f8:	60a3      	str	r3, [r4, #8]
 800c9fa:	6963      	ldr	r3, [r4, #20]
 800c9fc:	425b      	negs	r3, r3
 800c9fe:	61a3      	str	r3, [r4, #24]
 800ca00:	6923      	ldr	r3, [r4, #16]
 800ca02:	b953      	cbnz	r3, 800ca1a <__swsetup_r+0xc6>
 800ca04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca08:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800ca0c:	d1ba      	bne.n	800c984 <__swsetup_r+0x30>
 800ca0e:	bd70      	pop	{r4, r5, r6, pc}
 800ca10:	0792      	lsls	r2, r2, #30
 800ca12:	bf58      	it	pl
 800ca14:	6963      	ldrpl	r3, [r4, #20]
 800ca16:	60a3      	str	r3, [r4, #8]
 800ca18:	e7f2      	b.n	800ca00 <__swsetup_r+0xac>
 800ca1a:	2000      	movs	r0, #0
 800ca1c:	e7f7      	b.n	800ca0e <__swsetup_r+0xba>
 800ca1e:	bf00      	nop
 800ca20:	20001214 	.word	0x20001214
 800ca24:	0800ee18 	.word	0x0800ee18
 800ca28:	0800ee38 	.word	0x0800ee38
 800ca2c:	0800edf8 	.word	0x0800edf8

0800ca30 <quorem>:
 800ca30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca34:	6903      	ldr	r3, [r0, #16]
 800ca36:	690c      	ldr	r4, [r1, #16]
 800ca38:	42a3      	cmp	r3, r4
 800ca3a:	4680      	mov	r8, r0
 800ca3c:	f2c0 8082 	blt.w	800cb44 <quorem+0x114>
 800ca40:	3c01      	subs	r4, #1
 800ca42:	f101 0714 	add.w	r7, r1, #20
 800ca46:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800ca4a:	f100 0614 	add.w	r6, r0, #20
 800ca4e:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800ca52:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800ca56:	eb06 030c 	add.w	r3, r6, ip
 800ca5a:	3501      	adds	r5, #1
 800ca5c:	eb07 090c 	add.w	r9, r7, ip
 800ca60:	9301      	str	r3, [sp, #4]
 800ca62:	fbb0 f5f5 	udiv	r5, r0, r5
 800ca66:	b395      	cbz	r5, 800cace <quorem+0x9e>
 800ca68:	f04f 0a00 	mov.w	sl, #0
 800ca6c:	4638      	mov	r0, r7
 800ca6e:	46b6      	mov	lr, r6
 800ca70:	46d3      	mov	fp, sl
 800ca72:	f850 2b04 	ldr.w	r2, [r0], #4
 800ca76:	b293      	uxth	r3, r2
 800ca78:	fb05 a303 	mla	r3, r5, r3, sl
 800ca7c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca80:	b29b      	uxth	r3, r3
 800ca82:	ebab 0303 	sub.w	r3, fp, r3
 800ca86:	0c12      	lsrs	r2, r2, #16
 800ca88:	f8de b000 	ldr.w	fp, [lr]
 800ca8c:	fb05 a202 	mla	r2, r5, r2, sl
 800ca90:	fa13 f38b 	uxtah	r3, r3, fp
 800ca94:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800ca98:	fa1f fb82 	uxth.w	fp, r2
 800ca9c:	f8de 2000 	ldr.w	r2, [lr]
 800caa0:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800caa4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800caa8:	b29b      	uxth	r3, r3
 800caaa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800caae:	4581      	cmp	r9, r0
 800cab0:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800cab4:	f84e 3b04 	str.w	r3, [lr], #4
 800cab8:	d2db      	bcs.n	800ca72 <quorem+0x42>
 800caba:	f856 300c 	ldr.w	r3, [r6, ip]
 800cabe:	b933      	cbnz	r3, 800cace <quorem+0x9e>
 800cac0:	9b01      	ldr	r3, [sp, #4]
 800cac2:	3b04      	subs	r3, #4
 800cac4:	429e      	cmp	r6, r3
 800cac6:	461a      	mov	r2, r3
 800cac8:	d330      	bcc.n	800cb2c <quorem+0xfc>
 800caca:	f8c8 4010 	str.w	r4, [r8, #16]
 800cace:	4640      	mov	r0, r8
 800cad0:	f001 fa06 	bl	800dee0 <__mcmp>
 800cad4:	2800      	cmp	r0, #0
 800cad6:	db25      	blt.n	800cb24 <quorem+0xf4>
 800cad8:	3501      	adds	r5, #1
 800cada:	4630      	mov	r0, r6
 800cadc:	f04f 0c00 	mov.w	ip, #0
 800cae0:	f857 2b04 	ldr.w	r2, [r7], #4
 800cae4:	f8d0 e000 	ldr.w	lr, [r0]
 800cae8:	b293      	uxth	r3, r2
 800caea:	ebac 0303 	sub.w	r3, ip, r3
 800caee:	0c12      	lsrs	r2, r2, #16
 800caf0:	fa13 f38e 	uxtah	r3, r3, lr
 800caf4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800caf8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cafc:	b29b      	uxth	r3, r3
 800cafe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb02:	45b9      	cmp	r9, r7
 800cb04:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cb08:	f840 3b04 	str.w	r3, [r0], #4
 800cb0c:	d2e8      	bcs.n	800cae0 <quorem+0xb0>
 800cb0e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800cb12:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800cb16:	b92a      	cbnz	r2, 800cb24 <quorem+0xf4>
 800cb18:	3b04      	subs	r3, #4
 800cb1a:	429e      	cmp	r6, r3
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	d30b      	bcc.n	800cb38 <quorem+0x108>
 800cb20:	f8c8 4010 	str.w	r4, [r8, #16]
 800cb24:	4628      	mov	r0, r5
 800cb26:	b003      	add	sp, #12
 800cb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb2c:	6812      	ldr	r2, [r2, #0]
 800cb2e:	3b04      	subs	r3, #4
 800cb30:	2a00      	cmp	r2, #0
 800cb32:	d1ca      	bne.n	800caca <quorem+0x9a>
 800cb34:	3c01      	subs	r4, #1
 800cb36:	e7c5      	b.n	800cac4 <quorem+0x94>
 800cb38:	6812      	ldr	r2, [r2, #0]
 800cb3a:	3b04      	subs	r3, #4
 800cb3c:	2a00      	cmp	r2, #0
 800cb3e:	d1ef      	bne.n	800cb20 <quorem+0xf0>
 800cb40:	3c01      	subs	r4, #1
 800cb42:	e7ea      	b.n	800cb1a <quorem+0xea>
 800cb44:	2000      	movs	r0, #0
 800cb46:	e7ee      	b.n	800cb26 <quorem+0xf6>

0800cb48 <_dtoa_r>:
 800cb48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb4c:	ec57 6b10 	vmov	r6, r7, d0
 800cb50:	b097      	sub	sp, #92	; 0x5c
 800cb52:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800cb54:	9106      	str	r1, [sp, #24]
 800cb56:	4604      	mov	r4, r0
 800cb58:	920b      	str	r2, [sp, #44]	; 0x2c
 800cb5a:	9312      	str	r3, [sp, #72]	; 0x48
 800cb5c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800cb60:	e9cd 6700 	strd	r6, r7, [sp]
 800cb64:	b93d      	cbnz	r5, 800cb76 <_dtoa_r+0x2e>
 800cb66:	2010      	movs	r0, #16
 800cb68:	f000 ff92 	bl	800da90 <malloc>
 800cb6c:	6260      	str	r0, [r4, #36]	; 0x24
 800cb6e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800cb72:	6005      	str	r5, [r0, #0]
 800cb74:	60c5      	str	r5, [r0, #12]
 800cb76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb78:	6819      	ldr	r1, [r3, #0]
 800cb7a:	b151      	cbz	r1, 800cb92 <_dtoa_r+0x4a>
 800cb7c:	685a      	ldr	r2, [r3, #4]
 800cb7e:	604a      	str	r2, [r1, #4]
 800cb80:	2301      	movs	r3, #1
 800cb82:	4093      	lsls	r3, r2
 800cb84:	608b      	str	r3, [r1, #8]
 800cb86:	4620      	mov	r0, r4
 800cb88:	f000 ffc9 	bl	800db1e <_Bfree>
 800cb8c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb8e:	2200      	movs	r2, #0
 800cb90:	601a      	str	r2, [r3, #0]
 800cb92:	1e3b      	subs	r3, r7, #0
 800cb94:	bfbb      	ittet	lt
 800cb96:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800cb9a:	9301      	strlt	r3, [sp, #4]
 800cb9c:	2300      	movge	r3, #0
 800cb9e:	2201      	movlt	r2, #1
 800cba0:	bfac      	ite	ge
 800cba2:	f8c8 3000 	strge.w	r3, [r8]
 800cba6:	f8c8 2000 	strlt.w	r2, [r8]
 800cbaa:	4baf      	ldr	r3, [pc, #700]	; (800ce68 <_dtoa_r+0x320>)
 800cbac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800cbb0:	ea33 0308 	bics.w	r3, r3, r8
 800cbb4:	d114      	bne.n	800cbe0 <_dtoa_r+0x98>
 800cbb6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cbb8:	f242 730f 	movw	r3, #9999	; 0x270f
 800cbbc:	6013      	str	r3, [r2, #0]
 800cbbe:	9b00      	ldr	r3, [sp, #0]
 800cbc0:	b923      	cbnz	r3, 800cbcc <_dtoa_r+0x84>
 800cbc2:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	f000 8542 	beq.w	800d650 <_dtoa_r+0xb08>
 800cbcc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cbce:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800ce7c <_dtoa_r+0x334>
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	f000 8544 	beq.w	800d660 <_dtoa_r+0xb18>
 800cbd8:	f10b 0303 	add.w	r3, fp, #3
 800cbdc:	f000 bd3e 	b.w	800d65c <_dtoa_r+0xb14>
 800cbe0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	4630      	mov	r0, r6
 800cbea:	4639      	mov	r1, r7
 800cbec:	f7f3 ff94 	bl	8000b18 <__aeabi_dcmpeq>
 800cbf0:	4681      	mov	r9, r0
 800cbf2:	b168      	cbz	r0, 800cc10 <_dtoa_r+0xc8>
 800cbf4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800cbf6:	2301      	movs	r3, #1
 800cbf8:	6013      	str	r3, [r2, #0]
 800cbfa:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	f000 8524 	beq.w	800d64a <_dtoa_r+0xb02>
 800cc02:	4b9a      	ldr	r3, [pc, #616]	; (800ce6c <_dtoa_r+0x324>)
 800cc04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cc06:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800cc0a:	6013      	str	r3, [r2, #0]
 800cc0c:	f000 bd28 	b.w	800d660 <_dtoa_r+0xb18>
 800cc10:	aa14      	add	r2, sp, #80	; 0x50
 800cc12:	a915      	add	r1, sp, #84	; 0x54
 800cc14:	ec47 6b10 	vmov	d0, r6, r7
 800cc18:	4620      	mov	r0, r4
 800cc1a:	f001 f9d8 	bl	800dfce <__d2b>
 800cc1e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800cc22:	9004      	str	r0, [sp, #16]
 800cc24:	2d00      	cmp	r5, #0
 800cc26:	d07c      	beq.n	800cd22 <_dtoa_r+0x1da>
 800cc28:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cc2c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800cc30:	46b2      	mov	sl, r6
 800cc32:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800cc36:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cc3a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800cc3e:	2200      	movs	r2, #0
 800cc40:	4b8b      	ldr	r3, [pc, #556]	; (800ce70 <_dtoa_r+0x328>)
 800cc42:	4650      	mov	r0, sl
 800cc44:	4659      	mov	r1, fp
 800cc46:	f7f3 fb47 	bl	80002d8 <__aeabi_dsub>
 800cc4a:	a381      	add	r3, pc, #516	; (adr r3, 800ce50 <_dtoa_r+0x308>)
 800cc4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc50:	f7f3 fcfa 	bl	8000648 <__aeabi_dmul>
 800cc54:	a380      	add	r3, pc, #512	; (adr r3, 800ce58 <_dtoa_r+0x310>)
 800cc56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc5a:	f7f3 fb3f 	bl	80002dc <__adddf3>
 800cc5e:	4606      	mov	r6, r0
 800cc60:	4628      	mov	r0, r5
 800cc62:	460f      	mov	r7, r1
 800cc64:	f7f3 fc86 	bl	8000574 <__aeabi_i2d>
 800cc68:	a37d      	add	r3, pc, #500	; (adr r3, 800ce60 <_dtoa_r+0x318>)
 800cc6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc6e:	f7f3 fceb 	bl	8000648 <__aeabi_dmul>
 800cc72:	4602      	mov	r2, r0
 800cc74:	460b      	mov	r3, r1
 800cc76:	4630      	mov	r0, r6
 800cc78:	4639      	mov	r1, r7
 800cc7a:	f7f3 fb2f 	bl	80002dc <__adddf3>
 800cc7e:	4606      	mov	r6, r0
 800cc80:	460f      	mov	r7, r1
 800cc82:	f7f3 ff91 	bl	8000ba8 <__aeabi_d2iz>
 800cc86:	2200      	movs	r2, #0
 800cc88:	4682      	mov	sl, r0
 800cc8a:	2300      	movs	r3, #0
 800cc8c:	4630      	mov	r0, r6
 800cc8e:	4639      	mov	r1, r7
 800cc90:	f7f3 ff4c 	bl	8000b2c <__aeabi_dcmplt>
 800cc94:	b148      	cbz	r0, 800ccaa <_dtoa_r+0x162>
 800cc96:	4650      	mov	r0, sl
 800cc98:	f7f3 fc6c 	bl	8000574 <__aeabi_i2d>
 800cc9c:	4632      	mov	r2, r6
 800cc9e:	463b      	mov	r3, r7
 800cca0:	f7f3 ff3a 	bl	8000b18 <__aeabi_dcmpeq>
 800cca4:	b908      	cbnz	r0, 800ccaa <_dtoa_r+0x162>
 800cca6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ccaa:	f1ba 0f16 	cmp.w	sl, #22
 800ccae:	d859      	bhi.n	800cd64 <_dtoa_r+0x21c>
 800ccb0:	4970      	ldr	r1, [pc, #448]	; (800ce74 <_dtoa_r+0x32c>)
 800ccb2:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800ccb6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ccba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ccbe:	f7f3 ff53 	bl	8000b68 <__aeabi_dcmpgt>
 800ccc2:	2800      	cmp	r0, #0
 800ccc4:	d050      	beq.n	800cd68 <_dtoa_r+0x220>
 800ccc6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ccca:	2300      	movs	r3, #0
 800cccc:	930f      	str	r3, [sp, #60]	; 0x3c
 800ccce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ccd0:	1b5d      	subs	r5, r3, r5
 800ccd2:	f1b5 0801 	subs.w	r8, r5, #1
 800ccd6:	bf49      	itett	mi
 800ccd8:	f1c5 0301 	rsbmi	r3, r5, #1
 800ccdc:	2300      	movpl	r3, #0
 800ccde:	9305      	strmi	r3, [sp, #20]
 800cce0:	f04f 0800 	movmi.w	r8, #0
 800cce4:	bf58      	it	pl
 800cce6:	9305      	strpl	r3, [sp, #20]
 800cce8:	f1ba 0f00 	cmp.w	sl, #0
 800ccec:	db3e      	blt.n	800cd6c <_dtoa_r+0x224>
 800ccee:	2300      	movs	r3, #0
 800ccf0:	44d0      	add	r8, sl
 800ccf2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800ccf6:	9307      	str	r3, [sp, #28]
 800ccf8:	9b06      	ldr	r3, [sp, #24]
 800ccfa:	2b09      	cmp	r3, #9
 800ccfc:	f200 8090 	bhi.w	800ce20 <_dtoa_r+0x2d8>
 800cd00:	2b05      	cmp	r3, #5
 800cd02:	bfc4      	itt	gt
 800cd04:	3b04      	subgt	r3, #4
 800cd06:	9306      	strgt	r3, [sp, #24]
 800cd08:	9b06      	ldr	r3, [sp, #24]
 800cd0a:	f1a3 0302 	sub.w	r3, r3, #2
 800cd0e:	bfcc      	ite	gt
 800cd10:	2500      	movgt	r5, #0
 800cd12:	2501      	movle	r5, #1
 800cd14:	2b03      	cmp	r3, #3
 800cd16:	f200 808f 	bhi.w	800ce38 <_dtoa_r+0x2f0>
 800cd1a:	e8df f003 	tbb	[pc, r3]
 800cd1e:	7f7d      	.short	0x7f7d
 800cd20:	7131      	.short	0x7131
 800cd22:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800cd26:	441d      	add	r5, r3
 800cd28:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800cd2c:	2820      	cmp	r0, #32
 800cd2e:	dd13      	ble.n	800cd58 <_dtoa_r+0x210>
 800cd30:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800cd34:	9b00      	ldr	r3, [sp, #0]
 800cd36:	fa08 f800 	lsl.w	r8, r8, r0
 800cd3a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800cd3e:	fa23 f000 	lsr.w	r0, r3, r0
 800cd42:	ea48 0000 	orr.w	r0, r8, r0
 800cd46:	f7f3 fc05 	bl	8000554 <__aeabi_ui2d>
 800cd4a:	2301      	movs	r3, #1
 800cd4c:	4682      	mov	sl, r0
 800cd4e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800cd52:	3d01      	subs	r5, #1
 800cd54:	9313      	str	r3, [sp, #76]	; 0x4c
 800cd56:	e772      	b.n	800cc3e <_dtoa_r+0xf6>
 800cd58:	9b00      	ldr	r3, [sp, #0]
 800cd5a:	f1c0 0020 	rsb	r0, r0, #32
 800cd5e:	fa03 f000 	lsl.w	r0, r3, r0
 800cd62:	e7f0      	b.n	800cd46 <_dtoa_r+0x1fe>
 800cd64:	2301      	movs	r3, #1
 800cd66:	e7b1      	b.n	800cccc <_dtoa_r+0x184>
 800cd68:	900f      	str	r0, [sp, #60]	; 0x3c
 800cd6a:	e7b0      	b.n	800ccce <_dtoa_r+0x186>
 800cd6c:	9b05      	ldr	r3, [sp, #20]
 800cd6e:	eba3 030a 	sub.w	r3, r3, sl
 800cd72:	9305      	str	r3, [sp, #20]
 800cd74:	f1ca 0300 	rsb	r3, sl, #0
 800cd78:	9307      	str	r3, [sp, #28]
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	930e      	str	r3, [sp, #56]	; 0x38
 800cd7e:	e7bb      	b.n	800ccf8 <_dtoa_r+0x1b0>
 800cd80:	2301      	movs	r3, #1
 800cd82:	930a      	str	r3, [sp, #40]	; 0x28
 800cd84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	dd59      	ble.n	800ce3e <_dtoa_r+0x2f6>
 800cd8a:	9302      	str	r3, [sp, #8]
 800cd8c:	4699      	mov	r9, r3
 800cd8e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cd90:	2200      	movs	r2, #0
 800cd92:	6072      	str	r2, [r6, #4]
 800cd94:	2204      	movs	r2, #4
 800cd96:	f102 0014 	add.w	r0, r2, #20
 800cd9a:	4298      	cmp	r0, r3
 800cd9c:	6871      	ldr	r1, [r6, #4]
 800cd9e:	d953      	bls.n	800ce48 <_dtoa_r+0x300>
 800cda0:	4620      	mov	r0, r4
 800cda2:	f000 fe88 	bl	800dab6 <_Balloc>
 800cda6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cda8:	6030      	str	r0, [r6, #0]
 800cdaa:	f1b9 0f0e 	cmp.w	r9, #14
 800cdae:	f8d3 b000 	ldr.w	fp, [r3]
 800cdb2:	f200 80e6 	bhi.w	800cf82 <_dtoa_r+0x43a>
 800cdb6:	2d00      	cmp	r5, #0
 800cdb8:	f000 80e3 	beq.w	800cf82 <_dtoa_r+0x43a>
 800cdbc:	ed9d 7b00 	vldr	d7, [sp]
 800cdc0:	f1ba 0f00 	cmp.w	sl, #0
 800cdc4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800cdc8:	dd74      	ble.n	800ceb4 <_dtoa_r+0x36c>
 800cdca:	4a2a      	ldr	r2, [pc, #168]	; (800ce74 <_dtoa_r+0x32c>)
 800cdcc:	f00a 030f 	and.w	r3, sl, #15
 800cdd0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cdd4:	ed93 7b00 	vldr	d7, [r3]
 800cdd8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800cddc:	06f0      	lsls	r0, r6, #27
 800cdde:	ed8d 7b08 	vstr	d7, [sp, #32]
 800cde2:	d565      	bpl.n	800ceb0 <_dtoa_r+0x368>
 800cde4:	4b24      	ldr	r3, [pc, #144]	; (800ce78 <_dtoa_r+0x330>)
 800cde6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800cdea:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cdee:	f7f3 fd55 	bl	800089c <__aeabi_ddiv>
 800cdf2:	e9cd 0100 	strd	r0, r1, [sp]
 800cdf6:	f006 060f 	and.w	r6, r6, #15
 800cdfa:	2503      	movs	r5, #3
 800cdfc:	4f1e      	ldr	r7, [pc, #120]	; (800ce78 <_dtoa_r+0x330>)
 800cdfe:	e04c      	b.n	800ce9a <_dtoa_r+0x352>
 800ce00:	2301      	movs	r3, #1
 800ce02:	930a      	str	r3, [sp, #40]	; 0x28
 800ce04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce06:	4453      	add	r3, sl
 800ce08:	f103 0901 	add.w	r9, r3, #1
 800ce0c:	9302      	str	r3, [sp, #8]
 800ce0e:	464b      	mov	r3, r9
 800ce10:	2b01      	cmp	r3, #1
 800ce12:	bfb8      	it	lt
 800ce14:	2301      	movlt	r3, #1
 800ce16:	e7ba      	b.n	800cd8e <_dtoa_r+0x246>
 800ce18:	2300      	movs	r3, #0
 800ce1a:	e7b2      	b.n	800cd82 <_dtoa_r+0x23a>
 800ce1c:	2300      	movs	r3, #0
 800ce1e:	e7f0      	b.n	800ce02 <_dtoa_r+0x2ba>
 800ce20:	2501      	movs	r5, #1
 800ce22:	2300      	movs	r3, #0
 800ce24:	9306      	str	r3, [sp, #24]
 800ce26:	950a      	str	r5, [sp, #40]	; 0x28
 800ce28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce2c:	9302      	str	r3, [sp, #8]
 800ce2e:	4699      	mov	r9, r3
 800ce30:	2200      	movs	r2, #0
 800ce32:	2312      	movs	r3, #18
 800ce34:	920b      	str	r2, [sp, #44]	; 0x2c
 800ce36:	e7aa      	b.n	800cd8e <_dtoa_r+0x246>
 800ce38:	2301      	movs	r3, #1
 800ce3a:	930a      	str	r3, [sp, #40]	; 0x28
 800ce3c:	e7f4      	b.n	800ce28 <_dtoa_r+0x2e0>
 800ce3e:	2301      	movs	r3, #1
 800ce40:	9302      	str	r3, [sp, #8]
 800ce42:	4699      	mov	r9, r3
 800ce44:	461a      	mov	r2, r3
 800ce46:	e7f5      	b.n	800ce34 <_dtoa_r+0x2ec>
 800ce48:	3101      	adds	r1, #1
 800ce4a:	6071      	str	r1, [r6, #4]
 800ce4c:	0052      	lsls	r2, r2, #1
 800ce4e:	e7a2      	b.n	800cd96 <_dtoa_r+0x24e>
 800ce50:	636f4361 	.word	0x636f4361
 800ce54:	3fd287a7 	.word	0x3fd287a7
 800ce58:	8b60c8b3 	.word	0x8b60c8b3
 800ce5c:	3fc68a28 	.word	0x3fc68a28
 800ce60:	509f79fb 	.word	0x509f79fb
 800ce64:	3fd34413 	.word	0x3fd34413
 800ce68:	7ff00000 	.word	0x7ff00000
 800ce6c:	0800edc5 	.word	0x0800edc5
 800ce70:	3ff80000 	.word	0x3ff80000
 800ce74:	0800ee80 	.word	0x0800ee80
 800ce78:	0800ee58 	.word	0x0800ee58
 800ce7c:	0800edf1 	.word	0x0800edf1
 800ce80:	07f1      	lsls	r1, r6, #31
 800ce82:	d508      	bpl.n	800ce96 <_dtoa_r+0x34e>
 800ce84:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ce88:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce8c:	f7f3 fbdc 	bl	8000648 <__aeabi_dmul>
 800ce90:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ce94:	3501      	adds	r5, #1
 800ce96:	1076      	asrs	r6, r6, #1
 800ce98:	3708      	adds	r7, #8
 800ce9a:	2e00      	cmp	r6, #0
 800ce9c:	d1f0      	bne.n	800ce80 <_dtoa_r+0x338>
 800ce9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800cea2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cea6:	f7f3 fcf9 	bl	800089c <__aeabi_ddiv>
 800ceaa:	e9cd 0100 	strd	r0, r1, [sp]
 800ceae:	e01a      	b.n	800cee6 <_dtoa_r+0x39e>
 800ceb0:	2502      	movs	r5, #2
 800ceb2:	e7a3      	b.n	800cdfc <_dtoa_r+0x2b4>
 800ceb4:	f000 80a0 	beq.w	800cff8 <_dtoa_r+0x4b0>
 800ceb8:	f1ca 0600 	rsb	r6, sl, #0
 800cebc:	4b9f      	ldr	r3, [pc, #636]	; (800d13c <_dtoa_r+0x5f4>)
 800cebe:	4fa0      	ldr	r7, [pc, #640]	; (800d140 <_dtoa_r+0x5f8>)
 800cec0:	f006 020f 	and.w	r2, r6, #15
 800cec4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cecc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ced0:	f7f3 fbba 	bl	8000648 <__aeabi_dmul>
 800ced4:	e9cd 0100 	strd	r0, r1, [sp]
 800ced8:	1136      	asrs	r6, r6, #4
 800ceda:	2300      	movs	r3, #0
 800cedc:	2502      	movs	r5, #2
 800cede:	2e00      	cmp	r6, #0
 800cee0:	d17f      	bne.n	800cfe2 <_dtoa_r+0x49a>
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d1e1      	bne.n	800ceaa <_dtoa_r+0x362>
 800cee6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	f000 8087 	beq.w	800cffc <_dtoa_r+0x4b4>
 800ceee:	e9dd 6700 	ldrd	r6, r7, [sp]
 800cef2:	2200      	movs	r2, #0
 800cef4:	4b93      	ldr	r3, [pc, #588]	; (800d144 <_dtoa_r+0x5fc>)
 800cef6:	4630      	mov	r0, r6
 800cef8:	4639      	mov	r1, r7
 800cefa:	f7f3 fe17 	bl	8000b2c <__aeabi_dcmplt>
 800cefe:	2800      	cmp	r0, #0
 800cf00:	d07c      	beq.n	800cffc <_dtoa_r+0x4b4>
 800cf02:	f1b9 0f00 	cmp.w	r9, #0
 800cf06:	d079      	beq.n	800cffc <_dtoa_r+0x4b4>
 800cf08:	9b02      	ldr	r3, [sp, #8]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	dd35      	ble.n	800cf7a <_dtoa_r+0x432>
 800cf0e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800cf12:	9308      	str	r3, [sp, #32]
 800cf14:	4639      	mov	r1, r7
 800cf16:	2200      	movs	r2, #0
 800cf18:	4b8b      	ldr	r3, [pc, #556]	; (800d148 <_dtoa_r+0x600>)
 800cf1a:	4630      	mov	r0, r6
 800cf1c:	f7f3 fb94 	bl	8000648 <__aeabi_dmul>
 800cf20:	e9cd 0100 	strd	r0, r1, [sp]
 800cf24:	9f02      	ldr	r7, [sp, #8]
 800cf26:	3501      	adds	r5, #1
 800cf28:	4628      	mov	r0, r5
 800cf2a:	f7f3 fb23 	bl	8000574 <__aeabi_i2d>
 800cf2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cf32:	f7f3 fb89 	bl	8000648 <__aeabi_dmul>
 800cf36:	2200      	movs	r2, #0
 800cf38:	4b84      	ldr	r3, [pc, #528]	; (800d14c <_dtoa_r+0x604>)
 800cf3a:	f7f3 f9cf 	bl	80002dc <__adddf3>
 800cf3e:	4605      	mov	r5, r0
 800cf40:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800cf44:	2f00      	cmp	r7, #0
 800cf46:	d15d      	bne.n	800d004 <_dtoa_r+0x4bc>
 800cf48:	2200      	movs	r2, #0
 800cf4a:	4b81      	ldr	r3, [pc, #516]	; (800d150 <_dtoa_r+0x608>)
 800cf4c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf50:	f7f3 f9c2 	bl	80002d8 <__aeabi_dsub>
 800cf54:	462a      	mov	r2, r5
 800cf56:	4633      	mov	r3, r6
 800cf58:	e9cd 0100 	strd	r0, r1, [sp]
 800cf5c:	f7f3 fe04 	bl	8000b68 <__aeabi_dcmpgt>
 800cf60:	2800      	cmp	r0, #0
 800cf62:	f040 8288 	bne.w	800d476 <_dtoa_r+0x92e>
 800cf66:	462a      	mov	r2, r5
 800cf68:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800cf6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cf70:	f7f3 fddc 	bl	8000b2c <__aeabi_dcmplt>
 800cf74:	2800      	cmp	r0, #0
 800cf76:	f040 827c 	bne.w	800d472 <_dtoa_r+0x92a>
 800cf7a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800cf7e:	e9cd 2300 	strd	r2, r3, [sp]
 800cf82:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cf84:	2b00      	cmp	r3, #0
 800cf86:	f2c0 8150 	blt.w	800d22a <_dtoa_r+0x6e2>
 800cf8a:	f1ba 0f0e 	cmp.w	sl, #14
 800cf8e:	f300 814c 	bgt.w	800d22a <_dtoa_r+0x6e2>
 800cf92:	4b6a      	ldr	r3, [pc, #424]	; (800d13c <_dtoa_r+0x5f4>)
 800cf94:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cf98:	ed93 7b00 	vldr	d7, [r3]
 800cf9c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf9e:	2b00      	cmp	r3, #0
 800cfa0:	ed8d 7b02 	vstr	d7, [sp, #8]
 800cfa4:	f280 80d8 	bge.w	800d158 <_dtoa_r+0x610>
 800cfa8:	f1b9 0f00 	cmp.w	r9, #0
 800cfac:	f300 80d4 	bgt.w	800d158 <_dtoa_r+0x610>
 800cfb0:	f040 825e 	bne.w	800d470 <_dtoa_r+0x928>
 800cfb4:	2200      	movs	r2, #0
 800cfb6:	4b66      	ldr	r3, [pc, #408]	; (800d150 <_dtoa_r+0x608>)
 800cfb8:	ec51 0b17 	vmov	r0, r1, d7
 800cfbc:	f7f3 fb44 	bl	8000648 <__aeabi_dmul>
 800cfc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cfc4:	f7f3 fdc6 	bl	8000b54 <__aeabi_dcmpge>
 800cfc8:	464f      	mov	r7, r9
 800cfca:	464e      	mov	r6, r9
 800cfcc:	2800      	cmp	r0, #0
 800cfce:	f040 8234 	bne.w	800d43a <_dtoa_r+0x8f2>
 800cfd2:	2331      	movs	r3, #49	; 0x31
 800cfd4:	f10b 0501 	add.w	r5, fp, #1
 800cfd8:	f88b 3000 	strb.w	r3, [fp]
 800cfdc:	f10a 0a01 	add.w	sl, sl, #1
 800cfe0:	e22f      	b.n	800d442 <_dtoa_r+0x8fa>
 800cfe2:	07f2      	lsls	r2, r6, #31
 800cfe4:	d505      	bpl.n	800cff2 <_dtoa_r+0x4aa>
 800cfe6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cfea:	f7f3 fb2d 	bl	8000648 <__aeabi_dmul>
 800cfee:	3501      	adds	r5, #1
 800cff0:	2301      	movs	r3, #1
 800cff2:	1076      	asrs	r6, r6, #1
 800cff4:	3708      	adds	r7, #8
 800cff6:	e772      	b.n	800cede <_dtoa_r+0x396>
 800cff8:	2502      	movs	r5, #2
 800cffa:	e774      	b.n	800cee6 <_dtoa_r+0x39e>
 800cffc:	f8cd a020 	str.w	sl, [sp, #32]
 800d000:	464f      	mov	r7, r9
 800d002:	e791      	b.n	800cf28 <_dtoa_r+0x3e0>
 800d004:	4b4d      	ldr	r3, [pc, #308]	; (800d13c <_dtoa_r+0x5f4>)
 800d006:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d00a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d00e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d010:	2b00      	cmp	r3, #0
 800d012:	d047      	beq.n	800d0a4 <_dtoa_r+0x55c>
 800d014:	4602      	mov	r2, r0
 800d016:	460b      	mov	r3, r1
 800d018:	2000      	movs	r0, #0
 800d01a:	494e      	ldr	r1, [pc, #312]	; (800d154 <_dtoa_r+0x60c>)
 800d01c:	f7f3 fc3e 	bl	800089c <__aeabi_ddiv>
 800d020:	462a      	mov	r2, r5
 800d022:	4633      	mov	r3, r6
 800d024:	f7f3 f958 	bl	80002d8 <__aeabi_dsub>
 800d028:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d02c:	465d      	mov	r5, fp
 800d02e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d032:	f7f3 fdb9 	bl	8000ba8 <__aeabi_d2iz>
 800d036:	4606      	mov	r6, r0
 800d038:	f7f3 fa9c 	bl	8000574 <__aeabi_i2d>
 800d03c:	4602      	mov	r2, r0
 800d03e:	460b      	mov	r3, r1
 800d040:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d044:	f7f3 f948 	bl	80002d8 <__aeabi_dsub>
 800d048:	3630      	adds	r6, #48	; 0x30
 800d04a:	f805 6b01 	strb.w	r6, [r5], #1
 800d04e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d052:	e9cd 0100 	strd	r0, r1, [sp]
 800d056:	f7f3 fd69 	bl	8000b2c <__aeabi_dcmplt>
 800d05a:	2800      	cmp	r0, #0
 800d05c:	d163      	bne.n	800d126 <_dtoa_r+0x5de>
 800d05e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d062:	2000      	movs	r0, #0
 800d064:	4937      	ldr	r1, [pc, #220]	; (800d144 <_dtoa_r+0x5fc>)
 800d066:	f7f3 f937 	bl	80002d8 <__aeabi_dsub>
 800d06a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d06e:	f7f3 fd5d 	bl	8000b2c <__aeabi_dcmplt>
 800d072:	2800      	cmp	r0, #0
 800d074:	f040 80b7 	bne.w	800d1e6 <_dtoa_r+0x69e>
 800d078:	eba5 030b 	sub.w	r3, r5, fp
 800d07c:	429f      	cmp	r7, r3
 800d07e:	f77f af7c 	ble.w	800cf7a <_dtoa_r+0x432>
 800d082:	2200      	movs	r2, #0
 800d084:	4b30      	ldr	r3, [pc, #192]	; (800d148 <_dtoa_r+0x600>)
 800d086:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d08a:	f7f3 fadd 	bl	8000648 <__aeabi_dmul>
 800d08e:	2200      	movs	r2, #0
 800d090:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d094:	4b2c      	ldr	r3, [pc, #176]	; (800d148 <_dtoa_r+0x600>)
 800d096:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d09a:	f7f3 fad5 	bl	8000648 <__aeabi_dmul>
 800d09e:	e9cd 0100 	strd	r0, r1, [sp]
 800d0a2:	e7c4      	b.n	800d02e <_dtoa_r+0x4e6>
 800d0a4:	462a      	mov	r2, r5
 800d0a6:	4633      	mov	r3, r6
 800d0a8:	f7f3 face 	bl	8000648 <__aeabi_dmul>
 800d0ac:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d0b0:	eb0b 0507 	add.w	r5, fp, r7
 800d0b4:	465e      	mov	r6, fp
 800d0b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d0ba:	f7f3 fd75 	bl	8000ba8 <__aeabi_d2iz>
 800d0be:	4607      	mov	r7, r0
 800d0c0:	f7f3 fa58 	bl	8000574 <__aeabi_i2d>
 800d0c4:	3730      	adds	r7, #48	; 0x30
 800d0c6:	4602      	mov	r2, r0
 800d0c8:	460b      	mov	r3, r1
 800d0ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d0ce:	f7f3 f903 	bl	80002d8 <__aeabi_dsub>
 800d0d2:	f806 7b01 	strb.w	r7, [r6], #1
 800d0d6:	42ae      	cmp	r6, r5
 800d0d8:	e9cd 0100 	strd	r0, r1, [sp]
 800d0dc:	f04f 0200 	mov.w	r2, #0
 800d0e0:	d126      	bne.n	800d130 <_dtoa_r+0x5e8>
 800d0e2:	4b1c      	ldr	r3, [pc, #112]	; (800d154 <_dtoa_r+0x60c>)
 800d0e4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d0e8:	f7f3 f8f8 	bl	80002dc <__adddf3>
 800d0ec:	4602      	mov	r2, r0
 800d0ee:	460b      	mov	r3, r1
 800d0f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d0f4:	f7f3 fd38 	bl	8000b68 <__aeabi_dcmpgt>
 800d0f8:	2800      	cmp	r0, #0
 800d0fa:	d174      	bne.n	800d1e6 <_dtoa_r+0x69e>
 800d0fc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d100:	2000      	movs	r0, #0
 800d102:	4914      	ldr	r1, [pc, #80]	; (800d154 <_dtoa_r+0x60c>)
 800d104:	f7f3 f8e8 	bl	80002d8 <__aeabi_dsub>
 800d108:	4602      	mov	r2, r0
 800d10a:	460b      	mov	r3, r1
 800d10c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d110:	f7f3 fd0c 	bl	8000b2c <__aeabi_dcmplt>
 800d114:	2800      	cmp	r0, #0
 800d116:	f43f af30 	beq.w	800cf7a <_dtoa_r+0x432>
 800d11a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d11e:	2b30      	cmp	r3, #48	; 0x30
 800d120:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d124:	d002      	beq.n	800d12c <_dtoa_r+0x5e4>
 800d126:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d12a:	e04a      	b.n	800d1c2 <_dtoa_r+0x67a>
 800d12c:	4615      	mov	r5, r2
 800d12e:	e7f4      	b.n	800d11a <_dtoa_r+0x5d2>
 800d130:	4b05      	ldr	r3, [pc, #20]	; (800d148 <_dtoa_r+0x600>)
 800d132:	f7f3 fa89 	bl	8000648 <__aeabi_dmul>
 800d136:	e9cd 0100 	strd	r0, r1, [sp]
 800d13a:	e7bc      	b.n	800d0b6 <_dtoa_r+0x56e>
 800d13c:	0800ee80 	.word	0x0800ee80
 800d140:	0800ee58 	.word	0x0800ee58
 800d144:	3ff00000 	.word	0x3ff00000
 800d148:	40240000 	.word	0x40240000
 800d14c:	401c0000 	.word	0x401c0000
 800d150:	40140000 	.word	0x40140000
 800d154:	3fe00000 	.word	0x3fe00000
 800d158:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d15c:	465d      	mov	r5, fp
 800d15e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d162:	4630      	mov	r0, r6
 800d164:	4639      	mov	r1, r7
 800d166:	f7f3 fb99 	bl	800089c <__aeabi_ddiv>
 800d16a:	f7f3 fd1d 	bl	8000ba8 <__aeabi_d2iz>
 800d16e:	4680      	mov	r8, r0
 800d170:	f7f3 fa00 	bl	8000574 <__aeabi_i2d>
 800d174:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d178:	f7f3 fa66 	bl	8000648 <__aeabi_dmul>
 800d17c:	4602      	mov	r2, r0
 800d17e:	460b      	mov	r3, r1
 800d180:	4630      	mov	r0, r6
 800d182:	4639      	mov	r1, r7
 800d184:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d188:	f7f3 f8a6 	bl	80002d8 <__aeabi_dsub>
 800d18c:	f805 6b01 	strb.w	r6, [r5], #1
 800d190:	eba5 060b 	sub.w	r6, r5, fp
 800d194:	45b1      	cmp	r9, r6
 800d196:	4602      	mov	r2, r0
 800d198:	460b      	mov	r3, r1
 800d19a:	d139      	bne.n	800d210 <_dtoa_r+0x6c8>
 800d19c:	f7f3 f89e 	bl	80002dc <__adddf3>
 800d1a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d1a4:	4606      	mov	r6, r0
 800d1a6:	460f      	mov	r7, r1
 800d1a8:	f7f3 fcde 	bl	8000b68 <__aeabi_dcmpgt>
 800d1ac:	b9c8      	cbnz	r0, 800d1e2 <_dtoa_r+0x69a>
 800d1ae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d1b2:	4630      	mov	r0, r6
 800d1b4:	4639      	mov	r1, r7
 800d1b6:	f7f3 fcaf 	bl	8000b18 <__aeabi_dcmpeq>
 800d1ba:	b110      	cbz	r0, 800d1c2 <_dtoa_r+0x67a>
 800d1bc:	f018 0f01 	tst.w	r8, #1
 800d1c0:	d10f      	bne.n	800d1e2 <_dtoa_r+0x69a>
 800d1c2:	9904      	ldr	r1, [sp, #16]
 800d1c4:	4620      	mov	r0, r4
 800d1c6:	f000 fcaa 	bl	800db1e <_Bfree>
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d1ce:	702b      	strb	r3, [r5, #0]
 800d1d0:	f10a 0301 	add.w	r3, sl, #1
 800d1d4:	6013      	str	r3, [r2, #0]
 800d1d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	f000 8241 	beq.w	800d660 <_dtoa_r+0xb18>
 800d1de:	601d      	str	r5, [r3, #0]
 800d1e0:	e23e      	b.n	800d660 <_dtoa_r+0xb18>
 800d1e2:	f8cd a020 	str.w	sl, [sp, #32]
 800d1e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d1ea:	2a39      	cmp	r2, #57	; 0x39
 800d1ec:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800d1f0:	d108      	bne.n	800d204 <_dtoa_r+0x6bc>
 800d1f2:	459b      	cmp	fp, r3
 800d1f4:	d10a      	bne.n	800d20c <_dtoa_r+0x6c4>
 800d1f6:	9b08      	ldr	r3, [sp, #32]
 800d1f8:	3301      	adds	r3, #1
 800d1fa:	9308      	str	r3, [sp, #32]
 800d1fc:	2330      	movs	r3, #48	; 0x30
 800d1fe:	f88b 3000 	strb.w	r3, [fp]
 800d202:	465b      	mov	r3, fp
 800d204:	781a      	ldrb	r2, [r3, #0]
 800d206:	3201      	adds	r2, #1
 800d208:	701a      	strb	r2, [r3, #0]
 800d20a:	e78c      	b.n	800d126 <_dtoa_r+0x5de>
 800d20c:	461d      	mov	r5, r3
 800d20e:	e7ea      	b.n	800d1e6 <_dtoa_r+0x69e>
 800d210:	2200      	movs	r2, #0
 800d212:	4b9b      	ldr	r3, [pc, #620]	; (800d480 <_dtoa_r+0x938>)
 800d214:	f7f3 fa18 	bl	8000648 <__aeabi_dmul>
 800d218:	2200      	movs	r2, #0
 800d21a:	2300      	movs	r3, #0
 800d21c:	4606      	mov	r6, r0
 800d21e:	460f      	mov	r7, r1
 800d220:	f7f3 fc7a 	bl	8000b18 <__aeabi_dcmpeq>
 800d224:	2800      	cmp	r0, #0
 800d226:	d09a      	beq.n	800d15e <_dtoa_r+0x616>
 800d228:	e7cb      	b.n	800d1c2 <_dtoa_r+0x67a>
 800d22a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d22c:	2a00      	cmp	r2, #0
 800d22e:	f000 808b 	beq.w	800d348 <_dtoa_r+0x800>
 800d232:	9a06      	ldr	r2, [sp, #24]
 800d234:	2a01      	cmp	r2, #1
 800d236:	dc6e      	bgt.n	800d316 <_dtoa_r+0x7ce>
 800d238:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d23a:	2a00      	cmp	r2, #0
 800d23c:	d067      	beq.n	800d30e <_dtoa_r+0x7c6>
 800d23e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d242:	9f07      	ldr	r7, [sp, #28]
 800d244:	9d05      	ldr	r5, [sp, #20]
 800d246:	9a05      	ldr	r2, [sp, #20]
 800d248:	2101      	movs	r1, #1
 800d24a:	441a      	add	r2, r3
 800d24c:	4620      	mov	r0, r4
 800d24e:	9205      	str	r2, [sp, #20]
 800d250:	4498      	add	r8, r3
 800d252:	f000 fd04 	bl	800dc5e <__i2b>
 800d256:	4606      	mov	r6, r0
 800d258:	2d00      	cmp	r5, #0
 800d25a:	dd0c      	ble.n	800d276 <_dtoa_r+0x72e>
 800d25c:	f1b8 0f00 	cmp.w	r8, #0
 800d260:	dd09      	ble.n	800d276 <_dtoa_r+0x72e>
 800d262:	4545      	cmp	r5, r8
 800d264:	9a05      	ldr	r2, [sp, #20]
 800d266:	462b      	mov	r3, r5
 800d268:	bfa8      	it	ge
 800d26a:	4643      	movge	r3, r8
 800d26c:	1ad2      	subs	r2, r2, r3
 800d26e:	9205      	str	r2, [sp, #20]
 800d270:	1aed      	subs	r5, r5, r3
 800d272:	eba8 0803 	sub.w	r8, r8, r3
 800d276:	9b07      	ldr	r3, [sp, #28]
 800d278:	b1eb      	cbz	r3, 800d2b6 <_dtoa_r+0x76e>
 800d27a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d067      	beq.n	800d350 <_dtoa_r+0x808>
 800d280:	b18f      	cbz	r7, 800d2a6 <_dtoa_r+0x75e>
 800d282:	4631      	mov	r1, r6
 800d284:	463a      	mov	r2, r7
 800d286:	4620      	mov	r0, r4
 800d288:	f000 fd88 	bl	800dd9c <__pow5mult>
 800d28c:	9a04      	ldr	r2, [sp, #16]
 800d28e:	4601      	mov	r1, r0
 800d290:	4606      	mov	r6, r0
 800d292:	4620      	mov	r0, r4
 800d294:	f000 fcec 	bl	800dc70 <__multiply>
 800d298:	9904      	ldr	r1, [sp, #16]
 800d29a:	9008      	str	r0, [sp, #32]
 800d29c:	4620      	mov	r0, r4
 800d29e:	f000 fc3e 	bl	800db1e <_Bfree>
 800d2a2:	9b08      	ldr	r3, [sp, #32]
 800d2a4:	9304      	str	r3, [sp, #16]
 800d2a6:	9b07      	ldr	r3, [sp, #28]
 800d2a8:	1bda      	subs	r2, r3, r7
 800d2aa:	d004      	beq.n	800d2b6 <_dtoa_r+0x76e>
 800d2ac:	9904      	ldr	r1, [sp, #16]
 800d2ae:	4620      	mov	r0, r4
 800d2b0:	f000 fd74 	bl	800dd9c <__pow5mult>
 800d2b4:	9004      	str	r0, [sp, #16]
 800d2b6:	2101      	movs	r1, #1
 800d2b8:	4620      	mov	r0, r4
 800d2ba:	f000 fcd0 	bl	800dc5e <__i2b>
 800d2be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d2c0:	4607      	mov	r7, r0
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	f000 81d0 	beq.w	800d668 <_dtoa_r+0xb20>
 800d2c8:	461a      	mov	r2, r3
 800d2ca:	4601      	mov	r1, r0
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	f000 fd65 	bl	800dd9c <__pow5mult>
 800d2d2:	9b06      	ldr	r3, [sp, #24]
 800d2d4:	2b01      	cmp	r3, #1
 800d2d6:	4607      	mov	r7, r0
 800d2d8:	dc40      	bgt.n	800d35c <_dtoa_r+0x814>
 800d2da:	9b00      	ldr	r3, [sp, #0]
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d139      	bne.n	800d354 <_dtoa_r+0x80c>
 800d2e0:	9b01      	ldr	r3, [sp, #4]
 800d2e2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d136      	bne.n	800d358 <_dtoa_r+0x810>
 800d2ea:	9b01      	ldr	r3, [sp, #4]
 800d2ec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d2f0:	0d1b      	lsrs	r3, r3, #20
 800d2f2:	051b      	lsls	r3, r3, #20
 800d2f4:	b12b      	cbz	r3, 800d302 <_dtoa_r+0x7ba>
 800d2f6:	9b05      	ldr	r3, [sp, #20]
 800d2f8:	3301      	adds	r3, #1
 800d2fa:	9305      	str	r3, [sp, #20]
 800d2fc:	f108 0801 	add.w	r8, r8, #1
 800d300:	2301      	movs	r3, #1
 800d302:	9307      	str	r3, [sp, #28]
 800d304:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d306:	2b00      	cmp	r3, #0
 800d308:	d12a      	bne.n	800d360 <_dtoa_r+0x818>
 800d30a:	2001      	movs	r0, #1
 800d30c:	e030      	b.n	800d370 <_dtoa_r+0x828>
 800d30e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d310:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d314:	e795      	b.n	800d242 <_dtoa_r+0x6fa>
 800d316:	9b07      	ldr	r3, [sp, #28]
 800d318:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800d31c:	42bb      	cmp	r3, r7
 800d31e:	bfbf      	itttt	lt
 800d320:	9b07      	ldrlt	r3, [sp, #28]
 800d322:	9707      	strlt	r7, [sp, #28]
 800d324:	1afa      	sublt	r2, r7, r3
 800d326:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800d328:	bfbb      	ittet	lt
 800d32a:	189b      	addlt	r3, r3, r2
 800d32c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800d32e:	1bdf      	subge	r7, r3, r7
 800d330:	2700      	movlt	r7, #0
 800d332:	f1b9 0f00 	cmp.w	r9, #0
 800d336:	bfb5      	itete	lt
 800d338:	9b05      	ldrlt	r3, [sp, #20]
 800d33a:	9d05      	ldrge	r5, [sp, #20]
 800d33c:	eba3 0509 	sublt.w	r5, r3, r9
 800d340:	464b      	movge	r3, r9
 800d342:	bfb8      	it	lt
 800d344:	2300      	movlt	r3, #0
 800d346:	e77e      	b.n	800d246 <_dtoa_r+0x6fe>
 800d348:	9f07      	ldr	r7, [sp, #28]
 800d34a:	9d05      	ldr	r5, [sp, #20]
 800d34c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800d34e:	e783      	b.n	800d258 <_dtoa_r+0x710>
 800d350:	9a07      	ldr	r2, [sp, #28]
 800d352:	e7ab      	b.n	800d2ac <_dtoa_r+0x764>
 800d354:	2300      	movs	r3, #0
 800d356:	e7d4      	b.n	800d302 <_dtoa_r+0x7ba>
 800d358:	9b00      	ldr	r3, [sp, #0]
 800d35a:	e7d2      	b.n	800d302 <_dtoa_r+0x7ba>
 800d35c:	2300      	movs	r3, #0
 800d35e:	9307      	str	r3, [sp, #28]
 800d360:	693b      	ldr	r3, [r7, #16]
 800d362:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800d366:	6918      	ldr	r0, [r3, #16]
 800d368:	f000 fc2b 	bl	800dbc2 <__hi0bits>
 800d36c:	f1c0 0020 	rsb	r0, r0, #32
 800d370:	4440      	add	r0, r8
 800d372:	f010 001f 	ands.w	r0, r0, #31
 800d376:	d047      	beq.n	800d408 <_dtoa_r+0x8c0>
 800d378:	f1c0 0320 	rsb	r3, r0, #32
 800d37c:	2b04      	cmp	r3, #4
 800d37e:	dd3b      	ble.n	800d3f8 <_dtoa_r+0x8b0>
 800d380:	9b05      	ldr	r3, [sp, #20]
 800d382:	f1c0 001c 	rsb	r0, r0, #28
 800d386:	4403      	add	r3, r0
 800d388:	9305      	str	r3, [sp, #20]
 800d38a:	4405      	add	r5, r0
 800d38c:	4480      	add	r8, r0
 800d38e:	9b05      	ldr	r3, [sp, #20]
 800d390:	2b00      	cmp	r3, #0
 800d392:	dd05      	ble.n	800d3a0 <_dtoa_r+0x858>
 800d394:	461a      	mov	r2, r3
 800d396:	9904      	ldr	r1, [sp, #16]
 800d398:	4620      	mov	r0, r4
 800d39a:	f000 fd4d 	bl	800de38 <__lshift>
 800d39e:	9004      	str	r0, [sp, #16]
 800d3a0:	f1b8 0f00 	cmp.w	r8, #0
 800d3a4:	dd05      	ble.n	800d3b2 <_dtoa_r+0x86a>
 800d3a6:	4639      	mov	r1, r7
 800d3a8:	4642      	mov	r2, r8
 800d3aa:	4620      	mov	r0, r4
 800d3ac:	f000 fd44 	bl	800de38 <__lshift>
 800d3b0:	4607      	mov	r7, r0
 800d3b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d3b4:	b353      	cbz	r3, 800d40c <_dtoa_r+0x8c4>
 800d3b6:	4639      	mov	r1, r7
 800d3b8:	9804      	ldr	r0, [sp, #16]
 800d3ba:	f000 fd91 	bl	800dee0 <__mcmp>
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	da24      	bge.n	800d40c <_dtoa_r+0x8c4>
 800d3c2:	2300      	movs	r3, #0
 800d3c4:	220a      	movs	r2, #10
 800d3c6:	9904      	ldr	r1, [sp, #16]
 800d3c8:	4620      	mov	r0, r4
 800d3ca:	f000 fbbf 	bl	800db4c <__multadd>
 800d3ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3d0:	9004      	str	r0, [sp, #16]
 800d3d2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	f000 814d 	beq.w	800d676 <_dtoa_r+0xb2e>
 800d3dc:	2300      	movs	r3, #0
 800d3de:	4631      	mov	r1, r6
 800d3e0:	220a      	movs	r2, #10
 800d3e2:	4620      	mov	r0, r4
 800d3e4:	f000 fbb2 	bl	800db4c <__multadd>
 800d3e8:	9b02      	ldr	r3, [sp, #8]
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	4606      	mov	r6, r0
 800d3ee:	dc4f      	bgt.n	800d490 <_dtoa_r+0x948>
 800d3f0:	9b06      	ldr	r3, [sp, #24]
 800d3f2:	2b02      	cmp	r3, #2
 800d3f4:	dd4c      	ble.n	800d490 <_dtoa_r+0x948>
 800d3f6:	e011      	b.n	800d41c <_dtoa_r+0x8d4>
 800d3f8:	d0c9      	beq.n	800d38e <_dtoa_r+0x846>
 800d3fa:	9a05      	ldr	r2, [sp, #20]
 800d3fc:	331c      	adds	r3, #28
 800d3fe:	441a      	add	r2, r3
 800d400:	9205      	str	r2, [sp, #20]
 800d402:	441d      	add	r5, r3
 800d404:	4498      	add	r8, r3
 800d406:	e7c2      	b.n	800d38e <_dtoa_r+0x846>
 800d408:	4603      	mov	r3, r0
 800d40a:	e7f6      	b.n	800d3fa <_dtoa_r+0x8b2>
 800d40c:	f1b9 0f00 	cmp.w	r9, #0
 800d410:	dc38      	bgt.n	800d484 <_dtoa_r+0x93c>
 800d412:	9b06      	ldr	r3, [sp, #24]
 800d414:	2b02      	cmp	r3, #2
 800d416:	dd35      	ble.n	800d484 <_dtoa_r+0x93c>
 800d418:	f8cd 9008 	str.w	r9, [sp, #8]
 800d41c:	9b02      	ldr	r3, [sp, #8]
 800d41e:	b963      	cbnz	r3, 800d43a <_dtoa_r+0x8f2>
 800d420:	4639      	mov	r1, r7
 800d422:	2205      	movs	r2, #5
 800d424:	4620      	mov	r0, r4
 800d426:	f000 fb91 	bl	800db4c <__multadd>
 800d42a:	4601      	mov	r1, r0
 800d42c:	4607      	mov	r7, r0
 800d42e:	9804      	ldr	r0, [sp, #16]
 800d430:	f000 fd56 	bl	800dee0 <__mcmp>
 800d434:	2800      	cmp	r0, #0
 800d436:	f73f adcc 	bgt.w	800cfd2 <_dtoa_r+0x48a>
 800d43a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d43c:	465d      	mov	r5, fp
 800d43e:	ea6f 0a03 	mvn.w	sl, r3
 800d442:	f04f 0900 	mov.w	r9, #0
 800d446:	4639      	mov	r1, r7
 800d448:	4620      	mov	r0, r4
 800d44a:	f000 fb68 	bl	800db1e <_Bfree>
 800d44e:	2e00      	cmp	r6, #0
 800d450:	f43f aeb7 	beq.w	800d1c2 <_dtoa_r+0x67a>
 800d454:	f1b9 0f00 	cmp.w	r9, #0
 800d458:	d005      	beq.n	800d466 <_dtoa_r+0x91e>
 800d45a:	45b1      	cmp	r9, r6
 800d45c:	d003      	beq.n	800d466 <_dtoa_r+0x91e>
 800d45e:	4649      	mov	r1, r9
 800d460:	4620      	mov	r0, r4
 800d462:	f000 fb5c 	bl	800db1e <_Bfree>
 800d466:	4631      	mov	r1, r6
 800d468:	4620      	mov	r0, r4
 800d46a:	f000 fb58 	bl	800db1e <_Bfree>
 800d46e:	e6a8      	b.n	800d1c2 <_dtoa_r+0x67a>
 800d470:	2700      	movs	r7, #0
 800d472:	463e      	mov	r6, r7
 800d474:	e7e1      	b.n	800d43a <_dtoa_r+0x8f2>
 800d476:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d47a:	463e      	mov	r6, r7
 800d47c:	e5a9      	b.n	800cfd2 <_dtoa_r+0x48a>
 800d47e:	bf00      	nop
 800d480:	40240000 	.word	0x40240000
 800d484:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d486:	f8cd 9008 	str.w	r9, [sp, #8]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	f000 80fa 	beq.w	800d684 <_dtoa_r+0xb3c>
 800d490:	2d00      	cmp	r5, #0
 800d492:	dd05      	ble.n	800d4a0 <_dtoa_r+0x958>
 800d494:	4631      	mov	r1, r6
 800d496:	462a      	mov	r2, r5
 800d498:	4620      	mov	r0, r4
 800d49a:	f000 fccd 	bl	800de38 <__lshift>
 800d49e:	4606      	mov	r6, r0
 800d4a0:	9b07      	ldr	r3, [sp, #28]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d04c      	beq.n	800d540 <_dtoa_r+0x9f8>
 800d4a6:	6871      	ldr	r1, [r6, #4]
 800d4a8:	4620      	mov	r0, r4
 800d4aa:	f000 fb04 	bl	800dab6 <_Balloc>
 800d4ae:	6932      	ldr	r2, [r6, #16]
 800d4b0:	3202      	adds	r2, #2
 800d4b2:	4605      	mov	r5, r0
 800d4b4:	0092      	lsls	r2, r2, #2
 800d4b6:	f106 010c 	add.w	r1, r6, #12
 800d4ba:	300c      	adds	r0, #12
 800d4bc:	f000 faf0 	bl	800daa0 <memcpy>
 800d4c0:	2201      	movs	r2, #1
 800d4c2:	4629      	mov	r1, r5
 800d4c4:	4620      	mov	r0, r4
 800d4c6:	f000 fcb7 	bl	800de38 <__lshift>
 800d4ca:	9b00      	ldr	r3, [sp, #0]
 800d4cc:	f8cd b014 	str.w	fp, [sp, #20]
 800d4d0:	f003 0301 	and.w	r3, r3, #1
 800d4d4:	46b1      	mov	r9, r6
 800d4d6:	9307      	str	r3, [sp, #28]
 800d4d8:	4606      	mov	r6, r0
 800d4da:	4639      	mov	r1, r7
 800d4dc:	9804      	ldr	r0, [sp, #16]
 800d4de:	f7ff faa7 	bl	800ca30 <quorem>
 800d4e2:	4649      	mov	r1, r9
 800d4e4:	4605      	mov	r5, r0
 800d4e6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d4ea:	9804      	ldr	r0, [sp, #16]
 800d4ec:	f000 fcf8 	bl	800dee0 <__mcmp>
 800d4f0:	4632      	mov	r2, r6
 800d4f2:	9000      	str	r0, [sp, #0]
 800d4f4:	4639      	mov	r1, r7
 800d4f6:	4620      	mov	r0, r4
 800d4f8:	f000 fd0c 	bl	800df14 <__mdiff>
 800d4fc:	68c3      	ldr	r3, [r0, #12]
 800d4fe:	4602      	mov	r2, r0
 800d500:	bb03      	cbnz	r3, 800d544 <_dtoa_r+0x9fc>
 800d502:	4601      	mov	r1, r0
 800d504:	9008      	str	r0, [sp, #32]
 800d506:	9804      	ldr	r0, [sp, #16]
 800d508:	f000 fcea 	bl	800dee0 <__mcmp>
 800d50c:	9a08      	ldr	r2, [sp, #32]
 800d50e:	4603      	mov	r3, r0
 800d510:	4611      	mov	r1, r2
 800d512:	4620      	mov	r0, r4
 800d514:	9308      	str	r3, [sp, #32]
 800d516:	f000 fb02 	bl	800db1e <_Bfree>
 800d51a:	9b08      	ldr	r3, [sp, #32]
 800d51c:	b9a3      	cbnz	r3, 800d548 <_dtoa_r+0xa00>
 800d51e:	9a06      	ldr	r2, [sp, #24]
 800d520:	b992      	cbnz	r2, 800d548 <_dtoa_r+0xa00>
 800d522:	9a07      	ldr	r2, [sp, #28]
 800d524:	b982      	cbnz	r2, 800d548 <_dtoa_r+0xa00>
 800d526:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d52a:	d029      	beq.n	800d580 <_dtoa_r+0xa38>
 800d52c:	9b00      	ldr	r3, [sp, #0]
 800d52e:	2b00      	cmp	r3, #0
 800d530:	dd01      	ble.n	800d536 <_dtoa_r+0x9ee>
 800d532:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800d536:	9b05      	ldr	r3, [sp, #20]
 800d538:	1c5d      	adds	r5, r3, #1
 800d53a:	f883 8000 	strb.w	r8, [r3]
 800d53e:	e782      	b.n	800d446 <_dtoa_r+0x8fe>
 800d540:	4630      	mov	r0, r6
 800d542:	e7c2      	b.n	800d4ca <_dtoa_r+0x982>
 800d544:	2301      	movs	r3, #1
 800d546:	e7e3      	b.n	800d510 <_dtoa_r+0x9c8>
 800d548:	9a00      	ldr	r2, [sp, #0]
 800d54a:	2a00      	cmp	r2, #0
 800d54c:	db04      	blt.n	800d558 <_dtoa_r+0xa10>
 800d54e:	d125      	bne.n	800d59c <_dtoa_r+0xa54>
 800d550:	9a06      	ldr	r2, [sp, #24]
 800d552:	bb1a      	cbnz	r2, 800d59c <_dtoa_r+0xa54>
 800d554:	9a07      	ldr	r2, [sp, #28]
 800d556:	bb0a      	cbnz	r2, 800d59c <_dtoa_r+0xa54>
 800d558:	2b00      	cmp	r3, #0
 800d55a:	ddec      	ble.n	800d536 <_dtoa_r+0x9ee>
 800d55c:	2201      	movs	r2, #1
 800d55e:	9904      	ldr	r1, [sp, #16]
 800d560:	4620      	mov	r0, r4
 800d562:	f000 fc69 	bl	800de38 <__lshift>
 800d566:	4639      	mov	r1, r7
 800d568:	9004      	str	r0, [sp, #16]
 800d56a:	f000 fcb9 	bl	800dee0 <__mcmp>
 800d56e:	2800      	cmp	r0, #0
 800d570:	dc03      	bgt.n	800d57a <_dtoa_r+0xa32>
 800d572:	d1e0      	bne.n	800d536 <_dtoa_r+0x9ee>
 800d574:	f018 0f01 	tst.w	r8, #1
 800d578:	d0dd      	beq.n	800d536 <_dtoa_r+0x9ee>
 800d57a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d57e:	d1d8      	bne.n	800d532 <_dtoa_r+0x9ea>
 800d580:	9b05      	ldr	r3, [sp, #20]
 800d582:	9a05      	ldr	r2, [sp, #20]
 800d584:	1c5d      	adds	r5, r3, #1
 800d586:	2339      	movs	r3, #57	; 0x39
 800d588:	7013      	strb	r3, [r2, #0]
 800d58a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d58e:	2b39      	cmp	r3, #57	; 0x39
 800d590:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d594:	d04f      	beq.n	800d636 <_dtoa_r+0xaee>
 800d596:	3301      	adds	r3, #1
 800d598:	7013      	strb	r3, [r2, #0]
 800d59a:	e754      	b.n	800d446 <_dtoa_r+0x8fe>
 800d59c:	9a05      	ldr	r2, [sp, #20]
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	f102 0501 	add.w	r5, r2, #1
 800d5a4:	dd06      	ble.n	800d5b4 <_dtoa_r+0xa6c>
 800d5a6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800d5aa:	d0e9      	beq.n	800d580 <_dtoa_r+0xa38>
 800d5ac:	f108 0801 	add.w	r8, r8, #1
 800d5b0:	9b05      	ldr	r3, [sp, #20]
 800d5b2:	e7c2      	b.n	800d53a <_dtoa_r+0x9f2>
 800d5b4:	9a02      	ldr	r2, [sp, #8]
 800d5b6:	f805 8c01 	strb.w	r8, [r5, #-1]
 800d5ba:	eba5 030b 	sub.w	r3, r5, fp
 800d5be:	4293      	cmp	r3, r2
 800d5c0:	d021      	beq.n	800d606 <_dtoa_r+0xabe>
 800d5c2:	2300      	movs	r3, #0
 800d5c4:	220a      	movs	r2, #10
 800d5c6:	9904      	ldr	r1, [sp, #16]
 800d5c8:	4620      	mov	r0, r4
 800d5ca:	f000 fabf 	bl	800db4c <__multadd>
 800d5ce:	45b1      	cmp	r9, r6
 800d5d0:	9004      	str	r0, [sp, #16]
 800d5d2:	f04f 0300 	mov.w	r3, #0
 800d5d6:	f04f 020a 	mov.w	r2, #10
 800d5da:	4649      	mov	r1, r9
 800d5dc:	4620      	mov	r0, r4
 800d5de:	d105      	bne.n	800d5ec <_dtoa_r+0xaa4>
 800d5e0:	f000 fab4 	bl	800db4c <__multadd>
 800d5e4:	4681      	mov	r9, r0
 800d5e6:	4606      	mov	r6, r0
 800d5e8:	9505      	str	r5, [sp, #20]
 800d5ea:	e776      	b.n	800d4da <_dtoa_r+0x992>
 800d5ec:	f000 faae 	bl	800db4c <__multadd>
 800d5f0:	4631      	mov	r1, r6
 800d5f2:	4681      	mov	r9, r0
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	220a      	movs	r2, #10
 800d5f8:	4620      	mov	r0, r4
 800d5fa:	f000 faa7 	bl	800db4c <__multadd>
 800d5fe:	4606      	mov	r6, r0
 800d600:	e7f2      	b.n	800d5e8 <_dtoa_r+0xaa0>
 800d602:	f04f 0900 	mov.w	r9, #0
 800d606:	2201      	movs	r2, #1
 800d608:	9904      	ldr	r1, [sp, #16]
 800d60a:	4620      	mov	r0, r4
 800d60c:	f000 fc14 	bl	800de38 <__lshift>
 800d610:	4639      	mov	r1, r7
 800d612:	9004      	str	r0, [sp, #16]
 800d614:	f000 fc64 	bl	800dee0 <__mcmp>
 800d618:	2800      	cmp	r0, #0
 800d61a:	dcb6      	bgt.n	800d58a <_dtoa_r+0xa42>
 800d61c:	d102      	bne.n	800d624 <_dtoa_r+0xadc>
 800d61e:	f018 0f01 	tst.w	r8, #1
 800d622:	d1b2      	bne.n	800d58a <_dtoa_r+0xa42>
 800d624:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d628:	2b30      	cmp	r3, #48	; 0x30
 800d62a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d62e:	f47f af0a 	bne.w	800d446 <_dtoa_r+0x8fe>
 800d632:	4615      	mov	r5, r2
 800d634:	e7f6      	b.n	800d624 <_dtoa_r+0xadc>
 800d636:	4593      	cmp	fp, r2
 800d638:	d105      	bne.n	800d646 <_dtoa_r+0xafe>
 800d63a:	2331      	movs	r3, #49	; 0x31
 800d63c:	f10a 0a01 	add.w	sl, sl, #1
 800d640:	f88b 3000 	strb.w	r3, [fp]
 800d644:	e6ff      	b.n	800d446 <_dtoa_r+0x8fe>
 800d646:	4615      	mov	r5, r2
 800d648:	e79f      	b.n	800d58a <_dtoa_r+0xa42>
 800d64a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800d6b0 <_dtoa_r+0xb68>
 800d64e:	e007      	b.n	800d660 <_dtoa_r+0xb18>
 800d650:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d652:	f8df b060 	ldr.w	fp, [pc, #96]	; 800d6b4 <_dtoa_r+0xb6c>
 800d656:	b11b      	cbz	r3, 800d660 <_dtoa_r+0xb18>
 800d658:	f10b 0308 	add.w	r3, fp, #8
 800d65c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d65e:	6013      	str	r3, [r2, #0]
 800d660:	4658      	mov	r0, fp
 800d662:	b017      	add	sp, #92	; 0x5c
 800d664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d668:	9b06      	ldr	r3, [sp, #24]
 800d66a:	2b01      	cmp	r3, #1
 800d66c:	f77f ae35 	ble.w	800d2da <_dtoa_r+0x792>
 800d670:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d672:	9307      	str	r3, [sp, #28]
 800d674:	e649      	b.n	800d30a <_dtoa_r+0x7c2>
 800d676:	9b02      	ldr	r3, [sp, #8]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	dc03      	bgt.n	800d684 <_dtoa_r+0xb3c>
 800d67c:	9b06      	ldr	r3, [sp, #24]
 800d67e:	2b02      	cmp	r3, #2
 800d680:	f73f aecc 	bgt.w	800d41c <_dtoa_r+0x8d4>
 800d684:	465d      	mov	r5, fp
 800d686:	4639      	mov	r1, r7
 800d688:	9804      	ldr	r0, [sp, #16]
 800d68a:	f7ff f9d1 	bl	800ca30 <quorem>
 800d68e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800d692:	f805 8b01 	strb.w	r8, [r5], #1
 800d696:	9a02      	ldr	r2, [sp, #8]
 800d698:	eba5 030b 	sub.w	r3, r5, fp
 800d69c:	429a      	cmp	r2, r3
 800d69e:	ddb0      	ble.n	800d602 <_dtoa_r+0xaba>
 800d6a0:	2300      	movs	r3, #0
 800d6a2:	220a      	movs	r2, #10
 800d6a4:	9904      	ldr	r1, [sp, #16]
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	f000 fa50 	bl	800db4c <__multadd>
 800d6ac:	9004      	str	r0, [sp, #16]
 800d6ae:	e7ea      	b.n	800d686 <_dtoa_r+0xb3e>
 800d6b0:	0800edc4 	.word	0x0800edc4
 800d6b4:	0800ede8 	.word	0x0800ede8

0800d6b8 <__sflush_r>:
 800d6b8:	898a      	ldrh	r2, [r1, #12]
 800d6ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d6be:	4605      	mov	r5, r0
 800d6c0:	0710      	lsls	r0, r2, #28
 800d6c2:	460c      	mov	r4, r1
 800d6c4:	d458      	bmi.n	800d778 <__sflush_r+0xc0>
 800d6c6:	684b      	ldr	r3, [r1, #4]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	dc05      	bgt.n	800d6d8 <__sflush_r+0x20>
 800d6cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	dc02      	bgt.n	800d6d8 <__sflush_r+0x20>
 800d6d2:	2000      	movs	r0, #0
 800d6d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d6da:	2e00      	cmp	r6, #0
 800d6dc:	d0f9      	beq.n	800d6d2 <__sflush_r+0x1a>
 800d6de:	2300      	movs	r3, #0
 800d6e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d6e4:	682f      	ldr	r7, [r5, #0]
 800d6e6:	6a21      	ldr	r1, [r4, #32]
 800d6e8:	602b      	str	r3, [r5, #0]
 800d6ea:	d032      	beq.n	800d752 <__sflush_r+0x9a>
 800d6ec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d6ee:	89a3      	ldrh	r3, [r4, #12]
 800d6f0:	075a      	lsls	r2, r3, #29
 800d6f2:	d505      	bpl.n	800d700 <__sflush_r+0x48>
 800d6f4:	6863      	ldr	r3, [r4, #4]
 800d6f6:	1ac0      	subs	r0, r0, r3
 800d6f8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d6fa:	b10b      	cbz	r3, 800d700 <__sflush_r+0x48>
 800d6fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d6fe:	1ac0      	subs	r0, r0, r3
 800d700:	2300      	movs	r3, #0
 800d702:	4602      	mov	r2, r0
 800d704:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d706:	6a21      	ldr	r1, [r4, #32]
 800d708:	4628      	mov	r0, r5
 800d70a:	47b0      	blx	r6
 800d70c:	1c43      	adds	r3, r0, #1
 800d70e:	89a3      	ldrh	r3, [r4, #12]
 800d710:	d106      	bne.n	800d720 <__sflush_r+0x68>
 800d712:	6829      	ldr	r1, [r5, #0]
 800d714:	291d      	cmp	r1, #29
 800d716:	d848      	bhi.n	800d7aa <__sflush_r+0xf2>
 800d718:	4a29      	ldr	r2, [pc, #164]	; (800d7c0 <__sflush_r+0x108>)
 800d71a:	40ca      	lsrs	r2, r1
 800d71c:	07d6      	lsls	r6, r2, #31
 800d71e:	d544      	bpl.n	800d7aa <__sflush_r+0xf2>
 800d720:	2200      	movs	r2, #0
 800d722:	6062      	str	r2, [r4, #4]
 800d724:	04d9      	lsls	r1, r3, #19
 800d726:	6922      	ldr	r2, [r4, #16]
 800d728:	6022      	str	r2, [r4, #0]
 800d72a:	d504      	bpl.n	800d736 <__sflush_r+0x7e>
 800d72c:	1c42      	adds	r2, r0, #1
 800d72e:	d101      	bne.n	800d734 <__sflush_r+0x7c>
 800d730:	682b      	ldr	r3, [r5, #0]
 800d732:	b903      	cbnz	r3, 800d736 <__sflush_r+0x7e>
 800d734:	6560      	str	r0, [r4, #84]	; 0x54
 800d736:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d738:	602f      	str	r7, [r5, #0]
 800d73a:	2900      	cmp	r1, #0
 800d73c:	d0c9      	beq.n	800d6d2 <__sflush_r+0x1a>
 800d73e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d742:	4299      	cmp	r1, r3
 800d744:	d002      	beq.n	800d74c <__sflush_r+0x94>
 800d746:	4628      	mov	r0, r5
 800d748:	f000 fc9e 	bl	800e088 <_free_r>
 800d74c:	2000      	movs	r0, #0
 800d74e:	6360      	str	r0, [r4, #52]	; 0x34
 800d750:	e7c0      	b.n	800d6d4 <__sflush_r+0x1c>
 800d752:	2301      	movs	r3, #1
 800d754:	4628      	mov	r0, r5
 800d756:	47b0      	blx	r6
 800d758:	1c41      	adds	r1, r0, #1
 800d75a:	d1c8      	bne.n	800d6ee <__sflush_r+0x36>
 800d75c:	682b      	ldr	r3, [r5, #0]
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d0c5      	beq.n	800d6ee <__sflush_r+0x36>
 800d762:	2b1d      	cmp	r3, #29
 800d764:	d001      	beq.n	800d76a <__sflush_r+0xb2>
 800d766:	2b16      	cmp	r3, #22
 800d768:	d101      	bne.n	800d76e <__sflush_r+0xb6>
 800d76a:	602f      	str	r7, [r5, #0]
 800d76c:	e7b1      	b.n	800d6d2 <__sflush_r+0x1a>
 800d76e:	89a3      	ldrh	r3, [r4, #12]
 800d770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d774:	81a3      	strh	r3, [r4, #12]
 800d776:	e7ad      	b.n	800d6d4 <__sflush_r+0x1c>
 800d778:	690f      	ldr	r7, [r1, #16]
 800d77a:	2f00      	cmp	r7, #0
 800d77c:	d0a9      	beq.n	800d6d2 <__sflush_r+0x1a>
 800d77e:	0793      	lsls	r3, r2, #30
 800d780:	680e      	ldr	r6, [r1, #0]
 800d782:	bf08      	it	eq
 800d784:	694b      	ldreq	r3, [r1, #20]
 800d786:	600f      	str	r7, [r1, #0]
 800d788:	bf18      	it	ne
 800d78a:	2300      	movne	r3, #0
 800d78c:	eba6 0807 	sub.w	r8, r6, r7
 800d790:	608b      	str	r3, [r1, #8]
 800d792:	f1b8 0f00 	cmp.w	r8, #0
 800d796:	dd9c      	ble.n	800d6d2 <__sflush_r+0x1a>
 800d798:	4643      	mov	r3, r8
 800d79a:	463a      	mov	r2, r7
 800d79c:	6a21      	ldr	r1, [r4, #32]
 800d79e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d7a0:	4628      	mov	r0, r5
 800d7a2:	47b0      	blx	r6
 800d7a4:	2800      	cmp	r0, #0
 800d7a6:	dc06      	bgt.n	800d7b6 <__sflush_r+0xfe>
 800d7a8:	89a3      	ldrh	r3, [r4, #12]
 800d7aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7ae:	81a3      	strh	r3, [r4, #12]
 800d7b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d7b4:	e78e      	b.n	800d6d4 <__sflush_r+0x1c>
 800d7b6:	4407      	add	r7, r0
 800d7b8:	eba8 0800 	sub.w	r8, r8, r0
 800d7bc:	e7e9      	b.n	800d792 <__sflush_r+0xda>
 800d7be:	bf00      	nop
 800d7c0:	20400001 	.word	0x20400001

0800d7c4 <_fflush_r>:
 800d7c4:	b538      	push	{r3, r4, r5, lr}
 800d7c6:	690b      	ldr	r3, [r1, #16]
 800d7c8:	4605      	mov	r5, r0
 800d7ca:	460c      	mov	r4, r1
 800d7cc:	b1db      	cbz	r3, 800d806 <_fflush_r+0x42>
 800d7ce:	b118      	cbz	r0, 800d7d8 <_fflush_r+0x14>
 800d7d0:	6983      	ldr	r3, [r0, #24]
 800d7d2:	b90b      	cbnz	r3, 800d7d8 <_fflush_r+0x14>
 800d7d4:	f000 f860 	bl	800d898 <__sinit>
 800d7d8:	4b0c      	ldr	r3, [pc, #48]	; (800d80c <_fflush_r+0x48>)
 800d7da:	429c      	cmp	r4, r3
 800d7dc:	d109      	bne.n	800d7f2 <_fflush_r+0x2e>
 800d7de:	686c      	ldr	r4, [r5, #4]
 800d7e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d7e4:	b17b      	cbz	r3, 800d806 <_fflush_r+0x42>
 800d7e6:	4621      	mov	r1, r4
 800d7e8:	4628      	mov	r0, r5
 800d7ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d7ee:	f7ff bf63 	b.w	800d6b8 <__sflush_r>
 800d7f2:	4b07      	ldr	r3, [pc, #28]	; (800d810 <_fflush_r+0x4c>)
 800d7f4:	429c      	cmp	r4, r3
 800d7f6:	d101      	bne.n	800d7fc <_fflush_r+0x38>
 800d7f8:	68ac      	ldr	r4, [r5, #8]
 800d7fa:	e7f1      	b.n	800d7e0 <_fflush_r+0x1c>
 800d7fc:	4b05      	ldr	r3, [pc, #20]	; (800d814 <_fflush_r+0x50>)
 800d7fe:	429c      	cmp	r4, r3
 800d800:	bf08      	it	eq
 800d802:	68ec      	ldreq	r4, [r5, #12]
 800d804:	e7ec      	b.n	800d7e0 <_fflush_r+0x1c>
 800d806:	2000      	movs	r0, #0
 800d808:	bd38      	pop	{r3, r4, r5, pc}
 800d80a:	bf00      	nop
 800d80c:	0800ee18 	.word	0x0800ee18
 800d810:	0800ee38 	.word	0x0800ee38
 800d814:	0800edf8 	.word	0x0800edf8

0800d818 <std>:
 800d818:	2300      	movs	r3, #0
 800d81a:	b510      	push	{r4, lr}
 800d81c:	4604      	mov	r4, r0
 800d81e:	e9c0 3300 	strd	r3, r3, [r0]
 800d822:	6083      	str	r3, [r0, #8]
 800d824:	8181      	strh	r1, [r0, #12]
 800d826:	6643      	str	r3, [r0, #100]	; 0x64
 800d828:	81c2      	strh	r2, [r0, #14]
 800d82a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d82e:	6183      	str	r3, [r0, #24]
 800d830:	4619      	mov	r1, r3
 800d832:	2208      	movs	r2, #8
 800d834:	305c      	adds	r0, #92	; 0x5c
 800d836:	f7fe fb2f 	bl	800be98 <memset>
 800d83a:	4b05      	ldr	r3, [pc, #20]	; (800d850 <std+0x38>)
 800d83c:	6263      	str	r3, [r4, #36]	; 0x24
 800d83e:	4b05      	ldr	r3, [pc, #20]	; (800d854 <std+0x3c>)
 800d840:	62a3      	str	r3, [r4, #40]	; 0x28
 800d842:	4b05      	ldr	r3, [pc, #20]	; (800d858 <std+0x40>)
 800d844:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d846:	4b05      	ldr	r3, [pc, #20]	; (800d85c <std+0x44>)
 800d848:	6224      	str	r4, [r4, #32]
 800d84a:	6323      	str	r3, [r4, #48]	; 0x30
 800d84c:	bd10      	pop	{r4, pc}
 800d84e:	bf00      	nop
 800d850:	0800e49d 	.word	0x0800e49d
 800d854:	0800e4bf 	.word	0x0800e4bf
 800d858:	0800e4f7 	.word	0x0800e4f7
 800d85c:	0800e51b 	.word	0x0800e51b

0800d860 <_cleanup_r>:
 800d860:	4901      	ldr	r1, [pc, #4]	; (800d868 <_cleanup_r+0x8>)
 800d862:	f000 b885 	b.w	800d970 <_fwalk_reent>
 800d866:	bf00      	nop
 800d868:	0800d7c5 	.word	0x0800d7c5

0800d86c <__sfmoreglue>:
 800d86c:	b570      	push	{r4, r5, r6, lr}
 800d86e:	1e4a      	subs	r2, r1, #1
 800d870:	2568      	movs	r5, #104	; 0x68
 800d872:	4355      	muls	r5, r2
 800d874:	460e      	mov	r6, r1
 800d876:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d87a:	f000 fc53 	bl	800e124 <_malloc_r>
 800d87e:	4604      	mov	r4, r0
 800d880:	b140      	cbz	r0, 800d894 <__sfmoreglue+0x28>
 800d882:	2100      	movs	r1, #0
 800d884:	e9c0 1600 	strd	r1, r6, [r0]
 800d888:	300c      	adds	r0, #12
 800d88a:	60a0      	str	r0, [r4, #8]
 800d88c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d890:	f7fe fb02 	bl	800be98 <memset>
 800d894:	4620      	mov	r0, r4
 800d896:	bd70      	pop	{r4, r5, r6, pc}

0800d898 <__sinit>:
 800d898:	6983      	ldr	r3, [r0, #24]
 800d89a:	b510      	push	{r4, lr}
 800d89c:	4604      	mov	r4, r0
 800d89e:	bb33      	cbnz	r3, 800d8ee <__sinit+0x56>
 800d8a0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800d8a4:	6503      	str	r3, [r0, #80]	; 0x50
 800d8a6:	4b12      	ldr	r3, [pc, #72]	; (800d8f0 <__sinit+0x58>)
 800d8a8:	4a12      	ldr	r2, [pc, #72]	; (800d8f4 <__sinit+0x5c>)
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	6282      	str	r2, [r0, #40]	; 0x28
 800d8ae:	4298      	cmp	r0, r3
 800d8b0:	bf04      	itt	eq
 800d8b2:	2301      	moveq	r3, #1
 800d8b4:	6183      	streq	r3, [r0, #24]
 800d8b6:	f000 f81f 	bl	800d8f8 <__sfp>
 800d8ba:	6060      	str	r0, [r4, #4]
 800d8bc:	4620      	mov	r0, r4
 800d8be:	f000 f81b 	bl	800d8f8 <__sfp>
 800d8c2:	60a0      	str	r0, [r4, #8]
 800d8c4:	4620      	mov	r0, r4
 800d8c6:	f000 f817 	bl	800d8f8 <__sfp>
 800d8ca:	2200      	movs	r2, #0
 800d8cc:	60e0      	str	r0, [r4, #12]
 800d8ce:	2104      	movs	r1, #4
 800d8d0:	6860      	ldr	r0, [r4, #4]
 800d8d2:	f7ff ffa1 	bl	800d818 <std>
 800d8d6:	2201      	movs	r2, #1
 800d8d8:	2109      	movs	r1, #9
 800d8da:	68a0      	ldr	r0, [r4, #8]
 800d8dc:	f7ff ff9c 	bl	800d818 <std>
 800d8e0:	2202      	movs	r2, #2
 800d8e2:	2112      	movs	r1, #18
 800d8e4:	68e0      	ldr	r0, [r4, #12]
 800d8e6:	f7ff ff97 	bl	800d818 <std>
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	61a3      	str	r3, [r4, #24]
 800d8ee:	bd10      	pop	{r4, pc}
 800d8f0:	0800edb0 	.word	0x0800edb0
 800d8f4:	0800d861 	.word	0x0800d861

0800d8f8 <__sfp>:
 800d8f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8fa:	4b1b      	ldr	r3, [pc, #108]	; (800d968 <__sfp+0x70>)
 800d8fc:	681e      	ldr	r6, [r3, #0]
 800d8fe:	69b3      	ldr	r3, [r6, #24]
 800d900:	4607      	mov	r7, r0
 800d902:	b913      	cbnz	r3, 800d90a <__sfp+0x12>
 800d904:	4630      	mov	r0, r6
 800d906:	f7ff ffc7 	bl	800d898 <__sinit>
 800d90a:	3648      	adds	r6, #72	; 0x48
 800d90c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d910:	3b01      	subs	r3, #1
 800d912:	d503      	bpl.n	800d91c <__sfp+0x24>
 800d914:	6833      	ldr	r3, [r6, #0]
 800d916:	b133      	cbz	r3, 800d926 <__sfp+0x2e>
 800d918:	6836      	ldr	r6, [r6, #0]
 800d91a:	e7f7      	b.n	800d90c <__sfp+0x14>
 800d91c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d920:	b16d      	cbz	r5, 800d93e <__sfp+0x46>
 800d922:	3468      	adds	r4, #104	; 0x68
 800d924:	e7f4      	b.n	800d910 <__sfp+0x18>
 800d926:	2104      	movs	r1, #4
 800d928:	4638      	mov	r0, r7
 800d92a:	f7ff ff9f 	bl	800d86c <__sfmoreglue>
 800d92e:	6030      	str	r0, [r6, #0]
 800d930:	2800      	cmp	r0, #0
 800d932:	d1f1      	bne.n	800d918 <__sfp+0x20>
 800d934:	230c      	movs	r3, #12
 800d936:	603b      	str	r3, [r7, #0]
 800d938:	4604      	mov	r4, r0
 800d93a:	4620      	mov	r0, r4
 800d93c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d93e:	4b0b      	ldr	r3, [pc, #44]	; (800d96c <__sfp+0x74>)
 800d940:	6665      	str	r5, [r4, #100]	; 0x64
 800d942:	e9c4 5500 	strd	r5, r5, [r4]
 800d946:	60a5      	str	r5, [r4, #8]
 800d948:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800d94c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800d950:	2208      	movs	r2, #8
 800d952:	4629      	mov	r1, r5
 800d954:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d958:	f7fe fa9e 	bl	800be98 <memset>
 800d95c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d960:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d964:	e7e9      	b.n	800d93a <__sfp+0x42>
 800d966:	bf00      	nop
 800d968:	0800edb0 	.word	0x0800edb0
 800d96c:	ffff0001 	.word	0xffff0001

0800d970 <_fwalk_reent>:
 800d970:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d974:	4680      	mov	r8, r0
 800d976:	4689      	mov	r9, r1
 800d978:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d97c:	2600      	movs	r6, #0
 800d97e:	b914      	cbnz	r4, 800d986 <_fwalk_reent+0x16>
 800d980:	4630      	mov	r0, r6
 800d982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d986:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800d98a:	3f01      	subs	r7, #1
 800d98c:	d501      	bpl.n	800d992 <_fwalk_reent+0x22>
 800d98e:	6824      	ldr	r4, [r4, #0]
 800d990:	e7f5      	b.n	800d97e <_fwalk_reent+0xe>
 800d992:	89ab      	ldrh	r3, [r5, #12]
 800d994:	2b01      	cmp	r3, #1
 800d996:	d907      	bls.n	800d9a8 <_fwalk_reent+0x38>
 800d998:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d99c:	3301      	adds	r3, #1
 800d99e:	d003      	beq.n	800d9a8 <_fwalk_reent+0x38>
 800d9a0:	4629      	mov	r1, r5
 800d9a2:	4640      	mov	r0, r8
 800d9a4:	47c8      	blx	r9
 800d9a6:	4306      	orrs	r6, r0
 800d9a8:	3568      	adds	r5, #104	; 0x68
 800d9aa:	e7ee      	b.n	800d98a <_fwalk_reent+0x1a>

0800d9ac <_localeconv_r>:
 800d9ac:	4b04      	ldr	r3, [pc, #16]	; (800d9c0 <_localeconv_r+0x14>)
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	6a18      	ldr	r0, [r3, #32]
 800d9b2:	4b04      	ldr	r3, [pc, #16]	; (800d9c4 <_localeconv_r+0x18>)
 800d9b4:	2800      	cmp	r0, #0
 800d9b6:	bf08      	it	eq
 800d9b8:	4618      	moveq	r0, r3
 800d9ba:	30f0      	adds	r0, #240	; 0xf0
 800d9bc:	4770      	bx	lr
 800d9be:	bf00      	nop
 800d9c0:	20001214 	.word	0x20001214
 800d9c4:	20001278 	.word	0x20001278

0800d9c8 <__swhatbuf_r>:
 800d9c8:	b570      	push	{r4, r5, r6, lr}
 800d9ca:	460e      	mov	r6, r1
 800d9cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d9d0:	2900      	cmp	r1, #0
 800d9d2:	b096      	sub	sp, #88	; 0x58
 800d9d4:	4614      	mov	r4, r2
 800d9d6:	461d      	mov	r5, r3
 800d9d8:	da07      	bge.n	800d9ea <__swhatbuf_r+0x22>
 800d9da:	2300      	movs	r3, #0
 800d9dc:	602b      	str	r3, [r5, #0]
 800d9de:	89b3      	ldrh	r3, [r6, #12]
 800d9e0:	061a      	lsls	r2, r3, #24
 800d9e2:	d410      	bmi.n	800da06 <__swhatbuf_r+0x3e>
 800d9e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d9e8:	e00e      	b.n	800da08 <__swhatbuf_r+0x40>
 800d9ea:	466a      	mov	r2, sp
 800d9ec:	f000 fdbc 	bl	800e568 <_fstat_r>
 800d9f0:	2800      	cmp	r0, #0
 800d9f2:	dbf2      	blt.n	800d9da <__swhatbuf_r+0x12>
 800d9f4:	9a01      	ldr	r2, [sp, #4]
 800d9f6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d9fa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d9fe:	425a      	negs	r2, r3
 800da00:	415a      	adcs	r2, r3
 800da02:	602a      	str	r2, [r5, #0]
 800da04:	e7ee      	b.n	800d9e4 <__swhatbuf_r+0x1c>
 800da06:	2340      	movs	r3, #64	; 0x40
 800da08:	2000      	movs	r0, #0
 800da0a:	6023      	str	r3, [r4, #0]
 800da0c:	b016      	add	sp, #88	; 0x58
 800da0e:	bd70      	pop	{r4, r5, r6, pc}

0800da10 <__smakebuf_r>:
 800da10:	898b      	ldrh	r3, [r1, #12]
 800da12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800da14:	079d      	lsls	r5, r3, #30
 800da16:	4606      	mov	r6, r0
 800da18:	460c      	mov	r4, r1
 800da1a:	d507      	bpl.n	800da2c <__smakebuf_r+0x1c>
 800da1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800da20:	6023      	str	r3, [r4, #0]
 800da22:	6123      	str	r3, [r4, #16]
 800da24:	2301      	movs	r3, #1
 800da26:	6163      	str	r3, [r4, #20]
 800da28:	b002      	add	sp, #8
 800da2a:	bd70      	pop	{r4, r5, r6, pc}
 800da2c:	ab01      	add	r3, sp, #4
 800da2e:	466a      	mov	r2, sp
 800da30:	f7ff ffca 	bl	800d9c8 <__swhatbuf_r>
 800da34:	9900      	ldr	r1, [sp, #0]
 800da36:	4605      	mov	r5, r0
 800da38:	4630      	mov	r0, r6
 800da3a:	f000 fb73 	bl	800e124 <_malloc_r>
 800da3e:	b948      	cbnz	r0, 800da54 <__smakebuf_r+0x44>
 800da40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da44:	059a      	lsls	r2, r3, #22
 800da46:	d4ef      	bmi.n	800da28 <__smakebuf_r+0x18>
 800da48:	f023 0303 	bic.w	r3, r3, #3
 800da4c:	f043 0302 	orr.w	r3, r3, #2
 800da50:	81a3      	strh	r3, [r4, #12]
 800da52:	e7e3      	b.n	800da1c <__smakebuf_r+0xc>
 800da54:	4b0d      	ldr	r3, [pc, #52]	; (800da8c <__smakebuf_r+0x7c>)
 800da56:	62b3      	str	r3, [r6, #40]	; 0x28
 800da58:	89a3      	ldrh	r3, [r4, #12]
 800da5a:	6020      	str	r0, [r4, #0]
 800da5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800da60:	81a3      	strh	r3, [r4, #12]
 800da62:	9b00      	ldr	r3, [sp, #0]
 800da64:	6163      	str	r3, [r4, #20]
 800da66:	9b01      	ldr	r3, [sp, #4]
 800da68:	6120      	str	r0, [r4, #16]
 800da6a:	b15b      	cbz	r3, 800da84 <__smakebuf_r+0x74>
 800da6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da70:	4630      	mov	r0, r6
 800da72:	f000 fd8b 	bl	800e58c <_isatty_r>
 800da76:	b128      	cbz	r0, 800da84 <__smakebuf_r+0x74>
 800da78:	89a3      	ldrh	r3, [r4, #12]
 800da7a:	f023 0303 	bic.w	r3, r3, #3
 800da7e:	f043 0301 	orr.w	r3, r3, #1
 800da82:	81a3      	strh	r3, [r4, #12]
 800da84:	89a3      	ldrh	r3, [r4, #12]
 800da86:	431d      	orrs	r5, r3
 800da88:	81a5      	strh	r5, [r4, #12]
 800da8a:	e7cd      	b.n	800da28 <__smakebuf_r+0x18>
 800da8c:	0800d861 	.word	0x0800d861

0800da90 <malloc>:
 800da90:	4b02      	ldr	r3, [pc, #8]	; (800da9c <malloc+0xc>)
 800da92:	4601      	mov	r1, r0
 800da94:	6818      	ldr	r0, [r3, #0]
 800da96:	f000 bb45 	b.w	800e124 <_malloc_r>
 800da9a:	bf00      	nop
 800da9c:	20001214 	.word	0x20001214

0800daa0 <memcpy>:
 800daa0:	b510      	push	{r4, lr}
 800daa2:	1e43      	subs	r3, r0, #1
 800daa4:	440a      	add	r2, r1
 800daa6:	4291      	cmp	r1, r2
 800daa8:	d100      	bne.n	800daac <memcpy+0xc>
 800daaa:	bd10      	pop	{r4, pc}
 800daac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dab0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dab4:	e7f7      	b.n	800daa6 <memcpy+0x6>

0800dab6 <_Balloc>:
 800dab6:	b570      	push	{r4, r5, r6, lr}
 800dab8:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800daba:	4604      	mov	r4, r0
 800dabc:	460e      	mov	r6, r1
 800dabe:	b93d      	cbnz	r5, 800dad0 <_Balloc+0x1a>
 800dac0:	2010      	movs	r0, #16
 800dac2:	f7ff ffe5 	bl	800da90 <malloc>
 800dac6:	6260      	str	r0, [r4, #36]	; 0x24
 800dac8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800dacc:	6005      	str	r5, [r0, #0]
 800dace:	60c5      	str	r5, [r0, #12]
 800dad0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800dad2:	68eb      	ldr	r3, [r5, #12]
 800dad4:	b183      	cbz	r3, 800daf8 <_Balloc+0x42>
 800dad6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dad8:	68db      	ldr	r3, [r3, #12]
 800dada:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800dade:	b9b8      	cbnz	r0, 800db10 <_Balloc+0x5a>
 800dae0:	2101      	movs	r1, #1
 800dae2:	fa01 f506 	lsl.w	r5, r1, r6
 800dae6:	1d6a      	adds	r2, r5, #5
 800dae8:	0092      	lsls	r2, r2, #2
 800daea:	4620      	mov	r0, r4
 800daec:	f000 fabe 	bl	800e06c <_calloc_r>
 800daf0:	b160      	cbz	r0, 800db0c <_Balloc+0x56>
 800daf2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800daf6:	e00e      	b.n	800db16 <_Balloc+0x60>
 800daf8:	2221      	movs	r2, #33	; 0x21
 800dafa:	2104      	movs	r1, #4
 800dafc:	4620      	mov	r0, r4
 800dafe:	f000 fab5 	bl	800e06c <_calloc_r>
 800db02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800db04:	60e8      	str	r0, [r5, #12]
 800db06:	68db      	ldr	r3, [r3, #12]
 800db08:	2b00      	cmp	r3, #0
 800db0a:	d1e4      	bne.n	800dad6 <_Balloc+0x20>
 800db0c:	2000      	movs	r0, #0
 800db0e:	bd70      	pop	{r4, r5, r6, pc}
 800db10:	6802      	ldr	r2, [r0, #0]
 800db12:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800db16:	2300      	movs	r3, #0
 800db18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800db1c:	e7f7      	b.n	800db0e <_Balloc+0x58>

0800db1e <_Bfree>:
 800db1e:	b570      	push	{r4, r5, r6, lr}
 800db20:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800db22:	4606      	mov	r6, r0
 800db24:	460d      	mov	r5, r1
 800db26:	b93c      	cbnz	r4, 800db38 <_Bfree+0x1a>
 800db28:	2010      	movs	r0, #16
 800db2a:	f7ff ffb1 	bl	800da90 <malloc>
 800db2e:	6270      	str	r0, [r6, #36]	; 0x24
 800db30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800db34:	6004      	str	r4, [r0, #0]
 800db36:	60c4      	str	r4, [r0, #12]
 800db38:	b13d      	cbz	r5, 800db4a <_Bfree+0x2c>
 800db3a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800db3c:	686a      	ldr	r2, [r5, #4]
 800db3e:	68db      	ldr	r3, [r3, #12]
 800db40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800db44:	6029      	str	r1, [r5, #0]
 800db46:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800db4a:	bd70      	pop	{r4, r5, r6, pc}

0800db4c <__multadd>:
 800db4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db50:	690d      	ldr	r5, [r1, #16]
 800db52:	461f      	mov	r7, r3
 800db54:	4606      	mov	r6, r0
 800db56:	460c      	mov	r4, r1
 800db58:	f101 0c14 	add.w	ip, r1, #20
 800db5c:	2300      	movs	r3, #0
 800db5e:	f8dc 0000 	ldr.w	r0, [ip]
 800db62:	b281      	uxth	r1, r0
 800db64:	fb02 7101 	mla	r1, r2, r1, r7
 800db68:	0c0f      	lsrs	r7, r1, #16
 800db6a:	0c00      	lsrs	r0, r0, #16
 800db6c:	fb02 7000 	mla	r0, r2, r0, r7
 800db70:	b289      	uxth	r1, r1
 800db72:	3301      	adds	r3, #1
 800db74:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800db78:	429d      	cmp	r5, r3
 800db7a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800db7e:	f84c 1b04 	str.w	r1, [ip], #4
 800db82:	dcec      	bgt.n	800db5e <__multadd+0x12>
 800db84:	b1d7      	cbz	r7, 800dbbc <__multadd+0x70>
 800db86:	68a3      	ldr	r3, [r4, #8]
 800db88:	42ab      	cmp	r3, r5
 800db8a:	dc12      	bgt.n	800dbb2 <__multadd+0x66>
 800db8c:	6861      	ldr	r1, [r4, #4]
 800db8e:	4630      	mov	r0, r6
 800db90:	3101      	adds	r1, #1
 800db92:	f7ff ff90 	bl	800dab6 <_Balloc>
 800db96:	6922      	ldr	r2, [r4, #16]
 800db98:	3202      	adds	r2, #2
 800db9a:	f104 010c 	add.w	r1, r4, #12
 800db9e:	4680      	mov	r8, r0
 800dba0:	0092      	lsls	r2, r2, #2
 800dba2:	300c      	adds	r0, #12
 800dba4:	f7ff ff7c 	bl	800daa0 <memcpy>
 800dba8:	4621      	mov	r1, r4
 800dbaa:	4630      	mov	r0, r6
 800dbac:	f7ff ffb7 	bl	800db1e <_Bfree>
 800dbb0:	4644      	mov	r4, r8
 800dbb2:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800dbb6:	3501      	adds	r5, #1
 800dbb8:	615f      	str	r7, [r3, #20]
 800dbba:	6125      	str	r5, [r4, #16]
 800dbbc:	4620      	mov	r0, r4
 800dbbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800dbc2 <__hi0bits>:
 800dbc2:	0c02      	lsrs	r2, r0, #16
 800dbc4:	0412      	lsls	r2, r2, #16
 800dbc6:	4603      	mov	r3, r0
 800dbc8:	b9b2      	cbnz	r2, 800dbf8 <__hi0bits+0x36>
 800dbca:	0403      	lsls	r3, r0, #16
 800dbcc:	2010      	movs	r0, #16
 800dbce:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800dbd2:	bf04      	itt	eq
 800dbd4:	021b      	lsleq	r3, r3, #8
 800dbd6:	3008      	addeq	r0, #8
 800dbd8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800dbdc:	bf04      	itt	eq
 800dbde:	011b      	lsleq	r3, r3, #4
 800dbe0:	3004      	addeq	r0, #4
 800dbe2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800dbe6:	bf04      	itt	eq
 800dbe8:	009b      	lsleq	r3, r3, #2
 800dbea:	3002      	addeq	r0, #2
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	db06      	blt.n	800dbfe <__hi0bits+0x3c>
 800dbf0:	005b      	lsls	r3, r3, #1
 800dbf2:	d503      	bpl.n	800dbfc <__hi0bits+0x3a>
 800dbf4:	3001      	adds	r0, #1
 800dbf6:	4770      	bx	lr
 800dbf8:	2000      	movs	r0, #0
 800dbfa:	e7e8      	b.n	800dbce <__hi0bits+0xc>
 800dbfc:	2020      	movs	r0, #32
 800dbfe:	4770      	bx	lr

0800dc00 <__lo0bits>:
 800dc00:	6803      	ldr	r3, [r0, #0]
 800dc02:	f013 0207 	ands.w	r2, r3, #7
 800dc06:	4601      	mov	r1, r0
 800dc08:	d00b      	beq.n	800dc22 <__lo0bits+0x22>
 800dc0a:	07da      	lsls	r2, r3, #31
 800dc0c:	d423      	bmi.n	800dc56 <__lo0bits+0x56>
 800dc0e:	0798      	lsls	r0, r3, #30
 800dc10:	bf49      	itett	mi
 800dc12:	085b      	lsrmi	r3, r3, #1
 800dc14:	089b      	lsrpl	r3, r3, #2
 800dc16:	2001      	movmi	r0, #1
 800dc18:	600b      	strmi	r3, [r1, #0]
 800dc1a:	bf5c      	itt	pl
 800dc1c:	600b      	strpl	r3, [r1, #0]
 800dc1e:	2002      	movpl	r0, #2
 800dc20:	4770      	bx	lr
 800dc22:	b298      	uxth	r0, r3
 800dc24:	b9a8      	cbnz	r0, 800dc52 <__lo0bits+0x52>
 800dc26:	0c1b      	lsrs	r3, r3, #16
 800dc28:	2010      	movs	r0, #16
 800dc2a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800dc2e:	bf04      	itt	eq
 800dc30:	0a1b      	lsreq	r3, r3, #8
 800dc32:	3008      	addeq	r0, #8
 800dc34:	071a      	lsls	r2, r3, #28
 800dc36:	bf04      	itt	eq
 800dc38:	091b      	lsreq	r3, r3, #4
 800dc3a:	3004      	addeq	r0, #4
 800dc3c:	079a      	lsls	r2, r3, #30
 800dc3e:	bf04      	itt	eq
 800dc40:	089b      	lsreq	r3, r3, #2
 800dc42:	3002      	addeq	r0, #2
 800dc44:	07da      	lsls	r2, r3, #31
 800dc46:	d402      	bmi.n	800dc4e <__lo0bits+0x4e>
 800dc48:	085b      	lsrs	r3, r3, #1
 800dc4a:	d006      	beq.n	800dc5a <__lo0bits+0x5a>
 800dc4c:	3001      	adds	r0, #1
 800dc4e:	600b      	str	r3, [r1, #0]
 800dc50:	4770      	bx	lr
 800dc52:	4610      	mov	r0, r2
 800dc54:	e7e9      	b.n	800dc2a <__lo0bits+0x2a>
 800dc56:	2000      	movs	r0, #0
 800dc58:	4770      	bx	lr
 800dc5a:	2020      	movs	r0, #32
 800dc5c:	4770      	bx	lr

0800dc5e <__i2b>:
 800dc5e:	b510      	push	{r4, lr}
 800dc60:	460c      	mov	r4, r1
 800dc62:	2101      	movs	r1, #1
 800dc64:	f7ff ff27 	bl	800dab6 <_Balloc>
 800dc68:	2201      	movs	r2, #1
 800dc6a:	6144      	str	r4, [r0, #20]
 800dc6c:	6102      	str	r2, [r0, #16]
 800dc6e:	bd10      	pop	{r4, pc}

0800dc70 <__multiply>:
 800dc70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc74:	4614      	mov	r4, r2
 800dc76:	690a      	ldr	r2, [r1, #16]
 800dc78:	6923      	ldr	r3, [r4, #16]
 800dc7a:	429a      	cmp	r2, r3
 800dc7c:	bfb8      	it	lt
 800dc7e:	460b      	movlt	r3, r1
 800dc80:	4688      	mov	r8, r1
 800dc82:	bfbc      	itt	lt
 800dc84:	46a0      	movlt	r8, r4
 800dc86:	461c      	movlt	r4, r3
 800dc88:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800dc8c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800dc90:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dc94:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dc98:	eb07 0609 	add.w	r6, r7, r9
 800dc9c:	42b3      	cmp	r3, r6
 800dc9e:	bfb8      	it	lt
 800dca0:	3101      	addlt	r1, #1
 800dca2:	f7ff ff08 	bl	800dab6 <_Balloc>
 800dca6:	f100 0514 	add.w	r5, r0, #20
 800dcaa:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800dcae:	462b      	mov	r3, r5
 800dcb0:	2200      	movs	r2, #0
 800dcb2:	4573      	cmp	r3, lr
 800dcb4:	d316      	bcc.n	800dce4 <__multiply+0x74>
 800dcb6:	f104 0214 	add.w	r2, r4, #20
 800dcba:	f108 0114 	add.w	r1, r8, #20
 800dcbe:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800dcc2:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800dcc6:	9300      	str	r3, [sp, #0]
 800dcc8:	9b00      	ldr	r3, [sp, #0]
 800dcca:	9201      	str	r2, [sp, #4]
 800dccc:	4293      	cmp	r3, r2
 800dcce:	d80c      	bhi.n	800dcea <__multiply+0x7a>
 800dcd0:	2e00      	cmp	r6, #0
 800dcd2:	dd03      	ble.n	800dcdc <__multiply+0x6c>
 800dcd4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d05d      	beq.n	800dd98 <__multiply+0x128>
 800dcdc:	6106      	str	r6, [r0, #16]
 800dcde:	b003      	add	sp, #12
 800dce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dce4:	f843 2b04 	str.w	r2, [r3], #4
 800dce8:	e7e3      	b.n	800dcb2 <__multiply+0x42>
 800dcea:	f8b2 b000 	ldrh.w	fp, [r2]
 800dcee:	f1bb 0f00 	cmp.w	fp, #0
 800dcf2:	d023      	beq.n	800dd3c <__multiply+0xcc>
 800dcf4:	4689      	mov	r9, r1
 800dcf6:	46ac      	mov	ip, r5
 800dcf8:	f04f 0800 	mov.w	r8, #0
 800dcfc:	f859 4b04 	ldr.w	r4, [r9], #4
 800dd00:	f8dc a000 	ldr.w	sl, [ip]
 800dd04:	b2a3      	uxth	r3, r4
 800dd06:	fa1f fa8a 	uxth.w	sl, sl
 800dd0a:	fb0b a303 	mla	r3, fp, r3, sl
 800dd0e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800dd12:	f8dc 4000 	ldr.w	r4, [ip]
 800dd16:	4443      	add	r3, r8
 800dd18:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800dd1c:	fb0b 840a 	mla	r4, fp, sl, r8
 800dd20:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800dd24:	46e2      	mov	sl, ip
 800dd26:	b29b      	uxth	r3, r3
 800dd28:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800dd2c:	454f      	cmp	r7, r9
 800dd2e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800dd32:	f84a 3b04 	str.w	r3, [sl], #4
 800dd36:	d82b      	bhi.n	800dd90 <__multiply+0x120>
 800dd38:	f8cc 8004 	str.w	r8, [ip, #4]
 800dd3c:	9b01      	ldr	r3, [sp, #4]
 800dd3e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800dd42:	3204      	adds	r2, #4
 800dd44:	f1ba 0f00 	cmp.w	sl, #0
 800dd48:	d020      	beq.n	800dd8c <__multiply+0x11c>
 800dd4a:	682b      	ldr	r3, [r5, #0]
 800dd4c:	4689      	mov	r9, r1
 800dd4e:	46a8      	mov	r8, r5
 800dd50:	f04f 0b00 	mov.w	fp, #0
 800dd54:	f8b9 c000 	ldrh.w	ip, [r9]
 800dd58:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800dd5c:	fb0a 440c 	mla	r4, sl, ip, r4
 800dd60:	445c      	add	r4, fp
 800dd62:	46c4      	mov	ip, r8
 800dd64:	b29b      	uxth	r3, r3
 800dd66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800dd6a:	f84c 3b04 	str.w	r3, [ip], #4
 800dd6e:	f859 3b04 	ldr.w	r3, [r9], #4
 800dd72:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800dd76:	0c1b      	lsrs	r3, r3, #16
 800dd78:	fb0a b303 	mla	r3, sl, r3, fp
 800dd7c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800dd80:	454f      	cmp	r7, r9
 800dd82:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800dd86:	d805      	bhi.n	800dd94 <__multiply+0x124>
 800dd88:	f8c8 3004 	str.w	r3, [r8, #4]
 800dd8c:	3504      	adds	r5, #4
 800dd8e:	e79b      	b.n	800dcc8 <__multiply+0x58>
 800dd90:	46d4      	mov	ip, sl
 800dd92:	e7b3      	b.n	800dcfc <__multiply+0x8c>
 800dd94:	46e0      	mov	r8, ip
 800dd96:	e7dd      	b.n	800dd54 <__multiply+0xe4>
 800dd98:	3e01      	subs	r6, #1
 800dd9a:	e799      	b.n	800dcd0 <__multiply+0x60>

0800dd9c <__pow5mult>:
 800dd9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dda0:	4615      	mov	r5, r2
 800dda2:	f012 0203 	ands.w	r2, r2, #3
 800dda6:	4606      	mov	r6, r0
 800dda8:	460f      	mov	r7, r1
 800ddaa:	d007      	beq.n	800ddbc <__pow5mult+0x20>
 800ddac:	3a01      	subs	r2, #1
 800ddae:	4c21      	ldr	r4, [pc, #132]	; (800de34 <__pow5mult+0x98>)
 800ddb0:	2300      	movs	r3, #0
 800ddb2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ddb6:	f7ff fec9 	bl	800db4c <__multadd>
 800ddba:	4607      	mov	r7, r0
 800ddbc:	10ad      	asrs	r5, r5, #2
 800ddbe:	d035      	beq.n	800de2c <__pow5mult+0x90>
 800ddc0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ddc2:	b93c      	cbnz	r4, 800ddd4 <__pow5mult+0x38>
 800ddc4:	2010      	movs	r0, #16
 800ddc6:	f7ff fe63 	bl	800da90 <malloc>
 800ddca:	6270      	str	r0, [r6, #36]	; 0x24
 800ddcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ddd0:	6004      	str	r4, [r0, #0]
 800ddd2:	60c4      	str	r4, [r0, #12]
 800ddd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ddd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dddc:	b94c      	cbnz	r4, 800ddf2 <__pow5mult+0x56>
 800ddde:	f240 2171 	movw	r1, #625	; 0x271
 800dde2:	4630      	mov	r0, r6
 800dde4:	f7ff ff3b 	bl	800dc5e <__i2b>
 800dde8:	2300      	movs	r3, #0
 800ddea:	f8c8 0008 	str.w	r0, [r8, #8]
 800ddee:	4604      	mov	r4, r0
 800ddf0:	6003      	str	r3, [r0, #0]
 800ddf2:	f04f 0800 	mov.w	r8, #0
 800ddf6:	07eb      	lsls	r3, r5, #31
 800ddf8:	d50a      	bpl.n	800de10 <__pow5mult+0x74>
 800ddfa:	4639      	mov	r1, r7
 800ddfc:	4622      	mov	r2, r4
 800ddfe:	4630      	mov	r0, r6
 800de00:	f7ff ff36 	bl	800dc70 <__multiply>
 800de04:	4639      	mov	r1, r7
 800de06:	4681      	mov	r9, r0
 800de08:	4630      	mov	r0, r6
 800de0a:	f7ff fe88 	bl	800db1e <_Bfree>
 800de0e:	464f      	mov	r7, r9
 800de10:	106d      	asrs	r5, r5, #1
 800de12:	d00b      	beq.n	800de2c <__pow5mult+0x90>
 800de14:	6820      	ldr	r0, [r4, #0]
 800de16:	b938      	cbnz	r0, 800de28 <__pow5mult+0x8c>
 800de18:	4622      	mov	r2, r4
 800de1a:	4621      	mov	r1, r4
 800de1c:	4630      	mov	r0, r6
 800de1e:	f7ff ff27 	bl	800dc70 <__multiply>
 800de22:	6020      	str	r0, [r4, #0]
 800de24:	f8c0 8000 	str.w	r8, [r0]
 800de28:	4604      	mov	r4, r0
 800de2a:	e7e4      	b.n	800ddf6 <__pow5mult+0x5a>
 800de2c:	4638      	mov	r0, r7
 800de2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de32:	bf00      	nop
 800de34:	0800ef48 	.word	0x0800ef48

0800de38 <__lshift>:
 800de38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de3c:	460c      	mov	r4, r1
 800de3e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800de42:	6923      	ldr	r3, [r4, #16]
 800de44:	6849      	ldr	r1, [r1, #4]
 800de46:	eb0a 0903 	add.w	r9, sl, r3
 800de4a:	68a3      	ldr	r3, [r4, #8]
 800de4c:	4607      	mov	r7, r0
 800de4e:	4616      	mov	r6, r2
 800de50:	f109 0501 	add.w	r5, r9, #1
 800de54:	42ab      	cmp	r3, r5
 800de56:	db32      	blt.n	800debe <__lshift+0x86>
 800de58:	4638      	mov	r0, r7
 800de5a:	f7ff fe2c 	bl	800dab6 <_Balloc>
 800de5e:	2300      	movs	r3, #0
 800de60:	4680      	mov	r8, r0
 800de62:	f100 0114 	add.w	r1, r0, #20
 800de66:	461a      	mov	r2, r3
 800de68:	4553      	cmp	r3, sl
 800de6a:	db2b      	blt.n	800dec4 <__lshift+0x8c>
 800de6c:	6920      	ldr	r0, [r4, #16]
 800de6e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800de72:	f104 0314 	add.w	r3, r4, #20
 800de76:	f016 021f 	ands.w	r2, r6, #31
 800de7a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800de7e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800de82:	d025      	beq.n	800ded0 <__lshift+0x98>
 800de84:	f1c2 0e20 	rsb	lr, r2, #32
 800de88:	2000      	movs	r0, #0
 800de8a:	681e      	ldr	r6, [r3, #0]
 800de8c:	468a      	mov	sl, r1
 800de8e:	4096      	lsls	r6, r2
 800de90:	4330      	orrs	r0, r6
 800de92:	f84a 0b04 	str.w	r0, [sl], #4
 800de96:	f853 0b04 	ldr.w	r0, [r3], #4
 800de9a:	459c      	cmp	ip, r3
 800de9c:	fa20 f00e 	lsr.w	r0, r0, lr
 800dea0:	d814      	bhi.n	800decc <__lshift+0x94>
 800dea2:	6048      	str	r0, [r1, #4]
 800dea4:	b108      	cbz	r0, 800deaa <__lshift+0x72>
 800dea6:	f109 0502 	add.w	r5, r9, #2
 800deaa:	3d01      	subs	r5, #1
 800deac:	4638      	mov	r0, r7
 800deae:	f8c8 5010 	str.w	r5, [r8, #16]
 800deb2:	4621      	mov	r1, r4
 800deb4:	f7ff fe33 	bl	800db1e <_Bfree>
 800deb8:	4640      	mov	r0, r8
 800deba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800debe:	3101      	adds	r1, #1
 800dec0:	005b      	lsls	r3, r3, #1
 800dec2:	e7c7      	b.n	800de54 <__lshift+0x1c>
 800dec4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800dec8:	3301      	adds	r3, #1
 800deca:	e7cd      	b.n	800de68 <__lshift+0x30>
 800decc:	4651      	mov	r1, sl
 800dece:	e7dc      	b.n	800de8a <__lshift+0x52>
 800ded0:	3904      	subs	r1, #4
 800ded2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ded6:	f841 2f04 	str.w	r2, [r1, #4]!
 800deda:	459c      	cmp	ip, r3
 800dedc:	d8f9      	bhi.n	800ded2 <__lshift+0x9a>
 800dede:	e7e4      	b.n	800deaa <__lshift+0x72>

0800dee0 <__mcmp>:
 800dee0:	6903      	ldr	r3, [r0, #16]
 800dee2:	690a      	ldr	r2, [r1, #16]
 800dee4:	1a9b      	subs	r3, r3, r2
 800dee6:	b530      	push	{r4, r5, lr}
 800dee8:	d10c      	bne.n	800df04 <__mcmp+0x24>
 800deea:	0092      	lsls	r2, r2, #2
 800deec:	3014      	adds	r0, #20
 800deee:	3114      	adds	r1, #20
 800def0:	1884      	adds	r4, r0, r2
 800def2:	4411      	add	r1, r2
 800def4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800def8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800defc:	4295      	cmp	r5, r2
 800defe:	d003      	beq.n	800df08 <__mcmp+0x28>
 800df00:	d305      	bcc.n	800df0e <__mcmp+0x2e>
 800df02:	2301      	movs	r3, #1
 800df04:	4618      	mov	r0, r3
 800df06:	bd30      	pop	{r4, r5, pc}
 800df08:	42a0      	cmp	r0, r4
 800df0a:	d3f3      	bcc.n	800def4 <__mcmp+0x14>
 800df0c:	e7fa      	b.n	800df04 <__mcmp+0x24>
 800df0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df12:	e7f7      	b.n	800df04 <__mcmp+0x24>

0800df14 <__mdiff>:
 800df14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df18:	460d      	mov	r5, r1
 800df1a:	4607      	mov	r7, r0
 800df1c:	4611      	mov	r1, r2
 800df1e:	4628      	mov	r0, r5
 800df20:	4614      	mov	r4, r2
 800df22:	f7ff ffdd 	bl	800dee0 <__mcmp>
 800df26:	1e06      	subs	r6, r0, #0
 800df28:	d108      	bne.n	800df3c <__mdiff+0x28>
 800df2a:	4631      	mov	r1, r6
 800df2c:	4638      	mov	r0, r7
 800df2e:	f7ff fdc2 	bl	800dab6 <_Balloc>
 800df32:	2301      	movs	r3, #1
 800df34:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800df38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df3c:	bfa4      	itt	ge
 800df3e:	4623      	movge	r3, r4
 800df40:	462c      	movge	r4, r5
 800df42:	4638      	mov	r0, r7
 800df44:	6861      	ldr	r1, [r4, #4]
 800df46:	bfa6      	itte	ge
 800df48:	461d      	movge	r5, r3
 800df4a:	2600      	movge	r6, #0
 800df4c:	2601      	movlt	r6, #1
 800df4e:	f7ff fdb2 	bl	800dab6 <_Balloc>
 800df52:	692b      	ldr	r3, [r5, #16]
 800df54:	60c6      	str	r6, [r0, #12]
 800df56:	6926      	ldr	r6, [r4, #16]
 800df58:	f105 0914 	add.w	r9, r5, #20
 800df5c:	f104 0214 	add.w	r2, r4, #20
 800df60:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800df64:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800df68:	f100 0514 	add.w	r5, r0, #20
 800df6c:	f04f 0e00 	mov.w	lr, #0
 800df70:	f852 ab04 	ldr.w	sl, [r2], #4
 800df74:	f859 4b04 	ldr.w	r4, [r9], #4
 800df78:	fa1e f18a 	uxtah	r1, lr, sl
 800df7c:	b2a3      	uxth	r3, r4
 800df7e:	1ac9      	subs	r1, r1, r3
 800df80:	0c23      	lsrs	r3, r4, #16
 800df82:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800df86:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800df8a:	b289      	uxth	r1, r1
 800df8c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800df90:	45c8      	cmp	r8, r9
 800df92:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800df96:	4694      	mov	ip, r2
 800df98:	f845 3b04 	str.w	r3, [r5], #4
 800df9c:	d8e8      	bhi.n	800df70 <__mdiff+0x5c>
 800df9e:	45bc      	cmp	ip, r7
 800dfa0:	d304      	bcc.n	800dfac <__mdiff+0x98>
 800dfa2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800dfa6:	b183      	cbz	r3, 800dfca <__mdiff+0xb6>
 800dfa8:	6106      	str	r6, [r0, #16]
 800dfaa:	e7c5      	b.n	800df38 <__mdiff+0x24>
 800dfac:	f85c 1b04 	ldr.w	r1, [ip], #4
 800dfb0:	fa1e f381 	uxtah	r3, lr, r1
 800dfb4:	141a      	asrs	r2, r3, #16
 800dfb6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800dfba:	b29b      	uxth	r3, r3
 800dfbc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dfc0:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800dfc4:	f845 3b04 	str.w	r3, [r5], #4
 800dfc8:	e7e9      	b.n	800df9e <__mdiff+0x8a>
 800dfca:	3e01      	subs	r6, #1
 800dfcc:	e7e9      	b.n	800dfa2 <__mdiff+0x8e>

0800dfce <__d2b>:
 800dfce:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dfd2:	460e      	mov	r6, r1
 800dfd4:	2101      	movs	r1, #1
 800dfd6:	ec59 8b10 	vmov	r8, r9, d0
 800dfda:	4615      	mov	r5, r2
 800dfdc:	f7ff fd6b 	bl	800dab6 <_Balloc>
 800dfe0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800dfe4:	4607      	mov	r7, r0
 800dfe6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dfea:	bb34      	cbnz	r4, 800e03a <__d2b+0x6c>
 800dfec:	9301      	str	r3, [sp, #4]
 800dfee:	f1b8 0300 	subs.w	r3, r8, #0
 800dff2:	d027      	beq.n	800e044 <__d2b+0x76>
 800dff4:	a802      	add	r0, sp, #8
 800dff6:	f840 3d08 	str.w	r3, [r0, #-8]!
 800dffa:	f7ff fe01 	bl	800dc00 <__lo0bits>
 800dffe:	9900      	ldr	r1, [sp, #0]
 800e000:	b1f0      	cbz	r0, 800e040 <__d2b+0x72>
 800e002:	9a01      	ldr	r2, [sp, #4]
 800e004:	f1c0 0320 	rsb	r3, r0, #32
 800e008:	fa02 f303 	lsl.w	r3, r2, r3
 800e00c:	430b      	orrs	r3, r1
 800e00e:	40c2      	lsrs	r2, r0
 800e010:	617b      	str	r3, [r7, #20]
 800e012:	9201      	str	r2, [sp, #4]
 800e014:	9b01      	ldr	r3, [sp, #4]
 800e016:	61bb      	str	r3, [r7, #24]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	bf14      	ite	ne
 800e01c:	2102      	movne	r1, #2
 800e01e:	2101      	moveq	r1, #1
 800e020:	6139      	str	r1, [r7, #16]
 800e022:	b1c4      	cbz	r4, 800e056 <__d2b+0x88>
 800e024:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e028:	4404      	add	r4, r0
 800e02a:	6034      	str	r4, [r6, #0]
 800e02c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e030:	6028      	str	r0, [r5, #0]
 800e032:	4638      	mov	r0, r7
 800e034:	b003      	add	sp, #12
 800e036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e03a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e03e:	e7d5      	b.n	800dfec <__d2b+0x1e>
 800e040:	6179      	str	r1, [r7, #20]
 800e042:	e7e7      	b.n	800e014 <__d2b+0x46>
 800e044:	a801      	add	r0, sp, #4
 800e046:	f7ff fddb 	bl	800dc00 <__lo0bits>
 800e04a:	9b01      	ldr	r3, [sp, #4]
 800e04c:	617b      	str	r3, [r7, #20]
 800e04e:	2101      	movs	r1, #1
 800e050:	6139      	str	r1, [r7, #16]
 800e052:	3020      	adds	r0, #32
 800e054:	e7e5      	b.n	800e022 <__d2b+0x54>
 800e056:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e05a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e05e:	6030      	str	r0, [r6, #0]
 800e060:	6918      	ldr	r0, [r3, #16]
 800e062:	f7ff fdae 	bl	800dbc2 <__hi0bits>
 800e066:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e06a:	e7e1      	b.n	800e030 <__d2b+0x62>

0800e06c <_calloc_r>:
 800e06c:	b538      	push	{r3, r4, r5, lr}
 800e06e:	fb02 f401 	mul.w	r4, r2, r1
 800e072:	4621      	mov	r1, r4
 800e074:	f000 f856 	bl	800e124 <_malloc_r>
 800e078:	4605      	mov	r5, r0
 800e07a:	b118      	cbz	r0, 800e084 <_calloc_r+0x18>
 800e07c:	4622      	mov	r2, r4
 800e07e:	2100      	movs	r1, #0
 800e080:	f7fd ff0a 	bl	800be98 <memset>
 800e084:	4628      	mov	r0, r5
 800e086:	bd38      	pop	{r3, r4, r5, pc}

0800e088 <_free_r>:
 800e088:	b538      	push	{r3, r4, r5, lr}
 800e08a:	4605      	mov	r5, r0
 800e08c:	2900      	cmp	r1, #0
 800e08e:	d045      	beq.n	800e11c <_free_r+0x94>
 800e090:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e094:	1f0c      	subs	r4, r1, #4
 800e096:	2b00      	cmp	r3, #0
 800e098:	bfb8      	it	lt
 800e09a:	18e4      	addlt	r4, r4, r3
 800e09c:	f000 fac3 	bl	800e626 <__malloc_lock>
 800e0a0:	4a1f      	ldr	r2, [pc, #124]	; (800e120 <_free_r+0x98>)
 800e0a2:	6813      	ldr	r3, [r2, #0]
 800e0a4:	4610      	mov	r0, r2
 800e0a6:	b933      	cbnz	r3, 800e0b6 <_free_r+0x2e>
 800e0a8:	6063      	str	r3, [r4, #4]
 800e0aa:	6014      	str	r4, [r2, #0]
 800e0ac:	4628      	mov	r0, r5
 800e0ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0b2:	f000 bab9 	b.w	800e628 <__malloc_unlock>
 800e0b6:	42a3      	cmp	r3, r4
 800e0b8:	d90c      	bls.n	800e0d4 <_free_r+0x4c>
 800e0ba:	6821      	ldr	r1, [r4, #0]
 800e0bc:	1862      	adds	r2, r4, r1
 800e0be:	4293      	cmp	r3, r2
 800e0c0:	bf04      	itt	eq
 800e0c2:	681a      	ldreq	r2, [r3, #0]
 800e0c4:	685b      	ldreq	r3, [r3, #4]
 800e0c6:	6063      	str	r3, [r4, #4]
 800e0c8:	bf04      	itt	eq
 800e0ca:	1852      	addeq	r2, r2, r1
 800e0cc:	6022      	streq	r2, [r4, #0]
 800e0ce:	6004      	str	r4, [r0, #0]
 800e0d0:	e7ec      	b.n	800e0ac <_free_r+0x24>
 800e0d2:	4613      	mov	r3, r2
 800e0d4:	685a      	ldr	r2, [r3, #4]
 800e0d6:	b10a      	cbz	r2, 800e0dc <_free_r+0x54>
 800e0d8:	42a2      	cmp	r2, r4
 800e0da:	d9fa      	bls.n	800e0d2 <_free_r+0x4a>
 800e0dc:	6819      	ldr	r1, [r3, #0]
 800e0de:	1858      	adds	r0, r3, r1
 800e0e0:	42a0      	cmp	r0, r4
 800e0e2:	d10b      	bne.n	800e0fc <_free_r+0x74>
 800e0e4:	6820      	ldr	r0, [r4, #0]
 800e0e6:	4401      	add	r1, r0
 800e0e8:	1858      	adds	r0, r3, r1
 800e0ea:	4282      	cmp	r2, r0
 800e0ec:	6019      	str	r1, [r3, #0]
 800e0ee:	d1dd      	bne.n	800e0ac <_free_r+0x24>
 800e0f0:	6810      	ldr	r0, [r2, #0]
 800e0f2:	6852      	ldr	r2, [r2, #4]
 800e0f4:	605a      	str	r2, [r3, #4]
 800e0f6:	4401      	add	r1, r0
 800e0f8:	6019      	str	r1, [r3, #0]
 800e0fa:	e7d7      	b.n	800e0ac <_free_r+0x24>
 800e0fc:	d902      	bls.n	800e104 <_free_r+0x7c>
 800e0fe:	230c      	movs	r3, #12
 800e100:	602b      	str	r3, [r5, #0]
 800e102:	e7d3      	b.n	800e0ac <_free_r+0x24>
 800e104:	6820      	ldr	r0, [r4, #0]
 800e106:	1821      	adds	r1, r4, r0
 800e108:	428a      	cmp	r2, r1
 800e10a:	bf04      	itt	eq
 800e10c:	6811      	ldreq	r1, [r2, #0]
 800e10e:	6852      	ldreq	r2, [r2, #4]
 800e110:	6062      	str	r2, [r4, #4]
 800e112:	bf04      	itt	eq
 800e114:	1809      	addeq	r1, r1, r0
 800e116:	6021      	streq	r1, [r4, #0]
 800e118:	605c      	str	r4, [r3, #4]
 800e11a:	e7c7      	b.n	800e0ac <_free_r+0x24>
 800e11c:	bd38      	pop	{r3, r4, r5, pc}
 800e11e:	bf00      	nop
 800e120:	20001414 	.word	0x20001414

0800e124 <_malloc_r>:
 800e124:	b570      	push	{r4, r5, r6, lr}
 800e126:	1ccd      	adds	r5, r1, #3
 800e128:	f025 0503 	bic.w	r5, r5, #3
 800e12c:	3508      	adds	r5, #8
 800e12e:	2d0c      	cmp	r5, #12
 800e130:	bf38      	it	cc
 800e132:	250c      	movcc	r5, #12
 800e134:	2d00      	cmp	r5, #0
 800e136:	4606      	mov	r6, r0
 800e138:	db01      	blt.n	800e13e <_malloc_r+0x1a>
 800e13a:	42a9      	cmp	r1, r5
 800e13c:	d903      	bls.n	800e146 <_malloc_r+0x22>
 800e13e:	230c      	movs	r3, #12
 800e140:	6033      	str	r3, [r6, #0]
 800e142:	2000      	movs	r0, #0
 800e144:	bd70      	pop	{r4, r5, r6, pc}
 800e146:	f000 fa6e 	bl	800e626 <__malloc_lock>
 800e14a:	4a21      	ldr	r2, [pc, #132]	; (800e1d0 <_malloc_r+0xac>)
 800e14c:	6814      	ldr	r4, [r2, #0]
 800e14e:	4621      	mov	r1, r4
 800e150:	b991      	cbnz	r1, 800e178 <_malloc_r+0x54>
 800e152:	4c20      	ldr	r4, [pc, #128]	; (800e1d4 <_malloc_r+0xb0>)
 800e154:	6823      	ldr	r3, [r4, #0]
 800e156:	b91b      	cbnz	r3, 800e160 <_malloc_r+0x3c>
 800e158:	4630      	mov	r0, r6
 800e15a:	f000 f98f 	bl	800e47c <_sbrk_r>
 800e15e:	6020      	str	r0, [r4, #0]
 800e160:	4629      	mov	r1, r5
 800e162:	4630      	mov	r0, r6
 800e164:	f000 f98a 	bl	800e47c <_sbrk_r>
 800e168:	1c43      	adds	r3, r0, #1
 800e16a:	d124      	bne.n	800e1b6 <_malloc_r+0x92>
 800e16c:	230c      	movs	r3, #12
 800e16e:	6033      	str	r3, [r6, #0]
 800e170:	4630      	mov	r0, r6
 800e172:	f000 fa59 	bl	800e628 <__malloc_unlock>
 800e176:	e7e4      	b.n	800e142 <_malloc_r+0x1e>
 800e178:	680b      	ldr	r3, [r1, #0]
 800e17a:	1b5b      	subs	r3, r3, r5
 800e17c:	d418      	bmi.n	800e1b0 <_malloc_r+0x8c>
 800e17e:	2b0b      	cmp	r3, #11
 800e180:	d90f      	bls.n	800e1a2 <_malloc_r+0x7e>
 800e182:	600b      	str	r3, [r1, #0]
 800e184:	50cd      	str	r5, [r1, r3]
 800e186:	18cc      	adds	r4, r1, r3
 800e188:	4630      	mov	r0, r6
 800e18a:	f000 fa4d 	bl	800e628 <__malloc_unlock>
 800e18e:	f104 000b 	add.w	r0, r4, #11
 800e192:	1d23      	adds	r3, r4, #4
 800e194:	f020 0007 	bic.w	r0, r0, #7
 800e198:	1ac3      	subs	r3, r0, r3
 800e19a:	d0d3      	beq.n	800e144 <_malloc_r+0x20>
 800e19c:	425a      	negs	r2, r3
 800e19e:	50e2      	str	r2, [r4, r3]
 800e1a0:	e7d0      	b.n	800e144 <_malloc_r+0x20>
 800e1a2:	428c      	cmp	r4, r1
 800e1a4:	684b      	ldr	r3, [r1, #4]
 800e1a6:	bf16      	itet	ne
 800e1a8:	6063      	strne	r3, [r4, #4]
 800e1aa:	6013      	streq	r3, [r2, #0]
 800e1ac:	460c      	movne	r4, r1
 800e1ae:	e7eb      	b.n	800e188 <_malloc_r+0x64>
 800e1b0:	460c      	mov	r4, r1
 800e1b2:	6849      	ldr	r1, [r1, #4]
 800e1b4:	e7cc      	b.n	800e150 <_malloc_r+0x2c>
 800e1b6:	1cc4      	adds	r4, r0, #3
 800e1b8:	f024 0403 	bic.w	r4, r4, #3
 800e1bc:	42a0      	cmp	r0, r4
 800e1be:	d005      	beq.n	800e1cc <_malloc_r+0xa8>
 800e1c0:	1a21      	subs	r1, r4, r0
 800e1c2:	4630      	mov	r0, r6
 800e1c4:	f000 f95a 	bl	800e47c <_sbrk_r>
 800e1c8:	3001      	adds	r0, #1
 800e1ca:	d0cf      	beq.n	800e16c <_malloc_r+0x48>
 800e1cc:	6025      	str	r5, [r4, #0]
 800e1ce:	e7db      	b.n	800e188 <_malloc_r+0x64>
 800e1d0:	20001414 	.word	0x20001414
 800e1d4:	20001418 	.word	0x20001418

0800e1d8 <__ssputs_r>:
 800e1d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1dc:	688e      	ldr	r6, [r1, #8]
 800e1de:	429e      	cmp	r6, r3
 800e1e0:	4682      	mov	sl, r0
 800e1e2:	460c      	mov	r4, r1
 800e1e4:	4690      	mov	r8, r2
 800e1e6:	4699      	mov	r9, r3
 800e1e8:	d837      	bhi.n	800e25a <__ssputs_r+0x82>
 800e1ea:	898a      	ldrh	r2, [r1, #12]
 800e1ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e1f0:	d031      	beq.n	800e256 <__ssputs_r+0x7e>
 800e1f2:	6825      	ldr	r5, [r4, #0]
 800e1f4:	6909      	ldr	r1, [r1, #16]
 800e1f6:	1a6f      	subs	r7, r5, r1
 800e1f8:	6965      	ldr	r5, [r4, #20]
 800e1fa:	2302      	movs	r3, #2
 800e1fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e200:	fb95 f5f3 	sdiv	r5, r5, r3
 800e204:	f109 0301 	add.w	r3, r9, #1
 800e208:	443b      	add	r3, r7
 800e20a:	429d      	cmp	r5, r3
 800e20c:	bf38      	it	cc
 800e20e:	461d      	movcc	r5, r3
 800e210:	0553      	lsls	r3, r2, #21
 800e212:	d530      	bpl.n	800e276 <__ssputs_r+0x9e>
 800e214:	4629      	mov	r1, r5
 800e216:	f7ff ff85 	bl	800e124 <_malloc_r>
 800e21a:	4606      	mov	r6, r0
 800e21c:	b950      	cbnz	r0, 800e234 <__ssputs_r+0x5c>
 800e21e:	230c      	movs	r3, #12
 800e220:	f8ca 3000 	str.w	r3, [sl]
 800e224:	89a3      	ldrh	r3, [r4, #12]
 800e226:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e22a:	81a3      	strh	r3, [r4, #12]
 800e22c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e234:	463a      	mov	r2, r7
 800e236:	6921      	ldr	r1, [r4, #16]
 800e238:	f7ff fc32 	bl	800daa0 <memcpy>
 800e23c:	89a3      	ldrh	r3, [r4, #12]
 800e23e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e242:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e246:	81a3      	strh	r3, [r4, #12]
 800e248:	6126      	str	r6, [r4, #16]
 800e24a:	6165      	str	r5, [r4, #20]
 800e24c:	443e      	add	r6, r7
 800e24e:	1bed      	subs	r5, r5, r7
 800e250:	6026      	str	r6, [r4, #0]
 800e252:	60a5      	str	r5, [r4, #8]
 800e254:	464e      	mov	r6, r9
 800e256:	454e      	cmp	r6, r9
 800e258:	d900      	bls.n	800e25c <__ssputs_r+0x84>
 800e25a:	464e      	mov	r6, r9
 800e25c:	4632      	mov	r2, r6
 800e25e:	4641      	mov	r1, r8
 800e260:	6820      	ldr	r0, [r4, #0]
 800e262:	f000 f9c7 	bl	800e5f4 <memmove>
 800e266:	68a3      	ldr	r3, [r4, #8]
 800e268:	1b9b      	subs	r3, r3, r6
 800e26a:	60a3      	str	r3, [r4, #8]
 800e26c:	6823      	ldr	r3, [r4, #0]
 800e26e:	441e      	add	r6, r3
 800e270:	6026      	str	r6, [r4, #0]
 800e272:	2000      	movs	r0, #0
 800e274:	e7dc      	b.n	800e230 <__ssputs_r+0x58>
 800e276:	462a      	mov	r2, r5
 800e278:	f000 f9d7 	bl	800e62a <_realloc_r>
 800e27c:	4606      	mov	r6, r0
 800e27e:	2800      	cmp	r0, #0
 800e280:	d1e2      	bne.n	800e248 <__ssputs_r+0x70>
 800e282:	6921      	ldr	r1, [r4, #16]
 800e284:	4650      	mov	r0, sl
 800e286:	f7ff feff 	bl	800e088 <_free_r>
 800e28a:	e7c8      	b.n	800e21e <__ssputs_r+0x46>

0800e28c <_svfiprintf_r>:
 800e28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e290:	461d      	mov	r5, r3
 800e292:	898b      	ldrh	r3, [r1, #12]
 800e294:	061f      	lsls	r7, r3, #24
 800e296:	b09d      	sub	sp, #116	; 0x74
 800e298:	4680      	mov	r8, r0
 800e29a:	460c      	mov	r4, r1
 800e29c:	4616      	mov	r6, r2
 800e29e:	d50f      	bpl.n	800e2c0 <_svfiprintf_r+0x34>
 800e2a0:	690b      	ldr	r3, [r1, #16]
 800e2a2:	b96b      	cbnz	r3, 800e2c0 <_svfiprintf_r+0x34>
 800e2a4:	2140      	movs	r1, #64	; 0x40
 800e2a6:	f7ff ff3d 	bl	800e124 <_malloc_r>
 800e2aa:	6020      	str	r0, [r4, #0]
 800e2ac:	6120      	str	r0, [r4, #16]
 800e2ae:	b928      	cbnz	r0, 800e2bc <_svfiprintf_r+0x30>
 800e2b0:	230c      	movs	r3, #12
 800e2b2:	f8c8 3000 	str.w	r3, [r8]
 800e2b6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e2ba:	e0c8      	b.n	800e44e <_svfiprintf_r+0x1c2>
 800e2bc:	2340      	movs	r3, #64	; 0x40
 800e2be:	6163      	str	r3, [r4, #20]
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	9309      	str	r3, [sp, #36]	; 0x24
 800e2c4:	2320      	movs	r3, #32
 800e2c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e2ca:	2330      	movs	r3, #48	; 0x30
 800e2cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e2d0:	9503      	str	r5, [sp, #12]
 800e2d2:	f04f 0b01 	mov.w	fp, #1
 800e2d6:	4637      	mov	r7, r6
 800e2d8:	463d      	mov	r5, r7
 800e2da:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e2de:	b10b      	cbz	r3, 800e2e4 <_svfiprintf_r+0x58>
 800e2e0:	2b25      	cmp	r3, #37	; 0x25
 800e2e2:	d13e      	bne.n	800e362 <_svfiprintf_r+0xd6>
 800e2e4:	ebb7 0a06 	subs.w	sl, r7, r6
 800e2e8:	d00b      	beq.n	800e302 <_svfiprintf_r+0x76>
 800e2ea:	4653      	mov	r3, sl
 800e2ec:	4632      	mov	r2, r6
 800e2ee:	4621      	mov	r1, r4
 800e2f0:	4640      	mov	r0, r8
 800e2f2:	f7ff ff71 	bl	800e1d8 <__ssputs_r>
 800e2f6:	3001      	adds	r0, #1
 800e2f8:	f000 80a4 	beq.w	800e444 <_svfiprintf_r+0x1b8>
 800e2fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e2fe:	4453      	add	r3, sl
 800e300:	9309      	str	r3, [sp, #36]	; 0x24
 800e302:	783b      	ldrb	r3, [r7, #0]
 800e304:	2b00      	cmp	r3, #0
 800e306:	f000 809d 	beq.w	800e444 <_svfiprintf_r+0x1b8>
 800e30a:	2300      	movs	r3, #0
 800e30c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e310:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e314:	9304      	str	r3, [sp, #16]
 800e316:	9307      	str	r3, [sp, #28]
 800e318:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e31c:	931a      	str	r3, [sp, #104]	; 0x68
 800e31e:	462f      	mov	r7, r5
 800e320:	2205      	movs	r2, #5
 800e322:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e326:	4850      	ldr	r0, [pc, #320]	; (800e468 <_svfiprintf_r+0x1dc>)
 800e328:	f7f1 ff82 	bl	8000230 <memchr>
 800e32c:	9b04      	ldr	r3, [sp, #16]
 800e32e:	b9d0      	cbnz	r0, 800e366 <_svfiprintf_r+0xda>
 800e330:	06d9      	lsls	r1, r3, #27
 800e332:	bf44      	itt	mi
 800e334:	2220      	movmi	r2, #32
 800e336:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e33a:	071a      	lsls	r2, r3, #28
 800e33c:	bf44      	itt	mi
 800e33e:	222b      	movmi	r2, #43	; 0x2b
 800e340:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e344:	782a      	ldrb	r2, [r5, #0]
 800e346:	2a2a      	cmp	r2, #42	; 0x2a
 800e348:	d015      	beq.n	800e376 <_svfiprintf_r+0xea>
 800e34a:	9a07      	ldr	r2, [sp, #28]
 800e34c:	462f      	mov	r7, r5
 800e34e:	2000      	movs	r0, #0
 800e350:	250a      	movs	r5, #10
 800e352:	4639      	mov	r1, r7
 800e354:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e358:	3b30      	subs	r3, #48	; 0x30
 800e35a:	2b09      	cmp	r3, #9
 800e35c:	d94d      	bls.n	800e3fa <_svfiprintf_r+0x16e>
 800e35e:	b1b8      	cbz	r0, 800e390 <_svfiprintf_r+0x104>
 800e360:	e00f      	b.n	800e382 <_svfiprintf_r+0xf6>
 800e362:	462f      	mov	r7, r5
 800e364:	e7b8      	b.n	800e2d8 <_svfiprintf_r+0x4c>
 800e366:	4a40      	ldr	r2, [pc, #256]	; (800e468 <_svfiprintf_r+0x1dc>)
 800e368:	1a80      	subs	r0, r0, r2
 800e36a:	fa0b f000 	lsl.w	r0, fp, r0
 800e36e:	4318      	orrs	r0, r3
 800e370:	9004      	str	r0, [sp, #16]
 800e372:	463d      	mov	r5, r7
 800e374:	e7d3      	b.n	800e31e <_svfiprintf_r+0x92>
 800e376:	9a03      	ldr	r2, [sp, #12]
 800e378:	1d11      	adds	r1, r2, #4
 800e37a:	6812      	ldr	r2, [r2, #0]
 800e37c:	9103      	str	r1, [sp, #12]
 800e37e:	2a00      	cmp	r2, #0
 800e380:	db01      	blt.n	800e386 <_svfiprintf_r+0xfa>
 800e382:	9207      	str	r2, [sp, #28]
 800e384:	e004      	b.n	800e390 <_svfiprintf_r+0x104>
 800e386:	4252      	negs	r2, r2
 800e388:	f043 0302 	orr.w	r3, r3, #2
 800e38c:	9207      	str	r2, [sp, #28]
 800e38e:	9304      	str	r3, [sp, #16]
 800e390:	783b      	ldrb	r3, [r7, #0]
 800e392:	2b2e      	cmp	r3, #46	; 0x2e
 800e394:	d10c      	bne.n	800e3b0 <_svfiprintf_r+0x124>
 800e396:	787b      	ldrb	r3, [r7, #1]
 800e398:	2b2a      	cmp	r3, #42	; 0x2a
 800e39a:	d133      	bne.n	800e404 <_svfiprintf_r+0x178>
 800e39c:	9b03      	ldr	r3, [sp, #12]
 800e39e:	1d1a      	adds	r2, r3, #4
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	9203      	str	r2, [sp, #12]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	bfb8      	it	lt
 800e3a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800e3ac:	3702      	adds	r7, #2
 800e3ae:	9305      	str	r3, [sp, #20]
 800e3b0:	4d2e      	ldr	r5, [pc, #184]	; (800e46c <_svfiprintf_r+0x1e0>)
 800e3b2:	7839      	ldrb	r1, [r7, #0]
 800e3b4:	2203      	movs	r2, #3
 800e3b6:	4628      	mov	r0, r5
 800e3b8:	f7f1 ff3a 	bl	8000230 <memchr>
 800e3bc:	b138      	cbz	r0, 800e3ce <_svfiprintf_r+0x142>
 800e3be:	2340      	movs	r3, #64	; 0x40
 800e3c0:	1b40      	subs	r0, r0, r5
 800e3c2:	fa03 f000 	lsl.w	r0, r3, r0
 800e3c6:	9b04      	ldr	r3, [sp, #16]
 800e3c8:	4303      	orrs	r3, r0
 800e3ca:	3701      	adds	r7, #1
 800e3cc:	9304      	str	r3, [sp, #16]
 800e3ce:	7839      	ldrb	r1, [r7, #0]
 800e3d0:	4827      	ldr	r0, [pc, #156]	; (800e470 <_svfiprintf_r+0x1e4>)
 800e3d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e3d6:	2206      	movs	r2, #6
 800e3d8:	1c7e      	adds	r6, r7, #1
 800e3da:	f7f1 ff29 	bl	8000230 <memchr>
 800e3de:	2800      	cmp	r0, #0
 800e3e0:	d038      	beq.n	800e454 <_svfiprintf_r+0x1c8>
 800e3e2:	4b24      	ldr	r3, [pc, #144]	; (800e474 <_svfiprintf_r+0x1e8>)
 800e3e4:	bb13      	cbnz	r3, 800e42c <_svfiprintf_r+0x1a0>
 800e3e6:	9b03      	ldr	r3, [sp, #12]
 800e3e8:	3307      	adds	r3, #7
 800e3ea:	f023 0307 	bic.w	r3, r3, #7
 800e3ee:	3308      	adds	r3, #8
 800e3f0:	9303      	str	r3, [sp, #12]
 800e3f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3f4:	444b      	add	r3, r9
 800e3f6:	9309      	str	r3, [sp, #36]	; 0x24
 800e3f8:	e76d      	b.n	800e2d6 <_svfiprintf_r+0x4a>
 800e3fa:	fb05 3202 	mla	r2, r5, r2, r3
 800e3fe:	2001      	movs	r0, #1
 800e400:	460f      	mov	r7, r1
 800e402:	e7a6      	b.n	800e352 <_svfiprintf_r+0xc6>
 800e404:	2300      	movs	r3, #0
 800e406:	3701      	adds	r7, #1
 800e408:	9305      	str	r3, [sp, #20]
 800e40a:	4619      	mov	r1, r3
 800e40c:	250a      	movs	r5, #10
 800e40e:	4638      	mov	r0, r7
 800e410:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e414:	3a30      	subs	r2, #48	; 0x30
 800e416:	2a09      	cmp	r2, #9
 800e418:	d903      	bls.n	800e422 <_svfiprintf_r+0x196>
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d0c8      	beq.n	800e3b0 <_svfiprintf_r+0x124>
 800e41e:	9105      	str	r1, [sp, #20]
 800e420:	e7c6      	b.n	800e3b0 <_svfiprintf_r+0x124>
 800e422:	fb05 2101 	mla	r1, r5, r1, r2
 800e426:	2301      	movs	r3, #1
 800e428:	4607      	mov	r7, r0
 800e42a:	e7f0      	b.n	800e40e <_svfiprintf_r+0x182>
 800e42c:	ab03      	add	r3, sp, #12
 800e42e:	9300      	str	r3, [sp, #0]
 800e430:	4622      	mov	r2, r4
 800e432:	4b11      	ldr	r3, [pc, #68]	; (800e478 <_svfiprintf_r+0x1ec>)
 800e434:	a904      	add	r1, sp, #16
 800e436:	4640      	mov	r0, r8
 800e438:	f7fd fdca 	bl	800bfd0 <_printf_float>
 800e43c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800e440:	4681      	mov	r9, r0
 800e442:	d1d6      	bne.n	800e3f2 <_svfiprintf_r+0x166>
 800e444:	89a3      	ldrh	r3, [r4, #12]
 800e446:	065b      	lsls	r3, r3, #25
 800e448:	f53f af35 	bmi.w	800e2b6 <_svfiprintf_r+0x2a>
 800e44c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e44e:	b01d      	add	sp, #116	; 0x74
 800e450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e454:	ab03      	add	r3, sp, #12
 800e456:	9300      	str	r3, [sp, #0]
 800e458:	4622      	mov	r2, r4
 800e45a:	4b07      	ldr	r3, [pc, #28]	; (800e478 <_svfiprintf_r+0x1ec>)
 800e45c:	a904      	add	r1, sp, #16
 800e45e:	4640      	mov	r0, r8
 800e460:	f7fe f86c 	bl	800c53c <_printf_i>
 800e464:	e7ea      	b.n	800e43c <_svfiprintf_r+0x1b0>
 800e466:	bf00      	nop
 800e468:	0800ef54 	.word	0x0800ef54
 800e46c:	0800ef5a 	.word	0x0800ef5a
 800e470:	0800ef5e 	.word	0x0800ef5e
 800e474:	0800bfd1 	.word	0x0800bfd1
 800e478:	0800e1d9 	.word	0x0800e1d9

0800e47c <_sbrk_r>:
 800e47c:	b538      	push	{r3, r4, r5, lr}
 800e47e:	4c06      	ldr	r4, [pc, #24]	; (800e498 <_sbrk_r+0x1c>)
 800e480:	2300      	movs	r3, #0
 800e482:	4605      	mov	r5, r0
 800e484:	4608      	mov	r0, r1
 800e486:	6023      	str	r3, [r4, #0]
 800e488:	f7f6 fda2 	bl	8004fd0 <_sbrk>
 800e48c:	1c43      	adds	r3, r0, #1
 800e48e:	d102      	bne.n	800e496 <_sbrk_r+0x1a>
 800e490:	6823      	ldr	r3, [r4, #0]
 800e492:	b103      	cbz	r3, 800e496 <_sbrk_r+0x1a>
 800e494:	602b      	str	r3, [r5, #0]
 800e496:	bd38      	pop	{r3, r4, r5, pc}
 800e498:	2000187c 	.word	0x2000187c

0800e49c <__sread>:
 800e49c:	b510      	push	{r4, lr}
 800e49e:	460c      	mov	r4, r1
 800e4a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4a4:	f000 f8e8 	bl	800e678 <_read_r>
 800e4a8:	2800      	cmp	r0, #0
 800e4aa:	bfab      	itete	ge
 800e4ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e4ae:	89a3      	ldrhlt	r3, [r4, #12]
 800e4b0:	181b      	addge	r3, r3, r0
 800e4b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e4b6:	bfac      	ite	ge
 800e4b8:	6563      	strge	r3, [r4, #84]	; 0x54
 800e4ba:	81a3      	strhlt	r3, [r4, #12]
 800e4bc:	bd10      	pop	{r4, pc}

0800e4be <__swrite>:
 800e4be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e4c2:	461f      	mov	r7, r3
 800e4c4:	898b      	ldrh	r3, [r1, #12]
 800e4c6:	05db      	lsls	r3, r3, #23
 800e4c8:	4605      	mov	r5, r0
 800e4ca:	460c      	mov	r4, r1
 800e4cc:	4616      	mov	r6, r2
 800e4ce:	d505      	bpl.n	800e4dc <__swrite+0x1e>
 800e4d0:	2302      	movs	r3, #2
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4d8:	f000 f868 	bl	800e5ac <_lseek_r>
 800e4dc:	89a3      	ldrh	r3, [r4, #12]
 800e4de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e4e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e4e6:	81a3      	strh	r3, [r4, #12]
 800e4e8:	4632      	mov	r2, r6
 800e4ea:	463b      	mov	r3, r7
 800e4ec:	4628      	mov	r0, r5
 800e4ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e4f2:	f000 b817 	b.w	800e524 <_write_r>

0800e4f6 <__sseek>:
 800e4f6:	b510      	push	{r4, lr}
 800e4f8:	460c      	mov	r4, r1
 800e4fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4fe:	f000 f855 	bl	800e5ac <_lseek_r>
 800e502:	1c43      	adds	r3, r0, #1
 800e504:	89a3      	ldrh	r3, [r4, #12]
 800e506:	bf15      	itete	ne
 800e508:	6560      	strne	r0, [r4, #84]	; 0x54
 800e50a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e50e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e512:	81a3      	strheq	r3, [r4, #12]
 800e514:	bf18      	it	ne
 800e516:	81a3      	strhne	r3, [r4, #12]
 800e518:	bd10      	pop	{r4, pc}

0800e51a <__sclose>:
 800e51a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e51e:	f000 b813 	b.w	800e548 <_close_r>
	...

0800e524 <_write_r>:
 800e524:	b538      	push	{r3, r4, r5, lr}
 800e526:	4c07      	ldr	r4, [pc, #28]	; (800e544 <_write_r+0x20>)
 800e528:	4605      	mov	r5, r0
 800e52a:	4608      	mov	r0, r1
 800e52c:	4611      	mov	r1, r2
 800e52e:	2200      	movs	r2, #0
 800e530:	6022      	str	r2, [r4, #0]
 800e532:	461a      	mov	r2, r3
 800e534:	f7f6 f963 	bl	80047fe <_write>
 800e538:	1c43      	adds	r3, r0, #1
 800e53a:	d102      	bne.n	800e542 <_write_r+0x1e>
 800e53c:	6823      	ldr	r3, [r4, #0]
 800e53e:	b103      	cbz	r3, 800e542 <_write_r+0x1e>
 800e540:	602b      	str	r3, [r5, #0]
 800e542:	bd38      	pop	{r3, r4, r5, pc}
 800e544:	2000187c 	.word	0x2000187c

0800e548 <_close_r>:
 800e548:	b538      	push	{r3, r4, r5, lr}
 800e54a:	4c06      	ldr	r4, [pc, #24]	; (800e564 <_close_r+0x1c>)
 800e54c:	2300      	movs	r3, #0
 800e54e:	4605      	mov	r5, r0
 800e550:	4608      	mov	r0, r1
 800e552:	6023      	str	r3, [r4, #0]
 800e554:	f7f6 fd07 	bl	8004f66 <_close>
 800e558:	1c43      	adds	r3, r0, #1
 800e55a:	d102      	bne.n	800e562 <_close_r+0x1a>
 800e55c:	6823      	ldr	r3, [r4, #0]
 800e55e:	b103      	cbz	r3, 800e562 <_close_r+0x1a>
 800e560:	602b      	str	r3, [r5, #0]
 800e562:	bd38      	pop	{r3, r4, r5, pc}
 800e564:	2000187c 	.word	0x2000187c

0800e568 <_fstat_r>:
 800e568:	b538      	push	{r3, r4, r5, lr}
 800e56a:	4c07      	ldr	r4, [pc, #28]	; (800e588 <_fstat_r+0x20>)
 800e56c:	2300      	movs	r3, #0
 800e56e:	4605      	mov	r5, r0
 800e570:	4608      	mov	r0, r1
 800e572:	4611      	mov	r1, r2
 800e574:	6023      	str	r3, [r4, #0]
 800e576:	f7f6 fd02 	bl	8004f7e <_fstat>
 800e57a:	1c43      	adds	r3, r0, #1
 800e57c:	d102      	bne.n	800e584 <_fstat_r+0x1c>
 800e57e:	6823      	ldr	r3, [r4, #0]
 800e580:	b103      	cbz	r3, 800e584 <_fstat_r+0x1c>
 800e582:	602b      	str	r3, [r5, #0]
 800e584:	bd38      	pop	{r3, r4, r5, pc}
 800e586:	bf00      	nop
 800e588:	2000187c 	.word	0x2000187c

0800e58c <_isatty_r>:
 800e58c:	b538      	push	{r3, r4, r5, lr}
 800e58e:	4c06      	ldr	r4, [pc, #24]	; (800e5a8 <_isatty_r+0x1c>)
 800e590:	2300      	movs	r3, #0
 800e592:	4605      	mov	r5, r0
 800e594:	4608      	mov	r0, r1
 800e596:	6023      	str	r3, [r4, #0]
 800e598:	f7f6 fd01 	bl	8004f9e <_isatty>
 800e59c:	1c43      	adds	r3, r0, #1
 800e59e:	d102      	bne.n	800e5a6 <_isatty_r+0x1a>
 800e5a0:	6823      	ldr	r3, [r4, #0]
 800e5a2:	b103      	cbz	r3, 800e5a6 <_isatty_r+0x1a>
 800e5a4:	602b      	str	r3, [r5, #0]
 800e5a6:	bd38      	pop	{r3, r4, r5, pc}
 800e5a8:	2000187c 	.word	0x2000187c

0800e5ac <_lseek_r>:
 800e5ac:	b538      	push	{r3, r4, r5, lr}
 800e5ae:	4c07      	ldr	r4, [pc, #28]	; (800e5cc <_lseek_r+0x20>)
 800e5b0:	4605      	mov	r5, r0
 800e5b2:	4608      	mov	r0, r1
 800e5b4:	4611      	mov	r1, r2
 800e5b6:	2200      	movs	r2, #0
 800e5b8:	6022      	str	r2, [r4, #0]
 800e5ba:	461a      	mov	r2, r3
 800e5bc:	f7f6 fcfa 	bl	8004fb4 <_lseek>
 800e5c0:	1c43      	adds	r3, r0, #1
 800e5c2:	d102      	bne.n	800e5ca <_lseek_r+0x1e>
 800e5c4:	6823      	ldr	r3, [r4, #0]
 800e5c6:	b103      	cbz	r3, 800e5ca <_lseek_r+0x1e>
 800e5c8:	602b      	str	r3, [r5, #0]
 800e5ca:	bd38      	pop	{r3, r4, r5, pc}
 800e5cc:	2000187c 	.word	0x2000187c

0800e5d0 <__ascii_mbtowc>:
 800e5d0:	b082      	sub	sp, #8
 800e5d2:	b901      	cbnz	r1, 800e5d6 <__ascii_mbtowc+0x6>
 800e5d4:	a901      	add	r1, sp, #4
 800e5d6:	b142      	cbz	r2, 800e5ea <__ascii_mbtowc+0x1a>
 800e5d8:	b14b      	cbz	r3, 800e5ee <__ascii_mbtowc+0x1e>
 800e5da:	7813      	ldrb	r3, [r2, #0]
 800e5dc:	600b      	str	r3, [r1, #0]
 800e5de:	7812      	ldrb	r2, [r2, #0]
 800e5e0:	1c10      	adds	r0, r2, #0
 800e5e2:	bf18      	it	ne
 800e5e4:	2001      	movne	r0, #1
 800e5e6:	b002      	add	sp, #8
 800e5e8:	4770      	bx	lr
 800e5ea:	4610      	mov	r0, r2
 800e5ec:	e7fb      	b.n	800e5e6 <__ascii_mbtowc+0x16>
 800e5ee:	f06f 0001 	mvn.w	r0, #1
 800e5f2:	e7f8      	b.n	800e5e6 <__ascii_mbtowc+0x16>

0800e5f4 <memmove>:
 800e5f4:	4288      	cmp	r0, r1
 800e5f6:	b510      	push	{r4, lr}
 800e5f8:	eb01 0302 	add.w	r3, r1, r2
 800e5fc:	d807      	bhi.n	800e60e <memmove+0x1a>
 800e5fe:	1e42      	subs	r2, r0, #1
 800e600:	4299      	cmp	r1, r3
 800e602:	d00a      	beq.n	800e61a <memmove+0x26>
 800e604:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e608:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e60c:	e7f8      	b.n	800e600 <memmove+0xc>
 800e60e:	4283      	cmp	r3, r0
 800e610:	d9f5      	bls.n	800e5fe <memmove+0xa>
 800e612:	1881      	adds	r1, r0, r2
 800e614:	1ad2      	subs	r2, r2, r3
 800e616:	42d3      	cmn	r3, r2
 800e618:	d100      	bne.n	800e61c <memmove+0x28>
 800e61a:	bd10      	pop	{r4, pc}
 800e61c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e620:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e624:	e7f7      	b.n	800e616 <memmove+0x22>

0800e626 <__malloc_lock>:
 800e626:	4770      	bx	lr

0800e628 <__malloc_unlock>:
 800e628:	4770      	bx	lr

0800e62a <_realloc_r>:
 800e62a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e62c:	4607      	mov	r7, r0
 800e62e:	4614      	mov	r4, r2
 800e630:	460e      	mov	r6, r1
 800e632:	b921      	cbnz	r1, 800e63e <_realloc_r+0x14>
 800e634:	4611      	mov	r1, r2
 800e636:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e63a:	f7ff bd73 	b.w	800e124 <_malloc_r>
 800e63e:	b922      	cbnz	r2, 800e64a <_realloc_r+0x20>
 800e640:	f7ff fd22 	bl	800e088 <_free_r>
 800e644:	4625      	mov	r5, r4
 800e646:	4628      	mov	r0, r5
 800e648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e64a:	f000 f834 	bl	800e6b6 <_malloc_usable_size_r>
 800e64e:	42a0      	cmp	r0, r4
 800e650:	d20f      	bcs.n	800e672 <_realloc_r+0x48>
 800e652:	4621      	mov	r1, r4
 800e654:	4638      	mov	r0, r7
 800e656:	f7ff fd65 	bl	800e124 <_malloc_r>
 800e65a:	4605      	mov	r5, r0
 800e65c:	2800      	cmp	r0, #0
 800e65e:	d0f2      	beq.n	800e646 <_realloc_r+0x1c>
 800e660:	4631      	mov	r1, r6
 800e662:	4622      	mov	r2, r4
 800e664:	f7ff fa1c 	bl	800daa0 <memcpy>
 800e668:	4631      	mov	r1, r6
 800e66a:	4638      	mov	r0, r7
 800e66c:	f7ff fd0c 	bl	800e088 <_free_r>
 800e670:	e7e9      	b.n	800e646 <_realloc_r+0x1c>
 800e672:	4635      	mov	r5, r6
 800e674:	e7e7      	b.n	800e646 <_realloc_r+0x1c>
	...

0800e678 <_read_r>:
 800e678:	b538      	push	{r3, r4, r5, lr}
 800e67a:	4c07      	ldr	r4, [pc, #28]	; (800e698 <_read_r+0x20>)
 800e67c:	4605      	mov	r5, r0
 800e67e:	4608      	mov	r0, r1
 800e680:	4611      	mov	r1, r2
 800e682:	2200      	movs	r2, #0
 800e684:	6022      	str	r2, [r4, #0]
 800e686:	461a      	mov	r2, r3
 800e688:	f7f6 fc50 	bl	8004f2c <_read>
 800e68c:	1c43      	adds	r3, r0, #1
 800e68e:	d102      	bne.n	800e696 <_read_r+0x1e>
 800e690:	6823      	ldr	r3, [r4, #0]
 800e692:	b103      	cbz	r3, 800e696 <_read_r+0x1e>
 800e694:	602b      	str	r3, [r5, #0]
 800e696:	bd38      	pop	{r3, r4, r5, pc}
 800e698:	2000187c 	.word	0x2000187c

0800e69c <__ascii_wctomb>:
 800e69c:	b149      	cbz	r1, 800e6b2 <__ascii_wctomb+0x16>
 800e69e:	2aff      	cmp	r2, #255	; 0xff
 800e6a0:	bf85      	ittet	hi
 800e6a2:	238a      	movhi	r3, #138	; 0x8a
 800e6a4:	6003      	strhi	r3, [r0, #0]
 800e6a6:	700a      	strbls	r2, [r1, #0]
 800e6a8:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800e6ac:	bf98      	it	ls
 800e6ae:	2001      	movls	r0, #1
 800e6b0:	4770      	bx	lr
 800e6b2:	4608      	mov	r0, r1
 800e6b4:	4770      	bx	lr

0800e6b6 <_malloc_usable_size_r>:
 800e6b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6ba:	1f18      	subs	r0, r3, #4
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	bfbc      	itt	lt
 800e6c0:	580b      	ldrlt	r3, [r1, r0]
 800e6c2:	18c0      	addlt	r0, r0, r3
 800e6c4:	4770      	bx	lr
	...

0800e6c8 <_init>:
 800e6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6ca:	bf00      	nop
 800e6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6ce:	bc08      	pop	{r3}
 800e6d0:	469e      	mov	lr, r3
 800e6d2:	4770      	bx	lr

0800e6d4 <_fini>:
 800e6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6d6:	bf00      	nop
 800e6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6da:	bc08      	pop	{r3}
 800e6dc:	469e      	mov	lr, r3
 800e6de:	4770      	bx	lr
