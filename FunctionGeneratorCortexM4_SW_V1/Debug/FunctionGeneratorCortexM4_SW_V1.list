
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015474  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001410  08015658  08015658  00025658  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016a68  08016a68  00031e08  2**0
                  CONTENTS
  4 .ARM          00000000  08016a68  08016a68  00031e08  2**0
                  CONTENTS
  5 .preinit_array 00000000  08016a68  08016a68  00031e08  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08016a68  08016a68  00026a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08016a6c  08016a6c  00026a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001e08  20000000  08016a70  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fb8  20001e08  08018878  00031e08  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002dc0  08018878  00032dc0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031e08  2**0
                  CONTENTS, READONLY
 12 .debug_info   00049bea  00000000  00000000  00031e38  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00007e69  00000000  00000000  0007ba22  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002398  00000000  00000000  00083890  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001f28  00000000  00000000  00085c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00035c02  00000000  00000000  00087b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000303f5  00000000  00000000  000bd752  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00126d33  00000000  00000000  000edb47  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0021487a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009cc0  00000000  00000000  002148f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001e08 	.word	0x20001e08
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801563c 	.word	0x0801563c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001e0c 	.word	0x20001e0c
 800021c:	0801563c 	.word	0x0801563c

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
 8000ce4:	2b01      	cmp	r3, #1
 8000ce6:	d000      	beq.n	8000cea <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000ce8:	e002      	b.n	8000cf0 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000cea:	f000 f805 	bl	8000cf8 <BiasMenu_DrawMainMenu>
			break;
 8000cee:	bf00      	nop

	}
}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8000cfe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d02:	9301      	str	r3, [sp, #4]
 8000d04:	2302      	movs	r3, #2
 8000d06:	9300      	str	r3, [sp, #0]
 8000d08:	2300      	movs	r3, #0
 8000d0a:	220a      	movs	r2, #10
 8000d0c:	210a      	movs	r1, #10
 8000d0e:	4814      	ldr	r0, [pc, #80]	; (8000d60 <BiasMenu_DrawMainMenu+0x68>)
 8000d10:	f00f fd30 	bl	8010774 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000d14:	f000 f8f0 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("POS", 15,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8000d18:	f240 23fd 	movw	r3, #765	; 0x2fd
 8000d1c:	9301      	str	r3, [sp, #4]
 8000d1e:	2302      	movs	r3, #2
 8000d20:	9300      	str	r3, [sp, #0]
 8000d22:	2300      	movs	r3, #0
 8000d24:	22d2      	movs	r2, #210	; 0xd2
 8000d26:	210f      	movs	r1, #15
 8000d28:	480e      	ldr	r0, [pc, #56]	; (8000d64 <BiasMenu_DrawMainMenu+0x6c>)
 8000d2a:	f00f fd23 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("NEG", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8000d2e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8000d32:	9301      	str	r3, [sp, #4]
 8000d34:	2302      	movs	r3, #2
 8000d36:	9300      	str	r3, [sp, #0]
 8000d38:	2300      	movs	r3, #0
 8000d3a:	22d2      	movs	r2, #210	; 0xd2
 8000d3c:	2161      	movs	r1, #97	; 0x61
 8000d3e:	480a      	ldr	r0, [pc, #40]	; (8000d68 <BiasMenu_DrawMainMenu+0x70>)
 8000d40:	f00f fd18 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GND",  190, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8000d44:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000d48:	9301      	str	r3, [sp, #4]
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	9300      	str	r3, [sp, #0]
 8000d4e:	2300      	movs	r3, #0
 8000d50:	22d2      	movs	r2, #210	; 0xd2
 8000d52:	21be      	movs	r1, #190	; 0xbe
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <BiasMenu_DrawMainMenu+0x74>)
 8000d56:	f00f fd0d 	bl	8010774 <ILI9341_Draw_Text>

}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	08015658 	.word	0x08015658
 8000d64:	08015664 	.word	0x08015664
 8000d68:	08015668 	.word	0x08015668
 8000d6c:	0801566c 	.word	0x0801566c

08000d70 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000d74:	f00f fd3f 	bl	80107f6 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000d78:	2003      	movs	r0, #3
 8000d7a:	f010 f995 	bl	80110a8 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000d7e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d82:	f00f ff77 	bl	8010c74 <ILI9341_Fill_Screen>

}
 8000d86:	bf00      	nop
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Initialising", 10, 10, NORMAL_TEXT_FGCOLOUR, 1, NORMAL_TEXT_BGCOLOUR);
 8000d92:	2300      	movs	r3, #0
 8000d94:	9301      	str	r3, [sp, #4]
 8000d96:	2301      	movs	r3, #1
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000d9e:	220a      	movs	r2, #10
 8000da0:	210a      	movs	r1, #10
 8000da2:	4806      	ldr	r0, [pc, #24]	; (8000dbc <DM_PostInit+0x30>)
 8000da4:	f00f fce6 	bl	8010774 <ILI9341_Draw_Text>
	HAL_Delay(500);
 8000da8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000dac:	f008 f83e 	bl	8008e2c <HAL_Delay>

	DM_RefreshScreen();
 8000db0:	f000 fbdc 	bl	800156c <DM_RefreshScreen>
	#ifdef EVENT_MENU_DEBUG
		  printf("Init Completed\n");
	#endif


}
 8000db4:	bf00      	nop
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	08015670 	.word	0x08015670

08000dc0 <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af02      	add	r7, sp, #8
	/*
	 * 	Top level menu
	 */
	if(ToplevelMenu_getStatus())
 8000dc6:	f004 f94b 	bl	8005060 <ToplevelMenu_getStatus>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d015      	beq.n	8000dfc <DM_UpdateDisplay+0x3c>

		#ifdef EVENT_MENU_DEBUG
			  printf("FuncMenu_DrawMenu\n");
		#endif

		switch(ToplevelMenu_getStatus())
 8000dd0:	f004 f946 	bl	8005060 <ToplevelMenu_getStatus>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d008      	beq.n	8000dec <DM_UpdateDisplay+0x2c>
 8000dda:	2b03      	cmp	r3, #3
 8000ddc:	d00a      	beq.n	8000df4 <DM_UpdateDisplay+0x34>
 8000dde:	2b01      	cmp	r3, #1
 8000de0:	d000      	beq.n	8000de4 <DM_UpdateDisplay+0x24>

				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
				break;

			default:
				break;
 8000de2:	e083      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_MAIN_MENU);
 8000de4:	2001      	movs	r0, #1
 8000de6:	f002 ff55 	bl	8003c94 <ToplevelMenu_DrawMenu>
				break;
 8000dea:	e07f      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8000dec:	2002      	movs	r0, #2
 8000dee:	f002 ff51 	bl	8003c94 <ToplevelMenu_DrawMenu>
				break;
 8000df2:	e07b      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
 8000df4:	2003      	movs	r0, #3
 8000df6:	f002 ff4d 	bl	8003c94 <ToplevelMenu_DrawMenu>
				break;
 8000dfa:	e077      	b.n	8000eec <DM_UpdateDisplay+0x12c>
	}

	/*
	 * 	Function menus
	 */
	else if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000dfc:	f003 ff20 	bl	8004c40 <FuncMenu_getStatus>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d015      	beq.n	8000e32 <DM_UpdateDisplay+0x72>

		#ifdef EVENT_MENU_DEBUG
			  printf("FuncMenu_DrawMenu\n");
		#endif

		switch(FuncMenu_getStatus())
 8000e06:	f003 ff1b 	bl	8004c40 <FuncMenu_getStatus>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b02      	cmp	r3, #2
 8000e0e:	d008      	beq.n	8000e22 <DM_UpdateDisplay+0x62>
 8000e10:	2b03      	cmp	r3, #3
 8000e12:	d00a      	beq.n	8000e2a <DM_UpdateDisplay+0x6a>
 8000e14:	2b01      	cmp	r3, #1
 8000e16:	d000      	beq.n	8000e1a <DM_UpdateDisplay+0x5a>
				FuncMenu_DrawMenu(ENABLE_FUNC_Aux_MENU);

				break;

			default:
				break;
 8000e18:	e068      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	f002 f98c 	bl	8003138 <FuncMenu_DrawMenu>
				break;
 8000e20:	e064      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000e22:	2002      	movs	r0, #2
 8000e24:	f002 f988 	bl	8003138 <FuncMenu_DrawMenu>
				break;
 8000e28:	e060      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				FuncMenu_DrawMenu(ENABLE_FUNC_Aux_MENU);
 8000e2a:	2003      	movs	r0, #3
 8000e2c:	f002 f984 	bl	8003138 <FuncMenu_DrawMenu>
				break;
 8000e30:	e05c      	b.n	8000eec <DM_UpdateDisplay+0x12c>

	}
	/*
	 * 	Gain menus
	 */
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000e32:	f003 fffb 	bl	8004e2c <GainMenu_getStatus>
 8000e36:	4603      	mov	r3, r0
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d015      	beq.n	8000e68 <DM_UpdateDisplay+0xa8>

		#ifdef EVENT_MENU_DEBUG
			  printf("GainMenu_DrawMenu\n");
		#endif

		switch(GainMenu_getStatus())
 8000e3c:	f003 fff6 	bl	8004e2c <GainMenu_getStatus>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d008      	beq.n	8000e58 <DM_UpdateDisplay+0x98>
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d00a      	beq.n	8000e60 <DM_UpdateDisplay+0xa0>
 8000e4a:	2b01      	cmp	r3, #1
 8000e4c:	d000      	beq.n	8000e50 <DM_UpdateDisplay+0x90>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);

				break;

			default:
				break;
 8000e4e:	e04d      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000e50:	2001      	movs	r0, #1
 8000e52:	f002 fe45 	bl	8003ae0 <GainMenu_DrawMenu>
				break;
 8000e56:	e049      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f002 fe41 	bl	8003ae0 <GainMenu_DrawMenu>
				break;
 8000e5e:	e045      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				GainMenu_DrawMenu(ENABLE_GAIN_Aux_MENU);
 8000e60:	2003      	movs	r0, #3
 8000e62:	f002 fe3d 	bl	8003ae0 <GainMenu_DrawMenu>
				break;
 8000e66:	e041      	b.n	8000eec <DM_UpdateDisplay+0x12c>
	}

	/*
	 * 	 Frequency menus
	 */
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000e68:	f003 fede 	bl	8004c28 <FreqMenu_getStatus>
 8000e6c:	4603      	mov	r3, r0
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d026      	beq.n	8000ec0 <DM_UpdateDisplay+0x100>
			  printf("FreqMenu_DrawMenu\n");
		#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000e72:	f003 fed9 	bl	8004c28 <FreqMenu_getStatus>
 8000e76:	4603      	mov	r3, r0
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	2b04      	cmp	r3, #4
 8000e7c:	d835      	bhi.n	8000eea <DM_UpdateDisplay+0x12a>
 8000e7e:	a201      	add	r2, pc, #4	; (adr r2, 8000e84 <DM_UpdateDisplay+0xc4>)
 8000e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e84:	08000e99 	.word	0x08000e99
 8000e88:	08000ea1 	.word	0x08000ea1
 8000e8c:	08000ea9 	.word	0x08000ea9
 8000e90:	08000eb1 	.word	0x08000eb1
 8000e94:	08000eb9 	.word	0x08000eb9
		{
			case ENABLE_FREQ_MAIN_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000e98:	2001      	movs	r0, #1
 8000e9a:	f000 fbcb 	bl	8001634 <FreqMenu_DrawMenu>

				break;
 8000e9e:	e025      	b.n	8000eec <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f000 fbc7 	bl	8001634 <FreqMenu_DrawMenu>
				break;
 8000ea6:	e021      	b.n	8000eec <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_ADJUST_MENU:


				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000ea8:	2003      	movs	r0, #3
 8000eaa:	f000 fbc3 	bl	8001634 <FreqMenu_DrawMenu>

				break;
 8000eae:	e01d      	b.n	8000eec <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000eb0:	2004      	movs	r0, #4
 8000eb2:	f000 fbbf 	bl	8001634 <FreqMenu_DrawMenu>
				break;
 8000eb6:	e019      	b.n	8000eec <DM_UpdateDisplay+0x12c>

			case ENABLE_FREQ_PRESCALER_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESCALER_MENU);
 8000eb8:	2005      	movs	r0, #5
 8000eba:	f000 fbbb 	bl	8001634 <FreqMenu_DrawMenu>
				break;
 8000ebe:	e015      	b.n	8000eec <DM_UpdateDisplay+0x12c>
	}

	/*
	 * 	Bias menu
	 */
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000ec0:	f003 f8d8 	bl	8004074 <BiasMenu_getStatus>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <DM_UpdateDisplay+0x112>

		#ifdef EVENT_MENU_DEBUG
			  printf("BiasMenu_DrawMenu\n");
		#endif

		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000eca:	2001      	movs	r0, #1
 8000ecc:	f7ff ff04 	bl	8000cd8 <BiasMenu_DrawMenu>
		ILI9341_Draw_Text(encoder_value, 220, 20, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	#endif //ENCODER_DEBUG



}
 8000ed0:	e00c      	b.n	8000eec <DM_UpdateDisplay+0x12c>
		ILI9341_Draw_Text("DisplayManager: no menu status set!", 10, 50, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000ed2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000ed6:	9301      	str	r3, [sp, #4]
 8000ed8:	2301      	movs	r3, #1
 8000eda:	9300      	str	r3, [sp, #0]
 8000edc:	2300      	movs	r3, #0
 8000ede:	2232      	movs	r2, #50	; 0x32
 8000ee0:	210a      	movs	r1, #10
 8000ee2:	4804      	ldr	r0, [pc, #16]	; (8000ef4 <DM_UpdateDisplay+0x134>)
 8000ee4:	f00f fc46 	bl	8010774 <ILI9341_Draw_Text>
}
 8000ee8:	e000      	b.n	8000eec <DM_UpdateDisplay+0x12c>
				break;
 8000eea:	bf00      	nop
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	08015680 	.word	0x08015680

08000ef8 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b09f      	sub	sp, #124	; 0x7c
 8000efc:	af04      	add	r7, sp, #16
	uint8_t text_size = 2;
 8000efe:	2302      	movs	r3, #2
 8000f00:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63

	char out_hertz[15] = "";
 8000f04:	2300      	movs	r3, #0
 8000f06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8000f08:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t out_hertz_x = 140;
 8000f16:	238c      	movs	r3, #140	; 0x8c
 8000f18:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	uint8_t out_hertz_y = 40;
 8000f1c:	2328      	movs	r3, #40	; 0x28
 8000f1e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61

	char out_vpp[18] = "";
 8000f22:	2300      	movs	r3, #0
 8000f24:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	601a      	str	r2, [r3, #0]
 8000f2e:	605a      	str	r2, [r3, #4]
 8000f30:	609a      	str	r2, [r3, #8]
 8000f32:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = 175;
 8000f34:	23af      	movs	r3, #175	; 0xaf
 8000f36:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
	uint8_t out_vpp_y = 70;
 8000f3a:	2346      	movs	r3, #70	; 0x46
 8000f3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f

	char out_decibels[20] = "";
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	f107 0318 	add.w	r3, r7, #24
 8000f48:	2200      	movs	r2, #0
 8000f4a:	601a      	str	r2, [r3, #0]
 8000f4c:	605a      	str	r2, [r3, #4]
 8000f4e:	609a      	str	r2, [r3, #8]
 8000f50:	60da      	str	r2, [r3, #12]
	uint8_t out_decibels_x = 138;
 8000f52:	238a      	movs	r3, #138	; 0x8a
 8000f54:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
	uint8_t out_decibels_y = 100;
 8000f58:	2364      	movs	r3, #100	; 0x64
 8000f5a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d


	float volts_per_thou = 0.00075;
 8000f5e:	4bc4      	ldr	r3, [pc, #784]	; (8001270 <DM_DisplayFormattedOutput+0x378>)
 8000f60:	65bb      	str	r3, [r7, #88]	; 0x58
	char out_dcvolts[12] = "";
 8000f62:	2300      	movs	r3, #0
 8000f64:	60bb      	str	r3, [r7, #8]
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	601a      	str	r2, [r3, #0]
 8000f6e:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = 161;
 8000f70:	23a1      	movs	r3, #161	; 0xa1
 8000f72:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	uint8_t out_dcvolts_y = 130;
 8000f76:	2382      	movs	r3, #130	; 0x82
 8000f78:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56

	ILI9341_Draw_Text("FREQ   ....", 2, out_hertz_y , NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000f7c:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8000f80:	b299      	uxth	r1, r3
 8000f82:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	2200      	movs	r2, #0
 8000f8a:	9201      	str	r2, [sp, #4]
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000f92:	460a      	mov	r2, r1
 8000f94:	2102      	movs	r1, #2
 8000f96:	48b7      	ldr	r0, [pc, #732]	; (8001274 <DM_DisplayFormattedOutput+0x37c>)
 8000f98:	f00f fbec 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("VPP    ....", 2, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000f9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8000fa0:	b299      	uxth	r1, r3
 8000fa2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fa6:	b29b      	uxth	r3, r3
 8000fa8:	2200      	movs	r2, #0
 8000faa:	9201      	str	r2, [sp, #4]
 8000fac:	9300      	str	r3, [sp, #0]
 8000fae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fb2:	460a      	mov	r2, r1
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	48b0      	ldr	r0, [pc, #704]	; (8001278 <DM_DisplayFormattedOutput+0x380>)
 8000fb8:	f00f fbdc 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN   ....", 2, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fbc:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8000fc0:	b299      	uxth	r1, r3
 8000fc2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fc6:	b29b      	uxth	r3, r3
 8000fc8:	2200      	movs	r2, #0
 8000fca:	9201      	str	r2, [sp, #4]
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fd2:	460a      	mov	r2, r1
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	48a9      	ldr	r0, [pc, #676]	; (800127c <DM_DisplayFormattedOutput+0x384>)
 8000fd8:	f00f fbcc 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET ....", 2, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fdc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8000fe0:	b299      	uxth	r1, r3
 8000fe2:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8000fe6:	b29b      	uxth	r3, r3
 8000fe8:	2200      	movs	r2, #0
 8000fea:	9201      	str	r2, [sp, #4]
 8000fec:	9300      	str	r3, [sp, #0]
 8000fee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000ff2:	460a      	mov	r2, r1
 8000ff4:	2102      	movs	r1, #2
 8000ff6:	48a2      	ldr	r0, [pc, #648]	; (8001280 <DM_DisplayFormattedOutput+0x388>)
 8000ff8:	f00f fbbc 	bl	8010774 <ILI9341_Draw_Text>

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), " %4.2f   Hz ", SM_GetOutputInHertz());
 8000ffc:	f005 fe12 	bl	8006c24 <SM_GetOutputInHertz>
 8001000:	ee10 3a10 	vmov	r3, s0
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff fac7 	bl	8000598 <__aeabi_f2d>
 800100a:	4603      	mov	r3, r0
 800100c:	460c      	mov	r4, r1
 800100e:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001012:	e9cd 3400 	strd	r3, r4, [sp]
 8001016:	4a9b      	ldr	r2, [pc, #620]	; (8001284 <DM_DisplayFormattedOutput+0x38c>)
 8001018:	210f      	movs	r1, #15
 800101a:	f010 ff67 	bl	8011eec <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 800101e:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8001022:	b299      	uxth	r1, r3
 8001024:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8001028:	b29c      	uxth	r4, r3
 800102a:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800102e:	b29b      	uxth	r3, r3
 8001030:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001034:	2200      	movs	r2, #0
 8001036:	9201      	str	r2, [sp, #4]
 8001038:	9300      	str	r3, [sp, #0]
 800103a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800103e:	4622      	mov	r2, r4
 8001040:	f00f fb98 	bl	8010774 <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8001044:	2000      	movs	r0, #0
 8001046:	f005 fb55 	bl	80066f4 <SM_GetOutputChannel>
 800104a:	4603      	mov	r3, r0
 800104c:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8001050:	653b      	str	r3, [r7, #80]	; 0x50

	if(pTmpVppPreset)
 8001052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001054:	2b00      	cmp	r3, #0
 8001056:	d01d      	beq.n	8001094 <DM_DisplayFormattedOutput+0x19c>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f   V ", pTmpVppPreset->amp_value);
 8001058:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	4618      	mov	r0, r3
 800105e:	f7ff fa9b 	bl	8000598 <__aeabi_f2d>
 8001062:	4603      	mov	r3, r0
 8001064:	460c      	mov	r4, r1
 8001066:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800106a:	e9cd 3400 	strd	r3, r4, [sp]
 800106e:	4a86      	ldr	r2, [pc, #536]	; (8001288 <DM_DisplayFormattedOutput+0x390>)
 8001070:	2112      	movs	r1, #18
 8001072:	f010 ff3b 	bl	8011eec <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), " %+7.2f ", pTmpVppPreset->gain_decibels);
 8001076:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001078:	68db      	ldr	r3, [r3, #12]
 800107a:	4618      	mov	r0, r3
 800107c:	f7ff fa8c 	bl	8000598 <__aeabi_f2d>
 8001080:	4603      	mov	r3, r0
 8001082:	460c      	mov	r4, r1
 8001084:	f107 0014 	add.w	r0, r7, #20
 8001088:	e9cd 3400 	strd	r3, r4, [sp]
 800108c:	4a7f      	ldr	r2, [pc, #508]	; (800128c <DM_DisplayFormattedOutput+0x394>)
 800108e:	2114      	movs	r1, #20
 8001090:	f010 ff2c 	bl	8011eec <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001094:	f897 3060 	ldrb.w	r3, [r7, #96]	; 0x60
 8001098:	b299      	uxth	r1, r3
 800109a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800109e:	b29c      	uxth	r4, r3
 80010a0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010a4:	b29b      	uxth	r3, r3
 80010a6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80010aa:	2200      	movs	r2, #0
 80010ac:	9201      	str	r2, [sp, #4]
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010b4:	4622      	mov	r2, r4
 80010b6:	f00f fb5d 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010ba:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010be:	b299      	uxth	r1, r3
 80010c0:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80010c4:	b29c      	uxth	r4, r3
 80010c6:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	f107 0014 	add.w	r0, r7, #20
 80010d0:	2200      	movs	r2, #0
 80010d2:	9201      	str	r2, [sp, #4]
 80010d4:	9300      	str	r3, [sp, #0]
 80010d6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010da:	4622      	mov	r2, r4
 80010dc:	f00f fb4a 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("dBmV", out_decibels_x + 128, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010e0:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	3380      	adds	r3, #128	; 0x80
 80010e8:	b299      	uxth	r1, r3
 80010ea:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 80010ee:	b298      	uxth	r0, r3
 80010f0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80010f4:	b29b      	uxth	r3, r3
 80010f6:	2200      	movs	r2, #0
 80010f8:	9201      	str	r2, [sp, #4]
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001100:	4602      	mov	r2, r0
 8001102:	4863      	ldr	r0, [pc, #396]	; (8001290 <DM_DisplayFormattedOutput+0x398>)
 8001104:	f00f fb36 	bl	8010774 <ILI9341_Draw_Text>


	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8001108:	f004 f9fe 	bl	8005508 <BO_GetOutputBias>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d103      	bne.n	800111a <DM_DisplayFormattedOutput+0x222>
 8001112:	f04f 0300 	mov.w	r3, #0
 8001116:	667b      	str	r3, [r7, #100]	; 0x64
 8001118:	e00b      	b.n	8001132 <DM_DisplayFormattedOutput+0x23a>
 800111a:	f004 f9f5 	bl	8005508 <BO_GetOutputBias>
 800111e:	ee07 0a90 	vmov	s15, r0
 8001122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001126:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800112a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800112e:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%05.2f   v ", dc_volts);
 8001132:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8001134:	f7ff fa30 	bl	8000598 <__aeabi_f2d>
 8001138:	4603      	mov	r3, r0
 800113a:	460c      	mov	r4, r1
 800113c:	f107 0008 	add.w	r0, r7, #8
 8001140:	e9cd 3400 	strd	r3, r4, [sp]
 8001144:	4a53      	ldr	r2, [pc, #332]	; (8001294 <DM_DisplayFormattedOutput+0x39c>)
 8001146:	210c      	movs	r1, #12
 8001148:	f010 fed0 	bl	8011eec <sniprintf>
	if(BO_GetBiasPolarity())
 800114c:	f004 f97c 	bl	8005448 <BO_GetBiasPolarity>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d022      	beq.n	800119c <DM_DisplayFormattedOutput+0x2a4>
	{
		char symbol[3] = "+\0";
 8001156:	4a50      	ldr	r2, [pc, #320]	; (8001298 <DM_DisplayFormattedOutput+0x3a0>)
 8001158:	1d3b      	adds	r3, r7, #4
 800115a:	6812      	ldr	r2, [r2, #0]
 800115c:	4611      	mov	r1, r2
 800115e:	8019      	strh	r1, [r3, #0]
 8001160:	3302      	adds	r3, #2
 8001162:	0c12      	lsrs	r2, r2, #16
 8001164:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001166:	f107 0208 	add.w	r2, r7, #8
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4611      	mov	r1, r2
 800116e:	4618      	mov	r0, r3
 8001170:	f010 fef0 	bl	8011f54 <strcat>
 8001174:	4604      	mov	r4, r0
 8001176:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800117a:	b299      	uxth	r1, r3
 800117c:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8001180:	b298      	uxth	r0, r3
 8001182:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001186:	b29b      	uxth	r3, r3
 8001188:	2200      	movs	r2, #0
 800118a:	9201      	str	r2, [sp, #4]
 800118c:	9300      	str	r3, [sp, #0]
 800118e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001192:	4602      	mov	r2, r0
 8001194:	4620      	mov	r0, r4
 8001196:	f00f faed 	bl	8010774 <ILI9341_Draw_Text>
 800119a:	e021      	b.n	80011e0 <DM_DisplayFormattedOutput+0x2e8>
	}
	else
	{
		char symbol[3] = "-\0";
 800119c:	4a3f      	ldr	r2, [pc, #252]	; (800129c <DM_DisplayFormattedOutput+0x3a4>)
 800119e:	463b      	mov	r3, r7
 80011a0:	6812      	ldr	r2, [r2, #0]
 80011a2:	4611      	mov	r1, r2
 80011a4:	8019      	strh	r1, [r3, #0]
 80011a6:	3302      	adds	r3, #2
 80011a8:	0c12      	lsrs	r2, r2, #16
 80011aa:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011ac:	f107 0208 	add.w	r2, r7, #8
 80011b0:	463b      	mov	r3, r7
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f010 fecd 	bl	8011f54 <strcat>
 80011ba:	4604      	mov	r4, r0
 80011bc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80011c0:	b299      	uxth	r1, r3
 80011c2:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80011c6:	b298      	uxth	r0, r3
 80011c8:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	2200      	movs	r2, #0
 80011d0:	9201      	str	r2, [sp, #4]
 80011d2:	9300      	str	r3, [sp, #0]
 80011d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011d8:	4602      	mov	r2, r0
 80011da:	4620      	mov	r0, r4
 80011dc:	f00f faca 	bl	8010774 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text(" OUT:", 3, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80011e0:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 80011e4:	b29b      	uxth	r3, r3
 80011e6:	2200      	movs	r2, #0
 80011e8:	9201      	str	r2, [sp, #4]
 80011ea:	9300      	str	r3, [sp, #0]
 80011ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011f0:	22aa      	movs	r2, #170	; 0xaa
 80011f2:	2103      	movs	r1, #3
 80011f4:	482a      	ldr	r0, [pc, #168]	; (80012a0 <DM_DisplayFormattedOutput+0x3a8>)
 80011f6:	f00f fabd 	bl	8010774 <ILI9341_Draw_Text>
	eOutput_mode signal_output_func = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 80011fa:	2000      	movs	r0, #0
 80011fc:	f005 fa7a 	bl	80066f4 <SM_GetOutputChannel>
 8001200:	4603      	mov	r3, r0
 8001202:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	switch(signal_output_func)
 800120c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001210:	2b06      	cmp	r3, #6
 8001212:	f200 8091 	bhi.w	8001338 <DM_DisplayFormattedOutput+0x440>
 8001216:	a201      	add	r2, pc, #4	; (adr r2, 800121c <DM_DisplayFormattedOutput+0x324>)
 8001218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800121c:	08001239 	.word	0x08001239
 8001220:	08001255 	.word	0x08001255
 8001224:	080012ad 	.word	0x080012ad
 8001228:	080012c9 	.word	0x080012c9
 800122c:	080012e5 	.word	0x080012e5
 8001230:	08001301 	.word	0x08001301
 8001234:	0800131d 	.word	0x0800131d
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(80, 140, 3, SIGNAL_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 8001238:	233c      	movs	r3, #60	; 0x3c
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <DM_DisplayFormattedOutput+0x3ac>)
 800123e:	9301      	str	r3, [sp, #4]
 8001240:	2364      	movs	r3, #100	; 0x64
 8001242:	9300      	str	r3, [sp, #0]
 8001244:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001248:	2203      	movs	r2, #3
 800124a:	218c      	movs	r1, #140	; 0x8c
 800124c:	2050      	movs	r0, #80	; 0x50
 800124e:	f00f f8ed 	bl	801042c <ILI9341_Draw_Wave>
			break;
 8001252:	e071      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 8001254:	233c      	movs	r3, #60	; 0x3c
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	4b13      	ldr	r3, [pc, #76]	; (80012a8 <DM_DisplayFormattedOutput+0x3b0>)
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	23c8      	movs	r3, #200	; 0xc8
 800125e:	9300      	str	r3, [sp, #0]
 8001260:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001264:	2203      	movs	r2, #3
 8001266:	21a0      	movs	r1, #160	; 0xa0
 8001268:	2050      	movs	r0, #80	; 0x50
 800126a:	f00f f8df 	bl	801042c <ILI9341_Draw_Wave>
			break;
 800126e:	e063      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
 8001270:	3a449ba6 	.word	0x3a449ba6
 8001274:	080156a4 	.word	0x080156a4
 8001278:	080156b0 	.word	0x080156b0
 800127c:	080156bc 	.word	0x080156bc
 8001280:	080156c8 	.word	0x080156c8
 8001284:	080156d4 	.word	0x080156d4
 8001288:	080156e4 	.word	0x080156e4
 800128c:	080156f0 	.word	0x080156f0
 8001290:	080156fc 	.word	0x080156fc
 8001294:	08015704 	.word	0x08015704
 8001298:	08015724 	.word	0x08015724
 800129c:	08015728 	.word	0x08015728
 80012a0:	08015710 	.word	0x08015710
 80012a4:	20000e24 	.word	0x20000e24
 80012a8:	20000f14 	.word	0x20000f14
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80012ac:	233c      	movs	r3, #60	; 0x3c
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	4b6b      	ldr	r3, [pc, #428]	; (8001460 <DM_DisplayFormattedOutput+0x568>)
 80012b2:	9301      	str	r3, [sp, #4]
 80012b4:	23c8      	movs	r3, #200	; 0xc8
 80012b6:	9300      	str	r3, [sp, #0]
 80012b8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012bc:	2203      	movs	r2, #3
 80012be:	21a0      	movs	r1, #160	; 0xa0
 80012c0:	2050      	movs	r0, #80	; 0x50
 80012c2:	f00f f8b3 	bl	801042c <ILI9341_Draw_Wave>
			break;
 80012c6:	e037      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 80012c8:	233c      	movs	r3, #60	; 0x3c
 80012ca:	9302      	str	r3, [sp, #8]
 80012cc:	4b65      	ldr	r3, [pc, #404]	; (8001464 <DM_DisplayFormattedOutput+0x56c>)
 80012ce:	9301      	str	r3, [sp, #4]
 80012d0:	23c8      	movs	r3, #200	; 0xc8
 80012d2:	9300      	str	r3, [sp, #0]
 80012d4:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012d8:	2203      	movs	r2, #3
 80012da:	21a0      	movs	r1, #160	; 0xa0
 80012dc:	2050      	movs	r0, #80	; 0x50
 80012de:	f00f f8a5 	bl	801042c <ILI9341_Draw_Wave>
			break;
 80012e2:	e029      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 80012e4:	233c      	movs	r3, #60	; 0x3c
 80012e6:	9302      	str	r3, [sp, #8]
 80012e8:	4b5f      	ldr	r3, [pc, #380]	; (8001468 <DM_DisplayFormattedOutput+0x570>)
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	23c8      	movs	r3, #200	; 0xc8
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	f240 23fd 	movw	r3, #765	; 0x2fd
 80012f4:	2203      	movs	r2, #3
 80012f6:	21a0      	movs	r1, #160	; 0xa0
 80012f8:	2050      	movs	r0, #80	; 0x50
 80012fa:	f00f f897 	bl	801042c <ILI9341_Draw_Wave>
			break;
 80012fe:	e01b      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(80, 160, 3, SIGNAL_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001300:	233c      	movs	r3, #60	; 0x3c
 8001302:	9302      	str	r3, [sp, #8]
 8001304:	4b58      	ldr	r3, [pc, #352]	; (8001468 <DM_DisplayFormattedOutput+0x570>)
 8001306:	9301      	str	r3, [sp, #4]
 8001308:	23c8      	movs	r3, #200	; 0xc8
 800130a:	9300      	str	r3, [sp, #0]
 800130c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001310:	2203      	movs	r2, #3
 8001312:	21a0      	movs	r1, #160	; 0xa0
 8001314:	2050      	movs	r0, #80	; 0x50
 8001316:	f00f f889 	bl	801042c <ILI9341_Draw_Wave>
			break;
 800131a:	e00d      	b.n	8001338 <DM_DisplayFormattedOutput+0x440>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 80, 170, SIGNAL_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 800131c:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8001320:	b29b      	uxth	r3, r3
 8001322:	2200      	movs	r2, #0
 8001324:	9201      	str	r2, [sp, #4]
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	f240 23fd 	movw	r3, #765	; 0x2fd
 800132c:	22aa      	movs	r2, #170	; 0xaa
 800132e:	2150      	movs	r1, #80	; 0x50
 8001330:	484e      	ldr	r0, [pc, #312]	; (800146c <DM_DisplayFormattedOutput+0x574>)
 8001332:	f00f fa1f 	bl	8010774 <ILI9341_Draw_Text>
			break;
 8001336:	bf00      	nop
	}

	ILI9341_Draw_Text("AUX:", 180, 170, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001338:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800133c:	b29b      	uxth	r3, r3
 800133e:	2200      	movs	r2, #0
 8001340:	9201      	str	r2, [sp, #4]
 8001342:	9300      	str	r3, [sp, #0]
 8001344:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001348:	22aa      	movs	r2, #170	; 0xaa
 800134a:	21b4      	movs	r1, #180	; 0xb4
 800134c:	4848      	ldr	r0, [pc, #288]	; (8001470 <DM_DisplayFormattedOutput+0x578>)
 800134e:	f00f fa11 	bl	8010774 <ILI9341_Draw_Text>
	eOutput_mode Aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8001352:	2001      	movs	r0, #1
 8001354:	f005 f9ce 	bl	80066f4 <SM_GetOutputChannel>
 8001358:	4603      	mov	r3, r0
 800135a:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	switch(Aux_output_func)
 8001364:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001368:	2b06      	cmp	r3, #6
 800136a:	d873      	bhi.n	8001454 <DM_DisplayFormattedOutput+0x55c>
 800136c:	a201      	add	r2, pc, #4	; (adr r2, 8001374 <DM_DisplayFormattedOutput+0x47c>)
 800136e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001372:	bf00      	nop
 8001374:	08001391 	.word	0x08001391
 8001378:	080013ad 	.word	0x080013ad
 800137c:	080013c9 	.word	0x080013c9
 8001380:	080013e5 	.word	0x080013e5
 8001384:	08001401 	.word	0x08001401
 8001388:	0800141d 	.word	0x0800141d
 800138c:	08001439 	.word	0x08001439
	{
		case SINE_FUNC_MODE:

			ILI9341_Draw_Wave(245, 140, 3, Aux_OUTPUT_ICON, 100, sineicon_data_table_1300, SINEICON_DATA_SIZE);
 8001390:	233c      	movs	r3, #60	; 0x3c
 8001392:	9302      	str	r3, [sp, #8]
 8001394:	4b37      	ldr	r3, [pc, #220]	; (8001474 <DM_DisplayFormattedOutput+0x57c>)
 8001396:	9301      	str	r3, [sp, #4]
 8001398:	2364      	movs	r3, #100	; 0x64
 800139a:	9300      	str	r3, [sp, #0]
 800139c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013a0:	2203      	movs	r2, #3
 80013a2:	218c      	movs	r1, #140	; 0x8c
 80013a4:	20f5      	movs	r0, #245	; 0xf5
 80013a6:	f00f f841 	bl	801042c <ILI9341_Draw_Wave>
			break;
 80013aa:	e053      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case SQUARE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, squareicon_data_table_3600, SQUAREICON_DATA_SIZE);
 80013ac:	233c      	movs	r3, #60	; 0x3c
 80013ae:	9302      	str	r3, [sp, #8]
 80013b0:	4b31      	ldr	r3, [pc, #196]	; (8001478 <DM_DisplayFormattedOutput+0x580>)
 80013b2:	9301      	str	r3, [sp, #4]
 80013b4:	23c8      	movs	r3, #200	; 0xc8
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013bc:	2203      	movs	r2, #3
 80013be:	21a0      	movs	r1, #160	; 0xa0
 80013c0:	20f5      	movs	r0, #245	; 0xf5
 80013c2:	f00f f833 	bl	801042c <ILI9341_Draw_Wave>
			break;
 80013c6:	e045      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, sawicon_data_table_3600, SAWICON_DATA_SIZE);
 80013c8:	233c      	movs	r3, #60	; 0x3c
 80013ca:	9302      	str	r3, [sp, #8]
 80013cc:	4b24      	ldr	r3, [pc, #144]	; (8001460 <DM_DisplayFormattedOutput+0x568>)
 80013ce:	9301      	str	r3, [sp, #4]
 80013d0:	23c8      	movs	r3, #200	; 0xc8
 80013d2:	9300      	str	r3, [sp, #0]
 80013d4:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013d8:	2203      	movs	r2, #3
 80013da:	21a0      	movs	r1, #160	; 0xa0
 80013dc:	20f5      	movs	r0, #245	; 0xf5
 80013de:	f00f f825 	bl	801042c <ILI9341_Draw_Wave>
			break;
 80013e2:	e037      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case REV_SAW_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, sawicon_rev_data_table_3600, SAWICON_REV_DATA_SIZE);
 80013e4:	233c      	movs	r3, #60	; 0x3c
 80013e6:	9302      	str	r3, [sp, #8]
 80013e8:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <DM_DisplayFormattedOutput+0x56c>)
 80013ea:	9301      	str	r3, [sp, #4]
 80013ec:	23c8      	movs	r3, #200	; 0xc8
 80013ee:	9300      	str	r3, [sp, #0]
 80013f0:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80013f4:	2203      	movs	r2, #3
 80013f6:	21a0      	movs	r1, #160	; 0xa0
 80013f8:	20f5      	movs	r0, #245	; 0xf5
 80013fa:	f00f f817 	bl	801042c <ILI9341_Draw_Wave>
			break;
 80013fe:	e029      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case TRIANGLE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 8001400:	233c      	movs	r3, #60	; 0x3c
 8001402:	9302      	str	r3, [sp, #8]
 8001404:	4b18      	ldr	r3, [pc, #96]	; (8001468 <DM_DisplayFormattedOutput+0x570>)
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	23c8      	movs	r3, #200	; 0xc8
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001410:	2203      	movs	r2, #3
 8001412:	21a0      	movs	r1, #160	; 0xa0
 8001414:	20f5      	movs	r0, #245	; 0xf5
 8001416:	f00f f809 	bl	801042c <ILI9341_Draw_Wave>
			break;
 800141a:	e01b      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case IMPULSE_FUNC_MODE:
			ILI9341_Draw_Wave(245, 160, 3, Aux_OUTPUT_ICON, 200, triangleicon_data_table_3600, TRIANGLEICON_DATA_SIZE);
 800141c:	233c      	movs	r3, #60	; 0x3c
 800141e:	9302      	str	r3, [sp, #8]
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <DM_DisplayFormattedOutput+0x570>)
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	23c8      	movs	r3, #200	; 0xc8
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800142c:	2203      	movs	r2, #3
 800142e:	21a0      	movs	r1, #160	; 0xa0
 8001430:	20f5      	movs	r0, #245	; 0xf5
 8001432:	f00e fffb 	bl	801042c <ILI9341_Draw_Wave>
			break;
 8001436:	e00d      	b.n	8001454 <DM_DisplayFormattedOutput+0x55c>
		case PWM_FUNC_MODE:
			ILI9341_Draw_Text("PWM", 245, 170, Aux_OUTPUT_ICON, text_size, NORMAL_TEXT_BGCOLOUR);
 8001438:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 800143c:	b29b      	uxth	r3, r3
 800143e:	2200      	movs	r2, #0
 8001440:	9201      	str	r2, [sp, #4]
 8001442:	9300      	str	r3, [sp, #0]
 8001444:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001448:	22aa      	movs	r2, #170	; 0xaa
 800144a:	21f5      	movs	r1, #245	; 0xf5
 800144c:	4807      	ldr	r0, [pc, #28]	; (800146c <DM_DisplayFormattedOutput+0x574>)
 800144e:	f00f f991 	bl	8010774 <ILI9341_Draw_Text>
			break;
 8001452:	bf00      	nop
	}

	DM_DisplayInputTriggerStatus();
 8001454:	f000 f812 	bl	800147c <DM_DisplayInputTriggerStatus>

}
 8001458:	bf00      	nop
 800145a:	376c      	adds	r7, #108	; 0x6c
 800145c:	46bd      	mov	sp, r7
 800145e:	bd90      	pop	{r4, r7, pc}
 8001460:	20000c44 	.word	0x20000c44
 8001464:	20000d34 	.word	0x20000d34
 8001468:	20001004 	.word	0x20001004
 800146c:	08015718 	.word	0x08015718
 8001470:	0801571c 	.word	0x0801571c
 8001474:	20000e24 	.word	0x20000e24
 8001478:	20000f14 	.word	0x20000f14

0800147c <DM_DisplayInputTriggerStatus>:

void DM_DisplayInputTriggerStatus()
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af02      	add	r7, sp, #8
	uint8_t text_size = 2;
 8001482:	2302      	movs	r3, #2
 8001484:	71fb      	strb	r3, [r7, #7]
	uint16_t text_x_pos = 230;
 8001486:	23e6      	movs	r3, #230	; 0xe6
 8001488:	80bb      	strh	r3, [r7, #4]
	// eTriggerInputMode
	switch(IT_GetActiveTriggerMode())
 800148a:	f004 ff69 	bl	8006360 <IT_GetActiveTriggerMode>
 800148e:	4603      	mov	r3, r0
 8001490:	2b01      	cmp	r3, #1
 8001492:	d023      	beq.n	80014dc <DM_DisplayInputTriggerStatus+0x60>
 8001494:	2b02      	cmp	r3, #2
 8001496:	d040      	beq.n	800151a <DM_DisplayInputTriggerStatus+0x9e>
 8001498:	2b00      	cmp	r3, #0
 800149a:	d000      	beq.n	800149e <DM_DisplayInputTriggerStatus+0x22>
			else
				ILI9341_Draw_Text("T: ADC", text_x_pos, 10, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
			break;

	}
}
 800149c:	e05c      	b.n	8001558 <DM_DisplayInputTriggerStatus+0xdc>
			if(IT_GetTriggerStatus())
 800149e:	f004 ff7b 	bl	8006398 <IT_GetTriggerStatus>
 80014a2:	4603      	mov	r3, r0
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d00c      	beq.n	80014c2 <DM_DisplayInputTriggerStatus+0x46>
				ILI9341_Draw_Text("T: TIM", text_x_pos, 10, HIGHLIGHT_TEXT_FGCOLOUR , text_size, HIGHLIGHT_TEXT_BGCOLOUR);
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	b29b      	uxth	r3, r3
 80014ac:	88b9      	ldrh	r1, [r7, #4]
 80014ae:	f644 42f6 	movw	r2, #19702	; 0x4cf6
 80014b2:	9201      	str	r2, [sp, #4]
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2300      	movs	r3, #0
 80014b8:	220a      	movs	r2, #10
 80014ba:	4829      	ldr	r0, [pc, #164]	; (8001560 <DM_DisplayInputTriggerStatus+0xe4>)
 80014bc:	f00f f95a 	bl	8010774 <ILI9341_Draw_Text>
			break;
 80014c0:	e04a      	b.n	8001558 <DM_DisplayInputTriggerStatus+0xdc>
				ILI9341_Draw_Text("T: TIM", text_x_pos, 10, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
 80014c2:	79fb      	ldrb	r3, [r7, #7]
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	88b9      	ldrh	r1, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	9201      	str	r2, [sp, #4]
 80014cc:	9300      	str	r3, [sp, #0]
 80014ce:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80014d2:	220a      	movs	r2, #10
 80014d4:	4822      	ldr	r0, [pc, #136]	; (8001560 <DM_DisplayInputTriggerStatus+0xe4>)
 80014d6:	f00f f94d 	bl	8010774 <ILI9341_Draw_Text>
			break;
 80014da:	e03d      	b.n	8001558 <DM_DisplayInputTriggerStatus+0xdc>
			if(IT_GetTriggerStatus())
 80014dc:	f004 ff5c 	bl	8006398 <IT_GetTriggerStatus>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00c      	beq.n	8001500 <DM_DisplayInputTriggerStatus+0x84>
				ILI9341_Draw_Text("T: COMP", text_x_pos, 10, HIGHLIGHT_TEXT_FGCOLOUR , text_size, HIGHLIGHT_TEXT_BGCOLOUR);
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	88b9      	ldrh	r1, [r7, #4]
 80014ec:	f644 42f6 	movw	r2, #19702	; 0x4cf6
 80014f0:	9201      	str	r2, [sp, #4]
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2300      	movs	r3, #0
 80014f6:	220a      	movs	r2, #10
 80014f8:	481a      	ldr	r0, [pc, #104]	; (8001564 <DM_DisplayInputTriggerStatus+0xe8>)
 80014fa:	f00f f93b 	bl	8010774 <ILI9341_Draw_Text>
			break;
 80014fe:	e02b      	b.n	8001558 <DM_DisplayInputTriggerStatus+0xdc>
				ILI9341_Draw_Text("T: COMP", text_x_pos, 10, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	b29b      	uxth	r3, r3
 8001504:	88b9      	ldrh	r1, [r7, #4]
 8001506:	2200      	movs	r2, #0
 8001508:	9201      	str	r2, [sp, #4]
 800150a:	9300      	str	r3, [sp, #0]
 800150c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001510:	220a      	movs	r2, #10
 8001512:	4814      	ldr	r0, [pc, #80]	; (8001564 <DM_DisplayInputTriggerStatus+0xe8>)
 8001514:	f00f f92e 	bl	8010774 <ILI9341_Draw_Text>
			break;
 8001518:	e01e      	b.n	8001558 <DM_DisplayInputTriggerStatus+0xdc>
			if(IT_GetTriggerStatus())
 800151a:	f004 ff3d 	bl	8006398 <IT_GetTriggerStatus>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00c      	beq.n	800153e <DM_DisplayInputTriggerStatus+0xc2>
				ILI9341_Draw_Text("T: ADC", text_x_pos, 10, HIGHLIGHT_TEXT_FGCOLOUR , text_size, HIGHLIGHT_TEXT_BGCOLOUR);
 8001524:	79fb      	ldrb	r3, [r7, #7]
 8001526:	b29b      	uxth	r3, r3
 8001528:	88b9      	ldrh	r1, [r7, #4]
 800152a:	f644 42f6 	movw	r2, #19702	; 0x4cf6
 800152e:	9201      	str	r2, [sp, #4]
 8001530:	9300      	str	r3, [sp, #0]
 8001532:	2300      	movs	r3, #0
 8001534:	220a      	movs	r2, #10
 8001536:	480c      	ldr	r0, [pc, #48]	; (8001568 <DM_DisplayInputTriggerStatus+0xec>)
 8001538:	f00f f91c 	bl	8010774 <ILI9341_Draw_Text>
			break;
 800153c:	e00b      	b.n	8001556 <DM_DisplayInputTriggerStatus+0xda>
				ILI9341_Draw_Text("T: ADC", text_x_pos, 10, HIGHLIGHT_TEXT_BGCOLOUR , text_size, HIGHLIGHT_TEXT_FGCOLOUR);
 800153e:	79fb      	ldrb	r3, [r7, #7]
 8001540:	b29b      	uxth	r3, r3
 8001542:	88b9      	ldrh	r1, [r7, #4]
 8001544:	2200      	movs	r2, #0
 8001546:	9201      	str	r2, [sp, #4]
 8001548:	9300      	str	r3, [sp, #0]
 800154a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800154e:	220a      	movs	r2, #10
 8001550:	4805      	ldr	r0, [pc, #20]	; (8001568 <DM_DisplayInputTriggerStatus+0xec>)
 8001552:	f00f f90f 	bl	8010774 <ILI9341_Draw_Text>
			break;
 8001556:	bf00      	nop
}
 8001558:	bf00      	nop
 800155a:	3708      	adds	r7, #8
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}
 8001560:	0801572c 	.word	0x0801572c
 8001564:	08015734 	.word	0x08015734
 8001568:	0801573c 	.word	0x0801573c

0800156c <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af04      	add	r7, sp, #16



	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 8001572:	4820      	ldr	r0, [pc, #128]	; (80015f4 <DM_RefreshScreen+0x88>)
 8001574:	f00c f8ee 	bl	800d754 <HAL_TIM_Base_Stop_IT>


	ILI9341_Fill_Screen(SCREEN_BGCOLOUR);
 8001578:	2000      	movs	r0, #0
 800157a:	f00f fb7b 	bl	8010c74 <ILI9341_Fill_Screen>
	GUI_DrawPolygon(Points, 3, RED);
	GUI_FillPolygon(Points2, 3, BLUE);
	GUI_DrawEllipse(250, 110, 20, 30, GREEN);
	GUI_FillEllipse(250, 110, 20, 30, WHITE);
*/
	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	0,
 800157e:	2300      	movs	r3, #0
 8001580:	9302      	str	r3, [sp, #8]
 8001582:	2302      	movs	r3, #2
 8001584:	9301      	str	r3, [sp, #4]
 8001586:	f240 23fd 	movw	r3, #765	; 0x2fd
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2328      	movs	r3, #40	; 0x28
 800158e:	2250      	movs	r2, #80	; 0x50
 8001590:	21c8      	movs	r1, #200	; 0xc8
 8001592:	2000      	movs	r0, #0
 8001594:	f00e ff8b 	bl	80104ae <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN1_FILL_COLOUR,
													BTN1_BORDER_WEIGHT,
													BTN1_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH,
 8001598:	2300      	movs	r3, #0
 800159a:	9302      	str	r3, [sp, #8]
 800159c:	2302      	movs	r3, #2
 800159e:	9301      	str	r3, [sp, #4]
 80015a0:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	2328      	movs	r3, #40	; 0x28
 80015a8:	2250      	movs	r2, #80	; 0x50
 80015aa:	21c8      	movs	r1, #200	; 0xc8
 80015ac:	2050      	movs	r0, #80	; 0x50
 80015ae:	f00e ff7e 	bl	80104ae <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN2_FILL_COLOUR,
													BTN2_BORDER_WEIGHT,
													BTN2_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*2,
 80015b2:	2300      	movs	r3, #0
 80015b4:	9302      	str	r3, [sp, #8]
 80015b6:	2302      	movs	r3, #2
 80015b8:	9301      	str	r3, [sp, #4]
 80015ba:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2328      	movs	r3, #40	; 0x28
 80015c2:	2250      	movs	r2, #80	; 0x50
 80015c4:	21c8      	movs	r1, #200	; 0xc8
 80015c6:	20a0      	movs	r0, #160	; 0xa0
 80015c8:	f00e ff71 	bl	80104ae <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN3_FILL_COLOUR,
													BTN3_BORDER_WEIGHT,
													BTN3_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*3,
 80015cc:	2300      	movs	r3, #0
 80015ce:	9302      	str	r3, [sp, #8]
 80015d0:	2302      	movs	r3, #2
 80015d2:	9301      	str	r3, [sp, #4]
 80015d4:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80015d8:	9300      	str	r3, [sp, #0]
 80015da:	2328      	movs	r3, #40	; 0x28
 80015dc:	2250      	movs	r2, #80	; 0x50
 80015de:	21c8      	movs	r1, #200	; 0xc8
 80015e0:	20f0      	movs	r0, #240	; 0xf0
 80015e2:	f00e ff64 	bl	80104ae <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN4_FILL_COLOUR,
													BTN4_BORDER_WEIGHT,
													BTN4_BORDER_COLOUR);

	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 80015e6:	4803      	ldr	r0, [pc, #12]	; (80015f4 <DM_RefreshScreen+0x88>)
 80015e8:	f00c f87e 	bl	800d6e8 <HAL_TIM_Base_Start_IT>


}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20002bf0 	.word	0x20002bf0

080015f8 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b084      	sub	sp, #16
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	4a0a      	ldr	r2, [pc, #40]	; (800162c <DM_SetErrorDebugMsg+0x34>)
 8001604:	212d      	movs	r1, #45	; 0x2d
 8001606:	480a      	ldr	r0, [pc, #40]	; (8001630 <DM_SetErrorDebugMsg+0x38>)
 8001608:	f010 fc70 	bl	8011eec <sniprintf>
	ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 800160c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001610:	9301      	str	r3, [sp, #4]
 8001612:	2301      	movs	r3, #1
 8001614:	9300      	str	r3, [sp, #0]
 8001616:	2300      	movs	r3, #0
 8001618:	22be      	movs	r2, #190	; 0xbe
 800161a:	210a      	movs	r1, #10
 800161c:	4804      	ldr	r0, [pc, #16]	; (8001630 <DM_SetErrorDebugMsg+0x38>)
 800161e:	f00f f8a9 	bl	8010774 <ILI9341_Draw_Text>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	080157c0 	.word	0x080157c0
 8001630:	20001e24 	.word	0x20001e24

08001634 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0
 800163a:	4603      	mov	r3, r0
 800163c:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	3b01      	subs	r3, #1
 8001642:	2b04      	cmp	r3, #4
 8001644:	d81b      	bhi.n	800167e <FreqMenu_DrawMenu+0x4a>
 8001646:	a201      	add	r2, pc, #4	; (adr r2, 800164c <FreqMenu_DrawMenu+0x18>)
 8001648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800164c:	08001661 	.word	0x08001661
 8001650:	08001667 	.word	0x08001667
 8001654:	0800166d 	.word	0x0800166d
 8001658:	08001673 	.word	0x08001673
 800165c:	08001679 	.word	0x08001679
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 8001660:	f000 f812 	bl	8001688 <FreqMenu_DrawMainMenu>
			break;
 8001664:	e00c      	b.n	8001680 <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 8001666:	f000 f859 	bl	800171c <FreqMenu_DrawPresetMenu>
			break;
 800166a:	e009      	b.n	8001680 <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 800166c:	f001 fb06 	bl	8002c7c <FreqMenu_DrawAdjustMenu>
			break;
 8001670:	e006      	b.n	8001680 <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 8001672:	f001 fb19 	bl	8002ca8 <FreqMenu_DrawSweepMenu>
			break;
 8001676:	e003      	b.n	8001680 <FreqMenu_DrawMenu+0x4c>
		case ENABLE_FREQ_PRESCALER_MENU:
			FreqMenu_DrawPrescalerMenu();
 8001678:	f001 fd48 	bl	800310c <FreqMenu_DrawPrescalerMenu>
			break;
 800167c:	e000      	b.n	8001680 <FreqMenu_DrawMenu+0x4c>
		default:
			break;
 800167e:	bf00      	nop

	}
}
 8001680:	bf00      	nop
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}

08001688 <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800168e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001692:	9301      	str	r3, [sp, #4]
 8001694:	2302      	movs	r3, #2
 8001696:	9300      	str	r3, [sp, #0]
 8001698:	2300      	movs	r3, #0
 800169a:	220a      	movs	r2, #10
 800169c:	2105      	movs	r1, #5
 800169e:	481a      	ldr	r0, [pc, #104]	; (8001708 <FreqMenu_DrawMainMenu+0x80>)
 80016a0:	f00f f868 	bl	8010774 <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 80016a4:	f7ff fc28 	bl	8000ef8 <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("COARSE", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80016a8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80016ac:	9301      	str	r3, [sp, #4]
 80016ae:	2302      	movs	r3, #2
 80016b0:	9300      	str	r3, [sp, #0]
 80016b2:	2300      	movs	r3, #0
 80016b4:	22d2      	movs	r2, #210	; 0xd2
 80016b6:	2105      	movs	r1, #5
 80016b8:	4814      	ldr	r0, [pc, #80]	; (800170c <FreqMenu_DrawMainMenu+0x84>)
 80016ba:	f00f f85b 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FINE", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80016be:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80016c2:	9301      	str	r3, [sp, #4]
 80016c4:	2302      	movs	r3, #2
 80016c6:	9300      	str	r3, [sp, #0]
 80016c8:	2300      	movs	r3, #0
 80016ca:	22d2      	movs	r2, #210	; 0xd2
 80016cc:	2161      	movs	r1, #97	; 0x61
 80016ce:	4810      	ldr	r0, [pc, #64]	; (8001710 <FreqMenu_DrawMainMenu+0x88>)
 80016d0:	f00f f850 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP",  172, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80016d4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80016d8:	9301      	str	r3, [sp, #4]
 80016da:	2302      	movs	r3, #2
 80016dc:	9300      	str	r3, [sp, #0]
 80016de:	2300      	movs	r3, #0
 80016e0:	22d2      	movs	r2, #210	; 0xd2
 80016e2:	21ac      	movs	r1, #172	; 0xac
 80016e4:	480b      	ldr	r0, [pc, #44]	; (8001714 <FreqMenu_DrawMainMenu+0x8c>)
 80016e6:	f00f f845 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("PSC", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80016ea:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80016ee:	9301      	str	r3, [sp, #4]
 80016f0:	2302      	movs	r3, #2
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2300      	movs	r3, #0
 80016f6:	22d2      	movs	r2, #210	; 0xd2
 80016f8:	f44f 7182 	mov.w	r1, #260	; 0x104
 80016fc:	4806      	ldr	r0, [pc, #24]	; (8001718 <FreqMenu_DrawMainMenu+0x90>)
 80016fe:	f00f f839 	bl	8010774 <ILI9341_Draw_Text>
}
 8001702:	bf00      	nop
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	080157c4 	.word	0x080157c4
 800170c:	080157d0 	.word	0x080157d0
 8001710:	080157d8 	.word	0x080157d8
 8001714:	080157e0 	.word	0x080157e0
 8001718:	080157e8 	.word	0x080157e8

0800171c <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b086      	sub	sp, #24
 8001720:	af02      	add	r7, sp, #8



	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8001722:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001726:	9301      	str	r3, [sp, #4]
 8001728:	2302      	movs	r3, #2
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	2300      	movs	r3, #0
 800172e:	220a      	movs	r2, #10
 8001730:	2105      	movs	r1, #5
 8001732:	4887      	ldr	r0, [pc, #540]	; (8001950 <FreqMenu_DrawPresetMenu+0x234>)
 8001734:	f00f f81e 	bl	8010774 <ILI9341_Draw_Text>

	DM_DisplayInputTriggerStatus();
 8001738:	f7ff fea0 	bl	800147c <DM_DisplayInputTriggerStatus>

	uint8_t menu_pos_y1 = 40;
 800173c:	2328      	movs	r3, #40	; 0x28
 800173e:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 60;
 8001740:	233c      	movs	r3, #60	; 0x3c
 8001742:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 80;
 8001744:	2350      	movs	r3, #80	; 0x50
 8001746:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 100;
 8001748:	2364      	movs	r3, #100	; 0x64
 800174a:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 120;
 800174c:	2378      	movs	r3, #120	; 0x78
 800174e:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 140;
 8001750:	238c      	movs	r3, #140	; 0x8c
 8001752:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 160;
 8001754:	23a0      	movs	r3, #160	; 0xa0
 8001756:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8001758:	f004 f886 	bl	8005868 <FreqO_GetFPresetObject>
 800175c:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b00      	cmp	r3, #0
 8001762:	f001 825d 	beq.w	8002c20 <FreqMenu_DrawPresetMenu+0x1504>
	{
		switch(pFreqPresetTmp->hertz)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	685b      	ldr	r3, [r3, #4]
 800176a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800176e:	4293      	cmp	r3, r2
 8001770:	f000 849a 	beq.w	80020a8 <FreqMenu_DrawPresetMenu+0x98c>
 8001774:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001778:	4293      	cmp	r3, r2
 800177a:	d817      	bhi.n	80017ac <FreqMenu_DrawPresetMenu+0x90>
 800177c:	2b32      	cmp	r3, #50	; 0x32
 800177e:	f000 81b3 	beq.w	8001ae8 <FreqMenu_DrawPresetMenu+0x3cc>
 8001782:	2b32      	cmp	r3, #50	; 0x32
 8001784:	d806      	bhi.n	8001794 <FreqMenu_DrawPresetMenu+0x78>
 8001786:	2b01      	cmp	r3, #1
 8001788:	d038      	beq.n	80017fc <FreqMenu_DrawPresetMenu+0xe0>
 800178a:	2b0a      	cmp	r3, #10
 800178c:	f000 8102 	beq.w	8001994 <FreqMenu_DrawPresetMenu+0x278>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	}

}
 8001790:	f001 ba52 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
		switch(pFreqPresetTmp->hertz)
 8001794:	2bfa      	cmp	r3, #250	; 0xfa
 8001796:	f000 8317 	beq.w	8001dc8 <FreqMenu_DrawPresetMenu+0x6ac>
 800179a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800179e:	f000 83d9 	beq.w	8001f54 <FreqMenu_DrawPresetMenu+0x838>
 80017a2:	2b64      	cmp	r3, #100	; 0x64
 80017a4:	f000 8266 	beq.w	8001c74 <FreqMenu_DrawPresetMenu+0x558>
}
 80017a8:	f001 ba46 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
		switch(pFreqPresetTmp->hertz)
 80017ac:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80017b0:	4293      	cmp	r3, r2
 80017b2:	f000 8758 	beq.w	8002666 <FreqMenu_DrawPresetMenu+0xf4a>
 80017b6:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d80f      	bhi.n	80017de <FreqMenu_DrawPresetMenu+0xc2>
 80017be:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c2:	4293      	cmp	r3, r2
 80017c4:	f000 85e0 	beq.w	8002388 <FreqMenu_DrawPresetMenu+0xc6c>
 80017c8:	f242 7210 	movw	r2, #10000	; 0x2710
 80017cc:	4293      	cmp	r3, r2
 80017ce:	f000 86a1 	beq.w	8002514 <FreqMenu_DrawPresetMenu+0xdf8>
 80017d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80017d6:	f000 852d 	beq.w	8002234 <FreqMenu_DrawPresetMenu+0xb18>
}
 80017da:	f001 ba2d 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
		switch(pFreqPresetTmp->hertz)
 80017de:	4a5d      	ldr	r2, [pc, #372]	; (8001954 <FreqMenu_DrawPresetMenu+0x238>)
 80017e0:	4293      	cmp	r3, r2
 80017e2:	f001 80ae 	beq.w	8002942 <FreqMenu_DrawPresetMenu+0x1226>
 80017e6:	4a5c      	ldr	r2, [pc, #368]	; (8001958 <FreqMenu_DrawPresetMenu+0x23c>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	f001 816f 	beq.w	8002acc <FreqMenu_DrawPresetMenu+0x13b0>
 80017ee:	f24c 3250 	movw	r2, #50000	; 0xc350
 80017f2:	4293      	cmp	r3, r2
 80017f4:	f000 87fc 	beq.w	80027f0 <FreqMenu_DrawPresetMenu+0x10d4>
}
 80017f8:	f001 ba1e 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80017fc:	7bfb      	ldrb	r3, [r7, #15]
 80017fe:	b29a      	uxth	r2, r3
 8001800:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001804:	9301      	str	r3, [sp, #4]
 8001806:	2302      	movs	r3, #2
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	2300      	movs	r3, #0
 800180c:	2105      	movs	r1, #5
 800180e:	4853      	ldr	r0, [pc, #332]	; (800195c <FreqMenu_DrawPresetMenu+0x240>)
 8001810:	f00e ffb0 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001814:	7bbb      	ldrb	r3, [r7, #14]
 8001816:	b29a      	uxth	r2, r3
 8001818:	2300      	movs	r3, #0
 800181a:	9301      	str	r3, [sp, #4]
 800181c:	2302      	movs	r3, #2
 800181e:	9300      	str	r3, [sp, #0]
 8001820:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001824:	2105      	movs	r1, #5
 8001826:	484e      	ldr	r0, [pc, #312]	; (8001960 <FreqMenu_DrawPresetMenu+0x244>)
 8001828:	f00e ffa4 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800182c:	7b7b      	ldrb	r3, [r7, #13]
 800182e:	b29a      	uxth	r2, r3
 8001830:	2300      	movs	r3, #0
 8001832:	9301      	str	r3, [sp, #4]
 8001834:	2302      	movs	r3, #2
 8001836:	9300      	str	r3, [sp, #0]
 8001838:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800183c:	2105      	movs	r1, #5
 800183e:	4849      	ldr	r0, [pc, #292]	; (8001964 <FreqMenu_DrawPresetMenu+0x248>)
 8001840:	f00e ff98 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001844:	7b3b      	ldrb	r3, [r7, #12]
 8001846:	b29a      	uxth	r2, r3
 8001848:	2300      	movs	r3, #0
 800184a:	9301      	str	r3, [sp, #4]
 800184c:	2302      	movs	r3, #2
 800184e:	9300      	str	r3, [sp, #0]
 8001850:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001854:	2105      	movs	r1, #5
 8001856:	4844      	ldr	r0, [pc, #272]	; (8001968 <FreqMenu_DrawPresetMenu+0x24c>)
 8001858:	f00e ff8c 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800185c:	7afb      	ldrb	r3, [r7, #11]
 800185e:	b29a      	uxth	r2, r3
 8001860:	2300      	movs	r3, #0
 8001862:	9301      	str	r3, [sp, #4]
 8001864:	2302      	movs	r3, #2
 8001866:	9300      	str	r3, [sp, #0]
 8001868:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800186c:	2105      	movs	r1, #5
 800186e:	483f      	ldr	r0, [pc, #252]	; (800196c <FreqMenu_DrawPresetMenu+0x250>)
 8001870:	f00e ff80 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001874:	7abb      	ldrb	r3, [r7, #10]
 8001876:	b29a      	uxth	r2, r3
 8001878:	2300      	movs	r3, #0
 800187a:	9301      	str	r3, [sp, #4]
 800187c:	2302      	movs	r3, #2
 800187e:	9300      	str	r3, [sp, #0]
 8001880:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001884:	2105      	movs	r1, #5
 8001886:	483a      	ldr	r0, [pc, #232]	; (8001970 <FreqMenu_DrawPresetMenu+0x254>)
 8001888:	f00e ff74 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800188c:	7a7b      	ldrb	r3, [r7, #9]
 800188e:	b29a      	uxth	r2, r3
 8001890:	2300      	movs	r3, #0
 8001892:	9301      	str	r3, [sp, #4]
 8001894:	2302      	movs	r3, #2
 8001896:	9300      	str	r3, [sp, #0]
 8001898:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800189c:	2105      	movs	r1, #5
 800189e:	4835      	ldr	r0, [pc, #212]	; (8001974 <FreqMenu_DrawPresetMenu+0x258>)
 80018a0:	f00e ff68 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018a4:	7bfb      	ldrb	r3, [r7, #15]
 80018a6:	b29a      	uxth	r2, r3
 80018a8:	2300      	movs	r3, #0
 80018aa:	9301      	str	r3, [sp, #4]
 80018ac:	2302      	movs	r3, #2
 80018ae:	9300      	str	r3, [sp, #0]
 80018b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018b4:	2178      	movs	r1, #120	; 0x78
 80018b6:	4830      	ldr	r0, [pc, #192]	; (8001978 <FreqMenu_DrawPresetMenu+0x25c>)
 80018b8:	f00e ff5c 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018bc:	7bbb      	ldrb	r3, [r7, #14]
 80018be:	b29a      	uxth	r2, r3
 80018c0:	2300      	movs	r3, #0
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	2302      	movs	r3, #2
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018cc:	2178      	movs	r1, #120	; 0x78
 80018ce:	482b      	ldr	r0, [pc, #172]	; (800197c <FreqMenu_DrawPresetMenu+0x260>)
 80018d0:	f00e ff50 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018d4:	7b7b      	ldrb	r3, [r7, #13]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	2300      	movs	r3, #0
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	2302      	movs	r3, #2
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018e4:	2178      	movs	r1, #120	; 0x78
 80018e6:	4826      	ldr	r0, [pc, #152]	; (8001980 <FreqMenu_DrawPresetMenu+0x264>)
 80018e8:	f00e ff44 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018ec:	7b3b      	ldrb	r3, [r7, #12]
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	2300      	movs	r3, #0
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	2302      	movs	r3, #2
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018fc:	2178      	movs	r1, #120	; 0x78
 80018fe:	4821      	ldr	r0, [pc, #132]	; (8001984 <FreqMenu_DrawPresetMenu+0x268>)
 8001900:	f00e ff38 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001904:	7afb      	ldrb	r3, [r7, #11]
 8001906:	b29a      	uxth	r2, r3
 8001908:	2300      	movs	r3, #0
 800190a:	9301      	str	r3, [sp, #4]
 800190c:	2302      	movs	r3, #2
 800190e:	9300      	str	r3, [sp, #0]
 8001910:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001914:	2178      	movs	r1, #120	; 0x78
 8001916:	481c      	ldr	r0, [pc, #112]	; (8001988 <FreqMenu_DrawPresetMenu+0x26c>)
 8001918:	f00e ff2c 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800191c:	7abb      	ldrb	r3, [r7, #10]
 800191e:	b29a      	uxth	r2, r3
 8001920:	2300      	movs	r3, #0
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	2302      	movs	r3, #2
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800192c:	2178      	movs	r1, #120	; 0x78
 800192e:	4817      	ldr	r0, [pc, #92]	; (800198c <FreqMenu_DrawPresetMenu+0x270>)
 8001930:	f00e ff20 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001934:	7a7b      	ldrb	r3, [r7, #9]
 8001936:	b29a      	uxth	r2, r3
 8001938:	2300      	movs	r3, #0
 800193a:	9301      	str	r3, [sp, #4]
 800193c:	2302      	movs	r3, #2
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001944:	2178      	movs	r1, #120	; 0x78
 8001946:	4812      	ldr	r0, [pc, #72]	; (8001990 <FreqMenu_DrawPresetMenu+0x274>)
 8001948:	f00e ff14 	bl	8010774 <ILI9341_Draw_Text>
				break;
 800194c:	f001 b974 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
 8001950:	080157ec 	.word	0x080157ec
 8001954:	000124f8 	.word	0x000124f8
 8001958:	000186a0 	.word	0x000186a0
 800195c:	08015800 	.word	0x08015800
 8001960:	08015808 	.word	0x08015808
 8001964:	08015810 	.word	0x08015810
 8001968:	08015818 	.word	0x08015818
 800196c:	08015820 	.word	0x08015820
 8001970:	08015828 	.word	0x08015828
 8001974:	08015830 	.word	0x08015830
 8001978:	08015838 	.word	0x08015838
 800197c:	08015840 	.word	0x08015840
 8001980:	08015848 	.word	0x08015848
 8001984:	08015850 	.word	0x08015850
 8001988:	08015858 	.word	0x08015858
 800198c:	08015860 	.word	0x08015860
 8001990:	08015868 	.word	0x08015868
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001994:	7bfb      	ldrb	r3, [r7, #15]
 8001996:	b29a      	uxth	r2, r3
 8001998:	2300      	movs	r3, #0
 800199a:	9301      	str	r3, [sp, #4]
 800199c:	2302      	movs	r3, #2
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019a4:	2105      	movs	r1, #5
 80019a6:	48a5      	ldr	r0, [pc, #660]	; (8001c3c <FreqMenu_DrawPresetMenu+0x520>)
 80019a8:	f00e fee4 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80019ac:	7bbb      	ldrb	r3, [r7, #14]
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	2302      	movs	r3, #2
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	2300      	movs	r3, #0
 80019bc:	2105      	movs	r1, #5
 80019be:	48a0      	ldr	r0, [pc, #640]	; (8001c40 <FreqMenu_DrawPresetMenu+0x524>)
 80019c0:	f00e fed8 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019c4:	7b7b      	ldrb	r3, [r7, #13]
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	2300      	movs	r3, #0
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	2302      	movs	r3, #2
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019d4:	2105      	movs	r1, #5
 80019d6:	489b      	ldr	r0, [pc, #620]	; (8001c44 <FreqMenu_DrawPresetMenu+0x528>)
 80019d8:	f00e fecc 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019dc:	7b3b      	ldrb	r3, [r7, #12]
 80019de:	b29a      	uxth	r2, r3
 80019e0:	2300      	movs	r3, #0
 80019e2:	9301      	str	r3, [sp, #4]
 80019e4:	2302      	movs	r3, #2
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019ec:	2105      	movs	r1, #5
 80019ee:	4896      	ldr	r0, [pc, #600]	; (8001c48 <FreqMenu_DrawPresetMenu+0x52c>)
 80019f0:	f00e fec0 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019f4:	7afb      	ldrb	r3, [r7, #11]
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	2300      	movs	r3, #0
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	2302      	movs	r3, #2
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a04:	2105      	movs	r1, #5
 8001a06:	4891      	ldr	r0, [pc, #580]	; (8001c4c <FreqMenu_DrawPresetMenu+0x530>)
 8001a08:	f00e feb4 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a0c:	7abb      	ldrb	r3, [r7, #10]
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	2300      	movs	r3, #0
 8001a12:	9301      	str	r3, [sp, #4]
 8001a14:	2302      	movs	r3, #2
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a1c:	2105      	movs	r1, #5
 8001a1e:	488c      	ldr	r0, [pc, #560]	; (8001c50 <FreqMenu_DrawPresetMenu+0x534>)
 8001a20:	f00e fea8 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a24:	7a7b      	ldrb	r3, [r7, #9]
 8001a26:	b29a      	uxth	r2, r3
 8001a28:	2300      	movs	r3, #0
 8001a2a:	9301      	str	r3, [sp, #4]
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	9300      	str	r3, [sp, #0]
 8001a30:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a34:	2105      	movs	r1, #5
 8001a36:	4887      	ldr	r0, [pc, #540]	; (8001c54 <FreqMenu_DrawPresetMenu+0x538>)
 8001a38:	f00e fe9c 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a3c:	7bfb      	ldrb	r3, [r7, #15]
 8001a3e:	b29a      	uxth	r2, r3
 8001a40:	2300      	movs	r3, #0
 8001a42:	9301      	str	r3, [sp, #4]
 8001a44:	2302      	movs	r3, #2
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a4c:	2178      	movs	r1, #120	; 0x78
 8001a4e:	4882      	ldr	r0, [pc, #520]	; (8001c58 <FreqMenu_DrawPresetMenu+0x53c>)
 8001a50:	f00e fe90 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a54:	7bbb      	ldrb	r3, [r7, #14]
 8001a56:	b29a      	uxth	r2, r3
 8001a58:	2300      	movs	r3, #0
 8001a5a:	9301      	str	r3, [sp, #4]
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	9300      	str	r3, [sp, #0]
 8001a60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a64:	2178      	movs	r1, #120	; 0x78
 8001a66:	487d      	ldr	r0, [pc, #500]	; (8001c5c <FreqMenu_DrawPresetMenu+0x540>)
 8001a68:	f00e fe84 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a6c:	7b7b      	ldrb	r3, [r7, #13]
 8001a6e:	b29a      	uxth	r2, r3
 8001a70:	2300      	movs	r3, #0
 8001a72:	9301      	str	r3, [sp, #4]
 8001a74:	2302      	movs	r3, #2
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a7c:	2178      	movs	r1, #120	; 0x78
 8001a7e:	4878      	ldr	r0, [pc, #480]	; (8001c60 <FreqMenu_DrawPresetMenu+0x544>)
 8001a80:	f00e fe78 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a84:	7b3b      	ldrb	r3, [r7, #12]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	2300      	movs	r3, #0
 8001a8a:	9301      	str	r3, [sp, #4]
 8001a8c:	2302      	movs	r3, #2
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a94:	2178      	movs	r1, #120	; 0x78
 8001a96:	4873      	ldr	r0, [pc, #460]	; (8001c64 <FreqMenu_DrawPresetMenu+0x548>)
 8001a98:	f00e fe6c 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a9c:	7afb      	ldrb	r3, [r7, #11]
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	9301      	str	r3, [sp, #4]
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	9300      	str	r3, [sp, #0]
 8001aa8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001aac:	2178      	movs	r1, #120	; 0x78
 8001aae:	486e      	ldr	r0, [pc, #440]	; (8001c68 <FreqMenu_DrawPresetMenu+0x54c>)
 8001ab0:	f00e fe60 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ab4:	7abb      	ldrb	r3, [r7, #10]
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	2300      	movs	r3, #0
 8001aba:	9301      	str	r3, [sp, #4]
 8001abc:	2302      	movs	r3, #2
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ac4:	2178      	movs	r1, #120	; 0x78
 8001ac6:	4869      	ldr	r0, [pc, #420]	; (8001c6c <FreqMenu_DrawPresetMenu+0x550>)
 8001ac8:	f00e fe54 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001acc:	7a7b      	ldrb	r3, [r7, #9]
 8001ace:	b29a      	uxth	r2, r3
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	9301      	str	r3, [sp, #4]
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001adc:	2178      	movs	r1, #120	; 0x78
 8001ade:	4864      	ldr	r0, [pc, #400]	; (8001c70 <FreqMenu_DrawPresetMenu+0x554>)
 8001ae0:	f00e fe48 	bl	8010774 <ILI9341_Draw_Text>
				break;
 8001ae4:	f001 b8a8 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ae8:	7bfb      	ldrb	r3, [r7, #15]
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	2300      	movs	r3, #0
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	2302      	movs	r3, #2
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001af8:	2105      	movs	r1, #5
 8001afa:	4850      	ldr	r0, [pc, #320]	; (8001c3c <FreqMenu_DrawPresetMenu+0x520>)
 8001afc:	f00e fe3a 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b00:	7bbb      	ldrb	r3, [r7, #14]
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	2300      	movs	r3, #0
 8001b06:	9301      	str	r3, [sp, #4]
 8001b08:	2302      	movs	r3, #2
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b10:	2105      	movs	r1, #5
 8001b12:	484b      	ldr	r0, [pc, #300]	; (8001c40 <FreqMenu_DrawPresetMenu+0x524>)
 8001b14:	f00e fe2e 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001b18:	7b7b      	ldrb	r3, [r7, #13]
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001b20:	9301      	str	r3, [sp, #4]
 8001b22:	2302      	movs	r3, #2
 8001b24:	9300      	str	r3, [sp, #0]
 8001b26:	2300      	movs	r3, #0
 8001b28:	2105      	movs	r1, #5
 8001b2a:	4846      	ldr	r0, [pc, #280]	; (8001c44 <FreqMenu_DrawPresetMenu+0x528>)
 8001b2c:	f00e fe22 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b30:	7b3b      	ldrb	r3, [r7, #12]
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	2300      	movs	r3, #0
 8001b36:	9301      	str	r3, [sp, #4]
 8001b38:	2302      	movs	r3, #2
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b40:	2105      	movs	r1, #5
 8001b42:	4841      	ldr	r0, [pc, #260]	; (8001c48 <FreqMenu_DrawPresetMenu+0x52c>)
 8001b44:	f00e fe16 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b48:	7afb      	ldrb	r3, [r7, #11]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	2302      	movs	r3, #2
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b58:	2105      	movs	r1, #5
 8001b5a:	483c      	ldr	r0, [pc, #240]	; (8001c4c <FreqMenu_DrawPresetMenu+0x530>)
 8001b5c:	f00e fe0a 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b60:	7abb      	ldrb	r3, [r7, #10]
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	2300      	movs	r3, #0
 8001b66:	9301      	str	r3, [sp, #4]
 8001b68:	2302      	movs	r3, #2
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b70:	2105      	movs	r1, #5
 8001b72:	4837      	ldr	r0, [pc, #220]	; (8001c50 <FreqMenu_DrawPresetMenu+0x534>)
 8001b74:	f00e fdfe 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b78:	7a7b      	ldrb	r3, [r7, #9]
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	9301      	str	r3, [sp, #4]
 8001b80:	2302      	movs	r3, #2
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b88:	2105      	movs	r1, #5
 8001b8a:	4832      	ldr	r0, [pc, #200]	; (8001c54 <FreqMenu_DrawPresetMenu+0x538>)
 8001b8c:	f00e fdf2 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	2300      	movs	r3, #0
 8001b96:	9301      	str	r3, [sp, #4]
 8001b98:	2302      	movs	r3, #2
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ba0:	2178      	movs	r1, #120	; 0x78
 8001ba2:	482d      	ldr	r0, [pc, #180]	; (8001c58 <FreqMenu_DrawPresetMenu+0x53c>)
 8001ba4:	f00e fde6 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ba8:	7bbb      	ldrb	r3, [r7, #14]
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	2300      	movs	r3, #0
 8001bae:	9301      	str	r3, [sp, #4]
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bb8:	2178      	movs	r1, #120	; 0x78
 8001bba:	4828      	ldr	r0, [pc, #160]	; (8001c5c <FreqMenu_DrawPresetMenu+0x540>)
 8001bbc:	f00e fdda 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bc0:	7b7b      	ldrb	r3, [r7, #13]
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	9301      	str	r3, [sp, #4]
 8001bc8:	2302      	movs	r3, #2
 8001bca:	9300      	str	r3, [sp, #0]
 8001bcc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bd0:	2178      	movs	r1, #120	; 0x78
 8001bd2:	4823      	ldr	r0, [pc, #140]	; (8001c60 <FreqMenu_DrawPresetMenu+0x544>)
 8001bd4:	f00e fdce 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bd8:	7b3b      	ldrb	r3, [r7, #12]
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	2300      	movs	r3, #0
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	2302      	movs	r3, #2
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001be8:	2178      	movs	r1, #120	; 0x78
 8001bea:	481e      	ldr	r0, [pc, #120]	; (8001c64 <FreqMenu_DrawPresetMenu+0x548>)
 8001bec:	f00e fdc2 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bf0:	7afb      	ldrb	r3, [r7, #11]
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	2302      	movs	r3, #2
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c00:	2178      	movs	r1, #120	; 0x78
 8001c02:	4819      	ldr	r0, [pc, #100]	; (8001c68 <FreqMenu_DrawPresetMenu+0x54c>)
 8001c04:	f00e fdb6 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c08:	7abb      	ldrb	r3, [r7, #10]
 8001c0a:	b29a      	uxth	r2, r3
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	9301      	str	r3, [sp, #4]
 8001c10:	2302      	movs	r3, #2
 8001c12:	9300      	str	r3, [sp, #0]
 8001c14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c18:	2178      	movs	r1, #120	; 0x78
 8001c1a:	4814      	ldr	r0, [pc, #80]	; (8001c6c <FreqMenu_DrawPresetMenu+0x550>)
 8001c1c:	f00e fdaa 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c20:	7a7b      	ldrb	r3, [r7, #9]
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	2300      	movs	r3, #0
 8001c26:	9301      	str	r3, [sp, #4]
 8001c28:	2302      	movs	r3, #2
 8001c2a:	9300      	str	r3, [sp, #0]
 8001c2c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c30:	2178      	movs	r1, #120	; 0x78
 8001c32:	480f      	ldr	r0, [pc, #60]	; (8001c70 <FreqMenu_DrawPresetMenu+0x554>)
 8001c34:	f00e fd9e 	bl	8010774 <ILI9341_Draw_Text>
				break;
 8001c38:	f000 bffe 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
 8001c3c:	08015800 	.word	0x08015800
 8001c40:	08015808 	.word	0x08015808
 8001c44:	08015810 	.word	0x08015810
 8001c48:	08015818 	.word	0x08015818
 8001c4c:	08015820 	.word	0x08015820
 8001c50:	08015828 	.word	0x08015828
 8001c54:	08015830 	.word	0x08015830
 8001c58:	08015838 	.word	0x08015838
 8001c5c:	08015840 	.word	0x08015840
 8001c60:	08015848 	.word	0x08015848
 8001c64:	08015850 	.word	0x08015850
 8001c68:	08015858 	.word	0x08015858
 8001c6c:	08015860 	.word	0x08015860
 8001c70:	08015868 	.word	0x08015868
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c74:	7bfb      	ldrb	r3, [r7, #15]
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	2300      	movs	r3, #0
 8001c7a:	9301      	str	r3, [sp, #4]
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c84:	2105      	movs	r1, #5
 8001c86:	48a5      	ldr	r0, [pc, #660]	; (8001f1c <FreqMenu_DrawPresetMenu+0x800>)
 8001c88:	f00e fd74 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c8c:	7bbb      	ldrb	r3, [r7, #14]
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	2300      	movs	r3, #0
 8001c92:	9301      	str	r3, [sp, #4]
 8001c94:	2302      	movs	r3, #2
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c9c:	2105      	movs	r1, #5
 8001c9e:	48a0      	ldr	r0, [pc, #640]	; (8001f20 <FreqMenu_DrawPresetMenu+0x804>)
 8001ca0:	f00e fd68 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ca4:	7b7b      	ldrb	r3, [r7, #13]
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	2300      	movs	r3, #0
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	2302      	movs	r3, #2
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cb4:	2105      	movs	r1, #5
 8001cb6:	489b      	ldr	r0, [pc, #620]	; (8001f24 <FreqMenu_DrawPresetMenu+0x808>)
 8001cb8:	f00e fd5c 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001cbc:	7b3b      	ldrb	r3, [r7, #12]
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001cc4:	9301      	str	r3, [sp, #4]
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	2105      	movs	r1, #5
 8001cce:	4896      	ldr	r0, [pc, #600]	; (8001f28 <FreqMenu_DrawPresetMenu+0x80c>)
 8001cd0:	f00e fd50 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cd4:	7afb      	ldrb	r3, [r7, #11]
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	2300      	movs	r3, #0
 8001cda:	9301      	str	r3, [sp, #4]
 8001cdc:	2302      	movs	r3, #2
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ce4:	2105      	movs	r1, #5
 8001ce6:	4891      	ldr	r0, [pc, #580]	; (8001f2c <FreqMenu_DrawPresetMenu+0x810>)
 8001ce8:	f00e fd44 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cec:	7abb      	ldrb	r3, [r7, #10]
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	9301      	str	r3, [sp, #4]
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	9300      	str	r3, [sp, #0]
 8001cf8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cfc:	2105      	movs	r1, #5
 8001cfe:	488c      	ldr	r0, [pc, #560]	; (8001f30 <FreqMenu_DrawPresetMenu+0x814>)
 8001d00:	f00e fd38 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d04:	7a7b      	ldrb	r3, [r7, #9]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	2300      	movs	r3, #0
 8001d0a:	9301      	str	r3, [sp, #4]
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d14:	2105      	movs	r1, #5
 8001d16:	4887      	ldr	r0, [pc, #540]	; (8001f34 <FreqMenu_DrawPresetMenu+0x818>)
 8001d18:	f00e fd2c 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d1c:	7bfb      	ldrb	r3, [r7, #15]
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	2300      	movs	r3, #0
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	2302      	movs	r3, #2
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d2c:	2178      	movs	r1, #120	; 0x78
 8001d2e:	4882      	ldr	r0, [pc, #520]	; (8001f38 <FreqMenu_DrawPresetMenu+0x81c>)
 8001d30:	f00e fd20 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d34:	7bbb      	ldrb	r3, [r7, #14]
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	2300      	movs	r3, #0
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	2302      	movs	r3, #2
 8001d3e:	9300      	str	r3, [sp, #0]
 8001d40:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d44:	2178      	movs	r1, #120	; 0x78
 8001d46:	487d      	ldr	r0, [pc, #500]	; (8001f3c <FreqMenu_DrawPresetMenu+0x820>)
 8001d48:	f00e fd14 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d4c:	7b7b      	ldrb	r3, [r7, #13]
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	2300      	movs	r3, #0
 8001d52:	9301      	str	r3, [sp, #4]
 8001d54:	2302      	movs	r3, #2
 8001d56:	9300      	str	r3, [sp, #0]
 8001d58:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d5c:	2178      	movs	r1, #120	; 0x78
 8001d5e:	4878      	ldr	r0, [pc, #480]	; (8001f40 <FreqMenu_DrawPresetMenu+0x824>)
 8001d60:	f00e fd08 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d64:	7b3b      	ldrb	r3, [r7, #12]
 8001d66:	b29a      	uxth	r2, r3
 8001d68:	2300      	movs	r3, #0
 8001d6a:	9301      	str	r3, [sp, #4]
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d74:	2178      	movs	r1, #120	; 0x78
 8001d76:	4873      	ldr	r0, [pc, #460]	; (8001f44 <FreqMenu_DrawPresetMenu+0x828>)
 8001d78:	f00e fcfc 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d7c:	7afb      	ldrb	r3, [r7, #11]
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	2300      	movs	r3, #0
 8001d82:	9301      	str	r3, [sp, #4]
 8001d84:	2302      	movs	r3, #2
 8001d86:	9300      	str	r3, [sp, #0]
 8001d88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d8c:	2178      	movs	r1, #120	; 0x78
 8001d8e:	486e      	ldr	r0, [pc, #440]	; (8001f48 <FreqMenu_DrawPresetMenu+0x82c>)
 8001d90:	f00e fcf0 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d94:	7abb      	ldrb	r3, [r7, #10]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	2300      	movs	r3, #0
 8001d9a:	9301      	str	r3, [sp, #4]
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	9300      	str	r3, [sp, #0]
 8001da0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001da4:	2178      	movs	r1, #120	; 0x78
 8001da6:	4869      	ldr	r0, [pc, #420]	; (8001f4c <FreqMenu_DrawPresetMenu+0x830>)
 8001da8:	f00e fce4 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dac:	7a7b      	ldrb	r3, [r7, #9]
 8001dae:	b29a      	uxth	r2, r3
 8001db0:	2300      	movs	r3, #0
 8001db2:	9301      	str	r3, [sp, #4]
 8001db4:	2302      	movs	r3, #2
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dbc:	2178      	movs	r1, #120	; 0x78
 8001dbe:	4864      	ldr	r0, [pc, #400]	; (8001f50 <FreqMenu_DrawPresetMenu+0x834>)
 8001dc0:	f00e fcd8 	bl	8010774 <ILI9341_Draw_Text>
				break;
 8001dc4:	f000 bf38 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	2300      	movs	r3, #0
 8001dce:	9301      	str	r3, [sp, #4]
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dd8:	2105      	movs	r1, #5
 8001dda:	4850      	ldr	r0, [pc, #320]	; (8001f1c <FreqMenu_DrawPresetMenu+0x800>)
 8001ddc:	f00e fcca 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001de0:	7bbb      	ldrb	r3, [r7, #14]
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	2300      	movs	r3, #0
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	2302      	movs	r3, #2
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001df0:	2105      	movs	r1, #5
 8001df2:	484b      	ldr	r0, [pc, #300]	; (8001f20 <FreqMenu_DrawPresetMenu+0x804>)
 8001df4:	f00e fcbe 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001df8:	7b7b      	ldrb	r3, [r7, #13]
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	9301      	str	r3, [sp, #4]
 8001e00:	2302      	movs	r3, #2
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e08:	2105      	movs	r1, #5
 8001e0a:	4846      	ldr	r0, [pc, #280]	; (8001f24 <FreqMenu_DrawPresetMenu+0x808>)
 8001e0c:	f00e fcb2 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e10:	7b3b      	ldrb	r3, [r7, #12]
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	2300      	movs	r3, #0
 8001e16:	9301      	str	r3, [sp, #4]
 8001e18:	2302      	movs	r3, #2
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e20:	2105      	movs	r1, #5
 8001e22:	4841      	ldr	r0, [pc, #260]	; (8001f28 <FreqMenu_DrawPresetMenu+0x80c>)
 8001e24:	f00e fca6 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001e28:	7afb      	ldrb	r3, [r7, #11]
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001e30:	9301      	str	r3, [sp, #4]
 8001e32:	2302      	movs	r3, #2
 8001e34:	9300      	str	r3, [sp, #0]
 8001e36:	2300      	movs	r3, #0
 8001e38:	2105      	movs	r1, #5
 8001e3a:	483c      	ldr	r0, [pc, #240]	; (8001f2c <FreqMenu_DrawPresetMenu+0x810>)
 8001e3c:	f00e fc9a 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e40:	7abb      	ldrb	r3, [r7, #10]
 8001e42:	b29a      	uxth	r2, r3
 8001e44:	2300      	movs	r3, #0
 8001e46:	9301      	str	r3, [sp, #4]
 8001e48:	2302      	movs	r3, #2
 8001e4a:	9300      	str	r3, [sp, #0]
 8001e4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e50:	2105      	movs	r1, #5
 8001e52:	4837      	ldr	r0, [pc, #220]	; (8001f30 <FreqMenu_DrawPresetMenu+0x814>)
 8001e54:	f00e fc8e 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e58:	7a7b      	ldrb	r3, [r7, #9]
 8001e5a:	b29a      	uxth	r2, r3
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	9301      	str	r3, [sp, #4]
 8001e60:	2302      	movs	r3, #2
 8001e62:	9300      	str	r3, [sp, #0]
 8001e64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e68:	2105      	movs	r1, #5
 8001e6a:	4832      	ldr	r0, [pc, #200]	; (8001f34 <FreqMenu_DrawPresetMenu+0x818>)
 8001e6c:	f00e fc82 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e70:	7bfb      	ldrb	r3, [r7, #15]
 8001e72:	b29a      	uxth	r2, r3
 8001e74:	2300      	movs	r3, #0
 8001e76:	9301      	str	r3, [sp, #4]
 8001e78:	2302      	movs	r3, #2
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e80:	2178      	movs	r1, #120	; 0x78
 8001e82:	482d      	ldr	r0, [pc, #180]	; (8001f38 <FreqMenu_DrawPresetMenu+0x81c>)
 8001e84:	f00e fc76 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e88:	7bbb      	ldrb	r3, [r7, #14]
 8001e8a:	b29a      	uxth	r2, r3
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	9301      	str	r3, [sp, #4]
 8001e90:	2302      	movs	r3, #2
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e98:	2178      	movs	r1, #120	; 0x78
 8001e9a:	4828      	ldr	r0, [pc, #160]	; (8001f3c <FreqMenu_DrawPresetMenu+0x820>)
 8001e9c:	f00e fc6a 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ea0:	7b7b      	ldrb	r3, [r7, #13]
 8001ea2:	b29a      	uxth	r2, r3
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	9301      	str	r3, [sp, #4]
 8001ea8:	2302      	movs	r3, #2
 8001eaa:	9300      	str	r3, [sp, #0]
 8001eac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001eb0:	2178      	movs	r1, #120	; 0x78
 8001eb2:	4823      	ldr	r0, [pc, #140]	; (8001f40 <FreqMenu_DrawPresetMenu+0x824>)
 8001eb4:	f00e fc5e 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001eb8:	7b3b      	ldrb	r3, [r7, #12]
 8001eba:	b29a      	uxth	r2, r3
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	9301      	str	r3, [sp, #4]
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ec8:	2178      	movs	r1, #120	; 0x78
 8001eca:	481e      	ldr	r0, [pc, #120]	; (8001f44 <FreqMenu_DrawPresetMenu+0x828>)
 8001ecc:	f00e fc52 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ed0:	7afb      	ldrb	r3, [r7, #11]
 8001ed2:	b29a      	uxth	r2, r3
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	9301      	str	r3, [sp, #4]
 8001ed8:	2302      	movs	r3, #2
 8001eda:	9300      	str	r3, [sp, #0]
 8001edc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ee0:	2178      	movs	r1, #120	; 0x78
 8001ee2:	4819      	ldr	r0, [pc, #100]	; (8001f48 <FreqMenu_DrawPresetMenu+0x82c>)
 8001ee4:	f00e fc46 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ee8:	7abb      	ldrb	r3, [r7, #10]
 8001eea:	b29a      	uxth	r2, r3
 8001eec:	2300      	movs	r3, #0
 8001eee:	9301      	str	r3, [sp, #4]
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	9300      	str	r3, [sp, #0]
 8001ef4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ef8:	2178      	movs	r1, #120	; 0x78
 8001efa:	4814      	ldr	r0, [pc, #80]	; (8001f4c <FreqMenu_DrawPresetMenu+0x830>)
 8001efc:	f00e fc3a 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f00:	7a7b      	ldrb	r3, [r7, #9]
 8001f02:	b29a      	uxth	r2, r3
 8001f04:	2300      	movs	r3, #0
 8001f06:	9301      	str	r3, [sp, #4]
 8001f08:	2302      	movs	r3, #2
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f10:	2178      	movs	r1, #120	; 0x78
 8001f12:	480f      	ldr	r0, [pc, #60]	; (8001f50 <FreqMenu_DrawPresetMenu+0x834>)
 8001f14:	f00e fc2e 	bl	8010774 <ILI9341_Draw_Text>
				break;
 8001f18:	f000 be8e 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
 8001f1c:	08015800 	.word	0x08015800
 8001f20:	08015808 	.word	0x08015808
 8001f24:	08015810 	.word	0x08015810
 8001f28:	08015818 	.word	0x08015818
 8001f2c:	08015820 	.word	0x08015820
 8001f30:	08015828 	.word	0x08015828
 8001f34:	08015830 	.word	0x08015830
 8001f38:	08015838 	.word	0x08015838
 8001f3c:	08015840 	.word	0x08015840
 8001f40:	08015848 	.word	0x08015848
 8001f44:	08015850 	.word	0x08015850
 8001f48:	08015858 	.word	0x08015858
 8001f4c:	08015860 	.word	0x08015860
 8001f50:	08015868 	.word	0x08015868
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f54:	7bfb      	ldrb	r3, [r7, #15]
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	2300      	movs	r3, #0
 8001f5a:	9301      	str	r3, [sp, #4]
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f64:	2105      	movs	r1, #5
 8001f66:	48a5      	ldr	r0, [pc, #660]	; (80021fc <FreqMenu_DrawPresetMenu+0xae0>)
 8001f68:	f00e fc04 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f6c:	7bbb      	ldrb	r3, [r7, #14]
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	2300      	movs	r3, #0
 8001f72:	9301      	str	r3, [sp, #4]
 8001f74:	2302      	movs	r3, #2
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f7c:	2105      	movs	r1, #5
 8001f7e:	48a0      	ldr	r0, [pc, #640]	; (8002200 <FreqMenu_DrawPresetMenu+0xae4>)
 8001f80:	f00e fbf8 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f84:	7b7b      	ldrb	r3, [r7, #13]
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	2300      	movs	r3, #0
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f94:	2105      	movs	r1, #5
 8001f96:	489b      	ldr	r0, [pc, #620]	; (8002204 <FreqMenu_DrawPresetMenu+0xae8>)
 8001f98:	f00e fbec 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f9c:	7b3b      	ldrb	r3, [r7, #12]
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	9301      	str	r3, [sp, #4]
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fac:	2105      	movs	r1, #5
 8001fae:	4896      	ldr	r0, [pc, #600]	; (8002208 <FreqMenu_DrawPresetMenu+0xaec>)
 8001fb0:	f00e fbe0 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fb4:	7afb      	ldrb	r3, [r7, #11]
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	2300      	movs	r3, #0
 8001fba:	9301      	str	r3, [sp, #4]
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fc4:	2105      	movs	r1, #5
 8001fc6:	4891      	ldr	r0, [pc, #580]	; (800220c <FreqMenu_DrawPresetMenu+0xaf0>)
 8001fc8:	f00e fbd4 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001fcc:	7abb      	ldrb	r3, [r7, #10]
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	2105      	movs	r1, #5
 8001fde:	488c      	ldr	r0, [pc, #560]	; (8002210 <FreqMenu_DrawPresetMenu+0xaf4>)
 8001fe0:	f00e fbc8 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fe4:	7a7b      	ldrb	r3, [r7, #9]
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	2300      	movs	r3, #0
 8001fea:	9301      	str	r3, [sp, #4]
 8001fec:	2302      	movs	r3, #2
 8001fee:	9300      	str	r3, [sp, #0]
 8001ff0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ff4:	2105      	movs	r1, #5
 8001ff6:	4887      	ldr	r0, [pc, #540]	; (8002214 <FreqMenu_DrawPresetMenu+0xaf8>)
 8001ff8:	f00e fbbc 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	2300      	movs	r3, #0
 8002002:	9301      	str	r3, [sp, #4]
 8002004:	2302      	movs	r3, #2
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800200c:	2178      	movs	r1, #120	; 0x78
 800200e:	4882      	ldr	r0, [pc, #520]	; (8002218 <FreqMenu_DrawPresetMenu+0xafc>)
 8002010:	f00e fbb0 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002014:	7bbb      	ldrb	r3, [r7, #14]
 8002016:	b29a      	uxth	r2, r3
 8002018:	2300      	movs	r3, #0
 800201a:	9301      	str	r3, [sp, #4]
 800201c:	2302      	movs	r3, #2
 800201e:	9300      	str	r3, [sp, #0]
 8002020:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002024:	2178      	movs	r1, #120	; 0x78
 8002026:	487d      	ldr	r0, [pc, #500]	; (800221c <FreqMenu_DrawPresetMenu+0xb00>)
 8002028:	f00e fba4 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800202c:	7b7b      	ldrb	r3, [r7, #13]
 800202e:	b29a      	uxth	r2, r3
 8002030:	2300      	movs	r3, #0
 8002032:	9301      	str	r3, [sp, #4]
 8002034:	2302      	movs	r3, #2
 8002036:	9300      	str	r3, [sp, #0]
 8002038:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800203c:	2178      	movs	r1, #120	; 0x78
 800203e:	4878      	ldr	r0, [pc, #480]	; (8002220 <FreqMenu_DrawPresetMenu+0xb04>)
 8002040:	f00e fb98 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002044:	7b3b      	ldrb	r3, [r7, #12]
 8002046:	b29a      	uxth	r2, r3
 8002048:	2300      	movs	r3, #0
 800204a:	9301      	str	r3, [sp, #4]
 800204c:	2302      	movs	r3, #2
 800204e:	9300      	str	r3, [sp, #0]
 8002050:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002054:	2178      	movs	r1, #120	; 0x78
 8002056:	4873      	ldr	r0, [pc, #460]	; (8002224 <FreqMenu_DrawPresetMenu+0xb08>)
 8002058:	f00e fb8c 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800205c:	7afb      	ldrb	r3, [r7, #11]
 800205e:	b29a      	uxth	r2, r3
 8002060:	2300      	movs	r3, #0
 8002062:	9301      	str	r3, [sp, #4]
 8002064:	2302      	movs	r3, #2
 8002066:	9300      	str	r3, [sp, #0]
 8002068:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800206c:	2178      	movs	r1, #120	; 0x78
 800206e:	486e      	ldr	r0, [pc, #440]	; (8002228 <FreqMenu_DrawPresetMenu+0xb0c>)
 8002070:	f00e fb80 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002074:	7abb      	ldrb	r3, [r7, #10]
 8002076:	b29a      	uxth	r2, r3
 8002078:	2300      	movs	r3, #0
 800207a:	9301      	str	r3, [sp, #4]
 800207c:	2302      	movs	r3, #2
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002084:	2178      	movs	r1, #120	; 0x78
 8002086:	4869      	ldr	r0, [pc, #420]	; (800222c <FreqMenu_DrawPresetMenu+0xb10>)
 8002088:	f00e fb74 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800208c:	7a7b      	ldrb	r3, [r7, #9]
 800208e:	b29a      	uxth	r2, r3
 8002090:	2300      	movs	r3, #0
 8002092:	9301      	str	r3, [sp, #4]
 8002094:	2302      	movs	r3, #2
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800209c:	2178      	movs	r1, #120	; 0x78
 800209e:	4864      	ldr	r0, [pc, #400]	; (8002230 <FreqMenu_DrawPresetMenu+0xb14>)
 80020a0:	f00e fb68 	bl	8010774 <ILI9341_Draw_Text>
				break;
 80020a4:	f000 bdc8 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020a8:	7bfb      	ldrb	r3, [r7, #15]
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	2300      	movs	r3, #0
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	2302      	movs	r3, #2
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020b8:	2105      	movs	r1, #5
 80020ba:	4850      	ldr	r0, [pc, #320]	; (80021fc <FreqMenu_DrawPresetMenu+0xae0>)
 80020bc:	f00e fb5a 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020c0:	7bbb      	ldrb	r3, [r7, #14]
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	2300      	movs	r3, #0
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	2302      	movs	r3, #2
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020d0:	2105      	movs	r1, #5
 80020d2:	484b      	ldr	r0, [pc, #300]	; (8002200 <FreqMenu_DrawPresetMenu+0xae4>)
 80020d4:	f00e fb4e 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020d8:	7b7b      	ldrb	r3, [r7, #13]
 80020da:	b29a      	uxth	r2, r3
 80020dc:	2300      	movs	r3, #0
 80020de:	9301      	str	r3, [sp, #4]
 80020e0:	2302      	movs	r3, #2
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020e8:	2105      	movs	r1, #5
 80020ea:	4846      	ldr	r0, [pc, #280]	; (8002204 <FreqMenu_DrawPresetMenu+0xae8>)
 80020ec:	f00e fb42 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020f0:	7b3b      	ldrb	r3, [r7, #12]
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	2300      	movs	r3, #0
 80020f6:	9301      	str	r3, [sp, #4]
 80020f8:	2302      	movs	r3, #2
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002100:	2105      	movs	r1, #5
 8002102:	4841      	ldr	r0, [pc, #260]	; (8002208 <FreqMenu_DrawPresetMenu+0xaec>)
 8002104:	f00e fb36 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002108:	7afb      	ldrb	r3, [r7, #11]
 800210a:	b29a      	uxth	r2, r3
 800210c:	2300      	movs	r3, #0
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	2302      	movs	r3, #2
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002118:	2105      	movs	r1, #5
 800211a:	483c      	ldr	r0, [pc, #240]	; (800220c <FreqMenu_DrawPresetMenu+0xaf0>)
 800211c:	f00e fb2a 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002120:	7abb      	ldrb	r3, [r7, #10]
 8002122:	b29a      	uxth	r2, r3
 8002124:	2300      	movs	r3, #0
 8002126:	9301      	str	r3, [sp, #4]
 8002128:	2302      	movs	r3, #2
 800212a:	9300      	str	r3, [sp, #0]
 800212c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002130:	2105      	movs	r1, #5
 8002132:	4837      	ldr	r0, [pc, #220]	; (8002210 <FreqMenu_DrawPresetMenu+0xaf4>)
 8002134:	f00e fb1e 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002138:	7a7b      	ldrb	r3, [r7, #9]
 800213a:	b29a      	uxth	r2, r3
 800213c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002140:	9301      	str	r3, [sp, #4]
 8002142:	2302      	movs	r3, #2
 8002144:	9300      	str	r3, [sp, #0]
 8002146:	2300      	movs	r3, #0
 8002148:	2105      	movs	r1, #5
 800214a:	4832      	ldr	r0, [pc, #200]	; (8002214 <FreqMenu_DrawPresetMenu+0xaf8>)
 800214c:	f00e fb12 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	b29a      	uxth	r2, r3
 8002154:	2300      	movs	r3, #0
 8002156:	9301      	str	r3, [sp, #4]
 8002158:	2302      	movs	r3, #2
 800215a:	9300      	str	r3, [sp, #0]
 800215c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002160:	2178      	movs	r1, #120	; 0x78
 8002162:	482d      	ldr	r0, [pc, #180]	; (8002218 <FreqMenu_DrawPresetMenu+0xafc>)
 8002164:	f00e fb06 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002168:	7bbb      	ldrb	r3, [r7, #14]
 800216a:	b29a      	uxth	r2, r3
 800216c:	2300      	movs	r3, #0
 800216e:	9301      	str	r3, [sp, #4]
 8002170:	2302      	movs	r3, #2
 8002172:	9300      	str	r3, [sp, #0]
 8002174:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002178:	2178      	movs	r1, #120	; 0x78
 800217a:	4828      	ldr	r0, [pc, #160]	; (800221c <FreqMenu_DrawPresetMenu+0xb00>)
 800217c:	f00e fafa 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002180:	7b7b      	ldrb	r3, [r7, #13]
 8002182:	b29a      	uxth	r2, r3
 8002184:	2300      	movs	r3, #0
 8002186:	9301      	str	r3, [sp, #4]
 8002188:	2302      	movs	r3, #2
 800218a:	9300      	str	r3, [sp, #0]
 800218c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002190:	2178      	movs	r1, #120	; 0x78
 8002192:	4823      	ldr	r0, [pc, #140]	; (8002220 <FreqMenu_DrawPresetMenu+0xb04>)
 8002194:	f00e faee 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002198:	7b3b      	ldrb	r3, [r7, #12]
 800219a:	b29a      	uxth	r2, r3
 800219c:	2300      	movs	r3, #0
 800219e:	9301      	str	r3, [sp, #4]
 80021a0:	2302      	movs	r3, #2
 80021a2:	9300      	str	r3, [sp, #0]
 80021a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021a8:	2178      	movs	r1, #120	; 0x78
 80021aa:	481e      	ldr	r0, [pc, #120]	; (8002224 <FreqMenu_DrawPresetMenu+0xb08>)
 80021ac:	f00e fae2 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021b0:	7afb      	ldrb	r3, [r7, #11]
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	2300      	movs	r3, #0
 80021b6:	9301      	str	r3, [sp, #4]
 80021b8:	2302      	movs	r3, #2
 80021ba:	9300      	str	r3, [sp, #0]
 80021bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021c0:	2178      	movs	r1, #120	; 0x78
 80021c2:	4819      	ldr	r0, [pc, #100]	; (8002228 <FreqMenu_DrawPresetMenu+0xb0c>)
 80021c4:	f00e fad6 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021c8:	7abb      	ldrb	r3, [r7, #10]
 80021ca:	b29a      	uxth	r2, r3
 80021cc:	2300      	movs	r3, #0
 80021ce:	9301      	str	r3, [sp, #4]
 80021d0:	2302      	movs	r3, #2
 80021d2:	9300      	str	r3, [sp, #0]
 80021d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021d8:	2178      	movs	r1, #120	; 0x78
 80021da:	4814      	ldr	r0, [pc, #80]	; (800222c <FreqMenu_DrawPresetMenu+0xb10>)
 80021dc:	f00e faca 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021e0:	7a7b      	ldrb	r3, [r7, #9]
 80021e2:	b29a      	uxth	r2, r3
 80021e4:	2300      	movs	r3, #0
 80021e6:	9301      	str	r3, [sp, #4]
 80021e8:	2302      	movs	r3, #2
 80021ea:	9300      	str	r3, [sp, #0]
 80021ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021f0:	2178      	movs	r1, #120	; 0x78
 80021f2:	480f      	ldr	r0, [pc, #60]	; (8002230 <FreqMenu_DrawPresetMenu+0xb14>)
 80021f4:	f00e fabe 	bl	8010774 <ILI9341_Draw_Text>
				break;
 80021f8:	f000 bd1e 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
 80021fc:	08015800 	.word	0x08015800
 8002200:	08015808 	.word	0x08015808
 8002204:	08015810 	.word	0x08015810
 8002208:	08015818 	.word	0x08015818
 800220c:	08015820 	.word	0x08015820
 8002210:	08015828 	.word	0x08015828
 8002214:	08015830 	.word	0x08015830
 8002218:	08015838 	.word	0x08015838
 800221c:	08015840 	.word	0x08015840
 8002220:	08015848 	.word	0x08015848
 8002224:	08015850 	.word	0x08015850
 8002228:	08015858 	.word	0x08015858
 800222c:	08015860 	.word	0x08015860
 8002230:	08015868 	.word	0x08015868
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002234:	7bfb      	ldrb	r3, [r7, #15]
 8002236:	b29a      	uxth	r2, r3
 8002238:	2300      	movs	r3, #0
 800223a:	9301      	str	r3, [sp, #4]
 800223c:	2302      	movs	r3, #2
 800223e:	9300      	str	r3, [sp, #0]
 8002240:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002244:	2105      	movs	r1, #5
 8002246:	48a5      	ldr	r0, [pc, #660]	; (80024dc <FreqMenu_DrawPresetMenu+0xdc0>)
 8002248:	f00e fa94 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800224c:	7bbb      	ldrb	r3, [r7, #14]
 800224e:	b29a      	uxth	r2, r3
 8002250:	2300      	movs	r3, #0
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	2302      	movs	r3, #2
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800225c:	2105      	movs	r1, #5
 800225e:	48a0      	ldr	r0, [pc, #640]	; (80024e0 <FreqMenu_DrawPresetMenu+0xdc4>)
 8002260:	f00e fa88 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002264:	7b7b      	ldrb	r3, [r7, #13]
 8002266:	b29a      	uxth	r2, r3
 8002268:	2300      	movs	r3, #0
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	2302      	movs	r3, #2
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002274:	2105      	movs	r1, #5
 8002276:	489b      	ldr	r0, [pc, #620]	; (80024e4 <FreqMenu_DrawPresetMenu+0xdc8>)
 8002278:	f00e fa7c 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800227c:	7b3b      	ldrb	r3, [r7, #12]
 800227e:	b29a      	uxth	r2, r3
 8002280:	2300      	movs	r3, #0
 8002282:	9301      	str	r3, [sp, #4]
 8002284:	2302      	movs	r3, #2
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800228c:	2105      	movs	r1, #5
 800228e:	4896      	ldr	r0, [pc, #600]	; (80024e8 <FreqMenu_DrawPresetMenu+0xdcc>)
 8002290:	f00e fa70 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002294:	7afb      	ldrb	r3, [r7, #11]
 8002296:	b29a      	uxth	r2, r3
 8002298:	2300      	movs	r3, #0
 800229a:	9301      	str	r3, [sp, #4]
 800229c:	2302      	movs	r3, #2
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022a4:	2105      	movs	r1, #5
 80022a6:	4891      	ldr	r0, [pc, #580]	; (80024ec <FreqMenu_DrawPresetMenu+0xdd0>)
 80022a8:	f00e fa64 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022ac:	7abb      	ldrb	r3, [r7, #10]
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	2300      	movs	r3, #0
 80022b2:	9301      	str	r3, [sp, #4]
 80022b4:	2302      	movs	r3, #2
 80022b6:	9300      	str	r3, [sp, #0]
 80022b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022bc:	2105      	movs	r1, #5
 80022be:	488c      	ldr	r0, [pc, #560]	; (80024f0 <FreqMenu_DrawPresetMenu+0xdd4>)
 80022c0:	f00e fa58 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022c4:	7a7b      	ldrb	r3, [r7, #9]
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	2300      	movs	r3, #0
 80022ca:	9301      	str	r3, [sp, #4]
 80022cc:	2302      	movs	r3, #2
 80022ce:	9300      	str	r3, [sp, #0]
 80022d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022d4:	2105      	movs	r1, #5
 80022d6:	4887      	ldr	r0, [pc, #540]	; (80024f4 <FreqMenu_DrawPresetMenu+0xdd8>)
 80022d8:	f00e fa4c 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80022dc:	7bfb      	ldrb	r3, [r7, #15]
 80022de:	b29a      	uxth	r2, r3
 80022e0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	2302      	movs	r3, #2
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	2300      	movs	r3, #0
 80022ec:	2178      	movs	r1, #120	; 0x78
 80022ee:	4882      	ldr	r0, [pc, #520]	; (80024f8 <FreqMenu_DrawPresetMenu+0xddc>)
 80022f0:	f00e fa40 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022f4:	7bbb      	ldrb	r3, [r7, #14]
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	2300      	movs	r3, #0
 80022fa:	9301      	str	r3, [sp, #4]
 80022fc:	2302      	movs	r3, #2
 80022fe:	9300      	str	r3, [sp, #0]
 8002300:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002304:	2178      	movs	r1, #120	; 0x78
 8002306:	487d      	ldr	r0, [pc, #500]	; (80024fc <FreqMenu_DrawPresetMenu+0xde0>)
 8002308:	f00e fa34 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800230c:	7b7b      	ldrb	r3, [r7, #13]
 800230e:	b29a      	uxth	r2, r3
 8002310:	2300      	movs	r3, #0
 8002312:	9301      	str	r3, [sp, #4]
 8002314:	2302      	movs	r3, #2
 8002316:	9300      	str	r3, [sp, #0]
 8002318:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800231c:	2178      	movs	r1, #120	; 0x78
 800231e:	4878      	ldr	r0, [pc, #480]	; (8002500 <FreqMenu_DrawPresetMenu+0xde4>)
 8002320:	f00e fa28 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002324:	7b3b      	ldrb	r3, [r7, #12]
 8002326:	b29a      	uxth	r2, r3
 8002328:	2300      	movs	r3, #0
 800232a:	9301      	str	r3, [sp, #4]
 800232c:	2302      	movs	r3, #2
 800232e:	9300      	str	r3, [sp, #0]
 8002330:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002334:	2178      	movs	r1, #120	; 0x78
 8002336:	4873      	ldr	r0, [pc, #460]	; (8002504 <FreqMenu_DrawPresetMenu+0xde8>)
 8002338:	f00e fa1c 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800233c:	7afb      	ldrb	r3, [r7, #11]
 800233e:	b29a      	uxth	r2, r3
 8002340:	2300      	movs	r3, #0
 8002342:	9301      	str	r3, [sp, #4]
 8002344:	2302      	movs	r3, #2
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800234c:	2178      	movs	r1, #120	; 0x78
 800234e:	486e      	ldr	r0, [pc, #440]	; (8002508 <FreqMenu_DrawPresetMenu+0xdec>)
 8002350:	f00e fa10 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002354:	7abb      	ldrb	r3, [r7, #10]
 8002356:	b29a      	uxth	r2, r3
 8002358:	2300      	movs	r3, #0
 800235a:	9301      	str	r3, [sp, #4]
 800235c:	2302      	movs	r3, #2
 800235e:	9300      	str	r3, [sp, #0]
 8002360:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002364:	2178      	movs	r1, #120	; 0x78
 8002366:	4869      	ldr	r0, [pc, #420]	; (800250c <FreqMenu_DrawPresetMenu+0xdf0>)
 8002368:	f00e fa04 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800236c:	7a7b      	ldrb	r3, [r7, #9]
 800236e:	b29a      	uxth	r2, r3
 8002370:	2300      	movs	r3, #0
 8002372:	9301      	str	r3, [sp, #4]
 8002374:	2302      	movs	r3, #2
 8002376:	9300      	str	r3, [sp, #0]
 8002378:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800237c:	2178      	movs	r1, #120	; 0x78
 800237e:	4864      	ldr	r0, [pc, #400]	; (8002510 <FreqMenu_DrawPresetMenu+0xdf4>)
 8002380:	f00e f9f8 	bl	8010774 <ILI9341_Draw_Text>
				break;
 8002384:	f000 bc58 	b.w	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	b29a      	uxth	r2, r3
 800238c:	2300      	movs	r3, #0
 800238e:	9301      	str	r3, [sp, #4]
 8002390:	2302      	movs	r3, #2
 8002392:	9300      	str	r3, [sp, #0]
 8002394:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002398:	2105      	movs	r1, #5
 800239a:	4850      	ldr	r0, [pc, #320]	; (80024dc <FreqMenu_DrawPresetMenu+0xdc0>)
 800239c:	f00e f9ea 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023a0:	7bbb      	ldrb	r3, [r7, #14]
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	2300      	movs	r3, #0
 80023a6:	9301      	str	r3, [sp, #4]
 80023a8:	2302      	movs	r3, #2
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023b0:	2105      	movs	r1, #5
 80023b2:	484b      	ldr	r0, [pc, #300]	; (80024e0 <FreqMenu_DrawPresetMenu+0xdc4>)
 80023b4:	f00e f9de 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023b8:	7b7b      	ldrb	r3, [r7, #13]
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	2300      	movs	r3, #0
 80023be:	9301      	str	r3, [sp, #4]
 80023c0:	2302      	movs	r3, #2
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023c8:	2105      	movs	r1, #5
 80023ca:	4846      	ldr	r0, [pc, #280]	; (80024e4 <FreqMenu_DrawPresetMenu+0xdc8>)
 80023cc:	f00e f9d2 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023d0:	7b3b      	ldrb	r3, [r7, #12]
 80023d2:	b29a      	uxth	r2, r3
 80023d4:	2300      	movs	r3, #0
 80023d6:	9301      	str	r3, [sp, #4]
 80023d8:	2302      	movs	r3, #2
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023e0:	2105      	movs	r1, #5
 80023e2:	4841      	ldr	r0, [pc, #260]	; (80024e8 <FreqMenu_DrawPresetMenu+0xdcc>)
 80023e4:	f00e f9c6 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023e8:	7afb      	ldrb	r3, [r7, #11]
 80023ea:	b29a      	uxth	r2, r3
 80023ec:	2300      	movs	r3, #0
 80023ee:	9301      	str	r3, [sp, #4]
 80023f0:	2302      	movs	r3, #2
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023f8:	2105      	movs	r1, #5
 80023fa:	483c      	ldr	r0, [pc, #240]	; (80024ec <FreqMenu_DrawPresetMenu+0xdd0>)
 80023fc:	f00e f9ba 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002400:	7abb      	ldrb	r3, [r7, #10]
 8002402:	b29a      	uxth	r2, r3
 8002404:	2300      	movs	r3, #0
 8002406:	9301      	str	r3, [sp, #4]
 8002408:	2302      	movs	r3, #2
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002410:	2105      	movs	r1, #5
 8002412:	4837      	ldr	r0, [pc, #220]	; (80024f0 <FreqMenu_DrawPresetMenu+0xdd4>)
 8002414:	f00e f9ae 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002418:	7a7b      	ldrb	r3, [r7, #9]
 800241a:	b29a      	uxth	r2, r3
 800241c:	2300      	movs	r3, #0
 800241e:	9301      	str	r3, [sp, #4]
 8002420:	2302      	movs	r3, #2
 8002422:	9300      	str	r3, [sp, #0]
 8002424:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002428:	2105      	movs	r1, #5
 800242a:	4832      	ldr	r0, [pc, #200]	; (80024f4 <FreqMenu_DrawPresetMenu+0xdd8>)
 800242c:	f00e f9a2 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	b29a      	uxth	r2, r3
 8002434:	2300      	movs	r3, #0
 8002436:	9301      	str	r3, [sp, #4]
 8002438:	2302      	movs	r3, #2
 800243a:	9300      	str	r3, [sp, #0]
 800243c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002440:	2178      	movs	r1, #120	; 0x78
 8002442:	482d      	ldr	r0, [pc, #180]	; (80024f8 <FreqMenu_DrawPresetMenu+0xddc>)
 8002444:	f00e f996 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002448:	7bbb      	ldrb	r3, [r7, #14]
 800244a:	b29a      	uxth	r2, r3
 800244c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002450:	9301      	str	r3, [sp, #4]
 8002452:	2302      	movs	r3, #2
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	2300      	movs	r3, #0
 8002458:	2178      	movs	r1, #120	; 0x78
 800245a:	4828      	ldr	r0, [pc, #160]	; (80024fc <FreqMenu_DrawPresetMenu+0xde0>)
 800245c:	f00e f98a 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002460:	7b7b      	ldrb	r3, [r7, #13]
 8002462:	b29a      	uxth	r2, r3
 8002464:	2300      	movs	r3, #0
 8002466:	9301      	str	r3, [sp, #4]
 8002468:	2302      	movs	r3, #2
 800246a:	9300      	str	r3, [sp, #0]
 800246c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002470:	2178      	movs	r1, #120	; 0x78
 8002472:	4823      	ldr	r0, [pc, #140]	; (8002500 <FreqMenu_DrawPresetMenu+0xde4>)
 8002474:	f00e f97e 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002478:	7b3b      	ldrb	r3, [r7, #12]
 800247a:	b29a      	uxth	r2, r3
 800247c:	2300      	movs	r3, #0
 800247e:	9301      	str	r3, [sp, #4]
 8002480:	2302      	movs	r3, #2
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002488:	2178      	movs	r1, #120	; 0x78
 800248a:	481e      	ldr	r0, [pc, #120]	; (8002504 <FreqMenu_DrawPresetMenu+0xde8>)
 800248c:	f00e f972 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002490:	7afb      	ldrb	r3, [r7, #11]
 8002492:	b29a      	uxth	r2, r3
 8002494:	2300      	movs	r3, #0
 8002496:	9301      	str	r3, [sp, #4]
 8002498:	2302      	movs	r3, #2
 800249a:	9300      	str	r3, [sp, #0]
 800249c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024a0:	2178      	movs	r1, #120	; 0x78
 80024a2:	4819      	ldr	r0, [pc, #100]	; (8002508 <FreqMenu_DrawPresetMenu+0xdec>)
 80024a4:	f00e f966 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024a8:	7abb      	ldrb	r3, [r7, #10]
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	2300      	movs	r3, #0
 80024ae:	9301      	str	r3, [sp, #4]
 80024b0:	2302      	movs	r3, #2
 80024b2:	9300      	str	r3, [sp, #0]
 80024b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024b8:	2178      	movs	r1, #120	; 0x78
 80024ba:	4814      	ldr	r0, [pc, #80]	; (800250c <FreqMenu_DrawPresetMenu+0xdf0>)
 80024bc:	f00e f95a 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024c0:	7a7b      	ldrb	r3, [r7, #9]
 80024c2:	b29a      	uxth	r2, r3
 80024c4:	2300      	movs	r3, #0
 80024c6:	9301      	str	r3, [sp, #4]
 80024c8:	2302      	movs	r3, #2
 80024ca:	9300      	str	r3, [sp, #0]
 80024cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024d0:	2178      	movs	r1, #120	; 0x78
 80024d2:	480f      	ldr	r0, [pc, #60]	; (8002510 <FreqMenu_DrawPresetMenu+0xdf4>)
 80024d4:	f00e f94e 	bl	8010774 <ILI9341_Draw_Text>
				break;
 80024d8:	e3ae      	b.n	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
 80024da:	bf00      	nop
 80024dc:	08015800 	.word	0x08015800
 80024e0:	08015808 	.word	0x08015808
 80024e4:	08015810 	.word	0x08015810
 80024e8:	08015818 	.word	0x08015818
 80024ec:	08015820 	.word	0x08015820
 80024f0:	08015828 	.word	0x08015828
 80024f4:	08015830 	.word	0x08015830
 80024f8:	08015838 	.word	0x08015838
 80024fc:	08015840 	.word	0x08015840
 8002500:	08015848 	.word	0x08015848
 8002504:	08015850 	.word	0x08015850
 8002508:	08015858 	.word	0x08015858
 800250c:	08015860 	.word	0x08015860
 8002510:	08015868 	.word	0x08015868
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	b29a      	uxth	r2, r3
 8002518:	2300      	movs	r3, #0
 800251a:	9301      	str	r3, [sp, #4]
 800251c:	2302      	movs	r3, #2
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002524:	2105      	movs	r1, #5
 8002526:	48a4      	ldr	r0, [pc, #656]	; (80027b8 <FreqMenu_DrawPresetMenu+0x109c>)
 8002528:	f00e f924 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800252c:	7bbb      	ldrb	r3, [r7, #14]
 800252e:	b29a      	uxth	r2, r3
 8002530:	2300      	movs	r3, #0
 8002532:	9301      	str	r3, [sp, #4]
 8002534:	2302      	movs	r3, #2
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800253c:	2105      	movs	r1, #5
 800253e:	489f      	ldr	r0, [pc, #636]	; (80027bc <FreqMenu_DrawPresetMenu+0x10a0>)
 8002540:	f00e f918 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002544:	7b7b      	ldrb	r3, [r7, #13]
 8002546:	b29a      	uxth	r2, r3
 8002548:	2300      	movs	r3, #0
 800254a:	9301      	str	r3, [sp, #4]
 800254c:	2302      	movs	r3, #2
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002554:	2105      	movs	r1, #5
 8002556:	489a      	ldr	r0, [pc, #616]	; (80027c0 <FreqMenu_DrawPresetMenu+0x10a4>)
 8002558:	f00e f90c 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800255c:	7b3b      	ldrb	r3, [r7, #12]
 800255e:	b29a      	uxth	r2, r3
 8002560:	2300      	movs	r3, #0
 8002562:	9301      	str	r3, [sp, #4]
 8002564:	2302      	movs	r3, #2
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800256c:	2105      	movs	r1, #5
 800256e:	4895      	ldr	r0, [pc, #596]	; (80027c4 <FreqMenu_DrawPresetMenu+0x10a8>)
 8002570:	f00e f900 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002574:	7afb      	ldrb	r3, [r7, #11]
 8002576:	b29a      	uxth	r2, r3
 8002578:	2300      	movs	r3, #0
 800257a:	9301      	str	r3, [sp, #4]
 800257c:	2302      	movs	r3, #2
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002584:	2105      	movs	r1, #5
 8002586:	4890      	ldr	r0, [pc, #576]	; (80027c8 <FreqMenu_DrawPresetMenu+0x10ac>)
 8002588:	f00e f8f4 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800258c:	7abb      	ldrb	r3, [r7, #10]
 800258e:	b29a      	uxth	r2, r3
 8002590:	2300      	movs	r3, #0
 8002592:	9301      	str	r3, [sp, #4]
 8002594:	2302      	movs	r3, #2
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800259c:	2105      	movs	r1, #5
 800259e:	488b      	ldr	r0, [pc, #556]	; (80027cc <FreqMenu_DrawPresetMenu+0x10b0>)
 80025a0:	f00e f8e8 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025a4:	7a7b      	ldrb	r3, [r7, #9]
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	2300      	movs	r3, #0
 80025aa:	9301      	str	r3, [sp, #4]
 80025ac:	2302      	movs	r3, #2
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025b4:	2105      	movs	r1, #5
 80025b6:	4886      	ldr	r0, [pc, #536]	; (80027d0 <FreqMenu_DrawPresetMenu+0x10b4>)
 80025b8:	f00e f8dc 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025bc:	7bfb      	ldrb	r3, [r7, #15]
 80025be:	b29a      	uxth	r2, r3
 80025c0:	2300      	movs	r3, #0
 80025c2:	9301      	str	r3, [sp, #4]
 80025c4:	2302      	movs	r3, #2
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025cc:	2178      	movs	r1, #120	; 0x78
 80025ce:	4881      	ldr	r0, [pc, #516]	; (80027d4 <FreqMenu_DrawPresetMenu+0x10b8>)
 80025d0:	f00e f8d0 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025d4:	7bbb      	ldrb	r3, [r7, #14]
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	2300      	movs	r3, #0
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	2302      	movs	r3, #2
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025e4:	2178      	movs	r1, #120	; 0x78
 80025e6:	487c      	ldr	r0, [pc, #496]	; (80027d8 <FreqMenu_DrawPresetMenu+0x10bc>)
 80025e8:	f00e f8c4 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80025ec:	7b7b      	ldrb	r3, [r7, #13]
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80025f4:	9301      	str	r3, [sp, #4]
 80025f6:	2302      	movs	r3, #2
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	2300      	movs	r3, #0
 80025fc:	2178      	movs	r1, #120	; 0x78
 80025fe:	4877      	ldr	r0, [pc, #476]	; (80027dc <FreqMenu_DrawPresetMenu+0x10c0>)
 8002600:	f00e f8b8 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002604:	7b3b      	ldrb	r3, [r7, #12]
 8002606:	b29a      	uxth	r2, r3
 8002608:	2300      	movs	r3, #0
 800260a:	9301      	str	r3, [sp, #4]
 800260c:	2302      	movs	r3, #2
 800260e:	9300      	str	r3, [sp, #0]
 8002610:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002614:	2178      	movs	r1, #120	; 0x78
 8002616:	4872      	ldr	r0, [pc, #456]	; (80027e0 <FreqMenu_DrawPresetMenu+0x10c4>)
 8002618:	f00e f8ac 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800261c:	7afb      	ldrb	r3, [r7, #11]
 800261e:	b29a      	uxth	r2, r3
 8002620:	2300      	movs	r3, #0
 8002622:	9301      	str	r3, [sp, #4]
 8002624:	2302      	movs	r3, #2
 8002626:	9300      	str	r3, [sp, #0]
 8002628:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800262c:	2178      	movs	r1, #120	; 0x78
 800262e:	486d      	ldr	r0, [pc, #436]	; (80027e4 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002630:	f00e f8a0 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002634:	7abb      	ldrb	r3, [r7, #10]
 8002636:	b29a      	uxth	r2, r3
 8002638:	2300      	movs	r3, #0
 800263a:	9301      	str	r3, [sp, #4]
 800263c:	2302      	movs	r3, #2
 800263e:	9300      	str	r3, [sp, #0]
 8002640:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002644:	2178      	movs	r1, #120	; 0x78
 8002646:	4868      	ldr	r0, [pc, #416]	; (80027e8 <FreqMenu_DrawPresetMenu+0x10cc>)
 8002648:	f00e f894 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800264c:	7a7b      	ldrb	r3, [r7, #9]
 800264e:	b29a      	uxth	r2, r3
 8002650:	2300      	movs	r3, #0
 8002652:	9301      	str	r3, [sp, #4]
 8002654:	2302      	movs	r3, #2
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800265c:	2178      	movs	r1, #120	; 0x78
 800265e:	4863      	ldr	r0, [pc, #396]	; (80027ec <FreqMenu_DrawPresetMenu+0x10d0>)
 8002660:	f00e f888 	bl	8010774 <ILI9341_Draw_Text>
				break;
 8002664:	e2e8      	b.n	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002666:	7bfb      	ldrb	r3, [r7, #15]
 8002668:	b29a      	uxth	r2, r3
 800266a:	2300      	movs	r3, #0
 800266c:	9301      	str	r3, [sp, #4]
 800266e:	2302      	movs	r3, #2
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002676:	2105      	movs	r1, #5
 8002678:	484f      	ldr	r0, [pc, #316]	; (80027b8 <FreqMenu_DrawPresetMenu+0x109c>)
 800267a:	f00e f87b 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800267e:	7bbb      	ldrb	r3, [r7, #14]
 8002680:	b29a      	uxth	r2, r3
 8002682:	2300      	movs	r3, #0
 8002684:	9301      	str	r3, [sp, #4]
 8002686:	2302      	movs	r3, #2
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800268e:	2105      	movs	r1, #5
 8002690:	484a      	ldr	r0, [pc, #296]	; (80027bc <FreqMenu_DrawPresetMenu+0x10a0>)
 8002692:	f00e f86f 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002696:	7b7b      	ldrb	r3, [r7, #13]
 8002698:	b29a      	uxth	r2, r3
 800269a:	2300      	movs	r3, #0
 800269c:	9301      	str	r3, [sp, #4]
 800269e:	2302      	movs	r3, #2
 80026a0:	9300      	str	r3, [sp, #0]
 80026a2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026a6:	2105      	movs	r1, #5
 80026a8:	4845      	ldr	r0, [pc, #276]	; (80027c0 <FreqMenu_DrawPresetMenu+0x10a4>)
 80026aa:	f00e f863 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026ae:	7b3b      	ldrb	r3, [r7, #12]
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	2300      	movs	r3, #0
 80026b4:	9301      	str	r3, [sp, #4]
 80026b6:	2302      	movs	r3, #2
 80026b8:	9300      	str	r3, [sp, #0]
 80026ba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026be:	2105      	movs	r1, #5
 80026c0:	4840      	ldr	r0, [pc, #256]	; (80027c4 <FreqMenu_DrawPresetMenu+0x10a8>)
 80026c2:	f00e f857 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026c6:	7afb      	ldrb	r3, [r7, #11]
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	2300      	movs	r3, #0
 80026cc:	9301      	str	r3, [sp, #4]
 80026ce:	2302      	movs	r3, #2
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026d6:	2105      	movs	r1, #5
 80026d8:	483b      	ldr	r0, [pc, #236]	; (80027c8 <FreqMenu_DrawPresetMenu+0x10ac>)
 80026da:	f00e f84b 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026de:	7abb      	ldrb	r3, [r7, #10]
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	2300      	movs	r3, #0
 80026e4:	9301      	str	r3, [sp, #4]
 80026e6:	2302      	movs	r3, #2
 80026e8:	9300      	str	r3, [sp, #0]
 80026ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026ee:	2105      	movs	r1, #5
 80026f0:	4836      	ldr	r0, [pc, #216]	; (80027cc <FreqMenu_DrawPresetMenu+0x10b0>)
 80026f2:	f00e f83f 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026f6:	7a7b      	ldrb	r3, [r7, #9]
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	2300      	movs	r3, #0
 80026fc:	9301      	str	r3, [sp, #4]
 80026fe:	2302      	movs	r3, #2
 8002700:	9300      	str	r3, [sp, #0]
 8002702:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002706:	2105      	movs	r1, #5
 8002708:	4831      	ldr	r0, [pc, #196]	; (80027d0 <FreqMenu_DrawPresetMenu+0x10b4>)
 800270a:	f00e f833 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800270e:	7bfb      	ldrb	r3, [r7, #15]
 8002710:	b29a      	uxth	r2, r3
 8002712:	2300      	movs	r3, #0
 8002714:	9301      	str	r3, [sp, #4]
 8002716:	2302      	movs	r3, #2
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800271e:	2178      	movs	r1, #120	; 0x78
 8002720:	482c      	ldr	r0, [pc, #176]	; (80027d4 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002722:	f00e f827 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002726:	7bbb      	ldrb	r3, [r7, #14]
 8002728:	b29a      	uxth	r2, r3
 800272a:	2300      	movs	r3, #0
 800272c:	9301      	str	r3, [sp, #4]
 800272e:	2302      	movs	r3, #2
 8002730:	9300      	str	r3, [sp, #0]
 8002732:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002736:	2178      	movs	r1, #120	; 0x78
 8002738:	4827      	ldr	r0, [pc, #156]	; (80027d8 <FreqMenu_DrawPresetMenu+0x10bc>)
 800273a:	f00e f81b 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800273e:	7b7b      	ldrb	r3, [r7, #13]
 8002740:	b29a      	uxth	r2, r3
 8002742:	2300      	movs	r3, #0
 8002744:	9301      	str	r3, [sp, #4]
 8002746:	2302      	movs	r3, #2
 8002748:	9300      	str	r3, [sp, #0]
 800274a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800274e:	2178      	movs	r1, #120	; 0x78
 8002750:	4822      	ldr	r0, [pc, #136]	; (80027dc <FreqMenu_DrawPresetMenu+0x10c0>)
 8002752:	f00e f80f 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002756:	7b3b      	ldrb	r3, [r7, #12]
 8002758:	b29a      	uxth	r2, r3
 800275a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	2302      	movs	r3, #2
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2300      	movs	r3, #0
 8002766:	2178      	movs	r1, #120	; 0x78
 8002768:	481d      	ldr	r0, [pc, #116]	; (80027e0 <FreqMenu_DrawPresetMenu+0x10c4>)
 800276a:	f00e f803 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800276e:	7afb      	ldrb	r3, [r7, #11]
 8002770:	b29a      	uxth	r2, r3
 8002772:	2300      	movs	r3, #0
 8002774:	9301      	str	r3, [sp, #4]
 8002776:	2302      	movs	r3, #2
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800277e:	2178      	movs	r1, #120	; 0x78
 8002780:	4818      	ldr	r0, [pc, #96]	; (80027e4 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002782:	f00d fff7 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002786:	7abb      	ldrb	r3, [r7, #10]
 8002788:	b29a      	uxth	r2, r3
 800278a:	2300      	movs	r3, #0
 800278c:	9301      	str	r3, [sp, #4]
 800278e:	2302      	movs	r3, #2
 8002790:	9300      	str	r3, [sp, #0]
 8002792:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002796:	2178      	movs	r1, #120	; 0x78
 8002798:	4813      	ldr	r0, [pc, #76]	; (80027e8 <FreqMenu_DrawPresetMenu+0x10cc>)
 800279a:	f00d ffeb 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800279e:	7a7b      	ldrb	r3, [r7, #9]
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	2300      	movs	r3, #0
 80027a4:	9301      	str	r3, [sp, #4]
 80027a6:	2302      	movs	r3, #2
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027ae:	2178      	movs	r1, #120	; 0x78
 80027b0:	480e      	ldr	r0, [pc, #56]	; (80027ec <FreqMenu_DrawPresetMenu+0x10d0>)
 80027b2:	f00d ffdf 	bl	8010774 <ILI9341_Draw_Text>
				break;
 80027b6:	e23f      	b.n	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
 80027b8:	08015800 	.word	0x08015800
 80027bc:	08015808 	.word	0x08015808
 80027c0:	08015810 	.word	0x08015810
 80027c4:	08015818 	.word	0x08015818
 80027c8:	08015820 	.word	0x08015820
 80027cc:	08015828 	.word	0x08015828
 80027d0:	08015830 	.word	0x08015830
 80027d4:	08015838 	.word	0x08015838
 80027d8:	08015840 	.word	0x08015840
 80027dc:	08015848 	.word	0x08015848
 80027e0:	08015850 	.word	0x08015850
 80027e4:	08015858 	.word	0x08015858
 80027e8:	08015860 	.word	0x08015860
 80027ec:	08015868 	.word	0x08015868
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027f0:	7bfb      	ldrb	r3, [r7, #15]
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	2300      	movs	r3, #0
 80027f6:	9301      	str	r3, [sp, #4]
 80027f8:	2302      	movs	r3, #2
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002800:	2105      	movs	r1, #5
 8002802:	48a4      	ldr	r0, [pc, #656]	; (8002a94 <FreqMenu_DrawPresetMenu+0x1378>)
 8002804:	f00d ffb6 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002808:	7bbb      	ldrb	r3, [r7, #14]
 800280a:	b29a      	uxth	r2, r3
 800280c:	2300      	movs	r3, #0
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	2302      	movs	r3, #2
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002818:	2105      	movs	r1, #5
 800281a:	489f      	ldr	r0, [pc, #636]	; (8002a98 <FreqMenu_DrawPresetMenu+0x137c>)
 800281c:	f00d ffaa 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002820:	7b7b      	ldrb	r3, [r7, #13]
 8002822:	b29a      	uxth	r2, r3
 8002824:	2300      	movs	r3, #0
 8002826:	9301      	str	r3, [sp, #4]
 8002828:	2302      	movs	r3, #2
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002830:	2105      	movs	r1, #5
 8002832:	489a      	ldr	r0, [pc, #616]	; (8002a9c <FreqMenu_DrawPresetMenu+0x1380>)
 8002834:	f00d ff9e 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002838:	7b3b      	ldrb	r3, [r7, #12]
 800283a:	b29a      	uxth	r2, r3
 800283c:	2300      	movs	r3, #0
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	2302      	movs	r3, #2
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002848:	2105      	movs	r1, #5
 800284a:	4895      	ldr	r0, [pc, #596]	; (8002aa0 <FreqMenu_DrawPresetMenu+0x1384>)
 800284c:	f00d ff92 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002850:	7afb      	ldrb	r3, [r7, #11]
 8002852:	b29a      	uxth	r2, r3
 8002854:	2300      	movs	r3, #0
 8002856:	9301      	str	r3, [sp, #4]
 8002858:	2302      	movs	r3, #2
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002860:	2105      	movs	r1, #5
 8002862:	4890      	ldr	r0, [pc, #576]	; (8002aa4 <FreqMenu_DrawPresetMenu+0x1388>)
 8002864:	f00d ff86 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002868:	7abb      	ldrb	r3, [r7, #10]
 800286a:	b29a      	uxth	r2, r3
 800286c:	2300      	movs	r3, #0
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	2302      	movs	r3, #2
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002878:	2105      	movs	r1, #5
 800287a:	488b      	ldr	r0, [pc, #556]	; (8002aa8 <FreqMenu_DrawPresetMenu+0x138c>)
 800287c:	f00d ff7a 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002880:	7a7b      	ldrb	r3, [r7, #9]
 8002882:	b29a      	uxth	r2, r3
 8002884:	2300      	movs	r3, #0
 8002886:	9301      	str	r3, [sp, #4]
 8002888:	2302      	movs	r3, #2
 800288a:	9300      	str	r3, [sp, #0]
 800288c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002890:	2105      	movs	r1, #5
 8002892:	4886      	ldr	r0, [pc, #536]	; (8002aac <FreqMenu_DrawPresetMenu+0x1390>)
 8002894:	f00d ff6e 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002898:	7bfb      	ldrb	r3, [r7, #15]
 800289a:	b29a      	uxth	r2, r3
 800289c:	2300      	movs	r3, #0
 800289e:	9301      	str	r3, [sp, #4]
 80028a0:	2302      	movs	r3, #2
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028a8:	2178      	movs	r1, #120	; 0x78
 80028aa:	4881      	ldr	r0, [pc, #516]	; (8002ab0 <FreqMenu_DrawPresetMenu+0x1394>)
 80028ac:	f00d ff62 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028b0:	7bbb      	ldrb	r3, [r7, #14]
 80028b2:	b29a      	uxth	r2, r3
 80028b4:	2300      	movs	r3, #0
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	2302      	movs	r3, #2
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028c0:	2178      	movs	r1, #120	; 0x78
 80028c2:	487c      	ldr	r0, [pc, #496]	; (8002ab4 <FreqMenu_DrawPresetMenu+0x1398>)
 80028c4:	f00d ff56 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028c8:	7b7b      	ldrb	r3, [r7, #13]
 80028ca:	b29a      	uxth	r2, r3
 80028cc:	2300      	movs	r3, #0
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	2302      	movs	r3, #2
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028d8:	2178      	movs	r1, #120	; 0x78
 80028da:	4877      	ldr	r0, [pc, #476]	; (8002ab8 <FreqMenu_DrawPresetMenu+0x139c>)
 80028dc:	f00d ff4a 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80028e0:	7b3b      	ldrb	r3, [r7, #12]
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	2300      	movs	r3, #0
 80028e6:	9301      	str	r3, [sp, #4]
 80028e8:	2302      	movs	r3, #2
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80028f0:	2178      	movs	r1, #120	; 0x78
 80028f2:	4872      	ldr	r0, [pc, #456]	; (8002abc <FreqMenu_DrawPresetMenu+0x13a0>)
 80028f4:	f00d ff3e 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80028f8:	7afb      	ldrb	r3, [r7, #11]
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002900:	9301      	str	r3, [sp, #4]
 8002902:	2302      	movs	r3, #2
 8002904:	9300      	str	r3, [sp, #0]
 8002906:	2300      	movs	r3, #0
 8002908:	2178      	movs	r1, #120	; 0x78
 800290a:	486d      	ldr	r0, [pc, #436]	; (8002ac0 <FreqMenu_DrawPresetMenu+0x13a4>)
 800290c:	f00d ff32 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002910:	7abb      	ldrb	r3, [r7, #10]
 8002912:	b29a      	uxth	r2, r3
 8002914:	2300      	movs	r3, #0
 8002916:	9301      	str	r3, [sp, #4]
 8002918:	2302      	movs	r3, #2
 800291a:	9300      	str	r3, [sp, #0]
 800291c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002920:	2178      	movs	r1, #120	; 0x78
 8002922:	4868      	ldr	r0, [pc, #416]	; (8002ac4 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002924:	f00d ff26 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002928:	7a7b      	ldrb	r3, [r7, #9]
 800292a:	b29a      	uxth	r2, r3
 800292c:	2300      	movs	r3, #0
 800292e:	9301      	str	r3, [sp, #4]
 8002930:	2302      	movs	r3, #2
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002938:	2178      	movs	r1, #120	; 0x78
 800293a:	4863      	ldr	r0, [pc, #396]	; (8002ac8 <FreqMenu_DrawPresetMenu+0x13ac>)
 800293c:	f00d ff1a 	bl	8010774 <ILI9341_Draw_Text>
			break;
 8002940:	e17a      	b.n	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002942:	7bfb      	ldrb	r3, [r7, #15]
 8002944:	b29a      	uxth	r2, r3
 8002946:	2300      	movs	r3, #0
 8002948:	9301      	str	r3, [sp, #4]
 800294a:	2302      	movs	r3, #2
 800294c:	9300      	str	r3, [sp, #0]
 800294e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002952:	2105      	movs	r1, #5
 8002954:	484f      	ldr	r0, [pc, #316]	; (8002a94 <FreqMenu_DrawPresetMenu+0x1378>)
 8002956:	f00d ff0d 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800295a:	7bbb      	ldrb	r3, [r7, #14]
 800295c:	b29a      	uxth	r2, r3
 800295e:	2300      	movs	r3, #0
 8002960:	9301      	str	r3, [sp, #4]
 8002962:	2302      	movs	r3, #2
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800296a:	2105      	movs	r1, #5
 800296c:	484a      	ldr	r0, [pc, #296]	; (8002a98 <FreqMenu_DrawPresetMenu+0x137c>)
 800296e:	f00d ff01 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002972:	7b7b      	ldrb	r3, [r7, #13]
 8002974:	b29a      	uxth	r2, r3
 8002976:	2300      	movs	r3, #0
 8002978:	9301      	str	r3, [sp, #4]
 800297a:	2302      	movs	r3, #2
 800297c:	9300      	str	r3, [sp, #0]
 800297e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002982:	2105      	movs	r1, #5
 8002984:	4845      	ldr	r0, [pc, #276]	; (8002a9c <FreqMenu_DrawPresetMenu+0x1380>)
 8002986:	f00d fef5 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800298a:	7b3b      	ldrb	r3, [r7, #12]
 800298c:	b29a      	uxth	r2, r3
 800298e:	2300      	movs	r3, #0
 8002990:	9301      	str	r3, [sp, #4]
 8002992:	2302      	movs	r3, #2
 8002994:	9300      	str	r3, [sp, #0]
 8002996:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800299a:	2105      	movs	r1, #5
 800299c:	4840      	ldr	r0, [pc, #256]	; (8002aa0 <FreqMenu_DrawPresetMenu+0x1384>)
 800299e:	f00d fee9 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029a2:	7afb      	ldrb	r3, [r7, #11]
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	2300      	movs	r3, #0
 80029a8:	9301      	str	r3, [sp, #4]
 80029aa:	2302      	movs	r3, #2
 80029ac:	9300      	str	r3, [sp, #0]
 80029ae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029b2:	2105      	movs	r1, #5
 80029b4:	483b      	ldr	r0, [pc, #236]	; (8002aa4 <FreqMenu_DrawPresetMenu+0x1388>)
 80029b6:	f00d fedd 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029ba:	7abb      	ldrb	r3, [r7, #10]
 80029bc:	b29a      	uxth	r2, r3
 80029be:	2300      	movs	r3, #0
 80029c0:	9301      	str	r3, [sp, #4]
 80029c2:	2302      	movs	r3, #2
 80029c4:	9300      	str	r3, [sp, #0]
 80029c6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029ca:	2105      	movs	r1, #5
 80029cc:	4836      	ldr	r0, [pc, #216]	; (8002aa8 <FreqMenu_DrawPresetMenu+0x138c>)
 80029ce:	f00d fed1 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029d2:	7a7b      	ldrb	r3, [r7, #9]
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	2300      	movs	r3, #0
 80029d8:	9301      	str	r3, [sp, #4]
 80029da:	2302      	movs	r3, #2
 80029dc:	9300      	str	r3, [sp, #0]
 80029de:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029e2:	2105      	movs	r1, #5
 80029e4:	4831      	ldr	r0, [pc, #196]	; (8002aac <FreqMenu_DrawPresetMenu+0x1390>)
 80029e6:	f00d fec5 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029ea:	7bfb      	ldrb	r3, [r7, #15]
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	2300      	movs	r3, #0
 80029f0:	9301      	str	r3, [sp, #4]
 80029f2:	2302      	movs	r3, #2
 80029f4:	9300      	str	r3, [sp, #0]
 80029f6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029fa:	2178      	movs	r1, #120	; 0x78
 80029fc:	482c      	ldr	r0, [pc, #176]	; (8002ab0 <FreqMenu_DrawPresetMenu+0x1394>)
 80029fe:	f00d feb9 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a02:	7bbb      	ldrb	r3, [r7, #14]
 8002a04:	b29a      	uxth	r2, r3
 8002a06:	2300      	movs	r3, #0
 8002a08:	9301      	str	r3, [sp, #4]
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	9300      	str	r3, [sp, #0]
 8002a0e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a12:	2178      	movs	r1, #120	; 0x78
 8002a14:	4827      	ldr	r0, [pc, #156]	; (8002ab4 <FreqMenu_DrawPresetMenu+0x1398>)
 8002a16:	f00d fead 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a1a:	7b7b      	ldrb	r3, [r7, #13]
 8002a1c:	b29a      	uxth	r2, r3
 8002a1e:	2300      	movs	r3, #0
 8002a20:	9301      	str	r3, [sp, #4]
 8002a22:	2302      	movs	r3, #2
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a2a:	2178      	movs	r1, #120	; 0x78
 8002a2c:	4822      	ldr	r0, [pc, #136]	; (8002ab8 <FreqMenu_DrawPresetMenu+0x139c>)
 8002a2e:	f00d fea1 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a32:	7b3b      	ldrb	r3, [r7, #12]
 8002a34:	b29a      	uxth	r2, r3
 8002a36:	2300      	movs	r3, #0
 8002a38:	9301      	str	r3, [sp, #4]
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a42:	2178      	movs	r1, #120	; 0x78
 8002a44:	481d      	ldr	r0, [pc, #116]	; (8002abc <FreqMenu_DrawPresetMenu+0x13a0>)
 8002a46:	f00d fe95 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a4a:	7afb      	ldrb	r3, [r7, #11]
 8002a4c:	b29a      	uxth	r2, r3
 8002a4e:	2300      	movs	r3, #0
 8002a50:	9301      	str	r3, [sp, #4]
 8002a52:	2302      	movs	r3, #2
 8002a54:	9300      	str	r3, [sp, #0]
 8002a56:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a5a:	2178      	movs	r1, #120	; 0x78
 8002a5c:	4818      	ldr	r0, [pc, #96]	; (8002ac0 <FreqMenu_DrawPresetMenu+0x13a4>)
 8002a5e:	f00d fe89 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002a62:	7abb      	ldrb	r3, [r7, #10]
 8002a64:	b29a      	uxth	r2, r3
 8002a66:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002a6a:	9301      	str	r3, [sp, #4]
 8002a6c:	2302      	movs	r3, #2
 8002a6e:	9300      	str	r3, [sp, #0]
 8002a70:	2300      	movs	r3, #0
 8002a72:	2178      	movs	r1, #120	; 0x78
 8002a74:	4813      	ldr	r0, [pc, #76]	; (8002ac4 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002a76:	f00d fe7d 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a7a:	7a7b      	ldrb	r3, [r7, #9]
 8002a7c:	b29a      	uxth	r2, r3
 8002a7e:	2300      	movs	r3, #0
 8002a80:	9301      	str	r3, [sp, #4]
 8002a82:	2302      	movs	r3, #2
 8002a84:	9300      	str	r3, [sp, #0]
 8002a86:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a8a:	2178      	movs	r1, #120	; 0x78
 8002a8c:	480e      	ldr	r0, [pc, #56]	; (8002ac8 <FreqMenu_DrawPresetMenu+0x13ac>)
 8002a8e:	f00d fe71 	bl	8010774 <ILI9341_Draw_Text>
			break;
 8002a92:	e0d1      	b.n	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
 8002a94:	08015800 	.word	0x08015800
 8002a98:	08015808 	.word	0x08015808
 8002a9c:	08015810 	.word	0x08015810
 8002aa0:	08015818 	.word	0x08015818
 8002aa4:	08015820 	.word	0x08015820
 8002aa8:	08015828 	.word	0x08015828
 8002aac:	08015830 	.word	0x08015830
 8002ab0:	08015838 	.word	0x08015838
 8002ab4:	08015840 	.word	0x08015840
 8002ab8:	08015848 	.word	0x08015848
 8002abc:	08015850 	.word	0x08015850
 8002ac0:	08015858 	.word	0x08015858
 8002ac4:	08015860 	.word	0x08015860
 8002ac8:	08015868 	.word	0x08015868
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002acc:	7bfb      	ldrb	r3, [r7, #15]
 8002ace:	b29a      	uxth	r2, r3
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	9301      	str	r3, [sp, #4]
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002adc:	2105      	movs	r1, #5
 8002ade:	4858      	ldr	r0, [pc, #352]	; (8002c40 <FreqMenu_DrawPresetMenu+0x1524>)
 8002ae0:	f00d fe48 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ae4:	7bbb      	ldrb	r3, [r7, #14]
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	2300      	movs	r3, #0
 8002aea:	9301      	str	r3, [sp, #4]
 8002aec:	2302      	movs	r3, #2
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002af4:	2105      	movs	r1, #5
 8002af6:	4853      	ldr	r0, [pc, #332]	; (8002c44 <FreqMenu_DrawPresetMenu+0x1528>)
 8002af8:	f00d fe3c 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002afc:	7b7b      	ldrb	r3, [r7, #13]
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	2300      	movs	r3, #0
 8002b02:	9301      	str	r3, [sp, #4]
 8002b04:	2302      	movs	r3, #2
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b0c:	2105      	movs	r1, #5
 8002b0e:	484e      	ldr	r0, [pc, #312]	; (8002c48 <FreqMenu_DrawPresetMenu+0x152c>)
 8002b10:	f00d fe30 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b14:	7b3b      	ldrb	r3, [r7, #12]
 8002b16:	b29a      	uxth	r2, r3
 8002b18:	2300      	movs	r3, #0
 8002b1a:	9301      	str	r3, [sp, #4]
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b24:	2105      	movs	r1, #5
 8002b26:	4849      	ldr	r0, [pc, #292]	; (8002c4c <FreqMenu_DrawPresetMenu+0x1530>)
 8002b28:	f00d fe24 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b2c:	7afb      	ldrb	r3, [r7, #11]
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	2300      	movs	r3, #0
 8002b32:	9301      	str	r3, [sp, #4]
 8002b34:	2302      	movs	r3, #2
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b3c:	2105      	movs	r1, #5
 8002b3e:	4844      	ldr	r0, [pc, #272]	; (8002c50 <FreqMenu_DrawPresetMenu+0x1534>)
 8002b40:	f00d fe18 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b44:	7abb      	ldrb	r3, [r7, #10]
 8002b46:	b29a      	uxth	r2, r3
 8002b48:	2300      	movs	r3, #0
 8002b4a:	9301      	str	r3, [sp, #4]
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b54:	2105      	movs	r1, #5
 8002b56:	483f      	ldr	r0, [pc, #252]	; (8002c54 <FreqMenu_DrawPresetMenu+0x1538>)
 8002b58:	f00d fe0c 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b5c:	7a7b      	ldrb	r3, [r7, #9]
 8002b5e:	b29a      	uxth	r2, r3
 8002b60:	2300      	movs	r3, #0
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	2302      	movs	r3, #2
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b6c:	2105      	movs	r1, #5
 8002b6e:	483a      	ldr	r0, [pc, #232]	; (8002c58 <FreqMenu_DrawPresetMenu+0x153c>)
 8002b70:	f00d fe00 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b74:	7bfb      	ldrb	r3, [r7, #15]
 8002b76:	b29a      	uxth	r2, r3
 8002b78:	2300      	movs	r3, #0
 8002b7a:	9301      	str	r3, [sp, #4]
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b84:	2178      	movs	r1, #120	; 0x78
 8002b86:	4835      	ldr	r0, [pc, #212]	; (8002c5c <FreqMenu_DrawPresetMenu+0x1540>)
 8002b88:	f00d fdf4 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b8c:	7bbb      	ldrb	r3, [r7, #14]
 8002b8e:	b29a      	uxth	r2, r3
 8002b90:	2300      	movs	r3, #0
 8002b92:	9301      	str	r3, [sp, #4]
 8002b94:	2302      	movs	r3, #2
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b9c:	2178      	movs	r1, #120	; 0x78
 8002b9e:	4830      	ldr	r0, [pc, #192]	; (8002c60 <FreqMenu_DrawPresetMenu+0x1544>)
 8002ba0:	f00d fde8 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ba4:	7b7b      	ldrb	r3, [r7, #13]
 8002ba6:	b29a      	uxth	r2, r3
 8002ba8:	2300      	movs	r3, #0
 8002baa:	9301      	str	r3, [sp, #4]
 8002bac:	2302      	movs	r3, #2
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002bb4:	2178      	movs	r1, #120	; 0x78
 8002bb6:	482b      	ldr	r0, [pc, #172]	; (8002c64 <FreqMenu_DrawPresetMenu+0x1548>)
 8002bb8:	f00d fddc 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bbc:	7b3b      	ldrb	r3, [r7, #12]
 8002bbe:	b29a      	uxth	r2, r3
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	9301      	str	r3, [sp, #4]
 8002bc4:	2302      	movs	r3, #2
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002bcc:	2178      	movs	r1, #120	; 0x78
 8002bce:	4826      	ldr	r0, [pc, #152]	; (8002c68 <FreqMenu_DrawPresetMenu+0x154c>)
 8002bd0:	f00d fdd0 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bd4:	7afb      	ldrb	r3, [r7, #11]
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	2300      	movs	r3, #0
 8002bda:	9301      	str	r3, [sp, #4]
 8002bdc:	2302      	movs	r3, #2
 8002bde:	9300      	str	r3, [sp, #0]
 8002be0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002be4:	2178      	movs	r1, #120	; 0x78
 8002be6:	4821      	ldr	r0, [pc, #132]	; (8002c6c <FreqMenu_DrawPresetMenu+0x1550>)
 8002be8:	f00d fdc4 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bec:	7abb      	ldrb	r3, [r7, #10]
 8002bee:	b29a      	uxth	r2, r3
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	9301      	str	r3, [sp, #4]
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	9300      	str	r3, [sp, #0]
 8002bf8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002bfc:	2178      	movs	r1, #120	; 0x78
 8002bfe:	481c      	ldr	r0, [pc, #112]	; (8002c70 <FreqMenu_DrawPresetMenu+0x1554>)
 8002c00:	f00d fdb8 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002c04:	7a7b      	ldrb	r3, [r7, #9]
 8002c06:	b29a      	uxth	r2, r3
 8002c08:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002c0c:	9301      	str	r3, [sp, #4]
 8002c0e:	2302      	movs	r3, #2
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	2300      	movs	r3, #0
 8002c14:	2178      	movs	r1, #120	; 0x78
 8002c16:	4817      	ldr	r0, [pc, #92]	; (8002c74 <FreqMenu_DrawPresetMenu+0x1558>)
 8002c18:	f00d fdac 	bl	8010774 <ILI9341_Draw_Text>
			break;
 8002c1c:	bf00      	nop
 8002c1e:	e00b      	b.n	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8002c20:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002c24:	9301      	str	r3, [sp, #4]
 8002c26:	2301      	movs	r3, #1
 8002c28:	9300      	str	r3, [sp, #0]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	22b4      	movs	r2, #180	; 0xb4
 8002c2e:	2105      	movs	r1, #5
 8002c30:	4811      	ldr	r0, [pc, #68]	; (8002c78 <FreqMenu_DrawPresetMenu+0x155c>)
 8002c32:	f00d fd9f 	bl	8010774 <ILI9341_Draw_Text>
}
 8002c36:	e7ff      	b.n	8002c38 <FreqMenu_DrawPresetMenu+0x151c>
 8002c38:	bf00      	nop
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	08015800 	.word	0x08015800
 8002c44:	08015808 	.word	0x08015808
 8002c48:	08015810 	.word	0x08015810
 8002c4c:	08015818 	.word	0x08015818
 8002c50:	08015820 	.word	0x08015820
 8002c54:	08015828 	.word	0x08015828
 8002c58:	08015830 	.word	0x08015830
 8002c5c:	08015838 	.word	0x08015838
 8002c60:	08015840 	.word	0x08015840
 8002c64:	08015848 	.word	0x08015848
 8002c68:	08015850 	.word	0x08015850
 8002c6c:	08015858 	.word	0x08015858
 8002c70:	08015860 	.word	0x08015860
 8002c74:	08015868 	.word	0x08015868
 8002c78:	08015874 	.word	0x08015874

08002c7c <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002c82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c86:	9301      	str	r3, [sp, #4]
 8002c88:	2302      	movs	r3, #2
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	220a      	movs	r2, #10
 8002c90:	2105      	movs	r1, #5
 8002c92:	4804      	ldr	r0, [pc, #16]	; (8002ca4 <FreqMenu_DrawAdjustMenu+0x28>)
 8002c94:	f00d fd6e 	bl	8010774 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002c98:	f7fe f92e 	bl	8000ef8 <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 8002c9c:	bf00      	nop
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	080158a4 	.word	0x080158a4

08002ca8 <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 8002ca8:	b5b0      	push	{r4, r5, r7, lr}
 8002caa:	b0a0      	sub	sp, #128	; 0x80
 8002cac:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002cae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cb2:	9301      	str	r3, [sp, #4]
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	2300      	movs	r3, #0
 8002cba:	220a      	movs	r2, #10
 8002cbc:	2105      	movs	r1, #5
 8002cbe:	48a2      	ldr	r0, [pc, #648]	; (8002f48 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002cc0:	f00d fd58 	bl	8010774 <ILI9341_Draw_Text>
	DM_DisplayInputTriggerStatus();
 8002cc4:	f7fe fbda 	bl	800147c <DM_DisplayInputTriggerStatus>

	// draw enabled status


	char enabled_text[20] = "";
 8002cc8:	2300      	movs	r3, #0
 8002cca:	667b      	str	r3, [r7, #100]	; 0x64
 8002ccc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	601a      	str	r2, [r3, #0]
 8002cd4:	605a      	str	r2, [r3, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
 8002cd8:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002cda:	4b9c      	ldr	r3, [pc, #624]	; (8002f4c <FreqMenu_DrawSweepMenu+0x2a4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d109      	bne.n	8002cfa <FreqMenu_DrawSweepMenu+0x52>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 8002ce6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002cea:	4a99      	ldr	r2, [pc, #612]	; (8002f50 <FreqMenu_DrawSweepMenu+0x2a8>)
 8002cec:	461c      	mov	r4, r3
 8002cee:	4615      	mov	r5, r2
 8002cf0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cf2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cf4:	682b      	ldr	r3, [r5, #0]
 8002cf6:	7023      	strb	r3, [r4, #0]
 8002cf8:	e008      	b.n	8002d0c <FreqMenu_DrawSweepMenu+0x64>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 8002cfa:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002cfe:	4a95      	ldr	r2, [pc, #596]	; (8002f54 <FreqMenu_DrawSweepMenu+0x2ac>)
 8002d00:	461c      	mov	r4, r3
 8002d02:	4615      	mov	r5, r2
 8002d04:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d08:	682b      	ldr	r3, [r5, #0]
 8002d0a:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 5, 40, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d0c:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002d10:	2300      	movs	r3, #0
 8002d12:	9301      	str	r3, [sp, #4]
 8002d14:	2302      	movs	r3, #2
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d1c:	2228      	movs	r2, #40	; 0x28
 8002d1e:	2105      	movs	r1, #5
 8002d20:	f00d fd28 	bl	8010774 <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8002d24:	2300      	movs	r3, #0
 8002d26:	64bb      	str	r3, [r7, #72]	; 0x48
 8002d28:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	605a      	str	r2, [r3, #4]
 8002d32:	609a      	str	r2, [r3, #8]
 8002d34:	60da      	str	r2, [r3, #12]
 8002d36:	611a      	str	r2, [r3, #16]
 8002d38:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT: %7.2f Hz", SM_GetOutputInHertz());
 8002d3a:	f003 ff73 	bl	8006c24 <SM_GetOutputInHertz>
 8002d3e:	ee10 3a10 	vmov	r3, s0
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7fd fc28 	bl	8000598 <__aeabi_f2d>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	460c      	mov	r4, r1
 8002d4c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002d50:	e9cd 3400 	strd	r3, r4, [sp]
 8002d54:	4a80      	ldr	r2, [pc, #512]	; (8002f58 <FreqMenu_DrawSweepMenu+0x2b0>)
 8002d56:	2119      	movs	r1, #25
 8002d58:	f00f f8c8 	bl	8011eec <sniprintf>
	ILI9341_Draw_Text(out_hertz, 5, 60, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d5c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002d60:	2300      	movs	r3, #0
 8002d62:	9301      	str	r3, [sp, #4]
 8002d64:	2302      	movs	r3, #2
 8002d66:	9300      	str	r3, [sp, #0]
 8002d68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d6c:	223c      	movs	r2, #60	; 0x3c
 8002d6e:	2105      	movs	r1, #5
 8002d70:	f00d fd00 	bl	8010774 <ILI9341_Draw_Text>
		//snprintf(dir_text, sizeof(dir_text), "DIRECTION:  N/A");
	}
	else
	{
*/
		ILI9341_Draw_Text("SWEEP MODE:", 5, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d74:	2300      	movs	r3, #0
 8002d76:	9301      	str	r3, [sp, #4]
 8002d78:	2302      	movs	r3, #2
 8002d7a:	9300      	str	r3, [sp, #0]
 8002d7c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002d80:	2264      	movs	r2, #100	; 0x64
 8002d82:	2105      	movs	r1, #5
 8002d84:	4875      	ldr	r0, [pc, #468]	; (8002f5c <FreqMenu_DrawSweepMenu+0x2b4>)
 8002d86:	f00d fcf5 	bl	8010774 <ILI9341_Draw_Text>

		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 8002d8a:	4b70      	ldr	r3, [pc, #448]	; (8002f4c <FreqMenu_DrawSweepMenu+0x2a4>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f003 0310 	and.w	r3, r3, #16
 8002d92:	2b10      	cmp	r3, #16
 8002d94:	d117      	bne.n	8002dc6 <FreqMenu_DrawSweepMenu+0x11e>
		{
			ILI9341_Draw_Text("UP", 235, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002d96:	2300      	movs	r3, #0
 8002d98:	9301      	str	r3, [sp, #4]
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	9300      	str	r3, [sp, #0]
 8002d9e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002da2:	2264      	movs	r2, #100	; 0x64
 8002da4:	21eb      	movs	r1, #235	; 0xeb
 8002da6:	486e      	ldr	r0, [pc, #440]	; (8002f60 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002da8:	f00d fce4 	bl	8010774 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("DOWN", 265, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002dac:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002db0:	9301      	str	r3, [sp, #4]
 8002db2:	2302      	movs	r3, #2
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	2300      	movs	r3, #0
 8002db8:	2264      	movs	r2, #100	; 0x64
 8002dba:	f240 1109 	movw	r1, #265	; 0x109
 8002dbe:	4869      	ldr	r0, [pc, #420]	; (8002f64 <FreqMenu_DrawSweepMenu+0x2bc>)
 8002dc0:	f00d fcd8 	bl	8010774 <ILI9341_Draw_Text>
 8002dc4:	e016      	b.n	8002df4 <FreqMenu_DrawSweepMenu+0x14c>
		}
		else
		{
			ILI9341_Draw_Text("DOWN", 265, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	9301      	str	r3, [sp, #4]
 8002dca:	2302      	movs	r3, #2
 8002dcc:	9300      	str	r3, [sp, #0]
 8002dce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002dd2:	2264      	movs	r2, #100	; 0x64
 8002dd4:	f240 1109 	movw	r1, #265	; 0x109
 8002dd8:	4862      	ldr	r0, [pc, #392]	; (8002f64 <FreqMenu_DrawSweepMenu+0x2bc>)
 8002dda:	f00d fccb 	bl	8010774 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("UP", 235, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002dde:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002de2:	9301      	str	r3, [sp, #4]
 8002de4:	2302      	movs	r3, #2
 8002de6:	9300      	str	r3, [sp, #0]
 8002de8:	2300      	movs	r3, #0
 8002dea:	2264      	movs	r2, #100	; 0x64
 8002dec:	21eb      	movs	r1, #235	; 0xeb
 8002dee:	485c      	ldr	r0, [pc, #368]	; (8002f60 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002df0:	f00d fcc0 	bl	8010774 <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 8002df4:	4b5c      	ldr	r3, [pc, #368]	; (8002f68 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d10b      	bne.n	8002e14 <FreqMenu_DrawSweepMenu+0x16c>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002dfc:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	2302      	movs	r3, #2
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	2300      	movs	r3, #0
 8002e08:	2278      	movs	r2, #120	; 0x78
 8002e0a:	2105      	movs	r1, #5
 8002e0c:	4857      	ldr	r0, [pc, #348]	; (8002f6c <FreqMenu_DrawSweepMenu+0x2c4>)
 8002e0e:	f00d fcb1 	bl	8010774 <ILI9341_Draw_Text>
 8002e12:	e00a      	b.n	8002e2a <FreqMenu_DrawSweepMenu+0x182>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e14:	2300      	movs	r3, #0
 8002e16:	9301      	str	r3, [sp, #4]
 8002e18:	2302      	movs	r3, #2
 8002e1a:	9300      	str	r3, [sp, #0]
 8002e1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e20:	2278      	movs	r2, #120	; 0x78
 8002e22:	2105      	movs	r1, #5
 8002e24:	4851      	ldr	r0, [pc, #324]	; (8002f6c <FreqMenu_DrawSweepMenu+0x2c4>)
 8002e26:	f00d fca5 	bl	8010774 <ILI9341_Draw_Text>
	}
	char arr_text[25] = "";
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e2e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
 8002e36:	605a      	str	r2, [r3, #4]
 8002e38:	609a      	str	r2, [r3, #8]
 8002e3a:	60da      	str	r2, [r3, #12]
 8002e3c:	611a      	str	r2, [r3, #16]
 8002e3e:	751a      	strb	r2, [r3, #20]
	snprintf(arr_text, sizeof(arr_text), "%8.3f Hz", calculated_sweep_in_hertz);
 8002e40:	4b4b      	ldr	r3, [pc, #300]	; (8002f70 <FreqMenu_DrawSweepMenu+0x2c8>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f7fd fba7 	bl	8000598 <__aeabi_f2d>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	460c      	mov	r4, r1
 8002e4e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002e52:	e9cd 3400 	strd	r3, r4, [sp]
 8002e56:	4a47      	ldr	r2, [pc, #284]	; (8002f74 <FreqMenu_DrawSweepMenu+0x2cc>)
 8002e58:	2119      	movs	r1, #25
 8002e5a:	f00f f847 	bl	8011eec <sniprintf>
	ILI9341_Draw_Text(arr_text, 182, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e5e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002e62:	2300      	movs	r3, #0
 8002e64:	9301      	str	r3, [sp, #4]
 8002e66:	2302      	movs	r3, #2
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e6e:	2278      	movs	r2, #120	; 0x78
 8002e70:	21b6      	movs	r1, #182	; 0xb6
 8002e72:	f00d fc7f 	bl	8010774 <ILI9341_Draw_Text>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 8002e76:	4b3c      	ldr	r3, [pc, #240]	; (8002f68 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d10f      	bne.n	8002e9e <FreqMenu_DrawSweepMenu+0x1f6>
 8002e7e:	4b3e      	ldr	r3, [pc, #248]	; (8002f78 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d10b      	bne.n	8002e9e <FreqMenu_DrawSweepMenu+0x1f6>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);	// highlighted
 8002e86:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002e8a:	9301      	str	r3, [sp, #4]
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	2300      	movs	r3, #0
 8002e92:	228c      	movs	r2, #140	; 0x8c
 8002e94:	2105      	movs	r1, #5
 8002e96:	4839      	ldr	r0, [pc, #228]	; (8002f7c <FreqMenu_DrawSweepMenu+0x2d4>)
 8002e98:	f00d fc6c 	bl	8010774 <ILI9341_Draw_Text>
 8002e9c:	e00a      	b.n	8002eb4 <FreqMenu_DrawSweepMenu+0x20c>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	9301      	str	r3, [sp, #4]
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	9300      	str	r3, [sp, #0]
 8002ea6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002eaa:	228c      	movs	r2, #140	; 0x8c
 8002eac:	2105      	movs	r1, #5
 8002eae:	4833      	ldr	r0, [pc, #204]	; (8002f7c <FreqMenu_DrawSweepMenu+0x2d4>)
 8002eb0:	f00d fc60 	bl	8010774 <ILI9341_Draw_Text>
	}
	char sweep_lower_text[20] = "";
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	61bb      	str	r3, [r7, #24]
 8002eb8:	f107 031c 	add.w	r3, r7, #28
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
 8002ec2:	609a      	str	r2, [r3, #8]
 8002ec4:	60da      	str	r2, [r3, #12]
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "%9.2f  Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 8002ec6:	4b2e      	ldr	r3, [pc, #184]	; (8002f80 <FreqMenu_DrawSweepMenu+0x2d8>)
 8002ec8:	edd3 7a00 	vldr	s15, [r3]
 8002ecc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ed0:	4b2c      	ldr	r3, [pc, #176]	; (8002f84 <FreqMenu_DrawSweepMenu+0x2dc>)
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed4:	b29b      	uxth	r3, r3
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	ee17 0a90 	vmov	r0, s15
 8002edc:	f003 fee6 	bl	8006cac <SM_ConvertPeriodToHertz>
 8002ee0:	eeb0 7a40 	vmov.f32	s14, s0
 8002ee4:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002f88 <FreqMenu_DrawSweepMenu+0x2e0>
 8002ee8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002eec:	ee16 0a90 	vmov	r0, s13
 8002ef0:	f7fd fb52 	bl	8000598 <__aeabi_f2d>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	460c      	mov	r4, r1
 8002ef8:	f107 0018 	add.w	r0, r7, #24
 8002efc:	e9cd 3400 	strd	r3, r4, [sp]
 8002f00:	4a22      	ldr	r2, [pc, #136]	; (8002f8c <FreqMenu_DrawSweepMenu+0x2e4>)
 8002f02:	2114      	movs	r1, #20
 8002f04:	f00e fff2 	bl	8011eec <sniprintf>
	ILI9341_Draw_Text(sweep_lower_text, 158, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f08:	f107 0018 	add.w	r0, r7, #24
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	9301      	str	r3, [sp, #4]
 8002f10:	2302      	movs	r3, #2
 8002f12:	9300      	str	r3, [sp, #0]
 8002f14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f18:	228c      	movs	r2, #140	; 0x8c
 8002f1a:	219e      	movs	r1, #158	; 0x9e
 8002f1c:	f00d fc2a 	bl	8010774 <ILI9341_Draw_Text>


	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 8002f20:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d135      	bne.n	8002f94 <FreqMenu_DrawSweepMenu+0x2ec>
 8002f28:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d131      	bne.n	8002f94 <FreqMenu_DrawSweepMenu+0x2ec>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR); 	// highlighted
 8002f30:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002f34:	9301      	str	r3, [sp, #4]
 8002f36:	2302      	movs	r3, #2
 8002f38:	9300      	str	r3, [sp, #0]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	22a0      	movs	r2, #160	; 0xa0
 8002f3e:	2105      	movs	r1, #5
 8002f40:	4813      	ldr	r0, [pc, #76]	; (8002f90 <FreqMenu_DrawSweepMenu+0x2e8>)
 8002f42:	f00d fc17 	bl	8010774 <ILI9341_Draw_Text>
 8002f46:	e030      	b.n	8002faa <FreqMenu_DrawSweepMenu+0x302>
 8002f48:	080158b8 	.word	0x080158b8
 8002f4c:	40000c00 	.word	0x40000c00
 8002f50:	080158cc 	.word	0x080158cc
 8002f54:	080158e0 	.word	0x080158e0
 8002f58:	080158f4 	.word	0x080158f4
 8002f5c:	08015908 	.word	0x08015908
 8002f60:	08015914 	.word	0x08015914
 8002f64:	08015918 	.word	0x08015918
 8002f68:	20001e55 	.word	0x20001e55
 8002f6c:	08015920 	.word	0x08015920
 8002f70:	2000226c 	.word	0x2000226c
 8002f74:	08015930 	.word	0x08015930
 8002f78:	20001e54 	.word	0x20001e54
 8002f7c:	0801593c 	.word	0x0801593c
 8002f80:	20000120 	.word	0x20000120
 8002f84:	40013400 	.word	0x40013400
 8002f88:	42f00000 	.word	0x42f00000
 8002f8c:	0801594c 	.word	0x0801594c
 8002f90:	08015958 	.word	0x08015958
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f94:	2300      	movs	r3, #0
 8002f96:	9301      	str	r3, [sp, #4]
 8002f98:	2302      	movs	r3, #2
 8002f9a:	9300      	str	r3, [sp, #0]
 8002f9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002fa0:	22a0      	movs	r2, #160	; 0xa0
 8002fa2:	2105      	movs	r1, #5
 8002fa4:	484d      	ldr	r0, [pc, #308]	; (80030dc <FreqMenu_DrawSweepMenu+0x434>)
 8002fa6:	f00d fbe5 	bl	8010774 <ILI9341_Draw_Text>
	}
	char sweep_upper_text[20] = "";
 8002faa:	2300      	movs	r3, #0
 8002fac:	607b      	str	r3, [r7, #4]
 8002fae:	f107 0308 	add.w	r3, r7, #8
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	605a      	str	r2, [r3, #4]
 8002fb8:	609a      	str	r2, [r3, #8]
 8002fba:	60da      	str	r2, [r3, #12]
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "%8.2f  Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 8002fbc:	4b48      	ldr	r3, [pc, #288]	; (80030e0 <FreqMenu_DrawSweepMenu+0x438>)
 8002fbe:	edd3 7a00 	vldr	s15, [r3]
 8002fc2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fc6:	4b47      	ldr	r3, [pc, #284]	; (80030e4 <FreqMenu_DrawSweepMenu+0x43c>)
 8002fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	4619      	mov	r1, r3
 8002fce:	ee17 0a90 	vmov	r0, s15
 8002fd2:	f003 fe6b 	bl	8006cac <SM_ConvertPeriodToHertz>
 8002fd6:	eeb0 7a40 	vmov.f32	s14, s0
 8002fda:	eddf 7a43 	vldr	s15, [pc, #268]	; 80030e8 <FreqMenu_DrawSweepMenu+0x440>
 8002fde:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002fe2:	ee16 0a90 	vmov	r0, s13
 8002fe6:	f7fd fad7 	bl	8000598 <__aeabi_f2d>
 8002fea:	4603      	mov	r3, r0
 8002fec:	460c      	mov	r4, r1
 8002fee:	1d38      	adds	r0, r7, #4
 8002ff0:	e9cd 3400 	strd	r3, r4, [sp]
 8002ff4:	4a3d      	ldr	r2, [pc, #244]	; (80030ec <FreqMenu_DrawSweepMenu+0x444>)
 8002ff6:	2114      	movs	r1, #20
 8002ff8:	f00e ff78 	bl	8011eec <sniprintf>
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ffc:	1d38      	adds	r0, r7, #4
 8002ffe:	2300      	movs	r3, #0
 8003000:	9301      	str	r3, [sp, #4]
 8003002:	2302      	movs	r3, #2
 8003004:	9300      	str	r3, [sp, #0]
 8003006:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800300a:	22a0      	movs	r2, #160	; 0xa0
 800300c:	21aa      	movs	r1, #170	; 0xaa
 800300e:	f00d fbb1 	bl	8010774 <ILI9341_Draw_Text>


	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8003012:	4b37      	ldr	r3, [pc, #220]	; (80030f0 <FreqMenu_DrawSweepMenu+0x448>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b01      	cmp	r3, #1
 800301c:	d10b      	bne.n	8003036 <FreqMenu_DrawSweepMenu+0x38e>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800301e:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003022:	9301      	str	r3, [sp, #4]
 8003024:	2302      	movs	r3, #2
 8003026:	9300      	str	r3, [sp, #0]
 8003028:	2300      	movs	r3, #0
 800302a:	22d5      	movs	r2, #213	; 0xd5
 800302c:	2106      	movs	r1, #6
 800302e:	4831      	ldr	r0, [pc, #196]	; (80030f4 <FreqMenu_DrawSweepMenu+0x44c>)
 8003030:	f00d fba0 	bl	8010774 <ILI9341_Draw_Text>
 8003034:	e00a      	b.n	800304c <FreqMenu_DrawSweepMenu+0x3a4>
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003036:	f240 23fd 	movw	r3, #765	; 0x2fd
 800303a:	9301      	str	r3, [sp, #4]
 800303c:	2302      	movs	r3, #2
 800303e:	9300      	str	r3, [sp, #0]
 8003040:	2300      	movs	r3, #0
 8003042:	22d5      	movs	r2, #213	; 0xd5
 8003044:	2105      	movs	r1, #5
 8003046:	482c      	ldr	r0, [pc, #176]	; (80030f8 <FreqMenu_DrawSweepMenu+0x450>)
 8003048:	f00d fb94 	bl	8010774 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800304c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003050:	9301      	str	r3, [sp, #4]
 8003052:	2302      	movs	r3, #2
 8003054:	9300      	str	r3, [sp, #0]
 8003056:	2300      	movs	r3, #0
 8003058:	22cc      	movs	r2, #204	; 0xcc
 800305a:	2168      	movs	r1, #104	; 0x68
 800305c:	4827      	ldr	r0, [pc, #156]	; (80030fc <FreqMenu_DrawSweepMenu+0x454>)
 800305e:	f00d fb89 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003062:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003066:	9301      	str	r3, [sp, #4]
 8003068:	2302      	movs	r3, #2
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	2300      	movs	r3, #0
 800306e:	22de      	movs	r2, #222	; 0xde
 8003070:	2161      	movs	r1, #97	; 0x61
 8003072:	4823      	ldr	r0, [pc, #140]	; (8003100 <FreqMenu_DrawSweepMenu+0x458>)
 8003074:	f00d fb7e 	bl	8010774 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003078:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800307c:	9301      	str	r3, [sp, #4]
 800307e:	2302      	movs	r3, #2
 8003080:	9300      	str	r3, [sp, #0]
 8003082:	2300      	movs	r3, #0
 8003084:	22cc      	movs	r2, #204	; 0xcc
 8003086:	21b7      	movs	r1, #183	; 0xb7
 8003088:	481c      	ldr	r0, [pc, #112]	; (80030fc <FreqMenu_DrawSweepMenu+0x454>)
 800308a:	f00d fb73 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800308e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003092:	9301      	str	r3, [sp, #4]
 8003094:	2302      	movs	r3, #2
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	2300      	movs	r3, #0
 800309a:	22de      	movs	r2, #222	; 0xde
 800309c:	21ad      	movs	r1, #173	; 0xad
 800309e:	4819      	ldr	r0, [pc, #100]	; (8003104 <FreqMenu_DrawSweepMenu+0x45c>)
 80030a0:	f00d fb68 	bl	8010774 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80030a4:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80030a8:	9301      	str	r3, [sp, #4]
 80030aa:	2302      	movs	r3, #2
 80030ac:	9300      	str	r3, [sp, #0]
 80030ae:	2300      	movs	r3, #0
 80030b0:	22cc      	movs	r2, #204	; 0xcc
 80030b2:	f240 1107 	movw	r1, #263	; 0x107
 80030b6:	4811      	ldr	r0, [pc, #68]	; (80030fc <FreqMenu_DrawSweepMenu+0x454>)
 80030b8:	f00d fb5c 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80030bc:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80030c0:	9301      	str	r3, [sp, #4]
 80030c2:	2302      	movs	r3, #2
 80030c4:	9300      	str	r3, [sp, #0]
 80030c6:	2300      	movs	r3, #0
 80030c8:	22de      	movs	r2, #222	; 0xde
 80030ca:	21fc      	movs	r1, #252	; 0xfc
 80030cc:	480e      	ldr	r0, [pc, #56]	; (8003108 <FreqMenu_DrawSweepMenu+0x460>)
 80030ce:	f00d fb51 	bl	8010774 <ILI9341_Draw_Text>
}
 80030d2:	bf00      	nop
 80030d4:	3778      	adds	r7, #120	; 0x78
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bdb0      	pop	{r4, r5, r7, pc}
 80030da:	bf00      	nop
 80030dc:	08015958 	.word	0x08015958
 80030e0:	20000124 	.word	0x20000124
 80030e4:	40013400 	.word	0x40013400
 80030e8:	42f00000 	.word	0x42f00000
 80030ec:	08015968 	.word	0x08015968
 80030f0:	40000c00 	.word	0x40000c00
 80030f4:	08015974 	.word	0x08015974
 80030f8:	0801597c 	.word	0x0801597c
 80030fc:	08015984 	.word	0x08015984
 8003100:	08015988 	.word	0x08015988
 8003104:	08015990 	.word	0x08015990
 8003108:	08015998 	.word	0x08015998

0800310c <FreqMenu_DrawPrescalerMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPrescalerMenu()
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->PSC", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003112:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003116:	9301      	str	r3, [sp, #4]
 8003118:	2302      	movs	r3, #2
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	2300      	movs	r3, #0
 800311e:	220a      	movs	r2, #10
 8003120:	2105      	movs	r1, #5
 8003122:	4804      	ldr	r0, [pc, #16]	; (8003134 <FreqMenu_DrawPrescalerMenu+0x28>)
 8003124:	f00d fb26 	bl	8010774 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003128:	f7fd fee6 	bl	8000ef8 <DM_DisplayFormattedOutput>

}
 800312c:	bf00      	nop
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	080159a0 	.word	0x080159a0

08003138 <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b082      	sub	sp, #8
 800313c:	af00      	add	r7, sp, #0
 800313e:	4603      	mov	r3, r0
 8003140:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003142:	79fb      	ldrb	r3, [r7, #7]
 8003144:	2b02      	cmp	r3, #2
 8003146:	d007      	beq.n	8003158 <FuncMenu_DrawMenu+0x20>
 8003148:	2b03      	cmp	r3, #3
 800314a:	d009      	beq.n	8003160 <FuncMenu_DrawMenu+0x28>
 800314c:	2b01      	cmp	r3, #1
 800314e:	d000      	beq.n	8003152 <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_Aux_MENU:
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
			break;

		default:
			break;
 8003150:	e00a      	b.n	8003168 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawMainMenu();
 8003152:	f000 f80d 	bl	8003170 <FuncMenu_DrawMainMenu>
			break;
 8003156:	e007      	b.n	8003168 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SIGNAL_CHANNEL);
 8003158:	2000      	movs	r0, #0
 800315a:	f000 f851 	bl	8003200 <FuncMenu_DrawOutputMenu>
			break;
 800315e:	e003      	b.n	8003168 <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(AUX_CHANNEL);
 8003160:	2001      	movs	r0, #1
 8003162:	f000 f84d 	bl	8003200 <FuncMenu_DrawOutputMenu>
			break;
 8003166:	bf00      	nop

	}
}
 8003168:	bf00      	nop
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b082      	sub	sp, #8
 8003174:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003176:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800317a:	9301      	str	r3, [sp, #4]
 800317c:	2302      	movs	r3, #2
 800317e:	9300      	str	r3, [sp, #0]
 8003180:	2300      	movs	r3, #0
 8003182:	220a      	movs	r2, #10
 8003184:	210a      	movs	r1, #10
 8003186:	481a      	ldr	r0, [pc, #104]	; (80031f0 <FuncMenu_DrawMainMenu+0x80>)
 8003188:	f00d faf4 	bl	8010774 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 800318c:	f7fd feb4 	bl	8000ef8 <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003190:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003194:	9301      	str	r3, [sp, #4]
 8003196:	2302      	movs	r3, #2
 8003198:	9300      	str	r3, [sp, #0]
 800319a:	2300      	movs	r3, #0
 800319c:	22d2      	movs	r2, #210	; 0xd2
 800319e:	2105      	movs	r1, #5
 80031a0:	4814      	ldr	r0, [pc, #80]	; (80031f4 <FuncMenu_DrawMainMenu+0x84>)
 80031a2:	f00d fae7 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("AUX", 	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80031a6:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80031aa:	9301      	str	r3, [sp, #4]
 80031ac:	2302      	movs	r3, #2
 80031ae:	9300      	str	r3, [sp, #0]
 80031b0:	2300      	movs	r3, #0
 80031b2:	22d2      	movs	r2, #210	; 0xd2
 80031b4:	2164      	movs	r1, #100	; 0x64
 80031b6:	4810      	ldr	r0, [pc, #64]	; (80031f8 <FuncMenu_DrawMainMenu+0x88>)
 80031b8:	f00d fadc 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80031bc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80031c0:	9301      	str	r3, [sp, #4]
 80031c2:	2302      	movs	r3, #2
 80031c4:	9300      	str	r3, [sp, #0]
 80031c6:	2300      	movs	r3, #0
 80031c8:	22d2      	movs	r2, #210	; 0xd2
 80031ca:	21af      	movs	r1, #175	; 0xaf
 80031cc:	480b      	ldr	r0, [pc, #44]	; (80031fc <FuncMenu_DrawMainMenu+0x8c>)
 80031ce:	f00d fad1 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80031d2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80031d6:	9301      	str	r3, [sp, #4]
 80031d8:	2302      	movs	r3, #2
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	2300      	movs	r3, #0
 80031de:	22d2      	movs	r2, #210	; 0xd2
 80031e0:	f44f 7182 	mov.w	r1, #260	; 0x104
 80031e4:	4805      	ldr	r0, [pc, #20]	; (80031fc <FuncMenu_DrawMainMenu+0x8c>)
 80031e6:	f00d fac5 	bl	8010774 <ILI9341_Draw_Text>
}
 80031ea:	bf00      	nop
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	080159b0 	.word	0x080159b0
 80031f4:	080159bc 	.word	0x080159bc
 80031f8:	080159c4 	.word	0x080159c4
 80031fc:	080159c8 	.word	0x080159c8

08003200 <FuncMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawOutputMenu(eOutputChannel_t pOutChan)
{
 8003200:	b590      	push	{r4, r7, lr}
 8003202:	b089      	sub	sp, #36	; 0x24
 8003204:	af02      	add	r7, sp, #8
 8003206:	4603      	mov	r3, r0
 8003208:	71fb      	strb	r3, [r7, #7]
	if(pOutChan)
 800320a:	79fb      	ldrb	r3, [r7, #7]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00b      	beq.n	8003228 <FuncMenu_DrawOutputMenu+0x28>
		ILI9341_Draw_Text("OUT->FUNC->AUX", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003210:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003214:	9301      	str	r3, [sp, #4]
 8003216:	2302      	movs	r3, #2
 8003218:	9300      	str	r3, [sp, #0]
 800321a:	2300      	movs	r3, #0
 800321c:	220a      	movs	r2, #10
 800321e:	210a      	movs	r1, #10
 8003220:	4896      	ldr	r0, [pc, #600]	; (800347c <FuncMenu_DrawOutputMenu+0x27c>)
 8003222:	f00d faa7 	bl	8010774 <ILI9341_Draw_Text>
 8003226:	e00a      	b.n	800323e <FuncMenu_DrawOutputMenu+0x3e>
	else
		ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003228:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800322c:	9301      	str	r3, [sp, #4]
 800322e:	2302      	movs	r3, #2
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	2300      	movs	r3, #0
 8003234:	220a      	movs	r2, #10
 8003236:	210a      	movs	r1, #10
 8003238:	4891      	ldr	r0, [pc, #580]	; (8003480 <FuncMenu_DrawOutputMenu+0x280>)
 800323a:	f00d fa9b 	bl	8010774 <ILI9341_Draw_Text>

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(pOutChan)->func_profile;
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	4618      	mov	r0, r3
 8003242:	f003 fa57 	bl	80066f4 <SM_GetOutputChannel>
 8003246:	4603      	mov	r3, r0
 8003248:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800324c:	617b      	str	r3, [r7, #20]
	if(func_profileTmp)
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 8424 	beq.w	8003a9e <FuncMenu_DrawOutputMenu+0x89e>
	{
		switch(func_profileTmp->func)
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b06      	cmp	r3, #6
 800325c:	f200 841f 	bhi.w	8003a9e <FuncMenu_DrawOutputMenu+0x89e>
 8003260:	a201      	add	r2, pc, #4	; (adr r2, 8003268 <FuncMenu_DrawOutputMenu+0x68>)
 8003262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003266:	bf00      	nop
 8003268:	08003285 	.word	0x08003285
 800326c:	08003381 	.word	0x08003381
 8003270:	080034a5 	.word	0x080034a5
 8003274:	080035a1 	.word	0x080035a1
 8003278:	0800369d 	.word	0x0800369d
 800327c:	080037d5 	.word	0x080037d5
 8003280:	080038e7 	.word	0x080038e7
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003284:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003288:	9301      	str	r3, [sp, #4]
 800328a:	2302      	movs	r3, #2
 800328c:	9300      	str	r3, [sp, #0]
 800328e:	2300      	movs	r3, #0
 8003290:	2232      	movs	r2, #50	; 0x32
 8003292:	210a      	movs	r1, #10
 8003294:	487b      	ldr	r0, [pc, #492]	; (8003484 <FuncMenu_DrawOutputMenu+0x284>)
 8003296:	f00d fa6d 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800329a:	2300      	movs	r3, #0
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	2302      	movs	r3, #2
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032a6:	2246      	movs	r2, #70	; 0x46
 80032a8:	210a      	movs	r1, #10
 80032aa:	4877      	ldr	r0, [pc, #476]	; (8003488 <FuncMenu_DrawOutputMenu+0x288>)
 80032ac:	f00d fa62 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032b0:	2300      	movs	r3, #0
 80032b2:	9301      	str	r3, [sp, #4]
 80032b4:	2302      	movs	r3, #2
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032bc:	225a      	movs	r2, #90	; 0x5a
 80032be:	210a      	movs	r1, #10
 80032c0:	4872      	ldr	r0, [pc, #456]	; (800348c <FuncMenu_DrawOutputMenu+0x28c>)
 80032c2:	f00d fa57 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032c6:	2300      	movs	r3, #0
 80032c8:	9301      	str	r3, [sp, #4]
 80032ca:	2302      	movs	r3, #2
 80032cc:	9300      	str	r3, [sp, #0]
 80032ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032d2:	226e      	movs	r2, #110	; 0x6e
 80032d4:	210a      	movs	r1, #10
 80032d6:	486e      	ldr	r0, [pc, #440]	; (8003490 <FuncMenu_DrawOutputMenu+0x290>)
 80032d8:	f00d fa4c 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032dc:	2300      	movs	r3, #0
 80032de:	9301      	str	r3, [sp, #4]
 80032e0:	2302      	movs	r3, #2
 80032e2:	9300      	str	r3, [sp, #0]
 80032e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032e8:	2282      	movs	r2, #130	; 0x82
 80032ea:	210a      	movs	r1, #10
 80032ec:	4869      	ldr	r0, [pc, #420]	; (8003494 <FuncMenu_DrawOutputMenu+0x294>)
 80032ee:	f00d fa41 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80032f2:	2300      	movs	r3, #0
 80032f4:	9301      	str	r3, [sp, #4]
 80032f6:	2302      	movs	r3, #2
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80032fe:	2296      	movs	r2, #150	; 0x96
 8003300:	210a      	movs	r1, #10
 8003302:	4865      	ldr	r0, [pc, #404]	; (8003498 <FuncMenu_DrawOutputMenu+0x298>)
 8003304:	f00d fa36 	bl	8010774 <ILI9341_Draw_Text>

				if(pOutChan)
 8003308:	79fb      	ldrb	r3, [r7, #7]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d00a      	beq.n	8003324 <FuncMenu_DrawOutputMenu+0x124>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800330e:	2300      	movs	r3, #0
 8003310:	9301      	str	r3, [sp, #4]
 8003312:	2302      	movs	r3, #2
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800331a:	22aa      	movs	r2, #170	; 0xaa
 800331c:	210a      	movs	r1, #10
 800331e:	485f      	ldr	r0, [pc, #380]	; (800349c <FuncMenu_DrawOutputMenu+0x29c>)
 8003320:	f00d fa28 	bl	8010774 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003324:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003328:	9301      	str	r3, [sp, #4]
 800332a:	2302      	movs	r3, #2
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	2300      	movs	r3, #0
 8003330:	22d2      	movs	r2, #210	; 0xd2
 8003332:	2105      	movs	r1, #5
 8003334:	485a      	ldr	r0, [pc, #360]	; (80034a0 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003336:	f00d fa1d 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800333a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800333e:	9301      	str	r3, [sp, #4]
 8003340:	2302      	movs	r3, #2
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	2300      	movs	r3, #0
 8003346:	22d2      	movs	r2, #210	; 0xd2
 8003348:	2161      	movs	r1, #97	; 0x61
 800334a:	4855      	ldr	r0, [pc, #340]	; (80034a0 <FuncMenu_DrawOutputMenu+0x2a0>)
 800334c:	f00d fa12 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003350:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003354:	9301      	str	r3, [sp, #4]
 8003356:	2302      	movs	r3, #2
 8003358:	9300      	str	r3, [sp, #0]
 800335a:	2300      	movs	r3, #0
 800335c:	22d2      	movs	r2, #210	; 0xd2
 800335e:	21af      	movs	r1, #175	; 0xaf
 8003360:	484f      	ldr	r0, [pc, #316]	; (80034a0 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003362:	f00d fa07 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003366:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800336a:	9301      	str	r3, [sp, #4]
 800336c:	2302      	movs	r3, #2
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	2300      	movs	r3, #0
 8003372:	22d2      	movs	r2, #210	; 0xd2
 8003374:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003378:	4849      	ldr	r0, [pc, #292]	; (80034a0 <FuncMenu_DrawOutputMenu+0x2a0>)
 800337a:	f00d f9fb 	bl	8010774 <ILI9341_Draw_Text>
				break;
 800337e:	e38e      	b.n	8003a9e <FuncMenu_DrawOutputMenu+0x89e>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003380:	2300      	movs	r3, #0
 8003382:	9301      	str	r3, [sp, #4]
 8003384:	2302      	movs	r3, #2
 8003386:	9300      	str	r3, [sp, #0]
 8003388:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800338c:	2232      	movs	r2, #50	; 0x32
 800338e:	210a      	movs	r1, #10
 8003390:	483c      	ldr	r0, [pc, #240]	; (8003484 <FuncMenu_DrawOutputMenu+0x284>)
 8003392:	f00d f9ef 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003396:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800339a:	9301      	str	r3, [sp, #4]
 800339c:	2302      	movs	r3, #2
 800339e:	9300      	str	r3, [sp, #0]
 80033a0:	2300      	movs	r3, #0
 80033a2:	2246      	movs	r2, #70	; 0x46
 80033a4:	210a      	movs	r1, #10
 80033a6:	4838      	ldr	r0, [pc, #224]	; (8003488 <FuncMenu_DrawOutputMenu+0x288>)
 80033a8:	f00d f9e4 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033ac:	2300      	movs	r3, #0
 80033ae:	9301      	str	r3, [sp, #4]
 80033b0:	2302      	movs	r3, #2
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033b8:	225a      	movs	r2, #90	; 0x5a
 80033ba:	210a      	movs	r1, #10
 80033bc:	4833      	ldr	r0, [pc, #204]	; (800348c <FuncMenu_DrawOutputMenu+0x28c>)
 80033be:	f00d f9d9 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033c2:	2300      	movs	r3, #0
 80033c4:	9301      	str	r3, [sp, #4]
 80033c6:	2302      	movs	r3, #2
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033ce:	226e      	movs	r2, #110	; 0x6e
 80033d0:	210a      	movs	r1, #10
 80033d2:	482f      	ldr	r0, [pc, #188]	; (8003490 <FuncMenu_DrawOutputMenu+0x290>)
 80033d4:	f00d f9ce 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033d8:	2300      	movs	r3, #0
 80033da:	9301      	str	r3, [sp, #4]
 80033dc:	2302      	movs	r3, #2
 80033de:	9300      	str	r3, [sp, #0]
 80033e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033e4:	2282      	movs	r2, #130	; 0x82
 80033e6:	210a      	movs	r1, #10
 80033e8:	482a      	ldr	r0, [pc, #168]	; (8003494 <FuncMenu_DrawOutputMenu+0x294>)
 80033ea:	f00d f9c3 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80033ee:	2300      	movs	r3, #0
 80033f0:	9301      	str	r3, [sp, #4]
 80033f2:	2302      	movs	r3, #2
 80033f4:	9300      	str	r3, [sp, #0]
 80033f6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80033fa:	2296      	movs	r2, #150	; 0x96
 80033fc:	210a      	movs	r1, #10
 80033fe:	4826      	ldr	r0, [pc, #152]	; (8003498 <FuncMenu_DrawOutputMenu+0x298>)
 8003400:	f00d f9b8 	bl	8010774 <ILI9341_Draw_Text>

				if(pOutChan)
 8003404:	79fb      	ldrb	r3, [r7, #7]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00a      	beq.n	8003420 <FuncMenu_DrawOutputMenu+0x220>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800340a:	2300      	movs	r3, #0
 800340c:	9301      	str	r3, [sp, #4]
 800340e:	2302      	movs	r3, #2
 8003410:	9300      	str	r3, [sp, #0]
 8003412:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003416:	22aa      	movs	r2, #170	; 0xaa
 8003418:	210a      	movs	r1, #10
 800341a:	4820      	ldr	r0, [pc, #128]	; (800349c <FuncMenu_DrawOutputMenu+0x29c>)
 800341c:	f00d f9aa 	bl	8010774 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003420:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003424:	9301      	str	r3, [sp, #4]
 8003426:	2302      	movs	r3, #2
 8003428:	9300      	str	r3, [sp, #0]
 800342a:	2300      	movs	r3, #0
 800342c:	22d2      	movs	r2, #210	; 0xd2
 800342e:	2105      	movs	r1, #5
 8003430:	481b      	ldr	r0, [pc, #108]	; (80034a0 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003432:	f00d f99f 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003436:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800343a:	9301      	str	r3, [sp, #4]
 800343c:	2302      	movs	r3, #2
 800343e:	9300      	str	r3, [sp, #0]
 8003440:	2300      	movs	r3, #0
 8003442:	22d2      	movs	r2, #210	; 0xd2
 8003444:	2161      	movs	r1, #97	; 0x61
 8003446:	4816      	ldr	r0, [pc, #88]	; (80034a0 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003448:	f00d f994 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800344c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003450:	9301      	str	r3, [sp, #4]
 8003452:	2302      	movs	r3, #2
 8003454:	9300      	str	r3, [sp, #0]
 8003456:	2300      	movs	r3, #0
 8003458:	22d2      	movs	r2, #210	; 0xd2
 800345a:	21af      	movs	r1, #175	; 0xaf
 800345c:	4810      	ldr	r0, [pc, #64]	; (80034a0 <FuncMenu_DrawOutputMenu+0x2a0>)
 800345e:	f00d f989 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003462:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003466:	9301      	str	r3, [sp, #4]
 8003468:	2302      	movs	r3, #2
 800346a:	9300      	str	r3, [sp, #0]
 800346c:	2300      	movs	r3, #0
 800346e:	22d2      	movs	r2, #210	; 0xd2
 8003470:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003474:	480a      	ldr	r0, [pc, #40]	; (80034a0 <FuncMenu_DrawOutputMenu+0x2a0>)
 8003476:	f00d f97d 	bl	8010774 <ILI9341_Draw_Text>
				break;
 800347a:	e310      	b.n	8003a9e <FuncMenu_DrawOutputMenu+0x89e>
 800347c:	080159d0 	.word	0x080159d0
 8003480:	080159e0 	.word	0x080159e0
 8003484:	080159f0 	.word	0x080159f0
 8003488:	080159f8 	.word	0x080159f8
 800348c:	08015a04 	.word	0x08015a04
 8003490:	08015a0c 	.word	0x08015a0c
 8003494:	08015a18 	.word	0x08015a18
 8003498:	08015a24 	.word	0x08015a24
 800349c:	08015a2c 	.word	0x08015a2c
 80034a0:	080159c8 	.word	0x080159c8
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034a4:	2300      	movs	r3, #0
 80034a6:	9301      	str	r3, [sp, #4]
 80034a8:	2302      	movs	r3, #2
 80034aa:	9300      	str	r3, [sp, #0]
 80034ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034b0:	2232      	movs	r2, #50	; 0x32
 80034b2:	210a      	movs	r1, #10
 80034b4:	48be      	ldr	r0, [pc, #760]	; (80037b0 <FuncMenu_DrawOutputMenu+0x5b0>)
 80034b6:	f00d f95d 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034ba:	2300      	movs	r3, #0
 80034bc:	9301      	str	r3, [sp, #4]
 80034be:	2302      	movs	r3, #2
 80034c0:	9300      	str	r3, [sp, #0]
 80034c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034c6:	2246      	movs	r2, #70	; 0x46
 80034c8:	210a      	movs	r1, #10
 80034ca:	48ba      	ldr	r0, [pc, #744]	; (80037b4 <FuncMenu_DrawOutputMenu+0x5b4>)
 80034cc:	f00d f952 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80034d0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80034d4:	9301      	str	r3, [sp, #4]
 80034d6:	2302      	movs	r3, #2
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	2300      	movs	r3, #0
 80034dc:	225a      	movs	r2, #90	; 0x5a
 80034de:	210a      	movs	r1, #10
 80034e0:	48b5      	ldr	r0, [pc, #724]	; (80037b8 <FuncMenu_DrawOutputMenu+0x5b8>)
 80034e2:	f00d f947 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034e6:	2300      	movs	r3, #0
 80034e8:	9301      	str	r3, [sp, #4]
 80034ea:	2302      	movs	r3, #2
 80034ec:	9300      	str	r3, [sp, #0]
 80034ee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80034f2:	226e      	movs	r2, #110	; 0x6e
 80034f4:	210a      	movs	r1, #10
 80034f6:	48b1      	ldr	r0, [pc, #708]	; (80037bc <FuncMenu_DrawOutputMenu+0x5bc>)
 80034f8:	f00d f93c 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80034fc:	2300      	movs	r3, #0
 80034fe:	9301      	str	r3, [sp, #4]
 8003500:	2302      	movs	r3, #2
 8003502:	9300      	str	r3, [sp, #0]
 8003504:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003508:	2282      	movs	r2, #130	; 0x82
 800350a:	210a      	movs	r1, #10
 800350c:	48ac      	ldr	r0, [pc, #688]	; (80037c0 <FuncMenu_DrawOutputMenu+0x5c0>)
 800350e:	f00d f931 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003512:	2300      	movs	r3, #0
 8003514:	9301      	str	r3, [sp, #4]
 8003516:	2302      	movs	r3, #2
 8003518:	9300      	str	r3, [sp, #0]
 800351a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800351e:	2296      	movs	r2, #150	; 0x96
 8003520:	210a      	movs	r1, #10
 8003522:	48a8      	ldr	r0, [pc, #672]	; (80037c4 <FuncMenu_DrawOutputMenu+0x5c4>)
 8003524:	f00d f926 	bl	8010774 <ILI9341_Draw_Text>
				if(pOutChan)
 8003528:	79fb      	ldrb	r3, [r7, #7]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <FuncMenu_DrawOutputMenu+0x344>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800352e:	2300      	movs	r3, #0
 8003530:	9301      	str	r3, [sp, #4]
 8003532:	2302      	movs	r3, #2
 8003534:	9300      	str	r3, [sp, #0]
 8003536:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800353a:	22aa      	movs	r2, #170	; 0xaa
 800353c:	210a      	movs	r1, #10
 800353e:	48a2      	ldr	r0, [pc, #648]	; (80037c8 <FuncMenu_DrawOutputMenu+0x5c8>)
 8003540:	f00d f918 	bl	8010774 <ILI9341_Draw_Text>
			 	// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003544:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003548:	9301      	str	r3, [sp, #4]
 800354a:	2302      	movs	r3, #2
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	2300      	movs	r3, #0
 8003550:	22d2      	movs	r2, #210	; 0xd2
 8003552:	2105      	movs	r1, #5
 8003554:	489d      	ldr	r0, [pc, #628]	; (80037cc <FuncMenu_DrawOutputMenu+0x5cc>)
 8003556:	f00d f90d 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800355a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800355e:	9301      	str	r3, [sp, #4]
 8003560:	2302      	movs	r3, #2
 8003562:	9300      	str	r3, [sp, #0]
 8003564:	2300      	movs	r3, #0
 8003566:	22d2      	movs	r2, #210	; 0xd2
 8003568:	2161      	movs	r1, #97	; 0x61
 800356a:	4898      	ldr	r0, [pc, #608]	; (80037cc <FuncMenu_DrawOutputMenu+0x5cc>)
 800356c:	f00d f902 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003570:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003574:	9301      	str	r3, [sp, #4]
 8003576:	2302      	movs	r3, #2
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	2300      	movs	r3, #0
 800357c:	22d2      	movs	r2, #210	; 0xd2
 800357e:	21af      	movs	r1, #175	; 0xaf
 8003580:	4892      	ldr	r0, [pc, #584]	; (80037cc <FuncMenu_DrawOutputMenu+0x5cc>)
 8003582:	f00d f8f7 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003586:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800358a:	9301      	str	r3, [sp, #4]
 800358c:	2302      	movs	r3, #2
 800358e:	9300      	str	r3, [sp, #0]
 8003590:	2300      	movs	r3, #0
 8003592:	22d2      	movs	r2, #210	; 0xd2
 8003594:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003598:	488c      	ldr	r0, [pc, #560]	; (80037cc <FuncMenu_DrawOutputMenu+0x5cc>)
 800359a:	f00d f8eb 	bl	8010774 <ILI9341_Draw_Text>
				break;
 800359e:	e27e      	b.n	8003a9e <FuncMenu_DrawOutputMenu+0x89e>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035a0:	2300      	movs	r3, #0
 80035a2:	9301      	str	r3, [sp, #4]
 80035a4:	2302      	movs	r3, #2
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035ac:	2232      	movs	r2, #50	; 0x32
 80035ae:	210a      	movs	r1, #10
 80035b0:	487f      	ldr	r0, [pc, #508]	; (80037b0 <FuncMenu_DrawOutputMenu+0x5b0>)
 80035b2:	f00d f8df 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035b6:	2300      	movs	r3, #0
 80035b8:	9301      	str	r3, [sp, #4]
 80035ba:	2302      	movs	r3, #2
 80035bc:	9300      	str	r3, [sp, #0]
 80035be:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035c2:	2246      	movs	r2, #70	; 0x46
 80035c4:	210a      	movs	r1, #10
 80035c6:	487b      	ldr	r0, [pc, #492]	; (80037b4 <FuncMenu_DrawOutputMenu+0x5b4>)
 80035c8:	f00d f8d4 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035cc:	2300      	movs	r3, #0
 80035ce:	9301      	str	r3, [sp, #4]
 80035d0:	2302      	movs	r3, #2
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80035d8:	225a      	movs	r2, #90	; 0x5a
 80035da:	210a      	movs	r1, #10
 80035dc:	4876      	ldr	r0, [pc, #472]	; (80037b8 <FuncMenu_DrawOutputMenu+0x5b8>)
 80035de:	f00d f8c9 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80035e2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80035e6:	9301      	str	r3, [sp, #4]
 80035e8:	2302      	movs	r3, #2
 80035ea:	9300      	str	r3, [sp, #0]
 80035ec:	2300      	movs	r3, #0
 80035ee:	226e      	movs	r2, #110	; 0x6e
 80035f0:	210a      	movs	r1, #10
 80035f2:	4872      	ldr	r0, [pc, #456]	; (80037bc <FuncMenu_DrawOutputMenu+0x5bc>)
 80035f4:	f00d f8be 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80035f8:	2300      	movs	r3, #0
 80035fa:	9301      	str	r3, [sp, #4]
 80035fc:	2302      	movs	r3, #2
 80035fe:	9300      	str	r3, [sp, #0]
 8003600:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003604:	2282      	movs	r2, #130	; 0x82
 8003606:	210a      	movs	r1, #10
 8003608:	486d      	ldr	r0, [pc, #436]	; (80037c0 <FuncMenu_DrawOutputMenu+0x5c0>)
 800360a:	f00d f8b3 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800360e:	2300      	movs	r3, #0
 8003610:	9301      	str	r3, [sp, #4]
 8003612:	2302      	movs	r3, #2
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800361a:	2296      	movs	r2, #150	; 0x96
 800361c:	210a      	movs	r1, #10
 800361e:	4869      	ldr	r0, [pc, #420]	; (80037c4 <FuncMenu_DrawOutputMenu+0x5c4>)
 8003620:	f00d f8a8 	bl	8010774 <ILI9341_Draw_Text>

				if(pOutChan)
 8003624:	79fb      	ldrb	r3, [r7, #7]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d00a      	beq.n	8003640 <FuncMenu_DrawOutputMenu+0x440>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800362a:	2300      	movs	r3, #0
 800362c:	9301      	str	r3, [sp, #4]
 800362e:	2302      	movs	r3, #2
 8003630:	9300      	str	r3, [sp, #0]
 8003632:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003636:	22aa      	movs	r2, #170	; 0xaa
 8003638:	210a      	movs	r1, #10
 800363a:	4863      	ldr	r0, [pc, #396]	; (80037c8 <FuncMenu_DrawOutputMenu+0x5c8>)
 800363c:	f00d f89a 	bl	8010774 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003640:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003644:	9301      	str	r3, [sp, #4]
 8003646:	2302      	movs	r3, #2
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	2300      	movs	r3, #0
 800364c:	22d2      	movs	r2, #210	; 0xd2
 800364e:	2105      	movs	r1, #5
 8003650:	485e      	ldr	r0, [pc, #376]	; (80037cc <FuncMenu_DrawOutputMenu+0x5cc>)
 8003652:	f00d f88f 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003656:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800365a:	9301      	str	r3, [sp, #4]
 800365c:	2302      	movs	r3, #2
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	2300      	movs	r3, #0
 8003662:	22d2      	movs	r2, #210	; 0xd2
 8003664:	2161      	movs	r1, #97	; 0x61
 8003666:	4859      	ldr	r0, [pc, #356]	; (80037cc <FuncMenu_DrawOutputMenu+0x5cc>)
 8003668:	f00d f884 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800366c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003670:	9301      	str	r3, [sp, #4]
 8003672:	2302      	movs	r3, #2
 8003674:	9300      	str	r3, [sp, #0]
 8003676:	2300      	movs	r3, #0
 8003678:	22d2      	movs	r2, #210	; 0xd2
 800367a:	21af      	movs	r1, #175	; 0xaf
 800367c:	4853      	ldr	r0, [pc, #332]	; (80037cc <FuncMenu_DrawOutputMenu+0x5cc>)
 800367e:	f00d f879 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003682:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003686:	9301      	str	r3, [sp, #4]
 8003688:	2302      	movs	r3, #2
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	2300      	movs	r3, #0
 800368e:	22d2      	movs	r2, #210	; 0xd2
 8003690:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003694:	484d      	ldr	r0, [pc, #308]	; (80037cc <FuncMenu_DrawOutputMenu+0x5cc>)
 8003696:	f00d f86d 	bl	8010774 <ILI9341_Draw_Text>
				break;
 800369a:	e200      	b.n	8003a9e <FuncMenu_DrawOutputMenu+0x89e>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800369c:	2300      	movs	r3, #0
 800369e:	9301      	str	r3, [sp, #4]
 80036a0:	2302      	movs	r3, #2
 80036a2:	9300      	str	r3, [sp, #0]
 80036a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036a8:	2232      	movs	r2, #50	; 0x32
 80036aa:	210a      	movs	r1, #10
 80036ac:	4840      	ldr	r0, [pc, #256]	; (80037b0 <FuncMenu_DrawOutputMenu+0x5b0>)
 80036ae:	f00d f861 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036b2:	2300      	movs	r3, #0
 80036b4:	9301      	str	r3, [sp, #4]
 80036b6:	2302      	movs	r3, #2
 80036b8:	9300      	str	r3, [sp, #0]
 80036ba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036be:	2246      	movs	r2, #70	; 0x46
 80036c0:	210a      	movs	r1, #10
 80036c2:	483c      	ldr	r0, [pc, #240]	; (80037b4 <FuncMenu_DrawOutputMenu+0x5b4>)
 80036c4:	f00d f856 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036c8:	2300      	movs	r3, #0
 80036ca:	9301      	str	r3, [sp, #4]
 80036cc:	2302      	movs	r3, #2
 80036ce:	9300      	str	r3, [sp, #0]
 80036d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036d4:	225a      	movs	r2, #90	; 0x5a
 80036d6:	210a      	movs	r1, #10
 80036d8:	4837      	ldr	r0, [pc, #220]	; (80037b8 <FuncMenu_DrawOutputMenu+0x5b8>)
 80036da:	f00d f84b 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80036de:	2300      	movs	r3, #0
 80036e0:	9301      	str	r3, [sp, #4]
 80036e2:	2302      	movs	r3, #2
 80036e4:	9300      	str	r3, [sp, #0]
 80036e6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80036ea:	226e      	movs	r2, #110	; 0x6e
 80036ec:	210a      	movs	r1, #10
 80036ee:	4833      	ldr	r0, [pc, #204]	; (80037bc <FuncMenu_DrawOutputMenu+0x5bc>)
 80036f0:	f00d f840 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80036f4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80036f8:	9301      	str	r3, [sp, #4]
 80036fa:	2302      	movs	r3, #2
 80036fc:	9300      	str	r3, [sp, #0]
 80036fe:	2300      	movs	r3, #0
 8003700:	2282      	movs	r2, #130	; 0x82
 8003702:	210a      	movs	r1, #10
 8003704:	482e      	ldr	r0, [pc, #184]	; (80037c0 <FuncMenu_DrawOutputMenu+0x5c0>)
 8003706:	f00d f835 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800370a:	2300      	movs	r3, #0
 800370c:	9301      	str	r3, [sp, #4]
 800370e:	2302      	movs	r3, #2
 8003710:	9300      	str	r3, [sp, #0]
 8003712:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003716:	2296      	movs	r2, #150	; 0x96
 8003718:	210a      	movs	r1, #10
 800371a:	482a      	ldr	r0, [pc, #168]	; (80037c4 <FuncMenu_DrawOutputMenu+0x5c4>)
 800371c:	f00d f82a 	bl	8010774 <ILI9341_Draw_Text>

				if(pOutChan)
 8003720:	79fb      	ldrb	r3, [r7, #7]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d00a      	beq.n	800373c <FuncMenu_DrawOutputMenu+0x53c>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003726:	2300      	movs	r3, #0
 8003728:	9301      	str	r3, [sp, #4]
 800372a:	2302      	movs	r3, #2
 800372c:	9300      	str	r3, [sp, #0]
 800372e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003732:	22aa      	movs	r2, #170	; 0xaa
 8003734:	210a      	movs	r1, #10
 8003736:	4824      	ldr	r0, [pc, #144]	; (80037c8 <FuncMenu_DrawOutputMenu+0x5c8>)
 8003738:	f00d f81c 	bl	8010774 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800373c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003740:	9301      	str	r3, [sp, #4]
 8003742:	2302      	movs	r3, #2
 8003744:	9300      	str	r3, [sp, #0]
 8003746:	2300      	movs	r3, #0
 8003748:	22d2      	movs	r2, #210	; 0xd2
 800374a:	2105      	movs	r1, #5
 800374c:	481f      	ldr	r0, [pc, #124]	; (80037cc <FuncMenu_DrawOutputMenu+0x5cc>)
 800374e:	f00d f811 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003752:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003756:	9301      	str	r3, [sp, #4]
 8003758:	2302      	movs	r3, #2
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	2300      	movs	r3, #0
 800375e:	22d2      	movs	r2, #210	; 0xd2
 8003760:	2161      	movs	r1, #97	; 0x61
 8003762:	481a      	ldr	r0, [pc, #104]	; (80037cc <FuncMenu_DrawOutputMenu+0x5cc>)
 8003764:	f00d f806 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003768:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800376c:	9301      	str	r3, [sp, #4]
 800376e:	2302      	movs	r3, #2
 8003770:	9300      	str	r3, [sp, #0]
 8003772:	2300      	movs	r3, #0
 8003774:	22d2      	movs	r2, #210	; 0xd2
 8003776:	21af      	movs	r1, #175	; 0xaf
 8003778:	4814      	ldr	r0, [pc, #80]	; (80037cc <FuncMenu_DrawOutputMenu+0x5cc>)
 800377a:	f00c fffb 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800377e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003782:	9301      	str	r3, [sp, #4]
 8003784:	2302      	movs	r3, #2
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	2300      	movs	r3, #0
 800378a:	22d2      	movs	r2, #210	; 0xd2
 800378c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003790:	480e      	ldr	r0, [pc, #56]	; (80037cc <FuncMenu_DrawOutputMenu+0x5cc>)
 8003792:	f00c ffef 	bl	8010774 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003796:	2300      	movs	r3, #0
 8003798:	9301      	str	r3, [sp, #4]
 800379a:	2302      	movs	r3, #2
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037a2:	2232      	movs	r2, #50	; 0x32
 80037a4:	2196      	movs	r1, #150	; 0x96
 80037a6:	480a      	ldr	r0, [pc, #40]	; (80037d0 <FuncMenu_DrawOutputMenu+0x5d0>)
 80037a8:	f00c ffe4 	bl	8010774 <ILI9341_Draw_Text>
				break;
 80037ac:	e177      	b.n	8003a9e <FuncMenu_DrawOutputMenu+0x89e>
 80037ae:	bf00      	nop
 80037b0:	080159f0 	.word	0x080159f0
 80037b4:	080159f8 	.word	0x080159f8
 80037b8:	08015a04 	.word	0x08015a04
 80037bc:	08015a0c 	.word	0x08015a0c
 80037c0:	08015a18 	.word	0x08015a18
 80037c4:	08015a24 	.word	0x08015a24
 80037c8:	08015a2c 	.word	0x08015a2c
 80037cc:	080159c8 	.word	0x080159c8
 80037d0:	08015a34 	.word	0x08015a34
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037d4:	2300      	movs	r3, #0
 80037d6:	9301      	str	r3, [sp, #4]
 80037d8:	2302      	movs	r3, #2
 80037da:	9300      	str	r3, [sp, #0]
 80037dc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037e0:	2232      	movs	r2, #50	; 0x32
 80037e2:	210a      	movs	r1, #10
 80037e4:	48b0      	ldr	r0, [pc, #704]	; (8003aa8 <FuncMenu_DrawOutputMenu+0x8a8>)
 80037e6:	f00c ffc5 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80037ea:	2300      	movs	r3, #0
 80037ec:	9301      	str	r3, [sp, #4]
 80037ee:	2302      	movs	r3, #2
 80037f0:	9300      	str	r3, [sp, #0]
 80037f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80037f6:	2246      	movs	r2, #70	; 0x46
 80037f8:	210a      	movs	r1, #10
 80037fa:	48ac      	ldr	r0, [pc, #688]	; (8003aac <FuncMenu_DrawOutputMenu+0x8ac>)
 80037fc:	f00c ffba 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003800:	2300      	movs	r3, #0
 8003802:	9301      	str	r3, [sp, #4]
 8003804:	2302      	movs	r3, #2
 8003806:	9300      	str	r3, [sp, #0]
 8003808:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800380c:	225a      	movs	r2, #90	; 0x5a
 800380e:	210a      	movs	r1, #10
 8003810:	48a7      	ldr	r0, [pc, #668]	; (8003ab0 <FuncMenu_DrawOutputMenu+0x8b0>)
 8003812:	f00c ffaf 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003816:	2300      	movs	r3, #0
 8003818:	9301      	str	r3, [sp, #4]
 800381a:	2302      	movs	r3, #2
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003822:	226e      	movs	r2, #110	; 0x6e
 8003824:	210a      	movs	r1, #10
 8003826:	48a3      	ldr	r0, [pc, #652]	; (8003ab4 <FuncMenu_DrawOutputMenu+0x8b4>)
 8003828:	f00c ffa4 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800382c:	2300      	movs	r3, #0
 800382e:	9301      	str	r3, [sp, #4]
 8003830:	2302      	movs	r3, #2
 8003832:	9300      	str	r3, [sp, #0]
 8003834:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003838:	2282      	movs	r2, #130	; 0x82
 800383a:	210a      	movs	r1, #10
 800383c:	489e      	ldr	r0, [pc, #632]	; (8003ab8 <FuncMenu_DrawOutputMenu+0x8b8>)
 800383e:	f00c ff99 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003842:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003846:	9301      	str	r3, [sp, #4]
 8003848:	2302      	movs	r3, #2
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	2300      	movs	r3, #0
 800384e:	2296      	movs	r2, #150	; 0x96
 8003850:	210a      	movs	r1, #10
 8003852:	489a      	ldr	r0, [pc, #616]	; (8003abc <FuncMenu_DrawOutputMenu+0x8bc>)
 8003854:	f00c ff8e 	bl	8010774 <ILI9341_Draw_Text>

				if(pOutChan)
 8003858:	79fb      	ldrb	r3, [r7, #7]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d00a      	beq.n	8003874 <FuncMenu_DrawOutputMenu+0x674>
					ILI9341_Draw_Text("- PWM", 		10, 170, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800385e:	2300      	movs	r3, #0
 8003860:	9301      	str	r3, [sp, #4]
 8003862:	2302      	movs	r3, #2
 8003864:	9300      	str	r3, [sp, #0]
 8003866:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800386a:	22aa      	movs	r2, #170	; 0xaa
 800386c:	210a      	movs	r1, #10
 800386e:	4894      	ldr	r0, [pc, #592]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x8c0>)
 8003870:	f00c ff80 	bl	8010774 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003874:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003878:	9301      	str	r3, [sp, #4]
 800387a:	2302      	movs	r3, #2
 800387c:	9300      	str	r3, [sp, #0]
 800387e:	2300      	movs	r3, #0
 8003880:	22d2      	movs	r2, #210	; 0xd2
 8003882:	2105      	movs	r1, #5
 8003884:	488f      	ldr	r0, [pc, #572]	; (8003ac4 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003886:	f00c ff75 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800388a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800388e:	9301      	str	r3, [sp, #4]
 8003890:	2302      	movs	r3, #2
 8003892:	9300      	str	r3, [sp, #0]
 8003894:	2300      	movs	r3, #0
 8003896:	22d2      	movs	r2, #210	; 0xd2
 8003898:	2161      	movs	r1, #97	; 0x61
 800389a:	488a      	ldr	r0, [pc, #552]	; (8003ac4 <FuncMenu_DrawOutputMenu+0x8c4>)
 800389c:	f00c ff6a 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80038a0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80038a4:	9301      	str	r3, [sp, #4]
 80038a6:	2302      	movs	r3, #2
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	2300      	movs	r3, #0
 80038ac:	22d2      	movs	r2, #210	; 0xd2
 80038ae:	21af      	movs	r1, #175	; 0xaf
 80038b0:	4884      	ldr	r0, [pc, #528]	; (8003ac4 <FuncMenu_DrawOutputMenu+0x8c4>)
 80038b2:	f00c ff5f 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 80038b6:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 80038ba:	9301      	str	r3, [sp, #4]
 80038bc:	2302      	movs	r3, #2
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	2300      	movs	r3, #0
 80038c2:	22d2      	movs	r2, #210	; 0xd2
 80038c4:	f44f 7182 	mov.w	r1, #260	; 0x104
 80038c8:	487e      	ldr	r0, [pc, #504]	; (8003ac4 <FuncMenu_DrawOutputMenu+0x8c4>)
 80038ca:	f00c ff53 	bl	8010774 <ILI9341_Draw_Text>

				ILI9341_Draw_Text("               ", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038ce:	2300      	movs	r3, #0
 80038d0:	9301      	str	r3, [sp, #4]
 80038d2:	2302      	movs	r3, #2
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038da:	2232      	movs	r2, #50	; 0x32
 80038dc:	2196      	movs	r1, #150	; 0x96
 80038de:	487a      	ldr	r0, [pc, #488]	; (8003ac8 <FuncMenu_DrawOutputMenu+0x8c8>)
 80038e0:	f00c ff48 	bl	8010774 <ILI9341_Draw_Text>
				break;
 80038e4:	e0db      	b.n	8003a9e <FuncMenu_DrawOutputMenu+0x89e>
			case PWM_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038e6:	2300      	movs	r3, #0
 80038e8:	9301      	str	r3, [sp, #4]
 80038ea:	2302      	movs	r3, #2
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80038f2:	2232      	movs	r2, #50	; 0x32
 80038f4:	210a      	movs	r1, #10
 80038f6:	486c      	ldr	r0, [pc, #432]	; (8003aa8 <FuncMenu_DrawOutputMenu+0x8a8>)
 80038f8:	f00c ff3c 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80038fc:	2300      	movs	r3, #0
 80038fe:	9301      	str	r3, [sp, #4]
 8003900:	2302      	movs	r3, #2
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003908:	2246      	movs	r2, #70	; 0x46
 800390a:	210a      	movs	r1, #10
 800390c:	4867      	ldr	r0, [pc, #412]	; (8003aac <FuncMenu_DrawOutputMenu+0x8ac>)
 800390e:	f00c ff31 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003912:	2300      	movs	r3, #0
 8003914:	9301      	str	r3, [sp, #4]
 8003916:	2302      	movs	r3, #2
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800391e:	225a      	movs	r2, #90	; 0x5a
 8003920:	210a      	movs	r1, #10
 8003922:	4863      	ldr	r0, [pc, #396]	; (8003ab0 <FuncMenu_DrawOutputMenu+0x8b0>)
 8003924:	f00c ff26 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003928:	2300      	movs	r3, #0
 800392a:	9301      	str	r3, [sp, #4]
 800392c:	2302      	movs	r3, #2
 800392e:	9300      	str	r3, [sp, #0]
 8003930:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003934:	226e      	movs	r2, #110	; 0x6e
 8003936:	210a      	movs	r1, #10
 8003938:	485e      	ldr	r0, [pc, #376]	; (8003ab4 <FuncMenu_DrawOutputMenu+0x8b4>)
 800393a:	f00c ff1b 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800393e:	2300      	movs	r3, #0
 8003940:	9301      	str	r3, [sp, #4]
 8003942:	2302      	movs	r3, #2
 8003944:	9300      	str	r3, [sp, #0]
 8003946:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800394a:	2282      	movs	r2, #130	; 0x82
 800394c:	210a      	movs	r1, #10
 800394e:	485a      	ldr	r0, [pc, #360]	; (8003ab8 <FuncMenu_DrawOutputMenu+0x8b8>)
 8003950:	f00c ff10 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003954:	2300      	movs	r3, #0
 8003956:	9301      	str	r3, [sp, #4]
 8003958:	2302      	movs	r3, #2
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003960:	2296      	movs	r2, #150	; 0x96
 8003962:	210a      	movs	r1, #10
 8003964:	4855      	ldr	r0, [pc, #340]	; (8003abc <FuncMenu_DrawOutputMenu+0x8bc>)
 8003966:	f00c ff05 	bl	8010774 <ILI9341_Draw_Text>

				if(pOutChan)
 800396a:	79fb      	ldrb	r3, [r7, #7]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d00a      	beq.n	8003986 <FuncMenu_DrawOutputMenu+0x786>
					ILI9341_Draw_Text("- PWM", 		10, 170, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003970:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003974:	9301      	str	r3, [sp, #4]
 8003976:	2302      	movs	r3, #2
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	2300      	movs	r3, #0
 800397c:	22aa      	movs	r2, #170	; 0xaa
 800397e:	210a      	movs	r1, #10
 8003980:	484f      	ldr	r0, [pc, #316]	; (8003ac0 <FuncMenu_DrawOutputMenu+0x8c0>)
 8003982:	f00c fef7 	bl	8010774 <ILI9341_Draw_Text>

				// coloured menu btn labels
				ILI9341_Draw_Text("    ", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003986:	f240 23fd 	movw	r3, #765	; 0x2fd
 800398a:	9301      	str	r3, [sp, #4]
 800398c:	2302      	movs	r3, #2
 800398e:	9300      	str	r3, [sp, #0]
 8003990:	2300      	movs	r3, #0
 8003992:	22d2      	movs	r2, #210	; 0xd2
 8003994:	2105      	movs	r1, #5
 8003996:	484b      	ldr	r0, [pc, #300]	; (8003ac4 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003998:	f00c feec 	bl	8010774 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("    ", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800399c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80039a0:	9301      	str	r3, [sp, #4]
 80039a2:	2302      	movs	r3, #2
 80039a4:	9300      	str	r3, [sp, #0]
 80039a6:	2300      	movs	r3, #0
 80039a8:	22d2      	movs	r2, #210	; 0xd2
 80039aa:	2161      	movs	r1, #97	; 0x61
 80039ac:	4845      	ldr	r0, [pc, #276]	; (8003ac4 <FuncMenu_DrawOutputMenu+0x8c4>)
 80039ae:	f00c fee1 	bl	8010774 <ILI9341_Draw_Text>

				if(pOutChan)
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d05a      	beq.n	8003a6e <FuncMenu_DrawOutputMenu+0x86e>
				{
					ILI9341_Draw_Text("DUTY", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80039b8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80039bc:	9301      	str	r3, [sp, #4]
 80039be:	2302      	movs	r3, #2
 80039c0:	9300      	str	r3, [sp, #0]
 80039c2:	2300      	movs	r3, #0
 80039c4:	22d2      	movs	r2, #210	; 0xd2
 80039c6:	21af      	movs	r1, #175	; 0xaf
 80039c8:	4840      	ldr	r0, [pc, #256]	; (8003acc <FuncMenu_DrawOutputMenu+0x8cc>)
 80039ca:	f00c fed3 	bl	8010774 <ILI9341_Draw_Text>
					char duty[10] = "";
 80039ce:	2300      	movs	r3, #0
 80039d0:	60bb      	str	r3, [r7, #8]
 80039d2:	f107 030c 	add.w	r3, r7, #12
 80039d6:	2200      	movs	r2, #0
 80039d8:	601a      	str	r2, [r3, #0]
 80039da:	809a      	strh	r2, [r3, #4]
					snprintf(duty, sizeof(duty), "%0.2f%%", ((float)PWM_AUX_OUT_TIM->CCR1 / (float)PWM_AUX_OUT_TIM->ARR) * 100);
 80039dc:	4b3c      	ldr	r3, [pc, #240]	; (8003ad0 <FuncMenu_DrawOutputMenu+0x8d0>)
 80039de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e0:	ee07 3a90 	vmov	s15, r3
 80039e4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039e8:	4b39      	ldr	r3, [pc, #228]	; (8003ad0 <FuncMenu_DrawOutputMenu+0x8d0>)
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	ee07 3a90 	vmov	s15, r3
 80039f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80039f8:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8003ad4 <FuncMenu_DrawOutputMenu+0x8d4>
 80039fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003a00:	ee17 0a90 	vmov	r0, s15
 8003a04:	f7fc fdc8 	bl	8000598 <__aeabi_f2d>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	460c      	mov	r4, r1
 8003a0c:	f107 0008 	add.w	r0, r7, #8
 8003a10:	e9cd 3400 	strd	r3, r4, [sp]
 8003a14:	4a30      	ldr	r2, [pc, #192]	; (8003ad8 <FuncMenu_DrawOutputMenu+0x8d8>)
 8003a16:	210a      	movs	r1, #10
 8003a18:	f00e fa68 	bl	8011eec <sniprintf>
					ILI9341_Draw_Text(duty, 	220, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003a1c:	f107 0008 	add.w	r0, r7, #8
 8003a20:	2300      	movs	r3, #0
 8003a22:	9301      	str	r3, [sp, #4]
 8003a24:	2302      	movs	r3, #2
 8003a26:	9300      	str	r3, [sp, #0]
 8003a28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a2c:	2232      	movs	r2, #50	; 0x32
 8003a2e:	21dc      	movs	r1, #220	; 0xdc
 8003a30:	f00c fea0 	bl	8010774 <ILI9341_Draw_Text>
					if(SM_IsFuncPwmDutyMode())
 8003a34:	f003 f960 	bl	8006cf8 <SM_IsFuncPwmDutyMode>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00b      	beq.n	8003a56 <FuncMenu_DrawOutputMenu+0x856>
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003a3e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003a42:	9301      	str	r3, [sp, #4]
 8003a44:	2302      	movs	r3, #2
 8003a46:	9300      	str	r3, [sp, #0]
 8003a48:	2300      	movs	r3, #0
 8003a4a:	2232      	movs	r2, #50	; 0x32
 8003a4c:	2196      	movs	r1, #150	; 0x96
 8003a4e:	4823      	ldr	r0, [pc, #140]	; (8003adc <FuncMenu_DrawOutputMenu+0x8dc>)
 8003a50:	f00c fe90 	bl	8010774 <ILI9341_Draw_Text>
 8003a54:	e016      	b.n	8003a84 <FuncMenu_DrawOutputMenu+0x884>

					}
					else
					{
						ILI9341_Draw_Text("DUTY:", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003a56:	2300      	movs	r3, #0
 8003a58:	9301      	str	r3, [sp, #4]
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003a62:	2232      	movs	r2, #50	; 0x32
 8003a64:	2196      	movs	r1, #150	; 0x96
 8003a66:	481d      	ldr	r0, [pc, #116]	; (8003adc <FuncMenu_DrawOutputMenu+0x8dc>)
 8003a68:	f00c fe84 	bl	8010774 <ILI9341_Draw_Text>
 8003a6c:	e00a      	b.n	8003a84 <FuncMenu_DrawOutputMenu+0x884>
					}
				}
				else
				{
					ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003a6e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003a72:	9301      	str	r3, [sp, #4]
 8003a74:	2302      	movs	r3, #2
 8003a76:	9300      	str	r3, [sp, #0]
 8003a78:	2300      	movs	r3, #0
 8003a7a:	22d2      	movs	r2, #210	; 0xd2
 8003a7c:	21af      	movs	r1, #175	; 0xaf
 8003a7e:	4811      	ldr	r0, [pc, #68]	; (8003ac4 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003a80:	f00c fe78 	bl	8010774 <ILI9341_Draw_Text>
				}

				ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003a84:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003a88:	9301      	str	r3, [sp, #4]
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	9300      	str	r3, [sp, #0]
 8003a8e:	2300      	movs	r3, #0
 8003a90:	22d2      	movs	r2, #210	; 0xd2
 8003a92:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003a96:	480b      	ldr	r0, [pc, #44]	; (8003ac4 <FuncMenu_DrawOutputMenu+0x8c4>)
 8003a98:	f00c fe6c 	bl	8010774 <ILI9341_Draw_Text>

				break;
 8003a9c:	bf00      	nop
				//
		}
	}
}
 8003a9e:	bf00      	nop
 8003aa0:	371c      	adds	r7, #28
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd90      	pop	{r4, r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	080159f0 	.word	0x080159f0
 8003aac:	080159f8 	.word	0x080159f8
 8003ab0:	08015a04 	.word	0x08015a04
 8003ab4:	08015a0c 	.word	0x08015a0c
 8003ab8:	08015a18 	.word	0x08015a18
 8003abc:	08015a24 	.word	0x08015a24
 8003ac0:	08015a2c 	.word	0x08015a2c
 8003ac4:	080159c8 	.word	0x080159c8
 8003ac8:	08015a34 	.word	0x08015a34
 8003acc:	08015a44 	.word	0x08015a44
 8003ad0:	40000400 	.word	0x40000400
 8003ad4:	42c80000 	.word	0x42c80000
 8003ad8:	08015a4c 	.word	0x08015a4c
 8003adc:	08015a54 	.word	0x08015a54

08003ae0 <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003aea:	79fb      	ldrb	r3, [r7, #7]
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d007      	beq.n	8003b00 <GainMenu_DrawMenu+0x20>
 8003af0:	2b03      	cmp	r3, #3
 8003af2:	d008      	beq.n	8003b06 <GainMenu_DrawMenu+0x26>
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d000      	beq.n	8003afa <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_Aux_MENU:
			GainMenu_DrawAuxMenu();
			break;

		default:
			break;
 8003af8:	e008      	b.n	8003b0c <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 8003afa:	f000 f80b 	bl	8003b14 <GainMenu_DrawMainMenu>
			break;
 8003afe:	e005      	b.n	8003b0c <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 8003b00:	f000 f868 	bl	8003bd4 <GainMenu_DrawSignalMenu>
			break;
 8003b04:	e002      	b.n	8003b0c <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawAuxMenu();
 8003b06:	f000 f8af 	bl	8003c68 <GainMenu_DrawAuxMenu>
			break;
 8003b0a:	bf00      	nop

	}
}
 8003b0c:	bf00      	nop
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003b1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b1e:	9301      	str	r3, [sp, #4]
 8003b20:	2302      	movs	r3, #2
 8003b22:	9300      	str	r3, [sp, #0]
 8003b24:	2300      	movs	r3, #0
 8003b26:	220a      	movs	r2, #10
 8003b28:	210a      	movs	r1, #10
 8003b2a:	4826      	ldr	r0, [pc, #152]	; (8003bc4 <GainMenu_DrawMainMenu+0xb0>)
 8003b2c:	f00c fe22 	bl	8010774 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003b30:	f7fd f9e2 	bl	8000ef8 <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 	 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003b34:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003b38:	9301      	str	r3, [sp, #4]
 8003b3a:	2302      	movs	r3, #2
 8003b3c:	9300      	str	r3, [sp, #0]
 8003b3e:	2300      	movs	r3, #0
 8003b40:	22d2      	movs	r2, #210	; 0xd2
 8003b42:	2105      	movs	r1, #5
 8003b44:	4820      	ldr	r0, [pc, #128]	; (8003bc8 <GainMenu_DrawMainMenu+0xb4>)
 8003b46:	f00c fe15 	bl	8010774 <ILI9341_Draw_Text>

	eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8003b4a:	2001      	movs	r0, #1
 8003b4c:	f002 fdd2 	bl	80066f4 <SM_GetOutputChannel>
 8003b50:	4603      	mov	r3, r0
 8003b52:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	71fb      	strb	r3, [r7, #7]
	if(aux_output_func == PWM_FUNC_MODE)
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	2b06      	cmp	r3, #6
 8003b5e:	d10b      	bne.n	8003b78 <GainMenu_DrawMainMenu+0x64>
	{
		ILI9341_Draw_Text("    ",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003b60:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003b64:	9301      	str	r3, [sp, #4]
 8003b66:	2302      	movs	r3, #2
 8003b68:	9300      	str	r3, [sp, #0]
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	22d2      	movs	r2, #210	; 0xd2
 8003b6e:	2164      	movs	r1, #100	; 0x64
 8003b70:	4816      	ldr	r0, [pc, #88]	; (8003bcc <GainMenu_DrawMainMenu+0xb8>)
 8003b72:	f00c fdff 	bl	8010774 <ILI9341_Draw_Text>
 8003b76:	e00a      	b.n	8003b8e <GainMenu_DrawMainMenu+0x7a>
	}
	else
	{
		ILI9341_Draw_Text("AUX",	100,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003b78:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003b7c:	9301      	str	r3, [sp, #4]
 8003b7e:	2302      	movs	r3, #2
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	2300      	movs	r3, #0
 8003b84:	22d2      	movs	r2, #210	; 0xd2
 8003b86:	2164      	movs	r1, #100	; 0x64
 8003b88:	4811      	ldr	r0, [pc, #68]	; (8003bd0 <GainMenu_DrawMainMenu+0xbc>)
 8003b8a:	f00c fdf3 	bl	8010774 <ILI9341_Draw_Text>
	}

	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003b8e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003b92:	9301      	str	r3, [sp, #4]
 8003b94:	2302      	movs	r3, #2
 8003b96:	9300      	str	r3, [sp, #0]
 8003b98:	2300      	movs	r3, #0
 8003b9a:	22d2      	movs	r2, #210	; 0xd2
 8003b9c:	21af      	movs	r1, #175	; 0xaf
 8003b9e:	480b      	ldr	r0, [pc, #44]	; (8003bcc <GainMenu_DrawMainMenu+0xb8>)
 8003ba0:	f00c fde8 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003ba4:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003ba8:	9301      	str	r3, [sp, #4]
 8003baa:	2302      	movs	r3, #2
 8003bac:	9300      	str	r3, [sp, #0]
 8003bae:	2300      	movs	r3, #0
 8003bb0:	22d2      	movs	r2, #210	; 0xd2
 8003bb2:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003bb6:	4805      	ldr	r0, [pc, #20]	; (8003bcc <GainMenu_DrawMainMenu+0xb8>)
 8003bb8:	f00c fddc 	bl	8010774 <ILI9341_Draw_Text>
}
 8003bbc:	bf00      	nop
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	08015a5c 	.word	0x08015a5c
 8003bc8:	08015a68 	.word	0x08015a68
 8003bcc:	08015a70 	.word	0x08015a70
 8003bd0:	08015a78 	.word	0x08015a78

08003bd4 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b082      	sub	sp, #8
 8003bd8:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003bda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bde:	9301      	str	r3, [sp, #4]
 8003be0:	2302      	movs	r3, #2
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	2300      	movs	r3, #0
 8003be6:	220a      	movs	r2, #10
 8003be8:	210a      	movs	r1, #10
 8003bea:	481a      	ldr	r0, [pc, #104]	; (8003c54 <GainMenu_DrawSignalMenu+0x80>)
 8003bec:	f00c fdc2 	bl	8010774 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003bf0:	f7fd f982 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("1.8V", 15,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003bf4:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003bf8:	9301      	str	r3, [sp, #4]
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	9300      	str	r3, [sp, #0]
 8003bfe:	2300      	movs	r3, #0
 8003c00:	22d2      	movs	r2, #210	; 0xd2
 8003c02:	210f      	movs	r1, #15
 8003c04:	4814      	ldr	r0, [pc, #80]	; (8003c58 <GainMenu_DrawSignalMenu+0x84>)
 8003c06:	f00c fdb5 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("3.3V", 97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003c0a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003c0e:	9301      	str	r3, [sp, #4]
 8003c10:	2302      	movs	r3, #2
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	2300      	movs	r3, #0
 8003c16:	22d2      	movs	r2, #210	; 0xd2
 8003c18:	2161      	movs	r1, #97	; 0x61
 8003c1a:	4810      	ldr	r0, [pc, #64]	; (8003c5c <GainMenu_DrawSignalMenu+0x88>)
 8003c1c:	f00c fdaa 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("5V",  190, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003c20:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003c24:	9301      	str	r3, [sp, #4]
 8003c26:	2302      	movs	r3, #2
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	22d2      	movs	r2, #210	; 0xd2
 8003c2e:	21be      	movs	r1, #190	; 0xbe
 8003c30:	480b      	ldr	r0, [pc, #44]	; (8003c60 <GainMenu_DrawSignalMenu+0x8c>)
 8003c32:	f00c fd9f 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("9V", 265, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003c36:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003c3a:	9301      	str	r3, [sp, #4]
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	9300      	str	r3, [sp, #0]
 8003c40:	2300      	movs	r3, #0
 8003c42:	22d2      	movs	r2, #210	; 0xd2
 8003c44:	f240 1109 	movw	r1, #265	; 0x109
 8003c48:	4806      	ldr	r0, [pc, #24]	; (8003c64 <GainMenu_DrawSignalMenu+0x90>)
 8003c4a:	f00c fd93 	bl	8010774 <ILI9341_Draw_Text>
}
 8003c4e:	bf00      	nop
 8003c50:	46bd      	mov	sp, r7
 8003c52:	bd80      	pop	{r7, pc}
 8003c54:	08015a7c 	.word	0x08015a7c
 8003c58:	08015a8c 	.word	0x08015a8c
 8003c5c:	08015a94 	.word	0x08015a94
 8003c60:	08015a9c 	.word	0x08015a9c
 8003c64:	08015aa0 	.word	0x08015aa0

08003c68 <GainMenu_DrawAuxMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawAuxMenu()
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->Aux", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003c6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c72:	9301      	str	r3, [sp, #4]
 8003c74:	2302      	movs	r3, #2
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	2300      	movs	r3, #0
 8003c7a:	220a      	movs	r2, #10
 8003c7c:	210a      	movs	r1, #10
 8003c7e:	4804      	ldr	r0, [pc, #16]	; (8003c90 <GainMenu_DrawAuxMenu+0x28>)
 8003c80:	f00c fd78 	bl	8010774 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003c84:	f7fd f938 	bl	8000ef8 <DM_DisplayFormattedOutput>
}
 8003c88:	bf00      	nop
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	08015aa4 	.word	0x08015aa4

08003c94 <ToplevelMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eToplevelMenu_Status pMenu)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b082      	sub	sp, #8
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8003c9e:	79fb      	ldrb	r3, [r7, #7]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d007      	beq.n	8003cb4 <ToplevelMenu_DrawMenu+0x20>
 8003ca4:	2b03      	cmp	r3, #3
 8003ca6:	d008      	beq.n	8003cba <ToplevelMenu_DrawMenu+0x26>
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d000      	beq.n	8003cae <ToplevelMenu_DrawMenu+0x1a>
		case ENABLE_TOPLEVEL_INPUT_MENU:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 8003cac:	e008      	b.n	8003cc0 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 8003cae:	f000 f80b 	bl	8003cc8 <ToplevelMenu_DrawMainMenu>
			break;
 8003cb2:	e005      	b.n	8003cc0 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 8003cb4:	f000 f844 	bl	8003d40 <ToplevelMenu_DrawOutputMenu>
			break;
 8003cb8:	e002      	b.n	8003cc0 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 8003cba:	f000 f88b 	bl	8003dd4 <ToplevelMenu_DrawInputMenu>
			break;
 8003cbe:	bf00      	nop

	}
}
 8003cc0:	bf00      	nop
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}

08003cc8 <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af02      	add	r7, sp, #8
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 8003cce:	f7fd f913 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003cd2:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003cd6:	9301      	str	r3, [sp, #4]
 8003cd8:	2302      	movs	r3, #2
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	2300      	movs	r3, #0
 8003cde:	22d2      	movs	r2, #210	; 0xd2
 8003ce0:	2106      	movs	r1, #6
 8003ce2:	4814      	ldr	r0, [pc, #80]	; (8003d34 <ToplevelMenu_DrawMainMenu+0x6c>)
 8003ce4:	f00c fd46 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 93, 210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003ce8:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003cec:	9301      	str	r3, [sp, #4]
 8003cee:	2302      	movs	r3, #2
 8003cf0:	9300      	str	r3, [sp, #0]
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	22d2      	movs	r2, #210	; 0xd2
 8003cf6:	215d      	movs	r1, #93	; 0x5d
 8003cf8:	480f      	ldr	r0, [pc, #60]	; (8003d38 <ToplevelMenu_DrawMainMenu+0x70>)
 8003cfa:	f00c fd3b 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003cfe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003d02:	9301      	str	r3, [sp, #4]
 8003d04:	2302      	movs	r3, #2
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	2300      	movs	r3, #0
 8003d0a:	22d2      	movs	r2, #210	; 0xd2
 8003d0c:	21af      	movs	r1, #175	; 0xaf
 8003d0e:	480b      	ldr	r0, [pc, #44]	; (8003d3c <ToplevelMenu_DrawMainMenu+0x74>)
 8003d10:	f00c fd30 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003d14:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003d18:	9301      	str	r3, [sp, #4]
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	9300      	str	r3, [sp, #0]
 8003d1e:	2300      	movs	r3, #0
 8003d20:	22d2      	movs	r2, #210	; 0xd2
 8003d22:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003d26:	4805      	ldr	r0, [pc, #20]	; (8003d3c <ToplevelMenu_DrawMainMenu+0x74>)
 8003d28:	f00c fd24 	bl	8010774 <ILI9341_Draw_Text>


}
 8003d2c:	bf00      	nop
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	bd80      	pop	{r7, pc}
 8003d32:	bf00      	nop
 8003d34:	08015ab4 	.word	0x08015ab4
 8003d38:	08015abc 	.word	0x08015abc
 8003d3c:	08015ac4 	.word	0x08015ac4

08003d40 <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003d46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d4a:	9301      	str	r3, [sp, #4]
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	2300      	movs	r3, #0
 8003d52:	220a      	movs	r2, #10
 8003d54:	210a      	movs	r1, #10
 8003d56:	481a      	ldr	r0, [pc, #104]	; (8003dc0 <ToplevelMenu_DrawOutputMenu+0x80>)
 8003d58:	f00c fd0c 	bl	8010774 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003d5c:	f7fd f8cc 	bl	8000ef8 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 15,  210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003d60:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003d64:	9301      	str	r3, [sp, #4]
 8003d66:	2302      	movs	r3, #2
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	22d2      	movs	r2, #210	; 0xd2
 8003d6e:	210f      	movs	r1, #15
 8003d70:	4814      	ldr	r0, [pc, #80]	; (8003dc4 <ToplevelMenu_DrawOutputMenu+0x84>)
 8003d72:	f00c fcff 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 98,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003d76:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003d7a:	9301      	str	r3, [sp, #4]
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	2300      	movs	r3, #0
 8003d82:	22d2      	movs	r2, #210	; 0xd2
 8003d84:	2162      	movs	r1, #98	; 0x62
 8003d86:	4810      	ldr	r0, [pc, #64]	; (8003dc8 <ToplevelMenu_DrawOutputMenu+0x88>)
 8003d88:	f00c fcf4 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003d8c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003d90:	9301      	str	r3, [sp, #4]
 8003d92:	2302      	movs	r3, #2
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	2300      	movs	r3, #0
 8003d98:	22d2      	movs	r2, #210	; 0xd2
 8003d9a:	21b0      	movs	r1, #176	; 0xb0
 8003d9c:	480b      	ldr	r0, [pc, #44]	; (8003dcc <ToplevelMenu_DrawOutputMenu+0x8c>)
 8003d9e:	f00c fce9 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET", 245, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8003da2:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003da6:	9301      	str	r3, [sp, #4]
 8003da8:	2302      	movs	r3, #2
 8003daa:	9300      	str	r3, [sp, #0]
 8003dac:	2300      	movs	r3, #0
 8003dae:	22d2      	movs	r2, #210	; 0xd2
 8003db0:	21f5      	movs	r1, #245	; 0xf5
 8003db2:	4807      	ldr	r0, [pc, #28]	; (8003dd0 <ToplevelMenu_DrawOutputMenu+0x90>)
 8003db4:	f00c fcde 	bl	8010774 <ILI9341_Draw_Text>
}
 8003db8:	bf00      	nop
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}
 8003dbe:	bf00      	nop
 8003dc0:	08015acc 	.word	0x08015acc
 8003dc4:	08015ad4 	.word	0x08015ad4
 8003dc8:	08015adc 	.word	0x08015adc
 8003dcc:	08015ae4 	.word	0x08015ae4
 8003dd0:	08015aec 	.word	0x08015aec

08003dd4 <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b088      	sub	sp, #32
 8003dd8:	af02      	add	r7, sp, #8

	DM_DisplayInputTriggerStatus();
 8003dda:	f7fd fb4f 	bl	800147c <DM_DisplayInputTriggerStatus>

	ILI9341_Draw_Text("IN->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003dde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003de2:	9301      	str	r3, [sp, #4]
 8003de4:	2302      	movs	r3, #2
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	2300      	movs	r3, #0
 8003dea:	220a      	movs	r2, #10
 8003dec:	210a      	movs	r1, #10
 8003dee:	4892      	ldr	r0, [pc, #584]	; (8004038 <ToplevelMenu_DrawInputMenu+0x264>)
 8003df0:	f00c fcc0 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("TRIGGER:", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003df4:	2300      	movs	r3, #0
 8003df6:	9301      	str	r3, [sp, #4]
 8003df8:	2302      	movs	r3, #2
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003e00:	2232      	movs	r2, #50	; 0x32
 8003e02:	210a      	movs	r1, #10
 8003e04:	488d      	ldr	r0, [pc, #564]	; (800403c <ToplevelMenu_DrawInputMenu+0x268>)
 8003e06:	f00c fcb5 	bl	8010774 <ILI9341_Draw_Text>
	if(IT_GetTriggerStatus())
 8003e0a:	f002 fac5 	bl	8006398 <IT_GetTriggerStatus>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d016      	beq.n	8003e42 <ToplevelMenu_DrawInputMenu+0x6e>
	{
		ILI9341_Draw_Text("ON", 	150, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003e14:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003e18:	9301      	str	r3, [sp, #4]
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	9300      	str	r3, [sp, #0]
 8003e1e:	2300      	movs	r3, #0
 8003e20:	2232      	movs	r2, #50	; 0x32
 8003e22:	2196      	movs	r1, #150	; 0x96
 8003e24:	4886      	ldr	r0, [pc, #536]	; (8004040 <ToplevelMenu_DrawInputMenu+0x26c>)
 8003e26:	f00c fca5 	bl	8010774 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	9301      	str	r3, [sp, #4]
 8003e2e:	2302      	movs	r3, #2
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003e36:	2232      	movs	r2, #50	; 0x32
 8003e38:	21c8      	movs	r1, #200	; 0xc8
 8003e3a:	4882      	ldr	r0, [pc, #520]	; (8004044 <ToplevelMenu_DrawInputMenu+0x270>)
 8003e3c:	f00c fc9a 	bl	8010774 <ILI9341_Draw_Text>
 8003e40:	e015      	b.n	8003e6e <ToplevelMenu_DrawInputMenu+0x9a>
	}
	else
	{
		ILI9341_Draw_Text("ON", 	150, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003e42:	2300      	movs	r3, #0
 8003e44:	9301      	str	r3, [sp, #4]
 8003e46:	2302      	movs	r3, #2
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003e4e:	2232      	movs	r2, #50	; 0x32
 8003e50:	2196      	movs	r1, #150	; 0x96
 8003e52:	487b      	ldr	r0, [pc, #492]	; (8004040 <ToplevelMenu_DrawInputMenu+0x26c>)
 8003e54:	f00c fc8e 	bl	8010774 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("OFF", 	200, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003e58:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003e5c:	9301      	str	r3, [sp, #4]
 8003e5e:	2302      	movs	r3, #2
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	2300      	movs	r3, #0
 8003e64:	2232      	movs	r2, #50	; 0x32
 8003e66:	21c8      	movs	r1, #200	; 0xc8
 8003e68:	4876      	ldr	r0, [pc, #472]	; (8004044 <ToplevelMenu_DrawInputMenu+0x270>)
 8003e6a:	f00c fc83 	bl	8010774 <ILI9341_Draw_Text>
	}


	ILI9341_Draw_Text("MODE:", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003e6e:	2300      	movs	r3, #0
 8003e70:	9301      	str	r3, [sp, #4]
 8003e72:	2302      	movs	r3, #2
 8003e74:	9300      	str	r3, [sp, #0]
 8003e76:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003e7a:	2246      	movs	r2, #70	; 0x46
 8003e7c:	210a      	movs	r1, #10
 8003e7e:	4872      	ldr	r0, [pc, #456]	; (8004048 <ToplevelMenu_DrawInputMenu+0x274>)
 8003e80:	f00c fc78 	bl	8010774 <ILI9341_Draw_Text>
	if(IT_GetActiveTriggerMode() == INPUT_TRIGGER_TIM)
 8003e84:	f002 fa6c 	bl	8006360 <IT_GetActiveTriggerMode>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d12d      	bne.n	8003eea <ToplevelMenu_DrawInputMenu+0x116>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003e8e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003e92:	9301      	str	r3, [sp, #4]
 8003e94:	2302      	movs	r3, #2
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	2300      	movs	r3, #0
 8003e9a:	2246      	movs	r2, #70	; 0x46
 8003e9c:	2196      	movs	r1, #150	; 0x96
 8003e9e:	486b      	ldr	r0, [pc, #428]	; (800404c <ToplevelMenu_DrawInputMenu+0x278>)
 8003ea0:	f00c fc68 	bl	8010774 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	9301      	str	r3, [sp, #4]
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	9300      	str	r3, [sp, #0]
 8003eac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003eb0:	2246      	movs	r2, #70	; 0x46
 8003eb2:	21c8      	movs	r1, #200	; 0xc8
 8003eb4:	4866      	ldr	r0, [pc, #408]	; (8004050 <ToplevelMenu_DrawInputMenu+0x27c>)
 8003eb6:	f00c fc5d 	bl	8010774 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003eba:	2300      	movs	r3, #0
 8003ebc:	9301      	str	r3, [sp, #4]
 8003ebe:	2302      	movs	r3, #2
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003ec6:	2246      	movs	r2, #70	; 0x46
 8003ec8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003ecc:	4861      	ldr	r0, [pc, #388]	; (8004054 <ToplevelMenu_DrawInputMenu+0x280>)
 8003ece:	f00c fc51 	bl	8010774 <ILI9341_Draw_Text>

		ILI9341_Draw_Text("     ", 150, 100,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	9301      	str	r3, [sp, #4]
 8003ed6:	2302      	movs	r3, #2
 8003ed8:	9300      	str	r3, [sp, #0]
 8003eda:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003ede:	2264      	movs	r2, #100	; 0x64
 8003ee0:	2196      	movs	r1, #150	; 0x96
 8003ee2:	485d      	ldr	r0, [pc, #372]	; (8004058 <ToplevelMenu_DrawInputMenu+0x284>)
 8003ee4:	f00c fc46 	bl	8010774 <ILI9341_Draw_Text>
 8003ee8:	e076      	b.n	8003fd8 <ToplevelMenu_DrawInputMenu+0x204>
	}
	else if(IT_GetActiveTriggerMode() == INPUT_TRIGGER_COMP)
 8003eea:	f002 fa39 	bl	8006360 <IT_GetActiveTriggerMode>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b01      	cmp	r3, #1
 8003ef2:	d13f      	bne.n	8003f74 <ToplevelMenu_DrawInputMenu+0x1a0>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	9301      	str	r3, [sp, #4]
 8003ef8:	2302      	movs	r3, #2
 8003efa:	9300      	str	r3, [sp, #0]
 8003efc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003f00:	2246      	movs	r2, #70	; 0x46
 8003f02:	2196      	movs	r1, #150	; 0x96
 8003f04:	4851      	ldr	r0, [pc, #324]	; (800404c <ToplevelMenu_DrawInputMenu+0x278>)
 8003f06:	f00c fc35 	bl	8010774 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003f0a:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003f0e:	9301      	str	r3, [sp, #4]
 8003f10:	2302      	movs	r3, #2
 8003f12:	9300      	str	r3, [sp, #0]
 8003f14:	2300      	movs	r3, #0
 8003f16:	2246      	movs	r2, #70	; 0x46
 8003f18:	21c8      	movs	r1, #200	; 0xc8
 8003f1a:	484d      	ldr	r0, [pc, #308]	; (8004050 <ToplevelMenu_DrawInputMenu+0x27c>)
 8003f1c:	f00c fc2a 	bl	8010774 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003f20:	2300      	movs	r3, #0
 8003f22:	9301      	str	r3, [sp, #4]
 8003f24:	2302      	movs	r3, #2
 8003f26:	9300      	str	r3, [sp, #0]
 8003f28:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003f2c:	2246      	movs	r2, #70	; 0x46
 8003f2e:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003f32:	4848      	ldr	r0, [pc, #288]	; (8004054 <ToplevelMenu_DrawInputMenu+0x280>)
 8003f34:	f00c fc1e 	bl	8010774 <ILI9341_Draw_Text>

		char comp_text[20] = "";
 8003f38:	2300      	movs	r3, #0
 8003f3a:	607b      	str	r3, [r7, #4]
 8003f3c:	f107 0308 	add.w	r3, r7, #8
 8003f40:	2200      	movs	r2, #0
 8003f42:	601a      	str	r2, [r3, #0]
 8003f44:	605a      	str	r2, [r3, #4]
 8003f46:	609a      	str	r2, [r3, #8]
 8003f48:	60da      	str	r2, [r3, #12]
		snprintf(comp_text, sizeof(comp_text), "%lu V", HAL_COMP_GetOutputLevel(&hcomp1));
 8003f4a:	4844      	ldr	r0, [pc, #272]	; (800405c <ToplevelMenu_DrawInputMenu+0x288>)
 8003f4c:	f006 ff78 	bl	800ae40 <HAL_COMP_GetOutputLevel>
 8003f50:	4603      	mov	r3, r0
 8003f52:	1d38      	adds	r0, r7, #4
 8003f54:	4a42      	ldr	r2, [pc, #264]	; (8004060 <ToplevelMenu_DrawInputMenu+0x28c>)
 8003f56:	2114      	movs	r1, #20
 8003f58:	f00d ffc8 	bl	8011eec <sniprintf>


		ILI9341_Draw_Text(comp_text, 150, 100,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003f5c:	1d38      	adds	r0, r7, #4
 8003f5e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003f62:	9301      	str	r3, [sp, #4]
 8003f64:	2302      	movs	r3, #2
 8003f66:	9300      	str	r3, [sp, #0]
 8003f68:	2300      	movs	r3, #0
 8003f6a:	2264      	movs	r2, #100	; 0x64
 8003f6c:	2196      	movs	r1, #150	; 0x96
 8003f6e:	f00c fc01 	bl	8010774 <ILI9341_Draw_Text>
 8003f72:	e031      	b.n	8003fd8 <ToplevelMenu_DrawInputMenu+0x204>
	}
	else if(IT_GetActiveTriggerMode() == INPUT_TRIGGER_ADC)
 8003f74:	f002 f9f4 	bl	8006360 <IT_GetActiveTriggerMode>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b02      	cmp	r3, #2
 8003f7c:	d12c      	bne.n	8003fd8 <ToplevelMenu_DrawInputMenu+0x204>
	{
		ILI9341_Draw_Text("TIM", 	150, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003f7e:	2300      	movs	r3, #0
 8003f80:	9301      	str	r3, [sp, #4]
 8003f82:	2302      	movs	r3, #2
 8003f84:	9300      	str	r3, [sp, #0]
 8003f86:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003f8a:	2246      	movs	r2, #70	; 0x46
 8003f8c:	2196      	movs	r1, #150	; 0x96
 8003f8e:	482f      	ldr	r0, [pc, #188]	; (800404c <ToplevelMenu_DrawInputMenu+0x278>)
 8003f90:	f00c fbf0 	bl	8010774 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("COMP", 	200, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003f94:	2300      	movs	r3, #0
 8003f96:	9301      	str	r3, [sp, #4]
 8003f98:	2302      	movs	r3, #2
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003fa0:	2246      	movs	r2, #70	; 0x46
 8003fa2:	21c8      	movs	r1, #200	; 0xc8
 8003fa4:	482a      	ldr	r0, [pc, #168]	; (8004050 <ToplevelMenu_DrawInputMenu+0x27c>)
 8003fa6:	f00c fbe5 	bl	8010774 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("ADC", 	270, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003faa:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8003fae:	9301      	str	r3, [sp, #4]
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	9300      	str	r3, [sp, #0]
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	2246      	movs	r2, #70	; 0x46
 8003fb8:	f44f 7187 	mov.w	r1, #270	; 0x10e
 8003fbc:	4825      	ldr	r0, [pc, #148]	; (8004054 <ToplevelMenu_DrawInputMenu+0x280>)
 8003fbe:	f00c fbd9 	bl	8010774 <ILI9341_Draw_Text>

		ILI9341_Draw_Text("     ", 150, 100,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	9301      	str	r3, [sp, #4]
 8003fc6:	2302      	movs	r3, #2
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003fce:	2264      	movs	r2, #100	; 0x64
 8003fd0:	2196      	movs	r1, #150	; 0x96
 8003fd2:	4821      	ldr	r0, [pc, #132]	; (8004058 <ToplevelMenu_DrawInputMenu+0x284>)
 8003fd4:	f00c fbce 	bl	8010774 <ILI9341_Draw_Text>
	}


	ILI9341_Draw_Text("ON/", 	20, 	204, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003fd8:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003fdc:	9301      	str	r3, [sp, #4]
 8003fde:	2302      	movs	r3, #2
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	22cc      	movs	r2, #204	; 0xcc
 8003fe6:	2114      	movs	r1, #20
 8003fe8:	481e      	ldr	r0, [pc, #120]	; (8004064 <ToplevelMenu_DrawInputMenu+0x290>)
 8003fea:	f00c fbc3 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFF ",	20, 	222, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003fee:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003ff2:	9301      	str	r3, [sp, #4]
 8003ff4:	2302      	movs	r3, #2
 8003ff6:	9300      	str	r3, [sp, #0]
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	22de      	movs	r2, #222	; 0xde
 8003ffc:	2114      	movs	r1, #20
 8003ffe:	481a      	ldr	r0, [pc, #104]	; (8004068 <ToplevelMenu_DrawInputMenu+0x294>)
 8004000:	f00c fbb8 	bl	8010774 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	104,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8004004:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8004008:	9301      	str	r3, [sp, #4]
 800400a:	2302      	movs	r3, #2
 800400c:	9300      	str	r3, [sp, #0]
 800400e:	2300      	movs	r3, #0
 8004010:	22cc      	movs	r2, #204	; 0xcc
 8004012:	2168      	movs	r1, #104	; 0x68
 8004014:	4815      	ldr	r0, [pc, #84]	; (800406c <ToplevelMenu_DrawInputMenu+0x298>)
 8004016:	f00c fbad 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	97, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800401a:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800401e:	9301      	str	r3, [sp, #4]
 8004020:	2302      	movs	r3, #2
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	2300      	movs	r3, #0
 8004026:	22de      	movs	r2, #222	; 0xde
 8004028:	2161      	movs	r1, #97	; 0x61
 800402a:	4811      	ldr	r0, [pc, #68]	; (8004070 <ToplevelMenu_DrawInputMenu+0x29c>)
 800402c:	f00c fba2 	bl	8010774 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
*/
}
 8004030:	bf00      	nop
 8004032:	3718      	adds	r7, #24
 8004034:	46bd      	mov	sp, r7
 8004036:	bd80      	pop	{r7, pc}
 8004038:	08015af4 	.word	0x08015af4
 800403c:	08015afc 	.word	0x08015afc
 8004040:	08015b08 	.word	0x08015b08
 8004044:	08015b0c 	.word	0x08015b0c
 8004048:	08015b10 	.word	0x08015b10
 800404c:	08015b18 	.word	0x08015b18
 8004050:	08015b1c 	.word	0x08015b1c
 8004054:	08015b24 	.word	0x08015b24
 8004058:	08015b28 	.word	0x08015b28
 800405c:	200029e8 	.word	0x200029e8
 8004060:	08015b30 	.word	0x08015b30
 8004064:	08015b38 	.word	0x08015b38
 8004068:	08015b3c 	.word	0x08015b3c
 800406c:	08015b44 	.word	0x08015b44
 8004070:	08015b48 	.word	0x08015b48

08004074 <BiasMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eBiasMenu_Status BiasMenu_getStatus()
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 8004078:	4b03      	ldr	r3, [pc, #12]	; (8004088 <BiasMenu_getStatus+0x14>)
 800407a:	781b      	ldrb	r3, [r3, #0]
}
 800407c:	4618      	mov	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	20001e51 	.word	0x20001e51

0800408c <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 800408c:	b580      	push	{r7, lr}
 800408e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004090:	f7fd fa6c 	bl	800156c <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 8004094:	4b09      	ldr	r3, [pc, #36]	; (80040bc <BiasMenuEntryHandler+0x30>)
 8004096:	2201      	movs	r2, #1
 8004098:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 800409a:	4b09      	ldr	r3, [pc, #36]	; (80040c0 <BiasMenuEntryHandler+0x34>)
 800409c:	f44f 7248 	mov.w	r2, #800	; 0x320
 80040a0:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 80040a2:	f001 f9dd 	bl	8005460 <BO_GetDcBiasEncoderValue>
 80040a6:	4603      	mov	r3, r0
 80040a8:	461a      	mov	r2, r3
 80040aa:	4b05      	ldr	r3, [pc, #20]	; (80040c0 <BiasMenuEntryHandler+0x34>)
 80040ac:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 80040ae:	4b05      	ldr	r3, [pc, #20]	; (80040c4 <BiasMenuEntryHandler+0x38>)
 80040b0:	2200      	movs	r2, #0
 80040b2:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 80040b4:	230f      	movs	r3, #15
}
 80040b6:	4618      	mov	r0, r3
 80040b8:	bd80      	pop	{r7, pc}
 80040ba:	bf00      	nop
 80040bc:	20001e51 	.word	0x20001e51
 80040c0:	40012c00 	.word	0x40012c00
 80040c4:	20001e53 	.word	0x20001e53

080040c8 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler(eSystemEvent pEvent)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	4603      	mov	r3, r0
 80040d0:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("BiasMenuInputHandler Event captured\n");
	#endif


	switch(pEvent)
 80040d2:	79fb      	ldrb	r3, [r7, #7]
 80040d4:	3b01      	subs	r3, #1
 80040d6:	2b04      	cmp	r3, #4
 80040d8:	d82d      	bhi.n	8004136 <BiasMenuInputHandler+0x6e>
 80040da:	a201      	add	r2, pc, #4	; (adr r2, 80040e0 <BiasMenuInputHandler+0x18>)
 80040dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e0:	08004105 	.word	0x08004105
 80040e4:	08004117 	.word	0x08004117
 80040e8:	08004125 	.word	0x08004125
 80040ec:	08004137 	.word	0x08004137
 80040f0:	080040f5 	.word	0x080040f5
	{
		case evEncoderSet:
			BO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 80040f4:	2000      	movs	r0, #0
 80040f6:	f002 fd79 	bl	8006bec <SM_GetEncoderValue>
 80040fa:	4603      	mov	r3, r0
 80040fc:	4618      	mov	r0, r3
 80040fe:	f001 f9bb 	bl	8005478 <BO_MapEncoderPositionToSignalOutput>
			break;
 8004102:	e019      	b.n	8004138 <BiasMenuInputHandler+0x70>
		case evBlueBtn:
			BO_MapEncoderPositionToSignalOutput(BIAS_MAX);
 8004104:	f44f 7048 	mov.w	r0, #800	; 0x320
 8004108:	f001 f9b6 	bl	8005478 <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = BIAS_MAX;
 800410c:	4b0e      	ldr	r3, [pc, #56]	; (8004148 <BiasMenuInputHandler+0x80>)
 800410e:	f44f 7248 	mov.w	r2, #800	; 0x320
 8004112:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8004114:	e010      	b.n	8004138 <BiasMenuInputHandler+0x70>
		case evGreenBtn:
			BO_MapEncoderPositionToSignalOutput(10);
 8004116:	200a      	movs	r0, #10
 8004118:	f001 f9ae 	bl	8005478 <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = 10;
 800411c:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <BiasMenuInputHandler+0x80>)
 800411e:	220a      	movs	r2, #10
 8004120:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8004122:	e009      	b.n	8004138 <BiasMenuInputHandler+0x70>
		case evYellowBtn:
			// jump to zero crossing point
			BO_MapEncoderPositionToSignalOutput(BIAS_CENTER);
 8004124:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8004128:	f001 f9a6 	bl	8005478 <BO_MapEncoderPositionToSignalOutput>
			ENCODER_TIMER->CNT = BIAS_CENTER;
 800412c:	4b06      	ldr	r3, [pc, #24]	; (8004148 <BiasMenuInputHandler+0x80>)
 800412e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8004132:	625a      	str	r2, [r3, #36]	; 0x24
			break;
 8004134:	e000      	b.n	8004138 <BiasMenuInputHandler+0x70>

		default:
			break;
 8004136:	bf00      	nop
	}


	eNewEvent = evIdle;
 8004138:	4b04      	ldr	r3, [pc, #16]	; (800414c <BiasMenuInputHandler+0x84>)
 800413a:	2200      	movs	r2, #0
 800413c:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 800413e:	230f      	movs	r3, #15
}
 8004140:	4618      	mov	r0, r3
 8004142:	3708      	adds	r7, #8
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	40012c00 	.word	0x40012c00
 800414c:	20001e53 	.word	0x20001e53

08004150 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
		printf("BiasMenuExitHandler Event captured\n");
	#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 8004154:	4b05      	ldr	r3, [pc, #20]	; (800416c <BiasMenuExitHandler+0x1c>)
 8004156:	2200      	movs	r2, #0
 8004158:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 800415a:	f7fd fa07 	bl	800156c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 800415e:	4b04      	ldr	r3, [pc, #16]	; (8004170 <BiasMenuExitHandler+0x20>)
 8004160:	2200      	movs	r2, #0
 8004162:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004164:	2301      	movs	r3, #1
}
 8004166:	4618      	mov	r0, r3
 8004168:	bd80      	pop	{r7, pc}
 800416a:	bf00      	nop
 800416c:	20001e51 	.word	0x20001e51
 8004170:	20001e53 	.word	0x20001e53

08004174 <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0

	switch(eNextState)
 8004178:	4b2b      	ldr	r3, [pc, #172]	; (8004228 <EM_ProcessEvent+0xb4>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	2b0f      	cmp	r3, #15
 800417e:	d850      	bhi.n	8004222 <EM_ProcessEvent+0xae>
 8004180:	a201      	add	r2, pc, #4	; (adr r2, 8004188 <EM_ProcessEvent+0x14>)
 8004182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004186:	bf00      	nop
 8004188:	080041c9 	.word	0x080041c9
 800418c:	080041cf 	.word	0x080041cf
 8004190:	080041d5 	.word	0x080041d5
 8004194:	080041db 	.word	0x080041db
 8004198:	080041e1 	.word	0x080041e1
 800419c:	080041e7 	.word	0x080041e7
 80041a0:	080041ed 	.word	0x080041ed
 80041a4:	080041f3 	.word	0x080041f3
 80041a8:	080041f9 	.word	0x080041f9
 80041ac:	08004223 	.word	0x08004223
 80041b0:	080041ff 	.word	0x080041ff
 80041b4:	08004205 	.word	0x08004205
 80041b8:	0800420b 	.word	0x0800420b
 80041bc:	08004217 	.word	0x08004217
 80041c0:	08004211 	.word	0x08004211
 80041c4:	0800421d 	.word	0x0800421d
	{

// MAIN MENU
		case Idle_State:

			_ProcessIdleStateEvents();
 80041c8:	f000 f830 	bl	800422c <_ProcessIdleStateEvents>
			break;
 80041cc:	e02a      	b.n	8004224 <EM_ProcessEvent+0xb0>

		case Toplevel_Output_Menu_State:

			_ProcessTopLevelOutputMenuStateEvents();
 80041ce:	f000 f849 	bl	8004264 <_ProcessTopLevelOutputMenuStateEvents>
			break;
 80041d2:	e027      	b.n	8004224 <EM_ProcessEvent+0xb0>

		case Toplevel_Input_Menu_State:

			_ProcessTopLevelInputMenuStateEvents();
 80041d4:	f000 f88c 	bl	80042f0 <_ProcessTopLevelInputMenuStateEvents>
			break;
 80041d8:	e024      	b.n	8004224 <EM_ProcessEvent+0xb0>

// FUNC MENUS

		case Func_Main_Menu_State:

			_ProcessFuncMainMenuStateEvents();
 80041da:	f000 f8b5 	bl	8004348 <_ProcessFuncMainMenuStateEvents>
			break;
 80041de:	e021      	b.n	8004224 <EM_ProcessEvent+0xb0>

		case Func_Signal_Menu_State:

			_ProcessFuncSignalMenuStateEvents();
 80041e0:	f000 f8d8 	bl	8004394 <_ProcessFuncSignalMenuStateEvents>
			break;
 80041e4:	e01e      	b.n	8004224 <EM_ProcessEvent+0xb0>

		case Func_Aux_Menu_State:

			_ProcessFuncAuxMenuStateEvents();
 80041e6:	f000 f8f1 	bl	80043cc <_ProcessFuncAuxMenuStateEvents>
			break;
 80041ea:	e01b      	b.n	8004224 <EM_ProcessEvent+0xb0>

// GAIN MENUS

		case Gain_Main_Menu_State:

			_ProcessGainMainMenuStateEvents();
 80041ec:	f000 f914 	bl	8004418 <_ProcessGainMainMenuStateEvents>
			break;
 80041f0:	e018      	b.n	8004224 <EM_ProcessEvent+0xb0>

		case Gain_Signal_Menu_State:

			_ProcessGainSignalMenuStateEvents();
 80041f2:	f000 f949 	bl	8004488 <_ProcessGainSignalMenuStateEvents>
			break;
 80041f6:	e015      	b.n	8004224 <EM_ProcessEvent+0xb0>

		case Gain_Aux_Menu_State:

			_ProcessGainAuxMenuStateEvents();
 80041f8:	f000 f990 	bl	800451c <_ProcessGainAuxMenuStateEvents>
			break;
 80041fc:	e012      	b.n	8004224 <EM_ProcessEvent+0xb0>

// FREQ MENUS

		case Freq_Main_Menu_State:

			_ProcessFreqMainMenuStateEvents();
 80041fe:	f000 f9a9 	bl	8004554 <_ProcessFreqMainMenuStateEvents>
			break;
 8004202:	e00f      	b.n	8004224 <EM_ProcessEvent+0xb0>

		case Freq_Preset_Menu_State:

			_ProcessFreqPresetMenuStateEvents();
 8004204:	f000 f9e4 	bl	80045d0 <_ProcessFreqPresetMenuStateEvents>
			break;
 8004208:	e00c      	b.n	8004224 <EM_ProcessEvent+0xb0>

		case Freq_Adjust_Menu_State:

			_ProcessFreqAdjustMenuState();
 800420a:	f000 f9fd 	bl	8004608 <_ProcessFreqAdjustMenuState>
			break;
 800420e:	e009      	b.n	8004224 <EM_ProcessEvent+0xb0>

		case Freq_Prescaler_Menu_State:

			_ProcessFreqPrescalerMenuStateEvents();
 8004210:	f000 fa16 	bl	8004640 <_ProcessFreqPrescalerMenuStateEvents>
			break;
 8004214:	e006      	b.n	8004224 <EM_ProcessEvent+0xb0>


		case Freq_Sweep_Menu_State:

			_ProcessFreqSweepMenuStateEvents();
 8004216:	f000 fa2f 	bl	8004678 <_ProcessFreqSweepMenuStateEvents>
			break;
 800421a:	e003      	b.n	8004224 <EM_ProcessEvent+0xb0>

// BIAS MENUS

		case Bias_Menu_State:

			_ProcessBiasMainMenuEvents();
 800421c:	f000 fa76 	bl	800470c <_ProcessBiasMainMenuEvents>
			break;
 8004220:	e000      	b.n	8004224 <EM_ProcessEvent+0xb0>

		default:
			break;
 8004222:	bf00      	nop
	}

}
 8004224:	bf00      	nop
 8004226:	bd80      	pop	{r7, pc}
 8004228:	20001e52 	.word	0x20001e52

0800422c <_ProcessIdleStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessIdleStateEvents()
{
 800422c:	b580      	push	{r7, lr}
 800422e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Idle_State\n");
	#endif

	if(eNewEvent == evBlueBtn)
 8004230:	4b0a      	ldr	r3, [pc, #40]	; (800425c <_ProcessIdleStateEvents+0x30>)
 8004232:	781b      	ldrb	r3, [r3, #0]
 8004234:	2b01      	cmp	r3, #1
 8004236:	d105      	bne.n	8004244 <_ProcessIdleStateEvents+0x18>
	{
		eNextState = ToplevelOutputMenuEntryHandler();
 8004238:	f000 ff2e 	bl	8005098 <ToplevelOutputMenuEntryHandler>
 800423c:	4603      	mov	r3, r0
 800423e:	461a      	mov	r2, r3
 8004240:	4b07      	ldr	r3, [pc, #28]	; (8004260 <_ProcessIdleStateEvents+0x34>)
 8004242:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004244:	4b05      	ldr	r3, [pc, #20]	; (800425c <_ProcessIdleStateEvents+0x30>)
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b02      	cmp	r3, #2
 800424a:	d105      	bne.n	8004258 <_ProcessIdleStateEvents+0x2c>
	{
		eNextState = ToplevelInputMenuEntryHandler();
 800424c:	f000 ff48 	bl	80050e0 <ToplevelInputMenuEntryHandler>
 8004250:	4603      	mov	r3, r0
 8004252:	461a      	mov	r2, r3
 8004254:	4b02      	ldr	r3, [pc, #8]	; (8004260 <_ProcessIdleStateEvents+0x34>)
 8004256:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
	{
		// no menu action
	}
}
 8004258:	bf00      	nop
 800425a:	bd80      	pop	{r7, pc}
 800425c:	20001e53 	.word	0x20001e53
 8004260:	20001e52 	.word	0x20001e52

08004264 <_ProcessTopLevelOutputMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessTopLevelOutputMenuStateEvents()
{
 8004264:	b580      	push	{r7, lr}
 8004266:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Toplevel_Output_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 8004268:	4b1f      	ldr	r3, [pc, #124]	; (80042e8 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b06      	cmp	r3, #6
 800426e:	d105      	bne.n	800427c <_ProcessTopLevelOutputMenuStateEvents+0x18>
	{
		eNextState = ToplevelOutputMenuExitHandler();
 8004270:	f000 ff24 	bl	80050bc <ToplevelOutputMenuExitHandler>
 8004274:	4603      	mov	r3, r0
 8004276:	461a      	mov	r2, r3
 8004278:	4b1c      	ldr	r3, [pc, #112]	; (80042ec <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 800427a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 800427c:	4b1a      	ldr	r3, [pc, #104]	; (80042e8 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d108      	bne.n	8004296 <_ProcessTopLevelOutputMenuStateEvents+0x32>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8004284:	2000      	movs	r0, #0
 8004286:	f000 fef7 	bl	8005078 <ToplevelMenu_setStatus>
		eNextState = FuncMainMenuEntryHandler();
 800428a:	f000 fce5 	bl	8004c58 <FuncMainMenuEntryHandler>
 800428e:	4603      	mov	r3, r0
 8004290:	461a      	mov	r2, r3
 8004292:	4b16      	ldr	r3, [pc, #88]	; (80042ec <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 8004294:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004296:	4b14      	ldr	r3, [pc, #80]	; (80042e8 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	2b02      	cmp	r3, #2
 800429c:	d108      	bne.n	80042b0 <_ProcessTopLevelOutputMenuStateEvents+0x4c>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 800429e:	2000      	movs	r0, #0
 80042a0:	f000 feea 	bl	8005078 <ToplevelMenu_setStatus>
		eNextState = FreqMainMenuEntryHandler();
 80042a4:	f000 fbd0 	bl	8004a48 <FreqMainMenuEntryHandler>
 80042a8:	4603      	mov	r3, r0
 80042aa:	461a      	mov	r2, r3
 80042ac:	4b0f      	ldr	r3, [pc, #60]	; (80042ec <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 80042ae:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80042b0:	4b0d      	ldr	r3, [pc, #52]	; (80042e8 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d108      	bne.n	80042ca <_ProcessTopLevelOutputMenuStateEvents+0x66>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 80042b8:	2000      	movs	r0, #0
 80042ba:	f000 fedd 	bl	8005078 <ToplevelMenu_setStatus>
		eNextState = GainMainMenuEntryHandler();
 80042be:	f000 fdc1 	bl	8004e44 <GainMainMenuEntryHandler>
 80042c2:	4603      	mov	r3, r0
 80042c4:	461a      	mov	r2, r3
 80042c6:	4b09      	ldr	r3, [pc, #36]	; (80042ec <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 80042c8:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 80042ca:	4b07      	ldr	r3, [pc, #28]	; (80042e8 <_ProcessTopLevelOutputMenuStateEvents+0x84>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b04      	cmp	r3, #4
 80042d0:	d108      	bne.n	80042e4 <_ProcessTopLevelOutputMenuStateEvents+0x80>
	{
		ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 80042d2:	2000      	movs	r0, #0
 80042d4:	f000 fed0 	bl	8005078 <ToplevelMenu_setStatus>
		eNextState = BiasMenuEntryHandler();
 80042d8:	f7ff fed8 	bl	800408c <BiasMenuEntryHandler>
 80042dc:	4603      	mov	r3, r0
 80042de:	461a      	mov	r2, r3
 80042e0:	4b02      	ldr	r3, [pc, #8]	; (80042ec <_ProcessTopLevelOutputMenuStateEvents+0x88>)
 80042e2:	701a      	strb	r2, [r3, #0]
	}
}
 80042e4:	bf00      	nop
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	20001e53 	.word	0x20001e53
 80042ec:	20001e52 	.word	0x20001e52

080042f0 <_ProcessTopLevelInputMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessTopLevelInputMenuStateEvents()
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
	  printf("Toplevel_Input_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 80042f4:	4b12      	ldr	r3, [pc, #72]	; (8004340 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	2b06      	cmp	r3, #6
 80042fa:	d105      	bne.n	8004308 <_ProcessTopLevelInputMenuStateEvents+0x18>
	{
		eNextState = ToplevelInputMenuExitHandler();
 80042fc:	f000 ff24 	bl	8005148 <ToplevelInputMenuExitHandler>
 8004300:	4603      	mov	r3, r0
 8004302:	461a      	mov	r2, r3
 8004304:	4b0f      	ldr	r3, [pc, #60]	; (8004344 <_ProcessTopLevelInputMenuStateEvents+0x54>)
 8004306:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 8004308:	4b0d      	ldr	r3, [pc, #52]	; (8004340 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d108      	bne.n	8004322 <_ProcessTopLevelInputMenuStateEvents+0x32>
	{
		eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 8004310:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fef5 	bl	8005104 <ToplevelInputMenuInputHandler>
 800431a:	4603      	mov	r3, r0
 800431c:	461a      	mov	r2, r3
 800431e:	4b09      	ldr	r3, [pc, #36]	; (8004344 <_ProcessTopLevelInputMenuStateEvents+0x54>)
 8004320:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004322:	4b07      	ldr	r3, [pc, #28]	; (8004340 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d108      	bne.n	800433c <_ProcessTopLevelInputMenuStateEvents+0x4c>
	{

		eNextState = ToplevelInputMenuInputHandler(eNewEvent);
 800432a:	4b05      	ldr	r3, [pc, #20]	; (8004340 <_ProcessTopLevelInputMenuStateEvents+0x50>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f000 fee8 	bl	8005104 <ToplevelInputMenuInputHandler>
 8004334:	4603      	mov	r3, r0
 8004336:	461a      	mov	r2, r3
 8004338:	4b02      	ldr	r3, [pc, #8]	; (8004344 <_ProcessTopLevelInputMenuStateEvents+0x54>)
 800433a:	701a      	strb	r2, [r3, #0]
	}
}
 800433c:	bf00      	nop
 800433e:	bd80      	pop	{r7, pc}
 8004340:	20001e53 	.word	0x20001e53
 8004344:	20001e52 	.word	0x20001e52

08004348 <_ProcessFuncMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncMainMenuStateEvents()
{
 8004348:	b580      	push	{r7, lr}
 800434a:	af00      	add	r7, sp, #0

	if(eNewEvent == evEncoderSet)
	{
		// No menu action
	}
	if(eNewEvent == evEncoderPush)
 800434c:	4b0f      	ldr	r3, [pc, #60]	; (800438c <_ProcessFuncMainMenuStateEvents+0x44>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b06      	cmp	r3, #6
 8004352:	d105      	bne.n	8004360 <_ProcessFuncMainMenuStateEvents+0x18>
	{
		eNextState = FuncMainMenuExitHandler();
 8004354:	f000 fc92 	bl	8004c7c <FuncMainMenuExitHandler>
 8004358:	4603      	mov	r3, r0
 800435a:	461a      	mov	r2, r3
 800435c:	4b0c      	ldr	r3, [pc, #48]	; (8004390 <_ProcessFuncMainMenuStateEvents+0x48>)
 800435e:	701a      	strb	r2, [r3, #0]

	}
	if(eNewEvent == evBlueBtn)
 8004360:	4b0a      	ldr	r3, [pc, #40]	; (800438c <_ProcessFuncMainMenuStateEvents+0x44>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b01      	cmp	r3, #1
 8004366:	d105      	bne.n	8004374 <_ProcessFuncMainMenuStateEvents+0x2c>
	{
		eNextState = FuncSignalMenuEntryHandler();
 8004368:	f000 fc9c 	bl	8004ca4 <FuncSignalMenuEntryHandler>
 800436c:	4603      	mov	r3, r0
 800436e:	461a      	mov	r2, r3
 8004370:	4b07      	ldr	r3, [pc, #28]	; (8004390 <_ProcessFuncMainMenuStateEvents+0x48>)
 8004372:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004374:	4b05      	ldr	r3, [pc, #20]	; (800438c <_ProcessFuncMainMenuStateEvents+0x44>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b02      	cmp	r3, #2
 800437a:	d105      	bne.n	8004388 <_ProcessFuncMainMenuStateEvents+0x40>
	{
		eNextState = FuncAuxMenuEntryHandler();
 800437c:	f000 fcd6 	bl	8004d2c <FuncAuxMenuEntryHandler>
 8004380:	4603      	mov	r3, r0
 8004382:	461a      	mov	r2, r3
 8004384:	4b02      	ldr	r3, [pc, #8]	; (8004390 <_ProcessFuncMainMenuStateEvents+0x48>)
 8004386:	701a      	strb	r2, [r3, #0]
	}
}
 8004388:	bf00      	nop
 800438a:	bd80      	pop	{r7, pc}
 800438c:	20001e53 	.word	0x20001e53
 8004390:	20001e52 	.word	0x20001e52

08004394 <_ProcessFuncSignalMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncSignalMenuStateEvents()
{
 8004394:	b580      	push	{r7, lr}
 8004396:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Func_Signal_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004398:	4b0a      	ldr	r3, [pc, #40]	; (80043c4 <_ProcessFuncSignalMenuStateEvents+0x30>)
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	2b05      	cmp	r3, #5
 800439e:	d105      	bne.n	80043ac <_ProcessFuncSignalMenuStateEvents+0x18>
	{
		eNextState = FuncSignalMenuInputHandler();
 80043a0:	f000 fc9e 	bl	8004ce0 <FuncSignalMenuInputHandler>
 80043a4:	4603      	mov	r3, r0
 80043a6:	461a      	mov	r2, r3
 80043a8:	4b07      	ldr	r3, [pc, #28]	; (80043c8 <_ProcessFuncSignalMenuStateEvents+0x34>)
 80043aa:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80043ac:	4b05      	ldr	r3, [pc, #20]	; (80043c4 <_ProcessFuncSignalMenuStateEvents+0x30>)
 80043ae:	781b      	ldrb	r3, [r3, #0]
 80043b0:	2b06      	cmp	r3, #6
 80043b2:	d105      	bne.n	80043c0 <_ProcessFuncSignalMenuStateEvents+0x2c>
	{
		eNextState = FuncSignalMenuExitHandler();
 80043b4:	f000 fca6 	bl	8004d04 <FuncSignalMenuExitHandler>
 80043b8:	4603      	mov	r3, r0
 80043ba:	461a      	mov	r2, r3
 80043bc:	4b02      	ldr	r3, [pc, #8]	; (80043c8 <_ProcessFuncSignalMenuStateEvents+0x34>)
 80043be:	701a      	strb	r2, [r3, #0]
	}
}
 80043c0:	bf00      	nop
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	20001e53 	.word	0x20001e53
 80043c8:	20001e52 	.word	0x20001e52

080043cc <_ProcessFuncAuxMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFuncAuxMenuStateEvents()
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Func_Aux_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80043d0:	4b0f      	ldr	r3, [pc, #60]	; (8004410 <_ProcessFuncAuxMenuStateEvents+0x44>)
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b05      	cmp	r3, #5
 80043d6:	d105      	bne.n	80043e4 <_ProcessFuncAuxMenuStateEvents+0x18>
	{
		eNextState = FuncAuxMenuInputHandler();
 80043d8:	f000 fcc6 	bl	8004d68 <FuncAuxMenuInputHandler>
 80043dc:	4603      	mov	r3, r0
 80043de:	461a      	mov	r2, r3
 80043e0:	4b0c      	ldr	r3, [pc, #48]	; (8004414 <_ProcessFuncAuxMenuStateEvents+0x48>)
 80043e2:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80043e4:	4b0a      	ldr	r3, [pc, #40]	; (8004410 <_ProcessFuncAuxMenuStateEvents+0x44>)
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b06      	cmp	r3, #6
 80043ea:	d105      	bne.n	80043f8 <_ProcessFuncAuxMenuStateEvents+0x2c>
	{
		eNextState = FuncAuxMenuExitHandler();
 80043ec:	f000 fd0a 	bl	8004e04 <FuncAuxMenuExitHandler>
 80043f0:	4603      	mov	r3, r0
 80043f2:	461a      	mov	r2, r3
 80043f4:	4b07      	ldr	r3, [pc, #28]	; (8004414 <_ProcessFuncAuxMenuStateEvents+0x48>)
 80043f6:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80043f8:	4b05      	ldr	r3, [pc, #20]	; (8004410 <_ProcessFuncAuxMenuStateEvents+0x44>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d105      	bne.n	800440c <_ProcessFuncAuxMenuStateEvents+0x40>
	{
		eNextState = FuncAuxToggleDutyMode();
 8004400:	f000 fcee 	bl	8004de0 <FuncAuxToggleDutyMode>
 8004404:	4603      	mov	r3, r0
 8004406:	461a      	mov	r2, r3
 8004408:	4b02      	ldr	r3, [pc, #8]	; (8004414 <_ProcessFuncAuxMenuStateEvents+0x48>)
 800440a:	701a      	strb	r2, [r3, #0]
	}

}
 800440c:	bf00      	nop
 800440e:	bd80      	pop	{r7, pc}
 8004410:	20001e53 	.word	0x20001e53
 8004414:	20001e52 	.word	0x20001e52

08004418 <_ProcessGainMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainMainMenuStateEvents()
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
	#endif
	if(eNewEvent == evEncoderSet)
	{
		// No menu action
	}
	if(eNewEvent == evEncoderPush)
 800441e:	4b18      	ldr	r3, [pc, #96]	; (8004480 <_ProcessGainMainMenuStateEvents+0x68>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	2b06      	cmp	r3, #6
 8004424:	d108      	bne.n	8004438 <_ProcessGainMainMenuStateEvents+0x20>
	{
		eNextState = GainMainMenuExitHandler();
 8004426:	f000 fd1f 	bl	8004e68 <GainMainMenuExitHandler>
 800442a:	4603      	mov	r3, r0
 800442c:	461a      	mov	r2, r3
 800442e:	4b15      	ldr	r3, [pc, #84]	; (8004484 <_ProcessGainMainMenuStateEvents+0x6c>)
 8004430:	701a      	strb	r2, [r3, #0]
		ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8004432:	2002      	movs	r0, #2
 8004434:	f000 fe20 	bl	8005078 <ToplevelMenu_setStatus>
	}
	if(eNewEvent == evBlueBtn)
 8004438:	4b11      	ldr	r3, [pc, #68]	; (8004480 <_ProcessGainMainMenuStateEvents+0x68>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d105      	bne.n	800444c <_ProcessGainMainMenuStateEvents+0x34>
	{
		eNextState = GainSignalMenuEntryHandler();
 8004440:	f000 fd24 	bl	8004e8c <GainSignalMenuEntryHandler>
 8004444:	4603      	mov	r3, r0
 8004446:	461a      	mov	r2, r3
 8004448:	4b0e      	ldr	r3, [pc, #56]	; (8004484 <_ProcessGainMainMenuStateEvents+0x6c>)
 800444a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 800444c:	4b0c      	ldr	r3, [pc, #48]	; (8004480 <_ProcessGainMainMenuStateEvents+0x68>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b02      	cmp	r3, #2
 8004452:	d110      	bne.n	8004476 <_ProcessGainMainMenuStateEvents+0x5e>
	{
		eOutput_mode aux_output_func = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8004454:	2001      	movs	r0, #1
 8004456:	f002 f94d 	bl	80066f4 <SM_GetOutputChannel>
 800445a:	4603      	mov	r3, r0
 800445c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	71fb      	strb	r3, [r7, #7]
		if(aux_output_func != PWM_FUNC_MODE)
 8004464:	79fb      	ldrb	r3, [r7, #7]
 8004466:	2b06      	cmp	r3, #6
 8004468:	d005      	beq.n	8004476 <_ProcessGainMainMenuStateEvents+0x5e>
			eNextState = GainAuxMenuEntryHandler();
 800446a:	f000 fda5 	bl	8004fb8 <GainAuxMenuEntryHandler>
 800446e:	4603      	mov	r3, r0
 8004470:	461a      	mov	r2, r3
 8004472:	4b04      	ldr	r3, [pc, #16]	; (8004484 <_ProcessGainMainMenuStateEvents+0x6c>)
 8004474:	701a      	strb	r2, [r3, #0]
	}
}
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	20001e53 	.word	0x20001e53
 8004484:	20001e52 	.word	0x20001e52

08004488 <_ProcessGainSignalMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainSignalMenuStateEvents()
{
 8004488:	b580      	push	{r7, lr}
 800448a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Gain_Signal_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 800448c:	4b21      	ldr	r3, [pc, #132]	; (8004514 <_ProcessGainSignalMenuStateEvents+0x8c>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b05      	cmp	r3, #5
 8004492:	d106      	bne.n	80044a2 <_ProcessGainSignalMenuStateEvents+0x1a>
	{
		eNextState = GainSignalMenuInputHandler(evEncoderSet);
 8004494:	2005      	movs	r0, #5
 8004496:	f000 fd2b 	bl	8004ef0 <GainSignalMenuInputHandler>
 800449a:	4603      	mov	r3, r0
 800449c:	461a      	mov	r2, r3
 800449e:	4b1e      	ldr	r3, [pc, #120]	; (8004518 <_ProcessGainSignalMenuStateEvents+0x90>)
 80044a0:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80044a2:	4b1c      	ldr	r3, [pc, #112]	; (8004514 <_ProcessGainSignalMenuStateEvents+0x8c>)
 80044a4:	781b      	ldrb	r3, [r3, #0]
 80044a6:	2b06      	cmp	r3, #6
 80044a8:	d105      	bne.n	80044b6 <_ProcessGainSignalMenuStateEvents+0x2e>
	{
		eNextState = GainSignalMenuExitHandler();
 80044aa:	f000 fd73 	bl	8004f94 <GainSignalMenuExitHandler>
 80044ae:	4603      	mov	r3, r0
 80044b0:	461a      	mov	r2, r3
 80044b2:	4b19      	ldr	r3, [pc, #100]	; (8004518 <_ProcessGainSignalMenuStateEvents+0x90>)
 80044b4:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evBlueBtn)
 80044b6:	4b17      	ldr	r3, [pc, #92]	; (8004514 <_ProcessGainSignalMenuStateEvents+0x8c>)
 80044b8:	781b      	ldrb	r3, [r3, #0]
 80044ba:	2b01      	cmp	r3, #1
 80044bc:	d106      	bne.n	80044cc <_ProcessGainSignalMenuStateEvents+0x44>
	{
		eNextState = GainSignalMenuInputHandler(evBlueBtn);
 80044be:	2001      	movs	r0, #1
 80044c0:	f000 fd16 	bl	8004ef0 <GainSignalMenuInputHandler>
 80044c4:	4603      	mov	r3, r0
 80044c6:	461a      	mov	r2, r3
 80044c8:	4b13      	ldr	r3, [pc, #76]	; (8004518 <_ProcessGainSignalMenuStateEvents+0x90>)
 80044ca:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 80044cc:	4b11      	ldr	r3, [pc, #68]	; (8004514 <_ProcessGainSignalMenuStateEvents+0x8c>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b02      	cmp	r3, #2
 80044d2:	d106      	bne.n	80044e2 <_ProcessGainSignalMenuStateEvents+0x5a>
	{
		eNextState = GainSignalMenuInputHandler(evGreenBtn);
 80044d4:	2002      	movs	r0, #2
 80044d6:	f000 fd0b 	bl	8004ef0 <GainSignalMenuInputHandler>
 80044da:	4603      	mov	r3, r0
 80044dc:	461a      	mov	r2, r3
 80044de:	4b0e      	ldr	r3, [pc, #56]	; (8004518 <_ProcessGainSignalMenuStateEvents+0x90>)
 80044e0:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80044e2:	4b0c      	ldr	r3, [pc, #48]	; (8004514 <_ProcessGainSignalMenuStateEvents+0x8c>)
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	2b03      	cmp	r3, #3
 80044e8:	d106      	bne.n	80044f8 <_ProcessGainSignalMenuStateEvents+0x70>
	{
		eNextState = GainSignalMenuInputHandler(evYellowBtn);
 80044ea:	2003      	movs	r0, #3
 80044ec:	f000 fd00 	bl	8004ef0 <GainSignalMenuInputHandler>
 80044f0:	4603      	mov	r3, r0
 80044f2:	461a      	mov	r2, r3
 80044f4:	4b08      	ldr	r3, [pc, #32]	; (8004518 <_ProcessGainSignalMenuStateEvents+0x90>)
 80044f6:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 80044f8:	4b06      	ldr	r3, [pc, #24]	; (8004514 <_ProcessGainSignalMenuStateEvents+0x8c>)
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d106      	bne.n	800450e <_ProcessGainSignalMenuStateEvents+0x86>
	{
		eNextState = GainSignalMenuInputHandler(evRedBtn);
 8004500:	2004      	movs	r0, #4
 8004502:	f000 fcf5 	bl	8004ef0 <GainSignalMenuInputHandler>
 8004506:	4603      	mov	r3, r0
 8004508:	461a      	mov	r2, r3
 800450a:	4b03      	ldr	r3, [pc, #12]	; (8004518 <_ProcessGainSignalMenuStateEvents+0x90>)
 800450c:	701a      	strb	r2, [r3, #0]
	}

}
 800450e:	bf00      	nop
 8004510:	bd80      	pop	{r7, pc}
 8004512:	bf00      	nop
 8004514:	20001e53 	.word	0x20001e53
 8004518:	20001e52 	.word	0x20001e52

0800451c <_ProcessGainAuxMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessGainAuxMenuStateEvents()
{
 800451c:	b580      	push	{r7, lr}
 800451e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Gain_Aux_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004520:	4b0a      	ldr	r3, [pc, #40]	; (800454c <_ProcessGainAuxMenuStateEvents+0x30>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b05      	cmp	r3, #5
 8004526:	d105      	bne.n	8004534 <_ProcessGainAuxMenuStateEvents+0x18>
	{
		eNextState = GainAuxMenuInputHandler();
 8004528:	f000 fd76 	bl	8005018 <GainAuxMenuInputHandler>
 800452c:	4603      	mov	r3, r0
 800452e:	461a      	mov	r2, r3
 8004530:	4b07      	ldr	r3, [pc, #28]	; (8004550 <_ProcessGainAuxMenuStateEvents+0x34>)
 8004532:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004534:	4b05      	ldr	r3, [pc, #20]	; (800454c <_ProcessGainAuxMenuStateEvents+0x30>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b06      	cmp	r3, #6
 800453a:	d105      	bne.n	8004548 <_ProcessGainAuxMenuStateEvents+0x2c>
	{
		eNextState = GainAuxMenuExitHandler();
 800453c:	f000 fd7e 	bl	800503c <GainAuxMenuExitHandler>
 8004540:	4603      	mov	r3, r0
 8004542:	461a      	mov	r2, r3
 8004544:	4b02      	ldr	r3, [pc, #8]	; (8004550 <_ProcessGainAuxMenuStateEvents+0x34>)
 8004546:	701a      	strb	r2, [r3, #0]
	}
}
 8004548:	bf00      	nop
 800454a:	bd80      	pop	{r7, pc}
 800454c:	20001e53 	.word	0x20001e53
 8004550:	20001e52 	.word	0x20001e52

08004554 <_ProcessFreqMainMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqMainMenuStateEvents()
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Main_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderPush)
 8004558:	4b1b      	ldr	r3, [pc, #108]	; (80045c8 <_ProcessFreqMainMenuStateEvents+0x74>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b06      	cmp	r3, #6
 800455e:	d108      	bne.n	8004572 <_ProcessFreqMainMenuStateEvents+0x1e>
	{
		eNextState = FreqMainMenuExitHandler();
 8004560:	f000 fa84 	bl	8004a6c <FreqMainMenuExitHandler>
 8004564:	4603      	mov	r3, r0
 8004566:	461a      	mov	r2, r3
 8004568:	4b18      	ldr	r3, [pc, #96]	; (80045cc <_ProcessFreqMainMenuStateEvents+0x78>)
 800456a:	701a      	strb	r2, [r3, #0]
		ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 800456c:	2002      	movs	r0, #2
 800456e:	f000 fd83 	bl	8005078 <ToplevelMenu_setStatus>
	}
	if(eNewEvent == evBlueBtn)
 8004572:	4b15      	ldr	r3, [pc, #84]	; (80045c8 <_ProcessFreqMainMenuStateEvents+0x74>)
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	2b01      	cmp	r3, #1
 8004578:	d105      	bne.n	8004586 <_ProcessFreqMainMenuStateEvents+0x32>
	{
		eNextState = FreqPresetMenuEntryHandler();
 800457a:	f000 fa8f 	bl	8004a9c <FreqPresetMenuEntryHandler>
 800457e:	4603      	mov	r3, r0
 8004580:	461a      	mov	r2, r3
 8004582:	4b12      	ldr	r3, [pc, #72]	; (80045cc <_ProcessFreqMainMenuStateEvents+0x78>)
 8004584:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004586:	4b10      	ldr	r3, [pc, #64]	; (80045c8 <_ProcessFreqMainMenuStateEvents+0x74>)
 8004588:	781b      	ldrb	r3, [r3, #0]
 800458a:	2b02      	cmp	r3, #2
 800458c:	d105      	bne.n	800459a <_ProcessFreqMainMenuStateEvents+0x46>
	{
		eNextState = FreqAdjustMenuEntryHandler();
 800458e:	f000 fad5 	bl	8004b3c <FreqAdjustMenuEntryHandler>
 8004592:	4603      	mov	r3, r0
 8004594:	461a      	mov	r2, r3
 8004596:	4b0d      	ldr	r3, [pc, #52]	; (80045cc <_ProcessFreqMainMenuStateEvents+0x78>)
 8004598:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 800459a:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <_ProcessFreqMainMenuStateEvents+0x74>)
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d105      	bne.n	80045ae <_ProcessFreqMainMenuStateEvents+0x5a>
	{
		eNextState = FreqSweepMenuEntryHandler();
 80045a2:	f000 f905 	bl	80047b0 <FreqSweepMenuEntryHandler>
 80045a6:	4603      	mov	r3, r0
 80045a8:	461a      	mov	r2, r3
 80045aa:	4b08      	ldr	r3, [pc, #32]	; (80045cc <_ProcessFreqMainMenuStateEvents+0x78>)
 80045ac:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 80045ae:	4b06      	ldr	r3, [pc, #24]	; (80045c8 <_ProcessFreqMainMenuStateEvents+0x74>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	2b04      	cmp	r3, #4
 80045b4:	d105      	bne.n	80045c2 <_ProcessFreqMainMenuStateEvents+0x6e>
	{
		eNextState = FreqPrescalerMenuEntryHandler();
 80045b6:	f000 fafd 	bl	8004bb4 <FreqPrescalerMenuEntryHandler>
 80045ba:	4603      	mov	r3, r0
 80045bc:	461a      	mov	r2, r3
 80045be:	4b03      	ldr	r3, [pc, #12]	; (80045cc <_ProcessFreqMainMenuStateEvents+0x78>)
 80045c0:	701a      	strb	r2, [r3, #0]
	}
}
 80045c2:	bf00      	nop
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20001e53 	.word	0x20001e53
 80045cc:	20001e52 	.word	0x20001e52

080045d0 <_ProcessFreqPresetMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqPresetMenuStateEvents()
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Preset_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 80045d4:	4b0a      	ldr	r3, [pc, #40]	; (8004600 <_ProcessFreqPresetMenuStateEvents+0x30>)
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b05      	cmp	r3, #5
 80045da:	d105      	bne.n	80045e8 <_ProcessFreqPresetMenuStateEvents+0x18>
	{
		eNextState = FreqPresetMenuInputHandler();
 80045dc:	f000 fa8a 	bl	8004af4 <FreqPresetMenuInputHandler>
 80045e0:	4603      	mov	r3, r0
 80045e2:	461a      	mov	r2, r3
 80045e4:	4b07      	ldr	r3, [pc, #28]	; (8004604 <_ProcessFreqPresetMenuStateEvents+0x34>)
 80045e6:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80045e8:	4b05      	ldr	r3, [pc, #20]	; (8004600 <_ProcessFreqPresetMenuStateEvents+0x30>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	2b06      	cmp	r3, #6
 80045ee:	d105      	bne.n	80045fc <_ProcessFreqPresetMenuStateEvents+0x2c>
	{
		eNextState = FreqPresetMenuExitHandler();
 80045f0:	f000 fa92 	bl	8004b18 <FreqPresetMenuExitHandler>
 80045f4:	4603      	mov	r3, r0
 80045f6:	461a      	mov	r2, r3
 80045f8:	4b02      	ldr	r3, [pc, #8]	; (8004604 <_ProcessFreqPresetMenuStateEvents+0x34>)
 80045fa:	701a      	strb	r2, [r3, #0]
	}
}
 80045fc:	bf00      	nop
 80045fe:	bd80      	pop	{r7, pc}
 8004600:	20001e53 	.word	0x20001e53
 8004604:	20001e52 	.word	0x20001e52

08004608 <_ProcessFreqAdjustMenuState>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqAdjustMenuState()
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Adjust_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 800460c:	4b0a      	ldr	r3, [pc, #40]	; (8004638 <_ProcessFreqAdjustMenuState+0x30>)
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	2b05      	cmp	r3, #5
 8004612:	d105      	bne.n	8004620 <_ProcessFreqAdjustMenuState+0x18>
	{
		eNextState = FreqAdjustMenuInputHandler();
 8004614:	f000 fab0 	bl	8004b78 <FreqAdjustMenuInputHandler>
 8004618:	4603      	mov	r3, r0
 800461a:	461a      	mov	r2, r3
 800461c:	4b07      	ldr	r3, [pc, #28]	; (800463c <_ProcessFreqAdjustMenuState+0x34>)
 800461e:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004620:	4b05      	ldr	r3, [pc, #20]	; (8004638 <_ProcessFreqAdjustMenuState+0x30>)
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	2b06      	cmp	r3, #6
 8004626:	d105      	bne.n	8004634 <_ProcessFreqAdjustMenuState+0x2c>
	{
		eNextState = FreqAdjustMenuExitHandler();
 8004628:	f000 fab2 	bl	8004b90 <FreqAdjustMenuExitHandler>
 800462c:	4603      	mov	r3, r0
 800462e:	461a      	mov	r2, r3
 8004630:	4b02      	ldr	r3, [pc, #8]	; (800463c <_ProcessFreqAdjustMenuState+0x34>)
 8004632:	701a      	strb	r2, [r3, #0]
	}
}
 8004634:	bf00      	nop
 8004636:	bd80      	pop	{r7, pc}
 8004638:	20001e53 	.word	0x20001e53
 800463c:	20001e52 	.word	0x20001e52

08004640 <_ProcessFreqPrescalerMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqPrescalerMenuStateEvents()
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Prescaler_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004644:	4b0a      	ldr	r3, [pc, #40]	; (8004670 <_ProcessFreqPrescalerMenuStateEvents+0x30>)
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b05      	cmp	r3, #5
 800464a:	d105      	bne.n	8004658 <_ProcessFreqPrescalerMenuStateEvents+0x18>
	{
		eNextState = FreqPrescalerMenuInputHandler();
 800464c:	f000 face 	bl	8004bec <FreqPrescalerMenuInputHandler>
 8004650:	4603      	mov	r3, r0
 8004652:	461a      	mov	r2, r3
 8004654:	4b07      	ldr	r3, [pc, #28]	; (8004674 <_ProcessFreqPrescalerMenuStateEvents+0x34>)
 8004656:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004658:	4b05      	ldr	r3, [pc, #20]	; (8004670 <_ProcessFreqPrescalerMenuStateEvents+0x30>)
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	2b06      	cmp	r3, #6
 800465e:	d105      	bne.n	800466c <_ProcessFreqPrescalerMenuStateEvents+0x2c>
	{
		eNextState = FreqPrescalerMenuExitHandler();
 8004660:	f000 fad0 	bl	8004c04 <FreqPrescalerMenuExitHandler>
 8004664:	4603      	mov	r3, r0
 8004666:	461a      	mov	r2, r3
 8004668:	4b02      	ldr	r3, [pc, #8]	; (8004674 <_ProcessFreqPrescalerMenuStateEvents+0x34>)
 800466a:	701a      	strb	r2, [r3, #0]
	}
}
 800466c:	bf00      	nop
 800466e:	bd80      	pop	{r7, pc}
 8004670:	20001e53 	.word	0x20001e53
 8004674:	20001e52 	.word	0x20001e52

08004678 <_ProcessFreqSweepMenuStateEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessFreqSweepMenuStateEvents()
{
 8004678:	b580      	push	{r7, lr}
 800467a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Freq_Sweep_Menu_State\n");
	#endif

	if(eNewEvent == evBlueBtn)
 800467c:	4b21      	ldr	r3, [pc, #132]	; (8004704 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d106      	bne.n	8004692 <_ProcessFreqSweepMenuStateEvents+0x1a>
	{
		// enable
		eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 8004684:	2007      	movs	r0, #7
 8004686:	f000 f8e9 	bl	800485c <FreqSweepMenuInputHandler>
 800468a:	4603      	mov	r3, r0
 800468c:	461a      	mov	r2, r3
 800468e:	4b1e      	ldr	r3, [pc, #120]	; (8004708 <_ProcessFreqSweepMenuStateEvents+0x90>)
 8004690:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004692:	4b1c      	ldr	r3, [pc, #112]	; (8004704 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b02      	cmp	r3, #2
 8004698:	d106      	bne.n	80046a8 <_ProcessFreqSweepMenuStateEvents+0x30>
	{
		// direction
		eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 800469a:	2008      	movs	r0, #8
 800469c:	f000 f8de 	bl	800485c <FreqSweepMenuInputHandler>
 80046a0:	4603      	mov	r3, r0
 80046a2:	461a      	mov	r2, r3
 80046a4:	4b18      	ldr	r3, [pc, #96]	; (8004708 <_ProcessFreqSweepMenuStateEvents+0x90>)
 80046a6:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 80046a8:	4b16      	ldr	r3, [pc, #88]	; (8004704 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	2b03      	cmp	r3, #3
 80046ae:	d106      	bne.n	80046be <_ProcessFreqSweepMenuStateEvents+0x46>
	{
		// set sweep speed
		eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 80046b0:	2009      	movs	r0, #9
 80046b2:	f000 f8d3 	bl	800485c <FreqSweepMenuInputHandler>
 80046b6:	4603      	mov	r3, r0
 80046b8:	461a      	mov	r2, r3
 80046ba:	4b13      	ldr	r3, [pc, #76]	; (8004708 <_ProcessFreqSweepMenuStateEvents+0x90>)
 80046bc:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evRedBtn)
 80046be:	4b11      	ldr	r3, [pc, #68]	; (8004704 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 80046c0:	781b      	ldrb	r3, [r3, #0]
 80046c2:	2b04      	cmp	r3, #4
 80046c4:	d106      	bne.n	80046d4 <_ProcessFreqSweepMenuStateEvents+0x5c>
	{
		// set lower/upper sweep limit
		eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 80046c6:	200a      	movs	r0, #10
 80046c8:	f000 f8c8 	bl	800485c <FreqSweepMenuInputHandler>
 80046cc:	4603      	mov	r3, r0
 80046ce:	461a      	mov	r2, r3
 80046d0:	4b0d      	ldr	r3, [pc, #52]	; (8004708 <_ProcessFreqSweepMenuStateEvents+0x90>)
 80046d2:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderSet)
 80046d4:	4b0b      	ldr	r3, [pc, #44]	; (8004704 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 80046d6:	781b      	ldrb	r3, [r3, #0]
 80046d8:	2b05      	cmp	r3, #5
 80046da:	d106      	bne.n	80046ea <_ProcessFreqSweepMenuStateEvents+0x72>
	{
		eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 80046dc:	200b      	movs	r0, #11
 80046de:	f000 f8bd 	bl	800485c <FreqSweepMenuInputHandler>
 80046e2:	4603      	mov	r3, r0
 80046e4:	461a      	mov	r2, r3
 80046e6:	4b08      	ldr	r3, [pc, #32]	; (8004708 <_ProcessFreqSweepMenuStateEvents+0x90>)
 80046e8:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 80046ea:	4b06      	ldr	r3, [pc, #24]	; (8004704 <_ProcessFreqSweepMenuStateEvents+0x8c>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	2b06      	cmp	r3, #6
 80046f0:	d105      	bne.n	80046fe <_ProcessFreqSweepMenuStateEvents+0x86>
	{
		eNextState = FreqSweepMenuExitHandler();
 80046f2:	f000 f989 	bl	8004a08 <FreqSweepMenuExitHandler>
 80046f6:	4603      	mov	r3, r0
 80046f8:	461a      	mov	r2, r3
 80046fa:	4b03      	ldr	r3, [pc, #12]	; (8004708 <_ProcessFreqSweepMenuStateEvents+0x90>)
 80046fc:	701a      	strb	r2, [r3, #0]
	}

}
 80046fe:	bf00      	nop
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	20001e53 	.word	0x20001e53
 8004708:	20001e52 	.word	0x20001e52

0800470c <_ProcessBiasMainMenuEvents>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessBiasMainMenuEvents()
{
 800470c:	b580      	push	{r7, lr}
 800470e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		  printf("Bias_Menu_State\n");
	#endif

	if(eNewEvent == evEncoderSet)
 8004710:	4b1d      	ldr	r3, [pc, #116]	; (8004788 <_ProcessBiasMainMenuEvents+0x7c>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b05      	cmp	r3, #5
 8004716:	d106      	bne.n	8004726 <_ProcessBiasMainMenuEvents+0x1a>
	{
		eNextState = BiasMenuInputHandler(evEncoderSet);
 8004718:	2005      	movs	r0, #5
 800471a:	f7ff fcd5 	bl	80040c8 <BiasMenuInputHandler>
 800471e:	4603      	mov	r3, r0
 8004720:	461a      	mov	r2, r3
 8004722:	4b1a      	ldr	r3, [pc, #104]	; (800478c <_ProcessBiasMainMenuEvents+0x80>)
 8004724:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evEncoderPush)
 8004726:	4b18      	ldr	r3, [pc, #96]	; (8004788 <_ProcessBiasMainMenuEvents+0x7c>)
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	2b06      	cmp	r3, #6
 800472c:	d108      	bne.n	8004740 <_ProcessBiasMainMenuEvents+0x34>
	{
		eNextState = BiasMenuExitHandler();
 800472e:	f7ff fd0f 	bl	8004150 <BiasMenuExitHandler>
 8004732:	4603      	mov	r3, r0
 8004734:	461a      	mov	r2, r3
 8004736:	4b15      	ldr	r3, [pc, #84]	; (800478c <_ProcessBiasMainMenuEvents+0x80>)
 8004738:	701a      	strb	r2, [r3, #0]
		ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 800473a:	2002      	movs	r0, #2
 800473c:	f000 fc9c 	bl	8005078 <ToplevelMenu_setStatus>
	}
	if(eNewEvent == evBlueBtn)
 8004740:	4b11      	ldr	r3, [pc, #68]	; (8004788 <_ProcessBiasMainMenuEvents+0x7c>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d106      	bne.n	8004756 <_ProcessBiasMainMenuEvents+0x4a>
	{
		// enable
		eNextState = BiasMenuInputHandler(evBlueBtn);
 8004748:	2001      	movs	r0, #1
 800474a:	f7ff fcbd 	bl	80040c8 <BiasMenuInputHandler>
 800474e:	4603      	mov	r3, r0
 8004750:	461a      	mov	r2, r3
 8004752:	4b0e      	ldr	r3, [pc, #56]	; (800478c <_ProcessBiasMainMenuEvents+0x80>)
 8004754:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evGreenBtn)
 8004756:	4b0c      	ldr	r3, [pc, #48]	; (8004788 <_ProcessBiasMainMenuEvents+0x7c>)
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	2b02      	cmp	r3, #2
 800475c:	d106      	bne.n	800476c <_ProcessBiasMainMenuEvents+0x60>
	{
		// direction
		eNextState = BiasMenuInputHandler(evGreenBtn);
 800475e:	2002      	movs	r0, #2
 8004760:	f7ff fcb2 	bl	80040c8 <BiasMenuInputHandler>
 8004764:	4603      	mov	r3, r0
 8004766:	461a      	mov	r2, r3
 8004768:	4b08      	ldr	r3, [pc, #32]	; (800478c <_ProcessBiasMainMenuEvents+0x80>)
 800476a:	701a      	strb	r2, [r3, #0]
	}
	if(eNewEvent == evYellowBtn)
 800476c:	4b06      	ldr	r3, [pc, #24]	; (8004788 <_ProcessBiasMainMenuEvents+0x7c>)
 800476e:	781b      	ldrb	r3, [r3, #0]
 8004770:	2b03      	cmp	r3, #3
 8004772:	d106      	bne.n	8004782 <_ProcessBiasMainMenuEvents+0x76>
	{
		// set sweep speed
		eNextState = BiasMenuInputHandler(evYellowBtn);
 8004774:	2003      	movs	r0, #3
 8004776:	f7ff fca7 	bl	80040c8 <BiasMenuInputHandler>
 800477a:	4603      	mov	r3, r0
 800477c:	461a      	mov	r2, r3
 800477e:	4b03      	ldr	r3, [pc, #12]	; (800478c <_ProcessBiasMainMenuEvents+0x80>)
 8004780:	701a      	strb	r2, [r3, #0]
	}
}
 8004782:	bf00      	nop
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	20001e53 	.word	0x20001e53
 800478c:	20001e52 	.word	0x20001e52

08004790 <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	4603      	mov	r3, r0
 8004798:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 800479a:	4a04      	ldr	r2, [pc, #16]	; (80047ac <EM_SetNewEvent+0x1c>)
 800479c:	79fb      	ldrb	r3, [r7, #7]
 800479e:	7013      	strb	r3, [r2, #0]
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr
 80047ac:	20001e53 	.word	0x20001e53

080047b0 <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuEntryHandler captured\n");
	#endif

	DM_RefreshScreen();
 80047b4:	f7fc feda 	bl	800156c <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 80047b8:	4b22      	ldr	r3, [pc, #136]	; (8004844 <FreqSweepMenuEntryHandler+0x94>)
 80047ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047bc:	ee07 3a90 	vmov	s15, r3
 80047c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80047c4:	4b20      	ldr	r3, [pc, #128]	; (8004848 <FreqSweepMenuEntryHandler+0x98>)
 80047c6:	edd3 7a00 	vldr	s15, [r3]
 80047ca:	eeb4 7a67 	vcmp.f32	s14, s15
 80047ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047d2:	d008      	beq.n	80047e6 <FreqSweepMenuEntryHandler+0x36>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 80047d4:	4b1b      	ldr	r3, [pc, #108]	; (8004844 <FreqSweepMenuEntryHandler+0x94>)
 80047d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d8:	ee07 3a90 	vmov	s15, r3
 80047dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047e0:	4b19      	ldr	r3, [pc, #100]	; (8004848 <FreqSweepMenuEntryHandler+0x98>)
 80047e2:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 80047e6:	4b18      	ldr	r3, [pc, #96]	; (8004848 <FreqSweepMenuEntryHandler+0x98>)
 80047e8:	edd3 7a00 	vldr	s15, [r3]
 80047ec:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 80047f0:	eef4 7a47 	vcmp.f32	s15, s14
 80047f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047f8:	d101      	bne.n	80047fe <FreqSweepMenuEntryHandler+0x4e>
	{
		FS_SetSweepModeDown();
 80047fa:	f001 f88f 	bl	800591c <FS_SetSweepModeDown>
	}

	FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 80047fe:	2000      	movs	r0, #0
 8004800:	f001 f8e6 	bl	80059d0 <FS_SetEncoderControlMode>
	FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8004804:	2000      	movs	r0, #0
 8004806:	f001 f943 	bl	8005a90 <FS_SetSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 800480a:	f001 f97d 	bl	8005b08 <FS_GetCalculatedSweepFrequencyInHertz>
 800480e:	eef0 7a40 	vmov.f32	s15, s0
 8004812:	4b0e      	ldr	r3, [pc, #56]	; (800484c <FreqSweepMenuEntryHandler+0x9c>)
 8004814:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 8004818:	4b0d      	ldr	r3, [pc, #52]	; (8004850 <FreqSweepMenuEntryHandler+0xa0>)
 800481a:	2200      	movs	r2, #0
 800481c:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 800481e:	2009      	movs	r0, #9
 8004820:	f000 f81c 	bl	800485c <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 8004824:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <FreqSweepMenuEntryHandler+0xa0>)
 8004826:	f244 12a0 	movw	r2, #16800	; 0x41a0
 800482a:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 800482c:	4b08      	ldr	r3, [pc, #32]	; (8004850 <FreqSweepMenuEntryHandler+0xa0>)
 800482e:	2200      	movs	r2, #0
 8004830:	629a      	str	r2, [r3, #40]	; 0x28



	// get ready to load menu
	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 8004832:	4b08      	ldr	r3, [pc, #32]	; (8004854 <FreqSweepMenuEntryHandler+0xa4>)
 8004834:	2204      	movs	r2, #4
 8004836:	701a      	strb	r2, [r3, #0]


	// stay in this state
	eNewEvent = evIdle;
 8004838:	4b07      	ldr	r3, [pc, #28]	; (8004858 <FreqSweepMenuEntryHandler+0xa8>)
 800483a:	2200      	movs	r2, #0
 800483c:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 800483e:	230d      	movs	r3, #13
}
 8004840:	4618      	mov	r0, r3
 8004842:	bd80      	pop	{r7, pc}
 8004844:	40013400 	.word	0x40013400
 8004848:	20000124 	.word	0x20000124
 800484c:	2000226c 	.word	0x2000226c
 8004850:	40000c00 	.word	0x40000c00
 8004854:	20001e56 	.word	0x20001e56
 8004858:	20001e53 	.word	0x20001e53

0800485c <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b082      	sub	sp, #8
 8004860:	af00      	add	r7, sp, #0
 8004862:	4603      	mov	r3, r0
 8004864:	71fb      	strb	r3, [r7, #7]
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif



	switch(pEvent)
 8004866:	79fb      	ldrb	r3, [r7, #7]
 8004868:	3b07      	subs	r3, #7
 800486a:	2b04      	cmp	r3, #4
 800486c:	f200 80b2 	bhi.w	80049d4 <FreqSweepMenuInputHandler+0x178>
 8004870:	a201      	add	r2, pc, #4	; (adr r2, 8004878 <FreqSweepMenuInputHandler+0x1c>)
 8004872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004876:	bf00      	nop
 8004878:	0800488d 	.word	0x0800488d
 800487c:	080048a7 	.word	0x080048a7
 8004880:	080049c5 	.word	0x080049c5
 8004884:	080049cd 	.word	0x080049cd
 8004888:	080048e1 	.word	0x080048e1
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepEnable captured\n");
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 800488c:	4b56      	ldr	r3, [pc, #344]	; (80049e8 <FreqSweepMenuInputHandler+0x18c>)
 800488e:	68db      	ldr	r3, [r3, #12]
 8004890:	4a55      	ldr	r2, [pc, #340]	; (80049e8 <FreqSweepMenuInputHandler+0x18c>)
 8004892:	f083 0301 	eor.w	r3, r3, #1
 8004896:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 8004898:	4b53      	ldr	r3, [pc, #332]	; (80049e8 <FreqSweepMenuInputHandler+0x18c>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a52      	ldr	r2, [pc, #328]	; (80049e8 <FreqSweepMenuInputHandler+0x18c>)
 800489e:	f083 0301 	eor.w	r3, r3, #1
 80048a2:	6013      	str	r3, [r2, #0]
			break;
 80048a4:	e097      	b.n	80049d6 <FreqSweepMenuInputHandler+0x17a>
			#ifdef EVENT_MENU_DEBUG
				printf("evSweepMode captured\n");
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 80048a6:	4b51      	ldr	r3, [pc, #324]	; (80049ec <FreqSweepMenuInputHandler+0x190>)
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	f083 0301 	eor.w	r3, r3, #1
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	4b4e      	ldr	r3, [pc, #312]	; (80049ec <FreqSweepMenuInputHandler+0x190>)
 80048b2:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 80048b4:	4b4d      	ldr	r3, [pc, #308]	; (80049ec <FreqSweepMenuInputHandler+0x190>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d004      	beq.n	80048c6 <FreqSweepMenuInputHandler+0x6a>
 80048bc:	2b02      	cmp	r3, #2
 80048be:	d008      	beq.n	80048d2 <FreqSweepMenuInputHandler+0x76>
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d003      	beq.n	80048cc <FreqSweepMenuInputHandler+0x70>
 80048c4:	e006      	b.n	80048d4 <FreqSweepMenuInputHandler+0x78>
			{
				case SWEEP_MODE_DOWN:
					FS_SetSweepModeDown();
 80048c6:	f001 f829 	bl	800591c <FS_SetSweepModeDown>
					break;
 80048ca:	e003      	b.n	80048d4 <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_UP:
					FS_SetSweepModeUp();
 80048cc:	f001 f856 	bl	800597c <FS_SetSweepModeUp>
					break;
 80048d0:	e000      	b.n	80048d4 <FreqSweepMenuInputHandler+0x78>

				case SWEEP_MODE_BIDIR:	// not used
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
 80048d2:	bf00      	nop
			}
			// switch(active_sweep_mode)
			// TODO
			FS_SetEncoderControlMode(theCurrentEncoderSweepFunction);
 80048d4:	4b46      	ldr	r3, [pc, #280]	; (80049f0 <FreqSweepMenuInputHandler+0x194>)
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	4618      	mov	r0, r3
 80048da:	f001 f879 	bl	80059d0 <FS_SetEncoderControlMode>

			break;
 80048de:	e07a      	b.n	80049d6 <FreqSweepMenuInputHandler+0x17a>

			#ifdef EVENT_MENU_DEBUG
				printf("evEncoderSweep captured\n");
			#endif

			switch(theCurrentEncoderSweepFunction)
 80048e0:	4b43      	ldr	r3, [pc, #268]	; (80049f0 <FreqSweepMenuInputHandler+0x194>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <FreqSweepMenuInputHandler+0x92>
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d00b      	beq.n	8004904 <FreqSweepMenuInputHandler+0xa8>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 80048ec:	e073      	b.n	80049d6 <FreqSweepMenuInputHandler+0x17a>
					FS_SetSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 80048ee:	2000      	movs	r0, #0
 80048f0:	f001 f8ce 	bl	8005a90 <FS_SetSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = FS_GetCalculatedSweepFrequencyInHertz();
 80048f4:	f001 f908 	bl	8005b08 <FS_GetCalculatedSweepFrequencyInHertz>
 80048f8:	eef0 7a40 	vmov.f32	s15, s0
 80048fc:	4b3d      	ldr	r3, [pc, #244]	; (80049f4 <FreqSweepMenuInputHandler+0x198>)
 80048fe:	edc3 7a00 	vstr	s15, [r3]
					break;
 8004902:	e05e      	b.n	80049c2 <FreqSweepMenuInputHandler+0x166>
					switch(active_sweep_mode)
 8004904:	4b39      	ldr	r3, [pc, #228]	; (80049ec <FreqSweepMenuInputHandler+0x190>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d002      	beq.n	8004912 <FreqSweepMenuInputHandler+0xb6>
 800490c:	2b01      	cmp	r3, #1
 800490e:	d02a      	beq.n	8004966 <FreqSweepMenuInputHandler+0x10a>
							break;
 8004910:	e056      	b.n	80049c0 <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT < MIN_OUTPUT_ARR)
 8004912:	4b39      	ldr	r3, [pc, #228]	; (80049f8 <FreqSweepMenuInputHandler+0x19c>)
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	2b0c      	cmp	r3, #12
 8004918:	d803      	bhi.n	8004922 <FreqSweepMenuInputHandler+0xc6>
								ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 800491a:	4b37      	ldr	r3, [pc, #220]	; (80049f8 <FreqSweepMenuInputHandler+0x19c>)
 800491c:	220d      	movs	r2, #13
 800491e:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004920:	e04e      	b.n	80049c0 <FreqSweepMenuInputHandler+0x164>
							else if (ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8004922:	4b35      	ldr	r3, [pc, #212]	; (80049f8 <FreqSweepMenuInputHandler+0x19c>)
 8004924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004926:	ee07 3a90 	vmov	s15, r3
 800492a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800492e:	4b33      	ldr	r3, [pc, #204]	; (80049fc <FreqSweepMenuInputHandler+0x1a0>)
 8004930:	edd3 7a00 	vldr	s15, [r3]
 8004934:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800493c:	dd09      	ble.n	8004952 <FreqSweepMenuInputHandler+0xf6>
								ENCODER_TIMER->CNT = sweep_upper_bounds_longest_output_arr;
 800493e:	4b2f      	ldr	r3, [pc, #188]	; (80049fc <FreqSweepMenuInputHandler+0x1a0>)
 8004940:	edd3 7a00 	vldr	s15, [r3]
 8004944:	4b2c      	ldr	r3, [pc, #176]	; (80049f8 <FreqSweepMenuInputHandler+0x19c>)
 8004946:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800494a:	ee17 2a90 	vmov	r2, s15
 800494e:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8004950:	e036      	b.n	80049c0 <FreqSweepMenuInputHandler+0x164>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 8004952:	4b29      	ldr	r3, [pc, #164]	; (80049f8 <FreqSweepMenuInputHandler+0x19c>)
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	ee07 3a90 	vmov	s15, r3
 800495a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800495e:	4b28      	ldr	r3, [pc, #160]	; (8004a00 <FreqSweepMenuInputHandler+0x1a4>)
 8004960:	edc3 7a00 	vstr	s15, [r3]
							break;
 8004964:	e02c      	b.n	80049c0 <FreqSweepMenuInputHandler+0x164>
							if(ENCODER_TIMER->CNT >= MAX_OUTPUT_ARR)
 8004966:	4b24      	ldr	r3, [pc, #144]	; (80049f8 <FreqSweepMenuInputHandler+0x19c>)
 8004968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800496a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800496e:	4293      	cmp	r3, r2
 8004970:	d904      	bls.n	800497c <FreqSweepMenuInputHandler+0x120>
								ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8004972:	4b21      	ldr	r3, [pc, #132]	; (80049f8 <FreqSweepMenuInputHandler+0x19c>)
 8004974:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004978:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 800497a:	e020      	b.n	80049be <FreqSweepMenuInputHandler+0x162>
							else if (ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 800497c:	4b1e      	ldr	r3, [pc, #120]	; (80049f8 <FreqSweepMenuInputHandler+0x19c>)
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	ee07 3a90 	vmov	s15, r3
 8004984:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004988:	4b1d      	ldr	r3, [pc, #116]	; (8004a00 <FreqSweepMenuInputHandler+0x1a4>)
 800498a:	edd3 7a00 	vldr	s15, [r3]
 800498e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004996:	d509      	bpl.n	80049ac <FreqSweepMenuInputHandler+0x150>
								ENCODER_TIMER->CNT = sweep_lower_bounds_shortest_output_arr;
 8004998:	4b19      	ldr	r3, [pc, #100]	; (8004a00 <FreqSweepMenuInputHandler+0x1a4>)
 800499a:	edd3 7a00 	vldr	s15, [r3]
 800499e:	4b16      	ldr	r3, [pc, #88]	; (80049f8 <FreqSweepMenuInputHandler+0x19c>)
 80049a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049a4:	ee17 2a90 	vmov	r2, s15
 80049a8:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 80049aa:	e008      	b.n	80049be <FreqSweepMenuInputHandler+0x162>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 80049ac:	4b12      	ldr	r3, [pc, #72]	; (80049f8 <FreqSweepMenuInputHandler+0x19c>)
 80049ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b0:	ee07 3a90 	vmov	s15, r3
 80049b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049b8:	4b10      	ldr	r3, [pc, #64]	; (80049fc <FreqSweepMenuInputHandler+0x1a0>)
 80049ba:	edc3 7a00 	vstr	s15, [r3]
							break;
 80049be:	bf00      	nop
					break;
 80049c0:	bf00      	nop
			break;
 80049c2:	e008      	b.n	80049d6 <FreqSweepMenuInputHandler+0x17a>

		// set sweep speed button
		case evSweepSpeedBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 80049c4:	2000      	movs	r0, #0
 80049c6:	f001 f803 	bl	80059d0 <FS_SetEncoderControlMode>

			break;
 80049ca:	e004      	b.n	80049d6 <FreqSweepMenuInputHandler+0x17a>

		// set sweep limit button
		case evSweepLimitBtn:
			FS_SetEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 80049cc:	2001      	movs	r0, #1
 80049ce:	f000 ffff 	bl	80059d0 <FS_SetEncoderControlMode>
					break;
			}
			*/
			// switch(active_sweep_mode)

			break;
 80049d2:	e000      	b.n	80049d6 <FreqSweepMenuInputHandler+0x17a>

		default:
			break;
 80049d4:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 80049d6:	4b0b      	ldr	r3, [pc, #44]	; (8004a04 <FreqSweepMenuInputHandler+0x1a8>)
 80049d8:	2200      	movs	r2, #0
 80049da:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 80049dc:	230d      	movs	r3, #13
}
 80049de:	4618      	mov	r0, r3
 80049e0:	3708      	adds	r7, #8
 80049e2:	46bd      	mov	sp, r7
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	40000c00 	.word	0x40000c00
 80049ec:	20001e54 	.word	0x20001e54
 80049f0:	20001e55 	.word	0x20001e55
 80049f4:	2000226c 	.word	0x2000226c
 80049f8:	40012c00 	.word	0x40012c00
 80049fc:	20000124 	.word	0x20000124
 8004a00:	20000120 	.word	0x20000120
 8004a04:	20001e53 	.word	0x20001e53

08004a08 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqSweepMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004a0c:	f7fc fdae 	bl	800156c <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 8004a10:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <FreqSweepMenuExitHandler+0x34>)
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	4a09      	ldr	r2, [pc, #36]	; (8004a3c <FreqSweepMenuExitHandler+0x34>)
 8004a16:	f023 0301 	bic.w	r3, r3, #1
 8004a1a:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 8004a1c:	4b07      	ldr	r3, [pc, #28]	; (8004a3c <FreqSweepMenuExitHandler+0x34>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	4a06      	ldr	r2, [pc, #24]	; (8004a3c <FreqSweepMenuExitHandler+0x34>)
 8004a22:	f023 0301 	bic.w	r3, r3, #1
 8004a26:	6013      	str	r3, [r2, #0]



	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004a28:	4b05      	ldr	r3, [pc, #20]	; (8004a40 <FreqSweepMenuExitHandler+0x38>)
 8004a2a:	2201      	movs	r2, #1
 8004a2c:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004a2e:	4b05      	ldr	r3, [pc, #20]	; (8004a44 <FreqSweepMenuExitHandler+0x3c>)
 8004a30:	2200      	movs	r2, #0
 8004a32:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004a34:	230a      	movs	r3, #10
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop
 8004a3c:	40000c00 	.word	0x40000c00
 8004a40:	20001e56 	.word	0x20001e56
 8004a44:	20001e53 	.word	0x20001e53

08004a48 <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004a4c:	f7fc fd8e 	bl	800156c <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004a50:	4b04      	ldr	r3, [pc, #16]	; (8004a64 <FreqMainMenuEntryHandler+0x1c>)
 8004a52:	2201      	movs	r2, #1
 8004a54:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 8004a56:	4b04      	ldr	r3, [pc, #16]	; (8004a68 <FreqMainMenuEntryHandler+0x20>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004a5c:	230a      	movs	r3, #10
}
 8004a5e:	4618      	mov	r0, r3
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20001e56 	.word	0x20001e56
 8004a68:	20001e53 	.word	0x20001e53

08004a6c <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
		printf("FreqMainMenuExitHandler Event captured\n");
	#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 8004a70:	4b07      	ldr	r3, [pc, #28]	; (8004a90 <FreqMainMenuExitHandler+0x24>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8004a76:	4b07      	ldr	r3, [pc, #28]	; (8004a94 <FreqMainMenuExitHandler+0x28>)
 8004a78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004a7c:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 8004a7e:	f7fc fd75 	bl	800156c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004a82:	4b05      	ldr	r3, [pc, #20]	; (8004a98 <FreqMainMenuExitHandler+0x2c>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004a88:	2301      	movs	r3, #1
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	bd80      	pop	{r7, pc}
 8004a8e:	bf00      	nop
 8004a90:	20001e56 	.word	0x20001e56
 8004a94:	40012c00 	.word	0x40012c00
 8004a98:	20001e53 	.word	0x20001e53

08004a9c <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004aa2:	f7fc fd63 	bl	800156c <DM_RefreshScreen>
	FreqO_ResetLastEncoderValue();
 8004aa6:	f000 ff2d 	bl	8005904 <FreqO_ResetLastEncoderValue>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 8004aaa:	4b0e      	ldr	r3, [pc, #56]	; (8004ae4 <FreqPresetMenuEntryHandler+0x48>)
 8004aac:	2202      	movs	r2, #2
 8004aae:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8004ab0:	f000 feda 	bl	8005868 <FreqO_GetFPresetObject>
 8004ab4:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d008      	beq.n	8004ace <FreqPresetMenuEntryHandler+0x32>
	{
		// set rotary encoder limit to full scale and set centre starting position
		ENCODER_TIMER->CNT = 32768;
 8004abc:	4b0a      	ldr	r3, [pc, #40]	; (8004ae8 <FreqPresetMenuEntryHandler+0x4c>)
 8004abe:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004ac2:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004ac4:	4b08      	ldr	r3, [pc, #32]	; (8004ae8 <FreqPresetMenuEntryHandler+0x4c>)
 8004ac6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004aca:	62da      	str	r2, [r3, #44]	; 0x2c
 8004acc:	e002      	b.n	8004ad4 <FreqPresetMenuEntryHandler+0x38>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 8004ace:	4807      	ldr	r0, [pc, #28]	; (8004aec <FreqPresetMenuEntryHandler+0x50>)
 8004ad0:	f7fc fd92 	bl	80015f8 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 8004ad4:	4b06      	ldr	r3, [pc, #24]	; (8004af0 <FreqPresetMenuEntryHandler+0x54>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8004ada:	230b      	movs	r3, #11
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3708      	adds	r7, #8
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	bd80      	pop	{r7, pc}
 8004ae4:	20001e56 	.word	0x20001e56
 8004ae8:	40012c00 	.word	0x40012c00
 8004aec:	08015b50 	.word	0x08015b50
 8004af0:	20001e53 	.word	0x20001e53

08004af4 <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuInputHandler Event captured\n");
	#endif

	FreqO_MapEncoderPositionCoarse(SM_GetEncoderValue(ENCODER_NORMAL));
 8004af8:	2000      	movs	r0, #0
 8004afa:	f002 f877 	bl	8006bec <SM_GetEncoderValue>
 8004afe:	4603      	mov	r3, r0
 8004b00:	4618      	mov	r0, r3
 8004b02:	f000 fd8d 	bl	8005620 <FreqO_MapEncoderPositionCoarse>

	// stay in this state
	eNewEvent = evIdle;
 8004b06:	4b03      	ldr	r3, [pc, #12]	; (8004b14 <FreqPresetMenuInputHandler+0x20>)
 8004b08:	2200      	movs	r2, #0
 8004b0a:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8004b0c:	230b      	movs	r3, #11
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	20001e53 	.word	0x20001e53

08004b18 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPresetMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004b1c:	f7fc fd26 	bl	800156c <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004b20:	4b04      	ldr	r3, [pc, #16]	; (8004b34 <FreqPresetMenuExitHandler+0x1c>)
 8004b22:	2201      	movs	r2, #1
 8004b24:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004b26:	4b04      	ldr	r3, [pc, #16]	; (8004b38 <FreqPresetMenuExitHandler+0x20>)
 8004b28:	2200      	movs	r2, #0
 8004b2a:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004b2c:	230a      	movs	r3, #10
}
 8004b2e:	4618      	mov	r0, r3
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	20001e56 	.word	0x20001e56
 8004b38:	20001e53 	.word	0x20001e53

08004b3c <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004b40:	f7fc fd14 	bl	800156c <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 8004b44:	4b08      	ldr	r3, [pc, #32]	; (8004b68 <FreqAdjustMenuEntryHandler+0x2c>)
 8004b46:	2203      	movs	r2, #3
 8004b48:	701a      	strb	r2, [r3, #0]

	// set rotary encoder limit to full scale and set OUTPUT_TIMER "TOP" starting position
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8004b4a:	4b08      	ldr	r3, [pc, #32]	; (8004b6c <FreqAdjustMenuEntryHandler+0x30>)
 8004b4c:	4a08      	ldr	r2, [pc, #32]	; (8004b70 <FreqAdjustMenuEntryHandler+0x34>)
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004b52:	4b07      	ldr	r3, [pc, #28]	; (8004b70 <FreqAdjustMenuEntryHandler+0x34>)
 8004b54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004b58:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8004b5a:	4b06      	ldr	r3, [pc, #24]	; (8004b74 <FreqAdjustMenuEntryHandler+0x38>)
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004b60:	230c      	movs	r3, #12
}
 8004b62:	4618      	mov	r0, r3
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	20001e56 	.word	0x20001e56
 8004b6c:	40013400 	.word	0x40013400
 8004b70:	40012c00 	.word	0x40012c00
 8004b74:	20001e53 	.word	0x20001e53

08004b78 <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuInputHandler Event captured\n");
	#endif

	FreqO_AdjustFreq();
 8004b7c:	f000 fe20 	bl	80057c0 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 8004b80:	4b02      	ldr	r3, [pc, #8]	; (8004b8c <FreqAdjustMenuInputHandler+0x14>)
 8004b82:	2200      	movs	r2, #0
 8004b84:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8004b86:	230c      	movs	r3, #12
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	20001e53 	.word	0x20001e53

08004b90 <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqAdjustMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004b94:	f7fc fcea 	bl	800156c <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004b98:	4b04      	ldr	r3, [pc, #16]	; (8004bac <FreqAdjustMenuExitHandler+0x1c>)
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004b9e:	4b04      	ldr	r3, [pc, #16]	; (8004bb0 <FreqAdjustMenuExitHandler+0x20>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004ba4:	230a      	movs	r3, #10
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20001e56 	.word	0x20001e56
 8004bb0:	20001e53 	.word	0x20001e53

08004bb4 <FreqPrescalerMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuEntryHandler()
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004bb8:	f7fc fcd8 	bl	800156c <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESCALER_MENU;
 8004bbc:	4b08      	ldr	r3, [pc, #32]	; (8004be0 <FreqPrescalerMenuEntryHandler+0x2c>)
 8004bbe:	2205      	movs	r2, #5
 8004bc0:	701a      	strb	r2, [r3, #0]

	// set rotary encoder limit to full scale and midway starting position
	ENCODER_TIMER->CNT = 32768;
 8004bc2:	4b08      	ldr	r3, [pc, #32]	; (8004be4 <FreqPrescalerMenuEntryHandler+0x30>)
 8004bc4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004bc8:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004bca:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <FreqPrescalerMenuEntryHandler+0x30>)
 8004bcc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bd0:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8004bd2:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <FreqPrescalerMenuEntryHandler+0x34>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	701a      	strb	r2, [r3, #0]
	return Freq_Prescaler_Menu_State;
 8004bd8:	230e      	movs	r3, #14
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	20001e56 	.word	0x20001e56
 8004be4:	40012c00 	.word	0x40012c00
 8004be8:	20001e53 	.word	0x20001e53

08004bec <FreqPrescalerMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuInputHandler()
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuInputHandler Event captured\n");
	#endif

	FreqO_AdjustPrescaler();
 8004bf0:	f000 fe12 	bl	8005818 <FreqO_AdjustPrescaler>

	// stay in this state
	eNewEvent = evIdle;
 8004bf4:	4b02      	ldr	r3, [pc, #8]	; (8004c00 <FreqPrescalerMenuInputHandler+0x14>)
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	701a      	strb	r2, [r3, #0]
	return Freq_Prescaler_Menu_State;
 8004bfa:	230e      	movs	r3, #14
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	bd80      	pop	{r7, pc}
 8004c00:	20001e53 	.word	0x20001e53

08004c04 <FreqPrescalerMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPrescalerMenuExitHandler()
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FreqPrescalerMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004c08:	f7fc fcb0 	bl	800156c <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8004c0c:	4b04      	ldr	r3, [pc, #16]	; (8004c20 <FreqPrescalerMenuExitHandler+0x1c>)
 8004c0e:	2201      	movs	r2, #1
 8004c10:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004c12:	4b04      	ldr	r3, [pc, #16]	; (8004c24 <FreqPrescalerMenuExitHandler+0x20>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8004c18:	230a      	movs	r3, #10
}
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	20001e56 	.word	0x20001e56
 8004c24:	20001e53 	.word	0x20001e53

08004c28 <FreqMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eFreqMenu_Status FreqMenu_getStatus()
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 8004c2c:	4b03      	ldr	r3, [pc, #12]	; (8004c3c <FreqMenu_getStatus+0x14>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	46bd      	mov	sp, r7
 8004c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c38:	4770      	bx	lr
 8004c3a:	bf00      	nop
 8004c3c:	20001e56 	.word	0x20001e56

08004c40 <FuncMenu_getStatus>:
eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;



eFuncMenu_Status FuncMenu_getStatus()
{
 8004c40:	b480      	push	{r7}
 8004c42:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 8004c44:	4b03      	ldr	r3, [pc, #12]	; (8004c54 <FuncMenu_getStatus+0x14>)
 8004c46:	781b      	ldrb	r3, [r3, #0]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	20001e57 	.word	0x20001e57

08004c58 <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 8004c58:	b580      	push	{r7, lr}
 8004c5a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004c5c:	f7fc fc86 	bl	800156c <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004c60:	4b04      	ldr	r3, [pc, #16]	; (8004c74 <FuncMainMenuEntryHandler+0x1c>)
 8004c62:	2201      	movs	r2, #1
 8004c64:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 8004c66:	4b04      	ldr	r3, [pc, #16]	; (8004c78 <FuncMainMenuEntryHandler+0x20>)
 8004c68:	2200      	movs	r2, #0
 8004c6a:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004c6c:	2303      	movs	r3, #3
}
 8004c6e:	4618      	mov	r0, r3
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	20001e57 	.word	0x20001e57
 8004c78:	20001e53 	.word	0x20001e53

08004c7c <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncMainMenuExitHandler Event captured\n");
	#endif

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 8004c80:	4b06      	ldr	r3, [pc, #24]	; (8004c9c <FuncMainMenuExitHandler+0x20>)
 8004c82:	2200      	movs	r2, #0
 8004c84:	701a      	strb	r2, [r3, #0]

	// reset the encoder range
	ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8004c86:	2002      	movs	r0, #2
 8004c88:	f000 f9f6 	bl	8005078 <ToplevelMenu_setStatus>

	DM_RefreshScreen();
 8004c8c:	f7fc fc6e 	bl	800156c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004c90:	4b03      	ldr	r3, [pc, #12]	; (8004ca0 <FuncMainMenuExitHandler+0x24>)
 8004c92:	2200      	movs	r2, #0
 8004c94:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004c96:	2301      	movs	r3, #1
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	20001e57 	.word	0x20001e57
 8004ca0:	20001e53 	.word	0x20001e53

08004ca4 <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004ca8:	f7fc fc60 	bl	800156c <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004cac:	f000 ff5a 	bl	8005b64 <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 8004cb0:	4b08      	ldr	r3, [pc, #32]	; (8004cd4 <FuncSignalMenuEntryHandler+0x30>)
 8004cb2:	2202      	movs	r2, #2
 8004cb4:	701a      	strb	r2, [r3, #0]
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/

	ENCODER_TIMER->CNT = 32768;
 8004cb6:	4b08      	ldr	r3, [pc, #32]	; (8004cd8 <FuncSignalMenuEntryHandler+0x34>)
 8004cb8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004cbc:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004cbe:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <FuncSignalMenuEntryHandler+0x34>)
 8004cc0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004cc4:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 8004cc6:	4b05      	ldr	r3, [pc, #20]	; (8004cdc <FuncSignalMenuEntryHandler+0x38>)
 8004cc8:	2200      	movs	r2, #0
 8004cca:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004ccc:	2304      	movs	r3, #4
}
 8004cce:	4618      	mov	r0, r3
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	20001e57 	.word	0x20001e57
 8004cd8:	40012c00 	.word	0x40012c00
 8004cdc:	20001e53 	.word	0x20001e53

08004ce0 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncSignalMenuInputHandler Event captured\n");
	#endif


	FuncO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	f001 ff81 	bl	8006bec <SM_GetEncoderValue>
 8004cea:	4603      	mov	r3, r0
 8004cec:	4618      	mov	r0, r3
 8004cee:	f000 ff45 	bl	8005b7c <FuncO_MapEncoderPositionToSignalOutput>


	eNewEvent = evIdle;
 8004cf2:	4b03      	ldr	r3, [pc, #12]	; (8004d00 <FuncSignalMenuInputHandler+0x20>)
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 8004cf8:	2304      	movs	r3, #4
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	20001e53 	.word	0x20001e53

08004d04 <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	af00      	add	r7, sp, #0
		printf("FuncSignalMenuExitHandler Event captured\n");
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004d08:	4b06      	ldr	r3, [pc, #24]	; (8004d24 <FuncSignalMenuExitHandler+0x20>)
 8004d0a:	2201      	movs	r2, #1
 8004d0c:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004d0e:	f7fc fc2d 	bl	800156c <DM_RefreshScreen>
	SM_ResetFuncPwmDutyMode();
 8004d12:	f002 f80d 	bl	8006d30 <SM_ResetFuncPwmDutyMode>
	eNewEvent = evIdle;
 8004d16:	4b04      	ldr	r3, [pc, #16]	; (8004d28 <FuncSignalMenuExitHandler+0x24>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004d1c:	2303      	movs	r3, #3
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	20001e57 	.word	0x20001e57
 8004d28:	20001e53 	.word	0x20001e53

08004d2c <FuncAuxMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuEntryHandler(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004d30:	f7fc fc1c 	bl	800156c <DM_RefreshScreen>
	FuncO_ResetLastEncoderValue();
 8004d34:	f000 ff16 	bl	8005b64 <FuncO_ResetLastEncoderValue>

	eNextFuncMenuStatus = 	ENABLE_FUNC_Aux_MENU;
 8004d38:	4b08      	ldr	r3, [pc, #32]	; (8004d5c <FuncAuxMenuEntryHandler+0x30>)
 8004d3a:	2203      	movs	r2, #3
 8004d3c:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
	*/
	ENCODER_TIMER->CNT = 32768;
 8004d3e:	4b08      	ldr	r3, [pc, #32]	; (8004d60 <FuncAuxMenuEntryHandler+0x34>)
 8004d40:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004d44:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8004d46:	4b06      	ldr	r3, [pc, #24]	; (8004d60 <FuncAuxMenuEntryHandler+0x34>)
 8004d48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004d4c:	62da      	str	r2, [r3, #44]	; 0x2c

	eNewEvent = evIdle;
 8004d4e:	4b05      	ldr	r3, [pc, #20]	; (8004d64 <FuncAuxMenuEntryHandler+0x38>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8004d54:	2305      	movs	r3, #5
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	bd80      	pop	{r7, pc}
 8004d5a:	bf00      	nop
 8004d5c:	20001e57 	.word	0x20001e57
 8004d60:	40012c00 	.word	0x40012c00
 8004d64:	20001e53 	.word	0x20001e53

08004d68 <FuncAuxMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuInputHandler(void)
{
 8004d68:	b590      	push	{r4, r7, lr}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("FuncAuxMenuInputHandler Event captured\n");
	#endif

	// PWM ADJUST
	if(SM_IsFuncPwmDutyMode())
 8004d6e:	f001 ffc3 	bl	8006cf8 <SM_IsFuncPwmDutyMode>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d01a      	beq.n	8004dae <FuncAuxMenuInputHandler+0x46>
	{
		uint16_t enc_value = SM_GetEncoderValue(ENCODER_NORMAL);
 8004d78:	2000      	movs	r0, #0
 8004d7a:	f001 ff37 	bl	8006bec <SM_GetEncoderValue>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	80fb      	strh	r3, [r7, #6]
		PWM_AUX_OUT_TIM->CCR1 = (pow(enc_value, 2));
 8004d82:	88fb      	ldrh	r3, [r7, #6]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7fb fbe5 	bl	8000554 <__aeabi_ui2d>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	460c      	mov	r4, r1
 8004d8e:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8004dd0 <FuncAuxMenuInputHandler+0x68>
 8004d92:	ec44 3b10 	vmov	d0, r3, r4
 8004d96:	f00f f9bb 	bl	8014110 <pow>
 8004d9a:	ec53 2b10 	vmov	r2, r3, d0
 8004d9e:	4c0e      	ldr	r4, [pc, #56]	; (8004dd8 <FuncAuxMenuInputHandler+0x70>)
 8004da0:	4610      	mov	r0, r2
 8004da2:	4619      	mov	r1, r3
 8004da4:	f7fb ff28 	bl	8000bf8 <__aeabi_d2uiz>
 8004da8:	4603      	mov	r3, r0
 8004daa:	6363      	str	r3, [r4, #52]	; 0x34
 8004dac:	e006      	b.n	8004dbc <FuncAuxMenuInputHandler+0x54>
		//BO_SetPwmSignalOffsetForDuty(BO_GetOutputBias() + SM_GetEncoderValue(ENCODER_NORMAL));

	}
	else
	{
		FuncO_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004dae:	2000      	movs	r0, #0
 8004db0:	f001 ff1c 	bl	8006bec <SM_GetEncoderValue>
 8004db4:	4603      	mov	r3, r0
 8004db6:	4618      	mov	r0, r3
 8004db8:	f000 ff1a 	bl	8005bf0 <FuncO_MapEncoderPositionToAuxOutput>
	}

	eNewEvent = evIdle;
 8004dbc:	4b07      	ldr	r3, [pc, #28]	; (8004ddc <FuncAuxMenuInputHandler+0x74>)
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8004dc2:	2305      	movs	r3, #5
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd90      	pop	{r4, r7, pc}
 8004dcc:	f3af 8000 	nop.w
 8004dd0:	00000000 	.word	0x00000000
 8004dd4:	40000000 	.word	0x40000000
 8004dd8:	40000400 	.word	0x40000400
 8004ddc:	20001e53 	.word	0x20001e53

08004de0 <FuncAuxToggleDutyMode>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FuncAuxToggleDutyMode()
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	af00      	add	r7, sp, #0
	SM_ToggleFuncPwmDutyMode();
 8004de4:	f001 ff94 	bl	8006d10 <SM_ToggleFuncPwmDutyMode>
	ENCODER_TIMER->ARR = 16384;
 8004de8:	4b04      	ldr	r3, [pc, #16]	; (8004dfc <FuncAuxToggleDutyMode+0x1c>)
 8004dea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004dee:	62da      	str	r2, [r3, #44]	; 0x2c
	eNewEvent = evIdle;
 8004df0:	4b03      	ldr	r3, [pc, #12]	; (8004e00 <FuncAuxToggleDutyMode+0x20>)
 8004df2:	2200      	movs	r2, #0
 8004df4:	701a      	strb	r2, [r3, #0]
	return Func_Aux_Menu_State;
 8004df6:	2305      	movs	r3, #5
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	40012c00 	.word	0x40012c00
 8004e00:	20001e53 	.word	0x20001e53

08004e04 <FuncAuxMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncAuxMenuExitHandler()
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
		printf("FuncAuxMenuExitHandler Event captured\n");
	#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 8004e08:	4b06      	ldr	r3, [pc, #24]	; (8004e24 <FuncAuxMenuExitHandler+0x20>)
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;
	SM_ResetFuncPwmDutyMode();
 8004e0e:	f001 ff8f 	bl	8006d30 <SM_ResetFuncPwmDutyMode>
	DM_RefreshScreen();
 8004e12:	f7fc fbab 	bl	800156c <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004e16:	4b04      	ldr	r3, [pc, #16]	; (8004e28 <FuncAuxMenuExitHandler+0x24>)
 8004e18:	2200      	movs	r2, #0
 8004e1a:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8004e1c:	2303      	movs	r3, #3
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	bd80      	pop	{r7, pc}
 8004e22:	bf00      	nop
 8004e24:	20001e57 	.word	0x20001e57
 8004e28:	20001e53 	.word	0x20001e53

08004e2c <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 8004e30:	4b03      	ldr	r3, [pc, #12]	; (8004e40 <GainMenu_getStatus+0x14>)
 8004e32:	781b      	ldrb	r3, [r3, #0]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	20001e58 	.word	0x20001e58

08004e44 <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004e48:	f7fc fb90 	bl	800156c <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004e4c:	4b04      	ldr	r3, [pc, #16]	; (8004e60 <GainMainMenuEntryHandler+0x1c>)
 8004e4e:	2201      	movs	r2, #1
 8004e50:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 8004e52:	4b04      	ldr	r3, [pc, #16]	; (8004e64 <GainMainMenuEntryHandler+0x20>)
 8004e54:	2200      	movs	r2, #0
 8004e56:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004e58:	2306      	movs	r3, #6
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	bd80      	pop	{r7, pc}
 8004e5e:	bf00      	nop
 8004e60:	20001e58 	.word	0x20001e58
 8004e64:	20001e53 	.word	0x20001e53

08004e68 <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainMainMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 8004e6c:	4b05      	ldr	r3, [pc, #20]	; (8004e84 <GainMainMenuExitHandler+0x1c>)
 8004e6e:	2200      	movs	r2, #0
 8004e70:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004e72:	f7fc fb7b 	bl	800156c <DM_RefreshScreen>

	#ifdef EVENT_MENU_DEBUG
		  printf("returning to Idle State\n");
	#endif

	eNewEvent = evIdle;
 8004e76:	4b04      	ldr	r3, [pc, #16]	; (8004e88 <GainMainMenuExitHandler+0x20>)
 8004e78:	2200      	movs	r2, #0
 8004e7a:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004e7c:	2301      	movs	r3, #1
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	20001e58 	.word	0x20001e58
 8004e88:	20001e53 	.word	0x20001e53

08004e8c <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004e92:	f7fc fb6b 	bl	800156c <DM_RefreshScreen>
	GO_ResetLastEncoderValue();
 8004e96:	f001 f8a1 	bl	8005fdc <GO_ResetLastEncoderValue>
	VPP_ResetLastEncoderValue();
 8004e9a:	f001 ff55 	bl	8006d48 <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 8004e9e:	4b10      	ldr	r3, [pc, #64]	; (8004ee0 <GainSignalMenuEntryHandler+0x54>)
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8004ea4:	2000      	movs	r0, #0
 8004ea6:	f001 fc25 	bl	80066f4 <SM_GetOutputChannel>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004eb0:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d008      	beq.n	8004eca <GainSignalMenuEntryHandler+0x3e>
	{
		//ENCODER_TIMER->CNT = pTmpVppPreset->epos;
		//ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;

		// set to full range and mid starting position
		ENCODER_TIMER->CNT = 32768;
 8004eb8:	4b0a      	ldr	r3, [pc, #40]	; (8004ee4 <GainSignalMenuEntryHandler+0x58>)
 8004eba:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004ebe:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004ec0:	4b08      	ldr	r3, [pc, #32]	; (8004ee4 <GainSignalMenuEntryHandler+0x58>)
 8004ec2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ec6:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ec8:	e002      	b.n	8004ed0 <GainSignalMenuEntryHandler+0x44>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004eca:	4807      	ldr	r0, [pc, #28]	; (8004ee8 <GainSignalMenuEntryHandler+0x5c>)
 8004ecc:	f7fc fb94 	bl	80015f8 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004ed0:	4b06      	ldr	r3, [pc, #24]	; (8004eec <GainSignalMenuEntryHandler+0x60>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004ed6:	2307      	movs	r3, #7
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}
 8004ee0:	20001e58 	.word	0x20001e58
 8004ee4:	40012c00 	.word	0x40012c00
 8004ee8:	08015b8c 	.word	0x08015b8c
 8004eec:	20001e53 	.word	0x20001e53

08004ef0 <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler(eSystemEvent pEvent)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuInputHandler Event captured\n");
	#endif


	FunctionProfile_t *tmpFuncProfile = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 8004efa:	2000      	movs	r0, #0
 8004efc:	f001 fbfa 	bl	80066f4 <SM_GetOutputChannel>
 8004f00:	4603      	mov	r3, r0
 8004f02:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004f06:	60fb      	str	r3, [r7, #12]

	switch(pEvent)
 8004f08:	79fb      	ldrb	r3, [r7, #7]
 8004f0a:	3b01      	subs	r3, #1
 8004f0c:	2b04      	cmp	r3, #4
 8004f0e:	d834      	bhi.n	8004f7a <GainSignalMenuInputHandler+0x8a>
 8004f10:	a201      	add	r2, pc, #4	; (adr r2, 8004f18 <GainSignalMenuInputHandler+0x28>)
 8004f12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f16:	bf00      	nop
 8004f18:	08004f5b 	.word	0x08004f5b
 8004f1c:	08004f63 	.word	0x08004f63
 8004f20:	08004f6b 	.word	0x08004f6b
 8004f24:	08004f73 	.word	0x08004f73
 8004f28:	08004f2d 	.word	0x08004f2d
	{
		case evEncoderSet:

			if(tmpFuncProfile)
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d025      	beq.n	8004f7e <GainSignalMenuInputHandler+0x8e>
			{
				if(tmpFuncProfile->func == PWM_FUNC_MODE)
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	2b06      	cmp	r3, #6
 8004f38:	d107      	bne.n	8004f4a <GainSignalMenuInputHandler+0x5a>
				{
					GO_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_INVERSE));
 8004f3a:	2001      	movs	r0, #1
 8004f3c:	f001 fe56 	bl	8006bec <SM_GetEncoderValue>
 8004f40:	4603      	mov	r3, r0
 8004f42:	4618      	mov	r0, r3
 8004f44:	f001 f856 	bl	8005ff4 <GO_MapEncoderPositionToSignalOutput>
				else
				{
					VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
				}
			}
			break;
 8004f48:	e019      	b.n	8004f7e <GainSignalMenuInputHandler+0x8e>
					VPP_MapEncoderPositionToSignalOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 8004f4a:	2000      	movs	r0, #0
 8004f4c:	f001 fe4e 	bl	8006bec <SM_GetEncoderValue>
 8004f50:	4603      	mov	r3, r0
 8004f52:	4618      	mov	r0, r3
 8004f54:	f002 f86a 	bl	800702c <VPP_MapEncoderPositionToSignalOutput>
			break;
 8004f58:	e011      	b.n	8004f7e <GainSignalMenuInputHandler+0x8e>

		case evBlueBtn:
			VPP_ApplyProfileToSignal(VPP18);
 8004f5a:	2011      	movs	r0, #17
 8004f5c:	f001 ff00 	bl	8006d60 <VPP_ApplyProfileToSignal>
			break;
 8004f60:	e00e      	b.n	8004f80 <GainSignalMenuInputHandler+0x90>

		case evGreenBtn:
			VPP_ApplyProfileToSignal(VPP33);
 8004f62:	2020      	movs	r0, #32
 8004f64:	f001 fefc 	bl	8006d60 <VPP_ApplyProfileToSignal>
			break;
 8004f68:	e00a      	b.n	8004f80 <GainSignalMenuInputHandler+0x90>

		case evYellowBtn:
			VPP_ApplyProfileToSignal(VPP50);
 8004f6a:	2031      	movs	r0, #49	; 0x31
 8004f6c:	f001 fef8 	bl	8006d60 <VPP_ApplyProfileToSignal>
			break;
 8004f70:	e006      	b.n	8004f80 <GainSignalMenuInputHandler+0x90>

		case evRedBtn:
			VPP_ApplyProfileToSignal(VPP90);
 8004f72:	2059      	movs	r0, #89	; 0x59
 8004f74:	f001 fef4 	bl	8006d60 <VPP_ApplyProfileToSignal>
			break;
 8004f78:	e002      	b.n	8004f80 <GainSignalMenuInputHandler+0x90>

		default:
			break;
 8004f7a:	bf00      	nop
 8004f7c:	e000      	b.n	8004f80 <GainSignalMenuInputHandler+0x90>
			break;
 8004f7e:	bf00      	nop
	}

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_INVERSE));
	//

	eNewEvent = evIdle;
 8004f80:	4b03      	ldr	r3, [pc, #12]	; (8004f90 <GainSignalMenuInputHandler+0xa0>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8004f86:	2307      	movs	r3, #7
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3710      	adds	r7, #16
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	20001e53 	.word	0x20001e53

08004f94 <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainSignalMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8004f98:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <GainSignalMenuExitHandler+0x1c>)
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8004f9e:	f7fc fae5 	bl	800156c <DM_RefreshScreen>

	eNewEvent = evIdle;
 8004fa2:	4b04      	ldr	r3, [pc, #16]	; (8004fb4 <GainSignalMenuExitHandler+0x20>)
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8004fa8:	2306      	movs	r3, #6
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	20001e58 	.word	0x20001e58
 8004fb4:	20001e53 	.word	0x20001e53

08004fb8 <GainAuxMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuEntryHandler()
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b082      	sub	sp, #8
 8004fbc:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 8004fbe:	f7fc fad5 	bl	800156c <DM_RefreshScreen>
	VPP_ResetLastEncoderValue();
 8004fc2:	f001 fec1 	bl	8006d48 <VPP_ResetLastEncoderValue>

	eNextGainMenuStatus = ENABLE_GAIN_Aux_MENU;
 8004fc6:	4b10      	ldr	r3, [pc, #64]	; (8005008 <GainAuxMenuEntryHandler+0x50>)
 8004fc8:	2203      	movs	r2, #3
 8004fca:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile;
 8004fcc:	2001      	movs	r0, #1
 8004fce:	f001 fb91 	bl	80066f4 <SM_GetOutputChannel>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004fd8:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d008      	beq.n	8004ff2 <GainAuxMenuEntryHandler+0x3a>
	{
		//ENCODER_TIMER->CNT = pTmpVppPreset->epos;
		//ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;

		// set to full range and mid starting position
		ENCODER_TIMER->CNT = 32768;
 8004fe0:	4b0a      	ldr	r3, [pc, #40]	; (800500c <GainAuxMenuEntryHandler+0x54>)
 8004fe2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004fe6:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = 65535;
 8004fe8:	4b08      	ldr	r3, [pc, #32]	; (800500c <GainAuxMenuEntryHandler+0x54>)
 8004fea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004fee:	62da      	str	r2, [r3, #44]	; 0x2c
 8004ff0:	e002      	b.n	8004ff8 <GainAuxMenuEntryHandler+0x40>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004ff2:	4807      	ldr	r0, [pc, #28]	; (8005010 <GainAuxMenuEntryHandler+0x58>)
 8004ff4:	f7fc fb00 	bl	80015f8 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004ff8:	4b06      	ldr	r3, [pc, #24]	; (8005014 <GainAuxMenuEntryHandler+0x5c>)
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8004ffe:	2308      	movs	r3, #8
}
 8005000:	4618      	mov	r0, r3
 8005002:	3708      	adds	r7, #8
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	20001e58 	.word	0x20001e58
 800500c:	40012c00 	.word	0x40012c00
 8005010:	08015b8c 	.word	0x08015b8c
 8005014:	20001e53 	.word	0x20001e53

08005018 <GainAuxMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuInputHandler()
{
 8005018:	b580      	push	{r7, lr}
 800501a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuInputHandler Event captured\n");
	#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_INVERSE));
	VPP_MapEncoderPositionToAuxOutput(SM_GetEncoderValue(ENCODER_NORMAL));
 800501c:	2000      	movs	r0, #0
 800501e:	f001 fde5 	bl	8006bec <SM_GetEncoderValue>
 8005022:	4603      	mov	r3, r0
 8005024:	4618      	mov	r0, r3
 8005026:	f002 f83b 	bl	80070a0 <VPP_MapEncoderPositionToAuxOutput>

	eNewEvent = evYellowBtn;
 800502a:	4b03      	ldr	r3, [pc, #12]	; (8005038 <GainAuxMenuInputHandler+0x20>)
 800502c:	2203      	movs	r2, #3
 800502e:	701a      	strb	r2, [r3, #0]
	return Gain_Aux_Menu_State;
 8005030:	2308      	movs	r3, #8
}
 8005032:	4618      	mov	r0, r3
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	20001e53 	.word	0x20001e53

0800503c <GainAuxMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainAuxMenuExitHandler()
{
 800503c:	b580      	push	{r7, lr}
 800503e:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("GainAuxMenuExitHandler Event captured\n");
	#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8005040:	4b05      	ldr	r3, [pc, #20]	; (8005058 <GainAuxMenuExitHandler+0x1c>)
 8005042:	2201      	movs	r2, #1
 8005044:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8005046:	f7fc fa91 	bl	800156c <DM_RefreshScreen>

	eNewEvent = evIdle;
 800504a:	4b04      	ldr	r3, [pc, #16]	; (800505c <GainAuxMenuExitHandler+0x20>)
 800504c:	2200      	movs	r2, #0
 800504e:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8005050:	2306      	movs	r3, #6
}
 8005052:	4618      	mov	r0, r3
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	20001e58 	.word	0x20001e58
 800505c:	20001e53 	.word	0x20001e53

08005060 <ToplevelMenu_getStatus>:
eToplevelMenu_Status eNextToplevelMenuStatus = 	ENABLE_TOPLEVEL_MAIN_MENU;



eToplevelMenu_Status ToplevelMenu_getStatus()
{
 8005060:	b480      	push	{r7}
 8005062:	af00      	add	r7, sp, #0
	return eNextToplevelMenuStatus;
 8005064:	4b03      	ldr	r3, [pc, #12]	; (8005074 <ToplevelMenu_getStatus+0x14>)
 8005066:	781b      	ldrb	r3, [r3, #0]
}
 8005068:	4618      	mov	r0, r3
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr
 8005072:	bf00      	nop
 8005074:	20000000 	.word	0x20000000

08005078 <ToplevelMenu_setStatus>:

void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
 8005078:	b480      	push	{r7}
 800507a:	b083      	sub	sp, #12
 800507c:	af00      	add	r7, sp, #0
 800507e:	4603      	mov	r3, r0
 8005080:	71fb      	strb	r3, [r7, #7]
	eNextToplevelMenuStatus = pStatus;
 8005082:	4a04      	ldr	r2, [pc, #16]	; (8005094 <ToplevelMenu_setStatus+0x1c>)
 8005084:	79fb      	ldrb	r3, [r7, #7]
 8005086:	7013      	strb	r3, [r2, #0]
}
 8005088:	bf00      	nop
 800508a:	370c      	adds	r7, #12
 800508c:	46bd      	mov	sp, r7
 800508e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005092:	4770      	bx	lr
 8005094:	20000000 	.word	0x20000000

08005098 <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 800509c:	f7fc fa66 	bl	800156c <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_OUTPUT_MENU;
 80050a0:	4b04      	ldr	r3, [pc, #16]	; (80050b4 <ToplevelOutputMenuEntryHandler+0x1c>)
 80050a2:	2202      	movs	r2, #2
 80050a4:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 80050a6:	4b04      	ldr	r3, [pc, #16]	; (80050b8 <ToplevelOutputMenuEntryHandler+0x20>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 80050ac:	2301      	movs	r3, #1
}
 80050ae:	4618      	mov	r0, r3
 80050b0:	bd80      	pop	{r7, pc}
 80050b2:	bf00      	nop
 80050b4:	20000000 	.word	0x20000000
 80050b8:	20001e53 	.word	0x20001e53

080050bc <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelOutputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80050c0:	f7fc fa54 	bl	800156c <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 80050c4:	4b04      	ldr	r3, [pc, #16]	; (80050d8 <ToplevelOutputMenuExitHandler+0x1c>)
 80050c6:	2201      	movs	r2, #1
 80050c8:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 80050ca:	4b04      	ldr	r3, [pc, #16]	; (80050dc <ToplevelOutputMenuExitHandler+0x20>)
 80050cc:	2200      	movs	r2, #0
 80050ce:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	20000000 	.word	0x20000000
 80050dc:	20001e53 	.word	0x20001e53

080050e0 <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuEntryHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 80050e4:	f7fc fa42 	bl	800156c <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_INPUT_MENU;
 80050e8:	4b04      	ldr	r3, [pc, #16]	; (80050fc <ToplevelInputMenuEntryHandler+0x1c>)
 80050ea:	2203      	movs	r2, #3
 80050ec:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 80050ee:	4b04      	ldr	r3, [pc, #16]	; (8005100 <ToplevelInputMenuEntryHandler+0x20>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 80050f4:	2302      	movs	r3, #2
}
 80050f6:	4618      	mov	r0, r3
 80050f8:	bd80      	pop	{r7, pc}
 80050fa:	bf00      	nop
 80050fc:	20000000 	.word	0x20000000
 8005100:	20001e53 	.word	0x20001e53

08005104 <ToplevelInputMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuInputHandler(eSystemEvent pEvent)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	4603      	mov	r3, r0
 800510c:	71fb      	strb	r3, [r7, #7]
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuInputHandler Event captured\n");
	#endif


		switch(pEvent)
 800510e:	79fb      	ldrb	r3, [r7, #7]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d002      	beq.n	800511a <ToplevelInputMenuInputHandler+0x16>
 8005114:	2b02      	cmp	r3, #2
 8005116:	d003      	beq.n	8005120 <ToplevelInputMenuInputHandler+0x1c>
				// re-enable the trigger input for new mode
				ToplevelInputMenuInputHandler(evBlueBtn);
				break;

			default:
				break;
 8005118:	e00b      	b.n	8005132 <ToplevelInputMenuInputHandler+0x2e>
				IT_ArbitrateInputTrigger();
 800511a:	f001 f857 	bl	80061cc <IT_ArbitrateInputTrigger>
				break;
 800511e:	e008      	b.n	8005132 <ToplevelInputMenuInputHandler+0x2e>
				IT_CycleInputTriggerMode();
 8005120:	f001 f904 	bl	800632c <IT_CycleInputTriggerMode>
				ToplevelInputMenuInputHandler(evBlueBtn);
 8005124:	2001      	movs	r0, #1
 8005126:	f7ff ffed 	bl	8005104 <ToplevelInputMenuInputHandler>
				ToplevelInputMenuInputHandler(evBlueBtn);
 800512a:	2001      	movs	r0, #1
 800512c:	f7ff ffea 	bl	8005104 <ToplevelInputMenuInputHandler>
				break;
 8005130:	bf00      	nop
		}
	// stay in this menu state
	eNewEvent = evIdle;
 8005132:	4b04      	ldr	r3, [pc, #16]	; (8005144 <ToplevelInputMenuInputHandler+0x40>)
 8005134:	2200      	movs	r2, #0
 8005136:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 8005138:	2302      	movs	r3, #2
}
 800513a:	4618      	mov	r0, r3
 800513c:	3708      	adds	r7, #8
 800513e:	46bd      	mov	sp, r7
 8005140:	bd80      	pop	{r7, pc}
 8005142:	bf00      	nop
 8005144:	20001e53 	.word	0x20001e53

08005148 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 8005148:	b580      	push	{r7, lr}
 800514a:	af00      	add	r7, sp, #0
	#ifdef EVENT_MENU_DEBUG
		printf("ToplevelInputMenuExitHandler Event captured\n");
	#endif

	DM_RefreshScreen();
 800514c:	f7fc fa0e 	bl	800156c <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8005150:	4b04      	ldr	r3, [pc, #16]	; (8005164 <ToplevelInputMenuExitHandler+0x1c>)
 8005152:	2201      	movs	r2, #1
 8005154:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8005156:	4b04      	ldr	r3, [pc, #16]	; (8005168 <ToplevelInputMenuExitHandler+0x20>)
 8005158:	2200      	movs	r2, #0
 800515a:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	bd80      	pop	{r7, pc}
 8005162:	bf00      	nop
 8005164:	20000000 	.word	0x20000000
 8005168:	20001e53 	.word	0x20001e53

0800516c <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8005174:	4b07      	ldr	r3, [pc, #28]	; (8005194 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8005176:	695a      	ldr	r2, [r3, #20]
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	4013      	ands	r3, r2
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	429a      	cmp	r2, r3
 8005180:	d101      	bne.n	8005186 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8005182:	2301      	movs	r3, #1
 8005184:	e000      	b.n	8005188 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8005186:	2300      	movs	r3, #0
}
 8005188:	4618      	mov	r0, r3
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr
 8005194:	40010400 	.word	0x40010400

08005198 <IM_Init>:
uint16_t encbtn_last_interrupt_time = 0;
uint16_t encpos_last_interrupt_time = 0;


void IM_Init()
{
 8005198:	b480      	push	{r7}
 800519a:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 800519c:	4b05      	ldr	r3, [pc, #20]	; (80051b4 <IM_Init+0x1c>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a04      	ldr	r2, [pc, #16]	; (80051b4 <IM_Init+0x1c>)
 80051a2:	f043 0301 	orr.w	r3, r3, #1
 80051a6:	6013      	str	r3, [r2, #0]



}
 80051a8:	bf00      	nop
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	40014400 	.word	0x40014400

080051b8 <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 80051b8:	b480      	push	{r7}
 80051ba:	af00      	add	r7, sp, #0
	#ifdef ENABLE_PWM_SWEEP
		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
	#endif	//ENABLE_PWM_SWEEP

		// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 80051bc:	4b26      	ldr	r3, [pc, #152]	; (8005258 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa0>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f003 0310 	and.w	r3, r3, #16
 80051c4:	2b10      	cmp	r3, #16
 80051c6:	d11c      	bne.n	8005202 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x4a>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 80051c8:	4b24      	ldr	r3, [pc, #144]	; (800525c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80051ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051cc:	ee07 3a90 	vmov	s15, r3
 80051d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80051d4:	4b22      	ldr	r3, [pc, #136]	; (8005260 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 80051d6:	edd3 7a00 	vldr	s15, [r3]
 80051da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80051de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051e2:	db09      	blt.n	80051f8 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x40>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 80051e4:	4b1f      	ldr	r3, [pc, #124]	; (8005264 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 80051e6:	edd3 7a00 	vldr	s15, [r3]
 80051ea:	4b1c      	ldr	r3, [pc, #112]	; (800525c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80051ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80051f0:	ee17 2a90 	vmov	r2, s15
 80051f4:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 80051f6:	e029      	b.n	800524c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			OUTPUT_TIMER->ARR++;
 80051f8:	4b18      	ldr	r3, [pc, #96]	; (800525c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 80051fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051fc:	3201      	adds	r2, #1
 80051fe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005200:	e024      	b.n	800524c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
		if(OUTPUT_TIMER->ARR == 0x1U)
 8005202:	4b16      	ldr	r3, [pc, #88]	; (800525c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005206:	2b01      	cmp	r3, #1
 8005208:	d104      	bne.n	8005214 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x5c>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 800520a:	4b14      	ldr	r3, [pc, #80]	; (800525c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800520c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005210:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005212:	e01b      	b.n	800524c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 8005214:	4b11      	ldr	r3, [pc, #68]	; (800525c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005218:	ee07 3a90 	vmov	s15, r3
 800521c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005220:	4b10      	ldr	r3, [pc, #64]	; (8005264 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 8005222:	edd3 7a00 	vldr	s15, [r3]
 8005226:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800522a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800522e:	d809      	bhi.n	8005244 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x8c>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 8005230:	4b0b      	ldr	r3, [pc, #44]	; (8005260 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 8005232:	edd3 7a00 	vldr	s15, [r3]
 8005236:	4b09      	ldr	r3, [pc, #36]	; (800525c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800523c:	ee17 2a90 	vmov	r2, s15
 8005240:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005242:	e003      	b.n	800524c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
				OUTPUT_TIMER->ARR--;
 8005244:	4b05      	ldr	r3, [pc, #20]	; (800525c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8005246:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005248:	3a01      	subs	r2, #1
 800524a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800524c:	bf00      	nop
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	40000c00 	.word	0x40000c00
 800525c:	40013400 	.word	0x40013400
 8005260:	20000124 	.word	0x20000124
 8005264:	20000120 	.word	0x20000120

08005268 <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800526e:	4b0f      	ldr	r3, [pc, #60]	; (80052ac <IM_BTN1_EXTI14_Handler+0x44>)
 8005270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005272:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005274:	88fb      	ldrh	r3, [r7, #6]
 8005276:	4a0e      	ldr	r2, [pc, #56]	; (80052b0 <IM_BTN1_EXTI14_Handler+0x48>)
 8005278:	8812      	ldrh	r2, [r2, #0]
 800527a:	1a9b      	subs	r3, r3, r2
 800527c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005280:	dd0c      	ble.n	800529c <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 8005282:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005286:	f7ff ff71 	bl	800516c <LL_EXTI_IsActiveFlag_0_31>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d005      	beq.n	800529c <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 8005290:	2001      	movs	r0, #1
 8005292:	f7ff fa7d 	bl	8004790 <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 8005296:	4807      	ldr	r0, [pc, #28]	; (80052b4 <IM_BTN1_EXTI14_Handler+0x4c>)
 8005298:	f00c fe20 	bl	8011edc <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 800529c:	4a04      	ldr	r2, [pc, #16]	; (80052b0 <IM_BTN1_EXTI14_Handler+0x48>)
 800529e:	88fb      	ldrh	r3, [r7, #6]
 80052a0:	8013      	strh	r3, [r2, #0]


}
 80052a2:	bf00      	nop
 80052a4:	3708      	adds	r7, #8
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	40014400 	.word	0x40014400
 80052b0:	20001e5a 	.word	0x20001e5a
 80052b4:	08015bc4 	.word	0x08015bc4

080052b8 <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80052be:	4b0f      	ldr	r3, [pc, #60]	; (80052fc <IM_BTN2_EXTI15_Handler+0x44>)
 80052c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c2:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80052c4:	88fb      	ldrh	r3, [r7, #6]
 80052c6:	4a0e      	ldr	r2, [pc, #56]	; (8005300 <IM_BTN2_EXTI15_Handler+0x48>)
 80052c8:	8812      	ldrh	r2, [r2, #0]
 80052ca:	1a9b      	subs	r3, r3, r2
 80052cc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80052d0:	dd0c      	ble.n	80052ec <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 80052d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80052d6:	f7ff ff49 	bl	800516c <LL_EXTI_IsActiveFlag_0_31>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d005      	beq.n	80052ec <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 80052e0:	2003      	movs	r0, #3
 80052e2:	f7ff fa55 	bl	8004790 <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 80052e6:	4807      	ldr	r0, [pc, #28]	; (8005304 <IM_BTN2_EXTI15_Handler+0x4c>)
 80052e8:	f00c fdf8 	bl	8011edc <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 80052ec:	4a04      	ldr	r2, [pc, #16]	; (8005300 <IM_BTN2_EXTI15_Handler+0x48>)
 80052ee:	88fb      	ldrh	r3, [r7, #6]
 80052f0:	8013      	strh	r3, [r2, #0]


}
 80052f2:	bf00      	nop
 80052f4:	3708      	adds	r7, #8
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	40014400 	.word	0x40014400
 8005300:	20001e5c 	.word	0x20001e5c
 8005304:	08015bdc 	.word	0x08015bdc

08005308 <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800530e:	4b0e      	ldr	r3, [pc, #56]	; (8005348 <IM_BTN3_EXTI0_Handler+0x40>)
 8005310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005312:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005314:	88fb      	ldrh	r3, [r7, #6]
 8005316:	4a0d      	ldr	r2, [pc, #52]	; (800534c <IM_BTN3_EXTI0_Handler+0x44>)
 8005318:	8812      	ldrh	r2, [r2, #0]
 800531a:	1a9b      	subs	r3, r3, r2
 800531c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005320:	dd0b      	ble.n	800533a <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 8005322:	2001      	movs	r0, #1
 8005324:	f7ff ff22 	bl	800516c <LL_EXTI_IsActiveFlag_0_31>
 8005328:	4603      	mov	r3, r0
 800532a:	2b00      	cmp	r3, #0
 800532c:	d005      	beq.n	800533a <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 800532e:	2004      	movs	r0, #4
 8005330:	f7ff fa2e 	bl	8004790 <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 8005334:	4806      	ldr	r0, [pc, #24]	; (8005350 <IM_BTN3_EXTI0_Handler+0x48>)
 8005336:	f00c fdd1 	bl	8011edc <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 800533a:	4a04      	ldr	r2, [pc, #16]	; (800534c <IM_BTN3_EXTI0_Handler+0x44>)
 800533c:	88fb      	ldrh	r3, [r7, #6]
 800533e:	8013      	strh	r3, [r2, #0]


}
 8005340:	bf00      	nop
 8005342:	3708      	adds	r7, #8
 8005344:	46bd      	mov	sp, r7
 8005346:	bd80      	pop	{r7, pc}
 8005348:	40014400 	.word	0x40014400
 800534c:	20001e5e 	.word	0x20001e5e
 8005350:	08015bf8 	.word	0x08015bf8

08005354 <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800535a:	4b0e      	ldr	r3, [pc, #56]	; (8005394 <IM_BTN4_EXTI1_Handler+0x40>)
 800535c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800535e:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8005360:	88fb      	ldrh	r3, [r7, #6]
 8005362:	4a0d      	ldr	r2, [pc, #52]	; (8005398 <IM_BTN4_EXTI1_Handler+0x44>)
 8005364:	8812      	ldrh	r2, [r2, #0]
 8005366:	1a9b      	subs	r3, r3, r2
 8005368:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800536c:	dd0b      	ble.n	8005386 <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 800536e:	2002      	movs	r0, #2
 8005370:	f7ff fefc 	bl	800516c <LL_EXTI_IsActiveFlag_0_31>
 8005374:	4603      	mov	r3, r0
 8005376:	2b00      	cmp	r3, #0
 8005378:	d005      	beq.n	8005386 <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 800537a:	2002      	movs	r0, #2
 800537c:	f7ff fa08 	bl	8004790 <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 8005380:	4806      	ldr	r0, [pc, #24]	; (800539c <IM_BTN4_EXTI1_Handler+0x48>)
 8005382:	f00c fdab 	bl	8011edc <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 8005386:	4a04      	ldr	r2, [pc, #16]	; (8005398 <IM_BTN4_EXTI1_Handler+0x44>)
 8005388:	88fb      	ldrh	r3, [r7, #6]
 800538a:	8013      	strh	r3, [r2, #0]


}
 800538c:	bf00      	nop
 800538e:	3708      	adds	r7, #8
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	40014400 	.word	0x40014400
 8005398:	20001e60 	.word	0x20001e60
 800539c:	08015c10 	.word	0x08015c10

080053a0 <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80053a6:	4b0e      	ldr	r3, [pc, #56]	; (80053e0 <IM_ENC_EXTI2_Handler+0x40>)
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80053ac:	88fb      	ldrh	r3, [r7, #6]
 80053ae:	4a0d      	ldr	r2, [pc, #52]	; (80053e4 <IM_ENC_EXTI2_Handler+0x44>)
 80053b0:	8812      	ldrh	r2, [r2, #0]
 80053b2:	1a9b      	subs	r3, r3, r2
 80053b4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80053b8:	dd0b      	ble.n	80053d2 <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 80053ba:	2004      	movs	r0, #4
 80053bc:	f7ff fed6 	bl	800516c <LL_EXTI_IsActiveFlag_0_31>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d005      	beq.n	80053d2 <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 80053c6:	2006      	movs	r0, #6
 80053c8:	f7ff f9e2 	bl	8004790 <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 80053cc:	4806      	ldr	r0, [pc, #24]	; (80053e8 <IM_ENC_EXTI2_Handler+0x48>)
 80053ce:	f00c fd85 	bl	8011edc <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 80053d2:	4a04      	ldr	r2, [pc, #16]	; (80053e4 <IM_ENC_EXTI2_Handler+0x44>)
 80053d4:	88fb      	ldrh	r3, [r7, #6]
 80053d6:	8013      	strh	r3, [r2, #0]


}
 80053d8:	bf00      	nop
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}
 80053e0:	40014400 	.word	0x40014400
 80053e4:	20001e62 	.word	0x20001e62
 80053e8:	08015c28 	.word	0x08015c28

080053ec <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 80053f2:	4b11      	ldr	r3, [pc, #68]	; (8005438 <IM_ENC_DIRF_Handler+0x4c>)
 80053f4:	691b      	ldr	r3, [r3, #16]
 80053f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80053fe:	d117      	bne.n	8005430 <IM_ENC_DIRF_Handler+0x44>
	{
		uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 8005400:	4b0e      	ldr	r3, [pc, #56]	; (800543c <IM_ENC_DIRF_Handler+0x50>)
 8005402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005404:	80fb      	strh	r3, [r7, #6]
		if ((interrupt_time - encpos_last_interrupt_time) > 0)
 8005406:	88fb      	ldrh	r3, [r7, #6]
 8005408:	4a0d      	ldr	r2, [pc, #52]	; (8005440 <IM_ENC_DIRF_Handler+0x54>)
 800540a:	8812      	ldrh	r2, [r2, #0]
 800540c:	1a9b      	subs	r3, r3, r2
 800540e:	2b00      	cmp	r3, #0
 8005410:	dd0b      	ble.n	800542a <IM_ENC_DIRF_Handler+0x3e>
		{
			EM_SetNewEvent(evEncoderSet);
 8005412:	2005      	movs	r0, #5
 8005414:	f7ff f9bc 	bl	8004790 <EM_SetNewEvent>
			printf("Encoder new direction\n");
 8005418:	480a      	ldr	r0, [pc, #40]	; (8005444 <IM_ENC_DIRF_Handler+0x58>)
 800541a:	f00c fd5f 	bl	8011edc <puts>
			TIM1->SR &= ~(TIM_SR_DIRF);
 800541e:	4b06      	ldr	r3, [pc, #24]	; (8005438 <IM_ENC_DIRF_Handler+0x4c>)
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	4a05      	ldr	r2, [pc, #20]	; (8005438 <IM_ENC_DIRF_Handler+0x4c>)
 8005424:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005428:	6113      	str	r3, [r2, #16]
		}
		encpos_last_interrupt_time = interrupt_time;
 800542a:	4a05      	ldr	r2, [pc, #20]	; (8005440 <IM_ENC_DIRF_Handler+0x54>)
 800542c:	88fb      	ldrh	r3, [r7, #6]
 800542e:	8013      	strh	r3, [r2, #0]


	}


}
 8005430:	bf00      	nop
 8005432:	3708      	adds	r7, #8
 8005434:	46bd      	mov	sp, r7
 8005436:	bd80      	pop	{r7, pc}
 8005438:	40012c00 	.word	0x40012c00
 800543c:	40014400 	.word	0x40014400
 8005440:	20001e64 	.word	0x20001e64
 8005444:	08015c44 	.word	0x08015c44

08005448 <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 800544c:	4b03      	ldr	r3, [pc, #12]	; (800545c <BO_GetBiasPolarity+0x14>)
 800544e:	781b      	ldrb	r3, [r3, #0]
}
 8005450:	4618      	mov	r0, r3
 8005452:	46bd      	mov	sp, r7
 8005454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005458:	4770      	bx	lr
 800545a:	bf00      	nop
 800545c:	20000001 	.word	0x20000001

08005460 <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 8005460:	b480      	push	{r7}
 8005462:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 8005464:	4b03      	ldr	r3, [pc, #12]	; (8005474 <BO_GetDcBiasEncoderValue+0x14>)
 8005466:	881b      	ldrh	r3, [r3, #0]
}
 8005468:	4618      	mov	r0, r3
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	20000002 	.word	0x20000002

08005478 <BO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b082      	sub	sp, #8
 800547c:	af00      	add	r7, sp, #0
 800547e:	4603      	mov	r3, r0
 8005480:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_NORMAL);
 8005482:	2000      	movs	r0, #0
 8005484:	f001 fbb2 	bl	8006bec <SM_GetEncoderValue>
 8005488:	4603      	mov	r3, r0
 800548a:	461a      	mov	r2, r3
 800548c:	4b1b      	ldr	r3, [pc, #108]	; (80054fc <BO_MapEncoderPositionToSignalOutput+0x84>)
 800548e:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 8005490:	88fb      	ldrh	r3, [r7, #6]
 8005492:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8005496:	d214      	bcs.n	80054c2 <BO_MapEncoderPositionToSignalOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 8005498:	4b19      	ldr	r3, [pc, #100]	; (8005500 <BO_MapEncoderPositionToSignalOutput+0x88>)
 800549a:	2200      	movs	r2, #0
 800549c:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 800549e:	88fb      	ldrh	r3, [r7, #6]
 80054a0:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 80054a4:	4613      	mov	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 80054ac:	2200      	movs	r2, #0
 80054ae:	2110      	movs	r1, #16
 80054b0:	4814      	ldr	r0, [pc, #80]	; (8005504 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 80054b2:	f005 ffa1 	bl	800b3f8 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	OFFSET_ENABLE_GPIO_Port,
 80054b6:	2201      	movs	r2, #1
 80054b8:	2108      	movs	r1, #8
 80054ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054be:	f006 ffc3 	bl	800c448 <HAL_GPIO_WritePin>
							OFFSET_ENABLE_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 80054c2:	88fb      	ldrh	r3, [r7, #6]
 80054c4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80054c8:	d314      	bcc.n	80054f4 <BO_MapEncoderPositionToSignalOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 80054ca:	4b0d      	ldr	r3, [pc, #52]	; (8005500 <BO_MapEncoderPositionToSignalOutput+0x88>)
 80054cc:	2201      	movs	r2, #1
 80054ce:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 80054d0:	88fb      	ldrh	r3, [r7, #6]
 80054d2:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 80054d6:	4613      	mov	r3, r2
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	4413      	add	r3, r2
 80054dc:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 80054de:	2200      	movs	r2, #0
 80054e0:	2110      	movs	r1, #16
 80054e2:	4808      	ldr	r0, [pc, #32]	; (8005504 <BO_MapEncoderPositionToSignalOutput+0x8c>)
 80054e4:	f005 ff88 	bl	800b3f8 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	OFFSET_ENABLE_GPIO_Port,
 80054e8:	2200      	movs	r2, #0
 80054ea:	2108      	movs	r1, #8
 80054ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80054f0:	f006 ffaa 	bl	800c448 <HAL_GPIO_WritePin>
							OFFSET_ENABLE_Pin,
							GPIO_PIN_RESET);
	}
}
 80054f4:	bf00      	nop
 80054f6:	3708      	adds	r7, #8
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}
 80054fc:	20000002 	.word	0x20000002
 8005500:	20000001 	.word	0x20000001
 8005504:	20002a20 	.word	0x20002a20

08005508 <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 8005508:	b580      	push	{r7, lr}
 800550a:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 800550c:	2110      	movs	r1, #16
 800550e:	4803      	ldr	r0, [pc, #12]	; (800551c <BO_GetOutputBias+0x14>)
 8005510:	f005 ffb8 	bl	800b484 <HAL_DAC_GetValue>
 8005514:	4603      	mov	r3, r0
}
 8005516:	4618      	mov	r0, r3
 8005518:	bd80      	pop	{r7, pc}
 800551a:	bf00      	nop
 800551c:	20002a20 	.word	0x20002a20

08005520 <FreqO_InitFreqProfiles>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_InitFreqProfiles()
{
 8005520:	b480      	push	{r7}
 8005522:	b083      	sub	sp, #12
 8005524:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 8005526:	2300      	movs	r3, #0
 8005528:	607b      	str	r3, [r7, #4]
 800552a:	e06b      	b.n	8005604 <FreqO_InitFreqProfiles+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(theFreqProfiles[i].psc == 0)
 800552c:	493a      	ldr	r1, [pc, #232]	; (8005618 <FreqO_InitFreqProfiles+0xf8>)
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	4613      	mov	r3, r2
 8005532:	009b      	lsls	r3, r3, #2
 8005534:	4413      	add	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	440b      	add	r3, r1
 800553a:	3308      	adds	r3, #8
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d129      	bne.n	8005596 <FreqO_InitFreqProfiles+0x76>
			theFreqProfiles[i].arr = ((SM_MCLK / theFreqProfiles[i].hertz) / SM_FSAMP) * theFreqProfiles[i].error;
 8005542:	4935      	ldr	r1, [pc, #212]	; (8005618 <FreqO_InitFreqProfiles+0xf8>)
 8005544:	687a      	ldr	r2, [r7, #4]
 8005546:	4613      	mov	r3, r2
 8005548:	009b      	lsls	r3, r3, #2
 800554a:	4413      	add	r3, r2
 800554c:	009b      	lsls	r3, r3, #2
 800554e:	440b      	add	r3, r1
 8005550:	3304      	adds	r3, #4
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a31      	ldr	r2, [pc, #196]	; (800561c <FreqO_InitFreqProfiles+0xfc>)
 8005556:	fbb2 f3f3 	udiv	r3, r2, r3
 800555a:	ee07 3a90 	vmov	s15, r3
 800555e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005562:	492d      	ldr	r1, [pc, #180]	; (8005618 <FreqO_InitFreqProfiles+0xf8>)
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	4613      	mov	r3, r2
 8005568:	009b      	lsls	r3, r3, #2
 800556a:	4413      	add	r3, r2
 800556c:	009b      	lsls	r3, r3, #2
 800556e:	440b      	add	r3, r1
 8005570:	3310      	adds	r3, #16
 8005572:	edd3 7a00 	vldr	s15, [r3]
 8005576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800557a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800557e:	ee17 0a90 	vmov	r0, s15
 8005582:	4925      	ldr	r1, [pc, #148]	; (8005618 <FreqO_InitFreqProfiles+0xf8>)
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	4613      	mov	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	440b      	add	r3, r1
 8005590:	330c      	adds	r3, #12
 8005592:	6018      	str	r0, [r3, #0]
 8005594:	e033      	b.n	80055fe <FreqO_InitFreqProfiles+0xde>
		else
			theFreqProfiles[i].arr = (((SM_MCLK / theFreqProfiles[i].hertz) / theFreqProfiles[i].psc) / SM_FSAMP) * theFreqProfiles[i].error;
 8005596:	4920      	ldr	r1, [pc, #128]	; (8005618 <FreqO_InitFreqProfiles+0xf8>)
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	4613      	mov	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	009b      	lsls	r3, r3, #2
 80055a2:	440b      	add	r3, r1
 80055a4:	3304      	adds	r3, #4
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a1c      	ldr	r2, [pc, #112]	; (800561c <FreqO_InitFreqProfiles+0xfc>)
 80055aa:	fbb2 f1f3 	udiv	r1, r2, r3
 80055ae:	481a      	ldr	r0, [pc, #104]	; (8005618 <FreqO_InitFreqProfiles+0xf8>)
 80055b0:	687a      	ldr	r2, [r7, #4]
 80055b2:	4613      	mov	r3, r2
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	4413      	add	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	4403      	add	r3, r0
 80055bc:	3308      	adds	r3, #8
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80055c4:	ee07 3a90 	vmov	s15, r3
 80055c8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055cc:	4912      	ldr	r1, [pc, #72]	; (8005618 <FreqO_InitFreqProfiles+0xf8>)
 80055ce:	687a      	ldr	r2, [r7, #4]
 80055d0:	4613      	mov	r3, r2
 80055d2:	009b      	lsls	r3, r3, #2
 80055d4:	4413      	add	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	440b      	add	r3, r1
 80055da:	3310      	adds	r3, #16
 80055dc:	edd3 7a00 	vldr	s15, [r3]
 80055e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055e8:	ee17 0a90 	vmov	r0, s15
 80055ec:	490a      	ldr	r1, [pc, #40]	; (8005618 <FreqO_InitFreqProfiles+0xf8>)
 80055ee:	687a      	ldr	r2, [r7, #4]
 80055f0:	4613      	mov	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	4413      	add	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	440b      	add	r3, r1
 80055fa:	330c      	adds	r3, #12
 80055fc:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	3301      	adds	r3, #1
 8005602:	607b      	str	r3, [r7, #4]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2b0d      	cmp	r3, #13
 8005608:	dd90      	ble.n	800552c <FreqO_InitFreqProfiles+0xc>
	}
}
 800560a:	bf00      	nop
 800560c:	370c      	adds	r7, #12
 800560e:	46bd      	mov	sp, r7
 8005610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005614:	4770      	bx	lr
 8005616:	bf00      	nop
 8005618:	20000004 	.word	0x20000004
 800561c:	00155cc0 	.word	0x00155cc0

08005620 <FreqO_MapEncoderPositionCoarse>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionCoarse(uint16_t pEncValue)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b084      	sub	sp, #16
 8005624:	af00      	add	r7, sp, #0
 8005626:	4603      	mov	r3, r0
 8005628:	80fb      	strh	r3, [r7, #6]

	uint32_t tmpFreqIndex = freq_profile->index;
 800562a:	4b1b      	ldr	r3, [pc, #108]	; (8005698 <FreqO_MapEncoderPositionCoarse+0x78>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	60fb      	str	r3, [r7, #12]
	if(pEncValue > freq_last_encoder_value)
 8005632:	4b1a      	ldr	r3, [pc, #104]	; (800569c <FreqO_MapEncoderPositionCoarse+0x7c>)
 8005634:	881b      	ldrh	r3, [r3, #0]
 8005636:	88fa      	ldrh	r2, [r7, #6]
 8005638:	429a      	cmp	r2, r3
 800563a:	d910      	bls.n	800565e <FreqO_MapEncoderPositionCoarse+0x3e>
	{
		tmpFreqIndex++;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	3301      	adds	r3, #1
 8005640:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	2b0d      	cmp	r3, #13
 8005646:	d901      	bls.n	800564c <FreqO_MapEncoderPositionCoarse+0x2c>
 8005648:	230d      	movs	r3, #13
 800564a:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 800564c:	68f8      	ldr	r0, [r7, #12]
 800564e:	f000 f945 	bl	80058dc <FreqO_GetProfileByIndex>
 8005652:	4603      	mov	r3, r0
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	4618      	mov	r0, r3
 8005658:	f000 f872 	bl	8005740 <FreqO_ApplyProfile>
 800565c:	e014      	b.n	8005688 <FreqO_MapEncoderPositionCoarse+0x68>
	}
	else if (pEncValue < freq_last_encoder_value)
 800565e:	4b0f      	ldr	r3, [pc, #60]	; (800569c <FreqO_MapEncoderPositionCoarse+0x7c>)
 8005660:	881b      	ldrh	r3, [r3, #0]
 8005662:	88fa      	ldrh	r2, [r7, #6]
 8005664:	429a      	cmp	r2, r3
 8005666:	d20f      	bcs.n	8005688 <FreqO_MapEncoderPositionCoarse+0x68>
	{
		tmpFreqIndex--;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	3b01      	subs	r3, #1
 800566c:	60fb      	str	r3, [r7, #12]
		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2b0d      	cmp	r3, #13
 8005672:	d901      	bls.n	8005678 <FreqO_MapEncoderPositionCoarse+0x58>
 8005674:	2300      	movs	r3, #0
 8005676:	60fb      	str	r3, [r7, #12]
		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
 8005678:	68f8      	ldr	r0, [r7, #12]
 800567a:	f000 f92f 	bl	80058dc <FreqO_GetProfileByIndex>
 800567e:	4603      	mov	r3, r0
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	4618      	mov	r0, r3
 8005684:	f000 f85c 	bl	8005740 <FreqO_ApplyProfile>
	}
	freq_last_encoder_value = pEncValue;
 8005688:	4a04      	ldr	r2, [pc, #16]	; (800569c <FreqO_MapEncoderPositionCoarse+0x7c>)
 800568a:	88fb      	ldrh	r3, [r7, #6]
 800568c:	8013      	strh	r3, [r2, #0]

}
 800568e:	bf00      	nop
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
 8005696:	bf00      	nop
 8005698:	2000011c 	.word	0x2000011c
 800569c:	20001e66 	.word	0x20001e66

080056a0 <FreqO_MapEncoderPositionFine>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionFine(uint16_t pEncValue)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	4603      	mov	r3, r0
 80056a8:	80fb      	strh	r3, [r7, #6]

//	uint32_t tmpFreqIndex = freq_profile->index;
	if(pEncValue > freq_last_encoder_value)
 80056aa:	4b0e      	ldr	r3, [pc, #56]	; (80056e4 <FreqO_MapEncoderPositionFine+0x44>)
 80056ac:	881b      	ldrh	r3, [r3, #0]
 80056ae:	88fa      	ldrh	r2, [r7, #6]
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d904      	bls.n	80056be <FreqO_MapEncoderPositionFine+0x1e>
	{
		OUTPUT_TIMER->ARR++;
 80056b4:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <FreqO_MapEncoderPositionFine+0x48>)
 80056b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056b8:	3201      	adds	r2, #1
 80056ba:	62da      	str	r2, [r3, #44]	; 0x2c
 80056bc:	e008      	b.n	80056d0 <FreqO_MapEncoderPositionFine+0x30>
//		tmpFreqIndex++;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = MAX_NUM_FREQ_PRESETS-1;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	else if (pEncValue < freq_last_encoder_value)
 80056be:	4b09      	ldr	r3, [pc, #36]	; (80056e4 <FreqO_MapEncoderPositionFine+0x44>)
 80056c0:	881b      	ldrh	r3, [r3, #0]
 80056c2:	88fa      	ldrh	r2, [r7, #6]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d203      	bcs.n	80056d0 <FreqO_MapEncoderPositionFine+0x30>
	{
		OUTPUT_TIMER->ARR--;
 80056c8:	4b07      	ldr	r3, [pc, #28]	; (80056e8 <FreqO_MapEncoderPositionFine+0x48>)
 80056ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056cc:	3a01      	subs	r2, #1
 80056ce:	62da      	str	r2, [r3, #44]	; 0x2c
//		tmpFreqIndex--;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	freq_last_encoder_value = pEncValue;
 80056d0:	4a04      	ldr	r2, [pc, #16]	; (80056e4 <FreqO_MapEncoderPositionFine+0x44>)
 80056d2:	88fb      	ldrh	r3, [r7, #6]
 80056d4:	8013      	strh	r3, [r2, #0]

}
 80056d6:	bf00      	nop
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20001e66 	.word	0x20001e66
 80056e8:	40013400 	.word	0x40013400

080056ec <FreqO_MapEncoderPositionToPrescaler>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_MapEncoderPositionToPrescaler(uint16_t pEncValue)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	4603      	mov	r3, r0
 80056f4:	80fb      	strh	r3, [r7, #6]

//	uint32_t tmpFreqIndex = freq_profile->index;
	if(pEncValue > freq_last_encoder_value)
 80056f6:	4b10      	ldr	r3, [pc, #64]	; (8005738 <FreqO_MapEncoderPositionToPrescaler+0x4c>)
 80056f8:	881b      	ldrh	r3, [r3, #0]
 80056fa:	88fa      	ldrh	r2, [r7, #6]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d904      	bls.n	800570a <FreqO_MapEncoderPositionToPrescaler+0x1e>
	{
		OUTPUT_TIMER->PSC++;
 8005700:	4b0e      	ldr	r3, [pc, #56]	; (800573c <FreqO_MapEncoderPositionToPrescaler+0x50>)
 8005702:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005704:	3201      	adds	r2, #1
 8005706:	629a      	str	r2, [r3, #40]	; 0x28
 8005708:	e00c      	b.n	8005724 <FreqO_MapEncoderPositionToPrescaler+0x38>

	}
	else if (pEncValue < freq_last_encoder_value)
 800570a:	4b0b      	ldr	r3, [pc, #44]	; (8005738 <FreqO_MapEncoderPositionToPrescaler+0x4c>)
 800570c:	881b      	ldrh	r3, [r3, #0]
 800570e:	88fa      	ldrh	r2, [r7, #6]
 8005710:	429a      	cmp	r2, r3
 8005712:	d207      	bcs.n	8005724 <FreqO_MapEncoderPositionToPrescaler+0x38>
	{
		if(OUTPUT_TIMER->PSC > 0)
 8005714:	4b09      	ldr	r3, [pc, #36]	; (800573c <FreqO_MapEncoderPositionToPrescaler+0x50>)
 8005716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005718:	2b00      	cmp	r3, #0
 800571a:	d003      	beq.n	8005724 <FreqO_MapEncoderPositionToPrescaler+0x38>
			OUTPUT_TIMER->PSC--;
 800571c:	4b07      	ldr	r3, [pc, #28]	; (800573c <FreqO_MapEncoderPositionToPrescaler+0x50>)
 800571e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005720:	3a01      	subs	r2, #1
 8005722:	629a      	str	r2, [r3, #40]	; 0x28
//		tmpFreqIndex--;
//		if(tmpFreqIndex > MAX_NUM_FREQ_PRESETS-1) tmpFreqIndex = 0;
//		FreqO_ApplyProfile( FreqO_GetProfileByIndex(tmpFreqIndex)->hertz );
	}
	freq_last_encoder_value = pEncValue;
 8005724:	4a04      	ldr	r2, [pc, #16]	; (8005738 <FreqO_MapEncoderPositionToPrescaler+0x4c>)
 8005726:	88fb      	ldrh	r3, [r7, #6]
 8005728:	8013      	strh	r3, [r2, #0]

}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	20001e66 	.word	0x20001e66
 800573c:	40013400 	.word	0x40013400

08005740 <FreqO_ApplyProfile>:
 *	@retval None
 *
 */

void FreqO_ApplyProfile(eFreqSettings_t pPresetEnum)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
//	DacTimeReg_t* tmpDT = DT_GetRegisterByEnum(pPresetEnum);
	FreqProfile_t* tmpFreqProfile = FreqO_FindFPresetObject(pPresetEnum);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f000 f899 	bl	8005880 <FreqO_FindFPresetObject>
 800574e:	60f8      	str	r0, [r7, #12]
	if(tmpFreqProfile)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d024      	beq.n	80057a0 <FreqO_ApplyProfile+0x60>
	{

		OUTPUT_TIMER->PSC = tmpFreqProfile->psc;
 8005756:	4a16      	ldr	r2, [pc, #88]	; (80057b0 <FreqO_ApplyProfile+0x70>)
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmpFreqProfile->arr;
 800575e:	4a14      	ldr	r2, [pc, #80]	; (80057b0 <FreqO_ApplyProfile+0x70>)
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	62d3      	str	r3, [r2, #44]	; 0x2c

		eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005766:	2001      	movs	r0, #1
 8005768:	f000 ffc4 	bl	80066f4 <SM_GetOutputChannel>
 800576c:	4603      	mov	r3, r0
 800576e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	72fb      	strb	r3, [r7, #11]
		if(tmpOut == PWM_FUNC_MODE)
 8005776:	7afb      	ldrb	r3, [r7, #11]
 8005778:	2b06      	cmp	r3, #6
 800577a:	d10d      	bne.n	8005798 <FreqO_ApplyProfile+0x58>
		{
			// duty cycle of PWM require slower settings to get the
			// same frequency as normal output functions
			PWM_AUX_OUT_TIM->PSC = 256;
 800577c:	4b0d      	ldr	r3, [pc, #52]	; (80057b4 <FreqO_ApplyProfile+0x74>)
 800577e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005782:	629a      	str	r2, [r3, #40]	; 0x28
			PWM_AUX_OUT_TIM->ARR = tmpFreqProfile->arr/2;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	68db      	ldr	r3, [r3, #12]
 8005788:	4a0a      	ldr	r2, [pc, #40]	; (80057b4 <FreqO_ApplyProfile+0x74>)
 800578a:	085b      	lsrs	r3, r3, #1
 800578c:	62d3      	str	r3, [r2, #44]	; 0x2c
			PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 800578e:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <FreqO_ApplyProfile+0x74>)
 8005790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005792:	4a08      	ldr	r2, [pc, #32]	; (80057b4 <FreqO_ApplyProfile+0x74>)
 8005794:	085b      	lsrs	r3, r3, #1
 8005796:	6353      	str	r3, [r2, #52]	; 0x34
		}

		freq_profile = tmpFreqProfile;
 8005798:	4a07      	ldr	r2, [pc, #28]	; (80057b8 <FreqO_ApplyProfile+0x78>)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6013      	str	r3, [r2, #0]
	}
	else
	{
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
	}
}
 800579e:	e002      	b.n	80057a6 <FreqO_ApplyProfile+0x66>
		DM_SetErrorDebugMsg("FreqO_ApplyProfile() null pointer error");
 80057a0:	4806      	ldr	r0, [pc, #24]	; (80057bc <FreqO_ApplyProfile+0x7c>)
 80057a2:	f7fb ff29 	bl	80015f8 <DM_SetErrorDebugMsg>
}
 80057a6:	bf00      	nop
 80057a8:	3710      	adds	r7, #16
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}
 80057ae:	bf00      	nop
 80057b0:	40013400 	.word	0x40013400
 80057b4:	40000400 	.word	0x40000400
 80057b8:	2000011c 	.word	0x2000011c
 80057bc:	08015c5c 	.word	0x08015c5c

080057c0 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b082      	sub	sp, #8
 80057c4:	af00      	add	r7, sp, #0
	FreqO_MapEncoderPositionFine(SM_GetEncoderValue(ENCODER_NORMAL));
 80057c6:	2000      	movs	r0, #0
 80057c8:	f001 fa10 	bl	8006bec <SM_GetEncoderValue>
 80057cc:	4603      	mov	r3, r0
 80057ce:	4618      	mov	r0, r3
 80057d0:	f7ff ff66 	bl	80056a0 <FreqO_MapEncoderPositionFine>


	eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 80057d4:	2001      	movs	r0, #1
 80057d6:	f000 ff8d 	bl	80066f4 <SM_GetOutputChannel>
 80057da:	4603      	mov	r3, r0
 80057dc:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 80057e0:	781b      	ldrb	r3, [r3, #0]
 80057e2:	71fb      	strb	r3, [r7, #7]
	if(tmpOut == PWM_FUNC_MODE)
 80057e4:	79fb      	ldrb	r3, [r7, #7]
 80057e6:	2b06      	cmp	r3, #6
 80057e8:	d110      	bne.n	800580c <FreqO_AdjustFreq+0x4c>
	{
		// duty cycle of PWM require slower settings to get the
		// same frequency as normal output functions
		PWM_AUX_OUT_TIM->PSC = 256;
 80057ea:	4b0a      	ldr	r3, [pc, #40]	; (8005814 <FreqO_AdjustFreq+0x54>)
 80057ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80057f0:	629a      	str	r2, [r3, #40]	; 0x28
		PWM_AUX_OUT_TIM->ARR = SM_GetEncoderValue(ENCODER_NORMAL)/2;
 80057f2:	2000      	movs	r0, #0
 80057f4:	f001 f9fa 	bl	8006bec <SM_GetEncoderValue>
 80057f8:	4603      	mov	r3, r0
 80057fa:	085b      	lsrs	r3, r3, #1
 80057fc:	b29a      	uxth	r2, r3
 80057fe:	4b05      	ldr	r3, [pc, #20]	; (8005814 <FreqO_AdjustFreq+0x54>)
 8005800:	62da      	str	r2, [r3, #44]	; 0x2c
		PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005802:	4b04      	ldr	r3, [pc, #16]	; (8005814 <FreqO_AdjustFreq+0x54>)
 8005804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005806:	4a03      	ldr	r2, [pc, #12]	; (8005814 <FreqO_AdjustFreq+0x54>)
 8005808:	085b      	lsrs	r3, r3, #1
 800580a:	6353      	str	r3, [r2, #52]	; 0x34

	}
}
 800580c:	bf00      	nop
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}
 8005814:	40000400 	.word	0x40000400

08005818 <FreqO_AdjustPrescaler>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustPrescaler()
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b082      	sub	sp, #8
 800581c:	af00      	add	r7, sp, #0
	FreqO_MapEncoderPositionToPrescaler(SM_GetEncoderValue(ENCODER_NORMAL));
 800581e:	2000      	movs	r0, #0
 8005820:	f001 f9e4 	bl	8006bec <SM_GetEncoderValue>
 8005824:	4603      	mov	r3, r0
 8005826:	4618      	mov	r0, r3
 8005828:	f7ff ff60 	bl	80056ec <FreqO_MapEncoderPositionToPrescaler>

	// not sure about this code?!?!
	eOutput_mode tmpOut = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 800582c:	2001      	movs	r0, #1
 800582e:	f000 ff61 	bl	80066f4 <SM_GetOutputChannel>
 8005832:	4603      	mov	r3, r0
 8005834:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	71fb      	strb	r3, [r7, #7]
	if(tmpOut == PWM_FUNC_MODE)
 800583c:	79fb      	ldrb	r3, [r7, #7]
 800583e:	2b06      	cmp	r3, #6
 8005840:	d10c      	bne.n	800585c <FreqO_AdjustPrescaler+0x44>
	{
		// duty cycle of PWM require slower settings to get the
		// same frequency as normal output functions
		//PWM_AUX_OUT_TIM->PSC = 256;
		PWM_AUX_OUT_TIM->ARR = SM_GetEncoderValue(ENCODER_NORMAL)/2;
 8005842:	2000      	movs	r0, #0
 8005844:	f001 f9d2 	bl	8006bec <SM_GetEncoderValue>
 8005848:	4603      	mov	r3, r0
 800584a:	085b      	lsrs	r3, r3, #1
 800584c:	b29a      	uxth	r2, r3
 800584e:	4b05      	ldr	r3, [pc, #20]	; (8005864 <FreqO_AdjustPrescaler+0x4c>)
 8005850:	62da      	str	r2, [r3, #44]	; 0x2c
		PWM_AUX_OUT_TIM->CCR1 = PWM_AUX_OUT_TIM->ARR/2;
 8005852:	4b04      	ldr	r3, [pc, #16]	; (8005864 <FreqO_AdjustPrescaler+0x4c>)
 8005854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005856:	4a03      	ldr	r2, [pc, #12]	; (8005864 <FreqO_AdjustPrescaler+0x4c>)
 8005858:	085b      	lsrs	r3, r3, #1
 800585a:	6353      	str	r3, [r2, #52]	; 0x34

	}
}
 800585c:	bf00      	nop
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	40000400 	.word	0x40000400

08005868 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 8005868:	b480      	push	{r7}
 800586a:	af00      	add	r7, sp, #0
	return freq_profile;
 800586c:	4b03      	ldr	r3, [pc, #12]	; (800587c <FreqO_GetFPresetObject+0x14>)
 800586e:	681b      	ldr	r3, [r3, #0]
}
 8005870:	4618      	mov	r0, r3
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
 800587a:	bf00      	nop
 800587c:	2000011c 	.word	0x2000011c

08005880 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8005888:	2300      	movs	r3, #0
 800588a:	60fb      	str	r3, [r7, #12]
 800588c:	e016      	b.n	80058bc <FreqO_FindFPresetObject+0x3c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 800588e:	4911      	ldr	r1, [pc, #68]	; (80058d4 <FreqO_FindFPresetObject+0x54>)
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4613      	mov	r3, r2
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	4413      	add	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	440b      	add	r3, r1
 800589c:	3304      	adds	r3, #4
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	687a      	ldr	r2, [r7, #4]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d107      	bne.n	80058b6 <FreqO_FindFPresetObject+0x36>
		{
			return &theFreqProfiles[i];
 80058a6:	68fa      	ldr	r2, [r7, #12]
 80058a8:	4613      	mov	r3, r2
 80058aa:	009b      	lsls	r3, r3, #2
 80058ac:	4413      	add	r3, r2
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	4a08      	ldr	r2, [pc, #32]	; (80058d4 <FreqO_FindFPresetObject+0x54>)
 80058b2:	4413      	add	r3, r2
 80058b4:	e009      	b.n	80058ca <FreqO_FindFPresetObject+0x4a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	3301      	adds	r3, #1
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2b0d      	cmp	r3, #13
 80058c0:	dde5      	ble.n	800588e <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 80058c2:	4805      	ldr	r0, [pc, #20]	; (80058d8 <FreqO_FindFPresetObject+0x58>)
 80058c4:	f7fb fe98 	bl	80015f8 <DM_SetErrorDebugMsg>
	return 0;
 80058c8:	2300      	movs	r3, #0
}
 80058ca:	4618      	mov	r0, r3
 80058cc:	3710      	adds	r7, #16
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	20000004 	.word	0x20000004
 80058d8:	08015c84 	.word	0x08015c84

080058dc <FreqO_GetProfileByIndex>:
 *	@param pIndex
 *	@retval pointer to FreqProfile_t object
 *
 */
FreqProfile_t* FreqO_GetProfileByIndex(uint32_t pIndex)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
	return &theFreqProfiles[pIndex];
 80058e4:	687a      	ldr	r2, [r7, #4]
 80058e6:	4613      	mov	r3, r2
 80058e8:	009b      	lsls	r3, r3, #2
 80058ea:	4413      	add	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4a04      	ldr	r2, [pc, #16]	; (8005900 <FreqO_GetProfileByIndex+0x24>)
 80058f0:	4413      	add	r3, r2
}
 80058f2:	4618      	mov	r0, r3
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop
 8005900:	20000004 	.word	0x20000004

08005904 <FreqO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ResetLastEncoderValue()
{
 8005904:	b480      	push	{r7}
 8005906:	af00      	add	r7, sp, #0
	freq_last_encoder_value = 0;
 8005908:	4b03      	ldr	r3, [pc, #12]	; (8005918 <FreqO_ResetLastEncoderValue+0x14>)
 800590a:	2200      	movs	r2, #0
 800590c:	801a      	strh	r2, [r3, #0]
}
 800590e:	bf00      	nop
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr
 8005918:	20001e66 	.word	0x20001e66

0800591c <FS_SetSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeDown()
{
 800591c:	b480      	push	{r7}
 800591e:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8005920:	4b10      	ldr	r3, [pc, #64]	; (8005964 <FS_SetSweepModeDown+0x48>)
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a0f      	ldr	r2, [pc, #60]	; (8005964 <FS_SetSweepModeDown+0x48>)
 8005926:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800592a:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 800592c:	4b0d      	ldr	r3, [pc, #52]	; (8005964 <FS_SetSweepModeDown+0x48>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a0c      	ldr	r2, [pc, #48]	; (8005964 <FS_SetSweepModeDown+0x48>)
 8005932:	f043 0310 	orr.w	r3, r3, #16
 8005936:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 8005938:	4b0b      	ldr	r3, [pc, #44]	; (8005968 <FS_SetSweepModeDown+0x4c>)
 800593a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800593c:	ee07 3a90 	vmov	s15, r3
 8005940:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005944:	4b09      	ldr	r3, [pc, #36]	; (800596c <FS_SetSweepModeDown+0x50>)
 8005946:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 800594a:	4b09      	ldr	r3, [pc, #36]	; (8005970 <FS_SetSweepModeDown+0x54>)
 800594c:	4a09      	ldr	r2, [pc, #36]	; (8005974 <FS_SetSweepModeDown+0x58>)
 800594e:	601a      	str	r2, [r3, #0]
	ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8005950:	4b09      	ldr	r3, [pc, #36]	; (8005978 <FS_SetSweepModeDown+0x5c>)
 8005952:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005956:	625a      	str	r2, [r3, #36]	; 0x24

}
 8005958:	bf00      	nop
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr
 8005962:	bf00      	nop
 8005964:	40000c00 	.word	0x40000c00
 8005968:	40013400 	.word	0x40013400
 800596c:	20000120 	.word	0x20000120
 8005970:	20000124 	.word	0x20000124
 8005974:	477fff00 	.word	0x477fff00
 8005978:	40012c00 	.word	0x40012c00

0800597c <FS_SetSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepModeUp()
{
 800597c:	b480      	push	{r7}
 800597e:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8005980:	4b0e      	ldr	r3, [pc, #56]	; (80059bc <FS_SetSweepModeUp+0x40>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	4a0d      	ldr	r2, [pc, #52]	; (80059bc <FS_SetSweepModeUp+0x40>)
 8005986:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800598a:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 800598c:	4b0b      	ldr	r3, [pc, #44]	; (80059bc <FS_SetSweepModeUp+0x40>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	4a0a      	ldr	r2, [pc, #40]	; (80059bc <FS_SetSweepModeUp+0x40>)
 8005992:	f023 0310 	bic.w	r3, r3, #16
 8005996:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8005998:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <FS_SetSweepModeUp+0x44>)
 800599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599c:	ee07 3a90 	vmov	s15, r3
 80059a0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80059a4:	4b07      	ldr	r3, [pc, #28]	; (80059c4 <FS_SetSweepModeUp+0x48>)
 80059a6:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 80059aa:	4b07      	ldr	r3, [pc, #28]	; (80059c8 <FS_SetSweepModeUp+0x4c>)
 80059ac:	4a07      	ldr	r2, [pc, #28]	; (80059cc <FS_SetSweepModeUp+0x50>)
 80059ae:	601a      	str	r2, [r3, #0]


}
 80059b0:	bf00      	nop
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	40000c00 	.word	0x40000c00
 80059c0:	40013400 	.word	0x40013400
 80059c4:	20000124 	.word	0x20000124
 80059c8:	20000120 	.word	0x20000120
 80059cc:	41500000 	.word	0x41500000

080059d0 <FS_SetEncoderControlMode>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	4603      	mov	r3, r0
 80059d8:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 80059da:	79fb      	ldrb	r3, [r7, #7]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d038      	beq.n	8005a52 <FS_SetEncoderControlMode+0x82>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 80059e0:	4a24      	ldr	r2, [pc, #144]	; (8005a74 <FS_SetEncoderControlMode+0xa4>)
 80059e2:	79fb      	ldrb	r3, [r7, #7]
 80059e4:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 80059e6:	4b24      	ldr	r3, [pc, #144]	; (8005a78 <FS_SetEncoderControlMode+0xa8>)
 80059e8:	220d      	movs	r2, #13
 80059ea:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_OUTPUT_ARR;
 80059ec:	4b22      	ldr	r3, [pc, #136]	; (8005a78 <FS_SetEncoderControlMode+0xa8>)
 80059ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80059f2:	62da      	str	r2, [r3, #44]	; 0x2c

		switch(active_sweep_mode)
 80059f4:	4b21      	ldr	r3, [pc, #132]	; (8005a7c <FS_SetEncoderControlMode+0xac>)
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d002      	beq.n	8005a02 <FS_SetEncoderControlMode+0x32>
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d014      	beq.n	8005a2a <FS_SetEncoderControlMode+0x5a>
					// if encoder position is below the lower bounds set it above it
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
				break;
			default:
				break;
 8005a00:	e031      	b.n	8005a66 <FS_SetEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8005a02:	4b1d      	ldr	r3, [pc, #116]	; (8005a78 <FS_SetEncoderControlMode+0xa8>)
 8005a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a06:	ee07 3a90 	vmov	s15, r3
 8005a0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a0e:	4b1c      	ldr	r3, [pc, #112]	; (8005a80 <FS_SetEncoderControlMode+0xb0>)
 8005a10:	edd3 7a00 	vldr	s15, [r3]
 8005a14:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a1c:	dc00      	bgt.n	8005a20 <FS_SetEncoderControlMode+0x50>
				break;
 8005a1e:	e022      	b.n	8005a66 <FS_SetEncoderControlMode+0x96>
						 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8005a20:	4b18      	ldr	r3, [pc, #96]	; (8005a84 <FS_SetEncoderControlMode+0xb4>)
 8005a22:	4a15      	ldr	r2, [pc, #84]	; (8005a78 <FS_SetEncoderControlMode+0xa8>)
 8005a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a26:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8005a28:	e01d      	b.n	8005a66 <FS_SetEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8005a2a:	4b13      	ldr	r3, [pc, #76]	; (8005a78 <FS_SetEncoderControlMode+0xa8>)
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	ee07 3a90 	vmov	s15, r3
 8005a32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005a36:	4b14      	ldr	r3, [pc, #80]	; (8005a88 <FS_SetEncoderControlMode+0xb8>)
 8005a38:	edd3 7a00 	vldr	s15, [r3]
 8005a3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8005a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005a44:	d400      	bmi.n	8005a48 <FS_SetEncoderControlMode+0x78>
				break;
 8005a46:	e00e      	b.n	8005a66 <FS_SetEncoderControlMode+0x96>
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8005a48:	4b0e      	ldr	r3, [pc, #56]	; (8005a84 <FS_SetEncoderControlMode+0xb4>)
 8005a4a:	4a0b      	ldr	r2, [pc, #44]	; (8005a78 <FS_SetEncoderControlMode+0xa8>)
 8005a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4e:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8005a50:	e009      	b.n	8005a66 <FS_SetEncoderControlMode+0x96>
		// switch(active_sweep_mode)
	}
	else
	{
		// ENCODER_SWEEP_SPEED_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8005a52:	4a08      	ldr	r2, [pc, #32]	; (8005a74 <FS_SetEncoderControlMode+0xa4>)
 8005a54:	79fb      	ldrb	r3, [r7, #7]
 8005a56:	7013      	strb	r3, [r2, #0]
		// encoder start value
		ENCODER_TIMER->CNT = 1;
 8005a58:	4b07      	ldr	r3, [pc, #28]	; (8005a78 <FS_SetEncoderControlMode+0xa8>)
 8005a5a:	2201      	movs	r2, #1
 8005a5c:	625a      	str	r2, [r3, #36]	; 0x24
		// encoder limit for default (set speed)
		ENCODER_TIMER->ARR = 1600;
 8005a5e:	4b06      	ldr	r3, [pc, #24]	; (8005a78 <FS_SetEncoderControlMode+0xa8>)
 8005a60:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005a64:	62da      	str	r2, [r3, #44]	; 0x2c
	}

}
 8005a66:	bf00      	nop
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
 8005a72:	bf00      	nop
 8005a74:	20001e55 	.word	0x20001e55
 8005a78:	40012c00 	.word	0x40012c00
 8005a7c:	20001e54 	.word	0x20001e54
 8005a80:	20000124 	.word	0x20000124
 8005a84:	40013400 	.word	0x40013400
 8005a88:	20000120 	.word	0x20000120
 8005a8c:	00000000 	.word	0x00000000

08005a90 <FS_SetSweepTimerAutoReloadForEncoderControl>:
 *	@param None
 *	@retval None
 *
 */
void FS_SetSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 8005a90:	b590      	push	{r4, r7, lr}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	4603      	mov	r3, r0
 8005a98:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 8005a9a:	79fb      	ldrb	r3, [r7, #7]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d122      	bne.n	8005ae6 <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 8005aa0:	4b17      	ldr	r3, [pc, #92]	; (8005b00 <FS_SetSweepTimerAutoReloadForEncoderControl+0x70>)
 8005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	f7fa fd55 	bl	8000554 <__aeabi_ui2d>
 8005aaa:	4603      	mov	r3, r0
 8005aac:	460c      	mov	r4, r1
 8005aae:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8005af0 <FS_SetSweepTimerAutoReloadForEncoderControl+0x60>
 8005ab2:	ec44 3b10 	vmov	d0, r3, r4
 8005ab6:	f00e fb2b 	bl	8014110 <pow>
 8005aba:	ec51 0b10 	vmov	r0, r1, d0
 8005abe:	a30e      	add	r3, pc, #56	; (adr r3, 8005af8 <FS_SetSweepTimerAutoReloadForEncoderControl+0x68>)
 8005ac0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ac4:	f7fa fc0a 	bl	80002dc <__adddf3>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	460c      	mov	r4, r1
 8005acc:	4618      	mov	r0, r3
 8005ace:	4621      	mov	r1, r4
 8005ad0:	f7fb f892 	bl	8000bf8 <__aeabi_d2uiz>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ade:	d002      	beq.n	8005ae6 <FS_SetSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 8005ae0:	4a08      	ldr	r2, [pc, #32]	; (8005b04 <FS_SetSweepTimerAutoReloadForEncoderControl+0x74>)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 8005ae6:	bf00      	nop
 8005ae8:	3714      	adds	r7, #20
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd90      	pop	{r4, r7, pc}
 8005aee:	bf00      	nop
 8005af0:	00000000 	.word	0x00000000
 8005af4:	40080000 	.word	0x40080000
 8005af8:	00000000 	.word	0x00000000
 8005afc:	40d06800 	.word	0x40d06800
 8005b00:	40012c00 	.word	0x40012c00
 8005b04:	40000c00 	.word	0x40000c00

08005b08 <FS_GetCalculatedSweepFrequencyInHertz>:
 *	@param None
 *	@retval None
 *
 */
float FS_GetCalculatedSweepFrequencyInHertz()
{
 8005b08:	b480      	push	{r7}
 8005b0a:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 8005b0c:	4b13      	ldr	r3, [pc, #76]	; (8005b5c <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005b0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d10a      	bne.n	8005b2a <FS_GetCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 8005b14:	4b11      	ldr	r3, [pc, #68]	; (8005b5c <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b18:	ee07 3a90 	vmov	s15, r3
 8005b1c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b20:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8005b60 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 8005b24:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005b28:	e011      	b.n	8005b4e <FS_GetCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 8005b2a:	4b0c      	ldr	r3, [pc, #48]	; (8005b5c <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b2e:	ee07 3a90 	vmov	s15, r3
 8005b32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005b36:	4b09      	ldr	r3, [pc, #36]	; (8005b5c <FS_GetCalculatedSweepFrequencyInHertz+0x54>)
 8005b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b3a:	ee07 3a90 	vmov	s15, r3
 8005b3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005b42:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005b46:	eddf 6a06 	vldr	s13, [pc, #24]	; 8005b60 <FS_GetCalculatedSweepFrequencyInHertz+0x58>
 8005b4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 8005b4e:	eeb0 0a67 	vmov.f32	s0, s15
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	40000c00 	.word	0x40000c00
 8005b60:	4d2037a0 	.word	0x4d2037a0

08005b64 <FuncO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ResetLastEncoderValue()
{
 8005b64:	b480      	push	{r7}
 8005b66:	af00      	add	r7, sp, #0
	func_last_encoder_value = 0;
 8005b68:	4b03      	ldr	r3, [pc, #12]	; (8005b78 <FuncO_ResetLastEncoderValue+0x14>)
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	801a      	strh	r2, [r3, #0]
}
 8005b6e:	bf00      	nop
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr
 8005b78:	20001e92 	.word	0x20001e92

08005b7c <FuncO_MapEncoderPositionToSignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b084      	sub	sp, #16
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	4603      	mov	r3, r0
 8005b84:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile->func;
 8005b86:	2000      	movs	r0, #0
 8005b88:	f000 fdb4 	bl	80066f4 <SM_GetOutputChannel>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005b92:	781b      	ldrb	r3, [r3, #0]
 8005b94:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 8005b96:	4b15      	ldr	r3, [pc, #84]	; (8005bec <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005b98:	881b      	ldrh	r3, [r3, #0]
 8005b9a:	88fa      	ldrh	r2, [r7, #6]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d90c      	bls.n	8005bba <FuncO_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpFunc++;
 8005ba0:	7bfb      	ldrb	r3, [r7, #15]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-2) tmpFunc = IMPULSE_FUNC_MODE;
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
 8005ba8:	2b05      	cmp	r3, #5
 8005baa:	d901      	bls.n	8005bb0 <FuncO_MapEncoderPositionToSignalOutput+0x34>
 8005bac:	2305      	movs	r3, #5
 8005bae:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 8005bb0:	7bfb      	ldrb	r3, [r7, #15]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 f856 	bl	8005c64 <FuncO_ApplyProfileToSignal>
 8005bb8:	e010      	b.n	8005bdc <FuncO_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8005bba:	4b0c      	ldr	r3, [pc, #48]	; (8005bec <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005bbc:	881b      	ldrh	r3, [r3, #0]
 8005bbe:	88fa      	ldrh	r2, [r7, #6]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d20b      	bcs.n	8005bdc <FuncO_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpFunc--;
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005bca:	7bfb      	ldrb	r3, [r7, #15]
 8005bcc:	2b06      	cmp	r3, #6
 8005bce:	d901      	bls.n	8005bd4 <FuncO_MapEncoderPositionToSignalOutput+0x58>
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToSignal(tmpFunc);
 8005bd4:	7bfb      	ldrb	r3, [r7, #15]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f000 f844 	bl	8005c64 <FuncO_ApplyProfileToSignal>
	}
	func_last_encoder_value = pEncoderValue;
 8005bdc:	4a03      	ldr	r2, [pc, #12]	; (8005bec <FuncO_MapEncoderPositionToSignalOutput+0x70>)
 8005bde:	88fb      	ldrh	r3, [r7, #6]
 8005be0:	8013      	strh	r3, [r2, #0]
}
 8005be2:	bf00      	nop
 8005be4:	3710      	adds	r7, #16
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
 8005bea:	bf00      	nop
 8005bec:	20001e92 	.word	0x20001e92

08005bf0 <FuncO_MapEncoderPositionToAuxOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	80fb      	strh	r3, [r7, #6]
	eOutput_mode tmpFunc = SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func;
 8005bfa:	2001      	movs	r0, #1
 8005bfc:	f000 fd7a 	bl	80066f4 <SM_GetOutputChannel>
 8005c00:	4603      	mov	r3, r0
 8005c02:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > func_last_encoder_value)
 8005c0a:	4b15      	ldr	r3, [pc, #84]	; (8005c60 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005c0c:	881b      	ldrh	r3, [r3, #0]
 8005c0e:	88fa      	ldrh	r2, [r7, #6]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d90c      	bls.n	8005c2e <FuncO_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpFunc++;
 8005c14:	7bfb      	ldrb	r3, [r7, #15]
 8005c16:	3301      	adds	r3, #1
 8005c18:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = PWM_FUNC_MODE;
 8005c1a:	7bfb      	ldrb	r3, [r7, #15]
 8005c1c:	2b06      	cmp	r3, #6
 8005c1e:	d901      	bls.n	8005c24 <FuncO_MapEncoderPositionToAuxOutput+0x34>
 8005c20:	2306      	movs	r3, #6
 8005c22:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 8005c24:	7bfb      	ldrb	r3, [r7, #15]
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 f880 	bl	8005d2c <FuncO_ApplyProfileToAux>
 8005c2c:	e010      	b.n	8005c50 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < func_last_encoder_value)
 8005c2e:	4b0c      	ldr	r3, [pc, #48]	; (8005c60 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005c30:	881b      	ldrh	r3, [r3, #0]
 8005c32:	88fa      	ldrh	r2, [r7, #6]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d20b      	bcs.n	8005c50 <FuncO_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpFunc--;
 8005c38:	7bfb      	ldrb	r3, [r7, #15]
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	73fb      	strb	r3, [r7, #15]
		if(tmpFunc > MAX_NUM_FUNC_PRESETS-1) tmpFunc = SINE_FUNC_MODE;
 8005c3e:	7bfb      	ldrb	r3, [r7, #15]
 8005c40:	2b06      	cmp	r3, #6
 8005c42:	d901      	bls.n	8005c48 <FuncO_MapEncoderPositionToAuxOutput+0x58>
 8005c44:	2300      	movs	r3, #0
 8005c46:	73fb      	strb	r3, [r7, #15]
		FuncO_ApplyProfileToAux(tmpFunc);
 8005c48:	7bfb      	ldrb	r3, [r7, #15]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f000 f86e 	bl	8005d2c <FuncO_ApplyProfileToAux>
//		if(tmpFunc == SINE_FUNC_MODE)
//			ENCODER_TIMER->CNT = 20;
	}
	func_last_encoder_value = pEncoderValue;
 8005c50:	4a03      	ldr	r2, [pc, #12]	; (8005c60 <FuncO_MapEncoderPositionToAuxOutput+0x70>)
 8005c52:	88fb      	ldrh	r3, [r7, #6]
 8005c54:	8013      	strh	r3, [r2, #0]
}
 8005c56:	bf00      	nop
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}
 8005c5e:	bf00      	nop
 8005c60:	20001e92 	.word	0x20001e92

08005c64 <FuncO_ApplyProfileToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToSignal(eOutput_mode pPresetEnum)
{
 8005c64:	b590      	push	{r4, r7, lr}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af02      	add	r7, sp, #8
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	71fb      	strb	r3, [r7, #7]

		// set the next function output
		SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8005c6e:	79fc      	ldrb	r4, [r7, #7]
 8005c70:	2000      	movs	r0, #0
 8005c72:	f000 fd3f 	bl	80066f4 <SM_GetOutputChannel>
 8005c76:	4601      	mov	r1, r0
 8005c78:	00e3      	lsls	r3, r4, #3
 8005c7a:	4a27      	ldr	r2, [pc, #156]	; (8005d18 <FuncO_ApplyProfileToSignal+0xb4>)
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


		// copy the lookup table for the next output function in to SignalChannel object
		printf("SM_GetOutputChannel\n");
 8005c82:	4826      	ldr	r0, [pc, #152]	; (8005d1c <FuncO_ApplyProfileToSignal+0xb8>)
 8005c84:	f00c f92a 	bl	8011edc <puts>
		SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005c88:	79fc      	ldrb	r4, [r7, #7]
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	f000 fd32 	bl	80066f4 <SM_GetOutputChannel>
 8005c90:	4601      	mov	r1, r0
 8005c92:	4a21      	ldr	r2, [pc, #132]	; (8005d18 <FuncO_ApplyProfileToSignal+0xb4>)
 8005c94:	00e3      	lsls	r3, r4, #3
 8005c96:	4413      	add	r3, r2
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	604b      	str	r3, [r1, #4]

		// set preset for PGA gain and dsp amplitude adjustment
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8005c9c:	2000      	movs	r0, #0
 8005c9e:	f000 fd29 	bl	80066f4 <SM_GetOutputChannel>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(eTmpVppPreset);
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f001 f856 	bl	8006d60 <VPP_ApplyProfileToSignal>

		// pause timer to reAux both outputs
		OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 8005cb4:	4b1a      	ldr	r3, [pc, #104]	; (8005d20 <FuncO_ApplyProfileToSignal+0xbc>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	4a19      	ldr	r2, [pc, #100]	; (8005d20 <FuncO_ApplyProfileToSignal+0xbc>)
 8005cba:	f023 0301 	bic.w	r3, r3, #1
 8005cbe:	6013      	str	r3, [r2, #0]
		//HAL_TIM_Base_Stop(&htim8);

		// restart the DAC with the new data
		HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005cc0:	2100      	movs	r1, #0
 8005cc2:	4818      	ldr	r0, [pc, #96]	; (8005d24 <FuncO_ApplyProfileToSignal+0xc0>)
 8005cc4:	f005 fb42 	bl	800b34c <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005cc8:	2000      	movs	r0, #0
 8005cca:	f000 fd13 	bl	80066f4 <SM_GetOutputChannel>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	f103 0208 	add.w	r2, r3, #8
 8005cd4:	2300      	movs	r3, #0
 8005cd6:	9300      	str	r3, [sp, #0]
 8005cd8:	2378      	movs	r3, #120	; 0x78
 8005cda:	2100      	movs	r1, #0
 8005cdc:	4811      	ldr	r0, [pc, #68]	; (8005d24 <FuncO_ApplyProfileToSignal+0xc0>)
 8005cde:	f005 fa73 	bl	800b1c8 <HAL_DAC_Start_DMA>

		// restart the the other DAC
		HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005ce2:	2100      	movs	r1, #0
 8005ce4:	4810      	ldr	r0, [pc, #64]	; (8005d28 <FuncO_ApplyProfileToSignal+0xc4>)
 8005ce6:	f005 fb31 	bl	800b34c <HAL_DAC_Stop_DMA>
		HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005cea:	2001      	movs	r0, #1
 8005cec:	f000 fd02 	bl	80066f4 <SM_GetOutputChannel>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	f103 0208 	add.w	r2, r3, #8
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	9300      	str	r3, [sp, #0]
 8005cfa:	2378      	movs	r3, #120	; 0x78
 8005cfc:	2100      	movs	r1, #0
 8005cfe:	480a      	ldr	r0, [pc, #40]	; (8005d28 <FuncO_ApplyProfileToSignal+0xc4>)
 8005d00:	f005 fa62 	bl	800b1c8 <HAL_DAC_Start_DMA>

		// resume timer to reAux both outputs
		//HAL_TIM_Base_Start(&htim8);
		OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8005d04:	4b06      	ldr	r3, [pc, #24]	; (8005d20 <FuncO_ApplyProfileToSignal+0xbc>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	4a05      	ldr	r2, [pc, #20]	; (8005d20 <FuncO_ApplyProfileToSignal+0xbc>)
 8005d0a:	f043 0301 	orr.w	r3, r3, #1
 8005d0e:	6013      	str	r3, [r2, #0]



}
 8005d10:	bf00      	nop
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd90      	pop	{r4, r7, pc}
 8005d18:	20000128 	.word	0x20000128
 8005d1c:	08015cb4 	.word	0x08015cb4
 8005d20:	40013400 	.word	0x40013400
 8005d24:	20002a20 	.word	0x20002a20
 8005d28:	20002a0c 	.word	0x20002a0c

08005d2c <FuncO_ApplyProfileToAux>:

 *	@retval None
 *
 */
void FuncO_ApplyProfileToAux(eOutput_mode pPresetEnum)
{
 8005d2c:	b590      	push	{r4, r7, lr}
 8005d2e:	b087      	sub	sp, #28
 8005d30:	af02      	add	r7, sp, #8
 8005d32:	4603      	mov	r3, r0
 8005d34:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

	// set the next output function
	SM_GetOutputChannel(AUX_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8005d36:	79fc      	ldrb	r4, [r7, #7]
 8005d38:	2001      	movs	r0, #1
 8005d3a:	f000 fcdb 	bl	80066f4 <SM_GetOutputChannel>
 8005d3e:	4601      	mov	r1, r0
 8005d40:	00e3      	lsls	r3, r4, #3
 8005d42:	4a96      	ldr	r2, [pc, #600]	; (8005f9c <FuncO_ApplyProfileToAux+0x270>)
 8005d44:	4413      	add	r3, r2
 8005d46:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8


	if(pPresetEnum == PWM_FUNC_MODE)
 8005d4a:	79fb      	ldrb	r3, [r7, #7]
 8005d4c:	2b06      	cmp	r3, #6
 8005d4e:	d10a      	bne.n	8005d66 <FuncO_ApplyProfileToAux+0x3a>
	{
		printf("FuncO_ApplyProfileToAux PWM_FUNC_MODE\n");
 8005d50:	4893      	ldr	r0, [pc, #588]	; (8005fa0 <FuncO_ApplyProfileToAux+0x274>)
 8005d52:	f00c f8c3 	bl	8011edc <puts>
		// switch output signal from DAC to PWM

		SM_DisableDacToAux();
 8005d56:	f000 ff35 	bl	8006bc4 <SM_DisableDacToAux>
		SM_EnablePwmToAux();
 8005d5a:	f000 fce1 	bl	8006720 <SM_EnablePwmToAux>

		last_output_mode_was_pwm = 1;
 8005d5e:	4b91      	ldr	r3, [pc, #580]	; (8005fa4 <FuncO_ApplyProfileToAux+0x278>)
 8005d60:	2201      	movs	r2, #1
 8005d62:	701a      	strb	r2, [r3, #0]
		res = HAL_TIM_Base_Start(&htim8);
		printf("Result:%u\n",res);
		//OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
	}

}
 8005d64:	e115      	b.n	8005f92 <FuncO_ApplyProfileToAux+0x266>
	else if(last_output_mode_was_pwm)
 8005d66:	4b8f      	ldr	r3, [pc, #572]	; (8005fa4 <FuncO_ApplyProfileToAux+0x278>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f000 808e 	beq.w	8005e8c <FuncO_ApplyProfileToAux+0x160>
		printf("FuncO_ApplyProfileToAux NOT PWM_FUNC_MODE\n");
 8005d70:	488d      	ldr	r0, [pc, #564]	; (8005fa8 <FuncO_ApplyProfileToAux+0x27c>)
 8005d72:	f00c f8b3 	bl	8011edc <puts>
		SM_DisablePwmToAux();
 8005d76:	f000 fe0f 	bl	8006998 <SM_DisablePwmToAux>
		SM_EnableDacToAux();
 8005d7a:	f000 fe49 	bl	8006a10 <SM_EnableDacToAux>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005d7e:	488b      	ldr	r0, [pc, #556]	; (8005fac <FuncO_ApplyProfileToAux+0x280>)
 8005d80:	f00c f8ac 	bl	8011edc <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005d84:	79fc      	ldrb	r4, [r7, #7]
 8005d86:	2001      	movs	r0, #1
 8005d88:	f000 fcb4 	bl	80066f4 <SM_GetOutputChannel>
 8005d8c:	4601      	mov	r1, r0
 8005d8e:	4a83      	ldr	r2, [pc, #524]	; (8005f9c <FuncO_ApplyProfileToAux+0x270>)
 8005d90:	00e3      	lsls	r3, r4, #3
 8005d92:	4413      	add	r3, r2
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005d98:	4884      	ldr	r0, [pc, #528]	; (8005fac <FuncO_ApplyProfileToAux+0x280>)
 8005d9a:	f00c f89f 	bl	8011edc <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8005d9e:	2001      	movs	r0, #1
 8005da0:	f000 fca8 	bl	80066f4 <SM_GetOutputChannel>
 8005da4:	4603      	mov	r3, r0
 8005da6:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	737b      	strb	r3, [r7, #13]
		printf("VPP_ApplyProfileToAux");
 8005dae:	4880      	ldr	r0, [pc, #512]	; (8005fb0 <FuncO_ApplyProfileToAux+0x284>)
 8005db0:	f00c f820 	bl	8011df4 <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 8005db4:	7b7b      	ldrb	r3, [r7, #13]
 8005db6:	4618      	mov	r0, r3
 8005db8:	f001 f800 	bl	8006dbc <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim2)\n");
 8005dbc:	487d      	ldr	r0, [pc, #500]	; (8005fb4 <FuncO_ApplyProfileToAux+0x288>)
 8005dbe:	f00c f88d 	bl	8011edc <puts>
		res = HAL_TIM_Base_Stop(&htim8);
 8005dc2:	487d      	ldr	r0, [pc, #500]	; (8005fb8 <FuncO_ApplyProfileToAux+0x28c>)
 8005dc4:	f007 fc68 	bl	800d698 <HAL_TIM_Base_Stop>
 8005dc8:	4603      	mov	r3, r0
 8005dca:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005dcc:	7bbb      	ldrb	r3, [r7, #14]
 8005dce:	4619      	mov	r1, r3
 8005dd0:	487a      	ldr	r0, [pc, #488]	; (8005fbc <FuncO_ApplyProfileToAux+0x290>)
 8005dd2:	f00c f80f 	bl	8011df4 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005dd6:	487a      	ldr	r0, [pc, #488]	; (8005fc0 <FuncO_ApplyProfileToAux+0x294>)
 8005dd8:	f00c f880 	bl	8011edc <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005ddc:	2100      	movs	r1, #0
 8005dde:	4879      	ldr	r0, [pc, #484]	; (8005fc4 <FuncO_ApplyProfileToAux+0x298>)
 8005de0:	f005 fab4 	bl	800b34c <HAL_DAC_Stop_DMA>
 8005de4:	4603      	mov	r3, r0
 8005de6:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005de8:	7bbb      	ldrb	r3, [r7, #14]
 8005dea:	4619      	mov	r1, r3
 8005dec:	4873      	ldr	r0, [pc, #460]	; (8005fbc <FuncO_ApplyProfileToAux+0x290>)
 8005dee:	f00c f801 	bl	8011df4 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005df2:	4875      	ldr	r0, [pc, #468]	; (8005fc8 <FuncO_ApplyProfileToAux+0x29c>)
 8005df4:	f00c f872 	bl	8011edc <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005df8:	2001      	movs	r0, #1
 8005dfa:	f000 fc7b 	bl	80066f4 <SM_GetOutputChannel>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	f103 0208 	add.w	r2, r3, #8
 8005e04:	2300      	movs	r3, #0
 8005e06:	9300      	str	r3, [sp, #0]
 8005e08:	2378      	movs	r3, #120	; 0x78
 8005e0a:	2100      	movs	r1, #0
 8005e0c:	486d      	ldr	r0, [pc, #436]	; (8005fc4 <FuncO_ApplyProfileToAux+0x298>)
 8005e0e:	f005 f9db 	bl	800b1c8 <HAL_DAC_Start_DMA>
 8005e12:	4603      	mov	r3, r0
 8005e14:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005e16:	7bbb      	ldrb	r3, [r7, #14]
 8005e18:	4619      	mov	r1, r3
 8005e1a:	4868      	ldr	r0, [pc, #416]	; (8005fbc <FuncO_ApplyProfileToAux+0x290>)
 8005e1c:	f00b ffea 	bl	8011df4 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005e20:	486a      	ldr	r0, [pc, #424]	; (8005fcc <FuncO_ApplyProfileToAux+0x2a0>)
 8005e22:	f00c f85b 	bl	8011edc <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005e26:	2100      	movs	r1, #0
 8005e28:	4869      	ldr	r0, [pc, #420]	; (8005fd0 <FuncO_ApplyProfileToAux+0x2a4>)
 8005e2a:	f005 fa8f 	bl	800b34c <HAL_DAC_Stop_DMA>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005e32:	7bbb      	ldrb	r3, [r7, #14]
 8005e34:	4619      	mov	r1, r3
 8005e36:	4861      	ldr	r0, [pc, #388]	; (8005fbc <FuncO_ApplyProfileToAux+0x290>)
 8005e38:	f00b ffdc 	bl	8011df4 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005e3c:	4865      	ldr	r0, [pc, #404]	; (8005fd4 <FuncO_ApplyProfileToAux+0x2a8>)
 8005e3e:	f00c f84d 	bl	8011edc <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005e42:	2000      	movs	r0, #0
 8005e44:	f000 fc56 	bl	80066f4 <SM_GetOutputChannel>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	f103 0208 	add.w	r2, r3, #8
 8005e4e:	2300      	movs	r3, #0
 8005e50:	9300      	str	r3, [sp, #0]
 8005e52:	2378      	movs	r3, #120	; 0x78
 8005e54:	2100      	movs	r1, #0
 8005e56:	485e      	ldr	r0, [pc, #376]	; (8005fd0 <FuncO_ApplyProfileToAux+0x2a4>)
 8005e58:	f005 f9b6 	bl	800b1c8 <HAL_DAC_Start_DMA>
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005e60:	7bbb      	ldrb	r3, [r7, #14]
 8005e62:	4619      	mov	r1, r3
 8005e64:	4855      	ldr	r0, [pc, #340]	; (8005fbc <FuncO_ApplyProfileToAux+0x290>)
 8005e66:	f00b ffc5 	bl	8011df4 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim2)\n");
 8005e6a:	485b      	ldr	r0, [pc, #364]	; (8005fd8 <FuncO_ApplyProfileToAux+0x2ac>)
 8005e6c:	f00c f836 	bl	8011edc <puts>
		res = HAL_TIM_Base_Start(&htim8);
 8005e70:	4851      	ldr	r0, [pc, #324]	; (8005fb8 <FuncO_ApplyProfileToAux+0x28c>)
 8005e72:	f007 fbe3 	bl	800d63c <HAL_TIM_Base_Start>
 8005e76:	4603      	mov	r3, r0
 8005e78:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005e7a:	7bbb      	ldrb	r3, [r7, #14]
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	484f      	ldr	r0, [pc, #316]	; (8005fbc <FuncO_ApplyProfileToAux+0x290>)
 8005e80:	f00b ffb8 	bl	8011df4 <iprintf>
		last_output_mode_was_pwm = 0;
 8005e84:	4b47      	ldr	r3, [pc, #284]	; (8005fa4 <FuncO_ApplyProfileToAux+0x278>)
 8005e86:	2200      	movs	r2, #0
 8005e88:	701a      	strb	r2, [r3, #0]
}
 8005e8a:	e082      	b.n	8005f92 <FuncO_ApplyProfileToAux+0x266>
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005e8c:	4847      	ldr	r0, [pc, #284]	; (8005fac <FuncO_ApplyProfileToAux+0x280>)
 8005e8e:	f00c f825 	bl	8011edc <puts>
		SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8005e92:	79fc      	ldrb	r4, [r7, #7]
 8005e94:	2001      	movs	r0, #1
 8005e96:	f000 fc2d 	bl	80066f4 <SM_GetOutputChannel>
 8005e9a:	4601      	mov	r1, r0
 8005e9c:	4a3f      	ldr	r2, [pc, #252]	; (8005f9c <FuncO_ApplyProfileToAux+0x270>)
 8005e9e:	00e3      	lsls	r3, r4, #3
 8005ea0:	4413      	add	r3, r2
 8005ea2:	685b      	ldr	r3, [r3, #4]
 8005ea4:	604b      	str	r3, [r1, #4]
		printf("FuncO_ApplyProfileToAux SM_GetOutputChannel\n");
 8005ea6:	4841      	ldr	r0, [pc, #260]	; (8005fac <FuncO_ApplyProfileToAux+0x280>)
 8005ea8:	f00c f818 	bl	8011edc <puts>
		eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 8005eac:	2001      	movs	r0, #1
 8005eae:	f000 fc21 	bl	80066f4 <SM_GetOutputChannel>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	73fb      	strb	r3, [r7, #15]
		printf("VPP_ApplyProfileToAux");
 8005ebc:	483c      	ldr	r0, [pc, #240]	; (8005fb0 <FuncO_ApplyProfileToAux+0x284>)
 8005ebe:	f00b ff99 	bl	8011df4 <iprintf>
		VPP_ApplyProfileToAux(eTmpVppPreset);
 8005ec2:	7bfb      	ldrb	r3, [r7, #15]
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f000 ff79 	bl	8006dbc <VPP_ApplyProfileToAux>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Stop(&htim2)\n");
 8005eca:	483a      	ldr	r0, [pc, #232]	; (8005fb4 <FuncO_ApplyProfileToAux+0x288>)
 8005ecc:	f00c f806 	bl	8011edc <puts>
		res = HAL_TIM_Base_Stop(&htim8);
 8005ed0:	4839      	ldr	r0, [pc, #228]	; (8005fb8 <FuncO_ApplyProfileToAux+0x28c>)
 8005ed2:	f007 fbe1 	bl	800d698 <HAL_TIM_Base_Stop>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005eda:	7bbb      	ldrb	r3, [r7, #14]
 8005edc:	4619      	mov	r1, r3
 8005ede:	4837      	ldr	r0, [pc, #220]	; (8005fbc <FuncO_ApplyProfileToAux+0x290>)
 8005ee0:	f00b ff88 	bl	8011df4 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005ee4:	4836      	ldr	r0, [pc, #216]	; (8005fc0 <FuncO_ApplyProfileToAux+0x294>)
 8005ee6:	f00b fff9 	bl	8011edc <puts>
		res = HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8005eea:	2100      	movs	r1, #0
 8005eec:	4835      	ldr	r0, [pc, #212]	; (8005fc4 <FuncO_ApplyProfileToAux+0x298>)
 8005eee:	f005 fa2d 	bl	800b34c <HAL_DAC_Stop_DMA>
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005ef6:	7bbb      	ldrb	r3, [r7, #14]
 8005ef8:	4619      	mov	r1, r3
 8005efa:	4830      	ldr	r0, [pc, #192]	; (8005fbc <FuncO_ApplyProfileToAux+0x290>)
 8005efc:	f00b ff7a 	bl	8011df4 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1)\n");
 8005f00:	4831      	ldr	r0, [pc, #196]	; (8005fc8 <FuncO_ApplyProfileToAux+0x29c>)
 8005f02:	f00b ffeb 	bl	8011edc <puts>
		res = HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005f06:	2001      	movs	r0, #1
 8005f08:	f000 fbf4 	bl	80066f4 <SM_GetOutputChannel>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	f103 0208 	add.w	r2, r3, #8
 8005f12:	2300      	movs	r3, #0
 8005f14:	9300      	str	r3, [sp, #0]
 8005f16:	2378      	movs	r3, #120	; 0x78
 8005f18:	2100      	movs	r1, #0
 8005f1a:	482a      	ldr	r0, [pc, #168]	; (8005fc4 <FuncO_ApplyProfileToAux+0x298>)
 8005f1c:	f005 f954 	bl	800b1c8 <HAL_DAC_Start_DMA>
 8005f20:	4603      	mov	r3, r0
 8005f22:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005f24:	7bbb      	ldrb	r3, [r7, #14]
 8005f26:	4619      	mov	r1, r3
 8005f28:	4824      	ldr	r0, [pc, #144]	; (8005fbc <FuncO_ApplyProfileToAux+0x290>)
 8005f2a:	f00b ff63 	bl	8011df4 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005f2e:	4827      	ldr	r0, [pc, #156]	; (8005fcc <FuncO_ApplyProfileToAux+0x2a0>)
 8005f30:	f00b ffd4 	bl	8011edc <puts>
		res = HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8005f34:	2100      	movs	r1, #0
 8005f36:	4826      	ldr	r0, [pc, #152]	; (8005fd0 <FuncO_ApplyProfileToAux+0x2a4>)
 8005f38:	f005 fa08 	bl	800b34c <HAL_DAC_Stop_DMA>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005f40:	7bbb      	ldrb	r3, [r7, #14]
 8005f42:	4619      	mov	r1, r3
 8005f44:	481d      	ldr	r0, [pc, #116]	; (8005fbc <FuncO_ApplyProfileToAux+0x290>)
 8005f46:	f00b ff55 	bl	8011df4 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1)\n");
 8005f4a:	4822      	ldr	r0, [pc, #136]	; (8005fd4 <FuncO_ApplyProfileToAux+0x2a8>)
 8005f4c:	f00b ffc6 	bl	8011edc <puts>
		res = HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8005f50:	2000      	movs	r0, #0
 8005f52:	f000 fbcf 	bl	80066f4 <SM_GetOutputChannel>
 8005f56:	4603      	mov	r3, r0
 8005f58:	f103 0208 	add.w	r2, r3, #8
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	2378      	movs	r3, #120	; 0x78
 8005f62:	2100      	movs	r1, #0
 8005f64:	481a      	ldr	r0, [pc, #104]	; (8005fd0 <FuncO_ApplyProfileToAux+0x2a4>)
 8005f66:	f005 f92f 	bl	800b1c8 <HAL_DAC_Start_DMA>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005f6e:	7bbb      	ldrb	r3, [r7, #14]
 8005f70:	4619      	mov	r1, r3
 8005f72:	4812      	ldr	r0, [pc, #72]	; (8005fbc <FuncO_ApplyProfileToAux+0x290>)
 8005f74:	f00b ff3e 	bl	8011df4 <iprintf>
		printf("FuncO_ApplyProfileToAux HAL_TIM_Base_Start(&htim2)\n");
 8005f78:	4817      	ldr	r0, [pc, #92]	; (8005fd8 <FuncO_ApplyProfileToAux+0x2ac>)
 8005f7a:	f00b ffaf 	bl	8011edc <puts>
		res = HAL_TIM_Base_Start(&htim8);
 8005f7e:	480e      	ldr	r0, [pc, #56]	; (8005fb8 <FuncO_ApplyProfileToAux+0x28c>)
 8005f80:	f007 fb5c 	bl	800d63c <HAL_TIM_Base_Start>
 8005f84:	4603      	mov	r3, r0
 8005f86:	73bb      	strb	r3, [r7, #14]
		printf("Result:%u\n",res);
 8005f88:	7bbb      	ldrb	r3, [r7, #14]
 8005f8a:	4619      	mov	r1, r3
 8005f8c:	480b      	ldr	r0, [pc, #44]	; (8005fbc <FuncO_ApplyProfileToAux+0x290>)
 8005f8e:	f00b ff31 	bl	8011df4 <iprintf>
}
 8005f92:	bf00      	nop
 8005f94:	3714      	adds	r7, #20
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd90      	pop	{r4, r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	20000128 	.word	0x20000128
 8005fa0:	08015cc8 	.word	0x08015cc8
 8005fa4:	20001e90 	.word	0x20001e90
 8005fa8:	08015cf0 	.word	0x08015cf0
 8005fac:	08015d1c 	.word	0x08015d1c
 8005fb0:	08015d48 	.word	0x08015d48
 8005fb4:	08015d60 	.word	0x08015d60
 8005fb8:	20002b58 	.word	0x20002b58
 8005fbc:	08015d94 	.word	0x08015d94
 8005fc0:	08015da0 	.word	0x08015da0
 8005fc4:	20002a0c 	.word	0x20002a0c
 8005fc8:	08015de4 	.word	0x08015de4
 8005fcc:	08015e28 	.word	0x08015e28
 8005fd0:	20002a20 	.word	0x20002a20
 8005fd4:	08015e6c 	.word	0x08015e6c
 8005fd8:	08015eb0 	.word	0x08015eb0

08005fdc <GO_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void GO_ResetLastEncoderValue()
{
 8005fdc:	b480      	push	{r7}
 8005fde:	af00      	add	r7, sp, #0
	gain_last_encoder_value = 0;
 8005fe0:	4b03      	ldr	r3, [pc, #12]	; (8005ff0 <GO_ResetLastEncoderValue+0x14>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	801a      	strh	r2, [r3, #0]
}
 8005fe6:	bf00      	nop
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	20001e94 	.word	0x20001e94

08005ff4 <GO_MapEncoderPositionToSignalOutput>:
 *	@param None
 *	@retval None
 *
 */
void GO_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	b084      	sub	sp, #16
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	80fb      	strh	r3, [r7, #6]
	eGainSettings_t temp_gain = SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile->gain;
 8005ffe:	2000      	movs	r0, #0
 8006000:	f000 fb78 	bl	80066f4 <SM_GetOutputChannel>
 8006004:	4603      	mov	r3, r0
 8006006:	f8d3 31f0 	ldr.w	r3, [r3, #496]	; 0x1f0
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > gain_last_encoder_value)
 800600e:	4b15      	ldr	r3, [pc, #84]	; (8006064 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8006010:	881b      	ldrh	r3, [r3, #0]
 8006012:	88fa      	ldrh	r2, [r7, #6]
 8006014:	429a      	cmp	r2, r3
 8006016:	d90c      	bls.n	8006032 <GO_MapEncoderPositionToSignalOutput+0x3e>
	{
		temp_gain++;
 8006018:	7bfb      	ldrb	r3, [r7, #15]
 800601a:	3301      	adds	r3, #1
 800601c:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = SEVEN_GAIN;
 800601e:	7bfb      	ldrb	r3, [r7, #15]
 8006020:	2b07      	cmp	r3, #7
 8006022:	d901      	bls.n	8006028 <GO_MapEncoderPositionToSignalOutput+0x34>
 8006024:	2307      	movs	r3, #7
 8006026:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 8006028:	7bfb      	ldrb	r3, [r7, #15]
 800602a:	4618      	mov	r0, r3
 800602c:	f000 f81c 	bl	8006068 <GO_ApplyPresetToSignal>
 8006030:	e010      	b.n	8006054 <GO_MapEncoderPositionToSignalOutput+0x60>

	}
	else if (pEncoderValue < gain_last_encoder_value)
 8006032:	4b0c      	ldr	r3, [pc, #48]	; (8006064 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8006034:	881b      	ldrh	r3, [r3, #0]
 8006036:	88fa      	ldrh	r2, [r7, #6]
 8006038:	429a      	cmp	r2, r3
 800603a:	d20b      	bcs.n	8006054 <GO_MapEncoderPositionToSignalOutput+0x60>
	{
		temp_gain--;
 800603c:	7bfb      	ldrb	r3, [r7, #15]
 800603e:	3b01      	subs	r3, #1
 8006040:	73fb      	strb	r3, [r7, #15]
		if(temp_gain > MAX_NUM_GAIN_PRESETS-1) temp_gain = ZERO_GAIN;
 8006042:	7bfb      	ldrb	r3, [r7, #15]
 8006044:	2b07      	cmp	r3, #7
 8006046:	d901      	bls.n	800604c <GO_MapEncoderPositionToSignalOutput+0x58>
 8006048:	2300      	movs	r3, #0
 800604a:	73fb      	strb	r3, [r7, #15]
		GO_ApplyPresetToSignal(temp_gain);
 800604c:	7bfb      	ldrb	r3, [r7, #15]
 800604e:	4618      	mov	r0, r3
 8006050:	f000 f80a 	bl	8006068 <GO_ApplyPresetToSignal>
	}
	gain_last_encoder_value = pEncoderValue;
 8006054:	4a03      	ldr	r2, [pc, #12]	; (8006064 <GO_MapEncoderPositionToSignalOutput+0x70>)
 8006056:	88fb      	ldrh	r3, [r7, #6]
 8006058:	8013      	strh	r3, [r2, #0]

	// artifically offset PWM signal above DC
	//BO_SetPwmSignalOffsetForGain(temp_gain);

}
 800605a:	bf00      	nop
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}
 8006062:	bf00      	nop
 8006064:	20001e94 	.word	0x20001e94

08006068 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 8006068:	b590      	push	{r4, r7, lr}
 800606a:	b083      	sub	sp, #12
 800606c:	af00      	add	r7, sp, #0
 800606e:	4603      	mov	r3, r0
 8006070:	71fb      	strb	r3, [r7, #7]




	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 8006072:	79fc      	ldrb	r4, [r7, #7]
 8006074:	2000      	movs	r0, #0
 8006076:	f000 fb3d 	bl	80066f4 <SM_GetOutputChannel>
 800607a:	4601      	mov	r1, r0
 800607c:	4623      	mov	r3, r4
 800607e:	005b      	lsls	r3, r3, #1
 8006080:	4423      	add	r3, r4
 8006082:	4a4f      	ldr	r2, [pc, #316]	; (80061c0 <GO_ApplyPresetToSignal+0x158>)
 8006084:	4413      	add	r3, r2
 8006086:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 800608a:	79fb      	ldrb	r3, [r7, #7]
 800608c:	2b07      	cmp	r3, #7
 800608e:	f200 8093 	bhi.w	80061b8 <GO_ApplyPresetToSignal+0x150>
 8006092:	a201      	add	r2, pc, #4	; (adr r2, 8006098 <GO_ApplyPresetToSignal+0x30>)
 8006094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006098:	080060b9 	.word	0x080060b9
 800609c:	080060d9 	.word	0x080060d9
 80060a0:	080060f9 	.word	0x080060f9
 80060a4:	08006119 	.word	0x08006119
 80060a8:	08006139 	.word	0x08006139
 80060ac:	08006159 	.word	0x08006159
 80060b0:	08006179 	.word	0x08006179
 80060b4:	08006199 	.word	0x08006199
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 80060b8:	2200      	movs	r2, #0
 80060ba:	2101      	movs	r1, #1
 80060bc:	4841      	ldr	r0, [pc, #260]	; (80061c4 <GO_ApplyPresetToSignal+0x15c>)
 80060be:	f006 f9c3 	bl	800c448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 80060c2:	2200      	movs	r2, #0
 80060c4:	2120      	movs	r1, #32
 80060c6:	4840      	ldr	r0, [pc, #256]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 80060c8:	f006 f9be 	bl	800c448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 80060cc:	2200      	movs	r2, #0
 80060ce:	2110      	movs	r1, #16
 80060d0:	483d      	ldr	r0, [pc, #244]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 80060d2:	f006 f9b9 	bl	800c448 <HAL_GPIO_WritePin>
			break;
 80060d6:	e06f      	b.n	80061b8 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 80060d8:	2201      	movs	r2, #1
 80060da:	2101      	movs	r1, #1
 80060dc:	4839      	ldr	r0, [pc, #228]	; (80061c4 <GO_ApplyPresetToSignal+0x15c>)
 80060de:	f006 f9b3 	bl	800c448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 80060e2:	2200      	movs	r2, #0
 80060e4:	2120      	movs	r1, #32
 80060e6:	4838      	ldr	r0, [pc, #224]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 80060e8:	f006 f9ae 	bl	800c448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 80060ec:	2200      	movs	r2, #0
 80060ee:	2110      	movs	r1, #16
 80060f0:	4835      	ldr	r0, [pc, #212]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 80060f2:	f006 f9a9 	bl	800c448 <HAL_GPIO_WritePin>
			break;
 80060f6:	e05f      	b.n	80061b8 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 80060f8:	2200      	movs	r2, #0
 80060fa:	2101      	movs	r1, #1
 80060fc:	4831      	ldr	r0, [pc, #196]	; (80061c4 <GO_ApplyPresetToSignal+0x15c>)
 80060fe:	f006 f9a3 	bl	800c448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 8006102:	2201      	movs	r2, #1
 8006104:	2120      	movs	r1, #32
 8006106:	4830      	ldr	r0, [pc, #192]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 8006108:	f006 f99e 	bl	800c448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 800610c:	2200      	movs	r2, #0
 800610e:	2110      	movs	r1, #16
 8006110:	482d      	ldr	r0, [pc, #180]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 8006112:	f006 f999 	bl	800c448 <HAL_GPIO_WritePin>
			break;
 8006116:	e04f      	b.n	80061b8 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8006118:	2201      	movs	r2, #1
 800611a:	2101      	movs	r1, #1
 800611c:	4829      	ldr	r0, [pc, #164]	; (80061c4 <GO_ApplyPresetToSignal+0x15c>)
 800611e:	f006 f993 	bl	800c448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 8006122:	2201      	movs	r2, #1
 8006124:	2120      	movs	r1, #32
 8006126:	4828      	ldr	r0, [pc, #160]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 8006128:	f006 f98e 	bl	800c448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_RESET);
 800612c:	2200      	movs	r2, #0
 800612e:	2110      	movs	r1, #16
 8006130:	4825      	ldr	r0, [pc, #148]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 8006132:	f006 f989 	bl	800c448 <HAL_GPIO_WritePin>
			break;
 8006136:	e03f      	b.n	80061b8 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8006138:	2200      	movs	r2, #0
 800613a:	2101      	movs	r1, #1
 800613c:	4821      	ldr	r0, [pc, #132]	; (80061c4 <GO_ApplyPresetToSignal+0x15c>)
 800613e:	f006 f983 	bl	800c448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 8006142:	2200      	movs	r2, #0
 8006144:	2120      	movs	r1, #32
 8006146:	4820      	ldr	r0, [pc, #128]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 8006148:	f006 f97e 	bl	800c448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 800614c:	2201      	movs	r2, #1
 800614e:	2110      	movs	r1, #16
 8006150:	481d      	ldr	r0, [pc, #116]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 8006152:	f006 f979 	bl	800c448 <HAL_GPIO_WritePin>
			break;
 8006156:	e02f      	b.n	80061b8 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8006158:	2201      	movs	r2, #1
 800615a:	2101      	movs	r1, #1
 800615c:	4819      	ldr	r0, [pc, #100]	; (80061c4 <GO_ApplyPresetToSignal+0x15c>)
 800615e:	f006 f973 	bl	800c448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_RESET);
 8006162:	2200      	movs	r2, #0
 8006164:	2120      	movs	r1, #32
 8006166:	4818      	ldr	r0, [pc, #96]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 8006168:	f006 f96e 	bl	800c448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 800616c:	2201      	movs	r2, #1
 800616e:	2110      	movs	r1, #16
 8006170:	4815      	ldr	r0, [pc, #84]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 8006172:	f006 f969 	bl	800c448 <HAL_GPIO_WritePin>
			break;
 8006176:	e01f      	b.n	80061b8 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_RESET);
 8006178:	2200      	movs	r2, #0
 800617a:	2101      	movs	r1, #1
 800617c:	4811      	ldr	r0, [pc, #68]	; (80061c4 <GO_ApplyPresetToSignal+0x15c>)
 800617e:	f006 f963 	bl	800c448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 8006182:	2201      	movs	r2, #1
 8006184:	2120      	movs	r1, #32
 8006186:	4810      	ldr	r0, [pc, #64]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 8006188:	f006 f95e 	bl	800c448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 800618c:	2201      	movs	r2, #1
 800618e:	2110      	movs	r1, #16
 8006190:	480d      	ldr	r0, [pc, #52]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 8006192:	f006 f959 	bl	800c448 <HAL_GPIO_WritePin>
			break;
 8006196:	e00f      	b.n	80061b8 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin, GPIO_PIN_SET);
 8006198:	2201      	movs	r2, #1
 800619a:	2101      	movs	r1, #1
 800619c:	4809      	ldr	r0, [pc, #36]	; (80061c4 <GO_ApplyPresetToSignal+0x15c>)
 800619e:	f006 f953 	bl	800c448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin, GPIO_PIN_SET);
 80061a2:	2201      	movs	r2, #1
 80061a4:	2120      	movs	r1, #32
 80061a6:	4808      	ldr	r0, [pc, #32]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 80061a8:	f006 f94e 	bl	800c448 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin, GPIO_PIN_SET);
 80061ac:	2201      	movs	r2, #1
 80061ae:	2110      	movs	r1, #16
 80061b0:	4805      	ldr	r0, [pc, #20]	; (80061c8 <GO_ApplyPresetToSignal+0x160>)
 80061b2:	f006 f949 	bl	800c448 <HAL_GPIO_WritePin>
			break;
 80061b6:	bf00      	nop
	}

}
 80061b8:	bf00      	nop
 80061ba:	370c      	adds	r7, #12
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd90      	pop	{r4, r7, pc}
 80061c0:	20000160 	.word	0x20000160
 80061c4:	48000400 	.word	0x48000400
 80061c8:	48000800 	.word	0x48000800

080061cc <IT_ArbitrateInputTrigger>:
 *	@param None
 *	@retval None
 *
 */
void IT_ArbitrateInputTrigger()
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b082      	sub	sp, #8
 80061d0:	af02      	add	r7, sp, #8
	if(IT_GetTriggerStatus())
 80061d2:	f000 f8e1 	bl	8006398 <IT_GetTriggerStatus>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d020      	beq.n	800621e <IT_ArbitrateInputTrigger+0x52>
		OUTPUT_TIMER->SMCR &= ~(TIM_SMCR_SMS_2);
		// set status to disabled
*/

		// disable freq count timer
		HAL_TIM_IC_Stop_DMA(&htim2, TIM_CHANNEL_1);
 80061dc:	2100      	movs	r1, #0
 80061de:	4849      	ldr	r0, [pc, #292]	; (8006304 <IT_ArbitrateInputTrigger+0x138>)
 80061e0:	f007 feae 	bl	800df40 <HAL_TIM_IC_Stop_DMA>
//		TIM2->DIER &= ~TIM_DIER_UDE;
//		TIM2->CR1 &= ~TIM_CR1_CEN;

		// disable the comparator
		HAL_COMP_Stop(&hcomp1);
 80061e4:	4848      	ldr	r0, [pc, #288]	; (8006308 <IT_ArbitrateInputTrigger+0x13c>)
 80061e6:	f004 fd85 	bl	800acf4 <HAL_COMP_Stop>

		// stop the ADC
		HAL_ADC_Stop_DMA(&hadc1);
 80061ea:	4848      	ldr	r0, [pc, #288]	; (800630c <IT_ArbitrateInputTrigger+0x140>)
 80061ec:	f003 fb28 	bl	8009840 <HAL_ADC_Stop_DMA>

		GPIOA->AFR[0] &= ~(GPIO_AF1_TIM2);
 80061f0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80061f4:	6a1b      	ldr	r3, [r3, #32]
 80061f6:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80061fa:	f023 0301 	bic.w	r3, r3, #1
 80061fe:	6213      	str	r3, [r2, #32]
		GPIOA->AFR[0] &= ~(GPIO_AF8_COMP1);
 8006200:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800620a:	f023 0308 	bic.w	r3, r3, #8
 800620e:	6213      	str	r3, [r2, #32]


		IT_SetTriggerStatus(DISABLE_TRIGGER_INPUT);
 8006210:	2000      	movs	r0, #0
 8006212:	f000 f8cd 	bl	80063b0 <IT_SetTriggerStatus>

		FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 8006216:	2000      	movs	r0, #0
 8006218:	f7ff fd24 	bl	8005c64 <FuncO_ApplyProfileToSignal>
		}
		// set status to enabled
		IT_SetTriggerStatus(ENABLE_TRIGGER_INPUT);
	}

}
 800621c:	e06f      	b.n	80062fe <IT_ArbitrateInputTrigger+0x132>
		switch(IT_GetActiveTriggerMode())
 800621e:	f000 f89f 	bl	8006360 <IT_GetActiveTriggerMode>
 8006222:	4603      	mov	r3, r0
 8006224:	2b01      	cmp	r3, #1
 8006226:	d017      	beq.n	8006258 <IT_ArbitrateInputTrigger+0x8c>
 8006228:	2b02      	cmp	r3, #2
 800622a:	d050      	beq.n	80062ce <IT_ArbitrateInputTrigger+0x102>
 800622c:	2b00      	cmp	r3, #0
 800622e:	d000      	beq.n	8006232 <IT_ArbitrateInputTrigger+0x66>
				break;
 8006230:	e062      	b.n	80062f8 <IT_ArbitrateInputTrigger+0x12c>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
 8006232:	2201      	movs	r2, #1
 8006234:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006238:	4835      	ldr	r0, [pc, #212]	; (8006310 <IT_ArbitrateInputTrigger+0x144>)
 800623a:	f006 f905 	bl	800c448 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); 	// TS5A3357 Pin5
 800623e:	2200      	movs	r2, #0
 8006240:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006244:	4832      	ldr	r0, [pc, #200]	; (8006310 <IT_ArbitrateInputTrigger+0x144>)
 8006246:	f006 f8ff 	bl	800c448 <HAL_GPIO_WritePin>
				HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, freq_count_store, MAX_FREQ_COUNT_STORE);
 800624a:	2308      	movs	r3, #8
 800624c:	4a31      	ldr	r2, [pc, #196]	; (8006314 <IT_ArbitrateInputTrigger+0x148>)
 800624e:	2100      	movs	r1, #0
 8006250:	482c      	ldr	r0, [pc, #176]	; (8006304 <IT_ArbitrateInputTrigger+0x138>)
 8006252:	f007 fce7 	bl	800dc24 <HAL_TIM_IC_Start_DMA>
				break;
 8006256:	e04f      	b.n	80062f8 <IT_ArbitrateInputTrigger+0x12c>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8006258:	2200      	movs	r2, #0
 800625a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800625e:	482c      	ldr	r0, [pc, #176]	; (8006310 <IT_ArbitrateInputTrigger+0x144>)
 8006260:	f006 f8f2 	bl	800c448 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET); 		// TS5A3357 Pin5
 8006264:	2201      	movs	r2, #1
 8006266:	f44f 7100 	mov.w	r1, #512	; 0x200
 800626a:	4829      	ldr	r0, [pc, #164]	; (8006310 <IT_ArbitrateInputTrigger+0x144>)
 800626c:	f006 f8ec 	bl	800c448 <HAL_GPIO_WritePin>
				COMP1->CSR |= COMP_CSR_EN;
 8006270:	4b29      	ldr	r3, [pc, #164]	; (8006318 <IT_ArbitrateInputTrigger+0x14c>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a28      	ldr	r2, [pc, #160]	; (8006318 <IT_ArbitrateInputTrigger+0x14c>)
 8006276:	f043 0301 	orr.w	r3, r3, #1
 800627a:	6013      	str	r3, [r2, #0]
				GPIOA->AFR[0] &= ~((1 << 0x04) | (1 << 0x03) | (1 << 0x02) | (1 << 0x01));	// reset
 800627c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006286:	f023 031e 	bic.w	r3, r3, #30
 800628a:	6213      	str	r3, [r2, #32]
				GPIOA->AFR[0] |= (GPIO_AF8_COMP1);
 800628c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006290:	6a1b      	ldr	r3, [r3, #32]
 8006292:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8006296:	f043 0308 	orr.w	r3, r3, #8
 800629a:	6213      	str	r3, [r2, #32]
				OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 800629c:	4b1f      	ldr	r3, [pc, #124]	; (800631c <IT_ArbitrateInputTrigger+0x150>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4a1e      	ldr	r2, [pc, #120]	; (800631c <IT_ArbitrateInputTrigger+0x150>)
 80062a2:	f023 0301 	bic.w	r3, r3, #1
 80062a6:	6013      	str	r3, [r2, #0]
				HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80062a8:	2100      	movs	r1, #0
 80062aa:	481d      	ldr	r0, [pc, #116]	; (8006320 <IT_ArbitrateInputTrigger+0x154>)
 80062ac:	f005 f84e 	bl	800b34c <HAL_DAC_Stop_DMA>
				HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, comp1_output_value, 1, DAC_ALIGN_12B_R);
 80062b0:	2300      	movs	r3, #0
 80062b2:	9300      	str	r3, [sp, #0]
 80062b4:	2301      	movs	r3, #1
 80062b6:	4a1b      	ldr	r2, [pc, #108]	; (8006324 <IT_ArbitrateInputTrigger+0x158>)
 80062b8:	2100      	movs	r1, #0
 80062ba:	4819      	ldr	r0, [pc, #100]	; (8006320 <IT_ArbitrateInputTrigger+0x154>)
 80062bc:	f004 ff84 	bl	800b1c8 <HAL_DAC_Start_DMA>
				OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 80062c0:	4b16      	ldr	r3, [pc, #88]	; (800631c <IT_ArbitrateInputTrigger+0x150>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a15      	ldr	r2, [pc, #84]	; (800631c <IT_ArbitrateInputTrigger+0x150>)
 80062c6:	f043 0301 	orr.w	r3, r3, #1
 80062ca:	6013      	str	r3, [r2, #0]
				break;
 80062cc:	e014      	b.n	80062f8 <IT_ArbitrateInputTrigger+0x12c>
				HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);		// TS5A3357 Pin6
 80062ce:	2201      	movs	r2, #1
 80062d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062d4:	480e      	ldr	r0, [pc, #56]	; (8006310 <IT_ArbitrateInputTrigger+0x144>)
 80062d6:	f006 f8b7 	bl	800c448 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_SET);		// TS5A3357 Pin5
 80062da:	2201      	movs	r2, #1
 80062dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062e0:	480b      	ldr	r0, [pc, #44]	; (8006310 <IT_ArbitrateInputTrigger+0x144>)
 80062e2:	f006 f8b1 	bl	800c448 <HAL_GPIO_WritePin>
				HAL_ADC_Start_DMA(&hadc1, trigger_input, TRIGGER_DATA_SIZE);
 80062e6:	22f0      	movs	r2, #240	; 0xf0
 80062e8:	490f      	ldr	r1, [pc, #60]	; (8006328 <IT_ArbitrateInputTrigger+0x15c>)
 80062ea:	4808      	ldr	r0, [pc, #32]	; (800630c <IT_ArbitrateInputTrigger+0x140>)
 80062ec:	f003 f9da 	bl	80096a4 <HAL_ADC_Start_DMA>
				FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 80062f0:	2000      	movs	r0, #0
 80062f2:	f7ff fcb7 	bl	8005c64 <FuncO_ApplyProfileToSignal>
				break;
 80062f6:	bf00      	nop
		IT_SetTriggerStatus(ENABLE_TRIGGER_INPUT);
 80062f8:	2001      	movs	r0, #1
 80062fa:	f000 f859 	bl	80063b0 <IT_SetTriggerStatus>
}
 80062fe:	bf00      	nop
 8006300:	46bd      	mov	sp, r7
 8006302:	bd80      	pop	{r7, pc}
 8006304:	20002d20 	.word	0x20002d20
 8006308:	200029e8 	.word	0x200029e8
 800630c:	2000291c 	.word	0x2000291c
 8006310:	48000800 	.word	0x48000800
 8006314:	20002334 	.word	0x20002334
 8006318:	40010200 	.word	0x40010200
 800631c:	40013400 	.word	0x40013400
 8006320:	20002a20 	.word	0x20002a20
 8006324:	2000232c 	.word	0x2000232c
 8006328:	20001e98 	.word	0x20001e98

0800632c <IT_CycleInputTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
void IT_CycleInputTriggerMode()
{
 800632c:	b580      	push	{r7, lr}
 800632e:	af00      	add	r7, sp, #0
	// change the trigger input mode
	switch(IT_GetActiveTriggerMode())
 8006330:	f000 f816 	bl	8006360 <IT_GetActiveTriggerMode>
 8006334:	4603      	mov	r3, r0
 8006336:	2b01      	cmp	r3, #1
 8006338:	d008      	beq.n	800634c <IT_CycleInputTriggerMode+0x20>
 800633a:	2b02      	cmp	r3, #2
 800633c:	d00a      	beq.n	8006354 <IT_CycleInputTriggerMode+0x28>
 800633e:	2b00      	cmp	r3, #0
 8006340:	d000      	beq.n	8006344 <IT_CycleInputTriggerMode+0x18>
		case INPUT_TRIGGER_ADC:
			IT_SetActiveTriggerMode(INPUT_TRIGGER_TIM);
			break;

		default:
			break;
 8006342:	e00b      	b.n	800635c <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TRIGGER_COMP);
 8006344:	2001      	movs	r0, #1
 8006346:	f000 f817 	bl	8006378 <IT_SetActiveTriggerMode>
			break;
 800634a:	e007      	b.n	800635c <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TRIGGER_ADC);
 800634c:	2002      	movs	r0, #2
 800634e:	f000 f813 	bl	8006378 <IT_SetActiveTriggerMode>
			break;
 8006352:	e003      	b.n	800635c <IT_CycleInputTriggerMode+0x30>
			IT_SetActiveTriggerMode(INPUT_TRIGGER_TIM);
 8006354:	2000      	movs	r0, #0
 8006356:	f000 f80f 	bl	8006378 <IT_SetActiveTriggerMode>
			break;
 800635a:	bf00      	nop
	}
}
 800635c:	bf00      	nop
 800635e:	bd80      	pop	{r7, pc}

08006360 <IT_GetActiveTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
eTriggerInputMode IT_GetActiveTriggerMode()
{
 8006360:	b480      	push	{r7}
 8006362:	af00      	add	r7, sp, #0
	return activeInputerTriggerMode;
 8006364:	4b03      	ldr	r3, [pc, #12]	; (8006374 <IT_GetActiveTriggerMode+0x14>)
 8006366:	781b      	ldrb	r3, [r3, #0]
}
 8006368:	4618      	mov	r0, r3
 800636a:	46bd      	mov	sp, r7
 800636c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006370:	4770      	bx	lr
 8006372:	bf00      	nop
 8006374:	20001e96 	.word	0x20001e96

08006378 <IT_SetActiveTriggerMode>:
 *	@param None
 *	@retval None
 *
 */
void IT_SetActiveTriggerMode(eTriggerInputMode newTriggerMode)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	4603      	mov	r3, r0
 8006380:	71fb      	strb	r3, [r7, #7]
	activeInputerTriggerMode = newTriggerMode;
 8006382:	4a04      	ldr	r2, [pc, #16]	; (8006394 <IT_SetActiveTriggerMode+0x1c>)
 8006384:	79fb      	ldrb	r3, [r7, #7]
 8006386:	7013      	strb	r3, [r2, #0]
}
 8006388:	bf00      	nop
 800638a:	370c      	adds	r7, #12
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	20001e96 	.word	0x20001e96

08006398 <IT_GetTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
eTriggerInput IT_GetTriggerStatus()
{
 8006398:	b480      	push	{r7}
 800639a:	af00      	add	r7, sp, #0
	return isTriggerInputEnabled;
 800639c:	4b03      	ldr	r3, [pc, #12]	; (80063ac <IT_GetTriggerStatus+0x14>)
 800639e:	781b      	ldrb	r3, [r3, #0]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	20001e97 	.word	0x20001e97

080063b0 <IT_SetTriggerStatus>:
 *	@param None
 *	@retval None
 *
 */
void IT_SetTriggerStatus(eTriggerInput newTriggerStatus)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	4603      	mov	r3, r0
 80063b8:	71fb      	strb	r3, [r7, #7]
	isTriggerInputEnabled = newTriggerStatus;
 80063ba:	4a04      	ldr	r2, [pc, #16]	; (80063cc <IT_SetTriggerStatus+0x1c>)
 80063bc:	79fb      	ldrb	r3, [r7, #7]
 80063be:	7013      	strb	r3, [r2, #0]
}
 80063c0:	bf00      	nop
 80063c2:	370c      	adds	r7, #12
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr
 80063cc:	20001e97 	.word	0x20001e97

080063d0 <HAL_COMP_TriggerCallback>:
 *	@param None
 *	@retval None
 *
 */
void HAL_COMP_TriggerCallback(COMP_HandleTypeDef *hcomp)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
	if(HAL_COMP_GetOutputLevel(&hcomp1))
 80063d8:	4808      	ldr	r0, [pc, #32]	; (80063fc <HAL_COMP_TriggerCallback+0x2c>)
 80063da:	f004 fd31 	bl	800ae40 <HAL_COMP_GetOutputLevel>
 80063de:	4603      	mov	r3, r0
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d004      	beq.n	80063ee <HAL_COMP_TriggerCallback+0x1e>
	{
		comp1_output_value[0] = 4095;
 80063e4:	4b06      	ldr	r3, [pc, #24]	; (8006400 <HAL_COMP_TriggerCallback+0x30>)
 80063e6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80063ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		comp1_output_value[0] = 0;
	}
}
 80063ec:	e002      	b.n	80063f4 <HAL_COMP_TriggerCallback+0x24>
		comp1_output_value[0] = 0;
 80063ee:	4b04      	ldr	r3, [pc, #16]	; (8006400 <HAL_COMP_TriggerCallback+0x30>)
 80063f0:	2200      	movs	r2, #0
 80063f2:	601a      	str	r2, [r3, #0]
}
 80063f4:	bf00      	nop
 80063f6:	3708      	adds	r7, #8
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}
 80063fc:	200029e8 	.word	0x200029e8
 8006400:	2000232c 	.word	0x2000232c

08006404 <HAL_ADC_ConvCpltCallback>:
 *	@param None
 *	@retval None
 *
 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b082      	sub	sp, #8
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
	if(trigger_input[0] == 0)
 800640c:	4b0a      	ldr	r3, [pc, #40]	; (8006438 <HAL_ADC_ConvCpltCallback+0x34>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d103      	bne.n	800641c <HAL_ADC_ConvCpltCallback+0x18>
		OUTPUT_TIMER->ARR = 1;
 8006414:	4b09      	ldr	r3, [pc, #36]	; (800643c <HAL_ADC_ConvCpltCallback+0x38>)
 8006416:	2201      	movs	r2, #1
 8006418:	62da      	str	r2, [r3, #44]	; 0x2c
 800641a:	e003      	b.n	8006424 <HAL_ADC_ConvCpltCallback+0x20>
	else
		OUTPUT_TIMER->ARR = trigger_input[0];
 800641c:	4a07      	ldr	r2, [pc, #28]	; (800643c <HAL_ADC_ConvCpltCallback+0x38>)
 800641e:	4b06      	ldr	r3, [pc, #24]	; (8006438 <HAL_ADC_ConvCpltCallback+0x34>)
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	62d3      	str	r3, [r2, #44]	; 0x2c
	printf("%lu\n", trigger_input[0]);
 8006424:	4b04      	ldr	r3, [pc, #16]	; (8006438 <HAL_ADC_ConvCpltCallback+0x34>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	4619      	mov	r1, r3
 800642a:	4805      	ldr	r0, [pc, #20]	; (8006440 <HAL_ADC_ConvCpltCallback+0x3c>)
 800642c:	f00b fce2 	bl	8011df4 <iprintf>
}
 8006430:	bf00      	nop
 8006432:	3708      	adds	r7, #8
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	20001e98 	.word	0x20001e98
 800643c:	40013400 	.word	0x40013400
 8006440:	08015f14 	.word	0x08015f14

08006444 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b084      	sub	sp, #16
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
		avg_freq_count += freq_count_store[x];
	}

	avg_freq_count /= MAX_FREQ_COUNT_STORE;
*/
	for(int x = 0; x < MAX_FREQ_COUNT_STORE; x++)
 800644c:	2300      	movs	r3, #0
 800644e:	60fb      	str	r3, [r7, #12]
 8006450:	e00a      	b.n	8006468 <HAL_TIM_IC_CaptureCallback+0x24>
	{
		printf("%lu, ", freq_count_store[x]);
 8006452:	4a0a      	ldr	r2, [pc, #40]	; (800647c <HAL_TIM_IC_CaptureCallback+0x38>)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800645a:	4619      	mov	r1, r3
 800645c:	4808      	ldr	r0, [pc, #32]	; (8006480 <HAL_TIM_IC_CaptureCallback+0x3c>)
 800645e:	f00b fcc9 	bl	8011df4 <iprintf>
	for(int x = 0; x < MAX_FREQ_COUNT_STORE; x++)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3301      	adds	r3, #1
 8006466:	60fb      	str	r3, [r7, #12]
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2b07      	cmp	r3, #7
 800646c:	ddf1      	ble.n	8006452 <HAL_TIM_IC_CaptureCallback+0xe>
	}
	printf("------------\n");
 800646e:	4805      	ldr	r0, [pc, #20]	; (8006484 <HAL_TIM_IC_CaptureCallback+0x40>)
 8006470:	f00b fd34 	bl	8011edc <puts>
}
 8006474:	bf00      	nop
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}
 800647c:	20002334 	.word	0x20002334
 8006480:	08015f1c 	.word	0x08015f1c
 8006484:	08015f24 	.word	0x08015f24

08006488 <HAL_TIM_IC_CaptureHalfCpltCallback>:

void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b084      	sub	sp, #16
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
	for(int x = 0; x < MAX_FREQ_COUNT_STORE; x++)
 8006490:	2300      	movs	r3, #0
 8006492:	60fb      	str	r3, [r7, #12]
 8006494:	e00a      	b.n	80064ac <HAL_TIM_IC_CaptureHalfCpltCallback+0x24>
	{
		printf("%lu, ", freq_count_store[x]);
 8006496:	4a0a      	ldr	r2, [pc, #40]	; (80064c0 <HAL_TIM_IC_CaptureHalfCpltCallback+0x38>)
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800649e:	4619      	mov	r1, r3
 80064a0:	4808      	ldr	r0, [pc, #32]	; (80064c4 <HAL_TIM_IC_CaptureHalfCpltCallback+0x3c>)
 80064a2:	f00b fca7 	bl	8011df4 <iprintf>
	for(int x = 0; x < MAX_FREQ_COUNT_STORE; x++)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	3301      	adds	r3, #1
 80064aa:	60fb      	str	r3, [r7, #12]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	2b07      	cmp	r3, #7
 80064b0:	ddf1      	ble.n	8006496 <HAL_TIM_IC_CaptureHalfCpltCallback+0xe>
	}
	printf("------------\n");
 80064b2:	4805      	ldr	r0, [pc, #20]	; (80064c8 <HAL_TIM_IC_CaptureHalfCpltCallback+0x40>)
 80064b4:	f00b fd12 	bl	8011edc <puts>
}
 80064b8:	bf00      	nop
 80064ba:	3710      	adds	r7, #16
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	20002334 	.word	0x20002334
 80064c4:	08015f1c 	.word	0x08015f1c
 80064c8:	08015f24 	.word	0x08015f24

080064cc <SM_Init>:
void _InitOutputChannels();
void _InitAmpProfiles();
void _InitGainInDecibels();

void SM_Init()
{
 80064cc:	b580      	push	{r7, lr}
 80064ce:	af00      	add	r7, sp, #0

	FreqO_InitFreqProfiles();
 80064d0:	f7ff f826 	bl	8005520 <FreqO_InitFreqProfiles>

	_InitOutputChannels();
 80064d4:	f000 f8ae 	bl	8006634 <_InitOutputChannels>
	_InitAmpProfiles();
 80064d8:	f000 f824 	bl	8006524 <_InitAmpProfiles>

	// Start OFFSET DAC and set to positive
	HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 80064dc:	2110      	movs	r1, #16
 80064de:	480f      	ldr	r0, [pc, #60]	; (800651c <SM_Init+0x50>)
 80064e0:	f004 fe1f 	bl	800b122 <HAL_DAC_Start>
	HAL_GPIO_WritePin(OFFSET_ENABLE_GPIO_Port, OFFSET_ENABLE_Pin, GPIO_PIN_SET);
 80064e4:	2201      	movs	r2, #1
 80064e6:	2108      	movs	r1, #8
 80064e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80064ec:	f005 ffac 	bl	800c448 <HAL_GPIO_WritePin>

	// send trigger input out to dac
	//HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

	// Start DAC trigger timer
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 80064f0:	4b0b      	ldr	r3, [pc, #44]	; (8006520 <SM_Init+0x54>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4a0a      	ldr	r2, [pc, #40]	; (8006520 <SM_Init+0x54>)
 80064f6:	f043 0301 	orr.w	r3, r3, #1
 80064fa:	6013      	str	r3, [r2, #0]

	// Set the SIGNAL function and amplitude
	FuncO_ApplyProfileToSignal(eDefaultFuncPreset);
 80064fc:	2000      	movs	r0, #0
 80064fe:	f7ff fbb1 	bl	8005c64 <FuncO_ApplyProfileToSignal>
	VPP_ApplyProfileToSignal(eDefaultVppPreset);
 8006502:	2059      	movs	r0, #89	; 0x59
 8006504:	f000 fc2c 	bl	8006d60 <VPP_ApplyProfileToSignal>

	// set the AUX function
	FuncO_ApplyProfileToAux(eDefaultFuncPreset);
 8006508:	2000      	movs	r0, #0
 800650a:	f7ff fc0f 	bl	8005d2c <FuncO_ApplyProfileToAux>

	// set freq for both SIGNAL and AUX
	FreqO_ApplyProfile(eDefaultFreqPreset);
 800650e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006512:	f7ff f915 	bl	8005740 <FreqO_ApplyProfile>

}
 8006516:	bf00      	nop
 8006518:	bd80      	pop	{r7, pc}
 800651a:	bf00      	nop
 800651c:	20002a20 	.word	0x20002a20
 8006520:	40013400 	.word	0x40013400

08006524 <_InitAmpProfiles>:

void _InitAmpProfiles()
{
 8006524:	b590      	push	{r4, r7, lr}
 8006526:	b08b      	sub	sp, #44	; 0x2c
 8006528:	af00      	add	r7, sp, #0

	// =(TARGETVPP/LUTVPP)/GAIN
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 800652a:	2300      	movs	r3, #0
 800652c:	627b      	str	r3, [r7, #36]	; 0x24
 800652e:	e033      	b.n	8006598 <_InitAmpProfiles+0x74>
	{
		float this_amp_value = theAmpProfiles[i].amp_value;
 8006530:	493c      	ldr	r1, [pc, #240]	; (8006624 <_InitAmpProfiles+0x100>)
 8006532:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006534:	4613      	mov	r3, r2
 8006536:	00db      	lsls	r3, r3, #3
 8006538:	1a9b      	subs	r3, r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	440b      	add	r3, r1
 800653e:	3304      	adds	r3, #4
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	613b      	str	r3, [r7, #16]
		float this_lut_vpp = LUT_VPP;
 8006544:	4b38      	ldr	r3, [pc, #224]	; (8006628 <_InitAmpProfiles+0x104>)
 8006546:	60fb      	str	r3, [r7, #12]
		float this_gain_preset = (float)theAmpProfiles[i].gain_preset;
 8006548:	4936      	ldr	r1, [pc, #216]	; (8006624 <_InitAmpProfiles+0x100>)
 800654a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800654c:	4613      	mov	r3, r2
 800654e:	00db      	lsls	r3, r3, #3
 8006550:	1a9b      	subs	r3, r3, r2
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	440b      	add	r3, r1
 8006556:	3308      	adds	r3, #8
 8006558:	781b      	ldrb	r3, [r3, #0]
 800655a:	ee07 3a90 	vmov	s15, r3
 800655e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006562:	edc7 7a02 	vstr	s15, [r7, #8]
		float new_ngc = ( (this_amp_value / this_lut_vpp) / this_gain_preset);
 8006566:	ed97 7a04 	vldr	s14, [r7, #16]
 800656a:	edd7 7a03 	vldr	s15, [r7, #12]
 800656e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006572:	ed97 7a02 	vldr	s14, [r7, #8]
 8006576:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800657a:	edc7 7a01 	vstr	s15, [r7, #4]
		theAmpProfiles[i].neg_gain_coeff = new_ngc;
 800657e:	4929      	ldr	r1, [pc, #164]	; (8006624 <_InitAmpProfiles+0x100>)
 8006580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006582:	4613      	mov	r3, r2
 8006584:	00db      	lsls	r3, r3, #3
 8006586:	1a9b      	subs	r3, r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	440b      	add	r3, r1
 800658c:	3310      	adds	r3, #16
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 8006592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006594:	3301      	adds	r3, #1
 8006596:	627b      	str	r3, [r7, #36]	; 0x24
 8006598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800659a:	2b61      	cmp	r3, #97	; 0x61
 800659c:	ddc8      	ble.n	8006530 <_InitAmpProfiles+0xc>
	}

	// =20*LOG10(TARGETVPP/0.001)
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 800659e:	2300      	movs	r3, #0
 80065a0:	623b      	str	r3, [r7, #32]
 80065a2:	e037      	b.n	8006614 <_InitAmpProfiles+0xf0>
	{
		float decibel_mvolt_ref = 0.001;
 80065a4:	4b21      	ldr	r3, [pc, #132]	; (800662c <_InitAmpProfiles+0x108>)
 80065a6:	61fb      	str	r3, [r7, #28]
		float this_amp_value = theAmpProfiles[i].amp_value;
 80065a8:	491e      	ldr	r1, [pc, #120]	; (8006624 <_InitAmpProfiles+0x100>)
 80065aa:	6a3a      	ldr	r2, [r7, #32]
 80065ac:	4613      	mov	r3, r2
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	1a9b      	subs	r3, r3, r2
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	440b      	add	r3, r1
 80065b6:	3304      	adds	r3, #4
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	61bb      	str	r3, [r7, #24]
		float new_gain_decibels = 20 * log10( this_amp_value / decibel_mvolt_ref );
 80065bc:	ed97 7a06 	vldr	s14, [r7, #24]
 80065c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80065c4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80065c8:	ee16 0a90 	vmov	r0, s13
 80065cc:	f7f9 ffe4 	bl	8000598 <__aeabi_f2d>
 80065d0:	4603      	mov	r3, r0
 80065d2:	460c      	mov	r4, r1
 80065d4:	ec44 3b10 	vmov	d0, r3, r4
 80065d8:	f00d fd1a 	bl	8014010 <log10>
 80065dc:	ec51 0b10 	vmov	r0, r1, d0
 80065e0:	f04f 0200 	mov.w	r2, #0
 80065e4:	4b12      	ldr	r3, [pc, #72]	; (8006630 <_InitAmpProfiles+0x10c>)
 80065e6:	f7fa f82f 	bl	8000648 <__aeabi_dmul>
 80065ea:	4603      	mov	r3, r0
 80065ec:	460c      	mov	r4, r1
 80065ee:	4618      	mov	r0, r3
 80065f0:	4621      	mov	r1, r4
 80065f2:	f7fa fb21 	bl	8000c38 <__aeabi_d2f>
 80065f6:	4603      	mov	r3, r0
 80065f8:	617b      	str	r3, [r7, #20]
		theAmpProfiles[i].gain_decibels = new_gain_decibels;
 80065fa:	490a      	ldr	r1, [pc, #40]	; (8006624 <_InitAmpProfiles+0x100>)
 80065fc:	6a3a      	ldr	r2, [r7, #32]
 80065fe:	4613      	mov	r3, r2
 8006600:	00db      	lsls	r3, r3, #3
 8006602:	1a9b      	subs	r3, r3, r2
 8006604:	009b      	lsls	r3, r3, #2
 8006606:	440b      	add	r3, r1
 8006608:	330c      	adds	r3, #12
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < MAX_VPP_PRESETS; i++)
 800660e:	6a3b      	ldr	r3, [r7, #32]
 8006610:	3301      	adds	r3, #1
 8006612:	623b      	str	r3, [r7, #32]
 8006614:	6a3b      	ldr	r3, [r7, #32]
 8006616:	2b61      	cmp	r3, #97	; 0x61
 8006618:	ddc4      	ble.n	80065a4 <_InitAmpProfiles+0x80>

	}
}
 800661a:	bf00      	nop
 800661c:	372c      	adds	r7, #44	; 0x2c
 800661e:	46bd      	mov	sp, r7
 8006620:	bd90      	pop	{r4, r7, pc}
 8006622:	bf00      	nop
 8006624:	20000178 	.word	0x20000178
 8006628:	402ccccd 	.word	0x402ccccd
 800662c:	3a83126f 	.word	0x3a83126f
 8006630:	40340000 	.word	0x40340000

08006634 <_InitOutputChannels>:

void _InitOutputChannels()
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 800663a:	4b28      	ldr	r3, [pc, #160]	; (80066dc <_InitOutputChannels+0xa8>)
 800663c:	2200      	movs	r2, #0
 800663e:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8006640:	4b27      	ldr	r3, [pc, #156]	; (80066e0 <_InitOutputChannels+0xac>)
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	4a25      	ldr	r2, [pc, #148]	; (80066dc <_InitOutputChannels+0xa8>)
 8006646:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8006648:	4b24      	ldr	r3, [pc, #144]	; (80066dc <_InitOutputChannels+0xa8>)
 800664a:	4a25      	ldr	r2, [pc, #148]	; (80066e0 <_InitOutputChannels+0xac>)
 800664c:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006650:	2300      	movs	r3, #0
 8006652:	607b      	str	r3, [r7, #4]
 8006654:	e00b      	b.n	800666e <_InitOutputChannels+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8006656:	4a23      	ldr	r2, [pc, #140]	; (80066e4 <_InitOutputChannels+0xb0>)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800665e:	491f      	ldr	r1, [pc, #124]	; (80066dc <_InitOutputChannels+0xa8>)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	3302      	adds	r3, #2
 8006664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3301      	adds	r3, #1
 800666c:	607b      	str	r3, [r7, #4]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2b77      	cmp	r3, #119	; 0x77
 8006672:	ddf0      	ble.n	8006656 <_InitOutputChannels+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8006674:	4b19      	ldr	r3, [pc, #100]	; (80066dc <_InitOutputChannels+0xa8>)
 8006676:	4a1c      	ldr	r2, [pc, #112]	; (80066e8 <_InitOutputChannels+0xb4>)
 8006678:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 800667c:	4b17      	ldr	r3, [pc, #92]	; (80066dc <_InitOutputChannels+0xa8>)
 800667e:	4a1b      	ldr	r2, [pc, #108]	; (80066ec <_InitOutputChannels+0xb8>)
 8006680:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the Aux output channel
	AuxChannel.channel = AUX_CHANNEL;
 8006684:	4b1a      	ldr	r3, [pc, #104]	; (80066f0 <_InitOutputChannels+0xbc>)
 8006686:	2201      	movs	r2, #1
 8006688:	701a      	strb	r2, [r3, #0]
	AuxChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 800668a:	4b15      	ldr	r3, [pc, #84]	; (80066e0 <_InitOutputChannels+0xac>)
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	4a18      	ldr	r2, [pc, #96]	; (80066f0 <_InitOutputChannels+0xbc>)
 8006690:	6053      	str	r3, [r2, #4]
	AuxChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 8006692:	4b17      	ldr	r3, [pc, #92]	; (80066f0 <_InitOutputChannels+0xbc>)
 8006694:	4a12      	ldr	r2, [pc, #72]	; (80066e0 <_InitOutputChannels+0xac>)
 8006696:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800669a:	2300      	movs	r3, #0
 800669c:	603b      	str	r3, [r7, #0]
 800669e:	e00b      	b.n	80066b8 <_InitOutputChannels+0x84>
		AuxChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 80066a0:	4a10      	ldr	r2, [pc, #64]	; (80066e4 <_InitOutputChannels+0xb0>)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80066a8:	4911      	ldr	r1, [pc, #68]	; (80066f0 <_InitOutputChannels+0xbc>)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	3302      	adds	r3, #2
 80066ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	3301      	adds	r3, #1
 80066b6:	603b      	str	r3, [r7, #0]
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	2b77      	cmp	r3, #119	; 0x77
 80066bc:	ddf0      	ble.n	80066a0 <_InitOutputChannels+0x6c>

	AuxChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 80066be:	4b0c      	ldr	r3, [pc, #48]	; (80066f0 <_InitOutputChannels+0xbc>)
 80066c0:	4a09      	ldr	r2, [pc, #36]	; (80066e8 <_InitOutputChannels+0xb4>)
 80066c2:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	AuxChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 80066c6:	4b0a      	ldr	r3, [pc, #40]	; (80066f0 <_InitOutputChannels+0xbc>)
 80066c8:	4a08      	ldr	r2, [pc, #32]	; (80066ec <_InitOutputChannels+0xb8>)
 80066ca:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0


}
 80066ce:	bf00      	nop
 80066d0:	370c      	adds	r7, #12
 80066d2:	46bd      	mov	sp, r7
 80066d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d8:	4770      	bx	lr
 80066da:	bf00      	nop
 80066dc:	20002354 	.word	0x20002354
 80066e0:	20000128 	.word	0x20000128
 80066e4:	200014b4 	.word	0x200014b4
 80066e8:	20000b34 	.word	0x20000b34
 80066ec:	20000175 	.word	0x20000175
 80066f0:	20002548 	.word	0x20002548

080066f4 <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	4603      	mov	r3, r0
 80066fc:	71fb      	strb	r3, [r7, #7]

	if(!pChannel)
 80066fe:	79fb      	ldrb	r3, [r7, #7]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d101      	bne.n	8006708 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 8006704:	4b04      	ldr	r3, [pc, #16]	; (8006718 <SM_GetOutputChannel+0x24>)
 8006706:	e000      	b.n	800670a <SM_GetOutputChannel+0x16>
	else
		return &AuxChannel;
 8006708:	4b04      	ldr	r3, [pc, #16]	; (800671c <SM_GetOutputChannel+0x28>)
}
 800670a:	4618      	mov	r0, r3
 800670c:	370c      	adds	r7, #12
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	20002354 	.word	0x20002354
 800671c:	20002548 	.word	0x20002548

08006720 <SM_EnablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnablePwmToAux()
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b096      	sub	sp, #88	; 0x58
 8006724:	af00      	add	r7, sp, #0
	printf("SM_EnablePwmToAux\n");
 8006726:	4889      	ldr	r0, [pc, #548]	; (800694c <SM_EnablePwmToAux+0x22c>)
 8006728:	f00b fbd8 	bl	8011edc <puts>

	HAL_StatusTypeDef res = 0;
 800672c:	2300      	movs	r3, #0
 800672e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006732:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8006736:	2200      	movs	r2, #0
 8006738:	601a      	str	r2, [r3, #0]
 800673a:	605a      	str	r2, [r3, #4]
 800673c:	609a      	str	r2, [r3, #8]
 800673e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006740:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006744:	2200      	movs	r2, #0
 8006746:	601a      	str	r2, [r3, #0]
 8006748:	605a      	str	r2, [r3, #4]
 800674a:	609a      	str	r2, [r3, #8]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800674c:	f107 031c 	add.w	r3, r7, #28
 8006750:	2200      	movs	r2, #0
 8006752:	601a      	str	r2, [r3, #0]
 8006754:	605a      	str	r2, [r3, #4]
 8006756:	609a      	str	r2, [r3, #8]
 8006758:	60da      	str	r2, [r3, #12]
 800675a:	611a      	str	r2, [r3, #16]
 800675c:	615a      	str	r2, [r3, #20]
 800675e:	619a      	str	r2, [r3, #24]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006760:	f107 0308 	add.w	r3, r7, #8
 8006764:	2200      	movs	r2, #0
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	605a      	str	r2, [r3, #4]
 800676a:	609a      	str	r2, [r3, #8]
 800676c:	60da      	str	r2, [r3, #12]
 800676e:	611a      	str	r2, [r3, #16]


	htim3.Instance = PWM_AUX_OUT_TIM;
 8006770:	4b77      	ldr	r3, [pc, #476]	; (8006950 <SM_EnablePwmToAux+0x230>)
 8006772:	4a78      	ldr	r2, [pc, #480]	; (8006954 <SM_EnablePwmToAux+0x234>)
 8006774:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8006776:	4b76      	ldr	r3, [pc, #472]	; (8006950 <SM_EnablePwmToAux+0x230>)
 8006778:	2200      	movs	r2, #0
 800677a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800677c:	4b74      	ldr	r3, [pc, #464]	; (8006950 <SM_EnablePwmToAux+0x230>)
 800677e:	2210      	movs	r2, #16
 8006780:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1;
 8006782:	4b73      	ldr	r3, [pc, #460]	; (8006950 <SM_EnablePwmToAux+0x230>)
 8006784:	2201      	movs	r2, #1
 8006786:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8006788:	4b71      	ldr	r3, [pc, #452]	; (8006950 <SM_EnablePwmToAux+0x230>)
 800678a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800678e:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006790:	4b6f      	ldr	r3, [pc, #444]	; (8006950 <SM_EnablePwmToAux+0x230>)
 8006792:	2280      	movs	r2, #128	; 0x80
 8006794:	619a      	str	r2, [r3, #24]
	if ((res == HAL_TIM_Base_Init(&htim3)) != HAL_OK)
 8006796:	486e      	ldr	r0, [pc, #440]	; (8006950 <SM_EnablePwmToAux+0x230>)
 8006798:	f006 fef8 	bl	800d58c <HAL_TIM_Base_Init>
 800679c:	4603      	mov	r3, r0
 800679e:	461a      	mov	r2, r3
 80067a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d107      	bne.n	80067b8 <SM_EnablePwmToAux+0x98>
	{
		printf("SM_EnablePwmToAux HAL_TIM_Base_Init() Result:%u\n",res);
 80067a8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067ac:	4619      	mov	r1, r3
 80067ae:	486a      	ldr	r0, [pc, #424]	; (8006958 <SM_EnablePwmToAux+0x238>)
 80067b0:	f00b fb20 	bl	8011df4 <iprintf>
		Error_Handler();
 80067b4:	f001 fb9c 	bl	8007ef0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80067b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80067bc:	647b      	str	r3, [r7, #68]	; 0x44
	if ((res == HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig)) != HAL_OK)
 80067be:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80067c2:	4619      	mov	r1, r3
 80067c4:	4862      	ldr	r0, [pc, #392]	; (8006950 <SM_EnablePwmToAux+0x230>)
 80067c6:	f008 f851 	bl	800e86c <HAL_TIM_ConfigClockSource>
 80067ca:	4603      	mov	r3, r0
 80067cc:	461a      	mov	r2, r3
 80067ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067d2:	4293      	cmp	r3, r2
 80067d4:	d107      	bne.n	80067e6 <SM_EnablePwmToAux+0xc6>
	{
		printf("SM_EnablePwmToAux HAL_TIM_ConfigClockSource() Result:%u\n",res);
 80067d6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067da:	4619      	mov	r1, r3
 80067dc:	485f      	ldr	r0, [pc, #380]	; (800695c <SM_EnablePwmToAux+0x23c>)
 80067de:	f00b fb09 	bl	8011df4 <iprintf>
		Error_Handler();
 80067e2:	f001 fb85 	bl	8007ef0 <Error_Handler>
	}
	if ((res == HAL_TIM_PWM_Init(&htim3)) != HAL_OK)
 80067e6:	485a      	ldr	r0, [pc, #360]	; (8006950 <SM_EnablePwmToAux+0x230>)
 80067e8:	f006 ffe3 	bl	800d7b2 <HAL_TIM_PWM_Init>
 80067ec:	4603      	mov	r3, r0
 80067ee:	461a      	mov	r2, r3
 80067f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d107      	bne.n	8006808 <SM_EnablePwmToAux+0xe8>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Init() Result:%u\n",res);
 80067f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80067fc:	4619      	mov	r1, r3
 80067fe:	4858      	ldr	r0, [pc, #352]	; (8006960 <SM_EnablePwmToAux+0x240>)
 8006800:	f00b faf8 	bl	8011df4 <iprintf>
		Error_Handler();
 8006804:	f001 fb74 	bl	8007ef0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006808:	2320      	movs	r3, #32
 800680a:	63bb      	str	r3, [r7, #56]	; 0x38
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800680c:	2300      	movs	r3, #0
 800680e:	643b      	str	r3, [r7, #64]	; 0x40
	if ((res == HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)) != HAL_OK)
 8006810:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8006814:	4619      	mov	r1, r3
 8006816:	484e      	ldr	r0, [pc, #312]	; (8006950 <SM_EnablePwmToAux+0x230>)
 8006818:	f009 f8e8 	bl	800f9ec <HAL_TIMEx_MasterConfigSynchronization>
 800681c:	4603      	mov	r3, r0
 800681e:	461a      	mov	r2, r3
 8006820:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006824:	4293      	cmp	r3, r2
 8006826:	d107      	bne.n	8006838 <SM_EnablePwmToAux+0x118>
	{
		printf("SM_EnablePwmToAux HAL_TIMEx_MasterConfigSynchronization() Result:%u\n",res);
 8006828:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800682c:	4619      	mov	r1, r3
 800682e:	484d      	ldr	r0, [pc, #308]	; (8006964 <SM_EnablePwmToAux+0x244>)
 8006830:	f00b fae0 	bl	8011df4 <iprintf>
		Error_Handler();
 8006834:	f001 fb5c 	bl	8007ef0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8006838:	2360      	movs	r3, #96	; 0x60
 800683a:	61fb      	str	r3, [r7, #28]
	sConfigOC.Pulse = 0;
 800683c:	2300      	movs	r3, #0
 800683e:	623b      	str	r3, [r7, #32]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006840:	2300      	movs	r3, #0
 8006842:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8006844:	2300      	movs	r3, #0
 8006846:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)) != HAL_OK)
 8006848:	f107 031c 	add.w	r3, r7, #28
 800684c:	2200      	movs	r2, #0
 800684e:	4619      	mov	r1, r3
 8006850:	483f      	ldr	r0, [pc, #252]	; (8006950 <SM_EnablePwmToAux+0x230>)
 8006852:	f007 fefb 	bl	800e64c <HAL_TIM_PWM_ConfigChannel>
 8006856:	4603      	mov	r3, r0
 8006858:	461a      	mov	r2, r3
 800685a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800685e:	4293      	cmp	r3, r2
 8006860:	d107      	bne.n	8006872 <SM_EnablePwmToAux+0x152>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_ConfigChannel() Result:%u\n",res);
 8006862:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006866:	4619      	mov	r1, r3
 8006868:	483f      	ldr	r0, [pc, #252]	; (8006968 <SM_EnablePwmToAux+0x248>)
 800686a:	f00b fac3 	bl	8011df4 <iprintf>
		Error_Handler();
 800686e:	f001 fb3f 	bl	8007ef0 <Error_Handler>
	}


	// Timer Post Initialization
	printf("SM_EnablePwmToAux: __HAL_RCC_GPIOA_CLK_ENABLE\n");
 8006872:	483e      	ldr	r0, [pc, #248]	; (800696c <SM_EnablePwmToAux+0x24c>)
 8006874:	f00b fb32 	bl	8011edc <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006878:	4b3d      	ldr	r3, [pc, #244]	; (8006970 <SM_EnablePwmToAux+0x250>)
 800687a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800687c:	4a3c      	ldr	r2, [pc, #240]	; (8006970 <SM_EnablePwmToAux+0x250>)
 800687e:	f043 0301 	orr.w	r3, r3, #1
 8006882:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006884:	4b3a      	ldr	r3, [pc, #232]	; (8006970 <SM_EnablePwmToAux+0x250>)
 8006886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	607b      	str	r3, [r7, #4]
 800688e:	687b      	ldr	r3, [r7, #4]
	/**PWM_AUX_OUT_TIM GPIO Configuration
	PA4     ------> PWM_AUX_OUT_TIM_CH2
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006890:	2340      	movs	r3, #64	; 0x40
 8006892:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006894:	2302      	movs	r3, #2
 8006896:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006898:	2300      	movs	r3, #0
 800689a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800689c:	2300      	movs	r3, #0
 800689e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80068a0:	2302      	movs	r3, #2
 80068a2:	61bb      	str	r3, [r7, #24]
	printf("SM_EnablePwmToAux: HAL_GPIO_Init\n");
 80068a4:	4833      	ldr	r0, [pc, #204]	; (8006974 <SM_EnablePwmToAux+0x254>)
 80068a6:	f00b fb19 	bl	8011edc <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80068aa:	f107 0308 	add.w	r3, r7, #8
 80068ae:	4619      	mov	r1, r3
 80068b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80068b4:	f005 fb64 	bl	800bf80 <HAL_GPIO_Init>


	// PWM_AUX_OUT_TIM_MspInit 0

	/* PWM_AUX_OUT_TIM clock enable */
	printf("SM_EnablePwmToAux: __HAL_RCC_PWM_AUX_OUT_TIM_CLK_ENABLE\n");
 80068b8:	482f      	ldr	r0, [pc, #188]	; (8006978 <SM_EnablePwmToAux+0x258>)
 80068ba:	f00b fb0f 	bl	8011edc <puts>
	__HAL_RCC_TIM3_CLK_ENABLE();
 80068be:	4b2c      	ldr	r3, [pc, #176]	; (8006970 <SM_EnablePwmToAux+0x250>)
 80068c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c2:	4a2b      	ldr	r2, [pc, #172]	; (8006970 <SM_EnablePwmToAux+0x250>)
 80068c4:	f043 0302 	orr.w	r3, r3, #2
 80068c8:	6593      	str	r3, [r2, #88]	; 0x58
 80068ca:	4b29      	ldr	r3, [pc, #164]	; (8006970 <SM_EnablePwmToAux+0x250>)
 80068cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	603b      	str	r3, [r7, #0]
 80068d4:	683b      	ldr	r3, [r7, #0]

	/* PWM_AUX_OUT_TIM interrupt Init */
	printf("SM_EnablePwmToAux: HAL_NVIC_SetPriority\n");
 80068d6:	4829      	ldr	r0, [pc, #164]	; (800697c <SM_EnablePwmToAux+0x25c>)
 80068d8:	f00b fb00 	bl	8011edc <puts>
	HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80068dc:	2200      	movs	r2, #0
 80068de:	2100      	movs	r1, #0
 80068e0:	201d      	movs	r0, #29
 80068e2:	f004 fbba 	bl	800b05a <HAL_NVIC_SetPriority>
	printf("SM_EnablePwmToAux: HAL_NVIC_EnableIRQ\n");
 80068e6:	4826      	ldr	r0, [pc, #152]	; (8006980 <SM_EnablePwmToAux+0x260>)
 80068e8:	f00b faf8 	bl	8011edc <puts>
	HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80068ec:	201d      	movs	r0, #29
 80068ee:	f004 fbce 	bl	800b08e <HAL_NVIC_EnableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspInit 1 */
	printf("SM_EnablePwmToAux: HAL_TIM_PWM_Start\n");
 80068f2:	4824      	ldr	r0, [pc, #144]	; (8006984 <SM_EnablePwmToAux+0x264>)
 80068f4:	f00b faf2 	bl	8011edc <puts>
	if ((res == HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 80068f8:	2100      	movs	r1, #0
 80068fa:	4815      	ldr	r0, [pc, #84]	; (8006950 <SM_EnablePwmToAux+0x230>)
 80068fc:	f006 ffba 	bl	800d874 <HAL_TIM_PWM_Start>
 8006900:	4603      	mov	r3, r0
 8006902:	461a      	mov	r2, r3
 8006904:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006908:	4293      	cmp	r3, r2
 800690a:	d107      	bne.n	800691c <SM_EnablePwmToAux+0x1fc>
	{
		printf("SM_EnablePwmToAux HAL_TIM_PWM_Start() Result:%u\n",res);
 800690c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8006910:	4619      	mov	r1, r3
 8006912:	481d      	ldr	r0, [pc, #116]	; (8006988 <SM_EnablePwmToAux+0x268>)
 8006914:	f00b fa6e 	bl	8011df4 <iprintf>
		Error_Handler();
 8006918:	f001 faea 	bl	8007ef0 <Error_Handler>
	}

	printf("SM_EnablePwmToAux: GO_ApplyPresetToSignal\n");
 800691c:	481b      	ldr	r0, [pc, #108]	; (800698c <SM_EnablePwmToAux+0x26c>)
 800691e:	f00b fadd 	bl	8011edc <puts>
	GO_ApplyPresetToSignal(eDefaultGainPreset);
 8006922:	2007      	movs	r0, #7
 8006924:	f7ff fba0 	bl	8006068 <GO_ApplyPresetToSignal>

	// 50% duty cycle
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->CCR1 = 32768\n");
 8006928:	4819      	ldr	r0, [pc, #100]	; (8006990 <SM_EnablePwmToAux+0x270>)
 800692a:	f00b fad7 	bl	8011edc <puts>
	PWM_AUX_OUT_TIM->CCR1 = 32768;
 800692e:	4b09      	ldr	r3, [pc, #36]	; (8006954 <SM_EnablePwmToAux+0x234>)
 8006930:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8006934:	635a      	str	r2, [r3, #52]	; 0x34
	printf("SM_EnablePwmToAux: PWM_AUX_OUT_TIM->ARR = 65535\n");
 8006936:	4817      	ldr	r0, [pc, #92]	; (8006994 <SM_EnablePwmToAux+0x274>)
 8006938:	f00b fad0 	bl	8011edc <puts>
	PWM_AUX_OUT_TIM->ARR = 65535;
 800693c:	4b05      	ldr	r3, [pc, #20]	; (8006954 <SM_EnablePwmToAux+0x234>)
 800693e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006942:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8006944:	bf00      	nop
 8006946:	3758      	adds	r7, #88	; 0x58
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}
 800694c:	08015f7c 	.word	0x08015f7c
 8006950:	200022dc 	.word	0x200022dc
 8006954:	40000400 	.word	0x40000400
 8006958:	08015f90 	.word	0x08015f90
 800695c:	08015fc4 	.word	0x08015fc4
 8006960:	08016000 	.word	0x08016000
 8006964:	08016030 	.word	0x08016030
 8006968:	08016078 	.word	0x08016078
 800696c:	080160b4 	.word	0x080160b4
 8006970:	40021000 	.word	0x40021000
 8006974:	080160e4 	.word	0x080160e4
 8006978:	08016108 	.word	0x08016108
 800697c:	08016140 	.word	0x08016140
 8006980:	08016168 	.word	0x08016168
 8006984:	08016190 	.word	0x08016190
 8006988:	080161b8 	.word	0x080161b8
 800698c:	080161ec 	.word	0x080161ec
 8006990:	08016218 	.word	0x08016218
 8006994:	0801624c 	.word	0x0801624c

08006998 <SM_DisablePwmToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisablePwmToAux()
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
	printf("SM_DisablePwmToAux");
 800699e:	4815      	ldr	r0, [pc, #84]	; (80069f4 <SM_DisablePwmToAux+0x5c>)
 80069a0:	f00b fa28 	bl	8011df4 <iprintf>

	HAL_StatusTypeDef res = 0;
 80069a4:	2300      	movs	r3, #0
 80069a6:	71fb      	strb	r3, [r7, #7]


	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 0 */
	printf("SM_DisablePwmToAux: HAL_TIM_PWM_Stop\n");
 80069a8:	4813      	ldr	r0, [pc, #76]	; (80069f8 <SM_DisablePwmToAux+0x60>)
 80069aa:	f00b fa97 	bl	8011edc <puts>
	if ((res == HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_1)) != HAL_OK)
 80069ae:	2100      	movs	r1, #0
 80069b0:	4812      	ldr	r0, [pc, #72]	; (80069fc <SM_DisablePwmToAux+0x64>)
 80069b2:	f007 f839 	bl	800da28 <HAL_TIM_PWM_Stop>
 80069b6:	4603      	mov	r3, r0
 80069b8:	461a      	mov	r2, r3
 80069ba:	79fb      	ldrb	r3, [r7, #7]
 80069bc:	4293      	cmp	r3, r2
 80069be:	d106      	bne.n	80069ce <SM_DisablePwmToAux+0x36>
	{
		printf("SM_DisablePwmToAux HAL_TIM_PWM_Stop() Result:%u\n",res);
 80069c0:	79fb      	ldrb	r3, [r7, #7]
 80069c2:	4619      	mov	r1, r3
 80069c4:	480e      	ldr	r0, [pc, #56]	; (8006a00 <SM_DisablePwmToAux+0x68>)
 80069c6:	f00b fa15 	bl	8011df4 <iprintf>
		Error_Handler();
 80069ca:	f001 fa91 	bl	8007ef0 <Error_Handler>
	}
	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 0 */
	/* Peripheral clock disable */
	printf("SM_DisablePwmToAux __HAL_RCC_PWM_AUX_OUT_TIM_CLK_DISABLE\n");
 80069ce:	480d      	ldr	r0, [pc, #52]	; (8006a04 <SM_DisablePwmToAux+0x6c>)
 80069d0:	f00b fa84 	bl	8011edc <puts>
	__HAL_RCC_TIM3_CLK_DISABLE();
 80069d4:	4b0c      	ldr	r3, [pc, #48]	; (8006a08 <SM_DisablePwmToAux+0x70>)
 80069d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80069d8:	4a0b      	ldr	r2, [pc, #44]	; (8006a08 <SM_DisablePwmToAux+0x70>)
 80069da:	f023 0302 	bic.w	r3, r3, #2
 80069de:	6593      	str	r3, [r2, #88]	; 0x58

	/* PWM_AUX_OUT_TIM interrupt Deinit */
	printf("SM_DisablePwmToAux HAL_NVIC_DisableIRQ\n");
 80069e0:	480a      	ldr	r0, [pc, #40]	; (8006a0c <SM_DisablePwmToAux+0x74>)
 80069e2:	f00b fa7b 	bl	8011edc <puts>
	HAL_NVIC_DisableIRQ(TIM3_IRQn);
 80069e6:	201d      	movs	r0, #29
 80069e8:	f004 fb5f 	bl	800b0aa <HAL_NVIC_DisableIRQ>
	/* USER CODE BEGIN PWM_AUX_OUT_TIM_MspDeInit 1 */

	/* USER CODE END PWM_AUX_OUT_TIM_MspDeInit 1 */
}
 80069ec:	bf00      	nop
 80069ee:	3708      	adds	r7, #8
 80069f0:	46bd      	mov	sp, r7
 80069f2:	bd80      	pop	{r7, pc}
 80069f4:	0801627c 	.word	0x0801627c
 80069f8:	08016290 	.word	0x08016290
 80069fc:	200022dc 	.word	0x200022dc
 8006a00:	080162b8 	.word	0x080162b8
 8006a04:	080162ec 	.word	0x080162ec
 8006a08:	40021000 	.word	0x40021000
 8006a0c:	08016328 	.word	0x08016328

08006a10 <SM_EnableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_EnableDacToAux()
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b0b2      	sub	sp, #200	; 0xc8
 8006a14:	af00      	add	r7, sp, #0
	printf("SM_EnableDacToAux");
 8006a16:	4860      	ldr	r0, [pc, #384]	; (8006b98 <SM_EnableDacToAux+0x188>)
 8006a18:	f00b f9ec 	bl	8011df4 <iprintf>

	HAL_StatusTypeDef res = 0;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
	DAC_ChannelConfTypeDef sConfig = {0};
 8006a22:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8006a26:	2230      	movs	r2, #48	; 0x30
 8006a28:	2100      	movs	r1, #0
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f00a fd7e 	bl	801152c <memset>
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a30:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006a34:	2200      	movs	r2, #0
 8006a36:	601a      	str	r2, [r3, #0]
 8006a38:	605a      	str	r2, [r3, #4]
 8006a3a:	609a      	str	r2, [r3, #8]
 8006a3c:	60da      	str	r2, [r3, #12]
 8006a3e:	611a      	str	r2, [r3, #16]
	DAC_HandleTypeDef hdac2;
	DMA_HandleTypeDef hdma_dac2_ch1;
	/** DAC Initialization
	*/
	hdac2.Instance = DAC2;
 8006a40:	4b56      	ldr	r3, [pc, #344]	; (8006b9c <SM_EnableDacToAux+0x18c>)
 8006a42:	66fb      	str	r3, [r7, #108]	; 0x6c
	if ((res == HAL_DAC_Init(&hdac2)) != HAL_OK)
 8006a44:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f004 fb48 	bl	800b0de <HAL_DAC_Init>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	461a      	mov	r2, r3
 8006a52:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d107      	bne.n	8006a6a <SM_EnableDacToAux+0x5a>
	{
		printf("SM_EnableDacToAux HAL_DAC_Init() Result:%u\n",res);
 8006a5a:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006a5e:	4619      	mov	r1, r3
 8006a60:	484f      	ldr	r0, [pc, #316]	; (8006ba0 <SM_EnableDacToAux+0x190>)
 8006a62:	f00b f9c7 	bl	8011df4 <iprintf>
		Error_Handler();
 8006a66:	f001 fa43 	bl	8007ef0 <Error_Handler>
	}
	/** DAC channel OUT1 config
	*/
	sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006a6a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006a6e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006a72:	2300      	movs	r3, #0
 8006a74:	f887 3098 	strb.w	r3, [r7, #152]	; 0x98
	sConfig.DAC_SignedFormat = DISABLE;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	f887 3099 	strb.w	r3, [r7, #153]	; 0x99
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006a7e:	2300      	movs	r3, #0
 8006a80:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006a84:	2306      	movs	r3, #6
 8006a86:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006a90:	2300      	movs	r3, #0
 8006a92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006a96:	2301      	movs	r3, #1
 8006a98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	if ((res == HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1)) != HAL_OK)
 8006aa2:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8006aa6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006aaa:	2200      	movs	r2, #0
 8006aac:	4618      	mov	r0, r3
 8006aae:	f004 fcff 	bl	800b4b0 <HAL_DAC_ConfigChannel>
 8006ab2:	4603      	mov	r3, r0
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d107      	bne.n	8006ace <SM_EnableDacToAux+0xbe>
	{
		printf("SM_EnableDacToAux HAL_DAC_ConfigChannel() Result:%u\n",res);
 8006abe:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	4837      	ldr	r0, [pc, #220]	; (8006ba4 <SM_EnableDacToAux+0x194>)
 8006ac6:	f00b f995 	bl	8011df4 <iprintf>
		Error_Handler();
 8006aca:	f001 fa11 	bl	8007ef0 <Error_Handler>

	/* USER CODE BEGIN DAC2_MspInit 0 */

	/* USER CODE END DAC2_MspInit 0 */
	/* DAC2 clock enable */
	printf("SM_EnableDacToAux __HAL_RCC_DAC2_CLK_ENABLE()\n");
 8006ace:	4836      	ldr	r0, [pc, #216]	; (8006ba8 <SM_EnableDacToAux+0x198>)
 8006ad0:	f00b fa04 	bl	8011edc <puts>
	__HAL_RCC_DAC2_CLK_ENABLE();
 8006ad4:	4b35      	ldr	r3, [pc, #212]	; (8006bac <SM_EnableDacToAux+0x19c>)
 8006ad6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ad8:	4a34      	ldr	r2, [pc, #208]	; (8006bac <SM_EnableDacToAux+0x19c>)
 8006ada:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006ade:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006ae0:	4b32      	ldr	r3, [pc, #200]	; (8006bac <SM_EnableDacToAux+0x19c>)
 8006ae2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ae8:	60bb      	str	r3, [r7, #8]
 8006aea:	68bb      	ldr	r3, [r7, #8]

	printf("SM_EnableDacToAux __HAL_RCC_GPIOA_CLK_ENABLE()\n");
 8006aec:	4830      	ldr	r0, [pc, #192]	; (8006bb0 <SM_EnableDacToAux+0x1a0>)
 8006aee:	f00b f9f5 	bl	8011edc <puts>
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8006af2:	4b2e      	ldr	r3, [pc, #184]	; (8006bac <SM_EnableDacToAux+0x19c>)
 8006af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006af6:	4a2d      	ldr	r2, [pc, #180]	; (8006bac <SM_EnableDacToAux+0x19c>)
 8006af8:	f043 0301 	orr.w	r3, r3, #1
 8006afc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006afe:	4b2b      	ldr	r3, [pc, #172]	; (8006bac <SM_EnableDacToAux+0x19c>)
 8006b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b02:	f003 0301 	and.w	r3, r3, #1
 8006b06:	607b      	str	r3, [r7, #4]
 8006b08:	687b      	ldr	r3, [r7, #4]
	/**DAC2 GPIO Configuration
	PA6     ------> DAC2_OUT1
	*/
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006b0a:	2340      	movs	r3, #64	; 0x40
 8006b0c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b10:	2303      	movs	r3, #3
 8006b12:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b16:	2300      	movs	r3, #0
 8006b18:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	printf("SM_EnableDacToAux HAL_GPIO_Init()\n");
 8006b1c:	4825      	ldr	r0, [pc, #148]	; (8006bb4 <SM_EnableDacToAux+0x1a4>)
 8006b1e:	f00b f9dd 	bl	8011edc <puts>
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b22:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8006b26:	4619      	mov	r1, r3
 8006b28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006b2c:	f005 fa28 	bl	800bf80 <HAL_GPIO_Init>

	/* DAC2 DMA Init */
	/* DAC2_CH1 Init */
	hdma_dac2_ch1.Instance = DMA1_Channel3;
 8006b30:	4b21      	ldr	r3, [pc, #132]	; (8006bb8 <SM_EnableDacToAux+0x1a8>)
 8006b32:	60fb      	str	r3, [r7, #12]
	hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8006b34:	2329      	movs	r3, #41	; 0x29
 8006b36:	613b      	str	r3, [r7, #16]
	hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006b38:	2310      	movs	r3, #16
 8006b3a:	617b      	str	r3, [r7, #20]
	hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	61bb      	str	r3, [r7, #24]
	hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006b40:	2380      	movs	r3, #128	; 0x80
 8006b42:	61fb      	str	r3, [r7, #28]
	hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006b44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b48:	623b      	str	r3, [r7, #32]
	hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006b4a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006b4e:	627b      	str	r3, [r7, #36]	; 0x24
	hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8006b50:	2320      	movs	r3, #32
 8006b52:	62bb      	str	r3, [r7, #40]	; 0x28
	hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006b54:	2300      	movs	r3, #0
 8006b56:	62fb      	str	r3, [r7, #44]	; 0x2c
	if ((res == HAL_DMA_Init(&hdma_dac2_ch1)) != HAL_OK)
 8006b58:	f107 030c 	add.w	r3, r7, #12
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f004 fedd 	bl	800b91c <HAL_DMA_Init>
 8006b62:	4603      	mov	r3, r0
 8006b64:	461a      	mov	r2, r3
 8006b66:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d107      	bne.n	8006b7e <SM_EnableDacToAux+0x16e>
	{
		printf("SM_EnableDacToAux HAL_DMA_Init() Result:%u\n",res);
 8006b6e:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 8006b72:	4619      	mov	r1, r3
 8006b74:	4811      	ldr	r0, [pc, #68]	; (8006bbc <SM_EnableDacToAux+0x1ac>)
 8006b76:	f00b f93d 	bl	8011df4 <iprintf>
		Error_Handler();
 8006b7a:	f001 f9b9 	bl	8007ef0 <Error_Handler>
	}

	printf("SM_EnableDacToAux __HAL_LINKDMA()\n");
 8006b7e:	4810      	ldr	r0, [pc, #64]	; (8006bc0 <SM_EnableDacToAux+0x1b0>)
 8006b80:	f00b f9ac 	bl	8011edc <puts>
	__HAL_LINKDMA(&hdac2,DMA_Handle1,hdma_dac2_ch1);
 8006b84:	f107 030c 	add.w	r3, r7, #12
 8006b88:	677b      	str	r3, [r7, #116]	; 0x74
 8006b8a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8006b8e:	637b      	str	r3, [r7, #52]	; 0x34

    //GO_ApplyPresetToAux(eDefaultGainPreset);
}
 8006b90:	bf00      	nop
 8006b92:	37c8      	adds	r7, #200	; 0xc8
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	08016350 	.word	0x08016350
 8006b9c:	50000c00 	.word	0x50000c00
 8006ba0:	08016364 	.word	0x08016364
 8006ba4:	08016390 	.word	0x08016390
 8006ba8:	080163c8 	.word	0x080163c8
 8006bac:	40021000 	.word	0x40021000
 8006bb0:	080163f8 	.word	0x080163f8
 8006bb4:	08016428 	.word	0x08016428
 8006bb8:	40020030 	.word	0x40020030
 8006bbc:	0801644c 	.word	0x0801644c
 8006bc0:	08016478 	.word	0x08016478

08006bc4 <SM_DisableDacToAux>:
 *	@param None
 *	@retval None
 *
 */
void SM_DisableDacToAux()
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	af00      	add	r7, sp, #0


	printf("SM_DisableDacToAux\n");
 8006bc8:	4806      	ldr	r0, [pc, #24]	; (8006be4 <SM_DisableDacToAux+0x20>)
 8006bca:	f00b f987 	bl	8011edc <puts>
    //__HAL_RCC_DAC2_CLK_DISABLE();

    /**DAC2 GPIO Configuration
    PA6     ------> DAC2_OUT1
    */
	printf("SM_DisableDacToAux HAL_GPIO_DeInit\n");
 8006bce:	4806      	ldr	r0, [pc, #24]	; (8006be8 <SM_DisableDacToAux+0x24>)
 8006bd0:	f00b f984 	bl	8011edc <puts>
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_6);
 8006bd4:	2140      	movs	r1, #64	; 0x40
 8006bd6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006bda:	f005 fb53 	bl	800c284 <HAL_GPIO_DeInit>

}
 8006bde:	bf00      	nop
 8006be0:	bd80      	pop	{r7, pc}
 8006be2:	bf00      	nop
 8006be4:	0801649c 	.word	0x0801649c
 8006be8:	080164b0 	.word	0x080164b0

08006bec <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Inversion direction)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	71fb      	strb	r3, [r7, #7]
	if(direction)
 8006bf6:	79fb      	ldrb	r3, [r7, #7]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d008      	beq.n	8006c0e <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8006bfc:	4b08      	ldr	r3, [pc, #32]	; (8006c20 <SM_GetEncoderValue+0x34>)
 8006bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c00:	b29a      	uxth	r2, r3
 8006c02:	4b07      	ldr	r3, [pc, #28]	; (8006c20 <SM_GetEncoderValue+0x34>)
 8006c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c06:	b29b      	uxth	r3, r3
 8006c08:	1ad3      	subs	r3, r2, r3
 8006c0a:	b29b      	uxth	r3, r3
 8006c0c:	e002      	b.n	8006c14 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8006c0e:	4b04      	ldr	r3, [pc, #16]	; (8006c20 <SM_GetEncoderValue+0x34>)
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	b29b      	uxth	r3, r3
	}
}
 8006c14:	4618      	mov	r0, r3
 8006c16:	370c      	adds	r7, #12
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	40012c00 	.word	0x40012c00

08006c24 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8006c24:	b480      	push	{r7}
 8006c26:	b085      	sub	sp, #20
 8006c28:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 8006c2a:	4b1d      	ldr	r3, [pc, #116]	; (8006ca0 <SM_GetOutputInHertz+0x7c>)
 8006c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d103      	bne.n	8006c3a <SM_GetOutputInHertz+0x16>
 8006c32:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006c36:	60bb      	str	r3, [r7, #8]
 8006c38:	e007      	b.n	8006c4a <SM_GetOutputInHertz+0x26>
 8006c3a:	4b19      	ldr	r3, [pc, #100]	; (8006ca0 <SM_GetOutputInHertz+0x7c>)
 8006c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c3e:	ee07 3a90 	vmov	s15, r3
 8006c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c46:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 8006c4a:	4b15      	ldr	r3, [pc, #84]	; (8006ca0 <SM_GetOutputInHertz+0x7c>)
 8006c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d103      	bne.n	8006c5a <SM_GetOutputInHertz+0x36>
 8006c52:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006c56:	607b      	str	r3, [r7, #4]
 8006c58:	e007      	b.n	8006c6a <SM_GetOutputInHertz+0x46>
 8006c5a:	4b11      	ldr	r3, [pc, #68]	; (8006ca0 <SM_GetOutputInHertz+0x7c>)
 8006c5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5e:	ee07 3a90 	vmov	s15, r3
 8006c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006c66:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 8006c6a:	ed97 7a02 	vldr	s14, [r7, #8]
 8006c6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8006c72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c76:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8006ca4 <SM_GetOutputInHertz+0x80>
 8006c7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c7e:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 8006c82:	edd7 7a03 	vldr	s15, [r7, #12]
 8006c86:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8006ca8 <SM_GetOutputInHertz+0x84>
 8006c8a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8006c8e:	eef0 7a66 	vmov.f32	s15, s13
}
 8006c92:	eeb0 0a67 	vmov.f32	s0, s15
 8006c96:	3714      	adds	r7, #20
 8006c98:	46bd      	mov	sp, r7
 8006c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9e:	4770      	bx	lr
 8006ca0:	40013400 	.word	0x40013400
 8006ca4:	4d2037a0 	.word	0x4d2037a0
 8006ca8:	42f00000 	.word	0x42f00000

08006cac <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b083      	sub	sp, #12
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 8006cb8:	887b      	ldrh	r3, [r7, #2]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d101      	bne.n	8006cc2 <SM_ConvertPeriodToHertz+0x16>
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 8006cc2:	887b      	ldrh	r3, [r7, #2]
 8006cc4:	ee07 3a90 	vmov	s15, r3
 8006cc8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	ee07 3a90 	vmov	s15, r3
 8006cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006cda:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8006cf4 <SM_ConvertPeriodToHertz+0x48>
 8006cde:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006ce2:	eef0 7a66 	vmov.f32	s15, s13
}
 8006ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8006cea:	370c      	adds	r7, #12
 8006cec:	46bd      	mov	sp, r7
 8006cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf2:	4770      	bx	lr
 8006cf4:	4d2037a0 	.word	0x4d2037a0

08006cf8 <SM_IsFuncPwmDutyMode>:
	return (SM_MCLK / hertz) / psc;
}


uint8_t SM_IsFuncPwmDutyMode()
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	af00      	add	r7, sp, #0
	return duty_adjust_mode;
 8006cfc:	4b03      	ldr	r3, [pc, #12]	; (8006d0c <SM_IsFuncPwmDutyMode+0x14>)
 8006cfe:	781b      	ldrb	r3, [r3, #0]
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	46bd      	mov	sp, r7
 8006d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d08:	4770      	bx	lr
 8006d0a:	bf00      	nop
 8006d0c:	20002258 	.word	0x20002258

08006d10 <SM_ToggleFuncPwmDutyMode>:

void SM_ToggleFuncPwmDutyMode()
{
 8006d10:	b480      	push	{r7}
 8006d12:	af00      	add	r7, sp, #0
	duty_adjust_mode ^= 1;
 8006d14:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <SM_ToggleFuncPwmDutyMode+0x1c>)
 8006d16:	781b      	ldrb	r3, [r3, #0]
 8006d18:	f083 0301 	eor.w	r3, r3, #1
 8006d1c:	b2da      	uxtb	r2, r3
 8006d1e:	4b03      	ldr	r3, [pc, #12]	; (8006d2c <SM_ToggleFuncPwmDutyMode+0x1c>)
 8006d20:	701a      	strb	r2, [r3, #0]
}
 8006d22:	bf00      	nop
 8006d24:	46bd      	mov	sp, r7
 8006d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d2a:	4770      	bx	lr
 8006d2c:	20002258 	.word	0x20002258

08006d30 <SM_ResetFuncPwmDutyMode>:

void SM_ResetFuncPwmDutyMode()
{
 8006d30:	b480      	push	{r7}
 8006d32:	af00      	add	r7, sp, #0
	duty_adjust_mode = 0;
 8006d34:	4b03      	ldr	r3, [pc, #12]	; (8006d44 <SM_ResetFuncPwmDutyMode+0x14>)
 8006d36:	2200      	movs	r2, #0
 8006d38:	701a      	strb	r2, [r3, #0]

}
 8006d3a:	bf00      	nop
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	20002258 	.word	0x20002258

08006d48 <VPP_ResetLastEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ResetLastEncoderValue()
{
 8006d48:	b480      	push	{r7}
 8006d4a:	af00      	add	r7, sp, #0
	amp_last_encoder_value = 0;
 8006d4c:	4b03      	ldr	r3, [pc, #12]	; (8006d5c <VPP_ResetLastEncoderValue+0x14>)
 8006d4e:	2200      	movs	r2, #0
 8006d50:	801a      	strh	r2, [r3, #0]
}
 8006d52:	bf00      	nop
 8006d54:	46bd      	mov	sp, r7
 8006d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5a:	4770      	bx	lr
 8006d5c:	2000225a 	.word	0x2000225a

08006d60 <VPP_ApplyProfileToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToSignal(eAmpSettings_t pPresetEnum)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	4603      	mov	r3, r0
 8006d68:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8006d6a:	79fa      	ldrb	r2, [r7, #7]
 8006d6c:	4613      	mov	r3, r2
 8006d6e:	00db      	lsls	r3, r3, #3
 8006d70:	1a9b      	subs	r3, r3, r2
 8006d72:	009b      	lsls	r3, r3, #2
 8006d74:	4a10      	ldr	r2, [pc, #64]	; (8006db8 <VPP_ApplyProfileToSignal+0x58>)
 8006d76:	4413      	add	r3, r2
 8006d78:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 8006d7a:	2000      	movs	r0, #0
 8006d7c:	f7ff fcba 	bl	80066f4 <SM_GetOutputChannel>
 8006d80:	4602      	mov	r2, r0
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	7a1b      	ldrb	r3, [r3, #8]
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	f7ff f96b 	bl	8006068 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	edd3 7a04 	vldr	s15, [r3, #16]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	ed93 7a05 	vldr	s14, [r3, #20]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	8b1b      	ldrh	r3, [r3, #24]
 8006da2:	4618      	mov	r0, r3
 8006da4:	eef0 0a47 	vmov.f32	s1, s14
 8006da8:	eeb0 0a67 	vmov.f32	s0, s15
 8006dac:	f000 f830 	bl	8006e10 <_ProcessSignalDataTable>


}
 8006db0:	bf00      	nop
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}
 8006db8:	20000178 	.word	0x20000178

08006dbc <VPP_ApplyProfileToAux>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyProfileToAux(eAmpSettings_t pPresetEnum)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b084      	sub	sp, #16
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	71fb      	strb	r3, [r7, #7]

	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 8006dc6:	79fa      	ldrb	r2, [r7, #7]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	00db      	lsls	r3, r3, #3
 8006dcc:	1a9b      	subs	r3, r3, r2
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	4a0e      	ldr	r2, [pc, #56]	; (8006e0c <VPP_ApplyProfileToAux+0x50>)
 8006dd2:	4413      	add	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the AuxChannel object
	SM_GetOutputChannel(AUX_CHANNEL)->amp_profile = pNextEncPreset;
 8006dd6:	2001      	movs	r0, #1
 8006dd8:	f7ff fc8c 	bl	80066f4 <SM_GetOutputChannel>
 8006ddc:	4602      	mov	r2, r0
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	//GO_ApplyPresetToAux(pNextEncPreset->gain_preset);

	// Apply the next amplitude setting to the AuxChannel object
	_ProcessAuxDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	edd3 7a04 	vldr	s15, [r3, #16]
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	ed93 7a05 	vldr	s14, [r3, #20]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	8b1b      	ldrh	r3, [r3, #24]
 8006df4:	4618      	mov	r0, r3
 8006df6:	eef0 0a47 	vmov.f32	s1, s14
 8006dfa:	eeb0 0a67 	vmov.f32	s0, s15
 8006dfe:	f000 f88d 	bl	8006f1c <_ProcessAuxDataTable>



}
 8006e02:	bf00      	nop
 8006e04:	3710      	adds	r7, #16
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	20000178 	.word	0x20000178

08006e10 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b08a      	sub	sp, #40	; 0x28
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	ed87 0a03 	vstr	s0, [r7, #12]
 8006e1a:	edc7 0a02 	vstr	s1, [r7, #8]
 8006e1e:	4603      	mov	r3, r0
 8006e20:	80fb      	strh	r3, [r7, #6]
	sOutputChannel_t * pTmpOutputChannel = SM_GetOutputChannel(SIGNAL_CHANNEL);
 8006e22:	2000      	movs	r0, #0
 8006e24:	f7ff fc66 	bl	80066f4 <SM_GetOutputChannel>
 8006e28:	6178      	str	r0, [r7, #20]
	if(pTmpOutputChannel->func_profile->func != PWM_FUNC_MODE)
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8006e30:	781b      	ldrb	r3, [r3, #0]
 8006e32:	2b06      	cmp	r3, #6
 8006e34:	d06b      	beq.n	8006f0e <_ProcessSignalDataTable+0xfe>
	{
		// copy refer lookup datat table from SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006e36:	2300      	movs	r3, #0
 8006e38:	627b      	str	r3, [r7, #36]	; 0x24
 8006e3a:	e00c      	b.n	8006e56 <_ProcessSignalDataTable+0x46>
		{
			tmpDataTable[i] = pTmpOutputChannel->ref_lut_data[i];
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	4413      	add	r3, r2
 8006e46:	681a      	ldr	r2, [r3, #0]
 8006e48:	4933      	ldr	r1, [pc, #204]	; (8006f18 <_ProcessSignalDataTable+0x108>)
 8006e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e52:	3301      	adds	r3, #1
 8006e54:	627b      	str	r3, [r7, #36]	; 0x24
 8006e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e58:	2b77      	cmp	r3, #119	; 0x77
 8006e5a:	ddef      	ble.n	8006e3c <_ProcessSignalDataTable+0x2c>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 8006e5c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006e60:	623b      	str	r3, [r7, #32]
		if(_encoder_value)
 8006e62:	88fb      	ldrh	r3, [r7, #6]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d008      	beq.n	8006e7a <_ProcessSignalDataTable+0x6a>
		{
			pos_offset_coeff = (_encoder_value/4);
 8006e68:	88fb      	ldrh	r3, [r7, #6]
 8006e6a:	089b      	lsrs	r3, r3, #2
 8006e6c:	b29b      	uxth	r3, r3
 8006e6e:	ee07 3a90 	vmov	s15, r3
 8006e72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006e76:	edc7 7a08 	vstr	s15, [r7, #32]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006e7a:	2300      	movs	r3, #0
 8006e7c:	61fb      	str	r3, [r7, #28]
 8006e7e:	e02e      	b.n	8006ede <_ProcessSignalDataTable+0xce>
		{
			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8006e80:	4a25      	ldr	r2, [pc, #148]	; (8006f18 <_ProcessSignalDataTable+0x108>)
 8006e82:	69fb      	ldr	r3, [r7, #28]
 8006e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e88:	ee07 3a90 	vmov	s15, r3
 8006e8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006e90:	edd7 7a03 	vldr	s15, [r7, #12]
 8006e94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006e98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006e9c:	ee17 1a90 	vmov	r1, s15
 8006ea0:	4a1d      	ldr	r2, [pc, #116]	; (8006f18 <_ProcessSignalDataTable+0x108>)
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8006ea8:	4a1b      	ldr	r2, [pc, #108]	; (8006f18 <_ProcessSignalDataTable+0x108>)
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006eb0:	ee07 3a90 	vmov	s15, r3
 8006eb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006eb8:	edd7 7a08 	vldr	s15, [r7, #32]
 8006ebc:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8006ec0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006ec4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ec8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006ecc:	ee17 1a90 	vmov	r1, s15
 8006ed0:	4a11      	ldr	r2, [pc, #68]	; (8006f18 <_ProcessSignalDataTable+0x108>)
 8006ed2:	69fb      	ldr	r3, [r7, #28]
 8006ed4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	3301      	adds	r3, #1
 8006edc:	61fb      	str	r3, [r7, #28]
 8006ede:	69fb      	ldr	r3, [r7, #28]
 8006ee0:	2b77      	cmp	r3, #119	; 0x77
 8006ee2:	ddcd      	ble.n	8006e80 <_ProcessSignalDataTable+0x70>
		}

		// restore lookup table copy to active lookup table in SignalChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006ee4:	2300      	movs	r3, #0
 8006ee6:	61bb      	str	r3, [r7, #24]
 8006ee8:	e00e      	b.n	8006f08 <_ProcessSignalDataTable+0xf8>
		{
			SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8006eea:	2000      	movs	r0, #0
 8006eec:	f7ff fc02 	bl	80066f4 <SM_GetOutputChannel>
 8006ef0:	4601      	mov	r1, r0
 8006ef2:	4a09      	ldr	r2, [pc, #36]	; (8006f18 <_ProcessSignalDataTable+0x108>)
 8006ef4:	69bb      	ldr	r3, [r7, #24]
 8006ef6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	3302      	adds	r3, #2
 8006efe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	3301      	adds	r3, #1
 8006f06:	61bb      	str	r3, [r7, #24]
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	2b77      	cmp	r3, #119	; 0x77
 8006f0c:	dded      	ble.n	8006eea <_ProcessSignalDataTable+0xda>
		}
	}

}
 8006f0e:	bf00      	nop
 8006f10:	3728      	adds	r7, #40	; 0x28
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
 8006f16:	bf00      	nop
 8006f18:	2000273c 	.word	0x2000273c

08006f1c <_ProcessAuxDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessAuxDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b088      	sub	sp, #32
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	ed87 0a03 	vstr	s0, [r7, #12]
 8006f26:	edc7 0a02 	vstr	s1, [r7, #8]
 8006f2a:	4603      	mov	r3, r0
 8006f2c:	80fb      	strh	r3, [r7, #6]
	if(SM_GetOutputChannel(AUX_CHANNEL)->func_profile->func != PWM_FUNC_MODE)
 8006f2e:	2001      	movs	r0, #1
 8006f30:	f7ff fbe0 	bl	80066f4 <SM_GetOutputChannel>
 8006f34:	4603      	mov	r3, r0
 8006f36:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	2b06      	cmp	r3, #6
 8006f3e:	d059      	beq.n	8006ff4 <_ProcessAuxDataTable+0xd8>
	{
		// copy refer lookup datat table from AuxChannel object
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006f40:	2300      	movs	r3, #0
 8006f42:	61fb      	str	r3, [r7, #28]
 8006f44:	e00f      	b.n	8006f66 <_ProcessAuxDataTable+0x4a>
		{
			tmpDataTable[i] = SM_GetOutputChannel(AUX_CHANNEL)->ref_lut_data[i];
 8006f46:	2001      	movs	r0, #1
 8006f48:	f7ff fbd4 	bl	80066f4 <SM_GetOutputChannel>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	685a      	ldr	r2, [r3, #4]
 8006f50:	69fb      	ldr	r3, [r7, #28]
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	4413      	add	r3, r2
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	4933      	ldr	r1, [pc, #204]	; (8007028 <_ProcessAuxDataTable+0x10c>)
 8006f5a:	69fb      	ldr	r3, [r7, #28]
 8006f5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	3301      	adds	r3, #1
 8006f64:	61fb      	str	r3, [r7, #28]
 8006f66:	69fb      	ldr	r3, [r7, #28]
 8006f68:	2b77      	cmp	r3, #119	; 0x77
 8006f6a:	ddec      	ble.n	8006f46 <_ProcessAuxDataTable+0x2a>
		}

		// calculate positive offset coefficient from encoder position
		float pos_offset_coeff = 1;
 8006f6c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8006f70:	61bb      	str	r3, [r7, #24]
		if(_encoder_value)
 8006f72:	88fb      	ldrh	r3, [r7, #6]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d008      	beq.n	8006f8a <_ProcessAuxDataTable+0x6e>
		{
			pos_offset_coeff = (_encoder_value/4);
 8006f78:	88fb      	ldrh	r3, [r7, #6]
 8006f7a:	089b      	lsrs	r3, r3, #2
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	ee07 3a90 	vmov	s15, r3
 8006f82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006f86:	edc7 7a06 	vstr	s15, [r7, #24]
		}

		// adjust amplitude and offset of lookup table copy
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006f8a:	2300      	movs	r3, #0
 8006f8c:	617b      	str	r3, [r7, #20]
 8006f8e:	e02e      	b.n	8006fee <_ProcessAuxDataTable+0xd2>
		{

			tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8006f90:	4a25      	ldr	r2, [pc, #148]	; (8007028 <_ProcessAuxDataTable+0x10c>)
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006f98:	ee07 3a90 	vmov	s15, r3
 8006f9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006fa0:	edd7 7a03 	vldr	s15, [r7, #12]
 8006fa4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006fa8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fac:	ee17 1a90 	vmov	r1, s15
 8006fb0:	4a1d      	ldr	r2, [pc, #116]	; (8007028 <_ProcessAuxDataTable+0x10c>)
 8006fb2:	697b      	ldr	r3, [r7, #20]
 8006fb4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8006fb8:	4a1b      	ldr	r2, [pc, #108]	; (8007028 <_ProcessAuxDataTable+0x10c>)
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fc0:	ee07 3a90 	vmov	s15, r3
 8006fc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006fc8:	edd7 7a06 	vldr	s15, [r7, #24]
 8006fcc:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8006fd0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8006fd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006fdc:	ee17 1a90 	vmov	r1, s15
 8006fe0:	4a11      	ldr	r2, [pc, #68]	; (8007028 <_ProcessAuxDataTable+0x10c>)
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	3301      	adds	r3, #1
 8006fec:	617b      	str	r3, [r7, #20]
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2b77      	cmp	r3, #119	; 0x77
 8006ff2:	ddcd      	ble.n	8006f90 <_ProcessAuxDataTable+0x74>
		}
	}


	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8006ff4:	2300      	movs	r3, #0
 8006ff6:	613b      	str	r3, [r7, #16]
 8006ff8:	e00e      	b.n	8007018 <_ProcessAuxDataTable+0xfc>
	{
		SM_GetOutputChannel(AUX_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8006ffa:	2001      	movs	r0, #1
 8006ffc:	f7ff fb7a 	bl	80066f4 <SM_GetOutputChannel>
 8007000:	4601      	mov	r1, r0
 8007002:	4a09      	ldr	r2, [pc, #36]	; (8007028 <_ProcessAuxDataTable+0x10c>)
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	3302      	adds	r3, #2
 800700e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8007012:	693b      	ldr	r3, [r7, #16]
 8007014:	3301      	adds	r3, #1
 8007016:	613b      	str	r3, [r7, #16]
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	2b77      	cmp	r3, #119	; 0x77
 800701c:	dded      	ble.n	8006ffa <_ProcessAuxDataTable+0xde>
	}
}
 800701e:	bf00      	nop
 8007020:	3720      	adds	r7, #32
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	2000273c 	.word	0x2000273c

0800702c <VPP_MapEncoderPositionToSignalOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToSignalOutput(uint16_t pEncoderValue)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	4603      	mov	r3, r0
 8007034:	80fb      	strh	r3, [r7, #6]
	eAmpSettings_t tmpAmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8007036:	2000      	movs	r0, #0
 8007038:	f7ff fb5c 	bl	80066f4 <SM_GetOutputChannel>
 800703c:	4603      	mov	r3, r0
 800703e:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8007042:	781b      	ldrb	r3, [r3, #0]
 8007044:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 8007046:	4b15      	ldr	r3, [pc, #84]	; (800709c <VPP_MapEncoderPositionToSignalOutput+0x70>)
 8007048:	881b      	ldrh	r3, [r3, #0]
 800704a:	88fa      	ldrh	r2, [r7, #6]
 800704c:	429a      	cmp	r2, r3
 800704e:	d90c      	bls.n	800706a <VPP_MapEncoderPositionToSignalOutput+0x3e>
	{
		tmpAmp++;
 8007050:	7bfb      	ldrb	r3, [r7, #15]
 8007052:	3301      	adds	r3, #1
 8007054:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 8007056:	7bfb      	ldrb	r3, [r7, #15]
 8007058:	2b61      	cmp	r3, #97	; 0x61
 800705a:	d901      	bls.n	8007060 <VPP_MapEncoderPositionToSignalOutput+0x34>
 800705c:	2361      	movs	r3, #97	; 0x61
 800705e:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8007060:	7bfb      	ldrb	r3, [r7, #15]
 8007062:	4618      	mov	r0, r3
 8007064:	f7ff fe7c 	bl	8006d60 <VPP_ApplyProfileToSignal>
 8007068:	e010      	b.n	800708c <VPP_MapEncoderPositionToSignalOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 800706a:	4b0c      	ldr	r3, [pc, #48]	; (800709c <VPP_MapEncoderPositionToSignalOutput+0x70>)
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	88fa      	ldrh	r2, [r7, #6]
 8007070:	429a      	cmp	r2, r3
 8007072:	d20b      	bcs.n	800708c <VPP_MapEncoderPositionToSignalOutput+0x60>
	{
		tmpAmp--;
 8007074:	7bfb      	ldrb	r3, [r7, #15]
 8007076:	3b01      	subs	r3, #1
 8007078:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 800707a:	7bfb      	ldrb	r3, [r7, #15]
 800707c:	2b61      	cmp	r3, #97	; 0x61
 800707e:	d901      	bls.n	8007084 <VPP_MapEncoderPositionToSignalOutput+0x58>
 8007080:	2300      	movs	r3, #0
 8007082:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToSignal(tmpAmp);
 8007084:	7bfb      	ldrb	r3, [r7, #15]
 8007086:	4618      	mov	r0, r3
 8007088:	f7ff fe6a 	bl	8006d60 <VPP_ApplyProfileToSignal>
	}
	amp_last_encoder_value = pEncoderValue;
 800708c:	4a03      	ldr	r2, [pc, #12]	; (800709c <VPP_MapEncoderPositionToSignalOutput+0x70>)
 800708e:	88fb      	ldrh	r3, [r7, #6]
 8007090:	8013      	strh	r3, [r2, #0]

}
 8007092:	bf00      	nop
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	2000225a 	.word	0x2000225a

080070a0 <VPP_MapEncoderPositionToAuxOutput>:
 *
 *	@retval None
 *
 */
void VPP_MapEncoderPositionToAuxOutput(uint16_t pEncoderValue)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b084      	sub	sp, #16
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	4603      	mov	r3, r0
 80070a8:	80fb      	strh	r3, [r7, #6]

	eAmpSettings_t tmpAmp = SM_GetOutputChannel(AUX_CHANNEL)->amp_profile->amp_setting;
 80070aa:	2001      	movs	r0, #1
 80070ac:	f7ff fb22 	bl	80066f4 <SM_GetOutputChannel>
 80070b0:	4603      	mov	r3, r0
 80070b2:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80070b6:	781b      	ldrb	r3, [r3, #0]
 80070b8:	73fb      	strb	r3, [r7, #15]
	if(pEncoderValue > amp_last_encoder_value)
 80070ba:	4b15      	ldr	r3, [pc, #84]	; (8007110 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 80070bc:	881b      	ldrh	r3, [r3, #0]
 80070be:	88fa      	ldrh	r2, [r7, #6]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d90c      	bls.n	80070de <VPP_MapEncoderPositionToAuxOutput+0x3e>
	{
		tmpAmp++;
 80070c4:	7bfb      	ldrb	r3, [r7, #15]
 80070c6:	3301      	adds	r3, #1
 80070c8:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP98;
 80070ca:	7bfb      	ldrb	r3, [r7, #15]
 80070cc:	2b61      	cmp	r3, #97	; 0x61
 80070ce:	d901      	bls.n	80070d4 <VPP_MapEncoderPositionToAuxOutput+0x34>
 80070d0:	2361      	movs	r3, #97	; 0x61
 80070d2:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 80070d4:	7bfb      	ldrb	r3, [r7, #15]
 80070d6:	4618      	mov	r0, r3
 80070d8:	f7ff fe70 	bl	8006dbc <VPP_ApplyProfileToAux>
 80070dc:	e010      	b.n	8007100 <VPP_MapEncoderPositionToAuxOutput+0x60>
	}
	else if (pEncoderValue < amp_last_encoder_value)
 80070de:	4b0c      	ldr	r3, [pc, #48]	; (8007110 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 80070e0:	881b      	ldrh	r3, [r3, #0]
 80070e2:	88fa      	ldrh	r2, [r7, #6]
 80070e4:	429a      	cmp	r2, r3
 80070e6:	d20b      	bcs.n	8007100 <VPP_MapEncoderPositionToAuxOutput+0x60>
	{
		tmpAmp--;
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
 80070ea:	3b01      	subs	r3, #1
 80070ec:	73fb      	strb	r3, [r7, #15]
		if(tmpAmp > MAX_VPP_PRESETS-1) tmpAmp = VPP01;
 80070ee:	7bfb      	ldrb	r3, [r7, #15]
 80070f0:	2b61      	cmp	r3, #97	; 0x61
 80070f2:	d901      	bls.n	80070f8 <VPP_MapEncoderPositionToAuxOutput+0x58>
 80070f4:	2300      	movs	r3, #0
 80070f6:	73fb      	strb	r3, [r7, #15]
		VPP_ApplyProfileToAux(tmpAmp);
 80070f8:	7bfb      	ldrb	r3, [r7, #15]
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7ff fe5e 	bl	8006dbc <VPP_ApplyProfileToAux>
	}
	amp_last_encoder_value = pEncoderValue;
 8007100:	4a03      	ldr	r2, [pc, #12]	; (8007110 <VPP_MapEncoderPositionToAuxOutput+0x70>)
 8007102:	88fb      	ldrh	r3, [r7, #6]
 8007104:	8013      	strh	r3, [r2, #0]

}
 8007106:	bf00      	nop
 8007108:	3710      	adds	r7, #16
 800710a:	46bd      	mov	sp, r7
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	2000225a 	.word	0x2000225a

08007114 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b08c      	sub	sp, #48	; 0x30
 8007118:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800711a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800711e:	2200      	movs	r2, #0
 8007120:	601a      	str	r2, [r3, #0]
 8007122:	605a      	str	r2, [r3, #4]
 8007124:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8007126:	1d3b      	adds	r3, r7, #4
 8007128:	2220      	movs	r2, #32
 800712a:	2100      	movs	r1, #0
 800712c:	4618      	mov	r0, r3
 800712e:	f00a f9fd 	bl	801152c <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8007132:	4b32      	ldr	r3, [pc, #200]	; (80071fc <MX_ADC1_Init+0xe8>)
 8007134:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007138:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800713a:	4b30      	ldr	r3, [pc, #192]	; (80071fc <MX_ADC1_Init+0xe8>)
 800713c:	2200      	movs	r2, #0
 800713e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8007140:	4b2e      	ldr	r3, [pc, #184]	; (80071fc <MX_ADC1_Init+0xe8>)
 8007142:	2200      	movs	r2, #0
 8007144:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007146:	4b2d      	ldr	r3, [pc, #180]	; (80071fc <MX_ADC1_Init+0xe8>)
 8007148:	2200      	movs	r2, #0
 800714a:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 800714c:	4b2b      	ldr	r3, [pc, #172]	; (80071fc <MX_ADC1_Init+0xe8>)
 800714e:	2200      	movs	r2, #0
 8007150:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8007152:	4b2a      	ldr	r3, [pc, #168]	; (80071fc <MX_ADC1_Init+0xe8>)
 8007154:	2200      	movs	r2, #0
 8007156:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8007158:	4b28      	ldr	r3, [pc, #160]	; (80071fc <MX_ADC1_Init+0xe8>)
 800715a:	2204      	movs	r2, #4
 800715c:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800715e:	4b27      	ldr	r3, [pc, #156]	; (80071fc <MX_ADC1_Init+0xe8>)
 8007160:	2200      	movs	r2, #0
 8007162:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8007164:	4b25      	ldr	r3, [pc, #148]	; (80071fc <MX_ADC1_Init+0xe8>)
 8007166:	2201      	movs	r2, #1
 8007168:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800716a:	4b24      	ldr	r3, [pc, #144]	; (80071fc <MX_ADC1_Init+0xe8>)
 800716c:	2201      	movs	r2, #1
 800716e:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007170:	4b22      	ldr	r3, [pc, #136]	; (80071fc <MX_ADC1_Init+0xe8>)
 8007172:	2200      	movs	r2, #0
 8007174:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8007178:	4b20      	ldr	r3, [pc, #128]	; (80071fc <MX_ADC1_Init+0xe8>)
 800717a:	2200      	movs	r2, #0
 800717c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800717e:	4b1f      	ldr	r3, [pc, #124]	; (80071fc <MX_ADC1_Init+0xe8>)
 8007180:	2200      	movs	r2, #0
 8007182:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8007184:	4b1d      	ldr	r3, [pc, #116]	; (80071fc <MX_ADC1_Init+0xe8>)
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 800718c:	4b1b      	ldr	r3, [pc, #108]	; (80071fc <MX_ADC1_Init+0xe8>)
 800718e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007192:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8007194:	4b19      	ldr	r3, [pc, #100]	; (80071fc <MX_ADC1_Init+0xe8>)
 8007196:	2200      	movs	r2, #0
 8007198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800719c:	4817      	ldr	r0, [pc, #92]	; (80071fc <MX_ADC1_Init+0xe8>)
 800719e:	f002 f8c1 	bl	8009324 <HAL_ADC_Init>
 80071a2:	4603      	mov	r3, r0
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d001      	beq.n	80071ac <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80071a8:	f000 fea2 	bl	8007ef0 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80071ac:	2300      	movs	r3, #0
 80071ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80071b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80071b4:	4619      	mov	r1, r3
 80071b6:	4811      	ldr	r0, [pc, #68]	; (80071fc <MX_ADC1_Init+0xe8>)
 80071b8:	f003 f988 	bl	800a4cc <HAL_ADCEx_MultiModeConfigChannel>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d001      	beq.n	80071c6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80071c2:	f000 fe95 	bl	8007ef0 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80071c6:	4b0e      	ldr	r3, [pc, #56]	; (8007200 <MX_ADC1_Init+0xec>)
 80071c8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80071ca:	2306      	movs	r3, #6
 80071cc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80071ce:	2300      	movs	r3, #0
 80071d0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80071d2:	237f      	movs	r3, #127	; 0x7f
 80071d4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80071d6:	2304      	movs	r3, #4
 80071d8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80071da:	2300      	movs	r3, #0
 80071dc:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80071de:	1d3b      	adds	r3, r7, #4
 80071e0:	4619      	mov	r1, r3
 80071e2:	4806      	ldr	r0, [pc, #24]	; (80071fc <MX_ADC1_Init+0xe8>)
 80071e4:	f002 fba2 	bl	800992c <HAL_ADC_ConfigChannel>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d001      	beq.n	80071f2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80071ee:	f000 fe7f 	bl	8007ef0 <Error_Handler>
  }

}
 80071f2:	bf00      	nop
 80071f4:	3730      	adds	r7, #48	; 0x30
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	2000291c 	.word	0x2000291c
 8007200:	0c900008 	.word	0x0c900008

08007204 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b08a      	sub	sp, #40	; 0x28
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800720c:	f107 0314 	add.w	r3, r7, #20
 8007210:	2200      	movs	r2, #0
 8007212:	601a      	str	r2, [r3, #0]
 8007214:	605a      	str	r2, [r3, #4]
 8007216:	609a      	str	r2, [r3, #8]
 8007218:	60da      	str	r2, [r3, #12]
 800721a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007224:	d14f      	bne.n	80072c6 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8007226:	4b2a      	ldr	r3, [pc, #168]	; (80072d0 <HAL_ADC_MspInit+0xcc>)
 8007228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800722a:	4a29      	ldr	r2, [pc, #164]	; (80072d0 <HAL_ADC_MspInit+0xcc>)
 800722c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007232:	4b27      	ldr	r3, [pc, #156]	; (80072d0 <HAL_ADC_MspInit+0xcc>)
 8007234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007236:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800723a:	613b      	str	r3, [r7, #16]
 800723c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800723e:	4b24      	ldr	r3, [pc, #144]	; (80072d0 <HAL_ADC_MspInit+0xcc>)
 8007240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007242:	4a23      	ldr	r2, [pc, #140]	; (80072d0 <HAL_ADC_MspInit+0xcc>)
 8007244:	f043 0301 	orr.w	r3, r3, #1
 8007248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800724a:	4b21      	ldr	r3, [pc, #132]	; (80072d0 <HAL_ADC_MspInit+0xcc>)
 800724c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	60fb      	str	r3, [r7, #12]
 8007254:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007256:	2304      	movs	r3, #4
 8007258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800725a:	2303      	movs	r3, #3
 800725c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800725e:	2300      	movs	r3, #0
 8007260:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007262:	f107 0314 	add.w	r3, r7, #20
 8007266:	4619      	mov	r1, r3
 8007268:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800726c:	f004 fe88 	bl	800bf80 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8007270:	4b18      	ldr	r3, [pc, #96]	; (80072d4 <HAL_ADC_MspInit+0xd0>)
 8007272:	4a19      	ldr	r2, [pc, #100]	; (80072d8 <HAL_ADC_MspInit+0xd4>)
 8007274:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8007276:	4b17      	ldr	r3, [pc, #92]	; (80072d4 <HAL_ADC_MspInit+0xd0>)
 8007278:	2205      	movs	r2, #5
 800727a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800727c:	4b15      	ldr	r3, [pc, #84]	; (80072d4 <HAL_ADC_MspInit+0xd0>)
 800727e:	2200      	movs	r2, #0
 8007280:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007282:	4b14      	ldr	r3, [pc, #80]	; (80072d4 <HAL_ADC_MspInit+0xd0>)
 8007284:	2200      	movs	r2, #0
 8007286:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8007288:	4b12      	ldr	r3, [pc, #72]	; (80072d4 <HAL_ADC_MspInit+0xd0>)
 800728a:	2280      	movs	r2, #128	; 0x80
 800728c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800728e:	4b11      	ldr	r3, [pc, #68]	; (80072d4 <HAL_ADC_MspInit+0xd0>)
 8007290:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007294:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8007296:	4b0f      	ldr	r3, [pc, #60]	; (80072d4 <HAL_ADC_MspInit+0xd0>)
 8007298:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800729c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800729e:	4b0d      	ldr	r3, [pc, #52]	; (80072d4 <HAL_ADC_MspInit+0xd0>)
 80072a0:	2220      	movs	r2, #32
 80072a2:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80072a4:	4b0b      	ldr	r3, [pc, #44]	; (80072d4 <HAL_ADC_MspInit+0xd0>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80072aa:	480a      	ldr	r0, [pc, #40]	; (80072d4 <HAL_ADC_MspInit+0xd0>)
 80072ac:	f004 fb36 	bl	800b91c <HAL_DMA_Init>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80072b6:	f000 fe1b 	bl	8007ef0 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	4a05      	ldr	r2, [pc, #20]	; (80072d4 <HAL_ADC_MspInit+0xd0>)
 80072be:	655a      	str	r2, [r3, #84]	; 0x54
 80072c0:	4a04      	ldr	r2, [pc, #16]	; (80072d4 <HAL_ADC_MspInit+0xd0>)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80072c6:	bf00      	nop
 80072c8:	3728      	adds	r7, #40	; 0x28
 80072ca:	46bd      	mov	sp, r7
 80072cc:	bd80      	pop	{r7, pc}
 80072ce:	bf00      	nop
 80072d0:	40021000 	.word	0x40021000
 80072d4:	20002988 	.word	0x20002988
 80072d8:	40020008 	.word	0x40020008

080072dc <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 80072e0:	4b0f      	ldr	r3, [pc, #60]	; (8007320 <MX_COMP1_Init+0x44>)
 80072e2:	4a10      	ldr	r2, [pc, #64]	; (8007324 <MX_COMP1_Init+0x48>)
 80072e4:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80072e6:	4b0e      	ldr	r3, [pc, #56]	; (8007320 <MX_COMP1_Init+0x44>)
 80072e8:	2200      	movs	r2, #0
 80072ea:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 80072ec:	4b0c      	ldr	r3, [pc, #48]	; (8007320 <MX_COMP1_Init+0x44>)
 80072ee:	4a0e      	ldr	r2, [pc, #56]	; (8007328 <MX_COMP1_Init+0x4c>)
 80072f0:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80072f2:	4b0b      	ldr	r3, [pc, #44]	; (8007320 <MX_COMP1_Init+0x44>)
 80072f4:	2200      	movs	r2, #0
 80072f6:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_HIGH;
 80072f8:	4b09      	ldr	r3, [pc, #36]	; (8007320 <MX_COMP1_Init+0x44>)
 80072fa:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 80072fe:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8007300:	4b07      	ldr	r3, [pc, #28]	; (8007320 <MX_COMP1_Init+0x44>)
 8007302:	2200      	movs	r2, #0
 8007304:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_IT_RISING_FALLING;
 8007306:	4b06      	ldr	r3, [pc, #24]	; (8007320 <MX_COMP1_Init+0x44>)
 8007308:	2231      	movs	r2, #49	; 0x31
 800730a:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 800730c:	4804      	ldr	r0, [pc, #16]	; (8007320 <MX_COMP1_Init+0x44>)
 800730e:	f003 fb5d 	bl	800a9cc <HAL_COMP_Init>
 8007312:	4603      	mov	r3, r0
 8007314:	2b00      	cmp	r3, #0
 8007316:	d001      	beq.n	800731c <MX_COMP1_Init+0x40>
  {
    Error_Handler();
 8007318:	f000 fdea 	bl	8007ef0 <Error_Handler>
  }

}
 800731c:	bf00      	nop
 800731e:	bd80      	pop	{r7, pc}
 8007320:	200029e8 	.word	0x200029e8
 8007324:	40010200 	.word	0x40010200
 8007328:	00800030 	.word	0x00800030

0800732c <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b088      	sub	sp, #32
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007334:	f107 030c 	add.w	r3, r7, #12
 8007338:	2200      	movs	r2, #0
 800733a:	601a      	str	r2, [r3, #0]
 800733c:	605a      	str	r2, [r3, #4]
 800733e:	609a      	str	r2, [r3, #8]
 8007340:	60da      	str	r2, [r3, #12]
 8007342:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a13      	ldr	r2, [pc, #76]	; (8007398 <HAL_COMP_MspInit+0x6c>)
 800734a:	4293      	cmp	r3, r2
 800734c:	d120      	bne.n	8007390 <HAL_COMP_MspInit+0x64>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800734e:	4b13      	ldr	r3, [pc, #76]	; (800739c <HAL_COMP_MspInit+0x70>)
 8007350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007352:	4a12      	ldr	r2, [pc, #72]	; (800739c <HAL_COMP_MspInit+0x70>)
 8007354:	f043 0301 	orr.w	r3, r3, #1
 8007358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800735a:	4b10      	ldr	r3, [pc, #64]	; (800739c <HAL_COMP_MspInit+0x70>)
 800735c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800735e:	f003 0301 	and.w	r3, r3, #1
 8007362:	60bb      	str	r3, [r7, #8]
 8007364:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007366:	2302      	movs	r3, #2
 8007368:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800736a:	2303      	movs	r3, #3
 800736c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800736e:	2300      	movs	r3, #0
 8007370:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007372:	f107 030c 	add.w	r3, r7, #12
 8007376:	4619      	mov	r1, r3
 8007378:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800737c:	f004 fe00 	bl	800bf80 <HAL_GPIO_Init>

    /* COMP1 interrupt Init */
    HAL_NVIC_SetPriority(COMP1_2_3_IRQn, 0, 0);
 8007380:	2200      	movs	r2, #0
 8007382:	2100      	movs	r1, #0
 8007384:	2040      	movs	r0, #64	; 0x40
 8007386:	f003 fe68 	bl	800b05a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(COMP1_2_3_IRQn);
 800738a:	2040      	movs	r0, #64	; 0x40
 800738c:	f003 fe7f 	bl	800b08e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8007390:	bf00      	nop
 8007392:	3720      	adds	r7, #32
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	40010200 	.word	0x40010200
 800739c:	40021000 	.word	0x40021000

080073a0 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b08c      	sub	sp, #48	; 0x30
 80073a4:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80073a6:	463b      	mov	r3, r7
 80073a8:	2230      	movs	r2, #48	; 0x30
 80073aa:	2100      	movs	r1, #0
 80073ac:	4618      	mov	r0, r3
 80073ae:	f00a f8bd 	bl	801152c <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80073b2:	4b1e      	ldr	r3, [pc, #120]	; (800742c <MX_DAC1_Init+0x8c>)
 80073b4:	4a1e      	ldr	r2, [pc, #120]	; (8007430 <MX_DAC1_Init+0x90>)
 80073b6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80073b8:	481c      	ldr	r0, [pc, #112]	; (800742c <MX_DAC1_Init+0x8c>)
 80073ba:	f003 fe90 	bl	800b0de <HAL_DAC_Init>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d001      	beq.n	80073c8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80073c4:	f000 fd94 	bl	8007ef0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80073c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80073cc:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80073ce:	2300      	movs	r3, #0
 80073d0:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80073d2:	2300      	movs	r3, #0
 80073d4:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80073d6:	2300      	movs	r3, #0
 80073d8:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80073da:	2306      	movs	r3, #6
 80073dc:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80073de:	2300      	movs	r3, #0
 80073e0:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80073e2:	2300      	movs	r3, #0
 80073e4:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80073e6:	2301      	movs	r3, #1
 80073e8:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80073ea:	2300      	movs	r3, #0
 80073ec:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80073ee:	463b      	mov	r3, r7
 80073f0:	2200      	movs	r2, #0
 80073f2:	4619      	mov	r1, r3
 80073f4:	480d      	ldr	r0, [pc, #52]	; (800742c <MX_DAC1_Init+0x8c>)
 80073f6:	f004 f85b 	bl	800b4b0 <HAL_DAC_ConfigChannel>
 80073fa:	4603      	mov	r3, r0
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d001      	beq.n	8007404 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8007400:	f000 fd76 	bl	8007ef0 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8007404:	2300      	movs	r3, #0
 8007406:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8007408:	2301      	movs	r3, #1
 800740a:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800740c:	463b      	mov	r3, r7
 800740e:	2210      	movs	r2, #16
 8007410:	4619      	mov	r1, r3
 8007412:	4806      	ldr	r0, [pc, #24]	; (800742c <MX_DAC1_Init+0x8c>)
 8007414:	f004 f84c 	bl	800b4b0 <HAL_DAC_ConfigChannel>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d001      	beq.n	8007422 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 800741e:	f000 fd67 	bl	8007ef0 <Error_Handler>
  }

}
 8007422:	bf00      	nop
 8007424:	3730      	adds	r7, #48	; 0x30
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}
 800742a:	bf00      	nop
 800742c:	20002a20 	.word	0x20002a20
 8007430:	50000800 	.word	0x50000800

08007434 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b08c      	sub	sp, #48	; 0x30
 8007438:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800743a:	463b      	mov	r3, r7
 800743c:	2230      	movs	r2, #48	; 0x30
 800743e:	2100      	movs	r1, #0
 8007440:	4618      	mov	r0, r3
 8007442:	f00a f873 	bl	801152c <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8007446:	4b16      	ldr	r3, [pc, #88]	; (80074a0 <MX_DAC2_Init+0x6c>)
 8007448:	4a16      	ldr	r2, [pc, #88]	; (80074a4 <MX_DAC2_Init+0x70>)
 800744a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 800744c:	4814      	ldr	r0, [pc, #80]	; (80074a0 <MX_DAC2_Init+0x6c>)
 800744e:	f003 fe46 	bl	800b0de <HAL_DAC_Init>
 8007452:	4603      	mov	r3, r0
 8007454:	2b00      	cmp	r3, #0
 8007456:	d001      	beq.n	800745c <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8007458:	f000 fd4a 	bl	8007ef0 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800745c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007460:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8007462:	2300      	movs	r3, #0
 8007464:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8007466:	2300      	movs	r3, #0
 8007468:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800746a:	2300      	movs	r3, #0
 800746c:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 800746e:	2306      	movs	r3, #6
 8007470:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8007472:	2300      	movs	r3, #0
 8007474:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8007476:	2300      	movs	r3, #0
 8007478:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800747a:	2301      	movs	r3, #1
 800747c:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800747e:	2300      	movs	r3, #0
 8007480:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8007482:	463b      	mov	r3, r7
 8007484:	2200      	movs	r2, #0
 8007486:	4619      	mov	r1, r3
 8007488:	4805      	ldr	r0, [pc, #20]	; (80074a0 <MX_DAC2_Init+0x6c>)
 800748a:	f004 f811 	bl	800b4b0 <HAL_DAC_ConfigChannel>
 800748e:	4603      	mov	r3, r0
 8007490:	2b00      	cmp	r3, #0
 8007492:	d001      	beq.n	8007498 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8007494:	f000 fd2c 	bl	8007ef0 <Error_Handler>
  }

}
 8007498:	bf00      	nop
 800749a:	3730      	adds	r7, #48	; 0x30
 800749c:	46bd      	mov	sp, r7
 800749e:	bd80      	pop	{r7, pc}
 80074a0:	20002a0c 	.word	0x20002a0c
 80074a4:	50000c00 	.word	0x50000c00

080074a8 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b08c      	sub	sp, #48	; 0x30
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074b0:	f107 031c 	add.w	r3, r7, #28
 80074b4:	2200      	movs	r2, #0
 80074b6:	601a      	str	r2, [r3, #0]
 80074b8:	605a      	str	r2, [r3, #4]
 80074ba:	609a      	str	r2, [r3, #8]
 80074bc:	60da      	str	r2, [r3, #12]
 80074be:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a56      	ldr	r2, [pc, #344]	; (8007620 <HAL_DAC_MspInit+0x178>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d150      	bne.n	800756c <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80074ca:	4b56      	ldr	r3, [pc, #344]	; (8007624 <HAL_DAC_MspInit+0x17c>)
 80074cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074ce:	4a55      	ldr	r2, [pc, #340]	; (8007624 <HAL_DAC_MspInit+0x17c>)
 80074d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074d6:	4b53      	ldr	r3, [pc, #332]	; (8007624 <HAL_DAC_MspInit+0x17c>)
 80074d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80074de:	61bb      	str	r3, [r7, #24]
 80074e0:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80074e2:	4b50      	ldr	r3, [pc, #320]	; (8007624 <HAL_DAC_MspInit+0x17c>)
 80074e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074e6:	4a4f      	ldr	r2, [pc, #316]	; (8007624 <HAL_DAC_MspInit+0x17c>)
 80074e8:	f043 0301 	orr.w	r3, r3, #1
 80074ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80074ee:	4b4d      	ldr	r3, [pc, #308]	; (8007624 <HAL_DAC_MspInit+0x17c>)
 80074f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	617b      	str	r3, [r7, #20]
 80074f8:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80074fa:	2330      	movs	r3, #48	; 0x30
 80074fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80074fe:	2303      	movs	r3, #3
 8007500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007502:	2300      	movs	r3, #0
 8007504:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007506:	f107 031c 	add.w	r3, r7, #28
 800750a:	4619      	mov	r1, r3
 800750c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007510:	f004 fd36 	bl	800bf80 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8007514:	4b44      	ldr	r3, [pc, #272]	; (8007628 <HAL_DAC_MspInit+0x180>)
 8007516:	4a45      	ldr	r2, [pc, #276]	; (800762c <HAL_DAC_MspInit+0x184>)
 8007518:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 800751a:	4b43      	ldr	r3, [pc, #268]	; (8007628 <HAL_DAC_MspInit+0x180>)
 800751c:	2206      	movs	r2, #6
 800751e:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007520:	4b41      	ldr	r3, [pc, #260]	; (8007628 <HAL_DAC_MspInit+0x180>)
 8007522:	2210      	movs	r2, #16
 8007524:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8007526:	4b40      	ldr	r3, [pc, #256]	; (8007628 <HAL_DAC_MspInit+0x180>)
 8007528:	2200      	movs	r2, #0
 800752a:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800752c:	4b3e      	ldr	r3, [pc, #248]	; (8007628 <HAL_DAC_MspInit+0x180>)
 800752e:	2280      	movs	r2, #128	; 0x80
 8007530:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8007532:	4b3d      	ldr	r3, [pc, #244]	; (8007628 <HAL_DAC_MspInit+0x180>)
 8007534:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007538:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800753a:	4b3b      	ldr	r3, [pc, #236]	; (8007628 <HAL_DAC_MspInit+0x180>)
 800753c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007540:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8007542:	4b39      	ldr	r3, [pc, #228]	; (8007628 <HAL_DAC_MspInit+0x180>)
 8007544:	2220      	movs	r2, #32
 8007546:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8007548:	4b37      	ldr	r3, [pc, #220]	; (8007628 <HAL_DAC_MspInit+0x180>)
 800754a:	2200      	movs	r2, #0
 800754c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 800754e:	4836      	ldr	r0, [pc, #216]	; (8007628 <HAL_DAC_MspInit+0x180>)
 8007550:	f004 f9e4 	bl	800b91c <HAL_DMA_Init>
 8007554:	4603      	mov	r3, r0
 8007556:	2b00      	cmp	r3, #0
 8007558:	d001      	beq.n	800755e <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800755a:	f000 fcc9 	bl	8007ef0 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a31      	ldr	r2, [pc, #196]	; (8007628 <HAL_DAC_MspInit+0x180>)
 8007562:	609a      	str	r2, [r3, #8]
 8007564:	4a30      	ldr	r2, [pc, #192]	; (8007628 <HAL_DAC_MspInit+0x180>)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 800756a:	e054      	b.n	8007616 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a2f      	ldr	r2, [pc, #188]	; (8007630 <HAL_DAC_MspInit+0x188>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d14f      	bne.n	8007616 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8007576:	4b2b      	ldr	r3, [pc, #172]	; (8007624 <HAL_DAC_MspInit+0x17c>)
 8007578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800757a:	4a2a      	ldr	r2, [pc, #168]	; (8007624 <HAL_DAC_MspInit+0x17c>)
 800757c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007582:	4b28      	ldr	r3, [pc, #160]	; (8007624 <HAL_DAC_MspInit+0x17c>)
 8007584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800758a:	613b      	str	r3, [r7, #16]
 800758c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800758e:	4b25      	ldr	r3, [pc, #148]	; (8007624 <HAL_DAC_MspInit+0x17c>)
 8007590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007592:	4a24      	ldr	r2, [pc, #144]	; (8007624 <HAL_DAC_MspInit+0x17c>)
 8007594:	f043 0301 	orr.w	r3, r3, #1
 8007598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800759a:	4b22      	ldr	r3, [pc, #136]	; (8007624 <HAL_DAC_MspInit+0x17c>)
 800759c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800759e:	f003 0301 	and.w	r3, r3, #1
 80075a2:	60fb      	str	r3, [r7, #12]
 80075a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80075a6:	2340      	movs	r3, #64	; 0x40
 80075a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80075aa:	2303      	movs	r3, #3
 80075ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ae:	2300      	movs	r3, #0
 80075b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80075b2:	f107 031c 	add.w	r3, r7, #28
 80075b6:	4619      	mov	r1, r3
 80075b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80075bc:	f004 fce0 	bl	800bf80 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 80075c0:	4b1c      	ldr	r3, [pc, #112]	; (8007634 <HAL_DAC_MspInit+0x18c>)
 80075c2:	4a1d      	ldr	r2, [pc, #116]	; (8007638 <HAL_DAC_MspInit+0x190>)
 80075c4:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 80075c6:	4b1b      	ldr	r3, [pc, #108]	; (8007634 <HAL_DAC_MspInit+0x18c>)
 80075c8:	2229      	movs	r2, #41	; 0x29
 80075ca:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80075cc:	4b19      	ldr	r3, [pc, #100]	; (8007634 <HAL_DAC_MspInit+0x18c>)
 80075ce:	2210      	movs	r2, #16
 80075d0:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80075d2:	4b18      	ldr	r3, [pc, #96]	; (8007634 <HAL_DAC_MspInit+0x18c>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80075d8:	4b16      	ldr	r3, [pc, #88]	; (8007634 <HAL_DAC_MspInit+0x18c>)
 80075da:	2280      	movs	r2, #128	; 0x80
 80075dc:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80075de:	4b15      	ldr	r3, [pc, #84]	; (8007634 <HAL_DAC_MspInit+0x18c>)
 80075e0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075e4:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80075e6:	4b13      	ldr	r3, [pc, #76]	; (8007634 <HAL_DAC_MspInit+0x18c>)
 80075e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80075ec:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 80075ee:	4b11      	ldr	r3, [pc, #68]	; (8007634 <HAL_DAC_MspInit+0x18c>)
 80075f0:	2220      	movs	r2, #32
 80075f2:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80075f4:	4b0f      	ldr	r3, [pc, #60]	; (8007634 <HAL_DAC_MspInit+0x18c>)
 80075f6:	2200      	movs	r2, #0
 80075f8:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 80075fa:	480e      	ldr	r0, [pc, #56]	; (8007634 <HAL_DAC_MspInit+0x18c>)
 80075fc:	f004 f98e 	bl	800b91c <HAL_DMA_Init>
 8007600:	4603      	mov	r3, r0
 8007602:	2b00      	cmp	r3, #0
 8007604:	d001      	beq.n	800760a <HAL_DAC_MspInit+0x162>
      Error_Handler();
 8007606:	f000 fc73 	bl	8007ef0 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	4a09      	ldr	r2, [pc, #36]	; (8007634 <HAL_DAC_MspInit+0x18c>)
 800760e:	609a      	str	r2, [r3, #8]
 8007610:	4a08      	ldr	r2, [pc, #32]	; (8007634 <HAL_DAC_MspInit+0x18c>)
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6293      	str	r3, [r2, #40]	; 0x28
}
 8007616:	bf00      	nop
 8007618:	3730      	adds	r7, #48	; 0x30
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	50000800 	.word	0x50000800
 8007624:	40021000 	.word	0x40021000
 8007628:	20002270 	.word	0x20002270
 800762c:	4002001c 	.word	0x4002001c
 8007630:	50000c00 	.word	0x50000c00
 8007634:	20002a34 	.word	0x20002a34
 8007638:	40020030 	.word	0x40020030

0800763c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b082      	sub	sp, #8
 8007640:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8007642:	4b1e      	ldr	r3, [pc, #120]	; (80076bc <MX_DMA_Init+0x80>)
 8007644:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007646:	4a1d      	ldr	r2, [pc, #116]	; (80076bc <MX_DMA_Init+0x80>)
 8007648:	f043 0304 	orr.w	r3, r3, #4
 800764c:	6493      	str	r3, [r2, #72]	; 0x48
 800764e:	4b1b      	ldr	r3, [pc, #108]	; (80076bc <MX_DMA_Init+0x80>)
 8007650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007652:	f003 0304 	and.w	r3, r3, #4
 8007656:	607b      	str	r3, [r7, #4]
 8007658:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800765a:	4b18      	ldr	r3, [pc, #96]	; (80076bc <MX_DMA_Init+0x80>)
 800765c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800765e:	4a17      	ldr	r2, [pc, #92]	; (80076bc <MX_DMA_Init+0x80>)
 8007660:	f043 0301 	orr.w	r3, r3, #1
 8007664:	6493      	str	r3, [r2, #72]	; 0x48
 8007666:	4b15      	ldr	r3, [pc, #84]	; (80076bc <MX_DMA_Init+0x80>)
 8007668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800766a:	f003 0301 	and.w	r3, r3, #1
 800766e:	603b      	str	r3, [r7, #0]
 8007670:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8007672:	2200      	movs	r2, #0
 8007674:	2101      	movs	r1, #1
 8007676:	200b      	movs	r0, #11
 8007678:	f003 fcef 	bl	800b05a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800767c:	200b      	movs	r0, #11
 800767e:	f003 fd06 	bl	800b08e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8007682:	2200      	movs	r2, #0
 8007684:	2100      	movs	r1, #0
 8007686:	200c      	movs	r0, #12
 8007688:	f003 fce7 	bl	800b05a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 800768c:	200c      	movs	r0, #12
 800768e:	f003 fcfe 	bl	800b08e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8007692:	2200      	movs	r2, #0
 8007694:	2100      	movs	r1, #0
 8007696:	200d      	movs	r0, #13
 8007698:	f003 fcdf 	bl	800b05a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800769c:	200d      	movs	r0, #13
 800769e:	f003 fcf6 	bl	800b08e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80076a2:	2200      	movs	r2, #0
 80076a4:	2100      	movs	r1, #0
 80076a6:	200e      	movs	r0, #14
 80076a8:	f003 fcd7 	bl	800b05a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80076ac:	200e      	movs	r0, #14
 80076ae:	f003 fcee 	bl	800b08e <HAL_NVIC_EnableIRQ>

}
 80076b2:	bf00      	nop
 80076b4:	3708      	adds	r7, #8
 80076b6:	46bd      	mov	sp, r7
 80076b8:	bd80      	pop	{r7, pc}
 80076ba:	bf00      	nop
 80076bc:	40021000 	.word	0x40021000

080076c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80076c0:	b480      	push	{r7}
 80076c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80076c4:	4b04      	ldr	r3, [pc, #16]	; (80076d8 <__NVIC_GetPriorityGrouping+0x18>)
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	0a1b      	lsrs	r3, r3, #8
 80076ca:	f003 0307 	and.w	r3, r3, #7
}
 80076ce:	4618      	mov	r0, r3
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr
 80076d8:	e000ed00 	.word	0xe000ed00

080076dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80076dc:	b480      	push	{r7}
 80076de:	b083      	sub	sp, #12
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	4603      	mov	r3, r0
 80076e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	db0b      	blt.n	8007706 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80076ee:	79fb      	ldrb	r3, [r7, #7]
 80076f0:	f003 021f 	and.w	r2, r3, #31
 80076f4:	4907      	ldr	r1, [pc, #28]	; (8007714 <__NVIC_EnableIRQ+0x38>)
 80076f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076fa:	095b      	lsrs	r3, r3, #5
 80076fc:	2001      	movs	r0, #1
 80076fe:	fa00 f202 	lsl.w	r2, r0, r2
 8007702:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007706:	bf00      	nop
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	e000e100 	.word	0xe000e100

08007718 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007718:	b480      	push	{r7}
 800771a:	b083      	sub	sp, #12
 800771c:	af00      	add	r7, sp, #0
 800771e:	4603      	mov	r3, r0
 8007720:	6039      	str	r1, [r7, #0]
 8007722:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007724:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007728:	2b00      	cmp	r3, #0
 800772a:	db0a      	blt.n	8007742 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	b2da      	uxtb	r2, r3
 8007730:	490c      	ldr	r1, [pc, #48]	; (8007764 <__NVIC_SetPriority+0x4c>)
 8007732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007736:	0112      	lsls	r2, r2, #4
 8007738:	b2d2      	uxtb	r2, r2
 800773a:	440b      	add	r3, r1
 800773c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007740:	e00a      	b.n	8007758 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	b2da      	uxtb	r2, r3
 8007746:	4908      	ldr	r1, [pc, #32]	; (8007768 <__NVIC_SetPriority+0x50>)
 8007748:	79fb      	ldrb	r3, [r7, #7]
 800774a:	f003 030f 	and.w	r3, r3, #15
 800774e:	3b04      	subs	r3, #4
 8007750:	0112      	lsls	r2, r2, #4
 8007752:	b2d2      	uxtb	r2, r2
 8007754:	440b      	add	r3, r1
 8007756:	761a      	strb	r2, [r3, #24]
}
 8007758:	bf00      	nop
 800775a:	370c      	adds	r7, #12
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr
 8007764:	e000e100 	.word	0xe000e100
 8007768:	e000ed00 	.word	0xe000ed00

0800776c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800776c:	b480      	push	{r7}
 800776e:	b089      	sub	sp, #36	; 0x24
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	f003 0307 	and.w	r3, r3, #7
 800777e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007780:	69fb      	ldr	r3, [r7, #28]
 8007782:	f1c3 0307 	rsb	r3, r3, #7
 8007786:	2b04      	cmp	r3, #4
 8007788:	bf28      	it	cs
 800778a:	2304      	movcs	r3, #4
 800778c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	3304      	adds	r3, #4
 8007792:	2b06      	cmp	r3, #6
 8007794:	d902      	bls.n	800779c <NVIC_EncodePriority+0x30>
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	3b03      	subs	r3, #3
 800779a:	e000      	b.n	800779e <NVIC_EncodePriority+0x32>
 800779c:	2300      	movs	r3, #0
 800779e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	fa02 f303 	lsl.w	r3, r2, r3
 80077aa:	43da      	mvns	r2, r3
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	401a      	ands	r2, r3
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80077b4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80077b8:	697b      	ldr	r3, [r7, #20]
 80077ba:	fa01 f303 	lsl.w	r3, r1, r3
 80077be:	43d9      	mvns	r1, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80077c4:	4313      	orrs	r3, r2
         );
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3724      	adds	r7, #36	; 0x24
 80077ca:	46bd      	mov	sp, r7
 80077cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d0:	4770      	bx	lr
	...

080077d4 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80077d4:	b480      	push	{r7}
 80077d6:	b085      	sub	sp, #20
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 80077de:	4a14      	ldr	r2, [pc, #80]	; (8007830 <LL_SYSCFG_SetEXTISource+0x5c>)
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	f003 0303 	and.w	r3, r3, #3
 80077e6:	3302      	adds	r3, #2
 80077e8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	0c1b      	lsrs	r3, r3, #16
 80077f0:	43db      	mvns	r3, r3
 80077f2:	ea02 0103 	and.w	r1, r2, r3
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	0c1b      	lsrs	r3, r3, #16
 80077fa:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	fa93 f3a3 	rbit	r3, r3
 8007802:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	fab3 f383 	clz	r3, r3
 800780a:	b2db      	uxtb	r3, r3
 800780c:	f003 031f 	and.w	r3, r3, #31
 8007810:	687a      	ldr	r2, [r7, #4]
 8007812:	409a      	lsls	r2, r3
 8007814:	4806      	ldr	r0, [pc, #24]	; (8007830 <LL_SYSCFG_SetEXTISource+0x5c>)
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	f003 0303 	and.w	r3, r3, #3
 800781c:	430a      	orrs	r2, r1
 800781e:	3302      	adds	r3, #2
 8007820:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8007824:	bf00      	nop
 8007826:	3714      	adds	r7, #20
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr
 8007830:	40010000 	.word	0x40010000

08007834 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007834:	b480      	push	{r7}
 8007836:	b089      	sub	sp, #36	; 0x24
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	fa93 f3a3 	rbit	r3, r3
 800784e:	613b      	str	r3, [r7, #16]
  return result;
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	fab3 f383 	clz	r3, r3
 8007856:	b2db      	uxtb	r3, r3
 8007858:	005b      	lsls	r3, r3, #1
 800785a:	2103      	movs	r1, #3
 800785c:	fa01 f303 	lsl.w	r3, r1, r3
 8007860:	43db      	mvns	r3, r3
 8007862:	401a      	ands	r2, r3
 8007864:	68bb      	ldr	r3, [r7, #8]
 8007866:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	fa93 f3a3 	rbit	r3, r3
 800786e:	61bb      	str	r3, [r7, #24]
  return result;
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	fab3 f383 	clz	r3, r3
 8007876:	b2db      	uxtb	r3, r3
 8007878:	005b      	lsls	r3, r3, #1
 800787a:	6879      	ldr	r1, [r7, #4]
 800787c:	fa01 f303 	lsl.w	r3, r1, r3
 8007880:	431a      	orrs	r2, r3
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	601a      	str	r2, [r3, #0]
}
 8007886:	bf00      	nop
 8007888:	3724      	adds	r7, #36	; 0x24
 800788a:	46bd      	mov	sp, r7
 800788c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007890:	4770      	bx	lr

08007892 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8007892:	b480      	push	{r7}
 8007894:	b089      	sub	sp, #36	; 0x24
 8007896:	af00      	add	r7, sp, #0
 8007898:	60f8      	str	r0, [r7, #12]
 800789a:	60b9      	str	r1, [r7, #8]
 800789c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	68da      	ldr	r2, [r3, #12]
 80078a2:	68bb      	ldr	r3, [r7, #8]
 80078a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	fa93 f3a3 	rbit	r3, r3
 80078ac:	613b      	str	r3, [r7, #16]
  return result;
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	fab3 f383 	clz	r3, r3
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	005b      	lsls	r3, r3, #1
 80078b8:	2103      	movs	r1, #3
 80078ba:	fa01 f303 	lsl.w	r3, r1, r3
 80078be:	43db      	mvns	r3, r3
 80078c0:	401a      	ands	r2, r3
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	fa93 f3a3 	rbit	r3, r3
 80078cc:	61bb      	str	r3, [r7, #24]
  return result;
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	fab3 f383 	clz	r3, r3
 80078d4:	b2db      	uxtb	r3, r3
 80078d6:	005b      	lsls	r3, r3, #1
 80078d8:	6879      	ldr	r1, [r7, #4]
 80078da:	fa01 f303 	lsl.w	r3, r1, r3
 80078de:	431a      	orrs	r2, r3
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	60da      	str	r2, [r3, #12]
}
 80078e4:	bf00      	nop
 80078e6:	3724      	adds	r7, #36	; 0x24
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr

080078f0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b083      	sub	sp, #12
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
 80078f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	683a      	ldr	r2, [r7, #0]
 80078fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007900:	bf00      	nop
 8007902:	370c      	adds	r7, #12
 8007904:	46bd      	mov	sp, r7
 8007906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800790a:	4770      	bx	lr

0800790c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800790c:	b480      	push	{r7}
 800790e:	b085      	sub	sp, #20
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007914:	4b08      	ldr	r3, [pc, #32]	; (8007938 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007916:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007918:	4907      	ldr	r1, [pc, #28]	; (8007938 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	4313      	orrs	r3, r2
 800791e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007920:	4b05      	ldr	r3, [pc, #20]	; (8007938 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007922:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	4013      	ands	r3, r2
 8007928:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800792a:	68fb      	ldr	r3, [r7, #12]
}
 800792c:	bf00      	nop
 800792e:	3714      	adds	r7, #20
 8007930:	46bd      	mov	sp, r7
 8007932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007936:	4770      	bx	lr
 8007938:	40021000 	.word	0x40021000

0800793c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b08a      	sub	sp, #40	; 0x28
 8007940:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8007942:	f107 031c 	add.w	r3, r7, #28
 8007946:	2200      	movs	r2, #0
 8007948:	601a      	str	r2, [r3, #0]
 800794a:	605a      	str	r2, [r3, #4]
 800794c:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800794e:	1d3b      	adds	r3, r7, #4
 8007950:	2200      	movs	r2, #0
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	605a      	str	r2, [r3, #4]
 8007956:	609a      	str	r2, [r3, #8]
 8007958:	60da      	str	r2, [r3, #12]
 800795a:	611a      	str	r2, [r3, #16]
 800795c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800795e:	2004      	movs	r0, #4
 8007960:	f7ff ffd4 	bl	800790c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8007964:	2020      	movs	r0, #32
 8007966:	f7ff ffd1 	bl	800790c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800796a:	2001      	movs	r0, #1
 800796c:	f7ff ffce 	bl	800790c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8007970:	2002      	movs	r0, #2
 8007972:	f7ff ffcb 	bl	800790c <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8007976:	2108      	movs	r1, #8
 8007978:	48d3      	ldr	r0, [pc, #844]	; (8007cc8 <MX_GPIO_Init+0x38c>)
 800797a:	f7ff ffb9 	bl	80078f0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(OFFSET_ENABLE_GPIO_Port, OFFSET_ENABLE_Pin);
 800797e:	2108      	movs	r1, #8
 8007980:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007984:	f7ff ffb4 	bl	80078f0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_C_GPIO_Port, CH1_GAIN_C_Pin);
 8007988:	2110      	movs	r1, #16
 800798a:	48cf      	ldr	r0, [pc, #828]	; (8007cc8 <MX_GPIO_Init+0x38c>)
 800798c:	f7ff ffb0 	bl	80078f0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_B_GPIO_Port, CH1_GAIN_B_Pin);
 8007990:	2120      	movs	r1, #32
 8007992:	48cd      	ldr	r0, [pc, #820]	; (8007cc8 <MX_GPIO_Init+0x38c>)
 8007994:	f7ff ffac 	bl	80078f0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CH1_GAIN_A_GPIO_Port, CH1_GAIN_A_Pin);
 8007998:	2101      	movs	r1, #1
 800799a:	48cc      	ldr	r0, [pc, #816]	; (8007ccc <MX_GPIO_Init+0x390>)
 800799c:	f7ff ffa8 	bl	80078f0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 80079a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80079a4:	48c8      	ldr	r0, [pc, #800]	; (8007cc8 <MX_GPIO_Init+0x38c>)
 80079a6:	f7ff ffa3 	bl	80078f0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 80079aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80079ae:	48c6      	ldr	r0, [pc, #792]	; (8007cc8 <MX_GPIO_Init+0x38c>)
 80079b0:	f7ff ff9e 	bl	80078f0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 80079b4:	2140      	movs	r1, #64	; 0x40
 80079b6:	48c5      	ldr	r0, [pc, #788]	; (8007ccc <MX_GPIO_Init+0x390>)
 80079b8:	f7ff ff9a 	bl	80078f0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 80079bc:	2180      	movs	r1, #128	; 0x80
 80079be:	48c3      	ldr	r0, [pc, #780]	; (8007ccc <MX_GPIO_Init+0x390>)
 80079c0:	f7ff ff96 	bl	80078f0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 80079c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80079c8:	48c0      	ldr	r0, [pc, #768]	; (8007ccc <MX_GPIO_Init+0x390>)
 80079ca:	f7ff ff91 	bl	80078f0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 80079ce:	49c0      	ldr	r1, [pc, #768]	; (8007cd0 <MX_GPIO_Init+0x394>)
 80079d0:	2002      	movs	r0, #2
 80079d2:	f7ff feff 	bl	80077d4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 80079d6:	49bf      	ldr	r1, [pc, #764]	; (8007cd4 <MX_GPIO_Init+0x398>)
 80079d8:	2002      	movs	r0, #2
 80079da:	f7ff fefb 	bl	80077d4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 80079de:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80079e2:	2005      	movs	r0, #5
 80079e4:	f7ff fef6 	bl	80077d4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 80079e8:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 80079ec:	2005      	movs	r0, #5
 80079ee:	f7ff fef1 	bl	80077d4 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 80079f2:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80079f6:	2002      	movs	r0, #2
 80079f8:	f7ff feec 	bl	80077d4 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 80079fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8007a00:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007a02:	2301      	movs	r3, #1
 8007a04:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007a08:	2300      	movs	r3, #0
 8007a0a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007a0e:	2302      	movs	r3, #2
 8007a10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007a14:	f107 031c 	add.w	r3, r7, #28
 8007a18:	4618      	mov	r0, r3
 8007a1a:	f008 faa5 	bl	800ff68 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 8007a1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a22:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007a24:	2301      	movs	r3, #1
 8007a26:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007a30:	2302      	movs	r3, #2
 8007a32:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007a36:	f107 031c 	add.w	r3, r7, #28
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	f008 fa94 	bl	800ff68 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 8007a40:	2301      	movs	r3, #1
 8007a42:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007a44:	2301      	movs	r3, #1
 8007a46:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007a50:	2302      	movs	r3, #2
 8007a52:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007a56:	f107 031c 	add.w	r3, r7, #28
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f008 fa84 	bl	800ff68 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 8007a60:	2302      	movs	r3, #2
 8007a62:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007a64:	2301      	movs	r3, #1
 8007a66:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007a6a:	2300      	movs	r3, #0
 8007a6c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007a70:	2302      	movs	r3, #2
 8007a72:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007a76:	f107 031c 	add.w	r3, r7, #28
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f008 fa74 	bl	800ff68 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8007a80:	2304      	movs	r3, #4
 8007a82:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007a84:	2301      	movs	r3, #1
 8007a86:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8007a90:	2302      	movs	r3, #2
 8007a92:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007a96:	f107 031c 	add.w	r3, r7, #28
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	f008 fa64 	bl	800ff68 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8007aa0:	2201      	movs	r2, #1
 8007aa2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007aa6:	4888      	ldr	r0, [pc, #544]	; (8007cc8 <MX_GPIO_Init+0x38c>)
 8007aa8:	f7ff fef3 	bl	8007892 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8007aac:	2201      	movs	r2, #1
 8007aae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ab2:	4885      	ldr	r0, [pc, #532]	; (8007cc8 <MX_GPIO_Init+0x38c>)
 8007ab4:	f7ff feed 	bl	8007892 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8007ab8:	2201      	movs	r2, #1
 8007aba:	2101      	movs	r1, #1
 8007abc:	4886      	ldr	r0, [pc, #536]	; (8007cd8 <MX_GPIO_Init+0x39c>)
 8007abe:	f7ff fee8 	bl	8007892 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8007ac2:	2201      	movs	r2, #1
 8007ac4:	2102      	movs	r1, #2
 8007ac6:	4884      	ldr	r0, [pc, #528]	; (8007cd8 <MX_GPIO_Init+0x39c>)
 8007ac8:	f7ff fee3 	bl	8007892 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_SW_GPIO_Port, ENC_SW_Pin, LL_GPIO_PULL_UP);
 8007acc:	2201      	movs	r2, #1
 8007ace:	2104      	movs	r1, #4
 8007ad0:	487d      	ldr	r0, [pc, #500]	; (8007cc8 <MX_GPIO_Init+0x38c>)
 8007ad2:	f7ff fede 	bl	8007892 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007adc:	487a      	ldr	r0, [pc, #488]	; (8007cc8 <MX_GPIO_Init+0x38c>)
 8007ade:	f7ff fea9 	bl	8007834 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ae8:	4877      	ldr	r0, [pc, #476]	; (8007cc8 <MX_GPIO_Init+0x38c>)
 8007aea:	f7ff fea3 	bl	8007834 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 8007aee:	2200      	movs	r2, #0
 8007af0:	2101      	movs	r1, #1
 8007af2:	4879      	ldr	r0, [pc, #484]	; (8007cd8 <MX_GPIO_Init+0x39c>)
 8007af4:	f7ff fe9e 	bl	8007834 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8007af8:	2200      	movs	r2, #0
 8007afa:	2102      	movs	r1, #2
 8007afc:	4876      	ldr	r0, [pc, #472]	; (8007cd8 <MX_GPIO_Init+0x39c>)
 8007afe:	f7ff fe99 	bl	8007834 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_SW_GPIO_Port, ENC_SW_Pin, LL_GPIO_MODE_INPUT);
 8007b02:	2200      	movs	r2, #0
 8007b04:	2104      	movs	r1, #4
 8007b06:	4870      	ldr	r0, [pc, #448]	; (8007cc8 <MX_GPIO_Init+0x38c>)
 8007b08:	f7ff fe94 	bl	8007834 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8007b0c:	2308      	movs	r3, #8
 8007b0e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007b10:	2301      	movs	r3, #1
 8007b12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007b14:	2300      	movs	r3, #0
 8007b16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 8007b20:	1d3b      	adds	r3, r7, #4
 8007b22:	4619      	mov	r1, r3
 8007b24:	4868      	ldr	r0, [pc, #416]	; (8007cc8 <MX_GPIO_Init+0x38c>)
 8007b26:	f008 fc12 	bl	801034e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = OFFSET_ENABLE_Pin;
 8007b2a:	2308      	movs	r3, #8
 8007b2c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007b32:	2300      	movs	r3, #0
 8007b34:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007b36:	2300      	movs	r3, #0
 8007b38:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007b3a:	2300      	movs	r3, #0
 8007b3c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(OFFSET_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8007b3e:	1d3b      	adds	r3, r7, #4
 8007b40:	4619      	mov	r1, r3
 8007b42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007b46:	f008 fc02 	bl	801034e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_C_Pin;
 8007b4a:	2310      	movs	r3, #16
 8007b4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007b52:	2300      	movs	r3, #0
 8007b54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007b56:	2300      	movs	r3, #0
 8007b58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_C_GPIO_Port, &GPIO_InitStruct);
 8007b5e:	1d3b      	adds	r3, r7, #4
 8007b60:	4619      	mov	r1, r3
 8007b62:	4859      	ldr	r0, [pc, #356]	; (8007cc8 <MX_GPIO_Init+0x38c>)
 8007b64:	f008 fbf3 	bl	801034e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_B_Pin;
 8007b68:	2320      	movs	r3, #32
 8007b6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007b70:	2300      	movs	r3, #0
 8007b72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007b74:	2300      	movs	r3, #0
 8007b76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_B_GPIO_Port, &GPIO_InitStruct);
 8007b7c:	1d3b      	adds	r3, r7, #4
 8007b7e:	4619      	mov	r1, r3
 8007b80:	4851      	ldr	r0, [pc, #324]	; (8007cc8 <MX_GPIO_Init+0x38c>)
 8007b82:	f008 fbe4 	bl	801034e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CH1_GAIN_A_Pin;
 8007b86:	2301      	movs	r3, #1
 8007b88:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007b8a:	2301      	movs	r3, #1
 8007b8c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007b92:	2300      	movs	r3, #0
 8007b94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007b96:	2300      	movs	r3, #0
 8007b98:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CH1_GAIN_A_GPIO_Port, &GPIO_InitStruct);
 8007b9a:	1d3b      	adds	r3, r7, #4
 8007b9c:	4619      	mov	r1, r3
 8007b9e:	484b      	ldr	r0, [pc, #300]	; (8007ccc <MX_GPIO_Init+0x390>)
 8007ba0:	f008 fbd5 	bl	801034e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8007ba4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ba8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007baa:	2301      	movs	r3, #1
 8007bac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007bae:	2300      	movs	r3, #0
 8007bb0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007bb2:	2300      	movs	r3, #0
 8007bb4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8007bba:	1d3b      	adds	r3, r7, #4
 8007bbc:	4619      	mov	r1, r3
 8007bbe:	4842      	ldr	r0, [pc, #264]	; (8007cc8 <MX_GPIO_Init+0x38c>)
 8007bc0:	f008 fbc5 	bl	801034e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8007bc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bc8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007bca:	2301      	movs	r3, #1
 8007bcc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8007bda:	1d3b      	adds	r3, r7, #4
 8007bdc:	4619      	mov	r1, r3
 8007bde:	483a      	ldr	r0, [pc, #232]	; (8007cc8 <MX_GPIO_Init+0x38c>)
 8007be0:	f008 fbb5 	bl	801034e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8007be4:	2340      	movs	r3, #64	; 0x40
 8007be6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007be8:	2301      	movs	r3, #1
 8007bea:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007bec:	2303      	movs	r3, #3
 8007bee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8007bf8:	1d3b      	adds	r3, r7, #4
 8007bfa:	4619      	mov	r1, r3
 8007bfc:	4833      	ldr	r0, [pc, #204]	; (8007ccc <MX_GPIO_Init+0x390>)
 8007bfe:	f008 fba6 	bl	801034e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8007c02:	2380      	movs	r3, #128	; 0x80
 8007c04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007c06:	2301      	movs	r3, #1
 8007c08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007c0a:	2303      	movs	r3, #3
 8007c0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007c12:	2300      	movs	r3, #0
 8007c14:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8007c16:	1d3b      	adds	r3, r7, #4
 8007c18:	4619      	mov	r1, r3
 8007c1a:	482c      	ldr	r0, [pc, #176]	; (8007ccc <MX_GPIO_Init+0x390>)
 8007c1c:	f008 fb97 	bl	801034e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 8007c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007c24:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007c26:	2301      	movs	r3, #1
 8007c28:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007c2a:	2303      	movs	r3, #3
 8007c2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007c32:	2300      	movs	r3, #0
 8007c34:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8007c36:	1d3b      	adds	r3, r7, #4
 8007c38:	4619      	mov	r1, r3
 8007c3a:	4824      	ldr	r0, [pc, #144]	; (8007ccc <MX_GPIO_Init+0x390>)
 8007c3c:	f008 fb87 	bl	801034e <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007c40:	f7ff fd3e 	bl	80076c0 <__NVIC_GetPriorityGrouping>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2200      	movs	r2, #0
 8007c48:	2100      	movs	r1, #0
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7ff fd8e 	bl	800776c <NVIC_EncodePriority>
 8007c50:	4603      	mov	r3, r0
 8007c52:	4619      	mov	r1, r3
 8007c54:	2006      	movs	r0, #6
 8007c56:	f7ff fd5f 	bl	8007718 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8007c5a:	2006      	movs	r0, #6
 8007c5c:	f7ff fd3e 	bl	80076dc <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007c60:	f7ff fd2e 	bl	80076c0 <__NVIC_GetPriorityGrouping>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2200      	movs	r2, #0
 8007c68:	2100      	movs	r1, #0
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	f7ff fd7e 	bl	800776c <NVIC_EncodePriority>
 8007c70:	4603      	mov	r3, r0
 8007c72:	4619      	mov	r1, r3
 8007c74:	2007      	movs	r0, #7
 8007c76:	f7ff fd4f 	bl	8007718 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8007c7a:	2007      	movs	r0, #7
 8007c7c:	f7ff fd2e 	bl	80076dc <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007c80:	f7ff fd1e 	bl	80076c0 <__NVIC_GetPriorityGrouping>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2200      	movs	r2, #0
 8007c88:	2100      	movs	r1, #0
 8007c8a:	4618      	mov	r0, r3
 8007c8c:	f7ff fd6e 	bl	800776c <NVIC_EncodePriority>
 8007c90:	4603      	mov	r3, r0
 8007c92:	4619      	mov	r1, r3
 8007c94:	2008      	movs	r0, #8
 8007c96:	f7ff fd3f 	bl	8007718 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8007c9a:	2008      	movs	r0, #8
 8007c9c:	f7ff fd1e 	bl	80076dc <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8007ca0:	f7ff fd0e 	bl	80076c0 <__NVIC_GetPriorityGrouping>
 8007ca4:	4603      	mov	r3, r0
 8007ca6:	2200      	movs	r2, #0
 8007ca8:	2100      	movs	r1, #0
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7ff fd5e 	bl	800776c <NVIC_EncodePriority>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	4619      	mov	r1, r3
 8007cb4:	2028      	movs	r0, #40	; 0x28
 8007cb6:	f7ff fd2f 	bl	8007718 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007cba:	2028      	movs	r0, #40	; 0x28
 8007cbc:	f7ff fd0e 	bl	80076dc <__NVIC_EnableIRQ>

}
 8007cc0:	bf00      	nop
 8007cc2:	3728      	adds	r7, #40	; 0x28
 8007cc4:	46bd      	mov	sp, r7
 8007cc6:	e009      	b.n	8007cdc <MX_GPIO_Init+0x3a0>
 8007cc8:	48000800 	.word	0x48000800
 8007ccc:	48000400 	.word	0x48000400
 8007cd0:	0f000003 	.word	0x0f000003
 8007cd4:	f0000003 	.word	0xf0000003
 8007cd8:	48001400 	.word	0x48001400
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop

08007ce0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b083      	sub	sp, #12
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007ce8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007cec:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d013      	beq.n	8007d20 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8007cf8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007cfc:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8007d00:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d00b      	beq.n	8007d20 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8007d08:	e000      	b.n	8007d0c <ITM_SendChar+0x2c>
    {
      __NOP();
 8007d0a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8007d0c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d0f9      	beq.n	8007d0a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8007d16:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007d1a:	687a      	ldr	r2, [r7, #4]
 8007d1c:	b2d2      	uxtb	r2, r2
 8007d1e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8007d20:	687b      	ldr	r3, [r7, #4]
}
 8007d22:	4618      	mov	r0, r3
 8007d24:	370c      	adds	r7, #12
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr

08007d2e <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 8007d2e:	b580      	push	{r7, lr}
 8007d30:	b086      	sub	sp, #24
 8007d32:	af00      	add	r7, sp, #0
 8007d34:	60f8      	str	r0, [r7, #12]
 8007d36:	60b9      	str	r1, [r7, #8]
 8007d38:	607a      	str	r2, [r7, #4]
  int i=0;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8007d3e:	2300      	movs	r3, #0
 8007d40:	617b      	str	r3, [r7, #20]
 8007d42:	e009      	b.n	8007d58 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	1c5a      	adds	r2, r3, #1
 8007d48:	60ba      	str	r2, [r7, #8]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	f7ff ffc7 	bl	8007ce0 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8007d52:	697b      	ldr	r3, [r7, #20]
 8007d54:	3301      	adds	r3, #1
 8007d56:	617b      	str	r3, [r7, #20]
 8007d58:	697a      	ldr	r2, [r7, #20]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	429a      	cmp	r2, r3
 8007d5e:	dbf1      	blt.n	8007d44 <_write+0x16>
  return len;
 8007d60:	687b      	ldr	r3, [r7, #4]
}
 8007d62:	4618      	mov	r0, r3
 8007d64:	3718      	adds	r7, #24
 8007d66:	46bd      	mov	sp, r7
 8007d68:	bd80      	pop	{r7, pc}
	...

08007d6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007d70:	f000 ffeb 	bl	8008d4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007d74:	f000 f84e 	bl	8007e14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007d78:	f7ff fde0 	bl	800793c <MX_GPIO_Init>
  MX_DMA_Init();
 8007d7c:	f7ff fc5e 	bl	800763c <MX_DMA_Init>
  MX_DAC1_Init();
 8007d80:	f7ff fb0e 	bl	80073a0 <MX_DAC1_Init>
  MX_ADC1_Init();
 8007d84:	f7ff f9c6 	bl	8007114 <MX_ADC1_Init>
  MX_COMP1_Init();
 8007d88:	f7ff faa8 	bl	80072dc <MX_COMP1_Init>
  MX_SPI3_Init();
 8007d8c:	f000 f8ee 	bl	8007f6c <MX_SPI3_Init>
  MX_RNG_Init();
 8007d90:	f000 f8de 	bl	8007f50 <MX_RNG_Init>
  MX_TIM1_Init();
 8007d94:	f000 fb5c 	bl	8008450 <MX_TIM1_Init>
  MX_TIM8_Init();
 8007d98:	f000 fd2c 	bl	80087f4 <MX_TIM8_Init>
  MX_TIM16_Init();
 8007d9c:	f000 fde4 	bl	8008968 <MX_TIM16_Init>
  MX_TIM15_Init();
 8007da0:	f000 fd90 	bl	80088c4 <MX_TIM15_Init>
  MX_TIM5_Init();
 8007da4:	f000 fcd8 	bl	8008758 <MX_TIM5_Init>
  MX_TIM3_Init();
 8007da8:	f000 fc3a 	bl	8008620 <MX_TIM3_Init>
  MX_DAC2_Init();
 8007dac:	f7ff fb42 	bl	8007434 <MX_DAC2_Init>
  MX_TIM17_Init();
 8007db0:	f000 fe02 	bl	80089b8 <MX_TIM17_Init>
  MX_TIM2_Init();
 8007db4:	f000 fbbc 	bl	8008530 <MX_TIM2_Init>
  MX_TIM4_Init();
 8007db8:	f000 fc80 	bl	80086bc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  SM_Init();
 8007dbc:	f7fe fb86 	bl	80064cc <SM_Init>

HAL_TIM_Base_Start_IT(&htim17);
 8007dc0:	4810      	ldr	r0, [pc, #64]	; (8007e04 <main+0x98>)
 8007dc2:	f005 fc91 	bl	800d6e8 <HAL_TIM_Base_Start_IT>


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007dcc:	480e      	ldr	r0, [pc, #56]	; (8007e08 <main+0x9c>)
 8007dce:	f004 fb3b 	bl	800c448 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8007dd2:	2200      	movs	r2, #0
 8007dd4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007dd8:	480b      	ldr	r0, [pc, #44]	; (8007e08 <main+0x9c>)
 8007dda:	f004 fb35 	bl	800c448 <HAL_GPIO_WritePin>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8007dde:	480b      	ldr	r0, [pc, #44]	; (8007e0c <main+0xa0>)
 8007de0:	f005 fc2c 	bl	800d63c <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8007de4:	4b0a      	ldr	r3, [pc, #40]	; (8007e10 <main+0xa4>)
 8007de6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007dea:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8007dec:	4b08      	ldr	r3, [pc, #32]	; (8007e10 <main+0xa4>)
 8007dee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007df2:	62da      	str	r2, [r3, #44]	; 0x2c


  // TFT lib enable
  DM_Init();
 8007df4:	f7f8 ffbc 	bl	8000d70 <DM_Init>
  DM_PostInit();
 8007df8:	f7f8 ffc8 	bl	8000d8c <DM_PostInit>

  // Intialise interrupt manager
  IM_Init();
 8007dfc:	f7fd f9cc 	bl	8005198 <IM_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8007e00:	e7fe      	b.n	8007e00 <main+0x94>
 8007e02:	bf00      	nop
 8007e04:	20002c3c 	.word	0x20002c3c
 8007e08:	48000800 	.word	0x48000800
 8007e0c:	20002cd4 	.word	0x20002cd4
 8007e10:	40001000 	.word	0x40001000

08007e14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b0a8      	sub	sp, #160	; 0xa0
 8007e18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007e1a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007e1e:	2238      	movs	r2, #56	; 0x38
 8007e20:	2100      	movs	r1, #0
 8007e22:	4618      	mov	r0, r3
 8007e24:	f009 fb82 	bl	801152c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007e28:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007e2c:	2200      	movs	r2, #0
 8007e2e:	601a      	str	r2, [r3, #0]
 8007e30:	605a      	str	r2, [r3, #4]
 8007e32:	609a      	str	r2, [r3, #8]
 8007e34:	60da      	str	r2, [r3, #12]
 8007e36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007e38:	463b      	mov	r3, r7
 8007e3a:	2254      	movs	r2, #84	; 0x54
 8007e3c:	2100      	movs	r1, #0
 8007e3e:	4618      	mov	r0, r3
 8007e40:	f009 fb74 	bl	801152c <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8007e44:	2000      	movs	r0, #0
 8007e46:	f004 fb17 	bl	800c478 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8007e4a:	2322      	movs	r3, #34	; 0x22
 8007e4c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007e4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007e52:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8007e54:	2340      	movs	r3, #64	; 0x40
 8007e56:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007e58:	2301      	movs	r3, #1
 8007e5a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007e5e:	2302      	movs	r3, #2
 8007e60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8007e64:	2302      	movs	r3, #2
 8007e66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8007e6a:	2302      	movs	r3, #2
 8007e6c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8007e70:	232a      	movs	r3, #42	; 0x2a
 8007e72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007e76:	2302      	movs	r3, #2
 8007e78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8007e7c:	2304      	movs	r3, #4
 8007e7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8007e82:	2302      	movs	r3, #2
 8007e84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007e88:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f004 fb97 	bl	800c5c0 <HAL_RCC_OscConfig>
 8007e92:	4603      	mov	r3, r0
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d001      	beq.n	8007e9c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8007e98:	f000 f82a 	bl	8007ef0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007e9c:	230f      	movs	r3, #15
 8007e9e:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007ea0:	2303      	movs	r3, #3
 8007ea2:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007eac:	2300      	movs	r3, #0
 8007eae:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8007eb0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007eb4:	2108      	movs	r1, #8
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	f004 fe9a 	bl	800cbf0 <HAL_RCC_ClockConfig>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d001      	beq.n	8007ec6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8007ec2:	f000 f815 	bl	8007ef0 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8007ec6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8007eca:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8007ecc:	2300      	movs	r3, #0
 8007ece:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8007ed0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8007ed4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8007ed6:	463b      	mov	r3, r7
 8007ed8:	4618      	mov	r0, r3
 8007eda:	f005 f879 	bl	800cfd0 <HAL_RCCEx_PeriphCLKConfig>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d001      	beq.n	8007ee8 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8007ee4:	f000 f804 	bl	8007ef0 <Error_Handler>
  }
}
 8007ee8:	bf00      	nop
 8007eea:	37a0      	adds	r7, #160	; 0xa0
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007ef4:	bf00      	nop
 8007ef6:	46bd      	mov	sp, r7
 8007ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efc:	4770      	bx	lr

08007efe <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8007efe:	b480      	push	{r7}
 8007f00:	b083      	sub	sp, #12
 8007f02:	af00      	add	r7, sp, #0
 8007f04:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f043 0204 	orr.w	r2, r3, #4
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	601a      	str	r2, [r3, #0]
}
 8007f12:	bf00      	nop
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr
	...

08007f20 <LL_AHB2_GRP1_EnableClock>:
{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007f28:	4b08      	ldr	r3, [pc, #32]	; (8007f4c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007f2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f2c:	4907      	ldr	r1, [pc, #28]	; (8007f4c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	4313      	orrs	r3, r2
 8007f32:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8007f34:	4b05      	ldr	r3, [pc, #20]	; (8007f4c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007f36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007f3e:	68fb      	ldr	r3, [r7, #12]
}
 8007f40:	bf00      	nop
 8007f42:	3714      	adds	r7, #20
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr
 8007f4c:	40021000 	.word	0x40021000

08007f50 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8007f54:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007f58:	f7ff ffe2 	bl	8007f20 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8007f5c:	4802      	ldr	r0, [pc, #8]	; (8007f68 <MX_RNG_Init+0x18>)
 8007f5e:	f7ff ffce 	bl	8007efe <LL_RNG_Enable>

}
 8007f62:	bf00      	nop
 8007f64:	bd80      	pop	{r7, pc}
 8007f66:	bf00      	nop
 8007f68:	50060800 	.word	0x50060800

08007f6c <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8007f70:	4b1b      	ldr	r3, [pc, #108]	; (8007fe0 <MX_SPI3_Init+0x74>)
 8007f72:	4a1c      	ldr	r2, [pc, #112]	; (8007fe4 <MX_SPI3_Init+0x78>)
 8007f74:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8007f76:	4b1a      	ldr	r3, [pc, #104]	; (8007fe0 <MX_SPI3_Init+0x74>)
 8007f78:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007f7c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8007f7e:	4b18      	ldr	r3, [pc, #96]	; (8007fe0 <MX_SPI3_Init+0x74>)
 8007f80:	2200      	movs	r2, #0
 8007f82:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8007f84:	4b16      	ldr	r3, [pc, #88]	; (8007fe0 <MX_SPI3_Init+0x74>)
 8007f86:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8007f8a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8007f8c:	4b14      	ldr	r3, [pc, #80]	; (8007fe0 <MX_SPI3_Init+0x74>)
 8007f8e:	2200      	movs	r2, #0
 8007f90:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007f92:	4b13      	ldr	r3, [pc, #76]	; (8007fe0 <MX_SPI3_Init+0x74>)
 8007f94:	2200      	movs	r2, #0
 8007f96:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8007f98:	4b11      	ldr	r3, [pc, #68]	; (8007fe0 <MX_SPI3_Init+0x74>)
 8007f9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f9e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007fa0:	4b0f      	ldr	r3, [pc, #60]	; (8007fe0 <MX_SPI3_Init+0x74>)
 8007fa2:	2210      	movs	r2, #16
 8007fa4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007fa6:	4b0e      	ldr	r3, [pc, #56]	; (8007fe0 <MX_SPI3_Init+0x74>)
 8007fa8:	2200      	movs	r2, #0
 8007faa:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8007fac:	4b0c      	ldr	r3, [pc, #48]	; (8007fe0 <MX_SPI3_Init+0x74>)
 8007fae:	2200      	movs	r2, #0
 8007fb0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fb2:	4b0b      	ldr	r3, [pc, #44]	; (8007fe0 <MX_SPI3_Init+0x74>)
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8007fb8:	4b09      	ldr	r3, [pc, #36]	; (8007fe0 <MX_SPI3_Init+0x74>)
 8007fba:	2207      	movs	r2, #7
 8007fbc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8007fbe:	4b08      	ldr	r3, [pc, #32]	; (8007fe0 <MX_SPI3_Init+0x74>)
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8007fc4:	4b06      	ldr	r3, [pc, #24]	; (8007fe0 <MX_SPI3_Init+0x74>)
 8007fc6:	2208      	movs	r2, #8
 8007fc8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8007fca:	4805      	ldr	r0, [pc, #20]	; (8007fe0 <MX_SPI3_Init+0x74>)
 8007fcc:	f005 fa4c 	bl	800d468 <HAL_SPI_Init>
 8007fd0:	4603      	mov	r3, r0
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d001      	beq.n	8007fda <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8007fd6:	f7ff ff8b 	bl	8007ef0 <Error_Handler>
  }

}
 8007fda:	bf00      	nop
 8007fdc:	bd80      	pop	{r7, pc}
 8007fde:	bf00      	nop
 8007fe0:	20002a94 	.word	0x20002a94
 8007fe4:	40003c00 	.word	0x40003c00

08007fe8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b08a      	sub	sp, #40	; 0x28
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ff0:	f107 0314 	add.w	r3, r7, #20
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	601a      	str	r2, [r3, #0]
 8007ff8:	605a      	str	r2, [r3, #4]
 8007ffa:	609a      	str	r2, [r3, #8]
 8007ffc:	60da      	str	r2, [r3, #12]
 8007ffe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4a17      	ldr	r2, [pc, #92]	; (8008064 <HAL_SPI_MspInit+0x7c>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d128      	bne.n	800805c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800800a:	4b17      	ldr	r3, [pc, #92]	; (8008068 <HAL_SPI_MspInit+0x80>)
 800800c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800800e:	4a16      	ldr	r2, [pc, #88]	; (8008068 <HAL_SPI_MspInit+0x80>)
 8008010:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008014:	6593      	str	r3, [r2, #88]	; 0x58
 8008016:	4b14      	ldr	r3, [pc, #80]	; (8008068 <HAL_SPI_MspInit+0x80>)
 8008018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800801a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800801e:	613b      	str	r3, [r7, #16]
 8008020:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008022:	4b11      	ldr	r3, [pc, #68]	; (8008068 <HAL_SPI_MspInit+0x80>)
 8008024:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008026:	4a10      	ldr	r2, [pc, #64]	; (8008068 <HAL_SPI_MspInit+0x80>)
 8008028:	f043 0304 	orr.w	r3, r3, #4
 800802c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800802e:	4b0e      	ldr	r3, [pc, #56]	; (8008068 <HAL_SPI_MspInit+0x80>)
 8008030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008032:	f003 0304 	and.w	r3, r3, #4
 8008036:	60fb      	str	r3, [r7, #12]
 8008038:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 800803a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800803e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008040:	2302      	movs	r3, #2
 8008042:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008044:	2300      	movs	r3, #0
 8008046:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008048:	2300      	movs	r3, #0
 800804a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800804c:	2306      	movs	r3, #6
 800804e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008050:	f107 0314 	add.w	r3, r7, #20
 8008054:	4619      	mov	r1, r3
 8008056:	4805      	ldr	r0, [pc, #20]	; (800806c <HAL_SPI_MspInit+0x84>)
 8008058:	f003 ff92 	bl	800bf80 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 800805c:	bf00      	nop
 800805e:	3728      	adds	r7, #40	; 0x28
 8008060:	46bd      	mov	sp, r7
 8008062:	bd80      	pop	{r7, pc}
 8008064:	40003c00 	.word	0x40003c00
 8008068:	40021000 	.word	0x40021000
 800806c:	48000800 	.word	0x48000800

08008070 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8008070:	b480      	push	{r7}
 8008072:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8008074:	4b05      	ldr	r3, [pc, #20]	; (800808c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8008076:	689b      	ldr	r3, [r3, #8]
 8008078:	4a04      	ldr	r2, [pc, #16]	; (800808c <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800807a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800807e:	6093      	str	r3, [r2, #8]
}
 8008080:	bf00      	nop
 8008082:	46bd      	mov	sp, r7
 8008084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008088:	4770      	bx	lr
 800808a:	bf00      	nop
 800808c:	40007000 	.word	0x40007000

08008090 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008096:	4b0f      	ldr	r3, [pc, #60]	; (80080d4 <HAL_MspInit+0x44>)
 8008098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800809a:	4a0e      	ldr	r2, [pc, #56]	; (80080d4 <HAL_MspInit+0x44>)
 800809c:	f043 0301 	orr.w	r3, r3, #1
 80080a0:	6613      	str	r3, [r2, #96]	; 0x60
 80080a2:	4b0c      	ldr	r3, [pc, #48]	; (80080d4 <HAL_MspInit+0x44>)
 80080a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080a6:	f003 0301 	and.w	r3, r3, #1
 80080aa:	607b      	str	r3, [r7, #4]
 80080ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80080ae:	4b09      	ldr	r3, [pc, #36]	; (80080d4 <HAL_MspInit+0x44>)
 80080b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080b2:	4a08      	ldr	r2, [pc, #32]	; (80080d4 <HAL_MspInit+0x44>)
 80080b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80080b8:	6593      	str	r3, [r2, #88]	; 0x58
 80080ba:	4b06      	ldr	r3, [pc, #24]	; (80080d4 <HAL_MspInit+0x44>)
 80080bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80080be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080c2:	603b      	str	r3, [r7, #0]
 80080c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80080c6:	f7ff ffd3 	bl	8008070 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80080ca:	bf00      	nop
 80080cc:	3708      	adds	r7, #8
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	40021000 	.word	0x40021000

080080d8 <LL_EXTI_IsActiveFlag_0_31>:
{
 80080d8:	b480      	push	{r7}
 80080da:	b083      	sub	sp, #12
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80080e0:	4b07      	ldr	r3, [pc, #28]	; (8008100 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80080e2:	695a      	ldr	r2, [r3, #20]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	4013      	ands	r3, r2
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	429a      	cmp	r2, r3
 80080ec:	d101      	bne.n	80080f2 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80080ee:	2301      	movs	r3, #1
 80080f0:	e000      	b.n	80080f4 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80080f2:	2300      	movs	r3, #0
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	370c      	adds	r7, #12
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	40010400 	.word	0x40010400

08008104 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800810c:	4a04      	ldr	r2, [pc, #16]	; (8008120 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6153      	str	r3, [r2, #20]
}
 8008112:	bf00      	nop
 8008114:	370c      	adds	r7, #12
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr
 800811e:	bf00      	nop
 8008120:	40010400 	.word	0x40010400

08008124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008124:	b480      	push	{r7}
 8008126:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008128:	bf00      	nop
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
	...

08008134 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008134:	b580      	push	{r7, lr}
 8008136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	DM_SetErrorDebugMsg("HARD FAULT");
 8008138:	4801      	ldr	r0, [pc, #4]	; (8008140 <HardFault_Handler+0xc>)
 800813a:	f7f9 fa5d 	bl	80015f8 <DM_SetErrorDebugMsg>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800813e:	e7fe      	b.n	800813e <HardFault_Handler+0xa>
 8008140:	080164d4 	.word	0x080164d4

08008144 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008144:	b580      	push	{r7, lr}
 8008146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */
	DM_SetErrorDebugMsg("MEMMANAGE FAULT");
 8008148:	4801      	ldr	r0, [pc, #4]	; (8008150 <MemManage_Handler+0xc>)
 800814a:	f7f9 fa55 	bl	80015f8 <DM_SetErrorDebugMsg>
  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800814e:	e7fe      	b.n	800814e <MemManage_Handler+0xa>
 8008150:	080164e0 	.word	0x080164e0

08008154 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
	DM_SetErrorDebugMsg("BUS FAULT");
 8008158:	4801      	ldr	r0, [pc, #4]	; (8008160 <BusFault_Handler+0xc>)
 800815a:	f7f9 fa4d 	bl	80015f8 <DM_SetErrorDebugMsg>
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800815e:	e7fe      	b.n	800815e <BusFault_Handler+0xa>
 8008160:	080164f0 	.word	0x080164f0

08008164 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008164:	b580      	push	{r7, lr}
 8008166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */
	DM_SetErrorDebugMsg("USAGE FAULT");
 8008168:	4801      	ldr	r0, [pc, #4]	; (8008170 <UsageFault_Handler+0xc>)
 800816a:	f7f9 fa45 	bl	80015f8 <DM_SetErrorDebugMsg>
  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800816e:	e7fe      	b.n	800816e <UsageFault_Handler+0xa>
 8008170:	080164fc 	.word	0x080164fc

08008174 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008174:	b480      	push	{r7}
 8008176:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008178:	bf00      	nop
 800817a:	46bd      	mov	sp, r7
 800817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008180:	4770      	bx	lr

08008182 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008182:	b480      	push	{r7}
 8008184:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008186:	bf00      	nop
 8008188:	46bd      	mov	sp, r7
 800818a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800818e:	4770      	bx	lr

08008190 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008190:	b480      	push	{r7}
 8008192:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008194:	bf00      	nop
 8008196:	46bd      	mov	sp, r7
 8008198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819c:	4770      	bx	lr

0800819e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80081a2:	f000 fe25 	bl	8008df0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80081a6:	bf00      	nop
 80081a8:	bd80      	pop	{r7, pc}

080081aa <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80081aa:	b580      	push	{r7, lr}
 80081ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 80081ae:	f7fd f8ab 	bl	8005308 <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80081b2:	2001      	movs	r0, #1
 80081b4:	f7ff ff90 	bl	80080d8 <LL_EXTI_IsActiveFlag_0_31>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d002      	beq.n	80081c4 <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80081be:	2001      	movs	r0, #1
 80081c0:	f7ff ffa0 	bl	8008104 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80081c4:	bf00      	nop
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 80081cc:	f7fd f8c2 	bl	8005354 <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 80081d0:	2002      	movs	r0, #2
 80081d2:	f7ff ff81 	bl	80080d8 <LL_EXTI_IsActiveFlag_0_31>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d002      	beq.n	80081e2 <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 80081dc:	2002      	movs	r0, #2
 80081de:	f7ff ff91 	bl	8008104 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80081e2:	bf00      	nop
 80081e4:	bd80      	pop	{r7, pc}

080081e6 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80081e6:	b580      	push	{r7, lr}
 80081e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 80081ea:	f7fd f8d9 	bl	80053a0 <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 80081ee:	2004      	movs	r0, #4
 80081f0:	f7ff ff72 	bl	80080d8 <LL_EXTI_IsActiveFlag_0_31>
 80081f4:	4603      	mov	r3, r0
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d002      	beq.n	8008200 <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 80081fa:	2004      	movs	r0, #4
 80081fc:	f7ff ff82 	bl	8008104 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8008200:	bf00      	nop
 8008202:	bd80      	pop	{r7, pc}

08008204 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8008204:	b580      	push	{r7, lr}
 8008206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008208:	4802      	ldr	r0, [pc, #8]	; (8008214 <DMA1_Channel1_IRQHandler+0x10>)
 800820a:	f003 fd6a 	bl	800bce2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800820e:	bf00      	nop
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	20002988 	.word	0x20002988

08008218 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 800821c:	4802      	ldr	r0, [pc, #8]	; (8008228 <DMA1_Channel2_IRQHandler+0x10>)
 800821e:	f003 fd60 	bl	800bce2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8008222:	bf00      	nop
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	20002270 	.word	0x20002270

0800822c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 800822c:	b580      	push	{r7, lr}
 800822e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8008230:	4802      	ldr	r0, [pc, #8]	; (800823c <DMA1_Channel3_IRQHandler+0x10>)
 8008232:	f003 fd56 	bl	800bce2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8008236:	bf00      	nop
 8008238:	bd80      	pop	{r7, pc}
 800823a:	bf00      	nop
 800823c:	20002a34 	.word	0x20002a34

08008240 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8008244:	4802      	ldr	r0, [pc, #8]	; (8008250 <DMA1_Channel4_IRQHandler+0x10>)
 8008246:	f003 fd4c 	bl	800bce2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800824a:	bf00      	nop
 800824c:	bd80      	pop	{r7, pc}
 800824e:	bf00      	nop
 8008250:	20002af8 	.word	0x20002af8

08008254 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 8008258:	f7f8 fdb2 	bl	8000dc0 <DM_UpdateDisplay>


	IM_ENC_DIRF_Handler();
 800825c:	f7fd f8c6 	bl	80053ec <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008260:	4803      	ldr	r0, [pc, #12]	; (8008270 <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8008262:	f005 ffdf 	bl	800e224 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8008266:	4803      	ldr	r0, [pc, #12]	; (8008274 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8008268:	f005 ffdc 	bl	800e224 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800826c:	bf00      	nop
 800826e:	bd80      	pop	{r7, pc}
 8008270:	20002cd4 	.word	0x20002cd4
 8008274:	20002bf0 	.word	0x20002bf0

08008278 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	EM_ProcessEvent();
 800827c:	f7fb ff7a 	bl	8004174 <EM_ProcessEvent>
  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008280:	4803      	ldr	r0, [pc, #12]	; (8008290 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8008282:	f005 ffcf 	bl	800e224 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8008286:	4803      	ldr	r0, [pc, #12]	; (8008294 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8008288:	f005 ffcc 	bl	800e224 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800828c:	bf00      	nop
 800828e:	bd80      	pop	{r7, pc}
 8008290:	20002cd4 	.word	0x20002cd4
 8008294:	20002c3c 	.word	0x20002c3c

08008298 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8008298:	b580      	push	{r7, lr}
 800829a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800829c:	4802      	ldr	r0, [pc, #8]	; (80082a8 <TIM3_IRQHandler+0x10>)
 800829e:	f005 ffc1 	bl	800e224 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80082a2:	bf00      	nop
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	200022dc 	.word	0x200022dc

080082ac <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	//IM_RECIP_COUNT_Handler();
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80082b0:	4802      	ldr	r0, [pc, #8]	; (80082bc <TIM4_IRQHandler+0x10>)
 80082b2:	f005 ffb7 	bl	800e224 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80082b6:	bf00      	nop
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	20002ba4 	.word	0x20002ba4

080082c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 80082c4:	f7fc ffd0 	bl	8005268 <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 80082c8:	f7fc fff6 	bl	80052b8 <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 80082cc:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80082d0:	f7ff ff02 	bl	80080d8 <LL_EXTI_IsActiveFlag_0_31>
 80082d4:	4603      	mov	r3, r0
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d003      	beq.n	80082e2 <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 80082da:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80082de:	f7ff ff11 	bl	8008104 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 80082e2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80082e6:	f7ff fef7 	bl	80080d8 <LL_EXTI_IsActiveFlag_0_31>
 80082ea:	4603      	mov	r3, r0
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d003      	beq.n	80082f8 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 80082f0:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80082f4:	f7ff ff06 	bl	8008104 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80082f8:	bf00      	nop
 80082fa:	bd80      	pop	{r7, pc}

080082fc <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 8008300:	f7fc ff5a 	bl	80051b8 <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8008304:	4802      	ldr	r0, [pc, #8]	; (8008310 <TIM5_IRQHandler+0x14>)
 8008306:	f005 ff8d 	bl	800e224 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800830a:	bf00      	nop
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	20002c88 	.word	0x20002c88

08008314 <COMP1_2_3_IRQHandler>:

/**
  * @brief This function handles COMP1, COMP2 and COMP3 interrupts through EXTI lines 21, 22 and 29.
  */
void COMP1_2_3_IRQHandler(void)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN COMP1_2_3_IRQn 0 */

  /* USER CODE END COMP1_2_3_IRQn 0 */
  HAL_COMP_IRQHandler(&hcomp1);
 8008318:	4802      	ldr	r0, [pc, #8]	; (8008324 <COMP1_2_3_IRQHandler+0x10>)
 800831a:	f002 fd1d 	bl	800ad58 <HAL_COMP_IRQHandler>
  /* USER CODE BEGIN COMP1_2_3_IRQn 1 */

  /* USER CODE END COMP1_2_3_IRQn 1 */
}
 800831e:	bf00      	nop
 8008320:	bd80      	pop	{r7, pc}
 8008322:	bf00      	nop
 8008324:	200029e8 	.word	0x200029e8

08008328 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b086      	sub	sp, #24
 800832c:	af00      	add	r7, sp, #0
 800832e:	60f8      	str	r0, [r7, #12]
 8008330:	60b9      	str	r1, [r7, #8]
 8008332:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008334:	2300      	movs	r3, #0
 8008336:	617b      	str	r3, [r7, #20]
 8008338:	e00a      	b.n	8008350 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800833a:	f3af 8000 	nop.w
 800833e:	4601      	mov	r1, r0
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	1c5a      	adds	r2, r3, #1
 8008344:	60ba      	str	r2, [r7, #8]
 8008346:	b2ca      	uxtb	r2, r1
 8008348:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800834a:	697b      	ldr	r3, [r7, #20]
 800834c:	3301      	adds	r3, #1
 800834e:	617b      	str	r3, [r7, #20]
 8008350:	697a      	ldr	r2, [r7, #20]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	429a      	cmp	r2, r3
 8008356:	dbf0      	blt.n	800833a <_read+0x12>
	}

return len;
 8008358:	687b      	ldr	r3, [r7, #4]
}
 800835a:	4618      	mov	r0, r3
 800835c:	3718      	adds	r7, #24
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}

08008362 <_close>:
	}
	return len;
}

int _close(int file)
{
 8008362:	b480      	push	{r7}
 8008364:	b083      	sub	sp, #12
 8008366:	af00      	add	r7, sp, #0
 8008368:	6078      	str	r0, [r7, #4]
	return -1;
 800836a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800836e:	4618      	mov	r0, r3
 8008370:	370c      	adds	r7, #12
 8008372:	46bd      	mov	sp, r7
 8008374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008378:	4770      	bx	lr

0800837a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800837a:	b480      	push	{r7}
 800837c:	b083      	sub	sp, #12
 800837e:	af00      	add	r7, sp, #0
 8008380:	6078      	str	r0, [r7, #4]
 8008382:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800838a:	605a      	str	r2, [r3, #4]
	return 0;
 800838c:	2300      	movs	r3, #0
}
 800838e:	4618      	mov	r0, r3
 8008390:	370c      	adds	r7, #12
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr

0800839a <_isatty>:

int _isatty(int file)
{
 800839a:	b480      	push	{r7}
 800839c:	b083      	sub	sp, #12
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
	return 1;
 80083a2:	2301      	movs	r3, #1
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	370c      	adds	r7, #12
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b085      	sub	sp, #20
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
	return 0;
 80083bc:	2300      	movs	r3, #0
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3714      	adds	r7, #20
 80083c2:	46bd      	mov	sp, r7
 80083c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c8:	4770      	bx	lr
	...

080083cc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b084      	sub	sp, #16
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80083d4:	4b11      	ldr	r3, [pc, #68]	; (800841c <_sbrk+0x50>)
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d102      	bne.n	80083e2 <_sbrk+0x16>
		heap_end = &end;
 80083dc:	4b0f      	ldr	r3, [pc, #60]	; (800841c <_sbrk+0x50>)
 80083de:	4a10      	ldr	r2, [pc, #64]	; (8008420 <_sbrk+0x54>)
 80083e0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80083e2:	4b0e      	ldr	r3, [pc, #56]	; (800841c <_sbrk+0x50>)
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80083e8:	4b0c      	ldr	r3, [pc, #48]	; (800841c <_sbrk+0x50>)
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	4413      	add	r3, r2
 80083f0:	466a      	mov	r2, sp
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d907      	bls.n	8008406 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80083f6:	f009 f86f 	bl	80114d8 <__errno>
 80083fa:	4602      	mov	r2, r0
 80083fc:	230c      	movs	r3, #12
 80083fe:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008400:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008404:	e006      	b.n	8008414 <_sbrk+0x48>
	}

	heap_end += incr;
 8008406:	4b05      	ldr	r3, [pc, #20]	; (800841c <_sbrk+0x50>)
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	4413      	add	r3, r2
 800840e:	4a03      	ldr	r2, [pc, #12]	; (800841c <_sbrk+0x50>)
 8008410:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008412:	68fb      	ldr	r3, [r7, #12]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}
 800841c:	2000225c 	.word	0x2000225c
 8008420:	20002dc0 	.word	0x20002dc0

08008424 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8008424:	b480      	push	{r7}
 8008426:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008428:	4b08      	ldr	r3, [pc, #32]	; (800844c <SystemInit+0x28>)
 800842a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800842e:	4a07      	ldr	r2, [pc, #28]	; (800844c <SystemInit+0x28>)
 8008430:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008434:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008438:	4b04      	ldr	r3, [pc, #16]	; (800844c <SystemInit+0x28>)
 800843a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800843e:	609a      	str	r2, [r3, #8]
#endif
}
 8008440:	bf00      	nop
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
 800844a:	bf00      	nop
 800844c:	e000ed00 	.word	0xe000ed00

08008450 <MX_TIM1_Init>:
TIM_HandleTypeDef htim17;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b09a      	sub	sp, #104	; 0x68
 8008454:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8008456:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800845a:	2224      	movs	r2, #36	; 0x24
 800845c:	2100      	movs	r1, #0
 800845e:	4618      	mov	r0, r3
 8008460:	f009 f864 	bl	801152c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008464:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008468:	2200      	movs	r2, #0
 800846a:	601a      	str	r2, [r3, #0]
 800846c:	605a      	str	r2, [r3, #4]
 800846e:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008470:	1d3b      	adds	r3, r7, #4
 8008472:	2234      	movs	r2, #52	; 0x34
 8008474:	2100      	movs	r1, #0
 8008476:	4618      	mov	r0, r3
 8008478:	f009 f858 	bl	801152c <memset>

  htim1.Instance = TIM1;
 800847c:	4b2a      	ldr	r3, [pc, #168]	; (8008528 <MX_TIM1_Init+0xd8>)
 800847e:	4a2b      	ldr	r2, [pc, #172]	; (800852c <MX_TIM1_Init+0xdc>)
 8008480:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8008482:	4b29      	ldr	r3, [pc, #164]	; (8008528 <MX_TIM1_Init+0xd8>)
 8008484:	2200      	movs	r2, #0
 8008486:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED3;
 8008488:	4b27      	ldr	r3, [pc, #156]	; (8008528 <MX_TIM1_Init+0xd8>)
 800848a:	2260      	movs	r2, #96	; 0x60
 800848c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 800848e:	4b26      	ldr	r3, [pc, #152]	; (8008528 <MX_TIM1_Init+0xd8>)
 8008490:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008494:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008496:	4b24      	ldr	r3, [pc, #144]	; (8008528 <MX_TIM1_Init+0xd8>)
 8008498:	2200      	movs	r2, #0
 800849a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800849c:	4b22      	ldr	r3, [pc, #136]	; (8008528 <MX_TIM1_Init+0xd8>)
 800849e:	2200      	movs	r2, #0
 80084a0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80084a2:	4b21      	ldr	r3, [pc, #132]	; (8008528 <MX_TIM1_Init+0xd8>)
 80084a4:	2280      	movs	r2, #128	; 0x80
 80084a6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI2;
 80084a8:	2302      	movs	r3, #2
 80084aa:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80084ac:	2300      	movs	r3, #0
 80084ae:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80084b0:	2301      	movs	r3, #1
 80084b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80084b4:	2300      	movs	r3, #0
 80084b6:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 80084b8:	2300      	movs	r3, #0
 80084ba:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80084bc:	2300      	movs	r3, #0
 80084be:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80084c0:	2301      	movs	r3, #1
 80084c2:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80084c4:	2300      	movs	r3, #0
 80084c6:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80084c8:	2300      	movs	r3, #0
 80084ca:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80084cc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80084d0:	4619      	mov	r1, r3
 80084d2:	4815      	ldr	r0, [pc, #84]	; (8008528 <MX_TIM1_Init+0xd8>)
 80084d4:	f005 fe00 	bl	800e0d8 <HAL_TIM_Encoder_Init>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80084de:	f7ff fd07 	bl	8007ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80084e2:	2320      	movs	r3, #32
 80084e4:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80084e6:	2300      	movs	r3, #0
 80084e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80084ea:	2300      	movs	r3, #0
 80084ec:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80084ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80084f2:	4619      	mov	r1, r3
 80084f4:	480c      	ldr	r0, [pc, #48]	; (8008528 <MX_TIM1_Init+0xd8>)
 80084f6:	f007 fa79 	bl	800f9ec <HAL_TIMEx_MasterConfigSynchronization>
 80084fa:	4603      	mov	r3, r0
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d001      	beq.n	8008504 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8008500:	f7ff fcf6 	bl	8007ef0 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8008504:	2300      	movs	r3, #0
 8008506:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8008508:	2300      	movs	r3, #0
 800850a:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800850c:	1d3b      	adds	r3, r7, #4
 800850e:	4619      	mov	r1, r3
 8008510:	4805      	ldr	r0, [pc, #20]	; (8008528 <MX_TIM1_Init+0xd8>)
 8008512:	f007 fb01 	bl	800fb18 <HAL_TIMEx_ConfigBreakDeadTime>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d001      	beq.n	8008520 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 800851c:	f7ff fce8 	bl	8007ef0 <Error_Handler>
  }

}
 8008520:	bf00      	nop
 8008522:	3768      	adds	r7, #104	; 0x68
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	20002cd4 	.word	0x20002cd4
 800852c:	40012c00 	.word	0x40012c00

08008530 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b08c      	sub	sp, #48	; 0x30
 8008534:	af00      	add	r7, sp, #0
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8008536:	f107 031c 	add.w	r3, r7, #28
 800853a:	2200      	movs	r2, #0
 800853c:	601a      	str	r2, [r3, #0]
 800853e:	605a      	str	r2, [r3, #4]
 8008540:	609a      	str	r2, [r3, #8]
 8008542:	60da      	str	r2, [r3, #12]
 8008544:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008546:	f107 0310 	add.w	r3, r7, #16
 800854a:	2200      	movs	r2, #0
 800854c:	601a      	str	r2, [r3, #0]
 800854e:	605a      	str	r2, [r3, #4]
 8008550:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008552:	463b      	mov	r3, r7
 8008554:	2200      	movs	r2, #0
 8008556:	601a      	str	r2, [r3, #0]
 8008558:	605a      	str	r2, [r3, #4]
 800855a:	609a      	str	r2, [r3, #8]
 800855c:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 800855e:	4b2f      	ldr	r3, [pc, #188]	; (800861c <MX_TIM2_Init+0xec>)
 8008560:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008564:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1024;
 8008566:	4b2d      	ldr	r3, [pc, #180]	; (800861c <MX_TIM2_Init+0xec>)
 8008568:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800856c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800856e:	4b2b      	ldr	r3, [pc, #172]	; (800861c <MX_TIM2_Init+0xec>)
 8008570:	2200      	movs	r2, #0
 8008572:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8008574:	4b29      	ldr	r3, [pc, #164]	; (800861c <MX_TIM2_Init+0xec>)
 8008576:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800857a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800857c:	4b27      	ldr	r3, [pc, #156]	; (800861c <MX_TIM2_Init+0xec>)
 800857e:	2200      	movs	r2, #0
 8008580:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008582:	4b26      	ldr	r3, [pc, #152]	; (800861c <MX_TIM2_Init+0xec>)
 8008584:	2280      	movs	r2, #128	; 0x80
 8008586:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008588:	4824      	ldr	r0, [pc, #144]	; (800861c <MX_TIM2_Init+0xec>)
 800858a:	f004 ffff 	bl	800d58c <HAL_TIM_Base_Init>
 800858e:	4603      	mov	r3, r0
 8008590:	2b00      	cmp	r3, #0
 8008592:	d001      	beq.n	8008598 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8008594:	f7ff fcac 	bl	8007ef0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8008598:	4820      	ldr	r0, [pc, #128]	; (800861c <MX_TIM2_Init+0xec>)
 800859a:	f005 fae1 	bl	800db60 <HAL_TIM_IC_Init>
 800859e:	4603      	mov	r3, r0
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d001      	beq.n	80085a8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80085a4:	f7ff fca4 	bl	8007ef0 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 80085a8:	2304      	movs	r3, #4
 80085aa:	61fb      	str	r3, [r7, #28]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80085ac:	2350      	movs	r3, #80	; 0x50
 80085ae:	623b      	str	r3, [r7, #32]
  sSlaveConfig.TriggerPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80085b0:	2300      	movs	r3, #0
 80085b2:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.TriggerFilter = 0;
 80085b4:	2300      	movs	r3, #0
 80085b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80085b8:	f107 031c 	add.w	r3, r7, #28
 80085bc:	4619      	mov	r1, r3
 80085be:	4817      	ldr	r0, [pc, #92]	; (800861c <MX_TIM2_Init+0xec>)
 80085c0:	f006 fa44 	bl	800ea4c <HAL_TIM_SlaveConfigSynchro>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80085ca:	f7ff fc91 	bl	8007ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80085ce:	2300      	movs	r3, #0
 80085d0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80085d2:	2300      	movs	r3, #0
 80085d4:	61bb      	str	r3, [r7, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80085d6:	f107 0310 	add.w	r3, r7, #16
 80085da:	4619      	mov	r1, r3
 80085dc:	480f      	ldr	r0, [pc, #60]	; (800861c <MX_TIM2_Init+0xec>)
 80085de:	f007 fa05 	bl	800f9ec <HAL_TIMEx_MasterConfigSynchronization>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d001      	beq.n	80085ec <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80085e8:	f7ff fc82 	bl	8007ef0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80085ec:	2300      	movs	r3, #0
 80085ee:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80085f0:	2301      	movs	r3, #1
 80085f2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80085f4:	2300      	movs	r3, #0
 80085f6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80085f8:	2300      	movs	r3, #0
 80085fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80085fc:	463b      	mov	r3, r7
 80085fe:	2200      	movs	r2, #0
 8008600:	4619      	mov	r1, r3
 8008602:	4806      	ldr	r0, [pc, #24]	; (800861c <MX_TIM2_Init+0xec>)
 8008604:	f005 ff8d 	bl	800e522 <HAL_TIM_IC_ConfigChannel>
 8008608:	4603      	mov	r3, r0
 800860a:	2b00      	cmp	r3, #0
 800860c:	d001      	beq.n	8008612 <MX_TIM2_Init+0xe2>
  {
    Error_Handler();
 800860e:	f7ff fc6f 	bl	8007ef0 <Error_Handler>
  }

}
 8008612:	bf00      	nop
 8008614:	3730      	adds	r7, #48	; 0x30
 8008616:	46bd      	mov	sp, r7
 8008618:	bd80      	pop	{r7, pc}
 800861a:	bf00      	nop
 800861c:	20002d20 	.word	0x20002d20

08008620 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b088      	sub	sp, #32
 8008624:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008626:	f107 0310 	add.w	r3, r7, #16
 800862a:	2200      	movs	r2, #0
 800862c:	601a      	str	r2, [r3, #0]
 800862e:	605a      	str	r2, [r3, #4]
 8008630:	609a      	str	r2, [r3, #8]
 8008632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008634:	1d3b      	adds	r3, r7, #4
 8008636:	2200      	movs	r2, #0
 8008638:	601a      	str	r2, [r3, #0]
 800863a:	605a      	str	r2, [r3, #4]
 800863c:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 800863e:	4b1d      	ldr	r3, [pc, #116]	; (80086b4 <MX_TIM3_Init+0x94>)
 8008640:	4a1d      	ldr	r2, [pc, #116]	; (80086b8 <MX_TIM3_Init+0x98>)
 8008642:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008644:	4b1b      	ldr	r3, [pc, #108]	; (80086b4 <MX_TIM3_Init+0x94>)
 8008646:	2200      	movs	r2, #0
 8008648:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 800864a:	4b1a      	ldr	r3, [pc, #104]	; (80086b4 <MX_TIM3_Init+0x94>)
 800864c:	2210      	movs	r2, #16
 800864e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8008650:	4b18      	ldr	r3, [pc, #96]	; (80086b4 <MX_TIM3_Init+0x94>)
 8008652:	2201      	movs	r2, #1
 8008654:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8008656:	4b17      	ldr	r3, [pc, #92]	; (80086b4 <MX_TIM3_Init+0x94>)
 8008658:	f44f 7200 	mov.w	r2, #512	; 0x200
 800865c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800865e:	4b15      	ldr	r3, [pc, #84]	; (80086b4 <MX_TIM3_Init+0x94>)
 8008660:	2280      	movs	r2, #128	; 0x80
 8008662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008664:	4813      	ldr	r0, [pc, #76]	; (80086b4 <MX_TIM3_Init+0x94>)
 8008666:	f004 ff91 	bl	800d58c <HAL_TIM_Base_Init>
 800866a:	4603      	mov	r3, r0
 800866c:	2b00      	cmp	r3, #0
 800866e:	d001      	beq.n	8008674 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8008670:	f7ff fc3e 	bl	8007ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008678:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800867a:	f107 0310 	add.w	r3, r7, #16
 800867e:	4619      	mov	r1, r3
 8008680:	480c      	ldr	r0, [pc, #48]	; (80086b4 <MX_TIM3_Init+0x94>)
 8008682:	f006 f8f3 	bl	800e86c <HAL_TIM_ConfigClockSource>
 8008686:	4603      	mov	r3, r0
 8008688:	2b00      	cmp	r3, #0
 800868a:	d001      	beq.n	8008690 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 800868c:	f7ff fc30 	bl	8007ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008690:	2320      	movs	r3, #32
 8008692:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008694:	2300      	movs	r3, #0
 8008696:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008698:	1d3b      	adds	r3, r7, #4
 800869a:	4619      	mov	r1, r3
 800869c:	4805      	ldr	r0, [pc, #20]	; (80086b4 <MX_TIM3_Init+0x94>)
 800869e:	f007 f9a5 	bl	800f9ec <HAL_TIMEx_MasterConfigSynchronization>
 80086a2:	4603      	mov	r3, r0
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d001      	beq.n	80086ac <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80086a8:	f7ff fc22 	bl	8007ef0 <Error_Handler>
  }

}
 80086ac:	bf00      	nop
 80086ae:	3720      	adds	r7, #32
 80086b0:	46bd      	mov	sp, r7
 80086b2:	bd80      	pop	{r7, pc}
 80086b4:	200022dc 	.word	0x200022dc
 80086b8:	40000400 	.word	0x40000400

080086bc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80086bc:	b580      	push	{r7, lr}
 80086be:	b088      	sub	sp, #32
 80086c0:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80086c2:	f107 0310 	add.w	r3, r7, #16
 80086c6:	2200      	movs	r2, #0
 80086c8:	601a      	str	r2, [r3, #0]
 80086ca:	605a      	str	r2, [r3, #4]
 80086cc:	609a      	str	r2, [r3, #8]
 80086ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80086d0:	1d3b      	adds	r3, r7, #4
 80086d2:	2200      	movs	r2, #0
 80086d4:	601a      	str	r2, [r3, #0]
 80086d6:	605a      	str	r2, [r3, #4]
 80086d8:	609a      	str	r2, [r3, #8]

  htim4.Instance = TIM4;
 80086da:	4b1d      	ldr	r3, [pc, #116]	; (8008750 <MX_TIM4_Init+0x94>)
 80086dc:	4a1d      	ldr	r2, [pc, #116]	; (8008754 <MX_TIM4_Init+0x98>)
 80086de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80086e0:	4b1b      	ldr	r3, [pc, #108]	; (8008750 <MX_TIM4_Init+0x94>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80086e6:	4b1a      	ldr	r3, [pc, #104]	; (8008750 <MX_TIM4_Init+0x94>)
 80086e8:	2200      	movs	r2, #0
 80086ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1;
 80086ec:	4b18      	ldr	r3, [pc, #96]	; (8008750 <MX_TIM4_Init+0x94>)
 80086ee:	2201      	movs	r2, #1
 80086f0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80086f2:	4b17      	ldr	r3, [pc, #92]	; (8008750 <MX_TIM4_Init+0x94>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80086f8:	4b15      	ldr	r3, [pc, #84]	; (8008750 <MX_TIM4_Init+0x94>)
 80086fa:	2200      	movs	r2, #0
 80086fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80086fe:	4814      	ldr	r0, [pc, #80]	; (8008750 <MX_TIM4_Init+0x94>)
 8008700:	f004 ff44 	bl	800d58c <HAL_TIM_Base_Init>
 8008704:	4603      	mov	r3, r0
 8008706:	2b00      	cmp	r3, #0
 8008708:	d001      	beq.n	800870e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 800870a:	f7ff fbf1 	bl	8007ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800870e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008712:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8008714:	f107 0310 	add.w	r3, r7, #16
 8008718:	4619      	mov	r1, r3
 800871a:	480d      	ldr	r0, [pc, #52]	; (8008750 <MX_TIM4_Init+0x94>)
 800871c:	f006 f8a6 	bl	800e86c <HAL_TIM_ConfigClockSource>
 8008720:	4603      	mov	r3, r0
 8008722:	2b00      	cmp	r3, #0
 8008724:	d001      	beq.n	800872a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8008726:	f7ff fbe3 	bl	8007ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800872a:	2300      	movs	r3, #0
 800872c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800872e:	2300      	movs	r3, #0
 8008730:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8008732:	1d3b      	adds	r3, r7, #4
 8008734:	4619      	mov	r1, r3
 8008736:	4806      	ldr	r0, [pc, #24]	; (8008750 <MX_TIM4_Init+0x94>)
 8008738:	f007 f958 	bl	800f9ec <HAL_TIMEx_MasterConfigSynchronization>
 800873c:	4603      	mov	r3, r0
 800873e:	2b00      	cmp	r3, #0
 8008740:	d001      	beq.n	8008746 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8008742:	f7ff fbd5 	bl	8007ef0 <Error_Handler>
  }

}
 8008746:	bf00      	nop
 8008748:	3720      	adds	r7, #32
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
 800874e:	bf00      	nop
 8008750:	20002ba4 	.word	0x20002ba4
 8008754:	40000800 	.word	0x40000800

08008758 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8008758:	b580      	push	{r7, lr}
 800875a:	b088      	sub	sp, #32
 800875c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800875e:	f107 0310 	add.w	r3, r7, #16
 8008762:	2200      	movs	r2, #0
 8008764:	601a      	str	r2, [r3, #0]
 8008766:	605a      	str	r2, [r3, #4]
 8008768:	609a      	str	r2, [r3, #8]
 800876a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800876c:	1d3b      	adds	r3, r7, #4
 800876e:	2200      	movs	r2, #0
 8008770:	601a      	str	r2, [r3, #0]
 8008772:	605a      	str	r2, [r3, #4]
 8008774:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8008776:	4b1d      	ldr	r3, [pc, #116]	; (80087ec <MX_TIM5_Init+0x94>)
 8008778:	4a1d      	ldr	r2, [pc, #116]	; (80087f0 <MX_TIM5_Init+0x98>)
 800877a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800877c:	4b1b      	ldr	r3, [pc, #108]	; (80087ec <MX_TIM5_Init+0x94>)
 800877e:	2200      	movs	r2, #0
 8008780:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008782:	4b1a      	ldr	r3, [pc, #104]	; (80087ec <MX_TIM5_Init+0x94>)
 8008784:	2200      	movs	r2, #0
 8008786:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 8008788:	4b18      	ldr	r3, [pc, #96]	; (80087ec <MX_TIM5_Init+0x94>)
 800878a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800878e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008790:	4b16      	ldr	r3, [pc, #88]	; (80087ec <MX_TIM5_Init+0x94>)
 8008792:	2200      	movs	r2, #0
 8008794:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008796:	4b15      	ldr	r3, [pc, #84]	; (80087ec <MX_TIM5_Init+0x94>)
 8008798:	2200      	movs	r2, #0
 800879a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800879c:	4813      	ldr	r0, [pc, #76]	; (80087ec <MX_TIM5_Init+0x94>)
 800879e:	f004 fef5 	bl	800d58c <HAL_TIM_Base_Init>
 80087a2:	4603      	mov	r3, r0
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d001      	beq.n	80087ac <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 80087a8:	f7ff fba2 	bl	8007ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80087ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80087b0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80087b2:	f107 0310 	add.w	r3, r7, #16
 80087b6:	4619      	mov	r1, r3
 80087b8:	480c      	ldr	r0, [pc, #48]	; (80087ec <MX_TIM5_Init+0x94>)
 80087ba:	f006 f857 	bl	800e86c <HAL_TIM_ConfigClockSource>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d001      	beq.n	80087c8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80087c4:	f7ff fb94 	bl	8007ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80087c8:	2300      	movs	r3, #0
 80087ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80087cc:	2300      	movs	r3, #0
 80087ce:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80087d0:	1d3b      	adds	r3, r7, #4
 80087d2:	4619      	mov	r1, r3
 80087d4:	4805      	ldr	r0, [pc, #20]	; (80087ec <MX_TIM5_Init+0x94>)
 80087d6:	f007 f909 	bl	800f9ec <HAL_TIMEx_MasterConfigSynchronization>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d001      	beq.n	80087e4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80087e0:	f7ff fb86 	bl	8007ef0 <Error_Handler>
  }

}
 80087e4:	bf00      	nop
 80087e6:	3720      	adds	r7, #32
 80087e8:	46bd      	mov	sp, r7
 80087ea:	bd80      	pop	{r7, pc}
 80087ec:	20002c88 	.word	0x20002c88
 80087f0:	40000c00 	.word	0x40000c00

080087f4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b094      	sub	sp, #80	; 0x50
 80087f8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80087fa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80087fe:	2200      	movs	r2, #0
 8008800:	601a      	str	r2, [r3, #0]
 8008802:	605a      	str	r2, [r3, #4]
 8008804:	609a      	str	r2, [r3, #8]
 8008806:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008808:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800880c:	2200      	movs	r2, #0
 800880e:	601a      	str	r2, [r3, #0]
 8008810:	605a      	str	r2, [r3, #4]
 8008812:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008814:	463b      	mov	r3, r7
 8008816:	2234      	movs	r2, #52	; 0x34
 8008818:	2100      	movs	r1, #0
 800881a:	4618      	mov	r0, r3
 800881c:	f008 fe86 	bl	801152c <memset>

  htim8.Instance = TIM8;
 8008820:	4b26      	ldr	r3, [pc, #152]	; (80088bc <MX_TIM8_Init+0xc8>)
 8008822:	4a27      	ldr	r2, [pc, #156]	; (80088c0 <MX_TIM8_Init+0xcc>)
 8008824:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8008826:	4b25      	ldr	r3, [pc, #148]	; (80088bc <MX_TIM8_Init+0xc8>)
 8008828:	2200      	movs	r2, #0
 800882a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800882c:	4b23      	ldr	r3, [pc, #140]	; (80088bc <MX_TIM8_Init+0xc8>)
 800882e:	2200      	movs	r2, #0
 8008830:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8008832:	4b22      	ldr	r3, [pc, #136]	; (80088bc <MX_TIM8_Init+0xc8>)
 8008834:	2201      	movs	r2, #1
 8008836:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008838:	4b20      	ldr	r3, [pc, #128]	; (80088bc <MX_TIM8_Init+0xc8>)
 800883a:	2200      	movs	r2, #0
 800883c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800883e:	4b1f      	ldr	r3, [pc, #124]	; (80088bc <MX_TIM8_Init+0xc8>)
 8008840:	2200      	movs	r2, #0
 8008842:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8008844:	4b1d      	ldr	r3, [pc, #116]	; (80088bc <MX_TIM8_Init+0xc8>)
 8008846:	2280      	movs	r2, #128	; 0x80
 8008848:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800884a:	481c      	ldr	r0, [pc, #112]	; (80088bc <MX_TIM8_Init+0xc8>)
 800884c:	f004 fe9e 	bl	800d58c <HAL_TIM_Base_Init>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d001      	beq.n	800885a <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8008856:	f7ff fb4b 	bl	8007ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800885a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800885e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008860:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008864:	4619      	mov	r1, r3
 8008866:	4815      	ldr	r0, [pc, #84]	; (80088bc <MX_TIM8_Init+0xc8>)
 8008868:	f006 f800 	bl	800e86c <HAL_TIM_ConfigClockSource>
 800886c:	4603      	mov	r3, r0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d001      	beq.n	8008876 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8008872:	f7ff fb3d 	bl	8007ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008876:	2320      	movs	r3, #32
 8008878:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800887a:	2300      	movs	r3, #0
 800887c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800887e:	2300      	movs	r3, #0
 8008880:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008882:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008886:	4619      	mov	r1, r3
 8008888:	480c      	ldr	r0, [pc, #48]	; (80088bc <MX_TIM8_Init+0xc8>)
 800888a:	f007 f8af 	bl	800f9ec <HAL_TIMEx_MasterConfigSynchronization>
 800888e:	4603      	mov	r3, r0
 8008890:	2b00      	cmp	r3, #0
 8008892:	d001      	beq.n	8008898 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8008894:	f7ff fb2c 	bl	8007ef0 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8008898:	2300      	movs	r3, #0
 800889a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800889c:	2300      	movs	r3, #0
 800889e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80088a0:	463b      	mov	r3, r7
 80088a2:	4619      	mov	r1, r3
 80088a4:	4805      	ldr	r0, [pc, #20]	; (80088bc <MX_TIM8_Init+0xc8>)
 80088a6:	f007 f937 	bl	800fb18 <HAL_TIMEx_ConfigBreakDeadTime>
 80088aa:	4603      	mov	r3, r0
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d001      	beq.n	80088b4 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 80088b0:	f7ff fb1e 	bl	8007ef0 <Error_Handler>
  }

}
 80088b4:	bf00      	nop
 80088b6:	3750      	adds	r7, #80	; 0x50
 80088b8:	46bd      	mov	sp, r7
 80088ba:	bd80      	pop	{r7, pc}
 80088bc:	20002b58 	.word	0x20002b58
 80088c0:	40013400 	.word	0x40013400

080088c4 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80088c4:	b580      	push	{r7, lr}
 80088c6:	b088      	sub	sp, #32
 80088c8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80088ca:	f107 0310 	add.w	r3, r7, #16
 80088ce:	2200      	movs	r2, #0
 80088d0:	601a      	str	r2, [r3, #0]
 80088d2:	605a      	str	r2, [r3, #4]
 80088d4:	609a      	str	r2, [r3, #8]
 80088d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80088d8:	1d3b      	adds	r3, r7, #4
 80088da:	2200      	movs	r2, #0
 80088dc:	601a      	str	r2, [r3, #0]
 80088de:	605a      	str	r2, [r3, #4]
 80088e0:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 80088e2:	4b1f      	ldr	r3, [pc, #124]	; (8008960 <MX_TIM15_Init+0x9c>)
 80088e4:	4a1f      	ldr	r2, [pc, #124]	; (8008964 <MX_TIM15_Init+0xa0>)
 80088e6:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 80088e8:	4b1d      	ldr	r3, [pc, #116]	; (8008960 <MX_TIM15_Init+0x9c>)
 80088ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80088ee:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80088f0:	4b1b      	ldr	r3, [pc, #108]	; (8008960 <MX_TIM15_Init+0x9c>)
 80088f2:	2200      	movs	r2, #0
 80088f4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 80088f6:	4b1a      	ldr	r3, [pc, #104]	; (8008960 <MX_TIM15_Init+0x9c>)
 80088f8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80088fc:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80088fe:	4b18      	ldr	r3, [pc, #96]	; (8008960 <MX_TIM15_Init+0x9c>)
 8008900:	2200      	movs	r2, #0
 8008902:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8008904:	4b16      	ldr	r3, [pc, #88]	; (8008960 <MX_TIM15_Init+0x9c>)
 8008906:	2200      	movs	r2, #0
 8008908:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800890a:	4b15      	ldr	r3, [pc, #84]	; (8008960 <MX_TIM15_Init+0x9c>)
 800890c:	2200      	movs	r2, #0
 800890e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8008910:	4813      	ldr	r0, [pc, #76]	; (8008960 <MX_TIM15_Init+0x9c>)
 8008912:	f004 fe3b 	bl	800d58c <HAL_TIM_Base_Init>
 8008916:	4603      	mov	r3, r0
 8008918:	2b00      	cmp	r3, #0
 800891a:	d001      	beq.n	8008920 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 800891c:	f7ff fae8 	bl	8007ef0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008920:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008924:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8008926:	f107 0310 	add.w	r3, r7, #16
 800892a:	4619      	mov	r1, r3
 800892c:	480c      	ldr	r0, [pc, #48]	; (8008960 <MX_TIM15_Init+0x9c>)
 800892e:	f005 ff9d 	bl	800e86c <HAL_TIM_ConfigClockSource>
 8008932:	4603      	mov	r3, r0
 8008934:	2b00      	cmp	r3, #0
 8008936:	d001      	beq.n	800893c <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8008938:	f7ff fada 	bl	8007ef0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800893c:	2300      	movs	r3, #0
 800893e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008940:	2300      	movs	r3, #0
 8008942:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8008944:	1d3b      	adds	r3, r7, #4
 8008946:	4619      	mov	r1, r3
 8008948:	4805      	ldr	r0, [pc, #20]	; (8008960 <MX_TIM15_Init+0x9c>)
 800894a:	f007 f84f 	bl	800f9ec <HAL_TIMEx_MasterConfigSynchronization>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8008954:	f7ff facc 	bl	8007ef0 <Error_Handler>
  }

}
 8008958:	bf00      	nop
 800895a:	3720      	adds	r7, #32
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	20002bf0 	.word	0x20002bf0
 8008964:	40014000 	.word	0x40014000

08008968 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8008968:	b580      	push	{r7, lr}
 800896a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 800896c:	4b10      	ldr	r3, [pc, #64]	; (80089b0 <MX_TIM16_Init+0x48>)
 800896e:	4a11      	ldr	r2, [pc, #68]	; (80089b4 <MX_TIM16_Init+0x4c>)
 8008970:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 8008972:	4b0f      	ldr	r3, [pc, #60]	; (80089b0 <MX_TIM16_Init+0x48>)
 8008974:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008978:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800897a:	4b0d      	ldr	r3, [pc, #52]	; (80089b0 <MX_TIM16_Init+0x48>)
 800897c:	2200      	movs	r2, #0
 800897e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8008980:	4b0b      	ldr	r3, [pc, #44]	; (80089b0 <MX_TIM16_Init+0x48>)
 8008982:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008986:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008988:	4b09      	ldr	r3, [pc, #36]	; (80089b0 <MX_TIM16_Init+0x48>)
 800898a:	2200      	movs	r2, #0
 800898c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800898e:	4b08      	ldr	r3, [pc, #32]	; (80089b0 <MX_TIM16_Init+0x48>)
 8008990:	2200      	movs	r2, #0
 8008992:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008994:	4b06      	ldr	r3, [pc, #24]	; (80089b0 <MX_TIM16_Init+0x48>)
 8008996:	2200      	movs	r2, #0
 8008998:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800899a:	4805      	ldr	r0, [pc, #20]	; (80089b0 <MX_TIM16_Init+0x48>)
 800899c:	f004 fdf6 	bl	800d58c <HAL_TIM_Base_Init>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d001      	beq.n	80089aa <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 80089a6:	f7ff faa3 	bl	8007ef0 <Error_Handler>
  }

}
 80089aa:	bf00      	nop
 80089ac:	bd80      	pop	{r7, pc}
 80089ae:	bf00      	nop
 80089b0:	20002d6c 	.word	0x20002d6c
 80089b4:	40014400 	.word	0x40014400

080089b8 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 80089bc:	4b10      	ldr	r3, [pc, #64]	; (8008a00 <MX_TIM17_Init+0x48>)
 80089be:	4a11      	ldr	r2, [pc, #68]	; (8008a04 <MX_TIM17_Init+0x4c>)
 80089c0:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1024;
 80089c2:	4b0f      	ldr	r3, [pc, #60]	; (8008a00 <MX_TIM17_Init+0x48>)
 80089c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80089c8:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80089ca:	4b0d      	ldr	r3, [pc, #52]	; (8008a00 <MX_TIM17_Init+0x48>)
 80089cc:	2200      	movs	r2, #0
 80089ce:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 1024;
 80089d0:	4b0b      	ldr	r3, [pc, #44]	; (8008a00 <MX_TIM17_Init+0x48>)
 80089d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80089d6:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80089d8:	4b09      	ldr	r3, [pc, #36]	; (8008a00 <MX_TIM17_Init+0x48>)
 80089da:	2200      	movs	r2, #0
 80089dc:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80089de:	4b08      	ldr	r3, [pc, #32]	; (8008a00 <MX_TIM17_Init+0x48>)
 80089e0:	2200      	movs	r2, #0
 80089e2:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80089e4:	4b06      	ldr	r3, [pc, #24]	; (8008a00 <MX_TIM17_Init+0x48>)
 80089e6:	2200      	movs	r2, #0
 80089e8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80089ea:	4805      	ldr	r0, [pc, #20]	; (8008a00 <MX_TIM17_Init+0x48>)
 80089ec:	f004 fdce 	bl	800d58c <HAL_TIM_Base_Init>
 80089f0:	4603      	mov	r3, r0
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d001      	beq.n	80089fa <MX_TIM17_Init+0x42>
  {
    Error_Handler();
 80089f6:	f7ff fa7b 	bl	8007ef0 <Error_Handler>
  }

}
 80089fa:	bf00      	nop
 80089fc:	bd80      	pop	{r7, pc}
 80089fe:	bf00      	nop
 8008a00:	20002c3c 	.word	0x20002c3c
 8008a04:	40014800 	.word	0x40014800

08008a08 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b08a      	sub	sp, #40	; 0x28
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a10:	f107 0314 	add.w	r3, r7, #20
 8008a14:	2200      	movs	r2, #0
 8008a16:	601a      	str	r2, [r3, #0]
 8008a18:	605a      	str	r2, [r3, #4]
 8008a1a:	609a      	str	r2, [r3, #8]
 8008a1c:	60da      	str	r2, [r3, #12]
 8008a1e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a1f      	ldr	r2, [pc, #124]	; (8008aa4 <HAL_TIM_Encoder_MspInit+0x9c>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d137      	bne.n	8008a9a <HAL_TIM_Encoder_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008a2a:	4b1f      	ldr	r3, [pc, #124]	; (8008aa8 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008a2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a2e:	4a1e      	ldr	r2, [pc, #120]	; (8008aa8 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008a30:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008a34:	6613      	str	r3, [r2, #96]	; 0x60
 8008a36:	4b1c      	ldr	r3, [pc, #112]	; (8008aa8 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008a38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008a3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008a3e:	613b      	str	r3, [r7, #16]
 8008a40:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008a42:	4b19      	ldr	r3, [pc, #100]	; (8008aa8 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a46:	4a18      	ldr	r2, [pc, #96]	; (8008aa8 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008a48:	f043 0304 	orr.w	r3, r3, #4
 8008a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008a4e:	4b16      	ldr	r3, [pc, #88]	; (8008aa8 <HAL_TIM_Encoder_MspInit+0xa0>)
 8008a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008a52:	f003 0304 	and.w	r3, r3, #4
 8008a56:	60fb      	str	r3, [r7, #12]
 8008a58:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008a5a:	2303      	movs	r3, #3
 8008a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a5e:	2302      	movs	r3, #2
 8008a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a62:	2300      	movs	r3, #0
 8008a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a66:	2300      	movs	r3, #0
 8008a68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8008a6a:	2302      	movs	r3, #2
 8008a6c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008a6e:	f107 0314 	add.w	r3, r7, #20
 8008a72:	4619      	mov	r1, r3
 8008a74:	480d      	ldr	r0, [pc, #52]	; (8008aac <HAL_TIM_Encoder_MspInit+0xa4>)
 8008a76:	f003 fa83 	bl	800bf80 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	2100      	movs	r1, #0
 8008a7e:	2018      	movs	r0, #24
 8008a80:	f002 faeb 	bl	800b05a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8008a84:	2018      	movs	r0, #24
 8008a86:	f002 fb02 	bl	800b08e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8008a8a:	2200      	movs	r2, #0
 8008a8c:	2101      	movs	r1, #1
 8008a8e:	201a      	movs	r0, #26
 8008a90:	f002 fae3 	bl	800b05a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8008a94:	201a      	movs	r0, #26
 8008a96:	f002 fafa 	bl	800b08e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8008a9a:	bf00      	nop
 8008a9c:	3728      	adds	r7, #40	; 0x28
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	40012c00 	.word	0x40012c00
 8008aa8:	40021000 	.word	0x40021000
 8008aac:	48000800 	.word	0x48000800

08008ab0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b090      	sub	sp, #64	; 0x40
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ab8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008abc:	2200      	movs	r2, #0
 8008abe:	601a      	str	r2, [r3, #0]
 8008ac0:	605a      	str	r2, [r3, #4]
 8008ac2:	609a      	str	r2, [r3, #8]
 8008ac4:	60da      	str	r2, [r3, #12]
 8008ac6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ad0:	d154      	bne.n	8008b7c <HAL_TIM_Base_MspInit+0xcc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008ad2:	4b7f      	ldr	r3, [pc, #508]	; (8008cd0 <HAL_TIM_Base_MspInit+0x220>)
 8008ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ad6:	4a7e      	ldr	r2, [pc, #504]	; (8008cd0 <HAL_TIM_Base_MspInit+0x220>)
 8008ad8:	f043 0301 	orr.w	r3, r3, #1
 8008adc:	6593      	str	r3, [r2, #88]	; 0x58
 8008ade:	4b7c      	ldr	r3, [pc, #496]	; (8008cd0 <HAL_TIM_Base_MspInit+0x220>)
 8008ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ae2:	f003 0301 	and.w	r3, r3, #1
 8008ae6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008aea:	4b79      	ldr	r3, [pc, #484]	; (8008cd0 <HAL_TIM_Base_MspInit+0x220>)
 8008aec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aee:	4a78      	ldr	r2, [pc, #480]	; (8008cd0 <HAL_TIM_Base_MspInit+0x220>)
 8008af0:	f043 0301 	orr.w	r3, r3, #1
 8008af4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008af6:	4b76      	ldr	r3, [pc, #472]	; (8008cd0 <HAL_TIM_Base_MspInit+0x220>)
 8008af8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008afa:	f003 0301 	and.w	r3, r3, #1
 8008afe:	627b      	str	r3, [r7, #36]	; 0x24
 8008b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008b02:	2301      	movs	r3, #1
 8008b04:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b06:	2302      	movs	r3, #2
 8008b08:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b0e:	2300      	movs	r3, #0
 8008b10:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8008b12:	2301      	movs	r3, #1
 8008b14:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b16:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008b1a:	4619      	mov	r1, r3
 8008b1c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8008b20:	f003 fa2e 	bl	800bf80 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel4;
 8008b24:	4b6b      	ldr	r3, [pc, #428]	; (8008cd4 <HAL_TIM_Base_MspInit+0x224>)
 8008b26:	4a6c      	ldr	r2, [pc, #432]	; (8008cd8 <HAL_TIM_Base_MspInit+0x228>)
 8008b28:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_TIM2_CH1;
 8008b2a:	4b6a      	ldr	r3, [pc, #424]	; (8008cd4 <HAL_TIM_Base_MspInit+0x224>)
 8008b2c:	2238      	movs	r2, #56	; 0x38
 8008b2e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008b30:	4b68      	ldr	r3, [pc, #416]	; (8008cd4 <HAL_TIM_Base_MspInit+0x224>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008b36:	4b67      	ldr	r3, [pc, #412]	; (8008cd4 <HAL_TIM_Base_MspInit+0x224>)
 8008b38:	2200      	movs	r2, #0
 8008b3a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8008b3c:	4b65      	ldr	r3, [pc, #404]	; (8008cd4 <HAL_TIM_Base_MspInit+0x224>)
 8008b3e:	2280      	movs	r2, #128	; 0x80
 8008b40:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8008b42:	4b64      	ldr	r3, [pc, #400]	; (8008cd4 <HAL_TIM_Base_MspInit+0x224>)
 8008b44:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008b48:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8008b4a:	4b62      	ldr	r3, [pc, #392]	; (8008cd4 <HAL_TIM_Base_MspInit+0x224>)
 8008b4c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008b50:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8008b52:	4b60      	ldr	r3, [pc, #384]	; (8008cd4 <HAL_TIM_Base_MspInit+0x224>)
 8008b54:	2220      	movs	r2, #32
 8008b56:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8008b58:	4b5e      	ldr	r3, [pc, #376]	; (8008cd4 <HAL_TIM_Base_MspInit+0x224>)
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8008b5e:	485d      	ldr	r0, [pc, #372]	; (8008cd4 <HAL_TIM_Base_MspInit+0x224>)
 8008b60:	f002 fedc 	bl	800b91c <HAL_DMA_Init>
 8008b64:	4603      	mov	r3, r0
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d001      	beq.n	8008b6e <HAL_TIM_Base_MspInit+0xbe>
    {
      Error_Handler();
 8008b6a:	f7ff f9c1 	bl	8007ef0 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	4a58      	ldr	r2, [pc, #352]	; (8008cd4 <HAL_TIM_Base_MspInit+0x224>)
 8008b72:	625a      	str	r2, [r3, #36]	; 0x24
 8008b74:	4a57      	ldr	r2, [pc, #348]	; (8008cd4 <HAL_TIM_Base_MspInit+0x224>)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	6293      	str	r3, [r2, #40]	; 0x28
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8008b7a:	e0a4      	b.n	8008cc6 <HAL_TIM_Base_MspInit+0x216>
  else if(tim_baseHandle->Instance==TIM3)
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a56      	ldr	r2, [pc, #344]	; (8008cdc <HAL_TIM_Base_MspInit+0x22c>)
 8008b82:	4293      	cmp	r3, r2
 8008b84:	d114      	bne.n	8008bb0 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008b86:	4b52      	ldr	r3, [pc, #328]	; (8008cd0 <HAL_TIM_Base_MspInit+0x220>)
 8008b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b8a:	4a51      	ldr	r2, [pc, #324]	; (8008cd0 <HAL_TIM_Base_MspInit+0x220>)
 8008b8c:	f043 0302 	orr.w	r3, r3, #2
 8008b90:	6593      	str	r3, [r2, #88]	; 0x58
 8008b92:	4b4f      	ldr	r3, [pc, #316]	; (8008cd0 <HAL_TIM_Base_MspInit+0x220>)
 8008b94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008b96:	f003 0302 	and.w	r3, r3, #2
 8008b9a:	623b      	str	r3, [r7, #32]
 8008b9c:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8008b9e:	2200      	movs	r2, #0
 8008ba0:	2100      	movs	r1, #0
 8008ba2:	201d      	movs	r0, #29
 8008ba4:	f002 fa59 	bl	800b05a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008ba8:	201d      	movs	r0, #29
 8008baa:	f002 fa70 	bl	800b08e <HAL_NVIC_EnableIRQ>
}
 8008bae:	e08a      	b.n	8008cc6 <HAL_TIM_Base_MspInit+0x216>
  else if(tim_baseHandle->Instance==TIM4)
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	4a4a      	ldr	r2, [pc, #296]	; (8008ce0 <HAL_TIM_Base_MspInit+0x230>)
 8008bb6:	4293      	cmp	r3, r2
 8008bb8:	d114      	bne.n	8008be4 <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8008bba:	4b45      	ldr	r3, [pc, #276]	; (8008cd0 <HAL_TIM_Base_MspInit+0x220>)
 8008bbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bbe:	4a44      	ldr	r2, [pc, #272]	; (8008cd0 <HAL_TIM_Base_MspInit+0x220>)
 8008bc0:	f043 0304 	orr.w	r3, r3, #4
 8008bc4:	6593      	str	r3, [r2, #88]	; 0x58
 8008bc6:	4b42      	ldr	r3, [pc, #264]	; (8008cd0 <HAL_TIM_Base_MspInit+0x220>)
 8008bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bca:	f003 0304 	and.w	r3, r3, #4
 8008bce:	61fb      	str	r3, [r7, #28]
 8008bd0:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM4_IRQn, 2, 0);
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	2102      	movs	r1, #2
 8008bd6:	201e      	movs	r0, #30
 8008bd8:	f002 fa3f 	bl	800b05a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8008bdc:	201e      	movs	r0, #30
 8008bde:	f002 fa56 	bl	800b08e <HAL_NVIC_EnableIRQ>
}
 8008be2:	e070      	b.n	8008cc6 <HAL_TIM_Base_MspInit+0x216>
  else if(tim_baseHandle->Instance==TIM5)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	4a3e      	ldr	r2, [pc, #248]	; (8008ce4 <HAL_TIM_Base_MspInit+0x234>)
 8008bea:	4293      	cmp	r3, r2
 8008bec:	d114      	bne.n	8008c18 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8008bee:	4b38      	ldr	r3, [pc, #224]	; (8008cd0 <HAL_TIM_Base_MspInit+0x220>)
 8008bf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bf2:	4a37      	ldr	r2, [pc, #220]	; (8008cd0 <HAL_TIM_Base_MspInit+0x220>)
 8008bf4:	f043 0308 	orr.w	r3, r3, #8
 8008bf8:	6593      	str	r3, [r2, #88]	; 0x58
 8008bfa:	4b35      	ldr	r3, [pc, #212]	; (8008cd0 <HAL_TIM_Base_MspInit+0x220>)
 8008bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008bfe:	f003 0308 	and.w	r3, r3, #8
 8008c02:	61bb      	str	r3, [r7, #24]
 8008c04:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 8008c06:	2200      	movs	r2, #0
 8008c08:	2102      	movs	r1, #2
 8008c0a:	2032      	movs	r0, #50	; 0x32
 8008c0c:	f002 fa25 	bl	800b05a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8008c10:	2032      	movs	r0, #50	; 0x32
 8008c12:	f002 fa3c 	bl	800b08e <HAL_NVIC_EnableIRQ>
}
 8008c16:	e056      	b.n	8008cc6 <HAL_TIM_Base_MspInit+0x216>
  else if(tim_baseHandle->Instance==TIM8)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	4a32      	ldr	r2, [pc, #200]	; (8008ce8 <HAL_TIM_Base_MspInit+0x238>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d10c      	bne.n	8008c3c <HAL_TIM_Base_MspInit+0x18c>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8008c22:	4b2b      	ldr	r3, [pc, #172]	; (8008cd0 <HAL_TIM_Base_MspInit+0x220>)
 8008c24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c26:	4a2a      	ldr	r2, [pc, #168]	; (8008cd0 <HAL_TIM_Base_MspInit+0x220>)
 8008c28:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008c2c:	6613      	str	r3, [r2, #96]	; 0x60
 8008c2e:	4b28      	ldr	r3, [pc, #160]	; (8008cd0 <HAL_TIM_Base_MspInit+0x220>)
 8008c30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008c36:	617b      	str	r3, [r7, #20]
 8008c38:	697b      	ldr	r3, [r7, #20]
}
 8008c3a:	e044      	b.n	8008cc6 <HAL_TIM_Base_MspInit+0x216>
  else if(tim_baseHandle->Instance==TIM15)
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	4a2a      	ldr	r2, [pc, #168]	; (8008cec <HAL_TIM_Base_MspInit+0x23c>)
 8008c42:	4293      	cmp	r3, r2
 8008c44:	d114      	bne.n	8008c70 <HAL_TIM_Base_MspInit+0x1c0>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8008c46:	4b22      	ldr	r3, [pc, #136]	; (8008cd0 <HAL_TIM_Base_MspInit+0x220>)
 8008c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c4a:	4a21      	ldr	r2, [pc, #132]	; (8008cd0 <HAL_TIM_Base_MspInit+0x220>)
 8008c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c50:	6613      	str	r3, [r2, #96]	; 0x60
 8008c52:	4b1f      	ldr	r3, [pc, #124]	; (8008cd0 <HAL_TIM_Base_MspInit+0x220>)
 8008c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c5a:	613b      	str	r3, [r7, #16]
 8008c5c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8008c5e:	2200      	movs	r2, #0
 8008c60:	2100      	movs	r1, #0
 8008c62:	2018      	movs	r0, #24
 8008c64:	f002 f9f9 	bl	800b05a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8008c68:	2018      	movs	r0, #24
 8008c6a:	f002 fa10 	bl	800b08e <HAL_NVIC_EnableIRQ>
}
 8008c6e:	e02a      	b.n	8008cc6 <HAL_TIM_Base_MspInit+0x216>
  else if(tim_baseHandle->Instance==TIM16)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a1e      	ldr	r2, [pc, #120]	; (8008cf0 <HAL_TIM_Base_MspInit+0x240>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d10c      	bne.n	8008c94 <HAL_TIM_Base_MspInit+0x1e4>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8008c7a:	4b15      	ldr	r3, [pc, #84]	; (8008cd0 <HAL_TIM_Base_MspInit+0x220>)
 8008c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c7e:	4a14      	ldr	r2, [pc, #80]	; (8008cd0 <HAL_TIM_Base_MspInit+0x220>)
 8008c80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c84:	6613      	str	r3, [r2, #96]	; 0x60
 8008c86:	4b12      	ldr	r3, [pc, #72]	; (8008cd0 <HAL_TIM_Base_MspInit+0x220>)
 8008c88:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c8e:	60fb      	str	r3, [r7, #12]
 8008c90:	68fb      	ldr	r3, [r7, #12]
}
 8008c92:	e018      	b.n	8008cc6 <HAL_TIM_Base_MspInit+0x216>
  else if(tim_baseHandle->Instance==TIM17)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	4a16      	ldr	r2, [pc, #88]	; (8008cf4 <HAL_TIM_Base_MspInit+0x244>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d113      	bne.n	8008cc6 <HAL_TIM_Base_MspInit+0x216>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8008c9e:	4b0c      	ldr	r3, [pc, #48]	; (8008cd0 <HAL_TIM_Base_MspInit+0x220>)
 8008ca0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ca2:	4a0b      	ldr	r2, [pc, #44]	; (8008cd0 <HAL_TIM_Base_MspInit+0x220>)
 8008ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008ca8:	6613      	str	r3, [r2, #96]	; 0x60
 8008caa:	4b09      	ldr	r3, [pc, #36]	; (8008cd0 <HAL_TIM_Base_MspInit+0x220>)
 8008cac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008cae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008cb2:	60bb      	str	r3, [r7, #8]
 8008cb4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	2101      	movs	r1, #1
 8008cba:	201a      	movs	r0, #26
 8008cbc:	f002 f9cd 	bl	800b05a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8008cc0:	201a      	movs	r0, #26
 8008cc2:	f002 f9e4 	bl	800b08e <HAL_NVIC_EnableIRQ>
}
 8008cc6:	bf00      	nop
 8008cc8:	3740      	adds	r7, #64	; 0x40
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}
 8008cce:	bf00      	nop
 8008cd0:	40021000 	.word	0x40021000
 8008cd4:	20002af8 	.word	0x20002af8
 8008cd8:	40020044 	.word	0x40020044
 8008cdc:	40000400 	.word	0x40000400
 8008ce0:	40000800 	.word	0x40000800
 8008ce4:	40000c00 	.word	0x40000c00
 8008ce8:	40013400 	.word	0x40013400
 8008cec:	40014000 	.word	0x40014000
 8008cf0:	40014400 	.word	0x40014400
 8008cf4:	40014800 	.word	0x40014800

08008cf8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008cf8:	480d      	ldr	r0, [pc, #52]	; (8008d30 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8008cfa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008cfc:	480d      	ldr	r0, [pc, #52]	; (8008d34 <LoopForever+0x6>)
  ldr r1, =_edata
 8008cfe:	490e      	ldr	r1, [pc, #56]	; (8008d38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008d00:	4a0e      	ldr	r2, [pc, #56]	; (8008d3c <LoopForever+0xe>)
  movs r3, #0
 8008d02:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008d04:	e002      	b.n	8008d0c <LoopCopyDataInit>

08008d06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008d06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008d08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008d0a:	3304      	adds	r3, #4

08008d0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008d0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008d0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008d10:	d3f9      	bcc.n	8008d06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008d12:	4a0b      	ldr	r2, [pc, #44]	; (8008d40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008d14:	4c0b      	ldr	r4, [pc, #44]	; (8008d44 <LoopForever+0x16>)
  movs r3, #0
 8008d16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008d18:	e001      	b.n	8008d1e <LoopFillZerobss>

08008d1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008d1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008d1c:	3204      	adds	r2, #4

08008d1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008d1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008d20:	d3fb      	bcc.n	8008d1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008d22:	f7ff fb7f 	bl	8008424 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008d26:	f008 fbdd 	bl	80114e4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8008d2a:	f7ff f81f 	bl	8007d6c <main>

08008d2e <LoopForever>:

LoopForever:
    b LoopForever
 8008d2e:	e7fe      	b.n	8008d2e <LoopForever>
  ldr   r0, =_estack
 8008d30:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8008d34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008d38:	20001e08 	.word	0x20001e08
  ldr r2, =_sidata
 8008d3c:	08016a70 	.word	0x08016a70
  ldr r2, =_sbss
 8008d40:	20001e08 	.word	0x20001e08
  ldr r4, =_ebss
 8008d44:	20002dc0 	.word	0x20002dc0

08008d48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8008d48:	e7fe      	b.n	8008d48 <ADC1_2_IRQHandler>

08008d4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008d4a:	b580      	push	{r7, lr}
 8008d4c:	b082      	sub	sp, #8
 8008d4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008d50:	2300      	movs	r3, #0
 8008d52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008d54:	2003      	movs	r0, #3
 8008d56:	f002 f975 	bl	800b044 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008d5a:	2000      	movs	r0, #0
 8008d5c:	f000 f80e 	bl	8008d7c <HAL_InitTick>
 8008d60:	4603      	mov	r3, r0
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d002      	beq.n	8008d6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8008d66:	2301      	movs	r3, #1
 8008d68:	71fb      	strb	r3, [r7, #7]
 8008d6a:	e001      	b.n	8008d70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008d6c:	f7ff f990 	bl	8008090 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008d70:	79fb      	ldrb	r3, [r7, #7]

}
 8008d72:	4618      	mov	r0, r3
 8008d74:	3708      	adds	r7, #8
 8008d76:	46bd      	mov	sp, r7
 8008d78:	bd80      	pop	{r7, pc}
	...

08008d7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008d7c:	b580      	push	{r7, lr}
 8008d7e:	b084      	sub	sp, #16
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008d84:	2300      	movs	r3, #0
 8008d86:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8008d88:	4b16      	ldr	r3, [pc, #88]	; (8008de4 <HAL_InitTick+0x68>)
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d022      	beq.n	8008dd6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008d90:	4b15      	ldr	r3, [pc, #84]	; (8008de8 <HAL_InitTick+0x6c>)
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	4b13      	ldr	r3, [pc, #76]	; (8008de4 <HAL_InitTick+0x68>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8008d9c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008da0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008da4:	4618      	mov	r0, r3
 8008da6:	f002 f98e 	bl	800b0c6 <HAL_SYSTICK_Config>
 8008daa:	4603      	mov	r3, r0
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10f      	bne.n	8008dd0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	2b0f      	cmp	r3, #15
 8008db4:	d809      	bhi.n	8008dca <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008db6:	2200      	movs	r2, #0
 8008db8:	6879      	ldr	r1, [r7, #4]
 8008dba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008dbe:	f002 f94c 	bl	800b05a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008dc2:	4a0a      	ldr	r2, [pc, #40]	; (8008dec <HAL_InitTick+0x70>)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6013      	str	r3, [r2, #0]
 8008dc8:	e007      	b.n	8008dda <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8008dca:	2301      	movs	r3, #1
 8008dcc:	73fb      	strb	r3, [r7, #15]
 8008dce:	e004      	b.n	8008dda <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008dd0:	2301      	movs	r3, #1
 8008dd2:	73fb      	strb	r3, [r7, #15]
 8008dd4:	e001      	b.n	8008dda <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8008dda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3710      	adds	r7, #16
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	20000c38 	.word	0x20000c38
 8008de8:	20000c30 	.word	0x20000c30
 8008dec:	20000c34 	.word	0x20000c34

08008df0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008df0:	b480      	push	{r7}
 8008df2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008df4:	4b05      	ldr	r3, [pc, #20]	; (8008e0c <HAL_IncTick+0x1c>)
 8008df6:	681a      	ldr	r2, [r3, #0]
 8008df8:	4b05      	ldr	r3, [pc, #20]	; (8008e10 <HAL_IncTick+0x20>)
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	4413      	add	r3, r2
 8008dfe:	4a03      	ldr	r2, [pc, #12]	; (8008e0c <HAL_IncTick+0x1c>)
 8008e00:	6013      	str	r3, [r2, #0]
}
 8008e02:	bf00      	nop
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr
 8008e0c:	20002db8 	.word	0x20002db8
 8008e10:	20000c38 	.word	0x20000c38

08008e14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008e14:	b480      	push	{r7}
 8008e16:	af00      	add	r7, sp, #0
  return uwTick;
 8008e18:	4b03      	ldr	r3, [pc, #12]	; (8008e28 <HAL_GetTick+0x14>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
}
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e24:	4770      	bx	lr
 8008e26:	bf00      	nop
 8008e28:	20002db8 	.word	0x20002db8

08008e2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b084      	sub	sp, #16
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008e34:	f7ff ffee 	bl	8008e14 <HAL_GetTick>
 8008e38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008e44:	d004      	beq.n	8008e50 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8008e46:	4b09      	ldr	r3, [pc, #36]	; (8008e6c <HAL_Delay+0x40>)
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	68fa      	ldr	r2, [r7, #12]
 8008e4c:	4413      	add	r3, r2
 8008e4e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008e50:	bf00      	nop
 8008e52:	f7ff ffdf 	bl	8008e14 <HAL_GetTick>
 8008e56:	4602      	mov	r2, r0
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	1ad3      	subs	r3, r2, r3
 8008e5c:	68fa      	ldr	r2, [r7, #12]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d8f7      	bhi.n	8008e52 <HAL_Delay+0x26>
  {
  }
}
 8008e62:	bf00      	nop
 8008e64:	3710      	adds	r7, #16
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	20000c38 	.word	0x20000c38

08008e70 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	689b      	ldr	r3, [r3, #8]
 8008e7e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8008e82:	683b      	ldr	r3, [r7, #0]
 8008e84:	431a      	orrs	r2, r3
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	609a      	str	r2, [r3, #8]
}
 8008e8a:	bf00      	nop
 8008e8c:	370c      	adds	r7, #12
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e94:	4770      	bx	lr

08008e96 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008e96:	b480      	push	{r7}
 8008e98:	b083      	sub	sp, #12
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
 8008e9e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	689b      	ldr	r3, [r3, #8]
 8008ea4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	431a      	orrs	r2, r3
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	609a      	str	r2, [r3, #8]
}
 8008eb0:	bf00      	nop
 8008eb2:	370c      	adds	r7, #12
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eba:	4770      	bx	lr

08008ebc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8008ebc:	b480      	push	{r7}
 8008ebe:	b083      	sub	sp, #12
 8008ec0:	af00      	add	r7, sp, #0
 8008ec2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8008ecc:	4618      	mov	r0, r3
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008ed8:	b490      	push	{r4, r7}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	60f8      	str	r0, [r7, #12]
 8008ee0:	60b9      	str	r1, [r7, #8]
 8008ee2:	607a      	str	r2, [r7, #4]
 8008ee4:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	3360      	adds	r3, #96	; 0x60
 8008eea:	461a      	mov	r2, r3
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	009b      	lsls	r3, r3, #2
 8008ef0:	4413      	add	r3, r2
 8008ef2:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008ef4:	6822      	ldr	r2, [r4, #0]
 8008ef6:	4b08      	ldr	r3, [pc, #32]	; (8008f18 <LL_ADC_SetOffset+0x40>)
 8008ef8:	4013      	ands	r3, r2
 8008efa:	687a      	ldr	r2, [r7, #4]
 8008efc:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8008f00:	683a      	ldr	r2, [r7, #0]
 8008f02:	430a      	orrs	r2, r1
 8008f04:	4313      	orrs	r3, r2
 8008f06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008f0a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8008f0c:	bf00      	nop
 8008f0e:	3710      	adds	r7, #16
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bc90      	pop	{r4, r7}
 8008f14:	4770      	bx	lr
 8008f16:	bf00      	nop
 8008f18:	03fff000 	.word	0x03fff000

08008f1c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8008f1c:	b490      	push	{r4, r7}
 8008f1e:	b082      	sub	sp, #8
 8008f20:	af00      	add	r7, sp, #0
 8008f22:	6078      	str	r0, [r7, #4]
 8008f24:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	3360      	adds	r3, #96	; 0x60
 8008f2a:	461a      	mov	r2, r3
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	4413      	add	r3, r2
 8008f32:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8008f34:	6823      	ldr	r3, [r4, #0]
 8008f36:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	3708      	adds	r7, #8
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bc90      	pop	{r4, r7}
 8008f42:	4770      	bx	lr

08008f44 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8008f44:	b490      	push	{r4, r7}
 8008f46:	b084      	sub	sp, #16
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	60b9      	str	r1, [r7, #8]
 8008f4e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	3360      	adds	r3, #96	; 0x60
 8008f54:	461a      	mov	r2, r3
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	009b      	lsls	r3, r3, #2
 8008f5a:	4413      	add	r3, r2
 8008f5c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008f5e:	6823      	ldr	r3, [r4, #0]
 8008f60:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	4313      	orrs	r3, r2
 8008f68:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8008f6a:	bf00      	nop
 8008f6c:	3710      	adds	r7, #16
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bc90      	pop	{r4, r7}
 8008f72:	4770      	bx	lr

08008f74 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8008f74:	b490      	push	{r4, r7}
 8008f76:	b084      	sub	sp, #16
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	60f8      	str	r0, [r7, #12]
 8008f7c:	60b9      	str	r1, [r7, #8]
 8008f7e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	3360      	adds	r3, #96	; 0x60
 8008f84:	461a      	mov	r2, r3
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	009b      	lsls	r3, r3, #2
 8008f8a:	4413      	add	r3, r2
 8008f8c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008f8e:	6823      	ldr	r3, [r4, #0]
 8008f90:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8008f9a:	bf00      	nop
 8008f9c:	3710      	adds	r7, #16
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	bc90      	pop	{r4, r7}
 8008fa2:	4770      	bx	lr

08008fa4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8008fa4:	b490      	push	{r4, r7}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	60f8      	str	r0, [r7, #12]
 8008fac:	60b9      	str	r1, [r7, #8]
 8008fae:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	3360      	adds	r3, #96	; 0x60
 8008fb4:	461a      	mov	r2, r3
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	4413      	add	r3, r2
 8008fbc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8008fca:	bf00      	nop
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bc90      	pop	{r4, r7}
 8008fd2:	4770      	bx	lr

08008fd4 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8008fd4:	b480      	push	{r7}
 8008fd6:	b083      	sub	sp, #12
 8008fd8:	af00      	add	r7, sp, #0
 8008fda:	6078      	str	r0, [r7, #4]
 8008fdc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	695b      	ldr	r3, [r3, #20]
 8008fe2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	431a      	orrs	r2, r3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	615a      	str	r2, [r3, #20]
}
 8008fee:	bf00      	nop
 8008ff0:	370c      	adds	r7, #12
 8008ff2:	46bd      	mov	sp, r7
 8008ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff8:	4770      	bx	lr

08008ffa <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8008ffa:	b480      	push	{r7}
 8008ffc:	b083      	sub	sp, #12
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	68db      	ldr	r3, [r3, #12]
 8009006:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800900a:	2b00      	cmp	r3, #0
 800900c:	d101      	bne.n	8009012 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800900e:	2301      	movs	r3, #1
 8009010:	e000      	b.n	8009014 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8009012:	2300      	movs	r3, #0
}
 8009014:	4618      	mov	r0, r3
 8009016:	370c      	adds	r7, #12
 8009018:	46bd      	mov	sp, r7
 800901a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901e:	4770      	bx	lr

08009020 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8009020:	b490      	push	{r4, r7}
 8009022:	b084      	sub	sp, #16
 8009024:	af00      	add	r7, sp, #0
 8009026:	60f8      	str	r0, [r7, #12]
 8009028:	60b9      	str	r1, [r7, #8]
 800902a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	3330      	adds	r3, #48	; 0x30
 8009030:	461a      	mov	r2, r3
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	0a1b      	lsrs	r3, r3, #8
 8009036:	009b      	lsls	r3, r3, #2
 8009038:	f003 030c 	and.w	r3, r3, #12
 800903c:	4413      	add	r3, r2
 800903e:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8009040:	6822      	ldr	r2, [r4, #0]
 8009042:	68bb      	ldr	r3, [r7, #8]
 8009044:	f003 031f 	and.w	r3, r3, #31
 8009048:	211f      	movs	r1, #31
 800904a:	fa01 f303 	lsl.w	r3, r1, r3
 800904e:	43db      	mvns	r3, r3
 8009050:	401a      	ands	r2, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	0e9b      	lsrs	r3, r3, #26
 8009056:	f003 011f 	and.w	r1, r3, #31
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	f003 031f 	and.w	r3, r3, #31
 8009060:	fa01 f303 	lsl.w	r3, r1, r3
 8009064:	4313      	orrs	r3, r2
 8009066:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8009068:	bf00      	nop
 800906a:	3710      	adds	r7, #16
 800906c:	46bd      	mov	sp, r7
 800906e:	bc90      	pop	{r4, r7}
 8009070:	4770      	bx	lr

08009072 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8009072:	b490      	push	{r4, r7}
 8009074:	b084      	sub	sp, #16
 8009076:	af00      	add	r7, sp, #0
 8009078:	60f8      	str	r0, [r7, #12]
 800907a:	60b9      	str	r1, [r7, #8]
 800907c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	3314      	adds	r3, #20
 8009082:	461a      	mov	r2, r3
 8009084:	68bb      	ldr	r3, [r7, #8]
 8009086:	0e5b      	lsrs	r3, r3, #25
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	f003 0304 	and.w	r3, r3, #4
 800908e:	4413      	add	r3, r2
 8009090:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8009092:	6822      	ldr	r2, [r4, #0]
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	0d1b      	lsrs	r3, r3, #20
 8009098:	f003 031f 	and.w	r3, r3, #31
 800909c:	2107      	movs	r1, #7
 800909e:	fa01 f303 	lsl.w	r3, r1, r3
 80090a2:	43db      	mvns	r3, r3
 80090a4:	401a      	ands	r2, r3
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	0d1b      	lsrs	r3, r3, #20
 80090aa:	f003 031f 	and.w	r3, r3, #31
 80090ae:	6879      	ldr	r1, [r7, #4]
 80090b0:	fa01 f303 	lsl.w	r3, r1, r3
 80090b4:	4313      	orrs	r3, r2
 80090b6:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80090b8:	bf00      	nop
 80090ba:	3710      	adds	r7, #16
 80090bc:	46bd      	mov	sp, r7
 80090be:	bc90      	pop	{r4, r7}
 80090c0:	4770      	bx	lr
	...

080090c4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80090c4:	b480      	push	{r7}
 80090c6:	b085      	sub	sp, #20
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	60f8      	str	r0, [r7, #12]
 80090cc:	60b9      	str	r1, [r7, #8]
 80090ce:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80090d6:	68bb      	ldr	r3, [r7, #8]
 80090d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090dc:	43db      	mvns	r3, r3
 80090de:	401a      	ands	r2, r3
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	f003 0318 	and.w	r3, r3, #24
 80090e6:	4908      	ldr	r1, [pc, #32]	; (8009108 <LL_ADC_SetChannelSingleDiff+0x44>)
 80090e8:	40d9      	lsrs	r1, r3
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	400b      	ands	r3, r1
 80090ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090f2:	431a      	orrs	r2, r3
 80090f4:	68fb      	ldr	r3, [r7, #12]
 80090f6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80090fa:	bf00      	nop
 80090fc:	3714      	adds	r7, #20
 80090fe:	46bd      	mov	sp, r7
 8009100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009104:	4770      	bx	lr
 8009106:	bf00      	nop
 8009108:	0007ffff 	.word	0x0007ffff

0800910c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800910c:	b480      	push	{r7}
 800910e:	b083      	sub	sp, #12
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	689b      	ldr	r3, [r3, #8]
 8009118:	f003 031f 	and.w	r3, r3, #31
}
 800911c:	4618      	mov	r0, r3
 800911e:	370c      	adds	r7, #12
 8009120:	46bd      	mov	sp, r7
 8009122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009126:	4770      	bx	lr

08009128 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8009128:	b480      	push	{r7}
 800912a:	b083      	sub	sp, #12
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8009138:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800913c:	687a      	ldr	r2, [r7, #4]
 800913e:	6093      	str	r3, [r2, #8]
}
 8009140:	bf00      	nop
 8009142:	370c      	adds	r7, #12
 8009144:	46bd      	mov	sp, r7
 8009146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914a:	4770      	bx	lr

0800914c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800914c:	b480      	push	{r7}
 800914e:	b083      	sub	sp, #12
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	689b      	ldr	r3, [r3, #8]
 8009158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800915c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009160:	d101      	bne.n	8009166 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8009162:	2301      	movs	r3, #1
 8009164:	e000      	b.n	8009168 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8009166:	2300      	movs	r3, #0
}
 8009168:	4618      	mov	r0, r3
 800916a:	370c      	adds	r7, #12
 800916c:	46bd      	mov	sp, r7
 800916e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009172:	4770      	bx	lr

08009174 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8009184:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009188:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8009190:	bf00      	nop
 8009192:	370c      	adds	r7, #12
 8009194:	46bd      	mov	sp, r7
 8009196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919a:	4770      	bx	lr

0800919c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 800919c:	b480      	push	{r7}
 800919e:	b083      	sub	sp, #12
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	689b      	ldr	r3, [r3, #8]
 80091a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80091b0:	d101      	bne.n	80091b6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80091b2:	2301      	movs	r3, #1
 80091b4:	e000      	b.n	80091b8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	370c      	adds	r7, #12
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr

080091c4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80091d8:	f043 0201 	orr.w	r2, r3, #1
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80091e0:	bf00      	nop
 80091e2:	370c      	adds	r7, #12
 80091e4:	46bd      	mov	sp, r7
 80091e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ea:	4770      	bx	lr

080091ec <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80091fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009200:	f043 0202 	orr.w	r2, r3, #2
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8009208:	bf00      	nop
 800920a:	370c      	adds	r7, #12
 800920c:	46bd      	mov	sp, r7
 800920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009212:	4770      	bx	lr

08009214 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8009214:	b480      	push	{r7}
 8009216:	b083      	sub	sp, #12
 8009218:	af00      	add	r7, sp, #0
 800921a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	f003 0301 	and.w	r3, r3, #1
 8009224:	2b01      	cmp	r3, #1
 8009226:	d101      	bne.n	800922c <LL_ADC_IsEnabled+0x18>
 8009228:	2301      	movs	r3, #1
 800922a:	e000      	b.n	800922e <LL_ADC_IsEnabled+0x1a>
 800922c:	2300      	movs	r3, #0
}
 800922e:	4618      	mov	r0, r3
 8009230:	370c      	adds	r7, #12
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr

0800923a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800923a:	b480      	push	{r7}
 800923c:	b083      	sub	sp, #12
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	f003 0302 	and.w	r3, r3, #2
 800924a:	2b02      	cmp	r3, #2
 800924c:	d101      	bne.n	8009252 <LL_ADC_IsDisableOngoing+0x18>
 800924e:	2301      	movs	r3, #1
 8009250:	e000      	b.n	8009254 <LL_ADC_IsDisableOngoing+0x1a>
 8009252:	2300      	movs	r3, #0
}
 8009254:	4618      	mov	r0, r3
 8009256:	370c      	adds	r7, #12
 8009258:	46bd      	mov	sp, r7
 800925a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925e:	4770      	bx	lr

08009260 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8009260:	b480      	push	{r7}
 8009262:	b083      	sub	sp, #12
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	689b      	ldr	r3, [r3, #8]
 800926c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009270:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8009274:	f043 0204 	orr.w	r2, r3, #4
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800927c:	bf00      	nop
 800927e:	370c      	adds	r7, #12
 8009280:	46bd      	mov	sp, r7
 8009282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009286:	4770      	bx	lr

08009288 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8009288:	b480      	push	{r7}
 800928a:	b083      	sub	sp, #12
 800928c:	af00      	add	r7, sp, #0
 800928e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	689b      	ldr	r3, [r3, #8]
 8009294:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009298:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800929c:	f043 0210 	orr.w	r2, r3, #16
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80092a4:	bf00      	nop
 80092a6:	370c      	adds	r7, #12
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b083      	sub	sp, #12
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	f003 0304 	and.w	r3, r3, #4
 80092c0:	2b04      	cmp	r3, #4
 80092c2:	d101      	bne.n	80092c8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80092c4:	2301      	movs	r3, #1
 80092c6:	e000      	b.n	80092ca <LL_ADC_REG_IsConversionOngoing+0x1a>
 80092c8:	2300      	movs	r3, #0
}
 80092ca:	4618      	mov	r0, r3
 80092cc:	370c      	adds	r7, #12
 80092ce:	46bd      	mov	sp, r7
 80092d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d4:	4770      	bx	lr

080092d6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80092d6:	b480      	push	{r7}
 80092d8:	b083      	sub	sp, #12
 80092da:	af00      	add	r7, sp, #0
 80092dc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	689b      	ldr	r3, [r3, #8]
 80092e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80092e6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80092ea:	f043 0220 	orr.w	r2, r3, #32
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 80092f2:	bf00      	nop
 80092f4:	370c      	adds	r7, #12
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr

080092fe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80092fe:	b480      	push	{r7}
 8009300:	b083      	sub	sp, #12
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	689b      	ldr	r3, [r3, #8]
 800930a:	f003 0308 	and.w	r3, r3, #8
 800930e:	2b08      	cmp	r3, #8
 8009310:	d101      	bne.n	8009316 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8009312:	2301      	movs	r3, #1
 8009314:	e000      	b.n	8009318 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8009316:	2300      	movs	r3, #0
}
 8009318:	4618      	mov	r0, r3
 800931a:	370c      	adds	r7, #12
 800931c:	46bd      	mov	sp, r7
 800931e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009322:	4770      	bx	lr

08009324 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8009324:	b590      	push	{r4, r7, lr}
 8009326:	b089      	sub	sp, #36	; 0x24
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800932c:	2300      	movs	r3, #0
 800932e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8009330:	2300      	movs	r3, #0
 8009332:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d101      	bne.n	800933e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	e1ad      	b.n	800969a <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	695b      	ldr	r3, [r3, #20]
 8009342:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009348:	2b00      	cmp	r3, #0
 800934a:	d109      	bne.n	8009360 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f7fd ff59 	bl	8007204 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2200      	movs	r2, #0
 8009356:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4618      	mov	r0, r3
 8009366:	f7ff fef1 	bl	800914c <LL_ADC_IsDeepPowerDownEnabled>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d004      	beq.n	800937a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	4618      	mov	r0, r3
 8009376:	f7ff fed7 	bl	8009128 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	4618      	mov	r0, r3
 8009380:	f7ff ff0c 	bl	800919c <LL_ADC_IsInternalRegulatorEnabled>
 8009384:	4603      	mov	r3, r0
 8009386:	2b00      	cmp	r3, #0
 8009388:	d113      	bne.n	80093b2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4618      	mov	r0, r3
 8009390:	f7ff fef0 	bl	8009174 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8009394:	4b9e      	ldr	r3, [pc, #632]	; (8009610 <HAL_ADC_Init+0x2ec>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	099b      	lsrs	r3, r3, #6
 800939a:	4a9e      	ldr	r2, [pc, #632]	; (8009614 <HAL_ADC_Init+0x2f0>)
 800939c:	fba2 2303 	umull	r2, r3, r2, r3
 80093a0:	099b      	lsrs	r3, r3, #6
 80093a2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80093a4:	e002      	b.n	80093ac <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80093a6:	68bb      	ldr	r3, [r7, #8]
 80093a8:	3b01      	subs	r3, #1
 80093aa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80093ac:	68bb      	ldr	r3, [r7, #8]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d1f9      	bne.n	80093a6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	4618      	mov	r0, r3
 80093b8:	f7ff fef0 	bl	800919c <LL_ADC_IsInternalRegulatorEnabled>
 80093bc:	4603      	mov	r3, r0
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d10d      	bne.n	80093de <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093c6:	f043 0210 	orr.w	r2, r3, #16
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80093d2:	f043 0201 	orr.w	r2, r3, #1
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80093da:	2301      	movs	r3, #1
 80093dc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	4618      	mov	r0, r3
 80093e4:	f7ff ff64 	bl	80092b0 <LL_ADC_REG_IsConversionOngoing>
 80093e8:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093ee:	f003 0310 	and.w	r3, r3, #16
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	f040 8148 	bne.w	8009688 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80093f8:	697b      	ldr	r3, [r7, #20]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	f040 8144 	bne.w	8009688 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009404:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8009408:	f043 0202 	orr.w	r2, r3, #2
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4618      	mov	r0, r3
 8009416:	f7ff fefd 	bl	8009214 <LL_ADC_IsEnabled>
 800941a:	4603      	mov	r3, r0
 800941c:	2b00      	cmp	r3, #0
 800941e:	d141      	bne.n	80094a4 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009428:	d004      	beq.n	8009434 <HAL_ADC_Init+0x110>
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	4a7a      	ldr	r2, [pc, #488]	; (8009618 <HAL_ADC_Init+0x2f4>)
 8009430:	4293      	cmp	r3, r2
 8009432:	d10f      	bne.n	8009454 <HAL_ADC_Init+0x130>
 8009434:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009438:	f7ff feec 	bl	8009214 <LL_ADC_IsEnabled>
 800943c:	4604      	mov	r4, r0
 800943e:	4876      	ldr	r0, [pc, #472]	; (8009618 <HAL_ADC_Init+0x2f4>)
 8009440:	f7ff fee8 	bl	8009214 <LL_ADC_IsEnabled>
 8009444:	4603      	mov	r3, r0
 8009446:	4323      	orrs	r3, r4
 8009448:	2b00      	cmp	r3, #0
 800944a:	bf0c      	ite	eq
 800944c:	2301      	moveq	r3, #1
 800944e:	2300      	movne	r3, #0
 8009450:	b2db      	uxtb	r3, r3
 8009452:	e012      	b.n	800947a <HAL_ADC_Init+0x156>
 8009454:	4871      	ldr	r0, [pc, #452]	; (800961c <HAL_ADC_Init+0x2f8>)
 8009456:	f7ff fedd 	bl	8009214 <LL_ADC_IsEnabled>
 800945a:	4604      	mov	r4, r0
 800945c:	4870      	ldr	r0, [pc, #448]	; (8009620 <HAL_ADC_Init+0x2fc>)
 800945e:	f7ff fed9 	bl	8009214 <LL_ADC_IsEnabled>
 8009462:	4603      	mov	r3, r0
 8009464:	431c      	orrs	r4, r3
 8009466:	486f      	ldr	r0, [pc, #444]	; (8009624 <HAL_ADC_Init+0x300>)
 8009468:	f7ff fed4 	bl	8009214 <LL_ADC_IsEnabled>
 800946c:	4603      	mov	r3, r0
 800946e:	4323      	orrs	r3, r4
 8009470:	2b00      	cmp	r3, #0
 8009472:	bf0c      	ite	eq
 8009474:	2301      	moveq	r3, #1
 8009476:	2300      	movne	r3, #0
 8009478:	b2db      	uxtb	r3, r3
 800947a:	2b00      	cmp	r3, #0
 800947c:	d012      	beq.n	80094a4 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009486:	d004      	beq.n	8009492 <HAL_ADC_Init+0x16e>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a62      	ldr	r2, [pc, #392]	; (8009618 <HAL_ADC_Init+0x2f4>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d101      	bne.n	8009496 <HAL_ADC_Init+0x172>
 8009492:	4a65      	ldr	r2, [pc, #404]	; (8009628 <HAL_ADC_Init+0x304>)
 8009494:	e000      	b.n	8009498 <HAL_ADC_Init+0x174>
 8009496:	4a65      	ldr	r2, [pc, #404]	; (800962c <HAL_ADC_Init+0x308>)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	4619      	mov	r1, r3
 800949e:	4610      	mov	r0, r2
 80094a0:	f7ff fce6 	bl	8008e70 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	7f5b      	ldrb	r3, [r3, #29]
 80094a8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80094ae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80094b4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80094ba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80094c2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80094c4:	4313      	orrs	r3, r2
 80094c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d106      	bne.n	80094e0 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094d6:	3b01      	subs	r3, #1
 80094d8:	045b      	lsls	r3, r3, #17
 80094da:	69ba      	ldr	r2, [r7, #24]
 80094dc:	4313      	orrs	r3, r2
 80094de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d009      	beq.n	80094fc <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80094ec:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094f4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80094f6:	69ba      	ldr	r2, [r7, #24]
 80094f8:	4313      	orrs	r3, r2
 80094fa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	68da      	ldr	r2, [r3, #12]
 8009502:	4b4b      	ldr	r3, [pc, #300]	; (8009630 <HAL_ADC_Init+0x30c>)
 8009504:	4013      	ands	r3, r2
 8009506:	687a      	ldr	r2, [r7, #4]
 8009508:	6812      	ldr	r2, [r2, #0]
 800950a:	69b9      	ldr	r1, [r7, #24]
 800950c:	430b      	orrs	r3, r1
 800950e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	691b      	ldr	r3, [r3, #16]
 8009516:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	430a      	orrs	r2, r1
 8009524:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4618      	mov	r0, r3
 800952c:	f7ff fec0 	bl	80092b0 <LL_ADC_REG_IsConversionOngoing>
 8009530:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4618      	mov	r0, r3
 8009538:	f7ff fee1 	bl	80092fe <LL_ADC_INJ_IsConversionOngoing>
 800953c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d17f      	bne.n	8009644 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	2b00      	cmp	r3, #0
 8009548:	d17c      	bne.n	8009644 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800954e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009556:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8009558:	4313      	orrs	r3, r2
 800955a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009566:	f023 0302 	bic.w	r3, r3, #2
 800956a:	687a      	ldr	r2, [r7, #4]
 800956c:	6812      	ldr	r2, [r2, #0]
 800956e:	69b9      	ldr	r1, [r7, #24]
 8009570:	430b      	orrs	r3, r1
 8009572:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	691b      	ldr	r3, [r3, #16]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d017      	beq.n	80095ac <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	691a      	ldr	r2, [r3, #16]
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800958a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009594:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8009598:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800959c:	687a      	ldr	r2, [r7, #4]
 800959e:	6911      	ldr	r1, [r2, #16]
 80095a0:	687a      	ldr	r2, [r7, #4]
 80095a2:	6812      	ldr	r2, [r2, #0]
 80095a4:	430b      	orrs	r3, r1
 80095a6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80095aa:	e013      	b.n	80095d4 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	691a      	ldr	r2, [r3, #16]
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80095ba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80095c4:	687a      	ldr	r2, [r7, #4]
 80095c6:	6812      	ldr	r2, [r2, #0]
 80095c8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80095cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80095d0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80095da:	2b01      	cmp	r3, #1
 80095dc:	d12a      	bne.n	8009634 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80095e8:	f023 0304 	bic.w	r3, r3, #4
 80095ec:	687a      	ldr	r2, [r7, #4]
 80095ee:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80095f0:	687a      	ldr	r2, [r7, #4]
 80095f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80095f4:	4311      	orrs	r1, r2
 80095f6:	687a      	ldr	r2, [r7, #4]
 80095f8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80095fa:	4311      	orrs	r1, r2
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009600:	430a      	orrs	r2, r1
 8009602:	431a      	orrs	r2, r3
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f042 0201 	orr.w	r2, r2, #1
 800960c:	611a      	str	r2, [r3, #16]
 800960e:	e019      	b.n	8009644 <HAL_ADC_Init+0x320>
 8009610:	20000c30 	.word	0x20000c30
 8009614:	053e2d63 	.word	0x053e2d63
 8009618:	50000100 	.word	0x50000100
 800961c:	50000400 	.word	0x50000400
 8009620:	50000500 	.word	0x50000500
 8009624:	50000600 	.word	0x50000600
 8009628:	50000300 	.word	0x50000300
 800962c:	50000700 	.word	0x50000700
 8009630:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	691a      	ldr	r2, [r3, #16]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f022 0201 	bic.w	r2, r2, #1
 8009642:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	695b      	ldr	r3, [r3, #20]
 8009648:	2b01      	cmp	r3, #1
 800964a:	d10c      	bne.n	8009666 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009652:	f023 010f 	bic.w	r1, r3, #15
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	6a1b      	ldr	r3, [r3, #32]
 800965a:	1e5a      	subs	r2, r3, #1
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	430a      	orrs	r2, r1
 8009662:	631a      	str	r2, [r3, #48]	; 0x30
 8009664:	e007      	b.n	8009676 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	f022 020f 	bic.w	r2, r2, #15
 8009674:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800967a:	f023 0303 	bic.w	r3, r3, #3
 800967e:	f043 0201 	orr.w	r2, r3, #1
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	65da      	str	r2, [r3, #92]	; 0x5c
 8009686:	e007      	b.n	8009698 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800968c:	f043 0210 	orr.w	r2, r3, #16
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009694:	2301      	movs	r3, #1
 8009696:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8009698:	7ffb      	ldrb	r3, [r7, #31]
}
 800969a:	4618      	mov	r0, r3
 800969c:	3724      	adds	r7, #36	; 0x24
 800969e:	46bd      	mov	sp, r7
 80096a0:	bd90      	pop	{r4, r7, pc}
 80096a2:	bf00      	nop

080096a4 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b086      	sub	sp, #24
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80096b8:	d004      	beq.n	80096c4 <HAL_ADC_Start_DMA+0x20>
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a58      	ldr	r2, [pc, #352]	; (8009820 <HAL_ADC_Start_DMA+0x17c>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d101      	bne.n	80096c8 <HAL_ADC_Start_DMA+0x24>
 80096c4:	4b57      	ldr	r3, [pc, #348]	; (8009824 <HAL_ADC_Start_DMA+0x180>)
 80096c6:	e000      	b.n	80096ca <HAL_ADC_Start_DMA+0x26>
 80096c8:	4b57      	ldr	r3, [pc, #348]	; (8009828 <HAL_ADC_Start_DMA+0x184>)
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7ff fd1e 	bl	800910c <LL_ADC_GetMultimode>
 80096d0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80096d2:	68fb      	ldr	r3, [r7, #12]
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	4618      	mov	r0, r3
 80096d8:	f7ff fdea 	bl	80092b0 <LL_ADC_REG_IsConversionOngoing>
 80096dc:	4603      	mov	r3, r0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	f040 8096 	bne.w	8009810 <HAL_ADC_Start_DMA+0x16c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80096ea:	2b01      	cmp	r3, #1
 80096ec:	d101      	bne.n	80096f2 <HAL_ADC_Start_DMA+0x4e>
 80096ee:	2302      	movs	r3, #2
 80096f0:	e091      	b.n	8009816 <HAL_ADC_Start_DMA+0x172>
 80096f2:	68fb      	ldr	r3, [r7, #12]
 80096f4:	2201      	movs	r2, #1
 80096f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80096fa:	693b      	ldr	r3, [r7, #16]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d005      	beq.n	800970c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	2b05      	cmp	r3, #5
 8009704:	d002      	beq.n	800970c <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	2b09      	cmp	r3, #9
 800970a:	d17a      	bne.n	8009802 <HAL_ADC_Start_DMA+0x15e>
       )
#endif
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800970c:	68f8      	ldr	r0, [r7, #12]
 800970e:	f000 fd71 	bl	800a1f4 <ADC_Enable>
 8009712:	4603      	mov	r3, r0
 8009714:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8009716:	7dfb      	ldrb	r3, [r7, #23]
 8009718:	2b00      	cmp	r3, #0
 800971a:	d16d      	bne.n	80097f8 <HAL_ADC_Start_DMA+0x154>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009720:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009724:	f023 0301 	bic.w	r3, r3, #1
 8009728:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	681b      	ldr	r3, [r3, #0]
 8009734:	4a3a      	ldr	r2, [pc, #232]	; (8009820 <HAL_ADC_Start_DMA+0x17c>)
 8009736:	4293      	cmp	r3, r2
 8009738:	d009      	beq.n	800974e <HAL_ADC_Start_DMA+0xaa>
 800973a:	68fb      	ldr	r3, [r7, #12]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	4a3b      	ldr	r2, [pc, #236]	; (800982c <HAL_ADC_Start_DMA+0x188>)
 8009740:	4293      	cmp	r3, r2
 8009742:	d002      	beq.n	800974a <HAL_ADC_Start_DMA+0xa6>
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	e003      	b.n	8009752 <HAL_ADC_Start_DMA+0xae>
 800974a:	4b39      	ldr	r3, [pc, #228]	; (8009830 <HAL_ADC_Start_DMA+0x18c>)
 800974c:	e001      	b.n	8009752 <HAL_ADC_Start_DMA+0xae>
 800974e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8009752:	68fa      	ldr	r2, [r7, #12]
 8009754:	6812      	ldr	r2, [r2, #0]
 8009756:	4293      	cmp	r3, r2
 8009758:	d002      	beq.n	8009760 <HAL_ADC_Start_DMA+0xbc>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	2b00      	cmp	r3, #0
 800975e:	d105      	bne.n	800976c <HAL_ADC_Start_DMA+0xc8>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009764:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009770:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009774:	2b00      	cmp	r3, #0
 8009776:	d006      	beq.n	8009786 <HAL_ADC_Start_DMA+0xe2>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800977c:	f023 0206 	bic.w	r2, r3, #6
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	661a      	str	r2, [r3, #96]	; 0x60
 8009784:	e002      	b.n	800978c <HAL_ADC_Start_DMA+0xe8>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2200      	movs	r2, #0
 800978a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009790:	4a28      	ldr	r2, [pc, #160]	; (8009834 <HAL_ADC_Start_DMA+0x190>)
 8009792:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009798:	4a27      	ldr	r2, [pc, #156]	; (8009838 <HAL_ADC_Start_DMA+0x194>)
 800979a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097a0:	4a26      	ldr	r2, [pc, #152]	; (800983c <HAL_ADC_Start_DMA+0x198>)
 80097a2:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	221c      	movs	r2, #28
 80097aa:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	2200      	movs	r2, #0
 80097b0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	685a      	ldr	r2, [r3, #4]
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	f042 0210 	orr.w	r2, r2, #16
 80097c2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68da      	ldr	r2, [r3, #12]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f042 0201 	orr.w	r2, r2, #1
 80097d2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	3340      	adds	r3, #64	; 0x40
 80097de:	4619      	mov	r1, r3
 80097e0:	68ba      	ldr	r2, [r7, #8]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f002 f942 	bl	800ba6c <HAL_DMA_Start_IT>
 80097e8:	4603      	mov	r3, r0
 80097ea:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80097ec:	68fb      	ldr	r3, [r7, #12]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	4618      	mov	r0, r3
 80097f2:	f7ff fd35 	bl	8009260 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80097f6:	e00d      	b.n	8009814 <HAL_ADC_Start_DMA+0x170>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2200      	movs	r2, #0
 80097fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8009800:	e008      	b.n	8009814 <HAL_ADC_Start_DMA+0x170>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	2200      	movs	r2, #0
 800980a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800980e:	e001      	b.n	8009814 <HAL_ADC_Start_DMA+0x170>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8009810:	2302      	movs	r3, #2
 8009812:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8009814:	7dfb      	ldrb	r3, [r7, #23]
}
 8009816:	4618      	mov	r0, r3
 8009818:	3718      	adds	r7, #24
 800981a:	46bd      	mov	sp, r7
 800981c:	bd80      	pop	{r7, pc}
 800981e:	bf00      	nop
 8009820:	50000100 	.word	0x50000100
 8009824:	50000300 	.word	0x50000300
 8009828:	50000700 	.word	0x50000700
 800982c:	50000500 	.word	0x50000500
 8009830:	50000400 	.word	0x50000400
 8009834:	0800a359 	.word	0x0800a359
 8009838:	0800a431 	.word	0x0800a431
 800983c:	0800a44d 	.word	0x0800a44d

08009840 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b084      	sub	sp, #16
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800984e:	2b01      	cmp	r3, #1
 8009850:	d101      	bne.n	8009856 <HAL_ADC_Stop_DMA+0x16>
 8009852:	2302      	movs	r3, #2
 8009854:	e051      	b.n	80098fa <HAL_ADC_Stop_DMA+0xba>
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2201      	movs	r2, #1
 800985a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800985e:	2103      	movs	r1, #3
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f000 fc13 	bl	800a08c <ADC_ConversionStop>
 8009866:	4603      	mov	r3, r0
 8009868:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 800986a:	7bfb      	ldrb	r3, [r7, #15]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d13f      	bne.n	80098f0 <HAL_ADC_Stop_DMA+0xb0>
  {
    /* Disable ADC DMA (ADC DMA configuration of continous requests is kept) */
    CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	68da      	ldr	r2, [r3, #12]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f022 0201 	bic.w	r2, r2, #1
 800987e:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009884:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2b02      	cmp	r3, #2
 800988c:	d10f      	bne.n	80098ae <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009892:	4618      	mov	r0, r3
 8009894:	f002 f965 	bl	800bb62 <HAL_DMA_Abort>
 8009898:	4603      	mov	r3, r0
 800989a:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 800989c:	7bfb      	ldrb	r3, [r7, #15]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d005      	beq.n	80098ae <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098a6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	65da      	str	r2, [r3, #92]	; 0x5c
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	685a      	ldr	r2, [r3, #4]
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	f022 0210 	bic.w	r2, r2, #16
 80098bc:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80098be:	7bfb      	ldrb	r3, [r7, #15]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d105      	bne.n	80098d0 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f000 fcef 	bl	800a2a8 <ADC_Disable>
 80098ca:	4603      	mov	r3, r0
 80098cc:	73fb      	strb	r3, [r7, #15]
 80098ce:	e002      	b.n	80098d6 <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f000 fce9 	bl	800a2a8 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80098d6:	7bfb      	ldrb	r3, [r7, #15]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d109      	bne.n	80098f0 <HAL_ADC_Stop_DMA+0xb0>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098e0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80098e4:	f023 0301 	bic.w	r3, r3, #1
 80098e8:	f043 0201 	orr.w	r2, r3, #1
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	65da      	str	r2, [r3, #92]	; 0x5c
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2200      	movs	r2, #0
 80098f4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80098f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80098fa:	4618      	mov	r0, r3
 80098fc:	3710      	adds	r7, #16
 80098fe:	46bd      	mov	sp, r7
 8009900:	bd80      	pop	{r7, pc}

08009902 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8009902:	b480      	push	{r7}
 8009904:	b083      	sub	sp, #12
 8009906:	af00      	add	r7, sp, #0
 8009908:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800990a:	bf00      	nop
 800990c:	370c      	adds	r7, #12
 800990e:	46bd      	mov	sp, r7
 8009910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009914:	4770      	bx	lr

08009916 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8009916:	b480      	push	{r7}
 8009918:	b083      	sub	sp, #12
 800991a:	af00      	add	r7, sp, #0
 800991c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800991e:	bf00      	nop
 8009920:	370c      	adds	r7, #12
 8009922:	46bd      	mov	sp, r7
 8009924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009928:	4770      	bx	lr
	...

0800992c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800992c:	b580      	push	{r7, lr}
 800992e:	b0a6      	sub	sp, #152	; 0x98
 8009930:	af00      	add	r7, sp, #0
 8009932:	6078      	str	r0, [r7, #4]
 8009934:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8009936:	2300      	movs	r3, #0
 8009938:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 800993c:	2300      	movs	r3, #0
 800993e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8009946:	2b01      	cmp	r3, #1
 8009948:	d101      	bne.n	800994e <HAL_ADC_ConfigChannel+0x22>
 800994a:	2302      	movs	r3, #2
 800994c:	e38e      	b.n	800a06c <HAL_ADC_ConfigChannel+0x740>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2201      	movs	r2, #1
 8009952:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	4618      	mov	r0, r3
 800995c:	f7ff fca8 	bl	80092b0 <LL_ADC_REG_IsConversionOngoing>
 8009960:	4603      	mov	r3, r0
 8009962:	2b00      	cmp	r3, #0
 8009964:	f040 836f 	bne.w	800a046 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6818      	ldr	r0, [r3, #0]
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	6859      	ldr	r1, [r3, #4]
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	461a      	mov	r2, r3
 8009976:	f7ff fb53 	bl	8009020 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	4618      	mov	r0, r3
 8009980:	f7ff fc96 	bl	80092b0 <LL_ADC_REG_IsConversionOngoing>
 8009984:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4618      	mov	r0, r3
 800998e:	f7ff fcb6 	bl	80092fe <LL_ADC_INJ_IsConversionOngoing>
 8009992:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8009996:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800999a:	2b00      	cmp	r3, #0
 800999c:	f040 817b 	bne.w	8009c96 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80099a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f040 8176 	bne.w	8009c96 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80099b2:	d10f      	bne.n	80099d4 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6818      	ldr	r0, [r3, #0]
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2200      	movs	r2, #0
 80099be:	4619      	mov	r1, r3
 80099c0:	f7ff fb57 	bl	8009072 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80099cc:	4618      	mov	r0, r3
 80099ce:	f7ff fb01 	bl	8008fd4 <LL_ADC_SetSamplingTimeCommonConfig>
 80099d2:	e00e      	b.n	80099f2 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	6818      	ldr	r0, [r3, #0]
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	6819      	ldr	r1, [r3, #0]
 80099dc:	683b      	ldr	r3, [r7, #0]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	461a      	mov	r2, r3
 80099e2:	f7ff fb46 	bl	8009072 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	2100      	movs	r1, #0
 80099ec:	4618      	mov	r0, r3
 80099ee:	f7ff faf1 	bl	8008fd4 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	695a      	ldr	r2, [r3, #20]
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	68db      	ldr	r3, [r3, #12]
 80099fc:	08db      	lsrs	r3, r3, #3
 80099fe:	f003 0303 	and.w	r3, r3, #3
 8009a02:	005b      	lsls	r3, r3, #1
 8009a04:	fa02 f303 	lsl.w	r3, r2, r3
 8009a08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8009a0c:	683b      	ldr	r3, [r7, #0]
 8009a0e:	691b      	ldr	r3, [r3, #16]
 8009a10:	2b04      	cmp	r3, #4
 8009a12:	d022      	beq.n	8009a5a <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	6818      	ldr	r0, [r3, #0]
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	6919      	ldr	r1, [r3, #16]
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	681a      	ldr	r2, [r3, #0]
 8009a20:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009a24:	f7ff fa58 	bl	8008ed8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	6818      	ldr	r0, [r3, #0]
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	6919      	ldr	r1, [r3, #16]
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	699b      	ldr	r3, [r3, #24]
 8009a34:	461a      	mov	r2, r3
 8009a36:	f7ff fa9d 	bl	8008f74 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6818      	ldr	r0, [r3, #0]
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	6919      	ldr	r1, [r3, #16]
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	7f1b      	ldrb	r3, [r3, #28]
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d102      	bne.n	8009a50 <HAL_ADC_ConfigChannel+0x124>
 8009a4a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8009a4e:	e000      	b.n	8009a52 <HAL_ADC_ConfigChannel+0x126>
 8009a50:	2300      	movs	r3, #0
 8009a52:	461a      	mov	r2, r3
 8009a54:	f7ff faa6 	bl	8008fa4 <LL_ADC_SetOffsetSaturation>
 8009a58:	e11d      	b.n	8009c96 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	2100      	movs	r1, #0
 8009a60:	4618      	mov	r0, r3
 8009a62:	f7ff fa5b 	bl	8008f1c <LL_ADC_GetOffsetChannel>
 8009a66:	4603      	mov	r3, r0
 8009a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d10a      	bne.n	8009a86 <HAL_ADC_ConfigChannel+0x15a>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	2100      	movs	r1, #0
 8009a76:	4618      	mov	r0, r3
 8009a78:	f7ff fa50 	bl	8008f1c <LL_ADC_GetOffsetChannel>
 8009a7c:	4603      	mov	r3, r0
 8009a7e:	0e9b      	lsrs	r3, r3, #26
 8009a80:	f003 021f 	and.w	r2, r3, #31
 8009a84:	e012      	b.n	8009aac <HAL_ADC_ConfigChannel+0x180>
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	2100      	movs	r1, #0
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f7ff fa45 	bl	8008f1c <LL_ADC_GetOffsetChannel>
 8009a92:	4603      	mov	r3, r0
 8009a94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009a98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009a9c:	fa93 f3a3 	rbit	r3, r3
 8009aa0:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8009aa2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009aa4:	fab3 f383 	clz	r3, r3
 8009aa8:	b2db      	uxtb	r3, r3
 8009aaa:	461a      	mov	r2, r3
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d105      	bne.n	8009ac4 <HAL_ADC_ConfigChannel+0x198>
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	0e9b      	lsrs	r3, r3, #26
 8009abe:	f003 031f 	and.w	r3, r3, #31
 8009ac2:	e00a      	b.n	8009ada <HAL_ADC_ConfigChannel+0x1ae>
 8009ac4:	683b      	ldr	r3, [r7, #0]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009aca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009acc:	fa93 f3a3 	rbit	r3, r3
 8009ad0:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8009ad2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ad4:	fab3 f383 	clz	r3, r3
 8009ad8:	b2db      	uxtb	r3, r3
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d106      	bne.n	8009aec <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	681b      	ldr	r3, [r3, #0]
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	2100      	movs	r1, #0
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	f7ff fa2c 	bl	8008f44 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	2101      	movs	r1, #1
 8009af2:	4618      	mov	r0, r3
 8009af4:	f7ff fa12 	bl	8008f1c <LL_ADC_GetOffsetChannel>
 8009af8:	4603      	mov	r3, r0
 8009afa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d10a      	bne.n	8009b18 <HAL_ADC_ConfigChannel+0x1ec>
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2101      	movs	r1, #1
 8009b08:	4618      	mov	r0, r3
 8009b0a:	f7ff fa07 	bl	8008f1c <LL_ADC_GetOffsetChannel>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	0e9b      	lsrs	r3, r3, #26
 8009b12:	f003 021f 	and.w	r2, r3, #31
 8009b16:	e010      	b.n	8009b3a <HAL_ADC_ConfigChannel+0x20e>
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	2101      	movs	r1, #1
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f7ff f9fc 	bl	8008f1c <LL_ADC_GetOffsetChannel>
 8009b24:	4603      	mov	r3, r0
 8009b26:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b2a:	fa93 f3a3 	rbit	r3, r3
 8009b2e:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8009b30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b32:	fab3 f383 	clz	r3, r3
 8009b36:	b2db      	uxtb	r3, r3
 8009b38:	461a      	mov	r2, r3
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d105      	bne.n	8009b52 <HAL_ADC_ConfigChannel+0x226>
 8009b46:	683b      	ldr	r3, [r7, #0]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	0e9b      	lsrs	r3, r3, #26
 8009b4c:	f003 031f 	and.w	r3, r3, #31
 8009b50:	e00a      	b.n	8009b68 <HAL_ADC_ConfigChannel+0x23c>
 8009b52:	683b      	ldr	r3, [r7, #0]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009b58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8009b5a:	fa93 f3a3 	rbit	r3, r3
 8009b5e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8009b60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009b62:	fab3 f383 	clz	r3, r3
 8009b66:	b2db      	uxtb	r3, r3
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d106      	bne.n	8009b7a <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2200      	movs	r2, #0
 8009b72:	2101      	movs	r1, #1
 8009b74:	4618      	mov	r0, r3
 8009b76:	f7ff f9e5 	bl	8008f44 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	2102      	movs	r1, #2
 8009b80:	4618      	mov	r0, r3
 8009b82:	f7ff f9cb 	bl	8008f1c <LL_ADC_GetOffsetChannel>
 8009b86:	4603      	mov	r3, r0
 8009b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d10a      	bne.n	8009ba6 <HAL_ADC_ConfigChannel+0x27a>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2102      	movs	r1, #2
 8009b96:	4618      	mov	r0, r3
 8009b98:	f7ff f9c0 	bl	8008f1c <LL_ADC_GetOffsetChannel>
 8009b9c:	4603      	mov	r3, r0
 8009b9e:	0e9b      	lsrs	r3, r3, #26
 8009ba0:	f003 021f 	and.w	r2, r3, #31
 8009ba4:	e010      	b.n	8009bc8 <HAL_ADC_ConfigChannel+0x29c>
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2102      	movs	r1, #2
 8009bac:	4618      	mov	r0, r3
 8009bae:	f7ff f9b5 	bl	8008f1c <LL_ADC_GetOffsetChannel>
 8009bb2:	4603      	mov	r3, r0
 8009bb4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009bb6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009bb8:	fa93 f3a3 	rbit	r3, r3
 8009bbc:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8009bbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009bc0:	fab3 f383 	clz	r3, r3
 8009bc4:	b2db      	uxtb	r3, r3
 8009bc6:	461a      	mov	r2, r3
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d105      	bne.n	8009be0 <HAL_ADC_ConfigChannel+0x2b4>
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	0e9b      	lsrs	r3, r3, #26
 8009bda:	f003 031f 	and.w	r3, r3, #31
 8009bde:	e00a      	b.n	8009bf6 <HAL_ADC_ConfigChannel+0x2ca>
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009be6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009be8:	fa93 f3a3 	rbit	r3, r3
 8009bec:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8009bee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009bf0:	fab3 f383 	clz	r3, r3
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	429a      	cmp	r2, r3
 8009bf8:	d106      	bne.n	8009c08 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	2200      	movs	r2, #0
 8009c00:	2102      	movs	r1, #2
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7ff f99e 	bl	8008f44 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	2103      	movs	r1, #3
 8009c0e:	4618      	mov	r0, r3
 8009c10:	f7ff f984 	bl	8008f1c <LL_ADC_GetOffsetChannel>
 8009c14:	4603      	mov	r3, r0
 8009c16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d10a      	bne.n	8009c34 <HAL_ADC_ConfigChannel+0x308>
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	681b      	ldr	r3, [r3, #0]
 8009c22:	2103      	movs	r1, #3
 8009c24:	4618      	mov	r0, r3
 8009c26:	f7ff f979 	bl	8008f1c <LL_ADC_GetOffsetChannel>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	0e9b      	lsrs	r3, r3, #26
 8009c2e:	f003 021f 	and.w	r2, r3, #31
 8009c32:	e010      	b.n	8009c56 <HAL_ADC_ConfigChannel+0x32a>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2103      	movs	r1, #3
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7ff f96e 	bl	8008f1c <LL_ADC_GetOffsetChannel>
 8009c40:	4603      	mov	r3, r0
 8009c42:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009c46:	fa93 f3a3 	rbit	r3, r3
 8009c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8009c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009c4e:	fab3 f383 	clz	r3, r3
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	461a      	mov	r2, r3
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d105      	bne.n	8009c6e <HAL_ADC_ConfigChannel+0x342>
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	681b      	ldr	r3, [r3, #0]
 8009c66:	0e9b      	lsrs	r3, r3, #26
 8009c68:	f003 031f 	and.w	r3, r3, #31
 8009c6c:	e00a      	b.n	8009c84 <HAL_ADC_ConfigChannel+0x358>
 8009c6e:	683b      	ldr	r3, [r7, #0]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009c74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009c76:	fa93 f3a3 	rbit	r3, r3
 8009c7a:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8009c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009c7e:	fab3 f383 	clz	r3, r3
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	429a      	cmp	r2, r3
 8009c86:	d106      	bne.n	8009c96 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	2103      	movs	r1, #3
 8009c90:	4618      	mov	r0, r3
 8009c92:	f7ff f957 	bl	8008f44 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f7ff faba 	bl	8009214 <LL_ADC_IsEnabled>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	f040 810c 	bne.w	8009ec0 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6818      	ldr	r0, [r3, #0]
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	6819      	ldr	r1, [r3, #0]
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	68db      	ldr	r3, [r3, #12]
 8009cb4:	461a      	mov	r2, r3
 8009cb6:	f7ff fa05 	bl	80090c4 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8009cba:	683b      	ldr	r3, [r7, #0]
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	4aaf      	ldr	r2, [pc, #700]	; (8009f7c <HAL_ADC_ConfigChannel+0x650>)
 8009cc0:	4293      	cmp	r3, r2
 8009cc2:	f040 80fd 	bne.w	8009ec0 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cd2:	2b00      	cmp	r3, #0
 8009cd4:	d10b      	bne.n	8009cee <HAL_ADC_ConfigChannel+0x3c2>
 8009cd6:	683b      	ldr	r3, [r7, #0]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	0e9b      	lsrs	r3, r3, #26
 8009cdc:	3301      	adds	r3, #1
 8009cde:	f003 031f 	and.w	r3, r3, #31
 8009ce2:	2b09      	cmp	r3, #9
 8009ce4:	bf94      	ite	ls
 8009ce6:	2301      	movls	r3, #1
 8009ce8:	2300      	movhi	r3, #0
 8009cea:	b2db      	uxtb	r3, r3
 8009cec:	e012      	b.n	8009d14 <HAL_ADC_ConfigChannel+0x3e8>
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009cf6:	fa93 f3a3 	rbit	r3, r3
 8009cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8009cfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009cfe:	fab3 f383 	clz	r3, r3
 8009d02:	b2db      	uxtb	r3, r3
 8009d04:	3301      	adds	r3, #1
 8009d06:	f003 031f 	and.w	r3, r3, #31
 8009d0a:	2b09      	cmp	r3, #9
 8009d0c:	bf94      	ite	ls
 8009d0e:	2301      	movls	r3, #1
 8009d10:	2300      	movhi	r3, #0
 8009d12:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d064      	beq.n	8009de2 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009d18:	683b      	ldr	r3, [r7, #0]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d107      	bne.n	8009d34 <HAL_ADC_ConfigChannel+0x408>
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	0e9b      	lsrs	r3, r3, #26
 8009d2a:	3301      	adds	r3, #1
 8009d2c:	069b      	lsls	r3, r3, #26
 8009d2e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009d32:	e00e      	b.n	8009d52 <HAL_ADC_ConfigChannel+0x426>
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009d3c:	fa93 f3a3 	rbit	r3, r3
 8009d40:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8009d42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009d44:	fab3 f383 	clz	r3, r3
 8009d48:	b2db      	uxtb	r3, r3
 8009d4a:	3301      	adds	r3, #1
 8009d4c:	069b      	lsls	r3, r3, #26
 8009d4e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d109      	bne.n	8009d72 <HAL_ADC_ConfigChannel+0x446>
 8009d5e:	683b      	ldr	r3, [r7, #0]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	0e9b      	lsrs	r3, r3, #26
 8009d64:	3301      	adds	r3, #1
 8009d66:	f003 031f 	and.w	r3, r3, #31
 8009d6a:	2101      	movs	r1, #1
 8009d6c:	fa01 f303 	lsl.w	r3, r1, r3
 8009d70:	e010      	b.n	8009d94 <HAL_ADC_ConfigChannel+0x468>
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009d78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7a:	fa93 f3a3 	rbit	r3, r3
 8009d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d82:	fab3 f383 	clz	r3, r3
 8009d86:	b2db      	uxtb	r3, r3
 8009d88:	3301      	adds	r3, #1
 8009d8a:	f003 031f 	and.w	r3, r3, #31
 8009d8e:	2101      	movs	r1, #1
 8009d90:	fa01 f303 	lsl.w	r3, r1, r3
 8009d94:	ea42 0103 	orr.w	r1, r2, r3
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d10a      	bne.n	8009dba <HAL_ADC_ConfigChannel+0x48e>
 8009da4:	683b      	ldr	r3, [r7, #0]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	0e9b      	lsrs	r3, r3, #26
 8009daa:	3301      	adds	r3, #1
 8009dac:	f003 021f 	and.w	r2, r3, #31
 8009db0:	4613      	mov	r3, r2
 8009db2:	005b      	lsls	r3, r3, #1
 8009db4:	4413      	add	r3, r2
 8009db6:	051b      	lsls	r3, r3, #20
 8009db8:	e011      	b.n	8009dde <HAL_ADC_ConfigChannel+0x4b2>
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009dc2:	fa93 f3a3 	rbit	r3, r3
 8009dc6:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8009dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dca:	fab3 f383 	clz	r3, r3
 8009dce:	b2db      	uxtb	r3, r3
 8009dd0:	3301      	adds	r3, #1
 8009dd2:	f003 021f 	and.w	r2, r3, #31
 8009dd6:	4613      	mov	r3, r2
 8009dd8:	005b      	lsls	r3, r3, #1
 8009dda:	4413      	add	r3, r2
 8009ddc:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009dde:	430b      	orrs	r3, r1
 8009de0:	e069      	b.n	8009eb6 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d107      	bne.n	8009dfe <HAL_ADC_ConfigChannel+0x4d2>
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	0e9b      	lsrs	r3, r3, #26
 8009df4:	3301      	adds	r3, #1
 8009df6:	069b      	lsls	r3, r3, #26
 8009df8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009dfc:	e00e      	b.n	8009e1c <HAL_ADC_ConfigChannel+0x4f0>
 8009dfe:	683b      	ldr	r3, [r7, #0]
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e04:	6a3b      	ldr	r3, [r7, #32]
 8009e06:	fa93 f3a3 	rbit	r3, r3
 8009e0a:	61fb      	str	r3, [r7, #28]
  return result;
 8009e0c:	69fb      	ldr	r3, [r7, #28]
 8009e0e:	fab3 f383 	clz	r3, r3
 8009e12:	b2db      	uxtb	r3, r3
 8009e14:	3301      	adds	r3, #1
 8009e16:	069b      	lsls	r3, r3, #26
 8009e18:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8009e1c:	683b      	ldr	r3, [r7, #0]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d109      	bne.n	8009e3c <HAL_ADC_ConfigChannel+0x510>
 8009e28:	683b      	ldr	r3, [r7, #0]
 8009e2a:	681b      	ldr	r3, [r3, #0]
 8009e2c:	0e9b      	lsrs	r3, r3, #26
 8009e2e:	3301      	adds	r3, #1
 8009e30:	f003 031f 	and.w	r3, r3, #31
 8009e34:	2101      	movs	r1, #1
 8009e36:	fa01 f303 	lsl.w	r3, r1, r3
 8009e3a:	e010      	b.n	8009e5e <HAL_ADC_ConfigChannel+0x532>
 8009e3c:	683b      	ldr	r3, [r7, #0]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	fa93 f3a3 	rbit	r3, r3
 8009e48:	617b      	str	r3, [r7, #20]
  return result;
 8009e4a:	697b      	ldr	r3, [r7, #20]
 8009e4c:	fab3 f383 	clz	r3, r3
 8009e50:	b2db      	uxtb	r3, r3
 8009e52:	3301      	adds	r3, #1
 8009e54:	f003 031f 	and.w	r3, r3, #31
 8009e58:	2101      	movs	r1, #1
 8009e5a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e5e:	ea42 0103 	orr.w	r1, r2, r3
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d10d      	bne.n	8009e8a <HAL_ADC_ConfigChannel+0x55e>
 8009e6e:	683b      	ldr	r3, [r7, #0]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	0e9b      	lsrs	r3, r3, #26
 8009e74:	3301      	adds	r3, #1
 8009e76:	f003 021f 	and.w	r2, r3, #31
 8009e7a:	4613      	mov	r3, r2
 8009e7c:	005b      	lsls	r3, r3, #1
 8009e7e:	4413      	add	r3, r2
 8009e80:	3b1e      	subs	r3, #30
 8009e82:	051b      	lsls	r3, r3, #20
 8009e84:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009e88:	e014      	b.n	8009eb4 <HAL_ADC_ConfigChannel+0x588>
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	fa93 f3a3 	rbit	r3, r3
 8009e96:	60fb      	str	r3, [r7, #12]
  return result;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	fab3 f383 	clz	r3, r3
 8009e9e:	b2db      	uxtb	r3, r3
 8009ea0:	3301      	adds	r3, #1
 8009ea2:	f003 021f 	and.w	r2, r3, #31
 8009ea6:	4613      	mov	r3, r2
 8009ea8:	005b      	lsls	r3, r3, #1
 8009eaa:	4413      	add	r3, r2
 8009eac:	3b1e      	subs	r3, #30
 8009eae:	051b      	lsls	r3, r3, #20
 8009eb0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8009eb4:	430b      	orrs	r3, r1
 8009eb6:	683a      	ldr	r2, [r7, #0]
 8009eb8:	6892      	ldr	r2, [r2, #8]
 8009eba:	4619      	mov	r1, r3
 8009ebc:	f7ff f8d9 	bl	8009072 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	681a      	ldr	r2, [r3, #0]
 8009ec4:	4b2e      	ldr	r3, [pc, #184]	; (8009f80 <HAL_ADC_ConfigChannel+0x654>)
 8009ec6:	4013      	ands	r3, r2
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f000 80c9 	beq.w	800a060 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009ed6:	d004      	beq.n	8009ee2 <HAL_ADC_ConfigChannel+0x5b6>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a29      	ldr	r2, [pc, #164]	; (8009f84 <HAL_ADC_ConfigChannel+0x658>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d101      	bne.n	8009ee6 <HAL_ADC_ConfigChannel+0x5ba>
 8009ee2:	4b29      	ldr	r3, [pc, #164]	; (8009f88 <HAL_ADC_ConfigChannel+0x65c>)
 8009ee4:	e000      	b.n	8009ee8 <HAL_ADC_ConfigChannel+0x5bc>
 8009ee6:	4b29      	ldr	r3, [pc, #164]	; (8009f8c <HAL_ADC_ConfigChannel+0x660>)
 8009ee8:	4618      	mov	r0, r3
 8009eea:	f7fe ffe7 	bl	8008ebc <LL_ADC_GetCommonPathInternalCh>
 8009eee:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8009ef2:	683b      	ldr	r3, [r7, #0]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	4a26      	ldr	r2, [pc, #152]	; (8009f90 <HAL_ADC_ConfigChannel+0x664>)
 8009ef8:	4293      	cmp	r3, r2
 8009efa:	d004      	beq.n	8009f06 <HAL_ADC_ConfigChannel+0x5da>
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	4a24      	ldr	r2, [pc, #144]	; (8009f94 <HAL_ADC_ConfigChannel+0x668>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d14e      	bne.n	8009fa4 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8009f06:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d148      	bne.n	8009fa4 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f1a:	d005      	beq.n	8009f28 <HAL_ADC_ConfigChannel+0x5fc>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a1d      	ldr	r2, [pc, #116]	; (8009f98 <HAL_ADC_ConfigChannel+0x66c>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	f040 8099 	bne.w	800a05a <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009f30:	d004      	beq.n	8009f3c <HAL_ADC_ConfigChannel+0x610>
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	4a13      	ldr	r2, [pc, #76]	; (8009f84 <HAL_ADC_ConfigChannel+0x658>)
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d101      	bne.n	8009f40 <HAL_ADC_ConfigChannel+0x614>
 8009f3c:	4a12      	ldr	r2, [pc, #72]	; (8009f88 <HAL_ADC_ConfigChannel+0x65c>)
 8009f3e:	e000      	b.n	8009f42 <HAL_ADC_ConfigChannel+0x616>
 8009f40:	4a12      	ldr	r2, [pc, #72]	; (8009f8c <HAL_ADC_ConfigChannel+0x660>)
 8009f42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009f46:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	4610      	mov	r0, r2
 8009f4e:	f7fe ffa2 	bl	8008e96 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8009f52:	4b12      	ldr	r3, [pc, #72]	; (8009f9c <HAL_ADC_ConfigChannel+0x670>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	099b      	lsrs	r3, r3, #6
 8009f58:	4a11      	ldr	r2, [pc, #68]	; (8009fa0 <HAL_ADC_ConfigChannel+0x674>)
 8009f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f5e:	099a      	lsrs	r2, r3, #6
 8009f60:	4613      	mov	r3, r2
 8009f62:	005b      	lsls	r3, r3, #1
 8009f64:	4413      	add	r3, r2
 8009f66:	009b      	lsls	r3, r3, #2
 8009f68:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8009f6a:	e002      	b.n	8009f72 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8009f6c:	68bb      	ldr	r3, [r7, #8]
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8009f72:	68bb      	ldr	r3, [r7, #8]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d1f9      	bne.n	8009f6c <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009f78:	e06f      	b.n	800a05a <HAL_ADC_ConfigChannel+0x72e>
 8009f7a:	bf00      	nop
 8009f7c:	407f0000 	.word	0x407f0000
 8009f80:	80080000 	.word	0x80080000
 8009f84:	50000100 	.word	0x50000100
 8009f88:	50000300 	.word	0x50000300
 8009f8c:	50000700 	.word	0x50000700
 8009f90:	c3210000 	.word	0xc3210000
 8009f94:	90c00010 	.word	0x90c00010
 8009f98:	50000600 	.word	0x50000600
 8009f9c:	20000c30 	.word	0x20000c30
 8009fa0:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8009fa4:	683b      	ldr	r3, [r7, #0]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4a32      	ldr	r2, [pc, #200]	; (800a074 <HAL_ADC_ConfigChannel+0x748>)
 8009faa:	4293      	cmp	r3, r2
 8009fac:	d125      	bne.n	8009ffa <HAL_ADC_ConfigChannel+0x6ce>
 8009fae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fb2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	d11f      	bne.n	8009ffa <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	4a2e      	ldr	r2, [pc, #184]	; (800a078 <HAL_ADC_ConfigChannel+0x74c>)
 8009fc0:	4293      	cmp	r3, r2
 8009fc2:	d104      	bne.n	8009fce <HAL_ADC_ConfigChannel+0x6a2>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a2c      	ldr	r2, [pc, #176]	; (800a07c <HAL_ADC_ConfigChannel+0x750>)
 8009fca:	4293      	cmp	r3, r2
 8009fcc:	d047      	beq.n	800a05e <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009fd6:	d004      	beq.n	8009fe2 <HAL_ADC_ConfigChannel+0x6b6>
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a26      	ldr	r2, [pc, #152]	; (800a078 <HAL_ADC_ConfigChannel+0x74c>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d101      	bne.n	8009fe6 <HAL_ADC_ConfigChannel+0x6ba>
 8009fe2:	4a27      	ldr	r2, [pc, #156]	; (800a080 <HAL_ADC_ConfigChannel+0x754>)
 8009fe4:	e000      	b.n	8009fe8 <HAL_ADC_ConfigChannel+0x6bc>
 8009fe6:	4a27      	ldr	r2, [pc, #156]	; (800a084 <HAL_ADC_ConfigChannel+0x758>)
 8009fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009fec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009ff0:	4619      	mov	r1, r3
 8009ff2:	4610      	mov	r0, r2
 8009ff4:	f7fe ff4f 	bl	8008e96 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009ff8:	e031      	b.n	800a05e <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	4a22      	ldr	r2, [pc, #136]	; (800a088 <HAL_ADC_ConfigChannel+0x75c>)
 800a000:	4293      	cmp	r3, r2
 800a002:	d12d      	bne.n	800a060 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800a004:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a008:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d127      	bne.n	800a060 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	4a18      	ldr	r2, [pc, #96]	; (800a078 <HAL_ADC_ConfigChannel+0x74c>)
 800a016:	4293      	cmp	r3, r2
 800a018:	d022      	beq.n	800a060 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a022:	d004      	beq.n	800a02e <HAL_ADC_ConfigChannel+0x702>
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	4a13      	ldr	r2, [pc, #76]	; (800a078 <HAL_ADC_ConfigChannel+0x74c>)
 800a02a:	4293      	cmp	r3, r2
 800a02c:	d101      	bne.n	800a032 <HAL_ADC_ConfigChannel+0x706>
 800a02e:	4a14      	ldr	r2, [pc, #80]	; (800a080 <HAL_ADC_ConfigChannel+0x754>)
 800a030:	e000      	b.n	800a034 <HAL_ADC_ConfigChannel+0x708>
 800a032:	4a14      	ldr	r2, [pc, #80]	; (800a084 <HAL_ADC_ConfigChannel+0x758>)
 800a034:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a038:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800a03c:	4619      	mov	r1, r3
 800a03e:	4610      	mov	r0, r2
 800a040:	f7fe ff29 	bl	8008e96 <LL_ADC_SetCommonPathInternalCh>
 800a044:	e00c      	b.n	800a060 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a04a:	f043 0220 	orr.w	r2, r3, #32
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800a052:	2301      	movs	r3, #1
 800a054:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800a058:	e002      	b.n	800a060 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800a05a:	bf00      	nop
 800a05c:	e000      	b.n	800a060 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800a05e:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2200      	movs	r2, #0
 800a064:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800a068:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 800a06c:	4618      	mov	r0, r3
 800a06e:	3798      	adds	r7, #152	; 0x98
 800a070:	46bd      	mov	sp, r7
 800a072:	bd80      	pop	{r7, pc}
 800a074:	c7520000 	.word	0xc7520000
 800a078:	50000100 	.word	0x50000100
 800a07c:	50000500 	.word	0x50000500
 800a080:	50000300 	.word	0x50000300
 800a084:	50000700 	.word	0x50000700
 800a088:	cb840000 	.word	0xcb840000

0800a08c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800a08c:	b580      	push	{r7, lr}
 800a08e:	b088      	sub	sp, #32
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
 800a094:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800a096:	2300      	movs	r3, #0
 800a098:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800a09a:	683b      	ldr	r3, [r7, #0]
 800a09c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	f7ff f904 	bl	80092b0 <LL_ADC_REG_IsConversionOngoing>
 800a0a8:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7ff f925 	bl	80092fe <LL_ADC_INJ_IsConversionOngoing>
 800a0b4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d103      	bne.n	800a0c4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	f000 8090 	beq.w	800a1e4 <ADC_ConversionStop+0x158>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	68db      	ldr	r3, [r3, #12]
 800a0ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d02a      	beq.n	800a128 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	7f5b      	ldrb	r3, [r3, #29]
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d126      	bne.n	800a128 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	7f1b      	ldrb	r3, [r3, #28]
 800a0de:	2b01      	cmp	r3, #1
 800a0e0:	d122      	bne.n	800a128 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800a0e6:	e014      	b.n	800a112 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	4a41      	ldr	r2, [pc, #260]	; (800a1f0 <ADC_ConversionStop+0x164>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d90d      	bls.n	800a10c <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a0f4:	f043 0210 	orr.w	r2, r3, #16
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a100:	f043 0201 	orr.w	r2, r3, #1
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 800a108:	2301      	movs	r3, #1
 800a10a:	e06c      	b.n	800a1e6 <ADC_ConversionStop+0x15a>
        }
        Conversion_Timeout_CPU_cycles ++;
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	3301      	adds	r3, #1
 800a110:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a11c:	2b40      	cmp	r3, #64	; 0x40
 800a11e:	d1e3      	bne.n	800a0e8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	2240      	movs	r2, #64	; 0x40
 800a126:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 800a128:	69bb      	ldr	r3, [r7, #24]
 800a12a:	2b02      	cmp	r3, #2
 800a12c:	d014      	beq.n	800a158 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	4618      	mov	r0, r3
 800a134:	f7ff f8bc 	bl	80092b0 <LL_ADC_REG_IsConversionOngoing>
 800a138:	4603      	mov	r3, r0
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d00c      	beq.n	800a158 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	4618      	mov	r0, r3
 800a144:	f7ff f879 	bl	800923a <LL_ADC_IsDisableOngoing>
 800a148:	4603      	mov	r3, r0
 800a14a:	2b00      	cmp	r3, #0
 800a14c:	d104      	bne.n	800a158 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	4618      	mov	r0, r3
 800a154:	f7ff f898 	bl	8009288 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	2b01      	cmp	r3, #1
 800a15c:	d014      	beq.n	800a188 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4618      	mov	r0, r3
 800a164:	f7ff f8cb 	bl	80092fe <LL_ADC_INJ_IsConversionOngoing>
 800a168:	4603      	mov	r3, r0
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d00c      	beq.n	800a188 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4618      	mov	r0, r3
 800a174:	f7ff f861 	bl	800923a <LL_ADC_IsDisableOngoing>
 800a178:	4603      	mov	r3, r0
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d104      	bne.n	800a188 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	4618      	mov	r0, r3
 800a184:	f7ff f8a7 	bl	80092d6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 800a188:	69bb      	ldr	r3, [r7, #24]
 800a18a:	2b02      	cmp	r3, #2
 800a18c:	d004      	beq.n	800a198 <ADC_ConversionStop+0x10c>
 800a18e:	2b03      	cmp	r3, #3
 800a190:	d105      	bne.n	800a19e <ADC_ConversionStop+0x112>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800a192:	230c      	movs	r3, #12
 800a194:	617b      	str	r3, [r7, #20]
        break;
 800a196:	e005      	b.n	800a1a4 <ADC_ConversionStop+0x118>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800a198:	2308      	movs	r3, #8
 800a19a:	617b      	str	r3, [r7, #20]
        break;
 800a19c:	e002      	b.n	800a1a4 <ADC_ConversionStop+0x118>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800a19e:	2304      	movs	r3, #4
 800a1a0:	617b      	str	r3, [r7, #20]
        break;
 800a1a2:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800a1a4:	f7fe fe36 	bl	8008e14 <HAL_GetTick>
 800a1a8:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800a1aa:	e014      	b.n	800a1d6 <ADC_ConversionStop+0x14a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800a1ac:	f7fe fe32 	bl	8008e14 <HAL_GetTick>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	1ad3      	subs	r3, r2, r3
 800a1b6:	2b05      	cmp	r3, #5
 800a1b8:	d90d      	bls.n	800a1d6 <ADC_ConversionStop+0x14a>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a1be:	f043 0210 	orr.w	r2, r3, #16
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a1ca:	f043 0201 	orr.w	r2, r3, #1
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e007      	b.n	800a1e6 <ADC_ConversionStop+0x15a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	689a      	ldr	r2, [r3, #8]
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	4013      	ands	r3, r2
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d1e3      	bne.n	800a1ac <ADC_ConversionStop+0x120>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 800a1e4:	2300      	movs	r3, #0
}
 800a1e6:	4618      	mov	r0, r3
 800a1e8:	3720      	adds	r7, #32
 800a1ea:	46bd      	mov	sp, r7
 800a1ec:	bd80      	pop	{r7, pc}
 800a1ee:	bf00      	nop
 800a1f0:	a33fffff 	.word	0xa33fffff

0800a1f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800a1f4:	b580      	push	{r7, lr}
 800a1f6:	b084      	sub	sp, #16
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	4618      	mov	r0, r3
 800a202:	f7ff f807 	bl	8009214 <LL_ADC_IsEnabled>
 800a206:	4603      	mov	r3, r0
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d146      	bne.n	800a29a <ADC_Enable+0xa6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	689a      	ldr	r2, [r3, #8]
 800a212:	4b24      	ldr	r3, [pc, #144]	; (800a2a4 <ADC_Enable+0xb0>)
 800a214:	4013      	ands	r3, r2
 800a216:	2b00      	cmp	r3, #0
 800a218:	d00d      	beq.n	800a236 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a21e:	f043 0210 	orr.w	r2, r3, #16
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a22a:	f043 0201 	orr.w	r2, r3, #1
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800a232:	2301      	movs	r3, #1
 800a234:	e032      	b.n	800a29c <ADC_Enable+0xa8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fe ffc2 	bl	80091c4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800a240:	f7fe fde8 	bl	8008e14 <HAL_GetTick>
 800a244:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a246:	e021      	b.n	800a28c <ADC_Enable+0x98>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	4618      	mov	r0, r3
 800a24e:	f7fe ffe1 	bl	8009214 <LL_ADC_IsEnabled>
 800a252:	4603      	mov	r3, r0
 800a254:	2b00      	cmp	r3, #0
 800a256:	d104      	bne.n	800a262 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 800a258:	687b      	ldr	r3, [r7, #4]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7fe ffb1 	bl	80091c4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800a262:	f7fe fdd7 	bl	8008e14 <HAL_GetTick>
 800a266:	4602      	mov	r2, r0
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	1ad3      	subs	r3, r2, r3
 800a26c:	2b02      	cmp	r3, #2
 800a26e:	d90d      	bls.n	800a28c <ADC_Enable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a274:	f043 0210 	orr.w	r2, r3, #16
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a280:	f043 0201 	orr.w	r2, r3, #1
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a288:	2301      	movs	r3, #1
 800a28a:	e007      	b.n	800a29c <ADC_Enable+0xa8>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f003 0301 	and.w	r3, r3, #1
 800a296:	2b01      	cmp	r3, #1
 800a298:	d1d6      	bne.n	800a248 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3710      	adds	r7, #16
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	bd80      	pop	{r7, pc}
 800a2a4:	8000003f 	.word	0x8000003f

0800a2a8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b084      	sub	sp, #16
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4618      	mov	r0, r3
 800a2b6:	f7fe ffc0 	bl	800923a <LL_ADC_IsDisableOngoing>
 800a2ba:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4618      	mov	r0, r3
 800a2c2:	f7fe ffa7 	bl	8009214 <LL_ADC_IsEnabled>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d040      	beq.n	800a34e <ADC_Disable+0xa6>
      && (tmp_adc_is_disable_on_going == 0UL)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2b00      	cmp	r3, #0
 800a2d0:	d13d      	bne.n	800a34e <ADC_Disable+0xa6>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	689b      	ldr	r3, [r3, #8]
 800a2d8:	f003 030d 	and.w	r3, r3, #13
 800a2dc:	2b01      	cmp	r3, #1
 800a2de:	d10c      	bne.n	800a2fa <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f7fe ff81 	bl	80091ec <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	681b      	ldr	r3, [r3, #0]
 800a2ee:	2203      	movs	r2, #3
 800a2f0:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800a2f2:	f7fe fd8f 	bl	8008e14 <HAL_GetTick>
 800a2f6:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a2f8:	e022      	b.n	800a340 <ADC_Disable+0x98>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a2fe:	f043 0210 	orr.w	r2, r3, #16
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a30a:	f043 0201 	orr.w	r2, r3, #1
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	e01c      	b.n	800a350 <ADC_Disable+0xa8>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800a316:	f7fe fd7d 	bl	8008e14 <HAL_GetTick>
 800a31a:	4602      	mov	r2, r0
 800a31c:	68bb      	ldr	r3, [r7, #8]
 800a31e:	1ad3      	subs	r3, r2, r3
 800a320:	2b02      	cmp	r3, #2
 800a322:	d90d      	bls.n	800a340 <ADC_Disable+0x98>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800a324:	687b      	ldr	r3, [r7, #4]
 800a326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a328:	f043 0210 	orr.w	r2, r3, #16
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	65da      	str	r2, [r3, #92]	; 0x5c

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a334:	f043 0201 	orr.w	r2, r3, #1
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	661a      	str	r2, [r3, #96]	; 0x60

        return HAL_ERROR;
 800a33c:	2301      	movs	r3, #1
 800a33e:	e007      	b.n	800a350 <ADC_Disable+0xa8>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	689b      	ldr	r3, [r3, #8]
 800a346:	f003 0301 	and.w	r3, r3, #1
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d1e3      	bne.n	800a316 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800a34e:	2300      	movs	r3, #0
}
 800a350:	4618      	mov	r0, r3
 800a352:	3710      	adds	r7, #16
 800a354:	46bd      	mov	sp, r7
 800a356:	bd80      	pop	{r7, pc}

0800a358 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 800a358:	b580      	push	{r7, lr}
 800a35a:	b084      	sub	sp, #16
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a364:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a36a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d14b      	bne.n	800a40a <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a376:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f003 0308 	and.w	r3, r3, #8
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d021      	beq.n	800a3d0 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4618      	mov	r0, r3
 800a392:	f7fe fe32 	bl	8008ffa <LL_ADC_REG_IsTriggerSourceSWStart>
 800a396:	4603      	mov	r3, r0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d032      	beq.n	800a402 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	68db      	ldr	r3, [r3, #12]
 800a3a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d12b      	bne.n	800a402 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a3aa:	68fb      	ldr	r3, [r7, #12]
 800a3ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a3be:	2b00      	cmp	r3, #0
 800a3c0:	d11f      	bne.n	800a402 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3c6:	f043 0201 	orr.w	r2, r3, #1
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	65da      	str	r2, [r3, #92]	; 0x5c
 800a3ce:	e018      	b.n	800a402 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	f003 0302 	and.w	r3, r3, #2
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d111      	bne.n	800a402 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3ee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d105      	bne.n	800a402 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3fa:	f043 0201 	orr.w	r2, r3, #1
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800a402:	68f8      	ldr	r0, [r7, #12]
 800a404:	f7fb fffe 	bl	8006404 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800a408:	e00e      	b.n	800a428 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a40e:	f003 0310 	and.w	r3, r3, #16
 800a412:	2b00      	cmp	r3, #0
 800a414:	d003      	beq.n	800a41e <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 800a416:	68f8      	ldr	r0, [r7, #12]
 800a418:	f7ff fa7d 	bl	8009916 <HAL_ADC_ErrorCallback>
}
 800a41c:	e004      	b.n	800a428 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a422:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	4798      	blx	r3
}
 800a428:	bf00      	nop
 800a42a:	3710      	adds	r7, #16
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b084      	sub	sp, #16
 800a434:	af00      	add	r7, sp, #0
 800a436:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a43c:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800a43e:	68f8      	ldr	r0, [r7, #12]
 800a440:	f7ff fa5f 	bl	8009902 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a444:	bf00      	nop
 800a446:	3710      	adds	r7, #16
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}

0800a44c <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b084      	sub	sp, #16
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a458:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a45e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a46a:	f043 0204 	orr.w	r2, r3, #4
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800a472:	68f8      	ldr	r0, [r7, #12]
 800a474:	f7ff fa4f 	bl	8009916 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800a478:	bf00      	nop
 800a47a:	3710      	adds	r7, #16
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <LL_ADC_IsEnabled>:
{
 800a480:	b480      	push	{r7}
 800a482:	b083      	sub	sp, #12
 800a484:	af00      	add	r7, sp, #0
 800a486:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	689b      	ldr	r3, [r3, #8]
 800a48c:	f003 0301 	and.w	r3, r3, #1
 800a490:	2b01      	cmp	r3, #1
 800a492:	d101      	bne.n	800a498 <LL_ADC_IsEnabled+0x18>
 800a494:	2301      	movs	r3, #1
 800a496:	e000      	b.n	800a49a <LL_ADC_IsEnabled+0x1a>
 800a498:	2300      	movs	r3, #0
}
 800a49a:	4618      	mov	r0, r3
 800a49c:	370c      	adds	r7, #12
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr

0800a4a6 <LL_ADC_REG_IsConversionOngoing>:
{
 800a4a6:	b480      	push	{r7}
 800a4a8:	b083      	sub	sp, #12
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	689b      	ldr	r3, [r3, #8]
 800a4b2:	f003 0304 	and.w	r3, r3, #4
 800a4b6:	2b04      	cmp	r3, #4
 800a4b8:	d101      	bne.n	800a4be <LL_ADC_REG_IsConversionOngoing+0x18>
 800a4ba:	2301      	movs	r3, #1
 800a4bc:	e000      	b.n	800a4c0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800a4be:	2300      	movs	r3, #0
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	370c      	adds	r7, #12
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ca:	4770      	bx	lr

0800a4cc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800a4cc:	b590      	push	{r4, r7, lr}
 800a4ce:	b0a1      	sub	sp, #132	; 0x84
 800a4d0:	af00      	add	r7, sp, #0
 800a4d2:	6078      	str	r0, [r7, #4]
 800a4d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d101      	bne.n	800a4ea <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800a4e6:	2302      	movs	r3, #2
 800a4e8:	e0e3      	b.n	800a6b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	2201      	movs	r2, #1
 800a4ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a4fa:	d102      	bne.n	800a502 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800a4fc:	4b6f      	ldr	r3, [pc, #444]	; (800a6bc <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a4fe:	60bb      	str	r3, [r7, #8]
 800a500:	e009      	b.n	800a516 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	4a6e      	ldr	r2, [pc, #440]	; (800a6c0 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a508:	4293      	cmp	r3, r2
 800a50a:	d102      	bne.n	800a512 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 800a50c:	4b6d      	ldr	r3, [pc, #436]	; (800a6c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a50e:	60bb      	str	r3, [r7, #8]
 800a510:	e001      	b.n	800a516 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800a512:	2300      	movs	r3, #0
 800a514:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d10b      	bne.n	800a534 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a520:	f043 0220 	orr.w	r2, r3, #32
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 800a530:	2301      	movs	r3, #1
 800a532:	e0be      	b.n	800a6b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 800a534:	68bb      	ldr	r3, [r7, #8]
 800a536:	4618      	mov	r0, r3
 800a538:	f7ff ffb5 	bl	800a4a6 <LL_ADC_REG_IsConversionOngoing>
 800a53c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	4618      	mov	r0, r3
 800a544:	f7ff ffaf 	bl	800a4a6 <LL_ADC_REG_IsConversionOngoing>
 800a548:	4603      	mov	r3, r0
 800a54a:	2b00      	cmp	r3, #0
 800a54c:	f040 80a0 	bne.w	800a690 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800a550:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a552:	2b00      	cmp	r3, #0
 800a554:	f040 809c 	bne.w	800a690 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a560:	d004      	beq.n	800a56c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a55      	ldr	r2, [pc, #340]	; (800a6bc <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d101      	bne.n	800a570 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 800a56c:	4b56      	ldr	r3, [pc, #344]	; (800a6c8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800a56e:	e000      	b.n	800a572 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 800a570:	4b56      	ldr	r3, [pc, #344]	; (800a6cc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800a572:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d04b      	beq.n	800a614 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800a57c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a57e:	689b      	ldr	r3, [r3, #8]
 800a580:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a584:	683b      	ldr	r3, [r7, #0]
 800a586:	6859      	ldr	r1, [r3, #4]
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a58e:	035b      	lsls	r3, r3, #13
 800a590:	430b      	orrs	r3, r1
 800a592:	431a      	orrs	r2, r3
 800a594:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a596:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5a0:	d004      	beq.n	800a5ac <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	4a45      	ldr	r2, [pc, #276]	; (800a6bc <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a5a8:	4293      	cmp	r3, r2
 800a5aa:	d10f      	bne.n	800a5cc <HAL_ADCEx_MultiModeConfigChannel+0x100>
 800a5ac:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800a5b0:	f7ff ff66 	bl	800a480 <LL_ADC_IsEnabled>
 800a5b4:	4604      	mov	r4, r0
 800a5b6:	4841      	ldr	r0, [pc, #260]	; (800a6bc <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a5b8:	f7ff ff62 	bl	800a480 <LL_ADC_IsEnabled>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	4323      	orrs	r3, r4
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	bf0c      	ite	eq
 800a5c4:	2301      	moveq	r3, #1
 800a5c6:	2300      	movne	r3, #0
 800a5c8:	b2db      	uxtb	r3, r3
 800a5ca:	e012      	b.n	800a5f2 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 800a5cc:	483c      	ldr	r0, [pc, #240]	; (800a6c0 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a5ce:	f7ff ff57 	bl	800a480 <LL_ADC_IsEnabled>
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	483b      	ldr	r0, [pc, #236]	; (800a6c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a5d6:	f7ff ff53 	bl	800a480 <LL_ADC_IsEnabled>
 800a5da:	4603      	mov	r3, r0
 800a5dc:	431c      	orrs	r4, r3
 800a5de:	483c      	ldr	r0, [pc, #240]	; (800a6d0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800a5e0:	f7ff ff4e 	bl	800a480 <LL_ADC_IsEnabled>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	4323      	orrs	r3, r4
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	bf0c      	ite	eq
 800a5ec:	2301      	moveq	r3, #1
 800a5ee:	2300      	movne	r3, #0
 800a5f0:	b2db      	uxtb	r3, r3
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d056      	beq.n	800a6a4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800a5f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a5f8:	689b      	ldr	r3, [r3, #8]
 800a5fa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800a5fe:	f023 030f 	bic.w	r3, r3, #15
 800a602:	683a      	ldr	r2, [r7, #0]
 800a604:	6811      	ldr	r1, [r2, #0]
 800a606:	683a      	ldr	r2, [r7, #0]
 800a608:	6892      	ldr	r2, [r2, #8]
 800a60a:	430a      	orrs	r2, r1
 800a60c:	431a      	orrs	r2, r3
 800a60e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a610:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a612:	e047      	b.n	800a6a4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800a614:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a616:	689b      	ldr	r3, [r3, #8]
 800a618:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800a61c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a61e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a628:	d004      	beq.n	800a634 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a23      	ldr	r2, [pc, #140]	; (800a6bc <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d10f      	bne.n	800a654 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 800a634:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800a638:	f7ff ff22 	bl	800a480 <LL_ADC_IsEnabled>
 800a63c:	4604      	mov	r4, r0
 800a63e:	481f      	ldr	r0, [pc, #124]	; (800a6bc <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800a640:	f7ff ff1e 	bl	800a480 <LL_ADC_IsEnabled>
 800a644:	4603      	mov	r3, r0
 800a646:	4323      	orrs	r3, r4
 800a648:	2b00      	cmp	r3, #0
 800a64a:	bf0c      	ite	eq
 800a64c:	2301      	moveq	r3, #1
 800a64e:	2300      	movne	r3, #0
 800a650:	b2db      	uxtb	r3, r3
 800a652:	e012      	b.n	800a67a <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 800a654:	481a      	ldr	r0, [pc, #104]	; (800a6c0 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800a656:	f7ff ff13 	bl	800a480 <LL_ADC_IsEnabled>
 800a65a:	4604      	mov	r4, r0
 800a65c:	4819      	ldr	r0, [pc, #100]	; (800a6c4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800a65e:	f7ff ff0f 	bl	800a480 <LL_ADC_IsEnabled>
 800a662:	4603      	mov	r3, r0
 800a664:	431c      	orrs	r4, r3
 800a666:	481a      	ldr	r0, [pc, #104]	; (800a6d0 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800a668:	f7ff ff0a 	bl	800a480 <LL_ADC_IsEnabled>
 800a66c:	4603      	mov	r3, r0
 800a66e:	4323      	orrs	r3, r4
 800a670:	2b00      	cmp	r3, #0
 800a672:	bf0c      	ite	eq
 800a674:	2301      	moveq	r3, #1
 800a676:	2300      	movne	r3, #0
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d012      	beq.n	800a6a4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800a67e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a680:	689b      	ldr	r3, [r3, #8]
 800a682:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800a686:	f023 030f 	bic.w	r3, r3, #15
 800a68a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a68c:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a68e:	e009      	b.n	800a6a4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a694:	f043 0220 	orr.w	r2, r3, #32
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800a69c:	2301      	movs	r3, #1
 800a69e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800a6a2:	e000      	b.n	800a6a6 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800a6a4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800a6ae:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800a6b2:	4618      	mov	r0, r3
 800a6b4:	3784      	adds	r7, #132	; 0x84
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bd90      	pop	{r4, r7, pc}
 800a6ba:	bf00      	nop
 800a6bc:	50000100 	.word	0x50000100
 800a6c0:	50000400 	.word	0x50000400
 800a6c4:	50000500 	.word	0x50000500
 800a6c8:	50000300 	.word	0x50000300
 800a6cc:	50000700 	.word	0x50000700
 800a6d0:	50000600 	.word	0x50000600

0800a6d4 <LL_EXTI_EnableIT_0_31>:
{
 800a6d4:	b480      	push	{r7}
 800a6d6:	b083      	sub	sp, #12
 800a6d8:	af00      	add	r7, sp, #0
 800a6da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800a6dc:	4b05      	ldr	r3, [pc, #20]	; (800a6f4 <LL_EXTI_EnableIT_0_31+0x20>)
 800a6de:	681a      	ldr	r2, [r3, #0]
 800a6e0:	4904      	ldr	r1, [pc, #16]	; (800a6f4 <LL_EXTI_EnableIT_0_31+0x20>)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	4313      	orrs	r3, r2
 800a6e6:	600b      	str	r3, [r1, #0]
}
 800a6e8:	bf00      	nop
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr
 800a6f4:	40010400 	.word	0x40010400

0800a6f8 <LL_EXTI_EnableIT_32_63>:
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800a700:	4b05      	ldr	r3, [pc, #20]	; (800a718 <LL_EXTI_EnableIT_32_63+0x20>)
 800a702:	6a1a      	ldr	r2, [r3, #32]
 800a704:	4904      	ldr	r1, [pc, #16]	; (800a718 <LL_EXTI_EnableIT_32_63+0x20>)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	4313      	orrs	r3, r2
 800a70a:	620b      	str	r3, [r1, #32]
}
 800a70c:	bf00      	nop
 800a70e:	370c      	adds	r7, #12
 800a710:	46bd      	mov	sp, r7
 800a712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a716:	4770      	bx	lr
 800a718:	40010400 	.word	0x40010400

0800a71c <LL_EXTI_DisableIT_0_31>:
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800a724:	4b06      	ldr	r3, [pc, #24]	; (800a740 <LL_EXTI_DisableIT_0_31+0x24>)
 800a726:	681a      	ldr	r2, [r3, #0]
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	43db      	mvns	r3, r3
 800a72c:	4904      	ldr	r1, [pc, #16]	; (800a740 <LL_EXTI_DisableIT_0_31+0x24>)
 800a72e:	4013      	ands	r3, r2
 800a730:	600b      	str	r3, [r1, #0]
}
 800a732:	bf00      	nop
 800a734:	370c      	adds	r7, #12
 800a736:	46bd      	mov	sp, r7
 800a738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73c:	4770      	bx	lr
 800a73e:	bf00      	nop
 800a740:	40010400 	.word	0x40010400

0800a744 <LL_EXTI_DisableIT_32_63>:
{
 800a744:	b480      	push	{r7}
 800a746:	b083      	sub	sp, #12
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800a74c:	4b06      	ldr	r3, [pc, #24]	; (800a768 <LL_EXTI_DisableIT_32_63+0x24>)
 800a74e:	6a1a      	ldr	r2, [r3, #32]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	43db      	mvns	r3, r3
 800a754:	4904      	ldr	r1, [pc, #16]	; (800a768 <LL_EXTI_DisableIT_32_63+0x24>)
 800a756:	4013      	ands	r3, r2
 800a758:	620b      	str	r3, [r1, #32]
}
 800a75a:	bf00      	nop
 800a75c:	370c      	adds	r7, #12
 800a75e:	46bd      	mov	sp, r7
 800a760:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a764:	4770      	bx	lr
 800a766:	bf00      	nop
 800a768:	40010400 	.word	0x40010400

0800a76c <LL_EXTI_EnableEvent_0_31>:
{
 800a76c:	b480      	push	{r7}
 800a76e:	b083      	sub	sp, #12
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800a774:	4b05      	ldr	r3, [pc, #20]	; (800a78c <LL_EXTI_EnableEvent_0_31+0x20>)
 800a776:	685a      	ldr	r2, [r3, #4]
 800a778:	4904      	ldr	r1, [pc, #16]	; (800a78c <LL_EXTI_EnableEvent_0_31+0x20>)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	4313      	orrs	r3, r2
 800a77e:	604b      	str	r3, [r1, #4]
}
 800a780:	bf00      	nop
 800a782:	370c      	adds	r7, #12
 800a784:	46bd      	mov	sp, r7
 800a786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78a:	4770      	bx	lr
 800a78c:	40010400 	.word	0x40010400

0800a790 <LL_EXTI_EnableEvent_32_63>:
{
 800a790:	b480      	push	{r7}
 800a792:	b083      	sub	sp, #12
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800a798:	4b05      	ldr	r3, [pc, #20]	; (800a7b0 <LL_EXTI_EnableEvent_32_63+0x20>)
 800a79a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a79c:	4904      	ldr	r1, [pc, #16]	; (800a7b0 <LL_EXTI_EnableEvent_32_63+0x20>)
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a7a4:	bf00      	nop
 800a7a6:	370c      	adds	r7, #12
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr
 800a7b0:	40010400 	.word	0x40010400

0800a7b4 <LL_EXTI_DisableEvent_0_31>:
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800a7bc:	4b06      	ldr	r3, [pc, #24]	; (800a7d8 <LL_EXTI_DisableEvent_0_31+0x24>)
 800a7be:	685a      	ldr	r2, [r3, #4]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	43db      	mvns	r3, r3
 800a7c4:	4904      	ldr	r1, [pc, #16]	; (800a7d8 <LL_EXTI_DisableEvent_0_31+0x24>)
 800a7c6:	4013      	ands	r3, r2
 800a7c8:	604b      	str	r3, [r1, #4]
}
 800a7ca:	bf00      	nop
 800a7cc:	370c      	adds	r7, #12
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d4:	4770      	bx	lr
 800a7d6:	bf00      	nop
 800a7d8:	40010400 	.word	0x40010400

0800a7dc <LL_EXTI_DisableEvent_32_63>:
{
 800a7dc:	b480      	push	{r7}
 800a7de:	b083      	sub	sp, #12
 800a7e0:	af00      	add	r7, sp, #0
 800a7e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800a7e4:	4b06      	ldr	r3, [pc, #24]	; (800a800 <LL_EXTI_DisableEvent_32_63+0x24>)
 800a7e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	43db      	mvns	r3, r3
 800a7ec:	4904      	ldr	r1, [pc, #16]	; (800a800 <LL_EXTI_DisableEvent_32_63+0x24>)
 800a7ee:	4013      	ands	r3, r2
 800a7f0:	624b      	str	r3, [r1, #36]	; 0x24
}
 800a7f2:	bf00      	nop
 800a7f4:	370c      	adds	r7, #12
 800a7f6:	46bd      	mov	sp, r7
 800a7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fc:	4770      	bx	lr
 800a7fe:	bf00      	nop
 800a800:	40010400 	.word	0x40010400

0800a804 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800a804:	b480      	push	{r7}
 800a806:	b083      	sub	sp, #12
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800a80c:	4b05      	ldr	r3, [pc, #20]	; (800a824 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a80e:	689a      	ldr	r2, [r3, #8]
 800a810:	4904      	ldr	r1, [pc, #16]	; (800a824 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4313      	orrs	r3, r2
 800a816:	608b      	str	r3, [r1, #8]
}
 800a818:	bf00      	nop
 800a81a:	370c      	adds	r7, #12
 800a81c:	46bd      	mov	sp, r7
 800a81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a822:	4770      	bx	lr
 800a824:	40010400 	.word	0x40010400

0800a828 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800a828:	b480      	push	{r7}
 800a82a:	b083      	sub	sp, #12
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800a830:	4b05      	ldr	r3, [pc, #20]	; (800a848 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a832:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a834:	4904      	ldr	r1, [pc, #16]	; (800a848 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	4313      	orrs	r3, r2
 800a83a:	628b      	str	r3, [r1, #40]	; 0x28
}
 800a83c:	bf00      	nop
 800a83e:	370c      	adds	r7, #12
 800a840:	46bd      	mov	sp, r7
 800a842:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a846:	4770      	bx	lr
 800a848:	40010400 	.word	0x40010400

0800a84c <LL_EXTI_DisableRisingTrig_0_31>:
{
 800a84c:	b480      	push	{r7}
 800a84e:	b083      	sub	sp, #12
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800a854:	4b06      	ldr	r3, [pc, #24]	; (800a870 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a856:	689a      	ldr	r2, [r3, #8]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	43db      	mvns	r3, r3
 800a85c:	4904      	ldr	r1, [pc, #16]	; (800a870 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800a85e:	4013      	ands	r3, r2
 800a860:	608b      	str	r3, [r1, #8]
}
 800a862:	bf00      	nop
 800a864:	370c      	adds	r7, #12
 800a866:	46bd      	mov	sp, r7
 800a868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a86c:	4770      	bx	lr
 800a86e:	bf00      	nop
 800a870:	40010400 	.word	0x40010400

0800a874 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800a874:	b480      	push	{r7}
 800a876:	b083      	sub	sp, #12
 800a878:	af00      	add	r7, sp, #0
 800a87a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800a87c:	4b06      	ldr	r3, [pc, #24]	; (800a898 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800a87e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	43db      	mvns	r3, r3
 800a884:	4904      	ldr	r1, [pc, #16]	; (800a898 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800a886:	4013      	ands	r3, r2
 800a888:	628b      	str	r3, [r1, #40]	; 0x28
}
 800a88a:	bf00      	nop
 800a88c:	370c      	adds	r7, #12
 800a88e:	46bd      	mov	sp, r7
 800a890:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a894:	4770      	bx	lr
 800a896:	bf00      	nop
 800a898:	40010400 	.word	0x40010400

0800a89c <LL_EXTI_EnableFallingTrig_0_31>:
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800a8a4:	4b05      	ldr	r3, [pc, #20]	; (800a8bc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800a8a6:	68da      	ldr	r2, [r3, #12]
 800a8a8:	4904      	ldr	r1, [pc, #16]	; (800a8bc <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	4313      	orrs	r3, r2
 800a8ae:	60cb      	str	r3, [r1, #12]
}
 800a8b0:	bf00      	nop
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr
 800a8bc:	40010400 	.word	0x40010400

0800a8c0 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800a8c0:	b480      	push	{r7}
 800a8c2:	b083      	sub	sp, #12
 800a8c4:	af00      	add	r7, sp, #0
 800a8c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800a8c8:	4b05      	ldr	r3, [pc, #20]	; (800a8e0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800a8ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a8cc:	4904      	ldr	r1, [pc, #16]	; (800a8e0 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800a8d4:	bf00      	nop
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr
 800a8e0:	40010400 	.word	0x40010400

0800a8e4 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800a8ec:	4b06      	ldr	r3, [pc, #24]	; (800a908 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800a8ee:	68da      	ldr	r2, [r3, #12]
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	43db      	mvns	r3, r3
 800a8f4:	4904      	ldr	r1, [pc, #16]	; (800a908 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800a8f6:	4013      	ands	r3, r2
 800a8f8:	60cb      	str	r3, [r1, #12]
}
 800a8fa:	bf00      	nop
 800a8fc:	370c      	adds	r7, #12
 800a8fe:	46bd      	mov	sp, r7
 800a900:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a904:	4770      	bx	lr
 800a906:	bf00      	nop
 800a908:	40010400 	.word	0x40010400

0800a90c <LL_EXTI_DisableFallingTrig_32_63>:
{
 800a90c:	b480      	push	{r7}
 800a90e:	b083      	sub	sp, #12
 800a910:	af00      	add	r7, sp, #0
 800a912:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800a914:	4b06      	ldr	r3, [pc, #24]	; (800a930 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800a916:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	43db      	mvns	r3, r3
 800a91c:	4904      	ldr	r1, [pc, #16]	; (800a930 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800a91e:	4013      	ands	r3, r2
 800a920:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800a922:	bf00      	nop
 800a924:	370c      	adds	r7, #12
 800a926:	46bd      	mov	sp, r7
 800a928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a92c:	4770      	bx	lr
 800a92e:	bf00      	nop
 800a930:	40010400 	.word	0x40010400

0800a934 <LL_EXTI_IsActiveFlag_0_31>:
{
 800a934:	b480      	push	{r7}
 800a936:	b083      	sub	sp, #12
 800a938:	af00      	add	r7, sp, #0
 800a93a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800a93c:	4b07      	ldr	r3, [pc, #28]	; (800a95c <LL_EXTI_IsActiveFlag_0_31+0x28>)
 800a93e:	695a      	ldr	r2, [r3, #20]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	4013      	ands	r3, r2
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	429a      	cmp	r2, r3
 800a948:	d101      	bne.n	800a94e <LL_EXTI_IsActiveFlag_0_31+0x1a>
 800a94a:	2301      	movs	r3, #1
 800a94c:	e000      	b.n	800a950 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 800a94e:	2300      	movs	r3, #0
}
 800a950:	4618      	mov	r0, r3
 800a952:	370c      	adds	r7, #12
 800a954:	46bd      	mov	sp, r7
 800a956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95a:	4770      	bx	lr
 800a95c:	40010400 	.word	0x40010400

0800a960 <LL_EXTI_IsActiveFlag_32_63>:
{
 800a960:	b480      	push	{r7}
 800a962:	b083      	sub	sp, #12
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR2, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 800a968:	4b07      	ldr	r3, [pc, #28]	; (800a988 <LL_EXTI_IsActiveFlag_32_63+0x28>)
 800a96a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	4013      	ands	r3, r2
 800a970:	687a      	ldr	r2, [r7, #4]
 800a972:	429a      	cmp	r2, r3
 800a974:	d101      	bne.n	800a97a <LL_EXTI_IsActiveFlag_32_63+0x1a>
 800a976:	2301      	movs	r3, #1
 800a978:	e000      	b.n	800a97c <LL_EXTI_IsActiveFlag_32_63+0x1c>
 800a97a:	2300      	movs	r3, #0
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	370c      	adds	r7, #12
 800a980:	46bd      	mov	sp, r7
 800a982:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a986:	4770      	bx	lr
 800a988:	40010400 	.word	0x40010400

0800a98c <LL_EXTI_ClearFlag_0_31>:
{
 800a98c:	b480      	push	{r7}
 800a98e:	b083      	sub	sp, #12
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 800a994:	4a04      	ldr	r2, [pc, #16]	; (800a9a8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6153      	str	r3, [r2, #20]
}
 800a99a:	bf00      	nop
 800a99c:	370c      	adds	r7, #12
 800a99e:	46bd      	mov	sp, r7
 800a9a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9a4:	4770      	bx	lr
 800a9a6:	bf00      	nop
 800a9a8:	40010400 	.word	0x40010400

0800a9ac <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 800a9ac:	b480      	push	{r7}
 800a9ae:	b083      	sub	sp, #12
 800a9b0:	af00      	add	r7, sp, #0
 800a9b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 800a9b4:	4a04      	ldr	r2, [pc, #16]	; (800a9c8 <LL_EXTI_ClearFlag_32_63+0x1c>)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	6353      	str	r3, [r2, #52]	; 0x34
}
 800a9ba:	bf00      	nop
 800a9bc:	370c      	adds	r7, #12
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c4:	4770      	bx	lr
 800a9c6:	bf00      	nop
 800a9c8:	40010400 	.word	0x40010400

0800a9cc <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 800a9cc:	b580      	push	{r7, lr}
 800a9ce:	b088      	sub	sp, #32
 800a9d0:	af00      	add	r7, sp, #0
 800a9d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800a9d8:	2300      	movs	r3, #0
 800a9da:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d102      	bne.n	800a9e8 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800a9e2:	2301      	movs	r3, #1
 800a9e4:	77fb      	strb	r3, [r7, #31]
 800a9e6:	e180      	b.n	800acea <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a9f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a9f6:	d102      	bne.n	800a9fe <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	77fb      	strb	r3, [r7, #31]
 800a9fc:	e175      	b.n	800acea <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	7f5b      	ldrb	r3, [r3, #29]
 800aa02:	b2db      	uxtb	r3, r3
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d108      	bne.n	800aa1a <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2200      	movs	r2, #0
 800aa12:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f7fc fc89 	bl	800732c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	681b      	ldr	r3, [r3, #0]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa24:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	685b      	ldr	r3, [r3, #4]
 800aa2e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	695b      	ldr	r3, [r3, #20]
 800aa34:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	68db      	ldr	r3, [r3, #12]
 800aa3a:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800aa40:	4313      	orrs	r3, r2
 800aa42:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	4b98      	ldr	r3, [pc, #608]	; (800acac <HAL_COMP_Init+0x2e0>)
 800aa4c:	4013      	ands	r3, r2
 800aa4e:	687a      	ldr	r2, [r7, #4]
 800aa50:	6812      	ldr	r2, [r2, #0]
 800aa52:	6979      	ldr	r1, [r7, #20]
 800aa54:	430b      	orrs	r3, r1
 800aa56:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d015      	beq.n	800aa92 <HAL_COMP_Init+0xc6>
 800aa66:	69bb      	ldr	r3, [r7, #24]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d112      	bne.n	800aa92 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800aa6c:	4b90      	ldr	r3, [pc, #576]	; (800acb0 <HAL_COMP_Init+0x2e4>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	099b      	lsrs	r3, r3, #6
 800aa72:	4a90      	ldr	r2, [pc, #576]	; (800acb4 <HAL_COMP_Init+0x2e8>)
 800aa74:	fba2 2303 	umull	r2, r3, r2, r3
 800aa78:	099a      	lsrs	r2, r3, #6
 800aa7a:	4613      	mov	r3, r2
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	4413      	add	r3, r2
 800aa80:	009b      	lsls	r3, r3, #2
 800aa82:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800aa84:	e002      	b.n	800aa8c <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	3b01      	subs	r3, #1
 800aa8a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d1f9      	bne.n	800aa86 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	4a88      	ldr	r2, [pc, #544]	; (800acb8 <HAL_COMP_Init+0x2ec>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d028      	beq.n	800aaee <HAL_COMP_Init+0x122>
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4a86      	ldr	r2, [pc, #536]	; (800acbc <HAL_COMP_Init+0x2f0>)
 800aaa2:	4293      	cmp	r3, r2
 800aaa4:	d020      	beq.n	800aae8 <HAL_COMP_Init+0x11c>
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	4a85      	ldr	r2, [pc, #532]	; (800acc0 <HAL_COMP_Init+0x2f4>)
 800aaac:	4293      	cmp	r3, r2
 800aaae:	d018      	beq.n	800aae2 <HAL_COMP_Init+0x116>
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	4a83      	ldr	r2, [pc, #524]	; (800acc4 <HAL_COMP_Init+0x2f8>)
 800aab6:	4293      	cmp	r3, r2
 800aab8:	d010      	beq.n	800aadc <HAL_COMP_Init+0x110>
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	4a82      	ldr	r2, [pc, #520]	; (800acc8 <HAL_COMP_Init+0x2fc>)
 800aac0:	4293      	cmp	r3, r2
 800aac2:	d008      	beq.n	800aad6 <HAL_COMP_Init+0x10a>
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	4a80      	ldr	r2, [pc, #512]	; (800accc <HAL_COMP_Init+0x300>)
 800aaca:	4293      	cmp	r3, r2
 800aacc:	d101      	bne.n	800aad2 <HAL_COMP_Init+0x106>
 800aace:	2301      	movs	r3, #1
 800aad0:	e00f      	b.n	800aaf2 <HAL_COMP_Init+0x126>
 800aad2:	2302      	movs	r3, #2
 800aad4:	e00d      	b.n	800aaf2 <HAL_COMP_Init+0x126>
 800aad6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800aada:	e00a      	b.n	800aaf2 <HAL_COMP_Init+0x126>
 800aadc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aae0:	e007      	b.n	800aaf2 <HAL_COMP_Init+0x126>
 800aae2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800aae6:	e004      	b.n	800aaf2 <HAL_COMP_Init+0x126>
 800aae8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800aaec:	e001      	b.n	800aaf2 <HAL_COMP_Init+0x126>
 800aaee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800aaf2:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	699b      	ldr	r3, [r3, #24]
 800aaf8:	f003 0303 	and.w	r3, r3, #3
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	f000 80b6 	beq.w	800ac6e <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	699b      	ldr	r3, [r3, #24]
 800ab06:	f003 0310 	and.w	r3, r3, #16
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d011      	beq.n	800ab32 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a6e      	ldr	r2, [pc, #440]	; (800accc <HAL_COMP_Init+0x300>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d004      	beq.n	800ab22 <HAL_COMP_Init+0x156>
 800ab18:	687b      	ldr	r3, [r7, #4]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	4a6c      	ldr	r2, [pc, #432]	; (800acd0 <HAL_COMP_Init+0x304>)
 800ab1e:	4293      	cmp	r3, r2
 800ab20:	d103      	bne.n	800ab2a <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800ab22:	6938      	ldr	r0, [r7, #16]
 800ab24:	f7ff fe80 	bl	800a828 <LL_EXTI_EnableRisingTrig_32_63>
 800ab28:	e014      	b.n	800ab54 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 800ab2a:	6938      	ldr	r0, [r7, #16]
 800ab2c:	f7ff fe6a 	bl	800a804 <LL_EXTI_EnableRisingTrig_0_31>
 800ab30:	e010      	b.n	800ab54 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4a65      	ldr	r2, [pc, #404]	; (800accc <HAL_COMP_Init+0x300>)
 800ab38:	4293      	cmp	r3, r2
 800ab3a:	d004      	beq.n	800ab46 <HAL_COMP_Init+0x17a>
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4a63      	ldr	r2, [pc, #396]	; (800acd0 <HAL_COMP_Init+0x304>)
 800ab42:	4293      	cmp	r3, r2
 800ab44:	d103      	bne.n	800ab4e <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 800ab46:	6938      	ldr	r0, [r7, #16]
 800ab48:	f7ff fe94 	bl	800a874 <LL_EXTI_DisableRisingTrig_32_63>
 800ab4c:	e002      	b.n	800ab54 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800ab4e:	6938      	ldr	r0, [r7, #16]
 800ab50:	f7ff fe7c 	bl	800a84c <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	699b      	ldr	r3, [r3, #24]
 800ab58:	f003 0320 	and.w	r3, r3, #32
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d011      	beq.n	800ab84 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a59      	ldr	r2, [pc, #356]	; (800accc <HAL_COMP_Init+0x300>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d004      	beq.n	800ab74 <HAL_COMP_Init+0x1a8>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	4a58      	ldr	r2, [pc, #352]	; (800acd0 <HAL_COMP_Init+0x304>)
 800ab70:	4293      	cmp	r3, r2
 800ab72:	d103      	bne.n	800ab7c <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 800ab74:	6938      	ldr	r0, [r7, #16]
 800ab76:	f7ff fea3 	bl	800a8c0 <LL_EXTI_EnableFallingTrig_32_63>
 800ab7a:	e014      	b.n	800aba6 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 800ab7c:	6938      	ldr	r0, [r7, #16]
 800ab7e:	f7ff fe8d 	bl	800a89c <LL_EXTI_EnableFallingTrig_0_31>
 800ab82:	e010      	b.n	800aba6 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	4a50      	ldr	r2, [pc, #320]	; (800accc <HAL_COMP_Init+0x300>)
 800ab8a:	4293      	cmp	r3, r2
 800ab8c:	d004      	beq.n	800ab98 <HAL_COMP_Init+0x1cc>
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	4a4f      	ldr	r2, [pc, #316]	; (800acd0 <HAL_COMP_Init+0x304>)
 800ab94:	4293      	cmp	r3, r2
 800ab96:	d103      	bne.n	800aba0 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 800ab98:	6938      	ldr	r0, [r7, #16]
 800ab9a:	f7ff feb7 	bl	800a90c <LL_EXTI_DisableFallingTrig_32_63>
 800ab9e:	e002      	b.n	800aba6 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 800aba0:	6938      	ldr	r0, [r7, #16]
 800aba2:	f7ff fe9f 	bl	800a8e4 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4a48      	ldr	r2, [pc, #288]	; (800accc <HAL_COMP_Init+0x300>)
 800abac:	4293      	cmp	r3, r2
 800abae:	d004      	beq.n	800abba <HAL_COMP_Init+0x1ee>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	681b      	ldr	r3, [r3, #0]
 800abb4:	4a46      	ldr	r2, [pc, #280]	; (800acd0 <HAL_COMP_Init+0x304>)
 800abb6:	4293      	cmp	r3, r2
 800abb8:	d103      	bne.n	800abc2 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800abba:	6938      	ldr	r0, [r7, #16]
 800abbc:	f7ff fef6 	bl	800a9ac <LL_EXTI_ClearFlag_32_63>
 800abc0:	e002      	b.n	800abc8 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800abc2:	6938      	ldr	r0, [r7, #16]
 800abc4:	f7ff fee2 	bl	800a98c <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	699b      	ldr	r3, [r3, #24]
 800abcc:	f003 0302 	and.w	r3, r3, #2
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d011      	beq.n	800abf8 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	4a3c      	ldr	r2, [pc, #240]	; (800accc <HAL_COMP_Init+0x300>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d004      	beq.n	800abe8 <HAL_COMP_Init+0x21c>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4a3b      	ldr	r2, [pc, #236]	; (800acd0 <HAL_COMP_Init+0x304>)
 800abe4:	4293      	cmp	r3, r2
 800abe6:	d103      	bne.n	800abf0 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 800abe8:	6938      	ldr	r0, [r7, #16]
 800abea:	f7ff fdd1 	bl	800a790 <LL_EXTI_EnableEvent_32_63>
 800abee:	e014      	b.n	800ac1a <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800abf0:	6938      	ldr	r0, [r7, #16]
 800abf2:	f7ff fdbb 	bl	800a76c <LL_EXTI_EnableEvent_0_31>
 800abf6:	e010      	b.n	800ac1a <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	4a33      	ldr	r2, [pc, #204]	; (800accc <HAL_COMP_Init+0x300>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d004      	beq.n	800ac0c <HAL_COMP_Init+0x240>
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	681b      	ldr	r3, [r3, #0]
 800ac06:	4a32      	ldr	r2, [pc, #200]	; (800acd0 <HAL_COMP_Init+0x304>)
 800ac08:	4293      	cmp	r3, r2
 800ac0a:	d103      	bne.n	800ac14 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 800ac0c:	6938      	ldr	r0, [r7, #16]
 800ac0e:	f7ff fde5 	bl	800a7dc <LL_EXTI_DisableEvent_32_63>
 800ac12:	e002      	b.n	800ac1a <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 800ac14:	6938      	ldr	r0, [r7, #16]
 800ac16:	f7ff fdcd 	bl	800a7b4 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	699b      	ldr	r3, [r3, #24]
 800ac1e:	f003 0301 	and.w	r3, r3, #1
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d011      	beq.n	800ac4a <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a28      	ldr	r2, [pc, #160]	; (800accc <HAL_COMP_Init+0x300>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d004      	beq.n	800ac3a <HAL_COMP_Init+0x26e>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a26      	ldr	r2, [pc, #152]	; (800acd0 <HAL_COMP_Init+0x304>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d103      	bne.n	800ac42 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800ac3a:	6938      	ldr	r0, [r7, #16]
 800ac3c:	f7ff fd5c 	bl	800a6f8 <LL_EXTI_EnableIT_32_63>
 800ac40:	e04b      	b.n	800acda <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800ac42:	6938      	ldr	r0, [r7, #16]
 800ac44:	f7ff fd46 	bl	800a6d4 <LL_EXTI_EnableIT_0_31>
 800ac48:	e047      	b.n	800acda <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	4a1f      	ldr	r2, [pc, #124]	; (800accc <HAL_COMP_Init+0x300>)
 800ac50:	4293      	cmp	r3, r2
 800ac52:	d004      	beq.n	800ac5e <HAL_COMP_Init+0x292>
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	4a1d      	ldr	r2, [pc, #116]	; (800acd0 <HAL_COMP_Init+0x304>)
 800ac5a:	4293      	cmp	r3, r2
 800ac5c:	d103      	bne.n	800ac66 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 800ac5e:	6938      	ldr	r0, [r7, #16]
 800ac60:	f7ff fd70 	bl	800a744 <LL_EXTI_DisableIT_32_63>
 800ac64:	e039      	b.n	800acda <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 800ac66:	6938      	ldr	r0, [r7, #16]
 800ac68:	f7ff fd58 	bl	800a71c <LL_EXTI_DisableIT_0_31>
 800ac6c:	e035      	b.n	800acda <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	4a16      	ldr	r2, [pc, #88]	; (800accc <HAL_COMP_Init+0x300>)
 800ac74:	4293      	cmp	r3, r2
 800ac76:	d004      	beq.n	800ac82 <HAL_COMP_Init+0x2b6>
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	4a14      	ldr	r2, [pc, #80]	; (800acd0 <HAL_COMP_Init+0x304>)
 800ac7e:	4293      	cmp	r3, r2
 800ac80:	d103      	bne.n	800ac8a <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 800ac82:	6938      	ldr	r0, [r7, #16]
 800ac84:	f7ff fdaa 	bl	800a7dc <LL_EXTI_DisableEvent_32_63>
 800ac88:	e002      	b.n	800ac90 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 800ac8a:	6938      	ldr	r0, [r7, #16]
 800ac8c:	f7ff fd92 	bl	800a7b4 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	4a0d      	ldr	r2, [pc, #52]	; (800accc <HAL_COMP_Init+0x300>)
 800ac96:	4293      	cmp	r3, r2
 800ac98:	d004      	beq.n	800aca4 <HAL_COMP_Init+0x2d8>
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	4a0c      	ldr	r2, [pc, #48]	; (800acd0 <HAL_COMP_Init+0x304>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d117      	bne.n	800acd4 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 800aca4:	6938      	ldr	r0, [r7, #16]
 800aca6:	f7ff fd4d 	bl	800a744 <LL_EXTI_DisableIT_32_63>
 800acaa:	e016      	b.n	800acda <HAL_COMP_Init+0x30e>
 800acac:	ff007e0f 	.word	0xff007e0f
 800acb0:	20000c30 	.word	0x20000c30
 800acb4:	053e2d63 	.word	0x053e2d63
 800acb8:	40010200 	.word	0x40010200
 800acbc:	40010204 	.word	0x40010204
 800acc0:	40010208 	.word	0x40010208
 800acc4:	4001020c 	.word	0x4001020c
 800acc8:	40010210 	.word	0x40010210
 800accc:	40010214 	.word	0x40010214
 800acd0:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 800acd4:	6938      	ldr	r0, [r7, #16]
 800acd6:	f7ff fd21 	bl	800a71c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	7f5b      	ldrb	r3, [r3, #29]
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d102      	bne.n	800acea <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	2201      	movs	r2, #1
 800ace8:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800acea:	7ffb      	ldrb	r3, [r7, #31]
}
 800acec:	4618      	mov	r0, r3
 800acee:	3720      	adds	r7, #32
 800acf0:	46bd      	mov	sp, r7
 800acf2:	bd80      	pop	{r7, pc}

0800acf4 <HAL_COMP_Stop>:
  * @brief  Stop the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Stop(COMP_HandleTypeDef *hcomp)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b085      	sub	sp, #20
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800acfc:	2300      	movs	r3, #0
 800acfe:	73fb      	strb	r3, [r7, #15]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d102      	bne.n	800ad0c <HAL_COMP_Stop+0x18>
  {
    status = HAL_ERROR;
 800ad06:	2301      	movs	r3, #1
 800ad08:	73fb      	strb	r3, [r7, #15]
 800ad0a:	e01d      	b.n	800ad48 <HAL_COMP_Stop+0x54>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad1a:	d102      	bne.n	800ad22 <HAL_COMP_Stop+0x2e>
  {
    status = HAL_ERROR;
 800ad1c:	2301      	movs	r3, #1
 800ad1e:	73fb      	strb	r3, [r7, #15]
 800ad20:	e012      	b.n	800ad48 <HAL_COMP_Stop+0x54>
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    /* Check compliant states: HAL_COMP_STATE_READY or HAL_COMP_STATE_BUSY    */
    /* (all states except HAL_COMP_STATE_RESET and except locked status.      */
    if(hcomp->State != HAL_COMP_STATE_RESET)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	7f5b      	ldrb	r3, [r3, #29]
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d00b      	beq.n	800ad44 <HAL_COMP_Stop+0x50>
    {
      /* Disable the selected comparator */
      CLEAR_BIT(hcomp->Instance->CSR, COMP_CSR_EN);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	681a      	ldr	r2, [r3, #0]
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	f022 0201 	bic.w	r2, r2, #1
 800ad3a:	601a      	str	r2, [r3, #0]

      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_READY;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2201      	movs	r2, #1
 800ad40:	775a      	strb	r2, [r3, #29]
 800ad42:	e001      	b.n	800ad48 <HAL_COMP_Stop+0x54>
    }
    else
    {
      status = HAL_ERROR;
 800ad44:	2301      	movs	r3, #1
 800ad46:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800ad48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3714      	adds	r7, #20
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad54:	4770      	bx	lr
	...

0800ad58 <HAL_COMP_IRQHandler>:
  * @brief  Comparator IRQ handler.
  * @param  hcomp  COMP handle
  * @retval None
  */
void HAL_COMP_IRQHandler(COMP_HandleTypeDef *hcomp)
{
 800ad58:	b580      	push	{r7, lr}
 800ad5a:	b084      	sub	sp, #16
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
  /* Get the EXTI line corresponding to the selected COMP instance */
  uint32_t exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	4a2f      	ldr	r2, [pc, #188]	; (800ae24 <HAL_COMP_IRQHandler+0xcc>)
 800ad66:	4293      	cmp	r3, r2
 800ad68:	d028      	beq.n	800adbc <HAL_COMP_IRQHandler+0x64>
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	4a2e      	ldr	r2, [pc, #184]	; (800ae28 <HAL_COMP_IRQHandler+0xd0>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d020      	beq.n	800adb6 <HAL_COMP_IRQHandler+0x5e>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	681b      	ldr	r3, [r3, #0]
 800ad78:	4a2c      	ldr	r2, [pc, #176]	; (800ae2c <HAL_COMP_IRQHandler+0xd4>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d018      	beq.n	800adb0 <HAL_COMP_IRQHandler+0x58>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	4a2b      	ldr	r2, [pc, #172]	; (800ae30 <HAL_COMP_IRQHandler+0xd8>)
 800ad84:	4293      	cmp	r3, r2
 800ad86:	d010      	beq.n	800adaa <HAL_COMP_IRQHandler+0x52>
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a29      	ldr	r2, [pc, #164]	; (800ae34 <HAL_COMP_IRQHandler+0xdc>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d008      	beq.n	800ada4 <HAL_COMP_IRQHandler+0x4c>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a28      	ldr	r2, [pc, #160]	; (800ae38 <HAL_COMP_IRQHandler+0xe0>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d101      	bne.n	800ada0 <HAL_COMP_IRQHandler+0x48>
 800ad9c:	2301      	movs	r3, #1
 800ad9e:	e00f      	b.n	800adc0 <HAL_COMP_IRQHandler+0x68>
 800ada0:	2302      	movs	r3, #2
 800ada2:	e00d      	b.n	800adc0 <HAL_COMP_IRQHandler+0x68>
 800ada4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800ada8:	e00a      	b.n	800adc0 <HAL_COMP_IRQHandler+0x68>
 800adaa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800adae:	e007      	b.n	800adc0 <HAL_COMP_IRQHandler+0x68>
 800adb0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800adb4:	e004      	b.n	800adc0 <HAL_COMP_IRQHandler+0x68>
 800adb6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800adba:	e001      	b.n	800adc0 <HAL_COMP_IRQHandler+0x68>
 800adbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800adc0:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_comp_exti_flag_set = 0UL;
 800adc2:	2300      	movs	r3, #0
 800adc4:	60fb      	str	r3, [r7, #12]

  /* Check COMP EXTI flag */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
  if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	4a1b      	ldr	r2, [pc, #108]	; (800ae38 <HAL_COMP_IRQHandler+0xe0>)
 800adcc:	4293      	cmp	r3, r2
 800adce:	d004      	beq.n	800adda <HAL_COMP_IRQHandler+0x82>
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	4a19      	ldr	r2, [pc, #100]	; (800ae3c <HAL_COMP_IRQHandler+0xe4>)
 800add6:	4293      	cmp	r3, r2
 800add8:	d108      	bne.n	800adec <HAL_COMP_IRQHandler+0x94>
  {
    if(LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 800adda:	68b8      	ldr	r0, [r7, #8]
 800addc:	f7ff fdc0 	bl	800a960 <LL_EXTI_IsActiveFlag_32_63>
 800ade0:	4603      	mov	r3, r0
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d00a      	beq.n	800adfc <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 2UL;
 800ade6:	2302      	movs	r3, #2
 800ade8:	60fb      	str	r3, [r7, #12]
    if(LL_EXTI_IsActiveFlag_32_63(exti_line) != 0UL)
 800adea:	e007      	b.n	800adfc <HAL_COMP_IRQHandler+0xa4>
    }
  }
  else
  {
    if(LL_EXTI_IsActiveFlag_0_31(exti_line) != 0UL)
 800adec:	68b8      	ldr	r0, [r7, #8]
 800adee:	f7ff fda1 	bl	800a934 <LL_EXTI_IsActiveFlag_0_31>
 800adf2:	4603      	mov	r3, r0
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d001      	beq.n	800adfc <HAL_COMP_IRQHandler+0xa4>
    {
      tmp_comp_exti_flag_set = 1UL;
 800adf8:	2301      	movs	r3, #1
 800adfa:	60fb      	str	r3, [r7, #12]
  {
    tmp_comp_exti_flag_set = 1UL;
  }
#endif

  if(tmp_comp_exti_flag_set != 0UL)
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d00c      	beq.n	800ae1c <HAL_COMP_IRQHandler+0xc4>
  {
      /* Clear COMP EXTI line pending bit */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if(tmp_comp_exti_flag_set == 2UL)
 800ae02:	68fb      	ldr	r3, [r7, #12]
 800ae04:	2b02      	cmp	r3, #2
 800ae06:	d103      	bne.n	800ae10 <HAL_COMP_IRQHandler+0xb8>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 800ae08:	68b8      	ldr	r0, [r7, #8]
 800ae0a:	f7ff fdcf 	bl	800a9ac <LL_EXTI_ClearFlag_32_63>
 800ae0e:	e002      	b.n	800ae16 <HAL_COMP_IRQHandler+0xbe>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800ae10:	68b8      	ldr	r0, [r7, #8]
 800ae12:	f7ff fdbb 	bl	800a98c <LL_EXTI_ClearFlag_0_31>

    /* COMP trigger user callback */
#if (USE_HAL_COMP_REGISTER_CALLBACKS == 1)
    hcomp->TriggerCallback(hcomp);
#else
    HAL_COMP_TriggerCallback(hcomp);
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f7fb fada 	bl	80063d0 <HAL_COMP_TriggerCallback>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
  }
}
 800ae1c:	bf00      	nop
 800ae1e:	3710      	adds	r7, #16
 800ae20:	46bd      	mov	sp, r7
 800ae22:	bd80      	pop	{r7, pc}
 800ae24:	40010200 	.word	0x40010200
 800ae28:	40010204 	.word	0x40010204
 800ae2c:	40010208 	.word	0x40010208
 800ae30:	4001020c 	.word	0x4001020c
 800ae34:	40010210 	.word	0x40010210
 800ae38:	40010214 	.word	0x40010214
 800ae3c:	40010218 	.word	0x40010218

0800ae40 <HAL_COMP_GetOutputLevel>:
  *         @arg COMP_OUTPUT_LEVEL_LOW
  *         @arg COMP_OUTPUT_LEVEL_HIGH
  *
  */
uint32_t HAL_COMP_GetOutputLevel(COMP_HandleTypeDef *hcomp)
{
 800ae40:	b480      	push	{r7}
 800ae42:	b083      	sub	sp, #12
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

  return (uint32_t)(READ_BIT(hcomp->Instance->CSR, COMP_CSR_VALUE)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	0f9b      	lsrs	r3, r3, #30
 800ae50:	f003 0301 	and.w	r3, r3, #1
                    >> COMP_OUTPUT_LEVEL_BITOFFSET_POS);
}
 800ae54:	4618      	mov	r0, r3
 800ae56:	370c      	adds	r7, #12
 800ae58:	46bd      	mov	sp, r7
 800ae5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae5e:	4770      	bx	lr

0800ae60 <__NVIC_SetPriorityGrouping>:
{
 800ae60:	b480      	push	{r7}
 800ae62:	b085      	sub	sp, #20
 800ae64:	af00      	add	r7, sp, #0
 800ae66:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	f003 0307 	and.w	r3, r3, #7
 800ae6e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800ae70:	4b0c      	ldr	r3, [pc, #48]	; (800aea4 <__NVIC_SetPriorityGrouping+0x44>)
 800ae72:	68db      	ldr	r3, [r3, #12]
 800ae74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ae76:	68ba      	ldr	r2, [r7, #8]
 800ae78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ae7c:	4013      	ands	r3, r2
 800ae7e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ae84:	68bb      	ldr	r3, [r7, #8]
 800ae86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800ae88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800ae8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ae92:	4a04      	ldr	r2, [pc, #16]	; (800aea4 <__NVIC_SetPriorityGrouping+0x44>)
 800ae94:	68bb      	ldr	r3, [r7, #8]
 800ae96:	60d3      	str	r3, [r2, #12]
}
 800ae98:	bf00      	nop
 800ae9a:	3714      	adds	r7, #20
 800ae9c:	46bd      	mov	sp, r7
 800ae9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea2:	4770      	bx	lr
 800aea4:	e000ed00 	.word	0xe000ed00

0800aea8 <__NVIC_GetPriorityGrouping>:
{
 800aea8:	b480      	push	{r7}
 800aeaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800aeac:	4b04      	ldr	r3, [pc, #16]	; (800aec0 <__NVIC_GetPriorityGrouping+0x18>)
 800aeae:	68db      	ldr	r3, [r3, #12]
 800aeb0:	0a1b      	lsrs	r3, r3, #8
 800aeb2:	f003 0307 	and.w	r3, r3, #7
}
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	46bd      	mov	sp, r7
 800aeba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebe:	4770      	bx	lr
 800aec0:	e000ed00 	.word	0xe000ed00

0800aec4 <__NVIC_EnableIRQ>:
{
 800aec4:	b480      	push	{r7}
 800aec6:	b083      	sub	sp, #12
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	4603      	mov	r3, r0
 800aecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800aece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	db0b      	blt.n	800aeee <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800aed6:	79fb      	ldrb	r3, [r7, #7]
 800aed8:	f003 021f 	and.w	r2, r3, #31
 800aedc:	4907      	ldr	r1, [pc, #28]	; (800aefc <__NVIC_EnableIRQ+0x38>)
 800aede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800aee2:	095b      	lsrs	r3, r3, #5
 800aee4:	2001      	movs	r0, #1
 800aee6:	fa00 f202 	lsl.w	r2, r0, r2
 800aeea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800aeee:	bf00      	nop
 800aef0:	370c      	adds	r7, #12
 800aef2:	46bd      	mov	sp, r7
 800aef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef8:	4770      	bx	lr
 800aefa:	bf00      	nop
 800aefc:	e000e100 	.word	0xe000e100

0800af00 <__NVIC_DisableIRQ>:
{
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	4603      	mov	r3, r0
 800af08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800af0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af0e:	2b00      	cmp	r3, #0
 800af10:	db10      	blt.n	800af34 <__NVIC_DisableIRQ+0x34>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800af12:	79fb      	ldrb	r3, [r7, #7]
 800af14:	f003 021f 	and.w	r2, r3, #31
 800af18:	4909      	ldr	r1, [pc, #36]	; (800af40 <__NVIC_DisableIRQ+0x40>)
 800af1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af1e:	095b      	lsrs	r3, r3, #5
 800af20:	2001      	movs	r0, #1
 800af22:	fa00 f202 	lsl.w	r2, r0, r2
 800af26:	3320      	adds	r3, #32
 800af28:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800af2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800af30:	f3bf 8f6f 	isb	sy
}
 800af34:	bf00      	nop
 800af36:	370c      	adds	r7, #12
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr
 800af40:	e000e100 	.word	0xe000e100

0800af44 <__NVIC_SetPriority>:
{
 800af44:	b480      	push	{r7}
 800af46:	b083      	sub	sp, #12
 800af48:	af00      	add	r7, sp, #0
 800af4a:	4603      	mov	r3, r0
 800af4c:	6039      	str	r1, [r7, #0]
 800af4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800af50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af54:	2b00      	cmp	r3, #0
 800af56:	db0a      	blt.n	800af6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	b2da      	uxtb	r2, r3
 800af5c:	490c      	ldr	r1, [pc, #48]	; (800af90 <__NVIC_SetPriority+0x4c>)
 800af5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800af62:	0112      	lsls	r2, r2, #4
 800af64:	b2d2      	uxtb	r2, r2
 800af66:	440b      	add	r3, r1
 800af68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800af6c:	e00a      	b.n	800af84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	b2da      	uxtb	r2, r3
 800af72:	4908      	ldr	r1, [pc, #32]	; (800af94 <__NVIC_SetPriority+0x50>)
 800af74:	79fb      	ldrb	r3, [r7, #7]
 800af76:	f003 030f 	and.w	r3, r3, #15
 800af7a:	3b04      	subs	r3, #4
 800af7c:	0112      	lsls	r2, r2, #4
 800af7e:	b2d2      	uxtb	r2, r2
 800af80:	440b      	add	r3, r1
 800af82:	761a      	strb	r2, [r3, #24]
}
 800af84:	bf00      	nop
 800af86:	370c      	adds	r7, #12
 800af88:	46bd      	mov	sp, r7
 800af8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8e:	4770      	bx	lr
 800af90:	e000e100 	.word	0xe000e100
 800af94:	e000ed00 	.word	0xe000ed00

0800af98 <NVIC_EncodePriority>:
{
 800af98:	b480      	push	{r7}
 800af9a:	b089      	sub	sp, #36	; 0x24
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	60b9      	str	r1, [r7, #8]
 800afa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	f003 0307 	and.w	r3, r3, #7
 800afaa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800afac:	69fb      	ldr	r3, [r7, #28]
 800afae:	f1c3 0307 	rsb	r3, r3, #7
 800afb2:	2b04      	cmp	r3, #4
 800afb4:	bf28      	it	cs
 800afb6:	2304      	movcs	r3, #4
 800afb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800afba:	69fb      	ldr	r3, [r7, #28]
 800afbc:	3304      	adds	r3, #4
 800afbe:	2b06      	cmp	r3, #6
 800afc0:	d902      	bls.n	800afc8 <NVIC_EncodePriority+0x30>
 800afc2:	69fb      	ldr	r3, [r7, #28]
 800afc4:	3b03      	subs	r3, #3
 800afc6:	e000      	b.n	800afca <NVIC_EncodePriority+0x32>
 800afc8:	2300      	movs	r3, #0
 800afca:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800afcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800afd0:	69bb      	ldr	r3, [r7, #24]
 800afd2:	fa02 f303 	lsl.w	r3, r2, r3
 800afd6:	43da      	mvns	r2, r3
 800afd8:	68bb      	ldr	r3, [r7, #8]
 800afda:	401a      	ands	r2, r3
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800afe0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	fa01 f303 	lsl.w	r3, r1, r3
 800afea:	43d9      	mvns	r1, r3
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800aff0:	4313      	orrs	r3, r2
}
 800aff2:	4618      	mov	r0, r3
 800aff4:	3724      	adds	r7, #36	; 0x24
 800aff6:	46bd      	mov	sp, r7
 800aff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affc:	4770      	bx	lr
	...

0800b000 <SysTick_Config>:
{
 800b000:	b580      	push	{r7, lr}
 800b002:	b082      	sub	sp, #8
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	3b01      	subs	r3, #1
 800b00c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b010:	d301      	bcc.n	800b016 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800b012:	2301      	movs	r3, #1
 800b014:	e00f      	b.n	800b036 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800b016:	4a0a      	ldr	r2, [pc, #40]	; (800b040 <SysTick_Config+0x40>)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	3b01      	subs	r3, #1
 800b01c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800b01e:	210f      	movs	r1, #15
 800b020:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b024:	f7ff ff8e 	bl	800af44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800b028:	4b05      	ldr	r3, [pc, #20]	; (800b040 <SysTick_Config+0x40>)
 800b02a:	2200      	movs	r2, #0
 800b02c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800b02e:	4b04      	ldr	r3, [pc, #16]	; (800b040 <SysTick_Config+0x40>)
 800b030:	2207      	movs	r2, #7
 800b032:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800b034:	2300      	movs	r3, #0
}
 800b036:	4618      	mov	r0, r3
 800b038:	3708      	adds	r7, #8
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}
 800b03e:	bf00      	nop
 800b040:	e000e010 	.word	0xe000e010

0800b044 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800b044:	b580      	push	{r7, lr}
 800b046:	b082      	sub	sp, #8
 800b048:	af00      	add	r7, sp, #0
 800b04a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800b04c:	6878      	ldr	r0, [r7, #4]
 800b04e:	f7ff ff07 	bl	800ae60 <__NVIC_SetPriorityGrouping>
}
 800b052:	bf00      	nop
 800b054:	3708      	adds	r7, #8
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}

0800b05a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800b05a:	b580      	push	{r7, lr}
 800b05c:	b086      	sub	sp, #24
 800b05e:	af00      	add	r7, sp, #0
 800b060:	4603      	mov	r3, r0
 800b062:	60b9      	str	r1, [r7, #8]
 800b064:	607a      	str	r2, [r7, #4]
 800b066:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800b068:	f7ff ff1e 	bl	800aea8 <__NVIC_GetPriorityGrouping>
 800b06c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800b06e:	687a      	ldr	r2, [r7, #4]
 800b070:	68b9      	ldr	r1, [r7, #8]
 800b072:	6978      	ldr	r0, [r7, #20]
 800b074:	f7ff ff90 	bl	800af98 <NVIC_EncodePriority>
 800b078:	4602      	mov	r2, r0
 800b07a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b07e:	4611      	mov	r1, r2
 800b080:	4618      	mov	r0, r3
 800b082:	f7ff ff5f 	bl	800af44 <__NVIC_SetPriority>
}
 800b086:	bf00      	nop
 800b088:	3718      	adds	r7, #24
 800b08a:	46bd      	mov	sp, r7
 800b08c:	bd80      	pop	{r7, pc}

0800b08e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800b08e:	b580      	push	{r7, lr}
 800b090:	b082      	sub	sp, #8
 800b092:	af00      	add	r7, sp, #0
 800b094:	4603      	mov	r3, r0
 800b096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800b098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b09c:	4618      	mov	r0, r3
 800b09e:	f7ff ff11 	bl	800aec4 <__NVIC_EnableIRQ>
}
 800b0a2:	bf00      	nop
 800b0a4:	3708      	adds	r7, #8
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}

0800b0aa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800b0aa:	b580      	push	{r7, lr}
 800b0ac:	b082      	sub	sp, #8
 800b0ae:	af00      	add	r7, sp, #0
 800b0b0:	4603      	mov	r3, r0
 800b0b2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800b0b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b0b8:	4618      	mov	r0, r3
 800b0ba:	f7ff ff21 	bl	800af00 <__NVIC_DisableIRQ>
}
 800b0be:	bf00      	nop
 800b0c0:	3708      	adds	r7, #8
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b082      	sub	sp, #8
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800b0ce:	6878      	ldr	r0, [r7, #4]
 800b0d0:	f7ff ff96 	bl	800b000 <SysTick_Config>
 800b0d4:	4603      	mov	r3, r0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3708      	adds	r7, #8
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}

0800b0de <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800b0de:	b580      	push	{r7, lr}
 800b0e0:	b082      	sub	sp, #8
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d101      	bne.n	800b0f0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	e014      	b.n	800b11a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	791b      	ldrb	r3, [r3, #4]
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d105      	bne.n	800b106 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2200      	movs	r2, #0
 800b0fe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f7fc f9d1 	bl	80074a8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2202      	movs	r2, #2
 800b10a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2200      	movs	r2, #0
 800b110:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2201      	movs	r2, #1
 800b116:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800b118:	2300      	movs	r3, #0
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3708      	adds	r7, #8
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}

0800b122 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b122:	b580      	push	{r7, lr}
 800b124:	b082      	sub	sp, #8
 800b126:	af00      	add	r7, sp, #0
 800b128:	6078      	str	r0, [r7, #4]
 800b12a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	795b      	ldrb	r3, [r3, #5]
 800b130:	2b01      	cmp	r3, #1
 800b132:	d101      	bne.n	800b138 <HAL_DAC_Start+0x16>
 800b134:	2302      	movs	r3, #2
 800b136:	e043      	b.n	800b1c0 <HAL_DAC_Start+0x9e>
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	2201      	movs	r2, #1
 800b13c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	2202      	movs	r2, #2
 800b142:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	6819      	ldr	r1, [r3, #0]
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	f003 0310 	and.w	r3, r3, #16
 800b150:	2201      	movs	r2, #1
 800b152:	409a      	lsls	r2, r3
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	430a      	orrs	r2, r1
 800b15a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 800b15c:	2001      	movs	r0, #1
 800b15e:	f7fd fe65 	bl	8008e2c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800b162:	683b      	ldr	r3, [r7, #0]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d10f      	bne.n	800b188 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800b172:	2b02      	cmp	r3, #2
 800b174:	d11d      	bne.n	800b1b2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	681b      	ldr	r3, [r3, #0]
 800b17a:	685a      	ldr	r2, [r3, #4]
 800b17c:	687b      	ldr	r3, [r7, #4]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	f042 0201 	orr.w	r2, r2, #1
 800b184:	605a      	str	r2, [r3, #4]
 800b186:	e014      	b.n	800b1b2 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800b192:	683b      	ldr	r3, [r7, #0]
 800b194:	f003 0310 	and.w	r3, r3, #16
 800b198:	2102      	movs	r1, #2
 800b19a:	fa01 f303 	lsl.w	r3, r1, r3
 800b19e:	429a      	cmp	r2, r3
 800b1a0:	d107      	bne.n	800b1b2 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	685a      	ldr	r2, [r3, #4]
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f042 0202 	orr.w	r2, r2, #2
 800b1b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	2201      	movs	r2, #1
 800b1b6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800b1be:	2300      	movs	r3, #0
}
 800b1c0:	4618      	mov	r0, r3
 800b1c2:	3708      	adds	r7, #8
 800b1c4:	46bd      	mov	sp, r7
 800b1c6:	bd80      	pop	{r7, pc}

0800b1c8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800b1c8:	b580      	push	{r7, lr}
 800b1ca:	b086      	sub	sp, #24
 800b1cc:	af00      	add	r7, sp, #0
 800b1ce:	60f8      	str	r0, [r7, #12]
 800b1d0:	60b9      	str	r1, [r7, #8]
 800b1d2:	607a      	str	r2, [r7, #4]
 800b1d4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	795b      	ldrb	r3, [r3, #5]
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d101      	bne.n	800b1e6 <HAL_DAC_Start_DMA+0x1e>
 800b1e2:	2302      	movs	r3, #2
 800b1e4:	e0a1      	b.n	800b32a <HAL_DAC_Start_DMA+0x162>
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	2201      	movs	r2, #1
 800b1ea:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	2202      	movs	r2, #2
 800b1f0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d12a      	bne.n	800b24e <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	689b      	ldr	r3, [r3, #8]
 800b1fc:	4a4d      	ldr	r2, [pc, #308]	; (800b334 <HAL_DAC_Start_DMA+0x16c>)
 800b1fe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	689b      	ldr	r3, [r3, #8]
 800b204:	4a4c      	ldr	r2, [pc, #304]	; (800b338 <HAL_DAC_Start_DMA+0x170>)
 800b206:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	689b      	ldr	r3, [r3, #8]
 800b20c:	4a4b      	ldr	r2, [pc, #300]	; (800b33c <HAL_DAC_Start_DMA+0x174>)
 800b20e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	681a      	ldr	r2, [r3, #0]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b21e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800b220:	6a3b      	ldr	r3, [r7, #32]
 800b222:	2b04      	cmp	r3, #4
 800b224:	d009      	beq.n	800b23a <HAL_DAC_Start_DMA+0x72>
 800b226:	2b08      	cmp	r3, #8
 800b228:	d00c      	beq.n	800b244 <HAL_DAC_Start_DMA+0x7c>
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d000      	beq.n	800b230 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800b22e:	e039      	b.n	800b2a4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	3308      	adds	r3, #8
 800b236:	613b      	str	r3, [r7, #16]
        break;
 800b238:	e034      	b.n	800b2a4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	330c      	adds	r3, #12
 800b240:	613b      	str	r3, [r7, #16]
        break;
 800b242:	e02f      	b.n	800b2a4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	3310      	adds	r3, #16
 800b24a:	613b      	str	r3, [r7, #16]
        break;
 800b24c:	e02a      	b.n	800b2a4 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	68db      	ldr	r3, [r3, #12]
 800b252:	4a3b      	ldr	r2, [pc, #236]	; (800b340 <HAL_DAC_Start_DMA+0x178>)
 800b254:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	68db      	ldr	r3, [r3, #12]
 800b25a:	4a3a      	ldr	r2, [pc, #232]	; (800b344 <HAL_DAC_Start_DMA+0x17c>)
 800b25c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	68db      	ldr	r3, [r3, #12]
 800b262:	4a39      	ldr	r2, [pc, #228]	; (800b348 <HAL_DAC_Start_DMA+0x180>)
 800b264:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	681a      	ldr	r2, [r3, #0]
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800b274:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800b276:	6a3b      	ldr	r3, [r7, #32]
 800b278:	2b04      	cmp	r3, #4
 800b27a:	d009      	beq.n	800b290 <HAL_DAC_Start_DMA+0xc8>
 800b27c:	2b08      	cmp	r3, #8
 800b27e:	d00c      	beq.n	800b29a <HAL_DAC_Start_DMA+0xd2>
 800b280:	2b00      	cmp	r3, #0
 800b282:	d000      	beq.n	800b286 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800b284:	e00e      	b.n	800b2a4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800b286:	68fb      	ldr	r3, [r7, #12]
 800b288:	681b      	ldr	r3, [r3, #0]
 800b28a:	3314      	adds	r3, #20
 800b28c:	613b      	str	r3, [r7, #16]
        break;
 800b28e:	e009      	b.n	800b2a4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	681b      	ldr	r3, [r3, #0]
 800b294:	3318      	adds	r3, #24
 800b296:	613b      	str	r3, [r7, #16]
        break;
 800b298:	e004      	b.n	800b2a4 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	331c      	adds	r3, #28
 800b2a0:	613b      	str	r3, [r7, #16]
        break;
 800b2a2:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 800b2a4:	68bb      	ldr	r3, [r7, #8]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d111      	bne.n	800b2ce <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b2b8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	6898      	ldr	r0, [r3, #8]
 800b2be:	6879      	ldr	r1, [r7, #4]
 800b2c0:	683b      	ldr	r3, [r7, #0]
 800b2c2:	693a      	ldr	r2, [r7, #16]
 800b2c4:	f000 fbd2 	bl	800ba6c <HAL_DMA_Start_IT>
 800b2c8:	4603      	mov	r3, r0
 800b2ca:	75fb      	strb	r3, [r7, #23]
 800b2cc:	e010      	b.n	800b2f0 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	681a      	ldr	r2, [r3, #0]
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800b2dc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800b2de:	68fb      	ldr	r3, [r7, #12]
 800b2e0:	68d8      	ldr	r0, [r3, #12]
 800b2e2:	6879      	ldr	r1, [r7, #4]
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	693a      	ldr	r2, [r7, #16]
 800b2e8:	f000 fbc0 	bl	800ba6c <HAL_DMA_Start_IT>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800b2f6:	7dfb      	ldrb	r3, [r7, #23]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d10f      	bne.n	800b31c <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	6819      	ldr	r1, [r3, #0]
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	f003 0310 	and.w	r3, r3, #16
 800b308:	2201      	movs	r2, #1
 800b30a:	409a      	lsls	r2, r3
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	430a      	orrs	r2, r1
 800b312:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 800b314:	2001      	movs	r0, #1
 800b316:	f7fd fd89 	bl	8008e2c <HAL_Delay>
 800b31a:	e005      	b.n	800b328 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	691b      	ldr	r3, [r3, #16]
 800b320:	f043 0204 	orr.w	r2, r3, #4
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800b328:	7dfb      	ldrb	r3, [r7, #23]
}
 800b32a:	4618      	mov	r0, r3
 800b32c:	3718      	adds	r7, #24
 800b32e:	46bd      	mov	sp, r7
 800b330:	bd80      	pop	{r7, pc}
 800b332:	bf00      	nop
 800b334:	0800b809 	.word	0x0800b809
 800b338:	0800b82b 	.word	0x0800b82b
 800b33c:	0800b847 	.word	0x0800b847
 800b340:	0800b8b1 	.word	0x0800b8b1
 800b344:	0800b8d3 	.word	0x0800b8d3
 800b348:	0800b8ef 	.word	0x0800b8ef

0800b34c <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	6078      	str	r0, [r7, #4]
 800b354:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	6819      	ldr	r1, [r3, #0]
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	f003 0310 	and.w	r3, r3, #16
 800b362:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800b366:	fa02 f303 	lsl.w	r3, r2, r3
 800b36a:	43da      	mvns	r2, r3
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	400a      	ands	r2, r1
 800b372:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	6819      	ldr	r1, [r3, #0]
 800b37a:	683b      	ldr	r3, [r7, #0]
 800b37c:	f003 0310 	and.w	r3, r3, #16
 800b380:	2201      	movs	r2, #1
 800b382:	fa02 f303 	lsl.w	r3, r2, r3
 800b386:	43da      	mvns	r2, r3
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	400a      	ands	r2, r1
 800b38e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800b390:	2001      	movs	r0, #1
 800b392:	f7fd fd4b 	bl	8008e2c <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d10f      	bne.n	800b3bc <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	689b      	ldr	r3, [r3, #8]
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	f000 fbde 	bl	800bb62 <HAL_DMA_Abort>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	681a      	ldr	r2, [r3, #0]
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b3b8:	601a      	str	r2, [r3, #0]
 800b3ba:	e00e      	b.n	800b3da <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f000 fbce 	bl	800bb62 <HAL_DMA_Abort>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	681a      	ldr	r2, [r3, #0]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800b3d8:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800b3da:	7bfb      	ldrb	r3, [r7, #15]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d003      	beq.n	800b3e8 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	2204      	movs	r2, #4
 800b3e4:	711a      	strb	r2, [r3, #4]
 800b3e6:	e002      	b.n	800b3ee <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	2201      	movs	r2, #1
 800b3ec:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800b3ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3710      	adds	r7, #16
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}

0800b3f8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800b3f8:	b480      	push	{r7}
 800b3fa:	b087      	sub	sp, #28
 800b3fc:	af00      	add	r7, sp, #0
 800b3fe:	60f8      	str	r0, [r7, #12]
 800b400:	60b9      	str	r1, [r7, #8]
 800b402:	607a      	str	r2, [r7, #4]
 800b404:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800b406:	2300      	movs	r3, #0
 800b408:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800b416:	68bb      	ldr	r3, [r7, #8]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d105      	bne.n	800b428 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800b41c:	697a      	ldr	r2, [r7, #20]
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	4413      	add	r3, r2
 800b422:	3308      	adds	r3, #8
 800b424:	617b      	str	r3, [r7, #20]
 800b426:	e004      	b.n	800b432 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800b428:	697a      	ldr	r2, [r7, #20]
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	4413      	add	r3, r2
 800b42e:	3314      	adds	r3, #20
 800b430:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800b432:	697b      	ldr	r3, [r7, #20]
 800b434:	461a      	mov	r2, r3
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800b43a:	2300      	movs	r3, #0
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	371c      	adds	r7, #28
 800b440:	46bd      	mov	sp, r7
 800b442:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b446:	4770      	bx	lr

0800b448 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b448:	b480      	push	{r7}
 800b44a:	b083      	sub	sp, #12
 800b44c:	af00      	add	r7, sp, #0
 800b44e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800b450:	bf00      	nop
 800b452:	370c      	adds	r7, #12
 800b454:	46bd      	mov	sp, r7
 800b456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45a:	4770      	bx	lr

0800b45c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b083      	sub	sp, #12
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800b464:	bf00      	nop
 800b466:	370c      	adds	r7, #12
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr

0800b470 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800b470:	b480      	push	{r7}
 800b472:	b083      	sub	sp, #12
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800b478:	bf00      	nop
 800b47a:	370c      	adds	r7, #12
 800b47c:	46bd      	mov	sp, r7
 800b47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b482:	4770      	bx	lr

0800b484 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800b484:	b480      	push	{r7}
 800b486:	b083      	sub	sp, #12
 800b488:	af00      	add	r7, sp, #0
 800b48a:	6078      	str	r0, [r7, #4]
 800b48c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 800b48e:	683b      	ldr	r3, [r7, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d103      	bne.n	800b49c <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b49a:	e002      	b.n	800b4a2 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	370c      	adds	r7, #12
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr
	...

0800b4b0 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b08a      	sub	sp, #40	; 0x28
 800b4b4:	af00      	add	r7, sp, #0
 800b4b6:	60f8      	str	r0, [r7, #12]
 800b4b8:	60b9      	str	r1, [r7, #8]
 800b4ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800b4bc:	2300      	movs	r3, #0
 800b4be:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	795b      	ldrb	r3, [r3, #5]
 800b4c4:	2b01      	cmp	r3, #1
 800b4c6:	d101      	bne.n	800b4cc <HAL_DAC_ConfigChannel+0x1c>
 800b4c8:	2302      	movs	r3, #2
 800b4ca:	e194      	b.n	800b7f6 <HAL_DAC_ConfigChannel+0x346>
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	2201      	movs	r2, #1
 800b4d0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800b4d2:	68fb      	ldr	r3, [r7, #12]
 800b4d4:	2202      	movs	r2, #2
 800b4d6:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	689b      	ldr	r3, [r3, #8]
 800b4dc:	2b04      	cmp	r3, #4
 800b4de:	d174      	bne.n	800b5ca <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d137      	bne.n	800b556 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800b4e6:	f7fd fc95 	bl	8008e14 <HAL_GetTick>
 800b4ea:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800b4ec:	e011      	b.n	800b512 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800b4ee:	f7fd fc91 	bl	8008e14 <HAL_GetTick>
 800b4f2:	4602      	mov	r2, r0
 800b4f4:	69fb      	ldr	r3, [r7, #28]
 800b4f6:	1ad3      	subs	r3, r2, r3
 800b4f8:	2b01      	cmp	r3, #1
 800b4fa:	d90a      	bls.n	800b512 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	691b      	ldr	r3, [r3, #16]
 800b500:	f043 0208 	orr.w	r2, r3, #8
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2203      	movs	r2, #3
 800b50c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800b50e:	2303      	movs	r3, #3
 800b510:	e171      	b.n	800b7f6 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	681b      	ldr	r3, [r3, #0]
 800b516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d1e6      	bne.n	800b4ee <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800b520:	2001      	movs	r0, #1
 800b522:	f7fd fc83 	bl	8008e2c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	68ba      	ldr	r2, [r7, #8]
 800b52c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b52e:	641a      	str	r2, [r3, #64]	; 0x40
 800b530:	e01e      	b.n	800b570 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800b532:	f7fd fc6f 	bl	8008e14 <HAL_GetTick>
 800b536:	4602      	mov	r2, r0
 800b538:	69fb      	ldr	r3, [r7, #28]
 800b53a:	1ad3      	subs	r3, r2, r3
 800b53c:	2b01      	cmp	r3, #1
 800b53e:	d90a      	bls.n	800b556 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800b540:	68fb      	ldr	r3, [r7, #12]
 800b542:	691b      	ldr	r3, [r3, #16]
 800b544:	f043 0208 	orr.w	r2, r3, #8
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	2203      	movs	r2, #3
 800b550:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800b552:	2303      	movs	r3, #3
 800b554:	e14f      	b.n	800b7f6 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	dbe8      	blt.n	800b532 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800b560:	2001      	movs	r0, #1
 800b562:	f7fd fc63 	bl	8008e2c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	68ba      	ldr	r2, [r7, #8]
 800b56c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b56e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f003 0310 	and.w	r3, r3, #16
 800b57c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800b580:	fa01 f303 	lsl.w	r3, r1, r3
 800b584:	43db      	mvns	r3, r3
 800b586:	ea02 0103 	and.w	r1, r2, r3
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	f003 0310 	and.w	r3, r3, #16
 800b594:	409a      	lsls	r2, r3
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	430a      	orrs	r2, r1
 800b59c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f003 0310 	and.w	r3, r3, #16
 800b5aa:	21ff      	movs	r1, #255	; 0xff
 800b5ac:	fa01 f303 	lsl.w	r3, r1, r3
 800b5b0:	43db      	mvns	r3, r3
 800b5b2:	ea02 0103 	and.w	r1, r2, r3
 800b5b6:	68bb      	ldr	r3, [r7, #8]
 800b5b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f003 0310 	and.w	r3, r3, #16
 800b5c0:	409a      	lsls	r2, r3
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	430a      	orrs	r2, r1
 800b5c8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800b5ca:	68bb      	ldr	r3, [r7, #8]
 800b5cc:	69db      	ldr	r3, [r3, #28]
 800b5ce:	2b01      	cmp	r3, #1
 800b5d0:	d11d      	bne.n	800b60e <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800b5d2:	68fb      	ldr	r3, [r7, #12]
 800b5d4:	681b      	ldr	r3, [r3, #0]
 800b5d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5d8:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f003 0310 	and.w	r3, r3, #16
 800b5e0:	221f      	movs	r2, #31
 800b5e2:	fa02 f303 	lsl.w	r3, r2, r3
 800b5e6:	43db      	mvns	r3, r3
 800b5e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5ea:	4013      	ands	r3, r2
 800b5ec:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800b5ee:	68bb      	ldr	r3, [r7, #8]
 800b5f0:	6a1b      	ldr	r3, [r3, #32]
 800b5f2:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f003 0310 	and.w	r3, r3, #16
 800b5fa:	69ba      	ldr	r2, [r7, #24]
 800b5fc:	fa02 f303 	lsl.w	r3, r2, r3
 800b600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b602:	4313      	orrs	r3, r2
 800b604:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b60c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800b60e:	68fb      	ldr	r3, [r7, #12]
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b614:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f003 0310 	and.w	r3, r3, #16
 800b61c:	2207      	movs	r2, #7
 800b61e:	fa02 f303 	lsl.w	r3, r2, r3
 800b622:	43db      	mvns	r3, r3
 800b624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b626:	4013      	ands	r3, r2
 800b628:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800b62a:	68bb      	ldr	r3, [r7, #8]
 800b62c:	699b      	ldr	r3, [r3, #24]
 800b62e:	f003 0301 	and.w	r3, r3, #1
 800b632:	2b00      	cmp	r3, #0
 800b634:	d002      	beq.n	800b63c <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800b636:	2300      	movs	r3, #0
 800b638:	623b      	str	r3, [r7, #32]
 800b63a:	e011      	b.n	800b660 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	699b      	ldr	r3, [r3, #24]
 800b640:	f003 0302 	and.w	r3, r3, #2
 800b644:	2b00      	cmp	r3, #0
 800b646:	d002      	beq.n	800b64e <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800b648:	2301      	movs	r3, #1
 800b64a:	623b      	str	r3, [r7, #32]
 800b64c:	e008      	b.n	800b660 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800b64e:	68bb      	ldr	r3, [r7, #8]
 800b650:	695b      	ldr	r3, [r3, #20]
 800b652:	2b00      	cmp	r3, #0
 800b654:	d102      	bne.n	800b65c <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800b656:	2301      	movs	r3, #1
 800b658:	623b      	str	r3, [r7, #32]
 800b65a:	e001      	b.n	800b660 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800b65c:	2300      	movs	r3, #0
 800b65e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	689a      	ldr	r2, [r3, #8]
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	695b      	ldr	r3, [r3, #20]
 800b668:	4313      	orrs	r3, r2
 800b66a:	6a3a      	ldr	r2, [r7, #32]
 800b66c:	4313      	orrs	r3, r2
 800b66e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f003 0310 	and.w	r3, r3, #16
 800b676:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b67a:	fa02 f303 	lsl.w	r3, r2, r3
 800b67e:	43db      	mvns	r3, r3
 800b680:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b682:	4013      	ands	r3, r2
 800b684:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	791b      	ldrb	r3, [r3, #4]
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d102      	bne.n	800b694 <HAL_DAC_ConfigChannel+0x1e4>
 800b68e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b692:	e000      	b.n	800b696 <HAL_DAC_ConfigChannel+0x1e6>
 800b694:	2300      	movs	r3, #0
 800b696:	69ba      	ldr	r2, [r7, #24]
 800b698:	4313      	orrs	r3, r2
 800b69a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f003 0310 	and.w	r3, r3, #16
 800b6a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b6a6:	fa02 f303 	lsl.w	r3, r2, r3
 800b6aa:	43db      	mvns	r3, r3
 800b6ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6ae:	4013      	ands	r3, r2
 800b6b0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800b6b2:	68bb      	ldr	r3, [r7, #8]
 800b6b4:	795b      	ldrb	r3, [r3, #5]
 800b6b6:	2b01      	cmp	r3, #1
 800b6b8:	d102      	bne.n	800b6c0 <HAL_DAC_ConfigChannel+0x210>
 800b6ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b6be:	e000      	b.n	800b6c2 <HAL_DAC_ConfigChannel+0x212>
 800b6c0:	2300      	movs	r3, #0
 800b6c2:	69ba      	ldr	r2, [r7, #24]
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800b6c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6ca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800b6ce:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800b6d0:	68bb      	ldr	r3, [r7, #8]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	2b02      	cmp	r3, #2
 800b6d6:	d114      	bne.n	800b702 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800b6d8:	f001 fc28 	bl	800cf2c <HAL_RCC_GetHCLKFreq>
 800b6dc:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	4a47      	ldr	r2, [pc, #284]	; (800b800 <HAL_DAC_ConfigChannel+0x350>)
 800b6e2:	4293      	cmp	r3, r2
 800b6e4:	d904      	bls.n	800b6f0 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800b6e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b6ec:	627b      	str	r3, [r7, #36]	; 0x24
 800b6ee:	e00d      	b.n	800b70c <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800b6f0:	697b      	ldr	r3, [r7, #20]
 800b6f2:	4a44      	ldr	r2, [pc, #272]	; (800b804 <HAL_DAC_ConfigChannel+0x354>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d909      	bls.n	800b70c <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800b6f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b6fe:	627b      	str	r3, [r7, #36]	; 0x24
 800b700:	e004      	b.n	800b70c <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b708:	4313      	orrs	r3, r2
 800b70a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f003 0310 	and.w	r3, r3, #16
 800b712:	69ba      	ldr	r2, [r7, #24]
 800b714:	fa02 f303 	lsl.w	r3, r2, r3
 800b718:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b71a:	4313      	orrs	r3, r2
 800b71c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b724:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	6819      	ldr	r1, [r3, #0]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	f003 0310 	and.w	r3, r3, #16
 800b732:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800b736:	fa02 f303 	lsl.w	r3, r2, r3
 800b73a:	43da      	mvns	r2, r3
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	681b      	ldr	r3, [r3, #0]
 800b740:	400a      	ands	r2, r1
 800b742:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	f003 0310 	and.w	r3, r3, #16
 800b752:	f640 72fe 	movw	r2, #4094	; 0xffe
 800b756:	fa02 f303 	lsl.w	r3, r2, r3
 800b75a:	43db      	mvns	r3, r3
 800b75c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b75e:	4013      	ands	r3, r2
 800b760:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	68db      	ldr	r3, [r3, #12]
 800b766:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f003 0310 	and.w	r3, r3, #16
 800b76e:	69ba      	ldr	r2, [r7, #24]
 800b770:	fa02 f303 	lsl.w	r3, r2, r3
 800b774:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b776:	4313      	orrs	r3, r2
 800b778:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b780:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	6819      	ldr	r1, [r3, #0]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f003 0310 	and.w	r3, r3, #16
 800b78e:	22c0      	movs	r2, #192	; 0xc0
 800b790:	fa02 f303 	lsl.w	r3, r2, r3
 800b794:	43da      	mvns	r2, r3
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	400a      	ands	r2, r1
 800b79c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	68db      	ldr	r3, [r3, #12]
 800b7a2:	089b      	lsrs	r3, r3, #2
 800b7a4:	f003 030f 	and.w	r3, r3, #15
 800b7a8:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	691b      	ldr	r3, [r3, #16]
 800b7ae:	089b      	lsrs	r3, r3, #2
 800b7b0:	021b      	lsls	r3, r3, #8
 800b7b2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800b7b6:	69ba      	ldr	r2, [r7, #24]
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800b7bc:	68fb      	ldr	r3, [r7, #12]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f003 0310 	and.w	r3, r3, #16
 800b7c8:	f640 710f 	movw	r1, #3855	; 0xf0f
 800b7cc:	fa01 f303 	lsl.w	r3, r1, r3
 800b7d0:	43db      	mvns	r3, r3
 800b7d2:	ea02 0103 	and.w	r1, r2, r3
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	f003 0310 	and.w	r3, r3, #16
 800b7dc:	69ba      	ldr	r2, [r7, #24]
 800b7de:	409a      	lsls	r2, r3
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	430a      	orrs	r2, r1
 800b7e6:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800b7f4:	2300      	movs	r3, #0
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3728      	adds	r7, #40	; 0x28
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	bf00      	nop
 800b800:	09896800 	.word	0x09896800
 800b804:	04c4b400 	.word	0x04c4b400

0800b808 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b814:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800b816:	68f8      	ldr	r0, [r7, #12]
 800b818:	f7ff fe16 	bl	800b448 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	2201      	movs	r2, #1
 800b820:	711a      	strb	r2, [r3, #4]
}
 800b822:	bf00      	nop
 800b824:	3710      	adds	r7, #16
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}

0800b82a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800b82a:	b580      	push	{r7, lr}
 800b82c:	b084      	sub	sp, #16
 800b82e:	af00      	add	r7, sp, #0
 800b830:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b832:	687b      	ldr	r3, [r7, #4]
 800b834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b836:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800b838:	68f8      	ldr	r0, [r7, #12]
 800b83a:	f7ff fe0f 	bl	800b45c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800b83e:	bf00      	nop
 800b840:	3710      	adds	r7, #16
 800b842:	46bd      	mov	sp, r7
 800b844:	bd80      	pop	{r7, pc}

0800b846 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800b846:	b580      	push	{r7, lr}
 800b848:	b084      	sub	sp, #16
 800b84a:	af00      	add	r7, sp, #0
 800b84c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b852:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	691b      	ldr	r3, [r3, #16]
 800b858:	f043 0204 	orr.w	r2, r3, #4
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800b860:	68f8      	ldr	r0, [r7, #12]
 800b862:	f7ff fe05 	bl	800b470 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2201      	movs	r2, #1
 800b86a:	711a      	strb	r2, [r3, #4]
}
 800b86c:	bf00      	nop
 800b86e:	3710      	adds	r7, #16
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}

0800b874 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b874:	b480      	push	{r7}
 800b876:	b083      	sub	sp, #12
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800b87c:	bf00      	nop
 800b87e:	370c      	adds	r7, #12
 800b880:	46bd      	mov	sp, r7
 800b882:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b886:	4770      	bx	lr

0800b888 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b888:	b480      	push	{r7}
 800b88a:	b083      	sub	sp, #12
 800b88c:	af00      	add	r7, sp, #0
 800b88e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800b890:	bf00      	nop
 800b892:	370c      	adds	r7, #12
 800b894:	46bd      	mov	sp, r7
 800b896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b89a:	4770      	bx	lr

0800b89c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800b89c:	b480      	push	{r7}
 800b89e:	b083      	sub	sp, #12
 800b8a0:	af00      	add	r7, sp, #0
 800b8a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800b8a4:	bf00      	nop
 800b8a6:	370c      	adds	r7, #12
 800b8a8:	46bd      	mov	sp, r7
 800b8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ae:	4770      	bx	lr

0800b8b0 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8bc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800b8be:	68f8      	ldr	r0, [r7, #12]
 800b8c0:	f7ff ffd8 	bl	800b874 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b8c4:	68fb      	ldr	r3, [r7, #12]
 800b8c6:	2201      	movs	r2, #1
 800b8c8:	711a      	strb	r2, [r3, #4]
}
 800b8ca:	bf00      	nop
 800b8cc:	3710      	adds	r7, #16
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}

0800b8d2 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800b8d2:	b580      	push	{r7, lr}
 800b8d4:	b084      	sub	sp, #16
 800b8d6:	af00      	add	r7, sp, #0
 800b8d8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8de:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800b8e0:	68f8      	ldr	r0, [r7, #12]
 800b8e2:	f7ff ffd1 	bl	800b888 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800b8e6:	bf00      	nop
 800b8e8:	3710      	adds	r7, #16
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}

0800b8ee <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800b8ee:	b580      	push	{r7, lr}
 800b8f0:	b084      	sub	sp, #16
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8fa:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800b8fc:	68fb      	ldr	r3, [r7, #12]
 800b8fe:	691b      	ldr	r3, [r3, #16]
 800b900:	f043 0204 	orr.w	r2, r3, #4
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800b908:	68f8      	ldr	r0, [r7, #12]
 800b90a:	f7ff ffc7 	bl	800b89c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2201      	movs	r2, #1
 800b912:	711a      	strb	r2, [r3, #4]
}
 800b914:	bf00      	nop
 800b916:	3710      	adds	r7, #16
 800b918:	46bd      	mov	sp, r7
 800b91a:	bd80      	pop	{r7, pc}

0800b91c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b084      	sub	sp, #16
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2b00      	cmp	r3, #0
 800b928:	d101      	bne.n	800b92e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800b92a:	2301      	movs	r3, #1
 800b92c:	e08d      	b.n	800ba4a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	461a      	mov	r2, r3
 800b934:	4b47      	ldr	r3, [pc, #284]	; (800ba54 <HAL_DMA_Init+0x138>)
 800b936:	429a      	cmp	r2, r3
 800b938:	d80f      	bhi.n	800b95a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	461a      	mov	r2, r3
 800b940:	4b45      	ldr	r3, [pc, #276]	; (800ba58 <HAL_DMA_Init+0x13c>)
 800b942:	4413      	add	r3, r2
 800b944:	4a45      	ldr	r2, [pc, #276]	; (800ba5c <HAL_DMA_Init+0x140>)
 800b946:	fba2 2303 	umull	r2, r3, r2, r3
 800b94a:	091b      	lsrs	r3, r3, #4
 800b94c:	009a      	lsls	r2, r3, #2
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	4a42      	ldr	r2, [pc, #264]	; (800ba60 <HAL_DMA_Init+0x144>)
 800b956:	641a      	str	r2, [r3, #64]	; 0x40
 800b958:	e00e      	b.n	800b978 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	461a      	mov	r2, r3
 800b960:	4b40      	ldr	r3, [pc, #256]	; (800ba64 <HAL_DMA_Init+0x148>)
 800b962:	4413      	add	r3, r2
 800b964:	4a3d      	ldr	r2, [pc, #244]	; (800ba5c <HAL_DMA_Init+0x140>)
 800b966:	fba2 2303 	umull	r2, r3, r2, r3
 800b96a:	091b      	lsrs	r3, r3, #4
 800b96c:	009a      	lsls	r2, r3, #2
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	4a3c      	ldr	r2, [pc, #240]	; (800ba68 <HAL_DMA_Init+0x14c>)
 800b976:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	2202      	movs	r2, #2
 800b97c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800b98e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b992:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800b99c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	691b      	ldr	r3, [r3, #16]
 800b9a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800b9a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	699b      	ldr	r3, [r3, #24]
 800b9ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800b9b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6a1b      	ldr	r3, [r3, #32]
 800b9ba:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800b9bc:	68fa      	ldr	r2, [r7, #12]
 800b9be:	4313      	orrs	r3, r2
 800b9c0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	68fa      	ldr	r2, [r7, #12]
 800b9c8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 fa76 	bl	800bebc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	689b      	ldr	r3, [r3, #8]
 800b9d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b9d8:	d102      	bne.n	800b9e0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	685a      	ldr	r2, [r3, #4]
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b9e8:	b2d2      	uxtb	r2, r2
 800b9ea:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b9f0:	687a      	ldr	r2, [r7, #4]
 800b9f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800b9f4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d010      	beq.n	800ba20 <HAL_DMA_Init+0x104>
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	685b      	ldr	r3, [r3, #4]
 800ba02:	2b04      	cmp	r3, #4
 800ba04:	d80c      	bhi.n	800ba20 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 fa96 	bl	800bf38 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba10:	2200      	movs	r2, #0
 800ba12:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba18:	687a      	ldr	r2, [r7, #4]
 800ba1a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800ba1c:	605a      	str	r2, [r3, #4]
 800ba1e:	e008      	b.n	800ba32 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	2200      	movs	r2, #0
 800ba24:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	2200      	movs	r2, #0
 800ba36:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	2201      	movs	r2, #1
 800ba3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	2200      	movs	r2, #0
 800ba44:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800ba48:	2300      	movs	r3, #0
}
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	3710      	adds	r7, #16
 800ba4e:	46bd      	mov	sp, r7
 800ba50:	bd80      	pop	{r7, pc}
 800ba52:	bf00      	nop
 800ba54:	40020407 	.word	0x40020407
 800ba58:	bffdfff8 	.word	0xbffdfff8
 800ba5c:	cccccccd 	.word	0xcccccccd
 800ba60:	40020000 	.word	0x40020000
 800ba64:	bffdfbf8 	.word	0xbffdfbf8
 800ba68:	40020400 	.word	0x40020400

0800ba6c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b086      	sub	sp, #24
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	60f8      	str	r0, [r7, #12]
 800ba74:	60b9      	str	r1, [r7, #8]
 800ba76:	607a      	str	r2, [r7, #4]
 800ba78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800ba7e:	68fb      	ldr	r3, [r7, #12]
 800ba80:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ba84:	2b01      	cmp	r3, #1
 800ba86:	d101      	bne.n	800ba8c <HAL_DMA_Start_IT+0x20>
 800ba88:	2302      	movs	r3, #2
 800ba8a:	e066      	b.n	800bb5a <HAL_DMA_Start_IT+0xee>
 800ba8c:	68fb      	ldr	r3, [r7, #12]
 800ba8e:	2201      	movs	r2, #1
 800ba90:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d155      	bne.n	800bb4c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800baa0:	68fb      	ldr	r3, [r7, #12]
 800baa2:	2202      	movs	r2, #2
 800baa4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	2200      	movs	r2, #0
 800baac:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	681b      	ldr	r3, [r3, #0]
 800bab2:	681a      	ldr	r2, [r3, #0]
 800bab4:	68fb      	ldr	r3, [r7, #12]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f022 0201 	bic.w	r2, r2, #1
 800babc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800babe:	683b      	ldr	r3, [r7, #0]
 800bac0:	687a      	ldr	r2, [r7, #4]
 800bac2:	68b9      	ldr	r1, [r7, #8]
 800bac4:	68f8      	ldr	r0, [r7, #12]
 800bac6:	f000 f9bb 	bl	800be40 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d008      	beq.n	800bae4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	681a      	ldr	r2, [r3, #0]
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f042 020e 	orr.w	r2, r2, #14
 800bae0:	601a      	str	r2, [r3, #0]
 800bae2:	e00f      	b.n	800bb04 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	681b      	ldr	r3, [r3, #0]
 800bae8:	681a      	ldr	r2, [r3, #0]
 800baea:	68fb      	ldr	r3, [r7, #12]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	f022 0204 	bic.w	r2, r2, #4
 800baf2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	681a      	ldr	r2, [r3, #0]
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	f042 020a 	orr.w	r2, r2, #10
 800bb02:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d007      	beq.n	800bb22 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb16:	681a      	ldr	r2, [r3, #0]
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb20:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d007      	beq.n	800bb3a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	68fb      	ldr	r3, [r7, #12]
 800bb32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bb38:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	681a      	ldr	r2, [r3, #0]
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f042 0201 	orr.w	r2, r2, #1
 800bb48:	601a      	str	r2, [r3, #0]
 800bb4a:	e005      	b.n	800bb58 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	2200      	movs	r2, #0
 800bb50:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800bb54:	2302      	movs	r3, #2
 800bb56:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800bb58:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	3718      	adds	r7, #24
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800bb62:	b480      	push	{r7}
 800bb64:	b085      	sub	sp, #20
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bb6a:	2300      	movs	r3, #0
 800bb6c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bb74:	b2db      	uxtb	r3, r3
 800bb76:	2b02      	cmp	r3, #2
 800bb78:	d005      	beq.n	800bb86 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	2204      	movs	r2, #4
 800bb7e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800bb80:	2301      	movs	r3, #1
 800bb82:	73fb      	strb	r3, [r7, #15]
 800bb84:	e037      	b.n	800bbf6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	681a      	ldr	r2, [r3, #0]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f022 020e 	bic.w	r2, r2, #14
 800bb94:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bb9a:	681a      	ldr	r2, [r3, #0]
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bba0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bba4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	681a      	ldr	r2, [r3, #0]
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f022 0201 	bic.w	r2, r2, #1
 800bbb4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbba:	f003 021f 	and.w	r2, r3, #31
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc2:	2101      	movs	r1, #1
 800bbc4:	fa01 f202 	lsl.w	r2, r1, r2
 800bbc8:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bbce:	687a      	ldr	r2, [r7, #4]
 800bbd0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800bbd2:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d00c      	beq.n	800bbf6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbe0:	681a      	ldr	r2, [r3, #0]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbe6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bbea:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbf0:	687a      	ldr	r2, [r7, #4]
 800bbf2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800bbf4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	2201      	movs	r2, #1
 800bbfa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	2200      	movs	r2, #0
 800bc02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800bc06:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc08:	4618      	mov	r0, r3
 800bc0a:	3714      	adds	r7, #20
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc12:	4770      	bx	lr

0800bc14 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b084      	sub	sp, #16
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	2b02      	cmp	r3, #2
 800bc2a:	d00d      	beq.n	800bc48 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	2204      	movs	r2, #4
 800bc30:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2201      	movs	r2, #1
 800bc36:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	2200      	movs	r2, #0
 800bc3e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 800bc42:	2301      	movs	r3, #1
 800bc44:	73fb      	strb	r3, [r7, #15]
 800bc46:	e047      	b.n	800bcd8 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	681a      	ldr	r2, [r3, #0]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f022 020e 	bic.w	r2, r2, #14
 800bc56:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	681a      	ldr	r2, [r3, #0]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	f022 0201 	bic.w	r2, r2, #1
 800bc66:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc6c:	681a      	ldr	r2, [r3, #0]
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bc72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bc76:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc7c:	f003 021f 	and.w	r2, r3, #31
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc84:	2101      	movs	r1, #1
 800bc86:	fa01 f202 	lsl.w	r2, r1, r2
 800bc8a:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800bc94:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d00c      	beq.n	800bcb8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bca2:	681a      	ldr	r2, [r3, #0]
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bca8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bcac:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcb2:	687a      	ldr	r2, [r7, #4]
 800bcb4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800bcb6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	2201      	movs	r2, #1
 800bcbc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d003      	beq.n	800bcd8 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcd4:	6878      	ldr	r0, [r7, #4]
 800bcd6:	4798      	blx	r3
    }
  }
  return status;
 800bcd8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcda:	4618      	mov	r0, r3
 800bcdc:	3710      	adds	r7, #16
 800bcde:	46bd      	mov	sp, r7
 800bce0:	bd80      	pop	{r7, pc}

0800bce2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800bce2:	b580      	push	{r7, lr}
 800bce4:	b084      	sub	sp, #16
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	681b      	ldr	r3, [r3, #0]
 800bcf8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bcfe:	f003 031f 	and.w	r3, r3, #31
 800bd02:	2204      	movs	r2, #4
 800bd04:	409a      	lsls	r2, r3
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	4013      	ands	r3, r2
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d026      	beq.n	800bd5c <HAL_DMA_IRQHandler+0x7a>
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	f003 0304 	and.w	r3, r3, #4
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d021      	beq.n	800bd5c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	f003 0320 	and.w	r3, r3, #32
 800bd22:	2b00      	cmp	r3, #0
 800bd24:	d107      	bne.n	800bd36 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	681b      	ldr	r3, [r3, #0]
 800bd2a:	681a      	ldr	r2, [r3, #0]
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	f022 0204 	bic.w	r2, r2, #4
 800bd34:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd3a:	f003 021f 	and.w	r2, r3, #31
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd42:	2104      	movs	r1, #4
 800bd44:	fa01 f202 	lsl.w	r2, r1, r2
 800bd48:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d071      	beq.n	800be36 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd56:	6878      	ldr	r0, [r7, #4]
 800bd58:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800bd5a:	e06c      	b.n	800be36 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd60:	f003 031f 	and.w	r3, r3, #31
 800bd64:	2202      	movs	r2, #2
 800bd66:	409a      	lsls	r2, r3
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	4013      	ands	r3, r2
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d02e      	beq.n	800bdce <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800bd70:	68bb      	ldr	r3, [r7, #8]
 800bd72:	f003 0302 	and.w	r3, r3, #2
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d029      	beq.n	800bdce <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	681b      	ldr	r3, [r3, #0]
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	f003 0320 	and.w	r3, r3, #32
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d10b      	bne.n	800bda0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	681a      	ldr	r2, [r3, #0]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	f022 020a 	bic.w	r2, r2, #10
 800bd96:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bda4:	f003 021f 	and.w	r2, r3, #31
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdac:	2102      	movs	r1, #2
 800bdae:	fa01 f202 	lsl.w	r2, r1, r2
 800bdb2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d038      	beq.n	800be36 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bdc8:	6878      	ldr	r0, [r7, #4]
 800bdca:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800bdcc:	e033      	b.n	800be36 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdd2:	f003 031f 	and.w	r3, r3, #31
 800bdd6:	2208      	movs	r2, #8
 800bdd8:	409a      	lsls	r2, r3
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	4013      	ands	r3, r2
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d02a      	beq.n	800be38 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800bde2:	68bb      	ldr	r3, [r7, #8]
 800bde4:	f003 0308 	and.w	r3, r3, #8
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d025      	beq.n	800be38 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	681a      	ldr	r2, [r3, #0]
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	f022 020e 	bic.w	r2, r2, #14
 800bdfa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be00:	f003 021f 	and.w	r2, r3, #31
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be08:	2101      	movs	r1, #1
 800be0a:	fa01 f202 	lsl.w	r2, r1, r2
 800be0e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2201      	movs	r2, #1
 800be14:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	2201      	movs	r2, #1
 800be1a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	2200      	movs	r2, #0
 800be22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d004      	beq.n	800be38 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800be32:	6878      	ldr	r0, [r7, #4]
 800be34:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800be36:	bf00      	nop
 800be38:	bf00      	nop
}
 800be3a:	3710      	adds	r7, #16
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800be40:	b480      	push	{r7}
 800be42:	b085      	sub	sp, #20
 800be44:	af00      	add	r7, sp, #0
 800be46:	60f8      	str	r0, [r7, #12]
 800be48:	60b9      	str	r1, [r7, #8]
 800be4a:	607a      	str	r2, [r7, #4]
 800be4c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be52:	68fa      	ldr	r2, [r7, #12]
 800be54:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800be56:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800be58:	68fb      	ldr	r3, [r7, #12]
 800be5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d004      	beq.n	800be6a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be64:	68fa      	ldr	r2, [r7, #12]
 800be66:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800be68:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800be6e:	f003 021f 	and.w	r2, r3, #31
 800be72:	68fb      	ldr	r3, [r7, #12]
 800be74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be76:	2101      	movs	r1, #1
 800be78:	fa01 f202 	lsl.w	r2, r1, r2
 800be7c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	681b      	ldr	r3, [r3, #0]
 800be82:	683a      	ldr	r2, [r7, #0]
 800be84:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	689b      	ldr	r3, [r3, #8]
 800be8a:	2b10      	cmp	r3, #16
 800be8c:	d108      	bne.n	800bea0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	687a      	ldr	r2, [r7, #4]
 800be94:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	68ba      	ldr	r2, [r7, #8]
 800be9c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800be9e:	e007      	b.n	800beb0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	68ba      	ldr	r2, [r7, #8]
 800bea6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800bea8:	68fb      	ldr	r3, [r7, #12]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	687a      	ldr	r2, [r7, #4]
 800beae:	60da      	str	r2, [r3, #12]
}
 800beb0:	bf00      	nop
 800beb2:	3714      	adds	r7, #20
 800beb4:	46bd      	mov	sp, r7
 800beb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beba:	4770      	bx	lr

0800bebc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bebc:	b480      	push	{r7}
 800bebe:	b087      	sub	sp, #28
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	461a      	mov	r2, r3
 800beca:	4b16      	ldr	r3, [pc, #88]	; (800bf24 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800becc:	429a      	cmp	r2, r3
 800bece:	d802      	bhi.n	800bed6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800bed0:	4b15      	ldr	r3, [pc, #84]	; (800bf28 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800bed2:	617b      	str	r3, [r7, #20]
 800bed4:	e001      	b.n	800beda <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800bed6:	4b15      	ldr	r3, [pc, #84]	; (800bf2c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800bed8:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800beda:	697b      	ldr	r3, [r7, #20]
 800bedc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	b2db      	uxtb	r3, r3
 800bee4:	3b08      	subs	r3, #8
 800bee6:	4a12      	ldr	r2, [pc, #72]	; (800bf30 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800bee8:	fba2 2303 	umull	r2, r3, r2, r3
 800beec:	091b      	lsrs	r3, r3, #4
 800beee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bef4:	089b      	lsrs	r3, r3, #2
 800bef6:	009a      	lsls	r2, r3, #2
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	4413      	add	r3, r2
 800befc:	461a      	mov	r2, r3
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	4a0b      	ldr	r2, [pc, #44]	; (800bf34 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800bf06:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800bf08:	68fb      	ldr	r3, [r7, #12]
 800bf0a:	f003 031f 	and.w	r3, r3, #31
 800bf0e:	2201      	movs	r2, #1
 800bf10:	409a      	lsls	r2, r3
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	651a      	str	r2, [r3, #80]	; 0x50
}
 800bf16:	bf00      	nop
 800bf18:	371c      	adds	r7, #28
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf20:	4770      	bx	lr
 800bf22:	bf00      	nop
 800bf24:	40020407 	.word	0x40020407
 800bf28:	40020800 	.word	0x40020800
 800bf2c:	40020820 	.word	0x40020820
 800bf30:	cccccccd 	.word	0xcccccccd
 800bf34:	40020880 	.word	0x40020880

0800bf38 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800bf38:	b480      	push	{r7}
 800bf3a:	b085      	sub	sp, #20
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	685b      	ldr	r3, [r3, #4]
 800bf44:	b2db      	uxtb	r3, r3
 800bf46:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800bf48:	68fa      	ldr	r2, [r7, #12]
 800bf4a:	4b0b      	ldr	r3, [pc, #44]	; (800bf78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800bf4c:	4413      	add	r3, r2
 800bf4e:	009b      	lsls	r3, r3, #2
 800bf50:	461a      	mov	r2, r3
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	4a08      	ldr	r2, [pc, #32]	; (800bf7c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800bf5a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	3b01      	subs	r3, #1
 800bf60:	f003 031f 	and.w	r3, r3, #31
 800bf64:	2201      	movs	r2, #1
 800bf66:	409a      	lsls	r2, r3
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800bf6c:	bf00      	nop
 800bf6e:	3714      	adds	r7, #20
 800bf70:	46bd      	mov	sp, r7
 800bf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf76:	4770      	bx	lr
 800bf78:	1000823f 	.word	0x1000823f
 800bf7c:	40020940 	.word	0x40020940

0800bf80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800bf80:	b480      	push	{r7}
 800bf82:	b087      	sub	sp, #28
 800bf84:	af00      	add	r7, sp, #0
 800bf86:	6078      	str	r0, [r7, #4]
 800bf88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800bf8e:	e15a      	b.n	800c246 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800bf90:	683b      	ldr	r3, [r7, #0]
 800bf92:	681a      	ldr	r2, [r3, #0]
 800bf94:	2101      	movs	r1, #1
 800bf96:	697b      	ldr	r3, [r7, #20]
 800bf98:	fa01 f303 	lsl.w	r3, r1, r3
 800bf9c:	4013      	ands	r3, r2
 800bf9e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	f000 814c 	beq.w	800c240 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d00b      	beq.n	800bfc8 <HAL_GPIO_Init+0x48>
 800bfb0:	683b      	ldr	r3, [r7, #0]
 800bfb2:	685b      	ldr	r3, [r3, #4]
 800bfb4:	2b02      	cmp	r3, #2
 800bfb6:	d007      	beq.n	800bfc8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bfb8:	683b      	ldr	r3, [r7, #0]
 800bfba:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800bfbc:	2b11      	cmp	r3, #17
 800bfbe:	d003      	beq.n	800bfc8 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800bfc0:	683b      	ldr	r3, [r7, #0]
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	2b12      	cmp	r3, #18
 800bfc6:	d130      	bne.n	800c02a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	689b      	ldr	r3, [r3, #8]
 800bfcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	005b      	lsls	r3, r3, #1
 800bfd2:	2203      	movs	r2, #3
 800bfd4:	fa02 f303 	lsl.w	r3, r2, r3
 800bfd8:	43db      	mvns	r3, r3
 800bfda:	693a      	ldr	r2, [r7, #16]
 800bfdc:	4013      	ands	r3, r2
 800bfde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800bfe0:	683b      	ldr	r3, [r7, #0]
 800bfe2:	68da      	ldr	r2, [r3, #12]
 800bfe4:	697b      	ldr	r3, [r7, #20]
 800bfe6:	005b      	lsls	r3, r3, #1
 800bfe8:	fa02 f303 	lsl.w	r3, r2, r3
 800bfec:	693a      	ldr	r2, [r7, #16]
 800bfee:	4313      	orrs	r3, r2
 800bff0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	693a      	ldr	r2, [r7, #16]
 800bff6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	685b      	ldr	r3, [r3, #4]
 800bffc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800bffe:	2201      	movs	r2, #1
 800c000:	697b      	ldr	r3, [r7, #20]
 800c002:	fa02 f303 	lsl.w	r3, r2, r3
 800c006:	43db      	mvns	r3, r3
 800c008:	693a      	ldr	r2, [r7, #16]
 800c00a:	4013      	ands	r3, r2
 800c00c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	091b      	lsrs	r3, r3, #4
 800c014:	f003 0201 	and.w	r2, r3, #1
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	fa02 f303 	lsl.w	r3, r2, r3
 800c01e:	693a      	ldr	r2, [r7, #16]
 800c020:	4313      	orrs	r3, r2
 800c022:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	693a      	ldr	r2, [r7, #16]
 800c028:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	68db      	ldr	r3, [r3, #12]
 800c02e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800c030:	697b      	ldr	r3, [r7, #20]
 800c032:	005b      	lsls	r3, r3, #1
 800c034:	2203      	movs	r2, #3
 800c036:	fa02 f303 	lsl.w	r3, r2, r3
 800c03a:	43db      	mvns	r3, r3
 800c03c:	693a      	ldr	r2, [r7, #16]
 800c03e:	4013      	ands	r3, r2
 800c040:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	689a      	ldr	r2, [r3, #8]
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	005b      	lsls	r3, r3, #1
 800c04a:	fa02 f303 	lsl.w	r3, r2, r3
 800c04e:	693a      	ldr	r2, [r7, #16]
 800c050:	4313      	orrs	r3, r2
 800c052:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	693a      	ldr	r2, [r7, #16]
 800c058:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800c05a:	683b      	ldr	r3, [r7, #0]
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	2b02      	cmp	r3, #2
 800c060:	d003      	beq.n	800c06a <HAL_GPIO_Init+0xea>
 800c062:	683b      	ldr	r3, [r7, #0]
 800c064:	685b      	ldr	r3, [r3, #4]
 800c066:	2b12      	cmp	r3, #18
 800c068:	d123      	bne.n	800c0b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800c06a:	697b      	ldr	r3, [r7, #20]
 800c06c:	08da      	lsrs	r2, r3, #3
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	3208      	adds	r2, #8
 800c072:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c076:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	f003 0307 	and.w	r3, r3, #7
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	220f      	movs	r2, #15
 800c082:	fa02 f303 	lsl.w	r3, r2, r3
 800c086:	43db      	mvns	r3, r3
 800c088:	693a      	ldr	r2, [r7, #16]
 800c08a:	4013      	ands	r3, r2
 800c08c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	691a      	ldr	r2, [r3, #16]
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	f003 0307 	and.w	r3, r3, #7
 800c098:	009b      	lsls	r3, r3, #2
 800c09a:	fa02 f303 	lsl.w	r3, r2, r3
 800c09e:	693a      	ldr	r2, [r7, #16]
 800c0a0:	4313      	orrs	r3, r2
 800c0a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800c0a4:	697b      	ldr	r3, [r7, #20]
 800c0a6:	08da      	lsrs	r2, r3, #3
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	3208      	adds	r2, #8
 800c0ac:	6939      	ldr	r1, [r7, #16]
 800c0ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800c0b8:	697b      	ldr	r3, [r7, #20]
 800c0ba:	005b      	lsls	r3, r3, #1
 800c0bc:	2203      	movs	r2, #3
 800c0be:	fa02 f303 	lsl.w	r3, r2, r3
 800c0c2:	43db      	mvns	r3, r3
 800c0c4:	693a      	ldr	r2, [r7, #16]
 800c0c6:	4013      	ands	r3, r2
 800c0c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800c0ca:	683b      	ldr	r3, [r7, #0]
 800c0cc:	685b      	ldr	r3, [r3, #4]
 800c0ce:	f003 0203 	and.w	r2, r3, #3
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	005b      	lsls	r3, r3, #1
 800c0d6:	fa02 f303 	lsl.w	r3, r2, r3
 800c0da:	693a      	ldr	r2, [r7, #16]
 800c0dc:	4313      	orrs	r3, r2
 800c0de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	693a      	ldr	r2, [r7, #16]
 800c0e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800c0e6:	683b      	ldr	r3, [r7, #0]
 800c0e8:	685b      	ldr	r3, [r3, #4]
 800c0ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	f000 80a6 	beq.w	800c240 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c0f4:	4b5b      	ldr	r3, [pc, #364]	; (800c264 <HAL_GPIO_Init+0x2e4>)
 800c0f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c0f8:	4a5a      	ldr	r2, [pc, #360]	; (800c264 <HAL_GPIO_Init+0x2e4>)
 800c0fa:	f043 0301 	orr.w	r3, r3, #1
 800c0fe:	6613      	str	r3, [r2, #96]	; 0x60
 800c100:	4b58      	ldr	r3, [pc, #352]	; (800c264 <HAL_GPIO_Init+0x2e4>)
 800c102:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c104:	f003 0301 	and.w	r3, r3, #1
 800c108:	60bb      	str	r3, [r7, #8]
 800c10a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800c10c:	4a56      	ldr	r2, [pc, #344]	; (800c268 <HAL_GPIO_Init+0x2e8>)
 800c10e:	697b      	ldr	r3, [r7, #20]
 800c110:	089b      	lsrs	r3, r3, #2
 800c112:	3302      	adds	r3, #2
 800c114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c118:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800c11a:	697b      	ldr	r3, [r7, #20]
 800c11c:	f003 0303 	and.w	r3, r3, #3
 800c120:	009b      	lsls	r3, r3, #2
 800c122:	220f      	movs	r2, #15
 800c124:	fa02 f303 	lsl.w	r3, r2, r3
 800c128:	43db      	mvns	r3, r3
 800c12a:	693a      	ldr	r2, [r7, #16]
 800c12c:	4013      	ands	r3, r2
 800c12e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c136:	d01f      	beq.n	800c178 <HAL_GPIO_Init+0x1f8>
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	4a4c      	ldr	r2, [pc, #304]	; (800c26c <HAL_GPIO_Init+0x2ec>)
 800c13c:	4293      	cmp	r3, r2
 800c13e:	d019      	beq.n	800c174 <HAL_GPIO_Init+0x1f4>
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	4a4b      	ldr	r2, [pc, #300]	; (800c270 <HAL_GPIO_Init+0x2f0>)
 800c144:	4293      	cmp	r3, r2
 800c146:	d013      	beq.n	800c170 <HAL_GPIO_Init+0x1f0>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	4a4a      	ldr	r2, [pc, #296]	; (800c274 <HAL_GPIO_Init+0x2f4>)
 800c14c:	4293      	cmp	r3, r2
 800c14e:	d00d      	beq.n	800c16c <HAL_GPIO_Init+0x1ec>
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	4a49      	ldr	r2, [pc, #292]	; (800c278 <HAL_GPIO_Init+0x2f8>)
 800c154:	4293      	cmp	r3, r2
 800c156:	d007      	beq.n	800c168 <HAL_GPIO_Init+0x1e8>
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	4a48      	ldr	r2, [pc, #288]	; (800c27c <HAL_GPIO_Init+0x2fc>)
 800c15c:	4293      	cmp	r3, r2
 800c15e:	d101      	bne.n	800c164 <HAL_GPIO_Init+0x1e4>
 800c160:	2305      	movs	r3, #5
 800c162:	e00a      	b.n	800c17a <HAL_GPIO_Init+0x1fa>
 800c164:	2306      	movs	r3, #6
 800c166:	e008      	b.n	800c17a <HAL_GPIO_Init+0x1fa>
 800c168:	2304      	movs	r3, #4
 800c16a:	e006      	b.n	800c17a <HAL_GPIO_Init+0x1fa>
 800c16c:	2303      	movs	r3, #3
 800c16e:	e004      	b.n	800c17a <HAL_GPIO_Init+0x1fa>
 800c170:	2302      	movs	r3, #2
 800c172:	e002      	b.n	800c17a <HAL_GPIO_Init+0x1fa>
 800c174:	2301      	movs	r3, #1
 800c176:	e000      	b.n	800c17a <HAL_GPIO_Init+0x1fa>
 800c178:	2300      	movs	r3, #0
 800c17a:	697a      	ldr	r2, [r7, #20]
 800c17c:	f002 0203 	and.w	r2, r2, #3
 800c180:	0092      	lsls	r2, r2, #2
 800c182:	4093      	lsls	r3, r2
 800c184:	693a      	ldr	r2, [r7, #16]
 800c186:	4313      	orrs	r3, r2
 800c188:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800c18a:	4937      	ldr	r1, [pc, #220]	; (800c268 <HAL_GPIO_Init+0x2e8>)
 800c18c:	697b      	ldr	r3, [r7, #20]
 800c18e:	089b      	lsrs	r3, r3, #2
 800c190:	3302      	adds	r3, #2
 800c192:	693a      	ldr	r2, [r7, #16]
 800c194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800c198:	4b39      	ldr	r3, [pc, #228]	; (800c280 <HAL_GPIO_Init+0x300>)
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c19e:	68fb      	ldr	r3, [r7, #12]
 800c1a0:	43db      	mvns	r3, r3
 800c1a2:	693a      	ldr	r2, [r7, #16]
 800c1a4:	4013      	ands	r3, r2
 800c1a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d003      	beq.n	800c1bc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800c1b4:	693a      	ldr	r2, [r7, #16]
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	4313      	orrs	r3, r2
 800c1ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800c1bc:	4a30      	ldr	r2, [pc, #192]	; (800c280 <HAL_GPIO_Init+0x300>)
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800c1c2:	4b2f      	ldr	r3, [pc, #188]	; (800c280 <HAL_GPIO_Init+0x300>)
 800c1c4:	685b      	ldr	r3, [r3, #4]
 800c1c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	43db      	mvns	r3, r3
 800c1cc:	693a      	ldr	r2, [r7, #16]
 800c1ce:	4013      	ands	r3, r2
 800c1d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800c1d2:	683b      	ldr	r3, [r7, #0]
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d003      	beq.n	800c1e6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800c1de:	693a      	ldr	r2, [r7, #16]
 800c1e0:	68fb      	ldr	r3, [r7, #12]
 800c1e2:	4313      	orrs	r3, r2
 800c1e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800c1e6:	4a26      	ldr	r2, [pc, #152]	; (800c280 <HAL_GPIO_Init+0x300>)
 800c1e8:	693b      	ldr	r3, [r7, #16]
 800c1ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800c1ec:	4b24      	ldr	r3, [pc, #144]	; (800c280 <HAL_GPIO_Init+0x300>)
 800c1ee:	689b      	ldr	r3, [r3, #8]
 800c1f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	43db      	mvns	r3, r3
 800c1f6:	693a      	ldr	r2, [r7, #16]
 800c1f8:	4013      	ands	r3, r2
 800c1fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800c1fc:	683b      	ldr	r3, [r7, #0]
 800c1fe:	685b      	ldr	r3, [r3, #4]
 800c200:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c204:	2b00      	cmp	r3, #0
 800c206:	d003      	beq.n	800c210 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800c208:	693a      	ldr	r2, [r7, #16]
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	4313      	orrs	r3, r2
 800c20e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800c210:	4a1b      	ldr	r2, [pc, #108]	; (800c280 <HAL_GPIO_Init+0x300>)
 800c212:	693b      	ldr	r3, [r7, #16]
 800c214:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800c216:	4b1a      	ldr	r3, [pc, #104]	; (800c280 <HAL_GPIO_Init+0x300>)
 800c218:	68db      	ldr	r3, [r3, #12]
 800c21a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	43db      	mvns	r3, r3
 800c220:	693a      	ldr	r2, [r7, #16]
 800c222:	4013      	ands	r3, r2
 800c224:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800c226:	683b      	ldr	r3, [r7, #0]
 800c228:	685b      	ldr	r3, [r3, #4]
 800c22a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d003      	beq.n	800c23a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800c232:	693a      	ldr	r2, [r7, #16]
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	4313      	orrs	r3, r2
 800c238:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800c23a:	4a11      	ldr	r2, [pc, #68]	; (800c280 <HAL_GPIO_Init+0x300>)
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800c240:	697b      	ldr	r3, [r7, #20]
 800c242:	3301      	adds	r3, #1
 800c244:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	681a      	ldr	r2, [r3, #0]
 800c24a:	697b      	ldr	r3, [r7, #20]
 800c24c:	fa22 f303 	lsr.w	r3, r2, r3
 800c250:	2b00      	cmp	r3, #0
 800c252:	f47f ae9d 	bne.w	800bf90 <HAL_GPIO_Init+0x10>
  }
}
 800c256:	bf00      	nop
 800c258:	371c      	adds	r7, #28
 800c25a:	46bd      	mov	sp, r7
 800c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c260:	4770      	bx	lr
 800c262:	bf00      	nop
 800c264:	40021000 	.word	0x40021000
 800c268:	40010000 	.word	0x40010000
 800c26c:	48000400 	.word	0x48000400
 800c270:	48000800 	.word	0x48000800
 800c274:	48000c00 	.word	0x48000c00
 800c278:	48001000 	.word	0x48001000
 800c27c:	48001400 	.word	0x48001400
 800c280:	40010400 	.word	0x40010400

0800c284 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800c284:	b480      	push	{r7}
 800c286:	b087      	sub	sp, #28
 800c288:	af00      	add	r7, sp, #0
 800c28a:	6078      	str	r0, [r7, #4]
 800c28c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800c28e:	2300      	movs	r3, #0
 800c290:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800c292:	e0bd      	b.n	800c410 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800c294:	2201      	movs	r2, #1
 800c296:	697b      	ldr	r3, [r7, #20]
 800c298:	fa02 f303 	lsl.w	r3, r2, r3
 800c29c:	683a      	ldr	r2, [r7, #0]
 800c29e:	4013      	ands	r3, r2
 800c2a0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800c2a2:	693b      	ldr	r3, [r7, #16]
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	f000 80b0 	beq.w	800c40a <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800c2aa:	4a60      	ldr	r2, [pc, #384]	; (800c42c <HAL_GPIO_DeInit+0x1a8>)
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	089b      	lsrs	r3, r3, #2
 800c2b0:	3302      	adds	r3, #2
 800c2b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2b6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	f003 0303 	and.w	r3, r3, #3
 800c2be:	009b      	lsls	r3, r3, #2
 800c2c0:	220f      	movs	r2, #15
 800c2c2:	fa02 f303 	lsl.w	r3, r2, r3
 800c2c6:	68fa      	ldr	r2, [r7, #12]
 800c2c8:	4013      	ands	r3, r2
 800c2ca:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800c2d2:	d01f      	beq.n	800c314 <HAL_GPIO_DeInit+0x90>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	4a56      	ldr	r2, [pc, #344]	; (800c430 <HAL_GPIO_DeInit+0x1ac>)
 800c2d8:	4293      	cmp	r3, r2
 800c2da:	d019      	beq.n	800c310 <HAL_GPIO_DeInit+0x8c>
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	4a55      	ldr	r2, [pc, #340]	; (800c434 <HAL_GPIO_DeInit+0x1b0>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d013      	beq.n	800c30c <HAL_GPIO_DeInit+0x88>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	4a54      	ldr	r2, [pc, #336]	; (800c438 <HAL_GPIO_DeInit+0x1b4>)
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	d00d      	beq.n	800c308 <HAL_GPIO_DeInit+0x84>
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	4a53      	ldr	r2, [pc, #332]	; (800c43c <HAL_GPIO_DeInit+0x1b8>)
 800c2f0:	4293      	cmp	r3, r2
 800c2f2:	d007      	beq.n	800c304 <HAL_GPIO_DeInit+0x80>
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	4a52      	ldr	r2, [pc, #328]	; (800c440 <HAL_GPIO_DeInit+0x1bc>)
 800c2f8:	4293      	cmp	r3, r2
 800c2fa:	d101      	bne.n	800c300 <HAL_GPIO_DeInit+0x7c>
 800c2fc:	2305      	movs	r3, #5
 800c2fe:	e00a      	b.n	800c316 <HAL_GPIO_DeInit+0x92>
 800c300:	2306      	movs	r3, #6
 800c302:	e008      	b.n	800c316 <HAL_GPIO_DeInit+0x92>
 800c304:	2304      	movs	r3, #4
 800c306:	e006      	b.n	800c316 <HAL_GPIO_DeInit+0x92>
 800c308:	2303      	movs	r3, #3
 800c30a:	e004      	b.n	800c316 <HAL_GPIO_DeInit+0x92>
 800c30c:	2302      	movs	r3, #2
 800c30e:	e002      	b.n	800c316 <HAL_GPIO_DeInit+0x92>
 800c310:	2301      	movs	r3, #1
 800c312:	e000      	b.n	800c316 <HAL_GPIO_DeInit+0x92>
 800c314:	2300      	movs	r3, #0
 800c316:	697a      	ldr	r2, [r7, #20]
 800c318:	f002 0203 	and.w	r2, r2, #3
 800c31c:	0092      	lsls	r2, r2, #2
 800c31e:	4093      	lsls	r3, r2
 800c320:	68fa      	ldr	r2, [r7, #12]
 800c322:	429a      	cmp	r2, r3
 800c324:	d132      	bne.n	800c38c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800c326:	4b47      	ldr	r3, [pc, #284]	; (800c444 <HAL_GPIO_DeInit+0x1c0>)
 800c328:	681a      	ldr	r2, [r3, #0]
 800c32a:	693b      	ldr	r3, [r7, #16]
 800c32c:	43db      	mvns	r3, r3
 800c32e:	4945      	ldr	r1, [pc, #276]	; (800c444 <HAL_GPIO_DeInit+0x1c0>)
 800c330:	4013      	ands	r3, r2
 800c332:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800c334:	4b43      	ldr	r3, [pc, #268]	; (800c444 <HAL_GPIO_DeInit+0x1c0>)
 800c336:	685a      	ldr	r2, [r3, #4]
 800c338:	693b      	ldr	r3, [r7, #16]
 800c33a:	43db      	mvns	r3, r3
 800c33c:	4941      	ldr	r1, [pc, #260]	; (800c444 <HAL_GPIO_DeInit+0x1c0>)
 800c33e:	4013      	ands	r3, r2
 800c340:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800c342:	4b40      	ldr	r3, [pc, #256]	; (800c444 <HAL_GPIO_DeInit+0x1c0>)
 800c344:	689a      	ldr	r2, [r3, #8]
 800c346:	693b      	ldr	r3, [r7, #16]
 800c348:	43db      	mvns	r3, r3
 800c34a:	493e      	ldr	r1, [pc, #248]	; (800c444 <HAL_GPIO_DeInit+0x1c0>)
 800c34c:	4013      	ands	r3, r2
 800c34e:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 800c350:	4b3c      	ldr	r3, [pc, #240]	; (800c444 <HAL_GPIO_DeInit+0x1c0>)
 800c352:	68da      	ldr	r2, [r3, #12]
 800c354:	693b      	ldr	r3, [r7, #16]
 800c356:	43db      	mvns	r3, r3
 800c358:	493a      	ldr	r1, [pc, #232]	; (800c444 <HAL_GPIO_DeInit+0x1c0>)
 800c35a:	4013      	ands	r3, r2
 800c35c:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	f003 0303 	and.w	r3, r3, #3
 800c364:	009b      	lsls	r3, r3, #2
 800c366:	220f      	movs	r2, #15
 800c368:	fa02 f303 	lsl.w	r3, r2, r3
 800c36c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800c36e:	4a2f      	ldr	r2, [pc, #188]	; (800c42c <HAL_GPIO_DeInit+0x1a8>)
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	089b      	lsrs	r3, r3, #2
 800c374:	3302      	adds	r3, #2
 800c376:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800c37a:	68fb      	ldr	r3, [r7, #12]
 800c37c:	43da      	mvns	r2, r3
 800c37e:	482b      	ldr	r0, [pc, #172]	; (800c42c <HAL_GPIO_DeInit+0x1a8>)
 800c380:	697b      	ldr	r3, [r7, #20]
 800c382:	089b      	lsrs	r3, r3, #2
 800c384:	400a      	ands	r2, r1
 800c386:	3302      	adds	r3, #2
 800c388:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681a      	ldr	r2, [r3, #0]
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	005b      	lsls	r3, r3, #1
 800c394:	2103      	movs	r1, #3
 800c396:	fa01 f303 	lsl.w	r3, r1, r3
 800c39a:	431a      	orrs	r2, r3
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	08da      	lsrs	r2, r3, #3
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	3208      	adds	r2, #8
 800c3a8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	f003 0307 	and.w	r3, r3, #7
 800c3b2:	009b      	lsls	r3, r3, #2
 800c3b4:	220f      	movs	r2, #15
 800c3b6:	fa02 f303 	lsl.w	r3, r2, r3
 800c3ba:	43db      	mvns	r3, r3
 800c3bc:	697a      	ldr	r2, [r7, #20]
 800c3be:	08d2      	lsrs	r2, r2, #3
 800c3c0:	4019      	ands	r1, r3
 800c3c2:	687b      	ldr	r3, [r7, #4]
 800c3c4:	3208      	adds	r2, #8
 800c3c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800c3ca:	687b      	ldr	r3, [r7, #4]
 800c3cc:	68da      	ldr	r2, [r3, #12]
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	005b      	lsls	r3, r3, #1
 800c3d2:	2103      	movs	r1, #3
 800c3d4:	fa01 f303 	lsl.w	r3, r1, r3
 800c3d8:	43db      	mvns	r3, r3
 800c3da:	401a      	ands	r2, r3
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800c3e0:	687b      	ldr	r3, [r7, #4]
 800c3e2:	685a      	ldr	r2, [r3, #4]
 800c3e4:	2101      	movs	r1, #1
 800c3e6:	697b      	ldr	r3, [r7, #20]
 800c3e8:	fa01 f303 	lsl.w	r3, r1, r3
 800c3ec:	43db      	mvns	r3, r3
 800c3ee:	401a      	ands	r2, r3
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	689a      	ldr	r2, [r3, #8]
 800c3f8:	697b      	ldr	r3, [r7, #20]
 800c3fa:	005b      	lsls	r3, r3, #1
 800c3fc:	2103      	movs	r1, #3
 800c3fe:	fa01 f303 	lsl.w	r3, r1, r3
 800c402:	43db      	mvns	r3, r3
 800c404:	401a      	ands	r2, r3
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	609a      	str	r2, [r3, #8]
    }

    position++;
 800c40a:	697b      	ldr	r3, [r7, #20]
 800c40c:	3301      	adds	r3, #1
 800c40e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800c410:	683a      	ldr	r2, [r7, #0]
 800c412:	697b      	ldr	r3, [r7, #20]
 800c414:	fa22 f303 	lsr.w	r3, r2, r3
 800c418:	2b00      	cmp	r3, #0
 800c41a:	f47f af3b 	bne.w	800c294 <HAL_GPIO_DeInit+0x10>
  }
}
 800c41e:	bf00      	nop
 800c420:	371c      	adds	r7, #28
 800c422:	46bd      	mov	sp, r7
 800c424:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c428:	4770      	bx	lr
 800c42a:	bf00      	nop
 800c42c:	40010000 	.word	0x40010000
 800c430:	48000400 	.word	0x48000400
 800c434:	48000800 	.word	0x48000800
 800c438:	48000c00 	.word	0x48000c00
 800c43c:	48001000 	.word	0x48001000
 800c440:	48001400 	.word	0x48001400
 800c444:	40010400 	.word	0x40010400

0800c448 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800c448:	b480      	push	{r7}
 800c44a:	b083      	sub	sp, #12
 800c44c:	af00      	add	r7, sp, #0
 800c44e:	6078      	str	r0, [r7, #4]
 800c450:	460b      	mov	r3, r1
 800c452:	807b      	strh	r3, [r7, #2]
 800c454:	4613      	mov	r3, r2
 800c456:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800c458:	787b      	ldrb	r3, [r7, #1]
 800c45a:	2b00      	cmp	r3, #0
 800c45c:	d003      	beq.n	800c466 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800c45e:	887a      	ldrh	r2, [r7, #2]
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800c464:	e002      	b.n	800c46c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800c466:	887a      	ldrh	r2, [r7, #2]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800c46c:	bf00      	nop
 800c46e:	370c      	adds	r7, #12
 800c470:	46bd      	mov	sp, r7
 800c472:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c476:	4770      	bx	lr

0800c478 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800c478:	b480      	push	{r7}
 800c47a:	b085      	sub	sp, #20
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d141      	bne.n	800c50a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c486:	4b4b      	ldr	r3, [pc, #300]	; (800c5b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c48e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c492:	d131      	bne.n	800c4f8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c494:	4b47      	ldr	r3, [pc, #284]	; (800c5b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c496:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c49a:	4a46      	ldr	r2, [pc, #280]	; (800c5b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c49c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4a0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c4a4:	4b43      	ldr	r3, [pc, #268]	; (800c5b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c4ac:	4a41      	ldr	r2, [pc, #260]	; (800c5b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c4ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c4b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c4b4:	4b40      	ldr	r3, [pc, #256]	; (800c5b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	2232      	movs	r2, #50	; 0x32
 800c4ba:	fb02 f303 	mul.w	r3, r2, r3
 800c4be:	4a3f      	ldr	r2, [pc, #252]	; (800c5bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c4c0:	fba2 2303 	umull	r2, r3, r2, r3
 800c4c4:	0c9b      	lsrs	r3, r3, #18
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c4ca:	e002      	b.n	800c4d2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	3b01      	subs	r3, #1
 800c4d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c4d2:	4b38      	ldr	r3, [pc, #224]	; (800c5b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c4d4:	695b      	ldr	r3, [r3, #20]
 800c4d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c4da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c4de:	d102      	bne.n	800c4e6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d1f2      	bne.n	800c4cc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c4e6:	4b33      	ldr	r3, [pc, #204]	; (800c5b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c4e8:	695b      	ldr	r3, [r3, #20]
 800c4ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c4ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c4f2:	d158      	bne.n	800c5a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c4f4:	2303      	movs	r3, #3
 800c4f6:	e057      	b.n	800c5a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c4f8:	4b2e      	ldr	r3, [pc, #184]	; (800c5b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c4fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c4fe:	4a2d      	ldr	r2, [pc, #180]	; (800c5b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c500:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c504:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c508:	e04d      	b.n	800c5a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c510:	d141      	bne.n	800c596 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800c512:	4b28      	ldr	r3, [pc, #160]	; (800c5b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c514:	681b      	ldr	r3, [r3, #0]
 800c516:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c51a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c51e:	d131      	bne.n	800c584 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c520:	4b24      	ldr	r3, [pc, #144]	; (800c5b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c522:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c526:	4a23      	ldr	r2, [pc, #140]	; (800c5b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c528:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c52c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800c530:	4b20      	ldr	r3, [pc, #128]	; (800c5b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c538:	4a1e      	ldr	r2, [pc, #120]	; (800c5b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c53a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c53e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800c540:	4b1d      	ldr	r3, [pc, #116]	; (800c5b8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	2232      	movs	r2, #50	; 0x32
 800c546:	fb02 f303 	mul.w	r3, r2, r3
 800c54a:	4a1c      	ldr	r2, [pc, #112]	; (800c5bc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800c54c:	fba2 2303 	umull	r2, r3, r2, r3
 800c550:	0c9b      	lsrs	r3, r3, #18
 800c552:	3301      	adds	r3, #1
 800c554:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c556:	e002      	b.n	800c55e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	3b01      	subs	r3, #1
 800c55c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800c55e:	4b15      	ldr	r3, [pc, #84]	; (800c5b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c560:	695b      	ldr	r3, [r3, #20]
 800c562:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c56a:	d102      	bne.n	800c572 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d1f2      	bne.n	800c558 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800c572:	4b10      	ldr	r3, [pc, #64]	; (800c5b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c574:	695b      	ldr	r3, [r3, #20]
 800c576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c57a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c57e:	d112      	bne.n	800c5a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800c580:	2303      	movs	r3, #3
 800c582:	e011      	b.n	800c5a8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800c584:	4b0b      	ldr	r3, [pc, #44]	; (800c5b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c586:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c58a:	4a0a      	ldr	r2, [pc, #40]	; (800c5b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c58c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c590:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800c594:	e007      	b.n	800c5a6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800c596:	4b07      	ldr	r3, [pc, #28]	; (800c5b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800c59e:	4a05      	ldr	r2, [pc, #20]	; (800c5b4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800c5a0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800c5a4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800c5a6:	2300      	movs	r3, #0
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3714      	adds	r7, #20
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b2:	4770      	bx	lr
 800c5b4:	40007000 	.word	0x40007000
 800c5b8:	20000c30 	.word	0x20000c30
 800c5bc:	431bde83 	.word	0x431bde83

0800c5c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b088      	sub	sp, #32
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d101      	bne.n	800c5d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c5ce:	2301      	movs	r3, #1
 800c5d0:	e308      	b.n	800cbe4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	f003 0301 	and.w	r3, r3, #1
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d075      	beq.n	800c6ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c5de:	4ba3      	ldr	r3, [pc, #652]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c5e0:	689b      	ldr	r3, [r3, #8]
 800c5e2:	f003 030c 	and.w	r3, r3, #12
 800c5e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c5e8:	4ba0      	ldr	r3, [pc, #640]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c5ea:	68db      	ldr	r3, [r3, #12]
 800c5ec:	f003 0303 	and.w	r3, r3, #3
 800c5f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800c5f2:	69bb      	ldr	r3, [r7, #24]
 800c5f4:	2b0c      	cmp	r3, #12
 800c5f6:	d102      	bne.n	800c5fe <HAL_RCC_OscConfig+0x3e>
 800c5f8:	697b      	ldr	r3, [r7, #20]
 800c5fa:	2b03      	cmp	r3, #3
 800c5fc:	d002      	beq.n	800c604 <HAL_RCC_OscConfig+0x44>
 800c5fe:	69bb      	ldr	r3, [r7, #24]
 800c600:	2b08      	cmp	r3, #8
 800c602:	d10b      	bne.n	800c61c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c604:	4b99      	ldr	r3, [pc, #612]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d05b      	beq.n	800c6c8 <HAL_RCC_OscConfig+0x108>
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	685b      	ldr	r3, [r3, #4]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d157      	bne.n	800c6c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800c618:	2301      	movs	r3, #1
 800c61a:	e2e3      	b.n	800cbe4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	685b      	ldr	r3, [r3, #4]
 800c620:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c624:	d106      	bne.n	800c634 <HAL_RCC_OscConfig+0x74>
 800c626:	4b91      	ldr	r3, [pc, #580]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c628:	681b      	ldr	r3, [r3, #0]
 800c62a:	4a90      	ldr	r2, [pc, #576]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c62c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c630:	6013      	str	r3, [r2, #0]
 800c632:	e01d      	b.n	800c670 <HAL_RCC_OscConfig+0xb0>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c63c:	d10c      	bne.n	800c658 <HAL_RCC_OscConfig+0x98>
 800c63e:	4b8b      	ldr	r3, [pc, #556]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c640:	681b      	ldr	r3, [r3, #0]
 800c642:	4a8a      	ldr	r2, [pc, #552]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c644:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c648:	6013      	str	r3, [r2, #0]
 800c64a:	4b88      	ldr	r3, [pc, #544]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	4a87      	ldr	r2, [pc, #540]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c650:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c654:	6013      	str	r3, [r2, #0]
 800c656:	e00b      	b.n	800c670 <HAL_RCC_OscConfig+0xb0>
 800c658:	4b84      	ldr	r3, [pc, #528]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	4a83      	ldr	r2, [pc, #524]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c65e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c662:	6013      	str	r3, [r2, #0]
 800c664:	4b81      	ldr	r3, [pc, #516]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	4a80      	ldr	r2, [pc, #512]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c66a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c66e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	685b      	ldr	r3, [r3, #4]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d013      	beq.n	800c6a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c678:	f7fc fbcc 	bl	8008e14 <HAL_GetTick>
 800c67c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c67e:	e008      	b.n	800c692 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c680:	f7fc fbc8 	bl	8008e14 <HAL_GetTick>
 800c684:	4602      	mov	r2, r0
 800c686:	693b      	ldr	r3, [r7, #16]
 800c688:	1ad3      	subs	r3, r2, r3
 800c68a:	2b64      	cmp	r3, #100	; 0x64
 800c68c:	d901      	bls.n	800c692 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800c68e:	2303      	movs	r3, #3
 800c690:	e2a8      	b.n	800cbe4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800c692:	4b76      	ldr	r3, [pc, #472]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c69a:	2b00      	cmp	r3, #0
 800c69c:	d0f0      	beq.n	800c680 <HAL_RCC_OscConfig+0xc0>
 800c69e:	e014      	b.n	800c6ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c6a0:	f7fc fbb8 	bl	8008e14 <HAL_GetTick>
 800c6a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c6a6:	e008      	b.n	800c6ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c6a8:	f7fc fbb4 	bl	8008e14 <HAL_GetTick>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	1ad3      	subs	r3, r2, r3
 800c6b2:	2b64      	cmp	r3, #100	; 0x64
 800c6b4:	d901      	bls.n	800c6ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c6b6:	2303      	movs	r3, #3
 800c6b8:	e294      	b.n	800cbe4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800c6ba:	4b6c      	ldr	r3, [pc, #432]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d1f0      	bne.n	800c6a8 <HAL_RCC_OscConfig+0xe8>
 800c6c6:	e000      	b.n	800c6ca <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c6c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f003 0302 	and.w	r3, r3, #2
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d075      	beq.n	800c7c2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c6d6:	4b65      	ldr	r3, [pc, #404]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c6d8:	689b      	ldr	r3, [r3, #8]
 800c6da:	f003 030c 	and.w	r3, r3, #12
 800c6de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c6e0:	4b62      	ldr	r3, [pc, #392]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c6e2:	68db      	ldr	r3, [r3, #12]
 800c6e4:	f003 0303 	and.w	r3, r3, #3
 800c6e8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800c6ea:	69bb      	ldr	r3, [r7, #24]
 800c6ec:	2b0c      	cmp	r3, #12
 800c6ee:	d102      	bne.n	800c6f6 <HAL_RCC_OscConfig+0x136>
 800c6f0:	697b      	ldr	r3, [r7, #20]
 800c6f2:	2b02      	cmp	r3, #2
 800c6f4:	d002      	beq.n	800c6fc <HAL_RCC_OscConfig+0x13c>
 800c6f6:	69bb      	ldr	r3, [r7, #24]
 800c6f8:	2b04      	cmp	r3, #4
 800c6fa:	d11f      	bne.n	800c73c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c6fc:	4b5b      	ldr	r3, [pc, #364]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c704:	2b00      	cmp	r3, #0
 800c706:	d005      	beq.n	800c714 <HAL_RCC_OscConfig+0x154>
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	68db      	ldr	r3, [r3, #12]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d101      	bne.n	800c714 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800c710:	2301      	movs	r3, #1
 800c712:	e267      	b.n	800cbe4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c714:	4b55      	ldr	r3, [pc, #340]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c716:	685b      	ldr	r3, [r3, #4]
 800c718:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	691b      	ldr	r3, [r3, #16]
 800c720:	061b      	lsls	r3, r3, #24
 800c722:	4952      	ldr	r1, [pc, #328]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c724:	4313      	orrs	r3, r2
 800c726:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800c728:	4b51      	ldr	r3, [pc, #324]	; (800c870 <HAL_RCC_OscConfig+0x2b0>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	4618      	mov	r0, r3
 800c72e:	f7fc fb25 	bl	8008d7c <HAL_InitTick>
 800c732:	4603      	mov	r3, r0
 800c734:	2b00      	cmp	r3, #0
 800c736:	d043      	beq.n	800c7c0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800c738:	2301      	movs	r3, #1
 800c73a:	e253      	b.n	800cbe4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	68db      	ldr	r3, [r3, #12]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d023      	beq.n	800c78c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c744:	4b49      	ldr	r3, [pc, #292]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	4a48      	ldr	r2, [pc, #288]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c74a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c74e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c750:	f7fc fb60 	bl	8008e14 <HAL_GetTick>
 800c754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c756:	e008      	b.n	800c76a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c758:	f7fc fb5c 	bl	8008e14 <HAL_GetTick>
 800c75c:	4602      	mov	r2, r0
 800c75e:	693b      	ldr	r3, [r7, #16]
 800c760:	1ad3      	subs	r3, r2, r3
 800c762:	2b02      	cmp	r3, #2
 800c764:	d901      	bls.n	800c76a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800c766:	2303      	movs	r3, #3
 800c768:	e23c      	b.n	800cbe4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800c76a:	4b40      	ldr	r3, [pc, #256]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c772:	2b00      	cmp	r3, #0
 800c774:	d0f0      	beq.n	800c758 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c776:	4b3d      	ldr	r3, [pc, #244]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	691b      	ldr	r3, [r3, #16]
 800c782:	061b      	lsls	r3, r3, #24
 800c784:	4939      	ldr	r1, [pc, #228]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c786:	4313      	orrs	r3, r2
 800c788:	604b      	str	r3, [r1, #4]
 800c78a:	e01a      	b.n	800c7c2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c78c:	4b37      	ldr	r3, [pc, #220]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4a36      	ldr	r2, [pc, #216]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c792:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c798:	f7fc fb3c 	bl	8008e14 <HAL_GetTick>
 800c79c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c79e:	e008      	b.n	800c7b2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c7a0:	f7fc fb38 	bl	8008e14 <HAL_GetTick>
 800c7a4:	4602      	mov	r2, r0
 800c7a6:	693b      	ldr	r3, [r7, #16]
 800c7a8:	1ad3      	subs	r3, r2, r3
 800c7aa:	2b02      	cmp	r3, #2
 800c7ac:	d901      	bls.n	800c7b2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800c7ae:	2303      	movs	r3, #3
 800c7b0:	e218      	b.n	800cbe4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800c7b2:	4b2e      	ldr	r3, [pc, #184]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c7b4:	681b      	ldr	r3, [r3, #0]
 800c7b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	d1f0      	bne.n	800c7a0 <HAL_RCC_OscConfig+0x1e0>
 800c7be:	e000      	b.n	800c7c2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c7c0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	f003 0308 	and.w	r3, r3, #8
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d03c      	beq.n	800c848 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	695b      	ldr	r3, [r3, #20]
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d01c      	beq.n	800c810 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c7d6:	4b25      	ldr	r3, [pc, #148]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c7d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c7dc:	4a23      	ldr	r2, [pc, #140]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c7de:	f043 0301 	orr.w	r3, r3, #1
 800c7e2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c7e6:	f7fc fb15 	bl	8008e14 <HAL_GetTick>
 800c7ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c7ec:	e008      	b.n	800c800 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c7ee:	f7fc fb11 	bl	8008e14 <HAL_GetTick>
 800c7f2:	4602      	mov	r2, r0
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	1ad3      	subs	r3, r2, r3
 800c7f8:	2b02      	cmp	r3, #2
 800c7fa:	d901      	bls.n	800c800 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800c7fc:	2303      	movs	r3, #3
 800c7fe:	e1f1      	b.n	800cbe4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800c800:	4b1a      	ldr	r3, [pc, #104]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c802:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c806:	f003 0302 	and.w	r3, r3, #2
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d0ef      	beq.n	800c7ee <HAL_RCC_OscConfig+0x22e>
 800c80e:	e01b      	b.n	800c848 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c810:	4b16      	ldr	r3, [pc, #88]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c812:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c816:	4a15      	ldr	r2, [pc, #84]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c818:	f023 0301 	bic.w	r3, r3, #1
 800c81c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c820:	f7fc faf8 	bl	8008e14 <HAL_GetTick>
 800c824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c826:	e008      	b.n	800c83a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c828:	f7fc faf4 	bl	8008e14 <HAL_GetTick>
 800c82c:	4602      	mov	r2, r0
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	1ad3      	subs	r3, r2, r3
 800c832:	2b02      	cmp	r3, #2
 800c834:	d901      	bls.n	800c83a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800c836:	2303      	movs	r3, #3
 800c838:	e1d4      	b.n	800cbe4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800c83a:	4b0c      	ldr	r3, [pc, #48]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c83c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800c840:	f003 0302 	and.w	r3, r3, #2
 800c844:	2b00      	cmp	r3, #0
 800c846:	d1ef      	bne.n	800c828 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	681b      	ldr	r3, [r3, #0]
 800c84c:	f003 0304 	and.w	r3, r3, #4
 800c850:	2b00      	cmp	r3, #0
 800c852:	f000 80ab 	beq.w	800c9ac <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c856:	2300      	movs	r3, #0
 800c858:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800c85a:	4b04      	ldr	r3, [pc, #16]	; (800c86c <HAL_RCC_OscConfig+0x2ac>)
 800c85c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c85e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c862:	2b00      	cmp	r3, #0
 800c864:	d106      	bne.n	800c874 <HAL_RCC_OscConfig+0x2b4>
 800c866:	2301      	movs	r3, #1
 800c868:	e005      	b.n	800c876 <HAL_RCC_OscConfig+0x2b6>
 800c86a:	bf00      	nop
 800c86c:	40021000 	.word	0x40021000
 800c870:	20000c34 	.word	0x20000c34
 800c874:	2300      	movs	r3, #0
 800c876:	2b00      	cmp	r3, #0
 800c878:	d00d      	beq.n	800c896 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c87a:	4baf      	ldr	r3, [pc, #700]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800c87c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c87e:	4aae      	ldr	r2, [pc, #696]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800c880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c884:	6593      	str	r3, [r2, #88]	; 0x58
 800c886:	4bac      	ldr	r3, [pc, #688]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800c888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c88a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c88e:	60fb      	str	r3, [r7, #12]
 800c890:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800c892:	2301      	movs	r3, #1
 800c894:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c896:	4ba9      	ldr	r3, [pc, #676]	; (800cb3c <HAL_RCC_OscConfig+0x57c>)
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d118      	bne.n	800c8d4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c8a2:	4ba6      	ldr	r3, [pc, #664]	; (800cb3c <HAL_RCC_OscConfig+0x57c>)
 800c8a4:	681b      	ldr	r3, [r3, #0]
 800c8a6:	4aa5      	ldr	r2, [pc, #660]	; (800cb3c <HAL_RCC_OscConfig+0x57c>)
 800c8a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c8ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c8ae:	f7fc fab1 	bl	8008e14 <HAL_GetTick>
 800c8b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c8b4:	e008      	b.n	800c8c8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c8b6:	f7fc faad 	bl	8008e14 <HAL_GetTick>
 800c8ba:	4602      	mov	r2, r0
 800c8bc:	693b      	ldr	r3, [r7, #16]
 800c8be:	1ad3      	subs	r3, r2, r3
 800c8c0:	2b02      	cmp	r3, #2
 800c8c2:	d901      	bls.n	800c8c8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800c8c4:	2303      	movs	r3, #3
 800c8c6:	e18d      	b.n	800cbe4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800c8c8:	4b9c      	ldr	r3, [pc, #624]	; (800cb3c <HAL_RCC_OscConfig+0x57c>)
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d0f0      	beq.n	800c8b6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	689b      	ldr	r3, [r3, #8]
 800c8d8:	2b01      	cmp	r3, #1
 800c8da:	d108      	bne.n	800c8ee <HAL_RCC_OscConfig+0x32e>
 800c8dc:	4b96      	ldr	r3, [pc, #600]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800c8de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8e2:	4a95      	ldr	r2, [pc, #596]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800c8e4:	f043 0301 	orr.w	r3, r3, #1
 800c8e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c8ec:	e024      	b.n	800c938 <HAL_RCC_OscConfig+0x378>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	689b      	ldr	r3, [r3, #8]
 800c8f2:	2b05      	cmp	r3, #5
 800c8f4:	d110      	bne.n	800c918 <HAL_RCC_OscConfig+0x358>
 800c8f6:	4b90      	ldr	r3, [pc, #576]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800c8f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8fc:	4a8e      	ldr	r2, [pc, #568]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800c8fe:	f043 0304 	orr.w	r3, r3, #4
 800c902:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c906:	4b8c      	ldr	r3, [pc, #560]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800c908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c90c:	4a8a      	ldr	r2, [pc, #552]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800c90e:	f043 0301 	orr.w	r3, r3, #1
 800c912:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c916:	e00f      	b.n	800c938 <HAL_RCC_OscConfig+0x378>
 800c918:	4b87      	ldr	r3, [pc, #540]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800c91a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c91e:	4a86      	ldr	r2, [pc, #536]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800c920:	f023 0301 	bic.w	r3, r3, #1
 800c924:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800c928:	4b83      	ldr	r3, [pc, #524]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800c92a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c92e:	4a82      	ldr	r2, [pc, #520]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800c930:	f023 0304 	bic.w	r3, r3, #4
 800c934:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	689b      	ldr	r3, [r3, #8]
 800c93c:	2b00      	cmp	r3, #0
 800c93e:	d016      	beq.n	800c96e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c940:	f7fc fa68 	bl	8008e14 <HAL_GetTick>
 800c944:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c946:	e00a      	b.n	800c95e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c948:	f7fc fa64 	bl	8008e14 <HAL_GetTick>
 800c94c:	4602      	mov	r2, r0
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	1ad3      	subs	r3, r2, r3
 800c952:	f241 3288 	movw	r2, #5000	; 0x1388
 800c956:	4293      	cmp	r3, r2
 800c958:	d901      	bls.n	800c95e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800c95a:	2303      	movs	r3, #3
 800c95c:	e142      	b.n	800cbe4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c95e:	4b76      	ldr	r3, [pc, #472]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800c960:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c964:	f003 0302 	and.w	r3, r3, #2
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d0ed      	beq.n	800c948 <HAL_RCC_OscConfig+0x388>
 800c96c:	e015      	b.n	800c99a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c96e:	f7fc fa51 	bl	8008e14 <HAL_GetTick>
 800c972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c974:	e00a      	b.n	800c98c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c976:	f7fc fa4d 	bl	8008e14 <HAL_GetTick>
 800c97a:	4602      	mov	r2, r0
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	1ad3      	subs	r3, r2, r3
 800c980:	f241 3288 	movw	r2, #5000	; 0x1388
 800c984:	4293      	cmp	r3, r2
 800c986:	d901      	bls.n	800c98c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800c988:	2303      	movs	r3, #3
 800c98a:	e12b      	b.n	800cbe4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800c98c:	4b6a      	ldr	r3, [pc, #424]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800c98e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c992:	f003 0302 	and.w	r3, r3, #2
 800c996:	2b00      	cmp	r3, #0
 800c998:	d1ed      	bne.n	800c976 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800c99a:	7ffb      	ldrb	r3, [r7, #31]
 800c99c:	2b01      	cmp	r3, #1
 800c99e:	d105      	bne.n	800c9ac <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c9a0:	4b65      	ldr	r3, [pc, #404]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800c9a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c9a4:	4a64      	ldr	r2, [pc, #400]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800c9a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c9aa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f003 0320 	and.w	r3, r3, #32
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d03c      	beq.n	800ca32 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	699b      	ldr	r3, [r3, #24]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d01c      	beq.n	800c9fa <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c9c0:	4b5d      	ldr	r3, [pc, #372]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800c9c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c9c6:	4a5c      	ldr	r2, [pc, #368]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800c9c8:	f043 0301 	orr.w	r3, r3, #1
 800c9cc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c9d0:	f7fc fa20 	bl	8008e14 <HAL_GetTick>
 800c9d4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c9d6:	e008      	b.n	800c9ea <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c9d8:	f7fc fa1c 	bl	8008e14 <HAL_GetTick>
 800c9dc:	4602      	mov	r2, r0
 800c9de:	693b      	ldr	r3, [r7, #16]
 800c9e0:	1ad3      	subs	r3, r2, r3
 800c9e2:	2b02      	cmp	r3, #2
 800c9e4:	d901      	bls.n	800c9ea <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800c9e6:	2303      	movs	r3, #3
 800c9e8:	e0fc      	b.n	800cbe4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800c9ea:	4b53      	ldr	r3, [pc, #332]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800c9ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800c9f0:	f003 0302 	and.w	r3, r3, #2
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d0ef      	beq.n	800c9d8 <HAL_RCC_OscConfig+0x418>
 800c9f8:	e01b      	b.n	800ca32 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c9fa:	4b4f      	ldr	r3, [pc, #316]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800c9fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ca00:	4a4d      	ldr	r2, [pc, #308]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800ca02:	f023 0301 	bic.w	r3, r3, #1
 800ca06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ca0a:	f7fc fa03 	bl	8008e14 <HAL_GetTick>
 800ca0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ca10:	e008      	b.n	800ca24 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ca12:	f7fc f9ff 	bl	8008e14 <HAL_GetTick>
 800ca16:	4602      	mov	r2, r0
 800ca18:	693b      	ldr	r3, [r7, #16]
 800ca1a:	1ad3      	subs	r3, r2, r3
 800ca1c:	2b02      	cmp	r3, #2
 800ca1e:	d901      	bls.n	800ca24 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800ca20:	2303      	movs	r3, #3
 800ca22:	e0df      	b.n	800cbe4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ca24:	4b44      	ldr	r3, [pc, #272]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800ca26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800ca2a:	f003 0302 	and.w	r3, r3, #2
 800ca2e:	2b00      	cmp	r3, #0
 800ca30:	d1ef      	bne.n	800ca12 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	69db      	ldr	r3, [r3, #28]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	f000 80d3 	beq.w	800cbe2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ca3c:	4b3e      	ldr	r3, [pc, #248]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800ca3e:	689b      	ldr	r3, [r3, #8]
 800ca40:	f003 030c 	and.w	r3, r3, #12
 800ca44:	2b0c      	cmp	r3, #12
 800ca46:	f000 808d 	beq.w	800cb64 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	69db      	ldr	r3, [r3, #28]
 800ca4e:	2b02      	cmp	r3, #2
 800ca50:	d15a      	bne.n	800cb08 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ca52:	4b39      	ldr	r3, [pc, #228]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	4a38      	ldr	r2, [pc, #224]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800ca58:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800ca5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ca5e:	f7fc f9d9 	bl	8008e14 <HAL_GetTick>
 800ca62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ca64:	e008      	b.n	800ca78 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ca66:	f7fc f9d5 	bl	8008e14 <HAL_GetTick>
 800ca6a:	4602      	mov	r2, r0
 800ca6c:	693b      	ldr	r3, [r7, #16]
 800ca6e:	1ad3      	subs	r3, r2, r3
 800ca70:	2b02      	cmp	r3, #2
 800ca72:	d901      	bls.n	800ca78 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800ca74:	2303      	movs	r3, #3
 800ca76:	e0b5      	b.n	800cbe4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ca78:	4b2f      	ldr	r3, [pc, #188]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d1f0      	bne.n	800ca66 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800ca84:	4b2c      	ldr	r3, [pc, #176]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800ca86:	68da      	ldr	r2, [r3, #12]
 800ca88:	4b2d      	ldr	r3, [pc, #180]	; (800cb40 <HAL_RCC_OscConfig+0x580>)
 800ca8a:	4013      	ands	r3, r2
 800ca8c:	687a      	ldr	r2, [r7, #4]
 800ca8e:	6a11      	ldr	r1, [r2, #32]
 800ca90:	687a      	ldr	r2, [r7, #4]
 800ca92:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ca94:	3a01      	subs	r2, #1
 800ca96:	0112      	lsls	r2, r2, #4
 800ca98:	4311      	orrs	r1, r2
 800ca9a:	687a      	ldr	r2, [r7, #4]
 800ca9c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800ca9e:	0212      	lsls	r2, r2, #8
 800caa0:	4311      	orrs	r1, r2
 800caa2:	687a      	ldr	r2, [r7, #4]
 800caa4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800caa6:	0852      	lsrs	r2, r2, #1
 800caa8:	3a01      	subs	r2, #1
 800caaa:	0552      	lsls	r2, r2, #21
 800caac:	4311      	orrs	r1, r2
 800caae:	687a      	ldr	r2, [r7, #4]
 800cab0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800cab2:	0852      	lsrs	r2, r2, #1
 800cab4:	3a01      	subs	r2, #1
 800cab6:	0652      	lsls	r2, r2, #25
 800cab8:	4311      	orrs	r1, r2
 800caba:	687a      	ldr	r2, [r7, #4]
 800cabc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800cabe:	06d2      	lsls	r2, r2, #27
 800cac0:	430a      	orrs	r2, r1
 800cac2:	491d      	ldr	r1, [pc, #116]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800cac4:	4313      	orrs	r3, r2
 800cac6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cac8:	4b1b      	ldr	r3, [pc, #108]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	4a1a      	ldr	r2, [pc, #104]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800cace:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cad2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800cad4:	4b18      	ldr	r3, [pc, #96]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800cad6:	68db      	ldr	r3, [r3, #12]
 800cad8:	4a17      	ldr	r2, [pc, #92]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800cada:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800cade:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cae0:	f7fc f998 	bl	8008e14 <HAL_GetTick>
 800cae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cae6:	e008      	b.n	800cafa <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cae8:	f7fc f994 	bl	8008e14 <HAL_GetTick>
 800caec:	4602      	mov	r2, r0
 800caee:	693b      	ldr	r3, [r7, #16]
 800caf0:	1ad3      	subs	r3, r2, r3
 800caf2:	2b02      	cmp	r3, #2
 800caf4:	d901      	bls.n	800cafa <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800caf6:	2303      	movs	r3, #3
 800caf8:	e074      	b.n	800cbe4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cafa:	4b0f      	ldr	r3, [pc, #60]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d0f0      	beq.n	800cae8 <HAL_RCC_OscConfig+0x528>
 800cb06:	e06c      	b.n	800cbe2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cb08:	4b0b      	ldr	r3, [pc, #44]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	4a0a      	ldr	r2, [pc, #40]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800cb0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800cb12:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800cb14:	4b08      	ldr	r3, [pc, #32]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800cb16:	68db      	ldr	r3, [r3, #12]
 800cb18:	4a07      	ldr	r2, [pc, #28]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800cb1a:	f023 0303 	bic.w	r3, r3, #3
 800cb1e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800cb20:	4b05      	ldr	r3, [pc, #20]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800cb22:	68db      	ldr	r3, [r3, #12]
 800cb24:	4a04      	ldr	r2, [pc, #16]	; (800cb38 <HAL_RCC_OscConfig+0x578>)
 800cb26:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800cb2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800cb2e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb30:	f7fc f970 	bl	8008e14 <HAL_GetTick>
 800cb34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cb36:	e00e      	b.n	800cb56 <HAL_RCC_OscConfig+0x596>
 800cb38:	40021000 	.word	0x40021000
 800cb3c:	40007000 	.word	0x40007000
 800cb40:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800cb44:	f7fc f966 	bl	8008e14 <HAL_GetTick>
 800cb48:	4602      	mov	r2, r0
 800cb4a:	693b      	ldr	r3, [r7, #16]
 800cb4c:	1ad3      	subs	r3, r2, r3
 800cb4e:	2b02      	cmp	r3, #2
 800cb50:	d901      	bls.n	800cb56 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800cb52:	2303      	movs	r3, #3
 800cb54:	e046      	b.n	800cbe4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800cb56:	4b25      	ldr	r3, [pc, #148]	; (800cbec <HAL_RCC_OscConfig+0x62c>)
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb5e:	2b00      	cmp	r3, #0
 800cb60:	d1f0      	bne.n	800cb44 <HAL_RCC_OscConfig+0x584>
 800cb62:	e03e      	b.n	800cbe2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	69db      	ldr	r3, [r3, #28]
 800cb68:	2b01      	cmp	r3, #1
 800cb6a:	d101      	bne.n	800cb70 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800cb6c:	2301      	movs	r3, #1
 800cb6e:	e039      	b.n	800cbe4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800cb70:	4b1e      	ldr	r3, [pc, #120]	; (800cbec <HAL_RCC_OscConfig+0x62c>)
 800cb72:	68db      	ldr	r3, [r3, #12]
 800cb74:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cb76:	697b      	ldr	r3, [r7, #20]
 800cb78:	f003 0203 	and.w	r2, r3, #3
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	6a1b      	ldr	r3, [r3, #32]
 800cb80:	429a      	cmp	r2, r3
 800cb82:	d12c      	bne.n	800cbde <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cb84:	697b      	ldr	r3, [r7, #20]
 800cb86:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb8e:	3b01      	subs	r3, #1
 800cb90:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d123      	bne.n	800cbde <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800cb96:	697b      	ldr	r3, [r7, #20]
 800cb98:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cba0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d11b      	bne.n	800cbde <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800cba6:	697b      	ldr	r3, [r7, #20]
 800cba8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800cbb2:	429a      	cmp	r2, r3
 800cbb4:	d113      	bne.n	800cbde <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cbc0:	085b      	lsrs	r3, r3, #1
 800cbc2:	3b01      	subs	r3, #1
 800cbc4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800cbc6:	429a      	cmp	r2, r3
 800cbc8:	d109      	bne.n	800cbde <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cbd4:	085b      	lsrs	r3, r3, #1
 800cbd6:	3b01      	subs	r3, #1
 800cbd8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cbda:	429a      	cmp	r2, r3
 800cbdc:	d001      	beq.n	800cbe2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800cbde:	2301      	movs	r3, #1
 800cbe0:	e000      	b.n	800cbe4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800cbe2:	2300      	movs	r3, #0
}
 800cbe4:	4618      	mov	r0, r3
 800cbe6:	3720      	adds	r7, #32
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	40021000 	.word	0x40021000

0800cbf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b086      	sub	sp, #24
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
 800cbf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d101      	bne.n	800cc08 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800cc04:	2301      	movs	r3, #1
 800cc06:	e11e      	b.n	800ce46 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800cc08:	4b91      	ldr	r3, [pc, #580]	; (800ce50 <HAL_RCC_ClockConfig+0x260>)
 800cc0a:	681b      	ldr	r3, [r3, #0]
 800cc0c:	f003 030f 	and.w	r3, r3, #15
 800cc10:	683a      	ldr	r2, [r7, #0]
 800cc12:	429a      	cmp	r2, r3
 800cc14:	d910      	bls.n	800cc38 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc16:	4b8e      	ldr	r3, [pc, #568]	; (800ce50 <HAL_RCC_ClockConfig+0x260>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f023 020f 	bic.w	r2, r3, #15
 800cc1e:	498c      	ldr	r1, [pc, #560]	; (800ce50 <HAL_RCC_ClockConfig+0x260>)
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	4313      	orrs	r3, r2
 800cc24:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc26:	4b8a      	ldr	r3, [pc, #552]	; (800ce50 <HAL_RCC_ClockConfig+0x260>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	f003 030f 	and.w	r3, r3, #15
 800cc2e:	683a      	ldr	r2, [r7, #0]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d001      	beq.n	800cc38 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800cc34:	2301      	movs	r3, #1
 800cc36:	e106      	b.n	800ce46 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	f003 0301 	and.w	r3, r3, #1
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d073      	beq.n	800cd2c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	685b      	ldr	r3, [r3, #4]
 800cc48:	2b03      	cmp	r3, #3
 800cc4a:	d129      	bne.n	800cca0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800cc4c:	4b81      	ldr	r3, [pc, #516]	; (800ce54 <HAL_RCC_ClockConfig+0x264>)
 800cc4e:	681b      	ldr	r3, [r3, #0]
 800cc50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d101      	bne.n	800cc5c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800cc58:	2301      	movs	r3, #1
 800cc5a:	e0f4      	b.n	800ce46 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800cc5c:	f000 f972 	bl	800cf44 <RCC_GetSysClockFreqFromPLLSource>
 800cc60:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	4a7c      	ldr	r2, [pc, #496]	; (800ce58 <HAL_RCC_ClockConfig+0x268>)
 800cc66:	4293      	cmp	r3, r2
 800cc68:	d93f      	bls.n	800ccea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800cc6a:	4b7a      	ldr	r3, [pc, #488]	; (800ce54 <HAL_RCC_ClockConfig+0x264>)
 800cc6c:	689b      	ldr	r3, [r3, #8]
 800cc6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	d009      	beq.n	800cc8a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800cc7e:	2b00      	cmp	r3, #0
 800cc80:	d033      	beq.n	800ccea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d12f      	bne.n	800ccea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800cc8a:	4b72      	ldr	r3, [pc, #456]	; (800ce54 <HAL_RCC_ClockConfig+0x264>)
 800cc8c:	689b      	ldr	r3, [r3, #8]
 800cc8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cc92:	4a70      	ldr	r2, [pc, #448]	; (800ce54 <HAL_RCC_ClockConfig+0x264>)
 800cc94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc98:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800cc9a:	2380      	movs	r3, #128	; 0x80
 800cc9c:	617b      	str	r3, [r7, #20]
 800cc9e:	e024      	b.n	800ccea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	685b      	ldr	r3, [r3, #4]
 800cca4:	2b02      	cmp	r3, #2
 800cca6:	d107      	bne.n	800ccb8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800cca8:	4b6a      	ldr	r3, [pc, #424]	; (800ce54 <HAL_RCC_ClockConfig+0x264>)
 800ccaa:	681b      	ldr	r3, [r3, #0]
 800ccac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	d109      	bne.n	800ccc8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	e0c6      	b.n	800ce46 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ccb8:	4b66      	ldr	r3, [pc, #408]	; (800ce54 <HAL_RCC_ClockConfig+0x264>)
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d101      	bne.n	800ccc8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ccc4:	2301      	movs	r3, #1
 800ccc6:	e0be      	b.n	800ce46 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800ccc8:	f000 f8ce 	bl	800ce68 <HAL_RCC_GetSysClockFreq>
 800cccc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800ccce:	693b      	ldr	r3, [r7, #16]
 800ccd0:	4a61      	ldr	r2, [pc, #388]	; (800ce58 <HAL_RCC_ClockConfig+0x268>)
 800ccd2:	4293      	cmp	r3, r2
 800ccd4:	d909      	bls.n	800ccea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ccd6:	4b5f      	ldr	r3, [pc, #380]	; (800ce54 <HAL_RCC_ClockConfig+0x264>)
 800ccd8:	689b      	ldr	r3, [r3, #8]
 800ccda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ccde:	4a5d      	ldr	r2, [pc, #372]	; (800ce54 <HAL_RCC_ClockConfig+0x264>)
 800cce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cce4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800cce6:	2380      	movs	r3, #128	; 0x80
 800cce8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ccea:	4b5a      	ldr	r3, [pc, #360]	; (800ce54 <HAL_RCC_ClockConfig+0x264>)
 800ccec:	689b      	ldr	r3, [r3, #8]
 800ccee:	f023 0203 	bic.w	r2, r3, #3
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	685b      	ldr	r3, [r3, #4]
 800ccf6:	4957      	ldr	r1, [pc, #348]	; (800ce54 <HAL_RCC_ClockConfig+0x264>)
 800ccf8:	4313      	orrs	r3, r2
 800ccfa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ccfc:	f7fc f88a 	bl	8008e14 <HAL_GetTick>
 800cd00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cd02:	e00a      	b.n	800cd1a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cd04:	f7fc f886 	bl	8008e14 <HAL_GetTick>
 800cd08:	4602      	mov	r2, r0
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	1ad3      	subs	r3, r2, r3
 800cd0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800cd12:	4293      	cmp	r3, r2
 800cd14:	d901      	bls.n	800cd1a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800cd16:	2303      	movs	r3, #3
 800cd18:	e095      	b.n	800ce46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cd1a:	4b4e      	ldr	r3, [pc, #312]	; (800ce54 <HAL_RCC_ClockConfig+0x264>)
 800cd1c:	689b      	ldr	r3, [r3, #8]
 800cd1e:	f003 020c 	and.w	r2, r3, #12
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	685b      	ldr	r3, [r3, #4]
 800cd26:	009b      	lsls	r3, r3, #2
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d1eb      	bne.n	800cd04 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	f003 0302 	and.w	r3, r3, #2
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d023      	beq.n	800cd80 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	f003 0304 	and.w	r3, r3, #4
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d005      	beq.n	800cd50 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800cd44:	4b43      	ldr	r3, [pc, #268]	; (800ce54 <HAL_RCC_ClockConfig+0x264>)
 800cd46:	689b      	ldr	r3, [r3, #8]
 800cd48:	4a42      	ldr	r2, [pc, #264]	; (800ce54 <HAL_RCC_ClockConfig+0x264>)
 800cd4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800cd4e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f003 0308 	and.w	r3, r3, #8
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d007      	beq.n	800cd6c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800cd5c:	4b3d      	ldr	r3, [pc, #244]	; (800ce54 <HAL_RCC_ClockConfig+0x264>)
 800cd5e:	689b      	ldr	r3, [r3, #8]
 800cd60:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800cd64:	4a3b      	ldr	r2, [pc, #236]	; (800ce54 <HAL_RCC_ClockConfig+0x264>)
 800cd66:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800cd6a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cd6c:	4b39      	ldr	r3, [pc, #228]	; (800ce54 <HAL_RCC_ClockConfig+0x264>)
 800cd6e:	689b      	ldr	r3, [r3, #8]
 800cd70:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	689b      	ldr	r3, [r3, #8]
 800cd78:	4936      	ldr	r1, [pc, #216]	; (800ce54 <HAL_RCC_ClockConfig+0x264>)
 800cd7a:	4313      	orrs	r3, r2
 800cd7c:	608b      	str	r3, [r1, #8]
 800cd7e:	e008      	b.n	800cd92 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800cd80:	697b      	ldr	r3, [r7, #20]
 800cd82:	2b80      	cmp	r3, #128	; 0x80
 800cd84:	d105      	bne.n	800cd92 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800cd86:	4b33      	ldr	r3, [pc, #204]	; (800ce54 <HAL_RCC_ClockConfig+0x264>)
 800cd88:	689b      	ldr	r3, [r3, #8]
 800cd8a:	4a32      	ldr	r2, [pc, #200]	; (800ce54 <HAL_RCC_ClockConfig+0x264>)
 800cd8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800cd90:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cd92:	4b2f      	ldr	r3, [pc, #188]	; (800ce50 <HAL_RCC_ClockConfig+0x260>)
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	f003 030f 	and.w	r3, r3, #15
 800cd9a:	683a      	ldr	r2, [r7, #0]
 800cd9c:	429a      	cmp	r2, r3
 800cd9e:	d21d      	bcs.n	800cddc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cda0:	4b2b      	ldr	r3, [pc, #172]	; (800ce50 <HAL_RCC_ClockConfig+0x260>)
 800cda2:	681b      	ldr	r3, [r3, #0]
 800cda4:	f023 020f 	bic.w	r2, r3, #15
 800cda8:	4929      	ldr	r1, [pc, #164]	; (800ce50 <HAL_RCC_ClockConfig+0x260>)
 800cdaa:	683b      	ldr	r3, [r7, #0]
 800cdac:	4313      	orrs	r3, r2
 800cdae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800cdb0:	f7fc f830 	bl	8008e14 <HAL_GetTick>
 800cdb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cdb6:	e00a      	b.n	800cdce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cdb8:	f7fc f82c 	bl	8008e14 <HAL_GetTick>
 800cdbc:	4602      	mov	r2, r0
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	1ad3      	subs	r3, r2, r3
 800cdc2:	f241 3288 	movw	r2, #5000	; 0x1388
 800cdc6:	4293      	cmp	r3, r2
 800cdc8:	d901      	bls.n	800cdce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800cdca:	2303      	movs	r3, #3
 800cdcc:	e03b      	b.n	800ce46 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cdce:	4b20      	ldr	r3, [pc, #128]	; (800ce50 <HAL_RCC_ClockConfig+0x260>)
 800cdd0:	681b      	ldr	r3, [r3, #0]
 800cdd2:	f003 030f 	and.w	r3, r3, #15
 800cdd6:	683a      	ldr	r2, [r7, #0]
 800cdd8:	429a      	cmp	r2, r3
 800cdda:	d1ed      	bne.n	800cdb8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	f003 0304 	and.w	r3, r3, #4
 800cde4:	2b00      	cmp	r3, #0
 800cde6:	d008      	beq.n	800cdfa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cde8:	4b1a      	ldr	r3, [pc, #104]	; (800ce54 <HAL_RCC_ClockConfig+0x264>)
 800cdea:	689b      	ldr	r3, [r3, #8]
 800cdec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	68db      	ldr	r3, [r3, #12]
 800cdf4:	4917      	ldr	r1, [pc, #92]	; (800ce54 <HAL_RCC_ClockConfig+0x264>)
 800cdf6:	4313      	orrs	r3, r2
 800cdf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	681b      	ldr	r3, [r3, #0]
 800cdfe:	f003 0308 	and.w	r3, r3, #8
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d009      	beq.n	800ce1a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ce06:	4b13      	ldr	r3, [pc, #76]	; (800ce54 <HAL_RCC_ClockConfig+0x264>)
 800ce08:	689b      	ldr	r3, [r3, #8]
 800ce0a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	691b      	ldr	r3, [r3, #16]
 800ce12:	00db      	lsls	r3, r3, #3
 800ce14:	490f      	ldr	r1, [pc, #60]	; (800ce54 <HAL_RCC_ClockConfig+0x264>)
 800ce16:	4313      	orrs	r3, r2
 800ce18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ce1a:	f000 f825 	bl	800ce68 <HAL_RCC_GetSysClockFreq>
 800ce1e:	4601      	mov	r1, r0
 800ce20:	4b0c      	ldr	r3, [pc, #48]	; (800ce54 <HAL_RCC_ClockConfig+0x264>)
 800ce22:	689b      	ldr	r3, [r3, #8]
 800ce24:	091b      	lsrs	r3, r3, #4
 800ce26:	f003 030f 	and.w	r3, r3, #15
 800ce2a:	4a0c      	ldr	r2, [pc, #48]	; (800ce5c <HAL_RCC_ClockConfig+0x26c>)
 800ce2c:	5cd3      	ldrb	r3, [r2, r3]
 800ce2e:	f003 031f 	and.w	r3, r3, #31
 800ce32:	fa21 f303 	lsr.w	r3, r1, r3
 800ce36:	4a0a      	ldr	r2, [pc, #40]	; (800ce60 <HAL_RCC_ClockConfig+0x270>)
 800ce38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800ce3a:	4b0a      	ldr	r3, [pc, #40]	; (800ce64 <HAL_RCC_ClockConfig+0x274>)
 800ce3c:	681b      	ldr	r3, [r3, #0]
 800ce3e:	4618      	mov	r0, r3
 800ce40:	f7fb ff9c 	bl	8008d7c <HAL_InitTick>
 800ce44:	4603      	mov	r3, r0
}
 800ce46:	4618      	mov	r0, r3
 800ce48:	3718      	adds	r7, #24
 800ce4a:	46bd      	mov	sp, r7
 800ce4c:	bd80      	pop	{r7, pc}
 800ce4e:	bf00      	nop
 800ce50:	40022000 	.word	0x40022000
 800ce54:	40021000 	.word	0x40021000
 800ce58:	04c4b400 	.word	0x04c4b400
 800ce5c:	08016508 	.word	0x08016508
 800ce60:	20000c30 	.word	0x20000c30
 800ce64:	20000c34 	.word	0x20000c34

0800ce68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ce68:	b480      	push	{r7}
 800ce6a:	b087      	sub	sp, #28
 800ce6c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800ce6e:	4b2c      	ldr	r3, [pc, #176]	; (800cf20 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ce70:	689b      	ldr	r3, [r3, #8]
 800ce72:	f003 030c 	and.w	r3, r3, #12
 800ce76:	2b04      	cmp	r3, #4
 800ce78:	d102      	bne.n	800ce80 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ce7a:	4b2a      	ldr	r3, [pc, #168]	; (800cf24 <HAL_RCC_GetSysClockFreq+0xbc>)
 800ce7c:	613b      	str	r3, [r7, #16]
 800ce7e:	e047      	b.n	800cf10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800ce80:	4b27      	ldr	r3, [pc, #156]	; (800cf20 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ce82:	689b      	ldr	r3, [r3, #8]
 800ce84:	f003 030c 	and.w	r3, r3, #12
 800ce88:	2b08      	cmp	r3, #8
 800ce8a:	d102      	bne.n	800ce92 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800ce8c:	4b26      	ldr	r3, [pc, #152]	; (800cf28 <HAL_RCC_GetSysClockFreq+0xc0>)
 800ce8e:	613b      	str	r3, [r7, #16]
 800ce90:	e03e      	b.n	800cf10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800ce92:	4b23      	ldr	r3, [pc, #140]	; (800cf20 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ce94:	689b      	ldr	r3, [r3, #8]
 800ce96:	f003 030c 	and.w	r3, r3, #12
 800ce9a:	2b0c      	cmp	r3, #12
 800ce9c:	d136      	bne.n	800cf0c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ce9e:	4b20      	ldr	r3, [pc, #128]	; (800cf20 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cea0:	68db      	ldr	r3, [r3, #12]
 800cea2:	f003 0303 	and.w	r3, r3, #3
 800cea6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cea8:	4b1d      	ldr	r3, [pc, #116]	; (800cf20 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ceaa:	68db      	ldr	r3, [r3, #12]
 800ceac:	091b      	lsrs	r3, r3, #4
 800ceae:	f003 030f 	and.w	r3, r3, #15
 800ceb2:	3301      	adds	r3, #1
 800ceb4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ceb6:	68fb      	ldr	r3, [r7, #12]
 800ceb8:	2b03      	cmp	r3, #3
 800ceba:	d10c      	bne.n	800ced6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cebc:	4a1a      	ldr	r2, [pc, #104]	; (800cf28 <HAL_RCC_GetSysClockFreq+0xc0>)
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cec4:	4a16      	ldr	r2, [pc, #88]	; (800cf20 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cec6:	68d2      	ldr	r2, [r2, #12]
 800cec8:	0a12      	lsrs	r2, r2, #8
 800ceca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cece:	fb02 f303 	mul.w	r3, r2, r3
 800ced2:	617b      	str	r3, [r7, #20]
      break;
 800ced4:	e00c      	b.n	800cef0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ced6:	4a13      	ldr	r2, [pc, #76]	; (800cf24 <HAL_RCC_GetSysClockFreq+0xbc>)
 800ced8:	68bb      	ldr	r3, [r7, #8]
 800ceda:	fbb2 f3f3 	udiv	r3, r2, r3
 800cede:	4a10      	ldr	r2, [pc, #64]	; (800cf20 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cee0:	68d2      	ldr	r2, [r2, #12]
 800cee2:	0a12      	lsrs	r2, r2, #8
 800cee4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cee8:	fb02 f303 	mul.w	r3, r2, r3
 800ceec:	617b      	str	r3, [r7, #20]
      break;
 800ceee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cef0:	4b0b      	ldr	r3, [pc, #44]	; (800cf20 <HAL_RCC_GetSysClockFreq+0xb8>)
 800cef2:	68db      	ldr	r3, [r3, #12]
 800cef4:	0e5b      	lsrs	r3, r3, #25
 800cef6:	f003 0303 	and.w	r3, r3, #3
 800cefa:	3301      	adds	r3, #1
 800cefc:	005b      	lsls	r3, r3, #1
 800cefe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800cf00:	697a      	ldr	r2, [r7, #20]
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf08:	613b      	str	r3, [r7, #16]
 800cf0a:	e001      	b.n	800cf10 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800cf10:	693b      	ldr	r3, [r7, #16]
}
 800cf12:	4618      	mov	r0, r3
 800cf14:	371c      	adds	r7, #28
 800cf16:	46bd      	mov	sp, r7
 800cf18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf1c:	4770      	bx	lr
 800cf1e:	bf00      	nop
 800cf20:	40021000 	.word	0x40021000
 800cf24:	00f42400 	.word	0x00f42400
 800cf28:	007a1200 	.word	0x007a1200

0800cf2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cf2c:	b480      	push	{r7}
 800cf2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800cf30:	4b03      	ldr	r3, [pc, #12]	; (800cf40 <HAL_RCC_GetHCLKFreq+0x14>)
 800cf32:	681b      	ldr	r3, [r3, #0]
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	46bd      	mov	sp, r7
 800cf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3c:	4770      	bx	lr
 800cf3e:	bf00      	nop
 800cf40:	20000c30 	.word	0x20000c30

0800cf44 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800cf44:	b480      	push	{r7}
 800cf46:	b087      	sub	sp, #28
 800cf48:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800cf4a:	4b1e      	ldr	r3, [pc, #120]	; (800cfc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cf4c:	68db      	ldr	r3, [r3, #12]
 800cf4e:	f003 0303 	and.w	r3, r3, #3
 800cf52:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800cf54:	4b1b      	ldr	r3, [pc, #108]	; (800cfc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cf56:	68db      	ldr	r3, [r3, #12]
 800cf58:	091b      	lsrs	r3, r3, #4
 800cf5a:	f003 030f 	and.w	r3, r3, #15
 800cf5e:	3301      	adds	r3, #1
 800cf60:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	2b03      	cmp	r3, #3
 800cf66:	d10c      	bne.n	800cf82 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cf68:	4a17      	ldr	r2, [pc, #92]	; (800cfc8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf70:	4a14      	ldr	r2, [pc, #80]	; (800cfc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cf72:	68d2      	ldr	r2, [r2, #12]
 800cf74:	0a12      	lsrs	r2, r2, #8
 800cf76:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cf7a:	fb02 f303 	mul.w	r3, r2, r3
 800cf7e:	617b      	str	r3, [r7, #20]
    break;
 800cf80:	e00c      	b.n	800cf9c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800cf82:	4a12      	ldr	r2, [pc, #72]	; (800cfcc <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf8a:	4a0e      	ldr	r2, [pc, #56]	; (800cfc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cf8c:	68d2      	ldr	r2, [r2, #12]
 800cf8e:	0a12      	lsrs	r2, r2, #8
 800cf90:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800cf94:	fb02 f303 	mul.w	r3, r2, r3
 800cf98:	617b      	str	r3, [r7, #20]
    break;
 800cf9a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800cf9c:	4b09      	ldr	r3, [pc, #36]	; (800cfc4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800cf9e:	68db      	ldr	r3, [r3, #12]
 800cfa0:	0e5b      	lsrs	r3, r3, #25
 800cfa2:	f003 0303 	and.w	r3, r3, #3
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	005b      	lsls	r3, r3, #1
 800cfaa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800cfac:	697a      	ldr	r2, [r7, #20]
 800cfae:	68bb      	ldr	r3, [r7, #8]
 800cfb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfb4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800cfb6:	687b      	ldr	r3, [r7, #4]
}
 800cfb8:	4618      	mov	r0, r3
 800cfba:	371c      	adds	r7, #28
 800cfbc:	46bd      	mov	sp, r7
 800cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc2:	4770      	bx	lr
 800cfc4:	40021000 	.word	0x40021000
 800cfc8:	007a1200 	.word	0x007a1200
 800cfcc:	00f42400 	.word	0x00f42400

0800cfd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cfd0:	b580      	push	{r7, lr}
 800cfd2:	b086      	sub	sp, #24
 800cfd4:	af00      	add	r7, sp, #0
 800cfd6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cfd8:	2300      	movs	r3, #0
 800cfda:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cfdc:	2300      	movs	r3, #0
 800cfde:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	f000 8098 	beq.w	800d11e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800cfee:	2300      	movs	r3, #0
 800cff0:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cff2:	4b43      	ldr	r3, [pc, #268]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800cff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d10d      	bne.n	800d01a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800cffe:	4b40      	ldr	r3, [pc, #256]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d000:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d002:	4a3f      	ldr	r2, [pc, #252]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d004:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d008:	6593      	str	r3, [r2, #88]	; 0x58
 800d00a:	4b3d      	ldr	r3, [pc, #244]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d00c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d00e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d012:	60bb      	str	r3, [r7, #8]
 800d014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800d016:	2301      	movs	r3, #1
 800d018:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d01a:	4b3a      	ldr	r3, [pc, #232]	; (800d104 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	4a39      	ldr	r2, [pc, #228]	; (800d104 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d020:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d024:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d026:	f7fb fef5 	bl	8008e14 <HAL_GetTick>
 800d02a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d02c:	e009      	b.n	800d042 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d02e:	f7fb fef1 	bl	8008e14 <HAL_GetTick>
 800d032:	4602      	mov	r2, r0
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	1ad3      	subs	r3, r2, r3
 800d038:	2b02      	cmp	r3, #2
 800d03a:	d902      	bls.n	800d042 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800d03c:	2303      	movs	r3, #3
 800d03e:	74fb      	strb	r3, [r7, #19]
        break;
 800d040:	e005      	b.n	800d04e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d042:	4b30      	ldr	r3, [pc, #192]	; (800d104 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d0ef      	beq.n	800d02e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800d04e:	7cfb      	ldrb	r3, [r7, #19]
 800d050:	2b00      	cmp	r3, #0
 800d052:	d159      	bne.n	800d108 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800d054:	4b2a      	ldr	r3, [pc, #168]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d05a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d05e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800d060:	697b      	ldr	r3, [r7, #20]
 800d062:	2b00      	cmp	r3, #0
 800d064:	d01e      	beq.n	800d0a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d06a:	697a      	ldr	r2, [r7, #20]
 800d06c:	429a      	cmp	r2, r3
 800d06e:	d019      	beq.n	800d0a4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800d070:	4b23      	ldr	r3, [pc, #140]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d07a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d07c:	4b20      	ldr	r3, [pc, #128]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d07e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d082:	4a1f      	ldr	r2, [pc, #124]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d088:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d08c:	4b1c      	ldr	r3, [pc, #112]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d08e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d092:	4a1b      	ldr	r2, [pc, #108]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d094:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d098:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800d09c:	4a18      	ldr	r2, [pc, #96]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d09e:	697b      	ldr	r3, [r7, #20]
 800d0a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	f003 0301 	and.w	r3, r3, #1
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d016      	beq.n	800d0dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0ae:	f7fb feb1 	bl	8008e14 <HAL_GetTick>
 800d0b2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d0b4:	e00b      	b.n	800d0ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d0b6:	f7fb fead 	bl	8008e14 <HAL_GetTick>
 800d0ba:	4602      	mov	r2, r0
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	1ad3      	subs	r3, r2, r3
 800d0c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800d0c4:	4293      	cmp	r3, r2
 800d0c6:	d902      	bls.n	800d0ce <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800d0c8:	2303      	movs	r3, #3
 800d0ca:	74fb      	strb	r3, [r7, #19]
            break;
 800d0cc:	e006      	b.n	800d0dc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800d0ce:	4b0c      	ldr	r3, [pc, #48]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d0d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0d4:	f003 0302 	and.w	r3, r3, #2
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d0ec      	beq.n	800d0b6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800d0dc:	7cfb      	ldrb	r3, [r7, #19]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d10b      	bne.n	800d0fa <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d0e2:	4b07      	ldr	r3, [pc, #28]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d0e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d0f0:	4903      	ldr	r1, [pc, #12]	; (800d100 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800d0f2:	4313      	orrs	r3, r2
 800d0f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800d0f8:	e008      	b.n	800d10c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d0fa:	7cfb      	ldrb	r3, [r7, #19]
 800d0fc:	74bb      	strb	r3, [r7, #18]
 800d0fe:	e005      	b.n	800d10c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800d100:	40021000 	.word	0x40021000
 800d104:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d108:	7cfb      	ldrb	r3, [r7, #19]
 800d10a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800d10c:	7c7b      	ldrb	r3, [r7, #17]
 800d10e:	2b01      	cmp	r3, #1
 800d110:	d105      	bne.n	800d11e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d112:	4baf      	ldr	r3, [pc, #700]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d116:	4aae      	ldr	r2, [pc, #696]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d118:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d11c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	f003 0301 	and.w	r3, r3, #1
 800d126:	2b00      	cmp	r3, #0
 800d128:	d00a      	beq.n	800d140 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d12a:	4ba9      	ldr	r3, [pc, #676]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d12c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d130:	f023 0203 	bic.w	r2, r3, #3
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	685b      	ldr	r3, [r3, #4]
 800d138:	49a5      	ldr	r1, [pc, #660]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d13a:	4313      	orrs	r3, r2
 800d13c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	f003 0302 	and.w	r3, r3, #2
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d00a      	beq.n	800d162 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d14c:	4ba0      	ldr	r3, [pc, #640]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d14e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d152:	f023 020c 	bic.w	r2, r3, #12
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	689b      	ldr	r3, [r3, #8]
 800d15a:	499d      	ldr	r1, [pc, #628]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d15c:	4313      	orrs	r3, r2
 800d15e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	f003 0304 	and.w	r3, r3, #4
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d00a      	beq.n	800d184 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800d16e:	4b98      	ldr	r3, [pc, #608]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d170:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d174:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	68db      	ldr	r3, [r3, #12]
 800d17c:	4994      	ldr	r1, [pc, #592]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d17e:	4313      	orrs	r3, r2
 800d180:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	681b      	ldr	r3, [r3, #0]
 800d188:	f003 0308 	and.w	r3, r3, #8
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d00a      	beq.n	800d1a6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800d190:	4b8f      	ldr	r3, [pc, #572]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d192:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d196:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	691b      	ldr	r3, [r3, #16]
 800d19e:	498c      	ldr	r1, [pc, #560]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d1a0:	4313      	orrs	r3, r2
 800d1a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	f003 0310 	and.w	r3, r3, #16
 800d1ae:	2b00      	cmp	r3, #0
 800d1b0:	d00a      	beq.n	800d1c8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800d1b2:	4b87      	ldr	r3, [pc, #540]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d1b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1b8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	695b      	ldr	r3, [r3, #20]
 800d1c0:	4983      	ldr	r1, [pc, #524]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d1c2:	4313      	orrs	r3, r2
 800d1c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	681b      	ldr	r3, [r3, #0]
 800d1cc:	f003 0320 	and.w	r3, r3, #32
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d00a      	beq.n	800d1ea <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d1d4:	4b7e      	ldr	r3, [pc, #504]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d1d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1da:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	699b      	ldr	r3, [r3, #24]
 800d1e2:	497b      	ldr	r1, [pc, #492]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d1e4:	4313      	orrs	r3, r2
 800d1e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d00a      	beq.n	800d20c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d1f6:	4b76      	ldr	r3, [pc, #472]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d1f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d1fc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	69db      	ldr	r3, [r3, #28]
 800d204:	4972      	ldr	r1, [pc, #456]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d206:	4313      	orrs	r3, r2
 800d208:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800d20c:	687b      	ldr	r3, [r7, #4]
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d214:	2b00      	cmp	r3, #0
 800d216:	d00a      	beq.n	800d22e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800d218:	4b6d      	ldr	r3, [pc, #436]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d21a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d21e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800d222:	687b      	ldr	r3, [r7, #4]
 800d224:	6a1b      	ldr	r3, [r3, #32]
 800d226:	496a      	ldr	r1, [pc, #424]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d228:	4313      	orrs	r3, r2
 800d22a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	681b      	ldr	r3, [r3, #0]
 800d232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d236:	2b00      	cmp	r3, #0
 800d238:	d00a      	beq.n	800d250 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d23a:	4b65      	ldr	r3, [pc, #404]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d23c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d240:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d248:	4961      	ldr	r1, [pc, #388]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d24a:	4313      	orrs	r3, r2
 800d24c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	681b      	ldr	r3, [r3, #0]
 800d254:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d258:	2b00      	cmp	r3, #0
 800d25a:	d00a      	beq.n	800d272 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d25c:	4b5c      	ldr	r3, [pc, #368]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d25e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d262:	f023 0203 	bic.w	r2, r3, #3
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d26a:	4959      	ldr	r1, [pc, #356]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d26c:	4313      	orrs	r3, r2
 800d26e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d00a      	beq.n	800d294 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d27e:	4b54      	ldr	r3, [pc, #336]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d284:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d28c:	4950      	ldr	r1, [pc, #320]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d28e:	4313      	orrs	r3, r2
 800d290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d015      	beq.n	800d2cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d2a0:	4b4b      	ldr	r3, [pc, #300]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2a6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2ae:	4948      	ldr	r1, [pc, #288]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2b0:	4313      	orrs	r3, r2
 800d2b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d2be:	d105      	bne.n	800d2cc <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d2c0:	4b43      	ldr	r3, [pc, #268]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2c2:	68db      	ldr	r3, [r3, #12]
 800d2c4:	4a42      	ldr	r2, [pc, #264]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d2ca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d015      	beq.n	800d304 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800d2d8:	4b3d      	ldr	r3, [pc, #244]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d2de:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2e6:	493a      	ldr	r1, [pc, #232]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2e8:	4313      	orrs	r3, r2
 800d2ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d2f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d2f6:	d105      	bne.n	800d304 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d2f8:	4b35      	ldr	r3, [pc, #212]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2fa:	68db      	ldr	r3, [r3, #12]
 800d2fc:	4a34      	ldr	r2, [pc, #208]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d2fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d302:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	681b      	ldr	r3, [r3, #0]
 800d308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d015      	beq.n	800d33c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d310:	4b2f      	ldr	r3, [pc, #188]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d316:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d31e:	492c      	ldr	r1, [pc, #176]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d320:	4313      	orrs	r3, r2
 800d322:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d32a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d32e:	d105      	bne.n	800d33c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d330:	4b27      	ldr	r3, [pc, #156]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d332:	68db      	ldr	r3, [r3, #12]
 800d334:	4a26      	ldr	r2, [pc, #152]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d336:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d33a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800d344:	2b00      	cmp	r3, #0
 800d346:	d015      	beq.n	800d374 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d348:	4b21      	ldr	r3, [pc, #132]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d34a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d34e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d356:	491e      	ldr	r1, [pc, #120]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d358:	4313      	orrs	r3, r2
 800d35a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d362:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d366:	d105      	bne.n	800d374 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d368:	4b19      	ldr	r3, [pc, #100]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d36a:	68db      	ldr	r3, [r3, #12]
 800d36c:	4a18      	ldr	r2, [pc, #96]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d36e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d372:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	681b      	ldr	r3, [r3, #0]
 800d378:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d015      	beq.n	800d3ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d380:	4b13      	ldr	r3, [pc, #76]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d382:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d386:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d38e:	4910      	ldr	r1, [pc, #64]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d390:	4313      	orrs	r3, r2
 800d392:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d39a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800d39e:	d105      	bne.n	800d3ac <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d3a0:	4b0b      	ldr	r3, [pc, #44]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d3a2:	68db      	ldr	r3, [r3, #12]
 800d3a4:	4a0a      	ldr	r2, [pc, #40]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d3a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d3aa:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d018      	beq.n	800d3ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800d3b8:	4b05      	ldr	r3, [pc, #20]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d3ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3be:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3c6:	4902      	ldr	r1, [pc, #8]	; (800d3d0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800d3c8:	4313      	orrs	r3, r2
 800d3ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800d3ce:	e001      	b.n	800d3d4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800d3d0:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d3dc:	d105      	bne.n	800d3ea <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d3de:	4b21      	ldr	r3, [pc, #132]	; (800d464 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d3e0:	68db      	ldr	r3, [r3, #12]
 800d3e2:	4a20      	ldr	r2, [pc, #128]	; (800d464 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d3e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d3e8:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d015      	beq.n	800d422 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800d3f6:	4b1b      	ldr	r3, [pc, #108]	; (800d464 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d3f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d3fc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d404:	4917      	ldr	r1, [pc, #92]	; (800d464 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d406:	4313      	orrs	r3, r2
 800d408:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d410:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d414:	d105      	bne.n	800d422 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800d416:	4b13      	ldr	r3, [pc, #76]	; (800d464 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d418:	68db      	ldr	r3, [r3, #12]
 800d41a:	4a12      	ldr	r2, [pc, #72]	; (800d464 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d41c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d420:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d015      	beq.n	800d45a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d42e:	4b0d      	ldr	r3, [pc, #52]	; (800d464 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d430:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d434:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d43c:	4909      	ldr	r1, [pc, #36]	; (800d464 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d43e:	4313      	orrs	r3, r2
 800d440:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d448:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d44c:	d105      	bne.n	800d45a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800d44e:	4b05      	ldr	r3, [pc, #20]	; (800d464 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d450:	68db      	ldr	r3, [r3, #12]
 800d452:	4a04      	ldr	r2, [pc, #16]	; (800d464 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800d454:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d458:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800d45a:	7cbb      	ldrb	r3, [r7, #18]
}
 800d45c:	4618      	mov	r0, r3
 800d45e:	3718      	adds	r7, #24
 800d460:	46bd      	mov	sp, r7
 800d462:	bd80      	pop	{r7, pc}
 800d464:	40021000 	.word	0x40021000

0800d468 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2b00      	cmp	r3, #0
 800d474:	d101      	bne.n	800d47a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800d476:	2301      	movs	r3, #1
 800d478:	e084      	b.n	800d584 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	2200      	movs	r2, #0
 800d47e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800d486:	b2db      	uxtb	r3, r3
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d106      	bne.n	800d49a <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2200      	movs	r2, #0
 800d490:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800d494:	6878      	ldr	r0, [r7, #4]
 800d496:	f7fa fda7 	bl	8007fe8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2202      	movs	r2, #2
 800d49e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	681a      	ldr	r2, [r3, #0]
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	681b      	ldr	r3, [r3, #0]
 800d4ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800d4b0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	68db      	ldr	r3, [r3, #12]
 800d4b6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d4ba:	d902      	bls.n	800d4c2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800d4bc:	2300      	movs	r3, #0
 800d4be:	60fb      	str	r3, [r7, #12]
 800d4c0:	e002      	b.n	800d4c8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800d4c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800d4c6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	68db      	ldr	r3, [r3, #12]
 800d4cc:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800d4d0:	d007      	beq.n	800d4e2 <HAL_SPI_Init+0x7a>
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	68db      	ldr	r3, [r3, #12]
 800d4d6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d4da:	d002      	beq.n	800d4e2 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2200      	movs	r2, #0
 800d4e0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4e6:	2b00      	cmp	r3, #0
 800d4e8:	d10b      	bne.n	800d502 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	68db      	ldr	r3, [r3, #12]
 800d4ee:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800d4f2:	d903      	bls.n	800d4fc <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	2202      	movs	r2, #2
 800d4f8:	631a      	str	r2, [r3, #48]	; 0x30
 800d4fa:	e002      	b.n	800d502 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	2201      	movs	r2, #1
 800d500:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	685a      	ldr	r2, [r3, #4]
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	689b      	ldr	r3, [r3, #8]
 800d50a:	431a      	orrs	r2, r3
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	691b      	ldr	r3, [r3, #16]
 800d510:	431a      	orrs	r2, r3
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	695b      	ldr	r3, [r3, #20]
 800d516:	431a      	orrs	r2, r3
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	699b      	ldr	r3, [r3, #24]
 800d51c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800d520:	431a      	orrs	r2, r3
 800d522:	687b      	ldr	r3, [r7, #4]
 800d524:	69db      	ldr	r3, [r3, #28]
 800d526:	431a      	orrs	r2, r3
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	6a1b      	ldr	r3, [r3, #32]
 800d52c:	ea42 0103 	orr.w	r1, r2, r3
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	681b      	ldr	r3, [r3, #0]
 800d538:	430a      	orrs	r2, r1
 800d53a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	699b      	ldr	r3, [r3, #24]
 800d540:	0c1b      	lsrs	r3, r3, #16
 800d542:	f003 0204 	and.w	r2, r3, #4
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d54a:	431a      	orrs	r2, r3
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d550:	431a      	orrs	r2, r3
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	68db      	ldr	r3, [r3, #12]
 800d556:	ea42 0103 	orr.w	r1, r2, r3
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	68fa      	ldr	r2, [r7, #12]
 800d560:	430a      	orrs	r2, r1
 800d562:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	69da      	ldr	r2, [r3, #28]
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800d572:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	2200      	movs	r2, #0
 800d578:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2201      	movs	r2, #1
 800d57e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800d582:	2300      	movs	r3, #0
}
 800d584:	4618      	mov	r0, r3
 800d586:	3710      	adds	r7, #16
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}

0800d58c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b082      	sub	sp, #8
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d101      	bne.n	800d59e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d59a:	2301      	movs	r3, #1
 800d59c:	e049      	b.n	800d632 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d5a4:	b2db      	uxtb	r3, r3
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	d106      	bne.n	800d5b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d5b2:	6878      	ldr	r0, [r7, #4]
 800d5b4:	f7fb fa7c 	bl	8008ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2202      	movs	r2, #2
 800d5bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681a      	ldr	r2, [r3, #0]
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	3304      	adds	r3, #4
 800d5c8:	4619      	mov	r1, r3
 800d5ca:	4610      	mov	r0, r2
 800d5cc:	f001 fb94 	bl	800ecf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2201      	movs	r2, #1
 800d5d4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2201      	movs	r2, #1
 800d5dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2201      	movs	r2, #1
 800d5e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2201      	movs	r2, #1
 800d5ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	2201      	movs	r2, #1
 800d5f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	2201      	movs	r2, #1
 800d5fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	2201      	movs	r2, #1
 800d604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2201      	movs	r2, #1
 800d60c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	2201      	movs	r2, #1
 800d614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	2201      	movs	r2, #1
 800d61c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	2201      	movs	r2, #1
 800d624:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2201      	movs	r2, #1
 800d62c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d630:	2300      	movs	r3, #0
}
 800d632:	4618      	mov	r0, r3
 800d634:	3708      	adds	r7, #8
 800d636:	46bd      	mov	sp, r7
 800d638:	bd80      	pop	{r7, pc}
	...

0800d63c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800d63c:	b480      	push	{r7}
 800d63e:	b085      	sub	sp, #20
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d64a:	b2db      	uxtb	r3, r3
 800d64c:	2b01      	cmp	r3, #1
 800d64e:	d001      	beq.n	800d654 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800d650:	2301      	movs	r3, #1
 800d652:	e019      	b.n	800d688 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2202      	movs	r2, #2
 800d658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	689a      	ldr	r2, [r3, #8]
 800d662:	4b0c      	ldr	r3, [pc, #48]	; (800d694 <HAL_TIM_Base_Start+0x58>)
 800d664:	4013      	ands	r3, r2
 800d666:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d668:	68fb      	ldr	r3, [r7, #12]
 800d66a:	2b06      	cmp	r3, #6
 800d66c:	d00b      	beq.n	800d686 <HAL_TIM_Base_Start+0x4a>
 800d66e:	68fb      	ldr	r3, [r7, #12]
 800d670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d674:	d007      	beq.n	800d686 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	681b      	ldr	r3, [r3, #0]
 800d67a:	681a      	ldr	r2, [r3, #0]
 800d67c:	687b      	ldr	r3, [r7, #4]
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	f042 0201 	orr.w	r2, r2, #1
 800d684:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d686:	2300      	movs	r3, #0
}
 800d688:	4618      	mov	r0, r3
 800d68a:	3714      	adds	r7, #20
 800d68c:	46bd      	mov	sp, r7
 800d68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d692:	4770      	bx	lr
 800d694:	00010007 	.word	0x00010007

0800d698 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800d698:	b480      	push	{r7}
 800d69a:	b083      	sub	sp, #12
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d6a0:	687b      	ldr	r3, [r7, #4]
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	6a1a      	ldr	r2, [r3, #32]
 800d6a6:	f241 1311 	movw	r3, #4369	; 0x1111
 800d6aa:	4013      	ands	r3, r2
 800d6ac:	2b00      	cmp	r3, #0
 800d6ae:	d10f      	bne.n	800d6d0 <HAL_TIM_Base_Stop+0x38>
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	6a1a      	ldr	r2, [r3, #32]
 800d6b6:	f244 4344 	movw	r3, #17476	; 0x4444
 800d6ba:	4013      	ands	r3, r2
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d107      	bne.n	800d6d0 <HAL_TIM_Base_Stop+0x38>
 800d6c0:	687b      	ldr	r3, [r7, #4]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	681a      	ldr	r2, [r3, #0]
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	f022 0201 	bic.w	r2, r2, #1
 800d6ce:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2201      	movs	r2, #1
 800d6d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d6d8:	2300      	movs	r3, #0
}
 800d6da:	4618      	mov	r0, r3
 800d6dc:	370c      	adds	r7, #12
 800d6de:	46bd      	mov	sp, r7
 800d6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6e4:	4770      	bx	lr
	...

0800d6e8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800d6e8:	b480      	push	{r7}
 800d6ea:	b085      	sub	sp, #20
 800d6ec:	af00      	add	r7, sp, #0
 800d6ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d6f6:	b2db      	uxtb	r3, r3
 800d6f8:	2b01      	cmp	r3, #1
 800d6fa:	d001      	beq.n	800d700 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800d6fc:	2301      	movs	r3, #1
 800d6fe:	e021      	b.n	800d744 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	2202      	movs	r2, #2
 800d704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	68da      	ldr	r2, [r3, #12]
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	f042 0201 	orr.w	r2, r2, #1
 800d716:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	689a      	ldr	r2, [r3, #8]
 800d71e:	4b0c      	ldr	r3, [pc, #48]	; (800d750 <HAL_TIM_Base_Start_IT+0x68>)
 800d720:	4013      	ands	r3, r2
 800d722:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	2b06      	cmp	r3, #6
 800d728:	d00b      	beq.n	800d742 <HAL_TIM_Base_Start_IT+0x5a>
 800d72a:	68fb      	ldr	r3, [r7, #12]
 800d72c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d730:	d007      	beq.n	800d742 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	681b      	ldr	r3, [r3, #0]
 800d736:	681a      	ldr	r2, [r3, #0]
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	f042 0201 	orr.w	r2, r2, #1
 800d740:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d742:	2300      	movs	r3, #0
}
 800d744:	4618      	mov	r0, r3
 800d746:	3714      	adds	r7, #20
 800d748:	46bd      	mov	sp, r7
 800d74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d74e:	4770      	bx	lr
 800d750:	00010007 	.word	0x00010007

0800d754 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800d754:	b480      	push	{r7}
 800d756:	b083      	sub	sp, #12
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	681b      	ldr	r3, [r3, #0]
 800d760:	68da      	ldr	r2, [r3, #12]
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	f022 0201 	bic.w	r2, r2, #1
 800d76a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800d76c:	687b      	ldr	r3, [r7, #4]
 800d76e:	681b      	ldr	r3, [r3, #0]
 800d770:	6a1a      	ldr	r2, [r3, #32]
 800d772:	f241 1311 	movw	r3, #4369	; 0x1111
 800d776:	4013      	ands	r3, r2
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d10f      	bne.n	800d79c <HAL_TIM_Base_Stop_IT+0x48>
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	6a1a      	ldr	r2, [r3, #32]
 800d782:	f244 4344 	movw	r3, #17476	; 0x4444
 800d786:	4013      	ands	r3, r2
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d107      	bne.n	800d79c <HAL_TIM_Base_Stop_IT+0x48>
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	f022 0201 	bic.w	r2, r2, #1
 800d79a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	2201      	movs	r2, #1
 800d7a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800d7a4:	2300      	movs	r3, #0
}
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	370c      	adds	r7, #12
 800d7aa:	46bd      	mov	sp, r7
 800d7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b0:	4770      	bx	lr

0800d7b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d7b2:	b580      	push	{r7, lr}
 800d7b4:	b082      	sub	sp, #8
 800d7b6:	af00      	add	r7, sp, #0
 800d7b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d101      	bne.n	800d7c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d7c0:	2301      	movs	r3, #1
 800d7c2:	e049      	b.n	800d858 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d7ca:	b2db      	uxtb	r3, r3
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d106      	bne.n	800d7de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	2200      	movs	r2, #0
 800d7d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d7d8:	6878      	ldr	r0, [r7, #4]
 800d7da:	f000 f841 	bl	800d860 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	2202      	movs	r2, #2
 800d7e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d7e6:	687b      	ldr	r3, [r7, #4]
 800d7e8:	681a      	ldr	r2, [r3, #0]
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	3304      	adds	r3, #4
 800d7ee:	4619      	mov	r1, r3
 800d7f0:	4610      	mov	r0, r2
 800d7f2:	f001 fa81 	bl	800ecf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2201      	movs	r2, #1
 800d7fa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2201      	movs	r2, #1
 800d802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d806:	687b      	ldr	r3, [r7, #4]
 800d808:	2201      	movs	r2, #1
 800d80a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	2201      	movs	r2, #1
 800d812:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2201      	movs	r2, #1
 800d81a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2201      	movs	r2, #1
 800d822:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	2201      	movs	r2, #1
 800d82a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	2201      	movs	r2, #1
 800d832:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	2201      	movs	r2, #1
 800d83a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	2201      	movs	r2, #1
 800d842:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d846:	687b      	ldr	r3, [r7, #4]
 800d848:	2201      	movs	r2, #1
 800d84a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	2201      	movs	r2, #1
 800d852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d856:	2300      	movs	r3, #0
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3708      	adds	r7, #8
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800d860:	b480      	push	{r7}
 800d862:	b083      	sub	sp, #12
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800d868:	bf00      	nop
 800d86a:	370c      	adds	r7, #12
 800d86c:	46bd      	mov	sp, r7
 800d86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d872:	4770      	bx	lr

0800d874 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b084      	sub	sp, #16
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
 800d87c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d109      	bne.n	800d898 <HAL_TIM_PWM_Start+0x24>
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800d88a:	b2db      	uxtb	r3, r3
 800d88c:	2b01      	cmp	r3, #1
 800d88e:	bf14      	ite	ne
 800d890:	2301      	movne	r3, #1
 800d892:	2300      	moveq	r3, #0
 800d894:	b2db      	uxtb	r3, r3
 800d896:	e03c      	b.n	800d912 <HAL_TIM_PWM_Start+0x9e>
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	2b04      	cmp	r3, #4
 800d89c:	d109      	bne.n	800d8b2 <HAL_TIM_PWM_Start+0x3e>
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800d8a4:	b2db      	uxtb	r3, r3
 800d8a6:	2b01      	cmp	r3, #1
 800d8a8:	bf14      	ite	ne
 800d8aa:	2301      	movne	r3, #1
 800d8ac:	2300      	moveq	r3, #0
 800d8ae:	b2db      	uxtb	r3, r3
 800d8b0:	e02f      	b.n	800d912 <HAL_TIM_PWM_Start+0x9e>
 800d8b2:	683b      	ldr	r3, [r7, #0]
 800d8b4:	2b08      	cmp	r3, #8
 800d8b6:	d109      	bne.n	800d8cc <HAL_TIM_PWM_Start+0x58>
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800d8be:	b2db      	uxtb	r3, r3
 800d8c0:	2b01      	cmp	r3, #1
 800d8c2:	bf14      	ite	ne
 800d8c4:	2301      	movne	r3, #1
 800d8c6:	2300      	moveq	r3, #0
 800d8c8:	b2db      	uxtb	r3, r3
 800d8ca:	e022      	b.n	800d912 <HAL_TIM_PWM_Start+0x9e>
 800d8cc:	683b      	ldr	r3, [r7, #0]
 800d8ce:	2b0c      	cmp	r3, #12
 800d8d0:	d109      	bne.n	800d8e6 <HAL_TIM_PWM_Start+0x72>
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800d8d8:	b2db      	uxtb	r3, r3
 800d8da:	2b01      	cmp	r3, #1
 800d8dc:	bf14      	ite	ne
 800d8de:	2301      	movne	r3, #1
 800d8e0:	2300      	moveq	r3, #0
 800d8e2:	b2db      	uxtb	r3, r3
 800d8e4:	e015      	b.n	800d912 <HAL_TIM_PWM_Start+0x9e>
 800d8e6:	683b      	ldr	r3, [r7, #0]
 800d8e8:	2b10      	cmp	r3, #16
 800d8ea:	d109      	bne.n	800d900 <HAL_TIM_PWM_Start+0x8c>
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d8f2:	b2db      	uxtb	r3, r3
 800d8f4:	2b01      	cmp	r3, #1
 800d8f6:	bf14      	ite	ne
 800d8f8:	2301      	movne	r3, #1
 800d8fa:	2300      	moveq	r3, #0
 800d8fc:	b2db      	uxtb	r3, r3
 800d8fe:	e008      	b.n	800d912 <HAL_TIM_PWM_Start+0x9e>
 800d900:	687b      	ldr	r3, [r7, #4]
 800d902:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800d906:	b2db      	uxtb	r3, r3
 800d908:	2b01      	cmp	r3, #1
 800d90a:	bf14      	ite	ne
 800d90c:	2301      	movne	r3, #1
 800d90e:	2300      	moveq	r3, #0
 800d910:	b2db      	uxtb	r3, r3
 800d912:	2b00      	cmp	r3, #0
 800d914:	d001      	beq.n	800d91a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800d916:	2301      	movs	r3, #1
 800d918:	e073      	b.n	800da02 <HAL_TIM_PWM_Start+0x18e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d91a:	683b      	ldr	r3, [r7, #0]
 800d91c:	2b00      	cmp	r3, #0
 800d91e:	d104      	bne.n	800d92a <HAL_TIM_PWM_Start+0xb6>
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	2202      	movs	r2, #2
 800d924:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d928:	e023      	b.n	800d972 <HAL_TIM_PWM_Start+0xfe>
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	2b04      	cmp	r3, #4
 800d92e:	d104      	bne.n	800d93a <HAL_TIM_PWM_Start+0xc6>
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	2202      	movs	r2, #2
 800d934:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d938:	e01b      	b.n	800d972 <HAL_TIM_PWM_Start+0xfe>
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	2b08      	cmp	r3, #8
 800d93e:	d104      	bne.n	800d94a <HAL_TIM_PWM_Start+0xd6>
 800d940:	687b      	ldr	r3, [r7, #4]
 800d942:	2202      	movs	r2, #2
 800d944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d948:	e013      	b.n	800d972 <HAL_TIM_PWM_Start+0xfe>
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	2b0c      	cmp	r3, #12
 800d94e:	d104      	bne.n	800d95a <HAL_TIM_PWM_Start+0xe6>
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	2202      	movs	r2, #2
 800d954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d958:	e00b      	b.n	800d972 <HAL_TIM_PWM_Start+0xfe>
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	2b10      	cmp	r3, #16
 800d95e:	d104      	bne.n	800d96a <HAL_TIM_PWM_Start+0xf6>
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	2202      	movs	r2, #2
 800d964:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d968:	e003      	b.n	800d972 <HAL_TIM_PWM_Start+0xfe>
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	2202      	movs	r2, #2
 800d96e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	2201      	movs	r2, #1
 800d978:	6839      	ldr	r1, [r7, #0]
 800d97a:	4618      	mov	r0, r3
 800d97c:	f002 f810 	bl	800f9a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	681b      	ldr	r3, [r3, #0]
 800d984:	4a21      	ldr	r2, [pc, #132]	; (800da0c <HAL_TIM_PWM_Start+0x198>)
 800d986:	4293      	cmp	r3, r2
 800d988:	d018      	beq.n	800d9bc <HAL_TIM_PWM_Start+0x148>
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	4a20      	ldr	r2, [pc, #128]	; (800da10 <HAL_TIM_PWM_Start+0x19c>)
 800d990:	4293      	cmp	r3, r2
 800d992:	d013      	beq.n	800d9bc <HAL_TIM_PWM_Start+0x148>
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	4a1e      	ldr	r2, [pc, #120]	; (800da14 <HAL_TIM_PWM_Start+0x1a0>)
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d00e      	beq.n	800d9bc <HAL_TIM_PWM_Start+0x148>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	4a1d      	ldr	r2, [pc, #116]	; (800da18 <HAL_TIM_PWM_Start+0x1a4>)
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d009      	beq.n	800d9bc <HAL_TIM_PWM_Start+0x148>
 800d9a8:	687b      	ldr	r3, [r7, #4]
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4a1b      	ldr	r2, [pc, #108]	; (800da1c <HAL_TIM_PWM_Start+0x1a8>)
 800d9ae:	4293      	cmp	r3, r2
 800d9b0:	d004      	beq.n	800d9bc <HAL_TIM_PWM_Start+0x148>
 800d9b2:	687b      	ldr	r3, [r7, #4]
 800d9b4:	681b      	ldr	r3, [r3, #0]
 800d9b6:	4a1a      	ldr	r2, [pc, #104]	; (800da20 <HAL_TIM_PWM_Start+0x1ac>)
 800d9b8:	4293      	cmp	r3, r2
 800d9ba:	d101      	bne.n	800d9c0 <HAL_TIM_PWM_Start+0x14c>
 800d9bc:	2301      	movs	r3, #1
 800d9be:	e000      	b.n	800d9c2 <HAL_TIM_PWM_Start+0x14e>
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d007      	beq.n	800d9d6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d9d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	689a      	ldr	r2, [r3, #8]
 800d9dc:	4b11      	ldr	r3, [pc, #68]	; (800da24 <HAL_TIM_PWM_Start+0x1b0>)
 800d9de:	4013      	ands	r3, r2
 800d9e0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	2b06      	cmp	r3, #6
 800d9e6:	d00b      	beq.n	800da00 <HAL_TIM_PWM_Start+0x18c>
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d9ee:	d007      	beq.n	800da00 <HAL_TIM_PWM_Start+0x18c>
  {
    __HAL_TIM_ENABLE(htim);
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	681a      	ldr	r2, [r3, #0]
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	f042 0201 	orr.w	r2, r2, #1
 800d9fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800da00:	2300      	movs	r3, #0
}
 800da02:	4618      	mov	r0, r3
 800da04:	3710      	adds	r7, #16
 800da06:	46bd      	mov	sp, r7
 800da08:	bd80      	pop	{r7, pc}
 800da0a:	bf00      	nop
 800da0c:	40012c00 	.word	0x40012c00
 800da10:	40013400 	.word	0x40013400
 800da14:	40014000 	.word	0x40014000
 800da18:	40014400 	.word	0x40014400
 800da1c:	40014800 	.word	0x40014800
 800da20:	40015000 	.word	0x40015000
 800da24:	00010007 	.word	0x00010007

0800da28 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800da28:	b580      	push	{r7, lr}
 800da2a:	b082      	sub	sp, #8
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	2200      	movs	r2, #0
 800da38:	6839      	ldr	r1, [r7, #0]
 800da3a:	4618      	mov	r0, r3
 800da3c:	f001 ffb0 	bl	800f9a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	4a40      	ldr	r2, [pc, #256]	; (800db48 <HAL_TIM_PWM_Stop+0x120>)
 800da46:	4293      	cmp	r3, r2
 800da48:	d018      	beq.n	800da7c <HAL_TIM_PWM_Stop+0x54>
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	681b      	ldr	r3, [r3, #0]
 800da4e:	4a3f      	ldr	r2, [pc, #252]	; (800db4c <HAL_TIM_PWM_Stop+0x124>)
 800da50:	4293      	cmp	r3, r2
 800da52:	d013      	beq.n	800da7c <HAL_TIM_PWM_Stop+0x54>
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	4a3d      	ldr	r2, [pc, #244]	; (800db50 <HAL_TIM_PWM_Stop+0x128>)
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d00e      	beq.n	800da7c <HAL_TIM_PWM_Stop+0x54>
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	4a3c      	ldr	r2, [pc, #240]	; (800db54 <HAL_TIM_PWM_Stop+0x12c>)
 800da64:	4293      	cmp	r3, r2
 800da66:	d009      	beq.n	800da7c <HAL_TIM_PWM_Stop+0x54>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	681b      	ldr	r3, [r3, #0]
 800da6c:	4a3a      	ldr	r2, [pc, #232]	; (800db58 <HAL_TIM_PWM_Stop+0x130>)
 800da6e:	4293      	cmp	r3, r2
 800da70:	d004      	beq.n	800da7c <HAL_TIM_PWM_Stop+0x54>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	681b      	ldr	r3, [r3, #0]
 800da76:	4a39      	ldr	r2, [pc, #228]	; (800db5c <HAL_TIM_PWM_Stop+0x134>)
 800da78:	4293      	cmp	r3, r2
 800da7a:	d101      	bne.n	800da80 <HAL_TIM_PWM_Stop+0x58>
 800da7c:	2301      	movs	r3, #1
 800da7e:	e000      	b.n	800da82 <HAL_TIM_PWM_Stop+0x5a>
 800da80:	2300      	movs	r3, #0
 800da82:	2b00      	cmp	r3, #0
 800da84:	d017      	beq.n	800dab6 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	6a1a      	ldr	r2, [r3, #32]
 800da8c:	f241 1311 	movw	r3, #4369	; 0x1111
 800da90:	4013      	ands	r3, r2
 800da92:	2b00      	cmp	r3, #0
 800da94:	d10f      	bne.n	800dab6 <HAL_TIM_PWM_Stop+0x8e>
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	681b      	ldr	r3, [r3, #0]
 800da9a:	6a1a      	ldr	r2, [r3, #32]
 800da9c:	f244 4344 	movw	r3, #17476	; 0x4444
 800daa0:	4013      	ands	r3, r2
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d107      	bne.n	800dab6 <HAL_TIM_PWM_Stop+0x8e>
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800daac:	687b      	ldr	r3, [r7, #4]
 800daae:	681b      	ldr	r3, [r3, #0]
 800dab0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800dab4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800dab6:	687b      	ldr	r3, [r7, #4]
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	6a1a      	ldr	r2, [r3, #32]
 800dabc:	f241 1311 	movw	r3, #4369	; 0x1111
 800dac0:	4013      	ands	r3, r2
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d10f      	bne.n	800dae6 <HAL_TIM_PWM_Stop+0xbe>
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	681b      	ldr	r3, [r3, #0]
 800daca:	6a1a      	ldr	r2, [r3, #32]
 800dacc:	f244 4344 	movw	r3, #17476	; 0x4444
 800dad0:	4013      	ands	r3, r2
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d107      	bne.n	800dae6 <HAL_TIM_PWM_Stop+0xbe>
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	681a      	ldr	r2, [r3, #0]
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	f022 0201 	bic.w	r2, r2, #1
 800dae4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800dae6:	683b      	ldr	r3, [r7, #0]
 800dae8:	2b00      	cmp	r3, #0
 800daea:	d104      	bne.n	800daf6 <HAL_TIM_PWM_Stop+0xce>
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2201      	movs	r2, #1
 800daf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800daf4:	e023      	b.n	800db3e <HAL_TIM_PWM_Stop+0x116>
 800daf6:	683b      	ldr	r3, [r7, #0]
 800daf8:	2b04      	cmp	r3, #4
 800dafa:	d104      	bne.n	800db06 <HAL_TIM_PWM_Stop+0xde>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	2201      	movs	r2, #1
 800db00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800db04:	e01b      	b.n	800db3e <HAL_TIM_PWM_Stop+0x116>
 800db06:	683b      	ldr	r3, [r7, #0]
 800db08:	2b08      	cmp	r3, #8
 800db0a:	d104      	bne.n	800db16 <HAL_TIM_PWM_Stop+0xee>
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	2201      	movs	r2, #1
 800db10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800db14:	e013      	b.n	800db3e <HAL_TIM_PWM_Stop+0x116>
 800db16:	683b      	ldr	r3, [r7, #0]
 800db18:	2b0c      	cmp	r3, #12
 800db1a:	d104      	bne.n	800db26 <HAL_TIM_PWM_Stop+0xfe>
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	2201      	movs	r2, #1
 800db20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800db24:	e00b      	b.n	800db3e <HAL_TIM_PWM_Stop+0x116>
 800db26:	683b      	ldr	r3, [r7, #0]
 800db28:	2b10      	cmp	r3, #16
 800db2a:	d104      	bne.n	800db36 <HAL_TIM_PWM_Stop+0x10e>
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2201      	movs	r2, #1
 800db30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800db34:	e003      	b.n	800db3e <HAL_TIM_PWM_Stop+0x116>
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	2201      	movs	r2, #1
 800db3a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800db3e:	2300      	movs	r3, #0
}
 800db40:	4618      	mov	r0, r3
 800db42:	3708      	adds	r7, #8
 800db44:	46bd      	mov	sp, r7
 800db46:	bd80      	pop	{r7, pc}
 800db48:	40012c00 	.word	0x40012c00
 800db4c:	40013400 	.word	0x40013400
 800db50:	40014000 	.word	0x40014000
 800db54:	40014400 	.word	0x40014400
 800db58:	40014800 	.word	0x40014800
 800db5c:	40015000 	.word	0x40015000

0800db60 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800db60:	b580      	push	{r7, lr}
 800db62:	b082      	sub	sp, #8
 800db64:	af00      	add	r7, sp, #0
 800db66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d101      	bne.n	800db72 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800db6e:	2301      	movs	r3, #1
 800db70:	e049      	b.n	800dc06 <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800db78:	b2db      	uxtb	r3, r3
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d106      	bne.n	800db8c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800db7e:	687b      	ldr	r3, [r7, #4]
 800db80:	2200      	movs	r2, #0
 800db82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f000 f841 	bl	800dc0e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2202      	movs	r2, #2
 800db90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	681a      	ldr	r2, [r3, #0]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	3304      	adds	r3, #4
 800db9c:	4619      	mov	r1, r3
 800db9e:	4610      	mov	r0, r2
 800dba0:	f001 f8aa 	bl	800ecf8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	2201      	movs	r2, #1
 800dba8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	2201      	movs	r2, #1
 800dbb0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	2201      	movs	r2, #1
 800dbb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	2201      	movs	r2, #1
 800dbc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	2201      	movs	r2, #1
 800dbc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2201      	movs	r2, #1
 800dbd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dbd4:	687b      	ldr	r3, [r7, #4]
 800dbd6:	2201      	movs	r2, #1
 800dbd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	2201      	movs	r2, #1
 800dbe0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	2201      	movs	r2, #1
 800dbe8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	2201      	movs	r2, #1
 800dbf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dbf4:	687b      	ldr	r3, [r7, #4]
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dbfc:	687b      	ldr	r3, [r7, #4]
 800dbfe:	2201      	movs	r2, #1
 800dc00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dc04:	2300      	movs	r3, #0
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3708      	adds	r7, #8
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}

0800dc0e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800dc0e:	b480      	push	{r7}
 800dc10:	b083      	sub	sp, #12
 800dc12:	af00      	add	r7, sp, #0
 800dc14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800dc16:	bf00      	nop
 800dc18:	370c      	adds	r7, #12
 800dc1a:	46bd      	mov	sp, r7
 800dc1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc20:	4770      	bx	lr
	...

0800dc24 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b086      	sub	sp, #24
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	60f8      	str	r0, [r7, #12]
 800dc2c:	60b9      	str	r1, [r7, #8]
 800dc2e:	607a      	str	r2, [r7, #4]
 800dc30:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800dc32:	68bb      	ldr	r3, [r7, #8]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	d104      	bne.n	800dc42 <HAL_TIM_IC_Start_DMA+0x1e>
 800dc38:	68fb      	ldr	r3, [r7, #12]
 800dc3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800dc3e:	b2db      	uxtb	r3, r3
 800dc40:	e023      	b.n	800dc8a <HAL_TIM_IC_Start_DMA+0x66>
 800dc42:	68bb      	ldr	r3, [r7, #8]
 800dc44:	2b04      	cmp	r3, #4
 800dc46:	d104      	bne.n	800dc52 <HAL_TIM_IC_Start_DMA+0x2e>
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800dc4e:	b2db      	uxtb	r3, r3
 800dc50:	e01b      	b.n	800dc8a <HAL_TIM_IC_Start_DMA+0x66>
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	2b08      	cmp	r3, #8
 800dc56:	d104      	bne.n	800dc62 <HAL_TIM_IC_Start_DMA+0x3e>
 800dc58:	68fb      	ldr	r3, [r7, #12]
 800dc5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800dc5e:	b2db      	uxtb	r3, r3
 800dc60:	e013      	b.n	800dc8a <HAL_TIM_IC_Start_DMA+0x66>
 800dc62:	68bb      	ldr	r3, [r7, #8]
 800dc64:	2b0c      	cmp	r3, #12
 800dc66:	d104      	bne.n	800dc72 <HAL_TIM_IC_Start_DMA+0x4e>
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800dc6e:	b2db      	uxtb	r3, r3
 800dc70:	e00b      	b.n	800dc8a <HAL_TIM_IC_Start_DMA+0x66>
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	2b10      	cmp	r3, #16
 800dc76:	d104      	bne.n	800dc82 <HAL_TIM_IC_Start_DMA+0x5e>
 800dc78:	68fb      	ldr	r3, [r7, #12]
 800dc7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800dc7e:	b2db      	uxtb	r3, r3
 800dc80:	e003      	b.n	800dc8a <HAL_TIM_IC_Start_DMA+0x66>
 800dc82:	68fb      	ldr	r3, [r7, #12]
 800dc84:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800dc88:	b2db      	uxtb	r3, r3
 800dc8a:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800dc8c:	68bb      	ldr	r3, [r7, #8]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d104      	bne.n	800dc9c <HAL_TIM_IC_Start_DMA+0x78>
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc98:	b2db      	uxtb	r3, r3
 800dc9a:	e013      	b.n	800dcc4 <HAL_TIM_IC_Start_DMA+0xa0>
 800dc9c:	68bb      	ldr	r3, [r7, #8]
 800dc9e:	2b04      	cmp	r3, #4
 800dca0:	d104      	bne.n	800dcac <HAL_TIM_IC_Start_DMA+0x88>
 800dca2:	68fb      	ldr	r3, [r7, #12]
 800dca4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	e00b      	b.n	800dcc4 <HAL_TIM_IC_Start_DMA+0xa0>
 800dcac:	68bb      	ldr	r3, [r7, #8]
 800dcae:	2b08      	cmp	r3, #8
 800dcb0:	d104      	bne.n	800dcbc <HAL_TIM_IC_Start_DMA+0x98>
 800dcb2:	68fb      	ldr	r3, [r7, #12]
 800dcb4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	e003      	b.n	800dcc4 <HAL_TIM_IC_Start_DMA+0xa0>
 800dcbc:	68fb      	ldr	r3, [r7, #12]
 800dcbe:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800dcc2:	b2db      	uxtb	r3, r3
 800dcc4:	75bb      	strb	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 800dcc6:	7dfb      	ldrb	r3, [r7, #23]
 800dcc8:	2b02      	cmp	r3, #2
 800dcca:	d002      	beq.n	800dcd2 <HAL_TIM_IC_Start_DMA+0xae>
   || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800dccc:	7dbb      	ldrb	r3, [r7, #22]
 800dcce:	2b02      	cmp	r3, #2
 800dcd0:	d101      	bne.n	800dcd6 <HAL_TIM_IC_Start_DMA+0xb2>
  {
    return HAL_BUSY;
 800dcd2:	2302      	movs	r3, #2
 800dcd4:	e128      	b.n	800df28 <HAL_TIM_IC_Start_DMA+0x304>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 800dcd6:	7dfb      	ldrb	r3, [r7, #23]
 800dcd8:	2b01      	cmp	r3, #1
 800dcda:	d153      	bne.n	800dd84 <HAL_TIM_IC_Start_DMA+0x160>
        && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800dcdc:	7dbb      	ldrb	r3, [r7, #22]
 800dcde:	2b01      	cmp	r3, #1
 800dce0:	d150      	bne.n	800dd84 <HAL_TIM_IC_Start_DMA+0x160>
  {
    if ((pData == NULL) && (Length > 0U))
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d104      	bne.n	800dcf2 <HAL_TIM_IC_Start_DMA+0xce>
 800dce8:	887b      	ldrh	r3, [r7, #2]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d001      	beq.n	800dcf2 <HAL_TIM_IC_Start_DMA+0xce>
    {
      return HAL_ERROR;
 800dcee:	2301      	movs	r3, #1
 800dcf0:	e11a      	b.n	800df28 <HAL_TIM_IC_Start_DMA+0x304>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dcf2:	68bb      	ldr	r3, [r7, #8]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d104      	bne.n	800dd02 <HAL_TIM_IC_Start_DMA+0xde>
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	2202      	movs	r2, #2
 800dcfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800dd00:	e023      	b.n	800dd4a <HAL_TIM_IC_Start_DMA+0x126>
 800dd02:	68bb      	ldr	r3, [r7, #8]
 800dd04:	2b04      	cmp	r3, #4
 800dd06:	d104      	bne.n	800dd12 <HAL_TIM_IC_Start_DMA+0xee>
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	2202      	movs	r2, #2
 800dd0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800dd10:	e01b      	b.n	800dd4a <HAL_TIM_IC_Start_DMA+0x126>
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	2b08      	cmp	r3, #8
 800dd16:	d104      	bne.n	800dd22 <HAL_TIM_IC_Start_DMA+0xfe>
 800dd18:	68fb      	ldr	r3, [r7, #12]
 800dd1a:	2202      	movs	r2, #2
 800dd1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800dd20:	e013      	b.n	800dd4a <HAL_TIM_IC_Start_DMA+0x126>
 800dd22:	68bb      	ldr	r3, [r7, #8]
 800dd24:	2b0c      	cmp	r3, #12
 800dd26:	d104      	bne.n	800dd32 <HAL_TIM_IC_Start_DMA+0x10e>
 800dd28:	68fb      	ldr	r3, [r7, #12]
 800dd2a:	2202      	movs	r2, #2
 800dd2c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800dd30:	e00b      	b.n	800dd4a <HAL_TIM_IC_Start_DMA+0x126>
 800dd32:	68bb      	ldr	r3, [r7, #8]
 800dd34:	2b10      	cmp	r3, #16
 800dd36:	d104      	bne.n	800dd42 <HAL_TIM_IC_Start_DMA+0x11e>
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	2202      	movs	r2, #2
 800dd3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dd40:	e003      	b.n	800dd4a <HAL_TIM_IC_Start_DMA+0x126>
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	2202      	movs	r2, #2
 800dd46:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dd4a:	68bb      	ldr	r3, [r7, #8]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d104      	bne.n	800dd5a <HAL_TIM_IC_Start_DMA+0x136>
 800dd50:	68fb      	ldr	r3, [r7, #12]
 800dd52:	2202      	movs	r2, #2
 800dd54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 800dd58:	e016      	b.n	800dd88 <HAL_TIM_IC_Start_DMA+0x164>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dd5a:	68bb      	ldr	r3, [r7, #8]
 800dd5c:	2b04      	cmp	r3, #4
 800dd5e:	d104      	bne.n	800dd6a <HAL_TIM_IC_Start_DMA+0x146>
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	2202      	movs	r2, #2
 800dd64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 800dd68:	e00e      	b.n	800dd88 <HAL_TIM_IC_Start_DMA+0x164>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dd6a:	68bb      	ldr	r3, [r7, #8]
 800dd6c:	2b08      	cmp	r3, #8
 800dd6e:	d104      	bne.n	800dd7a <HAL_TIM_IC_Start_DMA+0x156>
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	2202      	movs	r2, #2
 800dd74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
    if ((pData == NULL) && (Length > 0U))
 800dd78:	e006      	b.n	800dd88 <HAL_TIM_IC_Start_DMA+0x164>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800dd7a:	68fb      	ldr	r3, [r7, #12]
 800dd7c:	2202      	movs	r2, #2
 800dd7e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
    if ((pData == NULL) && (Length > 0U))
 800dd82:	e001      	b.n	800dd88 <HAL_TIM_IC_Start_DMA+0x164>
    }
  }
  else
  {
    return HAL_ERROR;
 800dd84:	2301      	movs	r3, #1
 800dd86:	e0cf      	b.n	800df28 <HAL_TIM_IC_Start_DMA+0x304>
  }

  switch (Channel)
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	2b0c      	cmp	r3, #12
 800dd8c:	f200 80ae 	bhi.w	800deec <HAL_TIM_IC_Start_DMA+0x2c8>
 800dd90:	a201      	add	r2, pc, #4	; (adr r2, 800dd98 <HAL_TIM_IC_Start_DMA+0x174>)
 800dd92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd96:	bf00      	nop
 800dd98:	0800ddcd 	.word	0x0800ddcd
 800dd9c:	0800deed 	.word	0x0800deed
 800dda0:	0800deed 	.word	0x0800deed
 800dda4:	0800deed 	.word	0x0800deed
 800dda8:	0800de15 	.word	0x0800de15
 800ddac:	0800deed 	.word	0x0800deed
 800ddb0:	0800deed 	.word	0x0800deed
 800ddb4:	0800deed 	.word	0x0800deed
 800ddb8:	0800de5d 	.word	0x0800de5d
 800ddbc:	0800deed 	.word	0x0800deed
 800ddc0:	0800deed 	.word	0x0800deed
 800ddc4:	0800deed 	.word	0x0800deed
 800ddc8:	0800dea5 	.word	0x0800dea5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd0:	4a57      	ldr	r2, [pc, #348]	; (800df30 <HAL_TIM_IC_Start_DMA+0x30c>)
 800ddd2:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800ddd4:	68fb      	ldr	r3, [r7, #12]
 800ddd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddd8:	4a56      	ldr	r2, [pc, #344]	; (800df34 <HAL_TIM_IC_Start_DMA+0x310>)
 800ddda:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800dddc:	68fb      	ldr	r3, [r7, #12]
 800ddde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dde0:	4a55      	ldr	r2, [pc, #340]	; (800df38 <HAL_TIM_IC_Start_DMA+0x314>)
 800dde2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 800dde4:	68fb      	ldr	r3, [r7, #12]
 800dde6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	681b      	ldr	r3, [r3, #0]
 800ddec:	3334      	adds	r3, #52	; 0x34
 800ddee:	4619      	mov	r1, r3
 800ddf0:	687a      	ldr	r2, [r7, #4]
 800ddf2:	887b      	ldrh	r3, [r7, #2]
 800ddf4:	f7fd fe3a 	bl	800ba6c <HAL_DMA_Start_IT>
 800ddf8:	4603      	mov	r3, r0
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d001      	beq.n	800de02 <HAL_TIM_IC_Start_DMA+0x1de>
      {
        return HAL_ERROR;
 800ddfe:	2301      	movs	r3, #1
 800de00:	e092      	b.n	800df28 <HAL_TIM_IC_Start_DMA+0x304>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800de02:	68fb      	ldr	r3, [r7, #12]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	68da      	ldr	r2, [r3, #12]
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800de10:	60da      	str	r2, [r3, #12]
      break;
 800de12:	e06c      	b.n	800deee <HAL_TIM_IC_Start_DMA+0x2ca>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de18:	4a45      	ldr	r2, [pc, #276]	; (800df30 <HAL_TIM_IC_Start_DMA+0x30c>)
 800de1a:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de20:	4a44      	ldr	r2, [pc, #272]	; (800df34 <HAL_TIM_IC_Start_DMA+0x310>)
 800de22:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de28:	4a43      	ldr	r2, [pc, #268]	; (800df38 <HAL_TIM_IC_Start_DMA+0x314>)
 800de2a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800de30:	68fb      	ldr	r3, [r7, #12]
 800de32:	681b      	ldr	r3, [r3, #0]
 800de34:	3338      	adds	r3, #56	; 0x38
 800de36:	4619      	mov	r1, r3
 800de38:	687a      	ldr	r2, [r7, #4]
 800de3a:	887b      	ldrh	r3, [r7, #2]
 800de3c:	f7fd fe16 	bl	800ba6c <HAL_DMA_Start_IT>
 800de40:	4603      	mov	r3, r0
 800de42:	2b00      	cmp	r3, #0
 800de44:	d001      	beq.n	800de4a <HAL_TIM_IC_Start_DMA+0x226>
      {
        return HAL_ERROR;
 800de46:	2301      	movs	r3, #1
 800de48:	e06e      	b.n	800df28 <HAL_TIM_IC_Start_DMA+0x304>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800de4a:	68fb      	ldr	r3, [r7, #12]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	68da      	ldr	r2, [r3, #12]
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	681b      	ldr	r3, [r3, #0]
 800de54:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800de58:	60da      	str	r2, [r3, #12]
      break;
 800de5a:	e048      	b.n	800deee <HAL_TIM_IC_Start_DMA+0x2ca>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de60:	4a33      	ldr	r2, [pc, #204]	; (800df30 <HAL_TIM_IC_Start_DMA+0x30c>)
 800de62:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de68:	4a32      	ldr	r2, [pc, #200]	; (800df34 <HAL_TIM_IC_Start_DMA+0x310>)
 800de6a:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800de70:	4a31      	ldr	r2, [pc, #196]	; (800df38 <HAL_TIM_IC_Start_DMA+0x314>)
 800de72:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800de74:	68fb      	ldr	r3, [r7, #12]
 800de76:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	333c      	adds	r3, #60	; 0x3c
 800de7e:	4619      	mov	r1, r3
 800de80:	687a      	ldr	r2, [r7, #4]
 800de82:	887b      	ldrh	r3, [r7, #2]
 800de84:	f7fd fdf2 	bl	800ba6c <HAL_DMA_Start_IT>
 800de88:	4603      	mov	r3, r0
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d001      	beq.n	800de92 <HAL_TIM_IC_Start_DMA+0x26e>
      {
        return HAL_ERROR;
 800de8e:	2301      	movs	r3, #1
 800de90:	e04a      	b.n	800df28 <HAL_TIM_IC_Start_DMA+0x304>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800de92:	68fb      	ldr	r3, [r7, #12]
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	68da      	ldr	r2, [r3, #12]
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800dea0:	60da      	str	r2, [r3, #12]
      break;
 800dea2:	e024      	b.n	800deee <HAL_TIM_IC_Start_DMA+0x2ca>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800dea4:	68fb      	ldr	r3, [r7, #12]
 800dea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dea8:	4a21      	ldr	r2, [pc, #132]	; (800df30 <HAL_TIM_IC_Start_DMA+0x30c>)
 800deaa:	62da      	str	r2, [r3, #44]	; 0x2c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800deac:	68fb      	ldr	r3, [r7, #12]
 800deae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800deb0:	4a20      	ldr	r2, [pc, #128]	; (800df34 <HAL_TIM_IC_Start_DMA+0x310>)
 800deb2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800deb4:	68fb      	ldr	r3, [r7, #12]
 800deb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800deb8:	4a1f      	ldr	r2, [pc, #124]	; (800df38 <HAL_TIM_IC_Start_DMA+0x314>)
 800deba:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	3340      	adds	r3, #64	; 0x40
 800dec6:	4619      	mov	r1, r3
 800dec8:	687a      	ldr	r2, [r7, #4]
 800deca:	887b      	ldrh	r3, [r7, #2]
 800decc:	f7fd fdce 	bl	800ba6c <HAL_DMA_Start_IT>
 800ded0:	4603      	mov	r3, r0
 800ded2:	2b00      	cmp	r3, #0
 800ded4:	d001      	beq.n	800deda <HAL_TIM_IC_Start_DMA+0x2b6>
      {
        return HAL_ERROR;
 800ded6:	2301      	movs	r3, #1
 800ded8:	e026      	b.n	800df28 <HAL_TIM_IC_Start_DMA+0x304>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	681b      	ldr	r3, [r3, #0]
 800dede:	68da      	ldr	r2, [r3, #12]
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800dee8:	60da      	str	r2, [r3, #12]
      break;
 800deea:	e000      	b.n	800deee <HAL_TIM_IC_Start_DMA+0x2ca>
    }

    default:
      break;
 800deec:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800deee:	68fb      	ldr	r3, [r7, #12]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	2201      	movs	r2, #1
 800def4:	68b9      	ldr	r1, [r7, #8]
 800def6:	4618      	mov	r0, r3
 800def8:	f001 fd52 	bl	800f9a0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	681b      	ldr	r3, [r3, #0]
 800df00:	689a      	ldr	r2, [r3, #8]
 800df02:	4b0e      	ldr	r3, [pc, #56]	; (800df3c <HAL_TIM_IC_Start_DMA+0x318>)
 800df04:	4013      	ands	r3, r2
 800df06:	613b      	str	r3, [r7, #16]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800df08:	693b      	ldr	r3, [r7, #16]
 800df0a:	2b06      	cmp	r3, #6
 800df0c:	d00b      	beq.n	800df26 <HAL_TIM_IC_Start_DMA+0x302>
 800df0e:	693b      	ldr	r3, [r7, #16]
 800df10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800df14:	d007      	beq.n	800df26 <HAL_TIM_IC_Start_DMA+0x302>
  {
    __HAL_TIM_ENABLE(htim);
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	681b      	ldr	r3, [r3, #0]
 800df1a:	681a      	ldr	r2, [r3, #0]
 800df1c:	68fb      	ldr	r3, [r7, #12]
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	f042 0201 	orr.w	r2, r2, #1
 800df24:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800df26:	2300      	movs	r3, #0
}
 800df28:	4618      	mov	r0, r3
 800df2a:	3718      	adds	r7, #24
 800df2c:	46bd      	mov	sp, r7
 800df2e:	bd80      	pop	{r7, pc}
 800df30:	0800ebc7 	.word	0x0800ebc7
 800df34:	0800ec8f 	.word	0x0800ec8f
 800df38:	0800eb35 	.word	0x0800eb35
 800df3c:	00010007 	.word	0x00010007

0800df40 <HAL_TIM_IC_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b082      	sub	sp, #8
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  switch (Channel)
 800df4a:	683b      	ldr	r3, [r7, #0]
 800df4c:	2b0c      	cmp	r3, #12
 800df4e:	d855      	bhi.n	800dffc <HAL_TIM_IC_Stop_DMA+0xbc>
 800df50:	a201      	add	r2, pc, #4	; (adr r2, 800df58 <HAL_TIM_IC_Stop_DMA+0x18>)
 800df52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df56:	bf00      	nop
 800df58:	0800df8d 	.word	0x0800df8d
 800df5c:	0800dffd 	.word	0x0800dffd
 800df60:	0800dffd 	.word	0x0800dffd
 800df64:	0800dffd 	.word	0x0800dffd
 800df68:	0800dfa9 	.word	0x0800dfa9
 800df6c:	0800dffd 	.word	0x0800dffd
 800df70:	0800dffd 	.word	0x0800dffd
 800df74:	0800dffd 	.word	0x0800dffd
 800df78:	0800dfc5 	.word	0x0800dfc5
 800df7c:	0800dffd 	.word	0x0800dffd
 800df80:	0800dffd 	.word	0x0800dffd
 800df84:	0800dffd 	.word	0x0800dffd
 800df88:	0800dfe1 	.word	0x0800dfe1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	68da      	ldr	r2, [r3, #12]
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	681b      	ldr	r3, [r3, #0]
 800df96:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800df9a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfa0:	4618      	mov	r0, r3
 800dfa2:	f7fd fe37 	bl	800bc14 <HAL_DMA_Abort_IT>
      break;
 800dfa6:	e02a      	b.n	800dffe <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	68da      	ldr	r2, [r3, #12]
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800dfb6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfbc:	4618      	mov	r0, r3
 800dfbe:	f7fd fe29 	bl	800bc14 <HAL_DMA_Abort_IT>
      break;
 800dfc2:	e01c      	b.n	800dffe <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	68da      	ldr	r2, [r3, #12]
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800dfd2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfd8:	4618      	mov	r0, r3
 800dfda:	f7fd fe1b 	bl	800bc14 <HAL_DMA_Abort_IT>
      break;
 800dfde:	e00e      	b.n	800dffe <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	68da      	ldr	r2, [r3, #12]
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800dfee:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dff4:	4618      	mov	r0, r3
 800dff6:	f7fd fe0d 	bl	800bc14 <HAL_DMA_Abort_IT>
      break;
 800dffa:	e000      	b.n	800dffe <HAL_TIM_IC_Stop_DMA+0xbe>
    }

    default:
      break;
 800dffc:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	681b      	ldr	r3, [r3, #0]
 800e002:	2200      	movs	r2, #0
 800e004:	6839      	ldr	r1, [r7, #0]
 800e006:	4618      	mov	r0, r3
 800e008:	f001 fcca 	bl	800f9a0 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	681b      	ldr	r3, [r3, #0]
 800e010:	6a1a      	ldr	r2, [r3, #32]
 800e012:	f241 1311 	movw	r3, #4369	; 0x1111
 800e016:	4013      	ands	r3, r2
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d10f      	bne.n	800e03c <HAL_TIM_IC_Stop_DMA+0xfc>
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	6a1a      	ldr	r2, [r3, #32]
 800e022:	f244 4344 	movw	r3, #17476	; 0x4444
 800e026:	4013      	ands	r3, r2
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d107      	bne.n	800e03c <HAL_TIM_IC_Stop_DMA+0xfc>
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	681a      	ldr	r2, [r3, #0]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	f022 0201 	bic.w	r2, r2, #1
 800e03a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e03c:	683b      	ldr	r3, [r7, #0]
 800e03e:	2b00      	cmp	r3, #0
 800e040:	d104      	bne.n	800e04c <HAL_TIM_IC_Stop_DMA+0x10c>
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2201      	movs	r2, #1
 800e046:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e04a:	e023      	b.n	800e094 <HAL_TIM_IC_Stop_DMA+0x154>
 800e04c:	683b      	ldr	r3, [r7, #0]
 800e04e:	2b04      	cmp	r3, #4
 800e050:	d104      	bne.n	800e05c <HAL_TIM_IC_Stop_DMA+0x11c>
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2201      	movs	r2, #1
 800e056:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e05a:	e01b      	b.n	800e094 <HAL_TIM_IC_Stop_DMA+0x154>
 800e05c:	683b      	ldr	r3, [r7, #0]
 800e05e:	2b08      	cmp	r3, #8
 800e060:	d104      	bne.n	800e06c <HAL_TIM_IC_Stop_DMA+0x12c>
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	2201      	movs	r2, #1
 800e066:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e06a:	e013      	b.n	800e094 <HAL_TIM_IC_Stop_DMA+0x154>
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	2b0c      	cmp	r3, #12
 800e070:	d104      	bne.n	800e07c <HAL_TIM_IC_Stop_DMA+0x13c>
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	2201      	movs	r2, #1
 800e076:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e07a:	e00b      	b.n	800e094 <HAL_TIM_IC_Stop_DMA+0x154>
 800e07c:	683b      	ldr	r3, [r7, #0]
 800e07e:	2b10      	cmp	r3, #16
 800e080:	d104      	bne.n	800e08c <HAL_TIM_IC_Stop_DMA+0x14c>
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	2201      	movs	r2, #1
 800e086:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e08a:	e003      	b.n	800e094 <HAL_TIM_IC_Stop_DMA+0x154>
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2201      	movs	r2, #1
 800e090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d104      	bne.n	800e0a4 <HAL_TIM_IC_Stop_DMA+0x164>
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	2201      	movs	r2, #1
 800e09e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e0a2:	e013      	b.n	800e0cc <HAL_TIM_IC_Stop_DMA+0x18c>
 800e0a4:	683b      	ldr	r3, [r7, #0]
 800e0a6:	2b04      	cmp	r3, #4
 800e0a8:	d104      	bne.n	800e0b4 <HAL_TIM_IC_Stop_DMA+0x174>
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	2201      	movs	r2, #1
 800e0ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e0b2:	e00b      	b.n	800e0cc <HAL_TIM_IC_Stop_DMA+0x18c>
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	2b08      	cmp	r3, #8
 800e0b8:	d104      	bne.n	800e0c4 <HAL_TIM_IC_Stop_DMA+0x184>
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	2201      	movs	r2, #1
 800e0be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e0c2:	e003      	b.n	800e0cc <HAL_TIM_IC_Stop_DMA+0x18c>
 800e0c4:	687b      	ldr	r3, [r7, #4]
 800e0c6:	2201      	movs	r2, #1
 800e0c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 800e0cc:	2300      	movs	r3, #0
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3708      	adds	r7, #8
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}
 800e0d6:	bf00      	nop

0800e0d8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b086      	sub	sp, #24
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	6078      	str	r0, [r7, #4]
 800e0e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	2b00      	cmp	r3, #0
 800e0e6:	d101      	bne.n	800e0ec <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800e0e8:	2301      	movs	r3, #1
 800e0ea:	e097      	b.n	800e21c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e0f2:	b2db      	uxtb	r3, r3
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d106      	bne.n	800e106 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	f7fa fc81 	bl	8008a08 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	2202      	movs	r2, #2
 800e10a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	689b      	ldr	r3, [r3, #8]
 800e114:	687a      	ldr	r2, [r7, #4]
 800e116:	6812      	ldr	r2, [r2, #0]
 800e118:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800e11c:	f023 0307 	bic.w	r3, r3, #7
 800e120:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	681a      	ldr	r2, [r3, #0]
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	3304      	adds	r3, #4
 800e12a:	4619      	mov	r1, r3
 800e12c:	4610      	mov	r0, r2
 800e12e:	f000 fde3 	bl	800ecf8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e132:	687b      	ldr	r3, [r7, #4]
 800e134:	681b      	ldr	r3, [r3, #0]
 800e136:	689b      	ldr	r3, [r3, #8]
 800e138:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	681b      	ldr	r3, [r3, #0]
 800e13e:	699b      	ldr	r3, [r3, #24]
 800e140:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	6a1b      	ldr	r3, [r3, #32]
 800e148:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	697a      	ldr	r2, [r7, #20]
 800e150:	4313      	orrs	r3, r2
 800e152:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800e154:	693b      	ldr	r3, [r7, #16]
 800e156:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e15a:	f023 0303 	bic.w	r3, r3, #3
 800e15e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800e160:	683b      	ldr	r3, [r7, #0]
 800e162:	689a      	ldr	r2, [r3, #8]
 800e164:	683b      	ldr	r3, [r7, #0]
 800e166:	699b      	ldr	r3, [r3, #24]
 800e168:	021b      	lsls	r3, r3, #8
 800e16a:	4313      	orrs	r3, r2
 800e16c:	693a      	ldr	r2, [r7, #16]
 800e16e:	4313      	orrs	r3, r2
 800e170:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800e172:	693b      	ldr	r3, [r7, #16]
 800e174:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800e178:	f023 030c 	bic.w	r3, r3, #12
 800e17c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800e17e:	693b      	ldr	r3, [r7, #16]
 800e180:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e184:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e188:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	68da      	ldr	r2, [r3, #12]
 800e18e:	683b      	ldr	r3, [r7, #0]
 800e190:	69db      	ldr	r3, [r3, #28]
 800e192:	021b      	lsls	r3, r3, #8
 800e194:	4313      	orrs	r3, r2
 800e196:	693a      	ldr	r2, [r7, #16]
 800e198:	4313      	orrs	r3, r2
 800e19a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	691b      	ldr	r3, [r3, #16]
 800e1a0:	011a      	lsls	r2, r3, #4
 800e1a2:	683b      	ldr	r3, [r7, #0]
 800e1a4:	6a1b      	ldr	r3, [r3, #32]
 800e1a6:	031b      	lsls	r3, r3, #12
 800e1a8:	4313      	orrs	r3, r2
 800e1aa:	693a      	ldr	r2, [r7, #16]
 800e1ac:	4313      	orrs	r3, r2
 800e1ae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800e1b6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800e1be:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800e1c0:	683b      	ldr	r3, [r7, #0]
 800e1c2:	685a      	ldr	r2, [r3, #4]
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	695b      	ldr	r3, [r3, #20]
 800e1c8:	011b      	lsls	r3, r3, #4
 800e1ca:	4313      	orrs	r3, r2
 800e1cc:	68fa      	ldr	r2, [r7, #12]
 800e1ce:	4313      	orrs	r3, r2
 800e1d0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800e1d2:	687b      	ldr	r3, [r7, #4]
 800e1d4:	681b      	ldr	r3, [r3, #0]
 800e1d6:	697a      	ldr	r2, [r7, #20]
 800e1d8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	681b      	ldr	r3, [r3, #0]
 800e1de:	693a      	ldr	r2, [r7, #16]
 800e1e0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	68fa      	ldr	r2, [r7, #12]
 800e1e8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2201      	movs	r2, #1
 800e1ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	2201      	movs	r2, #1
 800e1f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e1fa:	687b      	ldr	r3, [r7, #4]
 800e1fc:	2201      	movs	r2, #1
 800e1fe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	2201      	movs	r2, #1
 800e206:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	2201      	movs	r2, #1
 800e20e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e212:	687b      	ldr	r3, [r7, #4]
 800e214:	2201      	movs	r2, #1
 800e216:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e21a:	2300      	movs	r3, #0
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3718      	adds	r7, #24
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}

0800e224 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e224:	b580      	push	{r7, lr}
 800e226:	b082      	sub	sp, #8
 800e228:	af00      	add	r7, sp, #0
 800e22a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e22c:	687b      	ldr	r3, [r7, #4]
 800e22e:	681b      	ldr	r3, [r3, #0]
 800e230:	691b      	ldr	r3, [r3, #16]
 800e232:	f003 0302 	and.w	r3, r3, #2
 800e236:	2b02      	cmp	r3, #2
 800e238:	d122      	bne.n	800e280 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e23a:	687b      	ldr	r3, [r7, #4]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	68db      	ldr	r3, [r3, #12]
 800e240:	f003 0302 	and.w	r3, r3, #2
 800e244:	2b02      	cmp	r3, #2
 800e246:	d11b      	bne.n	800e280 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e248:	687b      	ldr	r3, [r7, #4]
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	f06f 0202 	mvn.w	r2, #2
 800e250:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	2201      	movs	r2, #1
 800e256:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	699b      	ldr	r3, [r3, #24]
 800e25e:	f003 0303 	and.w	r3, r3, #3
 800e262:	2b00      	cmp	r3, #0
 800e264:	d003      	beq.n	800e26e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e266:	6878      	ldr	r0, [r7, #4]
 800e268:	f7f8 f8ec 	bl	8006444 <HAL_TIM_IC_CaptureCallback>
 800e26c:	e005      	b.n	800e27a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e26e:	6878      	ldr	r0, [r7, #4]
 800e270:	f000 fc38 	bl	800eae4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e274:	6878      	ldr	r0, [r7, #4]
 800e276:	f000 fc3f 	bl	800eaf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	2200      	movs	r2, #0
 800e27e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	691b      	ldr	r3, [r3, #16]
 800e286:	f003 0304 	and.w	r3, r3, #4
 800e28a:	2b04      	cmp	r3, #4
 800e28c:	d122      	bne.n	800e2d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e28e:	687b      	ldr	r3, [r7, #4]
 800e290:	681b      	ldr	r3, [r3, #0]
 800e292:	68db      	ldr	r3, [r3, #12]
 800e294:	f003 0304 	and.w	r3, r3, #4
 800e298:	2b04      	cmp	r3, #4
 800e29a:	d11b      	bne.n	800e2d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	681b      	ldr	r3, [r3, #0]
 800e2a0:	f06f 0204 	mvn.w	r2, #4
 800e2a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2202      	movs	r2, #2
 800e2aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	699b      	ldr	r3, [r3, #24]
 800e2b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e2b6:	2b00      	cmp	r3, #0
 800e2b8:	d003      	beq.n	800e2c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e2ba:	6878      	ldr	r0, [r7, #4]
 800e2bc:	f7f8 f8c2 	bl	8006444 <HAL_TIM_IC_CaptureCallback>
 800e2c0:	e005      	b.n	800e2ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2c2:	6878      	ldr	r0, [r7, #4]
 800e2c4:	f000 fc0e 	bl	800eae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f000 fc15 	bl	800eaf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2ce:	687b      	ldr	r3, [r7, #4]
 800e2d0:	2200      	movs	r2, #0
 800e2d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	681b      	ldr	r3, [r3, #0]
 800e2d8:	691b      	ldr	r3, [r3, #16]
 800e2da:	f003 0308 	and.w	r3, r3, #8
 800e2de:	2b08      	cmp	r3, #8
 800e2e0:	d122      	bne.n	800e328 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e2e2:	687b      	ldr	r3, [r7, #4]
 800e2e4:	681b      	ldr	r3, [r3, #0]
 800e2e6:	68db      	ldr	r3, [r3, #12]
 800e2e8:	f003 0308 	and.w	r3, r3, #8
 800e2ec:	2b08      	cmp	r3, #8
 800e2ee:	d11b      	bne.n	800e328 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	681b      	ldr	r3, [r3, #0]
 800e2f4:	f06f 0208 	mvn.w	r2, #8
 800e2f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e2fa:	687b      	ldr	r3, [r7, #4]
 800e2fc:	2204      	movs	r2, #4
 800e2fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	69db      	ldr	r3, [r3, #28]
 800e306:	f003 0303 	and.w	r3, r3, #3
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d003      	beq.n	800e316 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e30e:	6878      	ldr	r0, [r7, #4]
 800e310:	f7f8 f898 	bl	8006444 <HAL_TIM_IC_CaptureCallback>
 800e314:	e005      	b.n	800e322 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e316:	6878      	ldr	r0, [r7, #4]
 800e318:	f000 fbe4 	bl	800eae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e31c:	6878      	ldr	r0, [r7, #4]
 800e31e:	f000 fbeb 	bl	800eaf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2200      	movs	r2, #0
 800e326:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e328:	687b      	ldr	r3, [r7, #4]
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	691b      	ldr	r3, [r3, #16]
 800e32e:	f003 0310 	and.w	r3, r3, #16
 800e332:	2b10      	cmp	r3, #16
 800e334:	d122      	bne.n	800e37c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	681b      	ldr	r3, [r3, #0]
 800e33a:	68db      	ldr	r3, [r3, #12]
 800e33c:	f003 0310 	and.w	r3, r3, #16
 800e340:	2b10      	cmp	r3, #16
 800e342:	d11b      	bne.n	800e37c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	f06f 0210 	mvn.w	r2, #16
 800e34c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	2208      	movs	r2, #8
 800e352:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e354:	687b      	ldr	r3, [r7, #4]
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	69db      	ldr	r3, [r3, #28]
 800e35a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e35e:	2b00      	cmp	r3, #0
 800e360:	d003      	beq.n	800e36a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e362:	6878      	ldr	r0, [r7, #4]
 800e364:	f7f8 f86e 	bl	8006444 <HAL_TIM_IC_CaptureCallback>
 800e368:	e005      	b.n	800e376 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e36a:	6878      	ldr	r0, [r7, #4]
 800e36c:	f000 fbba 	bl	800eae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e370:	6878      	ldr	r0, [r7, #4]
 800e372:	f000 fbc1 	bl	800eaf8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	2200      	movs	r2, #0
 800e37a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	691b      	ldr	r3, [r3, #16]
 800e382:	f003 0301 	and.w	r3, r3, #1
 800e386:	2b01      	cmp	r3, #1
 800e388:	d10e      	bne.n	800e3a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	68db      	ldr	r3, [r3, #12]
 800e390:	f003 0301 	and.w	r3, r3, #1
 800e394:	2b01      	cmp	r3, #1
 800e396:	d107      	bne.n	800e3a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	f06f 0201 	mvn.w	r2, #1
 800e3a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e3a2:	6878      	ldr	r0, [r7, #4]
 800e3a4:	f000 fb94 	bl	800ead0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e3a8:	687b      	ldr	r3, [r7, #4]
 800e3aa:	681b      	ldr	r3, [r3, #0]
 800e3ac:	691b      	ldr	r3, [r3, #16]
 800e3ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3b2:	2b80      	cmp	r3, #128	; 0x80
 800e3b4:	d10e      	bne.n	800e3d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	681b      	ldr	r3, [r3, #0]
 800e3ba:	68db      	ldr	r3, [r3, #12]
 800e3bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3c0:	2b80      	cmp	r3, #128	; 0x80
 800e3c2:	d107      	bne.n	800e3d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e3c4:	687b      	ldr	r3, [r7, #4]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e3cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e3ce:	6878      	ldr	r0, [r7, #4]
 800e3d0:	f001 fc5e 	bl	800fc90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e3d4:	687b      	ldr	r3, [r7, #4]
 800e3d6:	681b      	ldr	r3, [r3, #0]
 800e3d8:	691b      	ldr	r3, [r3, #16]
 800e3da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e3de:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e3e2:	d10e      	bne.n	800e402 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e3e4:	687b      	ldr	r3, [r7, #4]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	68db      	ldr	r3, [r3, #12]
 800e3ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e3ee:	2b80      	cmp	r3, #128	; 0x80
 800e3f0:	d107      	bne.n	800e402 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e3fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f001 fc51 	bl	800fca4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	681b      	ldr	r3, [r3, #0]
 800e406:	691b      	ldr	r3, [r3, #16]
 800e408:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e40c:	2b40      	cmp	r3, #64	; 0x40
 800e40e:	d10e      	bne.n	800e42e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	68db      	ldr	r3, [r3, #12]
 800e416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e41a:	2b40      	cmp	r3, #64	; 0x40
 800e41c:	d107      	bne.n	800e42e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e41e:	687b      	ldr	r3, [r7, #4]
 800e420:	681b      	ldr	r3, [r3, #0]
 800e422:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e426:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e428:	6878      	ldr	r0, [r7, #4]
 800e42a:	f000 fb6f 	bl	800eb0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	681b      	ldr	r3, [r3, #0]
 800e432:	691b      	ldr	r3, [r3, #16]
 800e434:	f003 0320 	and.w	r3, r3, #32
 800e438:	2b20      	cmp	r3, #32
 800e43a:	d10e      	bne.n	800e45a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	68db      	ldr	r3, [r3, #12]
 800e442:	f003 0320 	and.w	r3, r3, #32
 800e446:	2b20      	cmp	r3, #32
 800e448:	d107      	bne.n	800e45a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	681b      	ldr	r3, [r3, #0]
 800e44e:	f06f 0220 	mvn.w	r2, #32
 800e452:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e454:	6878      	ldr	r0, [r7, #4]
 800e456:	f001 fc11 	bl	800fc7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	691b      	ldr	r3, [r3, #16]
 800e460:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e464:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e468:	d10f      	bne.n	800e48a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800e46a:	687b      	ldr	r3, [r7, #4]
 800e46c:	681b      	ldr	r3, [r3, #0]
 800e46e:	68db      	ldr	r3, [r3, #12]
 800e470:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e474:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e478:	d107      	bne.n	800e48a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800e482:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800e484:	6878      	ldr	r0, [r7, #4]
 800e486:	f001 fc17 	bl	800fcb8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	691b      	ldr	r3, [r3, #16]
 800e490:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e494:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e498:	d10f      	bne.n	800e4ba <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	68db      	ldr	r3, [r3, #12]
 800e4a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e4a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e4a8:	d107      	bne.n	800e4ba <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800e4b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800e4b4:	6878      	ldr	r0, [r7, #4]
 800e4b6:	f001 fc09 	bl	800fccc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	691b      	ldr	r3, [r3, #16]
 800e4c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e4c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e4c8:	d10f      	bne.n	800e4ea <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	68db      	ldr	r3, [r3, #12]
 800e4d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e4d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e4d8:	d107      	bne.n	800e4ea <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800e4da:	687b      	ldr	r3, [r7, #4]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800e4e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800e4e4:	6878      	ldr	r0, [r7, #4]
 800e4e6:	f001 fbfb 	bl	800fce0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	681b      	ldr	r3, [r3, #0]
 800e4ee:	691b      	ldr	r3, [r3, #16]
 800e4f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e4f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e4f8:	d10f      	bne.n	800e51a <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	681b      	ldr	r3, [r3, #0]
 800e4fe:	68db      	ldr	r3, [r3, #12]
 800e500:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e504:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e508:	d107      	bne.n	800e51a <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800e50a:	687b      	ldr	r3, [r7, #4]
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800e512:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800e514:	6878      	ldr	r0, [r7, #4]
 800e516:	f001 fbed 	bl	800fcf4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e51a:	bf00      	nop
 800e51c:	3708      	adds	r7, #8
 800e51e:	46bd      	mov	sp, r7
 800e520:	bd80      	pop	{r7, pc}

0800e522 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 800e522:	b580      	push	{r7, lr}
 800e524:	b084      	sub	sp, #16
 800e526:	af00      	add	r7, sp, #0
 800e528:	60f8      	str	r0, [r7, #12]
 800e52a:	60b9      	str	r1, [r7, #8]
 800e52c:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e534:	2b01      	cmp	r3, #1
 800e536:	d101      	bne.n	800e53c <HAL_TIM_IC_ConfigChannel+0x1a>
 800e538:	2302      	movs	r3, #2
 800e53a:	e082      	b.n	800e642 <HAL_TIM_IC_ConfigChannel+0x120>
 800e53c:	68fb      	ldr	r3, [r7, #12]
 800e53e:	2201      	movs	r2, #1
 800e540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	2b00      	cmp	r3, #0
 800e548:	d11b      	bne.n	800e582 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	6818      	ldr	r0, [r3, #0]
 800e54e:	68bb      	ldr	r3, [r7, #8]
 800e550:	6819      	ldr	r1, [r3, #0]
 800e552:	68bb      	ldr	r3, [r7, #8]
 800e554:	685a      	ldr	r2, [r3, #4]
 800e556:	68bb      	ldr	r3, [r7, #8]
 800e558:	68db      	ldr	r3, [r3, #12]
 800e55a:	f001 f85b 	bl	800f614 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800e55e:	68fb      	ldr	r3, [r7, #12]
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	699a      	ldr	r2, [r3, #24]
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	681b      	ldr	r3, [r3, #0]
 800e568:	f022 020c 	bic.w	r2, r2, #12
 800e56c:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800e56e:	68fb      	ldr	r3, [r7, #12]
 800e570:	681b      	ldr	r3, [r3, #0]
 800e572:	6999      	ldr	r1, [r3, #24]
 800e574:	68bb      	ldr	r3, [r7, #8]
 800e576:	689a      	ldr	r2, [r3, #8]
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	430a      	orrs	r2, r1
 800e57e:	619a      	str	r2, [r3, #24]
 800e580:	e05a      	b.n	800e638 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 800e582:	687b      	ldr	r3, [r7, #4]
 800e584:	2b04      	cmp	r3, #4
 800e586:	d11c      	bne.n	800e5c2 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	6818      	ldr	r0, [r3, #0]
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	6819      	ldr	r1, [r3, #0]
 800e590:	68bb      	ldr	r3, [r7, #8]
 800e592:	685a      	ldr	r2, [r3, #4]
 800e594:	68bb      	ldr	r3, [r7, #8]
 800e596:	68db      	ldr	r3, [r3, #12]
 800e598:	f001 f8df 	bl	800f75a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800e59c:	68fb      	ldr	r3, [r7, #12]
 800e59e:	681b      	ldr	r3, [r3, #0]
 800e5a0:	699a      	ldr	r2, [r3, #24]
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	681b      	ldr	r3, [r3, #0]
 800e5a6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800e5aa:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	681b      	ldr	r3, [r3, #0]
 800e5b0:	6999      	ldr	r1, [r3, #24]
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	689b      	ldr	r3, [r3, #8]
 800e5b6:	021a      	lsls	r2, r3, #8
 800e5b8:	68fb      	ldr	r3, [r7, #12]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	430a      	orrs	r2, r1
 800e5be:	619a      	str	r2, [r3, #24]
 800e5c0:	e03a      	b.n	800e638 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 800e5c2:	687b      	ldr	r3, [r7, #4]
 800e5c4:	2b08      	cmp	r3, #8
 800e5c6:	d11b      	bne.n	800e600 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800e5c8:	68fb      	ldr	r3, [r7, #12]
 800e5ca:	6818      	ldr	r0, [r3, #0]
 800e5cc:	68bb      	ldr	r3, [r7, #8]
 800e5ce:	6819      	ldr	r1, [r3, #0]
 800e5d0:	68bb      	ldr	r3, [r7, #8]
 800e5d2:	685a      	ldr	r2, [r3, #4]
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	68db      	ldr	r3, [r3, #12]
 800e5d8:	f001 f92c 	bl	800f834 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	681b      	ldr	r3, [r3, #0]
 800e5e0:	69da      	ldr	r2, [r3, #28]
 800e5e2:	68fb      	ldr	r3, [r7, #12]
 800e5e4:	681b      	ldr	r3, [r3, #0]
 800e5e6:	f022 020c 	bic.w	r2, r2, #12
 800e5ea:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800e5ec:	68fb      	ldr	r3, [r7, #12]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	69d9      	ldr	r1, [r3, #28]
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	689a      	ldr	r2, [r3, #8]
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	430a      	orrs	r2, r1
 800e5fc:	61da      	str	r2, [r3, #28]
 800e5fe:	e01b      	b.n	800e638 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	6818      	ldr	r0, [r3, #0]
 800e604:	68bb      	ldr	r3, [r7, #8]
 800e606:	6819      	ldr	r1, [r3, #0]
 800e608:	68bb      	ldr	r3, [r7, #8]
 800e60a:	685a      	ldr	r2, [r3, #4]
 800e60c:	68bb      	ldr	r3, [r7, #8]
 800e60e:	68db      	ldr	r3, [r3, #12]
 800e610:	f001 f94c 	bl	800f8ac <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	681b      	ldr	r3, [r3, #0]
 800e618:	69da      	ldr	r2, [r3, #28]
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800e622:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	69d9      	ldr	r1, [r3, #28]
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	689b      	ldr	r3, [r3, #8]
 800e62e:	021a      	lsls	r2, r3, #8
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	681b      	ldr	r3, [r3, #0]
 800e634:	430a      	orrs	r2, r1
 800e636:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800e638:	68fb      	ldr	r3, [r7, #12]
 800e63a:	2200      	movs	r2, #0
 800e63c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e640:	2300      	movs	r3, #0
}
 800e642:	4618      	mov	r0, r3
 800e644:	3710      	adds	r7, #16
 800e646:	46bd      	mov	sp, r7
 800e648:	bd80      	pop	{r7, pc}
	...

0800e64c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800e64c:	b580      	push	{r7, lr}
 800e64e:	b084      	sub	sp, #16
 800e650:	af00      	add	r7, sp, #0
 800e652:	60f8      	str	r0, [r7, #12]
 800e654:	60b9      	str	r1, [r7, #8]
 800e656:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e65e:	2b01      	cmp	r3, #1
 800e660:	d101      	bne.n	800e666 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800e662:	2302      	movs	r3, #2
 800e664:	e0fd      	b.n	800e862 <HAL_TIM_PWM_ConfigChannel+0x216>
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	2201      	movs	r2, #1
 800e66a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2b14      	cmp	r3, #20
 800e672:	f200 80f0 	bhi.w	800e856 <HAL_TIM_PWM_ConfigChannel+0x20a>
 800e676:	a201      	add	r2, pc, #4	; (adr r2, 800e67c <HAL_TIM_PWM_ConfigChannel+0x30>)
 800e678:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e67c:	0800e6d1 	.word	0x0800e6d1
 800e680:	0800e857 	.word	0x0800e857
 800e684:	0800e857 	.word	0x0800e857
 800e688:	0800e857 	.word	0x0800e857
 800e68c:	0800e711 	.word	0x0800e711
 800e690:	0800e857 	.word	0x0800e857
 800e694:	0800e857 	.word	0x0800e857
 800e698:	0800e857 	.word	0x0800e857
 800e69c:	0800e753 	.word	0x0800e753
 800e6a0:	0800e857 	.word	0x0800e857
 800e6a4:	0800e857 	.word	0x0800e857
 800e6a8:	0800e857 	.word	0x0800e857
 800e6ac:	0800e793 	.word	0x0800e793
 800e6b0:	0800e857 	.word	0x0800e857
 800e6b4:	0800e857 	.word	0x0800e857
 800e6b8:	0800e857 	.word	0x0800e857
 800e6bc:	0800e7d5 	.word	0x0800e7d5
 800e6c0:	0800e857 	.word	0x0800e857
 800e6c4:	0800e857 	.word	0x0800e857
 800e6c8:	0800e857 	.word	0x0800e857
 800e6cc:	0800e815 	.word	0x0800e815
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	681b      	ldr	r3, [r3, #0]
 800e6d4:	68b9      	ldr	r1, [r7, #8]
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f000 fbb6 	bl	800ee48 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800e6dc:	68fb      	ldr	r3, [r7, #12]
 800e6de:	681b      	ldr	r3, [r3, #0]
 800e6e0:	699a      	ldr	r2, [r3, #24]
 800e6e2:	68fb      	ldr	r3, [r7, #12]
 800e6e4:	681b      	ldr	r3, [r3, #0]
 800e6e6:	f042 0208 	orr.w	r2, r2, #8
 800e6ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	699a      	ldr	r2, [r3, #24]
 800e6f2:	68fb      	ldr	r3, [r7, #12]
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	f022 0204 	bic.w	r2, r2, #4
 800e6fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800e6fc:	68fb      	ldr	r3, [r7, #12]
 800e6fe:	681b      	ldr	r3, [r3, #0]
 800e700:	6999      	ldr	r1, [r3, #24]
 800e702:	68bb      	ldr	r3, [r7, #8]
 800e704:	691a      	ldr	r2, [r3, #16]
 800e706:	68fb      	ldr	r3, [r7, #12]
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	430a      	orrs	r2, r1
 800e70c:	619a      	str	r2, [r3, #24]
      break;
 800e70e:	e0a3      	b.n	800e858 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	68b9      	ldr	r1, [r7, #8]
 800e716:	4618      	mov	r0, r3
 800e718:	f000 fc30 	bl	800ef7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800e71c:	68fb      	ldr	r3, [r7, #12]
 800e71e:	681b      	ldr	r3, [r3, #0]
 800e720:	699a      	ldr	r2, [r3, #24]
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	681b      	ldr	r3, [r3, #0]
 800e726:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e72a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800e72c:	68fb      	ldr	r3, [r7, #12]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	699a      	ldr	r2, [r3, #24]
 800e732:	68fb      	ldr	r3, [r7, #12]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e73a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800e73c:	68fb      	ldr	r3, [r7, #12]
 800e73e:	681b      	ldr	r3, [r3, #0]
 800e740:	6999      	ldr	r1, [r3, #24]
 800e742:	68bb      	ldr	r3, [r7, #8]
 800e744:	691b      	ldr	r3, [r3, #16]
 800e746:	021a      	lsls	r2, r3, #8
 800e748:	68fb      	ldr	r3, [r7, #12]
 800e74a:	681b      	ldr	r3, [r3, #0]
 800e74c:	430a      	orrs	r2, r1
 800e74e:	619a      	str	r2, [r3, #24]
      break;
 800e750:	e082      	b.n	800e858 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	68b9      	ldr	r1, [r7, #8]
 800e758:	4618      	mov	r0, r3
 800e75a:	f000 fca3 	bl	800f0a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800e75e:	68fb      	ldr	r3, [r7, #12]
 800e760:	681b      	ldr	r3, [r3, #0]
 800e762:	69da      	ldr	r2, [r3, #28]
 800e764:	68fb      	ldr	r3, [r7, #12]
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	f042 0208 	orr.w	r2, r2, #8
 800e76c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800e76e:	68fb      	ldr	r3, [r7, #12]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	69da      	ldr	r2, [r3, #28]
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	f022 0204 	bic.w	r2, r2, #4
 800e77c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800e77e:	68fb      	ldr	r3, [r7, #12]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	69d9      	ldr	r1, [r3, #28]
 800e784:	68bb      	ldr	r3, [r7, #8]
 800e786:	691a      	ldr	r2, [r3, #16]
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	681b      	ldr	r3, [r3, #0]
 800e78c:	430a      	orrs	r2, r1
 800e78e:	61da      	str	r2, [r3, #28]
      break;
 800e790:	e062      	b.n	800e858 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	68b9      	ldr	r1, [r7, #8]
 800e798:	4618      	mov	r0, r3
 800e79a:	f000 fd15 	bl	800f1c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800e79e:	68fb      	ldr	r3, [r7, #12]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	69da      	ldr	r2, [r3, #28]
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	681b      	ldr	r3, [r3, #0]
 800e7a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e7ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	681b      	ldr	r3, [r3, #0]
 800e7b2:	69da      	ldr	r2, [r3, #28]
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e7bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	69d9      	ldr	r1, [r3, #28]
 800e7c4:	68bb      	ldr	r3, [r7, #8]
 800e7c6:	691b      	ldr	r3, [r3, #16]
 800e7c8:	021a      	lsls	r2, r3, #8
 800e7ca:	68fb      	ldr	r3, [r7, #12]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	430a      	orrs	r2, r1
 800e7d0:	61da      	str	r2, [r3, #28]
      break;
 800e7d2:	e041      	b.n	800e858 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	681b      	ldr	r3, [r3, #0]
 800e7d8:	68b9      	ldr	r1, [r7, #8]
 800e7da:	4618      	mov	r0, r3
 800e7dc:	f000 fd88 	bl	800f2f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e7e6:	68fb      	ldr	r3, [r7, #12]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	f042 0208 	orr.w	r2, r2, #8
 800e7ee:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800e7f0:	68fb      	ldr	r3, [r7, #12]
 800e7f2:	681b      	ldr	r3, [r3, #0]
 800e7f4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	681b      	ldr	r3, [r3, #0]
 800e7fa:	f022 0204 	bic.w	r2, r2, #4
 800e7fe:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	681b      	ldr	r3, [r3, #0]
 800e804:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e806:	68bb      	ldr	r3, [r7, #8]
 800e808:	691a      	ldr	r2, [r3, #16]
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	681b      	ldr	r3, [r3, #0]
 800e80e:	430a      	orrs	r2, r1
 800e810:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800e812:	e021      	b.n	800e858 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800e814:	68fb      	ldr	r3, [r7, #12]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	68b9      	ldr	r1, [r7, #8]
 800e81a:	4618      	mov	r0, r3
 800e81c:	f000 fdd2 	bl	800f3c4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800e820:	68fb      	ldr	r3, [r7, #12]
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	681b      	ldr	r3, [r3, #0]
 800e82a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800e82e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800e830:	68fb      	ldr	r3, [r7, #12]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	681b      	ldr	r3, [r3, #0]
 800e83a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800e83e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800e840:	68fb      	ldr	r3, [r7, #12]
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800e846:	68bb      	ldr	r3, [r7, #8]
 800e848:	691b      	ldr	r3, [r3, #16]
 800e84a:	021a      	lsls	r2, r3, #8
 800e84c:	68fb      	ldr	r3, [r7, #12]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	430a      	orrs	r2, r1
 800e852:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800e854:	e000      	b.n	800e858 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 800e856:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	2200      	movs	r2, #0
 800e85c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e860:	2300      	movs	r3, #0
}
 800e862:	4618      	mov	r0, r3
 800e864:	3710      	adds	r7, #16
 800e866:	46bd      	mov	sp, r7
 800e868:	bd80      	pop	{r7, pc}
 800e86a:	bf00      	nop

0800e86c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e86c:	b580      	push	{r7, lr}
 800e86e:	b084      	sub	sp, #16
 800e870:	af00      	add	r7, sp, #0
 800e872:	6078      	str	r0, [r7, #4]
 800e874:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e87c:	2b01      	cmp	r3, #1
 800e87e:	d101      	bne.n	800e884 <HAL_TIM_ConfigClockSource+0x18>
 800e880:	2302      	movs	r3, #2
 800e882:	e0d2      	b.n	800ea2a <HAL_TIM_ConfigClockSource+0x1be>
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	2201      	movs	r2, #1
 800e888:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	2202      	movs	r2, #2
 800e890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	689b      	ldr	r3, [r3, #8]
 800e89a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800e8a2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800e8a6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e8ae:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	68fa      	ldr	r2, [r7, #12]
 800e8b6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e8b8:	683b      	ldr	r3, [r7, #0]
 800e8ba:	681b      	ldr	r3, [r3, #0]
 800e8bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8c0:	f000 80a9 	beq.w	800ea16 <HAL_TIM_ConfigClockSource+0x1aa>
 800e8c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e8c8:	d81a      	bhi.n	800e900 <HAL_TIM_ConfigClockSource+0x94>
 800e8ca:	2b30      	cmp	r3, #48	; 0x30
 800e8cc:	f000 809a 	beq.w	800ea04 <HAL_TIM_ConfigClockSource+0x198>
 800e8d0:	2b30      	cmp	r3, #48	; 0x30
 800e8d2:	d809      	bhi.n	800e8e8 <HAL_TIM_ConfigClockSource+0x7c>
 800e8d4:	2b10      	cmp	r3, #16
 800e8d6:	f000 8095 	beq.w	800ea04 <HAL_TIM_ConfigClockSource+0x198>
 800e8da:	2b20      	cmp	r3, #32
 800e8dc:	f000 8092 	beq.w	800ea04 <HAL_TIM_ConfigClockSource+0x198>
 800e8e0:	2b00      	cmp	r3, #0
 800e8e2:	f000 808f 	beq.w	800ea04 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800e8e6:	e097      	b.n	800ea18 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800e8e8:	2b50      	cmp	r3, #80	; 0x50
 800e8ea:	d05b      	beq.n	800e9a4 <HAL_TIM_ConfigClockSource+0x138>
 800e8ec:	2b50      	cmp	r3, #80	; 0x50
 800e8ee:	d802      	bhi.n	800e8f6 <HAL_TIM_ConfigClockSource+0x8a>
 800e8f0:	2b40      	cmp	r3, #64	; 0x40
 800e8f2:	d077      	beq.n	800e9e4 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800e8f4:	e090      	b.n	800ea18 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800e8f6:	2b60      	cmp	r3, #96	; 0x60
 800e8f8:	d064      	beq.n	800e9c4 <HAL_TIM_ConfigClockSource+0x158>
 800e8fa:	2b70      	cmp	r3, #112	; 0x70
 800e8fc:	d028      	beq.n	800e950 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800e8fe:	e08b      	b.n	800ea18 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800e900:	4a4c      	ldr	r2, [pc, #304]	; (800ea34 <HAL_TIM_ConfigClockSource+0x1c8>)
 800e902:	4293      	cmp	r3, r2
 800e904:	d07e      	beq.n	800ea04 <HAL_TIM_ConfigClockSource+0x198>
 800e906:	4a4b      	ldr	r2, [pc, #300]	; (800ea34 <HAL_TIM_ConfigClockSource+0x1c8>)
 800e908:	4293      	cmp	r3, r2
 800e90a:	d810      	bhi.n	800e92e <HAL_TIM_ConfigClockSource+0xc2>
 800e90c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e910:	d078      	beq.n	800ea04 <HAL_TIM_ConfigClockSource+0x198>
 800e912:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e916:	d803      	bhi.n	800e920 <HAL_TIM_ConfigClockSource+0xb4>
 800e918:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e91c:	d02f      	beq.n	800e97e <HAL_TIM_ConfigClockSource+0x112>
      break;
 800e91e:	e07b      	b.n	800ea18 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800e920:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e924:	d06e      	beq.n	800ea04 <HAL_TIM_ConfigClockSource+0x198>
 800e926:	4a44      	ldr	r2, [pc, #272]	; (800ea38 <HAL_TIM_ConfigClockSource+0x1cc>)
 800e928:	4293      	cmp	r3, r2
 800e92a:	d06b      	beq.n	800ea04 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800e92c:	e074      	b.n	800ea18 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800e92e:	4a43      	ldr	r2, [pc, #268]	; (800ea3c <HAL_TIM_ConfigClockSource+0x1d0>)
 800e930:	4293      	cmp	r3, r2
 800e932:	d067      	beq.n	800ea04 <HAL_TIM_ConfigClockSource+0x198>
 800e934:	4a41      	ldr	r2, [pc, #260]	; (800ea3c <HAL_TIM_ConfigClockSource+0x1d0>)
 800e936:	4293      	cmp	r3, r2
 800e938:	d803      	bhi.n	800e942 <HAL_TIM_ConfigClockSource+0xd6>
 800e93a:	4a41      	ldr	r2, [pc, #260]	; (800ea40 <HAL_TIM_ConfigClockSource+0x1d4>)
 800e93c:	4293      	cmp	r3, r2
 800e93e:	d061      	beq.n	800ea04 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800e940:	e06a      	b.n	800ea18 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800e942:	4a40      	ldr	r2, [pc, #256]	; (800ea44 <HAL_TIM_ConfigClockSource+0x1d8>)
 800e944:	4293      	cmp	r3, r2
 800e946:	d05d      	beq.n	800ea04 <HAL_TIM_ConfigClockSource+0x198>
 800e948:	4a3f      	ldr	r2, [pc, #252]	; (800ea48 <HAL_TIM_ConfigClockSource+0x1dc>)
 800e94a:	4293      	cmp	r3, r2
 800e94c:	d05a      	beq.n	800ea04 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800e94e:	e063      	b.n	800ea18 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6818      	ldr	r0, [r3, #0]
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	6899      	ldr	r1, [r3, #8]
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	685a      	ldr	r2, [r3, #4]
 800e95c:	683b      	ldr	r3, [r7, #0]
 800e95e:	68db      	ldr	r3, [r3, #12]
 800e960:	f000 fffe 	bl	800f960 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	689b      	ldr	r3, [r3, #8]
 800e96a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e972:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	681b      	ldr	r3, [r3, #0]
 800e978:	68fa      	ldr	r2, [r7, #12]
 800e97a:	609a      	str	r2, [r3, #8]
      break;
 800e97c:	e04c      	b.n	800ea18 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	6818      	ldr	r0, [r3, #0]
 800e982:	683b      	ldr	r3, [r7, #0]
 800e984:	6899      	ldr	r1, [r3, #8]
 800e986:	683b      	ldr	r3, [r7, #0]
 800e988:	685a      	ldr	r2, [r3, #4]
 800e98a:	683b      	ldr	r3, [r7, #0]
 800e98c:	68db      	ldr	r3, [r3, #12]
 800e98e:	f000 ffe7 	bl	800f960 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	689a      	ldr	r2, [r3, #8]
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e9a0:	609a      	str	r2, [r3, #8]
      break;
 800e9a2:	e039      	b.n	800ea18 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	6818      	ldr	r0, [r3, #0]
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	6859      	ldr	r1, [r3, #4]
 800e9ac:	683b      	ldr	r3, [r7, #0]
 800e9ae:	68db      	ldr	r3, [r3, #12]
 800e9b0:	461a      	mov	r2, r3
 800e9b2:	f000 fea3 	bl	800f6fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	2150      	movs	r1, #80	; 0x50
 800e9bc:	4618      	mov	r0, r3
 800e9be:	f000 ffb2 	bl	800f926 <TIM_ITRx_SetConfig>
      break;
 800e9c2:	e029      	b.n	800ea18 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6818      	ldr	r0, [r3, #0]
 800e9c8:	683b      	ldr	r3, [r7, #0]
 800e9ca:	6859      	ldr	r1, [r3, #4]
 800e9cc:	683b      	ldr	r3, [r7, #0]
 800e9ce:	68db      	ldr	r3, [r3, #12]
 800e9d0:	461a      	mov	r2, r3
 800e9d2:	f000 feff 	bl	800f7d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	681b      	ldr	r3, [r3, #0]
 800e9da:	2160      	movs	r1, #96	; 0x60
 800e9dc:	4618      	mov	r0, r3
 800e9de:	f000 ffa2 	bl	800f926 <TIM_ITRx_SetConfig>
      break;
 800e9e2:	e019      	b.n	800ea18 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	6818      	ldr	r0, [r3, #0]
 800e9e8:	683b      	ldr	r3, [r7, #0]
 800e9ea:	6859      	ldr	r1, [r3, #4]
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	68db      	ldr	r3, [r3, #12]
 800e9f0:	461a      	mov	r2, r3
 800e9f2:	f000 fe83 	bl	800f6fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	2140      	movs	r1, #64	; 0x40
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f000 ff92 	bl	800f926 <TIM_ITRx_SetConfig>
      break;
 800ea02:	e009      	b.n	800ea18 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	681a      	ldr	r2, [r3, #0]
 800ea08:	683b      	ldr	r3, [r7, #0]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	4619      	mov	r1, r3
 800ea0e:	4610      	mov	r0, r2
 800ea10:	f000 ff89 	bl	800f926 <TIM_ITRx_SetConfig>
      break;
 800ea14:	e000      	b.n	800ea18 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800ea16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	2201      	movs	r2, #1
 800ea1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	2200      	movs	r2, #0
 800ea24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ea28:	2300      	movs	r3, #0
}
 800ea2a:	4618      	mov	r0, r3
 800ea2c:	3710      	adds	r7, #16
 800ea2e:	46bd      	mov	sp, r7
 800ea30:	bd80      	pop	{r7, pc}
 800ea32:	bf00      	nop
 800ea34:	00100030 	.word	0x00100030
 800ea38:	00100020 	.word	0x00100020
 800ea3c:	00100050 	.word	0x00100050
 800ea40:	00100040 	.word	0x00100040
 800ea44:	00100060 	.word	0x00100060
 800ea48:	00100070 	.word	0x00100070

0800ea4c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ea4c:	b580      	push	{r7, lr}
 800ea4e:	b082      	sub	sp, #8
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	6078      	str	r0, [r7, #4]
 800ea54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ea5c:	2b01      	cmp	r3, #1
 800ea5e:	d101      	bne.n	800ea64 <HAL_TIM_SlaveConfigSynchro+0x18>
 800ea60:	2302      	movs	r3, #2
 800ea62:	e031      	b.n	800eac8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2201      	movs	r2, #1
 800ea68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	2202      	movs	r2, #2
 800ea70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ea74:	6839      	ldr	r1, [r7, #0]
 800ea76:	6878      	ldr	r0, [r7, #4]
 800ea78:	f000 fd10 	bl	800f49c <TIM_SlaveTimer_SetConfig>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	d009      	beq.n	800ea96 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2201      	movs	r2, #1
 800ea86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	2200      	movs	r2, #0
 800ea8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800ea92:	2301      	movs	r3, #1
 800ea94:	e018      	b.n	800eac8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	68da      	ldr	r2, [r3, #12]
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800eaa4:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800eaa6:	687b      	ldr	r3, [r7, #4]
 800eaa8:	681b      	ldr	r3, [r3, #0]
 800eaaa:	68da      	ldr	r2, [r3, #12]
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800eab4:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2201      	movs	r2, #1
 800eaba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2200      	movs	r2, #0
 800eac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800eac6:	2300      	movs	r3, #0
}
 800eac8:	4618      	mov	r0, r3
 800eaca:	3708      	adds	r7, #8
 800eacc:	46bd      	mov	sp, r7
 800eace:	bd80      	pop	{r7, pc}

0800ead0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ead0:	b480      	push	{r7}
 800ead2:	b083      	sub	sp, #12
 800ead4:	af00      	add	r7, sp, #0
 800ead6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800ead8:	bf00      	nop
 800eada:	370c      	adds	r7, #12
 800eadc:	46bd      	mov	sp, r7
 800eade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae2:	4770      	bx	lr

0800eae4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800eae4:	b480      	push	{r7}
 800eae6:	b083      	sub	sp, #12
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800eaec:	bf00      	nop
 800eaee:	370c      	adds	r7, #12
 800eaf0:	46bd      	mov	sp, r7
 800eaf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf6:	4770      	bx	lr

0800eaf8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800eaf8:	b480      	push	{r7}
 800eafa:	b083      	sub	sp, #12
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800eb00:	bf00      	nop
 800eb02:	370c      	adds	r7, #12
 800eb04:	46bd      	mov	sp, r7
 800eb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb0a:	4770      	bx	lr

0800eb0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b083      	sub	sp, #12
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800eb14:	bf00      	nop
 800eb16:	370c      	adds	r7, #12
 800eb18:	46bd      	mov	sp, r7
 800eb1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb1e:	4770      	bx	lr

0800eb20 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800eb20:	b480      	push	{r7}
 800eb22:	b083      	sub	sp, #12
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800eb28:	bf00      	nop
 800eb2a:	370c      	adds	r7, #12
 800eb2c:	46bd      	mov	sp, r7
 800eb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb32:	4770      	bx	lr

0800eb34 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b084      	sub	sp, #16
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb40:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb46:	687a      	ldr	r2, [r7, #4]
 800eb48:	429a      	cmp	r2, r3
 800eb4a:	d107      	bne.n	800eb5c <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	2201      	movs	r2, #1
 800eb50:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	2201      	movs	r2, #1
 800eb56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800eb5a:	e02a      	b.n	800ebb2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb60:	687a      	ldr	r2, [r7, #4]
 800eb62:	429a      	cmp	r2, r3
 800eb64:	d107      	bne.n	800eb76 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	2202      	movs	r2, #2
 800eb6a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	2201      	movs	r2, #1
 800eb70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800eb74:	e01d      	b.n	800ebb2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800eb76:	68fb      	ldr	r3, [r7, #12]
 800eb78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eb7a:	687a      	ldr	r2, [r7, #4]
 800eb7c:	429a      	cmp	r2, r3
 800eb7e:	d107      	bne.n	800eb90 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	2204      	movs	r2, #4
 800eb84:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800eb86:	68fb      	ldr	r3, [r7, #12]
 800eb88:	2201      	movs	r2, #1
 800eb8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800eb8e:	e010      	b.n	800ebb2 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eb94:	687a      	ldr	r2, [r7, #4]
 800eb96:	429a      	cmp	r2, r3
 800eb98:	d107      	bne.n	800ebaa <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	2208      	movs	r2, #8
 800eb9e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	2201      	movs	r2, #1
 800eba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800eba8:	e003      	b.n	800ebb2 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 800ebaa:	68fb      	ldr	r3, [r7, #12]
 800ebac:	2201      	movs	r2, #1
 800ebae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800ebb2:	68f8      	ldr	r0, [r7, #12]
 800ebb4:	f7ff ffb4 	bl	800eb20 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2200      	movs	r2, #0
 800ebbc:	771a      	strb	r2, [r3, #28]
}
 800ebbe:	bf00      	nop
 800ebc0:	3710      	adds	r7, #16
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}

0800ebc6 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 800ebc6:	b580      	push	{r7, lr}
 800ebc8:	b084      	sub	sp, #16
 800ebca:	af00      	add	r7, sp, #0
 800ebcc:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebd2:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ebd8:	687a      	ldr	r2, [r7, #4]
 800ebda:	429a      	cmp	r2, r3
 800ebdc:	d10f      	bne.n	800ebfe <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	2201      	movs	r2, #1
 800ebe2:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	69db      	ldr	r3, [r3, #28]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d146      	bne.n	800ec7a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ebec:	68fb      	ldr	r3, [r7, #12]
 800ebee:	2201      	movs	r2, #1
 800ebf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	2201      	movs	r2, #1
 800ebf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ebfc:	e03d      	b.n	800ec7a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec02:	687a      	ldr	r2, [r7, #4]
 800ec04:	429a      	cmp	r2, r3
 800ec06:	d10f      	bne.n	800ec28 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	2202      	movs	r2, #2
 800ec0c:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	69db      	ldr	r3, [r3, #28]
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d131      	bne.n	800ec7a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	2201      	movs	r2, #1
 800ec1a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800ec1e:	68fb      	ldr	r3, [r7, #12]
 800ec20:	2201      	movs	r2, #1
 800ec22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ec26:	e028      	b.n	800ec7a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ec28:	68fb      	ldr	r3, [r7, #12]
 800ec2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec2c:	687a      	ldr	r2, [r7, #4]
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	d10f      	bne.n	800ec52 <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	2204      	movs	r2, #4
 800ec36:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	69db      	ldr	r3, [r3, #28]
 800ec3c:	2b00      	cmp	r3, #0
 800ec3e:	d11c      	bne.n	800ec7a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ec40:	68fb      	ldr	r3, [r7, #12]
 800ec42:	2201      	movs	r2, #1
 800ec44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800ec48:	68fb      	ldr	r3, [r7, #12]
 800ec4a:	2201      	movs	r2, #1
 800ec4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800ec50:	e013      	b.n	800ec7a <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec56:	687a      	ldr	r2, [r7, #4]
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	d10e      	bne.n	800ec7a <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	2208      	movs	r2, #8
 800ec60:	771a      	strb	r2, [r3, #28]
    
    if (hdma->Init.Mode == DMA_NORMAL)
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	69db      	ldr	r3, [r3, #28]
 800ec66:	2b00      	cmp	r3, #0
 800ec68:	d107      	bne.n	800ec7a <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	2201      	movs	r2, #1
 800ec6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	2201      	movs	r2, #1
 800ec76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 800ec7a:	68f8      	ldr	r0, [r7, #12]
 800ec7c:	f7f7 fbe2 	bl	8006444 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	2200      	movs	r2, #0
 800ec84:	771a      	strb	r2, [r3, #28]
}
 800ec86:	bf00      	nop
 800ec88:	3710      	adds	r7, #16
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}

0800ec8e <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ec8e:	b580      	push	{r7, lr}
 800ec90:	b084      	sub	sp, #16
 800ec92:	af00      	add	r7, sp, #0
 800ec94:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec9a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eca0:	687a      	ldr	r2, [r7, #4]
 800eca2:	429a      	cmp	r2, r3
 800eca4:	d103      	bne.n	800ecae <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	2201      	movs	r2, #1
 800ecaa:	771a      	strb	r2, [r3, #28]
 800ecac:	e019      	b.n	800ece2 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800ecae:	68fb      	ldr	r3, [r7, #12]
 800ecb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecb2:	687a      	ldr	r2, [r7, #4]
 800ecb4:	429a      	cmp	r2, r3
 800ecb6:	d103      	bne.n	800ecc0 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ecb8:	68fb      	ldr	r3, [r7, #12]
 800ecba:	2202      	movs	r2, #2
 800ecbc:	771a      	strb	r2, [r3, #28]
 800ecbe:	e010      	b.n	800ece2 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecc4:	687a      	ldr	r2, [r7, #4]
 800ecc6:	429a      	cmp	r2, r3
 800ecc8:	d103      	bne.n	800ecd2 <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	2204      	movs	r2, #4
 800ecce:	771a      	strb	r2, [r3, #28]
 800ecd0:	e007      	b.n	800ece2 <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecd6:	687a      	ldr	r2, [r7, #4]
 800ecd8:	429a      	cmp	r2, r3
 800ecda:	d102      	bne.n	800ece2 <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	2208      	movs	r2, #8
 800ece0:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 800ece2:	68f8      	ldr	r0, [r7, #12]
 800ece4:	f7f7 fbd0 	bl	8006488 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ece8:	68fb      	ldr	r3, [r7, #12]
 800ecea:	2200      	movs	r2, #0
 800ecec:	771a      	strb	r2, [r3, #28]
}
 800ecee:	bf00      	nop
 800ecf0:	3710      	adds	r7, #16
 800ecf2:	46bd      	mov	sp, r7
 800ecf4:	bd80      	pop	{r7, pc}
	...

0800ecf8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ecf8:	b480      	push	{r7}
 800ecfa:	b085      	sub	sp, #20
 800ecfc:	af00      	add	r7, sp, #0
 800ecfe:	6078      	str	r0, [r7, #4]
 800ed00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	4a46      	ldr	r2, [pc, #280]	; (800ee24 <TIM_Base_SetConfig+0x12c>)
 800ed0c:	4293      	cmp	r3, r2
 800ed0e:	d017      	beq.n	800ed40 <TIM_Base_SetConfig+0x48>
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed16:	d013      	beq.n	800ed40 <TIM_Base_SetConfig+0x48>
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	4a43      	ldr	r2, [pc, #268]	; (800ee28 <TIM_Base_SetConfig+0x130>)
 800ed1c:	4293      	cmp	r3, r2
 800ed1e:	d00f      	beq.n	800ed40 <TIM_Base_SetConfig+0x48>
 800ed20:	687b      	ldr	r3, [r7, #4]
 800ed22:	4a42      	ldr	r2, [pc, #264]	; (800ee2c <TIM_Base_SetConfig+0x134>)
 800ed24:	4293      	cmp	r3, r2
 800ed26:	d00b      	beq.n	800ed40 <TIM_Base_SetConfig+0x48>
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	4a41      	ldr	r2, [pc, #260]	; (800ee30 <TIM_Base_SetConfig+0x138>)
 800ed2c:	4293      	cmp	r3, r2
 800ed2e:	d007      	beq.n	800ed40 <TIM_Base_SetConfig+0x48>
 800ed30:	687b      	ldr	r3, [r7, #4]
 800ed32:	4a40      	ldr	r2, [pc, #256]	; (800ee34 <TIM_Base_SetConfig+0x13c>)
 800ed34:	4293      	cmp	r3, r2
 800ed36:	d003      	beq.n	800ed40 <TIM_Base_SetConfig+0x48>
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	4a3f      	ldr	r2, [pc, #252]	; (800ee38 <TIM_Base_SetConfig+0x140>)
 800ed3c:	4293      	cmp	r3, r2
 800ed3e:	d108      	bne.n	800ed52 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed46:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ed48:	683b      	ldr	r3, [r7, #0]
 800ed4a:	685b      	ldr	r3, [r3, #4]
 800ed4c:	68fa      	ldr	r2, [r7, #12]
 800ed4e:	4313      	orrs	r3, r2
 800ed50:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	4a33      	ldr	r2, [pc, #204]	; (800ee24 <TIM_Base_SetConfig+0x12c>)
 800ed56:	4293      	cmp	r3, r2
 800ed58:	d023      	beq.n	800eda2 <TIM_Base_SetConfig+0xaa>
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed60:	d01f      	beq.n	800eda2 <TIM_Base_SetConfig+0xaa>
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	4a30      	ldr	r2, [pc, #192]	; (800ee28 <TIM_Base_SetConfig+0x130>)
 800ed66:	4293      	cmp	r3, r2
 800ed68:	d01b      	beq.n	800eda2 <TIM_Base_SetConfig+0xaa>
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	4a2f      	ldr	r2, [pc, #188]	; (800ee2c <TIM_Base_SetConfig+0x134>)
 800ed6e:	4293      	cmp	r3, r2
 800ed70:	d017      	beq.n	800eda2 <TIM_Base_SetConfig+0xaa>
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	4a2e      	ldr	r2, [pc, #184]	; (800ee30 <TIM_Base_SetConfig+0x138>)
 800ed76:	4293      	cmp	r3, r2
 800ed78:	d013      	beq.n	800eda2 <TIM_Base_SetConfig+0xaa>
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	4a2d      	ldr	r2, [pc, #180]	; (800ee34 <TIM_Base_SetConfig+0x13c>)
 800ed7e:	4293      	cmp	r3, r2
 800ed80:	d00f      	beq.n	800eda2 <TIM_Base_SetConfig+0xaa>
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	4a2d      	ldr	r2, [pc, #180]	; (800ee3c <TIM_Base_SetConfig+0x144>)
 800ed86:	4293      	cmp	r3, r2
 800ed88:	d00b      	beq.n	800eda2 <TIM_Base_SetConfig+0xaa>
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	4a2c      	ldr	r2, [pc, #176]	; (800ee40 <TIM_Base_SetConfig+0x148>)
 800ed8e:	4293      	cmp	r3, r2
 800ed90:	d007      	beq.n	800eda2 <TIM_Base_SetConfig+0xaa>
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	4a2b      	ldr	r2, [pc, #172]	; (800ee44 <TIM_Base_SetConfig+0x14c>)
 800ed96:	4293      	cmp	r3, r2
 800ed98:	d003      	beq.n	800eda2 <TIM_Base_SetConfig+0xaa>
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	4a26      	ldr	r2, [pc, #152]	; (800ee38 <TIM_Base_SetConfig+0x140>)
 800ed9e:	4293      	cmp	r3, r2
 800eda0:	d108      	bne.n	800edb4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800eda2:	68fb      	ldr	r3, [r7, #12]
 800eda4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800eda8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800edaa:	683b      	ldr	r3, [r7, #0]
 800edac:	68db      	ldr	r3, [r3, #12]
 800edae:	68fa      	ldr	r2, [r7, #12]
 800edb0:	4313      	orrs	r3, r2
 800edb2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800edb4:	68fb      	ldr	r3, [r7, #12]
 800edb6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800edba:	683b      	ldr	r3, [r7, #0]
 800edbc:	695b      	ldr	r3, [r3, #20]
 800edbe:	4313      	orrs	r3, r2
 800edc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	68fa      	ldr	r2, [r7, #12]
 800edc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800edc8:	683b      	ldr	r3, [r7, #0]
 800edca:	689a      	ldr	r2, [r3, #8]
 800edcc:	687b      	ldr	r3, [r7, #4]
 800edce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	681a      	ldr	r2, [r3, #0]
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	4a12      	ldr	r2, [pc, #72]	; (800ee24 <TIM_Base_SetConfig+0x12c>)
 800eddc:	4293      	cmp	r3, r2
 800edde:	d013      	beq.n	800ee08 <TIM_Base_SetConfig+0x110>
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	4a14      	ldr	r2, [pc, #80]	; (800ee34 <TIM_Base_SetConfig+0x13c>)
 800ede4:	4293      	cmp	r3, r2
 800ede6:	d00f      	beq.n	800ee08 <TIM_Base_SetConfig+0x110>
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	4a14      	ldr	r2, [pc, #80]	; (800ee3c <TIM_Base_SetConfig+0x144>)
 800edec:	4293      	cmp	r3, r2
 800edee:	d00b      	beq.n	800ee08 <TIM_Base_SetConfig+0x110>
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	4a13      	ldr	r2, [pc, #76]	; (800ee40 <TIM_Base_SetConfig+0x148>)
 800edf4:	4293      	cmp	r3, r2
 800edf6:	d007      	beq.n	800ee08 <TIM_Base_SetConfig+0x110>
 800edf8:	687b      	ldr	r3, [r7, #4]
 800edfa:	4a12      	ldr	r2, [pc, #72]	; (800ee44 <TIM_Base_SetConfig+0x14c>)
 800edfc:	4293      	cmp	r3, r2
 800edfe:	d003      	beq.n	800ee08 <TIM_Base_SetConfig+0x110>
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	4a0d      	ldr	r2, [pc, #52]	; (800ee38 <TIM_Base_SetConfig+0x140>)
 800ee04:	4293      	cmp	r3, r2
 800ee06:	d103      	bne.n	800ee10 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ee08:	683b      	ldr	r3, [r7, #0]
 800ee0a:	691a      	ldr	r2, [r3, #16]
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	2201      	movs	r2, #1
 800ee14:	615a      	str	r2, [r3, #20]
}
 800ee16:	bf00      	nop
 800ee18:	3714      	adds	r7, #20
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee20:	4770      	bx	lr
 800ee22:	bf00      	nop
 800ee24:	40012c00 	.word	0x40012c00
 800ee28:	40000400 	.word	0x40000400
 800ee2c:	40000800 	.word	0x40000800
 800ee30:	40000c00 	.word	0x40000c00
 800ee34:	40013400 	.word	0x40013400
 800ee38:	40015000 	.word	0x40015000
 800ee3c:	40014000 	.word	0x40014000
 800ee40:	40014400 	.word	0x40014400
 800ee44:	40014800 	.word	0x40014800

0800ee48 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ee48:	b480      	push	{r7}
 800ee4a:	b087      	sub	sp, #28
 800ee4c:	af00      	add	r7, sp, #0
 800ee4e:	6078      	str	r0, [r7, #4]
 800ee50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	6a1b      	ldr	r3, [r3, #32]
 800ee56:	f023 0201 	bic.w	r2, r3, #1
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6a1b      	ldr	r3, [r3, #32]
 800ee62:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ee64:	687b      	ldr	r3, [r7, #4]
 800ee66:	685b      	ldr	r3, [r3, #4]
 800ee68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ee6a:	687b      	ldr	r3, [r7, #4]
 800ee6c:	699b      	ldr	r3, [r3, #24]
 800ee6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ee70:	68fb      	ldr	r3, [r7, #12]
 800ee72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ee76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ee7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	f023 0303 	bic.w	r3, r3, #3
 800ee82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ee84:	683b      	ldr	r3, [r7, #0]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	68fa      	ldr	r2, [r7, #12]
 800ee8a:	4313      	orrs	r3, r2
 800ee8c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ee8e:	697b      	ldr	r3, [r7, #20]
 800ee90:	f023 0302 	bic.w	r3, r3, #2
 800ee94:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ee96:	683b      	ldr	r3, [r7, #0]
 800ee98:	689b      	ldr	r3, [r3, #8]
 800ee9a:	697a      	ldr	r2, [r7, #20]
 800ee9c:	4313      	orrs	r3, r2
 800ee9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	4a30      	ldr	r2, [pc, #192]	; (800ef64 <TIM_OC1_SetConfig+0x11c>)
 800eea4:	4293      	cmp	r3, r2
 800eea6:	d013      	beq.n	800eed0 <TIM_OC1_SetConfig+0x88>
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	4a2f      	ldr	r2, [pc, #188]	; (800ef68 <TIM_OC1_SetConfig+0x120>)
 800eeac:	4293      	cmp	r3, r2
 800eeae:	d00f      	beq.n	800eed0 <TIM_OC1_SetConfig+0x88>
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	4a2e      	ldr	r2, [pc, #184]	; (800ef6c <TIM_OC1_SetConfig+0x124>)
 800eeb4:	4293      	cmp	r3, r2
 800eeb6:	d00b      	beq.n	800eed0 <TIM_OC1_SetConfig+0x88>
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	4a2d      	ldr	r2, [pc, #180]	; (800ef70 <TIM_OC1_SetConfig+0x128>)
 800eebc:	4293      	cmp	r3, r2
 800eebe:	d007      	beq.n	800eed0 <TIM_OC1_SetConfig+0x88>
 800eec0:	687b      	ldr	r3, [r7, #4]
 800eec2:	4a2c      	ldr	r2, [pc, #176]	; (800ef74 <TIM_OC1_SetConfig+0x12c>)
 800eec4:	4293      	cmp	r3, r2
 800eec6:	d003      	beq.n	800eed0 <TIM_OC1_SetConfig+0x88>
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	4a2b      	ldr	r2, [pc, #172]	; (800ef78 <TIM_OC1_SetConfig+0x130>)
 800eecc:	4293      	cmp	r3, r2
 800eece:	d10c      	bne.n	800eeea <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800eed0:	697b      	ldr	r3, [r7, #20]
 800eed2:	f023 0308 	bic.w	r3, r3, #8
 800eed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800eed8:	683b      	ldr	r3, [r7, #0]
 800eeda:	68db      	ldr	r3, [r3, #12]
 800eedc:	697a      	ldr	r2, [r7, #20]
 800eede:	4313      	orrs	r3, r2
 800eee0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800eee2:	697b      	ldr	r3, [r7, #20]
 800eee4:	f023 0304 	bic.w	r3, r3, #4
 800eee8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	4a1d      	ldr	r2, [pc, #116]	; (800ef64 <TIM_OC1_SetConfig+0x11c>)
 800eeee:	4293      	cmp	r3, r2
 800eef0:	d013      	beq.n	800ef1a <TIM_OC1_SetConfig+0xd2>
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	4a1c      	ldr	r2, [pc, #112]	; (800ef68 <TIM_OC1_SetConfig+0x120>)
 800eef6:	4293      	cmp	r3, r2
 800eef8:	d00f      	beq.n	800ef1a <TIM_OC1_SetConfig+0xd2>
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	4a1b      	ldr	r2, [pc, #108]	; (800ef6c <TIM_OC1_SetConfig+0x124>)
 800eefe:	4293      	cmp	r3, r2
 800ef00:	d00b      	beq.n	800ef1a <TIM_OC1_SetConfig+0xd2>
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	4a1a      	ldr	r2, [pc, #104]	; (800ef70 <TIM_OC1_SetConfig+0x128>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d007      	beq.n	800ef1a <TIM_OC1_SetConfig+0xd2>
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	4a19      	ldr	r2, [pc, #100]	; (800ef74 <TIM_OC1_SetConfig+0x12c>)
 800ef0e:	4293      	cmp	r3, r2
 800ef10:	d003      	beq.n	800ef1a <TIM_OC1_SetConfig+0xd2>
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	4a18      	ldr	r2, [pc, #96]	; (800ef78 <TIM_OC1_SetConfig+0x130>)
 800ef16:	4293      	cmp	r3, r2
 800ef18:	d111      	bne.n	800ef3e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ef1a:	693b      	ldr	r3, [r7, #16]
 800ef1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ef20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ef22:	693b      	ldr	r3, [r7, #16]
 800ef24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ef28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ef2a:	683b      	ldr	r3, [r7, #0]
 800ef2c:	695b      	ldr	r3, [r3, #20]
 800ef2e:	693a      	ldr	r2, [r7, #16]
 800ef30:	4313      	orrs	r3, r2
 800ef32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ef34:	683b      	ldr	r3, [r7, #0]
 800ef36:	699b      	ldr	r3, [r3, #24]
 800ef38:	693a      	ldr	r2, [r7, #16]
 800ef3a:	4313      	orrs	r3, r2
 800ef3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	693a      	ldr	r2, [r7, #16]
 800ef42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	68fa      	ldr	r2, [r7, #12]
 800ef48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ef4a:	683b      	ldr	r3, [r7, #0]
 800ef4c:	685a      	ldr	r2, [r3, #4]
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	697a      	ldr	r2, [r7, #20]
 800ef56:	621a      	str	r2, [r3, #32]
}
 800ef58:	bf00      	nop
 800ef5a:	371c      	adds	r7, #28
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef62:	4770      	bx	lr
 800ef64:	40012c00 	.word	0x40012c00
 800ef68:	40013400 	.word	0x40013400
 800ef6c:	40014000 	.word	0x40014000
 800ef70:	40014400 	.word	0x40014400
 800ef74:	40014800 	.word	0x40014800
 800ef78:	40015000 	.word	0x40015000

0800ef7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ef7c:	b480      	push	{r7}
 800ef7e:	b087      	sub	sp, #28
 800ef80:	af00      	add	r7, sp, #0
 800ef82:	6078      	str	r0, [r7, #4]
 800ef84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ef86:	687b      	ldr	r3, [r7, #4]
 800ef88:	6a1b      	ldr	r3, [r3, #32]
 800ef8a:	f023 0210 	bic.w	r2, r3, #16
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	6a1b      	ldr	r3, [r3, #32]
 800ef96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	685b      	ldr	r3, [r3, #4]
 800ef9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	699b      	ldr	r3, [r3, #24]
 800efa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800efaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800efae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800efb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	681b      	ldr	r3, [r3, #0]
 800efbc:	021b      	lsls	r3, r3, #8
 800efbe:	68fa      	ldr	r2, [r7, #12]
 800efc0:	4313      	orrs	r3, r2
 800efc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800efc4:	697b      	ldr	r3, [r7, #20]
 800efc6:	f023 0320 	bic.w	r3, r3, #32
 800efca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	689b      	ldr	r3, [r3, #8]
 800efd0:	011b      	lsls	r3, r3, #4
 800efd2:	697a      	ldr	r2, [r7, #20]
 800efd4:	4313      	orrs	r3, r2
 800efd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	4a2c      	ldr	r2, [pc, #176]	; (800f08c <TIM_OC2_SetConfig+0x110>)
 800efdc:	4293      	cmp	r3, r2
 800efde:	d007      	beq.n	800eff0 <TIM_OC2_SetConfig+0x74>
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	4a2b      	ldr	r2, [pc, #172]	; (800f090 <TIM_OC2_SetConfig+0x114>)
 800efe4:	4293      	cmp	r3, r2
 800efe6:	d003      	beq.n	800eff0 <TIM_OC2_SetConfig+0x74>
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	4a2a      	ldr	r2, [pc, #168]	; (800f094 <TIM_OC2_SetConfig+0x118>)
 800efec:	4293      	cmp	r3, r2
 800efee:	d10d      	bne.n	800f00c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800eff0:	697b      	ldr	r3, [r7, #20]
 800eff2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800eff6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	68db      	ldr	r3, [r3, #12]
 800effc:	011b      	lsls	r3, r3, #4
 800effe:	697a      	ldr	r2, [r7, #20]
 800f000:	4313      	orrs	r3, r2
 800f002:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800f004:	697b      	ldr	r3, [r7, #20]
 800f006:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f00a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	4a1f      	ldr	r2, [pc, #124]	; (800f08c <TIM_OC2_SetConfig+0x110>)
 800f010:	4293      	cmp	r3, r2
 800f012:	d013      	beq.n	800f03c <TIM_OC2_SetConfig+0xc0>
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	4a1e      	ldr	r2, [pc, #120]	; (800f090 <TIM_OC2_SetConfig+0x114>)
 800f018:	4293      	cmp	r3, r2
 800f01a:	d00f      	beq.n	800f03c <TIM_OC2_SetConfig+0xc0>
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	4a1e      	ldr	r2, [pc, #120]	; (800f098 <TIM_OC2_SetConfig+0x11c>)
 800f020:	4293      	cmp	r3, r2
 800f022:	d00b      	beq.n	800f03c <TIM_OC2_SetConfig+0xc0>
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	4a1d      	ldr	r2, [pc, #116]	; (800f09c <TIM_OC2_SetConfig+0x120>)
 800f028:	4293      	cmp	r3, r2
 800f02a:	d007      	beq.n	800f03c <TIM_OC2_SetConfig+0xc0>
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	4a1c      	ldr	r2, [pc, #112]	; (800f0a0 <TIM_OC2_SetConfig+0x124>)
 800f030:	4293      	cmp	r3, r2
 800f032:	d003      	beq.n	800f03c <TIM_OC2_SetConfig+0xc0>
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	4a17      	ldr	r2, [pc, #92]	; (800f094 <TIM_OC2_SetConfig+0x118>)
 800f038:	4293      	cmp	r3, r2
 800f03a:	d113      	bne.n	800f064 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800f03c:	693b      	ldr	r3, [r7, #16]
 800f03e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f042:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800f044:	693b      	ldr	r3, [r7, #16]
 800f046:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f04a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	695b      	ldr	r3, [r3, #20]
 800f050:	009b      	lsls	r3, r3, #2
 800f052:	693a      	ldr	r2, [r7, #16]
 800f054:	4313      	orrs	r3, r2
 800f056:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800f058:	683b      	ldr	r3, [r7, #0]
 800f05a:	699b      	ldr	r3, [r3, #24]
 800f05c:	009b      	lsls	r3, r3, #2
 800f05e:	693a      	ldr	r2, [r7, #16]
 800f060:	4313      	orrs	r3, r2
 800f062:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	693a      	ldr	r2, [r7, #16]
 800f068:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	68fa      	ldr	r2, [r7, #12]
 800f06e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800f070:	683b      	ldr	r3, [r7, #0]
 800f072:	685a      	ldr	r2, [r3, #4]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	697a      	ldr	r2, [r7, #20]
 800f07c:	621a      	str	r2, [r3, #32]
}
 800f07e:	bf00      	nop
 800f080:	371c      	adds	r7, #28
 800f082:	46bd      	mov	sp, r7
 800f084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f088:	4770      	bx	lr
 800f08a:	bf00      	nop
 800f08c:	40012c00 	.word	0x40012c00
 800f090:	40013400 	.word	0x40013400
 800f094:	40015000 	.word	0x40015000
 800f098:	40014000 	.word	0x40014000
 800f09c:	40014400 	.word	0x40014400
 800f0a0:	40014800 	.word	0x40014800

0800f0a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f0a4:	b480      	push	{r7}
 800f0a6:	b087      	sub	sp, #28
 800f0a8:	af00      	add	r7, sp, #0
 800f0aa:	6078      	str	r0, [r7, #4]
 800f0ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	6a1b      	ldr	r3, [r3, #32]
 800f0b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f0ba:	687b      	ldr	r3, [r7, #4]
 800f0bc:	6a1b      	ldr	r3, [r3, #32]
 800f0be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	685b      	ldr	r3, [r3, #4]
 800f0c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f0c6:	687b      	ldr	r3, [r7, #4]
 800f0c8:	69db      	ldr	r3, [r3, #28]
 800f0ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800f0cc:	68fb      	ldr	r3, [r7, #12]
 800f0ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f0d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f0d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	f023 0303 	bic.w	r3, r3, #3
 800f0de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f0e0:	683b      	ldr	r3, [r7, #0]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	68fa      	ldr	r2, [r7, #12]
 800f0e6:	4313      	orrs	r3, r2
 800f0e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800f0ea:	697b      	ldr	r3, [r7, #20]
 800f0ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800f0f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800f0f2:	683b      	ldr	r3, [r7, #0]
 800f0f4:	689b      	ldr	r3, [r3, #8]
 800f0f6:	021b      	lsls	r3, r3, #8
 800f0f8:	697a      	ldr	r2, [r7, #20]
 800f0fa:	4313      	orrs	r3, r2
 800f0fc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	4a2b      	ldr	r2, [pc, #172]	; (800f1b0 <TIM_OC3_SetConfig+0x10c>)
 800f102:	4293      	cmp	r3, r2
 800f104:	d007      	beq.n	800f116 <TIM_OC3_SetConfig+0x72>
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	4a2a      	ldr	r2, [pc, #168]	; (800f1b4 <TIM_OC3_SetConfig+0x110>)
 800f10a:	4293      	cmp	r3, r2
 800f10c:	d003      	beq.n	800f116 <TIM_OC3_SetConfig+0x72>
 800f10e:	687b      	ldr	r3, [r7, #4]
 800f110:	4a29      	ldr	r2, [pc, #164]	; (800f1b8 <TIM_OC3_SetConfig+0x114>)
 800f112:	4293      	cmp	r3, r2
 800f114:	d10d      	bne.n	800f132 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800f11c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800f11e:	683b      	ldr	r3, [r7, #0]
 800f120:	68db      	ldr	r3, [r3, #12]
 800f122:	021b      	lsls	r3, r3, #8
 800f124:	697a      	ldr	r2, [r7, #20]
 800f126:	4313      	orrs	r3, r2
 800f128:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800f12a:	697b      	ldr	r3, [r7, #20]
 800f12c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800f130:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f132:	687b      	ldr	r3, [r7, #4]
 800f134:	4a1e      	ldr	r2, [pc, #120]	; (800f1b0 <TIM_OC3_SetConfig+0x10c>)
 800f136:	4293      	cmp	r3, r2
 800f138:	d013      	beq.n	800f162 <TIM_OC3_SetConfig+0xbe>
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	4a1d      	ldr	r2, [pc, #116]	; (800f1b4 <TIM_OC3_SetConfig+0x110>)
 800f13e:	4293      	cmp	r3, r2
 800f140:	d00f      	beq.n	800f162 <TIM_OC3_SetConfig+0xbe>
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	4a1d      	ldr	r2, [pc, #116]	; (800f1bc <TIM_OC3_SetConfig+0x118>)
 800f146:	4293      	cmp	r3, r2
 800f148:	d00b      	beq.n	800f162 <TIM_OC3_SetConfig+0xbe>
 800f14a:	687b      	ldr	r3, [r7, #4]
 800f14c:	4a1c      	ldr	r2, [pc, #112]	; (800f1c0 <TIM_OC3_SetConfig+0x11c>)
 800f14e:	4293      	cmp	r3, r2
 800f150:	d007      	beq.n	800f162 <TIM_OC3_SetConfig+0xbe>
 800f152:	687b      	ldr	r3, [r7, #4]
 800f154:	4a1b      	ldr	r2, [pc, #108]	; (800f1c4 <TIM_OC3_SetConfig+0x120>)
 800f156:	4293      	cmp	r3, r2
 800f158:	d003      	beq.n	800f162 <TIM_OC3_SetConfig+0xbe>
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	4a16      	ldr	r2, [pc, #88]	; (800f1b8 <TIM_OC3_SetConfig+0x114>)
 800f15e:	4293      	cmp	r3, r2
 800f160:	d113      	bne.n	800f18a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800f162:	693b      	ldr	r3, [r7, #16]
 800f164:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f168:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800f16a:	693b      	ldr	r3, [r7, #16]
 800f16c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f170:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800f172:	683b      	ldr	r3, [r7, #0]
 800f174:	695b      	ldr	r3, [r3, #20]
 800f176:	011b      	lsls	r3, r3, #4
 800f178:	693a      	ldr	r2, [r7, #16]
 800f17a:	4313      	orrs	r3, r2
 800f17c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800f17e:	683b      	ldr	r3, [r7, #0]
 800f180:	699b      	ldr	r3, [r3, #24]
 800f182:	011b      	lsls	r3, r3, #4
 800f184:	693a      	ldr	r2, [r7, #16]
 800f186:	4313      	orrs	r3, r2
 800f188:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	693a      	ldr	r2, [r7, #16]
 800f18e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	68fa      	ldr	r2, [r7, #12]
 800f194:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800f196:	683b      	ldr	r3, [r7, #0]
 800f198:	685a      	ldr	r2, [r3, #4]
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	697a      	ldr	r2, [r7, #20]
 800f1a2:	621a      	str	r2, [r3, #32]
}
 800f1a4:	bf00      	nop
 800f1a6:	371c      	adds	r7, #28
 800f1a8:	46bd      	mov	sp, r7
 800f1aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ae:	4770      	bx	lr
 800f1b0:	40012c00 	.word	0x40012c00
 800f1b4:	40013400 	.word	0x40013400
 800f1b8:	40015000 	.word	0x40015000
 800f1bc:	40014000 	.word	0x40014000
 800f1c0:	40014400 	.word	0x40014400
 800f1c4:	40014800 	.word	0x40014800

0800f1c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800f1c8:	b480      	push	{r7}
 800f1ca:	b087      	sub	sp, #28
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
 800f1d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	6a1b      	ldr	r3, [r3, #32]
 800f1d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	6a1b      	ldr	r3, [r3, #32]
 800f1e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	685b      	ldr	r3, [r3, #4]
 800f1e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	69db      	ldr	r3, [r3, #28]
 800f1ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800f1f0:	68fb      	ldr	r3, [r7, #12]
 800f1f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f1f6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f1fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f202:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f204:	683b      	ldr	r3, [r7, #0]
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	021b      	lsls	r3, r3, #8
 800f20a:	68fa      	ldr	r2, [r7, #12]
 800f20c:	4313      	orrs	r3, r2
 800f20e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800f210:	697b      	ldr	r3, [r7, #20]
 800f212:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f216:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800f218:	683b      	ldr	r3, [r7, #0]
 800f21a:	689b      	ldr	r3, [r3, #8]
 800f21c:	031b      	lsls	r3, r3, #12
 800f21e:	697a      	ldr	r2, [r7, #20]
 800f220:	4313      	orrs	r3, r2
 800f222:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800f224:	687b      	ldr	r3, [r7, #4]
 800f226:	4a2c      	ldr	r2, [pc, #176]	; (800f2d8 <TIM_OC4_SetConfig+0x110>)
 800f228:	4293      	cmp	r3, r2
 800f22a:	d007      	beq.n	800f23c <TIM_OC4_SetConfig+0x74>
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	4a2b      	ldr	r2, [pc, #172]	; (800f2dc <TIM_OC4_SetConfig+0x114>)
 800f230:	4293      	cmp	r3, r2
 800f232:	d003      	beq.n	800f23c <TIM_OC4_SetConfig+0x74>
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	4a2a      	ldr	r2, [pc, #168]	; (800f2e0 <TIM_OC4_SetConfig+0x118>)
 800f238:	4293      	cmp	r3, r2
 800f23a:	d10d      	bne.n	800f258 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f242:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800f244:	683b      	ldr	r3, [r7, #0]
 800f246:	68db      	ldr	r3, [r3, #12]
 800f248:	031b      	lsls	r3, r3, #12
 800f24a:	697a      	ldr	r2, [r7, #20]
 800f24c:	4313      	orrs	r3, r2
 800f24e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800f250:	697b      	ldr	r3, [r7, #20]
 800f252:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f256:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	4a1f      	ldr	r2, [pc, #124]	; (800f2d8 <TIM_OC4_SetConfig+0x110>)
 800f25c:	4293      	cmp	r3, r2
 800f25e:	d013      	beq.n	800f288 <TIM_OC4_SetConfig+0xc0>
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	4a1e      	ldr	r2, [pc, #120]	; (800f2dc <TIM_OC4_SetConfig+0x114>)
 800f264:	4293      	cmp	r3, r2
 800f266:	d00f      	beq.n	800f288 <TIM_OC4_SetConfig+0xc0>
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	4a1e      	ldr	r2, [pc, #120]	; (800f2e4 <TIM_OC4_SetConfig+0x11c>)
 800f26c:	4293      	cmp	r3, r2
 800f26e:	d00b      	beq.n	800f288 <TIM_OC4_SetConfig+0xc0>
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	4a1d      	ldr	r2, [pc, #116]	; (800f2e8 <TIM_OC4_SetConfig+0x120>)
 800f274:	4293      	cmp	r3, r2
 800f276:	d007      	beq.n	800f288 <TIM_OC4_SetConfig+0xc0>
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	4a1c      	ldr	r2, [pc, #112]	; (800f2ec <TIM_OC4_SetConfig+0x124>)
 800f27c:	4293      	cmp	r3, r2
 800f27e:	d003      	beq.n	800f288 <TIM_OC4_SetConfig+0xc0>
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	4a17      	ldr	r2, [pc, #92]	; (800f2e0 <TIM_OC4_SetConfig+0x118>)
 800f284:	4293      	cmp	r3, r2
 800f286:	d113      	bne.n	800f2b0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800f288:	693b      	ldr	r3, [r7, #16]
 800f28a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800f28e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800f290:	693b      	ldr	r3, [r7, #16]
 800f292:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800f296:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	695b      	ldr	r3, [r3, #20]
 800f29c:	019b      	lsls	r3, r3, #6
 800f29e:	693a      	ldr	r2, [r7, #16]
 800f2a0:	4313      	orrs	r3, r2
 800f2a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	699b      	ldr	r3, [r3, #24]
 800f2a8:	019b      	lsls	r3, r3, #6
 800f2aa:	693a      	ldr	r2, [r7, #16]
 800f2ac:	4313      	orrs	r3, r2
 800f2ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	693a      	ldr	r2, [r7, #16]
 800f2b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	68fa      	ldr	r2, [r7, #12]
 800f2ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	685a      	ldr	r2, [r3, #4]
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	697a      	ldr	r2, [r7, #20]
 800f2c8:	621a      	str	r2, [r3, #32]
}
 800f2ca:	bf00      	nop
 800f2cc:	371c      	adds	r7, #28
 800f2ce:	46bd      	mov	sp, r7
 800f2d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d4:	4770      	bx	lr
 800f2d6:	bf00      	nop
 800f2d8:	40012c00 	.word	0x40012c00
 800f2dc:	40013400 	.word	0x40013400
 800f2e0:	40015000 	.word	0x40015000
 800f2e4:	40014000 	.word	0x40014000
 800f2e8:	40014400 	.word	0x40014400
 800f2ec:	40014800 	.word	0x40014800

0800f2f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	b087      	sub	sp, #28
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
 800f2f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	6a1b      	ldr	r3, [r3, #32]
 800f2fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f306:	687b      	ldr	r3, [r7, #4]
 800f308:	6a1b      	ldr	r3, [r3, #32]
 800f30a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f30c:	687b      	ldr	r3, [r7, #4]
 800f30e:	685b      	ldr	r3, [r3, #4]
 800f310:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f31e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	681b      	ldr	r3, [r3, #0]
 800f328:	68fa      	ldr	r2, [r7, #12]
 800f32a:	4313      	orrs	r3, r2
 800f32c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800f32e:	693b      	ldr	r3, [r7, #16]
 800f330:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800f334:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	689b      	ldr	r3, [r3, #8]
 800f33a:	041b      	lsls	r3, r3, #16
 800f33c:	693a      	ldr	r2, [r7, #16]
 800f33e:	4313      	orrs	r3, r2
 800f340:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	4a19      	ldr	r2, [pc, #100]	; (800f3ac <TIM_OC5_SetConfig+0xbc>)
 800f346:	4293      	cmp	r3, r2
 800f348:	d013      	beq.n	800f372 <TIM_OC5_SetConfig+0x82>
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	4a18      	ldr	r2, [pc, #96]	; (800f3b0 <TIM_OC5_SetConfig+0xc0>)
 800f34e:	4293      	cmp	r3, r2
 800f350:	d00f      	beq.n	800f372 <TIM_OC5_SetConfig+0x82>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	4a17      	ldr	r2, [pc, #92]	; (800f3b4 <TIM_OC5_SetConfig+0xc4>)
 800f356:	4293      	cmp	r3, r2
 800f358:	d00b      	beq.n	800f372 <TIM_OC5_SetConfig+0x82>
 800f35a:	687b      	ldr	r3, [r7, #4]
 800f35c:	4a16      	ldr	r2, [pc, #88]	; (800f3b8 <TIM_OC5_SetConfig+0xc8>)
 800f35e:	4293      	cmp	r3, r2
 800f360:	d007      	beq.n	800f372 <TIM_OC5_SetConfig+0x82>
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	4a15      	ldr	r2, [pc, #84]	; (800f3bc <TIM_OC5_SetConfig+0xcc>)
 800f366:	4293      	cmp	r3, r2
 800f368:	d003      	beq.n	800f372 <TIM_OC5_SetConfig+0x82>
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	4a14      	ldr	r2, [pc, #80]	; (800f3c0 <TIM_OC5_SetConfig+0xd0>)
 800f36e:	4293      	cmp	r3, r2
 800f370:	d109      	bne.n	800f386 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f378:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800f37a:	683b      	ldr	r3, [r7, #0]
 800f37c:	695b      	ldr	r3, [r3, #20]
 800f37e:	021b      	lsls	r3, r3, #8
 800f380:	697a      	ldr	r2, [r7, #20]
 800f382:	4313      	orrs	r3, r2
 800f384:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	697a      	ldr	r2, [r7, #20]
 800f38a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	68fa      	ldr	r2, [r7, #12]
 800f390:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800f392:	683b      	ldr	r3, [r7, #0]
 800f394:	685a      	ldr	r2, [r3, #4]
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	693a      	ldr	r2, [r7, #16]
 800f39e:	621a      	str	r2, [r3, #32]
}
 800f3a0:	bf00      	nop
 800f3a2:	371c      	adds	r7, #28
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3aa:	4770      	bx	lr
 800f3ac:	40012c00 	.word	0x40012c00
 800f3b0:	40013400 	.word	0x40013400
 800f3b4:	40014000 	.word	0x40014000
 800f3b8:	40014400 	.word	0x40014400
 800f3bc:	40014800 	.word	0x40014800
 800f3c0:	40015000 	.word	0x40015000

0800f3c4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800f3c4:	b480      	push	{r7}
 800f3c6:	b087      	sub	sp, #28
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	6078      	str	r0, [r7, #4]
 800f3cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	6a1b      	ldr	r3, [r3, #32]
 800f3d2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6a1b      	ldr	r3, [r3, #32]
 800f3de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f3e0:	687b      	ldr	r3, [r7, #4]
 800f3e2:	685b      	ldr	r3, [r3, #4]
 800f3e4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f3ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800f3ec:	68fb      	ldr	r3, [r7, #12]
 800f3ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800f3f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800f3f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800f3f8:	683b      	ldr	r3, [r7, #0]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	021b      	lsls	r3, r3, #8
 800f3fe:	68fa      	ldr	r2, [r7, #12]
 800f400:	4313      	orrs	r3, r2
 800f402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800f404:	693b      	ldr	r3, [r7, #16]
 800f406:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f40a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800f40c:	683b      	ldr	r3, [r7, #0]
 800f40e:	689b      	ldr	r3, [r3, #8]
 800f410:	051b      	lsls	r3, r3, #20
 800f412:	693a      	ldr	r2, [r7, #16]
 800f414:	4313      	orrs	r3, r2
 800f416:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	4a1a      	ldr	r2, [pc, #104]	; (800f484 <TIM_OC6_SetConfig+0xc0>)
 800f41c:	4293      	cmp	r3, r2
 800f41e:	d013      	beq.n	800f448 <TIM_OC6_SetConfig+0x84>
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	4a19      	ldr	r2, [pc, #100]	; (800f488 <TIM_OC6_SetConfig+0xc4>)
 800f424:	4293      	cmp	r3, r2
 800f426:	d00f      	beq.n	800f448 <TIM_OC6_SetConfig+0x84>
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	4a18      	ldr	r2, [pc, #96]	; (800f48c <TIM_OC6_SetConfig+0xc8>)
 800f42c:	4293      	cmp	r3, r2
 800f42e:	d00b      	beq.n	800f448 <TIM_OC6_SetConfig+0x84>
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	4a17      	ldr	r2, [pc, #92]	; (800f490 <TIM_OC6_SetConfig+0xcc>)
 800f434:	4293      	cmp	r3, r2
 800f436:	d007      	beq.n	800f448 <TIM_OC6_SetConfig+0x84>
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	4a16      	ldr	r2, [pc, #88]	; (800f494 <TIM_OC6_SetConfig+0xd0>)
 800f43c:	4293      	cmp	r3, r2
 800f43e:	d003      	beq.n	800f448 <TIM_OC6_SetConfig+0x84>
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	4a15      	ldr	r2, [pc, #84]	; (800f498 <TIM_OC6_SetConfig+0xd4>)
 800f444:	4293      	cmp	r3, r2
 800f446:	d109      	bne.n	800f45c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800f448:	697b      	ldr	r3, [r7, #20]
 800f44a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800f44e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800f450:	683b      	ldr	r3, [r7, #0]
 800f452:	695b      	ldr	r3, [r3, #20]
 800f454:	029b      	lsls	r3, r3, #10
 800f456:	697a      	ldr	r2, [r7, #20]
 800f458:	4313      	orrs	r3, r2
 800f45a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	697a      	ldr	r2, [r7, #20]
 800f460:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800f462:	687b      	ldr	r3, [r7, #4]
 800f464:	68fa      	ldr	r2, [r7, #12]
 800f466:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	685a      	ldr	r2, [r3, #4]
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	693a      	ldr	r2, [r7, #16]
 800f474:	621a      	str	r2, [r3, #32]
}
 800f476:	bf00      	nop
 800f478:	371c      	adds	r7, #28
 800f47a:	46bd      	mov	sp, r7
 800f47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f480:	4770      	bx	lr
 800f482:	bf00      	nop
 800f484:	40012c00 	.word	0x40012c00
 800f488:	40013400 	.word	0x40013400
 800f48c:	40014000 	.word	0x40014000
 800f490:	40014400 	.word	0x40014400
 800f494:	40014800 	.word	0x40014800
 800f498:	40015000 	.word	0x40015000

0800f49c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800f49c:	b580      	push	{r7, lr}
 800f49e:	b086      	sub	sp, #24
 800f4a0:	af00      	add	r7, sp, #0
 800f4a2:	6078      	str	r0, [r7, #4]
 800f4a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	689b      	ldr	r3, [r3, #8]
 800f4ac:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f4ae:	697b      	ldr	r3, [r7, #20]
 800f4b0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800f4b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f4b8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800f4ba:	683b      	ldr	r3, [r7, #0]
 800f4bc:	685b      	ldr	r3, [r3, #4]
 800f4be:	697a      	ldr	r2, [r7, #20]
 800f4c0:	4313      	orrs	r3, r2
 800f4c2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800f4c4:	697b      	ldr	r3, [r7, #20]
 800f4c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800f4ca:	f023 0307 	bic.w	r3, r3, #7
 800f4ce:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800f4d0:	683b      	ldr	r3, [r7, #0]
 800f4d2:	681b      	ldr	r3, [r3, #0]
 800f4d4:	697a      	ldr	r2, [r7, #20]
 800f4d6:	4313      	orrs	r3, r2
 800f4d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800f4da:	687b      	ldr	r3, [r7, #4]
 800f4dc:	681b      	ldr	r3, [r3, #0]
 800f4de:	697a      	ldr	r2, [r7, #20]
 800f4e0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800f4e2:	683b      	ldr	r3, [r7, #0]
 800f4e4:	685b      	ldr	r3, [r3, #4]
 800f4e6:	2b70      	cmp	r3, #112	; 0x70
 800f4e8:	d034      	beq.n	800f554 <TIM_SlaveTimer_SetConfig+0xb8>
 800f4ea:	2b70      	cmp	r3, #112	; 0x70
 800f4ec:	d811      	bhi.n	800f512 <TIM_SlaveTimer_SetConfig+0x76>
 800f4ee:	2b30      	cmp	r3, #48	; 0x30
 800f4f0:	d07d      	beq.n	800f5ee <TIM_SlaveTimer_SetConfig+0x152>
 800f4f2:	2b30      	cmp	r3, #48	; 0x30
 800f4f4:	d806      	bhi.n	800f504 <TIM_SlaveTimer_SetConfig+0x68>
 800f4f6:	2b10      	cmp	r3, #16
 800f4f8:	d079      	beq.n	800f5ee <TIM_SlaveTimer_SetConfig+0x152>
 800f4fa:	2b20      	cmp	r3, #32
 800f4fc:	d077      	beq.n	800f5ee <TIM_SlaveTimer_SetConfig+0x152>
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d075      	beq.n	800f5ee <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800f502:	e075      	b.n	800f5f0 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800f504:	2b50      	cmp	r3, #80	; 0x50
 800f506:	d05e      	beq.n	800f5c6 <TIM_SlaveTimer_SetConfig+0x12a>
 800f508:	2b60      	cmp	r3, #96	; 0x60
 800f50a:	d066      	beq.n	800f5da <TIM_SlaveTimer_SetConfig+0x13e>
 800f50c:	2b40      	cmp	r3, #64	; 0x40
 800f50e:	d02c      	beq.n	800f56a <TIM_SlaveTimer_SetConfig+0xce>
      break;
 800f510:	e06e      	b.n	800f5f0 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800f512:	4a3a      	ldr	r2, [pc, #232]	; (800f5fc <TIM_SlaveTimer_SetConfig+0x160>)
 800f514:	4293      	cmp	r3, r2
 800f516:	d06a      	beq.n	800f5ee <TIM_SlaveTimer_SetConfig+0x152>
 800f518:	4a38      	ldr	r2, [pc, #224]	; (800f5fc <TIM_SlaveTimer_SetConfig+0x160>)
 800f51a:	4293      	cmp	r3, r2
 800f51c:	d809      	bhi.n	800f532 <TIM_SlaveTimer_SetConfig+0x96>
 800f51e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800f522:	d064      	beq.n	800f5ee <TIM_SlaveTimer_SetConfig+0x152>
 800f524:	4a36      	ldr	r2, [pc, #216]	; (800f600 <TIM_SlaveTimer_SetConfig+0x164>)
 800f526:	4293      	cmp	r3, r2
 800f528:	d061      	beq.n	800f5ee <TIM_SlaveTimer_SetConfig+0x152>
 800f52a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f52e:	d05e      	beq.n	800f5ee <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800f530:	e05e      	b.n	800f5f0 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800f532:	4a34      	ldr	r2, [pc, #208]	; (800f604 <TIM_SlaveTimer_SetConfig+0x168>)
 800f534:	4293      	cmp	r3, r2
 800f536:	d05a      	beq.n	800f5ee <TIM_SlaveTimer_SetConfig+0x152>
 800f538:	4a32      	ldr	r2, [pc, #200]	; (800f604 <TIM_SlaveTimer_SetConfig+0x168>)
 800f53a:	4293      	cmp	r3, r2
 800f53c:	d803      	bhi.n	800f546 <TIM_SlaveTimer_SetConfig+0xaa>
 800f53e:	4a32      	ldr	r2, [pc, #200]	; (800f608 <TIM_SlaveTimer_SetConfig+0x16c>)
 800f540:	4293      	cmp	r3, r2
 800f542:	d054      	beq.n	800f5ee <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800f544:	e054      	b.n	800f5f0 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800f546:	4a31      	ldr	r2, [pc, #196]	; (800f60c <TIM_SlaveTimer_SetConfig+0x170>)
 800f548:	4293      	cmp	r3, r2
 800f54a:	d050      	beq.n	800f5ee <TIM_SlaveTimer_SetConfig+0x152>
 800f54c:	4a30      	ldr	r2, [pc, #192]	; (800f610 <TIM_SlaveTimer_SetConfig+0x174>)
 800f54e:	4293      	cmp	r3, r2
 800f550:	d04d      	beq.n	800f5ee <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800f552:	e04d      	b.n	800f5f0 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	6818      	ldr	r0, [r3, #0]
 800f558:	683b      	ldr	r3, [r7, #0]
 800f55a:	68d9      	ldr	r1, [r3, #12]
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	689a      	ldr	r2, [r3, #8]
 800f560:	683b      	ldr	r3, [r7, #0]
 800f562:	691b      	ldr	r3, [r3, #16]
 800f564:	f000 f9fc 	bl	800f960 <TIM_ETR_SetConfig>
      break;
 800f568:	e042      	b.n	800f5f0 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	2b05      	cmp	r3, #5
 800f570:	d004      	beq.n	800f57c <TIM_SlaveTimer_SetConfig+0xe0>
 800f572:	683b      	ldr	r3, [r7, #0]
 800f574:	681b      	ldr	r3, [r3, #0]
 800f576:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800f57a:	d101      	bne.n	800f580 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 800f57c:	2301      	movs	r3, #1
 800f57e:	e038      	b.n	800f5f2 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	6a1b      	ldr	r3, [r3, #32]
 800f586:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	681b      	ldr	r3, [r3, #0]
 800f58c:	6a1a      	ldr	r2, [r3, #32]
 800f58e:	687b      	ldr	r3, [r7, #4]
 800f590:	681b      	ldr	r3, [r3, #0]
 800f592:	f022 0201 	bic.w	r2, r2, #1
 800f596:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	681b      	ldr	r3, [r3, #0]
 800f59c:	699b      	ldr	r3, [r3, #24]
 800f59e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f5a6:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800f5a8:	683b      	ldr	r3, [r7, #0]
 800f5aa:	691b      	ldr	r3, [r3, #16]
 800f5ac:	011b      	lsls	r3, r3, #4
 800f5ae:	68fa      	ldr	r2, [r7, #12]
 800f5b0:	4313      	orrs	r3, r2
 800f5b2:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	68fa      	ldr	r2, [r7, #12]
 800f5ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	681b      	ldr	r3, [r3, #0]
 800f5c0:	693a      	ldr	r2, [r7, #16]
 800f5c2:	621a      	str	r2, [r3, #32]
      break;
 800f5c4:	e014      	b.n	800f5f0 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	6818      	ldr	r0, [r3, #0]
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	6899      	ldr	r1, [r3, #8]
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	691b      	ldr	r3, [r3, #16]
 800f5d2:	461a      	mov	r2, r3
 800f5d4:	f000 f892 	bl	800f6fc <TIM_TI1_ConfigInputStage>
      break;
 800f5d8:	e00a      	b.n	800f5f0 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	6818      	ldr	r0, [r3, #0]
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	6899      	ldr	r1, [r3, #8]
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	691b      	ldr	r3, [r3, #16]
 800f5e6:	461a      	mov	r2, r3
 800f5e8:	f000 f8f4 	bl	800f7d4 <TIM_TI2_ConfigInputStage>
      break;
 800f5ec:	e000      	b.n	800f5f0 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 800f5ee:	bf00      	nop
  }
  return HAL_OK;
 800f5f0:	2300      	movs	r3, #0
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	3718      	adds	r7, #24
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	bd80      	pop	{r7, pc}
 800f5fa:	bf00      	nop
 800f5fc:	00100030 	.word	0x00100030
 800f600:	00100020 	.word	0x00100020
 800f604:	00100050 	.word	0x00100050
 800f608:	00100040 	.word	0x00100040
 800f60c:	00100060 	.word	0x00100060
 800f610:	00100070 	.word	0x00100070

0800f614 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800f614:	b480      	push	{r7}
 800f616:	b087      	sub	sp, #28
 800f618:	af00      	add	r7, sp, #0
 800f61a:	60f8      	str	r0, [r7, #12]
 800f61c:	60b9      	str	r1, [r7, #8]
 800f61e:	607a      	str	r2, [r7, #4]
 800f620:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f622:	68fb      	ldr	r3, [r7, #12]
 800f624:	6a1b      	ldr	r3, [r3, #32]
 800f626:	f023 0201 	bic.w	r2, r3, #1
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	699b      	ldr	r3, [r3, #24]
 800f632:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f634:	68fb      	ldr	r3, [r7, #12]
 800f636:	6a1b      	ldr	r3, [r3, #32]
 800f638:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	4a28      	ldr	r2, [pc, #160]	; (800f6e0 <TIM_TI1_SetConfig+0xcc>)
 800f63e:	4293      	cmp	r3, r2
 800f640:	d01b      	beq.n	800f67a <TIM_TI1_SetConfig+0x66>
 800f642:	68fb      	ldr	r3, [r7, #12]
 800f644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f648:	d017      	beq.n	800f67a <TIM_TI1_SetConfig+0x66>
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	4a25      	ldr	r2, [pc, #148]	; (800f6e4 <TIM_TI1_SetConfig+0xd0>)
 800f64e:	4293      	cmp	r3, r2
 800f650:	d013      	beq.n	800f67a <TIM_TI1_SetConfig+0x66>
 800f652:	68fb      	ldr	r3, [r7, #12]
 800f654:	4a24      	ldr	r2, [pc, #144]	; (800f6e8 <TIM_TI1_SetConfig+0xd4>)
 800f656:	4293      	cmp	r3, r2
 800f658:	d00f      	beq.n	800f67a <TIM_TI1_SetConfig+0x66>
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	4a23      	ldr	r2, [pc, #140]	; (800f6ec <TIM_TI1_SetConfig+0xd8>)
 800f65e:	4293      	cmp	r3, r2
 800f660:	d00b      	beq.n	800f67a <TIM_TI1_SetConfig+0x66>
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	4a22      	ldr	r2, [pc, #136]	; (800f6f0 <TIM_TI1_SetConfig+0xdc>)
 800f666:	4293      	cmp	r3, r2
 800f668:	d007      	beq.n	800f67a <TIM_TI1_SetConfig+0x66>
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	4a21      	ldr	r2, [pc, #132]	; (800f6f4 <TIM_TI1_SetConfig+0xe0>)
 800f66e:	4293      	cmp	r3, r2
 800f670:	d003      	beq.n	800f67a <TIM_TI1_SetConfig+0x66>
 800f672:	68fb      	ldr	r3, [r7, #12]
 800f674:	4a20      	ldr	r2, [pc, #128]	; (800f6f8 <TIM_TI1_SetConfig+0xe4>)
 800f676:	4293      	cmp	r3, r2
 800f678:	d101      	bne.n	800f67e <TIM_TI1_SetConfig+0x6a>
 800f67a:	2301      	movs	r3, #1
 800f67c:	e000      	b.n	800f680 <TIM_TI1_SetConfig+0x6c>
 800f67e:	2300      	movs	r3, #0
 800f680:	2b00      	cmp	r3, #0
 800f682:	d008      	beq.n	800f696 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800f684:	697b      	ldr	r3, [r7, #20]
 800f686:	f023 0303 	bic.w	r3, r3, #3
 800f68a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800f68c:	697a      	ldr	r2, [r7, #20]
 800f68e:	687b      	ldr	r3, [r7, #4]
 800f690:	4313      	orrs	r3, r2
 800f692:	617b      	str	r3, [r7, #20]
 800f694:	e003      	b.n	800f69e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800f696:	697b      	ldr	r3, [r7, #20]
 800f698:	f043 0301 	orr.w	r3, r3, #1
 800f69c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f69e:	697b      	ldr	r3, [r7, #20]
 800f6a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f6a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800f6a6:	683b      	ldr	r3, [r7, #0]
 800f6a8:	011b      	lsls	r3, r3, #4
 800f6aa:	b2db      	uxtb	r3, r3
 800f6ac:	697a      	ldr	r2, [r7, #20]
 800f6ae:	4313      	orrs	r3, r2
 800f6b0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f6b2:	693b      	ldr	r3, [r7, #16]
 800f6b4:	f023 030a 	bic.w	r3, r3, #10
 800f6b8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800f6ba:	68bb      	ldr	r3, [r7, #8]
 800f6bc:	f003 030a 	and.w	r3, r3, #10
 800f6c0:	693a      	ldr	r2, [r7, #16]
 800f6c2:	4313      	orrs	r3, r2
 800f6c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	697a      	ldr	r2, [r7, #20]
 800f6ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f6cc:	68fb      	ldr	r3, [r7, #12]
 800f6ce:	693a      	ldr	r2, [r7, #16]
 800f6d0:	621a      	str	r2, [r3, #32]
}
 800f6d2:	bf00      	nop
 800f6d4:	371c      	adds	r7, #28
 800f6d6:	46bd      	mov	sp, r7
 800f6d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6dc:	4770      	bx	lr
 800f6de:	bf00      	nop
 800f6e0:	40012c00 	.word	0x40012c00
 800f6e4:	40000400 	.word	0x40000400
 800f6e8:	40000800 	.word	0x40000800
 800f6ec:	40000c00 	.word	0x40000c00
 800f6f0:	40013400 	.word	0x40013400
 800f6f4:	40014000 	.word	0x40014000
 800f6f8:	40015000 	.word	0x40015000

0800f6fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f6fc:	b480      	push	{r7}
 800f6fe:	b087      	sub	sp, #28
 800f700:	af00      	add	r7, sp, #0
 800f702:	60f8      	str	r0, [r7, #12]
 800f704:	60b9      	str	r1, [r7, #8]
 800f706:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800f708:	68fb      	ldr	r3, [r7, #12]
 800f70a:	6a1b      	ldr	r3, [r3, #32]
 800f70c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f70e:	68fb      	ldr	r3, [r7, #12]
 800f710:	6a1b      	ldr	r3, [r3, #32]
 800f712:	f023 0201 	bic.w	r2, r3, #1
 800f716:	68fb      	ldr	r3, [r7, #12]
 800f718:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	699b      	ldr	r3, [r3, #24]
 800f71e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800f720:	693b      	ldr	r3, [r7, #16]
 800f722:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f726:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	011b      	lsls	r3, r3, #4
 800f72c:	693a      	ldr	r2, [r7, #16]
 800f72e:	4313      	orrs	r3, r2
 800f730:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800f732:	697b      	ldr	r3, [r7, #20]
 800f734:	f023 030a 	bic.w	r3, r3, #10
 800f738:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800f73a:	697a      	ldr	r2, [r7, #20]
 800f73c:	68bb      	ldr	r3, [r7, #8]
 800f73e:	4313      	orrs	r3, r2
 800f740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800f742:	68fb      	ldr	r3, [r7, #12]
 800f744:	693a      	ldr	r2, [r7, #16]
 800f746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	697a      	ldr	r2, [r7, #20]
 800f74c:	621a      	str	r2, [r3, #32]
}
 800f74e:	bf00      	nop
 800f750:	371c      	adds	r7, #28
 800f752:	46bd      	mov	sp, r7
 800f754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f758:	4770      	bx	lr

0800f75a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f75a:	b480      	push	{r7}
 800f75c:	b087      	sub	sp, #28
 800f75e:	af00      	add	r7, sp, #0
 800f760:	60f8      	str	r0, [r7, #12]
 800f762:	60b9      	str	r1, [r7, #8]
 800f764:	607a      	str	r2, [r7, #4]
 800f766:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	6a1b      	ldr	r3, [r3, #32]
 800f76c:	f023 0210 	bic.w	r2, r3, #16
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	699b      	ldr	r3, [r3, #24]
 800f778:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f77a:	68fb      	ldr	r3, [r7, #12]
 800f77c:	6a1b      	ldr	r3, [r3, #32]
 800f77e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f786:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	021b      	lsls	r3, r3, #8
 800f78c:	697a      	ldr	r2, [r7, #20]
 800f78e:	4313      	orrs	r3, r2
 800f790:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f792:	697b      	ldr	r3, [r7, #20]
 800f794:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f798:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	031b      	lsls	r3, r3, #12
 800f79e:	b29b      	uxth	r3, r3
 800f7a0:	697a      	ldr	r2, [r7, #20]
 800f7a2:	4313      	orrs	r3, r2
 800f7a4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f7a6:	693b      	ldr	r3, [r7, #16]
 800f7a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f7ac:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800f7ae:	68bb      	ldr	r3, [r7, #8]
 800f7b0:	011b      	lsls	r3, r3, #4
 800f7b2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f7b6:	693a      	ldr	r2, [r7, #16]
 800f7b8:	4313      	orrs	r3, r2
 800f7ba:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f7bc:	68fb      	ldr	r3, [r7, #12]
 800f7be:	697a      	ldr	r2, [r7, #20]
 800f7c0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f7c2:	68fb      	ldr	r3, [r7, #12]
 800f7c4:	693a      	ldr	r2, [r7, #16]
 800f7c6:	621a      	str	r2, [r3, #32]
}
 800f7c8:	bf00      	nop
 800f7ca:	371c      	adds	r7, #28
 800f7cc:	46bd      	mov	sp, r7
 800f7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7d2:	4770      	bx	lr

0800f7d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800f7d4:	b480      	push	{r7}
 800f7d6:	b087      	sub	sp, #28
 800f7d8:	af00      	add	r7, sp, #0
 800f7da:	60f8      	str	r0, [r7, #12]
 800f7dc:	60b9      	str	r1, [r7, #8]
 800f7de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	6a1b      	ldr	r3, [r3, #32]
 800f7e4:	f023 0210 	bic.w	r2, r3, #16
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800f7ec:	68fb      	ldr	r3, [r7, #12]
 800f7ee:	699b      	ldr	r3, [r3, #24]
 800f7f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	6a1b      	ldr	r3, [r3, #32]
 800f7f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800f7f8:	697b      	ldr	r3, [r7, #20]
 800f7fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f7fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	031b      	lsls	r3, r3, #12
 800f804:	697a      	ldr	r2, [r7, #20]
 800f806:	4313      	orrs	r3, r2
 800f808:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800f80a:	693b      	ldr	r3, [r7, #16]
 800f80c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800f810:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800f812:	68bb      	ldr	r3, [r7, #8]
 800f814:	011b      	lsls	r3, r3, #4
 800f816:	693a      	ldr	r2, [r7, #16]
 800f818:	4313      	orrs	r3, r2
 800f81a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800f81c:	68fb      	ldr	r3, [r7, #12]
 800f81e:	697a      	ldr	r2, [r7, #20]
 800f820:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	693a      	ldr	r2, [r7, #16]
 800f826:	621a      	str	r2, [r3, #32]
}
 800f828:	bf00      	nop
 800f82a:	371c      	adds	r7, #28
 800f82c:	46bd      	mov	sp, r7
 800f82e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f832:	4770      	bx	lr

0800f834 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f834:	b480      	push	{r7}
 800f836:	b087      	sub	sp, #28
 800f838:	af00      	add	r7, sp, #0
 800f83a:	60f8      	str	r0, [r7, #12]
 800f83c:	60b9      	str	r1, [r7, #8]
 800f83e:	607a      	str	r2, [r7, #4]
 800f840:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	6a1b      	ldr	r3, [r3, #32]
 800f846:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	69db      	ldr	r3, [r3, #28]
 800f852:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f854:	68fb      	ldr	r3, [r7, #12]
 800f856:	6a1b      	ldr	r3, [r3, #32]
 800f858:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800f85a:	697b      	ldr	r3, [r7, #20]
 800f85c:	f023 0303 	bic.w	r3, r3, #3
 800f860:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800f862:	697a      	ldr	r2, [r7, #20]
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	4313      	orrs	r3, r2
 800f868:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800f86a:	697b      	ldr	r3, [r7, #20]
 800f86c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800f870:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800f872:	683b      	ldr	r3, [r7, #0]
 800f874:	011b      	lsls	r3, r3, #4
 800f876:	b2db      	uxtb	r3, r3
 800f878:	697a      	ldr	r2, [r7, #20]
 800f87a:	4313      	orrs	r3, r2
 800f87c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800f87e:	693b      	ldr	r3, [r7, #16]
 800f880:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800f884:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	021b      	lsls	r3, r3, #8
 800f88a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800f88e:	693a      	ldr	r2, [r7, #16]
 800f890:	4313      	orrs	r3, r2
 800f892:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f894:	68fb      	ldr	r3, [r7, #12]
 800f896:	697a      	ldr	r2, [r7, #20]
 800f898:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800f89a:	68fb      	ldr	r3, [r7, #12]
 800f89c:	693a      	ldr	r2, [r7, #16]
 800f89e:	621a      	str	r2, [r3, #32]
}
 800f8a0:	bf00      	nop
 800f8a2:	371c      	adds	r7, #28
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8aa:	4770      	bx	lr

0800f8ac <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800f8ac:	b480      	push	{r7}
 800f8ae:	b087      	sub	sp, #28
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	60f8      	str	r0, [r7, #12]
 800f8b4:	60b9      	str	r1, [r7, #8]
 800f8b6:	607a      	str	r2, [r7, #4]
 800f8b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	6a1b      	ldr	r3, [r3, #32]
 800f8be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	69db      	ldr	r3, [r3, #28]
 800f8ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	6a1b      	ldr	r3, [r3, #32]
 800f8d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800f8d2:	697b      	ldr	r3, [r7, #20]
 800f8d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f8d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	021b      	lsls	r3, r3, #8
 800f8de:	697a      	ldr	r2, [r7, #20]
 800f8e0:	4313      	orrs	r3, r2
 800f8e2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800f8e4:	697b      	ldr	r3, [r7, #20]
 800f8e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800f8ea:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800f8ec:	683b      	ldr	r3, [r7, #0]
 800f8ee:	031b      	lsls	r3, r3, #12
 800f8f0:	b29b      	uxth	r3, r3
 800f8f2:	697a      	ldr	r2, [r7, #20]
 800f8f4:	4313      	orrs	r3, r2
 800f8f6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800f8f8:	693b      	ldr	r3, [r7, #16]
 800f8fa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800f8fe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800f900:	68bb      	ldr	r3, [r7, #8]
 800f902:	031b      	lsls	r3, r3, #12
 800f904:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800f908:	693a      	ldr	r2, [r7, #16]
 800f90a:	4313      	orrs	r3, r2
 800f90c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	697a      	ldr	r2, [r7, #20]
 800f912:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800f914:	68fb      	ldr	r3, [r7, #12]
 800f916:	693a      	ldr	r2, [r7, #16]
 800f918:	621a      	str	r2, [r3, #32]
}
 800f91a:	bf00      	nop
 800f91c:	371c      	adds	r7, #28
 800f91e:	46bd      	mov	sp, r7
 800f920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f924:	4770      	bx	lr

0800f926 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800f926:	b480      	push	{r7}
 800f928:	b085      	sub	sp, #20
 800f92a:	af00      	add	r7, sp, #0
 800f92c:	6078      	str	r0, [r7, #4]
 800f92e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	689b      	ldr	r3, [r3, #8]
 800f934:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800f936:	68fb      	ldr	r3, [r7, #12]
 800f938:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800f93c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f940:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800f942:	683a      	ldr	r2, [r7, #0]
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	4313      	orrs	r3, r2
 800f948:	f043 0307 	orr.w	r3, r3, #7
 800f94c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	68fa      	ldr	r2, [r7, #12]
 800f952:	609a      	str	r2, [r3, #8]
}
 800f954:	bf00      	nop
 800f956:	3714      	adds	r7, #20
 800f958:	46bd      	mov	sp, r7
 800f95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f95e:	4770      	bx	lr

0800f960 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800f960:	b480      	push	{r7}
 800f962:	b087      	sub	sp, #28
 800f964:	af00      	add	r7, sp, #0
 800f966:	60f8      	str	r0, [r7, #12]
 800f968:	60b9      	str	r1, [r7, #8]
 800f96a:	607a      	str	r2, [r7, #4]
 800f96c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	689b      	ldr	r3, [r3, #8]
 800f972:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800f974:	697b      	ldr	r3, [r7, #20]
 800f976:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800f97a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800f97c:	683b      	ldr	r3, [r7, #0]
 800f97e:	021a      	lsls	r2, r3, #8
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	431a      	orrs	r2, r3
 800f984:	68bb      	ldr	r3, [r7, #8]
 800f986:	4313      	orrs	r3, r2
 800f988:	697a      	ldr	r2, [r7, #20]
 800f98a:	4313      	orrs	r3, r2
 800f98c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800f98e:	68fb      	ldr	r3, [r7, #12]
 800f990:	697a      	ldr	r2, [r7, #20]
 800f992:	609a      	str	r2, [r3, #8]
}
 800f994:	bf00      	nop
 800f996:	371c      	adds	r7, #28
 800f998:	46bd      	mov	sp, r7
 800f99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f99e:	4770      	bx	lr

0800f9a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800f9a0:	b480      	push	{r7}
 800f9a2:	b087      	sub	sp, #28
 800f9a4:	af00      	add	r7, sp, #0
 800f9a6:	60f8      	str	r0, [r7, #12]
 800f9a8:	60b9      	str	r1, [r7, #8]
 800f9aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800f9ac:	68bb      	ldr	r3, [r7, #8]
 800f9ae:	f003 031f 	and.w	r3, r3, #31
 800f9b2:	2201      	movs	r2, #1
 800f9b4:	fa02 f303 	lsl.w	r3, r2, r3
 800f9b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800f9ba:	68fb      	ldr	r3, [r7, #12]
 800f9bc:	6a1a      	ldr	r2, [r3, #32]
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	43db      	mvns	r3, r3
 800f9c2:	401a      	ands	r2, r3
 800f9c4:	68fb      	ldr	r3, [r7, #12]
 800f9c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800f9c8:	68fb      	ldr	r3, [r7, #12]
 800f9ca:	6a1a      	ldr	r2, [r3, #32]
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	f003 031f 	and.w	r3, r3, #31
 800f9d2:	6879      	ldr	r1, [r7, #4]
 800f9d4:	fa01 f303 	lsl.w	r3, r1, r3
 800f9d8:	431a      	orrs	r2, r3
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	621a      	str	r2, [r3, #32]
}
 800f9de:	bf00      	nop
 800f9e0:	371c      	adds	r7, #28
 800f9e2:	46bd      	mov	sp, r7
 800f9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9e8:	4770      	bx	lr
	...

0800f9ec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f9ec:	b480      	push	{r7}
 800f9ee:	b085      	sub	sp, #20
 800f9f0:	af00      	add	r7, sp, #0
 800f9f2:	6078      	str	r0, [r7, #4]
 800f9f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f9fc:	2b01      	cmp	r3, #1
 800f9fe:	d101      	bne.n	800fa04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fa00:	2302      	movs	r3, #2
 800fa02:	e074      	b.n	800faee <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2201      	movs	r2, #1
 800fa08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fa0c:	687b      	ldr	r3, [r7, #4]
 800fa0e:	2202      	movs	r2, #2
 800fa10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fa14:	687b      	ldr	r3, [r7, #4]
 800fa16:	681b      	ldr	r3, [r3, #0]
 800fa18:	685b      	ldr	r3, [r3, #4]
 800fa1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	689b      	ldr	r3, [r3, #8]
 800fa22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	681b      	ldr	r3, [r3, #0]
 800fa28:	4a34      	ldr	r2, [pc, #208]	; (800fafc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fa2a:	4293      	cmp	r3, r2
 800fa2c:	d009      	beq.n	800fa42 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	681b      	ldr	r3, [r3, #0]
 800fa32:	4a33      	ldr	r2, [pc, #204]	; (800fb00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800fa34:	4293      	cmp	r3, r2
 800fa36:	d004      	beq.n	800fa42 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	681b      	ldr	r3, [r3, #0]
 800fa3c:	4a31      	ldr	r2, [pc, #196]	; (800fb04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fa3e:	4293      	cmp	r3, r2
 800fa40:	d108      	bne.n	800fa54 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800fa42:	68fb      	ldr	r3, [r7, #12]
 800fa44:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800fa48:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800fa4a:	683b      	ldr	r3, [r7, #0]
 800fa4c:	685b      	ldr	r3, [r3, #4]
 800fa4e:	68fa      	ldr	r2, [r7, #12]
 800fa50:	4313      	orrs	r3, r2
 800fa52:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fa54:	68fb      	ldr	r3, [r7, #12]
 800fa56:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800fa5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800fa5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fa60:	683b      	ldr	r3, [r7, #0]
 800fa62:	681b      	ldr	r3, [r3, #0]
 800fa64:	68fa      	ldr	r2, [r7, #12]
 800fa66:	4313      	orrs	r3, r2
 800fa68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	68fa      	ldr	r2, [r7, #12]
 800fa70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fa72:	687b      	ldr	r3, [r7, #4]
 800fa74:	681b      	ldr	r3, [r3, #0]
 800fa76:	4a21      	ldr	r2, [pc, #132]	; (800fafc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800fa78:	4293      	cmp	r3, r2
 800fa7a:	d022      	beq.n	800fac2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fa84:	d01d      	beq.n	800fac2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	681b      	ldr	r3, [r3, #0]
 800fa8a:	4a1f      	ldr	r2, [pc, #124]	; (800fb08 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800fa8c:	4293      	cmp	r3, r2
 800fa8e:	d018      	beq.n	800fac2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	4a1d      	ldr	r2, [pc, #116]	; (800fb0c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800fa96:	4293      	cmp	r3, r2
 800fa98:	d013      	beq.n	800fac2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	681b      	ldr	r3, [r3, #0]
 800fa9e:	4a1c      	ldr	r2, [pc, #112]	; (800fb10 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800faa0:	4293      	cmp	r3, r2
 800faa2:	d00e      	beq.n	800fac2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	4a15      	ldr	r2, [pc, #84]	; (800fb00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800faaa:	4293      	cmp	r3, r2
 800faac:	d009      	beq.n	800fac2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	681b      	ldr	r3, [r3, #0]
 800fab2:	4a18      	ldr	r2, [pc, #96]	; (800fb14 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800fab4:	4293      	cmp	r3, r2
 800fab6:	d004      	beq.n	800fac2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	4a11      	ldr	r2, [pc, #68]	; (800fb04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800fabe:	4293      	cmp	r3, r2
 800fac0:	d10c      	bne.n	800fadc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800fac8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800faca:	683b      	ldr	r3, [r7, #0]
 800facc:	689b      	ldr	r3, [r3, #8]
 800face:	68ba      	ldr	r2, [r7, #8]
 800fad0:	4313      	orrs	r3, r2
 800fad2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	681b      	ldr	r3, [r3, #0]
 800fad8:	68ba      	ldr	r2, [r7, #8]
 800fada:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	2201      	movs	r2, #1
 800fae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800fae4:	687b      	ldr	r3, [r7, #4]
 800fae6:	2200      	movs	r2, #0
 800fae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800faec:	2300      	movs	r3, #0
}
 800faee:	4618      	mov	r0, r3
 800faf0:	3714      	adds	r7, #20
 800faf2:	46bd      	mov	sp, r7
 800faf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faf8:	4770      	bx	lr
 800fafa:	bf00      	nop
 800fafc:	40012c00 	.word	0x40012c00
 800fb00:	40013400 	.word	0x40013400
 800fb04:	40015000 	.word	0x40015000
 800fb08:	40000400 	.word	0x40000400
 800fb0c:	40000800 	.word	0x40000800
 800fb10:	40000c00 	.word	0x40000c00
 800fb14:	40014000 	.word	0x40014000

0800fb18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800fb18:	b480      	push	{r7}
 800fb1a:	b085      	sub	sp, #20
 800fb1c:	af00      	add	r7, sp, #0
 800fb1e:	6078      	str	r0, [r7, #4]
 800fb20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800fb22:	2300      	movs	r3, #0
 800fb24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800fb2c:	2b01      	cmp	r3, #1
 800fb2e:	d101      	bne.n	800fb34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800fb30:	2302      	movs	r3, #2
 800fb32:	e096      	b.n	800fc62 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	2201      	movs	r2, #1
 800fb38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800fb3c:	68fb      	ldr	r3, [r7, #12]
 800fb3e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800fb42:	683b      	ldr	r3, [r7, #0]
 800fb44:	68db      	ldr	r3, [r3, #12]
 800fb46:	4313      	orrs	r3, r2
 800fb48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800fb50:	683b      	ldr	r3, [r7, #0]
 800fb52:	689b      	ldr	r3, [r3, #8]
 800fb54:	4313      	orrs	r3, r2
 800fb56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800fb58:	68fb      	ldr	r3, [r7, #12]
 800fb5a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800fb5e:	683b      	ldr	r3, [r7, #0]
 800fb60:	685b      	ldr	r3, [r3, #4]
 800fb62:	4313      	orrs	r3, r2
 800fb64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800fb66:	68fb      	ldr	r3, [r7, #12]
 800fb68:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800fb6c:	683b      	ldr	r3, [r7, #0]
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	4313      	orrs	r3, r2
 800fb72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800fb74:	68fb      	ldr	r3, [r7, #12]
 800fb76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800fb7a:	683b      	ldr	r3, [r7, #0]
 800fb7c:	691b      	ldr	r3, [r3, #16]
 800fb7e:	4313      	orrs	r3, r2
 800fb80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800fb82:	68fb      	ldr	r3, [r7, #12]
 800fb84:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800fb88:	683b      	ldr	r3, [r7, #0]
 800fb8a:	695b      	ldr	r3, [r3, #20]
 800fb8c:	4313      	orrs	r3, r2
 800fb8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800fb96:	683b      	ldr	r3, [r7, #0]
 800fb98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb9a:	4313      	orrs	r3, r2
 800fb9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800fba4:	683b      	ldr	r3, [r7, #0]
 800fba6:	699b      	ldr	r3, [r3, #24]
 800fba8:	041b      	lsls	r3, r3, #16
 800fbaa:	4313      	orrs	r3, r2
 800fbac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	681b      	ldr	r3, [r3, #0]
 800fbb2:	4a2f      	ldr	r2, [pc, #188]	; (800fc70 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800fbb4:	4293      	cmp	r3, r2
 800fbb6:	d009      	beq.n	800fbcc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	681b      	ldr	r3, [r3, #0]
 800fbbc:	4a2d      	ldr	r2, [pc, #180]	; (800fc74 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800fbbe:	4293      	cmp	r3, r2
 800fbc0:	d004      	beq.n	800fbcc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	681b      	ldr	r3, [r3, #0]
 800fbc6:	4a2c      	ldr	r2, [pc, #176]	; (800fc78 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800fbc8:	4293      	cmp	r3, r2
 800fbca:	d106      	bne.n	800fbda <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	69db      	ldr	r3, [r3, #28]
 800fbd6:	4313      	orrs	r3, r2
 800fbd8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	681b      	ldr	r3, [r3, #0]
 800fbde:	4a24      	ldr	r2, [pc, #144]	; (800fc70 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800fbe0:	4293      	cmp	r3, r2
 800fbe2:	d009      	beq.n	800fbf8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	4a22      	ldr	r2, [pc, #136]	; (800fc74 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800fbea:	4293      	cmp	r3, r2
 800fbec:	d004      	beq.n	800fbf8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	681b      	ldr	r3, [r3, #0]
 800fbf2:	4a21      	ldr	r2, [pc, #132]	; (800fc78 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800fbf4:	4293      	cmp	r3, r2
 800fbf6:	d12b      	bne.n	800fc50 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800fbf8:	68fb      	ldr	r3, [r7, #12]
 800fbfa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800fbfe:	683b      	ldr	r3, [r7, #0]
 800fc00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fc02:	051b      	lsls	r3, r3, #20
 800fc04:	4313      	orrs	r3, r2
 800fc06:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800fc08:	68fb      	ldr	r3, [r7, #12]
 800fc0a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800fc0e:	683b      	ldr	r3, [r7, #0]
 800fc10:	6a1b      	ldr	r3, [r3, #32]
 800fc12:	4313      	orrs	r3, r2
 800fc14:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800fc1c:	683b      	ldr	r3, [r7, #0]
 800fc1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc20:	4313      	orrs	r3, r2
 800fc22:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	4a11      	ldr	r2, [pc, #68]	; (800fc70 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800fc2a:	4293      	cmp	r3, r2
 800fc2c:	d009      	beq.n	800fc42 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	681b      	ldr	r3, [r3, #0]
 800fc32:	4a10      	ldr	r2, [pc, #64]	; (800fc74 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800fc34:	4293      	cmp	r3, r2
 800fc36:	d004      	beq.n	800fc42 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	681b      	ldr	r3, [r3, #0]
 800fc3c:	4a0e      	ldr	r2, [pc, #56]	; (800fc78 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800fc3e:	4293      	cmp	r3, r2
 800fc40:	d106      	bne.n	800fc50 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800fc42:	68fb      	ldr	r3, [r7, #12]
 800fc44:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800fc48:	683b      	ldr	r3, [r7, #0]
 800fc4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fc4c:	4313      	orrs	r3, r2
 800fc4e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	68fa      	ldr	r2, [r7, #12]
 800fc56:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	2200      	movs	r2, #0
 800fc5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800fc60:	2300      	movs	r3, #0
}
 800fc62:	4618      	mov	r0, r3
 800fc64:	3714      	adds	r7, #20
 800fc66:	46bd      	mov	sp, r7
 800fc68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6c:	4770      	bx	lr
 800fc6e:	bf00      	nop
 800fc70:	40012c00 	.word	0x40012c00
 800fc74:	40013400 	.word	0x40013400
 800fc78:	40015000 	.word	0x40015000

0800fc7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800fc7c:	b480      	push	{r7}
 800fc7e:	b083      	sub	sp, #12
 800fc80:	af00      	add	r7, sp, #0
 800fc82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800fc84:	bf00      	nop
 800fc86:	370c      	adds	r7, #12
 800fc88:	46bd      	mov	sp, r7
 800fc8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc8e:	4770      	bx	lr

0800fc90 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800fc90:	b480      	push	{r7}
 800fc92:	b083      	sub	sp, #12
 800fc94:	af00      	add	r7, sp, #0
 800fc96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800fc98:	bf00      	nop
 800fc9a:	370c      	adds	r7, #12
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fca2:	4770      	bx	lr

0800fca4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800fca4:	b480      	push	{r7}
 800fca6:	b083      	sub	sp, #12
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800fcac:	bf00      	nop
 800fcae:	370c      	adds	r7, #12
 800fcb0:	46bd      	mov	sp, r7
 800fcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcb6:	4770      	bx	lr

0800fcb8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800fcb8:	b480      	push	{r7}
 800fcba:	b083      	sub	sp, #12
 800fcbc:	af00      	add	r7, sp, #0
 800fcbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800fcc0:	bf00      	nop
 800fcc2:	370c      	adds	r7, #12
 800fcc4:	46bd      	mov	sp, r7
 800fcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcca:	4770      	bx	lr

0800fccc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800fccc:	b480      	push	{r7}
 800fcce:	b083      	sub	sp, #12
 800fcd0:	af00      	add	r7, sp, #0
 800fcd2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800fcd4:	bf00      	nop
 800fcd6:	370c      	adds	r7, #12
 800fcd8:	46bd      	mov	sp, r7
 800fcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcde:	4770      	bx	lr

0800fce0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800fce0:	b480      	push	{r7}
 800fce2:	b083      	sub	sp, #12
 800fce4:	af00      	add	r7, sp, #0
 800fce6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800fce8:	bf00      	nop
 800fcea:	370c      	adds	r7, #12
 800fcec:	46bd      	mov	sp, r7
 800fcee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcf2:	4770      	bx	lr

0800fcf4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800fcf4:	b480      	push	{r7}
 800fcf6:	b083      	sub	sp, #12
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800fcfc:	bf00      	nop
 800fcfe:	370c      	adds	r7, #12
 800fd00:	46bd      	mov	sp, r7
 800fd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd06:	4770      	bx	lr

0800fd08 <LL_EXTI_EnableIT_0_31>:
{
 800fd08:	b480      	push	{r7}
 800fd0a:	b083      	sub	sp, #12
 800fd0c:	af00      	add	r7, sp, #0
 800fd0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800fd10:	4b05      	ldr	r3, [pc, #20]	; (800fd28 <LL_EXTI_EnableIT_0_31+0x20>)
 800fd12:	681a      	ldr	r2, [r3, #0]
 800fd14:	4904      	ldr	r1, [pc, #16]	; (800fd28 <LL_EXTI_EnableIT_0_31+0x20>)
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	4313      	orrs	r3, r2
 800fd1a:	600b      	str	r3, [r1, #0]
}
 800fd1c:	bf00      	nop
 800fd1e:	370c      	adds	r7, #12
 800fd20:	46bd      	mov	sp, r7
 800fd22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd26:	4770      	bx	lr
 800fd28:	40010400 	.word	0x40010400

0800fd2c <LL_EXTI_EnableIT_32_63>:
{
 800fd2c:	b480      	push	{r7}
 800fd2e:	b083      	sub	sp, #12
 800fd30:	af00      	add	r7, sp, #0
 800fd32:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800fd34:	4b05      	ldr	r3, [pc, #20]	; (800fd4c <LL_EXTI_EnableIT_32_63+0x20>)
 800fd36:	6a1a      	ldr	r2, [r3, #32]
 800fd38:	4904      	ldr	r1, [pc, #16]	; (800fd4c <LL_EXTI_EnableIT_32_63+0x20>)
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	4313      	orrs	r3, r2
 800fd3e:	620b      	str	r3, [r1, #32]
}
 800fd40:	bf00      	nop
 800fd42:	370c      	adds	r7, #12
 800fd44:	46bd      	mov	sp, r7
 800fd46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd4a:	4770      	bx	lr
 800fd4c:	40010400 	.word	0x40010400

0800fd50 <LL_EXTI_DisableIT_0_31>:
{
 800fd50:	b480      	push	{r7}
 800fd52:	b083      	sub	sp, #12
 800fd54:	af00      	add	r7, sp, #0
 800fd56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800fd58:	4b06      	ldr	r3, [pc, #24]	; (800fd74 <LL_EXTI_DisableIT_0_31+0x24>)
 800fd5a:	681a      	ldr	r2, [r3, #0]
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	43db      	mvns	r3, r3
 800fd60:	4904      	ldr	r1, [pc, #16]	; (800fd74 <LL_EXTI_DisableIT_0_31+0x24>)
 800fd62:	4013      	ands	r3, r2
 800fd64:	600b      	str	r3, [r1, #0]
}
 800fd66:	bf00      	nop
 800fd68:	370c      	adds	r7, #12
 800fd6a:	46bd      	mov	sp, r7
 800fd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd70:	4770      	bx	lr
 800fd72:	bf00      	nop
 800fd74:	40010400 	.word	0x40010400

0800fd78 <LL_EXTI_DisableIT_32_63>:
{
 800fd78:	b480      	push	{r7}
 800fd7a:	b083      	sub	sp, #12
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800fd80:	4b06      	ldr	r3, [pc, #24]	; (800fd9c <LL_EXTI_DisableIT_32_63+0x24>)
 800fd82:	6a1a      	ldr	r2, [r3, #32]
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	43db      	mvns	r3, r3
 800fd88:	4904      	ldr	r1, [pc, #16]	; (800fd9c <LL_EXTI_DisableIT_32_63+0x24>)
 800fd8a:	4013      	ands	r3, r2
 800fd8c:	620b      	str	r3, [r1, #32]
}
 800fd8e:	bf00      	nop
 800fd90:	370c      	adds	r7, #12
 800fd92:	46bd      	mov	sp, r7
 800fd94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd98:	4770      	bx	lr
 800fd9a:	bf00      	nop
 800fd9c:	40010400 	.word	0x40010400

0800fda0 <LL_EXTI_EnableEvent_0_31>:
{
 800fda0:	b480      	push	{r7}
 800fda2:	b083      	sub	sp, #12
 800fda4:	af00      	add	r7, sp, #0
 800fda6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800fda8:	4b05      	ldr	r3, [pc, #20]	; (800fdc0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800fdaa:	685a      	ldr	r2, [r3, #4]
 800fdac:	4904      	ldr	r1, [pc, #16]	; (800fdc0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	4313      	orrs	r3, r2
 800fdb2:	604b      	str	r3, [r1, #4]
}
 800fdb4:	bf00      	nop
 800fdb6:	370c      	adds	r7, #12
 800fdb8:	46bd      	mov	sp, r7
 800fdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdbe:	4770      	bx	lr
 800fdc0:	40010400 	.word	0x40010400

0800fdc4 <LL_EXTI_EnableEvent_32_63>:
{
 800fdc4:	b480      	push	{r7}
 800fdc6:	b083      	sub	sp, #12
 800fdc8:	af00      	add	r7, sp, #0
 800fdca:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800fdcc:	4b05      	ldr	r3, [pc, #20]	; (800fde4 <LL_EXTI_EnableEvent_32_63+0x20>)
 800fdce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fdd0:	4904      	ldr	r1, [pc, #16]	; (800fde4 <LL_EXTI_EnableEvent_32_63+0x20>)
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	4313      	orrs	r3, r2
 800fdd6:	624b      	str	r3, [r1, #36]	; 0x24
}
 800fdd8:	bf00      	nop
 800fdda:	370c      	adds	r7, #12
 800fddc:	46bd      	mov	sp, r7
 800fdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde2:	4770      	bx	lr
 800fde4:	40010400 	.word	0x40010400

0800fde8 <LL_EXTI_DisableEvent_0_31>:
{
 800fde8:	b480      	push	{r7}
 800fdea:	b083      	sub	sp, #12
 800fdec:	af00      	add	r7, sp, #0
 800fdee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800fdf0:	4b06      	ldr	r3, [pc, #24]	; (800fe0c <LL_EXTI_DisableEvent_0_31+0x24>)
 800fdf2:	685a      	ldr	r2, [r3, #4]
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	43db      	mvns	r3, r3
 800fdf8:	4904      	ldr	r1, [pc, #16]	; (800fe0c <LL_EXTI_DisableEvent_0_31+0x24>)
 800fdfa:	4013      	ands	r3, r2
 800fdfc:	604b      	str	r3, [r1, #4]
}
 800fdfe:	bf00      	nop
 800fe00:	370c      	adds	r7, #12
 800fe02:	46bd      	mov	sp, r7
 800fe04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe08:	4770      	bx	lr
 800fe0a:	bf00      	nop
 800fe0c:	40010400 	.word	0x40010400

0800fe10 <LL_EXTI_DisableEvent_32_63>:
{
 800fe10:	b480      	push	{r7}
 800fe12:	b083      	sub	sp, #12
 800fe14:	af00      	add	r7, sp, #0
 800fe16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800fe18:	4b06      	ldr	r3, [pc, #24]	; (800fe34 <LL_EXTI_DisableEvent_32_63+0x24>)
 800fe1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	43db      	mvns	r3, r3
 800fe20:	4904      	ldr	r1, [pc, #16]	; (800fe34 <LL_EXTI_DisableEvent_32_63+0x24>)
 800fe22:	4013      	ands	r3, r2
 800fe24:	624b      	str	r3, [r1, #36]	; 0x24
}
 800fe26:	bf00      	nop
 800fe28:	370c      	adds	r7, #12
 800fe2a:	46bd      	mov	sp, r7
 800fe2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe30:	4770      	bx	lr
 800fe32:	bf00      	nop
 800fe34:	40010400 	.word	0x40010400

0800fe38 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800fe38:	b480      	push	{r7}
 800fe3a:	b083      	sub	sp, #12
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800fe40:	4b05      	ldr	r3, [pc, #20]	; (800fe58 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800fe42:	689a      	ldr	r2, [r3, #8]
 800fe44:	4904      	ldr	r1, [pc, #16]	; (800fe58 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	4313      	orrs	r3, r2
 800fe4a:	608b      	str	r3, [r1, #8]
}
 800fe4c:	bf00      	nop
 800fe4e:	370c      	adds	r7, #12
 800fe50:	46bd      	mov	sp, r7
 800fe52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe56:	4770      	bx	lr
 800fe58:	40010400 	.word	0x40010400

0800fe5c <LL_EXTI_EnableRisingTrig_32_63>:
{
 800fe5c:	b480      	push	{r7}
 800fe5e:	b083      	sub	sp, #12
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800fe64:	4b05      	ldr	r3, [pc, #20]	; (800fe7c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800fe66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800fe68:	4904      	ldr	r1, [pc, #16]	; (800fe7c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	4313      	orrs	r3, r2
 800fe6e:	628b      	str	r3, [r1, #40]	; 0x28
}
 800fe70:	bf00      	nop
 800fe72:	370c      	adds	r7, #12
 800fe74:	46bd      	mov	sp, r7
 800fe76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7a:	4770      	bx	lr
 800fe7c:	40010400 	.word	0x40010400

0800fe80 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800fe80:	b480      	push	{r7}
 800fe82:	b083      	sub	sp, #12
 800fe84:	af00      	add	r7, sp, #0
 800fe86:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800fe88:	4b06      	ldr	r3, [pc, #24]	; (800fea4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800fe8a:	689a      	ldr	r2, [r3, #8]
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	43db      	mvns	r3, r3
 800fe90:	4904      	ldr	r1, [pc, #16]	; (800fea4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800fe92:	4013      	ands	r3, r2
 800fe94:	608b      	str	r3, [r1, #8]
}
 800fe96:	bf00      	nop
 800fe98:	370c      	adds	r7, #12
 800fe9a:	46bd      	mov	sp, r7
 800fe9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fea0:	4770      	bx	lr
 800fea2:	bf00      	nop
 800fea4:	40010400 	.word	0x40010400

0800fea8 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800fea8:	b480      	push	{r7}
 800feaa:	b083      	sub	sp, #12
 800feac:	af00      	add	r7, sp, #0
 800feae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800feb0:	4b06      	ldr	r3, [pc, #24]	; (800fecc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800feb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	43db      	mvns	r3, r3
 800feb8:	4904      	ldr	r1, [pc, #16]	; (800fecc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800feba:	4013      	ands	r3, r2
 800febc:	628b      	str	r3, [r1, #40]	; 0x28
}
 800febe:	bf00      	nop
 800fec0:	370c      	adds	r7, #12
 800fec2:	46bd      	mov	sp, r7
 800fec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fec8:	4770      	bx	lr
 800feca:	bf00      	nop
 800fecc:	40010400 	.word	0x40010400

0800fed0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800fed0:	b480      	push	{r7}
 800fed2:	b083      	sub	sp, #12
 800fed4:	af00      	add	r7, sp, #0
 800fed6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800fed8:	4b05      	ldr	r3, [pc, #20]	; (800fef0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800feda:	68da      	ldr	r2, [r3, #12]
 800fedc:	4904      	ldr	r1, [pc, #16]	; (800fef0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800fede:	687b      	ldr	r3, [r7, #4]
 800fee0:	4313      	orrs	r3, r2
 800fee2:	60cb      	str	r3, [r1, #12]
}
 800fee4:	bf00      	nop
 800fee6:	370c      	adds	r7, #12
 800fee8:	46bd      	mov	sp, r7
 800feea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feee:	4770      	bx	lr
 800fef0:	40010400 	.word	0x40010400

0800fef4 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800fef4:	b480      	push	{r7}
 800fef6:	b083      	sub	sp, #12
 800fef8:	af00      	add	r7, sp, #0
 800fefa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800fefc:	4b05      	ldr	r3, [pc, #20]	; (800ff14 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800fefe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff00:	4904      	ldr	r1, [pc, #16]	; (800ff14 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	4313      	orrs	r3, r2
 800ff06:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800ff08:	bf00      	nop
 800ff0a:	370c      	adds	r7, #12
 800ff0c:	46bd      	mov	sp, r7
 800ff0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff12:	4770      	bx	lr
 800ff14:	40010400 	.word	0x40010400

0800ff18 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800ff18:	b480      	push	{r7}
 800ff1a:	b083      	sub	sp, #12
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800ff20:	4b06      	ldr	r3, [pc, #24]	; (800ff3c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800ff22:	68da      	ldr	r2, [r3, #12]
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	43db      	mvns	r3, r3
 800ff28:	4904      	ldr	r1, [pc, #16]	; (800ff3c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800ff2a:	4013      	ands	r3, r2
 800ff2c:	60cb      	str	r3, [r1, #12]
}
 800ff2e:	bf00      	nop
 800ff30:	370c      	adds	r7, #12
 800ff32:	46bd      	mov	sp, r7
 800ff34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff38:	4770      	bx	lr
 800ff3a:	bf00      	nop
 800ff3c:	40010400 	.word	0x40010400

0800ff40 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800ff40:	b480      	push	{r7}
 800ff42:	b083      	sub	sp, #12
 800ff44:	af00      	add	r7, sp, #0
 800ff46:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800ff48:	4b06      	ldr	r3, [pc, #24]	; (800ff64 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800ff4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	43db      	mvns	r3, r3
 800ff50:	4904      	ldr	r1, [pc, #16]	; (800ff64 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800ff52:	4013      	ands	r3, r2
 800ff54:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800ff56:	bf00      	nop
 800ff58:	370c      	adds	r7, #12
 800ff5a:	46bd      	mov	sp, r7
 800ff5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff60:	4770      	bx	lr
 800ff62:	bf00      	nop
 800ff64:	40010400 	.word	0x40010400

0800ff68 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b084      	sub	sp, #16
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800ff70:	2300      	movs	r3, #0
 800ff72:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	7a1b      	ldrb	r3, [r3, #8]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	f000 80c8 	beq.w	801010e <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	681b      	ldr	r3, [r3, #0]
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d05d      	beq.n	8010042 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	7a5b      	ldrb	r3, [r3, #9]
 800ff8a:	2b01      	cmp	r3, #1
 800ff8c:	d00e      	beq.n	800ffac <LL_EXTI_Init+0x44>
 800ff8e:	2b02      	cmp	r3, #2
 800ff90:	d017      	beq.n	800ffc2 <LL_EXTI_Init+0x5a>
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	d120      	bne.n	800ffd8 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	681b      	ldr	r3, [r3, #0]
 800ff9a:	4618      	mov	r0, r3
 800ff9c:	f7ff ff24 	bl	800fde8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	f7ff feaf 	bl	800fd08 <LL_EXTI_EnableIT_0_31>
          break;
 800ffaa:	e018      	b.n	800ffde <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ffac:	687b      	ldr	r3, [r7, #4]
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	4618      	mov	r0, r3
 800ffb2:	f7ff fecd 	bl	800fd50 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	4618      	mov	r0, r3
 800ffbc:	f7ff fef0 	bl	800fda0 <LL_EXTI_EnableEvent_0_31>
          break;
 800ffc0:	e00d      	b.n	800ffde <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	681b      	ldr	r3, [r3, #0]
 800ffc6:	4618      	mov	r0, r3
 800ffc8:	f7ff fe9e 	bl	800fd08 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	4618      	mov	r0, r3
 800ffd2:	f7ff fee5 	bl	800fda0 <LL_EXTI_EnableEvent_0_31>
          break;
 800ffd6:	e002      	b.n	800ffde <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800ffd8:	2301      	movs	r3, #1
 800ffda:	60fb      	str	r3, [r7, #12]
          break;
 800ffdc:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	7a9b      	ldrb	r3, [r3, #10]
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d02d      	beq.n	8010042 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	7a9b      	ldrb	r3, [r3, #10]
 800ffea:	2b02      	cmp	r3, #2
 800ffec:	d00e      	beq.n	801000c <LL_EXTI_Init+0xa4>
 800ffee:	2b03      	cmp	r3, #3
 800fff0:	d017      	beq.n	8010022 <LL_EXTI_Init+0xba>
 800fff2:	2b01      	cmp	r3, #1
 800fff4:	d120      	bne.n	8010038 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800fff6:	687b      	ldr	r3, [r7, #4]
 800fff8:	681b      	ldr	r3, [r3, #0]
 800fffa:	4618      	mov	r0, r3
 800fffc:	f7ff ff8c 	bl	800ff18 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	4618      	mov	r0, r3
 8010006:	f7ff ff17 	bl	800fe38 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 801000a:	e01b      	b.n	8010044 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 801000c:	687b      	ldr	r3, [r7, #4]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	4618      	mov	r0, r3
 8010012:	f7ff ff35 	bl	800fe80 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8010016:	687b      	ldr	r3, [r7, #4]
 8010018:	681b      	ldr	r3, [r3, #0]
 801001a:	4618      	mov	r0, r3
 801001c:	f7ff ff58 	bl	800fed0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8010020:	e010      	b.n	8010044 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8010022:	687b      	ldr	r3, [r7, #4]
 8010024:	681b      	ldr	r3, [r3, #0]
 8010026:	4618      	mov	r0, r3
 8010028:	f7ff ff06 	bl	800fe38 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	4618      	mov	r0, r3
 8010032:	f7ff ff4d 	bl	800fed0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8010036:	e005      	b.n	8010044 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8010038:	68fb      	ldr	r3, [r7, #12]
 801003a:	f043 0302 	orr.w	r3, r3, #2
 801003e:	60fb      	str	r3, [r7, #12]
            break;
 8010040:	e000      	b.n	8010044 <LL_EXTI_Init+0xdc>
        }
      }
 8010042:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	685b      	ldr	r3, [r3, #4]
 8010048:	2b00      	cmp	r3, #0
 801004a:	d075      	beq.n	8010138 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	7a5b      	ldrb	r3, [r3, #9]
 8010050:	2b01      	cmp	r3, #1
 8010052:	d00e      	beq.n	8010072 <LL_EXTI_Init+0x10a>
 8010054:	2b02      	cmp	r3, #2
 8010056:	d017      	beq.n	8010088 <LL_EXTI_Init+0x120>
 8010058:	2b00      	cmp	r3, #0
 801005a:	d120      	bne.n	801009e <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	685b      	ldr	r3, [r3, #4]
 8010060:	4618      	mov	r0, r3
 8010062:	f7ff fed5 	bl	800fe10 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	685b      	ldr	r3, [r3, #4]
 801006a:	4618      	mov	r0, r3
 801006c:	f7ff fe5e 	bl	800fd2c <LL_EXTI_EnableIT_32_63>
          break;
 8010070:	e01a      	b.n	80100a8 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	685b      	ldr	r3, [r3, #4]
 8010076:	4618      	mov	r0, r3
 8010078:	f7ff fe7e 	bl	800fd78 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	685b      	ldr	r3, [r3, #4]
 8010080:	4618      	mov	r0, r3
 8010082:	f7ff fe9f 	bl	800fdc4 <LL_EXTI_EnableEvent_32_63>
          break;
 8010086:	e00f      	b.n	80100a8 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8010088:	687b      	ldr	r3, [r7, #4]
 801008a:	685b      	ldr	r3, [r3, #4]
 801008c:	4618      	mov	r0, r3
 801008e:	f7ff fe4d 	bl	800fd2c <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	685b      	ldr	r3, [r3, #4]
 8010096:	4618      	mov	r0, r3
 8010098:	f7ff fe94 	bl	800fdc4 <LL_EXTI_EnableEvent_32_63>
          break;
 801009c:	e004      	b.n	80100a8 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 801009e:	68fb      	ldr	r3, [r7, #12]
 80100a0:	f043 0304 	orr.w	r3, r3, #4
 80100a4:	60fb      	str	r3, [r7, #12]
          break;
 80100a6:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	7a9b      	ldrb	r3, [r3, #10]
 80100ac:	2b00      	cmp	r3, #0
 80100ae:	d043      	beq.n	8010138 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	7a9b      	ldrb	r3, [r3, #10]
 80100b4:	2b02      	cmp	r3, #2
 80100b6:	d00e      	beq.n	80100d6 <LL_EXTI_Init+0x16e>
 80100b8:	2b03      	cmp	r3, #3
 80100ba:	d017      	beq.n	80100ec <LL_EXTI_Init+0x184>
 80100bc:	2b01      	cmp	r3, #1
 80100be:	d120      	bne.n	8010102 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	685b      	ldr	r3, [r3, #4]
 80100c4:	4618      	mov	r0, r3
 80100c6:	f7ff ff3b 	bl	800ff40 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	685b      	ldr	r3, [r3, #4]
 80100ce:	4618      	mov	r0, r3
 80100d0:	f7ff fec4 	bl	800fe5c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80100d4:	e031      	b.n	801013a <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	685b      	ldr	r3, [r3, #4]
 80100da:	4618      	mov	r0, r3
 80100dc:	f7ff fee4 	bl	800fea8 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	685b      	ldr	r3, [r3, #4]
 80100e4:	4618      	mov	r0, r3
 80100e6:	f7ff ff05 	bl	800fef4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80100ea:	e026      	b.n	801013a <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	685b      	ldr	r3, [r3, #4]
 80100f0:	4618      	mov	r0, r3
 80100f2:	f7ff feb3 	bl	800fe5c <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	685b      	ldr	r3, [r3, #4]
 80100fa:	4618      	mov	r0, r3
 80100fc:	f7ff fefa 	bl	800fef4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8010100:	e01b      	b.n	801013a <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	f043 0305 	orr.w	r3, r3, #5
 8010108:	60fb      	str	r3, [r7, #12]
            break;
 801010a:	bf00      	nop
 801010c:	e015      	b.n	801013a <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	681b      	ldr	r3, [r3, #0]
 8010112:	4618      	mov	r0, r3
 8010114:	f7ff fe1c 	bl	800fd50 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	681b      	ldr	r3, [r3, #0]
 801011c:	4618      	mov	r0, r3
 801011e:	f7ff fe63 	bl	800fde8 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	685b      	ldr	r3, [r3, #4]
 8010126:	4618      	mov	r0, r3
 8010128:	f7ff fe26 	bl	800fd78 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	685b      	ldr	r3, [r3, #4]
 8010130:	4618      	mov	r0, r3
 8010132:	f7ff fe6d 	bl	800fe10 <LL_EXTI_DisableEvent_32_63>
 8010136:	e000      	b.n	801013a <LL_EXTI_Init+0x1d2>
      }
 8010138:	bf00      	nop
  }

  return status;
 801013a:	68fb      	ldr	r3, [r7, #12]
}
 801013c:	4618      	mov	r0, r3
 801013e:	3710      	adds	r7, #16
 8010140:	46bd      	mov	sp, r7
 8010142:	bd80      	pop	{r7, pc}

08010144 <LL_GPIO_SetPinMode>:
{
 8010144:	b480      	push	{r7}
 8010146:	b089      	sub	sp, #36	; 0x24
 8010148:	af00      	add	r7, sp, #0
 801014a:	60f8      	str	r0, [r7, #12]
 801014c:	60b9      	str	r1, [r7, #8]
 801014e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	681a      	ldr	r2, [r3, #0]
 8010154:	68bb      	ldr	r3, [r7, #8]
 8010156:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010158:	697b      	ldr	r3, [r7, #20]
 801015a:	fa93 f3a3 	rbit	r3, r3
 801015e:	613b      	str	r3, [r7, #16]
  return result;
 8010160:	693b      	ldr	r3, [r7, #16]
 8010162:	fab3 f383 	clz	r3, r3
 8010166:	b2db      	uxtb	r3, r3
 8010168:	005b      	lsls	r3, r3, #1
 801016a:	2103      	movs	r1, #3
 801016c:	fa01 f303 	lsl.w	r3, r1, r3
 8010170:	43db      	mvns	r3, r3
 8010172:	401a      	ands	r2, r3
 8010174:	68bb      	ldr	r3, [r7, #8]
 8010176:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010178:	69fb      	ldr	r3, [r7, #28]
 801017a:	fa93 f3a3 	rbit	r3, r3
 801017e:	61bb      	str	r3, [r7, #24]
  return result;
 8010180:	69bb      	ldr	r3, [r7, #24]
 8010182:	fab3 f383 	clz	r3, r3
 8010186:	b2db      	uxtb	r3, r3
 8010188:	005b      	lsls	r3, r3, #1
 801018a:	6879      	ldr	r1, [r7, #4]
 801018c:	fa01 f303 	lsl.w	r3, r1, r3
 8010190:	431a      	orrs	r2, r3
 8010192:	68fb      	ldr	r3, [r7, #12]
 8010194:	601a      	str	r2, [r3, #0]
}
 8010196:	bf00      	nop
 8010198:	3724      	adds	r7, #36	; 0x24
 801019a:	46bd      	mov	sp, r7
 801019c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a0:	4770      	bx	lr

080101a2 <LL_GPIO_SetPinOutputType>:
{
 80101a2:	b480      	push	{r7}
 80101a4:	b085      	sub	sp, #20
 80101a6:	af00      	add	r7, sp, #0
 80101a8:	60f8      	str	r0, [r7, #12]
 80101aa:	60b9      	str	r1, [r7, #8]
 80101ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	685a      	ldr	r2, [r3, #4]
 80101b2:	68bb      	ldr	r3, [r7, #8]
 80101b4:	43db      	mvns	r3, r3
 80101b6:	401a      	ands	r2, r3
 80101b8:	68bb      	ldr	r3, [r7, #8]
 80101ba:	6879      	ldr	r1, [r7, #4]
 80101bc:	fb01 f303 	mul.w	r3, r1, r3
 80101c0:	431a      	orrs	r2, r3
 80101c2:	68fb      	ldr	r3, [r7, #12]
 80101c4:	605a      	str	r2, [r3, #4]
}
 80101c6:	bf00      	nop
 80101c8:	3714      	adds	r7, #20
 80101ca:	46bd      	mov	sp, r7
 80101cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101d0:	4770      	bx	lr

080101d2 <LL_GPIO_SetPinSpeed>:
{
 80101d2:	b480      	push	{r7}
 80101d4:	b089      	sub	sp, #36	; 0x24
 80101d6:	af00      	add	r7, sp, #0
 80101d8:	60f8      	str	r0, [r7, #12]
 80101da:	60b9      	str	r1, [r7, #8]
 80101dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80101de:	68fb      	ldr	r3, [r7, #12]
 80101e0:	689a      	ldr	r2, [r3, #8]
 80101e2:	68bb      	ldr	r3, [r7, #8]
 80101e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80101e6:	697b      	ldr	r3, [r7, #20]
 80101e8:	fa93 f3a3 	rbit	r3, r3
 80101ec:	613b      	str	r3, [r7, #16]
  return result;
 80101ee:	693b      	ldr	r3, [r7, #16]
 80101f0:	fab3 f383 	clz	r3, r3
 80101f4:	b2db      	uxtb	r3, r3
 80101f6:	005b      	lsls	r3, r3, #1
 80101f8:	2103      	movs	r1, #3
 80101fa:	fa01 f303 	lsl.w	r3, r1, r3
 80101fe:	43db      	mvns	r3, r3
 8010200:	401a      	ands	r2, r3
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010206:	69fb      	ldr	r3, [r7, #28]
 8010208:	fa93 f3a3 	rbit	r3, r3
 801020c:	61bb      	str	r3, [r7, #24]
  return result;
 801020e:	69bb      	ldr	r3, [r7, #24]
 8010210:	fab3 f383 	clz	r3, r3
 8010214:	b2db      	uxtb	r3, r3
 8010216:	005b      	lsls	r3, r3, #1
 8010218:	6879      	ldr	r1, [r7, #4]
 801021a:	fa01 f303 	lsl.w	r3, r1, r3
 801021e:	431a      	orrs	r2, r3
 8010220:	68fb      	ldr	r3, [r7, #12]
 8010222:	609a      	str	r2, [r3, #8]
}
 8010224:	bf00      	nop
 8010226:	3724      	adds	r7, #36	; 0x24
 8010228:	46bd      	mov	sp, r7
 801022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022e:	4770      	bx	lr

08010230 <LL_GPIO_SetPinPull>:
{
 8010230:	b480      	push	{r7}
 8010232:	b089      	sub	sp, #36	; 0x24
 8010234:	af00      	add	r7, sp, #0
 8010236:	60f8      	str	r0, [r7, #12]
 8010238:	60b9      	str	r1, [r7, #8]
 801023a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 801023c:	68fb      	ldr	r3, [r7, #12]
 801023e:	68da      	ldr	r2, [r3, #12]
 8010240:	68bb      	ldr	r3, [r7, #8]
 8010242:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010244:	697b      	ldr	r3, [r7, #20]
 8010246:	fa93 f3a3 	rbit	r3, r3
 801024a:	613b      	str	r3, [r7, #16]
  return result;
 801024c:	693b      	ldr	r3, [r7, #16]
 801024e:	fab3 f383 	clz	r3, r3
 8010252:	b2db      	uxtb	r3, r3
 8010254:	005b      	lsls	r3, r3, #1
 8010256:	2103      	movs	r1, #3
 8010258:	fa01 f303 	lsl.w	r3, r1, r3
 801025c:	43db      	mvns	r3, r3
 801025e:	401a      	ands	r2, r3
 8010260:	68bb      	ldr	r3, [r7, #8]
 8010262:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010264:	69fb      	ldr	r3, [r7, #28]
 8010266:	fa93 f3a3 	rbit	r3, r3
 801026a:	61bb      	str	r3, [r7, #24]
  return result;
 801026c:	69bb      	ldr	r3, [r7, #24]
 801026e:	fab3 f383 	clz	r3, r3
 8010272:	b2db      	uxtb	r3, r3
 8010274:	005b      	lsls	r3, r3, #1
 8010276:	6879      	ldr	r1, [r7, #4]
 8010278:	fa01 f303 	lsl.w	r3, r1, r3
 801027c:	431a      	orrs	r2, r3
 801027e:	68fb      	ldr	r3, [r7, #12]
 8010280:	60da      	str	r2, [r3, #12]
}
 8010282:	bf00      	nop
 8010284:	3724      	adds	r7, #36	; 0x24
 8010286:	46bd      	mov	sp, r7
 8010288:	f85d 7b04 	ldr.w	r7, [sp], #4
 801028c:	4770      	bx	lr

0801028e <LL_GPIO_SetAFPin_0_7>:
{
 801028e:	b480      	push	{r7}
 8010290:	b089      	sub	sp, #36	; 0x24
 8010292:	af00      	add	r7, sp, #0
 8010294:	60f8      	str	r0, [r7, #12]
 8010296:	60b9      	str	r1, [r7, #8]
 8010298:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 801029a:	68fb      	ldr	r3, [r7, #12]
 801029c:	6a1a      	ldr	r2, [r3, #32]
 801029e:	68bb      	ldr	r3, [r7, #8]
 80102a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80102a2:	697b      	ldr	r3, [r7, #20]
 80102a4:	fa93 f3a3 	rbit	r3, r3
 80102a8:	613b      	str	r3, [r7, #16]
  return result;
 80102aa:	693b      	ldr	r3, [r7, #16]
 80102ac:	fab3 f383 	clz	r3, r3
 80102b0:	b2db      	uxtb	r3, r3
 80102b2:	009b      	lsls	r3, r3, #2
 80102b4:	210f      	movs	r1, #15
 80102b6:	fa01 f303 	lsl.w	r3, r1, r3
 80102ba:	43db      	mvns	r3, r3
 80102bc:	401a      	ands	r2, r3
 80102be:	68bb      	ldr	r3, [r7, #8]
 80102c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80102c2:	69fb      	ldr	r3, [r7, #28]
 80102c4:	fa93 f3a3 	rbit	r3, r3
 80102c8:	61bb      	str	r3, [r7, #24]
  return result;
 80102ca:	69bb      	ldr	r3, [r7, #24]
 80102cc:	fab3 f383 	clz	r3, r3
 80102d0:	b2db      	uxtb	r3, r3
 80102d2:	009b      	lsls	r3, r3, #2
 80102d4:	6879      	ldr	r1, [r7, #4]
 80102d6:	fa01 f303 	lsl.w	r3, r1, r3
 80102da:	431a      	orrs	r2, r3
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	621a      	str	r2, [r3, #32]
}
 80102e0:	bf00      	nop
 80102e2:	3724      	adds	r7, #36	; 0x24
 80102e4:	46bd      	mov	sp, r7
 80102e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102ea:	4770      	bx	lr

080102ec <LL_GPIO_SetAFPin_8_15>:
{
 80102ec:	b480      	push	{r7}
 80102ee:	b089      	sub	sp, #36	; 0x24
 80102f0:	af00      	add	r7, sp, #0
 80102f2:	60f8      	str	r0, [r7, #12]
 80102f4:	60b9      	str	r1, [r7, #8]
 80102f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80102fc:	68bb      	ldr	r3, [r7, #8]
 80102fe:	0a1b      	lsrs	r3, r3, #8
 8010300:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010302:	697b      	ldr	r3, [r7, #20]
 8010304:	fa93 f3a3 	rbit	r3, r3
 8010308:	613b      	str	r3, [r7, #16]
  return result;
 801030a:	693b      	ldr	r3, [r7, #16]
 801030c:	fab3 f383 	clz	r3, r3
 8010310:	b2db      	uxtb	r3, r3
 8010312:	009b      	lsls	r3, r3, #2
 8010314:	210f      	movs	r1, #15
 8010316:	fa01 f303 	lsl.w	r3, r1, r3
 801031a:	43db      	mvns	r3, r3
 801031c:	401a      	ands	r2, r3
 801031e:	68bb      	ldr	r3, [r7, #8]
 8010320:	0a1b      	lsrs	r3, r3, #8
 8010322:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8010324:	69fb      	ldr	r3, [r7, #28]
 8010326:	fa93 f3a3 	rbit	r3, r3
 801032a:	61bb      	str	r3, [r7, #24]
  return result;
 801032c:	69bb      	ldr	r3, [r7, #24]
 801032e:	fab3 f383 	clz	r3, r3
 8010332:	b2db      	uxtb	r3, r3
 8010334:	009b      	lsls	r3, r3, #2
 8010336:	6879      	ldr	r1, [r7, #4]
 8010338:	fa01 f303 	lsl.w	r3, r1, r3
 801033c:	431a      	orrs	r2, r3
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	625a      	str	r2, [r3, #36]	; 0x24
}
 8010342:	bf00      	nop
 8010344:	3724      	adds	r7, #36	; 0x24
 8010346:	46bd      	mov	sp, r7
 8010348:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034c:	4770      	bx	lr

0801034e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 801034e:	b580      	push	{r7, lr}
 8010350:	b086      	sub	sp, #24
 8010352:	af00      	add	r7, sp, #0
 8010354:	6078      	str	r0, [r7, #4]
 8010356:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8010358:	683b      	ldr	r3, [r7, #0]
 801035a:	681b      	ldr	r3, [r3, #0]
 801035c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801035e:	68fb      	ldr	r3, [r7, #12]
 8010360:	fa93 f3a3 	rbit	r3, r3
 8010364:	60bb      	str	r3, [r7, #8]
  return result;
 8010366:	68bb      	ldr	r3, [r7, #8]
 8010368:	fab3 f383 	clz	r3, r3
 801036c:	b2db      	uxtb	r3, r3
 801036e:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8010370:	e040      	b.n	80103f4 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8010372:	683b      	ldr	r3, [r7, #0]
 8010374:	681a      	ldr	r2, [r3, #0]
 8010376:	2101      	movs	r1, #1
 8010378:	697b      	ldr	r3, [r7, #20]
 801037a:	fa01 f303 	lsl.w	r3, r1, r3
 801037e:	4013      	ands	r3, r2
 8010380:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 8010382:	693b      	ldr	r3, [r7, #16]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d032      	beq.n	80103ee <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8010388:	683b      	ldr	r3, [r7, #0]
 801038a:	685b      	ldr	r3, [r3, #4]
 801038c:	461a      	mov	r2, r3
 801038e:	6939      	ldr	r1, [r7, #16]
 8010390:	6878      	ldr	r0, [r7, #4]
 8010392:	f7ff fed7 	bl	8010144 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8010396:	683b      	ldr	r3, [r7, #0]
 8010398:	685b      	ldr	r3, [r3, #4]
 801039a:	2b01      	cmp	r3, #1
 801039c:	d003      	beq.n	80103a6 <LL_GPIO_Init+0x58>
 801039e:	683b      	ldr	r3, [r7, #0]
 80103a0:	685b      	ldr	r3, [r3, #4]
 80103a2:	2b02      	cmp	r3, #2
 80103a4:	d106      	bne.n	80103b4 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80103a6:	683b      	ldr	r3, [r7, #0]
 80103a8:	689b      	ldr	r3, [r3, #8]
 80103aa:	461a      	mov	r2, r3
 80103ac:	6939      	ldr	r1, [r7, #16]
 80103ae:	6878      	ldr	r0, [r7, #4]
 80103b0:	f7ff ff0f 	bl	80101d2 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80103b4:	683b      	ldr	r3, [r7, #0]
 80103b6:	691b      	ldr	r3, [r3, #16]
 80103b8:	461a      	mov	r2, r3
 80103ba:	6939      	ldr	r1, [r7, #16]
 80103bc:	6878      	ldr	r0, [r7, #4]
 80103be:	f7ff ff37 	bl	8010230 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80103c2:	683b      	ldr	r3, [r7, #0]
 80103c4:	685b      	ldr	r3, [r3, #4]
 80103c6:	2b02      	cmp	r3, #2
 80103c8:	d111      	bne.n	80103ee <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80103ca:	693b      	ldr	r3, [r7, #16]
 80103cc:	2bff      	cmp	r3, #255	; 0xff
 80103ce:	d807      	bhi.n	80103e0 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80103d0:	683b      	ldr	r3, [r7, #0]
 80103d2:	695b      	ldr	r3, [r3, #20]
 80103d4:	461a      	mov	r2, r3
 80103d6:	6939      	ldr	r1, [r7, #16]
 80103d8:	6878      	ldr	r0, [r7, #4]
 80103da:	f7ff ff58 	bl	801028e <LL_GPIO_SetAFPin_0_7>
 80103de:	e006      	b.n	80103ee <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80103e0:	683b      	ldr	r3, [r7, #0]
 80103e2:	695b      	ldr	r3, [r3, #20]
 80103e4:	461a      	mov	r2, r3
 80103e6:	6939      	ldr	r1, [r7, #16]
 80103e8:	6878      	ldr	r0, [r7, #4]
 80103ea:	f7ff ff7f 	bl	80102ec <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80103ee:	697b      	ldr	r3, [r7, #20]
 80103f0:	3301      	adds	r3, #1
 80103f2:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80103f4:	683b      	ldr	r3, [r7, #0]
 80103f6:	681a      	ldr	r2, [r3, #0]
 80103f8:	697b      	ldr	r3, [r7, #20]
 80103fa:	fa22 f303 	lsr.w	r3, r2, r3
 80103fe:	2b00      	cmp	r3, #0
 8010400:	d1b7      	bne.n	8010372 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	685b      	ldr	r3, [r3, #4]
 8010406:	2b01      	cmp	r3, #1
 8010408:	d003      	beq.n	8010412 <LL_GPIO_Init+0xc4>
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	685b      	ldr	r3, [r3, #4]
 801040e:	2b02      	cmp	r3, #2
 8010410:	d107      	bne.n	8010422 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	6819      	ldr	r1, [r3, #0]
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	68db      	ldr	r3, [r3, #12]
 801041a:	461a      	mov	r2, r3
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	f7ff fec0 	bl	80101a2 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8010422:	2300      	movs	r3, #0
}
 8010424:	4618      	mov	r0, r3
 8010426:	3718      	adds	r7, #24
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}

0801042c <ILI9341_Draw_Wave>:

 extern uint16_t BURST_MAX_SIZE;


void ILI9341_Draw_Wave(uint16_t x, uint16_t y, uint8_t weight, uint16_t colour, uint8_t scale, uint32_t* data_table, uint16_t data_table_size)
{
 801042c:	b590      	push	{r4, r7, lr}
 801042e:	b085      	sub	sp, #20
 8010430:	af00      	add	r7, sp, #0
 8010432:	4604      	mov	r4, r0
 8010434:	4608      	mov	r0, r1
 8010436:	4611      	mov	r1, r2
 8010438:	461a      	mov	r2, r3
 801043a:	4623      	mov	r3, r4
 801043c:	80fb      	strh	r3, [r7, #6]
 801043e:	4603      	mov	r3, r0
 8010440:	80bb      	strh	r3, [r7, #4]
 8010442:	460b      	mov	r3, r1
 8010444:	70fb      	strb	r3, [r7, #3]
 8010446:	4613      	mov	r3, r2
 8010448:	803b      	strh	r3, [r7, #0]
	for(int w = 0; w < weight; w++ )
 801044a:	2300      	movs	r3, #0
 801044c:	60fb      	str	r3, [r7, #12]
 801044e:	e026      	b.n	801049e <ILI9341_Draw_Wave+0x72>
	{
		for(int i = 0; i < data_table_size; i++)
 8010450:	2300      	movs	r3, #0
 8010452:	60bb      	str	r3, [r7, #8]
 8010454:	e01c      	b.n	8010490 <ILI9341_Draw_Wave+0x64>
		{
			ILI9341_Draw_Pixel(	x + i,	(y + data_table[i] / scale) + w, colour);
 8010456:	68bb      	ldr	r3, [r7, #8]
 8010458:	b29a      	uxth	r2, r3
 801045a:	88fb      	ldrh	r3, [r7, #6]
 801045c:	4413      	add	r3, r2
 801045e:	b298      	uxth	r0, r3
 8010460:	68bb      	ldr	r3, [r7, #8]
 8010462:	009b      	lsls	r3, r3, #2
 8010464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010466:	4413      	add	r3, r2
 8010468:	681a      	ldr	r2, [r3, #0]
 801046a:	f897 3020 	ldrb.w	r3, [r7, #32]
 801046e:	fbb2 f3f3 	udiv	r3, r2, r3
 8010472:	b29a      	uxth	r2, r3
 8010474:	88bb      	ldrh	r3, [r7, #4]
 8010476:	4413      	add	r3, r2
 8010478:	b29a      	uxth	r2, r3
 801047a:	68fb      	ldr	r3, [r7, #12]
 801047c:	b29b      	uxth	r3, r3
 801047e:	4413      	add	r3, r2
 8010480:	b29b      	uxth	r3, r3
 8010482:	883a      	ldrh	r2, [r7, #0]
 8010484:	4619      	mov	r1, r3
 8010486:	f000 fc1f 	bl	8010cc8 <ILI9341_Draw_Pixel>
		for(int i = 0; i < data_table_size; i++)
 801048a:	68bb      	ldr	r3, [r7, #8]
 801048c:	3301      	adds	r3, #1
 801048e:	60bb      	str	r3, [r7, #8]
 8010490:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010492:	68ba      	ldr	r2, [r7, #8]
 8010494:	429a      	cmp	r2, r3
 8010496:	dbde      	blt.n	8010456 <ILI9341_Draw_Wave+0x2a>
	for(int w = 0; w < weight; w++ )
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	3301      	adds	r3, #1
 801049c:	60fb      	str	r3, [r7, #12]
 801049e:	78fb      	ldrb	r3, [r7, #3]
 80104a0:	68fa      	ldr	r2, [r7, #12]
 80104a2:	429a      	cmp	r2, r3
 80104a4:	dbd4      	blt.n	8010450 <ILI9341_Draw_Wave+0x24>

		}
	}

}
 80104a6:	bf00      	nop
 80104a8:	3714      	adds	r7, #20
 80104aa:	46bd      	mov	sp, r7
 80104ac:	bd90      	pop	{r4, r7, pc}

080104ae <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint16_t border_colour)
{
 80104ae:	b590      	push	{r4, r7, lr}
 80104b0:	b087      	sub	sp, #28
 80104b2:	af02      	add	r7, sp, #8
 80104b4:	4604      	mov	r4, r0
 80104b6:	4608      	mov	r0, r1
 80104b8:	4611      	mov	r1, r2
 80104ba:	461a      	mov	r2, r3
 80104bc:	4623      	mov	r3, r4
 80104be:	80fb      	strh	r3, [r7, #6]
 80104c0:	4603      	mov	r3, r0
 80104c2:	80bb      	strh	r3, [r7, #4]
 80104c4:	460b      	mov	r3, r1
 80104c6:	807b      	strh	r3, [r7, #2]
 80104c8:	4613      	mov	r3, r2
 80104ca:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 80104cc:	2300      	movs	r3, #0
 80104ce:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 80104d0:	7bfa      	ldrb	r2, [r7, #15]
 80104d2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80104d6:	429a      	cmp	r2, r3
 80104d8:	d939      	bls.n	801054e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa0>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 80104da:	88ba      	ldrh	r2, [r7, #4]
 80104dc:	7bfb      	ldrb	r3, [r7, #15]
 80104de:	441a      	add	r2, r3
 80104e0:	88b9      	ldrh	r1, [r7, #4]
 80104e2:	883b      	ldrh	r3, [r7, #0]
 80104e4:	4419      	add	r1, r3
 80104e6:	7bfb      	ldrb	r3, [r7, #15]
 80104e8:	1acb      	subs	r3, r1, r3
 80104ea:	429a      	cmp	r2, r3
 80104ec:	f000 8089 	beq.w	8010602 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
 80104f0:	88fa      	ldrh	r2, [r7, #6]
 80104f2:	7bfb      	ldrb	r3, [r7, #15]
 80104f4:	441a      	add	r2, r3
 80104f6:	88f9      	ldrh	r1, [r7, #6]
 80104f8:	887b      	ldrh	r3, [r7, #2]
 80104fa:	4419      	add	r1, r3
 80104fc:	7bfb      	ldrb	r3, [r7, #15]
 80104fe:	1acb      	subs	r3, r1, r3
 8010500:	429a      	cmp	r2, r3
 8010502:	d07e      	beq.n	8010602 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 8010504:	7bfb      	ldrb	r3, [r7, #15]
 8010506:	b29a      	uxth	r2, r3
 8010508:	88fb      	ldrh	r3, [r7, #6]
 801050a:	4413      	add	r3, r2
 801050c:	b298      	uxth	r0, r3
 801050e:	7bfb      	ldrb	r3, [r7, #15]
 8010510:	b29a      	uxth	r2, r3
 8010512:	88bb      	ldrh	r3, [r7, #4]
 8010514:	4413      	add	r3, r2
 8010516:	b299      	uxth	r1, r3
 8010518:	7bfb      	ldrb	r3, [r7, #15]
 801051a:	b29b      	uxth	r3, r3
 801051c:	005b      	lsls	r3, r3, #1
 801051e:	b29b      	uxth	r3, r3
 8010520:	887a      	ldrh	r2, [r7, #2]
 8010522:	1ad3      	subs	r3, r2, r3
 8010524:	b29b      	uxth	r3, r3
 8010526:	3301      	adds	r3, #1
 8010528:	b29c      	uxth	r4, r3
 801052a:	7bfb      	ldrb	r3, [r7, #15]
 801052c:	b29b      	uxth	r3, r3
 801052e:	005b      	lsls	r3, r3, #1
 8010530:	b29b      	uxth	r3, r3
 8010532:	883a      	ldrh	r2, [r7, #0]
 8010534:	1ad3      	subs	r3, r2, r3
 8010536:	b29b      	uxth	r3, r3
 8010538:	3301      	adds	r3, #1
 801053a:	b29a      	uxth	r2, r3
 801053c:	2304      	movs	r3, #4
 801053e:	9301      	str	r3, [sp, #4]
 8010540:	8c3b      	ldrh	r3, [r7, #32]
 8010542:	9300      	str	r3, [sp, #0]
 8010544:	4613      	mov	r3, r2
 8010546:	4622      	mov	r2, r4
 8010548:	f000 fd18 	bl	8010f7c <ILI9341_Draw_Rectangle>
				goto finish;
 801054c:	e05a      	b.n	8010604 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x156>
			}
		}

		// Horizontal line - Top
		ILI9341_Draw_Horizontal_Line(	x + b,
 801054e:	7bfb      	ldrb	r3, [r7, #15]
 8010550:	b29a      	uxth	r2, r3
 8010552:	88fb      	ldrh	r3, [r7, #6]
 8010554:	4413      	add	r3, r2
 8010556:	b298      	uxth	r0, r3
 8010558:	7bfb      	ldrb	r3, [r7, #15]
 801055a:	b29a      	uxth	r2, r3
 801055c:	88bb      	ldrh	r3, [r7, #4]
 801055e:	4413      	add	r3, r2
 8010560:	b299      	uxth	r1, r3
										y + b,
										(w - b)+1,
 8010562:	7bfb      	ldrb	r3, [r7, #15]
 8010564:	b29b      	uxth	r3, r3
 8010566:	887a      	ldrh	r2, [r7, #2]
 8010568:	1ad3      	subs	r3, r2, r3
 801056a:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 801056c:	3301      	adds	r3, #1
 801056e:	b29a      	uxth	r2, r3
 8010570:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8010572:	f000 fa6b 	bl	8010a4c <ILI9341_Draw_Horizontal_Line>
										border_colour);
		// Horizontal line - Bottom
		ILI9341_Draw_Horizontal_Line(	x + b,
 8010576:	7bfb      	ldrb	r3, [r7, #15]
 8010578:	b29a      	uxth	r2, r3
 801057a:	88fb      	ldrh	r3, [r7, #6]
 801057c:	4413      	add	r3, r2
 801057e:	b298      	uxth	r0, r3
										(y + h) - b,
 8010580:	88ba      	ldrh	r2, [r7, #4]
 8010582:	883b      	ldrh	r3, [r7, #0]
 8010584:	4413      	add	r3, r2
 8010586:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 8010588:	7bfb      	ldrb	r3, [r7, #15]
 801058a:	b29b      	uxth	r3, r3
 801058c:	1ad3      	subs	r3, r2, r3
 801058e:	b299      	uxth	r1, r3
										(w - b)+1,
 8010590:	7bfb      	ldrb	r3, [r7, #15]
 8010592:	b29b      	uxth	r3, r3
 8010594:	887a      	ldrh	r2, [r7, #2]
 8010596:	1ad3      	subs	r3, r2, r3
 8010598:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 801059a:	3301      	adds	r3, #1
 801059c:	b29a      	uxth	r2, r3
 801059e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80105a0:	f000 fa54 	bl	8010a4c <ILI9341_Draw_Horizontal_Line>
										border_colour);


		// Vertical line - left
		ILI9341_Draw_Vertical_Line(		x + b,
 80105a4:	7bfb      	ldrb	r3, [r7, #15]
 80105a6:	b29a      	uxth	r2, r3
 80105a8:	88fb      	ldrh	r3, [r7, #6]
 80105aa:	4413      	add	r3, r2
 80105ac:	b298      	uxth	r0, r3
 80105ae:	7bfb      	ldrb	r3, [r7, #15]
 80105b0:	b29a      	uxth	r2, r3
 80105b2:	88bb      	ldrh	r3, [r7, #4]
 80105b4:	4413      	add	r3, r2
 80105b6:	b299      	uxth	r1, r3
 80105b8:	7bfb      	ldrb	r3, [r7, #15]
 80105ba:	b29b      	uxth	r3, r3
 80105bc:	005b      	lsls	r3, r3, #1
 80105be:	b29b      	uxth	r3, r3
 80105c0:	883a      	ldrh	r2, [r7, #0]
 80105c2:	1ad3      	subs	r3, r2, r3
 80105c4:	b29a      	uxth	r2, r3
 80105c6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80105c8:	f000 faa4 	bl	8010b14 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);
		// Vertical line - right
		ILI9341_Draw_Vertical_Line(		((x + w)) - (b),
 80105cc:	88fa      	ldrh	r2, [r7, #6]
 80105ce:	887b      	ldrh	r3, [r7, #2]
 80105d0:	4413      	add	r3, r2
 80105d2:	b29a      	uxth	r2, r3
 80105d4:	7bfb      	ldrb	r3, [r7, #15]
 80105d6:	b29b      	uxth	r3, r3
 80105d8:	1ad3      	subs	r3, r2, r3
 80105da:	b298      	uxth	r0, r3
 80105dc:	7bfb      	ldrb	r3, [r7, #15]
 80105de:	b29a      	uxth	r2, r3
 80105e0:	88bb      	ldrh	r3, [r7, #4]
 80105e2:	4413      	add	r3, r2
 80105e4:	b299      	uxth	r1, r3
 80105e6:	7bfb      	ldrb	r3, [r7, #15]
 80105e8:	b29b      	uxth	r3, r3
 80105ea:	005b      	lsls	r3, r3, #1
 80105ec:	b29b      	uxth	r3, r3
 80105ee:	883a      	ldrh	r2, [r7, #0]
 80105f0:	1ad3      	subs	r3, r2, r3
 80105f2:	b29a      	uxth	r2, r3
 80105f4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80105f6:	f000 fa8d 	bl	8010b14 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 80105fa:	7bfb      	ldrb	r3, [r7, #15]
 80105fc:	3301      	adds	r3, #1
 80105fe:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 8010600:	e766      	b.n	80104d0 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 8010602:	bf00      	nop
	// done
	return;
 8010604:	bf00      	nop
}
 8010606:	3714      	adds	r7, #20
 8010608:	46bd      	mov	sp, r7
 801060a:	bd90      	pop	{r4, r7, pc}

0801060c <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 801060c:	b590      	push	{r4, r7, lr}
 801060e:	b089      	sub	sp, #36	; 0x24
 8010610:	af02      	add	r7, sp, #8
 8010612:	4604      	mov	r4, r0
 8010614:	4608      	mov	r0, r1
 8010616:	4611      	mov	r1, r2
 8010618:	461a      	mov	r2, r3
 801061a:	4623      	mov	r3, r4
 801061c:	71fb      	strb	r3, [r7, #7]
 801061e:	4603      	mov	r3, r0
 8010620:	80bb      	strh	r3, [r7, #4]
 8010622:	460b      	mov	r3, r1
 8010624:	807b      	strh	r3, [r7, #2]
 8010626:	4613      	mov	r3, r2
 8010628:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 801062a:	79fb      	ldrb	r3, [r7, #7]
 801062c:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 801062e:	7dfb      	ldrb	r3, [r7, #23]
 8010630:	2b1f      	cmp	r3, #31
 8010632:	d802      	bhi.n	801063a <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 8010634:	2300      	movs	r3, #0
 8010636:	71fb      	strb	r3, [r7, #7]
 8010638:	e002      	b.n	8010640 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 801063a:	7dfb      	ldrb	r3, [r7, #23]
 801063c:	3b20      	subs	r3, #32
 801063e:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8010640:	2300      	movs	r3, #0
 8010642:	753b      	strb	r3, [r7, #20]
 8010644:	e012      	b.n	801066c <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 8010646:	7dfa      	ldrb	r2, [r7, #23]
 8010648:	7d38      	ldrb	r0, [r7, #20]
 801064a:	7d39      	ldrb	r1, [r7, #20]
 801064c:	4c48      	ldr	r4, [pc, #288]	; (8010770 <ILI9341_Draw_Char+0x164>)
 801064e:	4613      	mov	r3, r2
 8010650:	005b      	lsls	r3, r3, #1
 8010652:	4413      	add	r3, r2
 8010654:	005b      	lsls	r3, r3, #1
 8010656:	4423      	add	r3, r4
 8010658:	4403      	add	r3, r0
 801065a:	781a      	ldrb	r2, [r3, #0]
 801065c:	f107 0318 	add.w	r3, r7, #24
 8010660:	440b      	add	r3, r1
 8010662:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8010666:	7d3b      	ldrb	r3, [r7, #20]
 8010668:	3301      	adds	r3, #1
 801066a:	753b      	strb	r3, [r7, #20]
 801066c:	7d3b      	ldrb	r3, [r7, #20]
 801066e:	2b05      	cmp	r3, #5
 8010670:	d9e9      	bls.n	8010646 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 8010672:	2300      	movs	r3, #0
 8010674:	757b      	strb	r3, [r7, #21]
 8010676:	e074      	b.n	8010762 <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 8010678:	2300      	movs	r3, #0
 801067a:	75bb      	strb	r3, [r7, #22]
 801067c:	e06b      	b.n	8010756 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 801067e:	7d7b      	ldrb	r3, [r7, #21]
 8010680:	f107 0218 	add.w	r2, r7, #24
 8010684:	4413      	add	r3, r2
 8010686:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 801068a:	461a      	mov	r2, r3
 801068c:	7dbb      	ldrb	r3, [r7, #22]
 801068e:	fa42 f303 	asr.w	r3, r2, r3
 8010692:	f003 0301 	and.w	r3, r3, #1
 8010696:	2b00      	cmp	r3, #0
 8010698:	d02d      	beq.n	80106f6 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 801069a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801069c:	2b01      	cmp	r3, #1
 801069e:	d10e      	bne.n	80106be <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 80106a0:	7d7b      	ldrb	r3, [r7, #21]
 80106a2:	b29a      	uxth	r2, r3
 80106a4:	88bb      	ldrh	r3, [r7, #4]
 80106a6:	4413      	add	r3, r2
 80106a8:	b298      	uxth	r0, r3
 80106aa:	7dbb      	ldrb	r3, [r7, #22]
 80106ac:	b29a      	uxth	r2, r3
 80106ae:	887b      	ldrh	r3, [r7, #2]
 80106b0:	4413      	add	r3, r2
 80106b2:	b29b      	uxth	r3, r3
 80106b4:	883a      	ldrh	r2, [r7, #0]
 80106b6:	4619      	mov	r1, r3
 80106b8:	f000 fb06 	bl	8010cc8 <ILI9341_Draw_Pixel>
 80106bc:	e048      	b.n	8010750 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 80106be:	7d7b      	ldrb	r3, [r7, #21]
 80106c0:	b29b      	uxth	r3, r3
 80106c2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80106c4:	fb12 f303 	smulbb	r3, r2, r3
 80106c8:	b29a      	uxth	r2, r3
 80106ca:	88bb      	ldrh	r3, [r7, #4]
 80106cc:	4413      	add	r3, r2
 80106ce:	b298      	uxth	r0, r3
 80106d0:	7dbb      	ldrb	r3, [r7, #22]
 80106d2:	b29b      	uxth	r3, r3
 80106d4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80106d6:	fb12 f303 	smulbb	r3, r2, r3
 80106da:	b29a      	uxth	r2, r3
 80106dc:	887b      	ldrh	r3, [r7, #2]
 80106de:	4413      	add	r3, r2
 80106e0:	b299      	uxth	r1, r3
 80106e2:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80106e4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80106e6:	2301      	movs	r3, #1
 80106e8:	9301      	str	r3, [sp, #4]
 80106ea:	883b      	ldrh	r3, [r7, #0]
 80106ec:	9300      	str	r3, [sp, #0]
 80106ee:	4623      	mov	r3, r4
 80106f0:	f000 fc44 	bl	8010f7c <ILI9341_Draw_Rectangle>
 80106f4:	e02c      	b.n	8010750 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 80106f6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80106f8:	2b01      	cmp	r3, #1
 80106fa:	d10e      	bne.n	801071a <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 80106fc:	7d7b      	ldrb	r3, [r7, #21]
 80106fe:	b29a      	uxth	r2, r3
 8010700:	88bb      	ldrh	r3, [r7, #4]
 8010702:	4413      	add	r3, r2
 8010704:	b298      	uxth	r0, r3
 8010706:	7dbb      	ldrb	r3, [r7, #22]
 8010708:	b29a      	uxth	r2, r3
 801070a:	887b      	ldrh	r3, [r7, #2]
 801070c:	4413      	add	r3, r2
 801070e:	b29b      	uxth	r3, r3
 8010710:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8010712:	4619      	mov	r1, r3
 8010714:	f000 fad8 	bl	8010cc8 <ILI9341_Draw_Pixel>
 8010718:	e01a      	b.n	8010750 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 801071a:	7d7b      	ldrb	r3, [r7, #21]
 801071c:	b29b      	uxth	r3, r3
 801071e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010720:	fb12 f303 	smulbb	r3, r2, r3
 8010724:	b29a      	uxth	r2, r3
 8010726:	88bb      	ldrh	r3, [r7, #4]
 8010728:	4413      	add	r3, r2
 801072a:	b298      	uxth	r0, r3
 801072c:	7dbb      	ldrb	r3, [r7, #22]
 801072e:	b29b      	uxth	r3, r3
 8010730:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010732:	fb12 f303 	smulbb	r3, r2, r3
 8010736:	b29a      	uxth	r2, r3
 8010738:	887b      	ldrh	r3, [r7, #2]
 801073a:	4413      	add	r3, r2
 801073c:	b299      	uxth	r1, r3
 801073e:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8010740:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8010742:	2301      	movs	r3, #1
 8010744:	9301      	str	r3, [sp, #4]
 8010746:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8010748:	9300      	str	r3, [sp, #0]
 801074a:	4623      	mov	r3, r4
 801074c:	f000 fc16 	bl	8010f7c <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 8010750:	7dbb      	ldrb	r3, [r7, #22]
 8010752:	3301      	adds	r3, #1
 8010754:	75bb      	strb	r3, [r7, #22]
 8010756:	7dbb      	ldrb	r3, [r7, #22]
 8010758:	2b07      	cmp	r3, #7
 801075a:	d990      	bls.n	801067e <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 801075c:	7d7b      	ldrb	r3, [r7, #21]
 801075e:	3301      	adds	r3, #1
 8010760:	757b      	strb	r3, [r7, #21]
 8010762:	7d7b      	ldrb	r3, [r7, #21]
 8010764:	2b05      	cmp	r3, #5
 8010766:	d987      	bls.n	8010678 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 8010768:	bf00      	nop
 801076a:	371c      	adds	r7, #28
 801076c:	46bd      	mov	sp, r7
 801076e:	bd90      	pop	{r4, r7, pc}
 8010770:	08016518 	.word	0x08016518

08010774 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8010774:	b590      	push	{r4, r7, lr}
 8010776:	b087      	sub	sp, #28
 8010778:	af02      	add	r7, sp, #8
 801077a:	60f8      	str	r0, [r7, #12]
 801077c:	4608      	mov	r0, r1
 801077e:	4611      	mov	r1, r2
 8010780:	461a      	mov	r2, r3
 8010782:	4603      	mov	r3, r0
 8010784:	817b      	strh	r3, [r7, #10]
 8010786:	460b      	mov	r3, r1
 8010788:	813b      	strh	r3, [r7, #8]
 801078a:	4613      	mov	r3, r2
 801078c:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 801078e:	897b      	ldrh	r3, [r7, #10]
 8010790:	3b01      	subs	r3, #1
 8010792:	b298      	uxth	r0, r3
 8010794:	8c3b      	ldrh	r3, [r7, #32]
 8010796:	00db      	lsls	r3, r3, #3
 8010798:	b29a      	uxth	r2, r3
 801079a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801079c:	8939      	ldrh	r1, [r7, #8]
 801079e:	f000 f9b9 	bl	8010b14 <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 80107a2:	897b      	ldrh	r3, [r7, #10]
 80107a4:	3b02      	subs	r3, #2
 80107a6:	b298      	uxth	r0, r3
 80107a8:	8c3b      	ldrh	r3, [r7, #32]
 80107aa:	00db      	lsls	r3, r3, #3
 80107ac:	b29a      	uxth	r2, r3
 80107ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80107b0:	8939      	ldrh	r1, [r7, #8]
 80107b2:	f000 f9af 	bl	8010b14 <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 80107b6:	e016      	b.n	80107e6 <ILI9341_Draw_Text+0x72>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	1c5a      	adds	r2, r3, #1
 80107bc:	60fa      	str	r2, [r7, #12]
 80107be:	7818      	ldrb	r0, [r3, #0]
 80107c0:	88fc      	ldrh	r4, [r7, #6]
 80107c2:	893a      	ldrh	r2, [r7, #8]
 80107c4:	8979      	ldrh	r1, [r7, #10]
 80107c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80107c8:	9301      	str	r3, [sp, #4]
 80107ca:	8c3b      	ldrh	r3, [r7, #32]
 80107cc:	9300      	str	r3, [sp, #0]
 80107ce:	4623      	mov	r3, r4
 80107d0:	f7ff ff1c 	bl	801060c <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 80107d4:	8c3b      	ldrh	r3, [r7, #32]
 80107d6:	461a      	mov	r2, r3
 80107d8:	0052      	lsls	r2, r2, #1
 80107da:	4413      	add	r3, r2
 80107dc:	005b      	lsls	r3, r3, #1
 80107de:	b29a      	uxth	r2, r3
 80107e0:	897b      	ldrh	r3, [r7, #10]
 80107e2:	4413      	add	r3, r2
 80107e4:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 80107e6:	68fb      	ldr	r3, [r7, #12]
 80107e8:	781b      	ldrb	r3, [r3, #0]
 80107ea:	2b00      	cmp	r3, #0
 80107ec:	d1e4      	bne.n	80107b8 <ILI9341_Draw_Text+0x44>
    }


}
 80107ee:	bf00      	nop
 80107f0:	3714      	adds	r7, #20
 80107f2:	46bd      	mov	sp, r7
 80107f4:	bd90      	pop	{r4, r7, pc}

080107f6 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 80107f6:	b580      	push	{r7, lr}
 80107f8:	af00      	add	r7, sp, #0

	_LCD_Enable();
 80107fa:	f000 fca3 	bl	8011144 <_LCD_Enable>
	ILI9341_SPI_Init();
 80107fe:	f000 f907 	bl	8010a10 <ILI9341_SPI_Init>
	_LCD_Reset();
 8010802:	f000 fcaf 	bl	8011164 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 8010806:	2001      	movs	r0, #1
 8010808:	f000 fd7a 	bl	8011300 <_LCD_SendCommand>
	HAL_Delay(2000);
 801080c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8010810:	f7f8 fb0c 	bl	8008e2c <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 8010814:	20cb      	movs	r0, #203	; 0xcb
 8010816:	f000 fd73 	bl	8011300 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 801081a:	2039      	movs	r0, #57	; 0x39
 801081c:	f000 fda2 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x2C);
 8010820:	202c      	movs	r0, #44	; 0x2c
 8010822:	f000 fd9f 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x00);
 8010826:	2000      	movs	r0, #0
 8010828:	f000 fd9c 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x34);
 801082c:	2034      	movs	r0, #52	; 0x34
 801082e:	f000 fd99 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x02);
 8010832:	2002      	movs	r0, #2
 8010834:	f000 fd96 	bl	8011364 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 8010838:	20cf      	movs	r0, #207	; 0xcf
 801083a:	f000 fd61 	bl	8011300 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 801083e:	2000      	movs	r0, #0
 8010840:	f000 fd90 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0xC1);
 8010844:	20c1      	movs	r0, #193	; 0xc1
 8010846:	f000 fd8d 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x30);
 801084a:	2030      	movs	r0, #48	; 0x30
 801084c:	f000 fd8a 	bl	8011364 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 8010850:	20e8      	movs	r0, #232	; 0xe8
 8010852:	f000 fd55 	bl	8011300 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 8010856:	2085      	movs	r0, #133	; 0x85
 8010858:	f000 fd84 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x00);
 801085c:	2000      	movs	r0, #0
 801085e:	f000 fd81 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x78);
 8010862:	2078      	movs	r0, #120	; 0x78
 8010864:	f000 fd7e 	bl	8011364 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 8010868:	20ea      	movs	r0, #234	; 0xea
 801086a:	f000 fd49 	bl	8011300 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 801086e:	2000      	movs	r0, #0
 8010870:	f000 fd78 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x00);
 8010874:	2000      	movs	r0, #0
 8010876:	f000 fd75 	bl	8011364 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 801087a:	20ed      	movs	r0, #237	; 0xed
 801087c:	f000 fd40 	bl	8011300 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 8010880:	2064      	movs	r0, #100	; 0x64
 8010882:	f000 fd6f 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x03);
 8010886:	2003      	movs	r0, #3
 8010888:	f000 fd6c 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x12);
 801088c:	2012      	movs	r0, #18
 801088e:	f000 fd69 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x81);
 8010892:	2081      	movs	r0, #129	; 0x81
 8010894:	f000 fd66 	bl	8011364 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 8010898:	20f7      	movs	r0, #247	; 0xf7
 801089a:	f000 fd31 	bl	8011300 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 801089e:	2020      	movs	r0, #32
 80108a0:	f000 fd60 	bl	8011364 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 80108a4:	20c0      	movs	r0, #192	; 0xc0
 80108a6:	f000 fd2b 	bl	8011300 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 80108aa:	2023      	movs	r0, #35	; 0x23
 80108ac:	f000 fd5a 	bl	8011364 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 80108b0:	20c1      	movs	r0, #193	; 0xc1
 80108b2:	f000 fd25 	bl	8011300 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 80108b6:	2010      	movs	r0, #16
 80108b8:	f000 fd54 	bl	8011364 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 80108bc:	20c5      	movs	r0, #197	; 0xc5
 80108be:	f000 fd1f 	bl	8011300 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 80108c2:	203e      	movs	r0, #62	; 0x3e
 80108c4:	f000 fd4e 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x28);
 80108c8:	2028      	movs	r0, #40	; 0x28
 80108ca:	f000 fd4b 	bl	8011364 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 80108ce:	20c7      	movs	r0, #199	; 0xc7
 80108d0:	f000 fd16 	bl	8011300 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 80108d4:	2086      	movs	r0, #134	; 0x86
 80108d6:	f000 fd45 	bl	8011364 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 80108da:	2036      	movs	r0, #54	; 0x36
 80108dc:	f000 fd10 	bl	8011300 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 80108e0:	2048      	movs	r0, #72	; 0x48
 80108e2:	f000 fd3f 	bl	8011364 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 80108e6:	203a      	movs	r0, #58	; 0x3a
 80108e8:	f000 fd0a 	bl	8011300 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 80108ec:	2055      	movs	r0, #85	; 0x55
 80108ee:	f000 fd39 	bl	8011364 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 80108f2:	20b1      	movs	r0, #177	; 0xb1
 80108f4:	f000 fd04 	bl	8011300 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 80108f8:	2000      	movs	r0, #0
 80108fa:	f000 fd33 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x18);
 80108fe:	2018      	movs	r0, #24
 8010900:	f000 fd30 	bl	8011364 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 8010904:	20b6      	movs	r0, #182	; 0xb6
 8010906:	f000 fcfb 	bl	8011300 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 801090a:	2008      	movs	r0, #8
 801090c:	f000 fd2a 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x82);
 8010910:	2082      	movs	r0, #130	; 0x82
 8010912:	f000 fd27 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x27);
 8010916:	2027      	movs	r0, #39	; 0x27
 8010918:	f000 fd24 	bl	8011364 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 801091c:	20f2      	movs	r0, #242	; 0xf2
 801091e:	f000 fcef 	bl	8011300 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 8010922:	2000      	movs	r0, #0
 8010924:	f000 fd1e 	bl	8011364 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 8010928:	2026      	movs	r0, #38	; 0x26
 801092a:	f000 fce9 	bl	8011300 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 801092e:	2001      	movs	r0, #1
 8010930:	f000 fd18 	bl	8011364 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 8010934:	20e0      	movs	r0, #224	; 0xe0
 8010936:	f000 fce3 	bl	8011300 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 801093a:	200f      	movs	r0, #15
 801093c:	f000 fd12 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x31);
 8010940:	2031      	movs	r0, #49	; 0x31
 8010942:	f000 fd0f 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x2B);
 8010946:	202b      	movs	r0, #43	; 0x2b
 8010948:	f000 fd0c 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x0C);
 801094c:	200c      	movs	r0, #12
 801094e:	f000 fd09 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8010952:	200e      	movs	r0, #14
 8010954:	f000 fd06 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x08);
 8010958:	2008      	movs	r0, #8
 801095a:	f000 fd03 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x4E);
 801095e:	204e      	movs	r0, #78	; 0x4e
 8010960:	f000 fd00 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0xF1);
 8010964:	20f1      	movs	r0, #241	; 0xf1
 8010966:	f000 fcfd 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x37);
 801096a:	2037      	movs	r0, #55	; 0x37
 801096c:	f000 fcfa 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x07);
 8010970:	2007      	movs	r0, #7
 8010972:	f000 fcf7 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x10);
 8010976:	2010      	movs	r0, #16
 8010978:	f000 fcf4 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x03);
 801097c:	2003      	movs	r0, #3
 801097e:	f000 fcf1 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x0E);
 8010982:	200e      	movs	r0, #14
 8010984:	f000 fcee 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x09);
 8010988:	2009      	movs	r0, #9
 801098a:	f000 fceb 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x00);
 801098e:	2000      	movs	r0, #0
 8010990:	f000 fce8 	bl	8011364 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 8010994:	20e1      	movs	r0, #225	; 0xe1
 8010996:	f000 fcb3 	bl	8011300 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 801099a:	2000      	movs	r0, #0
 801099c:	f000 fce2 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x0E);
 80109a0:	200e      	movs	r0, #14
 80109a2:	f000 fcdf 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x14);
 80109a6:	2014      	movs	r0, #20
 80109a8:	f000 fcdc 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x03);
 80109ac:	2003      	movs	r0, #3
 80109ae:	f000 fcd9 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x11);
 80109b2:	2011      	movs	r0, #17
 80109b4:	f000 fcd6 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x07);
 80109b8:	2007      	movs	r0, #7
 80109ba:	f000 fcd3 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x31);
 80109be:	2031      	movs	r0, #49	; 0x31
 80109c0:	f000 fcd0 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0xC1);
 80109c4:	20c1      	movs	r0, #193	; 0xc1
 80109c6:	f000 fccd 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x48);
 80109ca:	2048      	movs	r0, #72	; 0x48
 80109cc:	f000 fcca 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x08);
 80109d0:	2008      	movs	r0, #8
 80109d2:	f000 fcc7 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x0F);
 80109d6:	200f      	movs	r0, #15
 80109d8:	f000 fcc4 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x0C);
 80109dc:	200c      	movs	r0, #12
 80109de:	f000 fcc1 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x31);
 80109e2:	2031      	movs	r0, #49	; 0x31
 80109e4:	f000 fcbe 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x36);
 80109e8:	2036      	movs	r0, #54	; 0x36
 80109ea:	f000 fcbb 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(0x0F);
 80109ee:	200f      	movs	r0, #15
 80109f0:	f000 fcb8 	bl	8011364 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 80109f4:	2011      	movs	r0, #17
 80109f6:	f000 fc83 	bl	8011300 <_LCD_SendCommand>
	HAL_Delay(240);
 80109fa:	20f0      	movs	r0, #240	; 0xf0
 80109fc:	f7f8 fa16 	bl	8008e2c <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 8010a00:	2029      	movs	r0, #41	; 0x29
 8010a02:	f000 fc7d 	bl	8011300 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8010a06:	2000      	movs	r0, #0
 8010a08:	f000 fb4e 	bl	80110a8 <ILI9341_Set_Rotation>
}
 8010a0c:	bf00      	nop
 8010a0e:	bd80      	pop	{r7, pc}

08010a10 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 8010a10:	b480      	push	{r7}
 8010a12:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8010a14:	4b0b      	ldr	r3, [pc, #44]	; (8010a44 <ILI9341_SPI_Init+0x34>)
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010a1c:	2b40      	cmp	r3, #64	; 0x40
 8010a1e:	d005      	beq.n	8010a2c <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 8010a20:	4b08      	ldr	r3, [pc, #32]	; (8010a44 <ILI9341_SPI_Init+0x34>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	4a07      	ldr	r2, [pc, #28]	; (8010a44 <ILI9341_SPI_Init+0x34>)
 8010a26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a2a:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010a2c:	4b06      	ldr	r3, [pc, #24]	; (8010a48 <ILI9341_SPI_Init+0x38>)
 8010a2e:	695b      	ldr	r3, [r3, #20]
 8010a30:	4a05      	ldr	r2, [pc, #20]	; (8010a48 <ILI9341_SPI_Init+0x38>)
 8010a32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010a36:	6153      	str	r3, [r2, #20]
}
 8010a38:	bf00      	nop
 8010a3a:	46bd      	mov	sp, r7
 8010a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a40:	4770      	bx	lr
 8010a42:	bf00      	nop
 8010a44:	40003c00 	.word	0x40003c00
 8010a48:	48000400 	.word	0x48000400

08010a4c <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 8010a4c:	b590      	push	{r4, r7, lr}
 8010a4e:	b087      	sub	sp, #28
 8010a50:	af02      	add	r7, sp, #8
 8010a52:	4604      	mov	r4, r0
 8010a54:	4608      	mov	r0, r1
 8010a56:	4611      	mov	r1, r2
 8010a58:	461a      	mov	r2, r3
 8010a5a:	4623      	mov	r3, r4
 8010a5c:	80fb      	strh	r3, [r7, #6]
 8010a5e:	4603      	mov	r3, r0
 8010a60:	80bb      	strh	r3, [r7, #4]
 8010a62:	460b      	mov	r3, r1
 8010a64:	807b      	strh	r3, [r7, #2]
 8010a66:	4613      	mov	r3, r2
 8010a68:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8010a6a:	4b28      	ldr	r3, [pc, #160]	; (8010b0c <ILI9341_Draw_Horizontal_Line+0xc0>)
 8010a6c:	881b      	ldrh	r3, [r3, #0]
 8010a6e:	b29b      	uxth	r3, r3
 8010a70:	88fa      	ldrh	r2, [r7, #6]
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d246      	bcs.n	8010b04 <ILI9341_Draw_Horizontal_Line+0xb8>
 8010a76:	4b26      	ldr	r3, [pc, #152]	; (8010b10 <ILI9341_Draw_Horizontal_Line+0xc4>)
 8010a78:	881b      	ldrh	r3, [r3, #0]
 8010a7a:	b29b      	uxth	r3, r3
 8010a7c:	88ba      	ldrh	r2, [r7, #4]
 8010a7e:	429a      	cmp	r2, r3
 8010a80:	d240      	bcs.n	8010b04 <ILI9341_Draw_Horizontal_Line+0xb8>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 8010a82:	88fa      	ldrh	r2, [r7, #6]
 8010a84:	887b      	ldrh	r3, [r7, #2]
 8010a86:	4413      	add	r3, r2
 8010a88:	3b01      	subs	r3, #1
 8010a8a:	4a20      	ldr	r2, [pc, #128]	; (8010b0c <ILI9341_Draw_Horizontal_Line+0xc0>)
 8010a8c:	8812      	ldrh	r2, [r2, #0]
 8010a8e:	b292      	uxth	r2, r2
 8010a90:	4293      	cmp	r3, r2
 8010a92:	db05      	blt.n	8010aa0 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 8010a94:	4b1d      	ldr	r3, [pc, #116]	; (8010b0c <ILI9341_Draw_Horizontal_Line+0xc0>)
 8010a96:	881b      	ldrh	r3, [r3, #0]
 8010a98:	b29a      	uxth	r2, r3
 8010a9a:	88fb      	ldrh	r3, [r7, #6]
 8010a9c:	1ad3      	subs	r3, r2, r3
 8010a9e:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 8010aa0:	88fa      	ldrh	r2, [r7, #6]
 8010aa2:	887b      	ldrh	r3, [r7, #2]
 8010aa4:	4413      	add	r3, r2
 8010aa6:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 8010aa8:	3b01      	subs	r3, #1
 8010aaa:	b29a      	uxth	r2, r3
 8010aac:	88bb      	ldrh	r3, [r7, #4]
 8010aae:	88b9      	ldrh	r1, [r7, #4]
 8010ab0:	88f8      	ldrh	r0, [r7, #6]
 8010ab2:	f000 f893 	bl	8010bdc <ILI9341_Set_Frame>
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.


	uint8_t truncated = 0;
 8010ab6:	2300      	movs	r3, #0
 8010ab8:	73fb      	strb	r3, [r7, #15]

	if((width & 1) && (width > 1))		// don't round down to zero!
 8010aba:	887b      	ldrh	r3, [r7, #2]
 8010abc:	f003 0301 	and.w	r3, r3, #1
 8010ac0:	2b00      	cmp	r3, #0
 8010ac2:	d009      	beq.n	8010ad8 <ILI9341_Draw_Horizontal_Line+0x8c>
 8010ac4:	887b      	ldrh	r3, [r7, #2]
 8010ac6:	2b01      	cmp	r3, #1
 8010ac8:	d906      	bls.n	8010ad8 <ILI9341_Draw_Horizontal_Line+0x8c>
	{
		truncated = 1;
 8010aca:	2301      	movs	r3, #1
 8010acc:	73fb      	strb	r3, [r7, #15]
		width = ((width >> 1) * 2);
 8010ace:	887b      	ldrh	r3, [r7, #2]
 8010ad0:	085b      	lsrs	r3, r3, #1
 8010ad2:	b29b      	uxth	r3, r3
 8010ad4:	005b      	lsls	r3, r3, #1
 8010ad6:	807b      	strh	r3, [r7, #2]
	}
	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 8010ad8:	887c      	ldrh	r4, [r7, #2]
 8010ada:	883a      	ldrh	r2, [r7, #0]
 8010adc:	88b9      	ldrh	r1, [r7, #4]
 8010ade:	88f8      	ldrh	r0, [r7, #6]
 8010ae0:	2303      	movs	r3, #3
 8010ae2:	9300      	str	r3, [sp, #0]
 8010ae4:	4623      	mov	r3, r4
 8010ae6:	f000 fb5b 	bl	80111a0 <_LCD_Write_Frame>
	//
//TODO
	// add the truncated pixel now
	if(truncated)
 8010aea:	7bfb      	ldrb	r3, [r7, #15]
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	d00a      	beq.n	8010b06 <ILI9341_Draw_Horizontal_Line+0xba>
	{
		ILI9341_Draw_Pixel(	(xpos + width),
 8010af0:	88fa      	ldrh	r2, [r7, #6]
 8010af2:	887b      	ldrh	r3, [r7, #2]
 8010af4:	4413      	add	r3, r2
 8010af6:	b29b      	uxth	r3, r3
 8010af8:	883a      	ldrh	r2, [r7, #0]
 8010afa:	88b9      	ldrh	r1, [r7, #4]
 8010afc:	4618      	mov	r0, r3
 8010afe:	f000 f8e3 	bl	8010cc8 <ILI9341_Draw_Pixel>
 8010b02:	e000      	b.n	8010b06 <ILI9341_Draw_Horizontal_Line+0xba>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8010b04:	bf00      	nop
							(ypos),
							colour);
	}


}
 8010b06:	3714      	adds	r7, #20
 8010b08:	46bd      	mov	sp, r7
 8010b0a:	bd90      	pop	{r4, r7, pc}
 8010b0c:	20000c3e 	.word	0x20000c3e
 8010b10:	20000c3c 	.word	0x20000c3c

08010b14 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 8010b14:	b590      	push	{r4, r7, lr}
 8010b16:	b087      	sub	sp, #28
 8010b18:	af02      	add	r7, sp, #8
 8010b1a:	4604      	mov	r4, r0
 8010b1c:	4608      	mov	r0, r1
 8010b1e:	4611      	mov	r1, r2
 8010b20:	461a      	mov	r2, r3
 8010b22:	4623      	mov	r3, r4
 8010b24:	80fb      	strh	r3, [r7, #6]
 8010b26:	4603      	mov	r3, r0
 8010b28:	80bb      	strh	r3, [r7, #4]
 8010b2a:	460b      	mov	r3, r1
 8010b2c:	807b      	strh	r3, [r7, #2]
 8010b2e:	4613      	mov	r3, r2
 8010b30:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8010b32:	4b28      	ldr	r3, [pc, #160]	; (8010bd4 <ILI9341_Draw_Vertical_Line+0xc0>)
 8010b34:	881b      	ldrh	r3, [r3, #0]
 8010b36:	b29b      	uxth	r3, r3
 8010b38:	88fa      	ldrh	r2, [r7, #6]
 8010b3a:	429a      	cmp	r2, r3
 8010b3c:	d246      	bcs.n	8010bcc <ILI9341_Draw_Vertical_Line+0xb8>
 8010b3e:	4b26      	ldr	r3, [pc, #152]	; (8010bd8 <ILI9341_Draw_Vertical_Line+0xc4>)
 8010b40:	881b      	ldrh	r3, [r3, #0]
 8010b42:	b29b      	uxth	r3, r3
 8010b44:	88ba      	ldrh	r2, [r7, #4]
 8010b46:	429a      	cmp	r2, r3
 8010b48:	d240      	bcs.n	8010bcc <ILI9341_Draw_Vertical_Line+0xb8>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 8010b4a:	88ba      	ldrh	r2, [r7, #4]
 8010b4c:	887b      	ldrh	r3, [r7, #2]
 8010b4e:	4413      	add	r3, r2
 8010b50:	3b01      	subs	r3, #1
 8010b52:	4a21      	ldr	r2, [pc, #132]	; (8010bd8 <ILI9341_Draw_Vertical_Line+0xc4>)
 8010b54:	8812      	ldrh	r2, [r2, #0]
 8010b56:	b292      	uxth	r2, r2
 8010b58:	4293      	cmp	r3, r2
 8010b5a:	db05      	blt.n	8010b68 <ILI9341_Draw_Vertical_Line+0x54>
	{
		height= LCD_HEIGHT - ypos;
 8010b5c:	4b1e      	ldr	r3, [pc, #120]	; (8010bd8 <ILI9341_Draw_Vertical_Line+0xc4>)
 8010b5e:	881b      	ldrh	r3, [r3, #0]
 8010b60:	b29a      	uxth	r2, r3
 8010b62:	88bb      	ldrh	r3, [r7, #4]
 8010b64:	1ad3      	subs	r3, r2, r3
 8010b66:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 8010b68:	88ba      	ldrh	r2, [r7, #4]
 8010b6a:	887b      	ldrh	r3, [r7, #2]
 8010b6c:	4413      	add	r3, r2
 8010b6e:	b29b      	uxth	r3, r3
 8010b70:	3b01      	subs	r3, #1
 8010b72:	b29b      	uxth	r3, r3
 8010b74:	88fa      	ldrh	r2, [r7, #6]
 8010b76:	88b9      	ldrh	r1, [r7, #4]
 8010b78:	88f8      	ldrh	r0, [r7, #6]
 8010b7a:	f000 f82f 	bl	8010bdc <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 8010b7e:	2300      	movs	r3, #0
 8010b80:	73fb      	strb	r3, [r7, #15]

	if((height & 1) && (height > 1))		// don't round down to zero!
 8010b82:	887b      	ldrh	r3, [r7, #2]
 8010b84:	f003 0301 	and.w	r3, r3, #1
 8010b88:	2b00      	cmp	r3, #0
 8010b8a:	d009      	beq.n	8010ba0 <ILI9341_Draw_Vertical_Line+0x8c>
 8010b8c:	887b      	ldrh	r3, [r7, #2]
 8010b8e:	2b01      	cmp	r3, #1
 8010b90:	d906      	bls.n	8010ba0 <ILI9341_Draw_Vertical_Line+0x8c>
	{
		truncated = 1;
 8010b92:	2301      	movs	r3, #1
 8010b94:	73fb      	strb	r3, [r7, #15]
		height = ((height >> 1) * 2);
 8010b96:	887b      	ldrh	r3, [r7, #2]
 8010b98:	085b      	lsrs	r3, r3, #1
 8010b9a:	b29b      	uxth	r3, r3
 8010b9c:	005b      	lsls	r3, r3, #1
 8010b9e:	807b      	strh	r3, [r7, #2]
//TODO


	//

	if(truncated)
 8010ba0:	7bfb      	ldrb	r3, [r7, #15]
 8010ba2:	2b00      	cmp	r3, #0
 8010ba4:	d008      	beq.n	8010bb8 <ILI9341_Draw_Vertical_Line+0xa4>
	{
		ILI9341_Draw_Pixel(	(xpos),
 8010ba6:	88ba      	ldrh	r2, [r7, #4]
 8010ba8:	887b      	ldrh	r3, [r7, #2]
 8010baa:	4413      	add	r3, r2
 8010bac:	b299      	uxth	r1, r3
 8010bae:	883a      	ldrh	r2, [r7, #0]
 8010bb0:	88fb      	ldrh	r3, [r7, #6]
 8010bb2:	4618      	mov	r0, r3
 8010bb4:	f000 f888 	bl	8010cc8 <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 8010bb8:	887c      	ldrh	r4, [r7, #2]
 8010bba:	883a      	ldrh	r2, [r7, #0]
 8010bbc:	88b9      	ldrh	r1, [r7, #4]
 8010bbe:	88f8      	ldrh	r0, [r7, #6]
 8010bc0:	2303      	movs	r3, #3
 8010bc2:	9300      	str	r3, [sp, #0]
 8010bc4:	4623      	mov	r3, r4
 8010bc6:	f000 faeb 	bl	80111a0 <_LCD_Write_Frame>
 8010bca:	e000      	b.n	8010bce <ILI9341_Draw_Vertical_Line+0xba>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8010bcc:	bf00      	nop
}
 8010bce:	3714      	adds	r7, #20
 8010bd0:	46bd      	mov	sp, r7
 8010bd2:	bd90      	pop	{r4, r7, pc}
 8010bd4:	20000c3e 	.word	0x20000c3e
 8010bd8:	20000c3c 	.word	0x20000c3c

08010bdc <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 8010bdc:	b590      	push	{r4, r7, lr}
 8010bde:	b083      	sub	sp, #12
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	4604      	mov	r4, r0
 8010be4:	4608      	mov	r0, r1
 8010be6:	4611      	mov	r1, r2
 8010be8:	461a      	mov	r2, r3
 8010bea:	4623      	mov	r3, r4
 8010bec:	80fb      	strh	r3, [r7, #6]
 8010bee:	4603      	mov	r3, r0
 8010bf0:	80bb      	strh	r3, [r7, #4]
 8010bf2:	460b      	mov	r3, r1
 8010bf4:	807b      	strh	r3, [r7, #2]
 8010bf6:	4613      	mov	r3, r2
 8010bf8:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 8010bfa:	202a      	movs	r0, #42	; 0x2a
 8010bfc:	f000 fb80 	bl	8011300 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 8010c00:	88fb      	ldrh	r3, [r7, #6]
 8010c02:	0a1b      	lsrs	r3, r3, #8
 8010c04:	b29b      	uxth	r3, r3
 8010c06:	b2db      	uxtb	r3, r3
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f000 fbab 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(sc);
 8010c0e:	88fb      	ldrh	r3, [r7, #6]
 8010c10:	b2db      	uxtb	r3, r3
 8010c12:	4618      	mov	r0, r3
 8010c14:	f000 fba6 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 8010c18:	887b      	ldrh	r3, [r7, #2]
 8010c1a:	0a1b      	lsrs	r3, r3, #8
 8010c1c:	b29b      	uxth	r3, r3
 8010c1e:	b2db      	uxtb	r3, r3
 8010c20:	4618      	mov	r0, r3
 8010c22:	f000 fb9f 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(ec);
 8010c26:	887b      	ldrh	r3, [r7, #2]
 8010c28:	b2db      	uxtb	r3, r3
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f000 fb9a 	bl	8011364 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 8010c30:	202b      	movs	r0, #43	; 0x2b
 8010c32:	f000 fb65 	bl	8011300 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 8010c36:	88bb      	ldrh	r3, [r7, #4]
 8010c38:	0a1b      	lsrs	r3, r3, #8
 8010c3a:	b29b      	uxth	r3, r3
 8010c3c:	b2db      	uxtb	r3, r3
 8010c3e:	4618      	mov	r0, r3
 8010c40:	f000 fb90 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(sp);
 8010c44:	88bb      	ldrh	r3, [r7, #4]
 8010c46:	b2db      	uxtb	r3, r3
 8010c48:	4618      	mov	r0, r3
 8010c4a:	f000 fb8b 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 8010c4e:	883b      	ldrh	r3, [r7, #0]
 8010c50:	0a1b      	lsrs	r3, r3, #8
 8010c52:	b29b      	uxth	r3, r3
 8010c54:	b2db      	uxtb	r3, r3
 8010c56:	4618      	mov	r0, r3
 8010c58:	f000 fb84 	bl	8011364 <_LCD_SendData>
	_LCD_SendData(ep);
 8010c5c:	883b      	ldrh	r3, [r7, #0]
 8010c5e:	b2db      	uxtb	r3, r3
 8010c60:	4618      	mov	r0, r3
 8010c62:	f000 fb7f 	bl	8011364 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 8010c66:	202c      	movs	r0, #44	; 0x2c
 8010c68:	f000 fb4a 	bl	8011300 <_LCD_SendCommand>
}
 8010c6c:	bf00      	nop
 8010c6e:	370c      	adds	r7, #12
 8010c70:	46bd      	mov	sp, r7
 8010c72:	bd90      	pop	{r4, r7, pc}

08010c74 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 8010c74:	b580      	push	{r7, lr}
 8010c76:	b084      	sub	sp, #16
 8010c78:	af02      	add	r7, sp, #8
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 8010c7e:	4b10      	ldr	r3, [pc, #64]	; (8010cc0 <ILI9341_Fill_Screen+0x4c>)
 8010c80:	881b      	ldrh	r3, [r3, #0]
 8010c82:	b29a      	uxth	r2, r3
 8010c84:	4b0f      	ldr	r3, [pc, #60]	; (8010cc4 <ILI9341_Fill_Screen+0x50>)
 8010c86:	881b      	ldrh	r3, [r3, #0]
 8010c88:	b29b      	uxth	r3, r3
 8010c8a:	2100      	movs	r1, #0
 8010c8c:	2000      	movs	r0, #0
 8010c8e:	f7ff ffa5 	bl	8010bdc <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 8010c92:	4b0b      	ldr	r3, [pc, #44]	; (8010cc0 <ILI9341_Fill_Screen+0x4c>)
 8010c94:	881b      	ldrh	r3, [r3, #0]
 8010c96:	b29b      	uxth	r3, r3
 8010c98:	461a      	mov	r2, r3
 8010c9a:	4b0a      	ldr	r3, [pc, #40]	; (8010cc4 <ILI9341_Fill_Screen+0x50>)
 8010c9c:	881b      	ldrh	r3, [r3, #0]
 8010c9e:	b29b      	uxth	r3, r3
 8010ca0:	fb03 f302 	mul.w	r3, r3, r2
 8010ca4:	4619      	mov	r1, r3
 8010ca6:	88fa      	ldrh	r2, [r7, #6]
 8010ca8:	2304      	movs	r3, #4
 8010caa:	9300      	str	r3, [sp, #0]
 8010cac:	460b      	mov	r3, r1
 8010cae:	2100      	movs	r1, #0
 8010cb0:	2000      	movs	r0, #0
 8010cb2:	f000 fa75 	bl	80111a0 <_LCD_Write_Frame>
}
 8010cb6:	bf00      	nop
 8010cb8:	3708      	adds	r7, #8
 8010cba:	46bd      	mov	sp, r7
 8010cbc:	bd80      	pop	{r7, pc}
 8010cbe:	bf00      	nop
 8010cc0:	20000c3e 	.word	0x20000c3e
 8010cc4:	20000c3c 	.word	0x20000c3c

08010cc8 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b08e      	sub	sp, #56	; 0x38
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	4603      	mov	r3, r0
 8010cd0:	80fb      	strh	r3, [r7, #6]
 8010cd2:	460b      	mov	r3, r1
 8010cd4:	80bb      	strh	r3, [r7, #4]
 8010cd6:	4613      	mov	r3, r2
 8010cd8:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8010cda:	4b98      	ldr	r3, [pc, #608]	; (8010f3c <ILI9341_Draw_Pixel+0x274>)
 8010cdc:	881b      	ldrh	r3, [r3, #0]
 8010cde:	b29b      	uxth	r3, r3
 8010ce0:	88fa      	ldrh	r2, [r7, #6]
 8010ce2:	429a      	cmp	r2, r3
 8010ce4:	f080 8143 	bcs.w	8010f6e <ILI9341_Draw_Pixel+0x2a6>
 8010ce8:	4b95      	ldr	r3, [pc, #596]	; (8010f40 <ILI9341_Draw_Pixel+0x278>)
 8010cea:	881b      	ldrh	r3, [r3, #0]
 8010cec:	b29b      	uxth	r3, r3
 8010cee:	88ba      	ldrh	r2, [r7, #4]
 8010cf0:	429a      	cmp	r2, r3
 8010cf2:	f080 813c 	bcs.w	8010f6e <ILI9341_Draw_Pixel+0x2a6>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8010cf6:	4b93      	ldr	r3, [pc, #588]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010cf8:	695b      	ldr	r3, [r3, #20]
 8010cfa:	4a92      	ldr	r2, [pc, #584]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010cfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010d00:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010d02:	4b90      	ldr	r3, [pc, #576]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010d04:	695b      	ldr	r3, [r3, #20]
 8010d06:	4a8f      	ldr	r2, [pc, #572]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010d08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010d0c:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2A, 0, 10);
 8010d0e:	220a      	movs	r2, #10
 8010d10:	2100      	movs	r1, #0
 8010d12:	202a      	movs	r0, #42	; 0x2a
 8010d14:	f000 fb58 	bl	80113c8 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010d18:	2300      	movs	r3, #0
 8010d1a:	637b      	str	r3, [r7, #52]	; 0x34
 8010d1c:	e008      	b.n	8010d30 <ILI9341_Draw_Pixel+0x68>
 8010d1e:	4b89      	ldr	r3, [pc, #548]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010d20:	695b      	ldr	r3, [r3, #20]
 8010d22:	4a88      	ldr	r2, [pc, #544]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010d24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010d28:	6153      	str	r3, [r2, #20]
 8010d2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d2c:	3301      	adds	r3, #1
 8010d2e:	637b      	str	r3, [r7, #52]	; 0x34
 8010d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d32:	2b02      	cmp	r3, #2
 8010d34:	ddf3      	ble.n	8010d1e <ILI9341_Draw_Pixel+0x56>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8010d36:	4b83      	ldr	r3, [pc, #524]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010d38:	695b      	ldr	r3, [r3, #20]
 8010d3a:	4a82      	ldr	r2, [pc, #520]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010d3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d40:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010d42:	4b80      	ldr	r3, [pc, #512]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010d44:	695b      	ldr	r3, [r3, #20]
 8010d46:	4a7f      	ldr	r2, [pc, #508]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010d4c:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010d4e:	4b7d      	ldr	r3, [pc, #500]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010d50:	695b      	ldr	r3, [r3, #20]
 8010d52:	4a7c      	ldr	r2, [pc, #496]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010d54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010d58:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = { x >> 8, x, (x + 1) >> 8, (x + 1) };
 8010d5a:	88fb      	ldrh	r3, [r7, #6]
 8010d5c:	0a1b      	lsrs	r3, r3, #8
 8010d5e:	b29b      	uxth	r3, r3
 8010d60:	b2db      	uxtb	r3, r3
 8010d62:	753b      	strb	r3, [r7, #20]
 8010d64:	88fb      	ldrh	r3, [r7, #6]
 8010d66:	b2db      	uxtb	r3, r3
 8010d68:	757b      	strb	r3, [r7, #21]
 8010d6a:	88fb      	ldrh	r3, [r7, #6]
 8010d6c:	3301      	adds	r3, #1
 8010d6e:	121b      	asrs	r3, r3, #8
 8010d70:	b2db      	uxtb	r3, r3
 8010d72:	75bb      	strb	r3, [r7, #22]
 8010d74:	88fb      	ldrh	r3, [r7, #6]
 8010d76:	b2db      	uxtb	r3, r3
 8010d78:	3301      	adds	r3, #1
 8010d7a:	b2db      	uxtb	r3, r3
 8010d7c:	75fb      	strb	r3, [r7, #23]
	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 8010d7e:	f107 0014 	add.w	r0, r7, #20
 8010d82:	230a      	movs	r3, #10
 8010d84:	2200      	movs	r2, #0
 8010d86:	2104      	movs	r1, #4
 8010d88:	f000 fb50 	bl	801142c <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010d8c:	2300      	movs	r3, #0
 8010d8e:	633b      	str	r3, [r7, #48]	; 0x30
 8010d90:	e008      	b.n	8010da4 <ILI9341_Draw_Pixel+0xdc>
 8010d92:	4b6c      	ldr	r3, [pc, #432]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010d94:	695b      	ldr	r3, [r3, #20]
 8010d96:	4a6b      	ldr	r2, [pc, #428]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010d98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010d9c:	6153      	str	r3, [r2, #20]
 8010d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010da0:	3301      	adds	r3, #1
 8010da2:	633b      	str	r3, [r7, #48]	; 0x30
 8010da4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010da6:	2b02      	cmp	r3, #2
 8010da8:	ddf3      	ble.n	8010d92 <ILI9341_Draw_Pixel+0xca>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010daa:	4b66      	ldr	r3, [pc, #408]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010dac:	695b      	ldr	r3, [r3, #20]
 8010dae:	4a65      	ldr	r2, [pc, #404]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010db0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010db4:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8010db6:	4b63      	ldr	r3, [pc, #396]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010db8:	695b      	ldr	r3, [r3, #20]
 8010dba:	4a62      	ldr	r2, [pc, #392]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010dc0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010dc2:	4b60      	ldr	r3, [pc, #384]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010dc4:	695b      	ldr	r3, [r3, #20]
 8010dc6:	4a5f      	ldr	r2, [pc, #380]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010dc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010dcc:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2B, 0, 10);
 8010dce:	220a      	movs	r2, #10
 8010dd0:	2100      	movs	r1, #0
 8010dd2:	202b      	movs	r0, #43	; 0x2b
 8010dd4:	f000 faf8 	bl	80113c8 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010dd8:	2300      	movs	r3, #0
 8010dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010ddc:	e008      	b.n	8010df0 <ILI9341_Draw_Pixel+0x128>
 8010dde:	4b59      	ldr	r3, [pc, #356]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010de0:	695b      	ldr	r3, [r3, #20]
 8010de2:	4a58      	ldr	r2, [pc, #352]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010de4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010de8:	6153      	str	r3, [r2, #20]
 8010dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dec:	3301      	adds	r3, #1
 8010dee:	62fb      	str	r3, [r7, #44]	; 0x2c
 8010df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010df2:	2b02      	cmp	r3, #2
 8010df4:	ddf3      	ble.n	8010dde <ILI9341_Draw_Pixel+0x116>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8010df6:	4b53      	ldr	r3, [pc, #332]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010df8:	695b      	ldr	r3, [r3, #20]
 8010dfa:	4a52      	ldr	r2, [pc, #328]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010dfc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010e00:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010e02:	4b50      	ldr	r3, [pc, #320]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010e04:	695b      	ldr	r3, [r3, #20]
 8010e06:	4a4f      	ldr	r2, [pc, #316]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010e08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e0c:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010e0e:	4b4d      	ldr	r3, [pc, #308]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010e10:	695b      	ldr	r3, [r3, #20]
 8010e12:	4a4c      	ldr	r2, [pc, #304]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010e14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010e18:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = { y >> 8, y, (y + 1) >> 8, (y + 1) };
 8010e1a:	88bb      	ldrh	r3, [r7, #4]
 8010e1c:	0a1b      	lsrs	r3, r3, #8
 8010e1e:	b29b      	uxth	r3, r3
 8010e20:	b2db      	uxtb	r3, r3
 8010e22:	743b      	strb	r3, [r7, #16]
 8010e24:	88bb      	ldrh	r3, [r7, #4]
 8010e26:	b2db      	uxtb	r3, r3
 8010e28:	747b      	strb	r3, [r7, #17]
 8010e2a:	88bb      	ldrh	r3, [r7, #4]
 8010e2c:	3301      	adds	r3, #1
 8010e2e:	121b      	asrs	r3, r3, #8
 8010e30:	b2db      	uxtb	r3, r3
 8010e32:	74bb      	strb	r3, [r7, #18]
 8010e34:	88bb      	ldrh	r3, [r7, #4]
 8010e36:	b2db      	uxtb	r3, r3
 8010e38:	3301      	adds	r3, #1
 8010e3a:	b2db      	uxtb	r3, r3
 8010e3c:	74fb      	strb	r3, [r7, #19]
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 8010e3e:	f107 0010 	add.w	r0, r7, #16
 8010e42:	230a      	movs	r3, #10
 8010e44:	2200      	movs	r2, #0
 8010e46:	2104      	movs	r1, #4
 8010e48:	f000 faf0 	bl	801142c <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8010e50:	e008      	b.n	8010e64 <ILI9341_Draw_Pixel+0x19c>
 8010e52:	4b3c      	ldr	r3, [pc, #240]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010e54:	695b      	ldr	r3, [r3, #20]
 8010e56:	4a3b      	ldr	r2, [pc, #236]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010e58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010e5c:	6153      	str	r3, [r2, #20]
 8010e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e60:	3301      	adds	r3, #1
 8010e62:	62bb      	str	r3, [r7, #40]	; 0x28
 8010e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e66:	2b02      	cmp	r3, #2
 8010e68:	ddf3      	ble.n	8010e52 <ILI9341_Draw_Pixel+0x18a>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010e6a:	4b36      	ldr	r3, [pc, #216]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010e6c:	695b      	ldr	r3, [r3, #20]
 8010e6e:	4a35      	ldr	r2, [pc, #212]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010e70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010e74:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8010e76:	4b33      	ldr	r3, [pc, #204]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010e78:	695b      	ldr	r3, [r3, #20]
 8010e7a:	4a32      	ldr	r2, [pc, #200]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010e7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010e80:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010e82:	4b30      	ldr	r3, [pc, #192]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010e84:	695b      	ldr	r3, [r3, #20]
 8010e86:	4a2f      	ldr	r2, [pc, #188]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010e88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010e8c:	6153      	str	r3, [r2, #20]
	_SPI_SendByte(0x2C, 0, 10);
 8010e8e:	220a      	movs	r2, #10
 8010e90:	2100      	movs	r1, #0
 8010e92:	202c      	movs	r0, #44	; 0x2c
 8010e94:	f000 fa98 	bl	80113c8 <_SPI_SendByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010e98:	2300      	movs	r3, #0
 8010e9a:	627b      	str	r3, [r7, #36]	; 0x24
 8010e9c:	e008      	b.n	8010eb0 <ILI9341_Draw_Pixel+0x1e8>
 8010e9e:	4b29      	ldr	r3, [pc, #164]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010ea0:	695b      	ldr	r3, [r3, #20]
 8010ea2:	4a28      	ldr	r2, [pc, #160]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010ea4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ea8:	6153      	str	r3, [r2, #20]
 8010eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eac:	3301      	adds	r3, #1
 8010eae:	627b      	str	r3, [r7, #36]	; 0x24
 8010eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010eb2:	2b02      	cmp	r3, #2
 8010eb4:	ddf3      	ble.n	8010e9e <ILI9341_Draw_Pixel+0x1d6>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8010eb6:	4b23      	ldr	r3, [pc, #140]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010eb8:	695b      	ldr	r3, [r3, #20]
 8010eba:	4a22      	ldr	r2, [pc, #136]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010ebc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ec0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010ec2:	4b20      	ldr	r3, [pc, #128]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010ec4:	695b      	ldr	r3, [r3, #20]
 8010ec6:	4a1f      	ldr	r2, [pc, #124]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ecc:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010ece:	4b1d      	ldr	r3, [pc, #116]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010ed0:	695b      	ldr	r3, [r3, #20]
 8010ed2:	4a1c      	ldr	r2, [pc, #112]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010ed4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010ed8:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 8010eda:	887b      	ldrh	r3, [r7, #2]
 8010edc:	0a1b      	lsrs	r3, r3, #8
 8010ede:	b29b      	uxth	r3, r3
 8010ee0:	b2db      	uxtb	r3, r3
 8010ee2:	733b      	strb	r3, [r7, #12]
 8010ee4:	887b      	ldrh	r3, [r7, #2]
 8010ee6:	b2db      	uxtb	r3, r3
 8010ee8:	737b      	strb	r3, [r7, #13]
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 2, 0, 1);
 8010eea:	f107 000c 	add.w	r0, r7, #12
 8010eee:	2301      	movs	r3, #1
 8010ef0:	2200      	movs	r2, #0
 8010ef2:	2102      	movs	r1, #2
 8010ef4:	f000 fa9a 	bl	801142c <_SPI_SendByteMultiByte>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010ef8:	2300      	movs	r3, #0
 8010efa:	623b      	str	r3, [r7, #32]
 8010efc:	e008      	b.n	8010f10 <ILI9341_Draw_Pixel+0x248>
 8010efe:	4b11      	ldr	r3, [pc, #68]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010f00:	695b      	ldr	r3, [r3, #20]
 8010f02:	4a10      	ldr	r2, [pc, #64]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010f04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f08:	6153      	str	r3, [r2, #20]
 8010f0a:	6a3b      	ldr	r3, [r7, #32]
 8010f0c:	3301      	adds	r3, #1
 8010f0e:	623b      	str	r3, [r7, #32]
 8010f10:	6a3b      	ldr	r3, [r7, #32]
 8010f12:	2b02      	cmp	r3, #2
 8010f14:	ddf3      	ble.n	8010efe <ILI9341_Draw_Pixel+0x236>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010f16:	2300      	movs	r3, #0
 8010f18:	61fb      	str	r3, [r7, #28]
 8010f1a:	e008      	b.n	8010f2e <ILI9341_Draw_Pixel+0x266>
 8010f1c:	4b09      	ldr	r3, [pc, #36]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010f1e:	695b      	ldr	r3, [r3, #20]
 8010f20:	4a08      	ldr	r2, [pc, #32]	; (8010f44 <ILI9341_Draw_Pixel+0x27c>)
 8010f22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f26:	6153      	str	r3, [r2, #20]
 8010f28:	69fb      	ldr	r3, [r7, #28]
 8010f2a:	3301      	adds	r3, #1
 8010f2c:	61fb      	str	r3, [r7, #28]
 8010f2e:	69fb      	ldr	r3, [r7, #28]
 8010f30:	2b02      	cmp	r3, #2
 8010f32:	ddf3      	ble.n	8010f1c <ILI9341_Draw_Pixel+0x254>
	for(int s=0; s < SPI_DELAY_HOLD; s++) LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8010f34:	2300      	movs	r3, #0
 8010f36:	61bb      	str	r3, [r7, #24]
 8010f38:	e00f      	b.n	8010f5a <ILI9341_Draw_Pixel+0x292>
 8010f3a:	bf00      	nop
 8010f3c:	20000c3e 	.word	0x20000c3e
 8010f40:	20000c3c 	.word	0x20000c3c
 8010f44:	48000400 	.word	0x48000400
 8010f48:	4b0b      	ldr	r3, [pc, #44]	; (8010f78 <ILI9341_Draw_Pixel+0x2b0>)
 8010f4a:	695b      	ldr	r3, [r3, #20]
 8010f4c:	4a0a      	ldr	r2, [pc, #40]	; (8010f78 <ILI9341_Draw_Pixel+0x2b0>)
 8010f4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010f52:	6153      	str	r3, [r2, #20]
 8010f54:	69bb      	ldr	r3, [r7, #24]
 8010f56:	3301      	adds	r3, #1
 8010f58:	61bb      	str	r3, [r7, #24]
 8010f5a:	69bb      	ldr	r3, [r7, #24]
 8010f5c:	2b02      	cmp	r3, #2
 8010f5e:	ddf3      	ble.n	8010f48 <ILI9341_Draw_Pixel+0x280>


	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8010f60:	4b05      	ldr	r3, [pc, #20]	; (8010f78 <ILI9341_Draw_Pixel+0x2b0>)
 8010f62:	695b      	ldr	r3, [r3, #20]
 8010f64:	4a04      	ldr	r2, [pc, #16]	; (8010f78 <ILI9341_Draw_Pixel+0x2b0>)
 8010f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010f6a:	6153      	str	r3, [r2, #20]
 8010f6c:	e000      	b.n	8010f70 <ILI9341_Draw_Pixel+0x2a8>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8010f6e:	bf00      	nop


}
 8010f70:	3738      	adds	r7, #56	; 0x38
 8010f72:	46bd      	mov	sp, r7
 8010f74:	bd80      	pop	{r7, pc}
 8010f76:	bf00      	nop
 8010f78:	48000400 	.word	0x48000400

08010f7c <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 8010f7c:	b590      	push	{r4, r7, lr}
 8010f7e:	b087      	sub	sp, #28
 8010f80:	af02      	add	r7, sp, #8
 8010f82:	4604      	mov	r4, r0
 8010f84:	4608      	mov	r0, r1
 8010f86:	4611      	mov	r1, r2
 8010f88:	461a      	mov	r2, r3
 8010f8a:	4623      	mov	r3, r4
 8010f8c:	80fb      	strh	r3, [r7, #6]
 8010f8e:	4603      	mov	r3, r0
 8010f90:	80bb      	strh	r3, [r7, #4]
 8010f92:	460b      	mov	r3, r1
 8010f94:	807b      	strh	r3, [r7, #2]
 8010f96:	4613      	mov	r3, r2
 8010f98:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8010f9a:	4b41      	ldr	r3, [pc, #260]	; (80110a0 <ILI9341_Draw_Rectangle+0x124>)
 8010f9c:	881b      	ldrh	r3, [r3, #0]
 8010f9e:	b29b      	uxth	r3, r3
 8010fa0:	88fa      	ldrh	r2, [r7, #6]
 8010fa2:	429a      	cmp	r2, r3
 8010fa4:	d278      	bcs.n	8011098 <ILI9341_Draw_Rectangle+0x11c>
 8010fa6:	4b3f      	ldr	r3, [pc, #252]	; (80110a4 <ILI9341_Draw_Rectangle+0x128>)
 8010fa8:	881b      	ldrh	r3, [r3, #0]
 8010faa:	b29b      	uxth	r3, r3
 8010fac:	88ba      	ldrh	r2, [r7, #4]
 8010fae:	429a      	cmp	r2, r3
 8010fb0:	d272      	bcs.n	8011098 <ILI9341_Draw_Rectangle+0x11c>
	if((xpos+width-1)>=LCD_WIDTH)
 8010fb2:	88fa      	ldrh	r2, [r7, #6]
 8010fb4:	887b      	ldrh	r3, [r7, #2]
 8010fb6:	4413      	add	r3, r2
 8010fb8:	3b01      	subs	r3, #1
 8010fba:	4a39      	ldr	r2, [pc, #228]	; (80110a0 <ILI9341_Draw_Rectangle+0x124>)
 8010fbc:	8812      	ldrh	r2, [r2, #0]
 8010fbe:	b292      	uxth	r2, r2
 8010fc0:	4293      	cmp	r3, r2
 8010fc2:	db05      	blt.n	8010fd0 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 8010fc4:	4b36      	ldr	r3, [pc, #216]	; (80110a0 <ILI9341_Draw_Rectangle+0x124>)
 8010fc6:	881b      	ldrh	r3, [r3, #0]
 8010fc8:	b29a      	uxth	r2, r3
 8010fca:	88fb      	ldrh	r3, [r7, #6]
 8010fcc:	1ad3      	subs	r3, r2, r3
 8010fce:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 8010fd0:	88ba      	ldrh	r2, [r7, #4]
 8010fd2:	883b      	ldrh	r3, [r7, #0]
 8010fd4:	4413      	add	r3, r2
 8010fd6:	3b01      	subs	r3, #1
 8010fd8:	4a32      	ldr	r2, [pc, #200]	; (80110a4 <ILI9341_Draw_Rectangle+0x128>)
 8010fda:	8812      	ldrh	r2, [r2, #0]
 8010fdc:	b292      	uxth	r2, r2
 8010fde:	4293      	cmp	r3, r2
 8010fe0:	db05      	blt.n	8010fee <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 8010fe2:	4b30      	ldr	r3, [pc, #192]	; (80110a4 <ILI9341_Draw_Rectangle+0x128>)
 8010fe4:	881b      	ldrh	r3, [r3, #0]
 8010fe6:	b29a      	uxth	r2, r3
 8010fe8:	88bb      	ldrh	r3, [r7, #4]
 8010fea:	1ad3      	subs	r3, r2, r3
 8010fec:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 8010fee:	88fa      	ldrh	r2, [r7, #6]
 8010ff0:	887b      	ldrh	r3, [r7, #2]
 8010ff2:	4413      	add	r3, r2
 8010ff4:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 8010ff6:	3b01      	subs	r3, #1
 8010ff8:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 8010ffa:	88ba      	ldrh	r2, [r7, #4]
 8010ffc:	883b      	ldrh	r3, [r7, #0]
 8010ffe:	4413      	add	r3, r2
 8011000:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 8011002:	3b01      	subs	r3, #1
 8011004:	b29b      	uxth	r3, r3
 8011006:	88b9      	ldrh	r1, [r7, #4]
 8011008:	88f8      	ldrh	r0, [r7, #6]
 801100a:	4622      	mov	r2, r4
 801100c:	f7ff fde6 	bl	8010bdc <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 8011010:	883a      	ldrh	r2, [r7, #0]
 8011012:	887b      	ldrh	r3, [r7, #2]
 8011014:	fb12 f303 	smulbb	r3, r2, r3
 8011018:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 801101a:	2300      	movs	r3, #0
 801101c:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 801101e:	89fb      	ldrh	r3, [r7, #14]
 8011020:	f003 0301 	and.w	r3, r3, #1
 8011024:	2b00      	cmp	r3, #0
 8011026:	d009      	beq.n	801103c <ILI9341_Draw_Rectangle+0xc0>
 8011028:	89fb      	ldrh	r3, [r7, #14]
 801102a:	2b01      	cmp	r3, #1
 801102c:	d906      	bls.n	801103c <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 801102e:	2301      	movs	r3, #1
 8011030:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 8011032:	89fb      	ldrh	r3, [r7, #14]
 8011034:	085b      	lsrs	r3, r3, #1
 8011036:	b29b      	uxth	r3, r3
 8011038:	005b      	lsls	r3, r3, #1
 801103a:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 801103c:	89fc      	ldrh	r4, [r7, #14]
 801103e:	8c3a      	ldrh	r2, [r7, #32]
 8011040:	88b9      	ldrh	r1, [r7, #4]
 8011042:	88f8      	ldrh	r0, [r7, #6]
 8011044:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011048:	9300      	str	r3, [sp, #0]
 801104a:	4623      	mov	r3, r4
 801104c:	f000 f8a8 	bl	80111a0 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 8011050:	7b7b      	ldrb	r3, [r7, #13]
 8011052:	2b00      	cmp	r3, #0
 8011054:	d021      	beq.n	801109a <ILI9341_Draw_Rectangle+0x11e>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 8011056:	88fa      	ldrh	r2, [r7, #6]
 8011058:	887b      	ldrh	r3, [r7, #2]
 801105a:	4413      	add	r3, r2
 801105c:	b29b      	uxth	r3, r3
 801105e:	3b02      	subs	r3, #2
 8011060:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 8011062:	88ba      	ldrh	r2, [r7, #4]
 8011064:	883b      	ldrh	r3, [r7, #0]
 8011066:	4413      	add	r3, r2
 8011068:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 801106a:	3b01      	subs	r3, #1
 801106c:	b29b      	uxth	r3, r3
 801106e:	8c3a      	ldrh	r2, [r7, #32]
 8011070:	4619      	mov	r1, r3
 8011072:	f7ff fe29 	bl	8010cc8 <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8011076:	88fa      	ldrh	r2, [r7, #6]
 8011078:	887b      	ldrh	r3, [r7, #2]
 801107a:	4413      	add	r3, r2
 801107c:	b29b      	uxth	r3, r3
 801107e:	3b01      	subs	r3, #1
 8011080:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 8011082:	88ba      	ldrh	r2, [r7, #4]
 8011084:	883b      	ldrh	r3, [r7, #0]
 8011086:	4413      	add	r3, r2
 8011088:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 801108a:	3b01      	subs	r3, #1
 801108c:	b29b      	uxth	r3, r3
 801108e:	8c3a      	ldrh	r2, [r7, #32]
 8011090:	4619      	mov	r1, r3
 8011092:	f7ff fe19 	bl	8010cc8 <ILI9341_Draw_Pixel>
 8011096:	e000      	b.n	801109a <ILI9341_Draw_Rectangle+0x11e>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8011098:	bf00      	nop
							colour);
	}
}
 801109a:	3714      	adds	r7, #20
 801109c:	46bd      	mov	sp, r7
 801109e:	bd90      	pop	{r4, r7, pc}
 80110a0:	20000c3e 	.word	0x20000c3e
 80110a4:	20000c3c 	.word	0x20000c3c

080110a8 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b084      	sub	sp, #16
 80110ac:	af00      	add	r7, sp, #0
 80110ae:	4603      	mov	r3, r0
 80110b0:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 80110b2:	79fb      	ldrb	r3, [r7, #7]
 80110b4:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 80110b6:	2036      	movs	r0, #54	; 0x36
 80110b8:	f000 f922 	bl	8011300 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 80110bc:	7bfb      	ldrb	r3, [r7, #15]
 80110be:	2b03      	cmp	r3, #3
 80110c0:	d836      	bhi.n	8011130 <ILI9341_Set_Rotation+0x88>
 80110c2:	a201      	add	r2, pc, #4	; (adr r2, 80110c8 <ILI9341_Set_Rotation+0x20>)
 80110c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80110c8:	080110d9 	.word	0x080110d9
 80110cc:	080110ef 	.word	0x080110ef
 80110d0:	08011105 	.word	0x08011105
 80110d4:	0801111b 	.word	0x0801111b
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 80110d8:	2048      	movs	r0, #72	; 0x48
 80110da:	f000 f943 	bl	8011364 <_LCD_SendData>
			LCD_WIDTH = 240;
 80110de:	4b17      	ldr	r3, [pc, #92]	; (801113c <ILI9341_Set_Rotation+0x94>)
 80110e0:	22f0      	movs	r2, #240	; 0xf0
 80110e2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80110e4:	4b16      	ldr	r3, [pc, #88]	; (8011140 <ILI9341_Set_Rotation+0x98>)
 80110e6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80110ea:	801a      	strh	r2, [r3, #0]
			break;
 80110ec:	e021      	b.n	8011132 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 80110ee:	2028      	movs	r0, #40	; 0x28
 80110f0:	f000 f938 	bl	8011364 <_LCD_SendData>
			LCD_WIDTH  = 320;
 80110f4:	4b11      	ldr	r3, [pc, #68]	; (801113c <ILI9341_Set_Rotation+0x94>)
 80110f6:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80110fa:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80110fc:	4b10      	ldr	r3, [pc, #64]	; (8011140 <ILI9341_Set_Rotation+0x98>)
 80110fe:	22f0      	movs	r2, #240	; 0xf0
 8011100:	801a      	strh	r2, [r3, #0]
			break;
 8011102:	e016      	b.n	8011132 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 8011104:	2088      	movs	r0, #136	; 0x88
 8011106:	f000 f92d 	bl	8011364 <_LCD_SendData>
			LCD_WIDTH  = 240;
 801110a:	4b0c      	ldr	r3, [pc, #48]	; (801113c <ILI9341_Set_Rotation+0x94>)
 801110c:	22f0      	movs	r2, #240	; 0xf0
 801110e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8011110:	4b0b      	ldr	r3, [pc, #44]	; (8011140 <ILI9341_Set_Rotation+0x98>)
 8011112:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8011116:	801a      	strh	r2, [r3, #0]
			break;
 8011118:	e00b      	b.n	8011132 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 801111a:	20e8      	movs	r0, #232	; 0xe8
 801111c:	f000 f922 	bl	8011364 <_LCD_SendData>
			LCD_WIDTH  = 320;
 8011120:	4b06      	ldr	r3, [pc, #24]	; (801113c <ILI9341_Set_Rotation+0x94>)
 8011122:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8011126:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8011128:	4b05      	ldr	r3, [pc, #20]	; (8011140 <ILI9341_Set_Rotation+0x98>)
 801112a:	22f0      	movs	r2, #240	; 0xf0
 801112c:	801a      	strh	r2, [r3, #0]
			break;
 801112e:	e000      	b.n	8011132 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8011130:	bf00      	nop
	}
}
 8011132:	bf00      	nop
 8011134:	3710      	adds	r7, #16
 8011136:	46bd      	mov	sp, r7
 8011138:	bd80      	pop	{r7, pc}
 801113a:	bf00      	nop
 801113c:	20000c3e 	.word	0x20000c3e
 8011140:	20000c3c 	.word	0x20000c3c

08011144 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 8011144:	b480      	push	{r7}
 8011146:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8011148:	4b05      	ldr	r3, [pc, #20]	; (8011160 <_LCD_Enable+0x1c>)
 801114a:	695b      	ldr	r3, [r3, #20]
 801114c:	4a04      	ldr	r2, [pc, #16]	; (8011160 <_LCD_Enable+0x1c>)
 801114e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011152:	6153      	str	r3, [r2, #20]
}
 8011154:	bf00      	nop
 8011156:	46bd      	mov	sp, r7
 8011158:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115c:	4770      	bx	lr
 801115e:	bf00      	nop
 8011160:	48000400 	.word	0x48000400

08011164 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 8011164:	b580      	push	{r7, lr}
 8011166:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 8011168:	4b0c      	ldr	r3, [pc, #48]	; (801119c <_LCD_Reset+0x38>)
 801116a:	695b      	ldr	r3, [r3, #20]
 801116c:	4a0b      	ldr	r2, [pc, #44]	; (801119c <_LCD_Reset+0x38>)
 801116e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8011172:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8011174:	20c8      	movs	r0, #200	; 0xc8
 8011176:	f7f7 fe59 	bl	8008e2c <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 801117a:	4b08      	ldr	r3, [pc, #32]	; (801119c <_LCD_Reset+0x38>)
 801117c:	695b      	ldr	r3, [r3, #20]
 801117e:	4a07      	ldr	r2, [pc, #28]	; (801119c <_LCD_Reset+0x38>)
 8011180:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011184:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8011186:	20c8      	movs	r0, #200	; 0xc8
 8011188:	f7f7 fe50 	bl	8008e2c <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 801118c:	4b03      	ldr	r3, [pc, #12]	; (801119c <_LCD_Reset+0x38>)
 801118e:	695b      	ldr	r3, [r3, #20]
 8011190:	4a02      	ldr	r2, [pc, #8]	; (801119c <_LCD_Reset+0x38>)
 8011192:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8011196:	6153      	str	r3, [r2, #20]
}
 8011198:	bf00      	nop
 801119a:	bd80      	pop	{r7, pc}
 801119c:	48000400 	.word	0x48000400

080111a0 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 80111a0:	b5b0      	push	{r4, r5, r7, lr}
 80111a2:	b08e      	sub	sp, #56	; 0x38
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	607b      	str	r3, [r7, #4]
 80111a8:	4603      	mov	r3, r0
 80111aa:	81fb      	strh	r3, [r7, #14]
 80111ac:	460b      	mov	r3, r1
 80111ae:	81bb      	strh	r3, [r7, #12]
 80111b0:	4613      	mov	r3, r2
 80111b2:	817b      	strh	r3, [r7, #10]
 80111b4:	466b      	mov	r3, sp
 80111b6:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 80111b8:	2300      	movs	r3, #0
 80111ba:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	005b      	lsls	r3, r3, #1
 80111c0:	4a4d      	ldr	r2, [pc, #308]	; (80112f8 <_LCD_Write_Frame+0x158>)
 80111c2:	8812      	ldrh	r2, [r2, #0]
 80111c4:	4293      	cmp	r3, r2
 80111c6:	d202      	bcs.n	80111ce <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80111cc:	e002      	b.n	80111d4 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 80111ce:	4b4a      	ldr	r3, [pc, #296]	; (80112f8 <_LCD_Write_Frame+0x158>)
 80111d0:	881b      	ldrh	r3, [r3, #0]
 80111d2:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 80111d4:	897b      	ldrh	r3, [r7, #10]
 80111d6:	0a1b      	lsrs	r3, r3, #8
 80111d8:	b29b      	uxth	r3, r3
 80111da:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 80111dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80111de:	4603      	mov	r3, r0
 80111e0:	3b01      	subs	r3, #1
 80111e2:	61bb      	str	r3, [r7, #24]
 80111e4:	4601      	mov	r1, r0
 80111e6:	f04f 0200 	mov.w	r2, #0
 80111ea:	f04f 0300 	mov.w	r3, #0
 80111ee:	f04f 0400 	mov.w	r4, #0
 80111f2:	00d4      	lsls	r4, r2, #3
 80111f4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80111f8:	00cb      	lsls	r3, r1, #3
 80111fa:	4601      	mov	r1, r0
 80111fc:	f04f 0200 	mov.w	r2, #0
 8011200:	f04f 0300 	mov.w	r3, #0
 8011204:	f04f 0400 	mov.w	r4, #0
 8011208:	00d4      	lsls	r4, r2, #3
 801120a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 801120e:	00cb      	lsls	r3, r1, #3
 8011210:	1dc3      	adds	r3, r0, #7
 8011212:	08db      	lsrs	r3, r3, #3
 8011214:	00db      	lsls	r3, r3, #3
 8011216:	ebad 0d03 	sub.w	sp, sp, r3
 801121a:	466b      	mov	r3, sp
 801121c:	3300      	adds	r3, #0
 801121e:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 8011220:	2300      	movs	r3, #0
 8011222:	633b      	str	r3, [r7, #48]	; 0x30
 8011224:	e00d      	b.n	8011242 <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 8011226:	697a      	ldr	r2, [r7, #20]
 8011228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801122a:	4413      	add	r3, r2
 801122c:	7ffa      	ldrb	r2, [r7, #31]
 801122e:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 8011230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011232:	3301      	adds	r3, #1
 8011234:	897a      	ldrh	r2, [r7, #10]
 8011236:	b2d1      	uxtb	r1, r2
 8011238:	697a      	ldr	r2, [r7, #20]
 801123a:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 801123c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801123e:	3302      	adds	r3, #2
 8011240:	633b      	str	r3, [r7, #48]	; 0x30
 8011242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011246:	429a      	cmp	r2, r3
 8011248:	d3ed      	bcc.n	8011226 <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 801124a:	687b      	ldr	r3, [r7, #4]
 801124c:	005b      	lsls	r3, r3, #1
 801124e:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 8011250:	2301      	movs	r3, #1
 8011252:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 8011254:	2300      	movs	r3, #0
 8011256:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d00d      	beq.n	801127a <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 801125e:	693a      	ldr	r2, [r7, #16]
 8011260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011262:	fbb2 f3f3 	udiv	r3, r2, r3
 8011266:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 8011268:	693b      	ldr	r3, [r7, #16]
 801126a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801126c:	fbb3 f2f2 	udiv	r2, r3, r2
 8011270:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8011272:	fb01 f202 	mul.w	r2, r1, r2
 8011276:	1a9b      	subs	r3, r3, r2
 8011278:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 801127a:	4b20      	ldr	r3, [pc, #128]	; (80112fc <_LCD_Write_Frame+0x15c>)
 801127c:	695b      	ldr	r3, [r3, #20]
 801127e:	4a1f      	ldr	r2, [pc, #124]	; (80112fc <_LCD_Write_Frame+0x15c>)
 8011280:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011284:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011286:	4b1d      	ldr	r3, [pc, #116]	; (80112fc <_LCD_Write_Frame+0x15c>)
 8011288:	695b      	ldr	r3, [r3, #20]
 801128a:	4a1c      	ldr	r2, [pc, #112]	; (80112fc <_LCD_Write_Frame+0x15c>)
 801128c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011290:	6153      	str	r3, [r2, #20]
//TODO
	if(Sending_in_Block != 0)
 8011292:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011294:	2b00      	cmp	r3, #0
 8011296:	d00f      	beq.n	80112b8 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8011298:	2300      	movs	r3, #0
 801129a:	627b      	str	r3, [r7, #36]	; 0x24
 801129c:	e008      	b.n	80112b0 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 801129e:	6978      	ldr	r0, [r7, #20]
 80112a0:	230a      	movs	r3, #10
 80112a2:	2200      	movs	r2, #0
 80112a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80112a6:	f000 f8c1 	bl	801142c <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80112aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ac:	3301      	adds	r3, #1
 80112ae:	627b      	str	r3, [r7, #36]	; 0x24
 80112b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80112b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112b4:	429a      	cmp	r2, r3
 80112b6:	d3f2      	bcc.n	801129e <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 80112b8:	6978      	ldr	r0, [r7, #20]
 80112ba:	230a      	movs	r3, #10
 80112bc:	2200      	movs	r2, #0
 80112be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80112c0:	f000 f8b4 	bl	801142c <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80112c4:	2300      	movs	r3, #0
 80112c6:	623b      	str	r3, [r7, #32]
 80112c8:	e008      	b.n	80112dc <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80112ca:	4b0c      	ldr	r3, [pc, #48]	; (80112fc <_LCD_Write_Frame+0x15c>)
 80112cc:	695b      	ldr	r3, [r3, #20]
 80112ce:	4a0b      	ldr	r2, [pc, #44]	; (80112fc <_LCD_Write_Frame+0x15c>)
 80112d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80112d4:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80112d6:	6a3b      	ldr	r3, [r7, #32]
 80112d8:	3301      	adds	r3, #1
 80112da:	623b      	str	r3, [r7, #32]
 80112dc:	6a3b      	ldr	r3, [r7, #32]
 80112de:	2b02      	cmp	r3, #2
 80112e0:	ddf3      	ble.n	80112ca <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 80112e2:	4b06      	ldr	r3, [pc, #24]	; (80112fc <_LCD_Write_Frame+0x15c>)
 80112e4:	695b      	ldr	r3, [r3, #20]
 80112e6:	4a05      	ldr	r2, [pc, #20]	; (80112fc <_LCD_Write_Frame+0x15c>)
 80112e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80112ec:	6153      	str	r3, [r2, #20]
 80112ee:	46ad      	mov	sp, r5

}
 80112f0:	bf00      	nop
 80112f2:	3738      	adds	r7, #56	; 0x38
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bdb0      	pop	{r4, r5, r7, pc}
 80112f8:	20000c40 	.word	0x20000c40
 80112fc:	48000400 	.word	0x48000400

08011300 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b084      	sub	sp, #16
 8011304:	af00      	add	r7, sp, #0
 8011306:	4603      	mov	r3, r0
 8011308:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 801130a:	4b15      	ldr	r3, [pc, #84]	; (8011360 <_LCD_SendCommand+0x60>)
 801130c:	695b      	ldr	r3, [r3, #20]
 801130e:	4a14      	ldr	r2, [pc, #80]	; (8011360 <_LCD_SendCommand+0x60>)
 8011310:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011314:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8011316:	4b12      	ldr	r3, [pc, #72]	; (8011360 <_LCD_SendCommand+0x60>)
 8011318:	695b      	ldr	r3, [r3, #20]
 801131a:	4a11      	ldr	r2, [pc, #68]	; (8011360 <_LCD_SendCommand+0x60>)
 801131c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8011320:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 8011322:	79fb      	ldrb	r3, [r7, #7]
 8011324:	2200      	movs	r2, #0
 8011326:	2100      	movs	r1, #0
 8011328:	4618      	mov	r0, r3
 801132a:	f000 f84d 	bl	80113c8 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 801132e:	2300      	movs	r3, #0
 8011330:	60fb      	str	r3, [r7, #12]
 8011332:	e008      	b.n	8011346 <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011334:	4b0a      	ldr	r3, [pc, #40]	; (8011360 <_LCD_SendCommand+0x60>)
 8011336:	695b      	ldr	r3, [r3, #20]
 8011338:	4a09      	ldr	r2, [pc, #36]	; (8011360 <_LCD_SendCommand+0x60>)
 801133a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801133e:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	3301      	adds	r3, #1
 8011344:	60fb      	str	r3, [r7, #12]
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	2b02      	cmp	r3, #2
 801134a:	ddf3      	ble.n	8011334 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 801134c:	4b04      	ldr	r3, [pc, #16]	; (8011360 <_LCD_SendCommand+0x60>)
 801134e:	695b      	ldr	r3, [r3, #20]
 8011350:	4a03      	ldr	r2, [pc, #12]	; (8011360 <_LCD_SendCommand+0x60>)
 8011352:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011356:	6153      	str	r3, [r2, #20]
}
 8011358:	bf00      	nop
 801135a:	3710      	adds	r7, #16
 801135c:	46bd      	mov	sp, r7
 801135e:	bd80      	pop	{r7, pc}
 8011360:	48000400 	.word	0x48000400

08011364 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 8011364:	b580      	push	{r7, lr}
 8011366:	b084      	sub	sp, #16
 8011368:	af00      	add	r7, sp, #0
 801136a:	4603      	mov	r3, r0
 801136c:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 801136e:	4b15      	ldr	r3, [pc, #84]	; (80113c4 <_LCD_SendData+0x60>)
 8011370:	695b      	ldr	r3, [r3, #20]
 8011372:	4a14      	ldr	r2, [pc, #80]	; (80113c4 <_LCD_SendData+0x60>)
 8011374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011378:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 801137a:	4b12      	ldr	r3, [pc, #72]	; (80113c4 <_LCD_SendData+0x60>)
 801137c:	695b      	ldr	r3, [r3, #20]
 801137e:	4a11      	ldr	r2, [pc, #68]	; (80113c4 <_LCD_SendData+0x60>)
 8011380:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8011384:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 8011386:	79fb      	ldrb	r3, [r7, #7]
 8011388:	2200      	movs	r2, #0
 801138a:	2100      	movs	r1, #0
 801138c:	4618      	mov	r0, r3
 801138e:	f000 f81b 	bl	80113c8 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 8011392:	2300      	movs	r3, #0
 8011394:	60fb      	str	r3, [r7, #12]
 8011396:	e008      	b.n	80113aa <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8011398:	4b0a      	ldr	r3, [pc, #40]	; (80113c4 <_LCD_SendData+0x60>)
 801139a:	695b      	ldr	r3, [r3, #20]
 801139c:	4a09      	ldr	r2, [pc, #36]	; (80113c4 <_LCD_SendData+0x60>)
 801139e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80113a2:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 80113a4:	68fb      	ldr	r3, [r7, #12]
 80113a6:	3301      	adds	r3, #1
 80113a8:	60fb      	str	r3, [r7, #12]
 80113aa:	68fb      	ldr	r3, [r7, #12]
 80113ac:	2b02      	cmp	r3, #2
 80113ae:	ddf3      	ble.n	8011398 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80113b0:	4b04      	ldr	r3, [pc, #16]	; (80113c4 <_LCD_SendData+0x60>)
 80113b2:	695b      	ldr	r3, [r3, #20]
 80113b4:	4a03      	ldr	r2, [pc, #12]	; (80113c4 <_LCD_SendData+0x60>)
 80113b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80113ba:	6153      	str	r3, [r2, #20]
}
 80113bc:	bf00      	nop
 80113be:	3710      	adds	r7, #16
 80113c0:	46bd      	mov	sp, r7
 80113c2:	bd80      	pop	{r7, pc}
 80113c4:	48000400 	.word	0x48000400

080113c8 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 80113c8:	b480      	push	{r7}
 80113ca:	b085      	sub	sp, #20
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	4603      	mov	r3, r0
 80113d0:	71fb      	strb	r3, [r7, #7]
 80113d2:	460b      	mov	r3, r1
 80113d4:	71bb      	strb	r3, [r7, #6]
 80113d6:	4613      	mov	r3, r2
 80113d8:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 80113da:	2300      	movs	r3, #0
 80113dc:	60fb      	str	r3, [r7, #12]
 80113de:	e003      	b.n	80113e8 <_SPI_SendByte+0x20>
   		asm("nop");
 80113e0:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	3301      	adds	r3, #1
 80113e6:	60fb      	str	r3, [r7, #12]
 80113e8:	79bb      	ldrb	r3, [r7, #6]
 80113ea:	68fa      	ldr	r2, [r7, #12]
 80113ec:	429a      	cmp	r2, r3
 80113ee:	dbf7      	blt.n	80113e0 <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 80113f0:	4b0c      	ldr	r3, [pc, #48]	; (8011424 <_SPI_SendByte+0x5c>)
 80113f2:	689b      	ldr	r3, [r3, #8]
 80113f4:	f003 0302 	and.w	r3, r3, #2
 80113f8:	2b02      	cmp	r3, #2
 80113fa:	d102      	bne.n	8011402 <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 80113fc:	4a0a      	ldr	r2, [pc, #40]	; (8011428 <_SPI_SendByte+0x60>)
 80113fe:	79fb      	ldrb	r3, [r7, #7]
 8011400:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 8011402:	2300      	movs	r3, #0
 8011404:	60bb      	str	r3, [r7, #8]
 8011406:	e003      	b.n	8011410 <_SPI_SendByte+0x48>
   		asm("nop");
 8011408:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 801140a:	68bb      	ldr	r3, [r7, #8]
 801140c:	3301      	adds	r3, #1
 801140e:	60bb      	str	r3, [r7, #8]
 8011410:	797b      	ldrb	r3, [r7, #5]
 8011412:	68ba      	ldr	r2, [r7, #8]
 8011414:	429a      	cmp	r2, r3
 8011416:	dbf7      	blt.n	8011408 <_SPI_SendByte+0x40>

#endif

}
 8011418:	bf00      	nop
 801141a:	3714      	adds	r7, #20
 801141c:	46bd      	mov	sp, r7
 801141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011422:	4770      	bx	lr
 8011424:	40003c00 	.word	0x40003c00
 8011428:	40003c0c 	.word	0x40003c0c

0801142c <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 801142c:	b480      	push	{r7}
 801142e:	b089      	sub	sp, #36	; 0x24
 8011430:	af00      	add	r7, sp, #0
 8011432:	60f8      	str	r0, [r7, #12]
 8011434:	60b9      	str	r1, [r7, #8]
 8011436:	4611      	mov	r1, r2
 8011438:	461a      	mov	r2, r3
 801143a:	460b      	mov	r3, r1
 801143c:	71fb      	strb	r3, [r7, #7]
 801143e:	4613      	mov	r3, r2
 8011440:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 8011442:	2300      	movs	r3, #0
 8011444:	61fb      	str	r3, [r7, #28]
 8011446:	e003      	b.n	8011450 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 8011448:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 801144a:	69fb      	ldr	r3, [r7, #28]
 801144c:	3301      	adds	r3, #1
 801144e:	61fb      	str	r3, [r7, #28]
 8011450:	79fb      	ldrb	r3, [r7, #7]
 8011452:	69fa      	ldr	r2, [r7, #28]
 8011454:	429a      	cmp	r2, r3
 8011456:	dbf7      	blt.n	8011448 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 801145c:	e01d      	b.n	801149a <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 801145e:	4b1c      	ldr	r3, [pc, #112]	; (80114d0 <_SPI_SendByteMultiByte+0xa4>)
 8011460:	689b      	ldr	r3, [r3, #8]
 8011462:	f003 0302 	and.w	r3, r3, #2
 8011466:	2b02      	cmp	r3, #2
 8011468:	d117      	bne.n	801149a <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 801146a:	68bb      	ldr	r3, [r7, #8]
 801146c:	2b01      	cmp	r3, #1
 801146e:	d90a      	bls.n	8011486 <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 8011470:	69bb      	ldr	r3, [r7, #24]
 8011472:	881a      	ldrh	r2, [r3, #0]
 8011474:	4b16      	ldr	r3, [pc, #88]	; (80114d0 <_SPI_SendByteMultiByte+0xa4>)
 8011476:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 8011478:	69bb      	ldr	r3, [r7, #24]
 801147a:	3302      	adds	r3, #2
 801147c:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 801147e:	68bb      	ldr	r3, [r7, #8]
 8011480:	3b02      	subs	r3, #2
 8011482:	60bb      	str	r3, [r7, #8]
 8011484:	e009      	b.n	801149a <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 8011486:	4a13      	ldr	r2, [pc, #76]	; (80114d4 <_SPI_SendByteMultiByte+0xa8>)
 8011488:	69bb      	ldr	r3, [r7, #24]
 801148a:	781b      	ldrb	r3, [r3, #0]
 801148c:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 801148e:	69bb      	ldr	r3, [r7, #24]
 8011490:	3301      	adds	r3, #1
 8011492:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	3b01      	subs	r3, #1
 8011498:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 801149a:	68bb      	ldr	r3, [r7, #8]
 801149c:	2b00      	cmp	r3, #0
 801149e:	d1de      	bne.n	801145e <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 80114a0:	4b0b      	ldr	r3, [pc, #44]	; (80114d0 <_SPI_SendByteMultiByte+0xa4>)
 80114a2:	689b      	ldr	r3, [r3, #8]
 80114a4:	4a0a      	ldr	r2, [pc, #40]	; (80114d0 <_SPI_SendByteMultiByte+0xa4>)
 80114a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80114aa:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 80114ac:	2300      	movs	r3, #0
 80114ae:	617b      	str	r3, [r7, #20]
 80114b0:	e003      	b.n	80114ba <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 80114b2:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 80114b4:	697b      	ldr	r3, [r7, #20]
 80114b6:	3301      	adds	r3, #1
 80114b8:	617b      	str	r3, [r7, #20]
 80114ba:	79bb      	ldrb	r3, [r7, #6]
 80114bc:	697a      	ldr	r2, [r7, #20]
 80114be:	429a      	cmp	r2, r3
 80114c0:	dbf7      	blt.n	80114b2 <_SPI_SendByteMultiByte+0x86>

#endif

}
 80114c2:	bf00      	nop
 80114c4:	3724      	adds	r7, #36	; 0x24
 80114c6:	46bd      	mov	sp, r7
 80114c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114cc:	4770      	bx	lr
 80114ce:	bf00      	nop
 80114d0:	40003c00 	.word	0x40003c00
 80114d4:	40003c0c 	.word	0x40003c0c

080114d8 <__errno>:
 80114d8:	4b01      	ldr	r3, [pc, #4]	; (80114e0 <__errno+0x8>)
 80114da:	6818      	ldr	r0, [r3, #0]
 80114dc:	4770      	bx	lr
 80114de:	bf00      	nop
 80114e0:	20001c34 	.word	0x20001c34

080114e4 <__libc_init_array>:
 80114e4:	b570      	push	{r4, r5, r6, lr}
 80114e6:	4e0d      	ldr	r6, [pc, #52]	; (801151c <__libc_init_array+0x38>)
 80114e8:	4c0d      	ldr	r4, [pc, #52]	; (8011520 <__libc_init_array+0x3c>)
 80114ea:	1ba4      	subs	r4, r4, r6
 80114ec:	10a4      	asrs	r4, r4, #2
 80114ee:	2500      	movs	r5, #0
 80114f0:	42a5      	cmp	r5, r4
 80114f2:	d109      	bne.n	8011508 <__libc_init_array+0x24>
 80114f4:	4e0b      	ldr	r6, [pc, #44]	; (8011524 <__libc_init_array+0x40>)
 80114f6:	4c0c      	ldr	r4, [pc, #48]	; (8011528 <__libc_init_array+0x44>)
 80114f8:	f004 f8a0 	bl	801563c <_init>
 80114fc:	1ba4      	subs	r4, r4, r6
 80114fe:	10a4      	asrs	r4, r4, #2
 8011500:	2500      	movs	r5, #0
 8011502:	42a5      	cmp	r5, r4
 8011504:	d105      	bne.n	8011512 <__libc_init_array+0x2e>
 8011506:	bd70      	pop	{r4, r5, r6, pc}
 8011508:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 801150c:	4798      	blx	r3
 801150e:	3501      	adds	r5, #1
 8011510:	e7ee      	b.n	80114f0 <__libc_init_array+0xc>
 8011512:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8011516:	4798      	blx	r3
 8011518:	3501      	adds	r5, #1
 801151a:	e7f2      	b.n	8011502 <__libc_init_array+0x1e>
 801151c:	08016a68 	.word	0x08016a68
 8011520:	08016a68 	.word	0x08016a68
 8011524:	08016a68 	.word	0x08016a68
 8011528:	08016a6c 	.word	0x08016a6c

0801152c <memset>:
 801152c:	4402      	add	r2, r0
 801152e:	4603      	mov	r3, r0
 8011530:	4293      	cmp	r3, r2
 8011532:	d100      	bne.n	8011536 <memset+0xa>
 8011534:	4770      	bx	lr
 8011536:	f803 1b01 	strb.w	r1, [r3], #1
 801153a:	e7f9      	b.n	8011530 <memset+0x4>

0801153c <__cvt>:
 801153c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011540:	ec55 4b10 	vmov	r4, r5, d0
 8011544:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 8011546:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 801154a:	2d00      	cmp	r5, #0
 801154c:	460e      	mov	r6, r1
 801154e:	4691      	mov	r9, r2
 8011550:	4619      	mov	r1, r3
 8011552:	bfb8      	it	lt
 8011554:	4622      	movlt	r2, r4
 8011556:	462b      	mov	r3, r5
 8011558:	f027 0720 	bic.w	r7, r7, #32
 801155c:	bfbb      	ittet	lt
 801155e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011562:	461d      	movlt	r5, r3
 8011564:	2300      	movge	r3, #0
 8011566:	232d      	movlt	r3, #45	; 0x2d
 8011568:	bfb8      	it	lt
 801156a:	4614      	movlt	r4, r2
 801156c:	2f46      	cmp	r7, #70	; 0x46
 801156e:	700b      	strb	r3, [r1, #0]
 8011570:	d004      	beq.n	801157c <__cvt+0x40>
 8011572:	2f45      	cmp	r7, #69	; 0x45
 8011574:	d100      	bne.n	8011578 <__cvt+0x3c>
 8011576:	3601      	adds	r6, #1
 8011578:	2102      	movs	r1, #2
 801157a:	e000      	b.n	801157e <__cvt+0x42>
 801157c:	2103      	movs	r1, #3
 801157e:	ab03      	add	r3, sp, #12
 8011580:	9301      	str	r3, [sp, #4]
 8011582:	ab02      	add	r3, sp, #8
 8011584:	9300      	str	r3, [sp, #0]
 8011586:	4632      	mov	r2, r6
 8011588:	4653      	mov	r3, sl
 801158a:	ec45 4b10 	vmov	d0, r4, r5
 801158e:	f000 fe3f 	bl	8012210 <_dtoa_r>
 8011592:	2f47      	cmp	r7, #71	; 0x47
 8011594:	4680      	mov	r8, r0
 8011596:	d102      	bne.n	801159e <__cvt+0x62>
 8011598:	f019 0f01 	tst.w	r9, #1
 801159c:	d026      	beq.n	80115ec <__cvt+0xb0>
 801159e:	2f46      	cmp	r7, #70	; 0x46
 80115a0:	eb08 0906 	add.w	r9, r8, r6
 80115a4:	d111      	bne.n	80115ca <__cvt+0x8e>
 80115a6:	f898 3000 	ldrb.w	r3, [r8]
 80115aa:	2b30      	cmp	r3, #48	; 0x30
 80115ac:	d10a      	bne.n	80115c4 <__cvt+0x88>
 80115ae:	2200      	movs	r2, #0
 80115b0:	2300      	movs	r3, #0
 80115b2:	4620      	mov	r0, r4
 80115b4:	4629      	mov	r1, r5
 80115b6:	f7ef faaf 	bl	8000b18 <__aeabi_dcmpeq>
 80115ba:	b918      	cbnz	r0, 80115c4 <__cvt+0x88>
 80115bc:	f1c6 0601 	rsb	r6, r6, #1
 80115c0:	f8ca 6000 	str.w	r6, [sl]
 80115c4:	f8da 3000 	ldr.w	r3, [sl]
 80115c8:	4499      	add	r9, r3
 80115ca:	2200      	movs	r2, #0
 80115cc:	2300      	movs	r3, #0
 80115ce:	4620      	mov	r0, r4
 80115d0:	4629      	mov	r1, r5
 80115d2:	f7ef faa1 	bl	8000b18 <__aeabi_dcmpeq>
 80115d6:	b938      	cbnz	r0, 80115e8 <__cvt+0xac>
 80115d8:	2230      	movs	r2, #48	; 0x30
 80115da:	9b03      	ldr	r3, [sp, #12]
 80115dc:	454b      	cmp	r3, r9
 80115de:	d205      	bcs.n	80115ec <__cvt+0xb0>
 80115e0:	1c59      	adds	r1, r3, #1
 80115e2:	9103      	str	r1, [sp, #12]
 80115e4:	701a      	strb	r2, [r3, #0]
 80115e6:	e7f8      	b.n	80115da <__cvt+0x9e>
 80115e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80115ec:	9b03      	ldr	r3, [sp, #12]
 80115ee:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80115f0:	eba3 0308 	sub.w	r3, r3, r8
 80115f4:	4640      	mov	r0, r8
 80115f6:	6013      	str	r3, [r2, #0]
 80115f8:	b004      	add	sp, #16
 80115fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080115fe <__exponent>:
 80115fe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011600:	2900      	cmp	r1, #0
 8011602:	4604      	mov	r4, r0
 8011604:	bfba      	itte	lt
 8011606:	4249      	neglt	r1, r1
 8011608:	232d      	movlt	r3, #45	; 0x2d
 801160a:	232b      	movge	r3, #43	; 0x2b
 801160c:	2909      	cmp	r1, #9
 801160e:	f804 2b02 	strb.w	r2, [r4], #2
 8011612:	7043      	strb	r3, [r0, #1]
 8011614:	dd20      	ble.n	8011658 <__exponent+0x5a>
 8011616:	f10d 0307 	add.w	r3, sp, #7
 801161a:	461f      	mov	r7, r3
 801161c:	260a      	movs	r6, #10
 801161e:	fb91 f5f6 	sdiv	r5, r1, r6
 8011622:	fb06 1115 	mls	r1, r6, r5, r1
 8011626:	3130      	adds	r1, #48	; 0x30
 8011628:	2d09      	cmp	r5, #9
 801162a:	f803 1c01 	strb.w	r1, [r3, #-1]
 801162e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 8011632:	4629      	mov	r1, r5
 8011634:	dc09      	bgt.n	801164a <__exponent+0x4c>
 8011636:	3130      	adds	r1, #48	; 0x30
 8011638:	3b02      	subs	r3, #2
 801163a:	f802 1c01 	strb.w	r1, [r2, #-1]
 801163e:	42bb      	cmp	r3, r7
 8011640:	4622      	mov	r2, r4
 8011642:	d304      	bcc.n	801164e <__exponent+0x50>
 8011644:	1a10      	subs	r0, r2, r0
 8011646:	b003      	add	sp, #12
 8011648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801164a:	4613      	mov	r3, r2
 801164c:	e7e7      	b.n	801161e <__exponent+0x20>
 801164e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011652:	f804 2b01 	strb.w	r2, [r4], #1
 8011656:	e7f2      	b.n	801163e <__exponent+0x40>
 8011658:	2330      	movs	r3, #48	; 0x30
 801165a:	4419      	add	r1, r3
 801165c:	7083      	strb	r3, [r0, #2]
 801165e:	1d02      	adds	r2, r0, #4
 8011660:	70c1      	strb	r1, [r0, #3]
 8011662:	e7ef      	b.n	8011644 <__exponent+0x46>

08011664 <_printf_float>:
 8011664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011668:	b08d      	sub	sp, #52	; 0x34
 801166a:	460c      	mov	r4, r1
 801166c:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8011670:	4616      	mov	r6, r2
 8011672:	461f      	mov	r7, r3
 8011674:	4605      	mov	r5, r0
 8011676:	f001 fcfd 	bl	8013074 <_localeconv_r>
 801167a:	6803      	ldr	r3, [r0, #0]
 801167c:	9304      	str	r3, [sp, #16]
 801167e:	4618      	mov	r0, r3
 8011680:	f7ee fdce 	bl	8000220 <strlen>
 8011684:	2300      	movs	r3, #0
 8011686:	930a      	str	r3, [sp, #40]	; 0x28
 8011688:	f8d8 3000 	ldr.w	r3, [r8]
 801168c:	9005      	str	r0, [sp, #20]
 801168e:	3307      	adds	r3, #7
 8011690:	f023 0307 	bic.w	r3, r3, #7
 8011694:	f103 0208 	add.w	r2, r3, #8
 8011698:	f894 a018 	ldrb.w	sl, [r4, #24]
 801169c:	f8d4 b000 	ldr.w	fp, [r4]
 80116a0:	f8c8 2000 	str.w	r2, [r8]
 80116a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116a8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80116ac:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80116b0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80116b4:	9307      	str	r3, [sp, #28]
 80116b6:	f8cd 8018 	str.w	r8, [sp, #24]
 80116ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80116be:	4ba7      	ldr	r3, [pc, #668]	; (801195c <_printf_float+0x2f8>)
 80116c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80116c4:	f7ef fa5a 	bl	8000b7c <__aeabi_dcmpun>
 80116c8:	bb70      	cbnz	r0, 8011728 <_printf_float+0xc4>
 80116ca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80116ce:	4ba3      	ldr	r3, [pc, #652]	; (801195c <_printf_float+0x2f8>)
 80116d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80116d4:	f7ef fa34 	bl	8000b40 <__aeabi_dcmple>
 80116d8:	bb30      	cbnz	r0, 8011728 <_printf_float+0xc4>
 80116da:	2200      	movs	r2, #0
 80116dc:	2300      	movs	r3, #0
 80116de:	4640      	mov	r0, r8
 80116e0:	4649      	mov	r1, r9
 80116e2:	f7ef fa23 	bl	8000b2c <__aeabi_dcmplt>
 80116e6:	b110      	cbz	r0, 80116ee <_printf_float+0x8a>
 80116e8:	232d      	movs	r3, #45	; 0x2d
 80116ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80116ee:	4a9c      	ldr	r2, [pc, #624]	; (8011960 <_printf_float+0x2fc>)
 80116f0:	4b9c      	ldr	r3, [pc, #624]	; (8011964 <_printf_float+0x300>)
 80116f2:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80116f6:	bf8c      	ite	hi
 80116f8:	4690      	movhi	r8, r2
 80116fa:	4698      	movls	r8, r3
 80116fc:	2303      	movs	r3, #3
 80116fe:	f02b 0204 	bic.w	r2, fp, #4
 8011702:	6123      	str	r3, [r4, #16]
 8011704:	6022      	str	r2, [r4, #0]
 8011706:	f04f 0900 	mov.w	r9, #0
 801170a:	9700      	str	r7, [sp, #0]
 801170c:	4633      	mov	r3, r6
 801170e:	aa0b      	add	r2, sp, #44	; 0x2c
 8011710:	4621      	mov	r1, r4
 8011712:	4628      	mov	r0, r5
 8011714:	f000 f9e6 	bl	8011ae4 <_printf_common>
 8011718:	3001      	adds	r0, #1
 801171a:	f040 808d 	bne.w	8011838 <_printf_float+0x1d4>
 801171e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011722:	b00d      	add	sp, #52	; 0x34
 8011724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011728:	4642      	mov	r2, r8
 801172a:	464b      	mov	r3, r9
 801172c:	4640      	mov	r0, r8
 801172e:	4649      	mov	r1, r9
 8011730:	f7ef fa24 	bl	8000b7c <__aeabi_dcmpun>
 8011734:	b110      	cbz	r0, 801173c <_printf_float+0xd8>
 8011736:	4a8c      	ldr	r2, [pc, #560]	; (8011968 <_printf_float+0x304>)
 8011738:	4b8c      	ldr	r3, [pc, #560]	; (801196c <_printf_float+0x308>)
 801173a:	e7da      	b.n	80116f2 <_printf_float+0x8e>
 801173c:	6861      	ldr	r1, [r4, #4]
 801173e:	1c4b      	adds	r3, r1, #1
 8011740:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 8011744:	a80a      	add	r0, sp, #40	; 0x28
 8011746:	d13e      	bne.n	80117c6 <_printf_float+0x162>
 8011748:	2306      	movs	r3, #6
 801174a:	6063      	str	r3, [r4, #4]
 801174c:	2300      	movs	r3, #0
 801174e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011752:	ab09      	add	r3, sp, #36	; 0x24
 8011754:	9300      	str	r3, [sp, #0]
 8011756:	ec49 8b10 	vmov	d0, r8, r9
 801175a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801175e:	6022      	str	r2, [r4, #0]
 8011760:	f8cd a004 	str.w	sl, [sp, #4]
 8011764:	6861      	ldr	r1, [r4, #4]
 8011766:	4628      	mov	r0, r5
 8011768:	f7ff fee8 	bl	801153c <__cvt>
 801176c:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8011770:	2b47      	cmp	r3, #71	; 0x47
 8011772:	4680      	mov	r8, r0
 8011774:	d109      	bne.n	801178a <_printf_float+0x126>
 8011776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011778:	1cd8      	adds	r0, r3, #3
 801177a:	db02      	blt.n	8011782 <_printf_float+0x11e>
 801177c:	6862      	ldr	r2, [r4, #4]
 801177e:	4293      	cmp	r3, r2
 8011780:	dd47      	ble.n	8011812 <_printf_float+0x1ae>
 8011782:	f1aa 0a02 	sub.w	sl, sl, #2
 8011786:	fa5f fa8a 	uxtb.w	sl, sl
 801178a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 801178e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8011790:	d824      	bhi.n	80117dc <_printf_float+0x178>
 8011792:	3901      	subs	r1, #1
 8011794:	4652      	mov	r2, sl
 8011796:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801179a:	9109      	str	r1, [sp, #36]	; 0x24
 801179c:	f7ff ff2f 	bl	80115fe <__exponent>
 80117a0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80117a2:	1813      	adds	r3, r2, r0
 80117a4:	2a01      	cmp	r2, #1
 80117a6:	4681      	mov	r9, r0
 80117a8:	6123      	str	r3, [r4, #16]
 80117aa:	dc02      	bgt.n	80117b2 <_printf_float+0x14e>
 80117ac:	6822      	ldr	r2, [r4, #0]
 80117ae:	07d1      	lsls	r1, r2, #31
 80117b0:	d501      	bpl.n	80117b6 <_printf_float+0x152>
 80117b2:	3301      	adds	r3, #1
 80117b4:	6123      	str	r3, [r4, #16]
 80117b6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80117ba:	2b00      	cmp	r3, #0
 80117bc:	d0a5      	beq.n	801170a <_printf_float+0xa6>
 80117be:	232d      	movs	r3, #45	; 0x2d
 80117c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80117c4:	e7a1      	b.n	801170a <_printf_float+0xa6>
 80117c6:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80117ca:	f000 8177 	beq.w	8011abc <_printf_float+0x458>
 80117ce:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80117d2:	d1bb      	bne.n	801174c <_printf_float+0xe8>
 80117d4:	2900      	cmp	r1, #0
 80117d6:	d1b9      	bne.n	801174c <_printf_float+0xe8>
 80117d8:	2301      	movs	r3, #1
 80117da:	e7b6      	b.n	801174a <_printf_float+0xe6>
 80117dc:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80117e0:	d119      	bne.n	8011816 <_printf_float+0x1b2>
 80117e2:	2900      	cmp	r1, #0
 80117e4:	6863      	ldr	r3, [r4, #4]
 80117e6:	dd0c      	ble.n	8011802 <_printf_float+0x19e>
 80117e8:	6121      	str	r1, [r4, #16]
 80117ea:	b913      	cbnz	r3, 80117f2 <_printf_float+0x18e>
 80117ec:	6822      	ldr	r2, [r4, #0]
 80117ee:	07d2      	lsls	r2, r2, #31
 80117f0:	d502      	bpl.n	80117f8 <_printf_float+0x194>
 80117f2:	3301      	adds	r3, #1
 80117f4:	440b      	add	r3, r1
 80117f6:	6123      	str	r3, [r4, #16]
 80117f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80117fa:	65a3      	str	r3, [r4, #88]	; 0x58
 80117fc:	f04f 0900 	mov.w	r9, #0
 8011800:	e7d9      	b.n	80117b6 <_printf_float+0x152>
 8011802:	b913      	cbnz	r3, 801180a <_printf_float+0x1a6>
 8011804:	6822      	ldr	r2, [r4, #0]
 8011806:	07d0      	lsls	r0, r2, #31
 8011808:	d501      	bpl.n	801180e <_printf_float+0x1aa>
 801180a:	3302      	adds	r3, #2
 801180c:	e7f3      	b.n	80117f6 <_printf_float+0x192>
 801180e:	2301      	movs	r3, #1
 8011810:	e7f1      	b.n	80117f6 <_printf_float+0x192>
 8011812:	f04f 0a67 	mov.w	sl, #103	; 0x67
 8011816:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 801181a:	4293      	cmp	r3, r2
 801181c:	db05      	blt.n	801182a <_printf_float+0x1c6>
 801181e:	6822      	ldr	r2, [r4, #0]
 8011820:	6123      	str	r3, [r4, #16]
 8011822:	07d1      	lsls	r1, r2, #31
 8011824:	d5e8      	bpl.n	80117f8 <_printf_float+0x194>
 8011826:	3301      	adds	r3, #1
 8011828:	e7e5      	b.n	80117f6 <_printf_float+0x192>
 801182a:	2b00      	cmp	r3, #0
 801182c:	bfd4      	ite	le
 801182e:	f1c3 0302 	rsble	r3, r3, #2
 8011832:	2301      	movgt	r3, #1
 8011834:	4413      	add	r3, r2
 8011836:	e7de      	b.n	80117f6 <_printf_float+0x192>
 8011838:	6823      	ldr	r3, [r4, #0]
 801183a:	055a      	lsls	r2, r3, #21
 801183c:	d407      	bmi.n	801184e <_printf_float+0x1ea>
 801183e:	6923      	ldr	r3, [r4, #16]
 8011840:	4642      	mov	r2, r8
 8011842:	4631      	mov	r1, r6
 8011844:	4628      	mov	r0, r5
 8011846:	47b8      	blx	r7
 8011848:	3001      	adds	r0, #1
 801184a:	d12b      	bne.n	80118a4 <_printf_float+0x240>
 801184c:	e767      	b.n	801171e <_printf_float+0xba>
 801184e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8011852:	f240 80dc 	bls.w	8011a0e <_printf_float+0x3aa>
 8011856:	2200      	movs	r2, #0
 8011858:	2300      	movs	r3, #0
 801185a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 801185e:	f7ef f95b 	bl	8000b18 <__aeabi_dcmpeq>
 8011862:	2800      	cmp	r0, #0
 8011864:	d033      	beq.n	80118ce <_printf_float+0x26a>
 8011866:	2301      	movs	r3, #1
 8011868:	4a41      	ldr	r2, [pc, #260]	; (8011970 <_printf_float+0x30c>)
 801186a:	4631      	mov	r1, r6
 801186c:	4628      	mov	r0, r5
 801186e:	47b8      	blx	r7
 8011870:	3001      	adds	r0, #1
 8011872:	f43f af54 	beq.w	801171e <_printf_float+0xba>
 8011876:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801187a:	429a      	cmp	r2, r3
 801187c:	db02      	blt.n	8011884 <_printf_float+0x220>
 801187e:	6823      	ldr	r3, [r4, #0]
 8011880:	07d8      	lsls	r0, r3, #31
 8011882:	d50f      	bpl.n	80118a4 <_printf_float+0x240>
 8011884:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011888:	4631      	mov	r1, r6
 801188a:	4628      	mov	r0, r5
 801188c:	47b8      	blx	r7
 801188e:	3001      	adds	r0, #1
 8011890:	f43f af45 	beq.w	801171e <_printf_float+0xba>
 8011894:	f04f 0800 	mov.w	r8, #0
 8011898:	f104 091a 	add.w	r9, r4, #26
 801189c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801189e:	3b01      	subs	r3, #1
 80118a0:	4543      	cmp	r3, r8
 80118a2:	dc09      	bgt.n	80118b8 <_printf_float+0x254>
 80118a4:	6823      	ldr	r3, [r4, #0]
 80118a6:	079b      	lsls	r3, r3, #30
 80118a8:	f100 8103 	bmi.w	8011ab2 <_printf_float+0x44e>
 80118ac:	68e0      	ldr	r0, [r4, #12]
 80118ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80118b0:	4298      	cmp	r0, r3
 80118b2:	bfb8      	it	lt
 80118b4:	4618      	movlt	r0, r3
 80118b6:	e734      	b.n	8011722 <_printf_float+0xbe>
 80118b8:	2301      	movs	r3, #1
 80118ba:	464a      	mov	r2, r9
 80118bc:	4631      	mov	r1, r6
 80118be:	4628      	mov	r0, r5
 80118c0:	47b8      	blx	r7
 80118c2:	3001      	adds	r0, #1
 80118c4:	f43f af2b 	beq.w	801171e <_printf_float+0xba>
 80118c8:	f108 0801 	add.w	r8, r8, #1
 80118cc:	e7e6      	b.n	801189c <_printf_float+0x238>
 80118ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	dc2b      	bgt.n	801192c <_printf_float+0x2c8>
 80118d4:	2301      	movs	r3, #1
 80118d6:	4a26      	ldr	r2, [pc, #152]	; (8011970 <_printf_float+0x30c>)
 80118d8:	4631      	mov	r1, r6
 80118da:	4628      	mov	r0, r5
 80118dc:	47b8      	blx	r7
 80118de:	3001      	adds	r0, #1
 80118e0:	f43f af1d 	beq.w	801171e <_printf_float+0xba>
 80118e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80118e6:	b923      	cbnz	r3, 80118f2 <_printf_float+0x28e>
 80118e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80118ea:	b913      	cbnz	r3, 80118f2 <_printf_float+0x28e>
 80118ec:	6823      	ldr	r3, [r4, #0]
 80118ee:	07d9      	lsls	r1, r3, #31
 80118f0:	d5d8      	bpl.n	80118a4 <_printf_float+0x240>
 80118f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80118f6:	4631      	mov	r1, r6
 80118f8:	4628      	mov	r0, r5
 80118fa:	47b8      	blx	r7
 80118fc:	3001      	adds	r0, #1
 80118fe:	f43f af0e 	beq.w	801171e <_printf_float+0xba>
 8011902:	f04f 0900 	mov.w	r9, #0
 8011906:	f104 0a1a 	add.w	sl, r4, #26
 801190a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801190c:	425b      	negs	r3, r3
 801190e:	454b      	cmp	r3, r9
 8011910:	dc01      	bgt.n	8011916 <_printf_float+0x2b2>
 8011912:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011914:	e794      	b.n	8011840 <_printf_float+0x1dc>
 8011916:	2301      	movs	r3, #1
 8011918:	4652      	mov	r2, sl
 801191a:	4631      	mov	r1, r6
 801191c:	4628      	mov	r0, r5
 801191e:	47b8      	blx	r7
 8011920:	3001      	adds	r0, #1
 8011922:	f43f aefc 	beq.w	801171e <_printf_float+0xba>
 8011926:	f109 0901 	add.w	r9, r9, #1
 801192a:	e7ee      	b.n	801190a <_printf_float+0x2a6>
 801192c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801192e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8011930:	429a      	cmp	r2, r3
 8011932:	bfa8      	it	ge
 8011934:	461a      	movge	r2, r3
 8011936:	2a00      	cmp	r2, #0
 8011938:	4691      	mov	r9, r2
 801193a:	dd07      	ble.n	801194c <_printf_float+0x2e8>
 801193c:	4613      	mov	r3, r2
 801193e:	4631      	mov	r1, r6
 8011940:	4642      	mov	r2, r8
 8011942:	4628      	mov	r0, r5
 8011944:	47b8      	blx	r7
 8011946:	3001      	adds	r0, #1
 8011948:	f43f aee9 	beq.w	801171e <_printf_float+0xba>
 801194c:	f104 031a 	add.w	r3, r4, #26
 8011950:	f04f 0b00 	mov.w	fp, #0
 8011954:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8011958:	9306      	str	r3, [sp, #24]
 801195a:	e015      	b.n	8011988 <_printf_float+0x324>
 801195c:	7fefffff 	.word	0x7fefffff
 8011960:	08016760 	.word	0x08016760
 8011964:	0801675c 	.word	0x0801675c
 8011968:	08016768 	.word	0x08016768
 801196c:	08016764 	.word	0x08016764
 8011970:	08016a1c 	.word	0x08016a1c
 8011974:	2301      	movs	r3, #1
 8011976:	9a06      	ldr	r2, [sp, #24]
 8011978:	4631      	mov	r1, r6
 801197a:	4628      	mov	r0, r5
 801197c:	47b8      	blx	r7
 801197e:	3001      	adds	r0, #1
 8011980:	f43f aecd 	beq.w	801171e <_printf_float+0xba>
 8011984:	f10b 0b01 	add.w	fp, fp, #1
 8011988:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 801198c:	ebaa 0309 	sub.w	r3, sl, r9
 8011990:	455b      	cmp	r3, fp
 8011992:	dcef      	bgt.n	8011974 <_printf_float+0x310>
 8011994:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011998:	429a      	cmp	r2, r3
 801199a:	44d0      	add	r8, sl
 801199c:	db15      	blt.n	80119ca <_printf_float+0x366>
 801199e:	6823      	ldr	r3, [r4, #0]
 80119a0:	07da      	lsls	r2, r3, #31
 80119a2:	d412      	bmi.n	80119ca <_printf_float+0x366>
 80119a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80119a6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80119a8:	eba3 020a 	sub.w	r2, r3, sl
 80119ac:	eba3 0a01 	sub.w	sl, r3, r1
 80119b0:	4592      	cmp	sl, r2
 80119b2:	bfa8      	it	ge
 80119b4:	4692      	movge	sl, r2
 80119b6:	f1ba 0f00 	cmp.w	sl, #0
 80119ba:	dc0e      	bgt.n	80119da <_printf_float+0x376>
 80119bc:	f04f 0800 	mov.w	r8, #0
 80119c0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80119c4:	f104 091a 	add.w	r9, r4, #26
 80119c8:	e019      	b.n	80119fe <_printf_float+0x39a>
 80119ca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80119ce:	4631      	mov	r1, r6
 80119d0:	4628      	mov	r0, r5
 80119d2:	47b8      	blx	r7
 80119d4:	3001      	adds	r0, #1
 80119d6:	d1e5      	bne.n	80119a4 <_printf_float+0x340>
 80119d8:	e6a1      	b.n	801171e <_printf_float+0xba>
 80119da:	4653      	mov	r3, sl
 80119dc:	4642      	mov	r2, r8
 80119de:	4631      	mov	r1, r6
 80119e0:	4628      	mov	r0, r5
 80119e2:	47b8      	blx	r7
 80119e4:	3001      	adds	r0, #1
 80119e6:	d1e9      	bne.n	80119bc <_printf_float+0x358>
 80119e8:	e699      	b.n	801171e <_printf_float+0xba>
 80119ea:	2301      	movs	r3, #1
 80119ec:	464a      	mov	r2, r9
 80119ee:	4631      	mov	r1, r6
 80119f0:	4628      	mov	r0, r5
 80119f2:	47b8      	blx	r7
 80119f4:	3001      	adds	r0, #1
 80119f6:	f43f ae92 	beq.w	801171e <_printf_float+0xba>
 80119fa:	f108 0801 	add.w	r8, r8, #1
 80119fe:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8011a02:	1a9b      	subs	r3, r3, r2
 8011a04:	eba3 030a 	sub.w	r3, r3, sl
 8011a08:	4543      	cmp	r3, r8
 8011a0a:	dcee      	bgt.n	80119ea <_printf_float+0x386>
 8011a0c:	e74a      	b.n	80118a4 <_printf_float+0x240>
 8011a0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011a10:	2a01      	cmp	r2, #1
 8011a12:	dc01      	bgt.n	8011a18 <_printf_float+0x3b4>
 8011a14:	07db      	lsls	r3, r3, #31
 8011a16:	d53a      	bpl.n	8011a8e <_printf_float+0x42a>
 8011a18:	2301      	movs	r3, #1
 8011a1a:	4642      	mov	r2, r8
 8011a1c:	4631      	mov	r1, r6
 8011a1e:	4628      	mov	r0, r5
 8011a20:	47b8      	blx	r7
 8011a22:	3001      	adds	r0, #1
 8011a24:	f43f ae7b 	beq.w	801171e <_printf_float+0xba>
 8011a28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011a2c:	4631      	mov	r1, r6
 8011a2e:	4628      	mov	r0, r5
 8011a30:	47b8      	blx	r7
 8011a32:	3001      	adds	r0, #1
 8011a34:	f108 0801 	add.w	r8, r8, #1
 8011a38:	f43f ae71 	beq.w	801171e <_printf_float+0xba>
 8011a3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a3e:	2200      	movs	r2, #0
 8011a40:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 8011a44:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8011a48:	2300      	movs	r3, #0
 8011a4a:	f7ef f865 	bl	8000b18 <__aeabi_dcmpeq>
 8011a4e:	b9c8      	cbnz	r0, 8011a84 <_printf_float+0x420>
 8011a50:	4653      	mov	r3, sl
 8011a52:	4642      	mov	r2, r8
 8011a54:	4631      	mov	r1, r6
 8011a56:	4628      	mov	r0, r5
 8011a58:	47b8      	blx	r7
 8011a5a:	3001      	adds	r0, #1
 8011a5c:	d10e      	bne.n	8011a7c <_printf_float+0x418>
 8011a5e:	e65e      	b.n	801171e <_printf_float+0xba>
 8011a60:	2301      	movs	r3, #1
 8011a62:	4652      	mov	r2, sl
 8011a64:	4631      	mov	r1, r6
 8011a66:	4628      	mov	r0, r5
 8011a68:	47b8      	blx	r7
 8011a6a:	3001      	adds	r0, #1
 8011a6c:	f43f ae57 	beq.w	801171e <_printf_float+0xba>
 8011a70:	f108 0801 	add.w	r8, r8, #1
 8011a74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011a76:	3b01      	subs	r3, #1
 8011a78:	4543      	cmp	r3, r8
 8011a7a:	dcf1      	bgt.n	8011a60 <_printf_float+0x3fc>
 8011a7c:	464b      	mov	r3, r9
 8011a7e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8011a82:	e6de      	b.n	8011842 <_printf_float+0x1de>
 8011a84:	f04f 0800 	mov.w	r8, #0
 8011a88:	f104 0a1a 	add.w	sl, r4, #26
 8011a8c:	e7f2      	b.n	8011a74 <_printf_float+0x410>
 8011a8e:	2301      	movs	r3, #1
 8011a90:	e7df      	b.n	8011a52 <_printf_float+0x3ee>
 8011a92:	2301      	movs	r3, #1
 8011a94:	464a      	mov	r2, r9
 8011a96:	4631      	mov	r1, r6
 8011a98:	4628      	mov	r0, r5
 8011a9a:	47b8      	blx	r7
 8011a9c:	3001      	adds	r0, #1
 8011a9e:	f43f ae3e 	beq.w	801171e <_printf_float+0xba>
 8011aa2:	f108 0801 	add.w	r8, r8, #1
 8011aa6:	68e3      	ldr	r3, [r4, #12]
 8011aa8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8011aaa:	1a9b      	subs	r3, r3, r2
 8011aac:	4543      	cmp	r3, r8
 8011aae:	dcf0      	bgt.n	8011a92 <_printf_float+0x42e>
 8011ab0:	e6fc      	b.n	80118ac <_printf_float+0x248>
 8011ab2:	f04f 0800 	mov.w	r8, #0
 8011ab6:	f104 0919 	add.w	r9, r4, #25
 8011aba:	e7f4      	b.n	8011aa6 <_printf_float+0x442>
 8011abc:	2900      	cmp	r1, #0
 8011abe:	f43f ae8b 	beq.w	80117d8 <_printf_float+0x174>
 8011ac2:	2300      	movs	r3, #0
 8011ac4:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8011ac8:	ab09      	add	r3, sp, #36	; 0x24
 8011aca:	9300      	str	r3, [sp, #0]
 8011acc:	ec49 8b10 	vmov	d0, r8, r9
 8011ad0:	6022      	str	r2, [r4, #0]
 8011ad2:	f8cd a004 	str.w	sl, [sp, #4]
 8011ad6:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8011ada:	4628      	mov	r0, r5
 8011adc:	f7ff fd2e 	bl	801153c <__cvt>
 8011ae0:	4680      	mov	r8, r0
 8011ae2:	e648      	b.n	8011776 <_printf_float+0x112>

08011ae4 <_printf_common>:
 8011ae4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011ae8:	4691      	mov	r9, r2
 8011aea:	461f      	mov	r7, r3
 8011aec:	688a      	ldr	r2, [r1, #8]
 8011aee:	690b      	ldr	r3, [r1, #16]
 8011af0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011af4:	4293      	cmp	r3, r2
 8011af6:	bfb8      	it	lt
 8011af8:	4613      	movlt	r3, r2
 8011afa:	f8c9 3000 	str.w	r3, [r9]
 8011afe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011b02:	4606      	mov	r6, r0
 8011b04:	460c      	mov	r4, r1
 8011b06:	b112      	cbz	r2, 8011b0e <_printf_common+0x2a>
 8011b08:	3301      	adds	r3, #1
 8011b0a:	f8c9 3000 	str.w	r3, [r9]
 8011b0e:	6823      	ldr	r3, [r4, #0]
 8011b10:	0699      	lsls	r1, r3, #26
 8011b12:	bf42      	ittt	mi
 8011b14:	f8d9 3000 	ldrmi.w	r3, [r9]
 8011b18:	3302      	addmi	r3, #2
 8011b1a:	f8c9 3000 	strmi.w	r3, [r9]
 8011b1e:	6825      	ldr	r5, [r4, #0]
 8011b20:	f015 0506 	ands.w	r5, r5, #6
 8011b24:	d107      	bne.n	8011b36 <_printf_common+0x52>
 8011b26:	f104 0a19 	add.w	sl, r4, #25
 8011b2a:	68e3      	ldr	r3, [r4, #12]
 8011b2c:	f8d9 2000 	ldr.w	r2, [r9]
 8011b30:	1a9b      	subs	r3, r3, r2
 8011b32:	42ab      	cmp	r3, r5
 8011b34:	dc28      	bgt.n	8011b88 <_printf_common+0xa4>
 8011b36:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8011b3a:	6822      	ldr	r2, [r4, #0]
 8011b3c:	3300      	adds	r3, #0
 8011b3e:	bf18      	it	ne
 8011b40:	2301      	movne	r3, #1
 8011b42:	0692      	lsls	r2, r2, #26
 8011b44:	d42d      	bmi.n	8011ba2 <_printf_common+0xbe>
 8011b46:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011b4a:	4639      	mov	r1, r7
 8011b4c:	4630      	mov	r0, r6
 8011b4e:	47c0      	blx	r8
 8011b50:	3001      	adds	r0, #1
 8011b52:	d020      	beq.n	8011b96 <_printf_common+0xb2>
 8011b54:	6823      	ldr	r3, [r4, #0]
 8011b56:	68e5      	ldr	r5, [r4, #12]
 8011b58:	f8d9 2000 	ldr.w	r2, [r9]
 8011b5c:	f003 0306 	and.w	r3, r3, #6
 8011b60:	2b04      	cmp	r3, #4
 8011b62:	bf08      	it	eq
 8011b64:	1aad      	subeq	r5, r5, r2
 8011b66:	68a3      	ldr	r3, [r4, #8]
 8011b68:	6922      	ldr	r2, [r4, #16]
 8011b6a:	bf0c      	ite	eq
 8011b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011b70:	2500      	movne	r5, #0
 8011b72:	4293      	cmp	r3, r2
 8011b74:	bfc4      	itt	gt
 8011b76:	1a9b      	subgt	r3, r3, r2
 8011b78:	18ed      	addgt	r5, r5, r3
 8011b7a:	f04f 0900 	mov.w	r9, #0
 8011b7e:	341a      	adds	r4, #26
 8011b80:	454d      	cmp	r5, r9
 8011b82:	d11a      	bne.n	8011bba <_printf_common+0xd6>
 8011b84:	2000      	movs	r0, #0
 8011b86:	e008      	b.n	8011b9a <_printf_common+0xb6>
 8011b88:	2301      	movs	r3, #1
 8011b8a:	4652      	mov	r2, sl
 8011b8c:	4639      	mov	r1, r7
 8011b8e:	4630      	mov	r0, r6
 8011b90:	47c0      	blx	r8
 8011b92:	3001      	adds	r0, #1
 8011b94:	d103      	bne.n	8011b9e <_printf_common+0xba>
 8011b96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011b9e:	3501      	adds	r5, #1
 8011ba0:	e7c3      	b.n	8011b2a <_printf_common+0x46>
 8011ba2:	18e1      	adds	r1, r4, r3
 8011ba4:	1c5a      	adds	r2, r3, #1
 8011ba6:	2030      	movs	r0, #48	; 0x30
 8011ba8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011bac:	4422      	add	r2, r4
 8011bae:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011bb2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8011bb6:	3302      	adds	r3, #2
 8011bb8:	e7c5      	b.n	8011b46 <_printf_common+0x62>
 8011bba:	2301      	movs	r3, #1
 8011bbc:	4622      	mov	r2, r4
 8011bbe:	4639      	mov	r1, r7
 8011bc0:	4630      	mov	r0, r6
 8011bc2:	47c0      	blx	r8
 8011bc4:	3001      	adds	r0, #1
 8011bc6:	d0e6      	beq.n	8011b96 <_printf_common+0xb2>
 8011bc8:	f109 0901 	add.w	r9, r9, #1
 8011bcc:	e7d8      	b.n	8011b80 <_printf_common+0x9c>
	...

08011bd0 <_printf_i>:
 8011bd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8011bd4:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8011bd8:	460c      	mov	r4, r1
 8011bda:	7e09      	ldrb	r1, [r1, #24]
 8011bdc:	b085      	sub	sp, #20
 8011bde:	296e      	cmp	r1, #110	; 0x6e
 8011be0:	4617      	mov	r7, r2
 8011be2:	4606      	mov	r6, r0
 8011be4:	4698      	mov	r8, r3
 8011be6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011be8:	f000 80b3 	beq.w	8011d52 <_printf_i+0x182>
 8011bec:	d822      	bhi.n	8011c34 <_printf_i+0x64>
 8011bee:	2963      	cmp	r1, #99	; 0x63
 8011bf0:	d036      	beq.n	8011c60 <_printf_i+0x90>
 8011bf2:	d80a      	bhi.n	8011c0a <_printf_i+0x3a>
 8011bf4:	2900      	cmp	r1, #0
 8011bf6:	f000 80b9 	beq.w	8011d6c <_printf_i+0x19c>
 8011bfa:	2958      	cmp	r1, #88	; 0x58
 8011bfc:	f000 8083 	beq.w	8011d06 <_printf_i+0x136>
 8011c00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011c04:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8011c08:	e032      	b.n	8011c70 <_printf_i+0xa0>
 8011c0a:	2964      	cmp	r1, #100	; 0x64
 8011c0c:	d001      	beq.n	8011c12 <_printf_i+0x42>
 8011c0e:	2969      	cmp	r1, #105	; 0x69
 8011c10:	d1f6      	bne.n	8011c00 <_printf_i+0x30>
 8011c12:	6820      	ldr	r0, [r4, #0]
 8011c14:	6813      	ldr	r3, [r2, #0]
 8011c16:	0605      	lsls	r5, r0, #24
 8011c18:	f103 0104 	add.w	r1, r3, #4
 8011c1c:	d52a      	bpl.n	8011c74 <_printf_i+0xa4>
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	6011      	str	r1, [r2, #0]
 8011c22:	2b00      	cmp	r3, #0
 8011c24:	da03      	bge.n	8011c2e <_printf_i+0x5e>
 8011c26:	222d      	movs	r2, #45	; 0x2d
 8011c28:	425b      	negs	r3, r3
 8011c2a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8011c2e:	486f      	ldr	r0, [pc, #444]	; (8011dec <_printf_i+0x21c>)
 8011c30:	220a      	movs	r2, #10
 8011c32:	e039      	b.n	8011ca8 <_printf_i+0xd8>
 8011c34:	2973      	cmp	r1, #115	; 0x73
 8011c36:	f000 809d 	beq.w	8011d74 <_printf_i+0x1a4>
 8011c3a:	d808      	bhi.n	8011c4e <_printf_i+0x7e>
 8011c3c:	296f      	cmp	r1, #111	; 0x6f
 8011c3e:	d020      	beq.n	8011c82 <_printf_i+0xb2>
 8011c40:	2970      	cmp	r1, #112	; 0x70
 8011c42:	d1dd      	bne.n	8011c00 <_printf_i+0x30>
 8011c44:	6823      	ldr	r3, [r4, #0]
 8011c46:	f043 0320 	orr.w	r3, r3, #32
 8011c4a:	6023      	str	r3, [r4, #0]
 8011c4c:	e003      	b.n	8011c56 <_printf_i+0x86>
 8011c4e:	2975      	cmp	r1, #117	; 0x75
 8011c50:	d017      	beq.n	8011c82 <_printf_i+0xb2>
 8011c52:	2978      	cmp	r1, #120	; 0x78
 8011c54:	d1d4      	bne.n	8011c00 <_printf_i+0x30>
 8011c56:	2378      	movs	r3, #120	; 0x78
 8011c58:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8011c5c:	4864      	ldr	r0, [pc, #400]	; (8011df0 <_printf_i+0x220>)
 8011c5e:	e055      	b.n	8011d0c <_printf_i+0x13c>
 8011c60:	6813      	ldr	r3, [r2, #0]
 8011c62:	1d19      	adds	r1, r3, #4
 8011c64:	681b      	ldr	r3, [r3, #0]
 8011c66:	6011      	str	r1, [r2, #0]
 8011c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011c6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011c70:	2301      	movs	r3, #1
 8011c72:	e08c      	b.n	8011d8e <_printf_i+0x1be>
 8011c74:	681b      	ldr	r3, [r3, #0]
 8011c76:	6011      	str	r1, [r2, #0]
 8011c78:	f010 0f40 	tst.w	r0, #64	; 0x40
 8011c7c:	bf18      	it	ne
 8011c7e:	b21b      	sxthne	r3, r3
 8011c80:	e7cf      	b.n	8011c22 <_printf_i+0x52>
 8011c82:	6813      	ldr	r3, [r2, #0]
 8011c84:	6825      	ldr	r5, [r4, #0]
 8011c86:	1d18      	adds	r0, r3, #4
 8011c88:	6010      	str	r0, [r2, #0]
 8011c8a:	0628      	lsls	r0, r5, #24
 8011c8c:	d501      	bpl.n	8011c92 <_printf_i+0xc2>
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	e002      	b.n	8011c98 <_printf_i+0xc8>
 8011c92:	0668      	lsls	r0, r5, #25
 8011c94:	d5fb      	bpl.n	8011c8e <_printf_i+0xbe>
 8011c96:	881b      	ldrh	r3, [r3, #0]
 8011c98:	4854      	ldr	r0, [pc, #336]	; (8011dec <_printf_i+0x21c>)
 8011c9a:	296f      	cmp	r1, #111	; 0x6f
 8011c9c:	bf14      	ite	ne
 8011c9e:	220a      	movne	r2, #10
 8011ca0:	2208      	moveq	r2, #8
 8011ca2:	2100      	movs	r1, #0
 8011ca4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011ca8:	6865      	ldr	r5, [r4, #4]
 8011caa:	60a5      	str	r5, [r4, #8]
 8011cac:	2d00      	cmp	r5, #0
 8011cae:	f2c0 8095 	blt.w	8011ddc <_printf_i+0x20c>
 8011cb2:	6821      	ldr	r1, [r4, #0]
 8011cb4:	f021 0104 	bic.w	r1, r1, #4
 8011cb8:	6021      	str	r1, [r4, #0]
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d13d      	bne.n	8011d3a <_printf_i+0x16a>
 8011cbe:	2d00      	cmp	r5, #0
 8011cc0:	f040 808e 	bne.w	8011de0 <_printf_i+0x210>
 8011cc4:	4665      	mov	r5, ip
 8011cc6:	2a08      	cmp	r2, #8
 8011cc8:	d10b      	bne.n	8011ce2 <_printf_i+0x112>
 8011cca:	6823      	ldr	r3, [r4, #0]
 8011ccc:	07db      	lsls	r3, r3, #31
 8011cce:	d508      	bpl.n	8011ce2 <_printf_i+0x112>
 8011cd0:	6923      	ldr	r3, [r4, #16]
 8011cd2:	6862      	ldr	r2, [r4, #4]
 8011cd4:	429a      	cmp	r2, r3
 8011cd6:	bfde      	ittt	le
 8011cd8:	2330      	movle	r3, #48	; 0x30
 8011cda:	f805 3c01 	strble.w	r3, [r5, #-1]
 8011cde:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8011ce2:	ebac 0305 	sub.w	r3, ip, r5
 8011ce6:	6123      	str	r3, [r4, #16]
 8011ce8:	f8cd 8000 	str.w	r8, [sp]
 8011cec:	463b      	mov	r3, r7
 8011cee:	aa03      	add	r2, sp, #12
 8011cf0:	4621      	mov	r1, r4
 8011cf2:	4630      	mov	r0, r6
 8011cf4:	f7ff fef6 	bl	8011ae4 <_printf_common>
 8011cf8:	3001      	adds	r0, #1
 8011cfa:	d14d      	bne.n	8011d98 <_printf_i+0x1c8>
 8011cfc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d00:	b005      	add	sp, #20
 8011d02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011d06:	4839      	ldr	r0, [pc, #228]	; (8011dec <_printf_i+0x21c>)
 8011d08:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8011d0c:	6813      	ldr	r3, [r2, #0]
 8011d0e:	6821      	ldr	r1, [r4, #0]
 8011d10:	1d1d      	adds	r5, r3, #4
 8011d12:	681b      	ldr	r3, [r3, #0]
 8011d14:	6015      	str	r5, [r2, #0]
 8011d16:	060a      	lsls	r2, r1, #24
 8011d18:	d50b      	bpl.n	8011d32 <_printf_i+0x162>
 8011d1a:	07ca      	lsls	r2, r1, #31
 8011d1c:	bf44      	itt	mi
 8011d1e:	f041 0120 	orrmi.w	r1, r1, #32
 8011d22:	6021      	strmi	r1, [r4, #0]
 8011d24:	b91b      	cbnz	r3, 8011d2e <_printf_i+0x15e>
 8011d26:	6822      	ldr	r2, [r4, #0]
 8011d28:	f022 0220 	bic.w	r2, r2, #32
 8011d2c:	6022      	str	r2, [r4, #0]
 8011d2e:	2210      	movs	r2, #16
 8011d30:	e7b7      	b.n	8011ca2 <_printf_i+0xd2>
 8011d32:	064d      	lsls	r5, r1, #25
 8011d34:	bf48      	it	mi
 8011d36:	b29b      	uxthmi	r3, r3
 8011d38:	e7ef      	b.n	8011d1a <_printf_i+0x14a>
 8011d3a:	4665      	mov	r5, ip
 8011d3c:	fbb3 f1f2 	udiv	r1, r3, r2
 8011d40:	fb02 3311 	mls	r3, r2, r1, r3
 8011d44:	5cc3      	ldrb	r3, [r0, r3]
 8011d46:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8011d4a:	460b      	mov	r3, r1
 8011d4c:	2900      	cmp	r1, #0
 8011d4e:	d1f5      	bne.n	8011d3c <_printf_i+0x16c>
 8011d50:	e7b9      	b.n	8011cc6 <_printf_i+0xf6>
 8011d52:	6813      	ldr	r3, [r2, #0]
 8011d54:	6825      	ldr	r5, [r4, #0]
 8011d56:	6961      	ldr	r1, [r4, #20]
 8011d58:	1d18      	adds	r0, r3, #4
 8011d5a:	6010      	str	r0, [r2, #0]
 8011d5c:	0628      	lsls	r0, r5, #24
 8011d5e:	681b      	ldr	r3, [r3, #0]
 8011d60:	d501      	bpl.n	8011d66 <_printf_i+0x196>
 8011d62:	6019      	str	r1, [r3, #0]
 8011d64:	e002      	b.n	8011d6c <_printf_i+0x19c>
 8011d66:	066a      	lsls	r2, r5, #25
 8011d68:	d5fb      	bpl.n	8011d62 <_printf_i+0x192>
 8011d6a:	8019      	strh	r1, [r3, #0]
 8011d6c:	2300      	movs	r3, #0
 8011d6e:	6123      	str	r3, [r4, #16]
 8011d70:	4665      	mov	r5, ip
 8011d72:	e7b9      	b.n	8011ce8 <_printf_i+0x118>
 8011d74:	6813      	ldr	r3, [r2, #0]
 8011d76:	1d19      	adds	r1, r3, #4
 8011d78:	6011      	str	r1, [r2, #0]
 8011d7a:	681d      	ldr	r5, [r3, #0]
 8011d7c:	6862      	ldr	r2, [r4, #4]
 8011d7e:	2100      	movs	r1, #0
 8011d80:	4628      	mov	r0, r5
 8011d82:	f7ee fa55 	bl	8000230 <memchr>
 8011d86:	b108      	cbz	r0, 8011d8c <_printf_i+0x1bc>
 8011d88:	1b40      	subs	r0, r0, r5
 8011d8a:	6060      	str	r0, [r4, #4]
 8011d8c:	6863      	ldr	r3, [r4, #4]
 8011d8e:	6123      	str	r3, [r4, #16]
 8011d90:	2300      	movs	r3, #0
 8011d92:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011d96:	e7a7      	b.n	8011ce8 <_printf_i+0x118>
 8011d98:	6923      	ldr	r3, [r4, #16]
 8011d9a:	462a      	mov	r2, r5
 8011d9c:	4639      	mov	r1, r7
 8011d9e:	4630      	mov	r0, r6
 8011da0:	47c0      	blx	r8
 8011da2:	3001      	adds	r0, #1
 8011da4:	d0aa      	beq.n	8011cfc <_printf_i+0x12c>
 8011da6:	6823      	ldr	r3, [r4, #0]
 8011da8:	079b      	lsls	r3, r3, #30
 8011daa:	d413      	bmi.n	8011dd4 <_printf_i+0x204>
 8011dac:	68e0      	ldr	r0, [r4, #12]
 8011dae:	9b03      	ldr	r3, [sp, #12]
 8011db0:	4298      	cmp	r0, r3
 8011db2:	bfb8      	it	lt
 8011db4:	4618      	movlt	r0, r3
 8011db6:	e7a3      	b.n	8011d00 <_printf_i+0x130>
 8011db8:	2301      	movs	r3, #1
 8011dba:	464a      	mov	r2, r9
 8011dbc:	4639      	mov	r1, r7
 8011dbe:	4630      	mov	r0, r6
 8011dc0:	47c0      	blx	r8
 8011dc2:	3001      	adds	r0, #1
 8011dc4:	d09a      	beq.n	8011cfc <_printf_i+0x12c>
 8011dc6:	3501      	adds	r5, #1
 8011dc8:	68e3      	ldr	r3, [r4, #12]
 8011dca:	9a03      	ldr	r2, [sp, #12]
 8011dcc:	1a9b      	subs	r3, r3, r2
 8011dce:	42ab      	cmp	r3, r5
 8011dd0:	dcf2      	bgt.n	8011db8 <_printf_i+0x1e8>
 8011dd2:	e7eb      	b.n	8011dac <_printf_i+0x1dc>
 8011dd4:	2500      	movs	r5, #0
 8011dd6:	f104 0919 	add.w	r9, r4, #25
 8011dda:	e7f5      	b.n	8011dc8 <_printf_i+0x1f8>
 8011ddc:	2b00      	cmp	r3, #0
 8011dde:	d1ac      	bne.n	8011d3a <_printf_i+0x16a>
 8011de0:	7803      	ldrb	r3, [r0, #0]
 8011de2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8011de6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011dea:	e76c      	b.n	8011cc6 <_printf_i+0xf6>
 8011dec:	0801676c 	.word	0x0801676c
 8011df0:	0801677d 	.word	0x0801677d

08011df4 <iprintf>:
 8011df4:	b40f      	push	{r0, r1, r2, r3}
 8011df6:	4b0a      	ldr	r3, [pc, #40]	; (8011e20 <iprintf+0x2c>)
 8011df8:	b513      	push	{r0, r1, r4, lr}
 8011dfa:	681c      	ldr	r4, [r3, #0]
 8011dfc:	b124      	cbz	r4, 8011e08 <iprintf+0x14>
 8011dfe:	69a3      	ldr	r3, [r4, #24]
 8011e00:	b913      	cbnz	r3, 8011e08 <iprintf+0x14>
 8011e02:	4620      	mov	r0, r4
 8011e04:	f001 f8ac 	bl	8012f60 <__sinit>
 8011e08:	ab05      	add	r3, sp, #20
 8011e0a:	9a04      	ldr	r2, [sp, #16]
 8011e0c:	68a1      	ldr	r1, [r4, #8]
 8011e0e:	9301      	str	r3, [sp, #4]
 8011e10:	4620      	mov	r0, r4
 8011e12:	f001 fec1 	bl	8013b98 <_vfiprintf_r>
 8011e16:	b002      	add	sp, #8
 8011e18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011e1c:	b004      	add	sp, #16
 8011e1e:	4770      	bx	lr
 8011e20:	20001c34 	.word	0x20001c34

08011e24 <_puts_r>:
 8011e24:	b570      	push	{r4, r5, r6, lr}
 8011e26:	460e      	mov	r6, r1
 8011e28:	4605      	mov	r5, r0
 8011e2a:	b118      	cbz	r0, 8011e34 <_puts_r+0x10>
 8011e2c:	6983      	ldr	r3, [r0, #24]
 8011e2e:	b90b      	cbnz	r3, 8011e34 <_puts_r+0x10>
 8011e30:	f001 f896 	bl	8012f60 <__sinit>
 8011e34:	69ab      	ldr	r3, [r5, #24]
 8011e36:	68ac      	ldr	r4, [r5, #8]
 8011e38:	b913      	cbnz	r3, 8011e40 <_puts_r+0x1c>
 8011e3a:	4628      	mov	r0, r5
 8011e3c:	f001 f890 	bl	8012f60 <__sinit>
 8011e40:	4b23      	ldr	r3, [pc, #140]	; (8011ed0 <_puts_r+0xac>)
 8011e42:	429c      	cmp	r4, r3
 8011e44:	d117      	bne.n	8011e76 <_puts_r+0x52>
 8011e46:	686c      	ldr	r4, [r5, #4]
 8011e48:	89a3      	ldrh	r3, [r4, #12]
 8011e4a:	071b      	lsls	r3, r3, #28
 8011e4c:	d51d      	bpl.n	8011e8a <_puts_r+0x66>
 8011e4e:	6923      	ldr	r3, [r4, #16]
 8011e50:	b1db      	cbz	r3, 8011e8a <_puts_r+0x66>
 8011e52:	3e01      	subs	r6, #1
 8011e54:	68a3      	ldr	r3, [r4, #8]
 8011e56:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8011e5a:	3b01      	subs	r3, #1
 8011e5c:	60a3      	str	r3, [r4, #8]
 8011e5e:	b9e9      	cbnz	r1, 8011e9c <_puts_r+0x78>
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	da2e      	bge.n	8011ec2 <_puts_r+0x9e>
 8011e64:	4622      	mov	r2, r4
 8011e66:	210a      	movs	r1, #10
 8011e68:	4628      	mov	r0, r5
 8011e6a:	f000 f883 	bl	8011f74 <__swbuf_r>
 8011e6e:	3001      	adds	r0, #1
 8011e70:	d011      	beq.n	8011e96 <_puts_r+0x72>
 8011e72:	200a      	movs	r0, #10
 8011e74:	e011      	b.n	8011e9a <_puts_r+0x76>
 8011e76:	4b17      	ldr	r3, [pc, #92]	; (8011ed4 <_puts_r+0xb0>)
 8011e78:	429c      	cmp	r4, r3
 8011e7a:	d101      	bne.n	8011e80 <_puts_r+0x5c>
 8011e7c:	68ac      	ldr	r4, [r5, #8]
 8011e7e:	e7e3      	b.n	8011e48 <_puts_r+0x24>
 8011e80:	4b15      	ldr	r3, [pc, #84]	; (8011ed8 <_puts_r+0xb4>)
 8011e82:	429c      	cmp	r4, r3
 8011e84:	bf08      	it	eq
 8011e86:	68ec      	ldreq	r4, [r5, #12]
 8011e88:	e7de      	b.n	8011e48 <_puts_r+0x24>
 8011e8a:	4621      	mov	r1, r4
 8011e8c:	4628      	mov	r0, r5
 8011e8e:	f000 f8c3 	bl	8012018 <__swsetup_r>
 8011e92:	2800      	cmp	r0, #0
 8011e94:	d0dd      	beq.n	8011e52 <_puts_r+0x2e>
 8011e96:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011e9a:	bd70      	pop	{r4, r5, r6, pc}
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	da04      	bge.n	8011eaa <_puts_r+0x86>
 8011ea0:	69a2      	ldr	r2, [r4, #24]
 8011ea2:	429a      	cmp	r2, r3
 8011ea4:	dc06      	bgt.n	8011eb4 <_puts_r+0x90>
 8011ea6:	290a      	cmp	r1, #10
 8011ea8:	d004      	beq.n	8011eb4 <_puts_r+0x90>
 8011eaa:	6823      	ldr	r3, [r4, #0]
 8011eac:	1c5a      	adds	r2, r3, #1
 8011eae:	6022      	str	r2, [r4, #0]
 8011eb0:	7019      	strb	r1, [r3, #0]
 8011eb2:	e7cf      	b.n	8011e54 <_puts_r+0x30>
 8011eb4:	4622      	mov	r2, r4
 8011eb6:	4628      	mov	r0, r5
 8011eb8:	f000 f85c 	bl	8011f74 <__swbuf_r>
 8011ebc:	3001      	adds	r0, #1
 8011ebe:	d1c9      	bne.n	8011e54 <_puts_r+0x30>
 8011ec0:	e7e9      	b.n	8011e96 <_puts_r+0x72>
 8011ec2:	6823      	ldr	r3, [r4, #0]
 8011ec4:	200a      	movs	r0, #10
 8011ec6:	1c5a      	adds	r2, r3, #1
 8011ec8:	6022      	str	r2, [r4, #0]
 8011eca:	7018      	strb	r0, [r3, #0]
 8011ecc:	e7e5      	b.n	8011e9a <_puts_r+0x76>
 8011ece:	bf00      	nop
 8011ed0:	080167bc 	.word	0x080167bc
 8011ed4:	080167dc 	.word	0x080167dc
 8011ed8:	0801679c 	.word	0x0801679c

08011edc <puts>:
 8011edc:	4b02      	ldr	r3, [pc, #8]	; (8011ee8 <puts+0xc>)
 8011ede:	4601      	mov	r1, r0
 8011ee0:	6818      	ldr	r0, [r3, #0]
 8011ee2:	f7ff bf9f 	b.w	8011e24 <_puts_r>
 8011ee6:	bf00      	nop
 8011ee8:	20001c34 	.word	0x20001c34

08011eec <sniprintf>:
 8011eec:	b40c      	push	{r2, r3}
 8011eee:	b530      	push	{r4, r5, lr}
 8011ef0:	4b17      	ldr	r3, [pc, #92]	; (8011f50 <sniprintf+0x64>)
 8011ef2:	1e0c      	subs	r4, r1, #0
 8011ef4:	b09d      	sub	sp, #116	; 0x74
 8011ef6:	681d      	ldr	r5, [r3, #0]
 8011ef8:	da08      	bge.n	8011f0c <sniprintf+0x20>
 8011efa:	238b      	movs	r3, #139	; 0x8b
 8011efc:	602b      	str	r3, [r5, #0]
 8011efe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011f02:	b01d      	add	sp, #116	; 0x74
 8011f04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011f08:	b002      	add	sp, #8
 8011f0a:	4770      	bx	lr
 8011f0c:	f44f 7302 	mov.w	r3, #520	; 0x208
 8011f10:	f8ad 3014 	strh.w	r3, [sp, #20]
 8011f14:	bf14      	ite	ne
 8011f16:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8011f1a:	4623      	moveq	r3, r4
 8011f1c:	9304      	str	r3, [sp, #16]
 8011f1e:	9307      	str	r3, [sp, #28]
 8011f20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8011f24:	9002      	str	r0, [sp, #8]
 8011f26:	9006      	str	r0, [sp, #24]
 8011f28:	f8ad 3016 	strh.w	r3, [sp, #22]
 8011f2c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8011f2e:	ab21      	add	r3, sp, #132	; 0x84
 8011f30:	a902      	add	r1, sp, #8
 8011f32:	4628      	mov	r0, r5
 8011f34:	9301      	str	r3, [sp, #4]
 8011f36:	f001 fd0d 	bl	8013954 <_svfiprintf_r>
 8011f3a:	1c43      	adds	r3, r0, #1
 8011f3c:	bfbc      	itt	lt
 8011f3e:	238b      	movlt	r3, #139	; 0x8b
 8011f40:	602b      	strlt	r3, [r5, #0]
 8011f42:	2c00      	cmp	r4, #0
 8011f44:	d0dd      	beq.n	8011f02 <sniprintf+0x16>
 8011f46:	9b02      	ldr	r3, [sp, #8]
 8011f48:	2200      	movs	r2, #0
 8011f4a:	701a      	strb	r2, [r3, #0]
 8011f4c:	e7d9      	b.n	8011f02 <sniprintf+0x16>
 8011f4e:	bf00      	nop
 8011f50:	20001c34 	.word	0x20001c34

08011f54 <strcat>:
 8011f54:	b510      	push	{r4, lr}
 8011f56:	4603      	mov	r3, r0
 8011f58:	781a      	ldrb	r2, [r3, #0]
 8011f5a:	1c5c      	adds	r4, r3, #1
 8011f5c:	b93a      	cbnz	r2, 8011f6e <strcat+0x1a>
 8011f5e:	3b01      	subs	r3, #1
 8011f60:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011f64:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011f68:	2a00      	cmp	r2, #0
 8011f6a:	d1f9      	bne.n	8011f60 <strcat+0xc>
 8011f6c:	bd10      	pop	{r4, pc}
 8011f6e:	4623      	mov	r3, r4
 8011f70:	e7f2      	b.n	8011f58 <strcat+0x4>
	...

08011f74 <__swbuf_r>:
 8011f74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f76:	460e      	mov	r6, r1
 8011f78:	4614      	mov	r4, r2
 8011f7a:	4605      	mov	r5, r0
 8011f7c:	b118      	cbz	r0, 8011f86 <__swbuf_r+0x12>
 8011f7e:	6983      	ldr	r3, [r0, #24]
 8011f80:	b90b      	cbnz	r3, 8011f86 <__swbuf_r+0x12>
 8011f82:	f000 ffed 	bl	8012f60 <__sinit>
 8011f86:	4b21      	ldr	r3, [pc, #132]	; (801200c <__swbuf_r+0x98>)
 8011f88:	429c      	cmp	r4, r3
 8011f8a:	d12a      	bne.n	8011fe2 <__swbuf_r+0x6e>
 8011f8c:	686c      	ldr	r4, [r5, #4]
 8011f8e:	69a3      	ldr	r3, [r4, #24]
 8011f90:	60a3      	str	r3, [r4, #8]
 8011f92:	89a3      	ldrh	r3, [r4, #12]
 8011f94:	071a      	lsls	r2, r3, #28
 8011f96:	d52e      	bpl.n	8011ff6 <__swbuf_r+0x82>
 8011f98:	6923      	ldr	r3, [r4, #16]
 8011f9a:	b363      	cbz	r3, 8011ff6 <__swbuf_r+0x82>
 8011f9c:	6923      	ldr	r3, [r4, #16]
 8011f9e:	6820      	ldr	r0, [r4, #0]
 8011fa0:	1ac0      	subs	r0, r0, r3
 8011fa2:	6963      	ldr	r3, [r4, #20]
 8011fa4:	b2f6      	uxtb	r6, r6
 8011fa6:	4283      	cmp	r3, r0
 8011fa8:	4637      	mov	r7, r6
 8011faa:	dc04      	bgt.n	8011fb6 <__swbuf_r+0x42>
 8011fac:	4621      	mov	r1, r4
 8011fae:	4628      	mov	r0, r5
 8011fb0:	f000 ff6c 	bl	8012e8c <_fflush_r>
 8011fb4:	bb28      	cbnz	r0, 8012002 <__swbuf_r+0x8e>
 8011fb6:	68a3      	ldr	r3, [r4, #8]
 8011fb8:	3b01      	subs	r3, #1
 8011fba:	60a3      	str	r3, [r4, #8]
 8011fbc:	6823      	ldr	r3, [r4, #0]
 8011fbe:	1c5a      	adds	r2, r3, #1
 8011fc0:	6022      	str	r2, [r4, #0]
 8011fc2:	701e      	strb	r6, [r3, #0]
 8011fc4:	6963      	ldr	r3, [r4, #20]
 8011fc6:	3001      	adds	r0, #1
 8011fc8:	4283      	cmp	r3, r0
 8011fca:	d004      	beq.n	8011fd6 <__swbuf_r+0x62>
 8011fcc:	89a3      	ldrh	r3, [r4, #12]
 8011fce:	07db      	lsls	r3, r3, #31
 8011fd0:	d519      	bpl.n	8012006 <__swbuf_r+0x92>
 8011fd2:	2e0a      	cmp	r6, #10
 8011fd4:	d117      	bne.n	8012006 <__swbuf_r+0x92>
 8011fd6:	4621      	mov	r1, r4
 8011fd8:	4628      	mov	r0, r5
 8011fda:	f000 ff57 	bl	8012e8c <_fflush_r>
 8011fde:	b190      	cbz	r0, 8012006 <__swbuf_r+0x92>
 8011fe0:	e00f      	b.n	8012002 <__swbuf_r+0x8e>
 8011fe2:	4b0b      	ldr	r3, [pc, #44]	; (8012010 <__swbuf_r+0x9c>)
 8011fe4:	429c      	cmp	r4, r3
 8011fe6:	d101      	bne.n	8011fec <__swbuf_r+0x78>
 8011fe8:	68ac      	ldr	r4, [r5, #8]
 8011fea:	e7d0      	b.n	8011f8e <__swbuf_r+0x1a>
 8011fec:	4b09      	ldr	r3, [pc, #36]	; (8012014 <__swbuf_r+0xa0>)
 8011fee:	429c      	cmp	r4, r3
 8011ff0:	bf08      	it	eq
 8011ff2:	68ec      	ldreq	r4, [r5, #12]
 8011ff4:	e7cb      	b.n	8011f8e <__swbuf_r+0x1a>
 8011ff6:	4621      	mov	r1, r4
 8011ff8:	4628      	mov	r0, r5
 8011ffa:	f000 f80d 	bl	8012018 <__swsetup_r>
 8011ffe:	2800      	cmp	r0, #0
 8012000:	d0cc      	beq.n	8011f9c <__swbuf_r+0x28>
 8012002:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8012006:	4638      	mov	r0, r7
 8012008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801200a:	bf00      	nop
 801200c:	080167bc 	.word	0x080167bc
 8012010:	080167dc 	.word	0x080167dc
 8012014:	0801679c 	.word	0x0801679c

08012018 <__swsetup_r>:
 8012018:	4b32      	ldr	r3, [pc, #200]	; (80120e4 <__swsetup_r+0xcc>)
 801201a:	b570      	push	{r4, r5, r6, lr}
 801201c:	681d      	ldr	r5, [r3, #0]
 801201e:	4606      	mov	r6, r0
 8012020:	460c      	mov	r4, r1
 8012022:	b125      	cbz	r5, 801202e <__swsetup_r+0x16>
 8012024:	69ab      	ldr	r3, [r5, #24]
 8012026:	b913      	cbnz	r3, 801202e <__swsetup_r+0x16>
 8012028:	4628      	mov	r0, r5
 801202a:	f000 ff99 	bl	8012f60 <__sinit>
 801202e:	4b2e      	ldr	r3, [pc, #184]	; (80120e8 <__swsetup_r+0xd0>)
 8012030:	429c      	cmp	r4, r3
 8012032:	d10f      	bne.n	8012054 <__swsetup_r+0x3c>
 8012034:	686c      	ldr	r4, [r5, #4]
 8012036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801203a:	b29a      	uxth	r2, r3
 801203c:	0715      	lsls	r5, r2, #28
 801203e:	d42c      	bmi.n	801209a <__swsetup_r+0x82>
 8012040:	06d0      	lsls	r0, r2, #27
 8012042:	d411      	bmi.n	8012068 <__swsetup_r+0x50>
 8012044:	2209      	movs	r2, #9
 8012046:	6032      	str	r2, [r6, #0]
 8012048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801204c:	81a3      	strh	r3, [r4, #12]
 801204e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012052:	e03e      	b.n	80120d2 <__swsetup_r+0xba>
 8012054:	4b25      	ldr	r3, [pc, #148]	; (80120ec <__swsetup_r+0xd4>)
 8012056:	429c      	cmp	r4, r3
 8012058:	d101      	bne.n	801205e <__swsetup_r+0x46>
 801205a:	68ac      	ldr	r4, [r5, #8]
 801205c:	e7eb      	b.n	8012036 <__swsetup_r+0x1e>
 801205e:	4b24      	ldr	r3, [pc, #144]	; (80120f0 <__swsetup_r+0xd8>)
 8012060:	429c      	cmp	r4, r3
 8012062:	bf08      	it	eq
 8012064:	68ec      	ldreq	r4, [r5, #12]
 8012066:	e7e6      	b.n	8012036 <__swsetup_r+0x1e>
 8012068:	0751      	lsls	r1, r2, #29
 801206a:	d512      	bpl.n	8012092 <__swsetup_r+0x7a>
 801206c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801206e:	b141      	cbz	r1, 8012082 <__swsetup_r+0x6a>
 8012070:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012074:	4299      	cmp	r1, r3
 8012076:	d002      	beq.n	801207e <__swsetup_r+0x66>
 8012078:	4630      	mov	r0, r6
 801207a:	f001 fb69 	bl	8013750 <_free_r>
 801207e:	2300      	movs	r3, #0
 8012080:	6363      	str	r3, [r4, #52]	; 0x34
 8012082:	89a3      	ldrh	r3, [r4, #12]
 8012084:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8012088:	81a3      	strh	r3, [r4, #12]
 801208a:	2300      	movs	r3, #0
 801208c:	6063      	str	r3, [r4, #4]
 801208e:	6923      	ldr	r3, [r4, #16]
 8012090:	6023      	str	r3, [r4, #0]
 8012092:	89a3      	ldrh	r3, [r4, #12]
 8012094:	f043 0308 	orr.w	r3, r3, #8
 8012098:	81a3      	strh	r3, [r4, #12]
 801209a:	6923      	ldr	r3, [r4, #16]
 801209c:	b94b      	cbnz	r3, 80120b2 <__swsetup_r+0x9a>
 801209e:	89a3      	ldrh	r3, [r4, #12]
 80120a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80120a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80120a8:	d003      	beq.n	80120b2 <__swsetup_r+0x9a>
 80120aa:	4621      	mov	r1, r4
 80120ac:	4630      	mov	r0, r6
 80120ae:	f001 f813 	bl	80130d8 <__smakebuf_r>
 80120b2:	89a2      	ldrh	r2, [r4, #12]
 80120b4:	f012 0301 	ands.w	r3, r2, #1
 80120b8:	d00c      	beq.n	80120d4 <__swsetup_r+0xbc>
 80120ba:	2300      	movs	r3, #0
 80120bc:	60a3      	str	r3, [r4, #8]
 80120be:	6963      	ldr	r3, [r4, #20]
 80120c0:	425b      	negs	r3, r3
 80120c2:	61a3      	str	r3, [r4, #24]
 80120c4:	6923      	ldr	r3, [r4, #16]
 80120c6:	b953      	cbnz	r3, 80120de <__swsetup_r+0xc6>
 80120c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80120cc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80120d0:	d1ba      	bne.n	8012048 <__swsetup_r+0x30>
 80120d2:	bd70      	pop	{r4, r5, r6, pc}
 80120d4:	0792      	lsls	r2, r2, #30
 80120d6:	bf58      	it	pl
 80120d8:	6963      	ldrpl	r3, [r4, #20]
 80120da:	60a3      	str	r3, [r4, #8]
 80120dc:	e7f2      	b.n	80120c4 <__swsetup_r+0xac>
 80120de:	2000      	movs	r0, #0
 80120e0:	e7f7      	b.n	80120d2 <__swsetup_r+0xba>
 80120e2:	bf00      	nop
 80120e4:	20001c34 	.word	0x20001c34
 80120e8:	080167bc 	.word	0x080167bc
 80120ec:	080167dc 	.word	0x080167dc
 80120f0:	0801679c 	.word	0x0801679c

080120f4 <quorem>:
 80120f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120f8:	6903      	ldr	r3, [r0, #16]
 80120fa:	690c      	ldr	r4, [r1, #16]
 80120fc:	42a3      	cmp	r3, r4
 80120fe:	4680      	mov	r8, r0
 8012100:	f2c0 8082 	blt.w	8012208 <quorem+0x114>
 8012104:	3c01      	subs	r4, #1
 8012106:	f101 0714 	add.w	r7, r1, #20
 801210a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 801210e:	f100 0614 	add.w	r6, r0, #20
 8012112:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8012116:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 801211a:	eb06 030c 	add.w	r3, r6, ip
 801211e:	3501      	adds	r5, #1
 8012120:	eb07 090c 	add.w	r9, r7, ip
 8012124:	9301      	str	r3, [sp, #4]
 8012126:	fbb0 f5f5 	udiv	r5, r0, r5
 801212a:	b395      	cbz	r5, 8012192 <quorem+0x9e>
 801212c:	f04f 0a00 	mov.w	sl, #0
 8012130:	4638      	mov	r0, r7
 8012132:	46b6      	mov	lr, r6
 8012134:	46d3      	mov	fp, sl
 8012136:	f850 2b04 	ldr.w	r2, [r0], #4
 801213a:	b293      	uxth	r3, r2
 801213c:	fb05 a303 	mla	r3, r5, r3, sl
 8012140:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8012144:	b29b      	uxth	r3, r3
 8012146:	ebab 0303 	sub.w	r3, fp, r3
 801214a:	0c12      	lsrs	r2, r2, #16
 801214c:	f8de b000 	ldr.w	fp, [lr]
 8012150:	fb05 a202 	mla	r2, r5, r2, sl
 8012154:	fa13 f38b 	uxtah	r3, r3, fp
 8012158:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 801215c:	fa1f fb82 	uxth.w	fp, r2
 8012160:	f8de 2000 	ldr.w	r2, [lr]
 8012164:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8012168:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801216c:	b29b      	uxth	r3, r3
 801216e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012172:	4581      	cmp	r9, r0
 8012174:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8012178:	f84e 3b04 	str.w	r3, [lr], #4
 801217c:	d2db      	bcs.n	8012136 <quorem+0x42>
 801217e:	f856 300c 	ldr.w	r3, [r6, ip]
 8012182:	b933      	cbnz	r3, 8012192 <quorem+0x9e>
 8012184:	9b01      	ldr	r3, [sp, #4]
 8012186:	3b04      	subs	r3, #4
 8012188:	429e      	cmp	r6, r3
 801218a:	461a      	mov	r2, r3
 801218c:	d330      	bcc.n	80121f0 <quorem+0xfc>
 801218e:	f8c8 4010 	str.w	r4, [r8, #16]
 8012192:	4640      	mov	r0, r8
 8012194:	f001 fa08 	bl	80135a8 <__mcmp>
 8012198:	2800      	cmp	r0, #0
 801219a:	db25      	blt.n	80121e8 <quorem+0xf4>
 801219c:	3501      	adds	r5, #1
 801219e:	4630      	mov	r0, r6
 80121a0:	f04f 0c00 	mov.w	ip, #0
 80121a4:	f857 2b04 	ldr.w	r2, [r7], #4
 80121a8:	f8d0 e000 	ldr.w	lr, [r0]
 80121ac:	b293      	uxth	r3, r2
 80121ae:	ebac 0303 	sub.w	r3, ip, r3
 80121b2:	0c12      	lsrs	r2, r2, #16
 80121b4:	fa13 f38e 	uxtah	r3, r3, lr
 80121b8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80121bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80121c0:	b29b      	uxth	r3, r3
 80121c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80121c6:	45b9      	cmp	r9, r7
 80121c8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80121cc:	f840 3b04 	str.w	r3, [r0], #4
 80121d0:	d2e8      	bcs.n	80121a4 <quorem+0xb0>
 80121d2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 80121d6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 80121da:	b92a      	cbnz	r2, 80121e8 <quorem+0xf4>
 80121dc:	3b04      	subs	r3, #4
 80121de:	429e      	cmp	r6, r3
 80121e0:	461a      	mov	r2, r3
 80121e2:	d30b      	bcc.n	80121fc <quorem+0x108>
 80121e4:	f8c8 4010 	str.w	r4, [r8, #16]
 80121e8:	4628      	mov	r0, r5
 80121ea:	b003      	add	sp, #12
 80121ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80121f0:	6812      	ldr	r2, [r2, #0]
 80121f2:	3b04      	subs	r3, #4
 80121f4:	2a00      	cmp	r2, #0
 80121f6:	d1ca      	bne.n	801218e <quorem+0x9a>
 80121f8:	3c01      	subs	r4, #1
 80121fa:	e7c5      	b.n	8012188 <quorem+0x94>
 80121fc:	6812      	ldr	r2, [r2, #0]
 80121fe:	3b04      	subs	r3, #4
 8012200:	2a00      	cmp	r2, #0
 8012202:	d1ef      	bne.n	80121e4 <quorem+0xf0>
 8012204:	3c01      	subs	r4, #1
 8012206:	e7ea      	b.n	80121de <quorem+0xea>
 8012208:	2000      	movs	r0, #0
 801220a:	e7ee      	b.n	80121ea <quorem+0xf6>
 801220c:	0000      	movs	r0, r0
	...

08012210 <_dtoa_r>:
 8012210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012214:	ec57 6b10 	vmov	r6, r7, d0
 8012218:	b097      	sub	sp, #92	; 0x5c
 801221a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801221c:	9106      	str	r1, [sp, #24]
 801221e:	4604      	mov	r4, r0
 8012220:	920b      	str	r2, [sp, #44]	; 0x2c
 8012222:	9312      	str	r3, [sp, #72]	; 0x48
 8012224:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012228:	e9cd 6700 	strd	r6, r7, [sp]
 801222c:	b93d      	cbnz	r5, 801223e <_dtoa_r+0x2e>
 801222e:	2010      	movs	r0, #16
 8012230:	f000 ff92 	bl	8013158 <malloc>
 8012234:	6260      	str	r0, [r4, #36]	; 0x24
 8012236:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801223a:	6005      	str	r5, [r0, #0]
 801223c:	60c5      	str	r5, [r0, #12]
 801223e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012240:	6819      	ldr	r1, [r3, #0]
 8012242:	b151      	cbz	r1, 801225a <_dtoa_r+0x4a>
 8012244:	685a      	ldr	r2, [r3, #4]
 8012246:	604a      	str	r2, [r1, #4]
 8012248:	2301      	movs	r3, #1
 801224a:	4093      	lsls	r3, r2
 801224c:	608b      	str	r3, [r1, #8]
 801224e:	4620      	mov	r0, r4
 8012250:	f000 ffc9 	bl	80131e6 <_Bfree>
 8012254:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012256:	2200      	movs	r2, #0
 8012258:	601a      	str	r2, [r3, #0]
 801225a:	1e3b      	subs	r3, r7, #0
 801225c:	bfbb      	ittet	lt
 801225e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8012262:	9301      	strlt	r3, [sp, #4]
 8012264:	2300      	movge	r3, #0
 8012266:	2201      	movlt	r2, #1
 8012268:	bfac      	ite	ge
 801226a:	f8c8 3000 	strge.w	r3, [r8]
 801226e:	f8c8 2000 	strlt.w	r2, [r8]
 8012272:	4baf      	ldr	r3, [pc, #700]	; (8012530 <_dtoa_r+0x320>)
 8012274:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8012278:	ea33 0308 	bics.w	r3, r3, r8
 801227c:	d114      	bne.n	80122a8 <_dtoa_r+0x98>
 801227e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012280:	f242 730f 	movw	r3, #9999	; 0x270f
 8012284:	6013      	str	r3, [r2, #0]
 8012286:	9b00      	ldr	r3, [sp, #0]
 8012288:	b923      	cbnz	r3, 8012294 <_dtoa_r+0x84>
 801228a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 801228e:	2800      	cmp	r0, #0
 8012290:	f000 8542 	beq.w	8012d18 <_dtoa_r+0xb08>
 8012294:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012296:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8012544 <_dtoa_r+0x334>
 801229a:	2b00      	cmp	r3, #0
 801229c:	f000 8544 	beq.w	8012d28 <_dtoa_r+0xb18>
 80122a0:	f10b 0303 	add.w	r3, fp, #3
 80122a4:	f000 bd3e 	b.w	8012d24 <_dtoa_r+0xb14>
 80122a8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80122ac:	2200      	movs	r2, #0
 80122ae:	2300      	movs	r3, #0
 80122b0:	4630      	mov	r0, r6
 80122b2:	4639      	mov	r1, r7
 80122b4:	f7ee fc30 	bl	8000b18 <__aeabi_dcmpeq>
 80122b8:	4681      	mov	r9, r0
 80122ba:	b168      	cbz	r0, 80122d8 <_dtoa_r+0xc8>
 80122bc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80122be:	2301      	movs	r3, #1
 80122c0:	6013      	str	r3, [r2, #0]
 80122c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	f000 8524 	beq.w	8012d12 <_dtoa_r+0xb02>
 80122ca:	4b9a      	ldr	r3, [pc, #616]	; (8012534 <_dtoa_r+0x324>)
 80122cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80122ce:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 80122d2:	6013      	str	r3, [r2, #0]
 80122d4:	f000 bd28 	b.w	8012d28 <_dtoa_r+0xb18>
 80122d8:	aa14      	add	r2, sp, #80	; 0x50
 80122da:	a915      	add	r1, sp, #84	; 0x54
 80122dc:	ec47 6b10 	vmov	d0, r6, r7
 80122e0:	4620      	mov	r0, r4
 80122e2:	f001 f9d8 	bl	8013696 <__d2b>
 80122e6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 80122ea:	9004      	str	r0, [sp, #16]
 80122ec:	2d00      	cmp	r5, #0
 80122ee:	d07c      	beq.n	80123ea <_dtoa_r+0x1da>
 80122f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80122f4:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80122f8:	46b2      	mov	sl, r6
 80122fa:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80122fe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012302:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8012306:	2200      	movs	r2, #0
 8012308:	4b8b      	ldr	r3, [pc, #556]	; (8012538 <_dtoa_r+0x328>)
 801230a:	4650      	mov	r0, sl
 801230c:	4659      	mov	r1, fp
 801230e:	f7ed ffe3 	bl	80002d8 <__aeabi_dsub>
 8012312:	a381      	add	r3, pc, #516	; (adr r3, 8012518 <_dtoa_r+0x308>)
 8012314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012318:	f7ee f996 	bl	8000648 <__aeabi_dmul>
 801231c:	a380      	add	r3, pc, #512	; (adr r3, 8012520 <_dtoa_r+0x310>)
 801231e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012322:	f7ed ffdb 	bl	80002dc <__adddf3>
 8012326:	4606      	mov	r6, r0
 8012328:	4628      	mov	r0, r5
 801232a:	460f      	mov	r7, r1
 801232c:	f7ee f922 	bl	8000574 <__aeabi_i2d>
 8012330:	a37d      	add	r3, pc, #500	; (adr r3, 8012528 <_dtoa_r+0x318>)
 8012332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012336:	f7ee f987 	bl	8000648 <__aeabi_dmul>
 801233a:	4602      	mov	r2, r0
 801233c:	460b      	mov	r3, r1
 801233e:	4630      	mov	r0, r6
 8012340:	4639      	mov	r1, r7
 8012342:	f7ed ffcb 	bl	80002dc <__adddf3>
 8012346:	4606      	mov	r6, r0
 8012348:	460f      	mov	r7, r1
 801234a:	f7ee fc2d 	bl	8000ba8 <__aeabi_d2iz>
 801234e:	2200      	movs	r2, #0
 8012350:	4682      	mov	sl, r0
 8012352:	2300      	movs	r3, #0
 8012354:	4630      	mov	r0, r6
 8012356:	4639      	mov	r1, r7
 8012358:	f7ee fbe8 	bl	8000b2c <__aeabi_dcmplt>
 801235c:	b148      	cbz	r0, 8012372 <_dtoa_r+0x162>
 801235e:	4650      	mov	r0, sl
 8012360:	f7ee f908 	bl	8000574 <__aeabi_i2d>
 8012364:	4632      	mov	r2, r6
 8012366:	463b      	mov	r3, r7
 8012368:	f7ee fbd6 	bl	8000b18 <__aeabi_dcmpeq>
 801236c:	b908      	cbnz	r0, 8012372 <_dtoa_r+0x162>
 801236e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012372:	f1ba 0f16 	cmp.w	sl, #22
 8012376:	d859      	bhi.n	801242c <_dtoa_r+0x21c>
 8012378:	4970      	ldr	r1, [pc, #448]	; (801253c <_dtoa_r+0x32c>)
 801237a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 801237e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012382:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012386:	f7ee fbef 	bl	8000b68 <__aeabi_dcmpgt>
 801238a:	2800      	cmp	r0, #0
 801238c:	d050      	beq.n	8012430 <_dtoa_r+0x220>
 801238e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012392:	2300      	movs	r3, #0
 8012394:	930f      	str	r3, [sp, #60]	; 0x3c
 8012396:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8012398:	1b5d      	subs	r5, r3, r5
 801239a:	f1b5 0801 	subs.w	r8, r5, #1
 801239e:	bf49      	itett	mi
 80123a0:	f1c5 0301 	rsbmi	r3, r5, #1
 80123a4:	2300      	movpl	r3, #0
 80123a6:	9305      	strmi	r3, [sp, #20]
 80123a8:	f04f 0800 	movmi.w	r8, #0
 80123ac:	bf58      	it	pl
 80123ae:	9305      	strpl	r3, [sp, #20]
 80123b0:	f1ba 0f00 	cmp.w	sl, #0
 80123b4:	db3e      	blt.n	8012434 <_dtoa_r+0x224>
 80123b6:	2300      	movs	r3, #0
 80123b8:	44d0      	add	r8, sl
 80123ba:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80123be:	9307      	str	r3, [sp, #28]
 80123c0:	9b06      	ldr	r3, [sp, #24]
 80123c2:	2b09      	cmp	r3, #9
 80123c4:	f200 8090 	bhi.w	80124e8 <_dtoa_r+0x2d8>
 80123c8:	2b05      	cmp	r3, #5
 80123ca:	bfc4      	itt	gt
 80123cc:	3b04      	subgt	r3, #4
 80123ce:	9306      	strgt	r3, [sp, #24]
 80123d0:	9b06      	ldr	r3, [sp, #24]
 80123d2:	f1a3 0302 	sub.w	r3, r3, #2
 80123d6:	bfcc      	ite	gt
 80123d8:	2500      	movgt	r5, #0
 80123da:	2501      	movle	r5, #1
 80123dc:	2b03      	cmp	r3, #3
 80123de:	f200 808f 	bhi.w	8012500 <_dtoa_r+0x2f0>
 80123e2:	e8df f003 	tbb	[pc, r3]
 80123e6:	7f7d      	.short	0x7f7d
 80123e8:	7131      	.short	0x7131
 80123ea:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80123ee:	441d      	add	r5, r3
 80123f0:	f205 4032 	addw	r0, r5, #1074	; 0x432
 80123f4:	2820      	cmp	r0, #32
 80123f6:	dd13      	ble.n	8012420 <_dtoa_r+0x210>
 80123f8:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80123fc:	9b00      	ldr	r3, [sp, #0]
 80123fe:	fa08 f800 	lsl.w	r8, r8, r0
 8012402:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8012406:	fa23 f000 	lsr.w	r0, r3, r0
 801240a:	ea48 0000 	orr.w	r0, r8, r0
 801240e:	f7ee f8a1 	bl	8000554 <__aeabi_ui2d>
 8012412:	2301      	movs	r3, #1
 8012414:	4682      	mov	sl, r0
 8012416:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 801241a:	3d01      	subs	r5, #1
 801241c:	9313      	str	r3, [sp, #76]	; 0x4c
 801241e:	e772      	b.n	8012306 <_dtoa_r+0xf6>
 8012420:	9b00      	ldr	r3, [sp, #0]
 8012422:	f1c0 0020 	rsb	r0, r0, #32
 8012426:	fa03 f000 	lsl.w	r0, r3, r0
 801242a:	e7f0      	b.n	801240e <_dtoa_r+0x1fe>
 801242c:	2301      	movs	r3, #1
 801242e:	e7b1      	b.n	8012394 <_dtoa_r+0x184>
 8012430:	900f      	str	r0, [sp, #60]	; 0x3c
 8012432:	e7b0      	b.n	8012396 <_dtoa_r+0x186>
 8012434:	9b05      	ldr	r3, [sp, #20]
 8012436:	eba3 030a 	sub.w	r3, r3, sl
 801243a:	9305      	str	r3, [sp, #20]
 801243c:	f1ca 0300 	rsb	r3, sl, #0
 8012440:	9307      	str	r3, [sp, #28]
 8012442:	2300      	movs	r3, #0
 8012444:	930e      	str	r3, [sp, #56]	; 0x38
 8012446:	e7bb      	b.n	80123c0 <_dtoa_r+0x1b0>
 8012448:	2301      	movs	r3, #1
 801244a:	930a      	str	r3, [sp, #40]	; 0x28
 801244c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801244e:	2b00      	cmp	r3, #0
 8012450:	dd59      	ble.n	8012506 <_dtoa_r+0x2f6>
 8012452:	9302      	str	r3, [sp, #8]
 8012454:	4699      	mov	r9, r3
 8012456:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8012458:	2200      	movs	r2, #0
 801245a:	6072      	str	r2, [r6, #4]
 801245c:	2204      	movs	r2, #4
 801245e:	f102 0014 	add.w	r0, r2, #20
 8012462:	4298      	cmp	r0, r3
 8012464:	6871      	ldr	r1, [r6, #4]
 8012466:	d953      	bls.n	8012510 <_dtoa_r+0x300>
 8012468:	4620      	mov	r0, r4
 801246a:	f000 fe88 	bl	801317e <_Balloc>
 801246e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012470:	6030      	str	r0, [r6, #0]
 8012472:	f1b9 0f0e 	cmp.w	r9, #14
 8012476:	f8d3 b000 	ldr.w	fp, [r3]
 801247a:	f200 80e6 	bhi.w	801264a <_dtoa_r+0x43a>
 801247e:	2d00      	cmp	r5, #0
 8012480:	f000 80e3 	beq.w	801264a <_dtoa_r+0x43a>
 8012484:	ed9d 7b00 	vldr	d7, [sp]
 8012488:	f1ba 0f00 	cmp.w	sl, #0
 801248c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8012490:	dd74      	ble.n	801257c <_dtoa_r+0x36c>
 8012492:	4a2a      	ldr	r2, [pc, #168]	; (801253c <_dtoa_r+0x32c>)
 8012494:	f00a 030f 	and.w	r3, sl, #15
 8012498:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801249c:	ed93 7b00 	vldr	d7, [r3]
 80124a0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80124a4:	06f0      	lsls	r0, r6, #27
 80124a6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80124aa:	d565      	bpl.n	8012578 <_dtoa_r+0x368>
 80124ac:	4b24      	ldr	r3, [pc, #144]	; (8012540 <_dtoa_r+0x330>)
 80124ae:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80124b2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80124b6:	f7ee f9f1 	bl	800089c <__aeabi_ddiv>
 80124ba:	e9cd 0100 	strd	r0, r1, [sp]
 80124be:	f006 060f 	and.w	r6, r6, #15
 80124c2:	2503      	movs	r5, #3
 80124c4:	4f1e      	ldr	r7, [pc, #120]	; (8012540 <_dtoa_r+0x330>)
 80124c6:	e04c      	b.n	8012562 <_dtoa_r+0x352>
 80124c8:	2301      	movs	r3, #1
 80124ca:	930a      	str	r3, [sp, #40]	; 0x28
 80124cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80124ce:	4453      	add	r3, sl
 80124d0:	f103 0901 	add.w	r9, r3, #1
 80124d4:	9302      	str	r3, [sp, #8]
 80124d6:	464b      	mov	r3, r9
 80124d8:	2b01      	cmp	r3, #1
 80124da:	bfb8      	it	lt
 80124dc:	2301      	movlt	r3, #1
 80124de:	e7ba      	b.n	8012456 <_dtoa_r+0x246>
 80124e0:	2300      	movs	r3, #0
 80124e2:	e7b2      	b.n	801244a <_dtoa_r+0x23a>
 80124e4:	2300      	movs	r3, #0
 80124e6:	e7f0      	b.n	80124ca <_dtoa_r+0x2ba>
 80124e8:	2501      	movs	r5, #1
 80124ea:	2300      	movs	r3, #0
 80124ec:	9306      	str	r3, [sp, #24]
 80124ee:	950a      	str	r5, [sp, #40]	; 0x28
 80124f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80124f4:	9302      	str	r3, [sp, #8]
 80124f6:	4699      	mov	r9, r3
 80124f8:	2200      	movs	r2, #0
 80124fa:	2312      	movs	r3, #18
 80124fc:	920b      	str	r2, [sp, #44]	; 0x2c
 80124fe:	e7aa      	b.n	8012456 <_dtoa_r+0x246>
 8012500:	2301      	movs	r3, #1
 8012502:	930a      	str	r3, [sp, #40]	; 0x28
 8012504:	e7f4      	b.n	80124f0 <_dtoa_r+0x2e0>
 8012506:	2301      	movs	r3, #1
 8012508:	9302      	str	r3, [sp, #8]
 801250a:	4699      	mov	r9, r3
 801250c:	461a      	mov	r2, r3
 801250e:	e7f5      	b.n	80124fc <_dtoa_r+0x2ec>
 8012510:	3101      	adds	r1, #1
 8012512:	6071      	str	r1, [r6, #4]
 8012514:	0052      	lsls	r2, r2, #1
 8012516:	e7a2      	b.n	801245e <_dtoa_r+0x24e>
 8012518:	636f4361 	.word	0x636f4361
 801251c:	3fd287a7 	.word	0x3fd287a7
 8012520:	8b60c8b3 	.word	0x8b60c8b3
 8012524:	3fc68a28 	.word	0x3fc68a28
 8012528:	509f79fb 	.word	0x509f79fb
 801252c:	3fd34413 	.word	0x3fd34413
 8012530:	7ff00000 	.word	0x7ff00000
 8012534:	08016a1d 	.word	0x08016a1d
 8012538:	3ff80000 	.word	0x3ff80000
 801253c:	08016828 	.word	0x08016828
 8012540:	08016800 	.word	0x08016800
 8012544:	08016797 	.word	0x08016797
 8012548:	07f1      	lsls	r1, r6, #31
 801254a:	d508      	bpl.n	801255e <_dtoa_r+0x34e>
 801254c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8012550:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012554:	f7ee f878 	bl	8000648 <__aeabi_dmul>
 8012558:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801255c:	3501      	adds	r5, #1
 801255e:	1076      	asrs	r6, r6, #1
 8012560:	3708      	adds	r7, #8
 8012562:	2e00      	cmp	r6, #0
 8012564:	d1f0      	bne.n	8012548 <_dtoa_r+0x338>
 8012566:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801256a:	e9dd 0100 	ldrd	r0, r1, [sp]
 801256e:	f7ee f995 	bl	800089c <__aeabi_ddiv>
 8012572:	e9cd 0100 	strd	r0, r1, [sp]
 8012576:	e01a      	b.n	80125ae <_dtoa_r+0x39e>
 8012578:	2502      	movs	r5, #2
 801257a:	e7a3      	b.n	80124c4 <_dtoa_r+0x2b4>
 801257c:	f000 80a0 	beq.w	80126c0 <_dtoa_r+0x4b0>
 8012580:	f1ca 0600 	rsb	r6, sl, #0
 8012584:	4b9f      	ldr	r3, [pc, #636]	; (8012804 <_dtoa_r+0x5f4>)
 8012586:	4fa0      	ldr	r7, [pc, #640]	; (8012808 <_dtoa_r+0x5f8>)
 8012588:	f006 020f 	and.w	r2, r6, #15
 801258c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012594:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8012598:	f7ee f856 	bl	8000648 <__aeabi_dmul>
 801259c:	e9cd 0100 	strd	r0, r1, [sp]
 80125a0:	1136      	asrs	r6, r6, #4
 80125a2:	2300      	movs	r3, #0
 80125a4:	2502      	movs	r5, #2
 80125a6:	2e00      	cmp	r6, #0
 80125a8:	d17f      	bne.n	80126aa <_dtoa_r+0x49a>
 80125aa:	2b00      	cmp	r3, #0
 80125ac:	d1e1      	bne.n	8012572 <_dtoa_r+0x362>
 80125ae:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80125b0:	2b00      	cmp	r3, #0
 80125b2:	f000 8087 	beq.w	80126c4 <_dtoa_r+0x4b4>
 80125b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80125ba:	2200      	movs	r2, #0
 80125bc:	4b93      	ldr	r3, [pc, #588]	; (801280c <_dtoa_r+0x5fc>)
 80125be:	4630      	mov	r0, r6
 80125c0:	4639      	mov	r1, r7
 80125c2:	f7ee fab3 	bl	8000b2c <__aeabi_dcmplt>
 80125c6:	2800      	cmp	r0, #0
 80125c8:	d07c      	beq.n	80126c4 <_dtoa_r+0x4b4>
 80125ca:	f1b9 0f00 	cmp.w	r9, #0
 80125ce:	d079      	beq.n	80126c4 <_dtoa_r+0x4b4>
 80125d0:	9b02      	ldr	r3, [sp, #8]
 80125d2:	2b00      	cmp	r3, #0
 80125d4:	dd35      	ble.n	8012642 <_dtoa_r+0x432>
 80125d6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 80125da:	9308      	str	r3, [sp, #32]
 80125dc:	4639      	mov	r1, r7
 80125de:	2200      	movs	r2, #0
 80125e0:	4b8b      	ldr	r3, [pc, #556]	; (8012810 <_dtoa_r+0x600>)
 80125e2:	4630      	mov	r0, r6
 80125e4:	f7ee f830 	bl	8000648 <__aeabi_dmul>
 80125e8:	e9cd 0100 	strd	r0, r1, [sp]
 80125ec:	9f02      	ldr	r7, [sp, #8]
 80125ee:	3501      	adds	r5, #1
 80125f0:	4628      	mov	r0, r5
 80125f2:	f7ed ffbf 	bl	8000574 <__aeabi_i2d>
 80125f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80125fa:	f7ee f825 	bl	8000648 <__aeabi_dmul>
 80125fe:	2200      	movs	r2, #0
 8012600:	4b84      	ldr	r3, [pc, #528]	; (8012814 <_dtoa_r+0x604>)
 8012602:	f7ed fe6b 	bl	80002dc <__adddf3>
 8012606:	4605      	mov	r5, r0
 8012608:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 801260c:	2f00      	cmp	r7, #0
 801260e:	d15d      	bne.n	80126cc <_dtoa_r+0x4bc>
 8012610:	2200      	movs	r2, #0
 8012612:	4b81      	ldr	r3, [pc, #516]	; (8012818 <_dtoa_r+0x608>)
 8012614:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012618:	f7ed fe5e 	bl	80002d8 <__aeabi_dsub>
 801261c:	462a      	mov	r2, r5
 801261e:	4633      	mov	r3, r6
 8012620:	e9cd 0100 	strd	r0, r1, [sp]
 8012624:	f7ee faa0 	bl	8000b68 <__aeabi_dcmpgt>
 8012628:	2800      	cmp	r0, #0
 801262a:	f040 8288 	bne.w	8012b3e <_dtoa_r+0x92e>
 801262e:	462a      	mov	r2, r5
 8012630:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8012634:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012638:	f7ee fa78 	bl	8000b2c <__aeabi_dcmplt>
 801263c:	2800      	cmp	r0, #0
 801263e:	f040 827c 	bne.w	8012b3a <_dtoa_r+0x92a>
 8012642:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8012646:	e9cd 2300 	strd	r2, r3, [sp]
 801264a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801264c:	2b00      	cmp	r3, #0
 801264e:	f2c0 8150 	blt.w	80128f2 <_dtoa_r+0x6e2>
 8012652:	f1ba 0f0e 	cmp.w	sl, #14
 8012656:	f300 814c 	bgt.w	80128f2 <_dtoa_r+0x6e2>
 801265a:	4b6a      	ldr	r3, [pc, #424]	; (8012804 <_dtoa_r+0x5f4>)
 801265c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8012660:	ed93 7b00 	vldr	d7, [r3]
 8012664:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012666:	2b00      	cmp	r3, #0
 8012668:	ed8d 7b02 	vstr	d7, [sp, #8]
 801266c:	f280 80d8 	bge.w	8012820 <_dtoa_r+0x610>
 8012670:	f1b9 0f00 	cmp.w	r9, #0
 8012674:	f300 80d4 	bgt.w	8012820 <_dtoa_r+0x610>
 8012678:	f040 825e 	bne.w	8012b38 <_dtoa_r+0x928>
 801267c:	2200      	movs	r2, #0
 801267e:	4b66      	ldr	r3, [pc, #408]	; (8012818 <_dtoa_r+0x608>)
 8012680:	ec51 0b17 	vmov	r0, r1, d7
 8012684:	f7ed ffe0 	bl	8000648 <__aeabi_dmul>
 8012688:	e9dd 2300 	ldrd	r2, r3, [sp]
 801268c:	f7ee fa62 	bl	8000b54 <__aeabi_dcmpge>
 8012690:	464f      	mov	r7, r9
 8012692:	464e      	mov	r6, r9
 8012694:	2800      	cmp	r0, #0
 8012696:	f040 8234 	bne.w	8012b02 <_dtoa_r+0x8f2>
 801269a:	2331      	movs	r3, #49	; 0x31
 801269c:	f10b 0501 	add.w	r5, fp, #1
 80126a0:	f88b 3000 	strb.w	r3, [fp]
 80126a4:	f10a 0a01 	add.w	sl, sl, #1
 80126a8:	e22f      	b.n	8012b0a <_dtoa_r+0x8fa>
 80126aa:	07f2      	lsls	r2, r6, #31
 80126ac:	d505      	bpl.n	80126ba <_dtoa_r+0x4aa>
 80126ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 80126b2:	f7ed ffc9 	bl	8000648 <__aeabi_dmul>
 80126b6:	3501      	adds	r5, #1
 80126b8:	2301      	movs	r3, #1
 80126ba:	1076      	asrs	r6, r6, #1
 80126bc:	3708      	adds	r7, #8
 80126be:	e772      	b.n	80125a6 <_dtoa_r+0x396>
 80126c0:	2502      	movs	r5, #2
 80126c2:	e774      	b.n	80125ae <_dtoa_r+0x39e>
 80126c4:	f8cd a020 	str.w	sl, [sp, #32]
 80126c8:	464f      	mov	r7, r9
 80126ca:	e791      	b.n	80125f0 <_dtoa_r+0x3e0>
 80126cc:	4b4d      	ldr	r3, [pc, #308]	; (8012804 <_dtoa_r+0x5f4>)
 80126ce:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80126d2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80126d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80126d8:	2b00      	cmp	r3, #0
 80126da:	d047      	beq.n	801276c <_dtoa_r+0x55c>
 80126dc:	4602      	mov	r2, r0
 80126de:	460b      	mov	r3, r1
 80126e0:	2000      	movs	r0, #0
 80126e2:	494e      	ldr	r1, [pc, #312]	; (801281c <_dtoa_r+0x60c>)
 80126e4:	f7ee f8da 	bl	800089c <__aeabi_ddiv>
 80126e8:	462a      	mov	r2, r5
 80126ea:	4633      	mov	r3, r6
 80126ec:	f7ed fdf4 	bl	80002d8 <__aeabi_dsub>
 80126f0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80126f4:	465d      	mov	r5, fp
 80126f6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80126fa:	f7ee fa55 	bl	8000ba8 <__aeabi_d2iz>
 80126fe:	4606      	mov	r6, r0
 8012700:	f7ed ff38 	bl	8000574 <__aeabi_i2d>
 8012704:	4602      	mov	r2, r0
 8012706:	460b      	mov	r3, r1
 8012708:	e9dd 0100 	ldrd	r0, r1, [sp]
 801270c:	f7ed fde4 	bl	80002d8 <__aeabi_dsub>
 8012710:	3630      	adds	r6, #48	; 0x30
 8012712:	f805 6b01 	strb.w	r6, [r5], #1
 8012716:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 801271a:	e9cd 0100 	strd	r0, r1, [sp]
 801271e:	f7ee fa05 	bl	8000b2c <__aeabi_dcmplt>
 8012722:	2800      	cmp	r0, #0
 8012724:	d163      	bne.n	80127ee <_dtoa_r+0x5de>
 8012726:	e9dd 2300 	ldrd	r2, r3, [sp]
 801272a:	2000      	movs	r0, #0
 801272c:	4937      	ldr	r1, [pc, #220]	; (801280c <_dtoa_r+0x5fc>)
 801272e:	f7ed fdd3 	bl	80002d8 <__aeabi_dsub>
 8012732:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8012736:	f7ee f9f9 	bl	8000b2c <__aeabi_dcmplt>
 801273a:	2800      	cmp	r0, #0
 801273c:	f040 80b7 	bne.w	80128ae <_dtoa_r+0x69e>
 8012740:	eba5 030b 	sub.w	r3, r5, fp
 8012744:	429f      	cmp	r7, r3
 8012746:	f77f af7c 	ble.w	8012642 <_dtoa_r+0x432>
 801274a:	2200      	movs	r2, #0
 801274c:	4b30      	ldr	r3, [pc, #192]	; (8012810 <_dtoa_r+0x600>)
 801274e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8012752:	f7ed ff79 	bl	8000648 <__aeabi_dmul>
 8012756:	2200      	movs	r2, #0
 8012758:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 801275c:	4b2c      	ldr	r3, [pc, #176]	; (8012810 <_dtoa_r+0x600>)
 801275e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012762:	f7ed ff71 	bl	8000648 <__aeabi_dmul>
 8012766:	e9cd 0100 	strd	r0, r1, [sp]
 801276a:	e7c4      	b.n	80126f6 <_dtoa_r+0x4e6>
 801276c:	462a      	mov	r2, r5
 801276e:	4633      	mov	r3, r6
 8012770:	f7ed ff6a 	bl	8000648 <__aeabi_dmul>
 8012774:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8012778:	eb0b 0507 	add.w	r5, fp, r7
 801277c:	465e      	mov	r6, fp
 801277e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012782:	f7ee fa11 	bl	8000ba8 <__aeabi_d2iz>
 8012786:	4607      	mov	r7, r0
 8012788:	f7ed fef4 	bl	8000574 <__aeabi_i2d>
 801278c:	3730      	adds	r7, #48	; 0x30
 801278e:	4602      	mov	r2, r0
 8012790:	460b      	mov	r3, r1
 8012792:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012796:	f7ed fd9f 	bl	80002d8 <__aeabi_dsub>
 801279a:	f806 7b01 	strb.w	r7, [r6], #1
 801279e:	42ae      	cmp	r6, r5
 80127a0:	e9cd 0100 	strd	r0, r1, [sp]
 80127a4:	f04f 0200 	mov.w	r2, #0
 80127a8:	d126      	bne.n	80127f8 <_dtoa_r+0x5e8>
 80127aa:	4b1c      	ldr	r3, [pc, #112]	; (801281c <_dtoa_r+0x60c>)
 80127ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80127b0:	f7ed fd94 	bl	80002dc <__adddf3>
 80127b4:	4602      	mov	r2, r0
 80127b6:	460b      	mov	r3, r1
 80127b8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80127bc:	f7ee f9d4 	bl	8000b68 <__aeabi_dcmpgt>
 80127c0:	2800      	cmp	r0, #0
 80127c2:	d174      	bne.n	80128ae <_dtoa_r+0x69e>
 80127c4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80127c8:	2000      	movs	r0, #0
 80127ca:	4914      	ldr	r1, [pc, #80]	; (801281c <_dtoa_r+0x60c>)
 80127cc:	f7ed fd84 	bl	80002d8 <__aeabi_dsub>
 80127d0:	4602      	mov	r2, r0
 80127d2:	460b      	mov	r3, r1
 80127d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80127d8:	f7ee f9a8 	bl	8000b2c <__aeabi_dcmplt>
 80127dc:	2800      	cmp	r0, #0
 80127de:	f43f af30 	beq.w	8012642 <_dtoa_r+0x432>
 80127e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80127e6:	2b30      	cmp	r3, #48	; 0x30
 80127e8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 80127ec:	d002      	beq.n	80127f4 <_dtoa_r+0x5e4>
 80127ee:	f8dd a020 	ldr.w	sl, [sp, #32]
 80127f2:	e04a      	b.n	801288a <_dtoa_r+0x67a>
 80127f4:	4615      	mov	r5, r2
 80127f6:	e7f4      	b.n	80127e2 <_dtoa_r+0x5d2>
 80127f8:	4b05      	ldr	r3, [pc, #20]	; (8012810 <_dtoa_r+0x600>)
 80127fa:	f7ed ff25 	bl	8000648 <__aeabi_dmul>
 80127fe:	e9cd 0100 	strd	r0, r1, [sp]
 8012802:	e7bc      	b.n	801277e <_dtoa_r+0x56e>
 8012804:	08016828 	.word	0x08016828
 8012808:	08016800 	.word	0x08016800
 801280c:	3ff00000 	.word	0x3ff00000
 8012810:	40240000 	.word	0x40240000
 8012814:	401c0000 	.word	0x401c0000
 8012818:	40140000 	.word	0x40140000
 801281c:	3fe00000 	.word	0x3fe00000
 8012820:	e9dd 6700 	ldrd	r6, r7, [sp]
 8012824:	465d      	mov	r5, fp
 8012826:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801282a:	4630      	mov	r0, r6
 801282c:	4639      	mov	r1, r7
 801282e:	f7ee f835 	bl	800089c <__aeabi_ddiv>
 8012832:	f7ee f9b9 	bl	8000ba8 <__aeabi_d2iz>
 8012836:	4680      	mov	r8, r0
 8012838:	f7ed fe9c 	bl	8000574 <__aeabi_i2d>
 801283c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8012840:	f7ed ff02 	bl	8000648 <__aeabi_dmul>
 8012844:	4602      	mov	r2, r0
 8012846:	460b      	mov	r3, r1
 8012848:	4630      	mov	r0, r6
 801284a:	4639      	mov	r1, r7
 801284c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8012850:	f7ed fd42 	bl	80002d8 <__aeabi_dsub>
 8012854:	f805 6b01 	strb.w	r6, [r5], #1
 8012858:	eba5 060b 	sub.w	r6, r5, fp
 801285c:	45b1      	cmp	r9, r6
 801285e:	4602      	mov	r2, r0
 8012860:	460b      	mov	r3, r1
 8012862:	d139      	bne.n	80128d8 <_dtoa_r+0x6c8>
 8012864:	f7ed fd3a 	bl	80002dc <__adddf3>
 8012868:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801286c:	4606      	mov	r6, r0
 801286e:	460f      	mov	r7, r1
 8012870:	f7ee f97a 	bl	8000b68 <__aeabi_dcmpgt>
 8012874:	b9c8      	cbnz	r0, 80128aa <_dtoa_r+0x69a>
 8012876:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801287a:	4630      	mov	r0, r6
 801287c:	4639      	mov	r1, r7
 801287e:	f7ee f94b 	bl	8000b18 <__aeabi_dcmpeq>
 8012882:	b110      	cbz	r0, 801288a <_dtoa_r+0x67a>
 8012884:	f018 0f01 	tst.w	r8, #1
 8012888:	d10f      	bne.n	80128aa <_dtoa_r+0x69a>
 801288a:	9904      	ldr	r1, [sp, #16]
 801288c:	4620      	mov	r0, r4
 801288e:	f000 fcaa 	bl	80131e6 <_Bfree>
 8012892:	2300      	movs	r3, #0
 8012894:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8012896:	702b      	strb	r3, [r5, #0]
 8012898:	f10a 0301 	add.w	r3, sl, #1
 801289c:	6013      	str	r3, [r2, #0]
 801289e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	f000 8241 	beq.w	8012d28 <_dtoa_r+0xb18>
 80128a6:	601d      	str	r5, [r3, #0]
 80128a8:	e23e      	b.n	8012d28 <_dtoa_r+0xb18>
 80128aa:	f8cd a020 	str.w	sl, [sp, #32]
 80128ae:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80128b2:	2a39      	cmp	r2, #57	; 0x39
 80128b4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 80128b8:	d108      	bne.n	80128cc <_dtoa_r+0x6bc>
 80128ba:	459b      	cmp	fp, r3
 80128bc:	d10a      	bne.n	80128d4 <_dtoa_r+0x6c4>
 80128be:	9b08      	ldr	r3, [sp, #32]
 80128c0:	3301      	adds	r3, #1
 80128c2:	9308      	str	r3, [sp, #32]
 80128c4:	2330      	movs	r3, #48	; 0x30
 80128c6:	f88b 3000 	strb.w	r3, [fp]
 80128ca:	465b      	mov	r3, fp
 80128cc:	781a      	ldrb	r2, [r3, #0]
 80128ce:	3201      	adds	r2, #1
 80128d0:	701a      	strb	r2, [r3, #0]
 80128d2:	e78c      	b.n	80127ee <_dtoa_r+0x5de>
 80128d4:	461d      	mov	r5, r3
 80128d6:	e7ea      	b.n	80128ae <_dtoa_r+0x69e>
 80128d8:	2200      	movs	r2, #0
 80128da:	4b9b      	ldr	r3, [pc, #620]	; (8012b48 <_dtoa_r+0x938>)
 80128dc:	f7ed feb4 	bl	8000648 <__aeabi_dmul>
 80128e0:	2200      	movs	r2, #0
 80128e2:	2300      	movs	r3, #0
 80128e4:	4606      	mov	r6, r0
 80128e6:	460f      	mov	r7, r1
 80128e8:	f7ee f916 	bl	8000b18 <__aeabi_dcmpeq>
 80128ec:	2800      	cmp	r0, #0
 80128ee:	d09a      	beq.n	8012826 <_dtoa_r+0x616>
 80128f0:	e7cb      	b.n	801288a <_dtoa_r+0x67a>
 80128f2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80128f4:	2a00      	cmp	r2, #0
 80128f6:	f000 808b 	beq.w	8012a10 <_dtoa_r+0x800>
 80128fa:	9a06      	ldr	r2, [sp, #24]
 80128fc:	2a01      	cmp	r2, #1
 80128fe:	dc6e      	bgt.n	80129de <_dtoa_r+0x7ce>
 8012900:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8012902:	2a00      	cmp	r2, #0
 8012904:	d067      	beq.n	80129d6 <_dtoa_r+0x7c6>
 8012906:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801290a:	9f07      	ldr	r7, [sp, #28]
 801290c:	9d05      	ldr	r5, [sp, #20]
 801290e:	9a05      	ldr	r2, [sp, #20]
 8012910:	2101      	movs	r1, #1
 8012912:	441a      	add	r2, r3
 8012914:	4620      	mov	r0, r4
 8012916:	9205      	str	r2, [sp, #20]
 8012918:	4498      	add	r8, r3
 801291a:	f000 fd04 	bl	8013326 <__i2b>
 801291e:	4606      	mov	r6, r0
 8012920:	2d00      	cmp	r5, #0
 8012922:	dd0c      	ble.n	801293e <_dtoa_r+0x72e>
 8012924:	f1b8 0f00 	cmp.w	r8, #0
 8012928:	dd09      	ble.n	801293e <_dtoa_r+0x72e>
 801292a:	4545      	cmp	r5, r8
 801292c:	9a05      	ldr	r2, [sp, #20]
 801292e:	462b      	mov	r3, r5
 8012930:	bfa8      	it	ge
 8012932:	4643      	movge	r3, r8
 8012934:	1ad2      	subs	r2, r2, r3
 8012936:	9205      	str	r2, [sp, #20]
 8012938:	1aed      	subs	r5, r5, r3
 801293a:	eba8 0803 	sub.w	r8, r8, r3
 801293e:	9b07      	ldr	r3, [sp, #28]
 8012940:	b1eb      	cbz	r3, 801297e <_dtoa_r+0x76e>
 8012942:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012944:	2b00      	cmp	r3, #0
 8012946:	d067      	beq.n	8012a18 <_dtoa_r+0x808>
 8012948:	b18f      	cbz	r7, 801296e <_dtoa_r+0x75e>
 801294a:	4631      	mov	r1, r6
 801294c:	463a      	mov	r2, r7
 801294e:	4620      	mov	r0, r4
 8012950:	f000 fd88 	bl	8013464 <__pow5mult>
 8012954:	9a04      	ldr	r2, [sp, #16]
 8012956:	4601      	mov	r1, r0
 8012958:	4606      	mov	r6, r0
 801295a:	4620      	mov	r0, r4
 801295c:	f000 fcec 	bl	8013338 <__multiply>
 8012960:	9904      	ldr	r1, [sp, #16]
 8012962:	9008      	str	r0, [sp, #32]
 8012964:	4620      	mov	r0, r4
 8012966:	f000 fc3e 	bl	80131e6 <_Bfree>
 801296a:	9b08      	ldr	r3, [sp, #32]
 801296c:	9304      	str	r3, [sp, #16]
 801296e:	9b07      	ldr	r3, [sp, #28]
 8012970:	1bda      	subs	r2, r3, r7
 8012972:	d004      	beq.n	801297e <_dtoa_r+0x76e>
 8012974:	9904      	ldr	r1, [sp, #16]
 8012976:	4620      	mov	r0, r4
 8012978:	f000 fd74 	bl	8013464 <__pow5mult>
 801297c:	9004      	str	r0, [sp, #16]
 801297e:	2101      	movs	r1, #1
 8012980:	4620      	mov	r0, r4
 8012982:	f000 fcd0 	bl	8013326 <__i2b>
 8012986:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012988:	4607      	mov	r7, r0
 801298a:	2b00      	cmp	r3, #0
 801298c:	f000 81d0 	beq.w	8012d30 <_dtoa_r+0xb20>
 8012990:	461a      	mov	r2, r3
 8012992:	4601      	mov	r1, r0
 8012994:	4620      	mov	r0, r4
 8012996:	f000 fd65 	bl	8013464 <__pow5mult>
 801299a:	9b06      	ldr	r3, [sp, #24]
 801299c:	2b01      	cmp	r3, #1
 801299e:	4607      	mov	r7, r0
 80129a0:	dc40      	bgt.n	8012a24 <_dtoa_r+0x814>
 80129a2:	9b00      	ldr	r3, [sp, #0]
 80129a4:	2b00      	cmp	r3, #0
 80129a6:	d139      	bne.n	8012a1c <_dtoa_r+0x80c>
 80129a8:	9b01      	ldr	r3, [sp, #4]
 80129aa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80129ae:	2b00      	cmp	r3, #0
 80129b0:	d136      	bne.n	8012a20 <_dtoa_r+0x810>
 80129b2:	9b01      	ldr	r3, [sp, #4]
 80129b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80129b8:	0d1b      	lsrs	r3, r3, #20
 80129ba:	051b      	lsls	r3, r3, #20
 80129bc:	b12b      	cbz	r3, 80129ca <_dtoa_r+0x7ba>
 80129be:	9b05      	ldr	r3, [sp, #20]
 80129c0:	3301      	adds	r3, #1
 80129c2:	9305      	str	r3, [sp, #20]
 80129c4:	f108 0801 	add.w	r8, r8, #1
 80129c8:	2301      	movs	r3, #1
 80129ca:	9307      	str	r3, [sp, #28]
 80129cc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80129ce:	2b00      	cmp	r3, #0
 80129d0:	d12a      	bne.n	8012a28 <_dtoa_r+0x818>
 80129d2:	2001      	movs	r0, #1
 80129d4:	e030      	b.n	8012a38 <_dtoa_r+0x828>
 80129d6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80129d8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80129dc:	e795      	b.n	801290a <_dtoa_r+0x6fa>
 80129de:	9b07      	ldr	r3, [sp, #28]
 80129e0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 80129e4:	42bb      	cmp	r3, r7
 80129e6:	bfbf      	itttt	lt
 80129e8:	9b07      	ldrlt	r3, [sp, #28]
 80129ea:	9707      	strlt	r7, [sp, #28]
 80129ec:	1afa      	sublt	r2, r7, r3
 80129ee:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80129f0:	bfbb      	ittet	lt
 80129f2:	189b      	addlt	r3, r3, r2
 80129f4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80129f6:	1bdf      	subge	r7, r3, r7
 80129f8:	2700      	movlt	r7, #0
 80129fa:	f1b9 0f00 	cmp.w	r9, #0
 80129fe:	bfb5      	itete	lt
 8012a00:	9b05      	ldrlt	r3, [sp, #20]
 8012a02:	9d05      	ldrge	r5, [sp, #20]
 8012a04:	eba3 0509 	sublt.w	r5, r3, r9
 8012a08:	464b      	movge	r3, r9
 8012a0a:	bfb8      	it	lt
 8012a0c:	2300      	movlt	r3, #0
 8012a0e:	e77e      	b.n	801290e <_dtoa_r+0x6fe>
 8012a10:	9f07      	ldr	r7, [sp, #28]
 8012a12:	9d05      	ldr	r5, [sp, #20]
 8012a14:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8012a16:	e783      	b.n	8012920 <_dtoa_r+0x710>
 8012a18:	9a07      	ldr	r2, [sp, #28]
 8012a1a:	e7ab      	b.n	8012974 <_dtoa_r+0x764>
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	e7d4      	b.n	80129ca <_dtoa_r+0x7ba>
 8012a20:	9b00      	ldr	r3, [sp, #0]
 8012a22:	e7d2      	b.n	80129ca <_dtoa_r+0x7ba>
 8012a24:	2300      	movs	r3, #0
 8012a26:	9307      	str	r3, [sp, #28]
 8012a28:	693b      	ldr	r3, [r7, #16]
 8012a2a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 8012a2e:	6918      	ldr	r0, [r3, #16]
 8012a30:	f000 fc2b 	bl	801328a <__hi0bits>
 8012a34:	f1c0 0020 	rsb	r0, r0, #32
 8012a38:	4440      	add	r0, r8
 8012a3a:	f010 001f 	ands.w	r0, r0, #31
 8012a3e:	d047      	beq.n	8012ad0 <_dtoa_r+0x8c0>
 8012a40:	f1c0 0320 	rsb	r3, r0, #32
 8012a44:	2b04      	cmp	r3, #4
 8012a46:	dd3b      	ble.n	8012ac0 <_dtoa_r+0x8b0>
 8012a48:	9b05      	ldr	r3, [sp, #20]
 8012a4a:	f1c0 001c 	rsb	r0, r0, #28
 8012a4e:	4403      	add	r3, r0
 8012a50:	9305      	str	r3, [sp, #20]
 8012a52:	4405      	add	r5, r0
 8012a54:	4480      	add	r8, r0
 8012a56:	9b05      	ldr	r3, [sp, #20]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	dd05      	ble.n	8012a68 <_dtoa_r+0x858>
 8012a5c:	461a      	mov	r2, r3
 8012a5e:	9904      	ldr	r1, [sp, #16]
 8012a60:	4620      	mov	r0, r4
 8012a62:	f000 fd4d 	bl	8013500 <__lshift>
 8012a66:	9004      	str	r0, [sp, #16]
 8012a68:	f1b8 0f00 	cmp.w	r8, #0
 8012a6c:	dd05      	ble.n	8012a7a <_dtoa_r+0x86a>
 8012a6e:	4639      	mov	r1, r7
 8012a70:	4642      	mov	r2, r8
 8012a72:	4620      	mov	r0, r4
 8012a74:	f000 fd44 	bl	8013500 <__lshift>
 8012a78:	4607      	mov	r7, r0
 8012a7a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012a7c:	b353      	cbz	r3, 8012ad4 <_dtoa_r+0x8c4>
 8012a7e:	4639      	mov	r1, r7
 8012a80:	9804      	ldr	r0, [sp, #16]
 8012a82:	f000 fd91 	bl	80135a8 <__mcmp>
 8012a86:	2800      	cmp	r0, #0
 8012a88:	da24      	bge.n	8012ad4 <_dtoa_r+0x8c4>
 8012a8a:	2300      	movs	r3, #0
 8012a8c:	220a      	movs	r2, #10
 8012a8e:	9904      	ldr	r1, [sp, #16]
 8012a90:	4620      	mov	r0, r4
 8012a92:	f000 fbbf 	bl	8013214 <__multadd>
 8012a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a98:	9004      	str	r0, [sp, #16]
 8012a9a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012a9e:	2b00      	cmp	r3, #0
 8012aa0:	f000 814d 	beq.w	8012d3e <_dtoa_r+0xb2e>
 8012aa4:	2300      	movs	r3, #0
 8012aa6:	4631      	mov	r1, r6
 8012aa8:	220a      	movs	r2, #10
 8012aaa:	4620      	mov	r0, r4
 8012aac:	f000 fbb2 	bl	8013214 <__multadd>
 8012ab0:	9b02      	ldr	r3, [sp, #8]
 8012ab2:	2b00      	cmp	r3, #0
 8012ab4:	4606      	mov	r6, r0
 8012ab6:	dc4f      	bgt.n	8012b58 <_dtoa_r+0x948>
 8012ab8:	9b06      	ldr	r3, [sp, #24]
 8012aba:	2b02      	cmp	r3, #2
 8012abc:	dd4c      	ble.n	8012b58 <_dtoa_r+0x948>
 8012abe:	e011      	b.n	8012ae4 <_dtoa_r+0x8d4>
 8012ac0:	d0c9      	beq.n	8012a56 <_dtoa_r+0x846>
 8012ac2:	9a05      	ldr	r2, [sp, #20]
 8012ac4:	331c      	adds	r3, #28
 8012ac6:	441a      	add	r2, r3
 8012ac8:	9205      	str	r2, [sp, #20]
 8012aca:	441d      	add	r5, r3
 8012acc:	4498      	add	r8, r3
 8012ace:	e7c2      	b.n	8012a56 <_dtoa_r+0x846>
 8012ad0:	4603      	mov	r3, r0
 8012ad2:	e7f6      	b.n	8012ac2 <_dtoa_r+0x8b2>
 8012ad4:	f1b9 0f00 	cmp.w	r9, #0
 8012ad8:	dc38      	bgt.n	8012b4c <_dtoa_r+0x93c>
 8012ada:	9b06      	ldr	r3, [sp, #24]
 8012adc:	2b02      	cmp	r3, #2
 8012ade:	dd35      	ble.n	8012b4c <_dtoa_r+0x93c>
 8012ae0:	f8cd 9008 	str.w	r9, [sp, #8]
 8012ae4:	9b02      	ldr	r3, [sp, #8]
 8012ae6:	b963      	cbnz	r3, 8012b02 <_dtoa_r+0x8f2>
 8012ae8:	4639      	mov	r1, r7
 8012aea:	2205      	movs	r2, #5
 8012aec:	4620      	mov	r0, r4
 8012aee:	f000 fb91 	bl	8013214 <__multadd>
 8012af2:	4601      	mov	r1, r0
 8012af4:	4607      	mov	r7, r0
 8012af6:	9804      	ldr	r0, [sp, #16]
 8012af8:	f000 fd56 	bl	80135a8 <__mcmp>
 8012afc:	2800      	cmp	r0, #0
 8012afe:	f73f adcc 	bgt.w	801269a <_dtoa_r+0x48a>
 8012b02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012b04:	465d      	mov	r5, fp
 8012b06:	ea6f 0a03 	mvn.w	sl, r3
 8012b0a:	f04f 0900 	mov.w	r9, #0
 8012b0e:	4639      	mov	r1, r7
 8012b10:	4620      	mov	r0, r4
 8012b12:	f000 fb68 	bl	80131e6 <_Bfree>
 8012b16:	2e00      	cmp	r6, #0
 8012b18:	f43f aeb7 	beq.w	801288a <_dtoa_r+0x67a>
 8012b1c:	f1b9 0f00 	cmp.w	r9, #0
 8012b20:	d005      	beq.n	8012b2e <_dtoa_r+0x91e>
 8012b22:	45b1      	cmp	r9, r6
 8012b24:	d003      	beq.n	8012b2e <_dtoa_r+0x91e>
 8012b26:	4649      	mov	r1, r9
 8012b28:	4620      	mov	r0, r4
 8012b2a:	f000 fb5c 	bl	80131e6 <_Bfree>
 8012b2e:	4631      	mov	r1, r6
 8012b30:	4620      	mov	r0, r4
 8012b32:	f000 fb58 	bl	80131e6 <_Bfree>
 8012b36:	e6a8      	b.n	801288a <_dtoa_r+0x67a>
 8012b38:	2700      	movs	r7, #0
 8012b3a:	463e      	mov	r6, r7
 8012b3c:	e7e1      	b.n	8012b02 <_dtoa_r+0x8f2>
 8012b3e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8012b42:	463e      	mov	r6, r7
 8012b44:	e5a9      	b.n	801269a <_dtoa_r+0x48a>
 8012b46:	bf00      	nop
 8012b48:	40240000 	.word	0x40240000
 8012b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012b4e:	f8cd 9008 	str.w	r9, [sp, #8]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	f000 80fa 	beq.w	8012d4c <_dtoa_r+0xb3c>
 8012b58:	2d00      	cmp	r5, #0
 8012b5a:	dd05      	ble.n	8012b68 <_dtoa_r+0x958>
 8012b5c:	4631      	mov	r1, r6
 8012b5e:	462a      	mov	r2, r5
 8012b60:	4620      	mov	r0, r4
 8012b62:	f000 fccd 	bl	8013500 <__lshift>
 8012b66:	4606      	mov	r6, r0
 8012b68:	9b07      	ldr	r3, [sp, #28]
 8012b6a:	2b00      	cmp	r3, #0
 8012b6c:	d04c      	beq.n	8012c08 <_dtoa_r+0x9f8>
 8012b6e:	6871      	ldr	r1, [r6, #4]
 8012b70:	4620      	mov	r0, r4
 8012b72:	f000 fb04 	bl	801317e <_Balloc>
 8012b76:	6932      	ldr	r2, [r6, #16]
 8012b78:	3202      	adds	r2, #2
 8012b7a:	4605      	mov	r5, r0
 8012b7c:	0092      	lsls	r2, r2, #2
 8012b7e:	f106 010c 	add.w	r1, r6, #12
 8012b82:	300c      	adds	r0, #12
 8012b84:	f000 faf0 	bl	8013168 <memcpy>
 8012b88:	2201      	movs	r2, #1
 8012b8a:	4629      	mov	r1, r5
 8012b8c:	4620      	mov	r0, r4
 8012b8e:	f000 fcb7 	bl	8013500 <__lshift>
 8012b92:	9b00      	ldr	r3, [sp, #0]
 8012b94:	f8cd b014 	str.w	fp, [sp, #20]
 8012b98:	f003 0301 	and.w	r3, r3, #1
 8012b9c:	46b1      	mov	r9, r6
 8012b9e:	9307      	str	r3, [sp, #28]
 8012ba0:	4606      	mov	r6, r0
 8012ba2:	4639      	mov	r1, r7
 8012ba4:	9804      	ldr	r0, [sp, #16]
 8012ba6:	f7ff faa5 	bl	80120f4 <quorem>
 8012baa:	4649      	mov	r1, r9
 8012bac:	4605      	mov	r5, r0
 8012bae:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012bb2:	9804      	ldr	r0, [sp, #16]
 8012bb4:	f000 fcf8 	bl	80135a8 <__mcmp>
 8012bb8:	4632      	mov	r2, r6
 8012bba:	9000      	str	r0, [sp, #0]
 8012bbc:	4639      	mov	r1, r7
 8012bbe:	4620      	mov	r0, r4
 8012bc0:	f000 fd0c 	bl	80135dc <__mdiff>
 8012bc4:	68c3      	ldr	r3, [r0, #12]
 8012bc6:	4602      	mov	r2, r0
 8012bc8:	bb03      	cbnz	r3, 8012c0c <_dtoa_r+0x9fc>
 8012bca:	4601      	mov	r1, r0
 8012bcc:	9008      	str	r0, [sp, #32]
 8012bce:	9804      	ldr	r0, [sp, #16]
 8012bd0:	f000 fcea 	bl	80135a8 <__mcmp>
 8012bd4:	9a08      	ldr	r2, [sp, #32]
 8012bd6:	4603      	mov	r3, r0
 8012bd8:	4611      	mov	r1, r2
 8012bda:	4620      	mov	r0, r4
 8012bdc:	9308      	str	r3, [sp, #32]
 8012bde:	f000 fb02 	bl	80131e6 <_Bfree>
 8012be2:	9b08      	ldr	r3, [sp, #32]
 8012be4:	b9a3      	cbnz	r3, 8012c10 <_dtoa_r+0xa00>
 8012be6:	9a06      	ldr	r2, [sp, #24]
 8012be8:	b992      	cbnz	r2, 8012c10 <_dtoa_r+0xa00>
 8012bea:	9a07      	ldr	r2, [sp, #28]
 8012bec:	b982      	cbnz	r2, 8012c10 <_dtoa_r+0xa00>
 8012bee:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012bf2:	d029      	beq.n	8012c48 <_dtoa_r+0xa38>
 8012bf4:	9b00      	ldr	r3, [sp, #0]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	dd01      	ble.n	8012bfe <_dtoa_r+0x9ee>
 8012bfa:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8012bfe:	9b05      	ldr	r3, [sp, #20]
 8012c00:	1c5d      	adds	r5, r3, #1
 8012c02:	f883 8000 	strb.w	r8, [r3]
 8012c06:	e782      	b.n	8012b0e <_dtoa_r+0x8fe>
 8012c08:	4630      	mov	r0, r6
 8012c0a:	e7c2      	b.n	8012b92 <_dtoa_r+0x982>
 8012c0c:	2301      	movs	r3, #1
 8012c0e:	e7e3      	b.n	8012bd8 <_dtoa_r+0x9c8>
 8012c10:	9a00      	ldr	r2, [sp, #0]
 8012c12:	2a00      	cmp	r2, #0
 8012c14:	db04      	blt.n	8012c20 <_dtoa_r+0xa10>
 8012c16:	d125      	bne.n	8012c64 <_dtoa_r+0xa54>
 8012c18:	9a06      	ldr	r2, [sp, #24]
 8012c1a:	bb1a      	cbnz	r2, 8012c64 <_dtoa_r+0xa54>
 8012c1c:	9a07      	ldr	r2, [sp, #28]
 8012c1e:	bb0a      	cbnz	r2, 8012c64 <_dtoa_r+0xa54>
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	ddec      	ble.n	8012bfe <_dtoa_r+0x9ee>
 8012c24:	2201      	movs	r2, #1
 8012c26:	9904      	ldr	r1, [sp, #16]
 8012c28:	4620      	mov	r0, r4
 8012c2a:	f000 fc69 	bl	8013500 <__lshift>
 8012c2e:	4639      	mov	r1, r7
 8012c30:	9004      	str	r0, [sp, #16]
 8012c32:	f000 fcb9 	bl	80135a8 <__mcmp>
 8012c36:	2800      	cmp	r0, #0
 8012c38:	dc03      	bgt.n	8012c42 <_dtoa_r+0xa32>
 8012c3a:	d1e0      	bne.n	8012bfe <_dtoa_r+0x9ee>
 8012c3c:	f018 0f01 	tst.w	r8, #1
 8012c40:	d0dd      	beq.n	8012bfe <_dtoa_r+0x9ee>
 8012c42:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012c46:	d1d8      	bne.n	8012bfa <_dtoa_r+0x9ea>
 8012c48:	9b05      	ldr	r3, [sp, #20]
 8012c4a:	9a05      	ldr	r2, [sp, #20]
 8012c4c:	1c5d      	adds	r5, r3, #1
 8012c4e:	2339      	movs	r3, #57	; 0x39
 8012c50:	7013      	strb	r3, [r2, #0]
 8012c52:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012c56:	2b39      	cmp	r3, #57	; 0x39
 8012c58:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8012c5c:	d04f      	beq.n	8012cfe <_dtoa_r+0xaee>
 8012c5e:	3301      	adds	r3, #1
 8012c60:	7013      	strb	r3, [r2, #0]
 8012c62:	e754      	b.n	8012b0e <_dtoa_r+0x8fe>
 8012c64:	9a05      	ldr	r2, [sp, #20]
 8012c66:	2b00      	cmp	r3, #0
 8012c68:	f102 0501 	add.w	r5, r2, #1
 8012c6c:	dd06      	ble.n	8012c7c <_dtoa_r+0xa6c>
 8012c6e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8012c72:	d0e9      	beq.n	8012c48 <_dtoa_r+0xa38>
 8012c74:	f108 0801 	add.w	r8, r8, #1
 8012c78:	9b05      	ldr	r3, [sp, #20]
 8012c7a:	e7c2      	b.n	8012c02 <_dtoa_r+0x9f2>
 8012c7c:	9a02      	ldr	r2, [sp, #8]
 8012c7e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8012c82:	eba5 030b 	sub.w	r3, r5, fp
 8012c86:	4293      	cmp	r3, r2
 8012c88:	d021      	beq.n	8012cce <_dtoa_r+0xabe>
 8012c8a:	2300      	movs	r3, #0
 8012c8c:	220a      	movs	r2, #10
 8012c8e:	9904      	ldr	r1, [sp, #16]
 8012c90:	4620      	mov	r0, r4
 8012c92:	f000 fabf 	bl	8013214 <__multadd>
 8012c96:	45b1      	cmp	r9, r6
 8012c98:	9004      	str	r0, [sp, #16]
 8012c9a:	f04f 0300 	mov.w	r3, #0
 8012c9e:	f04f 020a 	mov.w	r2, #10
 8012ca2:	4649      	mov	r1, r9
 8012ca4:	4620      	mov	r0, r4
 8012ca6:	d105      	bne.n	8012cb4 <_dtoa_r+0xaa4>
 8012ca8:	f000 fab4 	bl	8013214 <__multadd>
 8012cac:	4681      	mov	r9, r0
 8012cae:	4606      	mov	r6, r0
 8012cb0:	9505      	str	r5, [sp, #20]
 8012cb2:	e776      	b.n	8012ba2 <_dtoa_r+0x992>
 8012cb4:	f000 faae 	bl	8013214 <__multadd>
 8012cb8:	4631      	mov	r1, r6
 8012cba:	4681      	mov	r9, r0
 8012cbc:	2300      	movs	r3, #0
 8012cbe:	220a      	movs	r2, #10
 8012cc0:	4620      	mov	r0, r4
 8012cc2:	f000 faa7 	bl	8013214 <__multadd>
 8012cc6:	4606      	mov	r6, r0
 8012cc8:	e7f2      	b.n	8012cb0 <_dtoa_r+0xaa0>
 8012cca:	f04f 0900 	mov.w	r9, #0
 8012cce:	2201      	movs	r2, #1
 8012cd0:	9904      	ldr	r1, [sp, #16]
 8012cd2:	4620      	mov	r0, r4
 8012cd4:	f000 fc14 	bl	8013500 <__lshift>
 8012cd8:	4639      	mov	r1, r7
 8012cda:	9004      	str	r0, [sp, #16]
 8012cdc:	f000 fc64 	bl	80135a8 <__mcmp>
 8012ce0:	2800      	cmp	r0, #0
 8012ce2:	dcb6      	bgt.n	8012c52 <_dtoa_r+0xa42>
 8012ce4:	d102      	bne.n	8012cec <_dtoa_r+0xadc>
 8012ce6:	f018 0f01 	tst.w	r8, #1
 8012cea:	d1b2      	bne.n	8012c52 <_dtoa_r+0xa42>
 8012cec:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012cf0:	2b30      	cmp	r3, #48	; 0x30
 8012cf2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 8012cf6:	f47f af0a 	bne.w	8012b0e <_dtoa_r+0x8fe>
 8012cfa:	4615      	mov	r5, r2
 8012cfc:	e7f6      	b.n	8012cec <_dtoa_r+0xadc>
 8012cfe:	4593      	cmp	fp, r2
 8012d00:	d105      	bne.n	8012d0e <_dtoa_r+0xafe>
 8012d02:	2331      	movs	r3, #49	; 0x31
 8012d04:	f10a 0a01 	add.w	sl, sl, #1
 8012d08:	f88b 3000 	strb.w	r3, [fp]
 8012d0c:	e6ff      	b.n	8012b0e <_dtoa_r+0x8fe>
 8012d0e:	4615      	mov	r5, r2
 8012d10:	e79f      	b.n	8012c52 <_dtoa_r+0xa42>
 8012d12:	f8df b064 	ldr.w	fp, [pc, #100]	; 8012d78 <_dtoa_r+0xb68>
 8012d16:	e007      	b.n	8012d28 <_dtoa_r+0xb18>
 8012d18:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012d1a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8012d7c <_dtoa_r+0xb6c>
 8012d1e:	b11b      	cbz	r3, 8012d28 <_dtoa_r+0xb18>
 8012d20:	f10b 0308 	add.w	r3, fp, #8
 8012d24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012d26:	6013      	str	r3, [r2, #0]
 8012d28:	4658      	mov	r0, fp
 8012d2a:	b017      	add	sp, #92	; 0x5c
 8012d2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d30:	9b06      	ldr	r3, [sp, #24]
 8012d32:	2b01      	cmp	r3, #1
 8012d34:	f77f ae35 	ble.w	80129a2 <_dtoa_r+0x792>
 8012d38:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8012d3a:	9307      	str	r3, [sp, #28]
 8012d3c:	e649      	b.n	80129d2 <_dtoa_r+0x7c2>
 8012d3e:	9b02      	ldr	r3, [sp, #8]
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	dc03      	bgt.n	8012d4c <_dtoa_r+0xb3c>
 8012d44:	9b06      	ldr	r3, [sp, #24]
 8012d46:	2b02      	cmp	r3, #2
 8012d48:	f73f aecc 	bgt.w	8012ae4 <_dtoa_r+0x8d4>
 8012d4c:	465d      	mov	r5, fp
 8012d4e:	4639      	mov	r1, r7
 8012d50:	9804      	ldr	r0, [sp, #16]
 8012d52:	f7ff f9cf 	bl	80120f4 <quorem>
 8012d56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8012d5a:	f805 8b01 	strb.w	r8, [r5], #1
 8012d5e:	9a02      	ldr	r2, [sp, #8]
 8012d60:	eba5 030b 	sub.w	r3, r5, fp
 8012d64:	429a      	cmp	r2, r3
 8012d66:	ddb0      	ble.n	8012cca <_dtoa_r+0xaba>
 8012d68:	2300      	movs	r3, #0
 8012d6a:	220a      	movs	r2, #10
 8012d6c:	9904      	ldr	r1, [sp, #16]
 8012d6e:	4620      	mov	r0, r4
 8012d70:	f000 fa50 	bl	8013214 <__multadd>
 8012d74:	9004      	str	r0, [sp, #16]
 8012d76:	e7ea      	b.n	8012d4e <_dtoa_r+0xb3e>
 8012d78:	08016a1c 	.word	0x08016a1c
 8012d7c:	0801678e 	.word	0x0801678e

08012d80 <__sflush_r>:
 8012d80:	898a      	ldrh	r2, [r1, #12]
 8012d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012d86:	4605      	mov	r5, r0
 8012d88:	0710      	lsls	r0, r2, #28
 8012d8a:	460c      	mov	r4, r1
 8012d8c:	d458      	bmi.n	8012e40 <__sflush_r+0xc0>
 8012d8e:	684b      	ldr	r3, [r1, #4]
 8012d90:	2b00      	cmp	r3, #0
 8012d92:	dc05      	bgt.n	8012da0 <__sflush_r+0x20>
 8012d94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8012d96:	2b00      	cmp	r3, #0
 8012d98:	dc02      	bgt.n	8012da0 <__sflush_r+0x20>
 8012d9a:	2000      	movs	r0, #0
 8012d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012da0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012da2:	2e00      	cmp	r6, #0
 8012da4:	d0f9      	beq.n	8012d9a <__sflush_r+0x1a>
 8012da6:	2300      	movs	r3, #0
 8012da8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8012dac:	682f      	ldr	r7, [r5, #0]
 8012dae:	6a21      	ldr	r1, [r4, #32]
 8012db0:	602b      	str	r3, [r5, #0]
 8012db2:	d032      	beq.n	8012e1a <__sflush_r+0x9a>
 8012db4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8012db6:	89a3      	ldrh	r3, [r4, #12]
 8012db8:	075a      	lsls	r2, r3, #29
 8012dba:	d505      	bpl.n	8012dc8 <__sflush_r+0x48>
 8012dbc:	6863      	ldr	r3, [r4, #4]
 8012dbe:	1ac0      	subs	r0, r0, r3
 8012dc0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8012dc2:	b10b      	cbz	r3, 8012dc8 <__sflush_r+0x48>
 8012dc4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8012dc6:	1ac0      	subs	r0, r0, r3
 8012dc8:	2300      	movs	r3, #0
 8012dca:	4602      	mov	r2, r0
 8012dcc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8012dce:	6a21      	ldr	r1, [r4, #32]
 8012dd0:	4628      	mov	r0, r5
 8012dd2:	47b0      	blx	r6
 8012dd4:	1c43      	adds	r3, r0, #1
 8012dd6:	89a3      	ldrh	r3, [r4, #12]
 8012dd8:	d106      	bne.n	8012de8 <__sflush_r+0x68>
 8012dda:	6829      	ldr	r1, [r5, #0]
 8012ddc:	291d      	cmp	r1, #29
 8012dde:	d848      	bhi.n	8012e72 <__sflush_r+0xf2>
 8012de0:	4a29      	ldr	r2, [pc, #164]	; (8012e88 <__sflush_r+0x108>)
 8012de2:	40ca      	lsrs	r2, r1
 8012de4:	07d6      	lsls	r6, r2, #31
 8012de6:	d544      	bpl.n	8012e72 <__sflush_r+0xf2>
 8012de8:	2200      	movs	r2, #0
 8012dea:	6062      	str	r2, [r4, #4]
 8012dec:	04d9      	lsls	r1, r3, #19
 8012dee:	6922      	ldr	r2, [r4, #16]
 8012df0:	6022      	str	r2, [r4, #0]
 8012df2:	d504      	bpl.n	8012dfe <__sflush_r+0x7e>
 8012df4:	1c42      	adds	r2, r0, #1
 8012df6:	d101      	bne.n	8012dfc <__sflush_r+0x7c>
 8012df8:	682b      	ldr	r3, [r5, #0]
 8012dfa:	b903      	cbnz	r3, 8012dfe <__sflush_r+0x7e>
 8012dfc:	6560      	str	r0, [r4, #84]	; 0x54
 8012dfe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8012e00:	602f      	str	r7, [r5, #0]
 8012e02:	2900      	cmp	r1, #0
 8012e04:	d0c9      	beq.n	8012d9a <__sflush_r+0x1a>
 8012e06:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8012e0a:	4299      	cmp	r1, r3
 8012e0c:	d002      	beq.n	8012e14 <__sflush_r+0x94>
 8012e0e:	4628      	mov	r0, r5
 8012e10:	f000 fc9e 	bl	8013750 <_free_r>
 8012e14:	2000      	movs	r0, #0
 8012e16:	6360      	str	r0, [r4, #52]	; 0x34
 8012e18:	e7c0      	b.n	8012d9c <__sflush_r+0x1c>
 8012e1a:	2301      	movs	r3, #1
 8012e1c:	4628      	mov	r0, r5
 8012e1e:	47b0      	blx	r6
 8012e20:	1c41      	adds	r1, r0, #1
 8012e22:	d1c8      	bne.n	8012db6 <__sflush_r+0x36>
 8012e24:	682b      	ldr	r3, [r5, #0]
 8012e26:	2b00      	cmp	r3, #0
 8012e28:	d0c5      	beq.n	8012db6 <__sflush_r+0x36>
 8012e2a:	2b1d      	cmp	r3, #29
 8012e2c:	d001      	beq.n	8012e32 <__sflush_r+0xb2>
 8012e2e:	2b16      	cmp	r3, #22
 8012e30:	d101      	bne.n	8012e36 <__sflush_r+0xb6>
 8012e32:	602f      	str	r7, [r5, #0]
 8012e34:	e7b1      	b.n	8012d9a <__sflush_r+0x1a>
 8012e36:	89a3      	ldrh	r3, [r4, #12]
 8012e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e3c:	81a3      	strh	r3, [r4, #12]
 8012e3e:	e7ad      	b.n	8012d9c <__sflush_r+0x1c>
 8012e40:	690f      	ldr	r7, [r1, #16]
 8012e42:	2f00      	cmp	r7, #0
 8012e44:	d0a9      	beq.n	8012d9a <__sflush_r+0x1a>
 8012e46:	0793      	lsls	r3, r2, #30
 8012e48:	680e      	ldr	r6, [r1, #0]
 8012e4a:	bf08      	it	eq
 8012e4c:	694b      	ldreq	r3, [r1, #20]
 8012e4e:	600f      	str	r7, [r1, #0]
 8012e50:	bf18      	it	ne
 8012e52:	2300      	movne	r3, #0
 8012e54:	eba6 0807 	sub.w	r8, r6, r7
 8012e58:	608b      	str	r3, [r1, #8]
 8012e5a:	f1b8 0f00 	cmp.w	r8, #0
 8012e5e:	dd9c      	ble.n	8012d9a <__sflush_r+0x1a>
 8012e60:	4643      	mov	r3, r8
 8012e62:	463a      	mov	r2, r7
 8012e64:	6a21      	ldr	r1, [r4, #32]
 8012e66:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8012e68:	4628      	mov	r0, r5
 8012e6a:	47b0      	blx	r6
 8012e6c:	2800      	cmp	r0, #0
 8012e6e:	dc06      	bgt.n	8012e7e <__sflush_r+0xfe>
 8012e70:	89a3      	ldrh	r3, [r4, #12]
 8012e72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012e76:	81a3      	strh	r3, [r4, #12]
 8012e78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012e7c:	e78e      	b.n	8012d9c <__sflush_r+0x1c>
 8012e7e:	4407      	add	r7, r0
 8012e80:	eba8 0800 	sub.w	r8, r8, r0
 8012e84:	e7e9      	b.n	8012e5a <__sflush_r+0xda>
 8012e86:	bf00      	nop
 8012e88:	20400001 	.word	0x20400001

08012e8c <_fflush_r>:
 8012e8c:	b538      	push	{r3, r4, r5, lr}
 8012e8e:	690b      	ldr	r3, [r1, #16]
 8012e90:	4605      	mov	r5, r0
 8012e92:	460c      	mov	r4, r1
 8012e94:	b1db      	cbz	r3, 8012ece <_fflush_r+0x42>
 8012e96:	b118      	cbz	r0, 8012ea0 <_fflush_r+0x14>
 8012e98:	6983      	ldr	r3, [r0, #24]
 8012e9a:	b90b      	cbnz	r3, 8012ea0 <_fflush_r+0x14>
 8012e9c:	f000 f860 	bl	8012f60 <__sinit>
 8012ea0:	4b0c      	ldr	r3, [pc, #48]	; (8012ed4 <_fflush_r+0x48>)
 8012ea2:	429c      	cmp	r4, r3
 8012ea4:	d109      	bne.n	8012eba <_fflush_r+0x2e>
 8012ea6:	686c      	ldr	r4, [r5, #4]
 8012ea8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012eac:	b17b      	cbz	r3, 8012ece <_fflush_r+0x42>
 8012eae:	4621      	mov	r1, r4
 8012eb0:	4628      	mov	r0, r5
 8012eb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8012eb6:	f7ff bf63 	b.w	8012d80 <__sflush_r>
 8012eba:	4b07      	ldr	r3, [pc, #28]	; (8012ed8 <_fflush_r+0x4c>)
 8012ebc:	429c      	cmp	r4, r3
 8012ebe:	d101      	bne.n	8012ec4 <_fflush_r+0x38>
 8012ec0:	68ac      	ldr	r4, [r5, #8]
 8012ec2:	e7f1      	b.n	8012ea8 <_fflush_r+0x1c>
 8012ec4:	4b05      	ldr	r3, [pc, #20]	; (8012edc <_fflush_r+0x50>)
 8012ec6:	429c      	cmp	r4, r3
 8012ec8:	bf08      	it	eq
 8012eca:	68ec      	ldreq	r4, [r5, #12]
 8012ecc:	e7ec      	b.n	8012ea8 <_fflush_r+0x1c>
 8012ece:	2000      	movs	r0, #0
 8012ed0:	bd38      	pop	{r3, r4, r5, pc}
 8012ed2:	bf00      	nop
 8012ed4:	080167bc 	.word	0x080167bc
 8012ed8:	080167dc 	.word	0x080167dc
 8012edc:	0801679c 	.word	0x0801679c

08012ee0 <std>:
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	b510      	push	{r4, lr}
 8012ee4:	4604      	mov	r4, r0
 8012ee6:	e9c0 3300 	strd	r3, r3, [r0]
 8012eea:	6083      	str	r3, [r0, #8]
 8012eec:	8181      	strh	r1, [r0, #12]
 8012eee:	6643      	str	r3, [r0, #100]	; 0x64
 8012ef0:	81c2      	strh	r2, [r0, #14]
 8012ef2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8012ef6:	6183      	str	r3, [r0, #24]
 8012ef8:	4619      	mov	r1, r3
 8012efa:	2208      	movs	r2, #8
 8012efc:	305c      	adds	r0, #92	; 0x5c
 8012efe:	f7fe fb15 	bl	801152c <memset>
 8012f02:	4b05      	ldr	r3, [pc, #20]	; (8012f18 <std+0x38>)
 8012f04:	6263      	str	r3, [r4, #36]	; 0x24
 8012f06:	4b05      	ldr	r3, [pc, #20]	; (8012f1c <std+0x3c>)
 8012f08:	62a3      	str	r3, [r4, #40]	; 0x28
 8012f0a:	4b05      	ldr	r3, [pc, #20]	; (8012f20 <std+0x40>)
 8012f0c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8012f0e:	4b05      	ldr	r3, [pc, #20]	; (8012f24 <std+0x44>)
 8012f10:	6224      	str	r4, [r4, #32]
 8012f12:	6323      	str	r3, [r4, #48]	; 0x30
 8012f14:	bd10      	pop	{r4, pc}
 8012f16:	bf00      	nop
 8012f18:	08013de5 	.word	0x08013de5
 8012f1c:	08013e07 	.word	0x08013e07
 8012f20:	08013e3f 	.word	0x08013e3f
 8012f24:	08013e63 	.word	0x08013e63

08012f28 <_cleanup_r>:
 8012f28:	4901      	ldr	r1, [pc, #4]	; (8012f30 <_cleanup_r+0x8>)
 8012f2a:	f000 b885 	b.w	8013038 <_fwalk_reent>
 8012f2e:	bf00      	nop
 8012f30:	08012e8d 	.word	0x08012e8d

08012f34 <__sfmoreglue>:
 8012f34:	b570      	push	{r4, r5, r6, lr}
 8012f36:	1e4a      	subs	r2, r1, #1
 8012f38:	2568      	movs	r5, #104	; 0x68
 8012f3a:	4355      	muls	r5, r2
 8012f3c:	460e      	mov	r6, r1
 8012f3e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8012f42:	f000 fc53 	bl	80137ec <_malloc_r>
 8012f46:	4604      	mov	r4, r0
 8012f48:	b140      	cbz	r0, 8012f5c <__sfmoreglue+0x28>
 8012f4a:	2100      	movs	r1, #0
 8012f4c:	e9c0 1600 	strd	r1, r6, [r0]
 8012f50:	300c      	adds	r0, #12
 8012f52:	60a0      	str	r0, [r4, #8]
 8012f54:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8012f58:	f7fe fae8 	bl	801152c <memset>
 8012f5c:	4620      	mov	r0, r4
 8012f5e:	bd70      	pop	{r4, r5, r6, pc}

08012f60 <__sinit>:
 8012f60:	6983      	ldr	r3, [r0, #24]
 8012f62:	b510      	push	{r4, lr}
 8012f64:	4604      	mov	r4, r0
 8012f66:	bb33      	cbnz	r3, 8012fb6 <__sinit+0x56>
 8012f68:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8012f6c:	6503      	str	r3, [r0, #80]	; 0x50
 8012f6e:	4b12      	ldr	r3, [pc, #72]	; (8012fb8 <__sinit+0x58>)
 8012f70:	4a12      	ldr	r2, [pc, #72]	; (8012fbc <__sinit+0x5c>)
 8012f72:	681b      	ldr	r3, [r3, #0]
 8012f74:	6282      	str	r2, [r0, #40]	; 0x28
 8012f76:	4298      	cmp	r0, r3
 8012f78:	bf04      	itt	eq
 8012f7a:	2301      	moveq	r3, #1
 8012f7c:	6183      	streq	r3, [r0, #24]
 8012f7e:	f000 f81f 	bl	8012fc0 <__sfp>
 8012f82:	6060      	str	r0, [r4, #4]
 8012f84:	4620      	mov	r0, r4
 8012f86:	f000 f81b 	bl	8012fc0 <__sfp>
 8012f8a:	60a0      	str	r0, [r4, #8]
 8012f8c:	4620      	mov	r0, r4
 8012f8e:	f000 f817 	bl	8012fc0 <__sfp>
 8012f92:	2200      	movs	r2, #0
 8012f94:	60e0      	str	r0, [r4, #12]
 8012f96:	2104      	movs	r1, #4
 8012f98:	6860      	ldr	r0, [r4, #4]
 8012f9a:	f7ff ffa1 	bl	8012ee0 <std>
 8012f9e:	2201      	movs	r2, #1
 8012fa0:	2109      	movs	r1, #9
 8012fa2:	68a0      	ldr	r0, [r4, #8]
 8012fa4:	f7ff ff9c 	bl	8012ee0 <std>
 8012fa8:	2202      	movs	r2, #2
 8012faa:	2112      	movs	r1, #18
 8012fac:	68e0      	ldr	r0, [r4, #12]
 8012fae:	f7ff ff97 	bl	8012ee0 <std>
 8012fb2:	2301      	movs	r3, #1
 8012fb4:	61a3      	str	r3, [r4, #24]
 8012fb6:	bd10      	pop	{r4, pc}
 8012fb8:	08016758 	.word	0x08016758
 8012fbc:	08012f29 	.word	0x08012f29

08012fc0 <__sfp>:
 8012fc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012fc2:	4b1b      	ldr	r3, [pc, #108]	; (8013030 <__sfp+0x70>)
 8012fc4:	681e      	ldr	r6, [r3, #0]
 8012fc6:	69b3      	ldr	r3, [r6, #24]
 8012fc8:	4607      	mov	r7, r0
 8012fca:	b913      	cbnz	r3, 8012fd2 <__sfp+0x12>
 8012fcc:	4630      	mov	r0, r6
 8012fce:	f7ff ffc7 	bl	8012f60 <__sinit>
 8012fd2:	3648      	adds	r6, #72	; 0x48
 8012fd4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8012fd8:	3b01      	subs	r3, #1
 8012fda:	d503      	bpl.n	8012fe4 <__sfp+0x24>
 8012fdc:	6833      	ldr	r3, [r6, #0]
 8012fde:	b133      	cbz	r3, 8012fee <__sfp+0x2e>
 8012fe0:	6836      	ldr	r6, [r6, #0]
 8012fe2:	e7f7      	b.n	8012fd4 <__sfp+0x14>
 8012fe4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8012fe8:	b16d      	cbz	r5, 8013006 <__sfp+0x46>
 8012fea:	3468      	adds	r4, #104	; 0x68
 8012fec:	e7f4      	b.n	8012fd8 <__sfp+0x18>
 8012fee:	2104      	movs	r1, #4
 8012ff0:	4638      	mov	r0, r7
 8012ff2:	f7ff ff9f 	bl	8012f34 <__sfmoreglue>
 8012ff6:	6030      	str	r0, [r6, #0]
 8012ff8:	2800      	cmp	r0, #0
 8012ffa:	d1f1      	bne.n	8012fe0 <__sfp+0x20>
 8012ffc:	230c      	movs	r3, #12
 8012ffe:	603b      	str	r3, [r7, #0]
 8013000:	4604      	mov	r4, r0
 8013002:	4620      	mov	r0, r4
 8013004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013006:	4b0b      	ldr	r3, [pc, #44]	; (8013034 <__sfp+0x74>)
 8013008:	6665      	str	r5, [r4, #100]	; 0x64
 801300a:	e9c4 5500 	strd	r5, r5, [r4]
 801300e:	60a5      	str	r5, [r4, #8]
 8013010:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8013014:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8013018:	2208      	movs	r2, #8
 801301a:	4629      	mov	r1, r5
 801301c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013020:	f7fe fa84 	bl	801152c <memset>
 8013024:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013028:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801302c:	e7e9      	b.n	8013002 <__sfp+0x42>
 801302e:	bf00      	nop
 8013030:	08016758 	.word	0x08016758
 8013034:	ffff0001 	.word	0xffff0001

08013038 <_fwalk_reent>:
 8013038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801303c:	4680      	mov	r8, r0
 801303e:	4689      	mov	r9, r1
 8013040:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013044:	2600      	movs	r6, #0
 8013046:	b914      	cbnz	r4, 801304e <_fwalk_reent+0x16>
 8013048:	4630      	mov	r0, r6
 801304a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801304e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8013052:	3f01      	subs	r7, #1
 8013054:	d501      	bpl.n	801305a <_fwalk_reent+0x22>
 8013056:	6824      	ldr	r4, [r4, #0]
 8013058:	e7f5      	b.n	8013046 <_fwalk_reent+0xe>
 801305a:	89ab      	ldrh	r3, [r5, #12]
 801305c:	2b01      	cmp	r3, #1
 801305e:	d907      	bls.n	8013070 <_fwalk_reent+0x38>
 8013060:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013064:	3301      	adds	r3, #1
 8013066:	d003      	beq.n	8013070 <_fwalk_reent+0x38>
 8013068:	4629      	mov	r1, r5
 801306a:	4640      	mov	r0, r8
 801306c:	47c8      	blx	r9
 801306e:	4306      	orrs	r6, r0
 8013070:	3568      	adds	r5, #104	; 0x68
 8013072:	e7ee      	b.n	8013052 <_fwalk_reent+0x1a>

08013074 <_localeconv_r>:
 8013074:	4b04      	ldr	r3, [pc, #16]	; (8013088 <_localeconv_r+0x14>)
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	6a18      	ldr	r0, [r3, #32]
 801307a:	4b04      	ldr	r3, [pc, #16]	; (801308c <_localeconv_r+0x18>)
 801307c:	2800      	cmp	r0, #0
 801307e:	bf08      	it	eq
 8013080:	4618      	moveq	r0, r3
 8013082:	30f0      	adds	r0, #240	; 0xf0
 8013084:	4770      	bx	lr
 8013086:	bf00      	nop
 8013088:	20001c34 	.word	0x20001c34
 801308c:	20001c98 	.word	0x20001c98

08013090 <__swhatbuf_r>:
 8013090:	b570      	push	{r4, r5, r6, lr}
 8013092:	460e      	mov	r6, r1
 8013094:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013098:	2900      	cmp	r1, #0
 801309a:	b096      	sub	sp, #88	; 0x58
 801309c:	4614      	mov	r4, r2
 801309e:	461d      	mov	r5, r3
 80130a0:	da07      	bge.n	80130b2 <__swhatbuf_r+0x22>
 80130a2:	2300      	movs	r3, #0
 80130a4:	602b      	str	r3, [r5, #0]
 80130a6:	89b3      	ldrh	r3, [r6, #12]
 80130a8:	061a      	lsls	r2, r3, #24
 80130aa:	d410      	bmi.n	80130ce <__swhatbuf_r+0x3e>
 80130ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80130b0:	e00e      	b.n	80130d0 <__swhatbuf_r+0x40>
 80130b2:	466a      	mov	r2, sp
 80130b4:	f000 fefc 	bl	8013eb0 <_fstat_r>
 80130b8:	2800      	cmp	r0, #0
 80130ba:	dbf2      	blt.n	80130a2 <__swhatbuf_r+0x12>
 80130bc:	9a01      	ldr	r2, [sp, #4]
 80130be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80130c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80130c6:	425a      	negs	r2, r3
 80130c8:	415a      	adcs	r2, r3
 80130ca:	602a      	str	r2, [r5, #0]
 80130cc:	e7ee      	b.n	80130ac <__swhatbuf_r+0x1c>
 80130ce:	2340      	movs	r3, #64	; 0x40
 80130d0:	2000      	movs	r0, #0
 80130d2:	6023      	str	r3, [r4, #0]
 80130d4:	b016      	add	sp, #88	; 0x58
 80130d6:	bd70      	pop	{r4, r5, r6, pc}

080130d8 <__smakebuf_r>:
 80130d8:	898b      	ldrh	r3, [r1, #12]
 80130da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80130dc:	079d      	lsls	r5, r3, #30
 80130de:	4606      	mov	r6, r0
 80130e0:	460c      	mov	r4, r1
 80130e2:	d507      	bpl.n	80130f4 <__smakebuf_r+0x1c>
 80130e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80130e8:	6023      	str	r3, [r4, #0]
 80130ea:	6123      	str	r3, [r4, #16]
 80130ec:	2301      	movs	r3, #1
 80130ee:	6163      	str	r3, [r4, #20]
 80130f0:	b002      	add	sp, #8
 80130f2:	bd70      	pop	{r4, r5, r6, pc}
 80130f4:	ab01      	add	r3, sp, #4
 80130f6:	466a      	mov	r2, sp
 80130f8:	f7ff ffca 	bl	8013090 <__swhatbuf_r>
 80130fc:	9900      	ldr	r1, [sp, #0]
 80130fe:	4605      	mov	r5, r0
 8013100:	4630      	mov	r0, r6
 8013102:	f000 fb73 	bl	80137ec <_malloc_r>
 8013106:	b948      	cbnz	r0, 801311c <__smakebuf_r+0x44>
 8013108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801310c:	059a      	lsls	r2, r3, #22
 801310e:	d4ef      	bmi.n	80130f0 <__smakebuf_r+0x18>
 8013110:	f023 0303 	bic.w	r3, r3, #3
 8013114:	f043 0302 	orr.w	r3, r3, #2
 8013118:	81a3      	strh	r3, [r4, #12]
 801311a:	e7e3      	b.n	80130e4 <__smakebuf_r+0xc>
 801311c:	4b0d      	ldr	r3, [pc, #52]	; (8013154 <__smakebuf_r+0x7c>)
 801311e:	62b3      	str	r3, [r6, #40]	; 0x28
 8013120:	89a3      	ldrh	r3, [r4, #12]
 8013122:	6020      	str	r0, [r4, #0]
 8013124:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013128:	81a3      	strh	r3, [r4, #12]
 801312a:	9b00      	ldr	r3, [sp, #0]
 801312c:	6163      	str	r3, [r4, #20]
 801312e:	9b01      	ldr	r3, [sp, #4]
 8013130:	6120      	str	r0, [r4, #16]
 8013132:	b15b      	cbz	r3, 801314c <__smakebuf_r+0x74>
 8013134:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013138:	4630      	mov	r0, r6
 801313a:	f000 fecb 	bl	8013ed4 <_isatty_r>
 801313e:	b128      	cbz	r0, 801314c <__smakebuf_r+0x74>
 8013140:	89a3      	ldrh	r3, [r4, #12]
 8013142:	f023 0303 	bic.w	r3, r3, #3
 8013146:	f043 0301 	orr.w	r3, r3, #1
 801314a:	81a3      	strh	r3, [r4, #12]
 801314c:	89a3      	ldrh	r3, [r4, #12]
 801314e:	431d      	orrs	r5, r3
 8013150:	81a5      	strh	r5, [r4, #12]
 8013152:	e7cd      	b.n	80130f0 <__smakebuf_r+0x18>
 8013154:	08012f29 	.word	0x08012f29

08013158 <malloc>:
 8013158:	4b02      	ldr	r3, [pc, #8]	; (8013164 <malloc+0xc>)
 801315a:	4601      	mov	r1, r0
 801315c:	6818      	ldr	r0, [r3, #0]
 801315e:	f000 bb45 	b.w	80137ec <_malloc_r>
 8013162:	bf00      	nop
 8013164:	20001c34 	.word	0x20001c34

08013168 <memcpy>:
 8013168:	b510      	push	{r4, lr}
 801316a:	1e43      	subs	r3, r0, #1
 801316c:	440a      	add	r2, r1
 801316e:	4291      	cmp	r1, r2
 8013170:	d100      	bne.n	8013174 <memcpy+0xc>
 8013172:	bd10      	pop	{r4, pc}
 8013174:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013178:	f803 4f01 	strb.w	r4, [r3, #1]!
 801317c:	e7f7      	b.n	801316e <memcpy+0x6>

0801317e <_Balloc>:
 801317e:	b570      	push	{r4, r5, r6, lr}
 8013180:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013182:	4604      	mov	r4, r0
 8013184:	460e      	mov	r6, r1
 8013186:	b93d      	cbnz	r5, 8013198 <_Balloc+0x1a>
 8013188:	2010      	movs	r0, #16
 801318a:	f7ff ffe5 	bl	8013158 <malloc>
 801318e:	6260      	str	r0, [r4, #36]	; 0x24
 8013190:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8013194:	6005      	str	r5, [r0, #0]
 8013196:	60c5      	str	r5, [r0, #12]
 8013198:	6a65      	ldr	r5, [r4, #36]	; 0x24
 801319a:	68eb      	ldr	r3, [r5, #12]
 801319c:	b183      	cbz	r3, 80131c0 <_Balloc+0x42>
 801319e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80131a0:	68db      	ldr	r3, [r3, #12]
 80131a2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80131a6:	b9b8      	cbnz	r0, 80131d8 <_Balloc+0x5a>
 80131a8:	2101      	movs	r1, #1
 80131aa:	fa01 f506 	lsl.w	r5, r1, r6
 80131ae:	1d6a      	adds	r2, r5, #5
 80131b0:	0092      	lsls	r2, r2, #2
 80131b2:	4620      	mov	r0, r4
 80131b4:	f000 fabe 	bl	8013734 <_calloc_r>
 80131b8:	b160      	cbz	r0, 80131d4 <_Balloc+0x56>
 80131ba:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80131be:	e00e      	b.n	80131de <_Balloc+0x60>
 80131c0:	2221      	movs	r2, #33	; 0x21
 80131c2:	2104      	movs	r1, #4
 80131c4:	4620      	mov	r0, r4
 80131c6:	f000 fab5 	bl	8013734 <_calloc_r>
 80131ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80131cc:	60e8      	str	r0, [r5, #12]
 80131ce:	68db      	ldr	r3, [r3, #12]
 80131d0:	2b00      	cmp	r3, #0
 80131d2:	d1e4      	bne.n	801319e <_Balloc+0x20>
 80131d4:	2000      	movs	r0, #0
 80131d6:	bd70      	pop	{r4, r5, r6, pc}
 80131d8:	6802      	ldr	r2, [r0, #0]
 80131da:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80131de:	2300      	movs	r3, #0
 80131e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80131e4:	e7f7      	b.n	80131d6 <_Balloc+0x58>

080131e6 <_Bfree>:
 80131e6:	b570      	push	{r4, r5, r6, lr}
 80131e8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80131ea:	4606      	mov	r6, r0
 80131ec:	460d      	mov	r5, r1
 80131ee:	b93c      	cbnz	r4, 8013200 <_Bfree+0x1a>
 80131f0:	2010      	movs	r0, #16
 80131f2:	f7ff ffb1 	bl	8013158 <malloc>
 80131f6:	6270      	str	r0, [r6, #36]	; 0x24
 80131f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80131fc:	6004      	str	r4, [r0, #0]
 80131fe:	60c4      	str	r4, [r0, #12]
 8013200:	b13d      	cbz	r5, 8013212 <_Bfree+0x2c>
 8013202:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8013204:	686a      	ldr	r2, [r5, #4]
 8013206:	68db      	ldr	r3, [r3, #12]
 8013208:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801320c:	6029      	str	r1, [r5, #0]
 801320e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8013212:	bd70      	pop	{r4, r5, r6, pc}

08013214 <__multadd>:
 8013214:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013218:	690d      	ldr	r5, [r1, #16]
 801321a:	461f      	mov	r7, r3
 801321c:	4606      	mov	r6, r0
 801321e:	460c      	mov	r4, r1
 8013220:	f101 0c14 	add.w	ip, r1, #20
 8013224:	2300      	movs	r3, #0
 8013226:	f8dc 0000 	ldr.w	r0, [ip]
 801322a:	b281      	uxth	r1, r0
 801322c:	fb02 7101 	mla	r1, r2, r1, r7
 8013230:	0c0f      	lsrs	r7, r1, #16
 8013232:	0c00      	lsrs	r0, r0, #16
 8013234:	fb02 7000 	mla	r0, r2, r0, r7
 8013238:	b289      	uxth	r1, r1
 801323a:	3301      	adds	r3, #1
 801323c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8013240:	429d      	cmp	r5, r3
 8013242:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8013246:	f84c 1b04 	str.w	r1, [ip], #4
 801324a:	dcec      	bgt.n	8013226 <__multadd+0x12>
 801324c:	b1d7      	cbz	r7, 8013284 <__multadd+0x70>
 801324e:	68a3      	ldr	r3, [r4, #8]
 8013250:	42ab      	cmp	r3, r5
 8013252:	dc12      	bgt.n	801327a <__multadd+0x66>
 8013254:	6861      	ldr	r1, [r4, #4]
 8013256:	4630      	mov	r0, r6
 8013258:	3101      	adds	r1, #1
 801325a:	f7ff ff90 	bl	801317e <_Balloc>
 801325e:	6922      	ldr	r2, [r4, #16]
 8013260:	3202      	adds	r2, #2
 8013262:	f104 010c 	add.w	r1, r4, #12
 8013266:	4680      	mov	r8, r0
 8013268:	0092      	lsls	r2, r2, #2
 801326a:	300c      	adds	r0, #12
 801326c:	f7ff ff7c 	bl	8013168 <memcpy>
 8013270:	4621      	mov	r1, r4
 8013272:	4630      	mov	r0, r6
 8013274:	f7ff ffb7 	bl	80131e6 <_Bfree>
 8013278:	4644      	mov	r4, r8
 801327a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801327e:	3501      	adds	r5, #1
 8013280:	615f      	str	r7, [r3, #20]
 8013282:	6125      	str	r5, [r4, #16]
 8013284:	4620      	mov	r0, r4
 8013286:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801328a <__hi0bits>:
 801328a:	0c02      	lsrs	r2, r0, #16
 801328c:	0412      	lsls	r2, r2, #16
 801328e:	4603      	mov	r3, r0
 8013290:	b9b2      	cbnz	r2, 80132c0 <__hi0bits+0x36>
 8013292:	0403      	lsls	r3, r0, #16
 8013294:	2010      	movs	r0, #16
 8013296:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 801329a:	bf04      	itt	eq
 801329c:	021b      	lsleq	r3, r3, #8
 801329e:	3008      	addeq	r0, #8
 80132a0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80132a4:	bf04      	itt	eq
 80132a6:	011b      	lsleq	r3, r3, #4
 80132a8:	3004      	addeq	r0, #4
 80132aa:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80132ae:	bf04      	itt	eq
 80132b0:	009b      	lsleq	r3, r3, #2
 80132b2:	3002      	addeq	r0, #2
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	db06      	blt.n	80132c6 <__hi0bits+0x3c>
 80132b8:	005b      	lsls	r3, r3, #1
 80132ba:	d503      	bpl.n	80132c4 <__hi0bits+0x3a>
 80132bc:	3001      	adds	r0, #1
 80132be:	4770      	bx	lr
 80132c0:	2000      	movs	r0, #0
 80132c2:	e7e8      	b.n	8013296 <__hi0bits+0xc>
 80132c4:	2020      	movs	r0, #32
 80132c6:	4770      	bx	lr

080132c8 <__lo0bits>:
 80132c8:	6803      	ldr	r3, [r0, #0]
 80132ca:	f013 0207 	ands.w	r2, r3, #7
 80132ce:	4601      	mov	r1, r0
 80132d0:	d00b      	beq.n	80132ea <__lo0bits+0x22>
 80132d2:	07da      	lsls	r2, r3, #31
 80132d4:	d423      	bmi.n	801331e <__lo0bits+0x56>
 80132d6:	0798      	lsls	r0, r3, #30
 80132d8:	bf49      	itett	mi
 80132da:	085b      	lsrmi	r3, r3, #1
 80132dc:	089b      	lsrpl	r3, r3, #2
 80132de:	2001      	movmi	r0, #1
 80132e0:	600b      	strmi	r3, [r1, #0]
 80132e2:	bf5c      	itt	pl
 80132e4:	600b      	strpl	r3, [r1, #0]
 80132e6:	2002      	movpl	r0, #2
 80132e8:	4770      	bx	lr
 80132ea:	b298      	uxth	r0, r3
 80132ec:	b9a8      	cbnz	r0, 801331a <__lo0bits+0x52>
 80132ee:	0c1b      	lsrs	r3, r3, #16
 80132f0:	2010      	movs	r0, #16
 80132f2:	f013 0fff 	tst.w	r3, #255	; 0xff
 80132f6:	bf04      	itt	eq
 80132f8:	0a1b      	lsreq	r3, r3, #8
 80132fa:	3008      	addeq	r0, #8
 80132fc:	071a      	lsls	r2, r3, #28
 80132fe:	bf04      	itt	eq
 8013300:	091b      	lsreq	r3, r3, #4
 8013302:	3004      	addeq	r0, #4
 8013304:	079a      	lsls	r2, r3, #30
 8013306:	bf04      	itt	eq
 8013308:	089b      	lsreq	r3, r3, #2
 801330a:	3002      	addeq	r0, #2
 801330c:	07da      	lsls	r2, r3, #31
 801330e:	d402      	bmi.n	8013316 <__lo0bits+0x4e>
 8013310:	085b      	lsrs	r3, r3, #1
 8013312:	d006      	beq.n	8013322 <__lo0bits+0x5a>
 8013314:	3001      	adds	r0, #1
 8013316:	600b      	str	r3, [r1, #0]
 8013318:	4770      	bx	lr
 801331a:	4610      	mov	r0, r2
 801331c:	e7e9      	b.n	80132f2 <__lo0bits+0x2a>
 801331e:	2000      	movs	r0, #0
 8013320:	4770      	bx	lr
 8013322:	2020      	movs	r0, #32
 8013324:	4770      	bx	lr

08013326 <__i2b>:
 8013326:	b510      	push	{r4, lr}
 8013328:	460c      	mov	r4, r1
 801332a:	2101      	movs	r1, #1
 801332c:	f7ff ff27 	bl	801317e <_Balloc>
 8013330:	2201      	movs	r2, #1
 8013332:	6144      	str	r4, [r0, #20]
 8013334:	6102      	str	r2, [r0, #16]
 8013336:	bd10      	pop	{r4, pc}

08013338 <__multiply>:
 8013338:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801333c:	4614      	mov	r4, r2
 801333e:	690a      	ldr	r2, [r1, #16]
 8013340:	6923      	ldr	r3, [r4, #16]
 8013342:	429a      	cmp	r2, r3
 8013344:	bfb8      	it	lt
 8013346:	460b      	movlt	r3, r1
 8013348:	4688      	mov	r8, r1
 801334a:	bfbc      	itt	lt
 801334c:	46a0      	movlt	r8, r4
 801334e:	461c      	movlt	r4, r3
 8013350:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013354:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8013358:	f8d8 3008 	ldr.w	r3, [r8, #8]
 801335c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013360:	eb07 0609 	add.w	r6, r7, r9
 8013364:	42b3      	cmp	r3, r6
 8013366:	bfb8      	it	lt
 8013368:	3101      	addlt	r1, #1
 801336a:	f7ff ff08 	bl	801317e <_Balloc>
 801336e:	f100 0514 	add.w	r5, r0, #20
 8013372:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8013376:	462b      	mov	r3, r5
 8013378:	2200      	movs	r2, #0
 801337a:	4573      	cmp	r3, lr
 801337c:	d316      	bcc.n	80133ac <__multiply+0x74>
 801337e:	f104 0214 	add.w	r2, r4, #20
 8013382:	f108 0114 	add.w	r1, r8, #20
 8013386:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 801338a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 801338e:	9300      	str	r3, [sp, #0]
 8013390:	9b00      	ldr	r3, [sp, #0]
 8013392:	9201      	str	r2, [sp, #4]
 8013394:	4293      	cmp	r3, r2
 8013396:	d80c      	bhi.n	80133b2 <__multiply+0x7a>
 8013398:	2e00      	cmp	r6, #0
 801339a:	dd03      	ble.n	80133a4 <__multiply+0x6c>
 801339c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d05d      	beq.n	8013460 <__multiply+0x128>
 80133a4:	6106      	str	r6, [r0, #16]
 80133a6:	b003      	add	sp, #12
 80133a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133ac:	f843 2b04 	str.w	r2, [r3], #4
 80133b0:	e7e3      	b.n	801337a <__multiply+0x42>
 80133b2:	f8b2 b000 	ldrh.w	fp, [r2]
 80133b6:	f1bb 0f00 	cmp.w	fp, #0
 80133ba:	d023      	beq.n	8013404 <__multiply+0xcc>
 80133bc:	4689      	mov	r9, r1
 80133be:	46ac      	mov	ip, r5
 80133c0:	f04f 0800 	mov.w	r8, #0
 80133c4:	f859 4b04 	ldr.w	r4, [r9], #4
 80133c8:	f8dc a000 	ldr.w	sl, [ip]
 80133cc:	b2a3      	uxth	r3, r4
 80133ce:	fa1f fa8a 	uxth.w	sl, sl
 80133d2:	fb0b a303 	mla	r3, fp, r3, sl
 80133d6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80133da:	f8dc 4000 	ldr.w	r4, [ip]
 80133de:	4443      	add	r3, r8
 80133e0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80133e4:	fb0b 840a 	mla	r4, fp, sl, r8
 80133e8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80133ec:	46e2      	mov	sl, ip
 80133ee:	b29b      	uxth	r3, r3
 80133f0:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80133f4:	454f      	cmp	r7, r9
 80133f6:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80133fa:	f84a 3b04 	str.w	r3, [sl], #4
 80133fe:	d82b      	bhi.n	8013458 <__multiply+0x120>
 8013400:	f8cc 8004 	str.w	r8, [ip, #4]
 8013404:	9b01      	ldr	r3, [sp, #4]
 8013406:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 801340a:	3204      	adds	r2, #4
 801340c:	f1ba 0f00 	cmp.w	sl, #0
 8013410:	d020      	beq.n	8013454 <__multiply+0x11c>
 8013412:	682b      	ldr	r3, [r5, #0]
 8013414:	4689      	mov	r9, r1
 8013416:	46a8      	mov	r8, r5
 8013418:	f04f 0b00 	mov.w	fp, #0
 801341c:	f8b9 c000 	ldrh.w	ip, [r9]
 8013420:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8013424:	fb0a 440c 	mla	r4, sl, ip, r4
 8013428:	445c      	add	r4, fp
 801342a:	46c4      	mov	ip, r8
 801342c:	b29b      	uxth	r3, r3
 801342e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8013432:	f84c 3b04 	str.w	r3, [ip], #4
 8013436:	f859 3b04 	ldr.w	r3, [r9], #4
 801343a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 801343e:	0c1b      	lsrs	r3, r3, #16
 8013440:	fb0a b303 	mla	r3, sl, r3, fp
 8013444:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8013448:	454f      	cmp	r7, r9
 801344a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 801344e:	d805      	bhi.n	801345c <__multiply+0x124>
 8013450:	f8c8 3004 	str.w	r3, [r8, #4]
 8013454:	3504      	adds	r5, #4
 8013456:	e79b      	b.n	8013390 <__multiply+0x58>
 8013458:	46d4      	mov	ip, sl
 801345a:	e7b3      	b.n	80133c4 <__multiply+0x8c>
 801345c:	46e0      	mov	r8, ip
 801345e:	e7dd      	b.n	801341c <__multiply+0xe4>
 8013460:	3e01      	subs	r6, #1
 8013462:	e799      	b.n	8013398 <__multiply+0x60>

08013464 <__pow5mult>:
 8013464:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013468:	4615      	mov	r5, r2
 801346a:	f012 0203 	ands.w	r2, r2, #3
 801346e:	4606      	mov	r6, r0
 8013470:	460f      	mov	r7, r1
 8013472:	d007      	beq.n	8013484 <__pow5mult+0x20>
 8013474:	3a01      	subs	r2, #1
 8013476:	4c21      	ldr	r4, [pc, #132]	; (80134fc <__pow5mult+0x98>)
 8013478:	2300      	movs	r3, #0
 801347a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801347e:	f7ff fec9 	bl	8013214 <__multadd>
 8013482:	4607      	mov	r7, r0
 8013484:	10ad      	asrs	r5, r5, #2
 8013486:	d035      	beq.n	80134f4 <__pow5mult+0x90>
 8013488:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801348a:	b93c      	cbnz	r4, 801349c <__pow5mult+0x38>
 801348c:	2010      	movs	r0, #16
 801348e:	f7ff fe63 	bl	8013158 <malloc>
 8013492:	6270      	str	r0, [r6, #36]	; 0x24
 8013494:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013498:	6004      	str	r4, [r0, #0]
 801349a:	60c4      	str	r4, [r0, #12]
 801349c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80134a0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80134a4:	b94c      	cbnz	r4, 80134ba <__pow5mult+0x56>
 80134a6:	f240 2171 	movw	r1, #625	; 0x271
 80134aa:	4630      	mov	r0, r6
 80134ac:	f7ff ff3b 	bl	8013326 <__i2b>
 80134b0:	2300      	movs	r3, #0
 80134b2:	f8c8 0008 	str.w	r0, [r8, #8]
 80134b6:	4604      	mov	r4, r0
 80134b8:	6003      	str	r3, [r0, #0]
 80134ba:	f04f 0800 	mov.w	r8, #0
 80134be:	07eb      	lsls	r3, r5, #31
 80134c0:	d50a      	bpl.n	80134d8 <__pow5mult+0x74>
 80134c2:	4639      	mov	r1, r7
 80134c4:	4622      	mov	r2, r4
 80134c6:	4630      	mov	r0, r6
 80134c8:	f7ff ff36 	bl	8013338 <__multiply>
 80134cc:	4639      	mov	r1, r7
 80134ce:	4681      	mov	r9, r0
 80134d0:	4630      	mov	r0, r6
 80134d2:	f7ff fe88 	bl	80131e6 <_Bfree>
 80134d6:	464f      	mov	r7, r9
 80134d8:	106d      	asrs	r5, r5, #1
 80134da:	d00b      	beq.n	80134f4 <__pow5mult+0x90>
 80134dc:	6820      	ldr	r0, [r4, #0]
 80134de:	b938      	cbnz	r0, 80134f0 <__pow5mult+0x8c>
 80134e0:	4622      	mov	r2, r4
 80134e2:	4621      	mov	r1, r4
 80134e4:	4630      	mov	r0, r6
 80134e6:	f7ff ff27 	bl	8013338 <__multiply>
 80134ea:	6020      	str	r0, [r4, #0]
 80134ec:	f8c0 8000 	str.w	r8, [r0]
 80134f0:	4604      	mov	r4, r0
 80134f2:	e7e4      	b.n	80134be <__pow5mult+0x5a>
 80134f4:	4638      	mov	r0, r7
 80134f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80134fa:	bf00      	nop
 80134fc:	080168f0 	.word	0x080168f0

08013500 <__lshift>:
 8013500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013504:	460c      	mov	r4, r1
 8013506:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801350a:	6923      	ldr	r3, [r4, #16]
 801350c:	6849      	ldr	r1, [r1, #4]
 801350e:	eb0a 0903 	add.w	r9, sl, r3
 8013512:	68a3      	ldr	r3, [r4, #8]
 8013514:	4607      	mov	r7, r0
 8013516:	4616      	mov	r6, r2
 8013518:	f109 0501 	add.w	r5, r9, #1
 801351c:	42ab      	cmp	r3, r5
 801351e:	db32      	blt.n	8013586 <__lshift+0x86>
 8013520:	4638      	mov	r0, r7
 8013522:	f7ff fe2c 	bl	801317e <_Balloc>
 8013526:	2300      	movs	r3, #0
 8013528:	4680      	mov	r8, r0
 801352a:	f100 0114 	add.w	r1, r0, #20
 801352e:	461a      	mov	r2, r3
 8013530:	4553      	cmp	r3, sl
 8013532:	db2b      	blt.n	801358c <__lshift+0x8c>
 8013534:	6920      	ldr	r0, [r4, #16]
 8013536:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801353a:	f104 0314 	add.w	r3, r4, #20
 801353e:	f016 021f 	ands.w	r2, r6, #31
 8013542:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013546:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801354a:	d025      	beq.n	8013598 <__lshift+0x98>
 801354c:	f1c2 0e20 	rsb	lr, r2, #32
 8013550:	2000      	movs	r0, #0
 8013552:	681e      	ldr	r6, [r3, #0]
 8013554:	468a      	mov	sl, r1
 8013556:	4096      	lsls	r6, r2
 8013558:	4330      	orrs	r0, r6
 801355a:	f84a 0b04 	str.w	r0, [sl], #4
 801355e:	f853 0b04 	ldr.w	r0, [r3], #4
 8013562:	459c      	cmp	ip, r3
 8013564:	fa20 f00e 	lsr.w	r0, r0, lr
 8013568:	d814      	bhi.n	8013594 <__lshift+0x94>
 801356a:	6048      	str	r0, [r1, #4]
 801356c:	b108      	cbz	r0, 8013572 <__lshift+0x72>
 801356e:	f109 0502 	add.w	r5, r9, #2
 8013572:	3d01      	subs	r5, #1
 8013574:	4638      	mov	r0, r7
 8013576:	f8c8 5010 	str.w	r5, [r8, #16]
 801357a:	4621      	mov	r1, r4
 801357c:	f7ff fe33 	bl	80131e6 <_Bfree>
 8013580:	4640      	mov	r0, r8
 8013582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013586:	3101      	adds	r1, #1
 8013588:	005b      	lsls	r3, r3, #1
 801358a:	e7c7      	b.n	801351c <__lshift+0x1c>
 801358c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8013590:	3301      	adds	r3, #1
 8013592:	e7cd      	b.n	8013530 <__lshift+0x30>
 8013594:	4651      	mov	r1, sl
 8013596:	e7dc      	b.n	8013552 <__lshift+0x52>
 8013598:	3904      	subs	r1, #4
 801359a:	f853 2b04 	ldr.w	r2, [r3], #4
 801359e:	f841 2f04 	str.w	r2, [r1, #4]!
 80135a2:	459c      	cmp	ip, r3
 80135a4:	d8f9      	bhi.n	801359a <__lshift+0x9a>
 80135a6:	e7e4      	b.n	8013572 <__lshift+0x72>

080135a8 <__mcmp>:
 80135a8:	6903      	ldr	r3, [r0, #16]
 80135aa:	690a      	ldr	r2, [r1, #16]
 80135ac:	1a9b      	subs	r3, r3, r2
 80135ae:	b530      	push	{r4, r5, lr}
 80135b0:	d10c      	bne.n	80135cc <__mcmp+0x24>
 80135b2:	0092      	lsls	r2, r2, #2
 80135b4:	3014      	adds	r0, #20
 80135b6:	3114      	adds	r1, #20
 80135b8:	1884      	adds	r4, r0, r2
 80135ba:	4411      	add	r1, r2
 80135bc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80135c0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80135c4:	4295      	cmp	r5, r2
 80135c6:	d003      	beq.n	80135d0 <__mcmp+0x28>
 80135c8:	d305      	bcc.n	80135d6 <__mcmp+0x2e>
 80135ca:	2301      	movs	r3, #1
 80135cc:	4618      	mov	r0, r3
 80135ce:	bd30      	pop	{r4, r5, pc}
 80135d0:	42a0      	cmp	r0, r4
 80135d2:	d3f3      	bcc.n	80135bc <__mcmp+0x14>
 80135d4:	e7fa      	b.n	80135cc <__mcmp+0x24>
 80135d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80135da:	e7f7      	b.n	80135cc <__mcmp+0x24>

080135dc <__mdiff>:
 80135dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80135e0:	460d      	mov	r5, r1
 80135e2:	4607      	mov	r7, r0
 80135e4:	4611      	mov	r1, r2
 80135e6:	4628      	mov	r0, r5
 80135e8:	4614      	mov	r4, r2
 80135ea:	f7ff ffdd 	bl	80135a8 <__mcmp>
 80135ee:	1e06      	subs	r6, r0, #0
 80135f0:	d108      	bne.n	8013604 <__mdiff+0x28>
 80135f2:	4631      	mov	r1, r6
 80135f4:	4638      	mov	r0, r7
 80135f6:	f7ff fdc2 	bl	801317e <_Balloc>
 80135fa:	2301      	movs	r3, #1
 80135fc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8013600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013604:	bfa4      	itt	ge
 8013606:	4623      	movge	r3, r4
 8013608:	462c      	movge	r4, r5
 801360a:	4638      	mov	r0, r7
 801360c:	6861      	ldr	r1, [r4, #4]
 801360e:	bfa6      	itte	ge
 8013610:	461d      	movge	r5, r3
 8013612:	2600      	movge	r6, #0
 8013614:	2601      	movlt	r6, #1
 8013616:	f7ff fdb2 	bl	801317e <_Balloc>
 801361a:	692b      	ldr	r3, [r5, #16]
 801361c:	60c6      	str	r6, [r0, #12]
 801361e:	6926      	ldr	r6, [r4, #16]
 8013620:	f105 0914 	add.w	r9, r5, #20
 8013624:	f104 0214 	add.w	r2, r4, #20
 8013628:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 801362c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8013630:	f100 0514 	add.w	r5, r0, #20
 8013634:	f04f 0e00 	mov.w	lr, #0
 8013638:	f852 ab04 	ldr.w	sl, [r2], #4
 801363c:	f859 4b04 	ldr.w	r4, [r9], #4
 8013640:	fa1e f18a 	uxtah	r1, lr, sl
 8013644:	b2a3      	uxth	r3, r4
 8013646:	1ac9      	subs	r1, r1, r3
 8013648:	0c23      	lsrs	r3, r4, #16
 801364a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801364e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8013652:	b289      	uxth	r1, r1
 8013654:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8013658:	45c8      	cmp	r8, r9
 801365a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801365e:	4694      	mov	ip, r2
 8013660:	f845 3b04 	str.w	r3, [r5], #4
 8013664:	d8e8      	bhi.n	8013638 <__mdiff+0x5c>
 8013666:	45bc      	cmp	ip, r7
 8013668:	d304      	bcc.n	8013674 <__mdiff+0x98>
 801366a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801366e:	b183      	cbz	r3, 8013692 <__mdiff+0xb6>
 8013670:	6106      	str	r6, [r0, #16]
 8013672:	e7c5      	b.n	8013600 <__mdiff+0x24>
 8013674:	f85c 1b04 	ldr.w	r1, [ip], #4
 8013678:	fa1e f381 	uxtah	r3, lr, r1
 801367c:	141a      	asrs	r2, r3, #16
 801367e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013682:	b29b      	uxth	r3, r3
 8013684:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8013688:	ea4f 4e22 	mov.w	lr, r2, asr #16
 801368c:	f845 3b04 	str.w	r3, [r5], #4
 8013690:	e7e9      	b.n	8013666 <__mdiff+0x8a>
 8013692:	3e01      	subs	r6, #1
 8013694:	e7e9      	b.n	801366a <__mdiff+0x8e>

08013696 <__d2b>:
 8013696:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801369a:	460e      	mov	r6, r1
 801369c:	2101      	movs	r1, #1
 801369e:	ec59 8b10 	vmov	r8, r9, d0
 80136a2:	4615      	mov	r5, r2
 80136a4:	f7ff fd6b 	bl	801317e <_Balloc>
 80136a8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80136ac:	4607      	mov	r7, r0
 80136ae:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80136b2:	bb34      	cbnz	r4, 8013702 <__d2b+0x6c>
 80136b4:	9301      	str	r3, [sp, #4]
 80136b6:	f1b8 0300 	subs.w	r3, r8, #0
 80136ba:	d027      	beq.n	801370c <__d2b+0x76>
 80136bc:	a802      	add	r0, sp, #8
 80136be:	f840 3d08 	str.w	r3, [r0, #-8]!
 80136c2:	f7ff fe01 	bl	80132c8 <__lo0bits>
 80136c6:	9900      	ldr	r1, [sp, #0]
 80136c8:	b1f0      	cbz	r0, 8013708 <__d2b+0x72>
 80136ca:	9a01      	ldr	r2, [sp, #4]
 80136cc:	f1c0 0320 	rsb	r3, r0, #32
 80136d0:	fa02 f303 	lsl.w	r3, r2, r3
 80136d4:	430b      	orrs	r3, r1
 80136d6:	40c2      	lsrs	r2, r0
 80136d8:	617b      	str	r3, [r7, #20]
 80136da:	9201      	str	r2, [sp, #4]
 80136dc:	9b01      	ldr	r3, [sp, #4]
 80136de:	61bb      	str	r3, [r7, #24]
 80136e0:	2b00      	cmp	r3, #0
 80136e2:	bf14      	ite	ne
 80136e4:	2102      	movne	r1, #2
 80136e6:	2101      	moveq	r1, #1
 80136e8:	6139      	str	r1, [r7, #16]
 80136ea:	b1c4      	cbz	r4, 801371e <__d2b+0x88>
 80136ec:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80136f0:	4404      	add	r4, r0
 80136f2:	6034      	str	r4, [r6, #0]
 80136f4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80136f8:	6028      	str	r0, [r5, #0]
 80136fa:	4638      	mov	r0, r7
 80136fc:	b003      	add	sp, #12
 80136fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013702:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013706:	e7d5      	b.n	80136b4 <__d2b+0x1e>
 8013708:	6179      	str	r1, [r7, #20]
 801370a:	e7e7      	b.n	80136dc <__d2b+0x46>
 801370c:	a801      	add	r0, sp, #4
 801370e:	f7ff fddb 	bl	80132c8 <__lo0bits>
 8013712:	9b01      	ldr	r3, [sp, #4]
 8013714:	617b      	str	r3, [r7, #20]
 8013716:	2101      	movs	r1, #1
 8013718:	6139      	str	r1, [r7, #16]
 801371a:	3020      	adds	r0, #32
 801371c:	e7e5      	b.n	80136ea <__d2b+0x54>
 801371e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 8013722:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013726:	6030      	str	r0, [r6, #0]
 8013728:	6918      	ldr	r0, [r3, #16]
 801372a:	f7ff fdae 	bl	801328a <__hi0bits>
 801372e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8013732:	e7e1      	b.n	80136f8 <__d2b+0x62>

08013734 <_calloc_r>:
 8013734:	b538      	push	{r3, r4, r5, lr}
 8013736:	fb02 f401 	mul.w	r4, r2, r1
 801373a:	4621      	mov	r1, r4
 801373c:	f000 f856 	bl	80137ec <_malloc_r>
 8013740:	4605      	mov	r5, r0
 8013742:	b118      	cbz	r0, 801374c <_calloc_r+0x18>
 8013744:	4622      	mov	r2, r4
 8013746:	2100      	movs	r1, #0
 8013748:	f7fd fef0 	bl	801152c <memset>
 801374c:	4628      	mov	r0, r5
 801374e:	bd38      	pop	{r3, r4, r5, pc}

08013750 <_free_r>:
 8013750:	b538      	push	{r3, r4, r5, lr}
 8013752:	4605      	mov	r5, r0
 8013754:	2900      	cmp	r1, #0
 8013756:	d045      	beq.n	80137e4 <_free_r+0x94>
 8013758:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801375c:	1f0c      	subs	r4, r1, #4
 801375e:	2b00      	cmp	r3, #0
 8013760:	bfb8      	it	lt
 8013762:	18e4      	addlt	r4, r4, r3
 8013764:	f000 fc03 	bl	8013f6e <__malloc_lock>
 8013768:	4a1f      	ldr	r2, [pc, #124]	; (80137e8 <_free_r+0x98>)
 801376a:	6813      	ldr	r3, [r2, #0]
 801376c:	4610      	mov	r0, r2
 801376e:	b933      	cbnz	r3, 801377e <_free_r+0x2e>
 8013770:	6063      	str	r3, [r4, #4]
 8013772:	6014      	str	r4, [r2, #0]
 8013774:	4628      	mov	r0, r5
 8013776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801377a:	f000 bbf9 	b.w	8013f70 <__malloc_unlock>
 801377e:	42a3      	cmp	r3, r4
 8013780:	d90c      	bls.n	801379c <_free_r+0x4c>
 8013782:	6821      	ldr	r1, [r4, #0]
 8013784:	1862      	adds	r2, r4, r1
 8013786:	4293      	cmp	r3, r2
 8013788:	bf04      	itt	eq
 801378a:	681a      	ldreq	r2, [r3, #0]
 801378c:	685b      	ldreq	r3, [r3, #4]
 801378e:	6063      	str	r3, [r4, #4]
 8013790:	bf04      	itt	eq
 8013792:	1852      	addeq	r2, r2, r1
 8013794:	6022      	streq	r2, [r4, #0]
 8013796:	6004      	str	r4, [r0, #0]
 8013798:	e7ec      	b.n	8013774 <_free_r+0x24>
 801379a:	4613      	mov	r3, r2
 801379c:	685a      	ldr	r2, [r3, #4]
 801379e:	b10a      	cbz	r2, 80137a4 <_free_r+0x54>
 80137a0:	42a2      	cmp	r2, r4
 80137a2:	d9fa      	bls.n	801379a <_free_r+0x4a>
 80137a4:	6819      	ldr	r1, [r3, #0]
 80137a6:	1858      	adds	r0, r3, r1
 80137a8:	42a0      	cmp	r0, r4
 80137aa:	d10b      	bne.n	80137c4 <_free_r+0x74>
 80137ac:	6820      	ldr	r0, [r4, #0]
 80137ae:	4401      	add	r1, r0
 80137b0:	1858      	adds	r0, r3, r1
 80137b2:	4282      	cmp	r2, r0
 80137b4:	6019      	str	r1, [r3, #0]
 80137b6:	d1dd      	bne.n	8013774 <_free_r+0x24>
 80137b8:	6810      	ldr	r0, [r2, #0]
 80137ba:	6852      	ldr	r2, [r2, #4]
 80137bc:	605a      	str	r2, [r3, #4]
 80137be:	4401      	add	r1, r0
 80137c0:	6019      	str	r1, [r3, #0]
 80137c2:	e7d7      	b.n	8013774 <_free_r+0x24>
 80137c4:	d902      	bls.n	80137cc <_free_r+0x7c>
 80137c6:	230c      	movs	r3, #12
 80137c8:	602b      	str	r3, [r5, #0]
 80137ca:	e7d3      	b.n	8013774 <_free_r+0x24>
 80137cc:	6820      	ldr	r0, [r4, #0]
 80137ce:	1821      	adds	r1, r4, r0
 80137d0:	428a      	cmp	r2, r1
 80137d2:	bf04      	itt	eq
 80137d4:	6811      	ldreq	r1, [r2, #0]
 80137d6:	6852      	ldreq	r2, [r2, #4]
 80137d8:	6062      	str	r2, [r4, #4]
 80137da:	bf04      	itt	eq
 80137dc:	1809      	addeq	r1, r1, r0
 80137de:	6021      	streq	r1, [r4, #0]
 80137e0:	605c      	str	r4, [r3, #4]
 80137e2:	e7c7      	b.n	8013774 <_free_r+0x24>
 80137e4:	bd38      	pop	{r3, r4, r5, pc}
 80137e6:	bf00      	nop
 80137e8:	20002260 	.word	0x20002260

080137ec <_malloc_r>:
 80137ec:	b570      	push	{r4, r5, r6, lr}
 80137ee:	1ccd      	adds	r5, r1, #3
 80137f0:	f025 0503 	bic.w	r5, r5, #3
 80137f4:	3508      	adds	r5, #8
 80137f6:	2d0c      	cmp	r5, #12
 80137f8:	bf38      	it	cc
 80137fa:	250c      	movcc	r5, #12
 80137fc:	2d00      	cmp	r5, #0
 80137fe:	4606      	mov	r6, r0
 8013800:	db01      	blt.n	8013806 <_malloc_r+0x1a>
 8013802:	42a9      	cmp	r1, r5
 8013804:	d903      	bls.n	801380e <_malloc_r+0x22>
 8013806:	230c      	movs	r3, #12
 8013808:	6033      	str	r3, [r6, #0]
 801380a:	2000      	movs	r0, #0
 801380c:	bd70      	pop	{r4, r5, r6, pc}
 801380e:	f000 fbae 	bl	8013f6e <__malloc_lock>
 8013812:	4a21      	ldr	r2, [pc, #132]	; (8013898 <_malloc_r+0xac>)
 8013814:	6814      	ldr	r4, [r2, #0]
 8013816:	4621      	mov	r1, r4
 8013818:	b991      	cbnz	r1, 8013840 <_malloc_r+0x54>
 801381a:	4c20      	ldr	r4, [pc, #128]	; (801389c <_malloc_r+0xb0>)
 801381c:	6823      	ldr	r3, [r4, #0]
 801381e:	b91b      	cbnz	r3, 8013828 <_malloc_r+0x3c>
 8013820:	4630      	mov	r0, r6
 8013822:	f000 facf 	bl	8013dc4 <_sbrk_r>
 8013826:	6020      	str	r0, [r4, #0]
 8013828:	4629      	mov	r1, r5
 801382a:	4630      	mov	r0, r6
 801382c:	f000 faca 	bl	8013dc4 <_sbrk_r>
 8013830:	1c43      	adds	r3, r0, #1
 8013832:	d124      	bne.n	801387e <_malloc_r+0x92>
 8013834:	230c      	movs	r3, #12
 8013836:	6033      	str	r3, [r6, #0]
 8013838:	4630      	mov	r0, r6
 801383a:	f000 fb99 	bl	8013f70 <__malloc_unlock>
 801383e:	e7e4      	b.n	801380a <_malloc_r+0x1e>
 8013840:	680b      	ldr	r3, [r1, #0]
 8013842:	1b5b      	subs	r3, r3, r5
 8013844:	d418      	bmi.n	8013878 <_malloc_r+0x8c>
 8013846:	2b0b      	cmp	r3, #11
 8013848:	d90f      	bls.n	801386a <_malloc_r+0x7e>
 801384a:	600b      	str	r3, [r1, #0]
 801384c:	50cd      	str	r5, [r1, r3]
 801384e:	18cc      	adds	r4, r1, r3
 8013850:	4630      	mov	r0, r6
 8013852:	f000 fb8d 	bl	8013f70 <__malloc_unlock>
 8013856:	f104 000b 	add.w	r0, r4, #11
 801385a:	1d23      	adds	r3, r4, #4
 801385c:	f020 0007 	bic.w	r0, r0, #7
 8013860:	1ac3      	subs	r3, r0, r3
 8013862:	d0d3      	beq.n	801380c <_malloc_r+0x20>
 8013864:	425a      	negs	r2, r3
 8013866:	50e2      	str	r2, [r4, r3]
 8013868:	e7d0      	b.n	801380c <_malloc_r+0x20>
 801386a:	428c      	cmp	r4, r1
 801386c:	684b      	ldr	r3, [r1, #4]
 801386e:	bf16      	itet	ne
 8013870:	6063      	strne	r3, [r4, #4]
 8013872:	6013      	streq	r3, [r2, #0]
 8013874:	460c      	movne	r4, r1
 8013876:	e7eb      	b.n	8013850 <_malloc_r+0x64>
 8013878:	460c      	mov	r4, r1
 801387a:	6849      	ldr	r1, [r1, #4]
 801387c:	e7cc      	b.n	8013818 <_malloc_r+0x2c>
 801387e:	1cc4      	adds	r4, r0, #3
 8013880:	f024 0403 	bic.w	r4, r4, #3
 8013884:	42a0      	cmp	r0, r4
 8013886:	d005      	beq.n	8013894 <_malloc_r+0xa8>
 8013888:	1a21      	subs	r1, r4, r0
 801388a:	4630      	mov	r0, r6
 801388c:	f000 fa9a 	bl	8013dc4 <_sbrk_r>
 8013890:	3001      	adds	r0, #1
 8013892:	d0cf      	beq.n	8013834 <_malloc_r+0x48>
 8013894:	6025      	str	r5, [r4, #0]
 8013896:	e7db      	b.n	8013850 <_malloc_r+0x64>
 8013898:	20002260 	.word	0x20002260
 801389c:	20002264 	.word	0x20002264

080138a0 <__ssputs_r>:
 80138a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80138a4:	688e      	ldr	r6, [r1, #8]
 80138a6:	429e      	cmp	r6, r3
 80138a8:	4682      	mov	sl, r0
 80138aa:	460c      	mov	r4, r1
 80138ac:	4690      	mov	r8, r2
 80138ae:	4699      	mov	r9, r3
 80138b0:	d837      	bhi.n	8013922 <__ssputs_r+0x82>
 80138b2:	898a      	ldrh	r2, [r1, #12]
 80138b4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80138b8:	d031      	beq.n	801391e <__ssputs_r+0x7e>
 80138ba:	6825      	ldr	r5, [r4, #0]
 80138bc:	6909      	ldr	r1, [r1, #16]
 80138be:	1a6f      	subs	r7, r5, r1
 80138c0:	6965      	ldr	r5, [r4, #20]
 80138c2:	2302      	movs	r3, #2
 80138c4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80138c8:	fb95 f5f3 	sdiv	r5, r5, r3
 80138cc:	f109 0301 	add.w	r3, r9, #1
 80138d0:	443b      	add	r3, r7
 80138d2:	429d      	cmp	r5, r3
 80138d4:	bf38      	it	cc
 80138d6:	461d      	movcc	r5, r3
 80138d8:	0553      	lsls	r3, r2, #21
 80138da:	d530      	bpl.n	801393e <__ssputs_r+0x9e>
 80138dc:	4629      	mov	r1, r5
 80138de:	f7ff ff85 	bl	80137ec <_malloc_r>
 80138e2:	4606      	mov	r6, r0
 80138e4:	b950      	cbnz	r0, 80138fc <__ssputs_r+0x5c>
 80138e6:	230c      	movs	r3, #12
 80138e8:	f8ca 3000 	str.w	r3, [sl]
 80138ec:	89a3      	ldrh	r3, [r4, #12]
 80138ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80138f2:	81a3      	strh	r3, [r4, #12]
 80138f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80138f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80138fc:	463a      	mov	r2, r7
 80138fe:	6921      	ldr	r1, [r4, #16]
 8013900:	f7ff fc32 	bl	8013168 <memcpy>
 8013904:	89a3      	ldrh	r3, [r4, #12]
 8013906:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801390a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801390e:	81a3      	strh	r3, [r4, #12]
 8013910:	6126      	str	r6, [r4, #16]
 8013912:	6165      	str	r5, [r4, #20]
 8013914:	443e      	add	r6, r7
 8013916:	1bed      	subs	r5, r5, r7
 8013918:	6026      	str	r6, [r4, #0]
 801391a:	60a5      	str	r5, [r4, #8]
 801391c:	464e      	mov	r6, r9
 801391e:	454e      	cmp	r6, r9
 8013920:	d900      	bls.n	8013924 <__ssputs_r+0x84>
 8013922:	464e      	mov	r6, r9
 8013924:	4632      	mov	r2, r6
 8013926:	4641      	mov	r1, r8
 8013928:	6820      	ldr	r0, [r4, #0]
 801392a:	f000 fb07 	bl	8013f3c <memmove>
 801392e:	68a3      	ldr	r3, [r4, #8]
 8013930:	1b9b      	subs	r3, r3, r6
 8013932:	60a3      	str	r3, [r4, #8]
 8013934:	6823      	ldr	r3, [r4, #0]
 8013936:	441e      	add	r6, r3
 8013938:	6026      	str	r6, [r4, #0]
 801393a:	2000      	movs	r0, #0
 801393c:	e7dc      	b.n	80138f8 <__ssputs_r+0x58>
 801393e:	462a      	mov	r2, r5
 8013940:	f000 fb17 	bl	8013f72 <_realloc_r>
 8013944:	4606      	mov	r6, r0
 8013946:	2800      	cmp	r0, #0
 8013948:	d1e2      	bne.n	8013910 <__ssputs_r+0x70>
 801394a:	6921      	ldr	r1, [r4, #16]
 801394c:	4650      	mov	r0, sl
 801394e:	f7ff feff 	bl	8013750 <_free_r>
 8013952:	e7c8      	b.n	80138e6 <__ssputs_r+0x46>

08013954 <_svfiprintf_r>:
 8013954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013958:	461d      	mov	r5, r3
 801395a:	898b      	ldrh	r3, [r1, #12]
 801395c:	061f      	lsls	r7, r3, #24
 801395e:	b09d      	sub	sp, #116	; 0x74
 8013960:	4680      	mov	r8, r0
 8013962:	460c      	mov	r4, r1
 8013964:	4616      	mov	r6, r2
 8013966:	d50f      	bpl.n	8013988 <_svfiprintf_r+0x34>
 8013968:	690b      	ldr	r3, [r1, #16]
 801396a:	b96b      	cbnz	r3, 8013988 <_svfiprintf_r+0x34>
 801396c:	2140      	movs	r1, #64	; 0x40
 801396e:	f7ff ff3d 	bl	80137ec <_malloc_r>
 8013972:	6020      	str	r0, [r4, #0]
 8013974:	6120      	str	r0, [r4, #16]
 8013976:	b928      	cbnz	r0, 8013984 <_svfiprintf_r+0x30>
 8013978:	230c      	movs	r3, #12
 801397a:	f8c8 3000 	str.w	r3, [r8]
 801397e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013982:	e0c8      	b.n	8013b16 <_svfiprintf_r+0x1c2>
 8013984:	2340      	movs	r3, #64	; 0x40
 8013986:	6163      	str	r3, [r4, #20]
 8013988:	2300      	movs	r3, #0
 801398a:	9309      	str	r3, [sp, #36]	; 0x24
 801398c:	2320      	movs	r3, #32
 801398e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013992:	2330      	movs	r3, #48	; 0x30
 8013994:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013998:	9503      	str	r5, [sp, #12]
 801399a:	f04f 0b01 	mov.w	fp, #1
 801399e:	4637      	mov	r7, r6
 80139a0:	463d      	mov	r5, r7
 80139a2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80139a6:	b10b      	cbz	r3, 80139ac <_svfiprintf_r+0x58>
 80139a8:	2b25      	cmp	r3, #37	; 0x25
 80139aa:	d13e      	bne.n	8013a2a <_svfiprintf_r+0xd6>
 80139ac:	ebb7 0a06 	subs.w	sl, r7, r6
 80139b0:	d00b      	beq.n	80139ca <_svfiprintf_r+0x76>
 80139b2:	4653      	mov	r3, sl
 80139b4:	4632      	mov	r2, r6
 80139b6:	4621      	mov	r1, r4
 80139b8:	4640      	mov	r0, r8
 80139ba:	f7ff ff71 	bl	80138a0 <__ssputs_r>
 80139be:	3001      	adds	r0, #1
 80139c0:	f000 80a4 	beq.w	8013b0c <_svfiprintf_r+0x1b8>
 80139c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80139c6:	4453      	add	r3, sl
 80139c8:	9309      	str	r3, [sp, #36]	; 0x24
 80139ca:	783b      	ldrb	r3, [r7, #0]
 80139cc:	2b00      	cmp	r3, #0
 80139ce:	f000 809d 	beq.w	8013b0c <_svfiprintf_r+0x1b8>
 80139d2:	2300      	movs	r3, #0
 80139d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80139d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80139dc:	9304      	str	r3, [sp, #16]
 80139de:	9307      	str	r3, [sp, #28]
 80139e0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80139e4:	931a      	str	r3, [sp, #104]	; 0x68
 80139e6:	462f      	mov	r7, r5
 80139e8:	2205      	movs	r2, #5
 80139ea:	f817 1b01 	ldrb.w	r1, [r7], #1
 80139ee:	4850      	ldr	r0, [pc, #320]	; (8013b30 <_svfiprintf_r+0x1dc>)
 80139f0:	f7ec fc1e 	bl	8000230 <memchr>
 80139f4:	9b04      	ldr	r3, [sp, #16]
 80139f6:	b9d0      	cbnz	r0, 8013a2e <_svfiprintf_r+0xda>
 80139f8:	06d9      	lsls	r1, r3, #27
 80139fa:	bf44      	itt	mi
 80139fc:	2220      	movmi	r2, #32
 80139fe:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013a02:	071a      	lsls	r2, r3, #28
 8013a04:	bf44      	itt	mi
 8013a06:	222b      	movmi	r2, #43	; 0x2b
 8013a08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013a0c:	782a      	ldrb	r2, [r5, #0]
 8013a0e:	2a2a      	cmp	r2, #42	; 0x2a
 8013a10:	d015      	beq.n	8013a3e <_svfiprintf_r+0xea>
 8013a12:	9a07      	ldr	r2, [sp, #28]
 8013a14:	462f      	mov	r7, r5
 8013a16:	2000      	movs	r0, #0
 8013a18:	250a      	movs	r5, #10
 8013a1a:	4639      	mov	r1, r7
 8013a1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013a20:	3b30      	subs	r3, #48	; 0x30
 8013a22:	2b09      	cmp	r3, #9
 8013a24:	d94d      	bls.n	8013ac2 <_svfiprintf_r+0x16e>
 8013a26:	b1b8      	cbz	r0, 8013a58 <_svfiprintf_r+0x104>
 8013a28:	e00f      	b.n	8013a4a <_svfiprintf_r+0xf6>
 8013a2a:	462f      	mov	r7, r5
 8013a2c:	e7b8      	b.n	80139a0 <_svfiprintf_r+0x4c>
 8013a2e:	4a40      	ldr	r2, [pc, #256]	; (8013b30 <_svfiprintf_r+0x1dc>)
 8013a30:	1a80      	subs	r0, r0, r2
 8013a32:	fa0b f000 	lsl.w	r0, fp, r0
 8013a36:	4318      	orrs	r0, r3
 8013a38:	9004      	str	r0, [sp, #16]
 8013a3a:	463d      	mov	r5, r7
 8013a3c:	e7d3      	b.n	80139e6 <_svfiprintf_r+0x92>
 8013a3e:	9a03      	ldr	r2, [sp, #12]
 8013a40:	1d11      	adds	r1, r2, #4
 8013a42:	6812      	ldr	r2, [r2, #0]
 8013a44:	9103      	str	r1, [sp, #12]
 8013a46:	2a00      	cmp	r2, #0
 8013a48:	db01      	blt.n	8013a4e <_svfiprintf_r+0xfa>
 8013a4a:	9207      	str	r2, [sp, #28]
 8013a4c:	e004      	b.n	8013a58 <_svfiprintf_r+0x104>
 8013a4e:	4252      	negs	r2, r2
 8013a50:	f043 0302 	orr.w	r3, r3, #2
 8013a54:	9207      	str	r2, [sp, #28]
 8013a56:	9304      	str	r3, [sp, #16]
 8013a58:	783b      	ldrb	r3, [r7, #0]
 8013a5a:	2b2e      	cmp	r3, #46	; 0x2e
 8013a5c:	d10c      	bne.n	8013a78 <_svfiprintf_r+0x124>
 8013a5e:	787b      	ldrb	r3, [r7, #1]
 8013a60:	2b2a      	cmp	r3, #42	; 0x2a
 8013a62:	d133      	bne.n	8013acc <_svfiprintf_r+0x178>
 8013a64:	9b03      	ldr	r3, [sp, #12]
 8013a66:	1d1a      	adds	r2, r3, #4
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	9203      	str	r2, [sp, #12]
 8013a6c:	2b00      	cmp	r3, #0
 8013a6e:	bfb8      	it	lt
 8013a70:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013a74:	3702      	adds	r7, #2
 8013a76:	9305      	str	r3, [sp, #20]
 8013a78:	4d2e      	ldr	r5, [pc, #184]	; (8013b34 <_svfiprintf_r+0x1e0>)
 8013a7a:	7839      	ldrb	r1, [r7, #0]
 8013a7c:	2203      	movs	r2, #3
 8013a7e:	4628      	mov	r0, r5
 8013a80:	f7ec fbd6 	bl	8000230 <memchr>
 8013a84:	b138      	cbz	r0, 8013a96 <_svfiprintf_r+0x142>
 8013a86:	2340      	movs	r3, #64	; 0x40
 8013a88:	1b40      	subs	r0, r0, r5
 8013a8a:	fa03 f000 	lsl.w	r0, r3, r0
 8013a8e:	9b04      	ldr	r3, [sp, #16]
 8013a90:	4303      	orrs	r3, r0
 8013a92:	3701      	adds	r7, #1
 8013a94:	9304      	str	r3, [sp, #16]
 8013a96:	7839      	ldrb	r1, [r7, #0]
 8013a98:	4827      	ldr	r0, [pc, #156]	; (8013b38 <_svfiprintf_r+0x1e4>)
 8013a9a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013a9e:	2206      	movs	r2, #6
 8013aa0:	1c7e      	adds	r6, r7, #1
 8013aa2:	f7ec fbc5 	bl	8000230 <memchr>
 8013aa6:	2800      	cmp	r0, #0
 8013aa8:	d038      	beq.n	8013b1c <_svfiprintf_r+0x1c8>
 8013aaa:	4b24      	ldr	r3, [pc, #144]	; (8013b3c <_svfiprintf_r+0x1e8>)
 8013aac:	bb13      	cbnz	r3, 8013af4 <_svfiprintf_r+0x1a0>
 8013aae:	9b03      	ldr	r3, [sp, #12]
 8013ab0:	3307      	adds	r3, #7
 8013ab2:	f023 0307 	bic.w	r3, r3, #7
 8013ab6:	3308      	adds	r3, #8
 8013ab8:	9303      	str	r3, [sp, #12]
 8013aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013abc:	444b      	add	r3, r9
 8013abe:	9309      	str	r3, [sp, #36]	; 0x24
 8013ac0:	e76d      	b.n	801399e <_svfiprintf_r+0x4a>
 8013ac2:	fb05 3202 	mla	r2, r5, r2, r3
 8013ac6:	2001      	movs	r0, #1
 8013ac8:	460f      	mov	r7, r1
 8013aca:	e7a6      	b.n	8013a1a <_svfiprintf_r+0xc6>
 8013acc:	2300      	movs	r3, #0
 8013ace:	3701      	adds	r7, #1
 8013ad0:	9305      	str	r3, [sp, #20]
 8013ad2:	4619      	mov	r1, r3
 8013ad4:	250a      	movs	r5, #10
 8013ad6:	4638      	mov	r0, r7
 8013ad8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013adc:	3a30      	subs	r2, #48	; 0x30
 8013ade:	2a09      	cmp	r2, #9
 8013ae0:	d903      	bls.n	8013aea <_svfiprintf_r+0x196>
 8013ae2:	2b00      	cmp	r3, #0
 8013ae4:	d0c8      	beq.n	8013a78 <_svfiprintf_r+0x124>
 8013ae6:	9105      	str	r1, [sp, #20]
 8013ae8:	e7c6      	b.n	8013a78 <_svfiprintf_r+0x124>
 8013aea:	fb05 2101 	mla	r1, r5, r1, r2
 8013aee:	2301      	movs	r3, #1
 8013af0:	4607      	mov	r7, r0
 8013af2:	e7f0      	b.n	8013ad6 <_svfiprintf_r+0x182>
 8013af4:	ab03      	add	r3, sp, #12
 8013af6:	9300      	str	r3, [sp, #0]
 8013af8:	4622      	mov	r2, r4
 8013afa:	4b11      	ldr	r3, [pc, #68]	; (8013b40 <_svfiprintf_r+0x1ec>)
 8013afc:	a904      	add	r1, sp, #16
 8013afe:	4640      	mov	r0, r8
 8013b00:	f7fd fdb0 	bl	8011664 <_printf_float>
 8013b04:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8013b08:	4681      	mov	r9, r0
 8013b0a:	d1d6      	bne.n	8013aba <_svfiprintf_r+0x166>
 8013b0c:	89a3      	ldrh	r3, [r4, #12]
 8013b0e:	065b      	lsls	r3, r3, #25
 8013b10:	f53f af35 	bmi.w	801397e <_svfiprintf_r+0x2a>
 8013b14:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013b16:	b01d      	add	sp, #116	; 0x74
 8013b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b1c:	ab03      	add	r3, sp, #12
 8013b1e:	9300      	str	r3, [sp, #0]
 8013b20:	4622      	mov	r2, r4
 8013b22:	4b07      	ldr	r3, [pc, #28]	; (8013b40 <_svfiprintf_r+0x1ec>)
 8013b24:	a904      	add	r1, sp, #16
 8013b26:	4640      	mov	r0, r8
 8013b28:	f7fe f852 	bl	8011bd0 <_printf_i>
 8013b2c:	e7ea      	b.n	8013b04 <_svfiprintf_r+0x1b0>
 8013b2e:	bf00      	nop
 8013b30:	080168fc 	.word	0x080168fc
 8013b34:	08016902 	.word	0x08016902
 8013b38:	08016906 	.word	0x08016906
 8013b3c:	08011665 	.word	0x08011665
 8013b40:	080138a1 	.word	0x080138a1

08013b44 <__sfputc_r>:
 8013b44:	6893      	ldr	r3, [r2, #8]
 8013b46:	3b01      	subs	r3, #1
 8013b48:	2b00      	cmp	r3, #0
 8013b4a:	b410      	push	{r4}
 8013b4c:	6093      	str	r3, [r2, #8]
 8013b4e:	da08      	bge.n	8013b62 <__sfputc_r+0x1e>
 8013b50:	6994      	ldr	r4, [r2, #24]
 8013b52:	42a3      	cmp	r3, r4
 8013b54:	db01      	blt.n	8013b5a <__sfputc_r+0x16>
 8013b56:	290a      	cmp	r1, #10
 8013b58:	d103      	bne.n	8013b62 <__sfputc_r+0x1e>
 8013b5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b5e:	f7fe ba09 	b.w	8011f74 <__swbuf_r>
 8013b62:	6813      	ldr	r3, [r2, #0]
 8013b64:	1c58      	adds	r0, r3, #1
 8013b66:	6010      	str	r0, [r2, #0]
 8013b68:	7019      	strb	r1, [r3, #0]
 8013b6a:	4608      	mov	r0, r1
 8013b6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013b70:	4770      	bx	lr

08013b72 <__sfputs_r>:
 8013b72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013b74:	4606      	mov	r6, r0
 8013b76:	460f      	mov	r7, r1
 8013b78:	4614      	mov	r4, r2
 8013b7a:	18d5      	adds	r5, r2, r3
 8013b7c:	42ac      	cmp	r4, r5
 8013b7e:	d101      	bne.n	8013b84 <__sfputs_r+0x12>
 8013b80:	2000      	movs	r0, #0
 8013b82:	e007      	b.n	8013b94 <__sfputs_r+0x22>
 8013b84:	463a      	mov	r2, r7
 8013b86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b8a:	4630      	mov	r0, r6
 8013b8c:	f7ff ffda 	bl	8013b44 <__sfputc_r>
 8013b90:	1c43      	adds	r3, r0, #1
 8013b92:	d1f3      	bne.n	8013b7c <__sfputs_r+0xa>
 8013b94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08013b98 <_vfiprintf_r>:
 8013b98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b9c:	460c      	mov	r4, r1
 8013b9e:	b09d      	sub	sp, #116	; 0x74
 8013ba0:	4617      	mov	r7, r2
 8013ba2:	461d      	mov	r5, r3
 8013ba4:	4606      	mov	r6, r0
 8013ba6:	b118      	cbz	r0, 8013bb0 <_vfiprintf_r+0x18>
 8013ba8:	6983      	ldr	r3, [r0, #24]
 8013baa:	b90b      	cbnz	r3, 8013bb0 <_vfiprintf_r+0x18>
 8013bac:	f7ff f9d8 	bl	8012f60 <__sinit>
 8013bb0:	4b7c      	ldr	r3, [pc, #496]	; (8013da4 <_vfiprintf_r+0x20c>)
 8013bb2:	429c      	cmp	r4, r3
 8013bb4:	d158      	bne.n	8013c68 <_vfiprintf_r+0xd0>
 8013bb6:	6874      	ldr	r4, [r6, #4]
 8013bb8:	89a3      	ldrh	r3, [r4, #12]
 8013bba:	0718      	lsls	r0, r3, #28
 8013bbc:	d55e      	bpl.n	8013c7c <_vfiprintf_r+0xe4>
 8013bbe:	6923      	ldr	r3, [r4, #16]
 8013bc0:	2b00      	cmp	r3, #0
 8013bc2:	d05b      	beq.n	8013c7c <_vfiprintf_r+0xe4>
 8013bc4:	2300      	movs	r3, #0
 8013bc6:	9309      	str	r3, [sp, #36]	; 0x24
 8013bc8:	2320      	movs	r3, #32
 8013bca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013bce:	2330      	movs	r3, #48	; 0x30
 8013bd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013bd4:	9503      	str	r5, [sp, #12]
 8013bd6:	f04f 0b01 	mov.w	fp, #1
 8013bda:	46b8      	mov	r8, r7
 8013bdc:	4645      	mov	r5, r8
 8013bde:	f815 3b01 	ldrb.w	r3, [r5], #1
 8013be2:	b10b      	cbz	r3, 8013be8 <_vfiprintf_r+0x50>
 8013be4:	2b25      	cmp	r3, #37	; 0x25
 8013be6:	d154      	bne.n	8013c92 <_vfiprintf_r+0xfa>
 8013be8:	ebb8 0a07 	subs.w	sl, r8, r7
 8013bec:	d00b      	beq.n	8013c06 <_vfiprintf_r+0x6e>
 8013bee:	4653      	mov	r3, sl
 8013bf0:	463a      	mov	r2, r7
 8013bf2:	4621      	mov	r1, r4
 8013bf4:	4630      	mov	r0, r6
 8013bf6:	f7ff ffbc 	bl	8013b72 <__sfputs_r>
 8013bfa:	3001      	adds	r0, #1
 8013bfc:	f000 80c2 	beq.w	8013d84 <_vfiprintf_r+0x1ec>
 8013c00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013c02:	4453      	add	r3, sl
 8013c04:	9309      	str	r3, [sp, #36]	; 0x24
 8013c06:	f898 3000 	ldrb.w	r3, [r8]
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	f000 80ba 	beq.w	8013d84 <_vfiprintf_r+0x1ec>
 8013c10:	2300      	movs	r3, #0
 8013c12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013c16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013c1a:	9304      	str	r3, [sp, #16]
 8013c1c:	9307      	str	r3, [sp, #28]
 8013c1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013c22:	931a      	str	r3, [sp, #104]	; 0x68
 8013c24:	46a8      	mov	r8, r5
 8013c26:	2205      	movs	r2, #5
 8013c28:	f818 1b01 	ldrb.w	r1, [r8], #1
 8013c2c:	485e      	ldr	r0, [pc, #376]	; (8013da8 <_vfiprintf_r+0x210>)
 8013c2e:	f7ec faff 	bl	8000230 <memchr>
 8013c32:	9b04      	ldr	r3, [sp, #16]
 8013c34:	bb78      	cbnz	r0, 8013c96 <_vfiprintf_r+0xfe>
 8013c36:	06d9      	lsls	r1, r3, #27
 8013c38:	bf44      	itt	mi
 8013c3a:	2220      	movmi	r2, #32
 8013c3c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013c40:	071a      	lsls	r2, r3, #28
 8013c42:	bf44      	itt	mi
 8013c44:	222b      	movmi	r2, #43	; 0x2b
 8013c46:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8013c4a:	782a      	ldrb	r2, [r5, #0]
 8013c4c:	2a2a      	cmp	r2, #42	; 0x2a
 8013c4e:	d02a      	beq.n	8013ca6 <_vfiprintf_r+0x10e>
 8013c50:	9a07      	ldr	r2, [sp, #28]
 8013c52:	46a8      	mov	r8, r5
 8013c54:	2000      	movs	r0, #0
 8013c56:	250a      	movs	r5, #10
 8013c58:	4641      	mov	r1, r8
 8013c5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013c5e:	3b30      	subs	r3, #48	; 0x30
 8013c60:	2b09      	cmp	r3, #9
 8013c62:	d969      	bls.n	8013d38 <_vfiprintf_r+0x1a0>
 8013c64:	b360      	cbz	r0, 8013cc0 <_vfiprintf_r+0x128>
 8013c66:	e024      	b.n	8013cb2 <_vfiprintf_r+0x11a>
 8013c68:	4b50      	ldr	r3, [pc, #320]	; (8013dac <_vfiprintf_r+0x214>)
 8013c6a:	429c      	cmp	r4, r3
 8013c6c:	d101      	bne.n	8013c72 <_vfiprintf_r+0xda>
 8013c6e:	68b4      	ldr	r4, [r6, #8]
 8013c70:	e7a2      	b.n	8013bb8 <_vfiprintf_r+0x20>
 8013c72:	4b4f      	ldr	r3, [pc, #316]	; (8013db0 <_vfiprintf_r+0x218>)
 8013c74:	429c      	cmp	r4, r3
 8013c76:	bf08      	it	eq
 8013c78:	68f4      	ldreq	r4, [r6, #12]
 8013c7a:	e79d      	b.n	8013bb8 <_vfiprintf_r+0x20>
 8013c7c:	4621      	mov	r1, r4
 8013c7e:	4630      	mov	r0, r6
 8013c80:	f7fe f9ca 	bl	8012018 <__swsetup_r>
 8013c84:	2800      	cmp	r0, #0
 8013c86:	d09d      	beq.n	8013bc4 <_vfiprintf_r+0x2c>
 8013c88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013c8c:	b01d      	add	sp, #116	; 0x74
 8013c8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013c92:	46a8      	mov	r8, r5
 8013c94:	e7a2      	b.n	8013bdc <_vfiprintf_r+0x44>
 8013c96:	4a44      	ldr	r2, [pc, #272]	; (8013da8 <_vfiprintf_r+0x210>)
 8013c98:	1a80      	subs	r0, r0, r2
 8013c9a:	fa0b f000 	lsl.w	r0, fp, r0
 8013c9e:	4318      	orrs	r0, r3
 8013ca0:	9004      	str	r0, [sp, #16]
 8013ca2:	4645      	mov	r5, r8
 8013ca4:	e7be      	b.n	8013c24 <_vfiprintf_r+0x8c>
 8013ca6:	9a03      	ldr	r2, [sp, #12]
 8013ca8:	1d11      	adds	r1, r2, #4
 8013caa:	6812      	ldr	r2, [r2, #0]
 8013cac:	9103      	str	r1, [sp, #12]
 8013cae:	2a00      	cmp	r2, #0
 8013cb0:	db01      	blt.n	8013cb6 <_vfiprintf_r+0x11e>
 8013cb2:	9207      	str	r2, [sp, #28]
 8013cb4:	e004      	b.n	8013cc0 <_vfiprintf_r+0x128>
 8013cb6:	4252      	negs	r2, r2
 8013cb8:	f043 0302 	orr.w	r3, r3, #2
 8013cbc:	9207      	str	r2, [sp, #28]
 8013cbe:	9304      	str	r3, [sp, #16]
 8013cc0:	f898 3000 	ldrb.w	r3, [r8]
 8013cc4:	2b2e      	cmp	r3, #46	; 0x2e
 8013cc6:	d10e      	bne.n	8013ce6 <_vfiprintf_r+0x14e>
 8013cc8:	f898 3001 	ldrb.w	r3, [r8, #1]
 8013ccc:	2b2a      	cmp	r3, #42	; 0x2a
 8013cce:	d138      	bne.n	8013d42 <_vfiprintf_r+0x1aa>
 8013cd0:	9b03      	ldr	r3, [sp, #12]
 8013cd2:	1d1a      	adds	r2, r3, #4
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	9203      	str	r2, [sp, #12]
 8013cd8:	2b00      	cmp	r3, #0
 8013cda:	bfb8      	it	lt
 8013cdc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013ce0:	f108 0802 	add.w	r8, r8, #2
 8013ce4:	9305      	str	r3, [sp, #20]
 8013ce6:	4d33      	ldr	r5, [pc, #204]	; (8013db4 <_vfiprintf_r+0x21c>)
 8013ce8:	f898 1000 	ldrb.w	r1, [r8]
 8013cec:	2203      	movs	r2, #3
 8013cee:	4628      	mov	r0, r5
 8013cf0:	f7ec fa9e 	bl	8000230 <memchr>
 8013cf4:	b140      	cbz	r0, 8013d08 <_vfiprintf_r+0x170>
 8013cf6:	2340      	movs	r3, #64	; 0x40
 8013cf8:	1b40      	subs	r0, r0, r5
 8013cfa:	fa03 f000 	lsl.w	r0, r3, r0
 8013cfe:	9b04      	ldr	r3, [sp, #16]
 8013d00:	4303      	orrs	r3, r0
 8013d02:	f108 0801 	add.w	r8, r8, #1
 8013d06:	9304      	str	r3, [sp, #16]
 8013d08:	f898 1000 	ldrb.w	r1, [r8]
 8013d0c:	482a      	ldr	r0, [pc, #168]	; (8013db8 <_vfiprintf_r+0x220>)
 8013d0e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013d12:	2206      	movs	r2, #6
 8013d14:	f108 0701 	add.w	r7, r8, #1
 8013d18:	f7ec fa8a 	bl	8000230 <memchr>
 8013d1c:	2800      	cmp	r0, #0
 8013d1e:	d037      	beq.n	8013d90 <_vfiprintf_r+0x1f8>
 8013d20:	4b26      	ldr	r3, [pc, #152]	; (8013dbc <_vfiprintf_r+0x224>)
 8013d22:	bb1b      	cbnz	r3, 8013d6c <_vfiprintf_r+0x1d4>
 8013d24:	9b03      	ldr	r3, [sp, #12]
 8013d26:	3307      	adds	r3, #7
 8013d28:	f023 0307 	bic.w	r3, r3, #7
 8013d2c:	3308      	adds	r3, #8
 8013d2e:	9303      	str	r3, [sp, #12]
 8013d30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013d32:	444b      	add	r3, r9
 8013d34:	9309      	str	r3, [sp, #36]	; 0x24
 8013d36:	e750      	b.n	8013bda <_vfiprintf_r+0x42>
 8013d38:	fb05 3202 	mla	r2, r5, r2, r3
 8013d3c:	2001      	movs	r0, #1
 8013d3e:	4688      	mov	r8, r1
 8013d40:	e78a      	b.n	8013c58 <_vfiprintf_r+0xc0>
 8013d42:	2300      	movs	r3, #0
 8013d44:	f108 0801 	add.w	r8, r8, #1
 8013d48:	9305      	str	r3, [sp, #20]
 8013d4a:	4619      	mov	r1, r3
 8013d4c:	250a      	movs	r5, #10
 8013d4e:	4640      	mov	r0, r8
 8013d50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013d54:	3a30      	subs	r2, #48	; 0x30
 8013d56:	2a09      	cmp	r2, #9
 8013d58:	d903      	bls.n	8013d62 <_vfiprintf_r+0x1ca>
 8013d5a:	2b00      	cmp	r3, #0
 8013d5c:	d0c3      	beq.n	8013ce6 <_vfiprintf_r+0x14e>
 8013d5e:	9105      	str	r1, [sp, #20]
 8013d60:	e7c1      	b.n	8013ce6 <_vfiprintf_r+0x14e>
 8013d62:	fb05 2101 	mla	r1, r5, r1, r2
 8013d66:	2301      	movs	r3, #1
 8013d68:	4680      	mov	r8, r0
 8013d6a:	e7f0      	b.n	8013d4e <_vfiprintf_r+0x1b6>
 8013d6c:	ab03      	add	r3, sp, #12
 8013d6e:	9300      	str	r3, [sp, #0]
 8013d70:	4622      	mov	r2, r4
 8013d72:	4b13      	ldr	r3, [pc, #76]	; (8013dc0 <_vfiprintf_r+0x228>)
 8013d74:	a904      	add	r1, sp, #16
 8013d76:	4630      	mov	r0, r6
 8013d78:	f7fd fc74 	bl	8011664 <_printf_float>
 8013d7c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8013d80:	4681      	mov	r9, r0
 8013d82:	d1d5      	bne.n	8013d30 <_vfiprintf_r+0x198>
 8013d84:	89a3      	ldrh	r3, [r4, #12]
 8013d86:	065b      	lsls	r3, r3, #25
 8013d88:	f53f af7e 	bmi.w	8013c88 <_vfiprintf_r+0xf0>
 8013d8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013d8e:	e77d      	b.n	8013c8c <_vfiprintf_r+0xf4>
 8013d90:	ab03      	add	r3, sp, #12
 8013d92:	9300      	str	r3, [sp, #0]
 8013d94:	4622      	mov	r2, r4
 8013d96:	4b0a      	ldr	r3, [pc, #40]	; (8013dc0 <_vfiprintf_r+0x228>)
 8013d98:	a904      	add	r1, sp, #16
 8013d9a:	4630      	mov	r0, r6
 8013d9c:	f7fd ff18 	bl	8011bd0 <_printf_i>
 8013da0:	e7ec      	b.n	8013d7c <_vfiprintf_r+0x1e4>
 8013da2:	bf00      	nop
 8013da4:	080167bc 	.word	0x080167bc
 8013da8:	080168fc 	.word	0x080168fc
 8013dac:	080167dc 	.word	0x080167dc
 8013db0:	0801679c 	.word	0x0801679c
 8013db4:	08016902 	.word	0x08016902
 8013db8:	08016906 	.word	0x08016906
 8013dbc:	08011665 	.word	0x08011665
 8013dc0:	08013b73 	.word	0x08013b73

08013dc4 <_sbrk_r>:
 8013dc4:	b538      	push	{r3, r4, r5, lr}
 8013dc6:	4c06      	ldr	r4, [pc, #24]	; (8013de0 <_sbrk_r+0x1c>)
 8013dc8:	2300      	movs	r3, #0
 8013dca:	4605      	mov	r5, r0
 8013dcc:	4608      	mov	r0, r1
 8013dce:	6023      	str	r3, [r4, #0]
 8013dd0:	f7f4 fafc 	bl	80083cc <_sbrk>
 8013dd4:	1c43      	adds	r3, r0, #1
 8013dd6:	d102      	bne.n	8013dde <_sbrk_r+0x1a>
 8013dd8:	6823      	ldr	r3, [r4, #0]
 8013dda:	b103      	cbz	r3, 8013dde <_sbrk_r+0x1a>
 8013ddc:	602b      	str	r3, [r5, #0]
 8013dde:	bd38      	pop	{r3, r4, r5, pc}
 8013de0:	20002dbc 	.word	0x20002dbc

08013de4 <__sread>:
 8013de4:	b510      	push	{r4, lr}
 8013de6:	460c      	mov	r4, r1
 8013de8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013dec:	f000 f8e8 	bl	8013fc0 <_read_r>
 8013df0:	2800      	cmp	r0, #0
 8013df2:	bfab      	itete	ge
 8013df4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013df6:	89a3      	ldrhlt	r3, [r4, #12]
 8013df8:	181b      	addge	r3, r3, r0
 8013dfa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8013dfe:	bfac      	ite	ge
 8013e00:	6563      	strge	r3, [r4, #84]	; 0x54
 8013e02:	81a3      	strhlt	r3, [r4, #12]
 8013e04:	bd10      	pop	{r4, pc}

08013e06 <__swrite>:
 8013e06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013e0a:	461f      	mov	r7, r3
 8013e0c:	898b      	ldrh	r3, [r1, #12]
 8013e0e:	05db      	lsls	r3, r3, #23
 8013e10:	4605      	mov	r5, r0
 8013e12:	460c      	mov	r4, r1
 8013e14:	4616      	mov	r6, r2
 8013e16:	d505      	bpl.n	8013e24 <__swrite+0x1e>
 8013e18:	2302      	movs	r3, #2
 8013e1a:	2200      	movs	r2, #0
 8013e1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e20:	f000 f868 	bl	8013ef4 <_lseek_r>
 8013e24:	89a3      	ldrh	r3, [r4, #12]
 8013e26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8013e2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8013e2e:	81a3      	strh	r3, [r4, #12]
 8013e30:	4632      	mov	r2, r6
 8013e32:	463b      	mov	r3, r7
 8013e34:	4628      	mov	r0, r5
 8013e36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8013e3a:	f000 b817 	b.w	8013e6c <_write_r>

08013e3e <__sseek>:
 8013e3e:	b510      	push	{r4, lr}
 8013e40:	460c      	mov	r4, r1
 8013e42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e46:	f000 f855 	bl	8013ef4 <_lseek_r>
 8013e4a:	1c43      	adds	r3, r0, #1
 8013e4c:	89a3      	ldrh	r3, [r4, #12]
 8013e4e:	bf15      	itete	ne
 8013e50:	6560      	strne	r0, [r4, #84]	; 0x54
 8013e52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013e56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8013e5a:	81a3      	strheq	r3, [r4, #12]
 8013e5c:	bf18      	it	ne
 8013e5e:	81a3      	strhne	r3, [r4, #12]
 8013e60:	bd10      	pop	{r4, pc}

08013e62 <__sclose>:
 8013e62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013e66:	f000 b813 	b.w	8013e90 <_close_r>
	...

08013e6c <_write_r>:
 8013e6c:	b538      	push	{r3, r4, r5, lr}
 8013e6e:	4c07      	ldr	r4, [pc, #28]	; (8013e8c <_write_r+0x20>)
 8013e70:	4605      	mov	r5, r0
 8013e72:	4608      	mov	r0, r1
 8013e74:	4611      	mov	r1, r2
 8013e76:	2200      	movs	r2, #0
 8013e78:	6022      	str	r2, [r4, #0]
 8013e7a:	461a      	mov	r2, r3
 8013e7c:	f7f3 ff57 	bl	8007d2e <_write>
 8013e80:	1c43      	adds	r3, r0, #1
 8013e82:	d102      	bne.n	8013e8a <_write_r+0x1e>
 8013e84:	6823      	ldr	r3, [r4, #0]
 8013e86:	b103      	cbz	r3, 8013e8a <_write_r+0x1e>
 8013e88:	602b      	str	r3, [r5, #0]
 8013e8a:	bd38      	pop	{r3, r4, r5, pc}
 8013e8c:	20002dbc 	.word	0x20002dbc

08013e90 <_close_r>:
 8013e90:	b538      	push	{r3, r4, r5, lr}
 8013e92:	4c06      	ldr	r4, [pc, #24]	; (8013eac <_close_r+0x1c>)
 8013e94:	2300      	movs	r3, #0
 8013e96:	4605      	mov	r5, r0
 8013e98:	4608      	mov	r0, r1
 8013e9a:	6023      	str	r3, [r4, #0]
 8013e9c:	f7f4 fa61 	bl	8008362 <_close>
 8013ea0:	1c43      	adds	r3, r0, #1
 8013ea2:	d102      	bne.n	8013eaa <_close_r+0x1a>
 8013ea4:	6823      	ldr	r3, [r4, #0]
 8013ea6:	b103      	cbz	r3, 8013eaa <_close_r+0x1a>
 8013ea8:	602b      	str	r3, [r5, #0]
 8013eaa:	bd38      	pop	{r3, r4, r5, pc}
 8013eac:	20002dbc 	.word	0x20002dbc

08013eb0 <_fstat_r>:
 8013eb0:	b538      	push	{r3, r4, r5, lr}
 8013eb2:	4c07      	ldr	r4, [pc, #28]	; (8013ed0 <_fstat_r+0x20>)
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	4605      	mov	r5, r0
 8013eb8:	4608      	mov	r0, r1
 8013eba:	4611      	mov	r1, r2
 8013ebc:	6023      	str	r3, [r4, #0]
 8013ebe:	f7f4 fa5c 	bl	800837a <_fstat>
 8013ec2:	1c43      	adds	r3, r0, #1
 8013ec4:	d102      	bne.n	8013ecc <_fstat_r+0x1c>
 8013ec6:	6823      	ldr	r3, [r4, #0]
 8013ec8:	b103      	cbz	r3, 8013ecc <_fstat_r+0x1c>
 8013eca:	602b      	str	r3, [r5, #0]
 8013ecc:	bd38      	pop	{r3, r4, r5, pc}
 8013ece:	bf00      	nop
 8013ed0:	20002dbc 	.word	0x20002dbc

08013ed4 <_isatty_r>:
 8013ed4:	b538      	push	{r3, r4, r5, lr}
 8013ed6:	4c06      	ldr	r4, [pc, #24]	; (8013ef0 <_isatty_r+0x1c>)
 8013ed8:	2300      	movs	r3, #0
 8013eda:	4605      	mov	r5, r0
 8013edc:	4608      	mov	r0, r1
 8013ede:	6023      	str	r3, [r4, #0]
 8013ee0:	f7f4 fa5b 	bl	800839a <_isatty>
 8013ee4:	1c43      	adds	r3, r0, #1
 8013ee6:	d102      	bne.n	8013eee <_isatty_r+0x1a>
 8013ee8:	6823      	ldr	r3, [r4, #0]
 8013eea:	b103      	cbz	r3, 8013eee <_isatty_r+0x1a>
 8013eec:	602b      	str	r3, [r5, #0]
 8013eee:	bd38      	pop	{r3, r4, r5, pc}
 8013ef0:	20002dbc 	.word	0x20002dbc

08013ef4 <_lseek_r>:
 8013ef4:	b538      	push	{r3, r4, r5, lr}
 8013ef6:	4c07      	ldr	r4, [pc, #28]	; (8013f14 <_lseek_r+0x20>)
 8013ef8:	4605      	mov	r5, r0
 8013efa:	4608      	mov	r0, r1
 8013efc:	4611      	mov	r1, r2
 8013efe:	2200      	movs	r2, #0
 8013f00:	6022      	str	r2, [r4, #0]
 8013f02:	461a      	mov	r2, r3
 8013f04:	f7f4 fa54 	bl	80083b0 <_lseek>
 8013f08:	1c43      	adds	r3, r0, #1
 8013f0a:	d102      	bne.n	8013f12 <_lseek_r+0x1e>
 8013f0c:	6823      	ldr	r3, [r4, #0]
 8013f0e:	b103      	cbz	r3, 8013f12 <_lseek_r+0x1e>
 8013f10:	602b      	str	r3, [r5, #0]
 8013f12:	bd38      	pop	{r3, r4, r5, pc}
 8013f14:	20002dbc 	.word	0x20002dbc

08013f18 <__ascii_mbtowc>:
 8013f18:	b082      	sub	sp, #8
 8013f1a:	b901      	cbnz	r1, 8013f1e <__ascii_mbtowc+0x6>
 8013f1c:	a901      	add	r1, sp, #4
 8013f1e:	b142      	cbz	r2, 8013f32 <__ascii_mbtowc+0x1a>
 8013f20:	b14b      	cbz	r3, 8013f36 <__ascii_mbtowc+0x1e>
 8013f22:	7813      	ldrb	r3, [r2, #0]
 8013f24:	600b      	str	r3, [r1, #0]
 8013f26:	7812      	ldrb	r2, [r2, #0]
 8013f28:	1c10      	adds	r0, r2, #0
 8013f2a:	bf18      	it	ne
 8013f2c:	2001      	movne	r0, #1
 8013f2e:	b002      	add	sp, #8
 8013f30:	4770      	bx	lr
 8013f32:	4610      	mov	r0, r2
 8013f34:	e7fb      	b.n	8013f2e <__ascii_mbtowc+0x16>
 8013f36:	f06f 0001 	mvn.w	r0, #1
 8013f3a:	e7f8      	b.n	8013f2e <__ascii_mbtowc+0x16>

08013f3c <memmove>:
 8013f3c:	4288      	cmp	r0, r1
 8013f3e:	b510      	push	{r4, lr}
 8013f40:	eb01 0302 	add.w	r3, r1, r2
 8013f44:	d807      	bhi.n	8013f56 <memmove+0x1a>
 8013f46:	1e42      	subs	r2, r0, #1
 8013f48:	4299      	cmp	r1, r3
 8013f4a:	d00a      	beq.n	8013f62 <memmove+0x26>
 8013f4c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013f50:	f802 4f01 	strb.w	r4, [r2, #1]!
 8013f54:	e7f8      	b.n	8013f48 <memmove+0xc>
 8013f56:	4283      	cmp	r3, r0
 8013f58:	d9f5      	bls.n	8013f46 <memmove+0xa>
 8013f5a:	1881      	adds	r1, r0, r2
 8013f5c:	1ad2      	subs	r2, r2, r3
 8013f5e:	42d3      	cmn	r3, r2
 8013f60:	d100      	bne.n	8013f64 <memmove+0x28>
 8013f62:	bd10      	pop	{r4, pc}
 8013f64:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8013f68:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8013f6c:	e7f7      	b.n	8013f5e <memmove+0x22>

08013f6e <__malloc_lock>:
 8013f6e:	4770      	bx	lr

08013f70 <__malloc_unlock>:
 8013f70:	4770      	bx	lr

08013f72 <_realloc_r>:
 8013f72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f74:	4607      	mov	r7, r0
 8013f76:	4614      	mov	r4, r2
 8013f78:	460e      	mov	r6, r1
 8013f7a:	b921      	cbnz	r1, 8013f86 <_realloc_r+0x14>
 8013f7c:	4611      	mov	r1, r2
 8013f7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8013f82:	f7ff bc33 	b.w	80137ec <_malloc_r>
 8013f86:	b922      	cbnz	r2, 8013f92 <_realloc_r+0x20>
 8013f88:	f7ff fbe2 	bl	8013750 <_free_r>
 8013f8c:	4625      	mov	r5, r4
 8013f8e:	4628      	mov	r0, r5
 8013f90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013f92:	f000 f834 	bl	8013ffe <_malloc_usable_size_r>
 8013f96:	42a0      	cmp	r0, r4
 8013f98:	d20f      	bcs.n	8013fba <_realloc_r+0x48>
 8013f9a:	4621      	mov	r1, r4
 8013f9c:	4638      	mov	r0, r7
 8013f9e:	f7ff fc25 	bl	80137ec <_malloc_r>
 8013fa2:	4605      	mov	r5, r0
 8013fa4:	2800      	cmp	r0, #0
 8013fa6:	d0f2      	beq.n	8013f8e <_realloc_r+0x1c>
 8013fa8:	4631      	mov	r1, r6
 8013faa:	4622      	mov	r2, r4
 8013fac:	f7ff f8dc 	bl	8013168 <memcpy>
 8013fb0:	4631      	mov	r1, r6
 8013fb2:	4638      	mov	r0, r7
 8013fb4:	f7ff fbcc 	bl	8013750 <_free_r>
 8013fb8:	e7e9      	b.n	8013f8e <_realloc_r+0x1c>
 8013fba:	4635      	mov	r5, r6
 8013fbc:	e7e7      	b.n	8013f8e <_realloc_r+0x1c>
	...

08013fc0 <_read_r>:
 8013fc0:	b538      	push	{r3, r4, r5, lr}
 8013fc2:	4c07      	ldr	r4, [pc, #28]	; (8013fe0 <_read_r+0x20>)
 8013fc4:	4605      	mov	r5, r0
 8013fc6:	4608      	mov	r0, r1
 8013fc8:	4611      	mov	r1, r2
 8013fca:	2200      	movs	r2, #0
 8013fcc:	6022      	str	r2, [r4, #0]
 8013fce:	461a      	mov	r2, r3
 8013fd0:	f7f4 f9aa 	bl	8008328 <_read>
 8013fd4:	1c43      	adds	r3, r0, #1
 8013fd6:	d102      	bne.n	8013fde <_read_r+0x1e>
 8013fd8:	6823      	ldr	r3, [r4, #0]
 8013fda:	b103      	cbz	r3, 8013fde <_read_r+0x1e>
 8013fdc:	602b      	str	r3, [r5, #0]
 8013fde:	bd38      	pop	{r3, r4, r5, pc}
 8013fe0:	20002dbc 	.word	0x20002dbc

08013fe4 <__ascii_wctomb>:
 8013fe4:	b149      	cbz	r1, 8013ffa <__ascii_wctomb+0x16>
 8013fe6:	2aff      	cmp	r2, #255	; 0xff
 8013fe8:	bf85      	ittet	hi
 8013fea:	238a      	movhi	r3, #138	; 0x8a
 8013fec:	6003      	strhi	r3, [r0, #0]
 8013fee:	700a      	strbls	r2, [r1, #0]
 8013ff0:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8013ff4:	bf98      	it	ls
 8013ff6:	2001      	movls	r0, #1
 8013ff8:	4770      	bx	lr
 8013ffa:	4608      	mov	r0, r1
 8013ffc:	4770      	bx	lr

08013ffe <_malloc_usable_size_r>:
 8013ffe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014002:	1f18      	subs	r0, r3, #4
 8014004:	2b00      	cmp	r3, #0
 8014006:	bfbc      	itt	lt
 8014008:	580b      	ldrlt	r3, [r1, r0]
 801400a:	18c0      	addlt	r0, r0, r3
 801400c:	4770      	bx	lr
	...

08014010 <log10>:
 8014010:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014012:	ed2d 8b02 	vpush	{d8}
 8014016:	b08b      	sub	sp, #44	; 0x2c
 8014018:	ec55 4b10 	vmov	r4, r5, d0
 801401c:	f000 f9e8 	bl	80143f0 <__ieee754_log10>
 8014020:	4b36      	ldr	r3, [pc, #216]	; (80140fc <log10+0xec>)
 8014022:	eeb0 8a40 	vmov.f32	s16, s0
 8014026:	eef0 8a60 	vmov.f32	s17, s1
 801402a:	f993 6000 	ldrsb.w	r6, [r3]
 801402e:	1c73      	adds	r3, r6, #1
 8014030:	d05c      	beq.n	80140ec <log10+0xdc>
 8014032:	4622      	mov	r2, r4
 8014034:	462b      	mov	r3, r5
 8014036:	4620      	mov	r0, r4
 8014038:	4629      	mov	r1, r5
 801403a:	f7ec fd9f 	bl	8000b7c <__aeabi_dcmpun>
 801403e:	4607      	mov	r7, r0
 8014040:	2800      	cmp	r0, #0
 8014042:	d153      	bne.n	80140ec <log10+0xdc>
 8014044:	2200      	movs	r2, #0
 8014046:	2300      	movs	r3, #0
 8014048:	4620      	mov	r0, r4
 801404a:	4629      	mov	r1, r5
 801404c:	f7ec fd78 	bl	8000b40 <__aeabi_dcmple>
 8014050:	2800      	cmp	r0, #0
 8014052:	d04b      	beq.n	80140ec <log10+0xdc>
 8014054:	4b2a      	ldr	r3, [pc, #168]	; (8014100 <log10+0xf0>)
 8014056:	9301      	str	r3, [sp, #4]
 8014058:	9708      	str	r7, [sp, #32]
 801405a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 801405e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8014062:	b9a6      	cbnz	r6, 801408e <log10+0x7e>
 8014064:	4b27      	ldr	r3, [pc, #156]	; (8014104 <log10+0xf4>)
 8014066:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801406a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801406e:	4620      	mov	r0, r4
 8014070:	2200      	movs	r2, #0
 8014072:	2300      	movs	r3, #0
 8014074:	4629      	mov	r1, r5
 8014076:	f7ec fd4f 	bl	8000b18 <__aeabi_dcmpeq>
 801407a:	bb40      	cbnz	r0, 80140ce <log10+0xbe>
 801407c:	2301      	movs	r3, #1
 801407e:	2e02      	cmp	r6, #2
 8014080:	9300      	str	r3, [sp, #0]
 8014082:	d119      	bne.n	80140b8 <log10+0xa8>
 8014084:	f7fd fa28 	bl	80114d8 <__errno>
 8014088:	2321      	movs	r3, #33	; 0x21
 801408a:	6003      	str	r3, [r0, #0]
 801408c:	e019      	b.n	80140c2 <log10+0xb2>
 801408e:	4b1e      	ldr	r3, [pc, #120]	; (8014108 <log10+0xf8>)
 8014090:	2200      	movs	r2, #0
 8014092:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8014096:	4620      	mov	r0, r4
 8014098:	2200      	movs	r2, #0
 801409a:	2300      	movs	r3, #0
 801409c:	4629      	mov	r1, r5
 801409e:	f7ec fd3b 	bl	8000b18 <__aeabi_dcmpeq>
 80140a2:	2800      	cmp	r0, #0
 80140a4:	d0ea      	beq.n	801407c <log10+0x6c>
 80140a6:	2302      	movs	r3, #2
 80140a8:	429e      	cmp	r6, r3
 80140aa:	9300      	str	r3, [sp, #0]
 80140ac:	d111      	bne.n	80140d2 <log10+0xc2>
 80140ae:	f7fd fa13 	bl	80114d8 <__errno>
 80140b2:	2322      	movs	r3, #34	; 0x22
 80140b4:	6003      	str	r3, [r0, #0]
 80140b6:	e011      	b.n	80140dc <log10+0xcc>
 80140b8:	4668      	mov	r0, sp
 80140ba:	f000 fff4 	bl	80150a6 <matherr>
 80140be:	2800      	cmp	r0, #0
 80140c0:	d0e0      	beq.n	8014084 <log10+0x74>
 80140c2:	4812      	ldr	r0, [pc, #72]	; (801410c <log10+0xfc>)
 80140c4:	f000 fff4 	bl	80150b0 <nan>
 80140c8:	ed8d 0b06 	vstr	d0, [sp, #24]
 80140cc:	e006      	b.n	80140dc <log10+0xcc>
 80140ce:	2302      	movs	r3, #2
 80140d0:	9300      	str	r3, [sp, #0]
 80140d2:	4668      	mov	r0, sp
 80140d4:	f000 ffe7 	bl	80150a6 <matherr>
 80140d8:	2800      	cmp	r0, #0
 80140da:	d0e8      	beq.n	80140ae <log10+0x9e>
 80140dc:	9b08      	ldr	r3, [sp, #32]
 80140de:	b11b      	cbz	r3, 80140e8 <log10+0xd8>
 80140e0:	f7fd f9fa 	bl	80114d8 <__errno>
 80140e4:	9b08      	ldr	r3, [sp, #32]
 80140e6:	6003      	str	r3, [r0, #0]
 80140e8:	ed9d 8b06 	vldr	d8, [sp, #24]
 80140ec:	eeb0 0a48 	vmov.f32	s0, s16
 80140f0:	eef0 0a68 	vmov.f32	s1, s17
 80140f4:	b00b      	add	sp, #44	; 0x2c
 80140f6:	ecbd 8b02 	vpop	{d8}
 80140fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80140fc:	20001e04 	.word	0x20001e04
 8014100:	08016a18 	.word	0x08016a18
 8014104:	c7efffff 	.word	0xc7efffff
 8014108:	fff00000 	.word	0xfff00000
 801410c:	08016901 	.word	0x08016901

08014110 <pow>:
 8014110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014114:	ed2d 8b04 	vpush	{d8-d9}
 8014118:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80143ec <pow+0x2dc>
 801411c:	b08d      	sub	sp, #52	; 0x34
 801411e:	ec57 6b10 	vmov	r6, r7, d0
 8014122:	ec55 4b11 	vmov	r4, r5, d1
 8014126:	f000 f9ef 	bl	8014508 <__ieee754_pow>
 801412a:	f999 3000 	ldrsb.w	r3, [r9]
 801412e:	9300      	str	r3, [sp, #0]
 8014130:	3301      	adds	r3, #1
 8014132:	eeb0 8a40 	vmov.f32	s16, s0
 8014136:	eef0 8a60 	vmov.f32	s17, s1
 801413a:	46c8      	mov	r8, r9
 801413c:	d05f      	beq.n	80141fe <pow+0xee>
 801413e:	4622      	mov	r2, r4
 8014140:	462b      	mov	r3, r5
 8014142:	4620      	mov	r0, r4
 8014144:	4629      	mov	r1, r5
 8014146:	f7ec fd19 	bl	8000b7c <__aeabi_dcmpun>
 801414a:	4683      	mov	fp, r0
 801414c:	2800      	cmp	r0, #0
 801414e:	d156      	bne.n	80141fe <pow+0xee>
 8014150:	4632      	mov	r2, r6
 8014152:	463b      	mov	r3, r7
 8014154:	4630      	mov	r0, r6
 8014156:	4639      	mov	r1, r7
 8014158:	f7ec fd10 	bl	8000b7c <__aeabi_dcmpun>
 801415c:	9001      	str	r0, [sp, #4]
 801415e:	b1e8      	cbz	r0, 801419c <pow+0x8c>
 8014160:	2200      	movs	r2, #0
 8014162:	2300      	movs	r3, #0
 8014164:	4620      	mov	r0, r4
 8014166:	4629      	mov	r1, r5
 8014168:	f7ec fcd6 	bl	8000b18 <__aeabi_dcmpeq>
 801416c:	2800      	cmp	r0, #0
 801416e:	d046      	beq.n	80141fe <pow+0xee>
 8014170:	2301      	movs	r3, #1
 8014172:	9302      	str	r3, [sp, #8]
 8014174:	4b96      	ldr	r3, [pc, #600]	; (80143d0 <pow+0x2c0>)
 8014176:	9303      	str	r3, [sp, #12]
 8014178:	4b96      	ldr	r3, [pc, #600]	; (80143d4 <pow+0x2c4>)
 801417a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801417e:	2200      	movs	r2, #0
 8014180:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014184:	9b00      	ldr	r3, [sp, #0]
 8014186:	2b02      	cmp	r3, #2
 8014188:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801418c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014190:	d033      	beq.n	80141fa <pow+0xea>
 8014192:	a802      	add	r0, sp, #8
 8014194:	f000 ff87 	bl	80150a6 <matherr>
 8014198:	bb48      	cbnz	r0, 80141ee <pow+0xde>
 801419a:	e05d      	b.n	8014258 <pow+0x148>
 801419c:	f04f 0a00 	mov.w	sl, #0
 80141a0:	f04f 0b00 	mov.w	fp, #0
 80141a4:	4652      	mov	r2, sl
 80141a6:	465b      	mov	r3, fp
 80141a8:	4630      	mov	r0, r6
 80141aa:	4639      	mov	r1, r7
 80141ac:	f7ec fcb4 	bl	8000b18 <__aeabi_dcmpeq>
 80141b0:	ec4b ab19 	vmov	d9, sl, fp
 80141b4:	2800      	cmp	r0, #0
 80141b6:	d054      	beq.n	8014262 <pow+0x152>
 80141b8:	4652      	mov	r2, sl
 80141ba:	465b      	mov	r3, fp
 80141bc:	4620      	mov	r0, r4
 80141be:	4629      	mov	r1, r5
 80141c0:	f7ec fcaa 	bl	8000b18 <__aeabi_dcmpeq>
 80141c4:	4680      	mov	r8, r0
 80141c6:	b318      	cbz	r0, 8014210 <pow+0x100>
 80141c8:	2301      	movs	r3, #1
 80141ca:	9302      	str	r3, [sp, #8]
 80141cc:	4b80      	ldr	r3, [pc, #512]	; (80143d0 <pow+0x2c0>)
 80141ce:	9303      	str	r3, [sp, #12]
 80141d0:	9b01      	ldr	r3, [sp, #4]
 80141d2:	930a      	str	r3, [sp, #40]	; 0x28
 80141d4:	9b00      	ldr	r3, [sp, #0]
 80141d6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80141da:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80141de:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80141e2:	2b00      	cmp	r3, #0
 80141e4:	d0d5      	beq.n	8014192 <pow+0x82>
 80141e6:	4b7b      	ldr	r3, [pc, #492]	; (80143d4 <pow+0x2c4>)
 80141e8:	2200      	movs	r2, #0
 80141ea:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80141ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141f0:	b11b      	cbz	r3, 80141fa <pow+0xea>
 80141f2:	f7fd f971 	bl	80114d8 <__errno>
 80141f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80141f8:	6003      	str	r3, [r0, #0]
 80141fa:	ed9d 8b08 	vldr	d8, [sp, #32]
 80141fe:	eeb0 0a48 	vmov.f32	s0, s16
 8014202:	eef0 0a68 	vmov.f32	s1, s17
 8014206:	b00d      	add	sp, #52	; 0x34
 8014208:	ecbd 8b04 	vpop	{d8-d9}
 801420c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014210:	ec45 4b10 	vmov	d0, r4, r5
 8014214:	f000 ff3f 	bl	8015096 <finite>
 8014218:	2800      	cmp	r0, #0
 801421a:	d0f0      	beq.n	80141fe <pow+0xee>
 801421c:	4652      	mov	r2, sl
 801421e:	465b      	mov	r3, fp
 8014220:	4620      	mov	r0, r4
 8014222:	4629      	mov	r1, r5
 8014224:	f7ec fc82 	bl	8000b2c <__aeabi_dcmplt>
 8014228:	2800      	cmp	r0, #0
 801422a:	d0e8      	beq.n	80141fe <pow+0xee>
 801422c:	2301      	movs	r3, #1
 801422e:	9302      	str	r3, [sp, #8]
 8014230:	4b67      	ldr	r3, [pc, #412]	; (80143d0 <pow+0x2c0>)
 8014232:	9303      	str	r3, [sp, #12]
 8014234:	f999 3000 	ldrsb.w	r3, [r9]
 8014238:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 801423c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8014240:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8014244:	b913      	cbnz	r3, 801424c <pow+0x13c>
 8014246:	e9cd ab08 	strd	sl, fp, [sp, #32]
 801424a:	e7a2      	b.n	8014192 <pow+0x82>
 801424c:	4962      	ldr	r1, [pc, #392]	; (80143d8 <pow+0x2c8>)
 801424e:	2000      	movs	r0, #0
 8014250:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8014254:	2b02      	cmp	r3, #2
 8014256:	d19c      	bne.n	8014192 <pow+0x82>
 8014258:	f7fd f93e 	bl	80114d8 <__errno>
 801425c:	2321      	movs	r3, #33	; 0x21
 801425e:	6003      	str	r3, [r0, #0]
 8014260:	e7c5      	b.n	80141ee <pow+0xde>
 8014262:	eeb0 0a48 	vmov.f32	s0, s16
 8014266:	eef0 0a68 	vmov.f32	s1, s17
 801426a:	f000 ff14 	bl	8015096 <finite>
 801426e:	9000      	str	r0, [sp, #0]
 8014270:	2800      	cmp	r0, #0
 8014272:	f040 8081 	bne.w	8014378 <pow+0x268>
 8014276:	ec47 6b10 	vmov	d0, r6, r7
 801427a:	f000 ff0c 	bl	8015096 <finite>
 801427e:	2800      	cmp	r0, #0
 8014280:	d07a      	beq.n	8014378 <pow+0x268>
 8014282:	ec45 4b10 	vmov	d0, r4, r5
 8014286:	f000 ff06 	bl	8015096 <finite>
 801428a:	2800      	cmp	r0, #0
 801428c:	d074      	beq.n	8014378 <pow+0x268>
 801428e:	ec53 2b18 	vmov	r2, r3, d8
 8014292:	ee18 0a10 	vmov	r0, s16
 8014296:	4619      	mov	r1, r3
 8014298:	f7ec fc70 	bl	8000b7c <__aeabi_dcmpun>
 801429c:	f999 9000 	ldrsb.w	r9, [r9]
 80142a0:	4b4b      	ldr	r3, [pc, #300]	; (80143d0 <pow+0x2c0>)
 80142a2:	b1b0      	cbz	r0, 80142d2 <pow+0x1c2>
 80142a4:	2201      	movs	r2, #1
 80142a6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80142aa:	9b00      	ldr	r3, [sp, #0]
 80142ac:	930a      	str	r3, [sp, #40]	; 0x28
 80142ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80142b2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80142b6:	f1b9 0f00 	cmp.w	r9, #0
 80142ba:	d0c4      	beq.n	8014246 <pow+0x136>
 80142bc:	4652      	mov	r2, sl
 80142be:	465b      	mov	r3, fp
 80142c0:	4650      	mov	r0, sl
 80142c2:	4659      	mov	r1, fp
 80142c4:	f7ec faea 	bl	800089c <__aeabi_ddiv>
 80142c8:	f1b9 0f02 	cmp.w	r9, #2
 80142cc:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80142d0:	e7c1      	b.n	8014256 <pow+0x146>
 80142d2:	2203      	movs	r2, #3
 80142d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80142d8:	900a      	str	r0, [sp, #40]	; 0x28
 80142da:	4629      	mov	r1, r5
 80142dc:	4620      	mov	r0, r4
 80142de:	2200      	movs	r2, #0
 80142e0:	4b3e      	ldr	r3, [pc, #248]	; (80143dc <pow+0x2cc>)
 80142e2:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80142e6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80142ea:	f7ec f9ad 	bl	8000648 <__aeabi_dmul>
 80142ee:	4604      	mov	r4, r0
 80142f0:	460d      	mov	r5, r1
 80142f2:	f1b9 0f00 	cmp.w	r9, #0
 80142f6:	d124      	bne.n	8014342 <pow+0x232>
 80142f8:	4b39      	ldr	r3, [pc, #228]	; (80143e0 <pow+0x2d0>)
 80142fa:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80142fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014302:	4630      	mov	r0, r6
 8014304:	4652      	mov	r2, sl
 8014306:	465b      	mov	r3, fp
 8014308:	4639      	mov	r1, r7
 801430a:	f7ec fc0f 	bl	8000b2c <__aeabi_dcmplt>
 801430e:	2800      	cmp	r0, #0
 8014310:	d056      	beq.n	80143c0 <pow+0x2b0>
 8014312:	ec45 4b10 	vmov	d0, r4, r5
 8014316:	f000 fed3 	bl	80150c0 <rint>
 801431a:	4622      	mov	r2, r4
 801431c:	462b      	mov	r3, r5
 801431e:	ec51 0b10 	vmov	r0, r1, d0
 8014322:	f7ec fbf9 	bl	8000b18 <__aeabi_dcmpeq>
 8014326:	b920      	cbnz	r0, 8014332 <pow+0x222>
 8014328:	4b2e      	ldr	r3, [pc, #184]	; (80143e4 <pow+0x2d4>)
 801432a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 801432e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8014332:	f998 3000 	ldrsb.w	r3, [r8]
 8014336:	2b02      	cmp	r3, #2
 8014338:	d142      	bne.n	80143c0 <pow+0x2b0>
 801433a:	f7fd f8cd 	bl	80114d8 <__errno>
 801433e:	2322      	movs	r3, #34	; 0x22
 8014340:	e78d      	b.n	801425e <pow+0x14e>
 8014342:	4b29      	ldr	r3, [pc, #164]	; (80143e8 <pow+0x2d8>)
 8014344:	2200      	movs	r2, #0
 8014346:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801434a:	4630      	mov	r0, r6
 801434c:	4652      	mov	r2, sl
 801434e:	465b      	mov	r3, fp
 8014350:	4639      	mov	r1, r7
 8014352:	f7ec fbeb 	bl	8000b2c <__aeabi_dcmplt>
 8014356:	2800      	cmp	r0, #0
 8014358:	d0eb      	beq.n	8014332 <pow+0x222>
 801435a:	ec45 4b10 	vmov	d0, r4, r5
 801435e:	f000 feaf 	bl	80150c0 <rint>
 8014362:	4622      	mov	r2, r4
 8014364:	462b      	mov	r3, r5
 8014366:	ec51 0b10 	vmov	r0, r1, d0
 801436a:	f7ec fbd5 	bl	8000b18 <__aeabi_dcmpeq>
 801436e:	2800      	cmp	r0, #0
 8014370:	d1df      	bne.n	8014332 <pow+0x222>
 8014372:	2200      	movs	r2, #0
 8014374:	4b18      	ldr	r3, [pc, #96]	; (80143d8 <pow+0x2c8>)
 8014376:	e7da      	b.n	801432e <pow+0x21e>
 8014378:	2200      	movs	r2, #0
 801437a:	2300      	movs	r3, #0
 801437c:	ec51 0b18 	vmov	r0, r1, d8
 8014380:	f7ec fbca 	bl	8000b18 <__aeabi_dcmpeq>
 8014384:	2800      	cmp	r0, #0
 8014386:	f43f af3a 	beq.w	80141fe <pow+0xee>
 801438a:	ec47 6b10 	vmov	d0, r6, r7
 801438e:	f000 fe82 	bl	8015096 <finite>
 8014392:	2800      	cmp	r0, #0
 8014394:	f43f af33 	beq.w	80141fe <pow+0xee>
 8014398:	ec45 4b10 	vmov	d0, r4, r5
 801439c:	f000 fe7b 	bl	8015096 <finite>
 80143a0:	2800      	cmp	r0, #0
 80143a2:	f43f af2c 	beq.w	80141fe <pow+0xee>
 80143a6:	2304      	movs	r3, #4
 80143a8:	9302      	str	r3, [sp, #8]
 80143aa:	4b09      	ldr	r3, [pc, #36]	; (80143d0 <pow+0x2c0>)
 80143ac:	9303      	str	r3, [sp, #12]
 80143ae:	2300      	movs	r3, #0
 80143b0:	930a      	str	r3, [sp, #40]	; 0x28
 80143b2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80143b6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80143ba:	ed8d 9b08 	vstr	d9, [sp, #32]
 80143be:	e7b8      	b.n	8014332 <pow+0x222>
 80143c0:	a802      	add	r0, sp, #8
 80143c2:	f000 fe70 	bl	80150a6 <matherr>
 80143c6:	2800      	cmp	r0, #0
 80143c8:	f47f af11 	bne.w	80141ee <pow+0xde>
 80143cc:	e7b5      	b.n	801433a <pow+0x22a>
 80143ce:	bf00      	nop
 80143d0:	08016a1e 	.word	0x08016a1e
 80143d4:	3ff00000 	.word	0x3ff00000
 80143d8:	fff00000 	.word	0xfff00000
 80143dc:	3fe00000 	.word	0x3fe00000
 80143e0:	47efffff 	.word	0x47efffff
 80143e4:	c7efffff 	.word	0xc7efffff
 80143e8:	7ff00000 	.word	0x7ff00000
 80143ec:	20001e04 	.word	0x20001e04

080143f0 <__ieee754_log10>:
 80143f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80143f4:	ec55 4b10 	vmov	r4, r5, d0
 80143f8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80143fc:	462b      	mov	r3, r5
 80143fe:	da2f      	bge.n	8014460 <__ieee754_log10+0x70>
 8014400:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8014404:	4322      	orrs	r2, r4
 8014406:	d10a      	bne.n	801441e <__ieee754_log10+0x2e>
 8014408:	493b      	ldr	r1, [pc, #236]	; (80144f8 <__ieee754_log10+0x108>)
 801440a:	2200      	movs	r2, #0
 801440c:	2300      	movs	r3, #0
 801440e:	2000      	movs	r0, #0
 8014410:	f7ec fa44 	bl	800089c <__aeabi_ddiv>
 8014414:	ec41 0b10 	vmov	d0, r0, r1
 8014418:	b003      	add	sp, #12
 801441a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801441e:	2d00      	cmp	r5, #0
 8014420:	da08      	bge.n	8014434 <__ieee754_log10+0x44>
 8014422:	ee10 2a10 	vmov	r2, s0
 8014426:	4620      	mov	r0, r4
 8014428:	4629      	mov	r1, r5
 801442a:	f7eb ff55 	bl	80002d8 <__aeabi_dsub>
 801442e:	2200      	movs	r2, #0
 8014430:	2300      	movs	r3, #0
 8014432:	e7ed      	b.n	8014410 <__ieee754_log10+0x20>
 8014434:	2200      	movs	r2, #0
 8014436:	4b31      	ldr	r3, [pc, #196]	; (80144fc <__ieee754_log10+0x10c>)
 8014438:	4629      	mov	r1, r5
 801443a:	ee10 0a10 	vmov	r0, s0
 801443e:	f7ec f903 	bl	8000648 <__aeabi_dmul>
 8014442:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8014446:	4604      	mov	r4, r0
 8014448:	460d      	mov	r5, r1
 801444a:	460b      	mov	r3, r1
 801444c:	492c      	ldr	r1, [pc, #176]	; (8014500 <__ieee754_log10+0x110>)
 801444e:	428b      	cmp	r3, r1
 8014450:	dd08      	ble.n	8014464 <__ieee754_log10+0x74>
 8014452:	4622      	mov	r2, r4
 8014454:	462b      	mov	r3, r5
 8014456:	4620      	mov	r0, r4
 8014458:	4629      	mov	r1, r5
 801445a:	f7eb ff3f 	bl	80002dc <__adddf3>
 801445e:	e7d9      	b.n	8014414 <__ieee754_log10+0x24>
 8014460:	2200      	movs	r2, #0
 8014462:	e7f3      	b.n	801444c <__ieee754_log10+0x5c>
 8014464:	1518      	asrs	r0, r3, #20
 8014466:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 801446a:	4410      	add	r0, r2
 801446c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8014470:	4448      	add	r0, r9
 8014472:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8014476:	f7ec f87d 	bl	8000574 <__aeabi_i2d>
 801447a:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 801447e:	3303      	adds	r3, #3
 8014480:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8014484:	ec45 4b10 	vmov	d0, r4, r5
 8014488:	4606      	mov	r6, r0
 801448a:	460f      	mov	r7, r1
 801448c:	f000 ff14 	bl	80152b8 <__ieee754_log>
 8014490:	a313      	add	r3, pc, #76	; (adr r3, 80144e0 <__ieee754_log10+0xf0>)
 8014492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014496:	4630      	mov	r0, r6
 8014498:	4639      	mov	r1, r7
 801449a:	ed8d 0b00 	vstr	d0, [sp]
 801449e:	f7ec f8d3 	bl	8000648 <__aeabi_dmul>
 80144a2:	ed9d 0b00 	vldr	d0, [sp]
 80144a6:	4604      	mov	r4, r0
 80144a8:	460d      	mov	r5, r1
 80144aa:	a30f      	add	r3, pc, #60	; (adr r3, 80144e8 <__ieee754_log10+0xf8>)
 80144ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144b0:	ec51 0b10 	vmov	r0, r1, d0
 80144b4:	f7ec f8c8 	bl	8000648 <__aeabi_dmul>
 80144b8:	4602      	mov	r2, r0
 80144ba:	460b      	mov	r3, r1
 80144bc:	4620      	mov	r0, r4
 80144be:	4629      	mov	r1, r5
 80144c0:	f7eb ff0c 	bl	80002dc <__adddf3>
 80144c4:	a30a      	add	r3, pc, #40	; (adr r3, 80144f0 <__ieee754_log10+0x100>)
 80144c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80144ca:	4604      	mov	r4, r0
 80144cc:	460d      	mov	r5, r1
 80144ce:	4630      	mov	r0, r6
 80144d0:	4639      	mov	r1, r7
 80144d2:	f7ec f8b9 	bl	8000648 <__aeabi_dmul>
 80144d6:	4602      	mov	r2, r0
 80144d8:	460b      	mov	r3, r1
 80144da:	4620      	mov	r0, r4
 80144dc:	4629      	mov	r1, r5
 80144de:	e7bc      	b.n	801445a <__ieee754_log10+0x6a>
 80144e0:	11f12b36 	.word	0x11f12b36
 80144e4:	3d59fef3 	.word	0x3d59fef3
 80144e8:	1526e50e 	.word	0x1526e50e
 80144ec:	3fdbcb7b 	.word	0x3fdbcb7b
 80144f0:	509f6000 	.word	0x509f6000
 80144f4:	3fd34413 	.word	0x3fd34413
 80144f8:	c3500000 	.word	0xc3500000
 80144fc:	43500000 	.word	0x43500000
 8014500:	7fefffff 	.word	0x7fefffff
 8014504:	00000000 	.word	0x00000000

08014508 <__ieee754_pow>:
 8014508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801450c:	b091      	sub	sp, #68	; 0x44
 801450e:	ed8d 1b00 	vstr	d1, [sp]
 8014512:	e9dd 2900 	ldrd	r2, r9, [sp]
 8014516:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801451a:	ea58 0302 	orrs.w	r3, r8, r2
 801451e:	ec57 6b10 	vmov	r6, r7, d0
 8014522:	f000 84be 	beq.w	8014ea2 <__ieee754_pow+0x99a>
 8014526:	4b7a      	ldr	r3, [pc, #488]	; (8014710 <__ieee754_pow+0x208>)
 8014528:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801452c:	429c      	cmp	r4, r3
 801452e:	463d      	mov	r5, r7
 8014530:	ee10 aa10 	vmov	sl, s0
 8014534:	dc09      	bgt.n	801454a <__ieee754_pow+0x42>
 8014536:	d103      	bne.n	8014540 <__ieee754_pow+0x38>
 8014538:	b93e      	cbnz	r6, 801454a <__ieee754_pow+0x42>
 801453a:	45a0      	cmp	r8, r4
 801453c:	dc0d      	bgt.n	801455a <__ieee754_pow+0x52>
 801453e:	e001      	b.n	8014544 <__ieee754_pow+0x3c>
 8014540:	4598      	cmp	r8, r3
 8014542:	dc02      	bgt.n	801454a <__ieee754_pow+0x42>
 8014544:	4598      	cmp	r8, r3
 8014546:	d10e      	bne.n	8014566 <__ieee754_pow+0x5e>
 8014548:	b16a      	cbz	r2, 8014566 <__ieee754_pow+0x5e>
 801454a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 801454e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014552:	ea54 030a 	orrs.w	r3, r4, sl
 8014556:	f000 84a4 	beq.w	8014ea2 <__ieee754_pow+0x99a>
 801455a:	486e      	ldr	r0, [pc, #440]	; (8014714 <__ieee754_pow+0x20c>)
 801455c:	b011      	add	sp, #68	; 0x44
 801455e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014562:	f000 bda5 	b.w	80150b0 <nan>
 8014566:	2d00      	cmp	r5, #0
 8014568:	da53      	bge.n	8014612 <__ieee754_pow+0x10a>
 801456a:	4b6b      	ldr	r3, [pc, #428]	; (8014718 <__ieee754_pow+0x210>)
 801456c:	4598      	cmp	r8, r3
 801456e:	dc4d      	bgt.n	801460c <__ieee754_pow+0x104>
 8014570:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8014574:	4598      	cmp	r8, r3
 8014576:	dd4c      	ble.n	8014612 <__ieee754_pow+0x10a>
 8014578:	ea4f 5328 	mov.w	r3, r8, asr #20
 801457c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014580:	2b14      	cmp	r3, #20
 8014582:	dd26      	ble.n	80145d2 <__ieee754_pow+0xca>
 8014584:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8014588:	fa22 f103 	lsr.w	r1, r2, r3
 801458c:	fa01 f303 	lsl.w	r3, r1, r3
 8014590:	4293      	cmp	r3, r2
 8014592:	d13e      	bne.n	8014612 <__ieee754_pow+0x10a>
 8014594:	f001 0101 	and.w	r1, r1, #1
 8014598:	f1c1 0b02 	rsb	fp, r1, #2
 801459c:	2a00      	cmp	r2, #0
 801459e:	d15b      	bne.n	8014658 <__ieee754_pow+0x150>
 80145a0:	4b5b      	ldr	r3, [pc, #364]	; (8014710 <__ieee754_pow+0x208>)
 80145a2:	4598      	cmp	r8, r3
 80145a4:	d124      	bne.n	80145f0 <__ieee754_pow+0xe8>
 80145a6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80145aa:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80145ae:	ea53 030a 	orrs.w	r3, r3, sl
 80145b2:	f000 8476 	beq.w	8014ea2 <__ieee754_pow+0x99a>
 80145b6:	4b59      	ldr	r3, [pc, #356]	; (801471c <__ieee754_pow+0x214>)
 80145b8:	429c      	cmp	r4, r3
 80145ba:	dd2d      	ble.n	8014618 <__ieee754_pow+0x110>
 80145bc:	f1b9 0f00 	cmp.w	r9, #0
 80145c0:	f280 8473 	bge.w	8014eaa <__ieee754_pow+0x9a2>
 80145c4:	2000      	movs	r0, #0
 80145c6:	2100      	movs	r1, #0
 80145c8:	ec41 0b10 	vmov	d0, r0, r1
 80145cc:	b011      	add	sp, #68	; 0x44
 80145ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145d2:	2a00      	cmp	r2, #0
 80145d4:	d13e      	bne.n	8014654 <__ieee754_pow+0x14c>
 80145d6:	f1c3 0314 	rsb	r3, r3, #20
 80145da:	fa48 f103 	asr.w	r1, r8, r3
 80145de:	fa01 f303 	lsl.w	r3, r1, r3
 80145e2:	4543      	cmp	r3, r8
 80145e4:	f040 8469 	bne.w	8014eba <__ieee754_pow+0x9b2>
 80145e8:	f001 0101 	and.w	r1, r1, #1
 80145ec:	f1c1 0b02 	rsb	fp, r1, #2
 80145f0:	4b4b      	ldr	r3, [pc, #300]	; (8014720 <__ieee754_pow+0x218>)
 80145f2:	4598      	cmp	r8, r3
 80145f4:	d118      	bne.n	8014628 <__ieee754_pow+0x120>
 80145f6:	f1b9 0f00 	cmp.w	r9, #0
 80145fa:	f280 845a 	bge.w	8014eb2 <__ieee754_pow+0x9aa>
 80145fe:	4948      	ldr	r1, [pc, #288]	; (8014720 <__ieee754_pow+0x218>)
 8014600:	4632      	mov	r2, r6
 8014602:	463b      	mov	r3, r7
 8014604:	2000      	movs	r0, #0
 8014606:	f7ec f949 	bl	800089c <__aeabi_ddiv>
 801460a:	e7dd      	b.n	80145c8 <__ieee754_pow+0xc0>
 801460c:	f04f 0b02 	mov.w	fp, #2
 8014610:	e7c4      	b.n	801459c <__ieee754_pow+0x94>
 8014612:	f04f 0b00 	mov.w	fp, #0
 8014616:	e7c1      	b.n	801459c <__ieee754_pow+0x94>
 8014618:	f1b9 0f00 	cmp.w	r9, #0
 801461c:	dad2      	bge.n	80145c4 <__ieee754_pow+0xbc>
 801461e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8014622:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8014626:	e7cf      	b.n	80145c8 <__ieee754_pow+0xc0>
 8014628:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801462c:	d106      	bne.n	801463c <__ieee754_pow+0x134>
 801462e:	4632      	mov	r2, r6
 8014630:	463b      	mov	r3, r7
 8014632:	4610      	mov	r0, r2
 8014634:	4619      	mov	r1, r3
 8014636:	f7ec f807 	bl	8000648 <__aeabi_dmul>
 801463a:	e7c5      	b.n	80145c8 <__ieee754_pow+0xc0>
 801463c:	4b39      	ldr	r3, [pc, #228]	; (8014724 <__ieee754_pow+0x21c>)
 801463e:	4599      	cmp	r9, r3
 8014640:	d10a      	bne.n	8014658 <__ieee754_pow+0x150>
 8014642:	2d00      	cmp	r5, #0
 8014644:	db08      	blt.n	8014658 <__ieee754_pow+0x150>
 8014646:	ec47 6b10 	vmov	d0, r6, r7
 801464a:	b011      	add	sp, #68	; 0x44
 801464c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014650:	f000 bc68 	b.w	8014f24 <__ieee754_sqrt>
 8014654:	f04f 0b00 	mov.w	fp, #0
 8014658:	ec47 6b10 	vmov	d0, r6, r7
 801465c:	f000 fd12 	bl	8015084 <fabs>
 8014660:	ec51 0b10 	vmov	r0, r1, d0
 8014664:	f1ba 0f00 	cmp.w	sl, #0
 8014668:	d127      	bne.n	80146ba <__ieee754_pow+0x1b2>
 801466a:	b124      	cbz	r4, 8014676 <__ieee754_pow+0x16e>
 801466c:	4b2c      	ldr	r3, [pc, #176]	; (8014720 <__ieee754_pow+0x218>)
 801466e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8014672:	429a      	cmp	r2, r3
 8014674:	d121      	bne.n	80146ba <__ieee754_pow+0x1b2>
 8014676:	f1b9 0f00 	cmp.w	r9, #0
 801467a:	da05      	bge.n	8014688 <__ieee754_pow+0x180>
 801467c:	4602      	mov	r2, r0
 801467e:	460b      	mov	r3, r1
 8014680:	2000      	movs	r0, #0
 8014682:	4927      	ldr	r1, [pc, #156]	; (8014720 <__ieee754_pow+0x218>)
 8014684:	f7ec f90a 	bl	800089c <__aeabi_ddiv>
 8014688:	2d00      	cmp	r5, #0
 801468a:	da9d      	bge.n	80145c8 <__ieee754_pow+0xc0>
 801468c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8014690:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8014694:	ea54 030b 	orrs.w	r3, r4, fp
 8014698:	d108      	bne.n	80146ac <__ieee754_pow+0x1a4>
 801469a:	4602      	mov	r2, r0
 801469c:	460b      	mov	r3, r1
 801469e:	4610      	mov	r0, r2
 80146a0:	4619      	mov	r1, r3
 80146a2:	f7eb fe19 	bl	80002d8 <__aeabi_dsub>
 80146a6:	4602      	mov	r2, r0
 80146a8:	460b      	mov	r3, r1
 80146aa:	e7ac      	b.n	8014606 <__ieee754_pow+0xfe>
 80146ac:	f1bb 0f01 	cmp.w	fp, #1
 80146b0:	d18a      	bne.n	80145c8 <__ieee754_pow+0xc0>
 80146b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80146b6:	4619      	mov	r1, r3
 80146b8:	e786      	b.n	80145c8 <__ieee754_pow+0xc0>
 80146ba:	0fed      	lsrs	r5, r5, #31
 80146bc:	1e6b      	subs	r3, r5, #1
 80146be:	930d      	str	r3, [sp, #52]	; 0x34
 80146c0:	ea5b 0303 	orrs.w	r3, fp, r3
 80146c4:	d102      	bne.n	80146cc <__ieee754_pow+0x1c4>
 80146c6:	4632      	mov	r2, r6
 80146c8:	463b      	mov	r3, r7
 80146ca:	e7e8      	b.n	801469e <__ieee754_pow+0x196>
 80146cc:	4b16      	ldr	r3, [pc, #88]	; (8014728 <__ieee754_pow+0x220>)
 80146ce:	4598      	cmp	r8, r3
 80146d0:	f340 80fe 	ble.w	80148d0 <__ieee754_pow+0x3c8>
 80146d4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80146d8:	4598      	cmp	r8, r3
 80146da:	dd0a      	ble.n	80146f2 <__ieee754_pow+0x1ea>
 80146dc:	4b0f      	ldr	r3, [pc, #60]	; (801471c <__ieee754_pow+0x214>)
 80146de:	429c      	cmp	r4, r3
 80146e0:	dc0d      	bgt.n	80146fe <__ieee754_pow+0x1f6>
 80146e2:	f1b9 0f00 	cmp.w	r9, #0
 80146e6:	f6bf af6d 	bge.w	80145c4 <__ieee754_pow+0xbc>
 80146ea:	a307      	add	r3, pc, #28	; (adr r3, 8014708 <__ieee754_pow+0x200>)
 80146ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80146f0:	e79f      	b.n	8014632 <__ieee754_pow+0x12a>
 80146f2:	4b0e      	ldr	r3, [pc, #56]	; (801472c <__ieee754_pow+0x224>)
 80146f4:	429c      	cmp	r4, r3
 80146f6:	ddf4      	ble.n	80146e2 <__ieee754_pow+0x1da>
 80146f8:	4b09      	ldr	r3, [pc, #36]	; (8014720 <__ieee754_pow+0x218>)
 80146fa:	429c      	cmp	r4, r3
 80146fc:	dd18      	ble.n	8014730 <__ieee754_pow+0x228>
 80146fe:	f1b9 0f00 	cmp.w	r9, #0
 8014702:	dcf2      	bgt.n	80146ea <__ieee754_pow+0x1e2>
 8014704:	e75e      	b.n	80145c4 <__ieee754_pow+0xbc>
 8014706:	bf00      	nop
 8014708:	8800759c 	.word	0x8800759c
 801470c:	7e37e43c 	.word	0x7e37e43c
 8014710:	7ff00000 	.word	0x7ff00000
 8014714:	08016901 	.word	0x08016901
 8014718:	433fffff 	.word	0x433fffff
 801471c:	3fefffff 	.word	0x3fefffff
 8014720:	3ff00000 	.word	0x3ff00000
 8014724:	3fe00000 	.word	0x3fe00000
 8014728:	41e00000 	.word	0x41e00000
 801472c:	3feffffe 	.word	0x3feffffe
 8014730:	2200      	movs	r2, #0
 8014732:	4b63      	ldr	r3, [pc, #396]	; (80148c0 <__ieee754_pow+0x3b8>)
 8014734:	f7eb fdd0 	bl	80002d8 <__aeabi_dsub>
 8014738:	a355      	add	r3, pc, #340	; (adr r3, 8014890 <__ieee754_pow+0x388>)
 801473a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801473e:	4604      	mov	r4, r0
 8014740:	460d      	mov	r5, r1
 8014742:	f7eb ff81 	bl	8000648 <__aeabi_dmul>
 8014746:	a354      	add	r3, pc, #336	; (adr r3, 8014898 <__ieee754_pow+0x390>)
 8014748:	e9d3 2300 	ldrd	r2, r3, [r3]
 801474c:	4606      	mov	r6, r0
 801474e:	460f      	mov	r7, r1
 8014750:	4620      	mov	r0, r4
 8014752:	4629      	mov	r1, r5
 8014754:	f7eb ff78 	bl	8000648 <__aeabi_dmul>
 8014758:	2200      	movs	r2, #0
 801475a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801475e:	4b59      	ldr	r3, [pc, #356]	; (80148c4 <__ieee754_pow+0x3bc>)
 8014760:	4620      	mov	r0, r4
 8014762:	4629      	mov	r1, r5
 8014764:	f7eb ff70 	bl	8000648 <__aeabi_dmul>
 8014768:	4602      	mov	r2, r0
 801476a:	460b      	mov	r3, r1
 801476c:	a14c      	add	r1, pc, #304	; (adr r1, 80148a0 <__ieee754_pow+0x398>)
 801476e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8014772:	f7eb fdb1 	bl	80002d8 <__aeabi_dsub>
 8014776:	4622      	mov	r2, r4
 8014778:	462b      	mov	r3, r5
 801477a:	f7eb ff65 	bl	8000648 <__aeabi_dmul>
 801477e:	4602      	mov	r2, r0
 8014780:	460b      	mov	r3, r1
 8014782:	2000      	movs	r0, #0
 8014784:	4950      	ldr	r1, [pc, #320]	; (80148c8 <__ieee754_pow+0x3c0>)
 8014786:	f7eb fda7 	bl	80002d8 <__aeabi_dsub>
 801478a:	4622      	mov	r2, r4
 801478c:	462b      	mov	r3, r5
 801478e:	4680      	mov	r8, r0
 8014790:	4689      	mov	r9, r1
 8014792:	4620      	mov	r0, r4
 8014794:	4629      	mov	r1, r5
 8014796:	f7eb ff57 	bl	8000648 <__aeabi_dmul>
 801479a:	4602      	mov	r2, r0
 801479c:	460b      	mov	r3, r1
 801479e:	4640      	mov	r0, r8
 80147a0:	4649      	mov	r1, r9
 80147a2:	f7eb ff51 	bl	8000648 <__aeabi_dmul>
 80147a6:	a340      	add	r3, pc, #256	; (adr r3, 80148a8 <__ieee754_pow+0x3a0>)
 80147a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80147ac:	f7eb ff4c 	bl	8000648 <__aeabi_dmul>
 80147b0:	4602      	mov	r2, r0
 80147b2:	460b      	mov	r3, r1
 80147b4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80147b8:	f7eb fd8e 	bl	80002d8 <__aeabi_dsub>
 80147bc:	4602      	mov	r2, r0
 80147be:	460b      	mov	r3, r1
 80147c0:	4604      	mov	r4, r0
 80147c2:	460d      	mov	r5, r1
 80147c4:	4630      	mov	r0, r6
 80147c6:	4639      	mov	r1, r7
 80147c8:	f7eb fd88 	bl	80002dc <__adddf3>
 80147cc:	2000      	movs	r0, #0
 80147ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80147d2:	4632      	mov	r2, r6
 80147d4:	463b      	mov	r3, r7
 80147d6:	f7eb fd7f 	bl	80002d8 <__aeabi_dsub>
 80147da:	4602      	mov	r2, r0
 80147dc:	460b      	mov	r3, r1
 80147de:	4620      	mov	r0, r4
 80147e0:	4629      	mov	r1, r5
 80147e2:	f7eb fd79 	bl	80002d8 <__aeabi_dsub>
 80147e6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80147e8:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 80147ec:	4313      	orrs	r3, r2
 80147ee:	4606      	mov	r6, r0
 80147f0:	460f      	mov	r7, r1
 80147f2:	f040 81eb 	bne.w	8014bcc <__ieee754_pow+0x6c4>
 80147f6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80148b0 <__ieee754_pow+0x3a8>
 80147fa:	e9dd 4500 	ldrd	r4, r5, [sp]
 80147fe:	2400      	movs	r4, #0
 8014800:	4622      	mov	r2, r4
 8014802:	462b      	mov	r3, r5
 8014804:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014808:	ed8d 7b02 	vstr	d7, [sp, #8]
 801480c:	f7eb fd64 	bl	80002d8 <__aeabi_dsub>
 8014810:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014814:	f7eb ff18 	bl	8000648 <__aeabi_dmul>
 8014818:	e9dd 2300 	ldrd	r2, r3, [sp]
 801481c:	4680      	mov	r8, r0
 801481e:	4689      	mov	r9, r1
 8014820:	4630      	mov	r0, r6
 8014822:	4639      	mov	r1, r7
 8014824:	f7eb ff10 	bl	8000648 <__aeabi_dmul>
 8014828:	4602      	mov	r2, r0
 801482a:	460b      	mov	r3, r1
 801482c:	4640      	mov	r0, r8
 801482e:	4649      	mov	r1, r9
 8014830:	f7eb fd54 	bl	80002dc <__adddf3>
 8014834:	4622      	mov	r2, r4
 8014836:	462b      	mov	r3, r5
 8014838:	4680      	mov	r8, r0
 801483a:	4689      	mov	r9, r1
 801483c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014840:	f7eb ff02 	bl	8000648 <__aeabi_dmul>
 8014844:	460b      	mov	r3, r1
 8014846:	4604      	mov	r4, r0
 8014848:	460d      	mov	r5, r1
 801484a:	4602      	mov	r2, r0
 801484c:	4649      	mov	r1, r9
 801484e:	4640      	mov	r0, r8
 8014850:	e9cd 4500 	strd	r4, r5, [sp]
 8014854:	f7eb fd42 	bl	80002dc <__adddf3>
 8014858:	4b1c      	ldr	r3, [pc, #112]	; (80148cc <__ieee754_pow+0x3c4>)
 801485a:	4299      	cmp	r1, r3
 801485c:	4606      	mov	r6, r0
 801485e:	460f      	mov	r7, r1
 8014860:	468b      	mov	fp, r1
 8014862:	f340 82f7 	ble.w	8014e54 <__ieee754_pow+0x94c>
 8014866:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801486a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801486e:	4303      	orrs	r3, r0
 8014870:	f000 81ea 	beq.w	8014c48 <__ieee754_pow+0x740>
 8014874:	a310      	add	r3, pc, #64	; (adr r3, 80148b8 <__ieee754_pow+0x3b0>)
 8014876:	e9d3 2300 	ldrd	r2, r3, [r3]
 801487a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801487e:	f7eb fee3 	bl	8000648 <__aeabi_dmul>
 8014882:	a30d      	add	r3, pc, #52	; (adr r3, 80148b8 <__ieee754_pow+0x3b0>)
 8014884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014888:	e6d5      	b.n	8014636 <__ieee754_pow+0x12e>
 801488a:	bf00      	nop
 801488c:	f3af 8000 	nop.w
 8014890:	60000000 	.word	0x60000000
 8014894:	3ff71547 	.word	0x3ff71547
 8014898:	f85ddf44 	.word	0xf85ddf44
 801489c:	3e54ae0b 	.word	0x3e54ae0b
 80148a0:	55555555 	.word	0x55555555
 80148a4:	3fd55555 	.word	0x3fd55555
 80148a8:	652b82fe 	.word	0x652b82fe
 80148ac:	3ff71547 	.word	0x3ff71547
 80148b0:	00000000 	.word	0x00000000
 80148b4:	bff00000 	.word	0xbff00000
 80148b8:	8800759c 	.word	0x8800759c
 80148bc:	7e37e43c 	.word	0x7e37e43c
 80148c0:	3ff00000 	.word	0x3ff00000
 80148c4:	3fd00000 	.word	0x3fd00000
 80148c8:	3fe00000 	.word	0x3fe00000
 80148cc:	408fffff 	.word	0x408fffff
 80148d0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80148d4:	f04f 0200 	mov.w	r2, #0
 80148d8:	da05      	bge.n	80148e6 <__ieee754_pow+0x3de>
 80148da:	4bd3      	ldr	r3, [pc, #844]	; (8014c28 <__ieee754_pow+0x720>)
 80148dc:	f7eb feb4 	bl	8000648 <__aeabi_dmul>
 80148e0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80148e4:	460c      	mov	r4, r1
 80148e6:	1523      	asrs	r3, r4, #20
 80148e8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80148ec:	4413      	add	r3, r2
 80148ee:	9309      	str	r3, [sp, #36]	; 0x24
 80148f0:	4bce      	ldr	r3, [pc, #824]	; (8014c2c <__ieee754_pow+0x724>)
 80148f2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80148f6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80148fa:	429c      	cmp	r4, r3
 80148fc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8014900:	dd08      	ble.n	8014914 <__ieee754_pow+0x40c>
 8014902:	4bcb      	ldr	r3, [pc, #812]	; (8014c30 <__ieee754_pow+0x728>)
 8014904:	429c      	cmp	r4, r3
 8014906:	f340 815e 	ble.w	8014bc6 <__ieee754_pow+0x6be>
 801490a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801490c:	3301      	adds	r3, #1
 801490e:	9309      	str	r3, [sp, #36]	; 0x24
 8014910:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8014914:	f04f 0a00 	mov.w	sl, #0
 8014918:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801491c:	930c      	str	r3, [sp, #48]	; 0x30
 801491e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014920:	4bc4      	ldr	r3, [pc, #784]	; (8014c34 <__ieee754_pow+0x72c>)
 8014922:	4413      	add	r3, r2
 8014924:	ed93 7b00 	vldr	d7, [r3]
 8014928:	4629      	mov	r1, r5
 801492a:	ec53 2b17 	vmov	r2, r3, d7
 801492e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8014932:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014936:	f7eb fccf 	bl	80002d8 <__aeabi_dsub>
 801493a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 801493e:	4606      	mov	r6, r0
 8014940:	460f      	mov	r7, r1
 8014942:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014946:	f7eb fcc9 	bl	80002dc <__adddf3>
 801494a:	4602      	mov	r2, r0
 801494c:	460b      	mov	r3, r1
 801494e:	2000      	movs	r0, #0
 8014950:	49b9      	ldr	r1, [pc, #740]	; (8014c38 <__ieee754_pow+0x730>)
 8014952:	f7eb ffa3 	bl	800089c <__aeabi_ddiv>
 8014956:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801495a:	4602      	mov	r2, r0
 801495c:	460b      	mov	r3, r1
 801495e:	4630      	mov	r0, r6
 8014960:	4639      	mov	r1, r7
 8014962:	f7eb fe71 	bl	8000648 <__aeabi_dmul>
 8014966:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801496a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801496e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8014972:	2300      	movs	r3, #0
 8014974:	9302      	str	r3, [sp, #8]
 8014976:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801497a:	106d      	asrs	r5, r5, #1
 801497c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8014980:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8014984:	2200      	movs	r2, #0
 8014986:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801498a:	4640      	mov	r0, r8
 801498c:	4649      	mov	r1, r9
 801498e:	4614      	mov	r4, r2
 8014990:	461d      	mov	r5, r3
 8014992:	f7eb fe59 	bl	8000648 <__aeabi_dmul>
 8014996:	4602      	mov	r2, r0
 8014998:	460b      	mov	r3, r1
 801499a:	4630      	mov	r0, r6
 801499c:	4639      	mov	r1, r7
 801499e:	f7eb fc9b 	bl	80002d8 <__aeabi_dsub>
 80149a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80149a6:	4606      	mov	r6, r0
 80149a8:	460f      	mov	r7, r1
 80149aa:	4620      	mov	r0, r4
 80149ac:	4629      	mov	r1, r5
 80149ae:	f7eb fc93 	bl	80002d8 <__aeabi_dsub>
 80149b2:	4602      	mov	r2, r0
 80149b4:	460b      	mov	r3, r1
 80149b6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80149ba:	f7eb fc8d 	bl	80002d8 <__aeabi_dsub>
 80149be:	4642      	mov	r2, r8
 80149c0:	464b      	mov	r3, r9
 80149c2:	f7eb fe41 	bl	8000648 <__aeabi_dmul>
 80149c6:	4602      	mov	r2, r0
 80149c8:	460b      	mov	r3, r1
 80149ca:	4630      	mov	r0, r6
 80149cc:	4639      	mov	r1, r7
 80149ce:	f7eb fc83 	bl	80002d8 <__aeabi_dsub>
 80149d2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80149d6:	f7eb fe37 	bl	8000648 <__aeabi_dmul>
 80149da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80149de:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80149e2:	4610      	mov	r0, r2
 80149e4:	4619      	mov	r1, r3
 80149e6:	f7eb fe2f 	bl	8000648 <__aeabi_dmul>
 80149ea:	a37b      	add	r3, pc, #492	; (adr r3, 8014bd8 <__ieee754_pow+0x6d0>)
 80149ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149f0:	4604      	mov	r4, r0
 80149f2:	460d      	mov	r5, r1
 80149f4:	f7eb fe28 	bl	8000648 <__aeabi_dmul>
 80149f8:	a379      	add	r3, pc, #484	; (adr r3, 8014be0 <__ieee754_pow+0x6d8>)
 80149fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80149fe:	f7eb fc6d 	bl	80002dc <__adddf3>
 8014a02:	4622      	mov	r2, r4
 8014a04:	462b      	mov	r3, r5
 8014a06:	f7eb fe1f 	bl	8000648 <__aeabi_dmul>
 8014a0a:	a377      	add	r3, pc, #476	; (adr r3, 8014be8 <__ieee754_pow+0x6e0>)
 8014a0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a10:	f7eb fc64 	bl	80002dc <__adddf3>
 8014a14:	4622      	mov	r2, r4
 8014a16:	462b      	mov	r3, r5
 8014a18:	f7eb fe16 	bl	8000648 <__aeabi_dmul>
 8014a1c:	a374      	add	r3, pc, #464	; (adr r3, 8014bf0 <__ieee754_pow+0x6e8>)
 8014a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a22:	f7eb fc5b 	bl	80002dc <__adddf3>
 8014a26:	4622      	mov	r2, r4
 8014a28:	462b      	mov	r3, r5
 8014a2a:	f7eb fe0d 	bl	8000648 <__aeabi_dmul>
 8014a2e:	a372      	add	r3, pc, #456	; (adr r3, 8014bf8 <__ieee754_pow+0x6f0>)
 8014a30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a34:	f7eb fc52 	bl	80002dc <__adddf3>
 8014a38:	4622      	mov	r2, r4
 8014a3a:	462b      	mov	r3, r5
 8014a3c:	f7eb fe04 	bl	8000648 <__aeabi_dmul>
 8014a40:	a36f      	add	r3, pc, #444	; (adr r3, 8014c00 <__ieee754_pow+0x6f8>)
 8014a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014a46:	f7eb fc49 	bl	80002dc <__adddf3>
 8014a4a:	4622      	mov	r2, r4
 8014a4c:	4606      	mov	r6, r0
 8014a4e:	460f      	mov	r7, r1
 8014a50:	462b      	mov	r3, r5
 8014a52:	4620      	mov	r0, r4
 8014a54:	4629      	mov	r1, r5
 8014a56:	f7eb fdf7 	bl	8000648 <__aeabi_dmul>
 8014a5a:	4602      	mov	r2, r0
 8014a5c:	460b      	mov	r3, r1
 8014a5e:	4630      	mov	r0, r6
 8014a60:	4639      	mov	r1, r7
 8014a62:	f7eb fdf1 	bl	8000648 <__aeabi_dmul>
 8014a66:	4642      	mov	r2, r8
 8014a68:	4604      	mov	r4, r0
 8014a6a:	460d      	mov	r5, r1
 8014a6c:	464b      	mov	r3, r9
 8014a6e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014a72:	f7eb fc33 	bl	80002dc <__adddf3>
 8014a76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014a7a:	f7eb fde5 	bl	8000648 <__aeabi_dmul>
 8014a7e:	4622      	mov	r2, r4
 8014a80:	462b      	mov	r3, r5
 8014a82:	f7eb fc2b 	bl	80002dc <__adddf3>
 8014a86:	4642      	mov	r2, r8
 8014a88:	4606      	mov	r6, r0
 8014a8a:	460f      	mov	r7, r1
 8014a8c:	464b      	mov	r3, r9
 8014a8e:	4640      	mov	r0, r8
 8014a90:	4649      	mov	r1, r9
 8014a92:	f7eb fdd9 	bl	8000648 <__aeabi_dmul>
 8014a96:	2200      	movs	r2, #0
 8014a98:	4b68      	ldr	r3, [pc, #416]	; (8014c3c <__ieee754_pow+0x734>)
 8014a9a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8014a9e:	f7eb fc1d 	bl	80002dc <__adddf3>
 8014aa2:	4632      	mov	r2, r6
 8014aa4:	463b      	mov	r3, r7
 8014aa6:	f7eb fc19 	bl	80002dc <__adddf3>
 8014aaa:	9802      	ldr	r0, [sp, #8]
 8014aac:	460d      	mov	r5, r1
 8014aae:	4604      	mov	r4, r0
 8014ab0:	4602      	mov	r2, r0
 8014ab2:	460b      	mov	r3, r1
 8014ab4:	4640      	mov	r0, r8
 8014ab6:	4649      	mov	r1, r9
 8014ab8:	f7eb fdc6 	bl	8000648 <__aeabi_dmul>
 8014abc:	2200      	movs	r2, #0
 8014abe:	4680      	mov	r8, r0
 8014ac0:	4689      	mov	r9, r1
 8014ac2:	4b5e      	ldr	r3, [pc, #376]	; (8014c3c <__ieee754_pow+0x734>)
 8014ac4:	4620      	mov	r0, r4
 8014ac6:	4629      	mov	r1, r5
 8014ac8:	f7eb fc06 	bl	80002d8 <__aeabi_dsub>
 8014acc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8014ad0:	f7eb fc02 	bl	80002d8 <__aeabi_dsub>
 8014ad4:	4602      	mov	r2, r0
 8014ad6:	460b      	mov	r3, r1
 8014ad8:	4630      	mov	r0, r6
 8014ada:	4639      	mov	r1, r7
 8014adc:	f7eb fbfc 	bl	80002d8 <__aeabi_dsub>
 8014ae0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8014ae4:	f7eb fdb0 	bl	8000648 <__aeabi_dmul>
 8014ae8:	4622      	mov	r2, r4
 8014aea:	4606      	mov	r6, r0
 8014aec:	460f      	mov	r7, r1
 8014aee:	462b      	mov	r3, r5
 8014af0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014af4:	f7eb fda8 	bl	8000648 <__aeabi_dmul>
 8014af8:	4602      	mov	r2, r0
 8014afa:	460b      	mov	r3, r1
 8014afc:	4630      	mov	r0, r6
 8014afe:	4639      	mov	r1, r7
 8014b00:	f7eb fbec 	bl	80002dc <__adddf3>
 8014b04:	4606      	mov	r6, r0
 8014b06:	460f      	mov	r7, r1
 8014b08:	4602      	mov	r2, r0
 8014b0a:	460b      	mov	r3, r1
 8014b0c:	4640      	mov	r0, r8
 8014b0e:	4649      	mov	r1, r9
 8014b10:	f7eb fbe4 	bl	80002dc <__adddf3>
 8014b14:	9802      	ldr	r0, [sp, #8]
 8014b16:	a33c      	add	r3, pc, #240	; (adr r3, 8014c08 <__ieee754_pow+0x700>)
 8014b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b1c:	4604      	mov	r4, r0
 8014b1e:	460d      	mov	r5, r1
 8014b20:	f7eb fd92 	bl	8000648 <__aeabi_dmul>
 8014b24:	4642      	mov	r2, r8
 8014b26:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8014b2a:	464b      	mov	r3, r9
 8014b2c:	4620      	mov	r0, r4
 8014b2e:	4629      	mov	r1, r5
 8014b30:	f7eb fbd2 	bl	80002d8 <__aeabi_dsub>
 8014b34:	4602      	mov	r2, r0
 8014b36:	460b      	mov	r3, r1
 8014b38:	4630      	mov	r0, r6
 8014b3a:	4639      	mov	r1, r7
 8014b3c:	f7eb fbcc 	bl	80002d8 <__aeabi_dsub>
 8014b40:	a333      	add	r3, pc, #204	; (adr r3, 8014c10 <__ieee754_pow+0x708>)
 8014b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b46:	f7eb fd7f 	bl	8000648 <__aeabi_dmul>
 8014b4a:	a333      	add	r3, pc, #204	; (adr r3, 8014c18 <__ieee754_pow+0x710>)
 8014b4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b50:	4606      	mov	r6, r0
 8014b52:	460f      	mov	r7, r1
 8014b54:	4620      	mov	r0, r4
 8014b56:	4629      	mov	r1, r5
 8014b58:	f7eb fd76 	bl	8000648 <__aeabi_dmul>
 8014b5c:	4602      	mov	r2, r0
 8014b5e:	460b      	mov	r3, r1
 8014b60:	4630      	mov	r0, r6
 8014b62:	4639      	mov	r1, r7
 8014b64:	f7eb fbba 	bl	80002dc <__adddf3>
 8014b68:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014b6a:	4b35      	ldr	r3, [pc, #212]	; (8014c40 <__ieee754_pow+0x738>)
 8014b6c:	4413      	add	r3, r2
 8014b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014b72:	f7eb fbb3 	bl	80002dc <__adddf3>
 8014b76:	4604      	mov	r4, r0
 8014b78:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014b7a:	460d      	mov	r5, r1
 8014b7c:	f7eb fcfa 	bl	8000574 <__aeabi_i2d>
 8014b80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8014b82:	4b30      	ldr	r3, [pc, #192]	; (8014c44 <__ieee754_pow+0x73c>)
 8014b84:	4413      	add	r3, r2
 8014b86:	e9d3 8900 	ldrd	r8, r9, [r3]
 8014b8a:	4606      	mov	r6, r0
 8014b8c:	460f      	mov	r7, r1
 8014b8e:	4622      	mov	r2, r4
 8014b90:	462b      	mov	r3, r5
 8014b92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8014b96:	f7eb fba1 	bl	80002dc <__adddf3>
 8014b9a:	4642      	mov	r2, r8
 8014b9c:	464b      	mov	r3, r9
 8014b9e:	f7eb fb9d 	bl	80002dc <__adddf3>
 8014ba2:	4632      	mov	r2, r6
 8014ba4:	463b      	mov	r3, r7
 8014ba6:	f7eb fb99 	bl	80002dc <__adddf3>
 8014baa:	9802      	ldr	r0, [sp, #8]
 8014bac:	4632      	mov	r2, r6
 8014bae:	463b      	mov	r3, r7
 8014bb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014bb4:	f7eb fb90 	bl	80002d8 <__aeabi_dsub>
 8014bb8:	4642      	mov	r2, r8
 8014bba:	464b      	mov	r3, r9
 8014bbc:	f7eb fb8c 	bl	80002d8 <__aeabi_dsub>
 8014bc0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8014bc4:	e607      	b.n	80147d6 <__ieee754_pow+0x2ce>
 8014bc6:	f04f 0a01 	mov.w	sl, #1
 8014bca:	e6a5      	b.n	8014918 <__ieee754_pow+0x410>
 8014bcc:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8014c20 <__ieee754_pow+0x718>
 8014bd0:	e613      	b.n	80147fa <__ieee754_pow+0x2f2>
 8014bd2:	bf00      	nop
 8014bd4:	f3af 8000 	nop.w
 8014bd8:	4a454eef 	.word	0x4a454eef
 8014bdc:	3fca7e28 	.word	0x3fca7e28
 8014be0:	93c9db65 	.word	0x93c9db65
 8014be4:	3fcd864a 	.word	0x3fcd864a
 8014be8:	a91d4101 	.word	0xa91d4101
 8014bec:	3fd17460 	.word	0x3fd17460
 8014bf0:	518f264d 	.word	0x518f264d
 8014bf4:	3fd55555 	.word	0x3fd55555
 8014bf8:	db6fabff 	.word	0xdb6fabff
 8014bfc:	3fdb6db6 	.word	0x3fdb6db6
 8014c00:	33333303 	.word	0x33333303
 8014c04:	3fe33333 	.word	0x3fe33333
 8014c08:	e0000000 	.word	0xe0000000
 8014c0c:	3feec709 	.word	0x3feec709
 8014c10:	dc3a03fd 	.word	0xdc3a03fd
 8014c14:	3feec709 	.word	0x3feec709
 8014c18:	145b01f5 	.word	0x145b01f5
 8014c1c:	be3e2fe0 	.word	0xbe3e2fe0
 8014c20:	00000000 	.word	0x00000000
 8014c24:	3ff00000 	.word	0x3ff00000
 8014c28:	43400000 	.word	0x43400000
 8014c2c:	0003988e 	.word	0x0003988e
 8014c30:	000bb679 	.word	0x000bb679
 8014c34:	08016a28 	.word	0x08016a28
 8014c38:	3ff00000 	.word	0x3ff00000
 8014c3c:	40080000 	.word	0x40080000
 8014c40:	08016a48 	.word	0x08016a48
 8014c44:	08016a38 	.word	0x08016a38
 8014c48:	a3b4      	add	r3, pc, #720	; (adr r3, 8014f1c <__ieee754_pow+0xa14>)
 8014c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014c4e:	4640      	mov	r0, r8
 8014c50:	4649      	mov	r1, r9
 8014c52:	f7eb fb43 	bl	80002dc <__adddf3>
 8014c56:	4622      	mov	r2, r4
 8014c58:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8014c5c:	462b      	mov	r3, r5
 8014c5e:	4630      	mov	r0, r6
 8014c60:	4639      	mov	r1, r7
 8014c62:	f7eb fb39 	bl	80002d8 <__aeabi_dsub>
 8014c66:	4602      	mov	r2, r0
 8014c68:	460b      	mov	r3, r1
 8014c6a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8014c6e:	f7eb ff7b 	bl	8000b68 <__aeabi_dcmpgt>
 8014c72:	2800      	cmp	r0, #0
 8014c74:	f47f adfe 	bne.w	8014874 <__ieee754_pow+0x36c>
 8014c78:	4aa3      	ldr	r2, [pc, #652]	; (8014f08 <__ieee754_pow+0xa00>)
 8014c7a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8014c7e:	4293      	cmp	r3, r2
 8014c80:	f340 810a 	ble.w	8014e98 <__ieee754_pow+0x990>
 8014c84:	151b      	asrs	r3, r3, #20
 8014c86:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8014c8a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8014c8e:	fa4a f303 	asr.w	r3, sl, r3
 8014c92:	445b      	add	r3, fp
 8014c94:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8014c98:	4e9c      	ldr	r6, [pc, #624]	; (8014f0c <__ieee754_pow+0xa04>)
 8014c9a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8014c9e:	4116      	asrs	r6, r2
 8014ca0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8014ca4:	2000      	movs	r0, #0
 8014ca6:	ea23 0106 	bic.w	r1, r3, r6
 8014caa:	f1c2 0214 	rsb	r2, r2, #20
 8014cae:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8014cb2:	fa4a fa02 	asr.w	sl, sl, r2
 8014cb6:	f1bb 0f00 	cmp.w	fp, #0
 8014cba:	4602      	mov	r2, r0
 8014cbc:	460b      	mov	r3, r1
 8014cbe:	4620      	mov	r0, r4
 8014cc0:	4629      	mov	r1, r5
 8014cc2:	bfb8      	it	lt
 8014cc4:	f1ca 0a00 	rsblt	sl, sl, #0
 8014cc8:	f7eb fb06 	bl	80002d8 <__aeabi_dsub>
 8014ccc:	e9cd 0100 	strd	r0, r1, [sp]
 8014cd0:	4642      	mov	r2, r8
 8014cd2:	464b      	mov	r3, r9
 8014cd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014cd8:	f7eb fb00 	bl	80002dc <__adddf3>
 8014cdc:	2000      	movs	r0, #0
 8014cde:	a378      	add	r3, pc, #480	; (adr r3, 8014ec0 <__ieee754_pow+0x9b8>)
 8014ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ce4:	4604      	mov	r4, r0
 8014ce6:	460d      	mov	r5, r1
 8014ce8:	f7eb fcae 	bl	8000648 <__aeabi_dmul>
 8014cec:	e9dd 2300 	ldrd	r2, r3, [sp]
 8014cf0:	4606      	mov	r6, r0
 8014cf2:	460f      	mov	r7, r1
 8014cf4:	4620      	mov	r0, r4
 8014cf6:	4629      	mov	r1, r5
 8014cf8:	f7eb faee 	bl	80002d8 <__aeabi_dsub>
 8014cfc:	4602      	mov	r2, r0
 8014cfe:	460b      	mov	r3, r1
 8014d00:	4640      	mov	r0, r8
 8014d02:	4649      	mov	r1, r9
 8014d04:	f7eb fae8 	bl	80002d8 <__aeabi_dsub>
 8014d08:	a36f      	add	r3, pc, #444	; (adr r3, 8014ec8 <__ieee754_pow+0x9c0>)
 8014d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d0e:	f7eb fc9b 	bl	8000648 <__aeabi_dmul>
 8014d12:	a36f      	add	r3, pc, #444	; (adr r3, 8014ed0 <__ieee754_pow+0x9c8>)
 8014d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d18:	4680      	mov	r8, r0
 8014d1a:	4689      	mov	r9, r1
 8014d1c:	4620      	mov	r0, r4
 8014d1e:	4629      	mov	r1, r5
 8014d20:	f7eb fc92 	bl	8000648 <__aeabi_dmul>
 8014d24:	4602      	mov	r2, r0
 8014d26:	460b      	mov	r3, r1
 8014d28:	4640      	mov	r0, r8
 8014d2a:	4649      	mov	r1, r9
 8014d2c:	f7eb fad6 	bl	80002dc <__adddf3>
 8014d30:	4604      	mov	r4, r0
 8014d32:	460d      	mov	r5, r1
 8014d34:	4602      	mov	r2, r0
 8014d36:	460b      	mov	r3, r1
 8014d38:	4630      	mov	r0, r6
 8014d3a:	4639      	mov	r1, r7
 8014d3c:	f7eb face 	bl	80002dc <__adddf3>
 8014d40:	4632      	mov	r2, r6
 8014d42:	463b      	mov	r3, r7
 8014d44:	4680      	mov	r8, r0
 8014d46:	4689      	mov	r9, r1
 8014d48:	f7eb fac6 	bl	80002d8 <__aeabi_dsub>
 8014d4c:	4602      	mov	r2, r0
 8014d4e:	460b      	mov	r3, r1
 8014d50:	4620      	mov	r0, r4
 8014d52:	4629      	mov	r1, r5
 8014d54:	f7eb fac0 	bl	80002d8 <__aeabi_dsub>
 8014d58:	4642      	mov	r2, r8
 8014d5a:	4606      	mov	r6, r0
 8014d5c:	460f      	mov	r7, r1
 8014d5e:	464b      	mov	r3, r9
 8014d60:	4640      	mov	r0, r8
 8014d62:	4649      	mov	r1, r9
 8014d64:	f7eb fc70 	bl	8000648 <__aeabi_dmul>
 8014d68:	a35b      	add	r3, pc, #364	; (adr r3, 8014ed8 <__ieee754_pow+0x9d0>)
 8014d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d6e:	4604      	mov	r4, r0
 8014d70:	460d      	mov	r5, r1
 8014d72:	f7eb fc69 	bl	8000648 <__aeabi_dmul>
 8014d76:	a35a      	add	r3, pc, #360	; (adr r3, 8014ee0 <__ieee754_pow+0x9d8>)
 8014d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d7c:	f7eb faac 	bl	80002d8 <__aeabi_dsub>
 8014d80:	4622      	mov	r2, r4
 8014d82:	462b      	mov	r3, r5
 8014d84:	f7eb fc60 	bl	8000648 <__aeabi_dmul>
 8014d88:	a357      	add	r3, pc, #348	; (adr r3, 8014ee8 <__ieee754_pow+0x9e0>)
 8014d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014d8e:	f7eb faa5 	bl	80002dc <__adddf3>
 8014d92:	4622      	mov	r2, r4
 8014d94:	462b      	mov	r3, r5
 8014d96:	f7eb fc57 	bl	8000648 <__aeabi_dmul>
 8014d9a:	a355      	add	r3, pc, #340	; (adr r3, 8014ef0 <__ieee754_pow+0x9e8>)
 8014d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014da0:	f7eb fa9a 	bl	80002d8 <__aeabi_dsub>
 8014da4:	4622      	mov	r2, r4
 8014da6:	462b      	mov	r3, r5
 8014da8:	f7eb fc4e 	bl	8000648 <__aeabi_dmul>
 8014dac:	a352      	add	r3, pc, #328	; (adr r3, 8014ef8 <__ieee754_pow+0x9f0>)
 8014dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014db2:	f7eb fa93 	bl	80002dc <__adddf3>
 8014db6:	4622      	mov	r2, r4
 8014db8:	462b      	mov	r3, r5
 8014dba:	f7eb fc45 	bl	8000648 <__aeabi_dmul>
 8014dbe:	4602      	mov	r2, r0
 8014dc0:	460b      	mov	r3, r1
 8014dc2:	4640      	mov	r0, r8
 8014dc4:	4649      	mov	r1, r9
 8014dc6:	f7eb fa87 	bl	80002d8 <__aeabi_dsub>
 8014dca:	4604      	mov	r4, r0
 8014dcc:	460d      	mov	r5, r1
 8014dce:	4602      	mov	r2, r0
 8014dd0:	460b      	mov	r3, r1
 8014dd2:	4640      	mov	r0, r8
 8014dd4:	4649      	mov	r1, r9
 8014dd6:	f7eb fc37 	bl	8000648 <__aeabi_dmul>
 8014dda:	2200      	movs	r2, #0
 8014ddc:	e9cd 0100 	strd	r0, r1, [sp]
 8014de0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8014de4:	4620      	mov	r0, r4
 8014de6:	4629      	mov	r1, r5
 8014de8:	f7eb fa76 	bl	80002d8 <__aeabi_dsub>
 8014dec:	4602      	mov	r2, r0
 8014dee:	460b      	mov	r3, r1
 8014df0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014df4:	f7eb fd52 	bl	800089c <__aeabi_ddiv>
 8014df8:	4632      	mov	r2, r6
 8014dfa:	4604      	mov	r4, r0
 8014dfc:	460d      	mov	r5, r1
 8014dfe:	463b      	mov	r3, r7
 8014e00:	4640      	mov	r0, r8
 8014e02:	4649      	mov	r1, r9
 8014e04:	f7eb fc20 	bl	8000648 <__aeabi_dmul>
 8014e08:	4632      	mov	r2, r6
 8014e0a:	463b      	mov	r3, r7
 8014e0c:	f7eb fa66 	bl	80002dc <__adddf3>
 8014e10:	4602      	mov	r2, r0
 8014e12:	460b      	mov	r3, r1
 8014e14:	4620      	mov	r0, r4
 8014e16:	4629      	mov	r1, r5
 8014e18:	f7eb fa5e 	bl	80002d8 <__aeabi_dsub>
 8014e1c:	4642      	mov	r2, r8
 8014e1e:	464b      	mov	r3, r9
 8014e20:	f7eb fa5a 	bl	80002d8 <__aeabi_dsub>
 8014e24:	4602      	mov	r2, r0
 8014e26:	460b      	mov	r3, r1
 8014e28:	2000      	movs	r0, #0
 8014e2a:	4939      	ldr	r1, [pc, #228]	; (8014f10 <__ieee754_pow+0xa08>)
 8014e2c:	f7eb fa54 	bl	80002d8 <__aeabi_dsub>
 8014e30:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8014e34:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8014e38:	4602      	mov	r2, r0
 8014e3a:	460b      	mov	r3, r1
 8014e3c:	da2f      	bge.n	8014e9e <__ieee754_pow+0x996>
 8014e3e:	4650      	mov	r0, sl
 8014e40:	ec43 2b10 	vmov	d0, r2, r3
 8014e44:	f000 f9c0 	bl	80151c8 <scalbn>
 8014e48:	ec51 0b10 	vmov	r0, r1, d0
 8014e4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8014e50:	f7ff bbf1 	b.w	8014636 <__ieee754_pow+0x12e>
 8014e54:	4b2f      	ldr	r3, [pc, #188]	; (8014f14 <__ieee754_pow+0xa0c>)
 8014e56:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8014e5a:	429e      	cmp	r6, r3
 8014e5c:	f77f af0c 	ble.w	8014c78 <__ieee754_pow+0x770>
 8014e60:	4b2d      	ldr	r3, [pc, #180]	; (8014f18 <__ieee754_pow+0xa10>)
 8014e62:	440b      	add	r3, r1
 8014e64:	4303      	orrs	r3, r0
 8014e66:	d00b      	beq.n	8014e80 <__ieee754_pow+0x978>
 8014e68:	a325      	add	r3, pc, #148	; (adr r3, 8014f00 <__ieee754_pow+0x9f8>)
 8014e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8014e72:	f7eb fbe9 	bl	8000648 <__aeabi_dmul>
 8014e76:	a322      	add	r3, pc, #136	; (adr r3, 8014f00 <__ieee754_pow+0x9f8>)
 8014e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e7c:	f7ff bbdb 	b.w	8014636 <__ieee754_pow+0x12e>
 8014e80:	4622      	mov	r2, r4
 8014e82:	462b      	mov	r3, r5
 8014e84:	f7eb fa28 	bl	80002d8 <__aeabi_dsub>
 8014e88:	4642      	mov	r2, r8
 8014e8a:	464b      	mov	r3, r9
 8014e8c:	f7eb fe62 	bl	8000b54 <__aeabi_dcmpge>
 8014e90:	2800      	cmp	r0, #0
 8014e92:	f43f aef1 	beq.w	8014c78 <__ieee754_pow+0x770>
 8014e96:	e7e7      	b.n	8014e68 <__ieee754_pow+0x960>
 8014e98:	f04f 0a00 	mov.w	sl, #0
 8014e9c:	e718      	b.n	8014cd0 <__ieee754_pow+0x7c8>
 8014e9e:	4621      	mov	r1, r4
 8014ea0:	e7d4      	b.n	8014e4c <__ieee754_pow+0x944>
 8014ea2:	2000      	movs	r0, #0
 8014ea4:	491a      	ldr	r1, [pc, #104]	; (8014f10 <__ieee754_pow+0xa08>)
 8014ea6:	f7ff bb8f 	b.w	80145c8 <__ieee754_pow+0xc0>
 8014eaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8014eae:	f7ff bb8b 	b.w	80145c8 <__ieee754_pow+0xc0>
 8014eb2:	4630      	mov	r0, r6
 8014eb4:	4639      	mov	r1, r7
 8014eb6:	f7ff bb87 	b.w	80145c8 <__ieee754_pow+0xc0>
 8014eba:	4693      	mov	fp, r2
 8014ebc:	f7ff bb98 	b.w	80145f0 <__ieee754_pow+0xe8>
 8014ec0:	00000000 	.word	0x00000000
 8014ec4:	3fe62e43 	.word	0x3fe62e43
 8014ec8:	fefa39ef 	.word	0xfefa39ef
 8014ecc:	3fe62e42 	.word	0x3fe62e42
 8014ed0:	0ca86c39 	.word	0x0ca86c39
 8014ed4:	be205c61 	.word	0xbe205c61
 8014ed8:	72bea4d0 	.word	0x72bea4d0
 8014edc:	3e663769 	.word	0x3e663769
 8014ee0:	c5d26bf1 	.word	0xc5d26bf1
 8014ee4:	3ebbbd41 	.word	0x3ebbbd41
 8014ee8:	af25de2c 	.word	0xaf25de2c
 8014eec:	3f11566a 	.word	0x3f11566a
 8014ef0:	16bebd93 	.word	0x16bebd93
 8014ef4:	3f66c16c 	.word	0x3f66c16c
 8014ef8:	5555553e 	.word	0x5555553e
 8014efc:	3fc55555 	.word	0x3fc55555
 8014f00:	c2f8f359 	.word	0xc2f8f359
 8014f04:	01a56e1f 	.word	0x01a56e1f
 8014f08:	3fe00000 	.word	0x3fe00000
 8014f0c:	000fffff 	.word	0x000fffff
 8014f10:	3ff00000 	.word	0x3ff00000
 8014f14:	4090cbff 	.word	0x4090cbff
 8014f18:	3f6f3400 	.word	0x3f6f3400
 8014f1c:	652b82fe 	.word	0x652b82fe
 8014f20:	3c971547 	.word	0x3c971547

08014f24 <__ieee754_sqrt>:
 8014f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f28:	4955      	ldr	r1, [pc, #340]	; (8015080 <__ieee754_sqrt+0x15c>)
 8014f2a:	ec55 4b10 	vmov	r4, r5, d0
 8014f2e:	43a9      	bics	r1, r5
 8014f30:	462b      	mov	r3, r5
 8014f32:	462a      	mov	r2, r5
 8014f34:	d112      	bne.n	8014f5c <__ieee754_sqrt+0x38>
 8014f36:	ee10 2a10 	vmov	r2, s0
 8014f3a:	ee10 0a10 	vmov	r0, s0
 8014f3e:	4629      	mov	r1, r5
 8014f40:	f7eb fb82 	bl	8000648 <__aeabi_dmul>
 8014f44:	4602      	mov	r2, r0
 8014f46:	460b      	mov	r3, r1
 8014f48:	4620      	mov	r0, r4
 8014f4a:	4629      	mov	r1, r5
 8014f4c:	f7eb f9c6 	bl	80002dc <__adddf3>
 8014f50:	4604      	mov	r4, r0
 8014f52:	460d      	mov	r5, r1
 8014f54:	ec45 4b10 	vmov	d0, r4, r5
 8014f58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f5c:	2d00      	cmp	r5, #0
 8014f5e:	ee10 0a10 	vmov	r0, s0
 8014f62:	4621      	mov	r1, r4
 8014f64:	dc0f      	bgt.n	8014f86 <__ieee754_sqrt+0x62>
 8014f66:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8014f6a:	4330      	orrs	r0, r6
 8014f6c:	d0f2      	beq.n	8014f54 <__ieee754_sqrt+0x30>
 8014f6e:	b155      	cbz	r5, 8014f86 <__ieee754_sqrt+0x62>
 8014f70:	ee10 2a10 	vmov	r2, s0
 8014f74:	4620      	mov	r0, r4
 8014f76:	4629      	mov	r1, r5
 8014f78:	f7eb f9ae 	bl	80002d8 <__aeabi_dsub>
 8014f7c:	4602      	mov	r2, r0
 8014f7e:	460b      	mov	r3, r1
 8014f80:	f7eb fc8c 	bl	800089c <__aeabi_ddiv>
 8014f84:	e7e4      	b.n	8014f50 <__ieee754_sqrt+0x2c>
 8014f86:	151b      	asrs	r3, r3, #20
 8014f88:	d073      	beq.n	8015072 <__ieee754_sqrt+0x14e>
 8014f8a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8014f8e:	07dd      	lsls	r5, r3, #31
 8014f90:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8014f94:	bf48      	it	mi
 8014f96:	0fc8      	lsrmi	r0, r1, #31
 8014f98:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8014f9c:	bf44      	itt	mi
 8014f9e:	0049      	lslmi	r1, r1, #1
 8014fa0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8014fa4:	2500      	movs	r5, #0
 8014fa6:	1058      	asrs	r0, r3, #1
 8014fa8:	0fcb      	lsrs	r3, r1, #31
 8014faa:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8014fae:	0049      	lsls	r1, r1, #1
 8014fb0:	2316      	movs	r3, #22
 8014fb2:	462c      	mov	r4, r5
 8014fb4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8014fb8:	19a7      	adds	r7, r4, r6
 8014fba:	4297      	cmp	r7, r2
 8014fbc:	bfde      	ittt	le
 8014fbe:	19bc      	addle	r4, r7, r6
 8014fc0:	1bd2      	suble	r2, r2, r7
 8014fc2:	19ad      	addle	r5, r5, r6
 8014fc4:	0fcf      	lsrs	r7, r1, #31
 8014fc6:	3b01      	subs	r3, #1
 8014fc8:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8014fcc:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8014fd0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8014fd4:	d1f0      	bne.n	8014fb8 <__ieee754_sqrt+0x94>
 8014fd6:	f04f 0c20 	mov.w	ip, #32
 8014fda:	469e      	mov	lr, r3
 8014fdc:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8014fe0:	42a2      	cmp	r2, r4
 8014fe2:	eb06 070e 	add.w	r7, r6, lr
 8014fe6:	dc02      	bgt.n	8014fee <__ieee754_sqrt+0xca>
 8014fe8:	d112      	bne.n	8015010 <__ieee754_sqrt+0xec>
 8014fea:	428f      	cmp	r7, r1
 8014fec:	d810      	bhi.n	8015010 <__ieee754_sqrt+0xec>
 8014fee:	2f00      	cmp	r7, #0
 8014ff0:	eb07 0e06 	add.w	lr, r7, r6
 8014ff4:	da42      	bge.n	801507c <__ieee754_sqrt+0x158>
 8014ff6:	f1be 0f00 	cmp.w	lr, #0
 8014ffa:	db3f      	blt.n	801507c <__ieee754_sqrt+0x158>
 8014ffc:	f104 0801 	add.w	r8, r4, #1
 8015000:	1b12      	subs	r2, r2, r4
 8015002:	428f      	cmp	r7, r1
 8015004:	bf88      	it	hi
 8015006:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 801500a:	1bc9      	subs	r1, r1, r7
 801500c:	4433      	add	r3, r6
 801500e:	4644      	mov	r4, r8
 8015010:	0052      	lsls	r2, r2, #1
 8015012:	f1bc 0c01 	subs.w	ip, ip, #1
 8015016:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 801501a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 801501e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8015022:	d1dd      	bne.n	8014fe0 <__ieee754_sqrt+0xbc>
 8015024:	430a      	orrs	r2, r1
 8015026:	d006      	beq.n	8015036 <__ieee754_sqrt+0x112>
 8015028:	1c5c      	adds	r4, r3, #1
 801502a:	bf13      	iteet	ne
 801502c:	3301      	addne	r3, #1
 801502e:	3501      	addeq	r5, #1
 8015030:	4663      	moveq	r3, ip
 8015032:	f023 0301 	bicne.w	r3, r3, #1
 8015036:	106a      	asrs	r2, r5, #1
 8015038:	085b      	lsrs	r3, r3, #1
 801503a:	07e9      	lsls	r1, r5, #31
 801503c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8015040:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8015044:	bf48      	it	mi
 8015046:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 801504a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 801504e:	461c      	mov	r4, r3
 8015050:	e780      	b.n	8014f54 <__ieee754_sqrt+0x30>
 8015052:	0aca      	lsrs	r2, r1, #11
 8015054:	3815      	subs	r0, #21
 8015056:	0549      	lsls	r1, r1, #21
 8015058:	2a00      	cmp	r2, #0
 801505a:	d0fa      	beq.n	8015052 <__ieee754_sqrt+0x12e>
 801505c:	02d6      	lsls	r6, r2, #11
 801505e:	d50a      	bpl.n	8015076 <__ieee754_sqrt+0x152>
 8015060:	f1c3 0420 	rsb	r4, r3, #32
 8015064:	fa21 f404 	lsr.w	r4, r1, r4
 8015068:	1e5d      	subs	r5, r3, #1
 801506a:	4099      	lsls	r1, r3
 801506c:	4322      	orrs	r2, r4
 801506e:	1b43      	subs	r3, r0, r5
 8015070:	e78b      	b.n	8014f8a <__ieee754_sqrt+0x66>
 8015072:	4618      	mov	r0, r3
 8015074:	e7f0      	b.n	8015058 <__ieee754_sqrt+0x134>
 8015076:	0052      	lsls	r2, r2, #1
 8015078:	3301      	adds	r3, #1
 801507a:	e7ef      	b.n	801505c <__ieee754_sqrt+0x138>
 801507c:	46a0      	mov	r8, r4
 801507e:	e7bf      	b.n	8015000 <__ieee754_sqrt+0xdc>
 8015080:	7ff00000 	.word	0x7ff00000

08015084 <fabs>:
 8015084:	ec51 0b10 	vmov	r0, r1, d0
 8015088:	ee10 2a10 	vmov	r2, s0
 801508c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8015090:	ec43 2b10 	vmov	d0, r2, r3
 8015094:	4770      	bx	lr

08015096 <finite>:
 8015096:	ee10 3a90 	vmov	r3, s1
 801509a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 801509e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80150a2:	0fc0      	lsrs	r0, r0, #31
 80150a4:	4770      	bx	lr

080150a6 <matherr>:
 80150a6:	2000      	movs	r0, #0
 80150a8:	4770      	bx	lr
 80150aa:	0000      	movs	r0, r0
 80150ac:	0000      	movs	r0, r0
	...

080150b0 <nan>:
 80150b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80150b8 <nan+0x8>
 80150b4:	4770      	bx	lr
 80150b6:	bf00      	nop
 80150b8:	00000000 	.word	0x00000000
 80150bc:	7ff80000 	.word	0x7ff80000

080150c0 <rint>:
 80150c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80150c2:	ec51 0b10 	vmov	r0, r1, d0
 80150c6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80150ca:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80150ce:	2e13      	cmp	r6, #19
 80150d0:	460b      	mov	r3, r1
 80150d2:	ee10 4a10 	vmov	r4, s0
 80150d6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80150da:	dc56      	bgt.n	801518a <rint+0xca>
 80150dc:	2e00      	cmp	r6, #0
 80150de:	da2b      	bge.n	8015138 <rint+0x78>
 80150e0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80150e4:	4302      	orrs	r2, r0
 80150e6:	d023      	beq.n	8015130 <rint+0x70>
 80150e8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80150ec:	4302      	orrs	r2, r0
 80150ee:	4254      	negs	r4, r2
 80150f0:	4314      	orrs	r4, r2
 80150f2:	0c4b      	lsrs	r3, r1, #17
 80150f4:	0b24      	lsrs	r4, r4, #12
 80150f6:	045b      	lsls	r3, r3, #17
 80150f8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80150fc:	ea44 0103 	orr.w	r1, r4, r3
 8015100:	460b      	mov	r3, r1
 8015102:	492f      	ldr	r1, [pc, #188]	; (80151c0 <rint+0x100>)
 8015104:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8015108:	e9d1 6700 	ldrd	r6, r7, [r1]
 801510c:	4602      	mov	r2, r0
 801510e:	4639      	mov	r1, r7
 8015110:	4630      	mov	r0, r6
 8015112:	f7eb f8e3 	bl	80002dc <__adddf3>
 8015116:	e9cd 0100 	strd	r0, r1, [sp]
 801511a:	463b      	mov	r3, r7
 801511c:	4632      	mov	r2, r6
 801511e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015122:	f7eb f8d9 	bl	80002d8 <__aeabi_dsub>
 8015126:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801512a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801512e:	4639      	mov	r1, r7
 8015130:	ec41 0b10 	vmov	d0, r0, r1
 8015134:	b003      	add	sp, #12
 8015136:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015138:	4a22      	ldr	r2, [pc, #136]	; (80151c4 <rint+0x104>)
 801513a:	4132      	asrs	r2, r6
 801513c:	ea01 0702 	and.w	r7, r1, r2
 8015140:	4307      	orrs	r7, r0
 8015142:	d0f5      	beq.n	8015130 <rint+0x70>
 8015144:	0852      	lsrs	r2, r2, #1
 8015146:	4011      	ands	r1, r2
 8015148:	430c      	orrs	r4, r1
 801514a:	d00b      	beq.n	8015164 <rint+0xa4>
 801514c:	ea23 0202 	bic.w	r2, r3, r2
 8015150:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8015154:	2e13      	cmp	r6, #19
 8015156:	fa43 f306 	asr.w	r3, r3, r6
 801515a:	bf0c      	ite	eq
 801515c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8015160:	2400      	movne	r4, #0
 8015162:	4313      	orrs	r3, r2
 8015164:	4916      	ldr	r1, [pc, #88]	; (80151c0 <rint+0x100>)
 8015166:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801516a:	4622      	mov	r2, r4
 801516c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8015170:	4620      	mov	r0, r4
 8015172:	4629      	mov	r1, r5
 8015174:	f7eb f8b2 	bl	80002dc <__adddf3>
 8015178:	e9cd 0100 	strd	r0, r1, [sp]
 801517c:	4622      	mov	r2, r4
 801517e:	462b      	mov	r3, r5
 8015180:	e9dd 0100 	ldrd	r0, r1, [sp]
 8015184:	f7eb f8a8 	bl	80002d8 <__aeabi_dsub>
 8015188:	e7d2      	b.n	8015130 <rint+0x70>
 801518a:	2e33      	cmp	r6, #51	; 0x33
 801518c:	dd07      	ble.n	801519e <rint+0xde>
 801518e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8015192:	d1cd      	bne.n	8015130 <rint+0x70>
 8015194:	ee10 2a10 	vmov	r2, s0
 8015198:	f7eb f8a0 	bl	80002dc <__adddf3>
 801519c:	e7c8      	b.n	8015130 <rint+0x70>
 801519e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80151a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80151a6:	40f2      	lsrs	r2, r6
 80151a8:	4210      	tst	r0, r2
 80151aa:	d0c1      	beq.n	8015130 <rint+0x70>
 80151ac:	0852      	lsrs	r2, r2, #1
 80151ae:	4210      	tst	r0, r2
 80151b0:	bf1f      	itttt	ne
 80151b2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80151b6:	ea20 0202 	bicne.w	r2, r0, r2
 80151ba:	4134      	asrne	r4, r6
 80151bc:	4314      	orrne	r4, r2
 80151be:	e7d1      	b.n	8015164 <rint+0xa4>
 80151c0:	08016a58 	.word	0x08016a58
 80151c4:	000fffff 	.word	0x000fffff

080151c8 <scalbn>:
 80151c8:	b570      	push	{r4, r5, r6, lr}
 80151ca:	ec55 4b10 	vmov	r4, r5, d0
 80151ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80151d2:	4606      	mov	r6, r0
 80151d4:	462b      	mov	r3, r5
 80151d6:	b9aa      	cbnz	r2, 8015204 <scalbn+0x3c>
 80151d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80151dc:	4323      	orrs	r3, r4
 80151de:	d03b      	beq.n	8015258 <scalbn+0x90>
 80151e0:	4b31      	ldr	r3, [pc, #196]	; (80152a8 <scalbn+0xe0>)
 80151e2:	4629      	mov	r1, r5
 80151e4:	2200      	movs	r2, #0
 80151e6:	ee10 0a10 	vmov	r0, s0
 80151ea:	f7eb fa2d 	bl	8000648 <__aeabi_dmul>
 80151ee:	4b2f      	ldr	r3, [pc, #188]	; (80152ac <scalbn+0xe4>)
 80151f0:	429e      	cmp	r6, r3
 80151f2:	4604      	mov	r4, r0
 80151f4:	460d      	mov	r5, r1
 80151f6:	da12      	bge.n	801521e <scalbn+0x56>
 80151f8:	a327      	add	r3, pc, #156	; (adr r3, 8015298 <scalbn+0xd0>)
 80151fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80151fe:	f7eb fa23 	bl	8000648 <__aeabi_dmul>
 8015202:	e009      	b.n	8015218 <scalbn+0x50>
 8015204:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8015208:	428a      	cmp	r2, r1
 801520a:	d10c      	bne.n	8015226 <scalbn+0x5e>
 801520c:	ee10 2a10 	vmov	r2, s0
 8015210:	4620      	mov	r0, r4
 8015212:	4629      	mov	r1, r5
 8015214:	f7eb f862 	bl	80002dc <__adddf3>
 8015218:	4604      	mov	r4, r0
 801521a:	460d      	mov	r5, r1
 801521c:	e01c      	b.n	8015258 <scalbn+0x90>
 801521e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8015222:	460b      	mov	r3, r1
 8015224:	3a36      	subs	r2, #54	; 0x36
 8015226:	4432      	add	r2, r6
 8015228:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801522c:	428a      	cmp	r2, r1
 801522e:	dd0b      	ble.n	8015248 <scalbn+0x80>
 8015230:	ec45 4b11 	vmov	d1, r4, r5
 8015234:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80152a0 <scalbn+0xd8>
 8015238:	f000 f9f0 	bl	801561c <copysign>
 801523c:	a318      	add	r3, pc, #96	; (adr r3, 80152a0 <scalbn+0xd8>)
 801523e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015242:	ec51 0b10 	vmov	r0, r1, d0
 8015246:	e7da      	b.n	80151fe <scalbn+0x36>
 8015248:	2a00      	cmp	r2, #0
 801524a:	dd08      	ble.n	801525e <scalbn+0x96>
 801524c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015250:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8015254:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8015258:	ec45 4b10 	vmov	d0, r4, r5
 801525c:	bd70      	pop	{r4, r5, r6, pc}
 801525e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8015262:	da0d      	bge.n	8015280 <scalbn+0xb8>
 8015264:	f24c 3350 	movw	r3, #50000	; 0xc350
 8015268:	429e      	cmp	r6, r3
 801526a:	ec45 4b11 	vmov	d1, r4, r5
 801526e:	dce1      	bgt.n	8015234 <scalbn+0x6c>
 8015270:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8015298 <scalbn+0xd0>
 8015274:	f000 f9d2 	bl	801561c <copysign>
 8015278:	a307      	add	r3, pc, #28	; (adr r3, 8015298 <scalbn+0xd0>)
 801527a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801527e:	e7e0      	b.n	8015242 <scalbn+0x7a>
 8015280:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8015284:	3236      	adds	r2, #54	; 0x36
 8015286:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801528a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801528e:	4620      	mov	r0, r4
 8015290:	4629      	mov	r1, r5
 8015292:	2200      	movs	r2, #0
 8015294:	4b06      	ldr	r3, [pc, #24]	; (80152b0 <scalbn+0xe8>)
 8015296:	e7b2      	b.n	80151fe <scalbn+0x36>
 8015298:	c2f8f359 	.word	0xc2f8f359
 801529c:	01a56e1f 	.word	0x01a56e1f
 80152a0:	8800759c 	.word	0x8800759c
 80152a4:	7e37e43c 	.word	0x7e37e43c
 80152a8:	43500000 	.word	0x43500000
 80152ac:	ffff3cb0 	.word	0xffff3cb0
 80152b0:	3c900000 	.word	0x3c900000
 80152b4:	00000000 	.word	0x00000000

080152b8 <__ieee754_log>:
 80152b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80152bc:	ec51 0b10 	vmov	r0, r1, d0
 80152c0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80152c4:	b087      	sub	sp, #28
 80152c6:	460d      	mov	r5, r1
 80152c8:	da27      	bge.n	801531a <__ieee754_log+0x62>
 80152ca:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80152ce:	4303      	orrs	r3, r0
 80152d0:	ee10 2a10 	vmov	r2, s0
 80152d4:	d10a      	bne.n	80152ec <__ieee754_log+0x34>
 80152d6:	49cc      	ldr	r1, [pc, #816]	; (8015608 <__ieee754_log+0x350>)
 80152d8:	2200      	movs	r2, #0
 80152da:	2300      	movs	r3, #0
 80152dc:	2000      	movs	r0, #0
 80152de:	f7eb fadd 	bl	800089c <__aeabi_ddiv>
 80152e2:	ec41 0b10 	vmov	d0, r0, r1
 80152e6:	b007      	add	sp, #28
 80152e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80152ec:	2900      	cmp	r1, #0
 80152ee:	da05      	bge.n	80152fc <__ieee754_log+0x44>
 80152f0:	460b      	mov	r3, r1
 80152f2:	f7ea fff1 	bl	80002d8 <__aeabi_dsub>
 80152f6:	2200      	movs	r2, #0
 80152f8:	2300      	movs	r3, #0
 80152fa:	e7f0      	b.n	80152de <__ieee754_log+0x26>
 80152fc:	4bc3      	ldr	r3, [pc, #780]	; (801560c <__ieee754_log+0x354>)
 80152fe:	2200      	movs	r2, #0
 8015300:	f7eb f9a2 	bl	8000648 <__aeabi_dmul>
 8015304:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8015308:	460d      	mov	r5, r1
 801530a:	4ac1      	ldr	r2, [pc, #772]	; (8015610 <__ieee754_log+0x358>)
 801530c:	4295      	cmp	r5, r2
 801530e:	dd06      	ble.n	801531e <__ieee754_log+0x66>
 8015310:	4602      	mov	r2, r0
 8015312:	460b      	mov	r3, r1
 8015314:	f7ea ffe2 	bl	80002dc <__adddf3>
 8015318:	e7e3      	b.n	80152e2 <__ieee754_log+0x2a>
 801531a:	2300      	movs	r3, #0
 801531c:	e7f5      	b.n	801530a <__ieee754_log+0x52>
 801531e:	152c      	asrs	r4, r5, #20
 8015320:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8015324:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8015328:	441c      	add	r4, r3
 801532a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801532e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8015332:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8015336:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801533a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801533e:	ea42 0105 	orr.w	r1, r2, r5
 8015342:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8015346:	2200      	movs	r2, #0
 8015348:	4bb2      	ldr	r3, [pc, #712]	; (8015614 <__ieee754_log+0x35c>)
 801534a:	f7ea ffc5 	bl	80002d8 <__aeabi_dsub>
 801534e:	1cab      	adds	r3, r5, #2
 8015350:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8015354:	2b02      	cmp	r3, #2
 8015356:	4682      	mov	sl, r0
 8015358:	468b      	mov	fp, r1
 801535a:	f04f 0200 	mov.w	r2, #0
 801535e:	dc53      	bgt.n	8015408 <__ieee754_log+0x150>
 8015360:	2300      	movs	r3, #0
 8015362:	f7eb fbd9 	bl	8000b18 <__aeabi_dcmpeq>
 8015366:	b1d0      	cbz	r0, 801539e <__ieee754_log+0xe6>
 8015368:	2c00      	cmp	r4, #0
 801536a:	f000 8120 	beq.w	80155ae <__ieee754_log+0x2f6>
 801536e:	4620      	mov	r0, r4
 8015370:	f7eb f900 	bl	8000574 <__aeabi_i2d>
 8015374:	a390      	add	r3, pc, #576	; (adr r3, 80155b8 <__ieee754_log+0x300>)
 8015376:	e9d3 2300 	ldrd	r2, r3, [r3]
 801537a:	4606      	mov	r6, r0
 801537c:	460f      	mov	r7, r1
 801537e:	f7eb f963 	bl	8000648 <__aeabi_dmul>
 8015382:	a38f      	add	r3, pc, #572	; (adr r3, 80155c0 <__ieee754_log+0x308>)
 8015384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015388:	4604      	mov	r4, r0
 801538a:	460d      	mov	r5, r1
 801538c:	4630      	mov	r0, r6
 801538e:	4639      	mov	r1, r7
 8015390:	f7eb f95a 	bl	8000648 <__aeabi_dmul>
 8015394:	4602      	mov	r2, r0
 8015396:	460b      	mov	r3, r1
 8015398:	4620      	mov	r0, r4
 801539a:	4629      	mov	r1, r5
 801539c:	e7ba      	b.n	8015314 <__ieee754_log+0x5c>
 801539e:	a38a      	add	r3, pc, #552	; (adr r3, 80155c8 <__ieee754_log+0x310>)
 80153a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153a4:	4650      	mov	r0, sl
 80153a6:	4659      	mov	r1, fp
 80153a8:	f7eb f94e 	bl	8000648 <__aeabi_dmul>
 80153ac:	4602      	mov	r2, r0
 80153ae:	460b      	mov	r3, r1
 80153b0:	2000      	movs	r0, #0
 80153b2:	4999      	ldr	r1, [pc, #612]	; (8015618 <__ieee754_log+0x360>)
 80153b4:	f7ea ff90 	bl	80002d8 <__aeabi_dsub>
 80153b8:	4652      	mov	r2, sl
 80153ba:	4606      	mov	r6, r0
 80153bc:	460f      	mov	r7, r1
 80153be:	465b      	mov	r3, fp
 80153c0:	4650      	mov	r0, sl
 80153c2:	4659      	mov	r1, fp
 80153c4:	f7eb f940 	bl	8000648 <__aeabi_dmul>
 80153c8:	4602      	mov	r2, r0
 80153ca:	460b      	mov	r3, r1
 80153cc:	4630      	mov	r0, r6
 80153ce:	4639      	mov	r1, r7
 80153d0:	f7eb f93a 	bl	8000648 <__aeabi_dmul>
 80153d4:	4606      	mov	r6, r0
 80153d6:	460f      	mov	r7, r1
 80153d8:	b914      	cbnz	r4, 80153e0 <__ieee754_log+0x128>
 80153da:	4632      	mov	r2, r6
 80153dc:	463b      	mov	r3, r7
 80153de:	e0a0      	b.n	8015522 <__ieee754_log+0x26a>
 80153e0:	4620      	mov	r0, r4
 80153e2:	f7eb f8c7 	bl	8000574 <__aeabi_i2d>
 80153e6:	a374      	add	r3, pc, #464	; (adr r3, 80155b8 <__ieee754_log+0x300>)
 80153e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153ec:	4680      	mov	r8, r0
 80153ee:	4689      	mov	r9, r1
 80153f0:	f7eb f92a 	bl	8000648 <__aeabi_dmul>
 80153f4:	a372      	add	r3, pc, #456	; (adr r3, 80155c0 <__ieee754_log+0x308>)
 80153f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80153fa:	4604      	mov	r4, r0
 80153fc:	460d      	mov	r5, r1
 80153fe:	4640      	mov	r0, r8
 8015400:	4649      	mov	r1, r9
 8015402:	f7eb f921 	bl	8000648 <__aeabi_dmul>
 8015406:	e0a5      	b.n	8015554 <__ieee754_log+0x29c>
 8015408:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801540c:	f7ea ff66 	bl	80002dc <__adddf3>
 8015410:	4602      	mov	r2, r0
 8015412:	460b      	mov	r3, r1
 8015414:	4650      	mov	r0, sl
 8015416:	4659      	mov	r1, fp
 8015418:	f7eb fa40 	bl	800089c <__aeabi_ddiv>
 801541c:	e9cd 0100 	strd	r0, r1, [sp]
 8015420:	4620      	mov	r0, r4
 8015422:	f7eb f8a7 	bl	8000574 <__aeabi_i2d>
 8015426:	e9dd 2300 	ldrd	r2, r3, [sp]
 801542a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801542e:	4610      	mov	r0, r2
 8015430:	4619      	mov	r1, r3
 8015432:	f7eb f909 	bl	8000648 <__aeabi_dmul>
 8015436:	4602      	mov	r2, r0
 8015438:	460b      	mov	r3, r1
 801543a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801543e:	f7eb f903 	bl	8000648 <__aeabi_dmul>
 8015442:	a363      	add	r3, pc, #396	; (adr r3, 80155d0 <__ieee754_log+0x318>)
 8015444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015448:	4680      	mov	r8, r0
 801544a:	4689      	mov	r9, r1
 801544c:	f7eb f8fc 	bl	8000648 <__aeabi_dmul>
 8015450:	a361      	add	r3, pc, #388	; (adr r3, 80155d8 <__ieee754_log+0x320>)
 8015452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015456:	f7ea ff41 	bl	80002dc <__adddf3>
 801545a:	4642      	mov	r2, r8
 801545c:	464b      	mov	r3, r9
 801545e:	f7eb f8f3 	bl	8000648 <__aeabi_dmul>
 8015462:	a35f      	add	r3, pc, #380	; (adr r3, 80155e0 <__ieee754_log+0x328>)
 8015464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015468:	f7ea ff38 	bl	80002dc <__adddf3>
 801546c:	4642      	mov	r2, r8
 801546e:	464b      	mov	r3, r9
 8015470:	f7eb f8ea 	bl	8000648 <__aeabi_dmul>
 8015474:	a35c      	add	r3, pc, #368	; (adr r3, 80155e8 <__ieee754_log+0x330>)
 8015476:	e9d3 2300 	ldrd	r2, r3, [r3]
 801547a:	f7ea ff2f 	bl	80002dc <__adddf3>
 801547e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8015482:	f7eb f8e1 	bl	8000648 <__aeabi_dmul>
 8015486:	a35a      	add	r3, pc, #360	; (adr r3, 80155f0 <__ieee754_log+0x338>)
 8015488:	e9d3 2300 	ldrd	r2, r3, [r3]
 801548c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8015490:	4640      	mov	r0, r8
 8015492:	4649      	mov	r1, r9
 8015494:	f7eb f8d8 	bl	8000648 <__aeabi_dmul>
 8015498:	a357      	add	r3, pc, #348	; (adr r3, 80155f8 <__ieee754_log+0x340>)
 801549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801549e:	f7ea ff1d 	bl	80002dc <__adddf3>
 80154a2:	4642      	mov	r2, r8
 80154a4:	464b      	mov	r3, r9
 80154a6:	f7eb f8cf 	bl	8000648 <__aeabi_dmul>
 80154aa:	a355      	add	r3, pc, #340	; (adr r3, 8015600 <__ieee754_log+0x348>)
 80154ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80154b0:	f7ea ff14 	bl	80002dc <__adddf3>
 80154b4:	4642      	mov	r2, r8
 80154b6:	464b      	mov	r3, r9
 80154b8:	f7eb f8c6 	bl	8000648 <__aeabi_dmul>
 80154bc:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 80154c0:	4602      	mov	r2, r0
 80154c2:	460b      	mov	r3, r1
 80154c4:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80154c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80154cc:	f7ea ff06 	bl	80002dc <__adddf3>
 80154d0:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 80154d4:	3551      	adds	r5, #81	; 0x51
 80154d6:	4335      	orrs	r5, r6
 80154d8:	2d00      	cmp	r5, #0
 80154da:	4680      	mov	r8, r0
 80154dc:	4689      	mov	r9, r1
 80154de:	dd48      	ble.n	8015572 <__ieee754_log+0x2ba>
 80154e0:	2200      	movs	r2, #0
 80154e2:	4b4d      	ldr	r3, [pc, #308]	; (8015618 <__ieee754_log+0x360>)
 80154e4:	4650      	mov	r0, sl
 80154e6:	4659      	mov	r1, fp
 80154e8:	f7eb f8ae 	bl	8000648 <__aeabi_dmul>
 80154ec:	4652      	mov	r2, sl
 80154ee:	465b      	mov	r3, fp
 80154f0:	f7eb f8aa 	bl	8000648 <__aeabi_dmul>
 80154f4:	4602      	mov	r2, r0
 80154f6:	460b      	mov	r3, r1
 80154f8:	4606      	mov	r6, r0
 80154fa:	460f      	mov	r7, r1
 80154fc:	4640      	mov	r0, r8
 80154fe:	4649      	mov	r1, r9
 8015500:	f7ea feec 	bl	80002dc <__adddf3>
 8015504:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015508:	f7eb f89e 	bl	8000648 <__aeabi_dmul>
 801550c:	4680      	mov	r8, r0
 801550e:	4689      	mov	r9, r1
 8015510:	b964      	cbnz	r4, 801552c <__ieee754_log+0x274>
 8015512:	4602      	mov	r2, r0
 8015514:	460b      	mov	r3, r1
 8015516:	4630      	mov	r0, r6
 8015518:	4639      	mov	r1, r7
 801551a:	f7ea fedd 	bl	80002d8 <__aeabi_dsub>
 801551e:	4602      	mov	r2, r0
 8015520:	460b      	mov	r3, r1
 8015522:	4650      	mov	r0, sl
 8015524:	4659      	mov	r1, fp
 8015526:	f7ea fed7 	bl	80002d8 <__aeabi_dsub>
 801552a:	e6da      	b.n	80152e2 <__ieee754_log+0x2a>
 801552c:	a322      	add	r3, pc, #136	; (adr r3, 80155b8 <__ieee754_log+0x300>)
 801552e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015532:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015536:	f7eb f887 	bl	8000648 <__aeabi_dmul>
 801553a:	a321      	add	r3, pc, #132	; (adr r3, 80155c0 <__ieee754_log+0x308>)
 801553c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015540:	4604      	mov	r4, r0
 8015542:	460d      	mov	r5, r1
 8015544:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8015548:	f7eb f87e 	bl	8000648 <__aeabi_dmul>
 801554c:	4642      	mov	r2, r8
 801554e:	464b      	mov	r3, r9
 8015550:	f7ea fec4 	bl	80002dc <__adddf3>
 8015554:	4602      	mov	r2, r0
 8015556:	460b      	mov	r3, r1
 8015558:	4630      	mov	r0, r6
 801555a:	4639      	mov	r1, r7
 801555c:	f7ea febc 	bl	80002d8 <__aeabi_dsub>
 8015560:	4652      	mov	r2, sl
 8015562:	465b      	mov	r3, fp
 8015564:	f7ea feb8 	bl	80002d8 <__aeabi_dsub>
 8015568:	4602      	mov	r2, r0
 801556a:	460b      	mov	r3, r1
 801556c:	4620      	mov	r0, r4
 801556e:	4629      	mov	r1, r5
 8015570:	e7d9      	b.n	8015526 <__ieee754_log+0x26e>
 8015572:	4602      	mov	r2, r0
 8015574:	460b      	mov	r3, r1
 8015576:	4650      	mov	r0, sl
 8015578:	4659      	mov	r1, fp
 801557a:	f7ea fead 	bl	80002d8 <__aeabi_dsub>
 801557e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8015582:	f7eb f861 	bl	8000648 <__aeabi_dmul>
 8015586:	4606      	mov	r6, r0
 8015588:	460f      	mov	r7, r1
 801558a:	2c00      	cmp	r4, #0
 801558c:	f43f af25 	beq.w	80153da <__ieee754_log+0x122>
 8015590:	a309      	add	r3, pc, #36	; (adr r3, 80155b8 <__ieee754_log+0x300>)
 8015592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015596:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801559a:	f7eb f855 	bl	8000648 <__aeabi_dmul>
 801559e:	a308      	add	r3, pc, #32	; (adr r3, 80155c0 <__ieee754_log+0x308>)
 80155a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80155a4:	4604      	mov	r4, r0
 80155a6:	460d      	mov	r5, r1
 80155a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80155ac:	e729      	b.n	8015402 <__ieee754_log+0x14a>
 80155ae:	2000      	movs	r0, #0
 80155b0:	2100      	movs	r1, #0
 80155b2:	e696      	b.n	80152e2 <__ieee754_log+0x2a>
 80155b4:	f3af 8000 	nop.w
 80155b8:	fee00000 	.word	0xfee00000
 80155bc:	3fe62e42 	.word	0x3fe62e42
 80155c0:	35793c76 	.word	0x35793c76
 80155c4:	3dea39ef 	.word	0x3dea39ef
 80155c8:	55555555 	.word	0x55555555
 80155cc:	3fd55555 	.word	0x3fd55555
 80155d0:	df3e5244 	.word	0xdf3e5244
 80155d4:	3fc2f112 	.word	0x3fc2f112
 80155d8:	96cb03de 	.word	0x96cb03de
 80155dc:	3fc74664 	.word	0x3fc74664
 80155e0:	94229359 	.word	0x94229359
 80155e4:	3fd24924 	.word	0x3fd24924
 80155e8:	55555593 	.word	0x55555593
 80155ec:	3fe55555 	.word	0x3fe55555
 80155f0:	d078c69f 	.word	0xd078c69f
 80155f4:	3fc39a09 	.word	0x3fc39a09
 80155f8:	1d8e78af 	.word	0x1d8e78af
 80155fc:	3fcc71c5 	.word	0x3fcc71c5
 8015600:	9997fa04 	.word	0x9997fa04
 8015604:	3fd99999 	.word	0x3fd99999
 8015608:	c3500000 	.word	0xc3500000
 801560c:	43500000 	.word	0x43500000
 8015610:	7fefffff 	.word	0x7fefffff
 8015614:	3ff00000 	.word	0x3ff00000
 8015618:	3fe00000 	.word	0x3fe00000

0801561c <copysign>:
 801561c:	ec51 0b10 	vmov	r0, r1, d0
 8015620:	ee11 0a90 	vmov	r0, s3
 8015624:	ee10 2a10 	vmov	r2, s0
 8015628:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 801562c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8015630:	ea41 0300 	orr.w	r3, r1, r0
 8015634:	ec43 2b10 	vmov	d0, r2, r3
 8015638:	4770      	bx	lr
	...

0801563c <_init>:
 801563c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801563e:	bf00      	nop
 8015640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015642:	bc08      	pop	{r3}
 8015644:	469e      	mov	lr, r3
 8015646:	4770      	bx	lr

08015648 <_fini>:
 8015648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801564a:	bf00      	nop
 801564c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801564e:	bc08      	pop	{r3}
 8015650:	469e      	mov	lr, r3
 8015652:	4770      	bx	lr
