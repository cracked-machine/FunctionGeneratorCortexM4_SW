
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ebd8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001020  0800edb8  0800edb8  0001edb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fdd8  0800fdd8  00021e60  2**0
                  CONTENTS
  4 .ARM          00000000  0800fdd8  0800fdd8  00021e60  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fdd8  0800fdd8  00021e60  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fdd8  0800fdd8  0001fdd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fddc  0800fddc  0001fddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001e60  20000000  0800fde0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000088c  20001e60  08011c40  00021e60  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200026ec  08011c40  000226ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021e60  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f6ac  00000000  00000000  00021e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005e65  00000000  00000000  0005153c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001f08  00000000  00000000  000573a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001bb0  00000000  00000000  000592b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00030c16  00000000  00000000  0005ae60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00022c0b  00000000  00000000  0008ba76  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00125135  00000000  00000000  000ae681  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001d37b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008a9c  00000000  00000000  001d3834  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001e60 	.word	0x20001e60
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800eda0 	.word	0x0800eda0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001e64 	.word	0x20001e64
 800021c:	0800eda0 	.word	0x0800eda0

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000bfc:	f00a fe84 	bl	800b908 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000c00:	2003      	movs	r0, #3
 8000c02:	f00b fa71 	bl	800c0e8 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000c06:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c0a:	f00b f885 	bl	800bd18 <ILI9341_Fill_Screen>

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
	...

08000c14 <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 8000c1a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	2301      	movs	r3, #1
 8000c22:	9300      	str	r3, [sp, #0]
 8000c24:	2300      	movs	r3, #0
 8000c26:	220a      	movs	r2, #10
 8000c28:	210a      	movs	r1, #10
 8000c2a:	4807      	ldr	r0, [pc, #28]	; (8000c48 <DM_PostInit+0x34>)
 8000c2c:	f00a fe1a 	bl	800b864 <ILI9341_Draw_Text>
	  HAL_Delay(500);
 8000c30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c34:	f005 fba2 	bl	800637c <HAL_Delay>

	  DM_RefreshBackgroundLayout();
 8000c38:	f000 fc5c 	bl	80014f4 <DM_RefreshBackgroundLayout>
	  printf("Init Completed\n");
 8000c3c:	4803      	ldr	r0, [pc, #12]	; (8000c4c <DM_PostInit+0x38>)
 8000c3e:	f00c f955 	bl	800ceec <puts>
}
 8000c42:	bf00      	nop
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}
 8000c48:	0800edb8 	.word	0x0800edb8
 8000c4c:	0800edc8 	.word	0x0800edc8

08000c50 <_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayFormattedOutput()
{
 8000c50:	b590      	push	{r4, r7, lr}
 8000c52:	b099      	sub	sp, #100	; 0x64
 8000c54:	af02      	add	r7, sp, #8
	char out_hertz[13] = "";
 8000c56:	2300      	movs	r3, #0
 8000c58:	633b      	str	r3, [r7, #48]	; 0x30
 8000c5a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000c5e:	2200      	movs	r2, #0
 8000c60:	601a      	str	r2, [r3, #0]
 8000c62:	605a      	str	r2, [r3, #4]
 8000c64:	721a      	strb	r2, [r3, #8]
	uint8_t out_hertz_x = 70;
 8000c66:	2346      	movs	r3, #70	; 0x46
 8000c68:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	uint8_t out_hertz_y = 40;
 8000c6c:	2328      	movs	r3, #40	; 0x28
 8000c6e:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

	char out_vpp[16] = "";
 8000c72:	2300      	movs	r3, #0
 8000c74:	623b      	str	r3, [r7, #32]
 8000c76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	601a      	str	r2, [r3, #0]
 8000c7e:	605a      	str	r2, [r3, #4]
 8000c80:	609a      	str	r2, [r3, #8]
	uint8_t out_vpp_x = 70;
 8000c82:	2346      	movs	r3, #70	; 0x46
 8000c84:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	uint8_t out_vpp_y = 70;
 8000c88:	2346      	movs	r3, #70	; 0x46
 8000c8a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

	char out_decibels[11] = "";
 8000c8e:	2300      	movs	r3, #0
 8000c90:	617b      	str	r3, [r7, #20]
 8000c92:	f107 0318 	add.w	r3, r7, #24
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	f8c3 2003 	str.w	r2, [r3, #3]
	uint8_t out_decibels_x = 70;
 8000c9e:	2346      	movs	r3, #70	; 0x46
 8000ca0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t out_decibels_y = 100;
 8000ca4:	2364      	movs	r3, #100	; 0x64
 8000ca6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e


	float volts_per_thou = 0.00075;
 8000caa:	4b64      	ldr	r3, [pc, #400]	; (8000e3c <_DisplayFormattedOutput+0x1ec>)
 8000cac:	64bb      	str	r3, [r7, #72]	; 0x48
	char out_dcvolts[10] = "";
 8000cae:	2300      	movs	r3, #0
 8000cb0:	60bb      	str	r3, [r7, #8]
 8000cb2:	f107 030c 	add.w	r3, r7, #12
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	601a      	str	r2, [r3, #0]
 8000cba:	809a      	strh	r2, [r3, #4]
	uint8_t out_dcvolts_x = 70;
 8000cbc:	2346      	movs	r3, #70	; 0x46
 8000cbe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t out_dcvolts_y = 130;
 8000cc2:	2382      	movs	r3, #130	; 0x82
 8000cc4:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), "%4.2f Hz", SM_GetOutputInHertz());
 8000cc8:	f002 ff9c 	bl	8003c04 <SM_GetOutputInHertz>
 8000ccc:	ee10 3a10 	vmov	r3, s0
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	f7ff fc61 	bl	8000598 <__aeabi_f2d>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	460c      	mov	r4, r1
 8000cda:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000cde:	e9cd 3400 	strd	r3, r4, [sp]
 8000ce2:	4a57      	ldr	r2, [pc, #348]	; (8000e40 <_DisplayFormattedOutput+0x1f0>)
 8000ce4:	210d      	movs	r1, #13
 8000ce6:	f00c f909 	bl	800cefc <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, BLACK, 3, WHITE);
 8000cea:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000cee:	b299      	uxth	r1, r3
 8000cf0:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8000cf4:	b29a      	uxth	r2, r3
 8000cf6:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000cfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cfe:	9301      	str	r3, [sp, #4]
 8000d00:	2303      	movs	r3, #3
 8000d02:	9300      	str	r3, [sp, #0]
 8000d04:	2300      	movs	r3, #0
 8000d06:	f00a fdad 	bl	800b864 <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	VppEncoderPreset_t *pVppPresetTmp =  VPP_GetVppPresetObject();
 8000d0a:	f003 fcf1 	bl	80046f0 <VPP_GetVppPresetObject>
 8000d0e:	6438      	str	r0, [r7, #64]	; 0x40
	if(pVppPresetTmp)
 8000d10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d016      	beq.n	8000d44 <_DisplayFormattedOutput+0xf4>
	{
		snprintf(out_vpp, sizeof(out_vpp), "%2.2f Vpp", pVppPresetTmp->Vpp_target);
 8000d16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d18:	685b      	ldr	r3, [r3, #4]
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fc3c 	bl	8000598 <__aeabi_f2d>
 8000d20:	4603      	mov	r3, r0
 8000d22:	460c      	mov	r4, r1
 8000d24:	f107 0020 	add.w	r0, r7, #32
 8000d28:	e9cd 3400 	strd	r3, r4, [sp]
 8000d2c:	4a45      	ldr	r2, [pc, #276]	; (8000e44 <_DisplayFormattedOutput+0x1f4>)
 8000d2e:	2110      	movs	r1, #16
 8000d30:	f00c f8e4 	bl	800cefc <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), "%s", pVppPresetTmp->gain_decibels);
 8000d34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d36:	68db      	ldr	r3, [r3, #12]
 8000d38:	f107 0014 	add.w	r0, r7, #20
 8000d3c:	4a42      	ldr	r2, [pc, #264]	; (8000e48 <_DisplayFormattedOutput+0x1f8>)
 8000d3e:	210b      	movs	r1, #11
 8000d40:	f00c f8dc 	bl	800cefc <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, BLACK, 3, WHITE);
 8000d44:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8000d48:	b299      	uxth	r1, r3
 8000d4a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	f107 0020 	add.w	r0, r7, #32
 8000d54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d58:	9301      	str	r3, [sp, #4]
 8000d5a:	2303      	movs	r3, #3
 8000d5c:	9300      	str	r3, [sp, #0]
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f00a fd80 	bl	800b864 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, BLACK, 3, WHITE);
 8000d64:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000d68:	b299      	uxth	r1, r3
 8000d6a:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000d6e:	b29a      	uxth	r2, r3
 8000d70:	f107 0014 	add.w	r0, r7, #20
 8000d74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d78:	9301      	str	r3, [sp, #4]
 8000d7a:	2303      	movs	r3, #3
 8000d7c:	9300      	str	r3, [sp, #0]
 8000d7e:	2300      	movs	r3, #0
 8000d80:	f00a fd70 	bl	800b864 <ILI9341_Draw_Text>



	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8000d84:	f002 faee 	bl	8003364 <BO_GetOutputBias>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d103      	bne.n	8000d96 <_DisplayFormattedOutput+0x146>
 8000d8e:	f04f 0300 	mov.w	r3, #0
 8000d92:	657b      	str	r3, [r7, #84]	; 0x54
 8000d94:	e00b      	b.n	8000dae <_DisplayFormattedOutput+0x15e>
 8000d96:	f002 fae5 	bl	8003364 <BO_GetOutputBias>
 8000d9a:	ee07 0a90 	vmov	s15, r0
 8000d9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000da2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000da6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000daa:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%1.4f v", dc_volts);
 8000dae:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000db0:	f7ff fbf2 	bl	8000598 <__aeabi_f2d>
 8000db4:	4603      	mov	r3, r0
 8000db6:	460c      	mov	r4, r1
 8000db8:	f107 0008 	add.w	r0, r7, #8
 8000dbc:	e9cd 3400 	strd	r3, r4, [sp]
 8000dc0:	4a22      	ldr	r2, [pc, #136]	; (8000e4c <_DisplayFormattedOutput+0x1fc>)
 8000dc2:	210a      	movs	r1, #10
 8000dc4:	f00c f89a 	bl	800cefc <sniprintf>
	if(BO_GetBiasPolarity())
 8000dc8:	f002 fa6c 	bl	80032a4 <BO_GetBiasPolarity>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d018      	beq.n	8000e04 <_DisplayFormattedOutput+0x1b4>
	{
		char symbol[2] = "+\0";
 8000dd2:	4b1f      	ldr	r3, [pc, #124]	; (8000e50 <_DisplayFormattedOutput+0x200>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	80bb      	strh	r3, [r7, #4]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
 8000dd8:	f107 0208 	add.w	r2, r7, #8
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	4611      	mov	r1, r2
 8000de0:	4618      	mov	r0, r3
 8000de2:	f00c f8bf 	bl	800cf64 <strcat>
 8000de6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000dea:	b299      	uxth	r1, r3
 8000dec:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000df0:	b29a      	uxth	r2, r3
 8000df2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000df6:	9301      	str	r3, [sp, #4]
 8000df8:	2303      	movs	r3, #3
 8000dfa:	9300      	str	r3, [sp, #0]
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	f00a fd31 	bl	800b864 <ILI9341_Draw_Text>
	{
		char symbol[2] = "-\0";
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
	}

}
 8000e02:	e017      	b.n	8000e34 <_DisplayFormattedOutput+0x1e4>
		char symbol[2] = "-\0";
 8000e04:	4b13      	ldr	r3, [pc, #76]	; (8000e54 <_DisplayFormattedOutput+0x204>)
 8000e06:	881b      	ldrh	r3, [r3, #0]
 8000e08:	803b      	strh	r3, [r7, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
 8000e0a:	f107 0208 	add.w	r2, r7, #8
 8000e0e:	463b      	mov	r3, r7
 8000e10:	4611      	mov	r1, r2
 8000e12:	4618      	mov	r0, r3
 8000e14:	f00c f8a6 	bl	800cf64 <strcat>
 8000e18:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000e1c:	b299      	uxth	r1, r3
 8000e1e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e28:	9301      	str	r3, [sp, #4]
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	9300      	str	r3, [sp, #0]
 8000e2e:	2300      	movs	r3, #0
 8000e30:	f00a fd18 	bl	800b864 <ILI9341_Draw_Text>
}
 8000e34:	bf00      	nop
 8000e36:	375c      	adds	r7, #92	; 0x5c
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd90      	pop	{r4, r7, pc}
 8000e3c:	3a449ba6 	.word	0x3a449ba6
 8000e40:	0800edd8 	.word	0x0800edd8
 8000e44:	0800ede4 	.word	0x0800ede4
 8000e48:	0800edf0 	.word	0x0800edf0
 8000e4c:	0800edf4 	.word	0x0800edf4
 8000e50:	0800edfc 	.word	0x0800edfc
 8000e54:	0800ee00 	.word	0x0800ee00

08000e58 <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af02      	add	r7, sp, #8


	if(eNextFuncMenuStatus)		//  == ENABLE_FUNCMENU
 8000e5e:	4b58      	ldr	r3, [pc, #352]	; (8000fc0 <DM_UpdateDisplay+0x168>)
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d002      	beq.n	8000e6c <DM_UpdateDisplay+0x14>
 		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		_DrawFuncSelectMenu();
 8000e66:	f000 f8d3 	bl	8001010 <_DrawFuncSelectMenu>
 8000e6a:	e07b      	b.n	8000f64 <DM_UpdateDisplay+0x10c>
	}
	else if(eNextGainMenuStatus)		//  == ENABLE_GAINMENU
 8000e6c:	4b55      	ldr	r3, [pc, #340]	; (8000fc4 <DM_UpdateDisplay+0x16c>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d004      	beq.n	8000e7e <DM_UpdateDisplay+0x26>
		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		_DisplayFormattedOutput();
 8000e74:	f7ff feec 	bl	8000c50 <_DisplayFormattedOutput>
		_DrawGainSelectMenu();
 8000e78:	f000 fab6 	bl	80013e8 <_DrawGainSelectMenu>
 8000e7c:	e072      	b.n	8000f64 <DM_UpdateDisplay+0x10c>
	}
	else if(eNextVppMenuStatus)		//  == ENABLE_GAINMENU
 8000e7e:	4b52      	ldr	r3, [pc, #328]	; (8000fc8 <DM_UpdateDisplay+0x170>)
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d004      	beq.n	8000e90 <DM_UpdateDisplay+0x38>
		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		_DisplayFormattedOutput();
 8000e86:	f7ff fee3 	bl	8000c50 <_DisplayFormattedOutput>
		_DrawVppSelectMenu();
 8000e8a:	f000 fac1 	bl	8001410 <_DrawVppSelectMenu>
 8000e8e:	e069      	b.n	8000f64 <DM_UpdateDisplay+0x10c>
	}
	else if(eNextFreqMenuStatus)		//  frequency menu enabled
 8000e90:	4b4e      	ldr	r3, [pc, #312]	; (8000fcc <DM_UpdateDisplay+0x174>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d02b      	beq.n	8000ef0 <DM_UpdateDisplay+0x98>
	{

		ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);
 8000e98:	2300      	movs	r3, #0
 8000e9a:	9301      	str	r3, [sp, #4]
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ea4:	220a      	movs	r2, #10
 8000ea6:	211e      	movs	r1, #30
 8000ea8:	4849      	ldr	r0, [pc, #292]	; (8000fd0 <DM_UpdateDisplay+0x178>)
 8000eaa:	f00a fcdb 	bl	800b864 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("1Hz", 24, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("100Hz", 93, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("1KHz", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("100KHz", 247, 210, BLACK, 2, RED);
*/
		switch(eNextFreqMenuStatus)
 8000eae:	4b47      	ldr	r3, [pc, #284]	; (8000fcc <DM_UpdateDisplay+0x174>)
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	3b01      	subs	r3, #1
 8000eb4:	2b03      	cmp	r3, #3
 8000eb6:	d854      	bhi.n	8000f62 <DM_UpdateDisplay+0x10a>
 8000eb8:	a201      	add	r2, pc, #4	; (adr r2, 8000ec0 <DM_UpdateDisplay+0x68>)
 8000eba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ebe:	bf00      	nop
 8000ec0:	08000ed1 	.word	0x08000ed1
 8000ec4:	08000edb 	.word	0x08000edb
 8000ec8:	08000ee1 	.word	0x08000ee1
 8000ecc:	08000eeb 	.word	0x08000eeb
		{
			case ENABLE_FREQ_MAIN_MENU:

				_DisplayFormattedOutput();
 8000ed0:	f7ff febe 	bl	8000c50 <_DisplayFormattedOutput>

				FreqMenu_DrawFreqMainMenu();
 8000ed4:	f000 fbd6 	bl	8001684 <FreqMenu_DrawFreqMainMenu>

				break;
 8000ed8:	e044      	b.n	8000f64 <DM_UpdateDisplay+0x10c>

			case ENABLE_FREQ_PRESET_MENU:
				FreqMenu_DrawFreqPresetMenu();
 8000eda:	f000 fc0d 	bl	80016f8 <FreqMenu_DrawFreqPresetMenu>
				break;
 8000ede:	e041      	b.n	8000f64 <DM_UpdateDisplay+0x10c>

			case ENABLE_FREQ_ADJUST_MENU:

				_DisplayFormattedOutput();
 8000ee0:	f7ff feb6 	bl	8000c50 <_DisplayFormattedOutput>

				FreqMenu_DrawFreqAdjustMenu();
 8000ee4:	f001 fe8e 	bl	8002c04 <FreqMenu_DrawFreqAdjustMenu>

				break;
 8000ee8:	e03c      	b.n	8000f64 <DM_UpdateDisplay+0x10c>

			case ENABLE_FREQ_SWEEP_MENU:
				FreqMenu_DrawFreqSweepMenu();
 8000eea:	f001 febb 	bl	8002c64 <FreqMenu_DrawFreqSweepMenu>
				break;
 8000eee:	e039      	b.n	8000f64 <DM_UpdateDisplay+0x10c>
			default:
				break;
		}

	}
	else if(eNextBiasMenuStatus)		//  == ENABLE_BIASMENU
 8000ef0:	4b38      	ldr	r3, [pc, #224]	; (8000fd4 <DM_UpdateDisplay+0x17c>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d004      	beq.n	8000f02 <DM_UpdateDisplay+0xaa>
		ILI9341_Draw_Text("    ", 10, 210, BLACK, 2, DARKCYAN);
		ILI9341_Draw_Text("    ", 100, 210, BLACK, 2, DARKGREEN);
		ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
		ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
*/
		_DisplayFormattedOutput();
 8000ef8:	f7ff feaa 	bl	8000c50 <_DisplayFormattedOutput>
		_DrawBiasSelectMenu();
 8000efc:	f000 fabc 	bl	8001478 <_DrawBiasSelectMenu>
 8000f00:	e030      	b.n	8000f64 <DM_UpdateDisplay+0x10c>
	}
	else
	{
		_DisplayFormattedOutput();
 8000f02:	f7ff fea5 	bl	8000c50 <_DisplayFormattedOutput>

		ILI9341_Draw_Text("FUNC", 10, 210, BLACK, 2, DARKCYAN);
 8000f06:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000f0a:	9301      	str	r3, [sp, #4]
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	9300      	str	r3, [sp, #0]
 8000f10:	2300      	movs	r3, #0
 8000f12:	22d2      	movs	r2, #210	; 0xd2
 8000f14:	210a      	movs	r1, #10
 8000f16:	4830      	ldr	r0, [pc, #192]	; (8000fd8 <DM_UpdateDisplay+0x180>)
 8000f18:	f00a fca4 	bl	800b864 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("FREQ", 100, 210, BLACK, 2, DARKGREEN);
 8000f1c:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000f20:	9301      	str	r3, [sp, #4]
 8000f22:	2302      	movs	r3, #2
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	2300      	movs	r3, #0
 8000f28:	22d2      	movs	r2, #210	; 0xd2
 8000f2a:	2164      	movs	r1, #100	; 0x64
 8000f2c:	482b      	ldr	r0, [pc, #172]	; (8000fdc <DM_UpdateDisplay+0x184>)
 8000f2e:	f00a fc99 	bl	800b864 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("GAIN", 175, 210, BLACK, 2, YELLOW);
 8000f32:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000f36:	9301      	str	r3, [sp, #4]
 8000f38:	2302      	movs	r3, #2
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	22d2      	movs	r2, #210	; 0xd2
 8000f40:	21af      	movs	r1, #175	; 0xaf
 8000f42:	4827      	ldr	r0, [pc, #156]	; (8000fe0 <DM_UpdateDisplay+0x188>)
 8000f44:	f00a fc8e 	bl	800b864 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("BIAS", 260, 210, BLACK, 2, RED);
 8000f48:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f4c:	9301      	str	r3, [sp, #4]
 8000f4e:	2302      	movs	r3, #2
 8000f50:	9300      	str	r3, [sp, #0]
 8000f52:	2300      	movs	r3, #0
 8000f54:	22d2      	movs	r2, #210	; 0xd2
 8000f56:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000f5a:	4822      	ldr	r0, [pc, #136]	; (8000fe4 <DM_UpdateDisplay+0x18c>)
 8000f5c:	f00a fc82 	bl	800b864 <ILI9341_Draw_Text>
 8000f60:	e000      	b.n	8000f64 <DM_UpdateDisplay+0x10c>
				break;
 8000f62:	bf00      	nop
	}

#ifdef ENCODER_DEBUG
	char encoder_value[5] = "";
 8000f64:	2300      	movs	r3, #0
 8000f66:	603b      	str	r3, [r7, #0]
 8000f68:	2300      	movs	r3, #0
 8000f6a:	713b      	strb	r3, [r7, #4]
	//snprintf(tim1tmp, sizeof(tim1tmp), "%lu", ENCODER_TIMER->CNT);
	if(DM_AddDigitPadding(ENCODER_TIMER->CNT, encoder_value, sizeof(encoder_value)) == 0)
 8000f6c:	4b1e      	ldr	r3, [pc, #120]	; (8000fe8 <DM_UpdateDisplay+0x190>)
 8000f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	4639      	mov	r1, r7
 8000f74:	2205      	movs	r2, #5
 8000f76:	4618      	mov	r0, r3
 8000f78:	f000 fafe 	bl	8001578 <DM_AddDigitPadding>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d10b      	bne.n	8000f9a <DM_UpdateDisplay+0x142>
		ILI9341_Draw_Text(encoder_value, 280, 190, BLACK, 1, RED);
 8000f82:	4638      	mov	r0, r7
 8000f84:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	2300      	movs	r3, #0
 8000f90:	22be      	movs	r2, #190	; 0xbe
 8000f92:	f44f 718c 	mov.w	r1, #280	; 0x118
 8000f96:	f00a fc65 	bl	800b864 <ILI9341_Draw_Text>
#endif //ENCODER_DEBUG

	if(*ErrorDebugMsg)
 8000f9a:	4b14      	ldr	r3, [pc, #80]	; (8000fec <DM_UpdateDisplay+0x194>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d00a      	beq.n	8000fb8 <DM_UpdateDisplay+0x160>
		ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, BLACK, 1, RED);
 8000fa2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000fa6:	9301      	str	r3, [sp, #4]
 8000fa8:	2301      	movs	r3, #1
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	2300      	movs	r3, #0
 8000fae:	22be      	movs	r2, #190	; 0xbe
 8000fb0:	210a      	movs	r1, #10
 8000fb2:	480e      	ldr	r0, [pc, #56]	; (8000fec <DM_UpdateDisplay+0x194>)
 8000fb4:	f00a fc56 	bl	800b864 <ILI9341_Draw_Text>

}
 8000fb8:	bf00      	nop
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20001e7c 	.word	0x20001e7c
 8000fc4:	20001e7d 	.word	0x20001e7d
 8000fc8:	20001e7e 	.word	0x20001e7e
 8000fcc:	20001e7f 	.word	0x20001e7f
 8000fd0:	0800ee04 	.word	0x0800ee04
 8000fd4:	20001e80 	.word	0x20001e80
 8000fd8:	0800ee14 	.word	0x0800ee14
 8000fdc:	0800ee1c 	.word	0x0800ee1c
 8000fe0:	0800ee24 	.word	0x0800ee24
 8000fe4:	0800ee2c 	.word	0x0800ee2c
 8000fe8:	40012c00 	.word	0x40012c00
 8000fec:	20001e84 	.word	0x20001e84

08000ff0 <DM_ShowFuncSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowFuncSelectMenu(eFuncMenu_Status pValue)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	71fb      	strb	r3, [r7, #7]
	eNextFuncMenuStatus = pValue;
 8000ffa:	4a04      	ldr	r2, [pc, #16]	; (800100c <DM_ShowFuncSelectMenu+0x1c>)
 8000ffc:	79fb      	ldrb	r3, [r7, #7]
 8000ffe:	7013      	strb	r3, [r2, #0]
}
 8001000:	bf00      	nop
 8001002:	370c      	adds	r7, #12
 8001004:	46bd      	mov	sp, r7
 8001006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100a:	4770      	bx	lr
 800100c:	20001e7c 	.word	0x20001e7c

08001010 <_DrawFuncSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void _DrawFuncSelectMenu()
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("SELECT FUNCTION", 	10, 10, WHITE, 3, BLACK);
 8001016:	2300      	movs	r3, #0
 8001018:	9301      	str	r3, [sp, #4]
 800101a:	2303      	movs	r3, #3
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001022:	220a      	movs	r2, #10
 8001024:	210a      	movs	r1, #10
 8001026:	48b7      	ldr	r0, [pc, #732]	; (8001304 <_DrawFuncSelectMenu+0x2f4>)
 8001028:	f00a fc1c 	bl	800b864 <ILI9341_Draw_Text>

	Func_Preset_Encoder_Pos_t *pFuncPresetTmp = FuncO_GetFPresetObject();
 800102c:	f002 fce8 	bl	8003a00 <FuncO_GetFPresetObject>
 8001030:	6078      	str	r0, [r7, #4]
	if(pFuncPresetTmp)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2b00      	cmp	r3, #0
 8001036:	f000 81b6 	beq.w	80013a6 <_DrawFuncSelectMenu+0x396>
	{
		switch(pFuncPresetTmp->func)
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	2b05      	cmp	r3, #5
 8001040:	f200 81b1 	bhi.w	80013a6 <_DrawFuncSelectMenu+0x396>
 8001044:	a201      	add	r2, pc, #4	; (adr r2, 800104c <_DrawFuncSelectMenu+0x3c>)
 8001046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800104a:	bf00      	nop
 800104c:	08001065 	.word	0x08001065
 8001050:	080010eb 	.word	0x080010eb
 8001054:	08001171 	.word	0x08001171
 8001058:	080011f7 	.word	0x080011f7
 800105c:	0800127d 	.word	0x0800127d
 8001060:	08001321 	.word	0x08001321
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, WHITE, 2, BLACK);
 8001064:	2300      	movs	r3, #0
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	2302      	movs	r3, #2
 800106a:	9300      	str	r3, [sp, #0]
 800106c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001070:	2232      	movs	r2, #50	; 0x32
 8001072:	210a      	movs	r1, #10
 8001074:	48a4      	ldr	r0, [pc, #656]	; (8001308 <_DrawFuncSelectMenu+0x2f8>)
 8001076:	f00a fbf5 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 800107a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800107e:	9301      	str	r3, [sp, #4]
 8001080:	2302      	movs	r3, #2
 8001082:	9300      	str	r3, [sp, #0]
 8001084:	2300      	movs	r3, #0
 8001086:	2246      	movs	r2, #70	; 0x46
 8001088:	210a      	movs	r1, #10
 800108a:	48a0      	ldr	r0, [pc, #640]	; (800130c <_DrawFuncSelectMenu+0x2fc>)
 800108c:	f00a fbea 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8001090:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001094:	9301      	str	r3, [sp, #4]
 8001096:	2302      	movs	r3, #2
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	2300      	movs	r3, #0
 800109c:	225a      	movs	r2, #90	; 0x5a
 800109e:	210a      	movs	r1, #10
 80010a0:	489b      	ldr	r0, [pc, #620]	; (8001310 <_DrawFuncSelectMenu+0x300>)
 80010a2:	f00a fbdf 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 80010a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010aa:	9301      	str	r3, [sp, #4]
 80010ac:	2302      	movs	r3, #2
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	2300      	movs	r3, #0
 80010b2:	226e      	movs	r2, #110	; 0x6e
 80010b4:	210a      	movs	r1, #10
 80010b6:	4897      	ldr	r0, [pc, #604]	; (8001314 <_DrawFuncSelectMenu+0x304>)
 80010b8:	f00a fbd4 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 80010bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010c0:	9301      	str	r3, [sp, #4]
 80010c2:	2302      	movs	r3, #2
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	2300      	movs	r3, #0
 80010c8:	2282      	movs	r2, #130	; 0x82
 80010ca:	210a      	movs	r1, #10
 80010cc:	4892      	ldr	r0, [pc, #584]	; (8001318 <_DrawFuncSelectMenu+0x308>)
 80010ce:	f00a fbc9 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 80010d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010d6:	9301      	str	r3, [sp, #4]
 80010d8:	2302      	movs	r3, #2
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	2300      	movs	r3, #0
 80010de:	2296      	movs	r2, #150	; 0x96
 80010e0:	210a      	movs	r1, #10
 80010e2:	488e      	ldr	r0, [pc, #568]	; (800131c <_DrawFuncSelectMenu+0x30c>)
 80010e4:	f00a fbbe 	bl	800b864 <ILI9341_Draw_Text>
				break;
 80010e8:	e15d      	b.n	80013a6 <_DrawFuncSelectMenu+0x396>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 80010ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80010ee:	9301      	str	r3, [sp, #4]
 80010f0:	2302      	movs	r3, #2
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	2300      	movs	r3, #0
 80010f6:	2232      	movs	r2, #50	; 0x32
 80010f8:	210a      	movs	r1, #10
 80010fa:	4883      	ldr	r0, [pc, #524]	; (8001308 <_DrawFuncSelectMenu+0x2f8>)
 80010fc:	f00a fbb2 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, WHITE, 2, BLACK);
 8001100:	2300      	movs	r3, #0
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	2302      	movs	r3, #2
 8001106:	9300      	str	r3, [sp, #0]
 8001108:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800110c:	2246      	movs	r2, #70	; 0x46
 800110e:	210a      	movs	r1, #10
 8001110:	487e      	ldr	r0, [pc, #504]	; (800130c <_DrawFuncSelectMenu+0x2fc>)
 8001112:	f00a fba7 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8001116:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800111a:	9301      	str	r3, [sp, #4]
 800111c:	2302      	movs	r3, #2
 800111e:	9300      	str	r3, [sp, #0]
 8001120:	2300      	movs	r3, #0
 8001122:	225a      	movs	r2, #90	; 0x5a
 8001124:	210a      	movs	r1, #10
 8001126:	487a      	ldr	r0, [pc, #488]	; (8001310 <_DrawFuncSelectMenu+0x300>)
 8001128:	f00a fb9c 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 800112c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	2302      	movs	r3, #2
 8001134:	9300      	str	r3, [sp, #0]
 8001136:	2300      	movs	r3, #0
 8001138:	226e      	movs	r2, #110	; 0x6e
 800113a:	210a      	movs	r1, #10
 800113c:	4875      	ldr	r0, [pc, #468]	; (8001314 <_DrawFuncSelectMenu+0x304>)
 800113e:	f00a fb91 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8001142:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001146:	9301      	str	r3, [sp, #4]
 8001148:	2302      	movs	r3, #2
 800114a:	9300      	str	r3, [sp, #0]
 800114c:	2300      	movs	r3, #0
 800114e:	2282      	movs	r2, #130	; 0x82
 8001150:	210a      	movs	r1, #10
 8001152:	4871      	ldr	r0, [pc, #452]	; (8001318 <_DrawFuncSelectMenu+0x308>)
 8001154:	f00a fb86 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8001158:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	2302      	movs	r3, #2
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2300      	movs	r3, #0
 8001164:	2296      	movs	r2, #150	; 0x96
 8001166:	210a      	movs	r1, #10
 8001168:	486c      	ldr	r0, [pc, #432]	; (800131c <_DrawFuncSelectMenu+0x30c>)
 800116a:	f00a fb7b 	bl	800b864 <ILI9341_Draw_Text>
				break;
 800116e:	e11a      	b.n	80013a6 <_DrawFuncSelectMenu+0x396>
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8001170:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	2302      	movs	r3, #2
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	2300      	movs	r3, #0
 800117c:	2232      	movs	r2, #50	; 0x32
 800117e:	210a      	movs	r1, #10
 8001180:	4861      	ldr	r0, [pc, #388]	; (8001308 <_DrawFuncSelectMenu+0x2f8>)
 8001182:	f00a fb6f 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8001186:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800118a:	9301      	str	r3, [sp, #4]
 800118c:	2302      	movs	r3, #2
 800118e:	9300      	str	r3, [sp, #0]
 8001190:	2300      	movs	r3, #0
 8001192:	2246      	movs	r2, #70	; 0x46
 8001194:	210a      	movs	r1, #10
 8001196:	485d      	ldr	r0, [pc, #372]	; (800130c <_DrawFuncSelectMenu+0x2fc>)
 8001198:	f00a fb64 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, WHITE, 2, BLACK);
 800119c:	2300      	movs	r3, #0
 800119e:	9301      	str	r3, [sp, #4]
 80011a0:	2302      	movs	r3, #2
 80011a2:	9300      	str	r3, [sp, #0]
 80011a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011a8:	225a      	movs	r2, #90	; 0x5a
 80011aa:	210a      	movs	r1, #10
 80011ac:	4858      	ldr	r0, [pc, #352]	; (8001310 <_DrawFuncSelectMenu+0x300>)
 80011ae:	f00a fb59 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 80011b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	2302      	movs	r3, #2
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	2300      	movs	r3, #0
 80011be:	226e      	movs	r2, #110	; 0x6e
 80011c0:	210a      	movs	r1, #10
 80011c2:	4854      	ldr	r0, [pc, #336]	; (8001314 <_DrawFuncSelectMenu+0x304>)
 80011c4:	f00a fb4e 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 80011c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011cc:	9301      	str	r3, [sp, #4]
 80011ce:	2302      	movs	r3, #2
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2300      	movs	r3, #0
 80011d4:	2282      	movs	r2, #130	; 0x82
 80011d6:	210a      	movs	r1, #10
 80011d8:	484f      	ldr	r0, [pc, #316]	; (8001318 <_DrawFuncSelectMenu+0x308>)
 80011da:	f00a fb43 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 80011de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011e2:	9301      	str	r3, [sp, #4]
 80011e4:	2302      	movs	r3, #2
 80011e6:	9300      	str	r3, [sp, #0]
 80011e8:	2300      	movs	r3, #0
 80011ea:	2296      	movs	r2, #150	; 0x96
 80011ec:	210a      	movs	r1, #10
 80011ee:	484b      	ldr	r0, [pc, #300]	; (800131c <_DrawFuncSelectMenu+0x30c>)
 80011f0:	f00a fb38 	bl	800b864 <ILI9341_Draw_Text>
				break;
 80011f4:	e0d7      	b.n	80013a6 <_DrawFuncSelectMenu+0x396>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 80011f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011fa:	9301      	str	r3, [sp, #4]
 80011fc:	2302      	movs	r3, #2
 80011fe:	9300      	str	r3, [sp, #0]
 8001200:	2300      	movs	r3, #0
 8001202:	2232      	movs	r2, #50	; 0x32
 8001204:	210a      	movs	r1, #10
 8001206:	4840      	ldr	r0, [pc, #256]	; (8001308 <_DrawFuncSelectMenu+0x2f8>)
 8001208:	f00a fb2c 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 800120c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001210:	9301      	str	r3, [sp, #4]
 8001212:	2302      	movs	r3, #2
 8001214:	9300      	str	r3, [sp, #0]
 8001216:	2300      	movs	r3, #0
 8001218:	2246      	movs	r2, #70	; 0x46
 800121a:	210a      	movs	r1, #10
 800121c:	483b      	ldr	r0, [pc, #236]	; (800130c <_DrawFuncSelectMenu+0x2fc>)
 800121e:	f00a fb21 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8001222:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001226:	9301      	str	r3, [sp, #4]
 8001228:	2302      	movs	r3, #2
 800122a:	9300      	str	r3, [sp, #0]
 800122c:	2300      	movs	r3, #0
 800122e:	225a      	movs	r2, #90	; 0x5a
 8001230:	210a      	movs	r1, #10
 8001232:	4837      	ldr	r0, [pc, #220]	; (8001310 <_DrawFuncSelectMenu+0x300>)
 8001234:	f00a fb16 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, WHITE, 2, BLACK);
 8001238:	2300      	movs	r3, #0
 800123a:	9301      	str	r3, [sp, #4]
 800123c:	2302      	movs	r3, #2
 800123e:	9300      	str	r3, [sp, #0]
 8001240:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001244:	226e      	movs	r2, #110	; 0x6e
 8001246:	210a      	movs	r1, #10
 8001248:	4832      	ldr	r0, [pc, #200]	; (8001314 <_DrawFuncSelectMenu+0x304>)
 800124a:	f00a fb0b 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 800124e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001252:	9301      	str	r3, [sp, #4]
 8001254:	2302      	movs	r3, #2
 8001256:	9300      	str	r3, [sp, #0]
 8001258:	2300      	movs	r3, #0
 800125a:	2282      	movs	r2, #130	; 0x82
 800125c:	210a      	movs	r1, #10
 800125e:	482e      	ldr	r0, [pc, #184]	; (8001318 <_DrawFuncSelectMenu+0x308>)
 8001260:	f00a fb00 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8001264:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001268:	9301      	str	r3, [sp, #4]
 800126a:	2302      	movs	r3, #2
 800126c:	9300      	str	r3, [sp, #0]
 800126e:	2300      	movs	r3, #0
 8001270:	2296      	movs	r2, #150	; 0x96
 8001272:	210a      	movs	r1, #10
 8001274:	4829      	ldr	r0, [pc, #164]	; (800131c <_DrawFuncSelectMenu+0x30c>)
 8001276:	f00a faf5 	bl	800b864 <ILI9341_Draw_Text>
				break;
 800127a:	e094      	b.n	80013a6 <_DrawFuncSelectMenu+0x396>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 800127c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001280:	9301      	str	r3, [sp, #4]
 8001282:	2302      	movs	r3, #2
 8001284:	9300      	str	r3, [sp, #0]
 8001286:	2300      	movs	r3, #0
 8001288:	2232      	movs	r2, #50	; 0x32
 800128a:	210a      	movs	r1, #10
 800128c:	481e      	ldr	r0, [pc, #120]	; (8001308 <_DrawFuncSelectMenu+0x2f8>)
 800128e:	f00a fae9 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8001292:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001296:	9301      	str	r3, [sp, #4]
 8001298:	2302      	movs	r3, #2
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	2300      	movs	r3, #0
 800129e:	2246      	movs	r2, #70	; 0x46
 80012a0:	210a      	movs	r1, #10
 80012a2:	481a      	ldr	r0, [pc, #104]	; (800130c <_DrawFuncSelectMenu+0x2fc>)
 80012a4:	f00a fade 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 80012a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ac:	9301      	str	r3, [sp, #4]
 80012ae:	2302      	movs	r3, #2
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	2300      	movs	r3, #0
 80012b4:	225a      	movs	r2, #90	; 0x5a
 80012b6:	210a      	movs	r1, #10
 80012b8:	4815      	ldr	r0, [pc, #84]	; (8001310 <_DrawFuncSelectMenu+0x300>)
 80012ba:	f00a fad3 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 80012be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012c2:	9301      	str	r3, [sp, #4]
 80012c4:	2302      	movs	r3, #2
 80012c6:	9300      	str	r3, [sp, #0]
 80012c8:	2300      	movs	r3, #0
 80012ca:	226e      	movs	r2, #110	; 0x6e
 80012cc:	210a      	movs	r1, #10
 80012ce:	4811      	ldr	r0, [pc, #68]	; (8001314 <_DrawFuncSelectMenu+0x304>)
 80012d0:	f00a fac8 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, WHITE, 2, BLACK);
 80012d4:	2300      	movs	r3, #0
 80012d6:	9301      	str	r3, [sp, #4]
 80012d8:	2302      	movs	r3, #2
 80012da:	9300      	str	r3, [sp, #0]
 80012dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012e0:	2282      	movs	r2, #130	; 0x82
 80012e2:	210a      	movs	r1, #10
 80012e4:	480c      	ldr	r0, [pc, #48]	; (8001318 <_DrawFuncSelectMenu+0x308>)
 80012e6:	f00a fabd 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 80012ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ee:	9301      	str	r3, [sp, #4]
 80012f0:	2302      	movs	r3, #2
 80012f2:	9300      	str	r3, [sp, #0]
 80012f4:	2300      	movs	r3, #0
 80012f6:	2296      	movs	r2, #150	; 0x96
 80012f8:	210a      	movs	r1, #10
 80012fa:	4808      	ldr	r0, [pc, #32]	; (800131c <_DrawFuncSelectMenu+0x30c>)
 80012fc:	f00a fab2 	bl	800b864 <ILI9341_Draw_Text>
				break;
 8001300:	e051      	b.n	80013a6 <_DrawFuncSelectMenu+0x396>
 8001302:	bf00      	nop
 8001304:	0800ee34 	.word	0x0800ee34
 8001308:	0800ee44 	.word	0x0800ee44
 800130c:	0800ee4c 	.word	0x0800ee4c
 8001310:	0800ee58 	.word	0x0800ee58
 8001314:	0800ee60 	.word	0x0800ee60
 8001318:	0800ee6c 	.word	0x0800ee6c
 800131c:	0800ee78 	.word	0x0800ee78
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8001320:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001324:	9301      	str	r3, [sp, #4]
 8001326:	2302      	movs	r3, #2
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	2300      	movs	r3, #0
 800132c:	2232      	movs	r2, #50	; 0x32
 800132e:	210a      	movs	r1, #10
 8001330:	481f      	ldr	r0, [pc, #124]	; (80013b0 <_DrawFuncSelectMenu+0x3a0>)
 8001332:	f00a fa97 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8001336:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	2302      	movs	r3, #2
 800133e:	9300      	str	r3, [sp, #0]
 8001340:	2300      	movs	r3, #0
 8001342:	2246      	movs	r2, #70	; 0x46
 8001344:	210a      	movs	r1, #10
 8001346:	481b      	ldr	r0, [pc, #108]	; (80013b4 <_DrawFuncSelectMenu+0x3a4>)
 8001348:	f00a fa8c 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 800134c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001350:	9301      	str	r3, [sp, #4]
 8001352:	2302      	movs	r3, #2
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	2300      	movs	r3, #0
 8001358:	225a      	movs	r2, #90	; 0x5a
 800135a:	210a      	movs	r1, #10
 800135c:	4816      	ldr	r0, [pc, #88]	; (80013b8 <_DrawFuncSelectMenu+0x3a8>)
 800135e:	f00a fa81 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8001362:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001366:	9301      	str	r3, [sp, #4]
 8001368:	2302      	movs	r3, #2
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	2300      	movs	r3, #0
 800136e:	226e      	movs	r2, #110	; 0x6e
 8001370:	210a      	movs	r1, #10
 8001372:	4812      	ldr	r0, [pc, #72]	; (80013bc <_DrawFuncSelectMenu+0x3ac>)
 8001374:	f00a fa76 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8001378:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800137c:	9301      	str	r3, [sp, #4]
 800137e:	2302      	movs	r3, #2
 8001380:	9300      	str	r3, [sp, #0]
 8001382:	2300      	movs	r3, #0
 8001384:	2282      	movs	r2, #130	; 0x82
 8001386:	210a      	movs	r1, #10
 8001388:	480d      	ldr	r0, [pc, #52]	; (80013c0 <_DrawFuncSelectMenu+0x3b0>)
 800138a:	f00a fa6b 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, WHITE, 2, BLACK);
 800138e:	2300      	movs	r3, #0
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	2302      	movs	r3, #2
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800139a:	2296      	movs	r2, #150	; 0x96
 800139c:	210a      	movs	r1, #10
 800139e:	4809      	ldr	r0, [pc, #36]	; (80013c4 <_DrawFuncSelectMenu+0x3b4>)
 80013a0:	f00a fa60 	bl	800b864 <ILI9341_Draw_Text>
				break;
 80013a4:	bf00      	nop

		}
	}


}
 80013a6:	bf00      	nop
 80013a8:	3708      	adds	r7, #8
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	0800ee44 	.word	0x0800ee44
 80013b4:	0800ee4c 	.word	0x0800ee4c
 80013b8:	0800ee58 	.word	0x0800ee58
 80013bc:	0800ee60 	.word	0x0800ee60
 80013c0:	0800ee6c 	.word	0x0800ee6c
 80013c4:	0800ee78 	.word	0x0800ee78

080013c8 <DM_ShowVppSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowVppSelectMenu(eVppMenu_Status pValue)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
	eNextVppMenuStatus = pValue;
 80013d2:	4a04      	ldr	r2, [pc, #16]	; (80013e4 <DM_ShowVppSelectMenu+0x1c>)
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	7013      	strb	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	370c      	adds	r7, #12
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	20001e7e 	.word	0x20001e7e

080013e8 <_DrawGainSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void _DrawGainSelectMenu()
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("ADJUST GAIN", 	40, 10, WHITE, 3, BLACK);
 80013ee:	2300      	movs	r3, #0
 80013f0:	9301      	str	r3, [sp, #4]
 80013f2:	2303      	movs	r3, #3
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013fa:	220a      	movs	r2, #10
 80013fc:	2128      	movs	r1, #40	; 0x28
 80013fe:	4803      	ldr	r0, [pc, #12]	; (800140c <_DrawGainSelectMenu+0x24>)
 8001400:	f00a fa30 	bl	800b864 <ILI9341_Draw_Text>

}
 8001404:	bf00      	nop
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	0800ee80 	.word	0x0800ee80

08001410 <_DrawVppSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void _DrawVppSelectMenu()
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("ADJUST VPP", 	40, 10, WHITE, 3, BLACK);
 8001416:	2300      	movs	r3, #0
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	2303      	movs	r3, #3
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001422:	220a      	movs	r2, #10
 8001424:	2128      	movs	r1, #40	; 0x28
 8001426:	4803      	ldr	r0, [pc, #12]	; (8001434 <_DrawVppSelectMenu+0x24>)
 8001428:	f00a fa1c 	bl	800b864 <ILI9341_Draw_Text>

}
 800142c:	bf00      	nop
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	0800ee8c 	.word	0x0800ee8c

08001438 <DM_ShowFreqMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowFreqMenu(eFreqMenu_Status pValue)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	4603      	mov	r3, r0
 8001440:	71fb      	strb	r3, [r7, #7]
	eNextFreqMenuStatus = pValue;
 8001442:	4a04      	ldr	r2, [pc, #16]	; (8001454 <DM_ShowFreqMenu+0x1c>)
 8001444:	79fb      	ldrb	r3, [r7, #7]
 8001446:	7013      	strb	r3, [r2, #0]
}
 8001448:	bf00      	nop
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	20001e7f 	.word	0x20001e7f

08001458 <DM_ShowBiasSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void DM_ShowBiasSelectMenu(eBiasMenu_Status pValue)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
	eNextBiasMenuStatus = pValue;
 8001462:	4a04      	ldr	r2, [pc, #16]	; (8001474 <DM_ShowBiasSelectMenu+0x1c>)
 8001464:	79fb      	ldrb	r3, [r7, #7]
 8001466:	7013      	strb	r3, [r2, #0]
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr
 8001474:	20001e80 	.word	0x20001e80

08001478 <_DrawBiasSelectMenu>:
 *	@param None
 *	@retval None
 *
 */
void _DrawBiasSelectMenu()
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b082      	sub	sp, #8
 800147c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("ADJUST DC BIAS", 	30, 10, WHITE, 3, BLACK);
 800147e:	2300      	movs	r3, #0
 8001480:	9301      	str	r3, [sp, #4]
 8001482:	2303      	movs	r3, #3
 8001484:	9300      	str	r3, [sp, #0]
 8001486:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800148a:	220a      	movs	r2, #10
 800148c:	211e      	movs	r1, #30
 800148e:	4803      	ldr	r0, [pc, #12]	; (800149c <_DrawBiasSelectMenu+0x24>)
 8001490:	f00a f9e8 	bl	800b864 <ILI9341_Draw_Text>

}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
 800149a:	bf00      	nop
 800149c:	0800ee98 	.word	0x0800ee98

080014a0 <DM_DigitCount>:
 *	@param None
 *	@retval None
 *
 */
int DM_DigitCount(int num)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b083      	sub	sp, #12
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	if(num < 10)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b09      	cmp	r3, #9
 80014ac:	dc01      	bgt.n	80014b2 <DM_DigitCount+0x12>
		return 1;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e018      	b.n	80014e4 <DM_DigitCount+0x44>
	if(num < 100)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2b63      	cmp	r3, #99	; 0x63
 80014b6:	dc01      	bgt.n	80014bc <DM_DigitCount+0x1c>
		return 2;
 80014b8:	2302      	movs	r3, #2
 80014ba:	e013      	b.n	80014e4 <DM_DigitCount+0x44>
	if(num < 1000)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80014c2:	da01      	bge.n	80014c8 <DM_DigitCount+0x28>
		return 3;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e00d      	b.n	80014e4 <DM_DigitCount+0x44>
	if(num < 10000)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	f242 720f 	movw	r2, #9999	; 0x270f
 80014ce:	4293      	cmp	r3, r2
 80014d0:	dc01      	bgt.n	80014d6 <DM_DigitCount+0x36>
		return 4;
 80014d2:	2304      	movs	r3, #4
 80014d4:	e006      	b.n	80014e4 <DM_DigitCount+0x44>
	if(num < 100000)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <DM_DigitCount+0x50>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	dc01      	bgt.n	80014e2 <DM_DigitCount+0x42>
		return 5;
 80014de:	2305      	movs	r3, #5
 80014e0:	e000      	b.n	80014e4 <DM_DigitCount+0x44>
	else
		return 0;
 80014e2:	2300      	movs	r3, #0
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	0001869f 	.word	0x0001869f

080014f4 <DM_RefreshBackgroundLayout>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshBackgroundLayout()
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b084      	sub	sp, #16
 80014f8:	af04      	add	r7, sp, #16


	//ILI9341_Fill_Screen(WHITE);
	ILI9341_FillScreenGradient();
 80014fa:	f00a f9e1 	bl	800b8c0 <ILI9341_FillScreenGradient>

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 80014fe:	4b1d      	ldr	r3, [pc, #116]	; (8001574 <DM_RefreshBackgroundLayout+0x80>)
 8001500:	8818      	ldrh	r0, [r3, #0]
 8001502:	2300      	movs	r3, #0
 8001504:	9302      	str	r3, [sp, #8]
 8001506:	2302      	movs	r3, #2
 8001508:	9301      	str	r3, [sp, #4]
 800150a:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	2332      	movs	r3, #50	; 0x32
 8001512:	2250      	movs	r2, #80	; 0x50
 8001514:	21c8      	movs	r1, #200	; 0xc8
 8001516:	f00a f83b 	bl	800b590 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 800151a:	4b16      	ldr	r3, [pc, #88]	; (8001574 <DM_RefreshBackgroundLayout+0x80>)
 800151c:	8858      	ldrh	r0, [r3, #2]
 800151e:	2300      	movs	r3, #0
 8001520:	9302      	str	r3, [sp, #8]
 8001522:	2302      	movs	r3, #2
 8001524:	9301      	str	r3, [sp, #4]
 8001526:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	2332      	movs	r3, #50	; 0x32
 800152e:	2250      	movs	r2, #80	; 0x50
 8001530:	21c8      	movs	r1, #200	; 0xc8
 8001532:	f00a f82d 	bl	800b590 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 8001536:	4b0f      	ldr	r3, [pc, #60]	; (8001574 <DM_RefreshBackgroundLayout+0x80>)
 8001538:	8898      	ldrh	r0, [r3, #4]
 800153a:	2300      	movs	r3, #0
 800153c:	9302      	str	r3, [sp, #8]
 800153e:	2302      	movs	r3, #2
 8001540:	9301      	str	r3, [sp, #4]
 8001542:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	2332      	movs	r3, #50	; 0x32
 800154a:	2250      	movs	r2, #80	; 0x50
 800154c:	21c8      	movs	r1, #200	; 0xc8
 800154e:	f00a f81f 	bl	800b590 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 8001552:	4b08      	ldr	r3, [pc, #32]	; (8001574 <DM_RefreshBackgroundLayout+0x80>)
 8001554:	88d8      	ldrh	r0, [r3, #6]
 8001556:	2300      	movs	r3, #0
 8001558:	9302      	str	r3, [sp, #8]
 800155a:	2302      	movs	r3, #2
 800155c:	9301      	str	r3, [sp, #4]
 800155e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2332      	movs	r3, #50	; 0x32
 8001566:	2250      	movs	r2, #80	; 0x50
 8001568:	21c8      	movs	r1, #200	; 0xc8
 800156a:	f00a f811 	bl	800b590 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_WIDTH,
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
}
 800156e:	bf00      	nop
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000000 	.word	0x20000000

08001578 <DM_AddDigitPadding>:
 *			1 if buflen is invalid size
 *			2 unknown error
 *
 */
int DM_AddDigitPadding(uint16_t num, char *buffer, uint16_t buflen)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	6039      	str	r1, [r7, #0]
 8001582:	80fb      	strh	r3, [r7, #6]
 8001584:	4613      	mov	r3, r2
 8001586:	80bb      	strh	r3, [r7, #4]
	if((buflen < 1) || (buflen > 6))
 8001588:	88bb      	ldrh	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d002      	beq.n	8001594 <DM_AddDigitPadding+0x1c>
 800158e:	88bb      	ldrh	r3, [r7, #4]
 8001590:	2b06      	cmp	r3, #6
 8001592:	d904      	bls.n	800159e <DM_AddDigitPadding+0x26>
	{
		DM_SetErrorDebugMsg("DM_AddDigitPadding: invalid input string size");
 8001594:	482a      	ldr	r0, [pc, #168]	; (8001640 <DM_AddDigitPadding+0xc8>)
 8001596:	f000 f863 	bl	8001660 <DM_SetErrorDebugMsg>
		return 1;
 800159a:	2301      	movs	r3, #1
 800159c:	e04c      	b.n	8001638 <DM_AddDigitPadding+0xc0>
	}

	//char* tmpbuf = malloc(sizeof(buffer) * buflen);

	uint16_t tmpcnt = num;
 800159e:	88fb      	ldrh	r3, [r7, #6]
 80015a0:	81fb      	strh	r3, [r7, #14]
	switch(DM_DigitCount(tmpcnt))
 80015a2:	89fb      	ldrh	r3, [r7, #14]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff ff7b 	bl	80014a0 <DM_DigitCount>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b05      	cmp	r3, #5
 80015ae:	d83f      	bhi.n	8001630 <DM_AddDigitPadding+0xb8>
 80015b0:	a201      	add	r2, pc, #4	; (adr r2, 80015b8 <DM_AddDigitPadding+0x40>)
 80015b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015b6:	bf00      	nop
 80015b8:	080015d1 	.word	0x080015d1
 80015bc:	080015e1 	.word	0x080015e1
 80015c0:	080015f1 	.word	0x080015f1
 80015c4:	08001601 	.word	0x08001601
 80015c8:	08001611 	.word	0x08001611
 80015cc:	08001621 	.word	0x08001621
	{

		case 0:
			snprintf(buffer,buflen, "     ");
 80015d0:	88bb      	ldrh	r3, [r7, #4]
 80015d2:	4a1c      	ldr	r2, [pc, #112]	; (8001644 <DM_AddDigitPadding+0xcc>)
 80015d4:	4619      	mov	r1, r3
 80015d6:	6838      	ldr	r0, [r7, #0]
 80015d8:	f00b fc90 	bl	800cefc <sniprintf>
			return 0;
 80015dc:	2300      	movs	r3, #0
 80015de:	e02b      	b.n	8001638 <DM_AddDigitPadding+0xc0>
		case 1:
			snprintf(buffer, buflen, "%u    ", tmpcnt);
 80015e0:	88b9      	ldrh	r1, [r7, #4]
 80015e2:	89fb      	ldrh	r3, [r7, #14]
 80015e4:	4a18      	ldr	r2, [pc, #96]	; (8001648 <DM_AddDigitPadding+0xd0>)
 80015e6:	6838      	ldr	r0, [r7, #0]
 80015e8:	f00b fc88 	bl	800cefc <sniprintf>
			return 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	e023      	b.n	8001638 <DM_AddDigitPadding+0xc0>
		case 2:
			snprintf(buffer, buflen, "%u   ", tmpcnt);
 80015f0:	88b9      	ldrh	r1, [r7, #4]
 80015f2:	89fb      	ldrh	r3, [r7, #14]
 80015f4:	4a15      	ldr	r2, [pc, #84]	; (800164c <DM_AddDigitPadding+0xd4>)
 80015f6:	6838      	ldr	r0, [r7, #0]
 80015f8:	f00b fc80 	bl	800cefc <sniprintf>
			return 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	e01b      	b.n	8001638 <DM_AddDigitPadding+0xc0>
		case 3:
			snprintf(buffer, buflen, "%u  ", tmpcnt);
 8001600:	88b9      	ldrh	r1, [r7, #4]
 8001602:	89fb      	ldrh	r3, [r7, #14]
 8001604:	4a12      	ldr	r2, [pc, #72]	; (8001650 <DM_AddDigitPadding+0xd8>)
 8001606:	6838      	ldr	r0, [r7, #0]
 8001608:	f00b fc78 	bl	800cefc <sniprintf>
			return 0;
 800160c:	2300      	movs	r3, #0
 800160e:	e013      	b.n	8001638 <DM_AddDigitPadding+0xc0>
		case 4:
			snprintf(buffer, buflen, "%u ", tmpcnt);
 8001610:	88b9      	ldrh	r1, [r7, #4]
 8001612:	89fb      	ldrh	r3, [r7, #14]
 8001614:	4a0f      	ldr	r2, [pc, #60]	; (8001654 <DM_AddDigitPadding+0xdc>)
 8001616:	6838      	ldr	r0, [r7, #0]
 8001618:	f00b fc70 	bl	800cefc <sniprintf>
			return 0;
 800161c:	2300      	movs	r3, #0
 800161e:	e00b      	b.n	8001638 <DM_AddDigitPadding+0xc0>
		case 5:
			snprintf(buffer, buflen, "%u", tmpcnt);
 8001620:	88b9      	ldrh	r1, [r7, #4]
 8001622:	89fb      	ldrh	r3, [r7, #14]
 8001624:	4a0c      	ldr	r2, [pc, #48]	; (8001658 <DM_AddDigitPadding+0xe0>)
 8001626:	6838      	ldr	r0, [r7, #0]
 8001628:	f00b fc68 	bl	800cefc <sniprintf>
			return 0;
 800162c:	2300      	movs	r3, #0
 800162e:	e003      	b.n	8001638 <DM_AddDigitPadding+0xc0>

	}
	DM_SetErrorDebugMsg("DM_AddDigitPadding: unknown error");
 8001630:	480a      	ldr	r0, [pc, #40]	; (800165c <DM_AddDigitPadding+0xe4>)
 8001632:	f000 f815 	bl	8001660 <DM_SetErrorDebugMsg>
	return 2;
 8001636:	2302      	movs	r3, #2


}
 8001638:	4618      	mov	r0, r3
 800163a:	3710      	adds	r7, #16
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	0800eee0 	.word	0x0800eee0
 8001644:	0800ef10 	.word	0x0800ef10
 8001648:	0800ef18 	.word	0x0800ef18
 800164c:	0800ef20 	.word	0x0800ef20
 8001650:	0800ef28 	.word	0x0800ef28
 8001654:	0800ef30 	.word	0x0800ef30
 8001658:	0800ef34 	.word	0x0800ef34
 800165c:	0800ef38 	.word	0x0800ef38

08001660 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4a04      	ldr	r2, [pc, #16]	; (800167c <DM_SetErrorDebugMsg+0x1c>)
 800166c:	212d      	movs	r1, #45	; 0x2d
 800166e:	4804      	ldr	r0, [pc, #16]	; (8001680 <DM_SetErrorDebugMsg+0x20>)
 8001670:	f00b fc44 	bl	800cefc <sniprintf>
}
 8001674:	bf00      	nop
 8001676:	3708      	adds	r7, #8
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	0800edf0 	.word	0x0800edf0
 8001680:	20001e84 	.word	0x20001e84

08001684 <FreqMenu_DrawFreqMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawFreqMainMenu()
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);
 800168a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800168e:	9301      	str	r3, [sp, #4]
 8001690:	2302      	movs	r3, #2
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	2300      	movs	r3, #0
 8001696:	22a5      	movs	r2, #165	; 0xa5
 8001698:	211e      	movs	r1, #30
 800169a:	4813      	ldr	r0, [pc, #76]	; (80016e8 <FreqMenu_DrawFreqMainMenu+0x64>)
 800169c:	f00a f8e2 	bl	800b864 <ILI9341_Draw_Text>

	// buttons
	ILI9341_Draw_Text("PRESET", 5, 210, BLACK, 2, DARKCYAN);
 80016a0:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80016a4:	9301      	str	r3, [sp, #4]
 80016a6:	2302      	movs	r3, #2
 80016a8:	9300      	str	r3, [sp, #0]
 80016aa:	2300      	movs	r3, #0
 80016ac:	22d2      	movs	r2, #210	; 0xd2
 80016ae:	2105      	movs	r1, #5
 80016b0:	480e      	ldr	r0, [pc, #56]	; (80016ec <FreqMenu_DrawFreqMainMenu+0x68>)
 80016b2:	f00a f8d7 	bl	800b864 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 87, 210, BLACK, 2, DARKGREEN);
 80016b6:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	2302      	movs	r3, #2
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	2300      	movs	r3, #0
 80016c2:	22d2      	movs	r2, #210	; 0xd2
 80016c4:	2157      	movs	r1, #87	; 0x57
 80016c6:	480a      	ldr	r0, [pc, #40]	; (80016f0 <FreqMenu_DrawFreqMainMenu+0x6c>)
 80016c8:	f00a f8cc 	bl	800b864 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP", 174, 210, BLACK, 2, YELLOW);
 80016cc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	2302      	movs	r3, #2
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	2300      	movs	r3, #0
 80016d8:	22d2      	movs	r2, #210	; 0xd2
 80016da:	21ae      	movs	r1, #174	; 0xae
 80016dc:	4805      	ldr	r0, [pc, #20]	; (80016f4 <FreqMenu_DrawFreqMainMenu+0x70>)
 80016de:	f00a f8c1 	bl	800b864 <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
}
 80016e2:	bf00      	nop
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	0800ef5c 	.word	0x0800ef5c
 80016ec:	0800ef74 	.word	0x0800ef74
 80016f0:	0800ef7c 	.word	0x0800ef7c
 80016f4:	0800ef84 	.word	0x0800ef84

080016f8 <FreqMenu_DrawFreqPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawFreqPresetMenu()
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af02      	add	r7, sp, #8

	uint8_t menu_pos_y1 = 50;
 80016fe:	2332      	movs	r3, #50	; 0x32
 8001700:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 70;
 8001702:	2346      	movs	r3, #70	; 0x46
 8001704:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 90;
 8001706:	235a      	movs	r3, #90	; 0x5a
 8001708:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 110;
 800170a:	236e      	movs	r3, #110	; 0x6e
 800170c:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 130;
 800170e:	2382      	movs	r3, #130	; 0x82
 8001710:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 150;
 8001712:	2396      	movs	r3, #150	; 0x96
 8001714:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 170;
 8001716:	23aa      	movs	r3, #170	; 0xaa
 8001718:	727b      	strb	r3, [r7, #9]
	Freq_Preset_Encoder_Pos_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 800171a:	f001 ffd9 	bl	80036d0 <FreqO_GetFPresetObject>
 800171e:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	f001 823f 	beq.w	8002ba6 <FreqMenu_DrawFreqPresetMenu+0x14ae>
	{
		switch(pFreqPresetTmp->hertz)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001730:	4293      	cmp	r3, r2
 8001732:	f000 8499 	beq.w	8002068 <FreqMenu_DrawFreqPresetMenu+0x970>
 8001736:	f240 22ee 	movw	r2, #750	; 0x2ee
 800173a:	4293      	cmp	r3, r2
 800173c:	d817      	bhi.n	800176e <FreqMenu_DrawFreqPresetMenu+0x76>
 800173e:	2b32      	cmp	r3, #50	; 0x32
 8001740:	f000 81b2 	beq.w	8001aa8 <FreqMenu_DrawFreqPresetMenu+0x3b0>
 8001744:	2b32      	cmp	r3, #50	; 0x32
 8001746:	d806      	bhi.n	8001756 <FreqMenu_DrawFreqPresetMenu+0x5e>
 8001748:	2b01      	cmp	r3, #1
 800174a:	d038      	beq.n	80017be <FreqMenu_DrawFreqPresetMenu+0xc6>
 800174c:	2b0a      	cmp	r3, #10
 800174e:	f000 80e0 	beq.w	8001912 <FreqMenu_DrawFreqPresetMenu+0x21a>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		10, 180, RED, 1, BLACK);
	}

}
 8001752:	f001 ba34 	b.w	8002bbe <FreqMenu_DrawFreqPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 8001756:	2bfa      	cmp	r3, #250	; 0xfa
 8001758:	f000 8316 	beq.w	8001d88 <FreqMenu_DrawFreqPresetMenu+0x690>
 800175c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001760:	f000 83bc 	beq.w	8001edc <FreqMenu_DrawFreqPresetMenu+0x7e4>
 8001764:	2b64      	cmp	r3, #100	; 0x64
 8001766:	f000 8249 	beq.w	8001bfc <FreqMenu_DrawFreqPresetMenu+0x504>
}
 800176a:	f001 ba28 	b.w	8002bbe <FreqMenu_DrawFreqPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 800176e:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001772:	4293      	cmp	r3, r2
 8001774:	f000 8756 	beq.w	8002624 <FreqMenu_DrawFreqPresetMenu+0xf2c>
 8001778:	f246 12a8 	movw	r2, #25000	; 0x61a8
 800177c:	4293      	cmp	r3, r2
 800177e:	d80f      	bhi.n	80017a0 <FreqMenu_DrawFreqPresetMenu+0xa8>
 8001780:	f241 3288 	movw	r2, #5000	; 0x1388
 8001784:	4293      	cmp	r3, r2
 8001786:	f000 85df 	beq.w	8002348 <FreqMenu_DrawFreqPresetMenu+0xc50>
 800178a:	f242 7210 	movw	r2, #10000	; 0x2710
 800178e:	4293      	cmp	r3, r2
 8001790:	f000 8683 	beq.w	800249a <FreqMenu_DrawFreqPresetMenu+0xda2>
 8001794:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001798:	f000 8510 	beq.w	80021bc <FreqMenu_DrawFreqPresetMenu+0xac4>
}
 800179c:	f001 ba0f 	b.w	8002bbe <FreqMenu_DrawFreqPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 80017a0:	4ab1      	ldr	r2, [pc, #708]	; (8001a68 <FreqMenu_DrawFreqPresetMenu+0x370>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	f001 80ac 	beq.w	8002900 <FreqMenu_DrawFreqPresetMenu+0x1208>
 80017a8:	4ab0      	ldr	r2, [pc, #704]	; (8001a6c <FreqMenu_DrawFreqPresetMenu+0x374>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	f001 8151 	beq.w	8002a52 <FreqMenu_DrawFreqPresetMenu+0x135a>
 80017b0:	f24c 3250 	movw	r2, #50000	; 0xc350
 80017b4:	4293      	cmp	r3, r2
 80017b6:	f000 87de 	beq.w	8002776 <FreqMenu_DrawFreqPresetMenu+0x107e>
}
 80017ba:	f001 ba00 	b.w	8002bbe <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, WHITE, 2, BLACK);
 80017be:	7bfb      	ldrb	r3, [r7, #15]
 80017c0:	b29a      	uxth	r2, r3
 80017c2:	2300      	movs	r3, #0
 80017c4:	9301      	str	r3, [sp, #4]
 80017c6:	2302      	movs	r3, #2
 80017c8:	9300      	str	r3, [sp, #0]
 80017ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017ce:	210a      	movs	r1, #10
 80017d0:	48a7      	ldr	r0, [pc, #668]	; (8001a70 <FreqMenu_DrawFreqPresetMenu+0x378>)
 80017d2:	f00a f847 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80017d6:	7bbb      	ldrb	r3, [r7, #14]
 80017d8:	b29a      	uxth	r2, r3
 80017da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017de:	9301      	str	r3, [sp, #4]
 80017e0:	2302      	movs	r3, #2
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	2300      	movs	r3, #0
 80017e6:	210a      	movs	r1, #10
 80017e8:	48a2      	ldr	r0, [pc, #648]	; (8001a74 <FreqMenu_DrawFreqPresetMenu+0x37c>)
 80017ea:	f00a f83b 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80017ee:	7b7b      	ldrb	r3, [r7, #13]
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017f6:	9301      	str	r3, [sp, #4]
 80017f8:	2302      	movs	r3, #2
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	2300      	movs	r3, #0
 80017fe:	210a      	movs	r1, #10
 8001800:	489d      	ldr	r0, [pc, #628]	; (8001a78 <FreqMenu_DrawFreqPresetMenu+0x380>)
 8001802:	f00a f82f 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001806:	7b3b      	ldrb	r3, [r7, #12]
 8001808:	b29a      	uxth	r2, r3
 800180a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	2302      	movs	r3, #2
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	2300      	movs	r3, #0
 8001816:	210a      	movs	r1, #10
 8001818:	4898      	ldr	r0, [pc, #608]	; (8001a7c <FreqMenu_DrawFreqPresetMenu+0x384>)
 800181a:	f00a f823 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 800181e:	7afb      	ldrb	r3, [r7, #11]
 8001820:	b29a      	uxth	r2, r3
 8001822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001826:	9301      	str	r3, [sp, #4]
 8001828:	2302      	movs	r3, #2
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	2300      	movs	r3, #0
 800182e:	210a      	movs	r1, #10
 8001830:	4893      	ldr	r0, [pc, #588]	; (8001a80 <FreqMenu_DrawFreqPresetMenu+0x388>)
 8001832:	f00a f817 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001836:	7abb      	ldrb	r3, [r7, #10]
 8001838:	b29a      	uxth	r2, r3
 800183a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800183e:	9301      	str	r3, [sp, #4]
 8001840:	2302      	movs	r3, #2
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	2300      	movs	r3, #0
 8001846:	210a      	movs	r1, #10
 8001848:	488e      	ldr	r0, [pc, #568]	; (8001a84 <FreqMenu_DrawFreqPresetMenu+0x38c>)
 800184a:	f00a f80b 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 800184e:	7a7b      	ldrb	r3, [r7, #9]
 8001850:	b29a      	uxth	r2, r3
 8001852:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001856:	9301      	str	r3, [sp, #4]
 8001858:	2302      	movs	r3, #2
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	2300      	movs	r3, #0
 800185e:	210a      	movs	r1, #10
 8001860:	4889      	ldr	r0, [pc, #548]	; (8001a88 <FreqMenu_DrawFreqPresetMenu+0x390>)
 8001862:	f009 ffff 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	b29a      	uxth	r2, r3
 800186a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800186e:	9301      	str	r3, [sp, #4]
 8001870:	2302      	movs	r3, #2
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	2300      	movs	r3, #0
 8001876:	2178      	movs	r1, #120	; 0x78
 8001878:	4884      	ldr	r0, [pc, #528]	; (8001a8c <FreqMenu_DrawFreqPresetMenu+0x394>)
 800187a:	f009 fff3 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800187e:	7bbb      	ldrb	r3, [r7, #14]
 8001880:	b29a      	uxth	r2, r3
 8001882:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001886:	9301      	str	r3, [sp, #4]
 8001888:	2302      	movs	r3, #2
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2300      	movs	r3, #0
 800188e:	2178      	movs	r1, #120	; 0x78
 8001890:	487f      	ldr	r0, [pc, #508]	; (8001a90 <FreqMenu_DrawFreqPresetMenu+0x398>)
 8001892:	f009 ffe7 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001896:	7b7b      	ldrb	r3, [r7, #13]
 8001898:	b29a      	uxth	r2, r3
 800189a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800189e:	9301      	str	r3, [sp, #4]
 80018a0:	2302      	movs	r3, #2
 80018a2:	9300      	str	r3, [sp, #0]
 80018a4:	2300      	movs	r3, #0
 80018a6:	2178      	movs	r1, #120	; 0x78
 80018a8:	487a      	ldr	r0, [pc, #488]	; (8001a94 <FreqMenu_DrawFreqPresetMenu+0x39c>)
 80018aa:	f009 ffdb 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80018ae:	7b3b      	ldrb	r3, [r7, #12]
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018b6:	9301      	str	r3, [sp, #4]
 80018b8:	2302      	movs	r3, #2
 80018ba:	9300      	str	r3, [sp, #0]
 80018bc:	2300      	movs	r3, #0
 80018be:	2178      	movs	r1, #120	; 0x78
 80018c0:	4875      	ldr	r0, [pc, #468]	; (8001a98 <FreqMenu_DrawFreqPresetMenu+0x3a0>)
 80018c2:	f009 ffcf 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80018c6:	7afb      	ldrb	r3, [r7, #11]
 80018c8:	b29a      	uxth	r2, r3
 80018ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018ce:	9301      	str	r3, [sp, #4]
 80018d0:	2302      	movs	r3, #2
 80018d2:	9300      	str	r3, [sp, #0]
 80018d4:	2300      	movs	r3, #0
 80018d6:	2178      	movs	r1, #120	; 0x78
 80018d8:	4870      	ldr	r0, [pc, #448]	; (8001a9c <FreqMenu_DrawFreqPresetMenu+0x3a4>)
 80018da:	f009 ffc3 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80018de:	7abb      	ldrb	r3, [r7, #10]
 80018e0:	b29a      	uxth	r2, r3
 80018e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018e6:	9301      	str	r3, [sp, #4]
 80018e8:	2302      	movs	r3, #2
 80018ea:	9300      	str	r3, [sp, #0]
 80018ec:	2300      	movs	r3, #0
 80018ee:	2178      	movs	r1, #120	; 0x78
 80018f0:	486b      	ldr	r0, [pc, #428]	; (8001aa0 <FreqMenu_DrawFreqPresetMenu+0x3a8>)
 80018f2:	f009 ffb7 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80018f6:	7a7b      	ldrb	r3, [r7, #9]
 80018f8:	b29a      	uxth	r2, r3
 80018fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018fe:	9301      	str	r3, [sp, #4]
 8001900:	2302      	movs	r3, #2
 8001902:	9300      	str	r3, [sp, #0]
 8001904:	2300      	movs	r3, #0
 8001906:	2178      	movs	r1, #120	; 0x78
 8001908:	4866      	ldr	r0, [pc, #408]	; (8001aa4 <FreqMenu_DrawFreqPresetMenu+0x3ac>)
 800190a:	f009 ffab 	bl	800b864 <ILI9341_Draw_Text>
				break;
 800190e:	f001 b956 	b.w	8002bbe <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001912:	7bfb      	ldrb	r3, [r7, #15]
 8001914:	b29a      	uxth	r2, r3
 8001916:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800191a:	9301      	str	r3, [sp, #4]
 800191c:	2302      	movs	r3, #2
 800191e:	9300      	str	r3, [sp, #0]
 8001920:	2300      	movs	r3, #0
 8001922:	210a      	movs	r1, #10
 8001924:	4852      	ldr	r0, [pc, #328]	; (8001a70 <FreqMenu_DrawFreqPresetMenu+0x378>)
 8001926:	f009 ff9d 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, WHITE, 2, BLACK);
 800192a:	7bbb      	ldrb	r3, [r7, #14]
 800192c:	b29a      	uxth	r2, r3
 800192e:	2300      	movs	r3, #0
 8001930:	9301      	str	r3, [sp, #4]
 8001932:	2302      	movs	r3, #2
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800193a:	210a      	movs	r1, #10
 800193c:	484d      	ldr	r0, [pc, #308]	; (8001a74 <FreqMenu_DrawFreqPresetMenu+0x37c>)
 800193e:	f009 ff91 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001942:	7b7b      	ldrb	r3, [r7, #13]
 8001944:	b29a      	uxth	r2, r3
 8001946:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800194a:	9301      	str	r3, [sp, #4]
 800194c:	2302      	movs	r3, #2
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	2300      	movs	r3, #0
 8001952:	210a      	movs	r1, #10
 8001954:	4848      	ldr	r0, [pc, #288]	; (8001a78 <FreqMenu_DrawFreqPresetMenu+0x380>)
 8001956:	f009 ff85 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800195a:	7b3b      	ldrb	r3, [r7, #12]
 800195c:	b29a      	uxth	r2, r3
 800195e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001962:	9301      	str	r3, [sp, #4]
 8001964:	2302      	movs	r3, #2
 8001966:	9300      	str	r3, [sp, #0]
 8001968:	2300      	movs	r3, #0
 800196a:	210a      	movs	r1, #10
 800196c:	4843      	ldr	r0, [pc, #268]	; (8001a7c <FreqMenu_DrawFreqPresetMenu+0x384>)
 800196e:	f009 ff79 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001972:	7afb      	ldrb	r3, [r7, #11]
 8001974:	b29a      	uxth	r2, r3
 8001976:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800197a:	9301      	str	r3, [sp, #4]
 800197c:	2302      	movs	r3, #2
 800197e:	9300      	str	r3, [sp, #0]
 8001980:	2300      	movs	r3, #0
 8001982:	210a      	movs	r1, #10
 8001984:	483e      	ldr	r0, [pc, #248]	; (8001a80 <FreqMenu_DrawFreqPresetMenu+0x388>)
 8001986:	f009 ff6d 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800198a:	7abb      	ldrb	r3, [r7, #10]
 800198c:	b29a      	uxth	r2, r3
 800198e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001992:	9301      	str	r3, [sp, #4]
 8001994:	2302      	movs	r3, #2
 8001996:	9300      	str	r3, [sp, #0]
 8001998:	2300      	movs	r3, #0
 800199a:	210a      	movs	r1, #10
 800199c:	4839      	ldr	r0, [pc, #228]	; (8001a84 <FreqMenu_DrawFreqPresetMenu+0x38c>)
 800199e:	f009 ff61 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80019a2:	7a7b      	ldrb	r3, [r7, #9]
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019aa:	9301      	str	r3, [sp, #4]
 80019ac:	2302      	movs	r3, #2
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	2300      	movs	r3, #0
 80019b2:	210a      	movs	r1, #10
 80019b4:	4834      	ldr	r0, [pc, #208]	; (8001a88 <FreqMenu_DrawFreqPresetMenu+0x390>)
 80019b6:	f009 ff55 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80019ba:	7bfb      	ldrb	r3, [r7, #15]
 80019bc:	b29a      	uxth	r2, r3
 80019be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019c2:	9301      	str	r3, [sp, #4]
 80019c4:	2302      	movs	r3, #2
 80019c6:	9300      	str	r3, [sp, #0]
 80019c8:	2300      	movs	r3, #0
 80019ca:	2178      	movs	r1, #120	; 0x78
 80019cc:	482f      	ldr	r0, [pc, #188]	; (8001a8c <FreqMenu_DrawFreqPresetMenu+0x394>)
 80019ce:	f009 ff49 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80019d2:	7bbb      	ldrb	r3, [r7, #14]
 80019d4:	b29a      	uxth	r2, r3
 80019d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	2302      	movs	r3, #2
 80019de:	9300      	str	r3, [sp, #0]
 80019e0:	2300      	movs	r3, #0
 80019e2:	2178      	movs	r1, #120	; 0x78
 80019e4:	482a      	ldr	r0, [pc, #168]	; (8001a90 <FreqMenu_DrawFreqPresetMenu+0x398>)
 80019e6:	f009 ff3d 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80019ea:	7b7b      	ldrb	r3, [r7, #13]
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	2302      	movs	r3, #2
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	2300      	movs	r3, #0
 80019fa:	2178      	movs	r1, #120	; 0x78
 80019fc:	4825      	ldr	r0, [pc, #148]	; (8001a94 <FreqMenu_DrawFreqPresetMenu+0x39c>)
 80019fe:	f009 ff31 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001a02:	7b3b      	ldrb	r3, [r7, #12]
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a0a:	9301      	str	r3, [sp, #4]
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	9300      	str	r3, [sp, #0]
 8001a10:	2300      	movs	r3, #0
 8001a12:	2178      	movs	r1, #120	; 0x78
 8001a14:	4820      	ldr	r0, [pc, #128]	; (8001a98 <FreqMenu_DrawFreqPresetMenu+0x3a0>)
 8001a16:	f009 ff25 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001a1a:	7afb      	ldrb	r3, [r7, #11]
 8001a1c:	b29a      	uxth	r2, r3
 8001a1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a22:	9301      	str	r3, [sp, #4]
 8001a24:	2302      	movs	r3, #2
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2300      	movs	r3, #0
 8001a2a:	2178      	movs	r1, #120	; 0x78
 8001a2c:	481b      	ldr	r0, [pc, #108]	; (8001a9c <FreqMenu_DrawFreqPresetMenu+0x3a4>)
 8001a2e:	f009 ff19 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001a32:	7abb      	ldrb	r3, [r7, #10]
 8001a34:	b29a      	uxth	r2, r3
 8001a36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a3a:	9301      	str	r3, [sp, #4]
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	2300      	movs	r3, #0
 8001a42:	2178      	movs	r1, #120	; 0x78
 8001a44:	4816      	ldr	r0, [pc, #88]	; (8001aa0 <FreqMenu_DrawFreqPresetMenu+0x3a8>)
 8001a46:	f009 ff0d 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001a4a:	7a7b      	ldrb	r3, [r7, #9]
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a52:	9301      	str	r3, [sp, #4]
 8001a54:	2302      	movs	r3, #2
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	2300      	movs	r3, #0
 8001a5a:	2178      	movs	r1, #120	; 0x78
 8001a5c:	4811      	ldr	r0, [pc, #68]	; (8001aa4 <FreqMenu_DrawFreqPresetMenu+0x3ac>)
 8001a5e:	f009 ff01 	bl	800b864 <ILI9341_Draw_Text>
				break;
 8001a62:	f001 b8ac 	b.w	8002bbe <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8001a66:	bf00      	nop
 8001a68:	000124f8 	.word	0x000124f8
 8001a6c:	000186a0 	.word	0x000186a0
 8001a70:	0800ef8c 	.word	0x0800ef8c
 8001a74:	0800ef94 	.word	0x0800ef94
 8001a78:	0800ef9c 	.word	0x0800ef9c
 8001a7c:	0800efa4 	.word	0x0800efa4
 8001a80:	0800efac 	.word	0x0800efac
 8001a84:	0800efb4 	.word	0x0800efb4
 8001a88:	0800efbc 	.word	0x0800efbc
 8001a8c:	0800efc4 	.word	0x0800efc4
 8001a90:	0800efcc 	.word	0x0800efcc
 8001a94:	0800efd4 	.word	0x0800efd4
 8001a98:	0800efdc 	.word	0x0800efdc
 8001a9c:	0800efe4 	.word	0x0800efe4
 8001aa0:	0800efec 	.word	0x0800efec
 8001aa4:	0800eff4 	.word	0x0800eff4
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
 8001aaa:	b29a      	uxth	r2, r3
 8001aac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ab0:	9301      	str	r3, [sp, #4]
 8001ab2:	2302      	movs	r3, #2
 8001ab4:	9300      	str	r3, [sp, #0]
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	210a      	movs	r1, #10
 8001aba:	48a5      	ldr	r0, [pc, #660]	; (8001d50 <FreqMenu_DrawFreqPresetMenu+0x658>)
 8001abc:	f009 fed2 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001ac0:	7bbb      	ldrb	r3, [r7, #14]
 8001ac2:	b29a      	uxth	r2, r3
 8001ac4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ac8:	9301      	str	r3, [sp, #4]
 8001aca:	2302      	movs	r3, #2
 8001acc:	9300      	str	r3, [sp, #0]
 8001ace:	2300      	movs	r3, #0
 8001ad0:	210a      	movs	r1, #10
 8001ad2:	48a0      	ldr	r0, [pc, #640]	; (8001d54 <FreqMenu_DrawFreqPresetMenu+0x65c>)
 8001ad4:	f009 fec6 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, WHITE, 2, BLACK);
 8001ad8:	7b7b      	ldrb	r3, [r7, #13]
 8001ada:	b29a      	uxth	r2, r3
 8001adc:	2300      	movs	r3, #0
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	2302      	movs	r3, #2
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ae8:	210a      	movs	r1, #10
 8001aea:	489b      	ldr	r0, [pc, #620]	; (8001d58 <FreqMenu_DrawFreqPresetMenu+0x660>)
 8001aec:	f009 feba 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001af0:	7b3b      	ldrb	r3, [r7, #12]
 8001af2:	b29a      	uxth	r2, r3
 8001af4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001af8:	9301      	str	r3, [sp, #4]
 8001afa:	2302      	movs	r3, #2
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2300      	movs	r3, #0
 8001b00:	210a      	movs	r1, #10
 8001b02:	4896      	ldr	r0, [pc, #600]	; (8001d5c <FreqMenu_DrawFreqPresetMenu+0x664>)
 8001b04:	f009 feae 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001b08:	7afb      	ldrb	r3, [r7, #11]
 8001b0a:	b29a      	uxth	r2, r3
 8001b0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b10:	9301      	str	r3, [sp, #4]
 8001b12:	2302      	movs	r3, #2
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	2300      	movs	r3, #0
 8001b18:	210a      	movs	r1, #10
 8001b1a:	4891      	ldr	r0, [pc, #580]	; (8001d60 <FreqMenu_DrawFreqPresetMenu+0x668>)
 8001b1c:	f009 fea2 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001b20:	7abb      	ldrb	r3, [r7, #10]
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b28:	9301      	str	r3, [sp, #4]
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	210a      	movs	r1, #10
 8001b32:	488c      	ldr	r0, [pc, #560]	; (8001d64 <FreqMenu_DrawFreqPresetMenu+0x66c>)
 8001b34:	f009 fe96 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001b38:	7a7b      	ldrb	r3, [r7, #9]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	2302      	movs	r3, #2
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	2300      	movs	r3, #0
 8001b48:	210a      	movs	r1, #10
 8001b4a:	4887      	ldr	r0, [pc, #540]	; (8001d68 <FreqMenu_DrawFreqPresetMenu+0x670>)
 8001b4c:	f009 fe8a 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001b50:	7bfb      	ldrb	r3, [r7, #15]
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	2178      	movs	r1, #120	; 0x78
 8001b62:	4882      	ldr	r0, [pc, #520]	; (8001d6c <FreqMenu_DrawFreqPresetMenu+0x674>)
 8001b64:	f009 fe7e 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001b68:	7bbb      	ldrb	r3, [r7, #14]
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	2302      	movs	r3, #2
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	2300      	movs	r3, #0
 8001b78:	2178      	movs	r1, #120	; 0x78
 8001b7a:	487d      	ldr	r0, [pc, #500]	; (8001d70 <FreqMenu_DrawFreqPresetMenu+0x678>)
 8001b7c:	f009 fe72 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001b80:	7b7b      	ldrb	r3, [r7, #13]
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b88:	9301      	str	r3, [sp, #4]
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	2178      	movs	r1, #120	; 0x78
 8001b92:	4878      	ldr	r0, [pc, #480]	; (8001d74 <FreqMenu_DrawFreqPresetMenu+0x67c>)
 8001b94:	f009 fe66 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001b98:	7b3b      	ldrb	r3, [r7, #12]
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ba0:	9301      	str	r3, [sp, #4]
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	2178      	movs	r1, #120	; 0x78
 8001baa:	4873      	ldr	r0, [pc, #460]	; (8001d78 <FreqMenu_DrawFreqPresetMenu+0x680>)
 8001bac:	f009 fe5a 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001bb0:	7afb      	ldrb	r3, [r7, #11]
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bb8:	9301      	str	r3, [sp, #4]
 8001bba:	2302      	movs	r3, #2
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	2178      	movs	r1, #120	; 0x78
 8001bc2:	486e      	ldr	r0, [pc, #440]	; (8001d7c <FreqMenu_DrawFreqPresetMenu+0x684>)
 8001bc4:	f009 fe4e 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001bc8:	7abb      	ldrb	r3, [r7, #10]
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bd0:	9301      	str	r3, [sp, #4]
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	2178      	movs	r1, #120	; 0x78
 8001bda:	4869      	ldr	r0, [pc, #420]	; (8001d80 <FreqMenu_DrawFreqPresetMenu+0x688>)
 8001bdc:	f009 fe42 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001be0:	7a7b      	ldrb	r3, [r7, #9]
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001be8:	9301      	str	r3, [sp, #4]
 8001bea:	2302      	movs	r3, #2
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	2300      	movs	r3, #0
 8001bf0:	2178      	movs	r1, #120	; 0x78
 8001bf2:	4864      	ldr	r0, [pc, #400]	; (8001d84 <FreqMenu_DrawFreqPresetMenu+0x68c>)
 8001bf4:	f009 fe36 	bl	800b864 <ILI9341_Draw_Text>
				break;
 8001bf8:	f000 bfe1 	b.w	8002bbe <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001bfc:	7bfb      	ldrb	r3, [r7, #15]
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c04:	9301      	str	r3, [sp, #4]
 8001c06:	2302      	movs	r3, #2
 8001c08:	9300      	str	r3, [sp, #0]
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	210a      	movs	r1, #10
 8001c0e:	4850      	ldr	r0, [pc, #320]	; (8001d50 <FreqMenu_DrawFreqPresetMenu+0x658>)
 8001c10:	f009 fe28 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001c14:	7bbb      	ldrb	r3, [r7, #14]
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	2302      	movs	r3, #2
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	2300      	movs	r3, #0
 8001c24:	210a      	movs	r1, #10
 8001c26:	484b      	ldr	r0, [pc, #300]	; (8001d54 <FreqMenu_DrawFreqPresetMenu+0x65c>)
 8001c28:	f009 fe1c 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001c2c:	7b7b      	ldrb	r3, [r7, #13]
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c34:	9301      	str	r3, [sp, #4]
 8001c36:	2302      	movs	r3, #2
 8001c38:	9300      	str	r3, [sp, #0]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	210a      	movs	r1, #10
 8001c3e:	4846      	ldr	r0, [pc, #280]	; (8001d58 <FreqMenu_DrawFreqPresetMenu+0x660>)
 8001c40:	f009 fe10 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, WHITE, 2, BLACK);
 8001c44:	7b3b      	ldrb	r3, [r7, #12]
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	2300      	movs	r3, #0
 8001c4a:	9301      	str	r3, [sp, #4]
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c54:	210a      	movs	r1, #10
 8001c56:	4841      	ldr	r0, [pc, #260]	; (8001d5c <FreqMenu_DrawFreqPresetMenu+0x664>)
 8001c58:	f009 fe04 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001c5c:	7afb      	ldrb	r3, [r7, #11]
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c64:	9301      	str	r3, [sp, #4]
 8001c66:	2302      	movs	r3, #2
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	210a      	movs	r1, #10
 8001c6e:	483c      	ldr	r0, [pc, #240]	; (8001d60 <FreqMenu_DrawFreqPresetMenu+0x668>)
 8001c70:	f009 fdf8 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001c74:	7abb      	ldrb	r3, [r7, #10]
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c7c:	9301      	str	r3, [sp, #4]
 8001c7e:	2302      	movs	r3, #2
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	2300      	movs	r3, #0
 8001c84:	210a      	movs	r1, #10
 8001c86:	4837      	ldr	r0, [pc, #220]	; (8001d64 <FreqMenu_DrawFreqPresetMenu+0x66c>)
 8001c88:	f009 fdec 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001c8c:	7a7b      	ldrb	r3, [r7, #9]
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c94:	9301      	str	r3, [sp, #4]
 8001c96:	2302      	movs	r3, #2
 8001c98:	9300      	str	r3, [sp, #0]
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	210a      	movs	r1, #10
 8001c9e:	4832      	ldr	r0, [pc, #200]	; (8001d68 <FreqMenu_DrawFreqPresetMenu+0x670>)
 8001ca0:	f009 fde0 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001ca4:	7bfb      	ldrb	r3, [r7, #15]
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cac:	9301      	str	r3, [sp, #4]
 8001cae:	2302      	movs	r3, #2
 8001cb0:	9300      	str	r3, [sp, #0]
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	2178      	movs	r1, #120	; 0x78
 8001cb6:	482d      	ldr	r0, [pc, #180]	; (8001d6c <FreqMenu_DrawFreqPresetMenu+0x674>)
 8001cb8:	f009 fdd4 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001cbc:	7bbb      	ldrb	r3, [r7, #14]
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cc4:	9301      	str	r3, [sp, #4]
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	9300      	str	r3, [sp, #0]
 8001cca:	2300      	movs	r3, #0
 8001ccc:	2178      	movs	r1, #120	; 0x78
 8001cce:	4828      	ldr	r0, [pc, #160]	; (8001d70 <FreqMenu_DrawFreqPresetMenu+0x678>)
 8001cd0:	f009 fdc8 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001cd4:	7b7b      	ldrb	r3, [r7, #13]
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	2302      	movs	r3, #2
 8001ce0:	9300      	str	r3, [sp, #0]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	2178      	movs	r1, #120	; 0x78
 8001ce6:	4823      	ldr	r0, [pc, #140]	; (8001d74 <FreqMenu_DrawFreqPresetMenu+0x67c>)
 8001ce8:	f009 fdbc 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001cec:	7b3b      	ldrb	r3, [r7, #12]
 8001cee:	b29a      	uxth	r2, r3
 8001cf0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cf4:	9301      	str	r3, [sp, #4]
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	9300      	str	r3, [sp, #0]
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2178      	movs	r1, #120	; 0x78
 8001cfe:	481e      	ldr	r0, [pc, #120]	; (8001d78 <FreqMenu_DrawFreqPresetMenu+0x680>)
 8001d00:	f009 fdb0 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001d04:	7afb      	ldrb	r3, [r7, #11]
 8001d06:	b29a      	uxth	r2, r3
 8001d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d0c:	9301      	str	r3, [sp, #4]
 8001d0e:	2302      	movs	r3, #2
 8001d10:	9300      	str	r3, [sp, #0]
 8001d12:	2300      	movs	r3, #0
 8001d14:	2178      	movs	r1, #120	; 0x78
 8001d16:	4819      	ldr	r0, [pc, #100]	; (8001d7c <FreqMenu_DrawFreqPresetMenu+0x684>)
 8001d18:	f009 fda4 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001d1c:	7abb      	ldrb	r3, [r7, #10]
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d24:	9301      	str	r3, [sp, #4]
 8001d26:	2302      	movs	r3, #2
 8001d28:	9300      	str	r3, [sp, #0]
 8001d2a:	2300      	movs	r3, #0
 8001d2c:	2178      	movs	r1, #120	; 0x78
 8001d2e:	4814      	ldr	r0, [pc, #80]	; (8001d80 <FreqMenu_DrawFreqPresetMenu+0x688>)
 8001d30:	f009 fd98 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001d34:	7a7b      	ldrb	r3, [r7, #9]
 8001d36:	b29a      	uxth	r2, r3
 8001d38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d3c:	9301      	str	r3, [sp, #4]
 8001d3e:	2302      	movs	r3, #2
 8001d40:	9300      	str	r3, [sp, #0]
 8001d42:	2300      	movs	r3, #0
 8001d44:	2178      	movs	r1, #120	; 0x78
 8001d46:	480f      	ldr	r0, [pc, #60]	; (8001d84 <FreqMenu_DrawFreqPresetMenu+0x68c>)
 8001d48:	f009 fd8c 	bl	800b864 <ILI9341_Draw_Text>
				break;
 8001d4c:	f000 bf37 	b.w	8002bbe <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8001d50:	0800ef8c 	.word	0x0800ef8c
 8001d54:	0800ef94 	.word	0x0800ef94
 8001d58:	0800ef9c 	.word	0x0800ef9c
 8001d5c:	0800efa4 	.word	0x0800efa4
 8001d60:	0800efac 	.word	0x0800efac
 8001d64:	0800efb4 	.word	0x0800efb4
 8001d68:	0800efbc 	.word	0x0800efbc
 8001d6c:	0800efc4 	.word	0x0800efc4
 8001d70:	0800efcc 	.word	0x0800efcc
 8001d74:	0800efd4 	.word	0x0800efd4
 8001d78:	0800efdc 	.word	0x0800efdc
 8001d7c:	0800efe4 	.word	0x0800efe4
 8001d80:	0800efec 	.word	0x0800efec
 8001d84:	0800eff4 	.word	0x0800eff4
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001d88:	7bfb      	ldrb	r3, [r7, #15]
 8001d8a:	b29a      	uxth	r2, r3
 8001d8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d90:	9301      	str	r3, [sp, #4]
 8001d92:	2302      	movs	r3, #2
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	2300      	movs	r3, #0
 8001d98:	210a      	movs	r1, #10
 8001d9a:	48a5      	ldr	r0, [pc, #660]	; (8002030 <FreqMenu_DrawFreqPresetMenu+0x938>)
 8001d9c:	f009 fd62 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001da0:	7bbb      	ldrb	r3, [r7, #14]
 8001da2:	b29a      	uxth	r2, r3
 8001da4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001da8:	9301      	str	r3, [sp, #4]
 8001daa:	2302      	movs	r3, #2
 8001dac:	9300      	str	r3, [sp, #0]
 8001dae:	2300      	movs	r3, #0
 8001db0:	210a      	movs	r1, #10
 8001db2:	48a0      	ldr	r0, [pc, #640]	; (8002034 <FreqMenu_DrawFreqPresetMenu+0x93c>)
 8001db4:	f009 fd56 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001db8:	7b7b      	ldrb	r3, [r7, #13]
 8001dba:	b29a      	uxth	r2, r3
 8001dbc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dc0:	9301      	str	r3, [sp, #4]
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	9300      	str	r3, [sp, #0]
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	210a      	movs	r1, #10
 8001dca:	489b      	ldr	r0, [pc, #620]	; (8002038 <FreqMenu_DrawFreqPresetMenu+0x940>)
 8001dcc:	f009 fd4a 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001dd0:	7b3b      	ldrb	r3, [r7, #12]
 8001dd2:	b29a      	uxth	r2, r3
 8001dd4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dd8:	9301      	str	r3, [sp, #4]
 8001dda:	2302      	movs	r3, #2
 8001ddc:	9300      	str	r3, [sp, #0]
 8001dde:	2300      	movs	r3, #0
 8001de0:	210a      	movs	r1, #10
 8001de2:	4896      	ldr	r0, [pc, #600]	; (800203c <FreqMenu_DrawFreqPresetMenu+0x944>)
 8001de4:	f009 fd3e 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, WHITE, 2, BLACK);
 8001de8:	7afb      	ldrb	r3, [r7, #11]
 8001dea:	b29a      	uxth	r2, r3
 8001dec:	2300      	movs	r3, #0
 8001dee:	9301      	str	r3, [sp, #4]
 8001df0:	2302      	movs	r3, #2
 8001df2:	9300      	str	r3, [sp, #0]
 8001df4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001df8:	210a      	movs	r1, #10
 8001dfa:	4891      	ldr	r0, [pc, #580]	; (8002040 <FreqMenu_DrawFreqPresetMenu+0x948>)
 8001dfc:	f009 fd32 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001e00:	7abb      	ldrb	r3, [r7, #10]
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e08:	9301      	str	r3, [sp, #4]
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	210a      	movs	r1, #10
 8001e12:	488c      	ldr	r0, [pc, #560]	; (8002044 <FreqMenu_DrawFreqPresetMenu+0x94c>)
 8001e14:	f009 fd26 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001e18:	7a7b      	ldrb	r3, [r7, #9]
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	2302      	movs	r3, #2
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	2300      	movs	r3, #0
 8001e28:	210a      	movs	r1, #10
 8001e2a:	4887      	ldr	r0, [pc, #540]	; (8002048 <FreqMenu_DrawFreqPresetMenu+0x950>)
 8001e2c:	f009 fd1a 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	2178      	movs	r1, #120	; 0x78
 8001e42:	4882      	ldr	r0, [pc, #520]	; (800204c <FreqMenu_DrawFreqPresetMenu+0x954>)
 8001e44:	f009 fd0e 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001e48:	7bbb      	ldrb	r3, [r7, #14]
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	2302      	movs	r3, #2
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	2300      	movs	r3, #0
 8001e58:	2178      	movs	r1, #120	; 0x78
 8001e5a:	487d      	ldr	r0, [pc, #500]	; (8002050 <FreqMenu_DrawFreqPresetMenu+0x958>)
 8001e5c:	f009 fd02 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001e60:	7b7b      	ldrb	r3, [r7, #13]
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e68:	9301      	str	r3, [sp, #4]
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2178      	movs	r1, #120	; 0x78
 8001e72:	4878      	ldr	r0, [pc, #480]	; (8002054 <FreqMenu_DrawFreqPresetMenu+0x95c>)
 8001e74:	f009 fcf6 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001e78:	7b3b      	ldrb	r3, [r7, #12]
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e80:	9301      	str	r3, [sp, #4]
 8001e82:	2302      	movs	r3, #2
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	2300      	movs	r3, #0
 8001e88:	2178      	movs	r1, #120	; 0x78
 8001e8a:	4873      	ldr	r0, [pc, #460]	; (8002058 <FreqMenu_DrawFreqPresetMenu+0x960>)
 8001e8c:	f009 fcea 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001e90:	7afb      	ldrb	r3, [r7, #11]
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e98:	9301      	str	r3, [sp, #4]
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	2178      	movs	r1, #120	; 0x78
 8001ea2:	486e      	ldr	r0, [pc, #440]	; (800205c <FreqMenu_DrawFreqPresetMenu+0x964>)
 8001ea4:	f009 fcde 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001ea8:	7abb      	ldrb	r3, [r7, #10]
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eb0:	9301      	str	r3, [sp, #4]
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	2178      	movs	r1, #120	; 0x78
 8001eba:	4869      	ldr	r0, [pc, #420]	; (8002060 <FreqMenu_DrawFreqPresetMenu+0x968>)
 8001ebc:	f009 fcd2 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001ec0:	7a7b      	ldrb	r3, [r7, #9]
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ec8:	9301      	str	r3, [sp, #4]
 8001eca:	2302      	movs	r3, #2
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	2178      	movs	r1, #120	; 0x78
 8001ed2:	4864      	ldr	r0, [pc, #400]	; (8002064 <FreqMenu_DrawFreqPresetMenu+0x96c>)
 8001ed4:	f009 fcc6 	bl	800b864 <ILI9341_Draw_Text>
				break;
 8001ed8:	f000 be71 	b.w	8002bbe <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ee4:	9301      	str	r3, [sp, #4]
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	9300      	str	r3, [sp, #0]
 8001eea:	2300      	movs	r3, #0
 8001eec:	210a      	movs	r1, #10
 8001eee:	4850      	ldr	r0, [pc, #320]	; (8002030 <FreqMenu_DrawFreqPresetMenu+0x938>)
 8001ef0:	f009 fcb8 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001ef4:	7bbb      	ldrb	r3, [r7, #14]
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001efc:	9301      	str	r3, [sp, #4]
 8001efe:	2302      	movs	r3, #2
 8001f00:	9300      	str	r3, [sp, #0]
 8001f02:	2300      	movs	r3, #0
 8001f04:	210a      	movs	r1, #10
 8001f06:	484b      	ldr	r0, [pc, #300]	; (8002034 <FreqMenu_DrawFreqPresetMenu+0x93c>)
 8001f08:	f009 fcac 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001f0c:	7b7b      	ldrb	r3, [r7, #13]
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f14:	9301      	str	r3, [sp, #4]
 8001f16:	2302      	movs	r3, #2
 8001f18:	9300      	str	r3, [sp, #0]
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	210a      	movs	r1, #10
 8001f1e:	4846      	ldr	r0, [pc, #280]	; (8002038 <FreqMenu_DrawFreqPresetMenu+0x940>)
 8001f20:	f009 fca0 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001f24:	7b3b      	ldrb	r3, [r7, #12]
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f2c:	9301      	str	r3, [sp, #4]
 8001f2e:	2302      	movs	r3, #2
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	2300      	movs	r3, #0
 8001f34:	210a      	movs	r1, #10
 8001f36:	4841      	ldr	r0, [pc, #260]	; (800203c <FreqMenu_DrawFreqPresetMenu+0x944>)
 8001f38:	f009 fc94 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001f3c:	7afb      	ldrb	r3, [r7, #11]
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f44:	9301      	str	r3, [sp, #4]
 8001f46:	2302      	movs	r3, #2
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	210a      	movs	r1, #10
 8001f4e:	483c      	ldr	r0, [pc, #240]	; (8002040 <FreqMenu_DrawFreqPresetMenu+0x948>)
 8001f50:	f009 fc88 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, WHITE, 2, BLACK);
 8001f54:	7abb      	ldrb	r3, [r7, #10]
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	2300      	movs	r3, #0
 8001f5a:	9301      	str	r3, [sp, #4]
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f64:	210a      	movs	r1, #10
 8001f66:	4837      	ldr	r0, [pc, #220]	; (8002044 <FreqMenu_DrawFreqPresetMenu+0x94c>)
 8001f68:	f009 fc7c 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001f6c:	7a7b      	ldrb	r3, [r7, #9]
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f74:	9301      	str	r3, [sp, #4]
 8001f76:	2302      	movs	r3, #2
 8001f78:	9300      	str	r3, [sp, #0]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	210a      	movs	r1, #10
 8001f7e:	4832      	ldr	r0, [pc, #200]	; (8002048 <FreqMenu_DrawFreqPresetMenu+0x950>)
 8001f80:	f009 fc70 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f8c:	9301      	str	r3, [sp, #4]
 8001f8e:	2302      	movs	r3, #2
 8001f90:	9300      	str	r3, [sp, #0]
 8001f92:	2300      	movs	r3, #0
 8001f94:	2178      	movs	r1, #120	; 0x78
 8001f96:	482d      	ldr	r0, [pc, #180]	; (800204c <FreqMenu_DrawFreqPresetMenu+0x954>)
 8001f98:	f009 fc64 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001f9c:	7bbb      	ldrb	r3, [r7, #14]
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fa4:	9301      	str	r3, [sp, #4]
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	9300      	str	r3, [sp, #0]
 8001faa:	2300      	movs	r3, #0
 8001fac:	2178      	movs	r1, #120	; 0x78
 8001fae:	4828      	ldr	r0, [pc, #160]	; (8002050 <FreqMenu_DrawFreqPresetMenu+0x958>)
 8001fb0:	f009 fc58 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001fb4:	7b7b      	ldrb	r3, [r7, #13]
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	2302      	movs	r3, #2
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	2178      	movs	r1, #120	; 0x78
 8001fc6:	4823      	ldr	r0, [pc, #140]	; (8002054 <FreqMenu_DrawFreqPresetMenu+0x95c>)
 8001fc8:	f009 fc4c 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001fcc:	7b3b      	ldrb	r3, [r7, #12]
 8001fce:	b29a      	uxth	r2, r3
 8001fd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fd4:	9301      	str	r3, [sp, #4]
 8001fd6:	2302      	movs	r3, #2
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	2300      	movs	r3, #0
 8001fdc:	2178      	movs	r1, #120	; 0x78
 8001fde:	481e      	ldr	r0, [pc, #120]	; (8002058 <FreqMenu_DrawFreqPresetMenu+0x960>)
 8001fe0:	f009 fc40 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001fe4:	7afb      	ldrb	r3, [r7, #11]
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fec:	9301      	str	r3, [sp, #4]
 8001fee:	2302      	movs	r3, #2
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	2178      	movs	r1, #120	; 0x78
 8001ff6:	4819      	ldr	r0, [pc, #100]	; (800205c <FreqMenu_DrawFreqPresetMenu+0x964>)
 8001ff8:	f009 fc34 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001ffc:	7abb      	ldrb	r3, [r7, #10]
 8001ffe:	b29a      	uxth	r2, r3
 8002000:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002004:	9301      	str	r3, [sp, #4]
 8002006:	2302      	movs	r3, #2
 8002008:	9300      	str	r3, [sp, #0]
 800200a:	2300      	movs	r3, #0
 800200c:	2178      	movs	r1, #120	; 0x78
 800200e:	4814      	ldr	r0, [pc, #80]	; (8002060 <FreqMenu_DrawFreqPresetMenu+0x968>)
 8002010:	f009 fc28 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002014:	7a7b      	ldrb	r3, [r7, #9]
 8002016:	b29a      	uxth	r2, r3
 8002018:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800201c:	9301      	str	r3, [sp, #4]
 800201e:	2302      	movs	r3, #2
 8002020:	9300      	str	r3, [sp, #0]
 8002022:	2300      	movs	r3, #0
 8002024:	2178      	movs	r1, #120	; 0x78
 8002026:	480f      	ldr	r0, [pc, #60]	; (8002064 <FreqMenu_DrawFreqPresetMenu+0x96c>)
 8002028:	f009 fc1c 	bl	800b864 <ILI9341_Draw_Text>
				break;
 800202c:	f000 bdc7 	b.w	8002bbe <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8002030:	0800ef8c 	.word	0x0800ef8c
 8002034:	0800ef94 	.word	0x0800ef94
 8002038:	0800ef9c 	.word	0x0800ef9c
 800203c:	0800efa4 	.word	0x0800efa4
 8002040:	0800efac 	.word	0x0800efac
 8002044:	0800efb4 	.word	0x0800efb4
 8002048:	0800efbc 	.word	0x0800efbc
 800204c:	0800efc4 	.word	0x0800efc4
 8002050:	0800efcc 	.word	0x0800efcc
 8002054:	0800efd4 	.word	0x0800efd4
 8002058:	0800efdc 	.word	0x0800efdc
 800205c:	0800efe4 	.word	0x0800efe4
 8002060:	0800efec 	.word	0x0800efec
 8002064:	0800eff4 	.word	0x0800eff4
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	b29a      	uxth	r2, r3
 800206c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002070:	9301      	str	r3, [sp, #4]
 8002072:	2302      	movs	r3, #2
 8002074:	9300      	str	r3, [sp, #0]
 8002076:	2300      	movs	r3, #0
 8002078:	210a      	movs	r1, #10
 800207a:	48a5      	ldr	r0, [pc, #660]	; (8002310 <FreqMenu_DrawFreqPresetMenu+0xc18>)
 800207c:	f009 fbf2 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002080:	7bbb      	ldrb	r3, [r7, #14]
 8002082:	b29a      	uxth	r2, r3
 8002084:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002088:	9301      	str	r3, [sp, #4]
 800208a:	2302      	movs	r3, #2
 800208c:	9300      	str	r3, [sp, #0]
 800208e:	2300      	movs	r3, #0
 8002090:	210a      	movs	r1, #10
 8002092:	48a0      	ldr	r0, [pc, #640]	; (8002314 <FreqMenu_DrawFreqPresetMenu+0xc1c>)
 8002094:	f009 fbe6 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002098:	7b7b      	ldrb	r3, [r7, #13]
 800209a:	b29a      	uxth	r2, r3
 800209c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020a0:	9301      	str	r3, [sp, #4]
 80020a2:	2302      	movs	r3, #2
 80020a4:	9300      	str	r3, [sp, #0]
 80020a6:	2300      	movs	r3, #0
 80020a8:	210a      	movs	r1, #10
 80020aa:	489b      	ldr	r0, [pc, #620]	; (8002318 <FreqMenu_DrawFreqPresetMenu+0xc20>)
 80020ac:	f009 fbda 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80020b0:	7b3b      	ldrb	r3, [r7, #12]
 80020b2:	b29a      	uxth	r2, r3
 80020b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020b8:	9301      	str	r3, [sp, #4]
 80020ba:	2302      	movs	r3, #2
 80020bc:	9300      	str	r3, [sp, #0]
 80020be:	2300      	movs	r3, #0
 80020c0:	210a      	movs	r1, #10
 80020c2:	4896      	ldr	r0, [pc, #600]	; (800231c <FreqMenu_DrawFreqPresetMenu+0xc24>)
 80020c4:	f009 fbce 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80020c8:	7afb      	ldrb	r3, [r7, #11]
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020d0:	9301      	str	r3, [sp, #4]
 80020d2:	2302      	movs	r3, #2
 80020d4:	9300      	str	r3, [sp, #0]
 80020d6:	2300      	movs	r3, #0
 80020d8:	210a      	movs	r1, #10
 80020da:	4891      	ldr	r0, [pc, #580]	; (8002320 <FreqMenu_DrawFreqPresetMenu+0xc28>)
 80020dc:	f009 fbc2 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80020e0:	7abb      	ldrb	r3, [r7, #10]
 80020e2:	b29a      	uxth	r2, r3
 80020e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020e8:	9301      	str	r3, [sp, #4]
 80020ea:	2302      	movs	r3, #2
 80020ec:	9300      	str	r3, [sp, #0]
 80020ee:	2300      	movs	r3, #0
 80020f0:	210a      	movs	r1, #10
 80020f2:	488c      	ldr	r0, [pc, #560]	; (8002324 <FreqMenu_DrawFreqPresetMenu+0xc2c>)
 80020f4:	f009 fbb6 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, WHITE, 2, BLACK);
 80020f8:	7a7b      	ldrb	r3, [r7, #9]
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	2300      	movs	r3, #0
 80020fe:	9301      	str	r3, [sp, #4]
 8002100:	2302      	movs	r3, #2
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002108:	210a      	movs	r1, #10
 800210a:	4887      	ldr	r0, [pc, #540]	; (8002328 <FreqMenu_DrawFreqPresetMenu+0xc30>)
 800210c:	f009 fbaa 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002110:	7bfb      	ldrb	r3, [r7, #15]
 8002112:	b29a      	uxth	r2, r3
 8002114:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002118:	9301      	str	r3, [sp, #4]
 800211a:	2302      	movs	r3, #2
 800211c:	9300      	str	r3, [sp, #0]
 800211e:	2300      	movs	r3, #0
 8002120:	2178      	movs	r1, #120	; 0x78
 8002122:	4882      	ldr	r0, [pc, #520]	; (800232c <FreqMenu_DrawFreqPresetMenu+0xc34>)
 8002124:	f009 fb9e 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002128:	7bbb      	ldrb	r3, [r7, #14]
 800212a:	b29a      	uxth	r2, r3
 800212c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002130:	9301      	str	r3, [sp, #4]
 8002132:	2302      	movs	r3, #2
 8002134:	9300      	str	r3, [sp, #0]
 8002136:	2300      	movs	r3, #0
 8002138:	2178      	movs	r1, #120	; 0x78
 800213a:	487d      	ldr	r0, [pc, #500]	; (8002330 <FreqMenu_DrawFreqPresetMenu+0xc38>)
 800213c:	f009 fb92 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002140:	7b7b      	ldrb	r3, [r7, #13]
 8002142:	b29a      	uxth	r2, r3
 8002144:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002148:	9301      	str	r3, [sp, #4]
 800214a:	2302      	movs	r3, #2
 800214c:	9300      	str	r3, [sp, #0]
 800214e:	2300      	movs	r3, #0
 8002150:	2178      	movs	r1, #120	; 0x78
 8002152:	4878      	ldr	r0, [pc, #480]	; (8002334 <FreqMenu_DrawFreqPresetMenu+0xc3c>)
 8002154:	f009 fb86 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002158:	7b3b      	ldrb	r3, [r7, #12]
 800215a:	b29a      	uxth	r2, r3
 800215c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002160:	9301      	str	r3, [sp, #4]
 8002162:	2302      	movs	r3, #2
 8002164:	9300      	str	r3, [sp, #0]
 8002166:	2300      	movs	r3, #0
 8002168:	2178      	movs	r1, #120	; 0x78
 800216a:	4873      	ldr	r0, [pc, #460]	; (8002338 <FreqMenu_DrawFreqPresetMenu+0xc40>)
 800216c:	f009 fb7a 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002170:	7afb      	ldrb	r3, [r7, #11]
 8002172:	b29a      	uxth	r2, r3
 8002174:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002178:	9301      	str	r3, [sp, #4]
 800217a:	2302      	movs	r3, #2
 800217c:	9300      	str	r3, [sp, #0]
 800217e:	2300      	movs	r3, #0
 8002180:	2178      	movs	r1, #120	; 0x78
 8002182:	486e      	ldr	r0, [pc, #440]	; (800233c <FreqMenu_DrawFreqPresetMenu+0xc44>)
 8002184:	f009 fb6e 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002188:	7abb      	ldrb	r3, [r7, #10]
 800218a:	b29a      	uxth	r2, r3
 800218c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002190:	9301      	str	r3, [sp, #4]
 8002192:	2302      	movs	r3, #2
 8002194:	9300      	str	r3, [sp, #0]
 8002196:	2300      	movs	r3, #0
 8002198:	2178      	movs	r1, #120	; 0x78
 800219a:	4869      	ldr	r0, [pc, #420]	; (8002340 <FreqMenu_DrawFreqPresetMenu+0xc48>)
 800219c:	f009 fb62 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80021a0:	7a7b      	ldrb	r3, [r7, #9]
 80021a2:	b29a      	uxth	r2, r3
 80021a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021a8:	9301      	str	r3, [sp, #4]
 80021aa:	2302      	movs	r3, #2
 80021ac:	9300      	str	r3, [sp, #0]
 80021ae:	2300      	movs	r3, #0
 80021b0:	2178      	movs	r1, #120	; 0x78
 80021b2:	4864      	ldr	r0, [pc, #400]	; (8002344 <FreqMenu_DrawFreqPresetMenu+0xc4c>)
 80021b4:	f009 fb56 	bl	800b864 <ILI9341_Draw_Text>
				break;
 80021b8:	f000 bd01 	b.w	8002bbe <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80021bc:	7bfb      	ldrb	r3, [r7, #15]
 80021be:	b29a      	uxth	r2, r3
 80021c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021c4:	9301      	str	r3, [sp, #4]
 80021c6:	2302      	movs	r3, #2
 80021c8:	9300      	str	r3, [sp, #0]
 80021ca:	2300      	movs	r3, #0
 80021cc:	210a      	movs	r1, #10
 80021ce:	4850      	ldr	r0, [pc, #320]	; (8002310 <FreqMenu_DrawFreqPresetMenu+0xc18>)
 80021d0:	f009 fb48 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80021d4:	7bbb      	ldrb	r3, [r7, #14]
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021dc:	9301      	str	r3, [sp, #4]
 80021de:	2302      	movs	r3, #2
 80021e0:	9300      	str	r3, [sp, #0]
 80021e2:	2300      	movs	r3, #0
 80021e4:	210a      	movs	r1, #10
 80021e6:	484b      	ldr	r0, [pc, #300]	; (8002314 <FreqMenu_DrawFreqPresetMenu+0xc1c>)
 80021e8:	f009 fb3c 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80021ec:	7b7b      	ldrb	r3, [r7, #13]
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021f4:	9301      	str	r3, [sp, #4]
 80021f6:	2302      	movs	r3, #2
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	2300      	movs	r3, #0
 80021fc:	210a      	movs	r1, #10
 80021fe:	4846      	ldr	r0, [pc, #280]	; (8002318 <FreqMenu_DrawFreqPresetMenu+0xc20>)
 8002200:	f009 fb30 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002204:	7b3b      	ldrb	r3, [r7, #12]
 8002206:	b29a      	uxth	r2, r3
 8002208:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800220c:	9301      	str	r3, [sp, #4]
 800220e:	2302      	movs	r3, #2
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	2300      	movs	r3, #0
 8002214:	210a      	movs	r1, #10
 8002216:	4841      	ldr	r0, [pc, #260]	; (800231c <FreqMenu_DrawFreqPresetMenu+0xc24>)
 8002218:	f009 fb24 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 800221c:	7afb      	ldrb	r3, [r7, #11]
 800221e:	b29a      	uxth	r2, r3
 8002220:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002224:	9301      	str	r3, [sp, #4]
 8002226:	2302      	movs	r3, #2
 8002228:	9300      	str	r3, [sp, #0]
 800222a:	2300      	movs	r3, #0
 800222c:	210a      	movs	r1, #10
 800222e:	483c      	ldr	r0, [pc, #240]	; (8002320 <FreqMenu_DrawFreqPresetMenu+0xc28>)
 8002230:	f009 fb18 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002234:	7abb      	ldrb	r3, [r7, #10]
 8002236:	b29a      	uxth	r2, r3
 8002238:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800223c:	9301      	str	r3, [sp, #4]
 800223e:	2302      	movs	r3, #2
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	2300      	movs	r3, #0
 8002244:	210a      	movs	r1, #10
 8002246:	4837      	ldr	r0, [pc, #220]	; (8002324 <FreqMenu_DrawFreqPresetMenu+0xc2c>)
 8002248:	f009 fb0c 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 800224c:	7a7b      	ldrb	r3, [r7, #9]
 800224e:	b29a      	uxth	r2, r3
 8002250:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	2302      	movs	r3, #2
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	2300      	movs	r3, #0
 800225c:	210a      	movs	r1, #10
 800225e:	4832      	ldr	r0, [pc, #200]	; (8002328 <FreqMenu_DrawFreqPresetMenu+0xc30>)
 8002260:	f009 fb00 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, WHITE, 2, BLACK);
 8002264:	7bfb      	ldrb	r3, [r7, #15]
 8002266:	b29a      	uxth	r2, r3
 8002268:	2300      	movs	r3, #0
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	2302      	movs	r3, #2
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002274:	2178      	movs	r1, #120	; 0x78
 8002276:	482d      	ldr	r0, [pc, #180]	; (800232c <FreqMenu_DrawFreqPresetMenu+0xc34>)
 8002278:	f009 faf4 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800227c:	7bbb      	ldrb	r3, [r7, #14]
 800227e:	b29a      	uxth	r2, r3
 8002280:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002284:	9301      	str	r3, [sp, #4]
 8002286:	2302      	movs	r3, #2
 8002288:	9300      	str	r3, [sp, #0]
 800228a:	2300      	movs	r3, #0
 800228c:	2178      	movs	r1, #120	; 0x78
 800228e:	4828      	ldr	r0, [pc, #160]	; (8002330 <FreqMenu_DrawFreqPresetMenu+0xc38>)
 8002290:	f009 fae8 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002294:	7b7b      	ldrb	r3, [r7, #13]
 8002296:	b29a      	uxth	r2, r3
 8002298:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800229c:	9301      	str	r3, [sp, #4]
 800229e:	2302      	movs	r3, #2
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	2300      	movs	r3, #0
 80022a4:	2178      	movs	r1, #120	; 0x78
 80022a6:	4823      	ldr	r0, [pc, #140]	; (8002334 <FreqMenu_DrawFreqPresetMenu+0xc3c>)
 80022a8:	f009 fadc 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80022ac:	7b3b      	ldrb	r3, [r7, #12]
 80022ae:	b29a      	uxth	r2, r3
 80022b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	2302      	movs	r3, #2
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	2300      	movs	r3, #0
 80022bc:	2178      	movs	r1, #120	; 0x78
 80022be:	481e      	ldr	r0, [pc, #120]	; (8002338 <FreqMenu_DrawFreqPresetMenu+0xc40>)
 80022c0:	f009 fad0 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80022c4:	7afb      	ldrb	r3, [r7, #11]
 80022c6:	b29a      	uxth	r2, r3
 80022c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022cc:	9301      	str	r3, [sp, #4]
 80022ce:	2302      	movs	r3, #2
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	2300      	movs	r3, #0
 80022d4:	2178      	movs	r1, #120	; 0x78
 80022d6:	4819      	ldr	r0, [pc, #100]	; (800233c <FreqMenu_DrawFreqPresetMenu+0xc44>)
 80022d8:	f009 fac4 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80022dc:	7abb      	ldrb	r3, [r7, #10]
 80022de:	b29a      	uxth	r2, r3
 80022e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	2302      	movs	r3, #2
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	2300      	movs	r3, #0
 80022ec:	2178      	movs	r1, #120	; 0x78
 80022ee:	4814      	ldr	r0, [pc, #80]	; (8002340 <FreqMenu_DrawFreqPresetMenu+0xc48>)
 80022f0:	f009 fab8 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80022f4:	7a7b      	ldrb	r3, [r7, #9]
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	2302      	movs	r3, #2
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	2300      	movs	r3, #0
 8002304:	2178      	movs	r1, #120	; 0x78
 8002306:	480f      	ldr	r0, [pc, #60]	; (8002344 <FreqMenu_DrawFreqPresetMenu+0xc4c>)
 8002308:	f009 faac 	bl	800b864 <ILI9341_Draw_Text>
				break;
 800230c:	f000 bc57 	b.w	8002bbe <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8002310:	0800ef8c 	.word	0x0800ef8c
 8002314:	0800ef94 	.word	0x0800ef94
 8002318:	0800ef9c 	.word	0x0800ef9c
 800231c:	0800efa4 	.word	0x0800efa4
 8002320:	0800efac 	.word	0x0800efac
 8002324:	0800efb4 	.word	0x0800efb4
 8002328:	0800efbc 	.word	0x0800efbc
 800232c:	0800efc4 	.word	0x0800efc4
 8002330:	0800efcc 	.word	0x0800efcc
 8002334:	0800efd4 	.word	0x0800efd4
 8002338:	0800efdc 	.word	0x0800efdc
 800233c:	0800efe4 	.word	0x0800efe4
 8002340:	0800efec 	.word	0x0800efec
 8002344:	0800eff4 	.word	0x0800eff4
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002348:	7bfb      	ldrb	r3, [r7, #15]
 800234a:	b29a      	uxth	r2, r3
 800234c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002350:	9301      	str	r3, [sp, #4]
 8002352:	2302      	movs	r3, #2
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	2300      	movs	r3, #0
 8002358:	210a      	movs	r1, #10
 800235a:	48a4      	ldr	r0, [pc, #656]	; (80025ec <FreqMenu_DrawFreqPresetMenu+0xef4>)
 800235c:	f009 fa82 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002360:	7bbb      	ldrb	r3, [r7, #14]
 8002362:	b29a      	uxth	r2, r3
 8002364:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002368:	9301      	str	r3, [sp, #4]
 800236a:	2302      	movs	r3, #2
 800236c:	9300      	str	r3, [sp, #0]
 800236e:	2300      	movs	r3, #0
 8002370:	210a      	movs	r1, #10
 8002372:	489f      	ldr	r0, [pc, #636]	; (80025f0 <FreqMenu_DrawFreqPresetMenu+0xef8>)
 8002374:	f009 fa76 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002378:	7b7b      	ldrb	r3, [r7, #13]
 800237a:	b29a      	uxth	r2, r3
 800237c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002380:	9301      	str	r3, [sp, #4]
 8002382:	2302      	movs	r3, #2
 8002384:	9300      	str	r3, [sp, #0]
 8002386:	2300      	movs	r3, #0
 8002388:	210a      	movs	r1, #10
 800238a:	489a      	ldr	r0, [pc, #616]	; (80025f4 <FreqMenu_DrawFreqPresetMenu+0xefc>)
 800238c:	f009 fa6a 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002390:	7b3b      	ldrb	r3, [r7, #12]
 8002392:	b29a      	uxth	r2, r3
 8002394:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002398:	9301      	str	r3, [sp, #4]
 800239a:	2302      	movs	r3, #2
 800239c:	9300      	str	r3, [sp, #0]
 800239e:	2300      	movs	r3, #0
 80023a0:	210a      	movs	r1, #10
 80023a2:	4895      	ldr	r0, [pc, #596]	; (80025f8 <FreqMenu_DrawFreqPresetMenu+0xf00>)
 80023a4:	f009 fa5e 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80023a8:	7afb      	ldrb	r3, [r7, #11]
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023b0:	9301      	str	r3, [sp, #4]
 80023b2:	2302      	movs	r3, #2
 80023b4:	9300      	str	r3, [sp, #0]
 80023b6:	2300      	movs	r3, #0
 80023b8:	210a      	movs	r1, #10
 80023ba:	4890      	ldr	r0, [pc, #576]	; (80025fc <FreqMenu_DrawFreqPresetMenu+0xf04>)
 80023bc:	f009 fa52 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80023c0:	7abb      	ldrb	r3, [r7, #10]
 80023c2:	b29a      	uxth	r2, r3
 80023c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023c8:	9301      	str	r3, [sp, #4]
 80023ca:	2302      	movs	r3, #2
 80023cc:	9300      	str	r3, [sp, #0]
 80023ce:	2300      	movs	r3, #0
 80023d0:	210a      	movs	r1, #10
 80023d2:	488b      	ldr	r0, [pc, #556]	; (8002600 <FreqMenu_DrawFreqPresetMenu+0xf08>)
 80023d4:	f009 fa46 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80023d8:	7a7b      	ldrb	r3, [r7, #9]
 80023da:	b29a      	uxth	r2, r3
 80023dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023e0:	9301      	str	r3, [sp, #4]
 80023e2:	2302      	movs	r3, #2
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	2300      	movs	r3, #0
 80023e8:	210a      	movs	r1, #10
 80023ea:	4886      	ldr	r0, [pc, #536]	; (8002604 <FreqMenu_DrawFreqPresetMenu+0xf0c>)
 80023ec:	f009 fa3a 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80023f0:	7bfb      	ldrb	r3, [r7, #15]
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023f8:	9301      	str	r3, [sp, #4]
 80023fa:	2302      	movs	r3, #2
 80023fc:	9300      	str	r3, [sp, #0]
 80023fe:	2300      	movs	r3, #0
 8002400:	2178      	movs	r1, #120	; 0x78
 8002402:	4881      	ldr	r0, [pc, #516]	; (8002608 <FreqMenu_DrawFreqPresetMenu+0xf10>)
 8002404:	f009 fa2e 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, WHITE, 2, BLACK);
 8002408:	7bbb      	ldrb	r3, [r7, #14]
 800240a:	b29a      	uxth	r2, r3
 800240c:	2300      	movs	r3, #0
 800240e:	9301      	str	r3, [sp, #4]
 8002410:	2302      	movs	r3, #2
 8002412:	9300      	str	r3, [sp, #0]
 8002414:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002418:	2178      	movs	r1, #120	; 0x78
 800241a:	487c      	ldr	r0, [pc, #496]	; (800260c <FreqMenu_DrawFreqPresetMenu+0xf14>)
 800241c:	f009 fa22 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002420:	7b7b      	ldrb	r3, [r7, #13]
 8002422:	b29a      	uxth	r2, r3
 8002424:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002428:	9301      	str	r3, [sp, #4]
 800242a:	2302      	movs	r3, #2
 800242c:	9300      	str	r3, [sp, #0]
 800242e:	2300      	movs	r3, #0
 8002430:	2178      	movs	r1, #120	; 0x78
 8002432:	4877      	ldr	r0, [pc, #476]	; (8002610 <FreqMenu_DrawFreqPresetMenu+0xf18>)
 8002434:	f009 fa16 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002438:	7b3b      	ldrb	r3, [r7, #12]
 800243a:	b29a      	uxth	r2, r3
 800243c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002440:	9301      	str	r3, [sp, #4]
 8002442:	2302      	movs	r3, #2
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	2300      	movs	r3, #0
 8002448:	2178      	movs	r1, #120	; 0x78
 800244a:	4872      	ldr	r0, [pc, #456]	; (8002614 <FreqMenu_DrawFreqPresetMenu+0xf1c>)
 800244c:	f009 fa0a 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002450:	7afb      	ldrb	r3, [r7, #11]
 8002452:	b29a      	uxth	r2, r3
 8002454:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002458:	9301      	str	r3, [sp, #4]
 800245a:	2302      	movs	r3, #2
 800245c:	9300      	str	r3, [sp, #0]
 800245e:	2300      	movs	r3, #0
 8002460:	2178      	movs	r1, #120	; 0x78
 8002462:	486d      	ldr	r0, [pc, #436]	; (8002618 <FreqMenu_DrawFreqPresetMenu+0xf20>)
 8002464:	f009 f9fe 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002468:	7abb      	ldrb	r3, [r7, #10]
 800246a:	b29a      	uxth	r2, r3
 800246c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002470:	9301      	str	r3, [sp, #4]
 8002472:	2302      	movs	r3, #2
 8002474:	9300      	str	r3, [sp, #0]
 8002476:	2300      	movs	r3, #0
 8002478:	2178      	movs	r1, #120	; 0x78
 800247a:	4868      	ldr	r0, [pc, #416]	; (800261c <FreqMenu_DrawFreqPresetMenu+0xf24>)
 800247c:	f009 f9f2 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002480:	7a7b      	ldrb	r3, [r7, #9]
 8002482:	b29a      	uxth	r2, r3
 8002484:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002488:	9301      	str	r3, [sp, #4]
 800248a:	2302      	movs	r3, #2
 800248c:	9300      	str	r3, [sp, #0]
 800248e:	2300      	movs	r3, #0
 8002490:	2178      	movs	r1, #120	; 0x78
 8002492:	4863      	ldr	r0, [pc, #396]	; (8002620 <FreqMenu_DrawFreqPresetMenu+0xf28>)
 8002494:	f009 f9e6 	bl	800b864 <ILI9341_Draw_Text>
				break;
 8002498:	e391      	b.n	8002bbe <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 800249a:	7bfb      	ldrb	r3, [r7, #15]
 800249c:	b29a      	uxth	r2, r3
 800249e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024a2:	9301      	str	r3, [sp, #4]
 80024a4:	2302      	movs	r3, #2
 80024a6:	9300      	str	r3, [sp, #0]
 80024a8:	2300      	movs	r3, #0
 80024aa:	210a      	movs	r1, #10
 80024ac:	484f      	ldr	r0, [pc, #316]	; (80025ec <FreqMenu_DrawFreqPresetMenu+0xef4>)
 80024ae:	f009 f9d9 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80024b2:	7bbb      	ldrb	r3, [r7, #14]
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ba:	9301      	str	r3, [sp, #4]
 80024bc:	2302      	movs	r3, #2
 80024be:	9300      	str	r3, [sp, #0]
 80024c0:	2300      	movs	r3, #0
 80024c2:	210a      	movs	r1, #10
 80024c4:	484a      	ldr	r0, [pc, #296]	; (80025f0 <FreqMenu_DrawFreqPresetMenu+0xef8>)
 80024c6:	f009 f9cd 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80024ca:	7b7b      	ldrb	r3, [r7, #13]
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024d2:	9301      	str	r3, [sp, #4]
 80024d4:	2302      	movs	r3, #2
 80024d6:	9300      	str	r3, [sp, #0]
 80024d8:	2300      	movs	r3, #0
 80024da:	210a      	movs	r1, #10
 80024dc:	4845      	ldr	r0, [pc, #276]	; (80025f4 <FreqMenu_DrawFreqPresetMenu+0xefc>)
 80024de:	f009 f9c1 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80024e2:	7b3b      	ldrb	r3, [r7, #12]
 80024e4:	b29a      	uxth	r2, r3
 80024e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024ea:	9301      	str	r3, [sp, #4]
 80024ec:	2302      	movs	r3, #2
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	2300      	movs	r3, #0
 80024f2:	210a      	movs	r1, #10
 80024f4:	4840      	ldr	r0, [pc, #256]	; (80025f8 <FreqMenu_DrawFreqPresetMenu+0xf00>)
 80024f6:	f009 f9b5 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80024fa:	7afb      	ldrb	r3, [r7, #11]
 80024fc:	b29a      	uxth	r2, r3
 80024fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002502:	9301      	str	r3, [sp, #4]
 8002504:	2302      	movs	r3, #2
 8002506:	9300      	str	r3, [sp, #0]
 8002508:	2300      	movs	r3, #0
 800250a:	210a      	movs	r1, #10
 800250c:	483b      	ldr	r0, [pc, #236]	; (80025fc <FreqMenu_DrawFreqPresetMenu+0xf04>)
 800250e:	f009 f9a9 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002512:	7abb      	ldrb	r3, [r7, #10]
 8002514:	b29a      	uxth	r2, r3
 8002516:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800251a:	9301      	str	r3, [sp, #4]
 800251c:	2302      	movs	r3, #2
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	2300      	movs	r3, #0
 8002522:	210a      	movs	r1, #10
 8002524:	4836      	ldr	r0, [pc, #216]	; (8002600 <FreqMenu_DrawFreqPresetMenu+0xf08>)
 8002526:	f009 f99d 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 800252a:	7a7b      	ldrb	r3, [r7, #9]
 800252c:	b29a      	uxth	r2, r3
 800252e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002532:	9301      	str	r3, [sp, #4]
 8002534:	2302      	movs	r3, #2
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	2300      	movs	r3, #0
 800253a:	210a      	movs	r1, #10
 800253c:	4831      	ldr	r0, [pc, #196]	; (8002604 <FreqMenu_DrawFreqPresetMenu+0xf0c>)
 800253e:	f009 f991 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002542:	7bfb      	ldrb	r3, [r7, #15]
 8002544:	b29a      	uxth	r2, r3
 8002546:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800254a:	9301      	str	r3, [sp, #4]
 800254c:	2302      	movs	r3, #2
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	2300      	movs	r3, #0
 8002552:	2178      	movs	r1, #120	; 0x78
 8002554:	482c      	ldr	r0, [pc, #176]	; (8002608 <FreqMenu_DrawFreqPresetMenu+0xf10>)
 8002556:	f009 f985 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800255a:	7bbb      	ldrb	r3, [r7, #14]
 800255c:	b29a      	uxth	r2, r3
 800255e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002562:	9301      	str	r3, [sp, #4]
 8002564:	2302      	movs	r3, #2
 8002566:	9300      	str	r3, [sp, #0]
 8002568:	2300      	movs	r3, #0
 800256a:	2178      	movs	r1, #120	; 0x78
 800256c:	4827      	ldr	r0, [pc, #156]	; (800260c <FreqMenu_DrawFreqPresetMenu+0xf14>)
 800256e:	f009 f979 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, WHITE, 2, BLACK);
 8002572:	7b7b      	ldrb	r3, [r7, #13]
 8002574:	b29a      	uxth	r2, r3
 8002576:	2300      	movs	r3, #0
 8002578:	9301      	str	r3, [sp, #4]
 800257a:	2302      	movs	r3, #2
 800257c:	9300      	str	r3, [sp, #0]
 800257e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002582:	2178      	movs	r1, #120	; 0x78
 8002584:	4822      	ldr	r0, [pc, #136]	; (8002610 <FreqMenu_DrawFreqPresetMenu+0xf18>)
 8002586:	f009 f96d 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 800258a:	7b3b      	ldrb	r3, [r7, #12]
 800258c:	b29a      	uxth	r2, r3
 800258e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002592:	9301      	str	r3, [sp, #4]
 8002594:	2302      	movs	r3, #2
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	2300      	movs	r3, #0
 800259a:	2178      	movs	r1, #120	; 0x78
 800259c:	481d      	ldr	r0, [pc, #116]	; (8002614 <FreqMenu_DrawFreqPresetMenu+0xf1c>)
 800259e:	f009 f961 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80025a2:	7afb      	ldrb	r3, [r7, #11]
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025aa:	9301      	str	r3, [sp, #4]
 80025ac:	2302      	movs	r3, #2
 80025ae:	9300      	str	r3, [sp, #0]
 80025b0:	2300      	movs	r3, #0
 80025b2:	2178      	movs	r1, #120	; 0x78
 80025b4:	4818      	ldr	r0, [pc, #96]	; (8002618 <FreqMenu_DrawFreqPresetMenu+0xf20>)
 80025b6:	f009 f955 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80025ba:	7abb      	ldrb	r3, [r7, #10]
 80025bc:	b29a      	uxth	r2, r3
 80025be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025c2:	9301      	str	r3, [sp, #4]
 80025c4:	2302      	movs	r3, #2
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	2300      	movs	r3, #0
 80025ca:	2178      	movs	r1, #120	; 0x78
 80025cc:	4813      	ldr	r0, [pc, #76]	; (800261c <FreqMenu_DrawFreqPresetMenu+0xf24>)
 80025ce:	f009 f949 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80025d2:	7a7b      	ldrb	r3, [r7, #9]
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025da:	9301      	str	r3, [sp, #4]
 80025dc:	2302      	movs	r3, #2
 80025de:	9300      	str	r3, [sp, #0]
 80025e0:	2300      	movs	r3, #0
 80025e2:	2178      	movs	r1, #120	; 0x78
 80025e4:	480e      	ldr	r0, [pc, #56]	; (8002620 <FreqMenu_DrawFreqPresetMenu+0xf28>)
 80025e6:	f009 f93d 	bl	800b864 <ILI9341_Draw_Text>
				break;
 80025ea:	e2e8      	b.n	8002bbe <FreqMenu_DrawFreqPresetMenu+0x14c6>
 80025ec:	0800ef8c 	.word	0x0800ef8c
 80025f0:	0800ef94 	.word	0x0800ef94
 80025f4:	0800ef9c 	.word	0x0800ef9c
 80025f8:	0800efa4 	.word	0x0800efa4
 80025fc:	0800efac 	.word	0x0800efac
 8002600:	0800efb4 	.word	0x0800efb4
 8002604:	0800efbc 	.word	0x0800efbc
 8002608:	0800efc4 	.word	0x0800efc4
 800260c:	0800efcc 	.word	0x0800efcc
 8002610:	0800efd4 	.word	0x0800efd4
 8002614:	0800efdc 	.word	0x0800efdc
 8002618:	0800efe4 	.word	0x0800efe4
 800261c:	0800efec 	.word	0x0800efec
 8002620:	0800eff4 	.word	0x0800eff4
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002624:	7bfb      	ldrb	r3, [r7, #15]
 8002626:	b29a      	uxth	r2, r3
 8002628:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800262c:	9301      	str	r3, [sp, #4]
 800262e:	2302      	movs	r3, #2
 8002630:	9300      	str	r3, [sp, #0]
 8002632:	2300      	movs	r3, #0
 8002634:	210a      	movs	r1, #10
 8002636:	48a4      	ldr	r0, [pc, #656]	; (80028c8 <FreqMenu_DrawFreqPresetMenu+0x11d0>)
 8002638:	f009 f914 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 800263c:	7bbb      	ldrb	r3, [r7, #14]
 800263e:	b29a      	uxth	r2, r3
 8002640:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002644:	9301      	str	r3, [sp, #4]
 8002646:	2302      	movs	r3, #2
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	2300      	movs	r3, #0
 800264c:	210a      	movs	r1, #10
 800264e:	489f      	ldr	r0, [pc, #636]	; (80028cc <FreqMenu_DrawFreqPresetMenu+0x11d4>)
 8002650:	f009 f908 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002654:	7b7b      	ldrb	r3, [r7, #13]
 8002656:	b29a      	uxth	r2, r3
 8002658:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800265c:	9301      	str	r3, [sp, #4]
 800265e:	2302      	movs	r3, #2
 8002660:	9300      	str	r3, [sp, #0]
 8002662:	2300      	movs	r3, #0
 8002664:	210a      	movs	r1, #10
 8002666:	489a      	ldr	r0, [pc, #616]	; (80028d0 <FreqMenu_DrawFreqPresetMenu+0x11d8>)
 8002668:	f009 f8fc 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800266c:	7b3b      	ldrb	r3, [r7, #12]
 800266e:	b29a      	uxth	r2, r3
 8002670:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002674:	9301      	str	r3, [sp, #4]
 8002676:	2302      	movs	r3, #2
 8002678:	9300      	str	r3, [sp, #0]
 800267a:	2300      	movs	r3, #0
 800267c:	210a      	movs	r1, #10
 800267e:	4895      	ldr	r0, [pc, #596]	; (80028d4 <FreqMenu_DrawFreqPresetMenu+0x11dc>)
 8002680:	f009 f8f0 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002684:	7afb      	ldrb	r3, [r7, #11]
 8002686:	b29a      	uxth	r2, r3
 8002688:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	2302      	movs	r3, #2
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	2300      	movs	r3, #0
 8002694:	210a      	movs	r1, #10
 8002696:	4890      	ldr	r0, [pc, #576]	; (80028d8 <FreqMenu_DrawFreqPresetMenu+0x11e0>)
 8002698:	f009 f8e4 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800269c:	7abb      	ldrb	r3, [r7, #10]
 800269e:	b29a      	uxth	r2, r3
 80026a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026a4:	9301      	str	r3, [sp, #4]
 80026a6:	2302      	movs	r3, #2
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	2300      	movs	r3, #0
 80026ac:	210a      	movs	r1, #10
 80026ae:	488b      	ldr	r0, [pc, #556]	; (80028dc <FreqMenu_DrawFreqPresetMenu+0x11e4>)
 80026b0:	f009 f8d8 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80026b4:	7a7b      	ldrb	r3, [r7, #9]
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026bc:	9301      	str	r3, [sp, #4]
 80026be:	2302      	movs	r3, #2
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	2300      	movs	r3, #0
 80026c4:	210a      	movs	r1, #10
 80026c6:	4886      	ldr	r0, [pc, #536]	; (80028e0 <FreqMenu_DrawFreqPresetMenu+0x11e8>)
 80026c8:	f009 f8cc 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	b29a      	uxth	r2, r3
 80026d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026d4:	9301      	str	r3, [sp, #4]
 80026d6:	2302      	movs	r3, #2
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	2300      	movs	r3, #0
 80026dc:	2178      	movs	r1, #120	; 0x78
 80026de:	4881      	ldr	r0, [pc, #516]	; (80028e4 <FreqMenu_DrawFreqPresetMenu+0x11ec>)
 80026e0:	f009 f8c0 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80026e4:	7bbb      	ldrb	r3, [r7, #14]
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ec:	9301      	str	r3, [sp, #4]
 80026ee:	2302      	movs	r3, #2
 80026f0:	9300      	str	r3, [sp, #0]
 80026f2:	2300      	movs	r3, #0
 80026f4:	2178      	movs	r1, #120	; 0x78
 80026f6:	487c      	ldr	r0, [pc, #496]	; (80028e8 <FreqMenu_DrawFreqPresetMenu+0x11f0>)
 80026f8:	f009 f8b4 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80026fc:	7b7b      	ldrb	r3, [r7, #13]
 80026fe:	b29a      	uxth	r2, r3
 8002700:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002704:	9301      	str	r3, [sp, #4]
 8002706:	2302      	movs	r3, #2
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	2300      	movs	r3, #0
 800270c:	2178      	movs	r1, #120	; 0x78
 800270e:	4877      	ldr	r0, [pc, #476]	; (80028ec <FreqMenu_DrawFreqPresetMenu+0x11f4>)
 8002710:	f009 f8a8 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, WHITE, 2, BLACK);
 8002714:	7b3b      	ldrb	r3, [r7, #12]
 8002716:	b29a      	uxth	r2, r3
 8002718:	2300      	movs	r3, #0
 800271a:	9301      	str	r3, [sp, #4]
 800271c:	2302      	movs	r3, #2
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002724:	2178      	movs	r1, #120	; 0x78
 8002726:	4872      	ldr	r0, [pc, #456]	; (80028f0 <FreqMenu_DrawFreqPresetMenu+0x11f8>)
 8002728:	f009 f89c 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 800272c:	7afb      	ldrb	r3, [r7, #11]
 800272e:	b29a      	uxth	r2, r3
 8002730:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002734:	9301      	str	r3, [sp, #4]
 8002736:	2302      	movs	r3, #2
 8002738:	9300      	str	r3, [sp, #0]
 800273a:	2300      	movs	r3, #0
 800273c:	2178      	movs	r1, #120	; 0x78
 800273e:	486d      	ldr	r0, [pc, #436]	; (80028f4 <FreqMenu_DrawFreqPresetMenu+0x11fc>)
 8002740:	f009 f890 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002744:	7abb      	ldrb	r3, [r7, #10]
 8002746:	b29a      	uxth	r2, r3
 8002748:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800274c:	9301      	str	r3, [sp, #4]
 800274e:	2302      	movs	r3, #2
 8002750:	9300      	str	r3, [sp, #0]
 8002752:	2300      	movs	r3, #0
 8002754:	2178      	movs	r1, #120	; 0x78
 8002756:	4868      	ldr	r0, [pc, #416]	; (80028f8 <FreqMenu_DrawFreqPresetMenu+0x1200>)
 8002758:	f009 f884 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 800275c:	7a7b      	ldrb	r3, [r7, #9]
 800275e:	b29a      	uxth	r2, r3
 8002760:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002764:	9301      	str	r3, [sp, #4]
 8002766:	2302      	movs	r3, #2
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	2300      	movs	r3, #0
 800276c:	2178      	movs	r1, #120	; 0x78
 800276e:	4863      	ldr	r0, [pc, #396]	; (80028fc <FreqMenu_DrawFreqPresetMenu+0x1204>)
 8002770:	f009 f878 	bl	800b864 <ILI9341_Draw_Text>
				break;
 8002774:	e223      	b.n	8002bbe <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002776:	7bfb      	ldrb	r3, [r7, #15]
 8002778:	b29a      	uxth	r2, r3
 800277a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800277e:	9301      	str	r3, [sp, #4]
 8002780:	2302      	movs	r3, #2
 8002782:	9300      	str	r3, [sp, #0]
 8002784:	2300      	movs	r3, #0
 8002786:	210a      	movs	r1, #10
 8002788:	484f      	ldr	r0, [pc, #316]	; (80028c8 <FreqMenu_DrawFreqPresetMenu+0x11d0>)
 800278a:	f009 f86b 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 800278e:	7bbb      	ldrb	r3, [r7, #14]
 8002790:	b29a      	uxth	r2, r3
 8002792:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	2302      	movs	r3, #2
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2300      	movs	r3, #0
 800279e:	210a      	movs	r1, #10
 80027a0:	484a      	ldr	r0, [pc, #296]	; (80028cc <FreqMenu_DrawFreqPresetMenu+0x11d4>)
 80027a2:	f009 f85f 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80027a6:	7b7b      	ldrb	r3, [r7, #13]
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027ae:	9301      	str	r3, [sp, #4]
 80027b0:	2302      	movs	r3, #2
 80027b2:	9300      	str	r3, [sp, #0]
 80027b4:	2300      	movs	r3, #0
 80027b6:	210a      	movs	r1, #10
 80027b8:	4845      	ldr	r0, [pc, #276]	; (80028d0 <FreqMenu_DrawFreqPresetMenu+0x11d8>)
 80027ba:	f009 f853 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80027be:	7b3b      	ldrb	r3, [r7, #12]
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027c6:	9301      	str	r3, [sp, #4]
 80027c8:	2302      	movs	r3, #2
 80027ca:	9300      	str	r3, [sp, #0]
 80027cc:	2300      	movs	r3, #0
 80027ce:	210a      	movs	r1, #10
 80027d0:	4840      	ldr	r0, [pc, #256]	; (80028d4 <FreqMenu_DrawFreqPresetMenu+0x11dc>)
 80027d2:	f009 f847 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80027d6:	7afb      	ldrb	r3, [r7, #11]
 80027d8:	b29a      	uxth	r2, r3
 80027da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027de:	9301      	str	r3, [sp, #4]
 80027e0:	2302      	movs	r3, #2
 80027e2:	9300      	str	r3, [sp, #0]
 80027e4:	2300      	movs	r3, #0
 80027e6:	210a      	movs	r1, #10
 80027e8:	483b      	ldr	r0, [pc, #236]	; (80028d8 <FreqMenu_DrawFreqPresetMenu+0x11e0>)
 80027ea:	f009 f83b 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80027ee:	7abb      	ldrb	r3, [r7, #10]
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027f6:	9301      	str	r3, [sp, #4]
 80027f8:	2302      	movs	r3, #2
 80027fa:	9300      	str	r3, [sp, #0]
 80027fc:	2300      	movs	r3, #0
 80027fe:	210a      	movs	r1, #10
 8002800:	4836      	ldr	r0, [pc, #216]	; (80028dc <FreqMenu_DrawFreqPresetMenu+0x11e4>)
 8002802:	f009 f82f 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002806:	7a7b      	ldrb	r3, [r7, #9]
 8002808:	b29a      	uxth	r2, r3
 800280a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800280e:	9301      	str	r3, [sp, #4]
 8002810:	2302      	movs	r3, #2
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	2300      	movs	r3, #0
 8002816:	210a      	movs	r1, #10
 8002818:	4831      	ldr	r0, [pc, #196]	; (80028e0 <FreqMenu_DrawFreqPresetMenu+0x11e8>)
 800281a:	f009 f823 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	b29a      	uxth	r2, r3
 8002822:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002826:	9301      	str	r3, [sp, #4]
 8002828:	2302      	movs	r3, #2
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	2300      	movs	r3, #0
 800282e:	2178      	movs	r1, #120	; 0x78
 8002830:	482c      	ldr	r0, [pc, #176]	; (80028e4 <FreqMenu_DrawFreqPresetMenu+0x11ec>)
 8002832:	f009 f817 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002836:	7bbb      	ldrb	r3, [r7, #14]
 8002838:	b29a      	uxth	r2, r3
 800283a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800283e:	9301      	str	r3, [sp, #4]
 8002840:	2302      	movs	r3, #2
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	2300      	movs	r3, #0
 8002846:	2178      	movs	r1, #120	; 0x78
 8002848:	4827      	ldr	r0, [pc, #156]	; (80028e8 <FreqMenu_DrawFreqPresetMenu+0x11f0>)
 800284a:	f009 f80b 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 800284e:	7b7b      	ldrb	r3, [r7, #13]
 8002850:	b29a      	uxth	r2, r3
 8002852:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002856:	9301      	str	r3, [sp, #4]
 8002858:	2302      	movs	r3, #2
 800285a:	9300      	str	r3, [sp, #0]
 800285c:	2300      	movs	r3, #0
 800285e:	2178      	movs	r1, #120	; 0x78
 8002860:	4822      	ldr	r0, [pc, #136]	; (80028ec <FreqMenu_DrawFreqPresetMenu+0x11f4>)
 8002862:	f008 ffff 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002866:	7b3b      	ldrb	r3, [r7, #12]
 8002868:	b29a      	uxth	r2, r3
 800286a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	2302      	movs	r3, #2
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	2300      	movs	r3, #0
 8002876:	2178      	movs	r1, #120	; 0x78
 8002878:	481d      	ldr	r0, [pc, #116]	; (80028f0 <FreqMenu_DrawFreqPresetMenu+0x11f8>)
 800287a:	f008 fff3 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, WHITE, 2, BLACK);
 800287e:	7afb      	ldrb	r3, [r7, #11]
 8002880:	b29a      	uxth	r2, r3
 8002882:	2300      	movs	r3, #0
 8002884:	9301      	str	r3, [sp, #4]
 8002886:	2302      	movs	r3, #2
 8002888:	9300      	str	r3, [sp, #0]
 800288a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800288e:	2178      	movs	r1, #120	; 0x78
 8002890:	4818      	ldr	r0, [pc, #96]	; (80028f4 <FreqMenu_DrawFreqPresetMenu+0x11fc>)
 8002892:	f008 ffe7 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002896:	7abb      	ldrb	r3, [r7, #10]
 8002898:	b29a      	uxth	r2, r3
 800289a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800289e:	9301      	str	r3, [sp, #4]
 80028a0:	2302      	movs	r3, #2
 80028a2:	9300      	str	r3, [sp, #0]
 80028a4:	2300      	movs	r3, #0
 80028a6:	2178      	movs	r1, #120	; 0x78
 80028a8:	4813      	ldr	r0, [pc, #76]	; (80028f8 <FreqMenu_DrawFreqPresetMenu+0x1200>)
 80028aa:	f008 ffdb 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80028ae:	7a7b      	ldrb	r3, [r7, #9]
 80028b0:	b29a      	uxth	r2, r3
 80028b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028b6:	9301      	str	r3, [sp, #4]
 80028b8:	2302      	movs	r3, #2
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	2300      	movs	r3, #0
 80028be:	2178      	movs	r1, #120	; 0x78
 80028c0:	480e      	ldr	r0, [pc, #56]	; (80028fc <FreqMenu_DrawFreqPresetMenu+0x1204>)
 80028c2:	f008 ffcf 	bl	800b864 <ILI9341_Draw_Text>
			break;
 80028c6:	e17a      	b.n	8002bbe <FreqMenu_DrawFreqPresetMenu+0x14c6>
 80028c8:	0800ef8c 	.word	0x0800ef8c
 80028cc:	0800ef94 	.word	0x0800ef94
 80028d0:	0800ef9c 	.word	0x0800ef9c
 80028d4:	0800efa4 	.word	0x0800efa4
 80028d8:	0800efac 	.word	0x0800efac
 80028dc:	0800efb4 	.word	0x0800efb4
 80028e0:	0800efbc 	.word	0x0800efbc
 80028e4:	0800efc4 	.word	0x0800efc4
 80028e8:	0800efcc 	.word	0x0800efcc
 80028ec:	0800efd4 	.word	0x0800efd4
 80028f0:	0800efdc 	.word	0x0800efdc
 80028f4:	0800efe4 	.word	0x0800efe4
 80028f8:	0800efec 	.word	0x0800efec
 80028fc:	0800eff4 	.word	0x0800eff4
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002900:	7bfb      	ldrb	r3, [r7, #15]
 8002902:	b29a      	uxth	r2, r3
 8002904:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002908:	9301      	str	r3, [sp, #4]
 800290a:	2302      	movs	r3, #2
 800290c:	9300      	str	r3, [sp, #0]
 800290e:	2300      	movs	r3, #0
 8002910:	210a      	movs	r1, #10
 8002912:	48ad      	ldr	r0, [pc, #692]	; (8002bc8 <FreqMenu_DrawFreqPresetMenu+0x14d0>)
 8002914:	f008 ffa6 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002918:	7bbb      	ldrb	r3, [r7, #14]
 800291a:	b29a      	uxth	r2, r3
 800291c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	2302      	movs	r3, #2
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	2300      	movs	r3, #0
 8002928:	210a      	movs	r1, #10
 800292a:	48a8      	ldr	r0, [pc, #672]	; (8002bcc <FreqMenu_DrawFreqPresetMenu+0x14d4>)
 800292c:	f008 ff9a 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002930:	7b7b      	ldrb	r3, [r7, #13]
 8002932:	b29a      	uxth	r2, r3
 8002934:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002938:	9301      	str	r3, [sp, #4]
 800293a:	2302      	movs	r3, #2
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	2300      	movs	r3, #0
 8002940:	210a      	movs	r1, #10
 8002942:	48a3      	ldr	r0, [pc, #652]	; (8002bd0 <FreqMenu_DrawFreqPresetMenu+0x14d8>)
 8002944:	f008 ff8e 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002948:	7b3b      	ldrb	r3, [r7, #12]
 800294a:	b29a      	uxth	r2, r3
 800294c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002950:	9301      	str	r3, [sp, #4]
 8002952:	2302      	movs	r3, #2
 8002954:	9300      	str	r3, [sp, #0]
 8002956:	2300      	movs	r3, #0
 8002958:	210a      	movs	r1, #10
 800295a:	489e      	ldr	r0, [pc, #632]	; (8002bd4 <FreqMenu_DrawFreqPresetMenu+0x14dc>)
 800295c:	f008 ff82 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002960:	7afb      	ldrb	r3, [r7, #11]
 8002962:	b29a      	uxth	r2, r3
 8002964:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002968:	9301      	str	r3, [sp, #4]
 800296a:	2302      	movs	r3, #2
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	2300      	movs	r3, #0
 8002970:	210a      	movs	r1, #10
 8002972:	4899      	ldr	r0, [pc, #612]	; (8002bd8 <FreqMenu_DrawFreqPresetMenu+0x14e0>)
 8002974:	f008 ff76 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002978:	7abb      	ldrb	r3, [r7, #10]
 800297a:	b29a      	uxth	r2, r3
 800297c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002980:	9301      	str	r3, [sp, #4]
 8002982:	2302      	movs	r3, #2
 8002984:	9300      	str	r3, [sp, #0]
 8002986:	2300      	movs	r3, #0
 8002988:	210a      	movs	r1, #10
 800298a:	4894      	ldr	r0, [pc, #592]	; (8002bdc <FreqMenu_DrawFreqPresetMenu+0x14e4>)
 800298c:	f008 ff6a 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002990:	7a7b      	ldrb	r3, [r7, #9]
 8002992:	b29a      	uxth	r2, r3
 8002994:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002998:	9301      	str	r3, [sp, #4]
 800299a:	2302      	movs	r3, #2
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	2300      	movs	r3, #0
 80029a0:	210a      	movs	r1, #10
 80029a2:	488f      	ldr	r0, [pc, #572]	; (8002be0 <FreqMenu_DrawFreqPresetMenu+0x14e8>)
 80029a4:	f008 ff5e 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029b0:	9301      	str	r3, [sp, #4]
 80029b2:	2302      	movs	r3, #2
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	2300      	movs	r3, #0
 80029b8:	2178      	movs	r1, #120	; 0x78
 80029ba:	488a      	ldr	r0, [pc, #552]	; (8002be4 <FreqMenu_DrawFreqPresetMenu+0x14ec>)
 80029bc:	f008 ff52 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80029c0:	7bbb      	ldrb	r3, [r7, #14]
 80029c2:	b29a      	uxth	r2, r3
 80029c4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029c8:	9301      	str	r3, [sp, #4]
 80029ca:	2302      	movs	r3, #2
 80029cc:	9300      	str	r3, [sp, #0]
 80029ce:	2300      	movs	r3, #0
 80029d0:	2178      	movs	r1, #120	; 0x78
 80029d2:	4885      	ldr	r0, [pc, #532]	; (8002be8 <FreqMenu_DrawFreqPresetMenu+0x14f0>)
 80029d4:	f008 ff46 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80029d8:	7b7b      	ldrb	r3, [r7, #13]
 80029da:	b29a      	uxth	r2, r3
 80029dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029e0:	9301      	str	r3, [sp, #4]
 80029e2:	2302      	movs	r3, #2
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	2300      	movs	r3, #0
 80029e8:	2178      	movs	r1, #120	; 0x78
 80029ea:	4880      	ldr	r0, [pc, #512]	; (8002bec <FreqMenu_DrawFreqPresetMenu+0x14f4>)
 80029ec:	f008 ff3a 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80029f0:	7b3b      	ldrb	r3, [r7, #12]
 80029f2:	b29a      	uxth	r2, r3
 80029f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029f8:	9301      	str	r3, [sp, #4]
 80029fa:	2302      	movs	r3, #2
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	2300      	movs	r3, #0
 8002a00:	2178      	movs	r1, #120	; 0x78
 8002a02:	487b      	ldr	r0, [pc, #492]	; (8002bf0 <FreqMenu_DrawFreqPresetMenu+0x14f8>)
 8002a04:	f008 ff2e 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002a08:	7afb      	ldrb	r3, [r7, #11]
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a10:	9301      	str	r3, [sp, #4]
 8002a12:	2302      	movs	r3, #2
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	2300      	movs	r3, #0
 8002a18:	2178      	movs	r1, #120	; 0x78
 8002a1a:	4876      	ldr	r0, [pc, #472]	; (8002bf4 <FreqMenu_DrawFreqPresetMenu+0x14fc>)
 8002a1c:	f008 ff22 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, WHITE, 2, BLACK);
 8002a20:	7abb      	ldrb	r3, [r7, #10]
 8002a22:	b29a      	uxth	r2, r3
 8002a24:	2300      	movs	r3, #0
 8002a26:	9301      	str	r3, [sp, #4]
 8002a28:	2302      	movs	r3, #2
 8002a2a:	9300      	str	r3, [sp, #0]
 8002a2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a30:	2178      	movs	r1, #120	; 0x78
 8002a32:	4871      	ldr	r0, [pc, #452]	; (8002bf8 <FreqMenu_DrawFreqPresetMenu+0x1500>)
 8002a34:	f008 ff16 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002a38:	7a7b      	ldrb	r3, [r7, #9]
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a40:	9301      	str	r3, [sp, #4]
 8002a42:	2302      	movs	r3, #2
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	2300      	movs	r3, #0
 8002a48:	2178      	movs	r1, #120	; 0x78
 8002a4a:	486c      	ldr	r0, [pc, #432]	; (8002bfc <FreqMenu_DrawFreqPresetMenu+0x1504>)
 8002a4c:	f008 ff0a 	bl	800b864 <ILI9341_Draw_Text>
			break;
 8002a50:	e0b5      	b.n	8002bbe <FreqMenu_DrawFreqPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	b29a      	uxth	r2, r3
 8002a56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a5a:	9301      	str	r3, [sp, #4]
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	2300      	movs	r3, #0
 8002a62:	210a      	movs	r1, #10
 8002a64:	4858      	ldr	r0, [pc, #352]	; (8002bc8 <FreqMenu_DrawFreqPresetMenu+0x14d0>)
 8002a66:	f008 fefd 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002a6a:	7bbb      	ldrb	r3, [r7, #14]
 8002a6c:	b29a      	uxth	r2, r3
 8002a6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a72:	9301      	str	r3, [sp, #4]
 8002a74:	2302      	movs	r3, #2
 8002a76:	9300      	str	r3, [sp, #0]
 8002a78:	2300      	movs	r3, #0
 8002a7a:	210a      	movs	r1, #10
 8002a7c:	4853      	ldr	r0, [pc, #332]	; (8002bcc <FreqMenu_DrawFreqPresetMenu+0x14d4>)
 8002a7e:	f008 fef1 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002a82:	7b7b      	ldrb	r3, [r7, #13]
 8002a84:	b29a      	uxth	r2, r3
 8002a86:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a8a:	9301      	str	r3, [sp, #4]
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	9300      	str	r3, [sp, #0]
 8002a90:	2300      	movs	r3, #0
 8002a92:	210a      	movs	r1, #10
 8002a94:	484e      	ldr	r0, [pc, #312]	; (8002bd0 <FreqMenu_DrawFreqPresetMenu+0x14d8>)
 8002a96:	f008 fee5 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002a9a:	7b3b      	ldrb	r3, [r7, #12]
 8002a9c:	b29a      	uxth	r2, r3
 8002a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aa2:	9301      	str	r3, [sp, #4]
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	9300      	str	r3, [sp, #0]
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	210a      	movs	r1, #10
 8002aac:	4849      	ldr	r0, [pc, #292]	; (8002bd4 <FreqMenu_DrawFreqPresetMenu+0x14dc>)
 8002aae:	f008 fed9 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8002ab2:	7afb      	ldrb	r3, [r7, #11]
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aba:	9301      	str	r3, [sp, #4]
 8002abc:	2302      	movs	r3, #2
 8002abe:	9300      	str	r3, [sp, #0]
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	210a      	movs	r1, #10
 8002ac4:	4844      	ldr	r0, [pc, #272]	; (8002bd8 <FreqMenu_DrawFreqPresetMenu+0x14e0>)
 8002ac6:	f008 fecd 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002aca:	7abb      	ldrb	r3, [r7, #10]
 8002acc:	b29a      	uxth	r2, r3
 8002ace:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ad2:	9301      	str	r3, [sp, #4]
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	9300      	str	r3, [sp, #0]
 8002ad8:	2300      	movs	r3, #0
 8002ada:	210a      	movs	r1, #10
 8002adc:	483f      	ldr	r0, [pc, #252]	; (8002bdc <FreqMenu_DrawFreqPresetMenu+0x14e4>)
 8002ade:	f008 fec1 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002ae2:	7a7b      	ldrb	r3, [r7, #9]
 8002ae4:	b29a      	uxth	r2, r3
 8002ae6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aea:	9301      	str	r3, [sp, #4]
 8002aec:	2302      	movs	r3, #2
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	2300      	movs	r3, #0
 8002af2:	210a      	movs	r1, #10
 8002af4:	483a      	ldr	r0, [pc, #232]	; (8002be0 <FreqMenu_DrawFreqPresetMenu+0x14e8>)
 8002af6:	f008 feb5 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002afa:	7bfb      	ldrb	r3, [r7, #15]
 8002afc:	b29a      	uxth	r2, r3
 8002afe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b02:	9301      	str	r3, [sp, #4]
 8002b04:	2302      	movs	r3, #2
 8002b06:	9300      	str	r3, [sp, #0]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	2178      	movs	r1, #120	; 0x78
 8002b0c:	4835      	ldr	r0, [pc, #212]	; (8002be4 <FreqMenu_DrawFreqPresetMenu+0x14ec>)
 8002b0e:	f008 fea9 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002b12:	7bbb      	ldrb	r3, [r7, #14]
 8002b14:	b29a      	uxth	r2, r3
 8002b16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b1a:	9301      	str	r3, [sp, #4]
 8002b1c:	2302      	movs	r3, #2
 8002b1e:	9300      	str	r3, [sp, #0]
 8002b20:	2300      	movs	r3, #0
 8002b22:	2178      	movs	r1, #120	; 0x78
 8002b24:	4830      	ldr	r0, [pc, #192]	; (8002be8 <FreqMenu_DrawFreqPresetMenu+0x14f0>)
 8002b26:	f008 fe9d 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002b2a:	7b7b      	ldrb	r3, [r7, #13]
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b32:	9301      	str	r3, [sp, #4]
 8002b34:	2302      	movs	r3, #2
 8002b36:	9300      	str	r3, [sp, #0]
 8002b38:	2300      	movs	r3, #0
 8002b3a:	2178      	movs	r1, #120	; 0x78
 8002b3c:	482b      	ldr	r0, [pc, #172]	; (8002bec <FreqMenu_DrawFreqPresetMenu+0x14f4>)
 8002b3e:	f008 fe91 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002b42:	7b3b      	ldrb	r3, [r7, #12]
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b4a:	9301      	str	r3, [sp, #4]
 8002b4c:	2302      	movs	r3, #2
 8002b4e:	9300      	str	r3, [sp, #0]
 8002b50:	2300      	movs	r3, #0
 8002b52:	2178      	movs	r1, #120	; 0x78
 8002b54:	4826      	ldr	r0, [pc, #152]	; (8002bf0 <FreqMenu_DrawFreqPresetMenu+0x14f8>)
 8002b56:	f008 fe85 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002b5a:	7afb      	ldrb	r3, [r7, #11]
 8002b5c:	b29a      	uxth	r2, r3
 8002b5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	2302      	movs	r3, #2
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	2300      	movs	r3, #0
 8002b6a:	2178      	movs	r1, #120	; 0x78
 8002b6c:	4821      	ldr	r0, [pc, #132]	; (8002bf4 <FreqMenu_DrawFreqPresetMenu+0x14fc>)
 8002b6e:	f008 fe79 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002b72:	7abb      	ldrb	r3, [r7, #10]
 8002b74:	b29a      	uxth	r2, r3
 8002b76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b7a:	9301      	str	r3, [sp, #4]
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	2300      	movs	r3, #0
 8002b82:	2178      	movs	r1, #120	; 0x78
 8002b84:	481c      	ldr	r0, [pc, #112]	; (8002bf8 <FreqMenu_DrawFreqPresetMenu+0x1500>)
 8002b86:	f008 fe6d 	bl	800b864 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, WHITE, 2, BLACK);
 8002b8a:	7a7b      	ldrb	r3, [r7, #9]
 8002b8c:	b29a      	uxth	r2, r3
 8002b8e:	2300      	movs	r3, #0
 8002b90:	9301      	str	r3, [sp, #4]
 8002b92:	2302      	movs	r3, #2
 8002b94:	9300      	str	r3, [sp, #0]
 8002b96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b9a:	2178      	movs	r1, #120	; 0x78
 8002b9c:	4817      	ldr	r0, [pc, #92]	; (8002bfc <FreqMenu_DrawFreqPresetMenu+0x1504>)
 8002b9e:	f008 fe61 	bl	800b864 <ILI9341_Draw_Text>
			break;
 8002ba2:	bf00      	nop
 8002ba4:	e00b      	b.n	8002bbe <FreqMenu_DrawFreqPresetMenu+0x14c6>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		10, 180, RED, 1, BLACK);
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	9301      	str	r3, [sp, #4]
 8002baa:	2301      	movs	r3, #1
 8002bac:	9300      	str	r3, [sp, #0]
 8002bae:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002bb2:	22b4      	movs	r2, #180	; 0xb4
 8002bb4:	210a      	movs	r1, #10
 8002bb6:	4812      	ldr	r0, [pc, #72]	; (8002c00 <FreqMenu_DrawFreqPresetMenu+0x1508>)
 8002bb8:	f008 fe54 	bl	800b864 <ILI9341_Draw_Text>
}
 8002bbc:	e7ff      	b.n	8002bbe <FreqMenu_DrawFreqPresetMenu+0x14c6>
 8002bbe:	bf00      	nop
 8002bc0:	3710      	adds	r7, #16
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	0800ef8c 	.word	0x0800ef8c
 8002bcc:	0800ef94 	.word	0x0800ef94
 8002bd0:	0800ef9c 	.word	0x0800ef9c
 8002bd4:	0800efa4 	.word	0x0800efa4
 8002bd8:	0800efac 	.word	0x0800efac
 8002bdc:	0800efb4 	.word	0x0800efb4
 8002be0:	0800efbc 	.word	0x0800efbc
 8002be4:	0800efc4 	.word	0x0800efc4
 8002be8:	0800efcc 	.word	0x0800efcc
 8002bec:	0800efd4 	.word	0x0800efd4
 8002bf0:	0800efdc 	.word	0x0800efdc
 8002bf4:	0800efe4 	.word	0x0800efe4
 8002bf8:	0800efec 	.word	0x0800efec
 8002bfc:	0800eff4 	.word	0x0800eff4
 8002c00:	0800f000 	.word	0x0800f000

08002c04 <FreqMenu_DrawFreqAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawFreqAdjustMenu()
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Output Signal Freq: ", 	10, 150, BLACK, 1, WHITE);
 8002c0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c0e:	9301      	str	r3, [sp, #4]
 8002c10:	2301      	movs	r3, #1
 8002c12:	9300      	str	r3, [sp, #0]
 8002c14:	2300      	movs	r3, #0
 8002c16:	2296      	movs	r2, #150	; 0x96
 8002c18:	210a      	movs	r1, #10
 8002c1a:	4811      	ldr	r0, [pc, #68]	; (8002c60 <FreqMenu_DrawFreqAdjustMenu+0x5c>)
 8002c1c:	f008 fe22 	bl	800b864 <ILI9341_Draw_Text>

	char freq[6] = "";
 8002c20:	2300      	movs	r3, #0
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	2300      	movs	r3, #0
 8002c26:	80bb      	strh	r3, [r7, #4]
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
 8002c28:	f000 fd90 	bl	800374c <FreqO_GetOutputFreq>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	4639      	mov	r1, r7
 8002c32:	2206      	movs	r2, #6
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fe fc9f 	bl	8001578 <DM_AddDigitPadding>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d10a      	bne.n	8002c56 <FreqMenu_DrawFreqAdjustMenu+0x52>
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
 8002c40:	4638      	mov	r0, r7
 8002c42:	2300      	movs	r3, #0
 8002c44:	9301      	str	r3, [sp, #4]
 8002c46:	2301      	movs	r3, #1
 8002c48:	9300      	str	r3, [sp, #0]
 8002c4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c4e:	2296      	movs	r2, #150	; 0x96
 8002c50:	21fa      	movs	r1, #250	; 0xfa
 8002c52:	f008 fe07 	bl	800b864 <ILI9341_Draw_Text>


}
 8002c56:	bf00      	nop
 8002c58:	3708      	adds	r7, #8
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	0800f030 	.word	0x0800f030

08002c64 <FreqMenu_DrawFreqSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawFreqSweepMenu()
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("TODO: Freq Sweep Menu", 	10, 120, BLACK, 2, WHITE);
 8002c6a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c6e:	9301      	str	r3, [sp, #4]
 8002c70:	2302      	movs	r3, #2
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	2300      	movs	r3, #0
 8002c76:	2278      	movs	r2, #120	; 0x78
 8002c78:	210a      	movs	r1, #10
 8002c7a:	4803      	ldr	r0, [pc, #12]	; (8002c88 <FreqMenu_DrawFreqSweepMenu+0x24>)
 8002c7c:	f008 fdf2 	bl	800b864 <ILI9341_Draw_Text>




}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	0800f048 	.word	0x0800f048

08002c8c <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0

	switch(eNextState)
 8002c90:	4b7b      	ldr	r3, [pc, #492]	; (8002e80 <EM_ProcessEvent+0x1f4>)
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b08      	cmp	r3, #8
 8002c96:	f200 80e0 	bhi.w	8002e5a <EM_ProcessEvent+0x1ce>
 8002c9a:	a201      	add	r2, pc, #4	; (adr r2, 8002ca0 <EM_ProcessEvent+0x14>)
 8002c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ca0:	08002cc5 	.word	0x08002cc5
 8002ca4:	08002d1f 	.word	0x08002d1f
 8002ca8:	08002d4b 	.word	0x08002d4b
 8002cac:	08002e5b 	.word	0x08002e5b
 8002cb0:	08002d75 	.word	0x08002d75
 8002cb4:	08002dc7 	.word	0x08002dc7
 8002cb8:	08002df1 	.word	0x08002df1
 8002cbc:	08002e1b 	.word	0x08002e1b
 8002cc0:	08002e31 	.word	0x08002e31
	{
		case Idle_State:


			TIM1->ARR = 12;
 8002cc4:	4b6f      	ldr	r3, [pc, #444]	; (8002e84 <EM_ProcessEvent+0x1f8>)
 8002cc6:	220c      	movs	r2, #12
 8002cc8:	62da      	str	r2, [r3, #44]	; 0x2c

			if(eNewEvent == evBlueBtn)
 8002cca:	4b6f      	ldr	r3, [pc, #444]	; (8002e88 <EM_ProcessEvent+0x1fc>)
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d105      	bne.n	8002cde <EM_ProcessEvent+0x52>
			{
				eNextState = _FuncMenuEntryHandler();
 8002cd2:	f000 f8db 	bl	8002e8c <_FuncMenuEntryHandler>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b69      	ldr	r3, [pc, #420]	; (8002e80 <EM_ProcessEvent+0x1f4>)
 8002cdc:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8002cde:	4b6a      	ldr	r3, [pc, #424]	; (8002e88 <EM_ProcessEvent+0x1fc>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d105      	bne.n	8002cf2 <EM_ProcessEvent+0x66>
			{
				eNextState = _FreqMainMenuEntryHandler();
 8002ce6:	f000 f9c7 	bl	8003078 <_FreqMainMenuEntryHandler>
 8002cea:	4603      	mov	r3, r0
 8002cec:	461a      	mov	r2, r3
 8002cee:	4b64      	ldr	r3, [pc, #400]	; (8002e80 <EM_ProcessEvent+0x1f4>)
 8002cf0:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8002cf2:	4b65      	ldr	r3, [pc, #404]	; (8002e88 <EM_ProcessEvent+0x1fc>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b03      	cmp	r3, #3
 8002cf8:	d105      	bne.n	8002d06 <EM_ProcessEvent+0x7a>
			{
				eNextState = _GainMenuEntryHandler();
 8002cfa:	f000 f921 	bl	8002f40 <_GainMenuEntryHandler>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	461a      	mov	r2, r3
 8002d02:	4b5f      	ldr	r3, [pc, #380]	; (8002e80 <EM_ProcessEvent+0x1f4>)
 8002d04:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8002d06:	4b60      	ldr	r3, [pc, #384]	; (8002e88 <EM_ProcessEvent+0x1fc>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b04      	cmp	r3, #4
 8002d0c:	f040 80a7 	bne.w	8002e5e <EM_ProcessEvent+0x1d2>
			{
				eNextState = _BiasMenuEntryHandler();
 8002d10:	f000 f968 	bl	8002fe4 <_BiasMenuEntryHandler>
 8002d14:	4603      	mov	r3, r0
 8002d16:	461a      	mov	r2, r3
 8002d18:	4b59      	ldr	r3, [pc, #356]	; (8002e80 <EM_ProcessEvent+0x1f4>)
 8002d1a:	701a      	strb	r2, [r3, #0]
				//FuncO_ApplyPreset_Fast(SINE_FUNC_MODE);
				eNewEvent = evIdle;
*/
			}

			break;
 8002d1c:	e09f      	b.n	8002e5e <EM_ProcessEvent+0x1d2>

		case Func_Menu_State:

			if(eNewEvent == evEncoderSet)
 8002d1e:	4b5a      	ldr	r3, [pc, #360]	; (8002e88 <EM_ProcessEvent+0x1fc>)
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b05      	cmp	r3, #5
 8002d24:	d105      	bne.n	8002d32 <EM_ProcessEvent+0xa6>
			{
				eNextState = _FuncMenuInputHandler();
 8002d26:	f000 f8db 	bl	8002ee0 <_FuncMenuInputHandler>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	4b54      	ldr	r3, [pc, #336]	; (8002e80 <EM_ProcessEvent+0x1f4>)
 8002d30:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002d32:	4b55      	ldr	r3, [pc, #340]	; (8002e88 <EM_ProcessEvent+0x1fc>)
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b06      	cmp	r3, #6
 8002d38:	f040 8093 	bne.w	8002e62 <EM_ProcessEvent+0x1d6>
			{
				eNextState = _FuncMenuExitHandler();
 8002d3c:	f000 f8e6 	bl	8002f0c <_FuncMenuExitHandler>
 8002d40:	4603      	mov	r3, r0
 8002d42:	461a      	mov	r2, r3
 8002d44:	4b4e      	ldr	r3, [pc, #312]	; (8002e80 <EM_ProcessEvent+0x1f4>)
 8002d46:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002d48:	e08b      	b.n	8002e62 <EM_ProcessEvent+0x1d6>

		case Gain_Menu_State:

			if(eNewEvent == evEncoderSet)
 8002d4a:	4b4f      	ldr	r3, [pc, #316]	; (8002e88 <EM_ProcessEvent+0x1fc>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b05      	cmp	r3, #5
 8002d50:	d105      	bne.n	8002d5e <EM_ProcessEvent+0xd2>
			{
				eNextState = _GainMenuInputHandler();
 8002d52:	f000 f91d 	bl	8002f90 <_GainMenuInputHandler>
 8002d56:	4603      	mov	r3, r0
 8002d58:	461a      	mov	r2, r3
 8002d5a:	4b49      	ldr	r3, [pc, #292]	; (8002e80 <EM_ProcessEvent+0x1f4>)
 8002d5c:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002d5e:	4b4a      	ldr	r3, [pc, #296]	; (8002e88 <EM_ProcessEvent+0x1fc>)
 8002d60:	781b      	ldrb	r3, [r3, #0]
 8002d62:	2b06      	cmp	r3, #6
 8002d64:	d17f      	bne.n	8002e66 <EM_ProcessEvent+0x1da>
			{
				eNextState = _GainMenuExitHandler();
 8002d66:	f000 f929 	bl	8002fbc <_GainMenuExitHandler>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4b44      	ldr	r3, [pc, #272]	; (8002e80 <EM_ProcessEvent+0x1f4>)
 8002d70:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002d72:	e078      	b.n	8002e66 <EM_ProcessEvent+0x1da>

			if(eNewEvent == evEncoderSet)
			{
//				eNextState = _FreqMainMenuSetHandler();
			}
			if(eNewEvent == evEncoderPush)
 8002d74:	4b44      	ldr	r3, [pc, #272]	; (8002e88 <EM_ProcessEvent+0x1fc>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b06      	cmp	r3, #6
 8002d7a:	d105      	bne.n	8002d88 <EM_ProcessEvent+0xfc>
			{
				eNextState = _FreqMainMenuExitHandler();
 8002d7c:	f000 f990 	bl	80030a0 <_FreqMainMenuExitHandler>
 8002d80:	4603      	mov	r3, r0
 8002d82:	461a      	mov	r2, r3
 8002d84:	4b3e      	ldr	r3, [pc, #248]	; (8002e80 <EM_ProcessEvent+0x1f4>)
 8002d86:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 8002d88:	4b3f      	ldr	r3, [pc, #252]	; (8002e88 <EM_ProcessEvent+0x1fc>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b01      	cmp	r3, #1
 8002d8e:	d105      	bne.n	8002d9c <EM_ProcessEvent+0x110>
			{
//				FreqO_ApplyPreset(FPRESET_1HZ);
				eNextState = _FreqPresetMenuEntryHandler();
 8002d90:	f000 f9a0 	bl	80030d4 <_FreqPresetMenuEntryHandler>
 8002d94:	4603      	mov	r3, r0
 8002d96:	461a      	mov	r2, r3
 8002d98:	4b39      	ldr	r3, [pc, #228]	; (8002e80 <EM_ProcessEvent+0x1f4>)
 8002d9a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8002d9c:	4b3a      	ldr	r3, [pc, #232]	; (8002e88 <EM_ProcessEvent+0x1fc>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b02      	cmp	r3, #2
 8002da2:	d105      	bne.n	8002db0 <EM_ProcessEvent+0x124>
			{
//				FreqO_ApplyPreset(FPRESET_100HZ);
				eNextState = _FreqAdjustMenuEntryHandler();
 8002da4:	f000 f9ee 	bl	8003184 <_FreqAdjustMenuEntryHandler>
 8002da8:	4603      	mov	r3, r0
 8002daa:	461a      	mov	r2, r3
 8002dac:	4b34      	ldr	r3, [pc, #208]	; (8002e80 <EM_ProcessEvent+0x1f4>)
 8002dae:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 8002db0:	4b35      	ldr	r3, [pc, #212]	; (8002e88 <EM_ProcessEvent+0x1fc>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b03      	cmp	r3, #3
 8002db6:	d158      	bne.n	8002e6a <EM_ProcessEvent+0x1de>
			{
//				FreqO_ApplyPreset(FPRESET_1KHZ);
				eNextState = _FreqSweepMenuEntryHandler();
 8002db8:	f000 fa28 	bl	800320c <_FreqSweepMenuEntryHandler>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	461a      	mov	r2, r3
 8002dc0:	4b2f      	ldr	r3, [pc, #188]	; (8002e80 <EM_ProcessEvent+0x1f4>)
 8002dc2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// No menu action
			}
			break;
 8002dc4:	e051      	b.n	8002e6a <EM_ProcessEvent+0x1de>

		case Freq_Preset_Menu_State:
			if(eNewEvent == evEncoderSet)
 8002dc6:	4b30      	ldr	r3, [pc, #192]	; (8002e88 <EM_ProcessEvent+0x1fc>)
 8002dc8:	781b      	ldrb	r3, [r3, #0]
 8002dca:	2b05      	cmp	r3, #5
 8002dcc:	d105      	bne.n	8002dda <EM_ProcessEvent+0x14e>
			{
				eNextState = _FreqPresetMenuInputHandler();
 8002dce:	f000 f9b1 	bl	8003134 <_FreqPresetMenuInputHandler>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	4b2a      	ldr	r3, [pc, #168]	; (8002e80 <EM_ProcessEvent+0x1f4>)
 8002dd8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002dda:	4b2b      	ldr	r3, [pc, #172]	; (8002e88 <EM_ProcessEvent+0x1fc>)
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	2b06      	cmp	r3, #6
 8002de0:	d145      	bne.n	8002e6e <EM_ProcessEvent+0x1e2>
			{
				eNextState = _FreqPresetMenuExitHandler();
 8002de2:	f000 f9bd 	bl	8003160 <_FreqPresetMenuExitHandler>
 8002de6:	4603      	mov	r3, r0
 8002de8:	461a      	mov	r2, r3
 8002dea:	4b25      	ldr	r3, [pc, #148]	; (8002e80 <EM_ProcessEvent+0x1f4>)
 8002dec:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002dee:	e03e      	b.n	8002e6e <EM_ProcessEvent+0x1e2>

		case Freq_Adjust_Menu_State:
			if(eNewEvent == evEncoderSet)
 8002df0:	4b25      	ldr	r3, [pc, #148]	; (8002e88 <EM_ProcessEvent+0x1fc>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b05      	cmp	r3, #5
 8002df6:	d105      	bne.n	8002e04 <EM_ProcessEvent+0x178>
			{
				eNextState = _FreqAdjustMenuInputHandler();
 8002df8:	f000 f9e4 	bl	80031c4 <_FreqAdjustMenuInputHandler>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	461a      	mov	r2, r3
 8002e00:	4b1f      	ldr	r3, [pc, #124]	; (8002e80 <EM_ProcessEvent+0x1f4>)
 8002e02:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002e04:	4b20      	ldr	r3, [pc, #128]	; (8002e88 <EM_ProcessEvent+0x1fc>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b06      	cmp	r3, #6
 8002e0a:	d132      	bne.n	8002e72 <EM_ProcessEvent+0x1e6>
			{
				eNextState = _FreqAdjustMenuExitHandler();
 8002e0c:	f000 f9ec 	bl	80031e8 <_FreqAdjustMenuExitHandler>
 8002e10:	4603      	mov	r3, r0
 8002e12:	461a      	mov	r2, r3
 8002e14:	4b1a      	ldr	r3, [pc, #104]	; (8002e80 <EM_ProcessEvent+0x1f4>)
 8002e16:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002e18:	e02b      	b.n	8002e72 <EM_ProcessEvent+0x1e6>
		case Freq_Sweep_Menu_State:
			if(eNewEvent == evEncoderSet)
			{
//				eNextState = _FreqMainMenuSetHandler();
			}
			if(eNewEvent == evEncoderPush)
 8002e1a:	4b1b      	ldr	r3, [pc, #108]	; (8002e88 <EM_ProcessEvent+0x1fc>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	2b06      	cmp	r3, #6
 8002e20:	d129      	bne.n	8002e76 <EM_ProcessEvent+0x1ea>
			{
				eNextState = _FreqSweepMenuExitHandler();
 8002e22:	f000 fa0f 	bl	8003244 <_FreqSweepMenuExitHandler>
 8002e26:	4603      	mov	r3, r0
 8002e28:	461a      	mov	r2, r3
 8002e2a:	4b15      	ldr	r3, [pc, #84]	; (8002e80 <EM_ProcessEvent+0x1f4>)
 8002e2c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002e2e:	e022      	b.n	8002e76 <EM_ProcessEvent+0x1ea>

		case Bias_Menu_State:
			if(eNewEvent == evEncoderSet)
 8002e30:	4b15      	ldr	r3, [pc, #84]	; (8002e88 <EM_ProcessEvent+0x1fc>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b05      	cmp	r3, #5
 8002e36:	d105      	bne.n	8002e44 <EM_ProcessEvent+0x1b8>
			{
				eNextState = _BiasMenuInputHandler();
 8002e38:	f000 f8f4 	bl	8003024 <_BiasMenuInputHandler>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	461a      	mov	r2, r3
 8002e40:	4b0f      	ldr	r3, [pc, #60]	; (8002e80 <EM_ProcessEvent+0x1f4>)
 8002e42:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8002e44:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <EM_ProcessEvent+0x1fc>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	2b06      	cmp	r3, #6
 8002e4a:	d116      	bne.n	8002e7a <EM_ProcessEvent+0x1ee>
			{
				eNextState = _BiasMenuExitHandler();
 8002e4c:	f000 f900 	bl	8003050 <_BiasMenuExitHandler>
 8002e50:	4603      	mov	r3, r0
 8002e52:	461a      	mov	r2, r3
 8002e54:	4b0a      	ldr	r3, [pc, #40]	; (8002e80 <EM_ProcessEvent+0x1f4>)
 8002e56:	701a      	strb	r2, [r3, #0]
			}

			break;
 8002e58:	e00f      	b.n	8002e7a <EM_ProcessEvent+0x1ee>

		default:
			break;
 8002e5a:	bf00      	nop
 8002e5c:	e00e      	b.n	8002e7c <EM_ProcessEvent+0x1f0>
			break;
 8002e5e:	bf00      	nop
 8002e60:	e00c      	b.n	8002e7c <EM_ProcessEvent+0x1f0>
			break;
 8002e62:	bf00      	nop
 8002e64:	e00a      	b.n	8002e7c <EM_ProcessEvent+0x1f0>
			break;
 8002e66:	bf00      	nop
 8002e68:	e008      	b.n	8002e7c <EM_ProcessEvent+0x1f0>
			break;
 8002e6a:	bf00      	nop
 8002e6c:	e006      	b.n	8002e7c <EM_ProcessEvent+0x1f0>
			break;
 8002e6e:	bf00      	nop
 8002e70:	e004      	b.n	8002e7c <EM_ProcessEvent+0x1f0>
			break;
 8002e72:	bf00      	nop
 8002e74:	e002      	b.n	8002e7c <EM_ProcessEvent+0x1f0>
			break;
 8002e76:	bf00      	nop
 8002e78:	e000      	b.n	8002e7c <EM_ProcessEvent+0x1f0>
			break;
 8002e7a:	bf00      	nop
	}

}
 8002e7c:	bf00      	nop
 8002e7e:	bd80      	pop	{r7, pc}
 8002e80:	20001eb1 	.word	0x20001eb1
 8002e84:	40012c00 	.word	0x40012c00
 8002e88:	20001eb2 	.word	0x20001eb2

08002e8c <_FuncMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FuncMenuEntryHandler(void)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionMenu Event captured\n");
 8002e92:	4810      	ldr	r0, [pc, #64]	; (8002ed4 <_FuncMenuEntryHandler+0x48>)
 8002e94:	f00a f82a 	bl	800ceec <puts>
#endif

	_RefreshDisplay();
 8002e98:	f000 f9f6 	bl	8003288 <_RefreshDisplay>

	DM_ShowFuncSelectMenu(ENABLE_FUNCMENU);
 8002e9c:	2001      	movs	r0, #1
 8002e9e:	f7fe f8a7 	bl	8000ff0 <DM_ShowFuncSelectMenu>

	Func_Preset_Encoder_Pos_t *pFuncPresetTmp =  FuncO_GetFPresetObject();
 8002ea2:	f000 fdad 	bl	8003a00 <FuncO_GetFPresetObject>
 8002ea6:	6078      	str	r0, [r7, #4]
	if(pFuncPresetTmp)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <_FuncMenuEntryHandler+0x38>
	{
		ENCODER_TIMER->CNT = pFuncPresetTmp->epos;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	785a      	ldrb	r2, [r3, #1]
 8002eb2:	4b09      	ldr	r3, [pc, #36]	; (8002ed8 <_FuncMenuEntryHandler+0x4c>)
 8002eb4:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 8002eb6:	f000 fdaf 	bl	8003a18 <FuncO_GetFuncPresetEncoderRange>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	461a      	mov	r2, r3
 8002ebe:	4b06      	ldr	r3, [pc, #24]	; (8002ed8 <_FuncMenuEntryHandler+0x4c>)
 8002ec0:	62da      	str	r2, [r3, #44]	; 0x2c
 8002ec2:	e002      	b.n	8002eca <_FuncMenuEntryHandler+0x3e>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: pFuncPresetTmp null pointer");
 8002ec4:	4805      	ldr	r0, [pc, #20]	; (8002edc <_FuncMenuEntryHandler+0x50>)
 8002ec6:	f7fe fbcb 	bl	8001660 <DM_SetErrorDebugMsg>
	}


	return Func_Menu_State;
 8002eca:	2301      	movs	r3, #1
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3708      	adds	r7, #8
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	0800f060 	.word	0x0800f060
 8002ed8:	40012c00 	.word	0x40012c00
 8002edc:	0800f07c 	.word	0x0800f07c

08002ee0 <_FuncMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FuncMenuInputHandler(void)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionAdjust Event captured\n");
 8002ee4:	4807      	ldr	r0, [pc, #28]	; (8002f04 <_FuncMenuInputHandler+0x24>)
 8002ee6:	f00a f801 	bl	800ceec <puts>
#endif


	FuncO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8002eea:	2001      	movs	r0, #1
 8002eec:	f000 fe6e 	bl	8003bcc <SM_GetEncoderValue>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	4618      	mov	r0, r3
 8002ef4:	f000 fc54 	bl	80037a0 <FuncO_ModifyOutput>
	eNewEvent = evBlueBtn;
 8002ef8:	4b03      	ldr	r3, [pc, #12]	; (8002f08 <_FuncMenuInputHandler+0x28>)
 8002efa:	2201      	movs	r2, #1
 8002efc:	701a      	strb	r2, [r3, #0]
	return Func_Menu_State;
 8002efe:	2301      	movs	r3, #1
}
 8002f00:	4618      	mov	r0, r3
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	0800f0b0 	.word	0x0800f0b0
 8002f08:	20001eb2 	.word	0x20001eb2

08002f0c <_FuncMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FuncMenuExitHandler()
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFuncMenu Event captured\n");
 8002f10:	4808      	ldr	r0, [pc, #32]	; (8002f34 <_FuncMenuExitHandler+0x28>)
 8002f12:	f009 ffeb 	bl	800ceec <puts>
#endif

	// disable the menu

	DM_ShowFuncSelectMenu(DISABLE_FUNCMENU);
 8002f16:	2000      	movs	r0, #0
 8002f18:	f7fe f86a 	bl	8000ff0 <DM_ShowFuncSelectMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8002f1c:	4b06      	ldr	r3, [pc, #24]	; (8002f38 <_FuncMenuExitHandler+0x2c>)
 8002f1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002f22:	62da      	str	r2, [r3, #44]	; 0x2c

	_RefreshDisplay();
 8002f24:	f000 f9b0 	bl	8003288 <_RefreshDisplay>

	eNewEvent = evIdle;
 8002f28:	4b04      	ldr	r3, [pc, #16]	; (8002f3c <_FuncMenuExitHandler+0x30>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8002f2e:	2300      	movs	r3, #0
}
 8002f30:	4618      	mov	r0, r3
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	0800f0d0 	.word	0x0800f0d0
 8002f38:	40012c00 	.word	0x40012c00
 8002f3c:	20001eb2 	.word	0x20001eb2

08002f40 <_GainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _GainMenuEntryHandler()
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainMenu Event captured\n");
 8002f46:	480f      	ldr	r0, [pc, #60]	; (8002f84 <_GainMenuEntryHandler+0x44>)
 8002f48:	f009 ffd0 	bl	800ceec <puts>
#endif

	_RefreshDisplay();
 8002f4c:	f000 f99c 	bl	8003288 <_RefreshDisplay>

	//DM_ShowGainSelectMenu(ENABLE_GAINMENU);
	DM_ShowVppSelectMenu(ENABLE_VPPMENU);
 8002f50:	2001      	movs	r0, #1
 8002f52:	f7fe fa39 	bl	80013c8 <DM_ShowVppSelectMenu>

	VppEncoderPreset_t *pVppPresetTmp =  VPP_GetVppPresetObject();
 8002f56:	f001 fbcb 	bl	80046f0 <VPP_GetVppPresetObject>
 8002f5a:	6078      	str	r0, [r7, #4]
	if(pVppPresetTmp)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d008      	beq.n	8002f74 <_GainMenuEntryHandler+0x34>
	{
		ENCODER_TIMER->CNT = pVppPresetTmp->epos;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	8b1a      	ldrh	r2, [r3, #24]
 8002f66:	4b08      	ldr	r3, [pc, #32]	; (8002f88 <_GainMenuEntryHandler+0x48>)
 8002f68:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 8002f6a:	4b07      	ldr	r3, [pc, #28]	; (8002f88 <_GainMenuEntryHandler+0x48>)
 8002f6c:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8002f70:	62da      	str	r2, [r3, #44]	; 0x2c
 8002f72:	e002      	b.n	8002f7a <_GainMenuEntryHandler+0x3a>
	}
	else
	{
		DM_SetErrorDebugMsg("_GainMenuEntryHandler: pVppPresetTmp null pointer");
 8002f74:	4805      	ldr	r0, [pc, #20]	; (8002f8c <_GainMenuEntryHandler+0x4c>)
 8002f76:	f7fe fb73 	bl	8001660 <DM_SetErrorDebugMsg>
	{
		DM_SetErrorDebugMsg("_GainMenuEntryHandler: pGainPresetTmp null pointer");
	}
*/

	return Gain_Menu_State;
 8002f7a:	2302      	movs	r3, #2
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	0800f0ec 	.word	0x0800f0ec
 8002f88:	40012c00 	.word	0x40012c00
 8002f8c:	0800f104 	.word	0x0800f104

08002f90 <_GainMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _GainMenuInputHandler()
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainSet Event captured\n");
 8002f94:	4807      	ldr	r0, [pc, #28]	; (8002fb4 <_GainMenuInputHandler+0x24>)
 8002f96:	f009 ffa9 	bl	800ceec <puts>
#endif

	//GO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
	VPP_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8002f9a:	2001      	movs	r0, #1
 8002f9c:	f000 fe16 	bl	8003bcc <SM_GetEncoderValue>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 ff1e 	bl	8003de4 <VPP_ModifyOutput>

	eNewEvent = evYellowBtn;
 8002fa8:	4b03      	ldr	r3, [pc, #12]	; (8002fb8 <_GainMenuInputHandler+0x28>)
 8002faa:	2203      	movs	r2, #3
 8002fac:	701a      	strb	r2, [r3, #0]
	return Gain_Menu_State;
 8002fae:	2302      	movs	r3, #2
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	0800f138 	.word	0x0800f138
 8002fb8:	20001eb2 	.word	0x20001eb2

08002fbc <_GainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _GainMenuExitHandler()
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitGainMenu Event captured\n");
 8002fc0:	4806      	ldr	r0, [pc, #24]	; (8002fdc <_GainMenuExitHandler+0x20>)
 8002fc2:	f009 ff93 	bl	800ceec <puts>
#endif


	// disable the menu
	//DM_ShowGainSelectMenu(DISABLE_GAINMENU);
	DM_ShowVppSelectMenu(DISABLE_VPPMENU);
 8002fc6:	2000      	movs	r0, #0
 8002fc8:	f7fe f9fe 	bl	80013c8 <DM_ShowVppSelectMenu>

	// reset the encoder range
	//ENCODER_TIMER->CNT = 0;
	//ENCODER_TIMER->ARR = 12;

	_RefreshDisplay();
 8002fcc:	f000 f95c 	bl	8003288 <_RefreshDisplay>

	eNewEvent = evIdle;
 8002fd0:	4b03      	ldr	r3, [pc, #12]	; (8002fe0 <_GainMenuExitHandler+0x24>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	0800f150 	.word	0x0800f150
 8002fe0:	20001eb2 	.word	0x20001eb2

08002fe4 <_BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _BiasMenuEntryHandler()
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasMenu Event captured\n");
 8002fe8:	480b      	ldr	r0, [pc, #44]	; (8003018 <_BiasMenuEntryHandler+0x34>)
 8002fea:	f009 ff7f 	bl	800ceec <puts>
#endif

	_RefreshDisplay();
 8002fee:	f000 f94b 	bl	8003288 <_RefreshDisplay>

	DM_ShowBiasSelectMenu(ENABLE_BIASMENU);
 8002ff2:	2001      	movs	r0, #1
 8002ff4:	f7fe fa30 	bl	8001458 <DM_ShowBiasSelectMenu>

	ENCODER_TIMER->ARR = BIAS_MAX;
 8002ff8:	4b08      	ldr	r3, [pc, #32]	; (800301c <_BiasMenuEntryHandler+0x38>)
 8002ffa:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002ffe:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 8003000:	f000 f95c 	bl	80032bc <BO_GetDcBiasEncoderValue>
 8003004:	4603      	mov	r3, r0
 8003006:	461a      	mov	r2, r3
 8003008:	4b04      	ldr	r3, [pc, #16]	; (800301c <_BiasMenuEntryHandler+0x38>)
 800300a:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 800300c:	4b04      	ldr	r3, [pc, #16]	; (8003020 <_BiasMenuEntryHandler+0x3c>)
 800300e:	2200      	movs	r2, #0
 8003010:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003012:	2308      	movs	r3, #8
}
 8003014:	4618      	mov	r0, r3
 8003016:	bd80      	pop	{r7, pc}
 8003018:	0800f16c 	.word	0x0800f16c
 800301c:	40012c00 	.word	0x40012c00
 8003020:	20001eb2 	.word	0x20001eb2

08003024 <_BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _BiasMenuInputHandler()
{
 8003024:	b580      	push	{r7, lr}
 8003026:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasSet Event captured\n");
 8003028:	4807      	ldr	r0, [pc, #28]	; (8003048 <_BiasMenuInputHandler+0x24>)
 800302a:	f009 ff5f 	bl	800ceec <puts>
#endif

	BO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800302e:	2001      	movs	r0, #1
 8003030:	f000 fdcc 	bl	8003bcc <SM_GetEncoderValue>
 8003034:	4603      	mov	r3, r0
 8003036:	4618      	mov	r0, r3
 8003038:	f000 f94c 	bl	80032d4 <BO_ModifyOutput>

	eNewEvent = evIdle;
 800303c:	4b03      	ldr	r3, [pc, #12]	; (800304c <_BiasMenuInputHandler+0x28>)
 800303e:	2200      	movs	r2, #0
 8003040:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003042:	2308      	movs	r3, #8
}
 8003044:	4618      	mov	r0, r3
 8003046:	bd80      	pop	{r7, pc}
 8003048:	0800f184 	.word	0x0800f184
 800304c:	20001eb2 	.word	0x20001eb2

08003050 <_BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _BiasMenuExitHandler()
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitBiasMenu Event captured\n");
 8003054:	4806      	ldr	r0, [pc, #24]	; (8003070 <_BiasMenuExitHandler+0x20>)
 8003056:	f009 ff49 	bl	800ceec <puts>
#endif


	// disable the menu
	DM_ShowBiasSelectMenu(DISABLE_BIASMENU);
 800305a:	2000      	movs	r0, #0
 800305c:	f7fe f9fc 	bl	8001458 <DM_ShowBiasSelectMenu>

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	_RefreshDisplay();
 8003060:	f000 f912 	bl	8003288 <_RefreshDisplay>

	eNewEvent = evIdle;
 8003064:	4b03      	ldr	r3, [pc, #12]	; (8003074 <_BiasMenuExitHandler+0x24>)
 8003066:	2200      	movs	r2, #0
 8003068:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 800306a:	2300      	movs	r3, #0
}
 800306c:	4618      	mov	r0, r3
 800306e:	bd80      	pop	{r7, pc}
 8003070:	0800f19c 	.word	0x0800f19c
 8003074:	20001eb2 	.word	0x20001eb2

08003078 <_FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqMainMenuEntryHandler()
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqMenu Event captured\n");
 800307c:	4806      	ldr	r0, [pc, #24]	; (8003098 <_FreqMainMenuEntryHandler+0x20>)
 800307e:	f009 ff35 	bl	800ceec <puts>
#endif

	_RefreshDisplay();
 8003082:	f000 f901 	bl	8003288 <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_MAIN_MENU);
 8003086:	2001      	movs	r0, #1
 8003088:	f7fe f9d6 	bl	8001438 <DM_ShowFreqMenu>

	// stay in this state
	eNewEvent = evIdle;
 800308c:	4b03      	ldr	r3, [pc, #12]	; (800309c <_FreqMainMenuEntryHandler+0x24>)
 800308e:	2200      	movs	r2, #0
 8003090:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8003092:	2304      	movs	r3, #4
}
 8003094:	4618      	mov	r0, r3
 8003096:	bd80      	pop	{r7, pc}
 8003098:	0800f1b8 	.word	0x0800f1b8
 800309c:	20001eb2 	.word	0x20001eb2

080030a0 <_FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqMainMenuExitHandler()
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Main Menu Event captured\n");
 80030a4:	4808      	ldr	r0, [pc, #32]	; (80030c8 <_FreqMainMenuExitHandler+0x28>)
 80030a6:	f009 ff21 	bl	800ceec <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 80030aa:	2000      	movs	r0, #0
 80030ac:	f7fe f9c4 	bl	8001438 <DM_ShowFreqMenu>

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 80030b0:	4b06      	ldr	r3, [pc, #24]	; (80030cc <_FreqMainMenuExitHandler+0x2c>)
 80030b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030b6:	62da      	str	r2, [r3, #44]	; 0x2c

	_RefreshDisplay();
 80030b8:	f000 f8e6 	bl	8003288 <_RefreshDisplay>

	eNewEvent = evIdle;
 80030bc:	4b04      	ldr	r3, [pc, #16]	; (80030d0 <_FreqMainMenuExitHandler+0x30>)
 80030be:	2200      	movs	r2, #0
 80030c0:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	0800f1e8 	.word	0x0800f1e8
 80030cc:	40012c00 	.word	0x40012c00
 80030d0:	20001eb2 	.word	0x20001eb2

080030d4 <_FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqPresetMenuEntryHandler()
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Preset Menu Entry Event captured\n");
 80030da:	4812      	ldr	r0, [pc, #72]	; (8003124 <_FreqPresetMenuEntryHandler+0x50>)
 80030dc:	f009 ff06 	bl	800ceec <puts>
#endif

	_RefreshDisplay();
 80030e0:	f000 f8d2 	bl	8003288 <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_PRESET_MENU);
 80030e4:	2002      	movs	r0, #2
 80030e6:	f7fe f9a7 	bl	8001438 <DM_ShowFreqMenu>

	Freq_Preset_Encoder_Pos_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 80030ea:	f000 faf1 	bl	80036d0 <FreqO_GetFPresetObject>
 80030ee:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <_FreqPresetMenuEntryHandler+0x38>
	{
		ENCODER_TIMER->CNT = pFreqPresetTmp->epos;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	791a      	ldrb	r2, [r3, #4]
 80030fa:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <_FreqPresetMenuEntryHandler+0x54>)
 80030fc:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FreqO_GetFreqPresetEncoderRange();
 80030fe:	f000 fb19 	bl	8003734 <FreqO_GetFreqPresetEncoderRange>
 8003102:	4603      	mov	r3, r0
 8003104:	461a      	mov	r2, r3
 8003106:	4b08      	ldr	r3, [pc, #32]	; (8003128 <_FreqPresetMenuEntryHandler+0x54>)
 8003108:	62da      	str	r2, [r3, #44]	; 0x2c
 800310a:	e002      	b.n	8003112 <_FreqPresetMenuEntryHandler+0x3e>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 800310c:	4807      	ldr	r0, [pc, #28]	; (800312c <_FreqPresetMenuEntryHandler+0x58>)
 800310e:	f7fe faa7 	bl	8001660 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 8003112:	4b07      	ldr	r3, [pc, #28]	; (8003130 <_FreqPresetMenuEntryHandler+0x5c>)
 8003114:	2200      	movs	r2, #0
 8003116:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8003118:	2305      	movs	r3, #5
}
 800311a:	4618      	mov	r0, r3
 800311c:	3708      	adds	r7, #8
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	0800f20c 	.word	0x0800f20c
 8003128:	40012c00 	.word	0x40012c00
 800312c:	0800f234 	.word	0x0800f234
 8003130:	20001eb2 	.word	0x20001eb2

08003134 <_FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqPresetMenuInputHandler()
{
 8003134:	b580      	push	{r7, lr}
 8003136:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 8003138:	4807      	ldr	r0, [pc, #28]	; (8003158 <_FreqPresetMenuInputHandler+0x24>)
 800313a:	f009 fed7 	bl	800ceec <puts>
#endif

	FreqO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800313e:	2001      	movs	r0, #1
 8003140:	f000 fd44 	bl	8003bcc <SM_GetEncoderValue>
 8003144:	4603      	mov	r3, r0
 8003146:	4618      	mov	r0, r3
 8003148:	f000 f9d0 	bl	80034ec <FreqO_ModifyOutput>

	// stay in this state
	eNewEvent = evIdle;
 800314c:	4b03      	ldr	r3, [pc, #12]	; (800315c <_FreqPresetMenuInputHandler+0x28>)
 800314e:	2200      	movs	r2, #0
 8003150:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8003152:	2305      	movs	r3, #5
}
 8003154:	4618      	mov	r0, r3
 8003156:	bd80      	pop	{r7, pc}
 8003158:	0800f1d0 	.word	0x0800f1d0
 800315c:	20001eb2 	.word	0x20001eb2

08003160 <_FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqPresetMenuExitHandler()
{
 8003160:	b580      	push	{r7, lr}
 8003162:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Menu Event captured\n");
 8003164:	4805      	ldr	r0, [pc, #20]	; (800317c <_FreqPresetMenuExitHandler+0x1c>)
 8003166:	f009 fec1 	bl	800ceec <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 800316a:	2000      	movs	r0, #0
 800316c:	f7fe f964 	bl	8001438 <DM_ShowFreqMenu>

	// back to main freq menu
	eNewEvent = evGreenBtn;
 8003170:	4b03      	ldr	r3, [pc, #12]	; (8003180 <_FreqPresetMenuExitHandler+0x20>)
 8003172:	2202      	movs	r2, #2
 8003174:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8003176:	2300      	movs	r3, #0
}
 8003178:	4618      	mov	r0, r3
 800317a:	bd80      	pop	{r7, pc}
 800317c:	0800f270 	.word	0x0800f270
 8003180:	20001eb2 	.word	0x20001eb2

08003184 <_FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqAdjustMenuEntryHandler()
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Adjust Menu Event captured\n");
 8003188:	480a      	ldr	r0, [pc, #40]	; (80031b4 <_FreqAdjustMenuEntryHandler+0x30>)
 800318a:	f009 feaf 	bl	800ceec <puts>
#endif

	_RefreshDisplay();
 800318e:	f000 f87b 	bl	8003288 <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_ADJUST_MENU);
 8003192:	2003      	movs	r0, #3
 8003194:	f7fe f950 	bl	8001438 <DM_ShowFreqMenu>

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = TIM8->ARR;
 8003198:	4b07      	ldr	r3, [pc, #28]	; (80031b8 <_FreqAdjustMenuEntryHandler+0x34>)
 800319a:	4a08      	ldr	r2, [pc, #32]	; (80031bc <_FreqAdjustMenuEntryHandler+0x38>)
 800319c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319e:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 80031a0:	4b06      	ldr	r3, [pc, #24]	; (80031bc <_FreqAdjustMenuEntryHandler+0x38>)
 80031a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031a6:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 80031a8:	4b05      	ldr	r3, [pc, #20]	; (80031c0 <_FreqAdjustMenuEntryHandler+0x3c>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 80031ae:	2306      	movs	r3, #6
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	0800f290 	.word	0x0800f290
 80031b8:	40013400 	.word	0x40013400
 80031bc:	40012c00 	.word	0x40012c00
 80031c0:	20001eb2 	.word	0x20001eb2

080031c4 <_FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqAdjustMenuInputHandler()
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 80031c8:	4805      	ldr	r0, [pc, #20]	; (80031e0 <_FreqAdjustMenuInputHandler+0x1c>)
 80031ca:	f009 fe8f 	bl	800ceec <puts>
#endif

	FreqO_AdjustFreq();
 80031ce:	f000 f97f 	bl	80034d0 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 80031d2:	4b04      	ldr	r3, [pc, #16]	; (80031e4 <_FreqAdjustMenuInputHandler+0x20>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 80031d8:	2306      	movs	r3, #6
}
 80031da:	4618      	mov	r0, r3
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop
 80031e0:	0800f1d0 	.word	0x0800f1d0
 80031e4:	20001eb2 	.word	0x20001eb2

080031e8 <_FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqAdjustMenuExitHandler()
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Adjust Menu Exit Event captured\n");
 80031ec:	4805      	ldr	r0, [pc, #20]	; (8003204 <_FreqAdjustMenuExitHandler+0x1c>)
 80031ee:	f009 fe7d 	bl	800ceec <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 80031f2:	2000      	movs	r0, #0
 80031f4:	f7fe f920 	bl	8001438 <DM_ShowFreqMenu>

	// back to main freq menu
	eNewEvent = evGreenBtn;
 80031f8:	4b03      	ldr	r3, [pc, #12]	; (8003208 <_FreqAdjustMenuExitHandler+0x20>)
 80031fa:	2202      	movs	r2, #2
 80031fc:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80031fe:	2300      	movs	r3, #0
}
 8003200:	4618      	mov	r0, r3
 8003202:	bd80      	pop	{r7, pc}
 8003204:	0800f2b0 	.word	0x0800f2b0
 8003208:	20001eb2 	.word	0x20001eb2

0800320c <_FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqSweepMenuEntryHandler()
{
 800320c:	b580      	push	{r7, lr}
 800320e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Sweep Menu Event captured\n");
 8003210:	4809      	ldr	r0, [pc, #36]	; (8003238 <_FreqSweepMenuEntryHandler+0x2c>)
 8003212:	f009 fe6b 	bl	800ceec <puts>
#endif

	_RefreshDisplay();
 8003216:	f000 f837 	bl	8003288 <_RefreshDisplay>

	DM_ShowFreqMenu(ENABLE_FREQ_SWEEP_MENU);
 800321a:	2004      	movs	r0, #4
 800321c:	f7fe f90c 	bl	8001438 <DM_ShowFreqMenu>

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = 0;
 8003220:	4b06      	ldr	r3, [pc, #24]	; (800323c <_FreqSweepMenuEntryHandler+0x30>)
 8003222:	2200      	movs	r2, #0
 8003224:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 56;
 8003226:	4b05      	ldr	r3, [pc, #20]	; (800323c <_FreqSweepMenuEntryHandler+0x30>)
 8003228:	2238      	movs	r2, #56	; 0x38
 800322a:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 800322c:	4b04      	ldr	r3, [pc, #16]	; (8003240 <_FreqSweepMenuEntryHandler+0x34>)
 800322e:	2200      	movs	r2, #0
 8003230:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8003232:	2307      	movs	r3, #7
}
 8003234:	4618      	mov	r0, r3
 8003236:	bd80      	pop	{r7, pc}
 8003238:	0800f2dc 	.word	0x0800f2dc
 800323c:	40012c00 	.word	0x40012c00
 8003240:	20001eb2 	.word	0x20001eb2

08003244 <_FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState _FreqSweepMenuExitHandler()
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Sweep Menu Exit Event captured\n");
 8003248:	4805      	ldr	r0, [pc, #20]	; (8003260 <_FreqSweepMenuExitHandler+0x1c>)
 800324a:	f009 fe4f 	bl	800ceec <puts>
#endif


	// disable the menu
	DM_ShowFreqMenu(DISABLE_FREQ_MENU);
 800324e:	2000      	movs	r0, #0
 8003250:	f7fe f8f2 	bl	8001438 <DM_ShowFreqMenu>

	// back to main freq menu
	eNewEvent = evGreenBtn;
 8003254:	4b03      	ldr	r3, [pc, #12]	; (8003264 <_FreqSweepMenuExitHandler+0x20>)
 8003256:	2202      	movs	r2, #2
 8003258:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	bd80      	pop	{r7, pc}
 8003260:	0800f2fc 	.word	0x0800f2fc
 8003264:	20001eb2 	.word	0x20001eb2

08003268 <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8003272:	4a04      	ldr	r2, [pc, #16]	; (8003284 <EM_SetNewEvent+0x1c>)
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	7013      	strb	r3, [r2, #0]
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr
 8003284:	20001eb2 	.word	0x20001eb2

08003288 <_RefreshDisplay>:
 *	@param None
 *	@retval None
 *
 */
void _RefreshDisplay()
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 800328c:	4804      	ldr	r0, [pc, #16]	; (80032a0 <_RefreshDisplay+0x18>)
 800328e:	f006 fea7 	bl	8009fe0 <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8003292:	f7fe f92f 	bl	80014f4 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8003296:	4802      	ldr	r0, [pc, #8]	; (80032a0 <_RefreshDisplay+0x18>)
 8003298:	f006 fe6c 	bl	8009f74 <HAL_TIM_Base_Start_IT>
}
 800329c:	bf00      	nop
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	2000251c 	.word	0x2000251c

080032a4 <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 80032a4:	b480      	push	{r7}
 80032a6:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 80032a8:	4b03      	ldr	r3, [pc, #12]	; (80032b8 <BO_GetBiasPolarity+0x14>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	46bd      	mov	sp, r7
 80032b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b4:	4770      	bx	lr
 80032b6:	bf00      	nop
 80032b8:	20000008 	.word	0x20000008

080032bc <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 80032c0:	4b03      	ldr	r3, [pc, #12]	; (80032d0 <BO_GetDcBiasEncoderValue+0x14>)
 80032c2:	881b      	ldrh	r3, [r3, #0]
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	2000000a 	.word	0x2000000a

080032d4 <BO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_ModifyOutput(uint16_t pEncoderValue)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	4603      	mov	r3, r0
 80032dc:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_FORWARD);
 80032de:	2000      	movs	r0, #0
 80032e0:	f000 fc74 	bl	8003bcc <SM_GetEncoderValue>
 80032e4:	4603      	mov	r3, r0
 80032e6:	461a      	mov	r2, r3
 80032e8:	4b1b      	ldr	r3, [pc, #108]	; (8003358 <BO_ModifyOutput+0x84>)
 80032ea:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 80032ec:	88fb      	ldrh	r3, [r7, #6]
 80032ee:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80032f2:	d214      	bcs.n	800331e <BO_ModifyOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 80032f4:	4b19      	ldr	r3, [pc, #100]	; (800335c <BO_ModifyOutput+0x88>)
 80032f6:	2200      	movs	r2, #0
 80032f8:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 80032fa:	88fb      	ldrh	r3, [r7, #6]
 80032fc:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 8003300:	4613      	mov	r3, r2
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	4413      	add	r3, r2
 8003306:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8003308:	2200      	movs	r2, #0
 800330a:	2110      	movs	r1, #16
 800330c:	4814      	ldr	r0, [pc, #80]	; (8003360 <BO_ModifyOutput+0x8c>)
 800330e:	f004 fe33 	bl	8007f78 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8003312:	2201      	movs	r2, #1
 8003314:	2108      	movs	r1, #8
 8003316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800331a:	f005 fd03 	bl	8008d24 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 800331e:	88fb      	ldrh	r3, [r7, #6]
 8003320:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003324:	d314      	bcc.n	8003350 <BO_ModifyOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 8003326:	4b0d      	ldr	r3, [pc, #52]	; (800335c <BO_ModifyOutput+0x88>)
 8003328:	2201      	movs	r2, #1
 800332a:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 8003332:	4613      	mov	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	4413      	add	r3, r2
 8003338:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 800333a:	2200      	movs	r2, #0
 800333c:	2110      	movs	r1, #16
 800333e:	4808      	ldr	r0, [pc, #32]	; (8003360 <BO_ModifyOutput+0x8c>)
 8003340:	f004 fe1a 	bl	8007f78 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8003344:	2200      	movs	r2, #0
 8003346:	2108      	movs	r1, #8
 8003348:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800334c:	f005 fcea 	bl	8008d24 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 8003350:	bf00      	nop
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}
 8003358:	2000000a 	.word	0x2000000a
 800335c:	20000008 	.word	0x20000008
 8003360:	20002398 	.word	0x20002398

08003364 <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 8003364:	b580      	push	{r7, lr}
 8003366:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8003368:	2110      	movs	r1, #16
 800336a:	4803      	ldr	r0, [pc, #12]	; (8003378 <BO_GetOutputBias+0x14>)
 800336c:	f004 fe40 	bl	8007ff0 <HAL_DAC_GetValue>
 8003370:	4603      	mov	r3, r0
}
 8003372:	4618      	mov	r0, r3
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20002398 	.word	0x20002398

0800337c <DT_InitRegister>:
 *	@param None
 *	@retval None
 *
 */
void DT_InitRegister()
{
 800337c:	b480      	push	{r7}
 800337e:	b083      	sub	sp, #12
 8003380:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8003382:	2300      	movs	r3, #0
 8003384:	607b      	str	r3, [r7, #4]
 8003386:	e06b      	b.n	8003460 <DT_InitRegister+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(DacTimerReg[i].psc == 0)
 8003388:	493a      	ldr	r1, [pc, #232]	; (8003474 <DT_InitRegister+0xf8>)
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	3308      	adds	r3, #8
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d129      	bne.n	80033f2 <DT_InitRegister+0x76>
			DacTimerReg[i].arr = ((SM_MCLK / DacTimerReg[i].hertz) / SM_FSAMP) * DacTimerReg[i].error;
 800339e:	4935      	ldr	r1, [pc, #212]	; (8003474 <DT_InitRegister+0xf8>)
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	4613      	mov	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	4413      	add	r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	3304      	adds	r3, #4
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a31      	ldr	r2, [pc, #196]	; (8003478 <DT_InitRegister+0xfc>)
 80033b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b6:	ee07 3a90 	vmov	s15, r3
 80033ba:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033be:	492d      	ldr	r1, [pc, #180]	; (8003474 <DT_InitRegister+0xf8>)
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	440b      	add	r3, r1
 80033cc:	3310      	adds	r3, #16
 80033ce:	edd3 7a00 	vldr	s15, [r3]
 80033d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80033da:	ee17 0a90 	vmov	r0, s15
 80033de:	4925      	ldr	r1, [pc, #148]	; (8003474 <DT_InitRegister+0xf8>)
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	4613      	mov	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	4413      	add	r3, r2
 80033e8:	009b      	lsls	r3, r3, #2
 80033ea:	440b      	add	r3, r1
 80033ec:	330c      	adds	r3, #12
 80033ee:	6018      	str	r0, [r3, #0]
 80033f0:	e033      	b.n	800345a <DT_InitRegister+0xde>
		else
			DacTimerReg[i].arr = (((SM_MCLK / DacTimerReg[i].hertz) / DacTimerReg[i].psc) / SM_FSAMP) * DacTimerReg[i].error;
 80033f2:	4920      	ldr	r1, [pc, #128]	; (8003474 <DT_InitRegister+0xf8>)
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	009b      	lsls	r3, r3, #2
 80033fa:	4413      	add	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	3304      	adds	r3, #4
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a1c      	ldr	r2, [pc, #112]	; (8003478 <DT_InitRegister+0xfc>)
 8003406:	fbb2 f1f3 	udiv	r1, r2, r3
 800340a:	481a      	ldr	r0, [pc, #104]	; (8003474 <DT_InitRegister+0xf8>)
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	4413      	add	r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	4403      	add	r3, r0
 8003418:	3308      	adds	r3, #8
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003420:	ee07 3a90 	vmov	s15, r3
 8003424:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003428:	4912      	ldr	r1, [pc, #72]	; (8003474 <DT_InitRegister+0xf8>)
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	4613      	mov	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4413      	add	r3, r2
 8003432:	009b      	lsls	r3, r3, #2
 8003434:	440b      	add	r3, r1
 8003436:	3310      	adds	r3, #16
 8003438:	edd3 7a00 	vldr	s15, [r3]
 800343c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003440:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003444:	ee17 0a90 	vmov	r0, s15
 8003448:	490a      	ldr	r1, [pc, #40]	; (8003474 <DT_InitRegister+0xf8>)
 800344a:	687a      	ldr	r2, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	330c      	adds	r3, #12
 8003458:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	3301      	adds	r3, #1
 800345e:	607b      	str	r3, [r7, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2b0d      	cmp	r3, #13
 8003464:	dd90      	ble.n	8003388 <DT_InitRegister+0xc>
	}
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	2000000c 	.word	0x2000000c
 8003478:	00155cc0 	.word	0x00155cc0

0800347c <DT_GetRegisterByEnum>:
 *	@param pEnum Enummeration (eFreq_Preset) search criteria. Not an index
 *	@retval Pointer to the found DacTimeReg_t struct. Null if no result!
 *
 */
DacTimeReg_t* DT_GetRegisterByEnum(eFreq_Preset pEnum)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8003484:	2300      	movs	r3, #0
 8003486:	60fb      	str	r3, [r7, #12]
 8003488:	e016      	b.n	80034b8 <DT_GetRegisterByEnum+0x3c>
		if(DacTimerReg[i].hertz == pEnum)
 800348a:	4910      	ldr	r1, [pc, #64]	; (80034cc <DT_GetRegisterByEnum+0x50>)
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	4613      	mov	r3, r2
 8003490:	009b      	lsls	r3, r3, #2
 8003492:	4413      	add	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	440b      	add	r3, r1
 8003498:	3304      	adds	r3, #4
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d107      	bne.n	80034b2 <DT_GetRegisterByEnum+0x36>
			return &DacTimerReg[i];
 80034a2:	68fa      	ldr	r2, [r7, #12]
 80034a4:	4613      	mov	r3, r2
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	4a07      	ldr	r2, [pc, #28]	; (80034cc <DT_GetRegisterByEnum+0x50>)
 80034ae:	4413      	add	r3, r2
 80034b0:	e006      	b.n	80034c0 <DT_GetRegisterByEnum+0x44>
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	3301      	adds	r3, #1
 80034b6:	60fb      	str	r3, [r7, #12]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2b0d      	cmp	r3, #13
 80034bc:	dde5      	ble.n	800348a <DT_GetRegisterByEnum+0xe>

	return 0;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3714      	adds	r7, #20
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	2000000c 	.word	0x2000000c

080034d0 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
		//TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_HIFREQ_MAG;
		TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 80034d4:	2000      	movs	r0, #0
 80034d6:	f000 fb79 	bl	8003bcc <SM_GetEncoderValue>
 80034da:	4603      	mov	r3, r0
 80034dc:	461a      	mov	r2, r3
 80034de:	4b02      	ldr	r3, [pc, #8]	; (80034e8 <FreqO_AdjustFreq+0x18>)
 80034e0:	62da      	str	r2, [r3, #44]	; 0x2c
		//TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_LOFREQ_MAG;
}
 80034e2:	bf00      	nop
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	40013400 	.word	0x40013400

080034ec <FreqO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ModifyOutput(uint16_t pEncValue)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	4603      	mov	r3, r0
 80034f4:	80fb      	strh	r3, [r7, #6]

	switch(pEncValue)
 80034f6:	88fb      	ldrh	r3, [r7, #6]
 80034f8:	2b38      	cmp	r3, #56	; 0x38
 80034fa:	f200 80b4 	bhi.w	8003666 <FreqO_ModifyOutput+0x17a>
 80034fe:	a201      	add	r2, pc, #4	; (adr r2, 8003504 <FreqO_ModifyOutput+0x18>)
 8003500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003504:	080035e9 	.word	0x080035e9
 8003508:	080035e9 	.word	0x080035e9
 800350c:	080035e9 	.word	0x080035e9
 8003510:	080035e9 	.word	0x080035e9
 8003514:	080035f1 	.word	0x080035f1
 8003518:	080035f1 	.word	0x080035f1
 800351c:	080035f1 	.word	0x080035f1
 8003520:	080035f1 	.word	0x080035f1
 8003524:	080035f9 	.word	0x080035f9
 8003528:	080035f9 	.word	0x080035f9
 800352c:	080035f9 	.word	0x080035f9
 8003530:	080035f9 	.word	0x080035f9
 8003534:	08003601 	.word	0x08003601
 8003538:	08003601 	.word	0x08003601
 800353c:	08003601 	.word	0x08003601
 8003540:	08003601 	.word	0x08003601
 8003544:	08003609 	.word	0x08003609
 8003548:	08003609 	.word	0x08003609
 800354c:	08003609 	.word	0x08003609
 8003550:	08003609 	.word	0x08003609
 8003554:	08003611 	.word	0x08003611
 8003558:	08003611 	.word	0x08003611
 800355c:	08003611 	.word	0x08003611
 8003560:	08003611 	.word	0x08003611
 8003564:	0800361b 	.word	0x0800361b
 8003568:	0800361b 	.word	0x0800361b
 800356c:	0800361b 	.word	0x0800361b
 8003570:	0800361b 	.word	0x0800361b
 8003574:	08003625 	.word	0x08003625
 8003578:	08003625 	.word	0x08003625
 800357c:	08003625 	.word	0x08003625
 8003580:	08003667 	.word	0x08003667
 8003584:	08003625 	.word	0x08003625
 8003588:	0800362f 	.word	0x0800362f
 800358c:	0800362f 	.word	0x0800362f
 8003590:	0800362f 	.word	0x0800362f
 8003594:	0800362f 	.word	0x0800362f
 8003598:	08003639 	.word	0x08003639
 800359c:	08003639 	.word	0x08003639
 80035a0:	08003639 	.word	0x08003639
 80035a4:	08003639 	.word	0x08003639
 80035a8:	08003643 	.word	0x08003643
 80035ac:	08003643 	.word	0x08003643
 80035b0:	08003643 	.word	0x08003643
 80035b4:	08003643 	.word	0x08003643
 80035b8:	0800364d 	.word	0x0800364d
 80035bc:	0800364d 	.word	0x0800364d
 80035c0:	0800364d 	.word	0x0800364d
 80035c4:	0800364d 	.word	0x0800364d
 80035c8:	08003657 	.word	0x08003657
 80035cc:	08003657 	.word	0x08003657
 80035d0:	08003657 	.word	0x08003657
 80035d4:	08003657 	.word	0x08003657
 80035d8:	0800365f 	.word	0x0800365f
 80035dc:	0800365f 	.word	0x0800365f
 80035e0:	0800365f 	.word	0x0800365f
 80035e4:	0800365f 	.word	0x0800365f
	{
		case 0:
		case 1:
		case 2:
		case 3:
			FreqO_ApplyPreset(FPRESET_1HZ);
 80035e8:	2001      	movs	r0, #1
 80035ea:	f000 f845 	bl	8003678 <FreqO_ApplyPreset>
			break;
 80035ee:	e03a      	b.n	8003666 <FreqO_ModifyOutput+0x17a>
		case 4:
		case 5:
		case 6:
		case 7:
			FreqO_ApplyPreset(FPRESET_10HZ);
 80035f0:	200a      	movs	r0, #10
 80035f2:	f000 f841 	bl	8003678 <FreqO_ApplyPreset>
			break;
 80035f6:	e036      	b.n	8003666 <FreqO_ModifyOutput+0x17a>
		case 8:
		case 9:
		case 10:
		case 11:
			FreqO_ApplyPreset(FPRESET_50HZ);
 80035f8:	2032      	movs	r0, #50	; 0x32
 80035fa:	f000 f83d 	bl	8003678 <FreqO_ApplyPreset>
			break;
 80035fe:	e032      	b.n	8003666 <FreqO_ModifyOutput+0x17a>
		case 12:
		case 13:
		case 14:
		case 15:
			FreqO_ApplyPreset(FPRESET_100HZ);
 8003600:	2064      	movs	r0, #100	; 0x64
 8003602:	f000 f839 	bl	8003678 <FreqO_ApplyPreset>
			break;
 8003606:	e02e      	b.n	8003666 <FreqO_ModifyOutput+0x17a>
		case 16:
		case 17:
		case 18:
		case 19:
			FreqO_ApplyPreset(FPRESET_250HZ);
 8003608:	20fa      	movs	r0, #250	; 0xfa
 800360a:	f000 f835 	bl	8003678 <FreqO_ApplyPreset>
			break;
 800360e:	e02a      	b.n	8003666 <FreqO_ModifyOutput+0x17a>
		case 20:
		case 21:
		case 22:
		case 23:
			FreqO_ApplyPreset(FPRESET_500HZ);
 8003610:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003614:	f000 f830 	bl	8003678 <FreqO_ApplyPreset>
			break;
 8003618:	e025      	b.n	8003666 <FreqO_ModifyOutput+0x17a>
		case 24:
		case 25:
		case 26:
		case 27:
			FreqO_ApplyPreset(FPRESET_750HZ);
 800361a:	f240 20ee 	movw	r0, #750	; 0x2ee
 800361e:	f000 f82b 	bl	8003678 <FreqO_ApplyPreset>
			break;
 8003622:	e020      	b.n	8003666 <FreqO_ModifyOutput+0x17a>
		case 28:
		case 29:
		case 30:
		case 32:
			FreqO_ApplyPreset(FPRESET_1KHZ);
 8003624:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003628:	f000 f826 	bl	8003678 <FreqO_ApplyPreset>
			break;
 800362c:	e01b      	b.n	8003666 <FreqO_ModifyOutput+0x17a>
		case 33:
		case 34:
		case 35:
		case 36:
			FreqO_ApplyPreset(FPRESET_5KHZ);
 800362e:	f241 3088 	movw	r0, #5000	; 0x1388
 8003632:	f000 f821 	bl	8003678 <FreqO_ApplyPreset>
			break;
 8003636:	e016      	b.n	8003666 <FreqO_ModifyOutput+0x17a>
		case 37:
		case 38:
		case 39:
		case 40:
			FreqO_ApplyPreset(FPRESET_10KHZ);
 8003638:	f242 7010 	movw	r0, #10000	; 0x2710
 800363c:	f000 f81c 	bl	8003678 <FreqO_ApplyPreset>
			break;
 8003640:	e011      	b.n	8003666 <FreqO_ModifyOutput+0x17a>
		case 41:
		case 42:
		case 43:
		case 44:
			FreqO_ApplyPreset(FPRESET_25KHZ);
 8003642:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8003646:	f000 f817 	bl	8003678 <FreqO_ApplyPreset>
			break;
 800364a:	e00c      	b.n	8003666 <FreqO_ModifyOutput+0x17a>
		case 45:
		case 46:
		case 47:
		case 48:
			FreqO_ApplyPreset(FPRESET_50KHZ);
 800364c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003650:	f000 f812 	bl	8003678 <FreqO_ApplyPreset>
			break;
 8003654:	e007      	b.n	8003666 <FreqO_ModifyOutput+0x17a>
		case 49:
		case 50:
		case 51:
		case 52:
			FreqO_ApplyPreset(FPRESET_75KHZ);
 8003656:	4806      	ldr	r0, [pc, #24]	; (8003670 <FreqO_ModifyOutput+0x184>)
 8003658:	f000 f80e 	bl	8003678 <FreqO_ApplyPreset>
			break;
 800365c:	e003      	b.n	8003666 <FreqO_ModifyOutput+0x17a>
		case 53:
		case 54:
		case 55:
		case 56:
			FreqO_ApplyPreset(FPRESET_100KHZ);
 800365e:	4805      	ldr	r0, [pc, #20]	; (8003674 <FreqO_ModifyOutput+0x188>)
 8003660:	f000 f80a 	bl	8003678 <FreqO_ApplyPreset>
			break;
 8003664:	bf00      	nop
	}

}
 8003666:	bf00      	nop
 8003668:	3708      	adds	r7, #8
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}
 800366e:	bf00      	nop
 8003670:	000124f8 	.word	0x000124f8
 8003674:	000186a0 	.word	0x000186a0

08003678 <FreqO_ApplyPreset>:

 *	@retval None
 *
 */
void FreqO_ApplyPreset(eFreq_Preset pPresetEnum)
{
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
	DacTimeReg_t* tmp = DT_GetRegisterByEnum(pPresetEnum);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f7ff fefb 	bl	800347c <DT_GetRegisterByEnum>
 8003686:	60f8      	str	r0, [r7, #12]
	if(tmp)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d015      	beq.n	80036ba <FreqO_ApplyPreset+0x42>
	{
		TIM8->PSC = tmp->psc;
 800368e:	4a0d      	ldr	r2, [pc, #52]	; (80036c4 <FreqO_ApplyPreset+0x4c>)
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	6293      	str	r3, [r2, #40]	; 0x28
		TIM8->ARR = tmp->arr;
 8003696:	4a0b      	ldr	r2, [pc, #44]	; (80036c4 <FreqO_ApplyPreset+0x4c>)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	62d3      	str	r3, [r2, #44]	; 0x2c
		//eNewFreqPreset = pPresetEnum;
		Freq_Preset_Encoder_Pos_t * tmp = FreqO_FindFPresetObject(pPresetEnum);
 800369e:	6878      	ldr	r0, [r7, #4]
 80036a0:	f000 f822 	bl	80036e8 <FreqO_FindFPresetObject>
 80036a4:	60b8      	str	r0, [r7, #8]
		if(tmp)
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d003      	beq.n	80036b4 <FreqO_ApplyPreset+0x3c>
		{
			pNewFreqPresetEncoderPos = tmp;
 80036ac:	4a06      	ldr	r2, [pc, #24]	; (80036c8 <FreqO_ApplyPreset+0x50>)
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	6013      	str	r3, [r2, #0]
		{
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
		}

	}
}
 80036b2:	e002      	b.n	80036ba <FreqO_ApplyPreset+0x42>
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
 80036b4:	4805      	ldr	r0, [pc, #20]	; (80036cc <FreqO_ApplyPreset+0x54>)
 80036b6:	f7fd ffd3 	bl	8001660 <DM_SetErrorDebugMsg>
}
 80036ba:	bf00      	nop
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40013400 	.word	0x40013400
 80036c8:	20000198 	.word	0x20000198
 80036cc:	0800f328 	.word	0x0800f328

080036d0 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to Freq_Preset_Encoder_Pos_t struct
 *
 */
Freq_Preset_Encoder_Pos_t * FreqO_GetFPresetObject()
{
 80036d0:	b480      	push	{r7}
 80036d2:	af00      	add	r7, sp, #0
	return pNewFreqPresetEncoderPos;
 80036d4:	4b03      	ldr	r3, [pc, #12]	; (80036e4 <FreqO_GetFPresetObject+0x14>)
 80036d6:	681b      	ldr	r3, [r3, #0]
}
 80036d8:	4618      	mov	r0, r3
 80036da:	46bd      	mov	sp, r7
 80036dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	20000198 	.word	0x20000198

080036e8 <FreqO_FindFPresetObject>:

 *	@retval pointer to Freq_Preset_Encoder_Pos_t struct
 *
 */
Freq_Preset_Encoder_Pos_t * FreqO_FindFPresetObject(eFreq_Preset pEnum)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 80036f0:	2300      	movs	r3, #0
 80036f2:	60fb      	str	r3, [r7, #12]
 80036f4:	e00e      	b.n	8003714 <FreqO_FindFPresetObject+0x2c>
	{
		if(aFreqPresetEncoderPos[i].hertz == pEnum)
 80036f6:	4a0d      	ldr	r2, [pc, #52]	; (800372c <FreqO_FindFPresetObject+0x44>)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	429a      	cmp	r2, r3
 8003702:	d104      	bne.n	800370e <FreqO_FindFPresetObject+0x26>
		{
			return &aFreqPresetEncoderPos[i];
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	00db      	lsls	r3, r3, #3
 8003708:	4a08      	ldr	r2, [pc, #32]	; (800372c <FreqO_FindFPresetObject+0x44>)
 800370a:	4413      	add	r3, r2
 800370c:	e009      	b.n	8003722 <FreqO_FindFPresetObject+0x3a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	3301      	adds	r3, #1
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	2b0d      	cmp	r3, #13
 8003718:	dded      	ble.n	80036f6 <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 800371a:	4805      	ldr	r0, [pc, #20]	; (8003730 <FreqO_FindFPresetObject+0x48>)
 800371c:	f7fd ffa0 	bl	8001660 <DM_SetErrorDebugMsg>
	return 0;
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	20000128 	.word	0x20000128
 8003730:	0800f350 	.word	0x0800f350

08003734 <FreqO_GetFreqPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FreqO_GetFreqPresetEncoderRange()
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
	return FreqPresetEncoderRange;
 8003738:	4b03      	ldr	r3, [pc, #12]	; (8003748 <FreqO_GetFreqPresetEncoderRange+0x14>)
 800373a:	781b      	ldrb	r3, [r3, #0]
}
 800373c:	4618      	mov	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	20000124 	.word	0x20000124

0800374c <FreqO_GetOutputFreq>:
 *	@param None
 *	@retval uint32_t
 *
 */
uint32_t FreqO_GetOutputFreq()
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
	return TIM8->ARR;
 8003750:	4b03      	ldr	r3, [pc, #12]	; (8003760 <FreqO_GetOutputFreq+0x14>)
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 8003754:	4618      	mov	r0, r3
 8003756:	46bd      	mov	sp, r7
 8003758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375c:	4770      	bx	lr
 800375e:	bf00      	nop
 8003760:	40013400 	.word	0x40013400

08003764 <FuncO_Init>:
#include "SignalManager.h"

uint32_t *pOriginalDataTable = sine_data_table_1300;

void FuncO_Init()
{
 8003764:	b480      	push	{r7}
 8003766:	b083      	sub	sp, #12
 8003768:	af00      	add	r7, sp, #0
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800376a:	2300      	movs	r3, #0
 800376c:	607b      	str	r3, [r7, #4]
 800376e:	e00a      	b.n	8003786 <FuncO_Init+0x22>
		aModdedDataTable[i] = sine_data_table_1300[i];
 8003770:	4a09      	ldr	r2, [pc, #36]	; (8003798 <FuncO_Init+0x34>)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003778:	4908      	ldr	r1, [pc, #32]	; (800379c <FuncO_Init+0x38>)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	3301      	adds	r3, #1
 8003784:	607b      	str	r3, [r7, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b77      	cmp	r3, #119	; 0x77
 800378a:	ddf1      	ble.n	8003770 <FuncO_Init+0xc>
}
 800378c:	bf00      	nop
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr
 8003798:	20001510 	.word	0x20001510
 800379c:	20001ed4 	.word	0x20001ed4

080037a0 <FuncO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void FuncO_ModifyOutput(uint16_t pEncoderValue)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b082      	sub	sp, #8
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	4603      	mov	r3, r0
 80037a8:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 80037aa:	88fb      	ldrh	r3, [r7, #6]
 80037ac:	2b17      	cmp	r3, #23
 80037ae:	d84b      	bhi.n	8003848 <FuncO_ModifyOutput+0xa8>
 80037b0:	a201      	add	r2, pc, #4	; (adr r2, 80037b8 <FuncO_ModifyOutput+0x18>)
 80037b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b6:	bf00      	nop
 80037b8:	08003819 	.word	0x08003819
 80037bc:	08003819 	.word	0x08003819
 80037c0:	08003819 	.word	0x08003819
 80037c4:	08003821 	.word	0x08003821
 80037c8:	08003821 	.word	0x08003821
 80037cc:	08003821 	.word	0x08003821
 80037d0:	08003821 	.word	0x08003821
 80037d4:	08003829 	.word	0x08003829
 80037d8:	08003829 	.word	0x08003829
 80037dc:	08003829 	.word	0x08003829
 80037e0:	08003829 	.word	0x08003829
 80037e4:	08003831 	.word	0x08003831
 80037e8:	08003831 	.word	0x08003831
 80037ec:	08003831 	.word	0x08003831
 80037f0:	08003831 	.word	0x08003831
 80037f4:	08003839 	.word	0x08003839
 80037f8:	08003839 	.word	0x08003839
 80037fc:	08003839 	.word	0x08003839
 8003800:	08003839 	.word	0x08003839
 8003804:	08003841 	.word	0x08003841
 8003808:	08003841 	.word	0x08003841
 800380c:	08003841 	.word	0x08003841
 8003810:	08003841 	.word	0x08003841
 8003814:	08003841 	.word	0x08003841
	{
		case 0:
		case 1:
		case 2:

			FuncO_ApplyPreset_Fast(SINE_FUNC_MODE);
 8003818:	2000      	movs	r0, #0
 800381a:	f000 f819 	bl	8003850 <FuncO_ApplyPreset_Fast>
			break;
 800381e:	e013      	b.n	8003848 <FuncO_ModifyOutput+0xa8>
		case 3:
		case 4:
		case 5:
		case 6:

			FuncO_ApplyPreset_Fast(SQUARE_FUNC_MODE);
 8003820:	2001      	movs	r0, #1
 8003822:	f000 f815 	bl	8003850 <FuncO_ApplyPreset_Fast>

			break;
 8003826:	e00f      	b.n	8003848 <FuncO_ModifyOutput+0xa8>
		case 7:
		case 8:
		case 9:
		case 10:

			FuncO_ApplyPreset_Fast(SAW_FUNC_MODE);
 8003828:	2002      	movs	r0, #2
 800382a:	f000 f811 	bl	8003850 <FuncO_ApplyPreset_Fast>
			break;
 800382e:	e00b      	b.n	8003848 <FuncO_ModifyOutput+0xa8>
		case 11:
		case 12:
		case 13:
		case 14:

			FuncO_ApplyPreset_Fast(REV_SAW_FUNC_MODE);
 8003830:	2003      	movs	r0, #3
 8003832:	f000 f80d 	bl	8003850 <FuncO_ApplyPreset_Fast>
			break;
 8003836:	e007      	b.n	8003848 <FuncO_ModifyOutput+0xa8>
		case 15:
		case 16:
		case 17:
		case 18:

			FuncO_ApplyPreset_Fast(TRIANGLE_FUNC_MODE);
 8003838:	2004      	movs	r0, #4
 800383a:	f000 f809 	bl	8003850 <FuncO_ApplyPreset_Fast>
			break;
 800383e:	e003      	b.n	8003848 <FuncO_ModifyOutput+0xa8>
		case 20:
		case 21:
		case 22:
		case 23:

			FuncO_ApplyPreset_Fast(IMPULSE_FUNC_MODE);
 8003840:	2005      	movs	r0, #5
 8003842:	f000 f805 	bl	8003850 <FuncO_ApplyPreset_Fast>
			break;
 8003846:	bf00      	nop
	}
}
 8003848:	bf00      	nop
 800384a:	3708      	adds	r7, #8
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}

08003850 <FuncO_ApplyPreset_Fast>:

 *	@retval None
 *
 */
void FuncO_ApplyPreset_Fast(eOutput_mode pPresetEnum)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af02      	add	r7, sp, #8
 8003856:	4603      	mov	r3, r0
 8003858:	71fb      	strb	r3, [r7, #7]

	switch(pPresetEnum)
 800385a:	79fb      	ldrb	r3, [r7, #7]
 800385c:	2b05      	cmp	r3, #5
 800385e:	f200 80ab 	bhi.w	80039b8 <FuncO_ApplyPreset_Fast+0x168>
 8003862:	a201      	add	r2, pc, #4	; (adr r2, 8003868 <FuncO_ApplyPreset_Fast+0x18>)
 8003864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003868:	08003881 	.word	0x08003881
 800386c:	080038b5 	.word	0x080038b5
 8003870:	080038e9 	.word	0x080038e9
 8003874:	0800391d 	.word	0x0800391d
 8003878:	08003951 	.word	0x08003951
 800387c:	08003985 	.word	0x08003985
	{
		case SINE_FUNC_MODE:

			pOriginalDataTable = sine_data_table_1300;
 8003880:	4b4f      	ldr	r3, [pc, #316]	; (80039c0 <FuncO_ApplyPreset_Fast+0x170>)
 8003882:	4a50      	ldr	r2, [pc, #320]	; (80039c4 <FuncO_ApplyPreset_Fast+0x174>)
 8003884:	601a      	str	r2, [r3, #0]

			VPP_ApplyPreset_Fast(VPP_GetVppPresetObject()->Vpp_literal);
 8003886:	f000 ff33 	bl	80046f0 <VPP_GetVppPresetObject>
 800388a:	4603      	mov	r3, r0
 800388c:	781b      	ldrb	r3, [r3, #0]
 800388e:	4618      	mov	r0, r3
 8003890:	f000 f9fc 	bl	8003c8c <VPP_ApplyPreset_Fast>

			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[0];
 8003894:	4b4c      	ldr	r3, [pc, #304]	; (80039c8 <FuncO_ApplyPreset_Fast+0x178>)
 8003896:	4a4d      	ldr	r2, [pc, #308]	; (80039cc <FuncO_ApplyPreset_Fast+0x17c>)
 8003898:	601a      	str	r2, [r3, #0]

			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800389a:	2100      	movs	r1, #0
 800389c:	484c      	ldr	r0, [pc, #304]	; (80039d0 <FuncO_ApplyPreset_Fast+0x180>)
 800389e:	f004 fb15 	bl	8007ecc <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)aModdedDataTable, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80038a2:	2300      	movs	r3, #0
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	2378      	movs	r3, #120	; 0x78
 80038a8:	4a4a      	ldr	r2, [pc, #296]	; (80039d4 <FuncO_ApplyPreset_Fast+0x184>)
 80038aa:	2100      	movs	r1, #0
 80038ac:	4848      	ldr	r0, [pc, #288]	; (80039d0 <FuncO_ApplyPreset_Fast+0x180>)
 80038ae:	f004 fa4b 	bl	8007d48 <HAL_DAC_Start_DMA>
			break;
 80038b2:	e081      	b.n	80039b8 <FuncO_ApplyPreset_Fast+0x168>

		case SQUARE_FUNC_MODE:

			pOriginalDataTable = square_data_table_1300;
 80038b4:	4b42      	ldr	r3, [pc, #264]	; (80039c0 <FuncO_ApplyPreset_Fast+0x170>)
 80038b6:	4a48      	ldr	r2, [pc, #288]	; (80039d8 <FuncO_ApplyPreset_Fast+0x188>)
 80038b8:	601a      	str	r2, [r3, #0]

			VPP_ApplyPreset_Fast(VPP_GetVppPresetObject()->Vpp_literal);
 80038ba:	f000 ff19 	bl	80046f0 <VPP_GetVppPresetObject>
 80038be:	4603      	mov	r3, r0
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f000 f9e2 	bl	8003c8c <VPP_ApplyPreset_Fast>

			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[1];
 80038c8:	4b3f      	ldr	r3, [pc, #252]	; (80039c8 <FuncO_ApplyPreset_Fast+0x178>)
 80038ca:	4a44      	ldr	r2, [pc, #272]	; (80039dc <FuncO_ApplyPreset_Fast+0x18c>)
 80038cc:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80038ce:	2100      	movs	r1, #0
 80038d0:	483f      	ldr	r0, [pc, #252]	; (80039d0 <FuncO_ApplyPreset_Fast+0x180>)
 80038d2:	f004 fafb 	bl	8007ecc <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)aModdedDataTable, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
 80038d6:	2300      	movs	r3, #0
 80038d8:	9300      	str	r3, [sp, #0]
 80038da:	2378      	movs	r3, #120	; 0x78
 80038dc:	4a3d      	ldr	r2, [pc, #244]	; (80039d4 <FuncO_ApplyPreset_Fast+0x184>)
 80038de:	2100      	movs	r1, #0
 80038e0:	483b      	ldr	r0, [pc, #236]	; (80039d0 <FuncO_ApplyPreset_Fast+0x180>)
 80038e2:	f004 fa31 	bl	8007d48 <HAL_DAC_Start_DMA>
			break;
 80038e6:	e067      	b.n	80039b8 <FuncO_ApplyPreset_Fast+0x168>

		case SAW_FUNC_MODE:

			pOriginalDataTable = saw_data_table_1300;
 80038e8:	4b35      	ldr	r3, [pc, #212]	; (80039c0 <FuncO_ApplyPreset_Fast+0x170>)
 80038ea:	4a3d      	ldr	r2, [pc, #244]	; (80039e0 <FuncO_ApplyPreset_Fast+0x190>)
 80038ec:	601a      	str	r2, [r3, #0]

			VPP_ApplyPreset_Fast(VPP_GetVppPresetObject()->Vpp_literal);
 80038ee:	f000 feff 	bl	80046f0 <VPP_GetVppPresetObject>
 80038f2:	4603      	mov	r3, r0
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	4618      	mov	r0, r3
 80038f8:	f000 f9c8 	bl	8003c8c <VPP_ApplyPreset_Fast>

			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[2];
 80038fc:	4b32      	ldr	r3, [pc, #200]	; (80039c8 <FuncO_ApplyPreset_Fast+0x178>)
 80038fe:	4a39      	ldr	r2, [pc, #228]	; (80039e4 <FuncO_ApplyPreset_Fast+0x194>)
 8003900:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8003902:	2100      	movs	r1, #0
 8003904:	4832      	ldr	r0, [pc, #200]	; (80039d0 <FuncO_ApplyPreset_Fast+0x180>)
 8003906:	f004 fae1 	bl	8007ecc <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)aModdedDataTable, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
 800390a:	2300      	movs	r3, #0
 800390c:	9300      	str	r3, [sp, #0]
 800390e:	2378      	movs	r3, #120	; 0x78
 8003910:	4a30      	ldr	r2, [pc, #192]	; (80039d4 <FuncO_ApplyPreset_Fast+0x184>)
 8003912:	2100      	movs	r1, #0
 8003914:	482e      	ldr	r0, [pc, #184]	; (80039d0 <FuncO_ApplyPreset_Fast+0x180>)
 8003916:	f004 fa17 	bl	8007d48 <HAL_DAC_Start_DMA>
			break;
 800391a:	e04d      	b.n	80039b8 <FuncO_ApplyPreset_Fast+0x168>

		case REV_SAW_FUNC_MODE:

			pOriginalDataTable = saw_rev_data_table_1300;
 800391c:	4b28      	ldr	r3, [pc, #160]	; (80039c0 <FuncO_ApplyPreset_Fast+0x170>)
 800391e:	4a32      	ldr	r2, [pc, #200]	; (80039e8 <FuncO_ApplyPreset_Fast+0x198>)
 8003920:	601a      	str	r2, [r3, #0]

			VPP_ApplyPreset_Fast(VPP_GetVppPresetObject()->Vpp_literal);
 8003922:	f000 fee5 	bl	80046f0 <VPP_GetVppPresetObject>
 8003926:	4603      	mov	r3, r0
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	4618      	mov	r0, r3
 800392c:	f000 f9ae 	bl	8003c8c <VPP_ApplyPreset_Fast>

			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[3];
 8003930:	4b25      	ldr	r3, [pc, #148]	; (80039c8 <FuncO_ApplyPreset_Fast+0x178>)
 8003932:	4a2e      	ldr	r2, [pc, #184]	; (80039ec <FuncO_ApplyPreset_Fast+0x19c>)
 8003934:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8003936:	2100      	movs	r1, #0
 8003938:	4825      	ldr	r0, [pc, #148]	; (80039d0 <FuncO_ApplyPreset_Fast+0x180>)
 800393a:	f004 fac7 	bl	8007ecc <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)aModdedDataTable, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
 800393e:	2300      	movs	r3, #0
 8003940:	9300      	str	r3, [sp, #0]
 8003942:	2378      	movs	r3, #120	; 0x78
 8003944:	4a23      	ldr	r2, [pc, #140]	; (80039d4 <FuncO_ApplyPreset_Fast+0x184>)
 8003946:	2100      	movs	r1, #0
 8003948:	4821      	ldr	r0, [pc, #132]	; (80039d0 <FuncO_ApplyPreset_Fast+0x180>)
 800394a:	f004 f9fd 	bl	8007d48 <HAL_DAC_Start_DMA>
			break;
 800394e:	e033      	b.n	80039b8 <FuncO_ApplyPreset_Fast+0x168>

		case TRIANGLE_FUNC_MODE:

			pOriginalDataTable = triangle_data_table_1300;
 8003950:	4b1b      	ldr	r3, [pc, #108]	; (80039c0 <FuncO_ApplyPreset_Fast+0x170>)
 8003952:	4a27      	ldr	r2, [pc, #156]	; (80039f0 <FuncO_ApplyPreset_Fast+0x1a0>)
 8003954:	601a      	str	r2, [r3, #0]

			VPP_ApplyPreset_Fast(VPP_GetVppPresetObject()->Vpp_literal);
 8003956:	f000 fecb 	bl	80046f0 <VPP_GetVppPresetObject>
 800395a:	4603      	mov	r3, r0
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f000 f994 	bl	8003c8c <VPP_ApplyPreset_Fast>

			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[4];
 8003964:	4b18      	ldr	r3, [pc, #96]	; (80039c8 <FuncO_ApplyPreset_Fast+0x178>)
 8003966:	4a23      	ldr	r2, [pc, #140]	; (80039f4 <FuncO_ApplyPreset_Fast+0x1a4>)
 8003968:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800396a:	2100      	movs	r1, #0
 800396c:	4818      	ldr	r0, [pc, #96]	; (80039d0 <FuncO_ApplyPreset_Fast+0x180>)
 800396e:	f004 faad 	bl	8007ecc <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)aModdedDataTable, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8003972:	2300      	movs	r3, #0
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	2378      	movs	r3, #120	; 0x78
 8003978:	4a16      	ldr	r2, [pc, #88]	; (80039d4 <FuncO_ApplyPreset_Fast+0x184>)
 800397a:	2100      	movs	r1, #0
 800397c:	4814      	ldr	r0, [pc, #80]	; (80039d0 <FuncO_ApplyPreset_Fast+0x180>)
 800397e:	f004 f9e3 	bl	8007d48 <HAL_DAC_Start_DMA>
			break;
 8003982:	e019      	b.n	80039b8 <FuncO_ApplyPreset_Fast+0x168>

		case IMPULSE_FUNC_MODE:

			pOriginalDataTable = unitimpulse_data_table_1300;
 8003984:	4b0e      	ldr	r3, [pc, #56]	; (80039c0 <FuncO_ApplyPreset_Fast+0x170>)
 8003986:	4a1c      	ldr	r2, [pc, #112]	; (80039f8 <FuncO_ApplyPreset_Fast+0x1a8>)
 8003988:	601a      	str	r2, [r3, #0]

			VPP_ApplyPreset_Fast(VPP_GetVppPresetObject()->Vpp_literal);
 800398a:	f000 feb1 	bl	80046f0 <VPP_GetVppPresetObject>
 800398e:	4603      	mov	r3, r0
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f000 f97a 	bl	8003c8c <VPP_ApplyPreset_Fast>

			pNewFuncPresetEncoderPos = &aFuncPresetEncoderPos[5];
 8003998:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <FuncO_ApplyPreset_Fast+0x178>)
 800399a:	4a18      	ldr	r2, [pc, #96]	; (80039fc <FuncO_ApplyPreset_Fast+0x1ac>)
 800399c:	601a      	str	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 800399e:	2100      	movs	r1, #0
 80039a0:	480b      	ldr	r0, [pc, #44]	; (80039d0 <FuncO_ApplyPreset_Fast+0x180>)
 80039a2:	f004 fa93 	bl	8007ecc <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)aModdedDataTable, UNITIMPULSE_DATA_SIZE,  DAC_ALIGN_12B_R);
 80039a6:	2300      	movs	r3, #0
 80039a8:	9300      	str	r3, [sp, #0]
 80039aa:	2378      	movs	r3, #120	; 0x78
 80039ac:	4a09      	ldr	r2, [pc, #36]	; (80039d4 <FuncO_ApplyPreset_Fast+0x184>)
 80039ae:	2100      	movs	r1, #0
 80039b0:	4807      	ldr	r0, [pc, #28]	; (80039d0 <FuncO_ApplyPreset_Fast+0x180>)
 80039b2:	f004 f9c9 	bl	8007d48 <HAL_DAC_Start_DMA>
			break;
 80039b6:	bf00      	nop
	//
	}



}
 80039b8:	bf00      	nop
 80039ba:	3708      	adds	r7, #8
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	200001b0 	.word	0x200001b0
 80039c4:	20001510 	.word	0x20001510
 80039c8:	200001ac 	.word	0x200001ac
 80039cc:	200001a0 	.word	0x200001a0
 80039d0:	20002398 	.word	0x20002398
 80039d4:	20001ed4 	.word	0x20001ed4
 80039d8:	200016f0 	.word	0x200016f0
 80039dc:	200001a2 	.word	0x200001a2
 80039e0:	20001150 	.word	0x20001150
 80039e4:	200001a4 	.word	0x200001a4
 80039e8:	20001330 	.word	0x20001330
 80039ec:	200001a6 	.word	0x200001a6
 80039f0:	200018d0 	.word	0x200018d0
 80039f4:	200001a8 	.word	0x200001a8
 80039f8:	20001ab0 	.word	0x20001ab0
 80039fc:	200001aa 	.word	0x200001aa

08003a00 <FuncO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to Func_Preset_Encoder_Pos_t struct
 *
 */
Func_Preset_Encoder_Pos_t * FuncO_GetFPresetObject()
{
 8003a00:	b480      	push	{r7}
 8003a02:	af00      	add	r7, sp, #0
	return pNewFuncPresetEncoderPos;
 8003a04:	4b03      	ldr	r3, [pc, #12]	; (8003a14 <FuncO_GetFPresetObject+0x14>)
 8003a06:	681b      	ldr	r3, [r3, #0]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr
 8003a12:	bf00      	nop
 8003a14:	200001ac 	.word	0x200001ac

08003a18 <FuncO_GetFuncPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FuncO_GetFuncPresetEncoderRange()
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
	return FuncPresetEncoderRange;
 8003a1c:	4b03      	ldr	r3, [pc, #12]	; (8003a2c <FuncO_GetFuncPresetEncoderRange+0x14>)
 8003a1e:	781b      	ldrb	r3, [r3, #0]
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
 8003a2a:	bf00      	nop
 8003a2c:	2000019c 	.word	0x2000019c

08003a30 <GO_ApplyPreset_Fast>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPreset_Fast(eOutput_gain pPresetEnum)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	4603      	mov	r3, r0
 8003a38:	71fb      	strb	r3, [r7, #7]



	switch(pPresetEnum)
 8003a3a:	79fb      	ldrb	r3, [r7, #7]
 8003a3c:	2b07      	cmp	r3, #7
 8003a3e:	f200 80ab 	bhi.w	8003b98 <GO_ApplyPreset_Fast+0x168>
 8003a42:	a201      	add	r2, pc, #4	; (adr r2, 8003a48 <GO_ApplyPreset_Fast+0x18>)
 8003a44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a48:	08003a69 	.word	0x08003a69
 8003a4c:	08003a8f 	.word	0x08003a8f
 8003a50:	08003ab5 	.word	0x08003ab5
 8003a54:	08003adb 	.word	0x08003adb
 8003a58:	08003b01 	.word	0x08003b01
 8003a5c:	08003b27 	.word	0x08003b27
 8003a60:	08003b4d 	.word	0x08003b4d
 8003a64:	08003b73 	.word	0x08003b73
	{
		case ZERO_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[0];
 8003a68:	4b4d      	ldr	r3, [pc, #308]	; (8003ba0 <GO_ApplyPreset_Fast+0x170>)
 8003a6a:	4a4e      	ldr	r2, [pc, #312]	; (8003ba4 <GO_ApplyPreset_Fast+0x174>)
 8003a6c:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8003a6e:	2200      	movs	r2, #0
 8003a70:	2101      	movs	r1, #1
 8003a72:	484d      	ldr	r0, [pc, #308]	; (8003ba8 <GO_ApplyPreset_Fast+0x178>)
 8003a74:	f005 f956 	bl	8008d24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8003a78:	2200      	movs	r2, #0
 8003a7a:	2120      	movs	r1, #32
 8003a7c:	484b      	ldr	r0, [pc, #300]	; (8003bac <GO_ApplyPreset_Fast+0x17c>)
 8003a7e:	f005 f951 	bl	8008d24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8003a82:	2200      	movs	r2, #0
 8003a84:	2110      	movs	r1, #16
 8003a86:	4849      	ldr	r0, [pc, #292]	; (8003bac <GO_ApplyPreset_Fast+0x17c>)
 8003a88:	f005 f94c 	bl	8008d24 <HAL_GPIO_WritePin>
			break;
 8003a8c:	e084      	b.n	8003b98 <GO_ApplyPreset_Fast+0x168>

		case ONE_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[1];
 8003a8e:	4b44      	ldr	r3, [pc, #272]	; (8003ba0 <GO_ApplyPreset_Fast+0x170>)
 8003a90:	4a47      	ldr	r2, [pc, #284]	; (8003bb0 <GO_ApplyPreset_Fast+0x180>)
 8003a92:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8003a94:	2201      	movs	r2, #1
 8003a96:	2101      	movs	r1, #1
 8003a98:	4843      	ldr	r0, [pc, #268]	; (8003ba8 <GO_ApplyPreset_Fast+0x178>)
 8003a9a:	f005 f943 	bl	8008d24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	2120      	movs	r1, #32
 8003aa2:	4842      	ldr	r0, [pc, #264]	; (8003bac <GO_ApplyPreset_Fast+0x17c>)
 8003aa4:	f005 f93e 	bl	8008d24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	2110      	movs	r1, #16
 8003aac:	483f      	ldr	r0, [pc, #252]	; (8003bac <GO_ApplyPreset_Fast+0x17c>)
 8003aae:	f005 f939 	bl	8008d24 <HAL_GPIO_WritePin>
			break;
 8003ab2:	e071      	b.n	8003b98 <GO_ApplyPreset_Fast+0x168>

		case TWO_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[2];
 8003ab4:	4b3a      	ldr	r3, [pc, #232]	; (8003ba0 <GO_ApplyPreset_Fast+0x170>)
 8003ab6:	4a3f      	ldr	r2, [pc, #252]	; (8003bb4 <GO_ApplyPreset_Fast+0x184>)
 8003ab8:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8003aba:	2200      	movs	r2, #0
 8003abc:	2101      	movs	r1, #1
 8003abe:	483a      	ldr	r0, [pc, #232]	; (8003ba8 <GO_ApplyPreset_Fast+0x178>)
 8003ac0:	f005 f930 	bl	8008d24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8003ac4:	2201      	movs	r2, #1
 8003ac6:	2120      	movs	r1, #32
 8003ac8:	4838      	ldr	r0, [pc, #224]	; (8003bac <GO_ApplyPreset_Fast+0x17c>)
 8003aca:	f005 f92b 	bl	8008d24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8003ace:	2200      	movs	r2, #0
 8003ad0:	2110      	movs	r1, #16
 8003ad2:	4836      	ldr	r0, [pc, #216]	; (8003bac <GO_ApplyPreset_Fast+0x17c>)
 8003ad4:	f005 f926 	bl	8008d24 <HAL_GPIO_WritePin>
			break;
 8003ad8:	e05e      	b.n	8003b98 <GO_ApplyPreset_Fast+0x168>

		case THREE_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[3];
 8003ada:	4b31      	ldr	r3, [pc, #196]	; (8003ba0 <GO_ApplyPreset_Fast+0x170>)
 8003adc:	4a36      	ldr	r2, [pc, #216]	; (8003bb8 <GO_ApplyPreset_Fast+0x188>)
 8003ade:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8003ae0:	2201      	movs	r2, #1
 8003ae2:	2101      	movs	r1, #1
 8003ae4:	4830      	ldr	r0, [pc, #192]	; (8003ba8 <GO_ApplyPreset_Fast+0x178>)
 8003ae6:	f005 f91d 	bl	8008d24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8003aea:	2201      	movs	r2, #1
 8003aec:	2120      	movs	r1, #32
 8003aee:	482f      	ldr	r0, [pc, #188]	; (8003bac <GO_ApplyPreset_Fast+0x17c>)
 8003af0:	f005 f918 	bl	8008d24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8003af4:	2200      	movs	r2, #0
 8003af6:	2110      	movs	r1, #16
 8003af8:	482c      	ldr	r0, [pc, #176]	; (8003bac <GO_ApplyPreset_Fast+0x17c>)
 8003afa:	f005 f913 	bl	8008d24 <HAL_GPIO_WritePin>
			break;
 8003afe:	e04b      	b.n	8003b98 <GO_ApplyPreset_Fast+0x168>

		case FOUR_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[4];
 8003b00:	4b27      	ldr	r3, [pc, #156]	; (8003ba0 <GO_ApplyPreset_Fast+0x170>)
 8003b02:	4a2e      	ldr	r2, [pc, #184]	; (8003bbc <GO_ApplyPreset_Fast+0x18c>)
 8003b04:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8003b06:	2200      	movs	r2, #0
 8003b08:	2101      	movs	r1, #1
 8003b0a:	4827      	ldr	r0, [pc, #156]	; (8003ba8 <GO_ApplyPreset_Fast+0x178>)
 8003b0c:	f005 f90a 	bl	8008d24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8003b10:	2200      	movs	r2, #0
 8003b12:	2120      	movs	r1, #32
 8003b14:	4825      	ldr	r0, [pc, #148]	; (8003bac <GO_ApplyPreset_Fast+0x17c>)
 8003b16:	f005 f905 	bl	8008d24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	2110      	movs	r1, #16
 8003b1e:	4823      	ldr	r0, [pc, #140]	; (8003bac <GO_ApplyPreset_Fast+0x17c>)
 8003b20:	f005 f900 	bl	8008d24 <HAL_GPIO_WritePin>
			break;
 8003b24:	e038      	b.n	8003b98 <GO_ApplyPreset_Fast+0x168>

		case FIVE_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[5];
 8003b26:	4b1e      	ldr	r3, [pc, #120]	; (8003ba0 <GO_ApplyPreset_Fast+0x170>)
 8003b28:	4a25      	ldr	r2, [pc, #148]	; (8003bc0 <GO_ApplyPreset_Fast+0x190>)
 8003b2a:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	2101      	movs	r1, #1
 8003b30:	481d      	ldr	r0, [pc, #116]	; (8003ba8 <GO_ApplyPreset_Fast+0x178>)
 8003b32:	f005 f8f7 	bl	8008d24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8003b36:	2200      	movs	r2, #0
 8003b38:	2120      	movs	r1, #32
 8003b3a:	481c      	ldr	r0, [pc, #112]	; (8003bac <GO_ApplyPreset_Fast+0x17c>)
 8003b3c:	f005 f8f2 	bl	8008d24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8003b40:	2201      	movs	r2, #1
 8003b42:	2110      	movs	r1, #16
 8003b44:	4819      	ldr	r0, [pc, #100]	; (8003bac <GO_ApplyPreset_Fast+0x17c>)
 8003b46:	f005 f8ed 	bl	8008d24 <HAL_GPIO_WritePin>
			break;
 8003b4a:	e025      	b.n	8003b98 <GO_ApplyPreset_Fast+0x168>

		case SIX_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[6];
 8003b4c:	4b14      	ldr	r3, [pc, #80]	; (8003ba0 <GO_ApplyPreset_Fast+0x170>)
 8003b4e:	4a1d      	ldr	r2, [pc, #116]	; (8003bc4 <GO_ApplyPreset_Fast+0x194>)
 8003b50:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8003b52:	2200      	movs	r2, #0
 8003b54:	2101      	movs	r1, #1
 8003b56:	4814      	ldr	r0, [pc, #80]	; (8003ba8 <GO_ApplyPreset_Fast+0x178>)
 8003b58:	f005 f8e4 	bl	8008d24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	2120      	movs	r1, #32
 8003b60:	4812      	ldr	r0, [pc, #72]	; (8003bac <GO_ApplyPreset_Fast+0x17c>)
 8003b62:	f005 f8df 	bl	8008d24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8003b66:	2201      	movs	r2, #1
 8003b68:	2110      	movs	r1, #16
 8003b6a:	4810      	ldr	r0, [pc, #64]	; (8003bac <GO_ApplyPreset_Fast+0x17c>)
 8003b6c:	f005 f8da 	bl	8008d24 <HAL_GPIO_WritePin>
			break;
 8003b70:	e012      	b.n	8003b98 <GO_ApplyPreset_Fast+0x168>

		case SEVEN_GAIN:
			pNewGainPresetEncoderPos = &aGainPresetEncoderPos[7];
 8003b72:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <GO_ApplyPreset_Fast+0x170>)
 8003b74:	4a14      	ldr	r2, [pc, #80]	; (8003bc8 <GO_ApplyPreset_Fast+0x198>)
 8003b76:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8003b78:	2201      	movs	r2, #1
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	480a      	ldr	r0, [pc, #40]	; (8003ba8 <GO_ApplyPreset_Fast+0x178>)
 8003b7e:	f005 f8d1 	bl	8008d24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8003b82:	2201      	movs	r2, #1
 8003b84:	2120      	movs	r1, #32
 8003b86:	4809      	ldr	r0, [pc, #36]	; (8003bac <GO_ApplyPreset_Fast+0x17c>)
 8003b88:	f005 f8cc 	bl	8008d24 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	2110      	movs	r1, #16
 8003b90:	4806      	ldr	r0, [pc, #24]	; (8003bac <GO_ApplyPreset_Fast+0x17c>)
 8003b92:	f005 f8c7 	bl	8008d24 <HAL_GPIO_WritePin>
			break;
 8003b96:	bf00      	nop
	}
}
 8003b98:	bf00      	nop
 8003b9a:	3708      	adds	r7, #8
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	200001cc 	.word	0x200001cc
 8003ba4:	200001b4 	.word	0x200001b4
 8003ba8:	48000400 	.word	0x48000400
 8003bac:	48000800 	.word	0x48000800
 8003bb0:	200001b7 	.word	0x200001b7
 8003bb4:	200001ba 	.word	0x200001ba
 8003bb8:	200001bd 	.word	0x200001bd
 8003bbc:	200001c0 	.word	0x200001c0
 8003bc0:	200001c3 	.word	0x200001c3
 8003bc4:	200001c6 	.word	0x200001c6
 8003bc8:	200001c9 	.word	0x200001c9

08003bcc <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	71fb      	strb	r3, [r7, #7]
	if(direction)
 8003bd6:	79fb      	ldrb	r3, [r7, #7]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d008      	beq.n	8003bee <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 8003bdc:	4b08      	ldr	r3, [pc, #32]	; (8003c00 <SM_GetEncoderValue+0x34>)
 8003bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be0:	b29a      	uxth	r2, r3
 8003be2:	4b07      	ldr	r3, [pc, #28]	; (8003c00 <SM_GetEncoderValue+0x34>)
 8003be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	e002      	b.n	8003bf4 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 8003bee:	4b04      	ldr	r3, [pc, #16]	; (8003c00 <SM_GetEncoderValue+0x34>)
 8003bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf2:	b29b      	uxth	r3, r3
	}
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	370c      	adds	r7, #12
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	40012c00 	.word	0x40012c00

08003c04 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
	volatile float tim8_psc;
	volatile float tim8_arr;

	// safe-guard against divide by zero
	(TIM8->PSC == 0) ? (tim8_psc = 1) : (tim8_psc = TIM8->PSC);
 8003c0a:	4b1d      	ldr	r3, [pc, #116]	; (8003c80 <SM_GetOutputInHertz+0x7c>)
 8003c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d103      	bne.n	8003c1a <SM_GetOutputInHertz+0x16>
 8003c12:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003c16:	60bb      	str	r3, [r7, #8]
 8003c18:	e007      	b.n	8003c2a <SM_GetOutputInHertz+0x26>
 8003c1a:	4b19      	ldr	r3, [pc, #100]	; (8003c80 <SM_GetOutputInHertz+0x7c>)
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1e:	ee07 3a90 	vmov	s15, r3
 8003c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c26:	edc7 7a02 	vstr	s15, [r7, #8]
	(TIM8->ARR == 0) ? (tim8_arr = 1) : (tim8_arr = TIM8->ARR);
 8003c2a:	4b15      	ldr	r3, [pc, #84]	; (8003c80 <SM_GetOutputInHertz+0x7c>)
 8003c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d103      	bne.n	8003c3a <SM_GetOutputInHertz+0x36>
 8003c32:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003c36:	607b      	str	r3, [r7, #4]
 8003c38:	e007      	b.n	8003c4a <SM_GetOutputInHertz+0x46>
 8003c3a:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <SM_GetOutputInHertz+0x7c>)
 8003c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3e:	ee07 3a90 	vmov	s15, r3
 8003c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c46:	edc7 7a01 	vstr	s15, [r7, #4]

	float tim8_freq = SM_MCLK / (tim8_psc * tim8_arr);
 8003c4a:	ed97 7a02 	vldr	s14, [r7, #8]
 8003c4e:	edd7 7a01 	vldr	s15, [r7, #4]
 8003c52:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c56:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8003c84 <SM_GetOutputInHertz+0x80>
 8003c5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c5e:	edc7 7a03 	vstr	s15, [r7, #12]


	return tim8_freq / SM_FSAMP;
 8003c62:	edd7 7a03 	vldr	s15, [r7, #12]
 8003c66:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8003c88 <SM_GetOutputInHertz+0x84>
 8003c6a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8003c6e:	eef0 7a66 	vmov.f32	s15, s13
}
 8003c72:	eeb0 0a67 	vmov.f32	s0, s15
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	40013400 	.word	0x40013400
 8003c84:	4d2037a0 	.word	0x4d2037a0
 8003c88:	42f00000 	.word	0x42f00000

08003c8c <VPP_ApplyPreset_Fast>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyPreset_Fast(eVppPreset_t pPresetEnum)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	4603      	mov	r3, r0
 8003c94:	71fb      	strb	r3, [r7, #7]
    pVppEncoderPreset = &aVppEncoderPresets[pPresetEnum];
 8003c96:	79fa      	ldrb	r2, [r7, #7]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	1a9b      	subs	r3, r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4a0f      	ldr	r2, [pc, #60]	; (8003ce0 <VPP_ApplyPreset_Fast+0x54>)
 8003ca2:	4413      	add	r3, r2
 8003ca4:	4a0f      	ldr	r2, [pc, #60]	; (8003ce4 <VPP_ApplyPreset_Fast+0x58>)
 8003ca6:	6013      	str	r3, [r2, #0]
    //GO_ApplyPreset_Fast((ONE_GAIN));
    GO_ApplyPreset_Fast(pVppEncoderPreset->gain_preset);
 8003ca8:	4b0e      	ldr	r3, [pc, #56]	; (8003ce4 <VPP_ApplyPreset_Fast+0x58>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	7a1b      	ldrb	r3, [r3, #8]
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f7ff febe 	bl	8003a30 <GO_ApplyPreset_Fast>
    _ProcessDataTable(pVppEncoderPreset->neg_gain_coeff, pVppEncoderPreset->vpp_offset , pVppEncoderPreset->epos);
 8003cb4:	4b0b      	ldr	r3, [pc, #44]	; (8003ce4 <VPP_ApplyPreset_Fast+0x58>)
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	edd3 7a04 	vldr	s15, [r3, #16]
 8003cbc:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <VPP_ApplyPreset_Fast+0x58>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	ed93 7a05 	vldr	s14, [r3, #20]
 8003cc4:	4b07      	ldr	r3, [pc, #28]	; (8003ce4 <VPP_ApplyPreset_Fast+0x58>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	8b1b      	ldrh	r3, [r3, #24]
 8003cca:	4618      	mov	r0, r3
 8003ccc:	eef0 0a47 	vmov.f32	s1, s14
 8003cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8003cd4:	f000 f808 	bl	8003ce8 <_ProcessDataTable>
}
 8003cd8:	bf00      	nop
 8003cda:	3708      	adds	r7, #8
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	bd80      	pop	{r7, pc}
 8003ce0:	200001d0 	.word	0x200001d0
 8003ce4:	20000c34 	.word	0x20000c34

08003ce8 <_ProcessDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessDataTable(float _neg_gain_coeff, float vpp_offset, uint16_t _encoder_value)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b089      	sub	sp, #36	; 0x24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	ed87 0a03 	vstr	s0, [r7, #12]
 8003cf2:	edc7 0a02 	vstr	s1, [r7, #8]
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	80fb      	strh	r3, [r7, #6]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	61fb      	str	r3, [r7, #28]
 8003cfe:	e00c      	b.n	8003d1a <_ProcessDataTable+0x32>
	{
		tmpDataTable[i] = pOriginalDataTable[i];
 8003d00:	4b35      	ldr	r3, [pc, #212]	; (8003dd8 <_ProcessDataTable+0xf0>)
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	69fb      	ldr	r3, [r7, #28]
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	4933      	ldr	r1, [pc, #204]	; (8003ddc <_ProcessDataTable+0xf4>)
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	3301      	adds	r3, #1
 8003d18:	61fb      	str	r3, [r7, #28]
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	2b77      	cmp	r3, #119	; 0x77
 8003d1e:	ddef      	ble.n	8003d00 <_ProcessDataTable+0x18>
	}

	float pos_offset_coeff = 1;
 8003d20:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003d24:	61bb      	str	r3, [r7, #24]
	if(_encoder_value)
 8003d26:	88fb      	ldrh	r3, [r7, #6]
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d008      	beq.n	8003d3e <_ProcessDataTable+0x56>
		pos_offset_coeff = (_encoder_value/4);
 8003d2c:	88fb      	ldrh	r3, [r7, #6]
 8003d2e:	089b      	lsrs	r3, r3, #2
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	ee07 3a90 	vmov	s15, r3
 8003d36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d3a:	edc7 7a06 	vstr	s15, [r7, #24]

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8003d3e:	2300      	movs	r3, #0
 8003d40:	617b      	str	r3, [r7, #20]
 8003d42:	e02e      	b.n	8003da2 <_ProcessDataTable+0xba>
	{

		tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8003d44:	4a25      	ldr	r2, [pc, #148]	; (8003ddc <_ProcessDataTable+0xf4>)
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d4c:	ee07 3a90 	vmov	s15, r3
 8003d50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d54:	edd7 7a03 	vldr	s15, [r7, #12]
 8003d58:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d60:	ee17 1a90 	vmov	r1, s15
 8003d64:	4a1d      	ldr	r2, [pc, #116]	; (8003ddc <_ProcessDataTable+0xf4>)
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		tmpDataTable[i] = tmpDataTable[i] + (vpp_offset * pos_offset_coeff);
 8003d6c:	4a1b      	ldr	r2, [pc, #108]	; (8003ddc <_ProcessDataTable+0xf4>)
 8003d6e:	697b      	ldr	r3, [r7, #20]
 8003d70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d74:	ee07 3a90 	vmov	s15, r3
 8003d78:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d7c:	edd7 6a02 	vldr	s13, [r7, #8]
 8003d80:	edd7 7a06 	vldr	s15, [r7, #24]
 8003d84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d90:	ee17 1a90 	vmov	r1, s15
 8003d94:	4a11      	ldr	r2, [pc, #68]	; (8003ddc <_ProcessDataTable+0xf4>)
 8003d96:	697b      	ldr	r3, [r7, #20]
 8003d98:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8003d9c:	697b      	ldr	r3, [r7, #20]
 8003d9e:	3301      	adds	r3, #1
 8003da0:	617b      	str	r3, [r7, #20]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	2b77      	cmp	r3, #119	; 0x77
 8003da6:	ddcd      	ble.n	8003d44 <_ProcessDataTable+0x5c>
	}
	//HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8003da8:	2300      	movs	r3, #0
 8003daa:	613b      	str	r3, [r7, #16]
 8003dac:	e00a      	b.n	8003dc4 <_ProcessDataTable+0xdc>
	{
		aModdedDataTable[i] = tmpDataTable[i];
 8003dae:	4a0b      	ldr	r2, [pc, #44]	; (8003ddc <_ProcessDataTable+0xf4>)
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003db6:	490a      	ldr	r1, [pc, #40]	; (8003de0 <_ProcessDataTable+0xf8>)
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	3301      	adds	r3, #1
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	2b77      	cmp	r3, #119	; 0x77
 8003dc8:	ddf1      	ble.n	8003dae <_ProcessDataTable+0xc6>
	}
	//HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)aModdedDataTable, SINE_DATA_SIZE,  DAC_ALIGN_12B_R);
}
 8003dca:	bf00      	nop
 8003dcc:	3724      	adds	r7, #36	; 0x24
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd4:	4770      	bx	lr
 8003dd6:	bf00      	nop
 8003dd8:	200001b0 	.word	0x200001b0
 8003ddc:	200020b4 	.word	0x200020b4
 8003de0:	20001ed4 	.word	0x20001ed4

08003de4 <VPP_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ModifyOutput(uint16_t pEncoderValue)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	80fb      	strh	r3, [r7, #6]
	switch(pEncoderValue)
 8003dee:	88fb      	ldrh	r3, [r7, #6]
 8003df0:	f5b3 7fbd 	cmp.w	r3, #378	; 0x17a
 8003df4:	f200 8476 	bhi.w	80046e4 <VPP_ModifyOutput+0x900>
 8003df8:	a201      	add	r2, pc, #4	; (adr r2, 8003e00 <VPP_ModifyOutput+0x1c>)
 8003dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dfe:	bf00      	nop
 8003e00:	080043ed 	.word	0x080043ed
 8003e04:	080043ed 	.word	0x080043ed
 8003e08:	080043ed 	.word	0x080043ed
 8003e0c:	080043f5 	.word	0x080043f5
 8003e10:	080043f5 	.word	0x080043f5
 8003e14:	080043f5 	.word	0x080043f5
 8003e18:	080043f5 	.word	0x080043f5
 8003e1c:	080043fd 	.word	0x080043fd
 8003e20:	080043fd 	.word	0x080043fd
 8003e24:	080043fd 	.word	0x080043fd
 8003e28:	080043fd 	.word	0x080043fd
 8003e2c:	08004405 	.word	0x08004405
 8003e30:	08004405 	.word	0x08004405
 8003e34:	08004405 	.word	0x08004405
 8003e38:	08004405 	.word	0x08004405
 8003e3c:	0800440d 	.word	0x0800440d
 8003e40:	0800440d 	.word	0x0800440d
 8003e44:	0800440d 	.word	0x0800440d
 8003e48:	0800440d 	.word	0x0800440d
 8003e4c:	08004415 	.word	0x08004415
 8003e50:	08004415 	.word	0x08004415
 8003e54:	08004415 	.word	0x08004415
 8003e58:	08004415 	.word	0x08004415
 8003e5c:	0800441d 	.word	0x0800441d
 8003e60:	0800441d 	.word	0x0800441d
 8003e64:	0800441d 	.word	0x0800441d
 8003e68:	0800441d 	.word	0x0800441d
 8003e6c:	08004425 	.word	0x08004425
 8003e70:	08004425 	.word	0x08004425
 8003e74:	08004425 	.word	0x08004425
 8003e78:	08004425 	.word	0x08004425
 8003e7c:	0800442d 	.word	0x0800442d
 8003e80:	0800442d 	.word	0x0800442d
 8003e84:	0800442d 	.word	0x0800442d
 8003e88:	0800442d 	.word	0x0800442d
 8003e8c:	08004435 	.word	0x08004435
 8003e90:	08004435 	.word	0x08004435
 8003e94:	08004435 	.word	0x08004435
 8003e98:	08004435 	.word	0x08004435
 8003e9c:	0800443d 	.word	0x0800443d
 8003ea0:	0800443d 	.word	0x0800443d
 8003ea4:	0800443d 	.word	0x0800443d
 8003ea8:	0800443d 	.word	0x0800443d
 8003eac:	08004445 	.word	0x08004445
 8003eb0:	08004445 	.word	0x08004445
 8003eb4:	08004445 	.word	0x08004445
 8003eb8:	08004445 	.word	0x08004445
 8003ebc:	0800444d 	.word	0x0800444d
 8003ec0:	0800444d 	.word	0x0800444d
 8003ec4:	0800444d 	.word	0x0800444d
 8003ec8:	0800444d 	.word	0x0800444d
 8003ecc:	08004455 	.word	0x08004455
 8003ed0:	08004455 	.word	0x08004455
 8003ed4:	08004455 	.word	0x08004455
 8003ed8:	08004455 	.word	0x08004455
 8003edc:	0800445d 	.word	0x0800445d
 8003ee0:	0800445d 	.word	0x0800445d
 8003ee4:	0800445d 	.word	0x0800445d
 8003ee8:	0800445d 	.word	0x0800445d
 8003eec:	08004465 	.word	0x08004465
 8003ef0:	08004465 	.word	0x08004465
 8003ef4:	08004465 	.word	0x08004465
 8003ef8:	08004465 	.word	0x08004465
 8003efc:	0800446d 	.word	0x0800446d
 8003f00:	0800446d 	.word	0x0800446d
 8003f04:	0800446d 	.word	0x0800446d
 8003f08:	0800446d 	.word	0x0800446d
 8003f0c:	08004475 	.word	0x08004475
 8003f10:	08004475 	.word	0x08004475
 8003f14:	08004475 	.word	0x08004475
 8003f18:	08004475 	.word	0x08004475
 8003f1c:	0800447d 	.word	0x0800447d
 8003f20:	0800447d 	.word	0x0800447d
 8003f24:	0800447d 	.word	0x0800447d
 8003f28:	0800447d 	.word	0x0800447d
 8003f2c:	08004485 	.word	0x08004485
 8003f30:	08004485 	.word	0x08004485
 8003f34:	08004485 	.word	0x08004485
 8003f38:	08004485 	.word	0x08004485
 8003f3c:	0800448d 	.word	0x0800448d
 8003f40:	0800448d 	.word	0x0800448d
 8003f44:	0800448d 	.word	0x0800448d
 8003f48:	0800448d 	.word	0x0800448d
 8003f4c:	08004495 	.word	0x08004495
 8003f50:	08004495 	.word	0x08004495
 8003f54:	08004495 	.word	0x08004495
 8003f58:	08004495 	.word	0x08004495
 8003f5c:	0800449d 	.word	0x0800449d
 8003f60:	0800449d 	.word	0x0800449d
 8003f64:	0800449d 	.word	0x0800449d
 8003f68:	0800449d 	.word	0x0800449d
 8003f6c:	080044a5 	.word	0x080044a5
 8003f70:	080044a5 	.word	0x080044a5
 8003f74:	080044a5 	.word	0x080044a5
 8003f78:	080044a5 	.word	0x080044a5
 8003f7c:	080044ad 	.word	0x080044ad
 8003f80:	080044ad 	.word	0x080044ad
 8003f84:	080044ad 	.word	0x080044ad
 8003f88:	080044ad 	.word	0x080044ad
 8003f8c:	080044b5 	.word	0x080044b5
 8003f90:	080044b5 	.word	0x080044b5
 8003f94:	080044b5 	.word	0x080044b5
 8003f98:	080044b5 	.word	0x080044b5
 8003f9c:	080044bd 	.word	0x080044bd
 8003fa0:	080044bd 	.word	0x080044bd
 8003fa4:	080044bd 	.word	0x080044bd
 8003fa8:	080044bd 	.word	0x080044bd
 8003fac:	080044c5 	.word	0x080044c5
 8003fb0:	080044c5 	.word	0x080044c5
 8003fb4:	080044c5 	.word	0x080044c5
 8003fb8:	080044c5 	.word	0x080044c5
 8003fbc:	080044cd 	.word	0x080044cd
 8003fc0:	080044cd 	.word	0x080044cd
 8003fc4:	080044cd 	.word	0x080044cd
 8003fc8:	080044cd 	.word	0x080044cd
 8003fcc:	080044d5 	.word	0x080044d5
 8003fd0:	080044d5 	.word	0x080044d5
 8003fd4:	080044d5 	.word	0x080044d5
 8003fd8:	080044d5 	.word	0x080044d5
 8003fdc:	080044dd 	.word	0x080044dd
 8003fe0:	080044dd 	.word	0x080044dd
 8003fe4:	080044dd 	.word	0x080044dd
 8003fe8:	080044dd 	.word	0x080044dd
 8003fec:	080044e5 	.word	0x080044e5
 8003ff0:	080044e5 	.word	0x080044e5
 8003ff4:	080044e5 	.word	0x080044e5
 8003ff8:	080044e5 	.word	0x080044e5
 8003ffc:	080044ed 	.word	0x080044ed
 8004000:	080044ed 	.word	0x080044ed
 8004004:	080044ed 	.word	0x080044ed
 8004008:	080044ed 	.word	0x080044ed
 800400c:	080044f5 	.word	0x080044f5
 8004010:	080044f5 	.word	0x080044f5
 8004014:	080044f5 	.word	0x080044f5
 8004018:	080044f5 	.word	0x080044f5
 800401c:	080044fd 	.word	0x080044fd
 8004020:	080044fd 	.word	0x080044fd
 8004024:	080044fd 	.word	0x080044fd
 8004028:	080044fd 	.word	0x080044fd
 800402c:	08004505 	.word	0x08004505
 8004030:	08004505 	.word	0x08004505
 8004034:	08004505 	.word	0x08004505
 8004038:	08004505 	.word	0x08004505
 800403c:	0800450d 	.word	0x0800450d
 8004040:	0800450d 	.word	0x0800450d
 8004044:	0800450d 	.word	0x0800450d
 8004048:	0800450d 	.word	0x0800450d
 800404c:	08004515 	.word	0x08004515
 8004050:	08004515 	.word	0x08004515
 8004054:	08004515 	.word	0x08004515
 8004058:	08004515 	.word	0x08004515
 800405c:	0800451d 	.word	0x0800451d
 8004060:	0800451d 	.word	0x0800451d
 8004064:	0800451d 	.word	0x0800451d
 8004068:	0800451d 	.word	0x0800451d
 800406c:	08004525 	.word	0x08004525
 8004070:	08004525 	.word	0x08004525
 8004074:	08004525 	.word	0x08004525
 8004078:	08004525 	.word	0x08004525
 800407c:	0800452d 	.word	0x0800452d
 8004080:	0800452d 	.word	0x0800452d
 8004084:	0800452d 	.word	0x0800452d
 8004088:	0800452d 	.word	0x0800452d
 800408c:	08004535 	.word	0x08004535
 8004090:	08004535 	.word	0x08004535
 8004094:	08004535 	.word	0x08004535
 8004098:	08004535 	.word	0x08004535
 800409c:	0800453d 	.word	0x0800453d
 80040a0:	0800453d 	.word	0x0800453d
 80040a4:	0800453d 	.word	0x0800453d
 80040a8:	0800453d 	.word	0x0800453d
 80040ac:	08004545 	.word	0x08004545
 80040b0:	08004545 	.word	0x08004545
 80040b4:	08004545 	.word	0x08004545
 80040b8:	08004545 	.word	0x08004545
 80040bc:	0800454d 	.word	0x0800454d
 80040c0:	0800454d 	.word	0x0800454d
 80040c4:	0800454d 	.word	0x0800454d
 80040c8:	0800454d 	.word	0x0800454d
 80040cc:	08004555 	.word	0x08004555
 80040d0:	08004555 	.word	0x08004555
 80040d4:	08004555 	.word	0x08004555
 80040d8:	08004555 	.word	0x08004555
 80040dc:	0800455d 	.word	0x0800455d
 80040e0:	0800455d 	.word	0x0800455d
 80040e4:	0800455d 	.word	0x0800455d
 80040e8:	0800455d 	.word	0x0800455d
 80040ec:	08004565 	.word	0x08004565
 80040f0:	08004565 	.word	0x08004565
 80040f4:	08004565 	.word	0x08004565
 80040f8:	08004565 	.word	0x08004565
 80040fc:	0800456d 	.word	0x0800456d
 8004100:	0800456d 	.word	0x0800456d
 8004104:	0800456d 	.word	0x0800456d
 8004108:	0800456d 	.word	0x0800456d
 800410c:	08004575 	.word	0x08004575
 8004110:	08004575 	.word	0x08004575
 8004114:	08004575 	.word	0x08004575
 8004118:	08004575 	.word	0x08004575
 800411c:	0800457d 	.word	0x0800457d
 8004120:	0800457d 	.word	0x0800457d
 8004124:	0800457d 	.word	0x0800457d
 8004128:	0800457d 	.word	0x0800457d
 800412c:	08004585 	.word	0x08004585
 8004130:	08004585 	.word	0x08004585
 8004134:	08004585 	.word	0x08004585
 8004138:	08004585 	.word	0x08004585
 800413c:	0800458d 	.word	0x0800458d
 8004140:	0800458d 	.word	0x0800458d
 8004144:	0800458d 	.word	0x0800458d
 8004148:	0800458d 	.word	0x0800458d
 800414c:	08004595 	.word	0x08004595
 8004150:	08004595 	.word	0x08004595
 8004154:	08004595 	.word	0x08004595
 8004158:	08004595 	.word	0x08004595
 800415c:	0800459d 	.word	0x0800459d
 8004160:	0800459d 	.word	0x0800459d
 8004164:	0800459d 	.word	0x0800459d
 8004168:	0800459d 	.word	0x0800459d
 800416c:	080045a5 	.word	0x080045a5
 8004170:	080045a5 	.word	0x080045a5
 8004174:	080045a5 	.word	0x080045a5
 8004178:	080045a5 	.word	0x080045a5
 800417c:	080045ad 	.word	0x080045ad
 8004180:	080045ad 	.word	0x080045ad
 8004184:	080045ad 	.word	0x080045ad
 8004188:	080045ad 	.word	0x080045ad
 800418c:	080045b5 	.word	0x080045b5
 8004190:	080045b5 	.word	0x080045b5
 8004194:	080045b5 	.word	0x080045b5
 8004198:	080045b5 	.word	0x080045b5
 800419c:	080045bd 	.word	0x080045bd
 80041a0:	080045bd 	.word	0x080045bd
 80041a4:	080045bd 	.word	0x080045bd
 80041a8:	080045bd 	.word	0x080045bd
 80041ac:	080045c5 	.word	0x080045c5
 80041b0:	080045c5 	.word	0x080045c5
 80041b4:	080045c5 	.word	0x080045c5
 80041b8:	080045c5 	.word	0x080045c5
 80041bc:	080045cd 	.word	0x080045cd
 80041c0:	080045cd 	.word	0x080045cd
 80041c4:	080045cd 	.word	0x080045cd
 80041c8:	080045cd 	.word	0x080045cd
 80041cc:	080045d5 	.word	0x080045d5
 80041d0:	080045d5 	.word	0x080045d5
 80041d4:	080045d5 	.word	0x080045d5
 80041d8:	080045d5 	.word	0x080045d5
 80041dc:	080045dd 	.word	0x080045dd
 80041e0:	080045dd 	.word	0x080045dd
 80041e4:	080045dd 	.word	0x080045dd
 80041e8:	080045dd 	.word	0x080045dd
 80041ec:	080045e5 	.word	0x080045e5
 80041f0:	080045e5 	.word	0x080045e5
 80041f4:	080045e5 	.word	0x080045e5
 80041f8:	080045e5 	.word	0x080045e5
 80041fc:	080045ed 	.word	0x080045ed
 8004200:	080045ed 	.word	0x080045ed
 8004204:	080045ed 	.word	0x080045ed
 8004208:	080045ed 	.word	0x080045ed
 800420c:	080045f5 	.word	0x080045f5
 8004210:	080045f5 	.word	0x080045f5
 8004214:	080045f5 	.word	0x080045f5
 8004218:	080045f5 	.word	0x080045f5
 800421c:	080045fd 	.word	0x080045fd
 8004220:	080045fd 	.word	0x080045fd
 8004224:	080045fd 	.word	0x080045fd
 8004228:	080045fd 	.word	0x080045fd
 800422c:	08004605 	.word	0x08004605
 8004230:	08004605 	.word	0x08004605
 8004234:	08004605 	.word	0x08004605
 8004238:	08004605 	.word	0x08004605
 800423c:	0800460d 	.word	0x0800460d
 8004240:	0800460d 	.word	0x0800460d
 8004244:	0800460d 	.word	0x0800460d
 8004248:	0800460d 	.word	0x0800460d
 800424c:	08004615 	.word	0x08004615
 8004250:	08004615 	.word	0x08004615
 8004254:	08004615 	.word	0x08004615
 8004258:	08004615 	.word	0x08004615
 800425c:	0800461d 	.word	0x0800461d
 8004260:	0800461d 	.word	0x0800461d
 8004264:	0800461d 	.word	0x0800461d
 8004268:	0800461d 	.word	0x0800461d
 800426c:	08004625 	.word	0x08004625
 8004270:	08004625 	.word	0x08004625
 8004274:	08004625 	.word	0x08004625
 8004278:	08004625 	.word	0x08004625
 800427c:	0800462d 	.word	0x0800462d
 8004280:	0800462d 	.word	0x0800462d
 8004284:	0800462d 	.word	0x0800462d
 8004288:	0800462d 	.word	0x0800462d
 800428c:	08004635 	.word	0x08004635
 8004290:	08004635 	.word	0x08004635
 8004294:	08004635 	.word	0x08004635
 8004298:	08004635 	.word	0x08004635
 800429c:	0800463d 	.word	0x0800463d
 80042a0:	0800463d 	.word	0x0800463d
 80042a4:	0800463d 	.word	0x0800463d
 80042a8:	0800463d 	.word	0x0800463d
 80042ac:	08004645 	.word	0x08004645
 80042b0:	08004645 	.word	0x08004645
 80042b4:	08004645 	.word	0x08004645
 80042b8:	08004645 	.word	0x08004645
 80042bc:	0800464d 	.word	0x0800464d
 80042c0:	0800464d 	.word	0x0800464d
 80042c4:	0800464d 	.word	0x0800464d
 80042c8:	0800464d 	.word	0x0800464d
 80042cc:	08004655 	.word	0x08004655
 80042d0:	08004655 	.word	0x08004655
 80042d4:	08004655 	.word	0x08004655
 80042d8:	08004655 	.word	0x08004655
 80042dc:	0800465d 	.word	0x0800465d
 80042e0:	0800465d 	.word	0x0800465d
 80042e4:	0800465d 	.word	0x0800465d
 80042e8:	0800465d 	.word	0x0800465d
 80042ec:	08004665 	.word	0x08004665
 80042f0:	08004665 	.word	0x08004665
 80042f4:	08004665 	.word	0x08004665
 80042f8:	08004665 	.word	0x08004665
 80042fc:	0800466d 	.word	0x0800466d
 8004300:	0800466d 	.word	0x0800466d
 8004304:	0800466d 	.word	0x0800466d
 8004308:	0800466d 	.word	0x0800466d
 800430c:	08004675 	.word	0x08004675
 8004310:	08004675 	.word	0x08004675
 8004314:	08004675 	.word	0x08004675
 8004318:	08004675 	.word	0x08004675
 800431c:	0800467d 	.word	0x0800467d
 8004320:	0800467d 	.word	0x0800467d
 8004324:	0800467d 	.word	0x0800467d
 8004328:	0800467d 	.word	0x0800467d
 800432c:	08004685 	.word	0x08004685
 8004330:	08004685 	.word	0x08004685
 8004334:	08004685 	.word	0x08004685
 8004338:	08004685 	.word	0x08004685
 800433c:	0800468d 	.word	0x0800468d
 8004340:	0800468d 	.word	0x0800468d
 8004344:	0800468d 	.word	0x0800468d
 8004348:	0800468d 	.word	0x0800468d
 800434c:	08004695 	.word	0x08004695
 8004350:	08004695 	.word	0x08004695
 8004354:	08004695 	.word	0x08004695
 8004358:	08004695 	.word	0x08004695
 800435c:	0800469d 	.word	0x0800469d
 8004360:	0800469d 	.word	0x0800469d
 8004364:	0800469d 	.word	0x0800469d
 8004368:	0800469d 	.word	0x0800469d
 800436c:	080046a5 	.word	0x080046a5
 8004370:	080046a5 	.word	0x080046a5
 8004374:	080046a5 	.word	0x080046a5
 8004378:	080046a5 	.word	0x080046a5
 800437c:	080046ad 	.word	0x080046ad
 8004380:	080046ad 	.word	0x080046ad
 8004384:	080046ad 	.word	0x080046ad
 8004388:	080046ad 	.word	0x080046ad
 800438c:	080046b5 	.word	0x080046b5
 8004390:	080046b5 	.word	0x080046b5
 8004394:	080046b5 	.word	0x080046b5
 8004398:	080046b5 	.word	0x080046b5
 800439c:	080046bd 	.word	0x080046bd
 80043a0:	080046bd 	.word	0x080046bd
 80043a4:	080046bd 	.word	0x080046bd
 80043a8:	080046bd 	.word	0x080046bd
 80043ac:	080046c5 	.word	0x080046c5
 80043b0:	080046c5 	.word	0x080046c5
 80043b4:	080046c5 	.word	0x080046c5
 80043b8:	080046c5 	.word	0x080046c5
 80043bc:	080046cd 	.word	0x080046cd
 80043c0:	080046cd 	.word	0x080046cd
 80043c4:	080046cd 	.word	0x080046cd
 80043c8:	080046cd 	.word	0x080046cd
 80043cc:	080046d5 	.word	0x080046d5
 80043d0:	080046d5 	.word	0x080046d5
 80043d4:	080046d5 	.word	0x080046d5
 80043d8:	080046d5 	.word	0x080046d5
 80043dc:	080046dd 	.word	0x080046dd
 80043e0:	080046dd 	.word	0x080046dd
 80043e4:	080046dd 	.word	0x080046dd
 80043e8:	080046dd 	.word	0x080046dd
	{
		case 0	:
		case 1	:
		case 2	:
			VPP_ApplyPreset_Fast( VPP01 );
 80043ec:	2000      	movs	r0, #0
 80043ee:	f7ff fc4d 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80043f2:	e178      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 3	:
		case 4	:
		case 5	:
		case 6	:
			VPP_ApplyPreset_Fast( VPP02	);
 80043f4:	2001      	movs	r0, #1
 80043f6:	f7ff fc49 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80043fa:	e174      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 7	:
		case 8	:
		case 9	:
		case 10	:
			VPP_ApplyPreset_Fast( VPP03	);
 80043fc:	2002      	movs	r0, #2
 80043fe:	f7ff fc45 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004402:	e170      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 11	:
		case 12	:
		case 13	:
		case 14	:
			VPP_ApplyPreset_Fast( VPP04	);
 8004404:	2003      	movs	r0, #3
 8004406:	f7ff fc41 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800440a:	e16c      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 15	:
		case 16	:
		case 17	:
		case 18	:
			VPP_ApplyPreset_Fast( VPP05	);
 800440c:	2004      	movs	r0, #4
 800440e:	f7ff fc3d 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004412:	e168      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 19	:
		case 20	:
		case 21	:
		case 22	:
			VPP_ApplyPreset_Fast( VPP06	);
 8004414:	2005      	movs	r0, #5
 8004416:	f7ff fc39 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800441a:	e164      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 23	:
		case 24	:
		case 25	:
		case 26	:
			VPP_ApplyPreset_Fast( VPP07	);
 800441c:	2006      	movs	r0, #6
 800441e:	f7ff fc35 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004422:	e160      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 27	:
		case 28	:
		case 29	:
		case 30	:
			VPP_ApplyPreset_Fast( VPP08	);
 8004424:	2007      	movs	r0, #7
 8004426:	f7ff fc31 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800442a:	e15c      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 31	:
		case 32	:
		case 33	:
		case 34	:
			VPP_ApplyPreset_Fast( VPP09	);
 800442c:	2008      	movs	r0, #8
 800442e:	f7ff fc2d 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004432:	e158      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 35	:
		case 36	:
		case 37	:
		case 38	:
			VPP_ApplyPreset_Fast( VPP10	);
 8004434:	2009      	movs	r0, #9
 8004436:	f7ff fc29 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800443a:	e154      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 39	:
		case 40	:
		case 41	:
		case 42	:
			VPP_ApplyPreset_Fast( VPP11	);
 800443c:	200a      	movs	r0, #10
 800443e:	f7ff fc25 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004442:	e150      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 43	:
		case 44	:
		case 45	:
		case 46	:
			VPP_ApplyPreset_Fast( VPP12	);
 8004444:	200b      	movs	r0, #11
 8004446:	f7ff fc21 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800444a:	e14c      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 47	:
		case 48	:
		case 49	:
		case 50	:
			VPP_ApplyPreset_Fast( VPP13	);
 800444c:	200c      	movs	r0, #12
 800444e:	f7ff fc1d 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004452:	e148      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 51	:
		case 52	:
		case 53	:
		case 54	:
			VPP_ApplyPreset_Fast( VPP14	);
 8004454:	200d      	movs	r0, #13
 8004456:	f7ff fc19 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800445a:	e144      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 55	:
		case 56	:
		case 57	:
		case 58	:
			VPP_ApplyPreset_Fast( VPP15	);
 800445c:	200e      	movs	r0, #14
 800445e:	f7ff fc15 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004462:	e140      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 59	:
		case 60	:
		case 61	:
		case 62	:
			VPP_ApplyPreset_Fast( VPP16	);
 8004464:	200f      	movs	r0, #15
 8004466:	f7ff fc11 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800446a:	e13c      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 63	:
		case 64	:
		case 65	:
		case 66	:
			VPP_ApplyPreset_Fast( VPP17	);
 800446c:	2010      	movs	r0, #16
 800446e:	f7ff fc0d 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004472:	e138      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 67	:
		case 68	:
		case 69	:
		case 70	:
			VPP_ApplyPreset_Fast( VPP18	);
 8004474:	2011      	movs	r0, #17
 8004476:	f7ff fc09 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800447a:	e134      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 71	:
		case 72	:
		case 73	:
		case 74	:
			VPP_ApplyPreset_Fast( VPP19	);
 800447c:	2012      	movs	r0, #18
 800447e:	f7ff fc05 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004482:	e130      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 75	:
		case 76	:
		case 77	:
		case 78	:
			VPP_ApplyPreset_Fast( VPP20	);
 8004484:	2013      	movs	r0, #19
 8004486:	f7ff fc01 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800448a:	e12c      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 79	:
		case 80	:
		case 81	:
		case 82	:
			VPP_ApplyPreset_Fast( VPP21	);
 800448c:	2014      	movs	r0, #20
 800448e:	f7ff fbfd 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004492:	e128      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 83	:
		case 84	:
		case 85	:
		case 86	:
			VPP_ApplyPreset_Fast( VPP22	);
 8004494:	2015      	movs	r0, #21
 8004496:	f7ff fbf9 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800449a:	e124      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 87	:
		case 88	:
		case 89	:
		case 90	:
			VPP_ApplyPreset_Fast( VPP23	);
 800449c:	2016      	movs	r0, #22
 800449e:	f7ff fbf5 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80044a2:	e120      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 91	:
		case 92	:
		case 93	:
		case 94	:
			VPP_ApplyPreset_Fast( VPP24	);
 80044a4:	2017      	movs	r0, #23
 80044a6:	f7ff fbf1 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80044aa:	e11c      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 95	:
		case 96	:
		case 97	:
		case 98	:
			VPP_ApplyPreset_Fast( VPP25	);
 80044ac:	2018      	movs	r0, #24
 80044ae:	f7ff fbed 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80044b2:	e118      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 99		:
		case 100	:
		case 101	:
		case 102	:
			VPP_ApplyPreset_Fast( VPP26	);
 80044b4:	2019      	movs	r0, #25
 80044b6:	f7ff fbe9 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80044ba:	e114      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 103	:
		case 104	:
		case 105	:
		case 106	:
			VPP_ApplyPreset_Fast( VPP27	);
 80044bc:	201a      	movs	r0, #26
 80044be:	f7ff fbe5 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80044c2:	e110      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 107	:
		case 108	:
		case 109	:
		case 110	:
			VPP_ApplyPreset_Fast( VPP28	);
 80044c4:	201b      	movs	r0, #27
 80044c6:	f7ff fbe1 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80044ca:	e10c      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 111	:
		case 112	:
		case 113	:
		case 114	:
			VPP_ApplyPreset_Fast( VPP29	);
 80044cc:	201c      	movs	r0, #28
 80044ce:	f7ff fbdd 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80044d2:	e108      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 115	:
		case 116	:
		case 117	:
		case 118	:
			VPP_ApplyPreset_Fast( VPP30	);
 80044d4:	201d      	movs	r0, #29
 80044d6:	f7ff fbd9 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80044da:	e104      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 119	:
		case 120	:
		case 121	:
		case 122	:
			VPP_ApplyPreset_Fast( VPP31	);
 80044dc:	201e      	movs	r0, #30
 80044de:	f7ff fbd5 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80044e2:	e100      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 123	:
		case 124	:
		case 125	:
		case 126	:
			VPP_ApplyPreset_Fast( VPP32	);
 80044e4:	201f      	movs	r0, #31
 80044e6:	f7ff fbd1 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80044ea:	e0fc      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 127	:
		case 128	:
		case 129	:
		case 130	:
			VPP_ApplyPreset_Fast( VPP33	);
 80044ec:	2020      	movs	r0, #32
 80044ee:	f7ff fbcd 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80044f2:	e0f8      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 131	:
		case 132	:
		case 133	:
		case 134	:
			VPP_ApplyPreset_Fast( VPP34	);
 80044f4:	2021      	movs	r0, #33	; 0x21
 80044f6:	f7ff fbc9 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80044fa:	e0f4      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 135	:
		case 136	:
		case 137	:
		case 138	:
			VPP_ApplyPreset_Fast( VPP35	);
 80044fc:	2022      	movs	r0, #34	; 0x22
 80044fe:	f7ff fbc5 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004502:	e0f0      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 139	:
		case 140	:
		case 141	:
		case 142	:
			VPP_ApplyPreset_Fast( VPP36	);
 8004504:	2023      	movs	r0, #35	; 0x23
 8004506:	f7ff fbc1 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800450a:	e0ec      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 143	:
		case 144	:
		case 145	:
		case 146	:
			VPP_ApplyPreset_Fast( VPP37	);
 800450c:	2024      	movs	r0, #36	; 0x24
 800450e:	f7ff fbbd 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004512:	e0e8      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 147	:
		case 148	:
		case 149	:
		case 150	:
			VPP_ApplyPreset_Fast( VPP38	);
 8004514:	2025      	movs	r0, #37	; 0x25
 8004516:	f7ff fbb9 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800451a:	e0e4      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 151	:
		case 152	:
		case 153	:
		case 154	:
			VPP_ApplyPreset_Fast( VPP39	);
 800451c:	2026      	movs	r0, #38	; 0x26
 800451e:	f7ff fbb5 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004522:	e0e0      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 155	:
		case 156	:
		case 157	:
		case 158	:
			VPP_ApplyPreset_Fast( VPP40	);
 8004524:	2027      	movs	r0, #39	; 0x27
 8004526:	f7ff fbb1 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800452a:	e0dc      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 159	:
		case 160	:
		case 161	:
		case 162	:
			VPP_ApplyPreset_Fast( VPP41	);
 800452c:	2028      	movs	r0, #40	; 0x28
 800452e:	f7ff fbad 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004532:	e0d8      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 163	:
		case 164	:
		case 165	:
		case 166	:
			VPP_ApplyPreset_Fast( VPP42	);
 8004534:	2029      	movs	r0, #41	; 0x29
 8004536:	f7ff fba9 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800453a:	e0d4      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 167	:
		case 168	:
		case 169	:
		case 170	:
			VPP_ApplyPreset_Fast( VPP43	);
 800453c:	202a      	movs	r0, #42	; 0x2a
 800453e:	f7ff fba5 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004542:	e0d0      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 171	:
		case 172	:
		case 173	:
		case 174	:
			VPP_ApplyPreset_Fast( VPP44	);
 8004544:	202b      	movs	r0, #43	; 0x2b
 8004546:	f7ff fba1 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800454a:	e0cc      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 175	:
		case 176	:
		case 177	:
		case 178	:
			VPP_ApplyPreset_Fast( VPP45	);
 800454c:	202c      	movs	r0, #44	; 0x2c
 800454e:	f7ff fb9d 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004552:	e0c8      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 179	:
		case 180	:
		case 181	:
		case 182	:
			VPP_ApplyPreset_Fast( VPP46	);
 8004554:	202d      	movs	r0, #45	; 0x2d
 8004556:	f7ff fb99 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800455a:	e0c4      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 183	:
		case 184	:
		case 185	:
		case 186	:
			VPP_ApplyPreset_Fast( VPP47	);
 800455c:	202e      	movs	r0, #46	; 0x2e
 800455e:	f7ff fb95 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004562:	e0c0      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 187	:
		case 188	:
		case 189	:
		case 190	:
			VPP_ApplyPreset_Fast( VPP48	);
 8004564:	202f      	movs	r0, #47	; 0x2f
 8004566:	f7ff fb91 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800456a:	e0bc      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 191	:
		case 192	:
		case 193	:
		case 194	:
			VPP_ApplyPreset_Fast( VPP49	);
 800456c:	2030      	movs	r0, #48	; 0x30
 800456e:	f7ff fb8d 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004572:	e0b8      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 195	:
		case 196	:
		case 197	:
		case 198	:
			VPP_ApplyPreset_Fast( VPP50	);
 8004574:	2031      	movs	r0, #49	; 0x31
 8004576:	f7ff fb89 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800457a:	e0b4      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 199	:
		case 200	:
		case 201	:
		case 202	:
			VPP_ApplyPreset_Fast( VPP51	);
 800457c:	2032      	movs	r0, #50	; 0x32
 800457e:	f7ff fb85 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004582:	e0b0      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 203	:
		case 204	:
		case 205	:
		case 206	:
			VPP_ApplyPreset_Fast( VPP52	);
 8004584:	2033      	movs	r0, #51	; 0x33
 8004586:	f7ff fb81 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800458a:	e0ac      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 207	:
		case 208	:
		case 209	:
		case 210	:
			VPP_ApplyPreset_Fast( VPP53	);
 800458c:	2034      	movs	r0, #52	; 0x34
 800458e:	f7ff fb7d 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004592:	e0a8      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 211	:
		case 212	:
		case 213	:
		case 214	:
			VPP_ApplyPreset_Fast( VPP54	);
 8004594:	2035      	movs	r0, #53	; 0x35
 8004596:	f7ff fb79 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800459a:	e0a4      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 215	:
		case 216	:
		case 217	:
		case 218	:
			VPP_ApplyPreset_Fast( VPP55	);
 800459c:	2036      	movs	r0, #54	; 0x36
 800459e:	f7ff fb75 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80045a2:	e0a0      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 219	:
		case 220	:
		case 221	:
		case 222	:
			VPP_ApplyPreset_Fast( VPP56	);
 80045a4:	2037      	movs	r0, #55	; 0x37
 80045a6:	f7ff fb71 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80045aa:	e09c      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 223	:
		case 224	:
		case 225	:
		case 226	:
			VPP_ApplyPreset_Fast( VPP57	);
 80045ac:	2038      	movs	r0, #56	; 0x38
 80045ae:	f7ff fb6d 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80045b2:	e098      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 227	:
		case 228	:
		case 229	:
		case 230	:
			VPP_ApplyPreset_Fast( VPP58	);
 80045b4:	2039      	movs	r0, #57	; 0x39
 80045b6:	f7ff fb69 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80045ba:	e094      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 231	:
		case 232	:
		case 233	:
		case 234	:
			VPP_ApplyPreset_Fast( VPP59	);
 80045bc:	203a      	movs	r0, #58	; 0x3a
 80045be:	f7ff fb65 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80045c2:	e090      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 235	:
		case 236	:
		case 237	:
		case 238	:
			VPP_ApplyPreset_Fast( VPP60	);
 80045c4:	203b      	movs	r0, #59	; 0x3b
 80045c6:	f7ff fb61 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80045ca:	e08c      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 239	:
		case 240	:
		case 241	:
		case 242	:
			VPP_ApplyPreset_Fast( VPP61	);
 80045cc:	203c      	movs	r0, #60	; 0x3c
 80045ce:	f7ff fb5d 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80045d2:	e088      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 243	:
		case 244	:
		case 245	:
		case 246	:
			VPP_ApplyPreset_Fast( VPP62	);
 80045d4:	203d      	movs	r0, #61	; 0x3d
 80045d6:	f7ff fb59 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80045da:	e084      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 247	:
		case 248	:
		case 249	:
		case 250	:
			VPP_ApplyPreset_Fast( VPP63	);
 80045dc:	203e      	movs	r0, #62	; 0x3e
 80045de:	f7ff fb55 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80045e2:	e080      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 251	:
		case 252	:
		case 253	:
		case 254	:
			VPP_ApplyPreset_Fast( VPP64	);
 80045e4:	203f      	movs	r0, #63	; 0x3f
 80045e6:	f7ff fb51 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80045ea:	e07c      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 255	:
		case 256	:
		case 257	:
		case 258	:
			VPP_ApplyPreset_Fast( VPP65	);
 80045ec:	2040      	movs	r0, #64	; 0x40
 80045ee:	f7ff fb4d 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80045f2:	e078      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 259	:
		case 260	:
		case 261	:
		case 262	:
			VPP_ApplyPreset_Fast( VPP66	);
 80045f4:	2041      	movs	r0, #65	; 0x41
 80045f6:	f7ff fb49 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80045fa:	e074      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 263	:
		case 264	:
		case 265	:
		case 266	:
			VPP_ApplyPreset_Fast( VPP67	);
 80045fc:	2042      	movs	r0, #66	; 0x42
 80045fe:	f7ff fb45 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004602:	e070      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 267	:
		case 268	:
		case 269	:
		case 270	:
			VPP_ApplyPreset_Fast( VPP68	);
 8004604:	2043      	movs	r0, #67	; 0x43
 8004606:	f7ff fb41 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800460a:	e06c      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 271	:
		case 272	:
		case 273	:
		case 274	:
			VPP_ApplyPreset_Fast( VPP69	);
 800460c:	2044      	movs	r0, #68	; 0x44
 800460e:	f7ff fb3d 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004612:	e068      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 275	:
		case 276	:
		case 277	:
		case 278	:
			VPP_ApplyPreset_Fast( VPP70	);
 8004614:	2045      	movs	r0, #69	; 0x45
 8004616:	f7ff fb39 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800461a:	e064      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 279	:
		case 280	:
		case 281	:
		case 282	:
			VPP_ApplyPreset_Fast( VPP71	);
 800461c:	2046      	movs	r0, #70	; 0x46
 800461e:	f7ff fb35 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004622:	e060      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 283	:
		case 284	:
		case 285	:
		case 286	:
			VPP_ApplyPreset_Fast( VPP72	);
 8004624:	2047      	movs	r0, #71	; 0x47
 8004626:	f7ff fb31 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800462a:	e05c      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 287	:
		case 288	:
		case 289	:
		case 290	:
			VPP_ApplyPreset_Fast( VPP73	);
 800462c:	2048      	movs	r0, #72	; 0x48
 800462e:	f7ff fb2d 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004632:	e058      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 291	:
		case 292	:
		case 293	:
		case 294	:
			VPP_ApplyPreset_Fast( VPP74	);
 8004634:	2049      	movs	r0, #73	; 0x49
 8004636:	f7ff fb29 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800463a:	e054      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 295	:
		case 296	:
		case 297	:
		case 298	:
			VPP_ApplyPreset_Fast( VPP75	);
 800463c:	204a      	movs	r0, #74	; 0x4a
 800463e:	f7ff fb25 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004642:	e050      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 299	:
		case 300	:
		case 301	:
		case 302	:
			VPP_ApplyPreset_Fast( VPP76	);
 8004644:	204b      	movs	r0, #75	; 0x4b
 8004646:	f7ff fb21 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800464a:	e04c      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 303	:
		case 304	:
		case 305	:
		case 306	:
			VPP_ApplyPreset_Fast( VPP77	);
 800464c:	204c      	movs	r0, #76	; 0x4c
 800464e:	f7ff fb1d 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004652:	e048      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 307	:
		case 308	:
		case 309	:
		case 310	:
			VPP_ApplyPreset_Fast( VPP78	);
 8004654:	204d      	movs	r0, #77	; 0x4d
 8004656:	f7ff fb19 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800465a:	e044      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 311	:
		case 312	:
		case 313	:
		case 314	:
			VPP_ApplyPreset_Fast( VPP79	);
 800465c:	204e      	movs	r0, #78	; 0x4e
 800465e:	f7ff fb15 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004662:	e040      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 315	:
		case 316	:
		case 317	:
		case 318	:
			VPP_ApplyPreset_Fast( VPP80	);
 8004664:	204f      	movs	r0, #79	; 0x4f
 8004666:	f7ff fb11 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800466a:	e03c      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 319	:
		case 320	:
		case 321	:
		case 322	:
			VPP_ApplyPreset_Fast( VPP81	);
 800466c:	2050      	movs	r0, #80	; 0x50
 800466e:	f7ff fb0d 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004672:	e038      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 323	:
		case 324	:
		case 325	:
		case 326	:
			VPP_ApplyPreset_Fast( VPP82	);
 8004674:	2051      	movs	r0, #81	; 0x51
 8004676:	f7ff fb09 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800467a:	e034      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 327	:
		case 328	:
		case 329	:
		case 330	:
			VPP_ApplyPreset_Fast( VPP83	);
 800467c:	2052      	movs	r0, #82	; 0x52
 800467e:	f7ff fb05 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004682:	e030      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 331	:
		case 332	:
		case 333	:
		case 334	:
			VPP_ApplyPreset_Fast( VPP84	);
 8004684:	2053      	movs	r0, #83	; 0x53
 8004686:	f7ff fb01 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800468a:	e02c      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 335	:
		case 336	:
		case 337	:
		case 338	:
			VPP_ApplyPreset_Fast( VPP85	);
 800468c:	2054      	movs	r0, #84	; 0x54
 800468e:	f7ff fafd 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 8004692:	e028      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 339	:
		case 340	:
		case 341	:
		case 342	:
			VPP_ApplyPreset_Fast( VPP86	);
 8004694:	2055      	movs	r0, #85	; 0x55
 8004696:	f7ff faf9 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 800469a:	e024      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 343	:
		case 344	:
		case 345	:
		case 346	:
			VPP_ApplyPreset_Fast( VPP87	);
 800469c:	2056      	movs	r0, #86	; 0x56
 800469e:	f7ff faf5 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80046a2:	e020      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 347	:
		case 348	:
		case 349	:
		case 350	:
			VPP_ApplyPreset_Fast( VPP88	);
 80046a4:	2057      	movs	r0, #87	; 0x57
 80046a6:	f7ff faf1 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80046aa:	e01c      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 351	:
		case 352	:
		case 353	:
		case 354	:
			VPP_ApplyPreset_Fast( VPP89	);
 80046ac:	2058      	movs	r0, #88	; 0x58
 80046ae:	f7ff faed 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80046b2:	e018      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 355	:
		case 356	:
		case 357	:
		case 358	:
			VPP_ApplyPreset_Fast( VPP90	);
 80046b4:	2059      	movs	r0, #89	; 0x59
 80046b6:	f7ff fae9 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80046ba:	e014      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 359	:
		case 360	:
		case 361	:
		case 362	:
			VPP_ApplyPreset_Fast( VPP91	);
 80046bc:	205a      	movs	r0, #90	; 0x5a
 80046be:	f7ff fae5 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80046c2:	e010      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 363	:
		case 364	:
		case 365	:
		case 366	:
			VPP_ApplyPreset_Fast( VPP92	);
 80046c4:	205b      	movs	r0, #91	; 0x5b
 80046c6:	f7ff fae1 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80046ca:	e00c      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 367	:
		case 368	:
		case 369	:
		case 370	:
			VPP_ApplyPreset_Fast( VPP93	);
 80046cc:	205c      	movs	r0, #92	; 0x5c
 80046ce:	f7ff fadd 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80046d2:	e008      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 371	:
		case 372	:
		case 373	:
		case 374	:
			VPP_ApplyPreset_Fast( VPP94	);
 80046d4:	205d      	movs	r0, #93	; 0x5d
 80046d6:	f7ff fad9 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80046da:	e004      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 375	:
		case 376	:
		case 377	:
		case 378	:
			VPP_ApplyPreset_Fast( VPP95	);
 80046dc:	205e      	movs	r0, #94	; 0x5e
 80046de:	f7ff fad5 	bl	8003c8c <VPP_ApplyPreset_Fast>
			break;
 80046e2:	e000      	b.n	80046e6 <VPP_ModifyOutput+0x902>
		case 390	:
			VPP_ApplyPreset_Fast( VPP98	);
			break;
*/
		default:
			break;
 80046e4:	bf00      	nop
	}
}
 80046e6:	bf00      	nop
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop

080046f0 <VPP_GetVppPresetObject>:
 *	@param None
 *	@retval pointer to VppEncoderPreset_t struct
 *
 */
VppEncoderPreset_t * VPP_GetVppPresetObject()
{
 80046f0:	b480      	push	{r7}
 80046f2:	af00      	add	r7, sp, #0
	return pVppEncoderPreset;
 80046f4:	4b03      	ldr	r3, [pc, #12]	; (8004704 <VPP_GetVppPresetObject+0x14>)
 80046f6:	681b      	ldr	r3, [r3, #0]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	46bd      	mov	sp, r7
 80046fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004700:	4770      	bx	lr
 8004702:	bf00      	nop
 8004704:	20000c34 	.word	0x20000c34

08004708 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08c      	sub	sp, #48	; 0x30
 800470c:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 800470e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004712:	2200      	movs	r2, #0
 8004714:	601a      	str	r2, [r3, #0]
 8004716:	605a      	str	r2, [r3, #4]
 8004718:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800471a:	1d3b      	adds	r3, r7, #4
 800471c:	2220      	movs	r2, #32
 800471e:	2100      	movs	r1, #0
 8004720:	4618      	mov	r0, r3
 8004722:	f007 ff23 	bl	800c56c <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8004726:	4b32      	ldr	r3, [pc, #200]	; (80047f0 <MX_ADC1_Init+0xe8>)
 8004728:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800472c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800472e:	4b30      	ldr	r3, [pc, #192]	; (80047f0 <MX_ADC1_Init+0xe8>)
 8004730:	2200      	movs	r2, #0
 8004732:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8004734:	4b2e      	ldr	r3, [pc, #184]	; (80047f0 <MX_ADC1_Init+0xe8>)
 8004736:	2200      	movs	r2, #0
 8004738:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800473a:	4b2d      	ldr	r3, [pc, #180]	; (80047f0 <MX_ADC1_Init+0xe8>)
 800473c:	2200      	movs	r2, #0
 800473e:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8004740:	4b2b      	ldr	r3, [pc, #172]	; (80047f0 <MX_ADC1_Init+0xe8>)
 8004742:	2200      	movs	r2, #0
 8004744:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8004746:	4b2a      	ldr	r3, [pc, #168]	; (80047f0 <MX_ADC1_Init+0xe8>)
 8004748:	2200      	movs	r2, #0
 800474a:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800474c:	4b28      	ldr	r3, [pc, #160]	; (80047f0 <MX_ADC1_Init+0xe8>)
 800474e:	2204      	movs	r2, #4
 8004750:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8004752:	4b27      	ldr	r3, [pc, #156]	; (80047f0 <MX_ADC1_Init+0xe8>)
 8004754:	2200      	movs	r2, #0
 8004756:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8004758:	4b25      	ldr	r3, [pc, #148]	; (80047f0 <MX_ADC1_Init+0xe8>)
 800475a:	2201      	movs	r2, #1
 800475c:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800475e:	4b24      	ldr	r3, [pc, #144]	; (80047f0 <MX_ADC1_Init+0xe8>)
 8004760:	2201      	movs	r2, #1
 8004762:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8004764:	4b22      	ldr	r3, [pc, #136]	; (80047f0 <MX_ADC1_Init+0xe8>)
 8004766:	2200      	movs	r2, #0
 8004768:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800476c:	4b20      	ldr	r3, [pc, #128]	; (80047f0 <MX_ADC1_Init+0xe8>)
 800476e:	2200      	movs	r2, #0
 8004770:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004772:	4b1f      	ldr	r3, [pc, #124]	; (80047f0 <MX_ADC1_Init+0xe8>)
 8004774:	2200      	movs	r2, #0
 8004776:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8004778:	4b1d      	ldr	r3, [pc, #116]	; (80047f0 <MX_ADC1_Init+0xe8>)
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004780:	4b1b      	ldr	r3, [pc, #108]	; (80047f0 <MX_ADC1_Init+0xe8>)
 8004782:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004786:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8004788:	4b19      	ldr	r3, [pc, #100]	; (80047f0 <MX_ADC1_Init+0xe8>)
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004790:	4817      	ldr	r0, [pc, #92]	; (80047f0 <MX_ADC1_Init+0xe8>)
 8004792:	f001 ffd7 	bl	8006744 <HAL_ADC_Init>
 8004796:	4603      	mov	r3, r0
 8004798:	2b00      	cmp	r3, #0
 800479a:	d001      	beq.n	80047a0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 800479c:	f000 ff2c 	bl	80055f8 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80047a0:	2300      	movs	r3, #0
 80047a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80047a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80047a8:	4619      	mov	r1, r3
 80047aa:	4811      	ldr	r0, [pc, #68]	; (80047f0 <MX_ADC1_Init+0xe8>)
 80047ac:	f002 fd60 	bl	8007270 <HAL_ADCEx_MultiModeConfigChannel>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d001      	beq.n	80047ba <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80047b6:	f000 ff1f 	bl	80055f8 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80047ba:	4b0e      	ldr	r3, [pc, #56]	; (80047f4 <MX_ADC1_Init+0xec>)
 80047bc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80047be:	2306      	movs	r3, #6
 80047c0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80047c2:	2300      	movs	r3, #0
 80047c4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80047c6:	237f      	movs	r3, #127	; 0x7f
 80047c8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80047ca:	2304      	movs	r3, #4
 80047cc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80047ce:	2300      	movs	r3, #0
 80047d0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80047d2:	1d3b      	adds	r3, r7, #4
 80047d4:	4619      	mov	r1, r3
 80047d6:	4806      	ldr	r0, [pc, #24]	; (80047f0 <MX_ADC1_Init+0xe8>)
 80047d8:	f002 f974 	bl	8006ac4 <HAL_ADC_ConfigChannel>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d001      	beq.n	80047e6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80047e2:	f000 ff09 	bl	80055f8 <Error_Handler>
  }

}
 80047e6:	bf00      	nop
 80047e8:	3730      	adds	r7, #48	; 0x30
 80047ea:	46bd      	mov	sp, r7
 80047ec:	bd80      	pop	{r7, pc}
 80047ee:	bf00      	nop
 80047f0:	20002294 	.word	0x20002294
 80047f4:	0c900008 	.word	0x0c900008

080047f8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80047f8:	b580      	push	{r7, lr}
 80047fa:	b08a      	sub	sp, #40	; 0x28
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004800:	f107 0314 	add.w	r3, r7, #20
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	605a      	str	r2, [r3, #4]
 800480a:	609a      	str	r2, [r3, #8]
 800480c:	60da      	str	r2, [r3, #12]
 800480e:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004818:	d14f      	bne.n	80048ba <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 800481a:	4b2a      	ldr	r3, [pc, #168]	; (80048c4 <HAL_ADC_MspInit+0xcc>)
 800481c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800481e:	4a29      	ldr	r2, [pc, #164]	; (80048c4 <HAL_ADC_MspInit+0xcc>)
 8004820:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004824:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004826:	4b27      	ldr	r3, [pc, #156]	; (80048c4 <HAL_ADC_MspInit+0xcc>)
 8004828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800482a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800482e:	613b      	str	r3, [r7, #16]
 8004830:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004832:	4b24      	ldr	r3, [pc, #144]	; (80048c4 <HAL_ADC_MspInit+0xcc>)
 8004834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004836:	4a23      	ldr	r2, [pc, #140]	; (80048c4 <HAL_ADC_MspInit+0xcc>)
 8004838:	f043 0301 	orr.w	r3, r3, #1
 800483c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800483e:	4b21      	ldr	r3, [pc, #132]	; (80048c4 <HAL_ADC_MspInit+0xcc>)
 8004840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004842:	f003 0301 	and.w	r3, r3, #1
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800484a:	2304      	movs	r3, #4
 800484c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800484e:	2303      	movs	r3, #3
 8004850:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004852:	2300      	movs	r3, #0
 8004854:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004856:	f107 0314 	add.w	r3, r7, #20
 800485a:	4619      	mov	r1, r3
 800485c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004860:	f004 f8de 	bl	8008a20 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8004864:	4b18      	ldr	r3, [pc, #96]	; (80048c8 <HAL_ADC_MspInit+0xd0>)
 8004866:	4a19      	ldr	r2, [pc, #100]	; (80048cc <HAL_ADC_MspInit+0xd4>)
 8004868:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 800486a:	4b17      	ldr	r3, [pc, #92]	; (80048c8 <HAL_ADC_MspInit+0xd0>)
 800486c:	2205      	movs	r2, #5
 800486e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004870:	4b15      	ldr	r3, [pc, #84]	; (80048c8 <HAL_ADC_MspInit+0xd0>)
 8004872:	2200      	movs	r2, #0
 8004874:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004876:	4b14      	ldr	r3, [pc, #80]	; (80048c8 <HAL_ADC_MspInit+0xd0>)
 8004878:	2200      	movs	r2, #0
 800487a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800487c:	4b12      	ldr	r3, [pc, #72]	; (80048c8 <HAL_ADC_MspInit+0xd0>)
 800487e:	2280      	movs	r2, #128	; 0x80
 8004880:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004882:	4b11      	ldr	r3, [pc, #68]	; (80048c8 <HAL_ADC_MspInit+0xd0>)
 8004884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004888:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800488a:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <HAL_ADC_MspInit+0xd0>)
 800488c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004890:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004892:	4b0d      	ldr	r3, [pc, #52]	; (80048c8 <HAL_ADC_MspInit+0xd0>)
 8004894:	2220      	movs	r2, #32
 8004896:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004898:	4b0b      	ldr	r3, [pc, #44]	; (80048c8 <HAL_ADC_MspInit+0xd0>)
 800489a:	2200      	movs	r2, #0
 800489c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800489e:	480a      	ldr	r0, [pc, #40]	; (80048c8 <HAL_ADC_MspInit+0xd0>)
 80048a0:	f003 fdf2 	bl	8008488 <HAL_DMA_Init>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d001      	beq.n	80048ae <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 80048aa:	f000 fea5 	bl	80055f8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	4a05      	ldr	r2, [pc, #20]	; (80048c8 <HAL_ADC_MspInit+0xd0>)
 80048b2:	655a      	str	r2, [r3, #84]	; 0x54
 80048b4:	4a04      	ldr	r2, [pc, #16]	; (80048c8 <HAL_ADC_MspInit+0xd0>)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80048ba:	bf00      	nop
 80048bc:	3728      	adds	r7, #40	; 0x28
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	40021000 	.word	0x40021000
 80048c8:	20002300 	.word	0x20002300
 80048cc:	40020008 	.word	0x40020008

080048d0 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 80048d4:	4b0f      	ldr	r3, [pc, #60]	; (8004914 <MX_COMP1_Init+0x44>)
 80048d6:	4a10      	ldr	r2, [pc, #64]	; (8004918 <MX_COMP1_Init+0x48>)
 80048d8:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 80048da:	4b0e      	ldr	r3, [pc, #56]	; (8004914 <MX_COMP1_Init+0x44>)
 80048dc:	2200      	movs	r2, #0
 80048de:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 80048e0:	4b0c      	ldr	r3, [pc, #48]	; (8004914 <MX_COMP1_Init+0x44>)
 80048e2:	4a0e      	ldr	r2, [pc, #56]	; (800491c <MX_COMP1_Init+0x4c>)
 80048e4:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 80048e6:	4b0b      	ldr	r3, [pc, #44]	; (8004914 <MX_COMP1_Init+0x44>)
 80048e8:	2200      	movs	r2, #0
 80048ea:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 80048ec:	4b09      	ldr	r3, [pc, #36]	; (8004914 <MX_COMP1_Init+0x44>)
 80048ee:	2200      	movs	r2, #0
 80048f0:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 80048f2:	4b08      	ldr	r3, [pc, #32]	; (8004914 <MX_COMP1_Init+0x44>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 80048f8:	4b06      	ldr	r3, [pc, #24]	; (8004914 <MX_COMP1_Init+0x44>)
 80048fa:	2200      	movs	r2, #0
 80048fc:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 80048fe:	4805      	ldr	r0, [pc, #20]	; (8004914 <MX_COMP1_Init+0x44>)
 8004900:	f002 ff0a 	bl	8007718 <HAL_COMP_Init>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d001      	beq.n	800490e <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 800490a:	f000 fe75 	bl	80055f8 <Error_Handler>
  }

}
 800490e:	bf00      	nop
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	20002360 	.word	0x20002360
 8004918:	40010200 	.word	0x40010200
 800491c:	00800030 	.word	0x00800030

08004920 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b088      	sub	sp, #32
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004928:	f107 030c 	add.w	r3, r7, #12
 800492c:	2200      	movs	r2, #0
 800492e:	601a      	str	r2, [r3, #0]
 8004930:	605a      	str	r2, [r3, #4]
 8004932:	609a      	str	r2, [r3, #8]
 8004934:	60da      	str	r2, [r3, #12]
 8004936:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a0f      	ldr	r2, [pc, #60]	; (800497c <HAL_COMP_MspInit+0x5c>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d118      	bne.n	8004974 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004942:	4b0f      	ldr	r3, [pc, #60]	; (8004980 <HAL_COMP_MspInit+0x60>)
 8004944:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004946:	4a0e      	ldr	r2, [pc, #56]	; (8004980 <HAL_COMP_MspInit+0x60>)
 8004948:	f043 0301 	orr.w	r3, r3, #1
 800494c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800494e:	4b0c      	ldr	r3, [pc, #48]	; (8004980 <HAL_COMP_MspInit+0x60>)
 8004950:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004952:	f003 0301 	and.w	r3, r3, #1
 8004956:	60bb      	str	r3, [r7, #8]
 8004958:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800495a:	2302      	movs	r3, #2
 800495c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800495e:	2303      	movs	r3, #3
 8004960:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004962:	2300      	movs	r3, #0
 8004964:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004966:	f107 030c 	add.w	r3, r7, #12
 800496a:	4619      	mov	r1, r3
 800496c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004970:	f004 f856 	bl	8008a20 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8004974:	bf00      	nop
 8004976:	3720      	adds	r7, #32
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}
 800497c:	40010200 	.word	0x40010200
 8004980:	40021000 	.word	0x40021000

08004984 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	b08c      	sub	sp, #48	; 0x30
 8004988:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800498a:	463b      	mov	r3, r7
 800498c:	2230      	movs	r2, #48	; 0x30
 800498e:	2100      	movs	r1, #0
 8004990:	4618      	mov	r0, r3
 8004992:	f007 fdeb 	bl	800c56c <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8004996:	4b1e      	ldr	r3, [pc, #120]	; (8004a10 <MX_DAC1_Init+0x8c>)
 8004998:	4a1e      	ldr	r2, [pc, #120]	; (8004a14 <MX_DAC1_Init+0x90>)
 800499a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800499c:	481c      	ldr	r0, [pc, #112]	; (8004a10 <MX_DAC1_Init+0x8c>)
 800499e:	f003 f95e 	bl	8007c5e <HAL_DAC_Init>
 80049a2:	4603      	mov	r3, r0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d001      	beq.n	80049ac <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80049a8:	f000 fe26 	bl	80055f8 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80049ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80049b0:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80049b2:	2300      	movs	r3, #0
 80049b4:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80049b6:	2300      	movs	r3, #0
 80049b8:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80049ba:	2300      	movs	r3, #0
 80049bc:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80049be:	2306      	movs	r3, #6
 80049c0:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80049c6:	2300      	movs	r3, #0
 80049c8:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80049ca:	2301      	movs	r3, #1
 80049cc:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80049ce:	2300      	movs	r3, #0
 80049d0:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80049d2:	463b      	mov	r3, r7
 80049d4:	2200      	movs	r2, #0
 80049d6:	4619      	mov	r1, r3
 80049d8:	480d      	ldr	r0, [pc, #52]	; (8004a10 <MX_DAC1_Init+0x8c>)
 80049da:	f003 fb1f 	bl	800801c <HAL_DAC_ConfigChannel>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d001      	beq.n	80049e8 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 80049e4:	f000 fe08 	bl	80055f8 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80049e8:	2300      	movs	r3, #0
 80049ea:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80049ec:	2301      	movs	r3, #1
 80049ee:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80049f0:	463b      	mov	r3, r7
 80049f2:	2210      	movs	r2, #16
 80049f4:	4619      	mov	r1, r3
 80049f6:	4806      	ldr	r0, [pc, #24]	; (8004a10 <MX_DAC1_Init+0x8c>)
 80049f8:	f003 fb10 	bl	800801c <HAL_DAC_ConfigChannel>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d001      	beq.n	8004a06 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8004a02:	f000 fdf9 	bl	80055f8 <Error_Handler>
  }

}
 8004a06:	bf00      	nop
 8004a08:	3730      	adds	r7, #48	; 0x30
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	20002398 	.word	0x20002398
 8004a14:	50000800 	.word	0x50000800

08004a18 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08c      	sub	sp, #48	; 0x30
 8004a1c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8004a1e:	463b      	mov	r3, r7
 8004a20:	2230      	movs	r2, #48	; 0x30
 8004a22:	2100      	movs	r1, #0
 8004a24:	4618      	mov	r0, r3
 8004a26:	f007 fda1 	bl	800c56c <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8004a2a:	4b16      	ldr	r3, [pc, #88]	; (8004a84 <MX_DAC2_Init+0x6c>)
 8004a2c:	4a16      	ldr	r2, [pc, #88]	; (8004a88 <MX_DAC2_Init+0x70>)
 8004a2e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8004a30:	4814      	ldr	r0, [pc, #80]	; (8004a84 <MX_DAC2_Init+0x6c>)
 8004a32:	f003 f914 	bl	8007c5e <HAL_DAC_Init>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8004a3c:	f000 fddc 	bl	80055f8 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004a40:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004a44:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8004a46:	2300      	movs	r3, #0
 8004a48:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8004a52:	2306      	movs	r3, #6
 8004a54:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8004a56:	2300      	movs	r3, #0
 8004a58:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8004a62:	2300      	movs	r3, #0
 8004a64:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8004a66:	463b      	mov	r3, r7
 8004a68:	2200      	movs	r2, #0
 8004a6a:	4619      	mov	r1, r3
 8004a6c:	4805      	ldr	r0, [pc, #20]	; (8004a84 <MX_DAC2_Init+0x6c>)
 8004a6e:	f003 fad5 	bl	800801c <HAL_DAC_ConfigChannel>
 8004a72:	4603      	mov	r3, r0
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d001      	beq.n	8004a7c <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8004a78:	f000 fdbe 	bl	80055f8 <Error_Handler>
  }

}
 8004a7c:	bf00      	nop
 8004a7e:	3730      	adds	r7, #48	; 0x30
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	20002384 	.word	0x20002384
 8004a88:	50000c00 	.word	0x50000c00

08004a8c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b08c      	sub	sp, #48	; 0x30
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a94:	f107 031c 	add.w	r3, r7, #28
 8004a98:	2200      	movs	r2, #0
 8004a9a:	601a      	str	r2, [r3, #0]
 8004a9c:	605a      	str	r2, [r3, #4]
 8004a9e:	609a      	str	r2, [r3, #8]
 8004aa0:	60da      	str	r2, [r3, #12]
 8004aa2:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a56      	ldr	r2, [pc, #344]	; (8004c04 <HAL_DAC_MspInit+0x178>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d150      	bne.n	8004b50 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8004aae:	4b56      	ldr	r3, [pc, #344]	; (8004c08 <HAL_DAC_MspInit+0x17c>)
 8004ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ab2:	4a55      	ldr	r2, [pc, #340]	; (8004c08 <HAL_DAC_MspInit+0x17c>)
 8004ab4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ab8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004aba:	4b53      	ldr	r3, [pc, #332]	; (8004c08 <HAL_DAC_MspInit+0x17c>)
 8004abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004abe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ac2:	61bb      	str	r3, [r7, #24]
 8004ac4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ac6:	4b50      	ldr	r3, [pc, #320]	; (8004c08 <HAL_DAC_MspInit+0x17c>)
 8004ac8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aca:	4a4f      	ldr	r2, [pc, #316]	; (8004c08 <HAL_DAC_MspInit+0x17c>)
 8004acc:	f043 0301 	orr.w	r3, r3, #1
 8004ad0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004ad2:	4b4d      	ldr	r3, [pc, #308]	; (8004c08 <HAL_DAC_MspInit+0x17c>)
 8004ad4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	617b      	str	r3, [r7, #20]
 8004adc:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004ade:	2330      	movs	r3, #48	; 0x30
 8004ae0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aea:	f107 031c 	add.w	r3, r7, #28
 8004aee:	4619      	mov	r1, r3
 8004af0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004af4:	f003 ff94 	bl	8008a20 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8004af8:	4b44      	ldr	r3, [pc, #272]	; (8004c0c <HAL_DAC_MspInit+0x180>)
 8004afa:	4a45      	ldr	r2, [pc, #276]	; (8004c10 <HAL_DAC_MspInit+0x184>)
 8004afc:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8004afe:	4b43      	ldr	r3, [pc, #268]	; (8004c0c <HAL_DAC_MspInit+0x180>)
 8004b00:	2206      	movs	r2, #6
 8004b02:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004b04:	4b41      	ldr	r3, [pc, #260]	; (8004c0c <HAL_DAC_MspInit+0x180>)
 8004b06:	2210      	movs	r2, #16
 8004b08:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004b0a:	4b40      	ldr	r3, [pc, #256]	; (8004c0c <HAL_DAC_MspInit+0x180>)
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004b10:	4b3e      	ldr	r3, [pc, #248]	; (8004c0c <HAL_DAC_MspInit+0x180>)
 8004b12:	2280      	movs	r2, #128	; 0x80
 8004b14:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004b16:	4b3d      	ldr	r3, [pc, #244]	; (8004c0c <HAL_DAC_MspInit+0x180>)
 8004b18:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004b1c:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004b1e:	4b3b      	ldr	r3, [pc, #236]	; (8004c0c <HAL_DAC_MspInit+0x180>)
 8004b20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b24:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8004b26:	4b39      	ldr	r3, [pc, #228]	; (8004c0c <HAL_DAC_MspInit+0x180>)
 8004b28:	2220      	movs	r2, #32
 8004b2a:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8004b2c:	4b37      	ldr	r3, [pc, #220]	; (8004c0c <HAL_DAC_MspInit+0x180>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8004b32:	4836      	ldr	r0, [pc, #216]	; (8004c0c <HAL_DAC_MspInit+0x180>)
 8004b34:	f003 fca8 	bl	8008488 <HAL_DMA_Init>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d001      	beq.n	8004b42 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8004b3e:	f000 fd5b 	bl	80055f8 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	4a31      	ldr	r2, [pc, #196]	; (8004c0c <HAL_DAC_MspInit+0x180>)
 8004b46:	609a      	str	r2, [r3, #8]
 8004b48:	4a30      	ldr	r2, [pc, #192]	; (8004c0c <HAL_DAC_MspInit+0x180>)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8004b4e:	e054      	b.n	8004bfa <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	4a2f      	ldr	r2, [pc, #188]	; (8004c14 <HAL_DAC_MspInit+0x188>)
 8004b56:	4293      	cmp	r3, r2
 8004b58:	d14f      	bne.n	8004bfa <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8004b5a:	4b2b      	ldr	r3, [pc, #172]	; (8004c08 <HAL_DAC_MspInit+0x17c>)
 8004b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b5e:	4a2a      	ldr	r2, [pc, #168]	; (8004c08 <HAL_DAC_MspInit+0x17c>)
 8004b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b66:	4b28      	ldr	r3, [pc, #160]	; (8004c08 <HAL_DAC_MspInit+0x17c>)
 8004b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b6e:	613b      	str	r3, [r7, #16]
 8004b70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b72:	4b25      	ldr	r3, [pc, #148]	; (8004c08 <HAL_DAC_MspInit+0x17c>)
 8004b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b76:	4a24      	ldr	r2, [pc, #144]	; (8004c08 <HAL_DAC_MspInit+0x17c>)
 8004b78:	f043 0301 	orr.w	r3, r3, #1
 8004b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b7e:	4b22      	ldr	r3, [pc, #136]	; (8004c08 <HAL_DAC_MspInit+0x17c>)
 8004b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b82:	f003 0301 	and.w	r3, r3, #1
 8004b86:	60fb      	str	r3, [r7, #12]
 8004b88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004b8a:	2340      	movs	r3, #64	; 0x40
 8004b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b92:	2300      	movs	r3, #0
 8004b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b96:	f107 031c 	add.w	r3, r7, #28
 8004b9a:	4619      	mov	r1, r3
 8004b9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ba0:	f003 ff3e 	bl	8008a20 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8004ba4:	4b1c      	ldr	r3, [pc, #112]	; (8004c18 <HAL_DAC_MspInit+0x18c>)
 8004ba6:	4a1d      	ldr	r2, [pc, #116]	; (8004c1c <HAL_DAC_MspInit+0x190>)
 8004ba8:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8004baa:	4b1b      	ldr	r3, [pc, #108]	; (8004c18 <HAL_DAC_MspInit+0x18c>)
 8004bac:	2229      	movs	r2, #41	; 0x29
 8004bae:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004bb0:	4b19      	ldr	r3, [pc, #100]	; (8004c18 <HAL_DAC_MspInit+0x18c>)
 8004bb2:	2210      	movs	r2, #16
 8004bb4:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004bb6:	4b18      	ldr	r3, [pc, #96]	; (8004c18 <HAL_DAC_MspInit+0x18c>)
 8004bb8:	2200      	movs	r2, #0
 8004bba:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004bbc:	4b16      	ldr	r3, [pc, #88]	; (8004c18 <HAL_DAC_MspInit+0x18c>)
 8004bbe:	2280      	movs	r2, #128	; 0x80
 8004bc0:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004bc2:	4b15      	ldr	r3, [pc, #84]	; (8004c18 <HAL_DAC_MspInit+0x18c>)
 8004bc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bc8:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004bca:	4b13      	ldr	r3, [pc, #76]	; (8004c18 <HAL_DAC_MspInit+0x18c>)
 8004bcc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bd0:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8004bd2:	4b11      	ldr	r3, [pc, #68]	; (8004c18 <HAL_DAC_MspInit+0x18c>)
 8004bd4:	2220      	movs	r2, #32
 8004bd6:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8004bd8:	4b0f      	ldr	r3, [pc, #60]	; (8004c18 <HAL_DAC_MspInit+0x18c>)
 8004bda:	2200      	movs	r2, #0
 8004bdc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8004bde:	480e      	ldr	r0, [pc, #56]	; (8004c18 <HAL_DAC_MspInit+0x18c>)
 8004be0:	f003 fc52 	bl	8008488 <HAL_DMA_Init>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d001      	beq.n	8004bee <HAL_DAC_MspInit+0x162>
      Error_Handler();
 8004bea:	f000 fd05 	bl	80055f8 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a09      	ldr	r2, [pc, #36]	; (8004c18 <HAL_DAC_MspInit+0x18c>)
 8004bf2:	609a      	str	r2, [r3, #8]
 8004bf4:	4a08      	ldr	r2, [pc, #32]	; (8004c18 <HAL_DAC_MspInit+0x18c>)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6293      	str	r3, [r2, #40]	; 0x28
}
 8004bfa:	bf00      	nop
 8004bfc:	3730      	adds	r7, #48	; 0x30
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	bd80      	pop	{r7, pc}
 8004c02:	bf00      	nop
 8004c04:	50000800 	.word	0x50000800
 8004c08:	40021000 	.word	0x40021000
 8004c0c:	200023ac 	.word	0x200023ac
 8004c10:	4002001c 	.word	0x4002001c
 8004c14:	50000c00 	.word	0x50000c00
 8004c18:	2000240c 	.word	0x2000240c
 8004c1c:	40020030 	.word	0x40020030

08004c20 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8004c26:	4b1a      	ldr	r3, [pc, #104]	; (8004c90 <MX_DMA_Init+0x70>)
 8004c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c2a:	4a19      	ldr	r2, [pc, #100]	; (8004c90 <MX_DMA_Init+0x70>)
 8004c2c:	f043 0304 	orr.w	r3, r3, #4
 8004c30:	6493      	str	r3, [r2, #72]	; 0x48
 8004c32:	4b17      	ldr	r3, [pc, #92]	; (8004c90 <MX_DMA_Init+0x70>)
 8004c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c36:	f003 0304 	and.w	r3, r3, #4
 8004c3a:	607b      	str	r3, [r7, #4]
 8004c3c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004c3e:	4b14      	ldr	r3, [pc, #80]	; (8004c90 <MX_DMA_Init+0x70>)
 8004c40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c42:	4a13      	ldr	r2, [pc, #76]	; (8004c90 <MX_DMA_Init+0x70>)
 8004c44:	f043 0301 	orr.w	r3, r3, #1
 8004c48:	6493      	str	r3, [r2, #72]	; 0x48
 8004c4a:	4b11      	ldr	r3, [pc, #68]	; (8004c90 <MX_DMA_Init+0x70>)
 8004c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c4e:	f003 0301 	and.w	r3, r3, #1
 8004c52:	603b      	str	r3, [r7, #0]
 8004c54:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8004c56:	2200      	movs	r2, #0
 8004c58:	2101      	movs	r1, #1
 8004c5a:	200b      	movs	r0, #11
 8004c5c:	f002 ffcb 	bl	8007bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8004c60:	200b      	movs	r0, #11
 8004c62:	f002 ffe2 	bl	8007c2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8004c66:	2200      	movs	r2, #0
 8004c68:	2100      	movs	r1, #0
 8004c6a:	200c      	movs	r0, #12
 8004c6c:	f002 ffc3 	bl	8007bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8004c70:	200c      	movs	r0, #12
 8004c72:	f002 ffda 	bl	8007c2a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8004c76:	2200      	movs	r2, #0
 8004c78:	2100      	movs	r1, #0
 8004c7a:	200d      	movs	r0, #13
 8004c7c:	f002 ffbb 	bl	8007bf6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8004c80:	200d      	movs	r0, #13
 8004c82:	f002 ffd2 	bl	8007c2a <HAL_NVIC_EnableIRQ>

}
 8004c86:	bf00      	nop
 8004c88:	3708      	adds	r7, #8
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}
 8004c8e:	bf00      	nop
 8004c90:	40021000 	.word	0x40021000

08004c94 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 8004c98:	4b20      	ldr	r3, [pc, #128]	; (8004d1c <update_dc_bias_sweep+0x88>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d006      	beq.n	8004cae <update_dc_bias_sweep+0x1a>
 8004ca0:	4b1f      	ldr	r3, [pc, #124]	; (8004d20 <update_dc_bias_sweep+0x8c>)
 8004ca2:	881b      	ldrh	r3, [r3, #0]
 8004ca4:	3301      	adds	r3, #1
 8004ca6:	b29a      	uxth	r2, r3
 8004ca8:	4b1d      	ldr	r3, [pc, #116]	; (8004d20 <update_dc_bias_sweep+0x8c>)
 8004caa:	801a      	strh	r2, [r3, #0]
 8004cac:	e005      	b.n	8004cba <update_dc_bias_sweep+0x26>
 8004cae:	4b1c      	ldr	r3, [pc, #112]	; (8004d20 <update_dc_bias_sweep+0x8c>)
 8004cb0:	881b      	ldrh	r3, [r3, #0]
 8004cb2:	3b01      	subs	r3, #1
 8004cb4:	b29a      	uxth	r2, r3
 8004cb6:	4b1a      	ldr	r3, [pc, #104]	; (8004d20 <update_dc_bias_sweep+0x8c>)
 8004cb8:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 8004cba:	4b19      	ldr	r3, [pc, #100]	; (8004d20 <update_dc_bias_sweep+0x8c>)
 8004cbc:	881b      	ldrh	r3, [r3, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d10a      	bne.n	8004cd8 <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 8004cc2:	4b18      	ldr	r3, [pc, #96]	; (8004d24 <update_dc_bias_sweep+0x90>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d003      	beq.n	8004cd2 <update_dc_bias_sweep+0x3e>
 8004cca:	4b16      	ldr	r3, [pc, #88]	; (8004d24 <update_dc_bias_sweep+0x90>)
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]
 8004cd0:	e002      	b.n	8004cd8 <update_dc_bias_sweep+0x44>
 8004cd2:	4b14      	ldr	r3, [pc, #80]	; (8004d24 <update_dc_bias_sweep+0x90>)
 8004cd4:	2201      	movs	r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 8004cd8:	4b11      	ldr	r3, [pc, #68]	; (8004d20 <update_dc_bias_sweep+0x8c>)
 8004cda:	881b      	ldrh	r3, [r3, #0]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d102      	bne.n	8004ce6 <update_dc_bias_sweep+0x52>
 8004ce0:	4b0e      	ldr	r3, [pc, #56]	; (8004d1c <update_dc_bias_sweep+0x88>)
 8004ce2:	2201      	movs	r2, #1
 8004ce4:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 8004ce6:	4b0e      	ldr	r3, [pc, #56]	; (8004d20 <update_dc_bias_sweep+0x8c>)
 8004ce8:	881b      	ldrh	r3, [r3, #0]
 8004cea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004cee:	d302      	bcc.n	8004cf6 <update_dc_bias_sweep+0x62>
 8004cf0:	4b0a      	ldr	r3, [pc, #40]	; (8004d1c <update_dc_bias_sweep+0x88>)
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 8004cf6:	4b0b      	ldr	r3, [pc, #44]	; (8004d24 <update_dc_bias_sweep+0x90>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	2108      	movs	r1, #8
 8004d00:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004d04:	f004 f80e 	bl	8008d24 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 8004d08:	4b05      	ldr	r3, [pc, #20]	; (8004d20 <update_dc_bias_sweep+0x8c>)
 8004d0a:	881b      	ldrh	r3, [r3, #0]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	2110      	movs	r1, #16
 8004d10:	4805      	ldr	r0, [pc, #20]	; (8004d28 <update_dc_bias_sweep+0x94>)
 8004d12:	f003 f931 	bl	8007f78 <HAL_DAC_SetValue>
}
 8004d16:	bf00      	nop
 8004d18:	bd80      	pop	{r7, pc}
 8004d1a:	bf00      	nop
 8004d1c:	20000c38 	.word	0x20000c38
 8004d20:	20001eb4 	.word	0x20001eb4
 8004d24:	20001eb8 	.word	0x20001eb8
 8004d28:	20002398 	.word	0x20002398

08004d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d30:	4b04      	ldr	r3, [pc, #16]	; (8004d44 <__NVIC_GetPriorityGrouping+0x18>)
 8004d32:	68db      	ldr	r3, [r3, #12]
 8004d34:	0a1b      	lsrs	r3, r3, #8
 8004d36:	f003 0307 	and.w	r3, r3, #7
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	e000ed00 	.word	0xe000ed00

08004d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b083      	sub	sp, #12
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	4603      	mov	r3, r0
 8004d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	db0b      	blt.n	8004d72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d5a:	79fb      	ldrb	r3, [r7, #7]
 8004d5c:	f003 021f 	and.w	r2, r3, #31
 8004d60:	4907      	ldr	r1, [pc, #28]	; (8004d80 <__NVIC_EnableIRQ+0x38>)
 8004d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d66:	095b      	lsrs	r3, r3, #5
 8004d68:	2001      	movs	r0, #1
 8004d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8004d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004d72:	bf00      	nop
 8004d74:	370c      	adds	r7, #12
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	e000e100 	.word	0xe000e100

08004d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b083      	sub	sp, #12
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	6039      	str	r1, [r7, #0]
 8004d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	db0a      	blt.n	8004dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	b2da      	uxtb	r2, r3
 8004d9c:	490c      	ldr	r1, [pc, #48]	; (8004dd0 <__NVIC_SetPriority+0x4c>)
 8004d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004da2:	0112      	lsls	r2, r2, #4
 8004da4:	b2d2      	uxtb	r2, r2
 8004da6:	440b      	add	r3, r1
 8004da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004dac:	e00a      	b.n	8004dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	4908      	ldr	r1, [pc, #32]	; (8004dd4 <__NVIC_SetPriority+0x50>)
 8004db4:	79fb      	ldrb	r3, [r7, #7]
 8004db6:	f003 030f 	and.w	r3, r3, #15
 8004dba:	3b04      	subs	r3, #4
 8004dbc:	0112      	lsls	r2, r2, #4
 8004dbe:	b2d2      	uxtb	r2, r2
 8004dc0:	440b      	add	r3, r1
 8004dc2:	761a      	strb	r2, [r3, #24]
}
 8004dc4:	bf00      	nop
 8004dc6:	370c      	adds	r7, #12
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dce:	4770      	bx	lr
 8004dd0:	e000e100 	.word	0xe000e100
 8004dd4:	e000ed00 	.word	0xe000ed00

08004dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b089      	sub	sp, #36	; 0x24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	60b9      	str	r1, [r7, #8]
 8004de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	f1c3 0307 	rsb	r3, r3, #7
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	bf28      	it	cs
 8004df6:	2304      	movcs	r3, #4
 8004df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	3304      	adds	r3, #4
 8004dfe:	2b06      	cmp	r3, #6
 8004e00:	d902      	bls.n	8004e08 <NVIC_EncodePriority+0x30>
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	3b03      	subs	r3, #3
 8004e06:	e000      	b.n	8004e0a <NVIC_EncodePriority+0x32>
 8004e08:	2300      	movs	r3, #0
 8004e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e0c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	43da      	mvns	r2, r3
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	401a      	ands	r2, r3
 8004e1c:	697b      	ldr	r3, [r7, #20]
 8004e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e20:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004e24:	697b      	ldr	r3, [r7, #20]
 8004e26:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2a:	43d9      	mvns	r1, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e30:	4313      	orrs	r3, r2
         );
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3724      	adds	r7, #36	; 0x24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
	...

08004e40 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 8004e4a:	4a14      	ldr	r2, [pc, #80]	; (8004e9c <LL_SYSCFG_SetEXTISource+0x5c>)
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	f003 0303 	and.w	r3, r3, #3
 8004e52:	3302      	adds	r3, #2
 8004e54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	0c1b      	lsrs	r3, r3, #16
 8004e5c:	43db      	mvns	r3, r3
 8004e5e:	ea02 0103 	and.w	r1, r2, r3
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	0c1b      	lsrs	r3, r3, #16
 8004e66:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	fa93 f3a3 	rbit	r3, r3
 8004e6e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004e70:	68bb      	ldr	r3, [r7, #8]
 8004e72:	fab3 f383 	clz	r3, r3
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	f003 031f 	and.w	r3, r3, #31
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	409a      	lsls	r2, r3
 8004e80:	4806      	ldr	r0, [pc, #24]	; (8004e9c <LL_SYSCFG_SetEXTISource+0x5c>)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	f003 0303 	and.w	r3, r3, #3
 8004e88:	430a      	orrs	r2, r1
 8004e8a:	3302      	adds	r3, #2
 8004e8c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8004e90:	bf00      	nop
 8004e92:	3714      	adds	r7, #20
 8004e94:	46bd      	mov	sp, r7
 8004e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9a:	4770      	bx	lr
 8004e9c:	40010000 	.word	0x40010000

08004ea0 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b089      	sub	sp, #36	; 0x24
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	68bb      	ldr	r3, [r7, #8]
 8004eb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	fa93 f3a3 	rbit	r3, r3
 8004eba:	613b      	str	r3, [r7, #16]
  return result;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	fab3 f383 	clz	r3, r3
 8004ec2:	b2db      	uxtb	r3, r3
 8004ec4:	005b      	lsls	r3, r3, #1
 8004ec6:	2103      	movs	r1, #3
 8004ec8:	fa01 f303 	lsl.w	r3, r1, r3
 8004ecc:	43db      	mvns	r3, r3
 8004ece:	401a      	ands	r2, r3
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ed4:	69fb      	ldr	r3, [r7, #28]
 8004ed6:	fa93 f3a3 	rbit	r3, r3
 8004eda:	61bb      	str	r3, [r7, #24]
  return result;
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	fab3 f383 	clz	r3, r3
 8004ee2:	b2db      	uxtb	r3, r3
 8004ee4:	005b      	lsls	r3, r3, #1
 8004ee6:	6879      	ldr	r1, [r7, #4]
 8004ee8:	fa01 f303 	lsl.w	r3, r1, r3
 8004eec:	431a      	orrs	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	601a      	str	r2, [r3, #0]
}
 8004ef2:	bf00      	nop
 8004ef4:	3724      	adds	r7, #36	; 0x24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr

08004efe <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8004efe:	b480      	push	{r7}
 8004f00:	b089      	sub	sp, #36	; 0x24
 8004f02:	af00      	add	r7, sp, #0
 8004f04:	60f8      	str	r0, [r7, #12]
 8004f06:	60b9      	str	r1, [r7, #8]
 8004f08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	68da      	ldr	r2, [r3, #12]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	fa93 f3a3 	rbit	r3, r3
 8004f18:	613b      	str	r3, [r7, #16]
  return result;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	fab3 f383 	clz	r3, r3
 8004f20:	b2db      	uxtb	r3, r3
 8004f22:	005b      	lsls	r3, r3, #1
 8004f24:	2103      	movs	r1, #3
 8004f26:	fa01 f303 	lsl.w	r3, r1, r3
 8004f2a:	43db      	mvns	r3, r3
 8004f2c:	401a      	ands	r2, r3
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004f32:	69fb      	ldr	r3, [r7, #28]
 8004f34:	fa93 f3a3 	rbit	r3, r3
 8004f38:	61bb      	str	r3, [r7, #24]
  return result;
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	fab3 f383 	clz	r3, r3
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	6879      	ldr	r1, [r7, #4]
 8004f46:	fa01 f303 	lsl.w	r3, r1, r3
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	60da      	str	r2, [r3, #12]
}
 8004f50:	bf00      	nop
 8004f52:	3724      	adds	r7, #36	; 0x24
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr

08004f5c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8004f5c:	b480      	push	{r7}
 8004f5e:	b083      	sub	sp, #12
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	683a      	ldr	r2, [r7, #0]
 8004f6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004f6c:	bf00      	nop
 8004f6e:	370c      	adds	r7, #12
 8004f70:	46bd      	mov	sp, r7
 8004f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f76:	4770      	bx	lr

08004f78 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b085      	sub	sp, #20
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8004f80:	4b08      	ldr	r3, [pc, #32]	; (8004fa4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004f82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f84:	4907      	ldr	r1, [pc, #28]	; (8004fa4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8004f8c:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8004f8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	4013      	ands	r3, r2
 8004f94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8004f96:	68fb      	ldr	r3, [r7, #12]
}
 8004f98:	bf00      	nop
 8004f9a:	3714      	adds	r7, #20
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr
 8004fa4:	40021000 	.word	0x40021000

08004fa8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08a      	sub	sp, #40	; 0x28
 8004fac:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8004fae:	f107 031c 	add.w	r3, r7, #28
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	601a      	str	r2, [r3, #0]
 8004fb6:	605a      	str	r2, [r3, #4]
 8004fb8:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fba:	1d3b      	adds	r3, r7, #4
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	601a      	str	r2, [r3, #0]
 8004fc0:	605a      	str	r2, [r3, #4]
 8004fc2:	609a      	str	r2, [r3, #8]
 8004fc4:	60da      	str	r2, [r3, #12]
 8004fc6:	611a      	str	r2, [r3, #16]
 8004fc8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8004fca:	2004      	movs	r0, #4
 8004fcc:	f7ff ffd4 	bl	8004f78 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8004fd0:	2020      	movs	r0, #32
 8004fd2:	f7ff ffd1 	bl	8004f78 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8004fd6:	2001      	movs	r0, #1
 8004fd8:	f7ff ffce 	bl	8004f78 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8004fdc:	2002      	movs	r0, #2
 8004fde:	f7ff ffcb 	bl	8004f78 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8004fe2:	2108      	movs	r1, #8
 8004fe4:	48d3      	ldr	r0, [pc, #844]	; (8005334 <MX_GPIO_Init+0x38c>)
 8004fe6:	f7ff ffb9 	bl	8004f5c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 8004fea:	2108      	movs	r1, #8
 8004fec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ff0:	f7ff ffb4 	bl	8004f5c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8004ff4:	2110      	movs	r1, #16
 8004ff6:	48cf      	ldr	r0, [pc, #828]	; (8005334 <MX_GPIO_Init+0x38c>)
 8004ff8:	f7ff ffb0 	bl	8004f5c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8004ffc:	2120      	movs	r1, #32
 8004ffe:	48cd      	ldr	r0, [pc, #820]	; (8005334 <MX_GPIO_Init+0x38c>)
 8005000:	f7ff ffac 	bl	8004f5c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8005004:	2101      	movs	r1, #1
 8005006:	48cc      	ldr	r0, [pc, #816]	; (8005338 <MX_GPIO_Init+0x390>)
 8005008:	f7ff ffa8 	bl	8004f5c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 800500c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005010:	48c8      	ldr	r0, [pc, #800]	; (8005334 <MX_GPIO_Init+0x38c>)
 8005012:	f7ff ffa3 	bl	8004f5c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8005016:	f44f 7100 	mov.w	r1, #512	; 0x200
 800501a:	48c6      	ldr	r0, [pc, #792]	; (8005334 <MX_GPIO_Init+0x38c>)
 800501c:	f7ff ff9e 	bl	8004f5c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8005020:	2140      	movs	r1, #64	; 0x40
 8005022:	48c5      	ldr	r0, [pc, #788]	; (8005338 <MX_GPIO_Init+0x390>)
 8005024:	f7ff ff9a 	bl	8004f5c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 8005028:	2180      	movs	r1, #128	; 0x80
 800502a:	48c3      	ldr	r0, [pc, #780]	; (8005338 <MX_GPIO_Init+0x390>)
 800502c:	f7ff ff96 	bl	8004f5c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8005030:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005034:	48c0      	ldr	r0, [pc, #768]	; (8005338 <MX_GPIO_Init+0x390>)
 8005036:	f7ff ff91 	bl	8004f5c <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 800503a:	49c0      	ldr	r1, [pc, #768]	; (800533c <MX_GPIO_Init+0x394>)
 800503c:	2002      	movs	r0, #2
 800503e:	f7ff feff 	bl	8004e40 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8005042:	49bf      	ldr	r1, [pc, #764]	; (8005340 <MX_GPIO_Init+0x398>)
 8005044:	2002      	movs	r0, #2
 8005046:	f7ff fefb 	bl	8004e40 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 800504a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800504e:	2005      	movs	r0, #5
 8005050:	f7ff fef6 	bl	8004e40 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8005054:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8005058:	2005      	movs	r0, #5
 800505a:	f7ff fef1 	bl	8004e40 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 800505e:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8005062:	2002      	movs	r0, #2
 8005064:	f7ff feec 	bl	8004e40 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8005068:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800506c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 800506e:	2301      	movs	r3, #1
 8005070:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8005074:	2300      	movs	r3, #0
 8005076:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800507a:	2302      	movs	r3, #2
 800507c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8005080:	f107 031c 	add.w	r3, r7, #28
 8005084:	4618      	mov	r0, r3
 8005086:	f006 f821 	bl	800b0cc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 800508a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800508e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8005090:	2301      	movs	r3, #1
 8005092:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8005096:	2300      	movs	r3, #0
 8005098:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800509c:	2302      	movs	r3, #2
 800509e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80050a2:	f107 031c 	add.w	r3, r7, #28
 80050a6:	4618      	mov	r0, r3
 80050a8:	f006 f810 	bl	800b0cc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80050ac:	2301      	movs	r3, #1
 80050ae:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80050b0:	2301      	movs	r3, #1
 80050b2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80050b6:	2300      	movs	r3, #0
 80050b8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80050bc:	2302      	movs	r3, #2
 80050be:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80050c2:	f107 031c 	add.w	r3, r7, #28
 80050c6:	4618      	mov	r0, r3
 80050c8:	f006 f800 	bl	800b0cc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 80050cc:	2302      	movs	r3, #2
 80050ce:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80050d0:	2301      	movs	r3, #1
 80050d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80050d6:	2300      	movs	r3, #0
 80050d8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80050dc:	2302      	movs	r3, #2
 80050de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80050e2:	f107 031c 	add.w	r3, r7, #28
 80050e6:	4618      	mov	r0, r3
 80050e8:	f005 fff0 	bl	800b0cc <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 80050ec:	2304      	movs	r3, #4
 80050ee:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80050f0:	2301      	movs	r3, #1
 80050f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80050f6:	2300      	movs	r3, #0
 80050f8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80050fc:	2302      	movs	r3, #2
 80050fe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8005102:	f107 031c 	add.w	r3, r7, #28
 8005106:	4618      	mov	r0, r3
 8005108:	f005 ffe0 	bl	800b0cc <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 800510c:	2201      	movs	r2, #1
 800510e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005112:	4888      	ldr	r0, [pc, #544]	; (8005334 <MX_GPIO_Init+0x38c>)
 8005114:	f7ff fef3 	bl	8004efe <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8005118:	2201      	movs	r2, #1
 800511a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800511e:	4885      	ldr	r0, [pc, #532]	; (8005334 <MX_GPIO_Init+0x38c>)
 8005120:	f7ff feed 	bl	8004efe <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8005124:	2201      	movs	r2, #1
 8005126:	2101      	movs	r1, #1
 8005128:	4886      	ldr	r0, [pc, #536]	; (8005344 <MX_GPIO_Init+0x39c>)
 800512a:	f7ff fee8 	bl	8004efe <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 800512e:	2201      	movs	r2, #1
 8005130:	2102      	movs	r1, #2
 8005132:	4884      	ldr	r0, [pc, #528]	; (8005344 <MX_GPIO_Init+0x39c>)
 8005134:	f7ff fee3 	bl	8004efe <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8005138:	2201      	movs	r2, #1
 800513a:	2104      	movs	r1, #4
 800513c:	487d      	ldr	r0, [pc, #500]	; (8005334 <MX_GPIO_Init+0x38c>)
 800513e:	f7ff fede 	bl	8004efe <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8005142:	2200      	movs	r2, #0
 8005144:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005148:	487a      	ldr	r0, [pc, #488]	; (8005334 <MX_GPIO_Init+0x38c>)
 800514a:	f7ff fea9 	bl	8004ea0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 800514e:	2200      	movs	r2, #0
 8005150:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005154:	4877      	ldr	r0, [pc, #476]	; (8005334 <MX_GPIO_Init+0x38c>)
 8005156:	f7ff fea3 	bl	8004ea0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 800515a:	2200      	movs	r2, #0
 800515c:	2101      	movs	r1, #1
 800515e:	4879      	ldr	r0, [pc, #484]	; (8005344 <MX_GPIO_Init+0x39c>)
 8005160:	f7ff fe9e 	bl	8004ea0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8005164:	2200      	movs	r2, #0
 8005166:	2102      	movs	r1, #2
 8005168:	4876      	ldr	r0, [pc, #472]	; (8005344 <MX_GPIO_Init+0x39c>)
 800516a:	f7ff fe99 	bl	8004ea0 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 800516e:	2200      	movs	r2, #0
 8005170:	2104      	movs	r1, #4
 8005172:	4870      	ldr	r0, [pc, #448]	; (8005334 <MX_GPIO_Init+0x38c>)
 8005174:	f7ff fe94 	bl	8004ea0 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8005178:	2308      	movs	r3, #8
 800517a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800517c:	2301      	movs	r3, #1
 800517e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005180:	2300      	movs	r3, #0
 8005182:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005184:	2300      	movs	r3, #0
 8005186:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8005188:	2302      	movs	r3, #2
 800518a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 800518c:	1d3b      	adds	r3, r7, #4
 800518e:	4619      	mov	r1, r3
 8005190:	4868      	ldr	r0, [pc, #416]	; (8005334 <MX_GPIO_Init+0x38c>)
 8005192:	f006 f98e 	bl	800b4b2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8005196:	2308      	movs	r3, #8
 8005198:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800519a:	2301      	movs	r3, #1
 800519c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80051a2:	2300      	movs	r3, #0
 80051a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80051a6:	2300      	movs	r3, #0
 80051a8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 80051aa:	1d3b      	adds	r3, r7, #4
 80051ac:	4619      	mov	r1, r3
 80051ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80051b2:	f006 f97e 	bl	800b4b2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 80051b6:	2310      	movs	r3, #16
 80051b8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80051ba:	2301      	movs	r3, #1
 80051bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80051be:	2300      	movs	r3, #0
 80051c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80051c6:	2300      	movs	r3, #0
 80051c8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 80051ca:	1d3b      	adds	r3, r7, #4
 80051cc:	4619      	mov	r1, r3
 80051ce:	4859      	ldr	r0, [pc, #356]	; (8005334 <MX_GPIO_Init+0x38c>)
 80051d0:	f006 f96f 	bl	800b4b2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 80051d4:	2320      	movs	r3, #32
 80051d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80051d8:	2301      	movs	r3, #1
 80051da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80051dc:	2300      	movs	r3, #0
 80051de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80051e0:	2300      	movs	r3, #0
 80051e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80051e4:	2300      	movs	r3, #0
 80051e6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 80051e8:	1d3b      	adds	r3, r7, #4
 80051ea:	4619      	mov	r1, r3
 80051ec:	4851      	ldr	r0, [pc, #324]	; (8005334 <MX_GPIO_Init+0x38c>)
 80051ee:	f006 f960 	bl	800b4b2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 80051f2:	2301      	movs	r3, #1
 80051f4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80051f6:	2301      	movs	r3, #1
 80051f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80051fa:	2300      	movs	r3, #0
 80051fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80051fe:	2300      	movs	r3, #0
 8005200:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005202:	2300      	movs	r3, #0
 8005204:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8005206:	1d3b      	adds	r3, r7, #4
 8005208:	4619      	mov	r1, r3
 800520a:	484b      	ldr	r0, [pc, #300]	; (8005338 <MX_GPIO_Init+0x390>)
 800520c:	f006 f951 	bl	800b4b2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8005210:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005214:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005216:	2301      	movs	r3, #1
 8005218:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800521a:	2300      	movs	r3, #0
 800521c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800521e:	2300      	movs	r3, #0
 8005220:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005222:	2300      	movs	r3, #0
 8005224:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 8005226:	1d3b      	adds	r3, r7, #4
 8005228:	4619      	mov	r1, r3
 800522a:	4842      	ldr	r0, [pc, #264]	; (8005334 <MX_GPIO_Init+0x38c>)
 800522c:	f006 f941 	bl	800b4b2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8005230:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005234:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005236:	2301      	movs	r3, #1
 8005238:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800523a:	2300      	movs	r3, #0
 800523c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800523e:	2300      	movs	r3, #0
 8005240:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005242:	2300      	movs	r3, #0
 8005244:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8005246:	1d3b      	adds	r3, r7, #4
 8005248:	4619      	mov	r1, r3
 800524a:	483a      	ldr	r0, [pc, #232]	; (8005334 <MX_GPIO_Init+0x38c>)
 800524c:	f006 f931 	bl	800b4b2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8005250:	2340      	movs	r3, #64	; 0x40
 8005252:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005254:	2301      	movs	r3, #1
 8005256:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005258:	2303      	movs	r3, #3
 800525a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800525c:	2300      	movs	r3, #0
 800525e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005260:	2300      	movs	r3, #0
 8005262:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8005264:	1d3b      	adds	r3, r7, #4
 8005266:	4619      	mov	r1, r3
 8005268:	4833      	ldr	r0, [pc, #204]	; (8005338 <MX_GPIO_Init+0x390>)
 800526a:	f006 f922 	bl	800b4b2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 800526e:	2380      	movs	r3, #128	; 0x80
 8005270:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005272:	2301      	movs	r3, #1
 8005274:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005276:	2303      	movs	r3, #3
 8005278:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800527a:	2300      	movs	r3, #0
 800527c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800527e:	2300      	movs	r3, #0
 8005280:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8005282:	1d3b      	adds	r3, r7, #4
 8005284:	4619      	mov	r1, r3
 8005286:	482c      	ldr	r0, [pc, #176]	; (8005338 <MX_GPIO_Init+0x390>)
 8005288:	f006 f913 	bl	800b4b2 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 800528c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005290:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005292:	2301      	movs	r3, #1
 8005294:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8005296:	2303      	movs	r3, #3
 8005298:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800529a:	2300      	movs	r3, #0
 800529c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800529e:	2300      	movs	r3, #0
 80052a0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80052a2:	1d3b      	adds	r3, r7, #4
 80052a4:	4619      	mov	r1, r3
 80052a6:	4824      	ldr	r0, [pc, #144]	; (8005338 <MX_GPIO_Init+0x390>)
 80052a8:	f006 f903 	bl	800b4b2 <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80052ac:	f7ff fd3e 	bl	8004d2c <__NVIC_GetPriorityGrouping>
 80052b0:	4603      	mov	r3, r0
 80052b2:	2200      	movs	r2, #0
 80052b4:	2100      	movs	r1, #0
 80052b6:	4618      	mov	r0, r3
 80052b8:	f7ff fd8e 	bl	8004dd8 <NVIC_EncodePriority>
 80052bc:	4603      	mov	r3, r0
 80052be:	4619      	mov	r1, r3
 80052c0:	2006      	movs	r0, #6
 80052c2:	f7ff fd5f 	bl	8004d84 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 80052c6:	2006      	movs	r0, #6
 80052c8:	f7ff fd3e 	bl	8004d48 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80052cc:	f7ff fd2e 	bl	8004d2c <__NVIC_GetPriorityGrouping>
 80052d0:	4603      	mov	r3, r0
 80052d2:	2200      	movs	r2, #0
 80052d4:	2100      	movs	r1, #0
 80052d6:	4618      	mov	r0, r3
 80052d8:	f7ff fd7e 	bl	8004dd8 <NVIC_EncodePriority>
 80052dc:	4603      	mov	r3, r0
 80052de:	4619      	mov	r1, r3
 80052e0:	2007      	movs	r0, #7
 80052e2:	f7ff fd4f 	bl	8004d84 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 80052e6:	2007      	movs	r0, #7
 80052e8:	f7ff fd2e 	bl	8004d48 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80052ec:	f7ff fd1e 	bl	8004d2c <__NVIC_GetPriorityGrouping>
 80052f0:	4603      	mov	r3, r0
 80052f2:	2200      	movs	r2, #0
 80052f4:	2100      	movs	r1, #0
 80052f6:	4618      	mov	r0, r3
 80052f8:	f7ff fd6e 	bl	8004dd8 <NVIC_EncodePriority>
 80052fc:	4603      	mov	r3, r0
 80052fe:	4619      	mov	r1, r3
 8005300:	2008      	movs	r0, #8
 8005302:	f7ff fd3f 	bl	8004d84 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8005306:	2008      	movs	r0, #8
 8005308:	f7ff fd1e 	bl	8004d48 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800530c:	f7ff fd0e 	bl	8004d2c <__NVIC_GetPriorityGrouping>
 8005310:	4603      	mov	r3, r0
 8005312:	2200      	movs	r2, #0
 8005314:	2100      	movs	r1, #0
 8005316:	4618      	mov	r0, r3
 8005318:	f7ff fd5e 	bl	8004dd8 <NVIC_EncodePriority>
 800531c:	4603      	mov	r3, r0
 800531e:	4619      	mov	r1, r3
 8005320:	2028      	movs	r0, #40	; 0x28
 8005322:	f7ff fd2f 	bl	8004d84 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8005326:	2028      	movs	r0, #40	; 0x28
 8005328:	f7ff fd0e 	bl	8004d48 <__NVIC_EnableIRQ>

}
 800532c:	bf00      	nop
 800532e:	3728      	adds	r7, #40	; 0x28
 8005330:	46bd      	mov	sp, r7
 8005332:	e009      	b.n	8005348 <MX_GPIO_Init+0x3a0>
 8005334:	48000800 	.word	0x48000800
 8005338:	48000400 	.word	0x48000400
 800533c:	0f000003 	.word	0x0f000003
 8005340:	f0000003 	.word	0xf0000003
 8005344:	48001400 	.word	0x48001400
 8005348:	bd80      	pop	{r7, pc}
 800534a:	bf00      	nop

0800534c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800534c:	b480      	push	{r7}
 800534e:	b083      	sub	sp, #12
 8005350:	af00      	add	r7, sp, #0
 8005352:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005354:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005358:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800535c:	f003 0301 	and.w	r3, r3, #1
 8005360:	2b00      	cmp	r3, #0
 8005362:	d013      	beq.n	800538c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8005364:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005368:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800536c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8005370:	2b00      	cmp	r3, #0
 8005372:	d00b      	beq.n	800538c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8005374:	e000      	b.n	8005378 <ITM_SendChar+0x2c>
    {
      __NOP();
 8005376:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8005378:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d0f9      	beq.n	8005376 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8005382:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	b2d2      	uxtb	r2, r2
 800538a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800538c:	687b      	ldr	r3, [r7, #4]
}
 800538e:	4618      	mov	r0, r3
 8005390:	370c      	adds	r7, #12
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800539a:	b580      	push	{r7, lr}
 800539c:	b086      	sub	sp, #24
 800539e:	af00      	add	r7, sp, #0
 80053a0:	60f8      	str	r0, [r7, #12]
 80053a2:	60b9      	str	r1, [r7, #8]
 80053a4:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 80053a6:	2300      	movs	r3, #0
 80053a8:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 80053aa:	2300      	movs	r3, #0
 80053ac:	617b      	str	r3, [r7, #20]
 80053ae:	e009      	b.n	80053c4 <_write+0x2a>
    ITM_SendChar((*ptr++));
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	60ba      	str	r2, [r7, #8]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7ff ffc7 	bl	800534c <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	3301      	adds	r3, #1
 80053c2:	617b      	str	r3, [r7, #20]
 80053c4:	697a      	ldr	r2, [r7, #20]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	dbf1      	blt.n	80053b0 <_write+0x16>
  return len;
 80053cc:	687b      	ldr	r3, [r7, #4]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3718      	adds	r7, #24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}

080053d6 <HAL_DAC_ErrorCallbackCh1>:

void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80053d6:	b480      	push	{r7}
 80053d8:	b083      	sub	sp, #12
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
	// do something
}
 80053de:	bf00      	nop
 80053e0:	370c      	adds	r7, #12
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
	...

080053ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b082      	sub	sp, #8
 80053f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80053f2:	f000 ff52 	bl	800629a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80053f6:	f000 f891 	bl	800551c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80053fa:	f7ff fdd5 	bl	8004fa8 <MX_GPIO_Init>
  MX_DMA_Init();
 80053fe:	f7ff fc0f 	bl	8004c20 <MX_DMA_Init>
  MX_DAC1_Init();
 8005402:	f7ff fabf 	bl	8004984 <MX_DAC1_Init>
  MX_DAC2_Init();
 8005406:	f7ff fb07 	bl	8004a18 <MX_DAC2_Init>
  MX_ADC1_Init();
 800540a:	f7ff f97d 	bl	8004708 <MX_ADC1_Init>
  MX_COMP1_Init();
 800540e:	f7ff fa5f 	bl	80048d0 <MX_COMP1_Init>
  MX_TIM2_Init();
 8005412:	f000 fc37 	bl	8005c84 <MX_TIM2_Init>
  MX_TIM17_Init();
 8005416:	f000 fdd1 	bl	8005fbc <MX_TIM17_Init>
  MX_SPI3_Init();
 800541a:	f000 f92b 	bl	8005674 <MX_SPI3_Init>
  MX_RNG_Init();
 800541e:	f000 f91b 	bl	8005658 <MX_RNG_Init>
  MX_TIM1_Init();
 8005422:	f000 fbbf 	bl	8005ba4 <MX_TIM1_Init>
  MX_TIM8_Init();
 8005426:	f000 fce7 	bl	8005df8 <MX_TIM8_Init>
  MX_TIM16_Init();
 800542a:	f000 fd9f 	bl	8005f6c <MX_TIM16_Init>
  MX_TIM15_Init();
 800542e:	f000 fd4b 	bl	8005ec8 <MX_TIM15_Init>
  MX_TIM5_Init();
 8005432:	f000 fc91 	bl	8005d58 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  DT_InitRegister();
 8005436:	f7fd ffa1 	bl	800337c <DT_InitRegister>

  // main signal function output (external)
  FuncO_Init();
 800543a:	f7fe f993 	bl	8003764 <FuncO_Init>
  FuncO_ApplyPreset_Fast(eDefaultFuncPreset);
 800543e:	2000      	movs	r0, #0
 8005440:	f7fe fa06 	bl	8003850 <FuncO_ApplyPreset_Fast>

  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8005444:	2110      	movs	r1, #16
 8005446:	482b      	ldr	r0, [pc, #172]	; (80054f4 <main+0x108>)
 8005448:	f002 fc2b 	bl	8007ca2 <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table_1300, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 800544c:	2300      	movs	r3, #0
 800544e:	9300      	str	r3, [sp, #0]
 8005450:	2378      	movs	r3, #120	; 0x78
 8005452:	4a29      	ldr	r2, [pc, #164]	; (80054f8 <main+0x10c>)
 8005454:	2100      	movs	r1, #0
 8005456:	4829      	ldr	r0, [pc, #164]	; (80054fc <main+0x110>)
 8005458:	f002 fc76 	bl	8007d48 <HAL_DAC_Start_DMA>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

#ifndef DISABLE_ALL_TIMERS

  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 800545c:	4828      	ldr	r0, [pc, #160]	; (8005500 <main+0x114>)
 800545e:	f004 fd5b 	bl	8009f18 <HAL_TIM_Base_Start>
  FreqO_ApplyPreset(eDefaultFreqPreset);
 8005462:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005466:	f7fe f907 	bl	8003678 <FreqO_ApplyPreset>

#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 800546a:	2201      	movs	r2, #1
 800546c:	2108      	movs	r1, #8
 800546e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005472:	f003 fc57 	bl	8008d24 <HAL_GPIO_WritePin>

  // PGA gain
  //GO_ApplyPreset_Fast(eDefaultGainPreset);
  VPP_ApplyPreset_Fast(eDefaultVppPreset);
 8005476:	205e      	movs	r0, #94	; 0x5e
 8005478:	f7fe fc08 	bl	8003c8c <VPP_ApplyPreset_Fast>
  //HAL_TIM_Base_Start_IT(&htim17);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 800547c:	2200      	movs	r2, #0
 800547e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005482:	4820      	ldr	r0, [pc, #128]	; (8005504 <main+0x118>)
 8005484:	f003 fc4e 	bl	8008d24 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8005488:	2200      	movs	r2, #0
 800548a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800548e:	481d      	ldr	r0, [pc, #116]	; (8005504 <main+0x118>)
 8005490:	f003 fc48 	bl	8008d24 <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 8005494:	2201      	movs	r2, #1
 8005496:	2108      	movs	r1, #8
 8005498:	481a      	ldr	r0, [pc, #104]	; (8005504 <main+0x118>)
 800549a:	f003 fc43 	bl	8008d24 <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 800549e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80054a8:	f023 0307 	bic.w	r3, r3, #7
 80054ac:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 80054ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80054b8:	f043 0305 	orr.w	r3, r3, #5
 80054bc:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 80054be:	4812      	ldr	r0, [pc, #72]	; (8005508 <main+0x11c>)
 80054c0:	f004 fd58 	bl	8009f74 <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 80054c4:	4811      	ldr	r0, [pc, #68]	; (800550c <main+0x120>)
 80054c6:	f004 fd27 	bl	8009f18 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 80054ca:	4b11      	ldr	r3, [pc, #68]	; (8005510 <main+0x124>)
 80054cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054d0:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 80054d2:	4b0f      	ldr	r3, [pc, #60]	; (8005510 <main+0x124>)
 80054d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80054d8:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 80054da:	f7fb fb8d 	bl	8000bf8 <DM_Init>
  DM_PostInit();
 80054de:	f7fb fb99 	bl	8000c14 <DM_PostInit>

  // DM_UpdateDisplay()
  HAL_TIM_Base_Start_IT(&htim15);
 80054e2:	480c      	ldr	r0, [pc, #48]	; (8005514 <main+0x128>)
 80054e4:	f004 fd46 	bl	8009f74 <HAL_TIM_Base_Start_IT>

  //HAL_TIM_Base_Start_IT(&htim16);

  // debounce timer
  HAL_TIM_Base_Start(&htim5);
 80054e8:	480b      	ldr	r0, [pc, #44]	; (8005518 <main+0x12c>)
 80054ea:	f004 fd15 	bl	8009f18 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 80054ee:	f7fd fbcd 	bl	8002c8c <EM_ProcessEvent>
 80054f2:	e7fc      	b.n	80054ee <main+0x102>
 80054f4:	20002398 	.word	0x20002398
 80054f8:	200018d0 	.word	0x200018d0
 80054fc:	20002384 	.word	0x20002384
 8005500:	200024d0 	.word	0x200024d0
 8005504:	48000800 	.word	0x48000800
 8005508:	2000264c 	.word	0x2000264c
 800550c:	20002600 	.word	0x20002600
 8005510:	40001000 	.word	0x40001000
 8005514:	2000251c 	.word	0x2000251c
 8005518:	200025b4 	.word	0x200025b4

0800551c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b0a8      	sub	sp, #160	; 0xa0
 8005520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005522:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005526:	2238      	movs	r2, #56	; 0x38
 8005528:	2100      	movs	r1, #0
 800552a:	4618      	mov	r0, r3
 800552c:	f007 f81e 	bl	800c56c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005530:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	605a      	str	r2, [r3, #4]
 800553a:	609a      	str	r2, [r3, #8]
 800553c:	60da      	str	r2, [r3, #12]
 800553e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005540:	463b      	mov	r3, r7
 8005542:	2254      	movs	r2, #84	; 0x54
 8005544:	2100      	movs	r1, #0
 8005546:	4618      	mov	r0, r3
 8005548:	f007 f810 	bl	800c56c <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800554c:	2000      	movs	r0, #0
 800554e:	f003 fc01 	bl	8008d54 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8005552:	2322      	movs	r3, #34	; 0x22
 8005554:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005556:	f44f 7380 	mov.w	r3, #256	; 0x100
 800555a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800555c:	2340      	movs	r3, #64	; 0x40
 800555e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8005560:	2301      	movs	r3, #1
 8005562:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005566:	2302      	movs	r3, #2
 8005568:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800556c:	2302      	movs	r3, #2
 800556e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8005572:	2302      	movs	r3, #2
 8005574:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8005578:	232a      	movs	r3, #42	; 0x2a
 800557a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800557e:	2302      	movs	r3, #2
 8005580:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8005584:	2304      	movs	r3, #4
 8005586:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800558a:	2302      	movs	r3, #2
 800558c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005590:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005594:	4618      	mov	r0, r3
 8005596:	f003 fc81 	bl	8008e9c <HAL_RCC_OscConfig>
 800559a:	4603      	mov	r3, r0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80055a0:	f000 f82a 	bl	80055f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80055a4:	230f      	movs	r3, #15
 80055a6:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80055a8:	2303      	movs	r3, #3
 80055aa:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80055ac:	2300      	movs	r3, #0
 80055ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80055b0:	2300      	movs	r3, #0
 80055b2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80055b4:	2300      	movs	r3, #0
 80055b6:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80055b8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80055bc:	2108      	movs	r1, #8
 80055be:	4618      	mov	r0, r3
 80055c0:	f003 ff84 	bl	80094cc <HAL_RCC_ClockConfig>
 80055c4:	4603      	mov	r3, r0
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d001      	beq.n	80055ce <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80055ca:	f000 f815 	bl	80055f8 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 80055ce:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80055d2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80055d4:	2300      	movs	r3, #0
 80055d6:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80055d8:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80055dc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80055de:	463b      	mov	r3, r7
 80055e0:	4618      	mov	r0, r3
 80055e2:	f004 f963 	bl	80098ac <HAL_RCCEx_PeriphCLKConfig>
 80055e6:	4603      	mov	r3, r0
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d001      	beq.n	80055f0 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80055ec:	f000 f804 	bl	80055f8 <Error_Handler>
  }
}
 80055f0:	bf00      	nop
 80055f2:	37a0      	adds	r7, #160	; 0xa0
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80055f8:	b480      	push	{r7}
 80055fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80055fc:	bf00      	nop
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr

08005606 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f043 0204 	orr.w	r2, r3, #4
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	601a      	str	r2, [r3, #0]
}
 800561a:	bf00      	nop
 800561c:	370c      	adds	r7, #12
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
	...

08005628 <LL_AHB2_GRP1_EnableClock>:
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8005630:	4b08      	ldr	r3, [pc, #32]	; (8005654 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005632:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005634:	4907      	ldr	r1, [pc, #28]	; (8005654 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4313      	orrs	r3, r2
 800563a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800563c:	4b05      	ldr	r3, [pc, #20]	; (8005654 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800563e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	4013      	ands	r3, r2
 8005644:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005646:	68fb      	ldr	r3, [r7, #12]
}
 8005648:	bf00      	nop
 800564a:	3714      	adds	r7, #20
 800564c:	46bd      	mov	sp, r7
 800564e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005652:	4770      	bx	lr
 8005654:	40021000 	.word	0x40021000

08005658 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8005658:	b580      	push	{r7, lr}
 800565a:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 800565c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8005660:	f7ff ffe2 	bl	8005628 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8005664:	4802      	ldr	r0, [pc, #8]	; (8005670 <MX_RNG_Init+0x18>)
 8005666:	f7ff ffce 	bl	8005606 <LL_RNG_Enable>

}
 800566a:	bf00      	nop
 800566c:	bd80      	pop	{r7, pc}
 800566e:	bf00      	nop
 8005670:	50060800 	.word	0x50060800

08005674 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8005678:	4b1b      	ldr	r3, [pc, #108]	; (80056e8 <MX_SPI3_Init+0x74>)
 800567a:	4a1c      	ldr	r2, [pc, #112]	; (80056ec <MX_SPI3_Init+0x78>)
 800567c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800567e:	4b1a      	ldr	r3, [pc, #104]	; (80056e8 <MX_SPI3_Init+0x74>)
 8005680:	f44f 7282 	mov.w	r2, #260	; 0x104
 8005684:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8005686:	4b18      	ldr	r3, [pc, #96]	; (80056e8 <MX_SPI3_Init+0x74>)
 8005688:	2200      	movs	r2, #0
 800568a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800568c:	4b16      	ldr	r3, [pc, #88]	; (80056e8 <MX_SPI3_Init+0x74>)
 800568e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8005692:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8005694:	4b14      	ldr	r3, [pc, #80]	; (80056e8 <MX_SPI3_Init+0x74>)
 8005696:	2200      	movs	r2, #0
 8005698:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800569a:	4b13      	ldr	r3, [pc, #76]	; (80056e8 <MX_SPI3_Init+0x74>)
 800569c:	2200      	movs	r2, #0
 800569e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80056a0:	4b11      	ldr	r3, [pc, #68]	; (80056e8 <MX_SPI3_Init+0x74>)
 80056a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80056a6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80056a8:	4b0f      	ldr	r3, [pc, #60]	; (80056e8 <MX_SPI3_Init+0x74>)
 80056aa:	2210      	movs	r2, #16
 80056ac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80056ae:	4b0e      	ldr	r3, [pc, #56]	; (80056e8 <MX_SPI3_Init+0x74>)
 80056b0:	2200      	movs	r2, #0
 80056b2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80056b4:	4b0c      	ldr	r3, [pc, #48]	; (80056e8 <MX_SPI3_Init+0x74>)
 80056b6:	2200      	movs	r2, #0
 80056b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80056ba:	4b0b      	ldr	r3, [pc, #44]	; (80056e8 <MX_SPI3_Init+0x74>)
 80056bc:	2200      	movs	r2, #0
 80056be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80056c0:	4b09      	ldr	r3, [pc, #36]	; (80056e8 <MX_SPI3_Init+0x74>)
 80056c2:	2207      	movs	r2, #7
 80056c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80056c6:	4b08      	ldr	r3, [pc, #32]	; (80056e8 <MX_SPI3_Init+0x74>)
 80056c8:	2200      	movs	r2, #0
 80056ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80056cc:	4b06      	ldr	r3, [pc, #24]	; (80056e8 <MX_SPI3_Init+0x74>)
 80056ce:	2208      	movs	r2, #8
 80056d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80056d2:	4805      	ldr	r0, [pc, #20]	; (80056e8 <MX_SPI3_Init+0x74>)
 80056d4:	f004 fb36 	bl	8009d44 <HAL_SPI_Init>
 80056d8:	4603      	mov	r3, r0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d001      	beq.n	80056e2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80056de:	f7ff ff8b 	bl	80055f8 <Error_Handler>
  }

}
 80056e2:	bf00      	nop
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	2000246c 	.word	0x2000246c
 80056ec:	40003c00 	.word	0x40003c00

080056f0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b08a      	sub	sp, #40	; 0x28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056f8:	f107 0314 	add.w	r3, r7, #20
 80056fc:	2200      	movs	r2, #0
 80056fe:	601a      	str	r2, [r3, #0]
 8005700:	605a      	str	r2, [r3, #4]
 8005702:	609a      	str	r2, [r3, #8]
 8005704:	60da      	str	r2, [r3, #12]
 8005706:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a17      	ldr	r2, [pc, #92]	; (800576c <HAL_SPI_MspInit+0x7c>)
 800570e:	4293      	cmp	r3, r2
 8005710:	d128      	bne.n	8005764 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8005712:	4b17      	ldr	r3, [pc, #92]	; (8005770 <HAL_SPI_MspInit+0x80>)
 8005714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005716:	4a16      	ldr	r2, [pc, #88]	; (8005770 <HAL_SPI_MspInit+0x80>)
 8005718:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800571c:	6593      	str	r3, [r2, #88]	; 0x58
 800571e:	4b14      	ldr	r3, [pc, #80]	; (8005770 <HAL_SPI_MspInit+0x80>)
 8005720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005722:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005726:	613b      	str	r3, [r7, #16]
 8005728:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800572a:	4b11      	ldr	r3, [pc, #68]	; (8005770 <HAL_SPI_MspInit+0x80>)
 800572c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800572e:	4a10      	ldr	r2, [pc, #64]	; (8005770 <HAL_SPI_MspInit+0x80>)
 8005730:	f043 0304 	orr.w	r3, r3, #4
 8005734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005736:	4b0e      	ldr	r3, [pc, #56]	; (8005770 <HAL_SPI_MspInit+0x80>)
 8005738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800573a:	f003 0304 	and.w	r3, r3, #4
 800573e:	60fb      	str	r3, [r7, #12]
 8005740:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8005742:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8005746:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005748:	2302      	movs	r3, #2
 800574a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800574c:	2300      	movs	r3, #0
 800574e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005750:	2300      	movs	r3, #0
 8005752:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8005754:	2306      	movs	r3, #6
 8005756:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005758:	f107 0314 	add.w	r3, r7, #20
 800575c:	4619      	mov	r1, r3
 800575e:	4805      	ldr	r0, [pc, #20]	; (8005774 <HAL_SPI_MspInit+0x84>)
 8005760:	f003 f95e 	bl	8008a20 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8005764:	bf00      	nop
 8005766:	3728      	adds	r7, #40	; 0x28
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	40003c00 	.word	0x40003c00
 8005770:	40021000 	.word	0x40021000
 8005774:	48000800 	.word	0x48000800

08005778 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8005778:	b480      	push	{r7}
 800577a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800577c:	4b05      	ldr	r3, [pc, #20]	; (8005794 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800577e:	689b      	ldr	r3, [r3, #8]
 8005780:	4a04      	ldr	r2, [pc, #16]	; (8005794 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8005782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005786:	6093      	str	r3, [r2, #8]
}
 8005788:	bf00      	nop
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr
 8005792:	bf00      	nop
 8005794:	40007000 	.word	0x40007000

08005798 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800579e:	4b0f      	ldr	r3, [pc, #60]	; (80057dc <HAL_MspInit+0x44>)
 80057a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057a2:	4a0e      	ldr	r2, [pc, #56]	; (80057dc <HAL_MspInit+0x44>)
 80057a4:	f043 0301 	orr.w	r3, r3, #1
 80057a8:	6613      	str	r3, [r2, #96]	; 0x60
 80057aa:	4b0c      	ldr	r3, [pc, #48]	; (80057dc <HAL_MspInit+0x44>)
 80057ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ae:	f003 0301 	and.w	r3, r3, #1
 80057b2:	607b      	str	r3, [r7, #4]
 80057b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80057b6:	4b09      	ldr	r3, [pc, #36]	; (80057dc <HAL_MspInit+0x44>)
 80057b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ba:	4a08      	ldr	r2, [pc, #32]	; (80057dc <HAL_MspInit+0x44>)
 80057bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057c0:	6593      	str	r3, [r2, #88]	; 0x58
 80057c2:	4b06      	ldr	r3, [pc, #24]	; (80057dc <HAL_MspInit+0x44>)
 80057c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057ca:	603b      	str	r3, [r7, #0]
 80057cc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80057ce:	f7ff ffd3 	bl	8005778 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80057d2:	bf00      	nop
 80057d4:	3708      	adds	r7, #8
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	40021000 	.word	0x40021000

080057e0 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80057e8:	4b07      	ldr	r3, [pc, #28]	; (8005808 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80057ea:	695a      	ldr	r2, [r3, #20]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	4013      	ands	r3, r2
 80057f0:	687a      	ldr	r2, [r7, #4]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d101      	bne.n	80057fa <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80057f6:	2301      	movs	r3, #1
 80057f8:	e000      	b.n	80057fc <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80057fa:	2300      	movs	r3, #0
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	370c      	adds	r7, #12
 8005800:	46bd      	mov	sp, r7
 8005802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005806:	4770      	bx	lr
 8005808:	40010400 	.word	0x40010400

0800580c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 800580c:	b480      	push	{r7}
 800580e:	b083      	sub	sp, #12
 8005810:	af00      	add	r7, sp, #0
 8005812:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8005814:	4a04      	ldr	r2, [pc, #16]	; (8005828 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6153      	str	r3, [r2, #20]
}
 800581a:	bf00      	nop
 800581c:	370c      	adds	r7, #12
 800581e:	46bd      	mov	sp, r7
 8005820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005824:	4770      	bx	lr
 8005826:	bf00      	nop
 8005828:	40010400 	.word	0x40010400

0800582c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005830:	bf00      	nop
 8005832:	46bd      	mov	sp, r7
 8005834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005838:	4770      	bx	lr

0800583a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800583a:	b480      	push	{r7}
 800583c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800583e:	e7fe      	b.n	800583e <HardFault_Handler+0x4>

08005840 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005840:	b480      	push	{r7}
 8005842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005844:	e7fe      	b.n	8005844 <MemManage_Handler+0x4>

08005846 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005846:	b480      	push	{r7}
 8005848:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800584a:	e7fe      	b.n	800584a <BusFault_Handler+0x4>

0800584c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800584c:	b480      	push	{r7}
 800584e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005850:	e7fe      	b.n	8005850 <UsageFault_Handler+0x4>

08005852 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005852:	b480      	push	{r7}
 8005854:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005856:	bf00      	nop
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005860:	b480      	push	{r7}
 8005862:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005864:	bf00      	nop
 8005866:	46bd      	mov	sp, r7
 8005868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586c:	4770      	bx	lr

0800586e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800586e:	b480      	push	{r7}
 8005870:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005872:	bf00      	nop
 8005874:	46bd      	mov	sp, r7
 8005876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587a:	4770      	bx	lr

0800587c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005880:	f000 fd5e 	bl	8006340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005884:	bf00      	nop
 8005886:	bd80      	pop	{r7, pc}

08005888 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 800588c:	2001      	movs	r0, #1
 800588e:	f7ff ffa7 	bl	80057e0 <LL_EXTI_IsActiveFlag_0_31>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	d005      	beq.n	80058a4 <EXTI0_IRQHandler+0x1c>
	{
		EM_SetNewEvent(evRedBtn);
 8005898:	2004      	movs	r0, #4
 800589a:	f7fd fce5 	bl	8003268 <EM_SetNewEvent>
		printf("'Red' BTN3_EXTI0_Pin\n");
 800589e:	4807      	ldr	r0, [pc, #28]	; (80058bc <EXTI0_IRQHandler+0x34>)
 80058a0:	f007 fb24 	bl	800ceec <puts>
	}

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 80058a4:	2001      	movs	r0, #1
 80058a6:	f7ff ff9b 	bl	80057e0 <LL_EXTI_IsActiveFlag_0_31>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d002      	beq.n	80058b6 <EXTI0_IRQHandler+0x2e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 80058b0:	2001      	movs	r0, #1
 80058b2:	f7ff ffab 	bl	800580c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80058b6:	bf00      	nop
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	0800f830 	.word	0x0800f830

080058c0 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 80058c4:	2002      	movs	r0, #2
 80058c6:	f7ff ff8b 	bl	80057e0 <LL_EXTI_IsActiveFlag_0_31>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d005      	beq.n	80058dc <EXTI1_IRQHandler+0x1c>
	{
		EM_SetNewEvent(evGreenBtn);
 80058d0:	2002      	movs	r0, #2
 80058d2:	f7fd fcc9 	bl	8003268 <EM_SetNewEvent>
		printf("'Green' BTN4_EXTI1_Pin\n");
 80058d6:	4807      	ldr	r0, [pc, #28]	; (80058f4 <EXTI1_IRQHandler+0x34>)
 80058d8:	f007 fb08 	bl	800ceec <puts>
	}


  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 80058dc:	2002      	movs	r0, #2
 80058de:	f7ff ff7f 	bl	80057e0 <LL_EXTI_IsActiveFlag_0_31>
 80058e2:	4603      	mov	r3, r0
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d002      	beq.n	80058ee <EXTI1_IRQHandler+0x2e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 80058e8:	2002      	movs	r0, #2
 80058ea:	f7ff ff8f 	bl	800580c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80058ee:	bf00      	nop
 80058f0:	bd80      	pop	{r7, pc}
 80058f2:	bf00      	nop
 80058f4:	0800f848 	.word	0x0800f848

080058f8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 80058fc:	2004      	movs	r0, #4
 80058fe:	f7ff ff6f 	bl	80057e0 <LL_EXTI_IsActiveFlag_0_31>
 8005902:	4603      	mov	r3, r0
 8005904:	2b00      	cmp	r3, #0
 8005906:	d005      	beq.n	8005914 <EXTI2_IRQHandler+0x1c>
	{
		EM_SetNewEvent(evEncoderPush);
 8005908:	2006      	movs	r0, #6
 800590a:	f7fd fcad 	bl	8003268 <EM_SetNewEvent>
		printf("'EncoderPush' ENC_EXTI2_Pin\n");
 800590e:	4807      	ldr	r0, [pc, #28]	; (800592c <EXTI2_IRQHandler+0x34>)
 8005910:	f007 faec 	bl	800ceec <puts>
	}


  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8005914:	2004      	movs	r0, #4
 8005916:	f7ff ff63 	bl	80057e0 <LL_EXTI_IsActiveFlag_0_31>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d002      	beq.n	8005926 <EXTI2_IRQHandler+0x2e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8005920:	2004      	movs	r0, #4
 8005922:	f7ff ff73 	bl	800580c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005926:	bf00      	nop
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	0800f860 	.word	0x0800f860

08005930 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8005934:	4802      	ldr	r0, [pc, #8]	; (8005940 <DMA1_Channel1_IRQHandler+0x10>)
 8005936:	f002 ff23 	bl	8008780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800593a:	bf00      	nop
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	20002300 	.word	0x20002300

08005944 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8005944:	b580      	push	{r7, lr}
 8005946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8005948:	4802      	ldr	r0, [pc, #8]	; (8005954 <DMA1_Channel2_IRQHandler+0x10>)
 800594a:	f002 ff19 	bl	8008780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 800594e:	bf00      	nop
 8005950:	bd80      	pop	{r7, pc}
 8005952:	bf00      	nop
 8005954:	200023ac 	.word	0x200023ac

08005958 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 800595c:	4802      	ldr	r0, [pc, #8]	; (8005968 <DMA1_Channel3_IRQHandler+0x10>)
 800595e:	f002 ff0f 	bl	8008780 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005962:	bf00      	nop
 8005964:	bd80      	pop	{r7, pc}
 8005966:	bf00      	nop
 8005968:	2000240c 	.word	0x2000240c

0800596c <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	DM_UpdateDisplay();
 8005970:	f7fb fa72 	bl	8000e58 <DM_UpdateDisplay>
	{
		printf("Encoder turned\n");
		TIM1->SR &= ~(TIM_SR_IDXF);
	}
*/
	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 8005974:	4b0d      	ldr	r3, [pc, #52]	; (80059ac <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8005976:	691b      	ldr	r3, [r3, #16]
 8005978:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800597c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005980:	d10b      	bne.n	800599a <TIM1_BRK_TIM15_IRQHandler+0x2e>
	{
		EM_SetNewEvent(evEncoderSet);
 8005982:	2005      	movs	r0, #5
 8005984:	f7fd fc70 	bl	8003268 <EM_SetNewEvent>
		printf("Encoder new direction\n");
 8005988:	4809      	ldr	r0, [pc, #36]	; (80059b0 <TIM1_BRK_TIM15_IRQHandler+0x44>)
 800598a:	f007 faaf 	bl	800ceec <puts>
		TIM1->SR &= ~(TIM_SR_DIRF);
 800598e:	4b07      	ldr	r3, [pc, #28]	; (80059ac <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8005990:	691b      	ldr	r3, [r3, #16]
 8005992:	4a06      	ldr	r2, [pc, #24]	; (80059ac <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8005994:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005998:	6113      	str	r3, [r2, #16]

	}
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800599a:	4806      	ldr	r0, [pc, #24]	; (80059b4 <TIM1_BRK_TIM15_IRQHandler+0x48>)
 800599c:	f004 fbf5 	bl	800a18a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 80059a0:	4805      	ldr	r0, [pc, #20]	; (80059b8 <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 80059a2:	f004 fbf2 	bl	800a18a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 80059a6:	bf00      	nop
 80059a8:	bd80      	pop	{r7, pc}
 80059aa:	bf00      	nop
 80059ac:	40012c00 	.word	0x40012c00
 80059b0:	0800f87c 	.word	0x0800f87c
 80059b4:	20002600 	.word	0x20002600
 80059b8:	2000251c 	.word	0x2000251c

080059bc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	//snprintf(control_pressed, sizeof(control_pressed), " ");
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80059c0:	4803      	ldr	r0, [pc, #12]	; (80059d0 <TIM1_UP_TIM16_IRQHandler+0x14>)
 80059c2:	f004 fbe2 	bl	800a18a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80059c6:	4803      	ldr	r0, [pc, #12]	; (80059d4 <TIM1_UP_TIM16_IRQHandler+0x18>)
 80059c8:	f004 fbdf 	bl	800a18a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80059cc:	bf00      	nop
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	20002600 	.word	0x20002600
 80059d4:	20002698 	.word	0x20002698

080059d8 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 80059dc:	f7ff f95a 	bl	8004c94 <update_dc_bias_sweep>




  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80059e0:	4803      	ldr	r0, [pc, #12]	; (80059f0 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80059e2:	f004 fbd2 	bl	800a18a <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80059e6:	4803      	ldr	r0, [pc, #12]	; (80059f4 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 80059e8:	f004 fbcf 	bl	800a18a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80059ec:	bf00      	nop
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	20002600 	.word	0x20002600
 80059f4:	20002568 	.word	0x20002568

080059f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80059fc:	4802      	ldr	r0, [pc, #8]	; (8005a08 <TIM2_IRQHandler+0x10>)
 80059fe:	f004 fbc4 	bl	800a18a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005a02:	bf00      	nop
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	2000264c 	.word	0x2000264c

08005a0c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 8005a10:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005a14:	f7ff fee4 	bl	80057e0 <LL_EXTI_IsActiveFlag_0_31>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d005      	beq.n	8005a2a <EXTI15_10_IRQHandler+0x1e>
	{

		EM_SetNewEvent(evBlueBtn);
 8005a1e:	2001      	movs	r0, #1
 8005a20:	f7fd fc22 	bl	8003268 <EM_SetNewEvent>
		printf("'Blue' BTN1_EXTI14_Pin\n");
 8005a24:	4813      	ldr	r0, [pc, #76]	; (8005a74 <EXTI15_10_IRQHandler+0x68>)
 8005a26:	f007 fa61 	bl	800ceec <puts>
	}
	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 8005a2a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005a2e:	f7ff fed7 	bl	80057e0 <LL_EXTI_IsActiveFlag_0_31>
 8005a32:	4603      	mov	r3, r0
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d005      	beq.n	8005a44 <EXTI15_10_IRQHandler+0x38>
	{
		EM_SetNewEvent(evYellowBtn);
 8005a38:	2003      	movs	r0, #3
 8005a3a:	f7fd fc15 	bl	8003268 <EM_SetNewEvent>
		printf("'Yellow' BTN2_EXTI15_Pin\n");
 8005a3e:	480e      	ldr	r0, [pc, #56]	; (8005a78 <EXTI15_10_IRQHandler+0x6c>)
 8005a40:	f007 fa54 	bl	800ceec <puts>
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8005a44:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005a48:	f7ff feca 	bl	80057e0 <LL_EXTI_IsActiveFlag_0_31>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <EXTI15_10_IRQHandler+0x4e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8005a52:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8005a56:	f7ff fed9 	bl	800580c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8005a5a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005a5e:	f7ff febf 	bl	80057e0 <LL_EXTI_IsActiveFlag_0_31>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d003      	beq.n	8005a70 <EXTI15_10_IRQHandler+0x64>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8005a68:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8005a6c:	f7ff fece 	bl	800580c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8005a70:	bf00      	nop
 8005a72:	bd80      	pop	{r7, pc}
 8005a74:	0800f894 	.word	0x0800f894
 8005a78:	0800f8ac 	.word	0x0800f8ac

08005a7c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005a7c:	b580      	push	{r7, lr}
 8005a7e:	b086      	sub	sp, #24
 8005a80:	af00      	add	r7, sp, #0
 8005a82:	60f8      	str	r0, [r7, #12]
 8005a84:	60b9      	str	r1, [r7, #8]
 8005a86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a88:	2300      	movs	r3, #0
 8005a8a:	617b      	str	r3, [r7, #20]
 8005a8c:	e00a      	b.n	8005aa4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005a8e:	f3af 8000 	nop.w
 8005a92:	4601      	mov	r1, r0
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	1c5a      	adds	r2, r3, #1
 8005a98:	60ba      	str	r2, [r7, #8]
 8005a9a:	b2ca      	uxtb	r2, r1
 8005a9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	617b      	str	r3, [r7, #20]
 8005aa4:	697a      	ldr	r2, [r7, #20]
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	dbf0      	blt.n	8005a8e <_read+0x12>
	}

return len;
 8005aac:	687b      	ldr	r3, [r7, #4]
}
 8005aae:	4618      	mov	r0, r3
 8005ab0:	3718      	adds	r7, #24
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}

08005ab6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8005ab6:	b480      	push	{r7}
 8005ab8:	b083      	sub	sp, #12
 8005aba:	af00      	add	r7, sp, #0
 8005abc:	6078      	str	r0, [r7, #4]
	return -1;
 8005abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	370c      	adds	r7, #12
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b083      	sub	sp, #12
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	6078      	str	r0, [r7, #4]
 8005ad6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ade:	605a      	str	r2, [r3, #4]
	return 0;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	370c      	adds	r7, #12
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr

08005aee <_isatty>:

int _isatty(int file)
{
 8005aee:	b480      	push	{r7}
 8005af0:	b083      	sub	sp, #12
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	6078      	str	r0, [r7, #4]
	return 1;
 8005af6:	2301      	movs	r3, #1
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	370c      	adds	r7, #12
 8005afc:	46bd      	mov	sp, r7
 8005afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b02:	4770      	bx	lr

08005b04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b085      	sub	sp, #20
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
	return 0;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3714      	adds	r7, #20
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
	...

08005b20 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8005b20:	b580      	push	{r7, lr}
 8005b22:	b084      	sub	sp, #16
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8005b28:	4b11      	ldr	r3, [pc, #68]	; (8005b70 <_sbrk+0x50>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d102      	bne.n	8005b36 <_sbrk+0x16>
		heap_end = &end;
 8005b30:	4b0f      	ldr	r3, [pc, #60]	; (8005b70 <_sbrk+0x50>)
 8005b32:	4a10      	ldr	r2, [pc, #64]	; (8005b74 <_sbrk+0x54>)
 8005b34:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8005b36:	4b0e      	ldr	r3, [pc, #56]	; (8005b70 <_sbrk+0x50>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8005b3c:	4b0c      	ldr	r3, [pc, #48]	; (8005b70 <_sbrk+0x50>)
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	4413      	add	r3, r2
 8005b44:	466a      	mov	r2, sp
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d907      	bls.n	8005b5a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8005b4a:	f006 fce5 	bl	800c518 <__errno>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	230c      	movs	r3, #12
 8005b52:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8005b54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005b58:	e006      	b.n	8005b68 <_sbrk+0x48>
	}

	heap_end += incr;
 8005b5a:	4b05      	ldr	r3, [pc, #20]	; (8005b70 <_sbrk+0x50>)
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4413      	add	r3, r2
 8005b62:	4a03      	ldr	r2, [pc, #12]	; (8005b70 <_sbrk+0x50>)
 8005b64:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8005b66:	68fb      	ldr	r3, [r7, #12]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	20001ebc 	.word	0x20001ebc
 8005b74:	200026f0 	.word	0x200026f0

08005b78 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8005b78:	b480      	push	{r7}
 8005b7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8005b7c:	4b08      	ldr	r3, [pc, #32]	; (8005ba0 <SystemInit+0x28>)
 8005b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b82:	4a07      	ldr	r2, [pc, #28]	; (8005ba0 <SystemInit+0x28>)
 8005b84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005b88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005b8c:	4b04      	ldr	r3, [pc, #16]	; (8005ba0 <SystemInit+0x28>)
 8005b8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005b92:	609a      	str	r2, [r3, #8]
#endif
}
 8005b94:	bf00      	nop
 8005b96:	46bd      	mov	sp, r7
 8005b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9c:	4770      	bx	lr
 8005b9e:	bf00      	nop
 8005ba0:	e000ed00 	.word	0xe000ed00

08005ba4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b09a      	sub	sp, #104	; 0x68
 8005ba8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8005baa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005bae:	2224      	movs	r2, #36	; 0x24
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f006 fcda 	bl	800c56c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005bb8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	601a      	str	r2, [r3, #0]
 8005bc0:	605a      	str	r2, [r3, #4]
 8005bc2:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005bc4:	1d3b      	adds	r3, r7, #4
 8005bc6:	2234      	movs	r2, #52	; 0x34
 8005bc8:	2100      	movs	r1, #0
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f006 fcce 	bl	800c56c <memset>

  htim1.Instance = TIM1;
 8005bd0:	4b2a      	ldr	r3, [pc, #168]	; (8005c7c <MX_TIM1_Init+0xd8>)
 8005bd2:	4a2b      	ldr	r2, [pc, #172]	; (8005c80 <MX_TIM1_Init+0xdc>)
 8005bd4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8005bd6:	4b29      	ldr	r3, [pc, #164]	; (8005c7c <MX_TIM1_Init+0xd8>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8005bdc:	4b27      	ldr	r3, [pc, #156]	; (8005c7c <MX_TIM1_Init+0xd8>)
 8005bde:	2240      	movs	r2, #64	; 0x40
 8005be0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8005be2:	4b26      	ldr	r3, [pc, #152]	; (8005c7c <MX_TIM1_Init+0xd8>)
 8005be4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005be8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005bea:	4b24      	ldr	r3, [pc, #144]	; (8005c7c <MX_TIM1_Init+0xd8>)
 8005bec:	2200      	movs	r2, #0
 8005bee:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8005bf0:	4b22      	ldr	r3, [pc, #136]	; (8005c7c <MX_TIM1_Init+0xd8>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005bf6:	4b21      	ldr	r3, [pc, #132]	; (8005c7c <MX_TIM1_Init+0xd8>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8005c00:	2300      	movs	r3, #0
 8005c02:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8005c04:	2301      	movs	r3, #1
 8005c06:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8005c08:	2300      	movs	r3, #0
 8005c0a:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8005c10:	2300      	movs	r3, #0
 8005c12:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8005c14:	2301      	movs	r3, #1
 8005c16:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8005c20:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005c24:	4619      	mov	r1, r3
 8005c26:	4815      	ldr	r0, [pc, #84]	; (8005c7c <MX_TIM1_Init+0xd8>)
 8005c28:	f004 fa09 	bl	800a03e <HAL_TIM_Encoder_Init>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d001      	beq.n	8005c36 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8005c32:	f7ff fce1 	bl	80055f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005c36:	2320      	movs	r3, #32
 8005c38:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8005c42:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8005c46:	4619      	mov	r1, r3
 8005c48:	480c      	ldr	r0, [pc, #48]	; (8005c7c <MX_TIM1_Init+0xd8>)
 8005c4a:	f004 ff81 	bl	800ab50 <HAL_TIMEx_MasterConfigSynchronization>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d001      	beq.n	8005c58 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8005c54:	f7ff fcd0 	bl	80055f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005c58:	2300      	movs	r3, #0
 8005c5a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8005c60:	1d3b      	adds	r3, r7, #4
 8005c62:	4619      	mov	r1, r3
 8005c64:	4805      	ldr	r0, [pc, #20]	; (8005c7c <MX_TIM1_Init+0xd8>)
 8005c66:	f005 f809 	bl	800ac7c <HAL_TIMEx_ConfigBreakDeadTime>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8005c70:	f7ff fcc2 	bl	80055f8 <Error_Handler>
  }

}
 8005c74:	bf00      	nop
 8005c76:	3768      	adds	r7, #104	; 0x68
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}
 8005c7c:	20002600 	.word	0x20002600
 8005c80:	40012c00 	.word	0x40012c00

08005c84 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b08c      	sub	sp, #48	; 0x30
 8005c88:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005c8a:	f107 0320 	add.w	r3, r7, #32
 8005c8e:	2200      	movs	r2, #0
 8005c90:	601a      	str	r2, [r3, #0]
 8005c92:	605a      	str	r2, [r3, #4]
 8005c94:	609a      	str	r2, [r3, #8]
 8005c96:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8005c98:	f107 030c 	add.w	r3, r7, #12
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	601a      	str	r2, [r3, #0]
 8005ca0:	605a      	str	r2, [r3, #4]
 8005ca2:	609a      	str	r2, [r3, #8]
 8005ca4:	60da      	str	r2, [r3, #12]
 8005ca6:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005ca8:	463b      	mov	r3, r7
 8005caa:	2200      	movs	r2, #0
 8005cac:	601a      	str	r2, [r3, #0]
 8005cae:	605a      	str	r2, [r3, #4]
 8005cb0:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8005cb2:	4b28      	ldr	r3, [pc, #160]	; (8005d54 <MX_TIM2_Init+0xd0>)
 8005cb4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005cb8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 8005cba:	4b26      	ldr	r3, [pc, #152]	; (8005d54 <MX_TIM2_Init+0xd0>)
 8005cbc:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8005cc0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005cc2:	4b24      	ldr	r3, [pc, #144]	; (8005d54 <MX_TIM2_Init+0xd0>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8005cc8:	4b22      	ldr	r3, [pc, #136]	; (8005d54 <MX_TIM2_Init+0xd0>)
 8005cca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005cce:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005cd0:	4b20      	ldr	r3, [pc, #128]	; (8005d54 <MX_TIM2_Init+0xd0>)
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005cd6:	4b1f      	ldr	r3, [pc, #124]	; (8005d54 <MX_TIM2_Init+0xd0>)
 8005cd8:	2200      	movs	r2, #0
 8005cda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005cdc:	481d      	ldr	r0, [pc, #116]	; (8005d54 <MX_TIM2_Init+0xd0>)
 8005cde:	f004 f8c3 	bl	8009e68 <HAL_TIM_Base_Init>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d001      	beq.n	8005cec <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8005ce8:	f7ff fc86 	bl	80055f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005cec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005cf0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005cf2:	f107 0320 	add.w	r3, r7, #32
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	4816      	ldr	r0, [pc, #88]	; (8005d54 <MX_TIM2_Init+0xd0>)
 8005cfa:	f004 fbc5 	bl	800a488 <HAL_TIM_ConfigClockSource>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d001      	beq.n	8005d08 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8005d04:	f7ff fc78 	bl	80055f8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8005d08:	2305      	movs	r3, #5
 8005d0a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8005d0c:	2350      	movs	r3, #80	; 0x50
 8005d0e:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8005d10:	2300      	movs	r3, #0
 8005d12:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 8005d14:	2300      	movs	r3, #0
 8005d16:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8005d18:	f107 030c 	add.w	r3, r7, #12
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	480d      	ldr	r0, [pc, #52]	; (8005d54 <MX_TIM2_Init+0xd0>)
 8005d20:	f004 fca2 	bl	800a668 <HAL_TIM_SlaveConfigSynchro>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8005d2a:	f7ff fc65 	bl	80055f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005d32:	2300      	movs	r3, #0
 8005d34:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005d36:	463b      	mov	r3, r7
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4806      	ldr	r0, [pc, #24]	; (8005d54 <MX_TIM2_Init+0xd0>)
 8005d3c:	f004 ff08 	bl	800ab50 <HAL_TIMEx_MasterConfigSynchronization>
 8005d40:	4603      	mov	r3, r0
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d001      	beq.n	8005d4a <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 8005d46:	f7ff fc57 	bl	80055f8 <Error_Handler>
  }

}
 8005d4a:	bf00      	nop
 8005d4c:	3730      	adds	r7, #48	; 0x30
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	2000264c 	.word	0x2000264c

08005d58 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8005d58:	b580      	push	{r7, lr}
 8005d5a:	b088      	sub	sp, #32
 8005d5c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005d5e:	f107 0310 	add.w	r3, r7, #16
 8005d62:	2200      	movs	r2, #0
 8005d64:	601a      	str	r2, [r3, #0]
 8005d66:	605a      	str	r2, [r3, #4]
 8005d68:	609a      	str	r2, [r3, #8]
 8005d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005d6c:	1d3b      	adds	r3, r7, #4
 8005d6e:	2200      	movs	r2, #0
 8005d70:	601a      	str	r2, [r3, #0]
 8005d72:	605a      	str	r2, [r3, #4]
 8005d74:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8005d76:	4b1e      	ldr	r3, [pc, #120]	; (8005df0 <MX_TIM5_Init+0x98>)
 8005d78:	4a1e      	ldr	r2, [pc, #120]	; (8005df4 <MX_TIM5_Init+0x9c>)
 8005d7a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 8005d7c:	4b1c      	ldr	r3, [pc, #112]	; (8005df0 <MX_TIM5_Init+0x98>)
 8005d7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d82:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005d84:	4b1a      	ldr	r3, [pc, #104]	; (8005df0 <MX_TIM5_Init+0x98>)
 8005d86:	2200      	movs	r2, #0
 8005d88:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8005d8a:	4b19      	ldr	r3, [pc, #100]	; (8005df0 <MX_TIM5_Init+0x98>)
 8005d8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d90:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8005d92:	4b17      	ldr	r3, [pc, #92]	; (8005df0 <MX_TIM5_Init+0x98>)
 8005d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d98:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005d9a:	4b15      	ldr	r3, [pc, #84]	; (8005df0 <MX_TIM5_Init+0x98>)
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8005da0:	4813      	ldr	r0, [pc, #76]	; (8005df0 <MX_TIM5_Init+0x98>)
 8005da2:	f004 f861 	bl	8009e68 <HAL_TIM_Base_Init>
 8005da6:	4603      	mov	r3, r0
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d001      	beq.n	8005db0 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8005dac:	f7ff fc24 	bl	80055f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005db4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8005db6:	f107 0310 	add.w	r3, r7, #16
 8005dba:	4619      	mov	r1, r3
 8005dbc:	480c      	ldr	r0, [pc, #48]	; (8005df0 <MX_TIM5_Init+0x98>)
 8005dbe:	f004 fb63 	bl	800a488 <HAL_TIM_ConfigClockSource>
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8005dc8:	f7ff fc16 	bl	80055f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8005dd4:	1d3b      	adds	r3, r7, #4
 8005dd6:	4619      	mov	r1, r3
 8005dd8:	4805      	ldr	r0, [pc, #20]	; (8005df0 <MX_TIM5_Init+0x98>)
 8005dda:	f004 feb9 	bl	800ab50 <HAL_TIMEx_MasterConfigSynchronization>
 8005dde:	4603      	mov	r3, r0
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d001      	beq.n	8005de8 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8005de4:	f7ff fc08 	bl	80055f8 <Error_Handler>
  }

}
 8005de8:	bf00      	nop
 8005dea:	3720      	adds	r7, #32
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}
 8005df0:	200025b4 	.word	0x200025b4
 8005df4:	40000c00 	.word	0x40000c00

08005df8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b094      	sub	sp, #80	; 0x50
 8005dfc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005dfe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e02:	2200      	movs	r2, #0
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	605a      	str	r2, [r3, #4]
 8005e08:	609a      	str	r2, [r3, #8]
 8005e0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e0c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005e10:	2200      	movs	r2, #0
 8005e12:	601a      	str	r2, [r3, #0]
 8005e14:	605a      	str	r2, [r3, #4]
 8005e16:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8005e18:	463b      	mov	r3, r7
 8005e1a:	2234      	movs	r2, #52	; 0x34
 8005e1c:	2100      	movs	r1, #0
 8005e1e:	4618      	mov	r0, r3
 8005e20:	f006 fba4 	bl	800c56c <memset>

  htim8.Instance = TIM8;
 8005e24:	4b26      	ldr	r3, [pc, #152]	; (8005ec0 <MX_TIM8_Init+0xc8>)
 8005e26:	4a27      	ldr	r2, [pc, #156]	; (8005ec4 <MX_TIM8_Init+0xcc>)
 8005e28:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8005e2a:	4b25      	ldr	r3, [pc, #148]	; (8005ec0 <MX_TIM8_Init+0xc8>)
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e30:	4b23      	ldr	r3, [pc, #140]	; (8005ec0 <MX_TIM8_Init+0xc8>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8005e36:	4b22      	ldr	r3, [pc, #136]	; (8005ec0 <MX_TIM8_Init+0xc8>)
 8005e38:	2201      	movs	r2, #1
 8005e3a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e3c:	4b20      	ldr	r3, [pc, #128]	; (8005ec0 <MX_TIM8_Init+0xc8>)
 8005e3e:	2200      	movs	r2, #0
 8005e40:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8005e42:	4b1f      	ldr	r3, [pc, #124]	; (8005ec0 <MX_TIM8_Init+0xc8>)
 8005e44:	2200      	movs	r2, #0
 8005e46:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005e48:	4b1d      	ldr	r3, [pc, #116]	; (8005ec0 <MX_TIM8_Init+0xc8>)
 8005e4a:	2200      	movs	r2, #0
 8005e4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8005e4e:	481c      	ldr	r0, [pc, #112]	; (8005ec0 <MX_TIM8_Init+0xc8>)
 8005e50:	f004 f80a 	bl	8009e68 <HAL_TIM_Base_Init>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8005e5a:	f7ff fbcd 	bl	80055f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e62:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8005e64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8005e68:	4619      	mov	r1, r3
 8005e6a:	4815      	ldr	r0, [pc, #84]	; (8005ec0 <MX_TIM8_Init+0xc8>)
 8005e6c:	f004 fb0c 	bl	800a488 <HAL_TIM_ConfigClockSource>
 8005e70:	4603      	mov	r3, r0
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d001      	beq.n	8005e7a <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8005e76:	f7ff fbbf 	bl	80055f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005e7a:	2320      	movs	r3, #32
 8005e7c:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8005e7e:	2300      	movs	r3, #0
 8005e80:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e82:	2300      	movs	r3, #0
 8005e84:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8005e86:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	480c      	ldr	r0, [pc, #48]	; (8005ec0 <MX_TIM8_Init+0xc8>)
 8005e8e:	f004 fe5f 	bl	800ab50 <HAL_TIMEx_MasterConfigSynchronization>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d001      	beq.n	8005e9c <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8005e98:	f7ff fbae 	bl	80055f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8005e9c:	2300      	movs	r3, #0
 8005e9e:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8005ea4:	463b      	mov	r3, r7
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	4805      	ldr	r0, [pc, #20]	; (8005ec0 <MX_TIM8_Init+0xc8>)
 8005eaa:	f004 fee7 	bl	800ac7c <HAL_TIMEx_ConfigBreakDeadTime>
 8005eae:	4603      	mov	r3, r0
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d001      	beq.n	8005eb8 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8005eb4:	f7ff fba0 	bl	80055f8 <Error_Handler>
  }

}
 8005eb8:	bf00      	nop
 8005eba:	3750      	adds	r7, #80	; 0x50
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}
 8005ec0:	200024d0 	.word	0x200024d0
 8005ec4:	40013400 	.word	0x40013400

08005ec8 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b088      	sub	sp, #32
 8005ecc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005ece:	f107 0310 	add.w	r3, r7, #16
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]
 8005ed6:	605a      	str	r2, [r3, #4]
 8005ed8:	609a      	str	r2, [r3, #8]
 8005eda:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005edc:	1d3b      	adds	r3, r7, #4
 8005ede:	2200      	movs	r2, #0
 8005ee0:	601a      	str	r2, [r3, #0]
 8005ee2:	605a      	str	r2, [r3, #4]
 8005ee4:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8005ee6:	4b1f      	ldr	r3, [pc, #124]	; (8005f64 <MX_TIM15_Init+0x9c>)
 8005ee8:	4a1f      	ldr	r2, [pc, #124]	; (8005f68 <MX_TIM15_Init+0xa0>)
 8005eea:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8005eec:	4b1d      	ldr	r3, [pc, #116]	; (8005f64 <MX_TIM15_Init+0x9c>)
 8005eee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ef2:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005ef4:	4b1b      	ldr	r3, [pc, #108]	; (8005f64 <MX_TIM15_Init+0x9c>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8005efa:	4b1a      	ldr	r3, [pc, #104]	; (8005f64 <MX_TIM15_Init+0x9c>)
 8005efc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f00:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f02:	4b18      	ldr	r3, [pc, #96]	; (8005f64 <MX_TIM15_Init+0x9c>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8005f08:	4b16      	ldr	r3, [pc, #88]	; (8005f64 <MX_TIM15_Init+0x9c>)
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f0e:	4b15      	ldr	r3, [pc, #84]	; (8005f64 <MX_TIM15_Init+0x9c>)
 8005f10:	2200      	movs	r2, #0
 8005f12:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8005f14:	4813      	ldr	r0, [pc, #76]	; (8005f64 <MX_TIM15_Init+0x9c>)
 8005f16:	f003 ffa7 	bl	8009e68 <HAL_TIM_Base_Init>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d001      	beq.n	8005f24 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8005f20:	f7ff fb6a 	bl	80055f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005f24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f28:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8005f2a:	f107 0310 	add.w	r3, r7, #16
 8005f2e:	4619      	mov	r1, r3
 8005f30:	480c      	ldr	r0, [pc, #48]	; (8005f64 <MX_TIM15_Init+0x9c>)
 8005f32:	f004 faa9 	bl	800a488 <HAL_TIM_ConfigClockSource>
 8005f36:	4603      	mov	r3, r0
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d001      	beq.n	8005f40 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8005f3c:	f7ff fb5c 	bl	80055f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f40:	2300      	movs	r3, #0
 8005f42:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f44:	2300      	movs	r3, #0
 8005f46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8005f48:	1d3b      	adds	r3, r7, #4
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	4805      	ldr	r0, [pc, #20]	; (8005f64 <MX_TIM15_Init+0x9c>)
 8005f4e:	f004 fdff 	bl	800ab50 <HAL_TIMEx_MasterConfigSynchronization>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d001      	beq.n	8005f5c <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8005f58:	f7ff fb4e 	bl	80055f8 <Error_Handler>
  }

}
 8005f5c:	bf00      	nop
 8005f5e:	3720      	adds	r7, #32
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	2000251c 	.word	0x2000251c
 8005f68:	40014000 	.word	0x40014000

08005f6c <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8005f70:	4b10      	ldr	r3, [pc, #64]	; (8005fb4 <MX_TIM16_Init+0x48>)
 8005f72:	4a11      	ldr	r2, [pc, #68]	; (8005fb8 <MX_TIM16_Init+0x4c>)
 8005f74:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1024;
 8005f76:	4b0f      	ldr	r3, [pc, #60]	; (8005fb4 <MX_TIM16_Init+0x48>)
 8005f78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f7c:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f7e:	4b0d      	ldr	r3, [pc, #52]	; (8005fb4 <MX_TIM16_Init+0x48>)
 8005f80:	2200      	movs	r2, #0
 8005f82:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1024;
 8005f84:	4b0b      	ldr	r3, [pc, #44]	; (8005fb4 <MX_TIM16_Init+0x48>)
 8005f86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005f8a:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f8c:	4b09      	ldr	r3, [pc, #36]	; (8005fb4 <MX_TIM16_Init+0x48>)
 8005f8e:	2200      	movs	r2, #0
 8005f90:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8005f92:	4b08      	ldr	r3, [pc, #32]	; (8005fb4 <MX_TIM16_Init+0x48>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f98:	4b06      	ldr	r3, [pc, #24]	; (8005fb4 <MX_TIM16_Init+0x48>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8005f9e:	4805      	ldr	r0, [pc, #20]	; (8005fb4 <MX_TIM16_Init+0x48>)
 8005fa0:	f003 ff62 	bl	8009e68 <HAL_TIM_Base_Init>
 8005fa4:	4603      	mov	r3, r0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d001      	beq.n	8005fae <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8005faa:	f7ff fb25 	bl	80055f8 <Error_Handler>
  }

}
 8005fae:	bf00      	nop
 8005fb0:	bd80      	pop	{r7, pc}
 8005fb2:	bf00      	nop
 8005fb4:	20002698 	.word	0x20002698
 8005fb8:	40014400 	.word	0x40014400

08005fbc <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 8005fc0:	4b0f      	ldr	r3, [pc, #60]	; (8006000 <MX_TIM17_Init+0x44>)
 8005fc2:	4a10      	ldr	r2, [pc, #64]	; (8006004 <MX_TIM17_Init+0x48>)
 8005fc4:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 8005fc6:	4b0e      	ldr	r3, [pc, #56]	; (8006000 <MX_TIM17_Init+0x44>)
 8005fc8:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8005fcc:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005fce:	4b0c      	ldr	r3, [pc, #48]	; (8006000 <MX_TIM17_Init+0x44>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 8005fd4:	4b0a      	ldr	r3, [pc, #40]	; (8006000 <MX_TIM17_Init+0x44>)
 8005fd6:	2240      	movs	r2, #64	; 0x40
 8005fd8:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005fda:	4b09      	ldr	r3, [pc, #36]	; (8006000 <MX_TIM17_Init+0x44>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8005fe0:	4b07      	ldr	r3, [pc, #28]	; (8006000 <MX_TIM17_Init+0x44>)
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005fe6:	4b06      	ldr	r3, [pc, #24]	; (8006000 <MX_TIM17_Init+0x44>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8005fec:	4804      	ldr	r0, [pc, #16]	; (8006000 <MX_TIM17_Init+0x44>)
 8005fee:	f003 ff3b 	bl	8009e68 <HAL_TIM_Base_Init>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d001      	beq.n	8005ffc <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8005ff8:	f7ff fafe 	bl	80055f8 <Error_Handler>
  }

}
 8005ffc:	bf00      	nop
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	20002568 	.word	0x20002568
 8006004:	40014800 	.word	0x40014800

08006008 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08a      	sub	sp, #40	; 0x28
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006010:	f107 0314 	add.w	r3, r7, #20
 8006014:	2200      	movs	r2, #0
 8006016:	601a      	str	r2, [r3, #0]
 8006018:	605a      	str	r2, [r3, #4]
 800601a:	609a      	str	r2, [r3, #8]
 800601c:	60da      	str	r2, [r3, #12]
 800601e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a23      	ldr	r2, [pc, #140]	; (80060b4 <HAL_TIM_Encoder_MspInit+0xac>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d13f      	bne.n	80060aa <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800602a:	4b23      	ldr	r3, [pc, #140]	; (80060b8 <HAL_TIM_Encoder_MspInit+0xb0>)
 800602c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800602e:	4a22      	ldr	r2, [pc, #136]	; (80060b8 <HAL_TIM_Encoder_MspInit+0xb0>)
 8006030:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006034:	6613      	str	r3, [r2, #96]	; 0x60
 8006036:	4b20      	ldr	r3, [pc, #128]	; (80060b8 <HAL_TIM_Encoder_MspInit+0xb0>)
 8006038:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800603a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800603e:	613b      	str	r3, [r7, #16]
 8006040:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006042:	4b1d      	ldr	r3, [pc, #116]	; (80060b8 <HAL_TIM_Encoder_MspInit+0xb0>)
 8006044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006046:	4a1c      	ldr	r2, [pc, #112]	; (80060b8 <HAL_TIM_Encoder_MspInit+0xb0>)
 8006048:	f043 0304 	orr.w	r3, r3, #4
 800604c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800604e:	4b1a      	ldr	r3, [pc, #104]	; (80060b8 <HAL_TIM_Encoder_MspInit+0xb0>)
 8006050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006052:	f003 0304 	and.w	r3, r3, #4
 8006056:	60fb      	str	r3, [r7, #12]
 8006058:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800605a:	2303      	movs	r3, #3
 800605c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800605e:	2302      	movs	r3, #2
 8006060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006062:	2300      	movs	r3, #0
 8006064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006066:	2300      	movs	r3, #0
 8006068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800606a:	2302      	movs	r3, #2
 800606c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800606e:	f107 0314 	add.w	r3, r7, #20
 8006072:	4619      	mov	r1, r3
 8006074:	4811      	ldr	r0, [pc, #68]	; (80060bc <HAL_TIM_Encoder_MspInit+0xb4>)
 8006076:	f002 fcd3 	bl	8008a20 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800607a:	2200      	movs	r2, #0
 800607c:	2100      	movs	r1, #0
 800607e:	2018      	movs	r0, #24
 8006080:	f001 fdb9 	bl	8007bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8006084:	2018      	movs	r0, #24
 8006086:	f001 fdd0 	bl	8007c2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 800608a:	2200      	movs	r2, #0
 800608c:	2101      	movs	r1, #1
 800608e:	2019      	movs	r0, #25
 8006090:	f001 fdb1 	bl	8007bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8006094:	2019      	movs	r0, #25
 8006096:	f001 fdc8 	bl	8007c2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 800609a:	2200      	movs	r2, #0
 800609c:	2101      	movs	r1, #1
 800609e:	201a      	movs	r0, #26
 80060a0:	f001 fda9 	bl	8007bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80060a4:	201a      	movs	r0, #26
 80060a6:	f001 fdc0 	bl	8007c2a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80060aa:	bf00      	nop
 80060ac:	3728      	adds	r7, #40	; 0x28
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	40012c00 	.word	0x40012c00
 80060b8:	40021000 	.word	0x40021000
 80060bc:	48000800 	.word	0x48000800

080060c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b08e      	sub	sp, #56	; 0x38
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80060c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060cc:	2200      	movs	r2, #0
 80060ce:	601a      	str	r2, [r3, #0]
 80060d0:	605a      	str	r2, [r3, #4]
 80060d2:	609a      	str	r2, [r3, #8]
 80060d4:	60da      	str	r2, [r3, #12]
 80060d6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060e0:	d131      	bne.n	8006146 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80060e2:	4b53      	ldr	r3, [pc, #332]	; (8006230 <HAL_TIM_Base_MspInit+0x170>)
 80060e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060e6:	4a52      	ldr	r2, [pc, #328]	; (8006230 <HAL_TIM_Base_MspInit+0x170>)
 80060e8:	f043 0301 	orr.w	r3, r3, #1
 80060ec:	6593      	str	r3, [r2, #88]	; 0x58
 80060ee:	4b50      	ldr	r3, [pc, #320]	; (8006230 <HAL_TIM_Base_MspInit+0x170>)
 80060f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060f2:	f003 0301 	and.w	r3, r3, #1
 80060f6:	623b      	str	r3, [r7, #32]
 80060f8:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80060fa:	4b4d      	ldr	r3, [pc, #308]	; (8006230 <HAL_TIM_Base_MspInit+0x170>)
 80060fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060fe:	4a4c      	ldr	r2, [pc, #304]	; (8006230 <HAL_TIM_Base_MspInit+0x170>)
 8006100:	f043 0301 	orr.w	r3, r3, #1
 8006104:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006106:	4b4a      	ldr	r3, [pc, #296]	; (8006230 <HAL_TIM_Base_MspInit+0x170>)
 8006108:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	61fb      	str	r3, [r7, #28]
 8006110:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006112:	2301      	movs	r3, #1
 8006114:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006116:	2302      	movs	r3, #2
 8006118:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800611a:	2300      	movs	r3, #0
 800611c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800611e:	2300      	movs	r3, #0
 8006120:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006122:	2301      	movs	r3, #1
 8006124:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800612a:	4619      	mov	r1, r3
 800612c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006130:	f002 fc76 	bl	8008a20 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8006134:	2200      	movs	r2, #0
 8006136:	2101      	movs	r1, #1
 8006138:	201c      	movs	r0, #28
 800613a:	f001 fd5c 	bl	8007bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800613e:	201c      	movs	r0, #28
 8006140:	f001 fd73 	bl	8007c2a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8006144:	e070      	b.n	8006228 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM5)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	4a3a      	ldr	r2, [pc, #232]	; (8006234 <HAL_TIM_Base_MspInit+0x174>)
 800614c:	4293      	cmp	r3, r2
 800614e:	d10c      	bne.n	800616a <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8006150:	4b37      	ldr	r3, [pc, #220]	; (8006230 <HAL_TIM_Base_MspInit+0x170>)
 8006152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006154:	4a36      	ldr	r2, [pc, #216]	; (8006230 <HAL_TIM_Base_MspInit+0x170>)
 8006156:	f043 0308 	orr.w	r3, r3, #8
 800615a:	6593      	str	r3, [r2, #88]	; 0x58
 800615c:	4b34      	ldr	r3, [pc, #208]	; (8006230 <HAL_TIM_Base_MspInit+0x170>)
 800615e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006160:	f003 0308 	and.w	r3, r3, #8
 8006164:	61bb      	str	r3, [r7, #24]
 8006166:	69bb      	ldr	r3, [r7, #24]
}
 8006168:	e05e      	b.n	8006228 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM8)
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a32      	ldr	r2, [pc, #200]	; (8006238 <HAL_TIM_Base_MspInit+0x178>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d10c      	bne.n	800618e <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006174:	4b2e      	ldr	r3, [pc, #184]	; (8006230 <HAL_TIM_Base_MspInit+0x170>)
 8006176:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006178:	4a2d      	ldr	r2, [pc, #180]	; (8006230 <HAL_TIM_Base_MspInit+0x170>)
 800617a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800617e:	6613      	str	r3, [r2, #96]	; 0x60
 8006180:	4b2b      	ldr	r3, [pc, #172]	; (8006230 <HAL_TIM_Base_MspInit+0x170>)
 8006182:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006184:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006188:	617b      	str	r3, [r7, #20]
 800618a:	697b      	ldr	r3, [r7, #20]
}
 800618c:	e04c      	b.n	8006228 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM15)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a2a      	ldr	r2, [pc, #168]	; (800623c <HAL_TIM_Base_MspInit+0x17c>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d114      	bne.n	80061c2 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8006198:	4b25      	ldr	r3, [pc, #148]	; (8006230 <HAL_TIM_Base_MspInit+0x170>)
 800619a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800619c:	4a24      	ldr	r2, [pc, #144]	; (8006230 <HAL_TIM_Base_MspInit+0x170>)
 800619e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061a2:	6613      	str	r3, [r2, #96]	; 0x60
 80061a4:	4b22      	ldr	r3, [pc, #136]	; (8006230 <HAL_TIM_Base_MspInit+0x170>)
 80061a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061ac:	613b      	str	r3, [r7, #16]
 80061ae:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80061b0:	2200      	movs	r2, #0
 80061b2:	2100      	movs	r1, #0
 80061b4:	2018      	movs	r0, #24
 80061b6:	f001 fd1e 	bl	8007bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80061ba:	2018      	movs	r0, #24
 80061bc:	f001 fd35 	bl	8007c2a <HAL_NVIC_EnableIRQ>
}
 80061c0:	e032      	b.n	8006228 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM16)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	4a1e      	ldr	r2, [pc, #120]	; (8006240 <HAL_TIM_Base_MspInit+0x180>)
 80061c8:	4293      	cmp	r3, r2
 80061ca:	d114      	bne.n	80061f6 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80061cc:	4b18      	ldr	r3, [pc, #96]	; (8006230 <HAL_TIM_Base_MspInit+0x170>)
 80061ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061d0:	4a17      	ldr	r2, [pc, #92]	; (8006230 <HAL_TIM_Base_MspInit+0x170>)
 80061d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80061d6:	6613      	str	r3, [r2, #96]	; 0x60
 80061d8:	4b15      	ldr	r3, [pc, #84]	; (8006230 <HAL_TIM_Base_MspInit+0x170>)
 80061da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061e0:	60fb      	str	r3, [r7, #12]
 80061e2:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80061e4:	2200      	movs	r2, #0
 80061e6:	2101      	movs	r1, #1
 80061e8:	2019      	movs	r0, #25
 80061ea:	f001 fd04 	bl	8007bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80061ee:	2019      	movs	r0, #25
 80061f0:	f001 fd1b 	bl	8007c2a <HAL_NVIC_EnableIRQ>
}
 80061f4:	e018      	b.n	8006228 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM17)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	4a12      	ldr	r2, [pc, #72]	; (8006244 <HAL_TIM_Base_MspInit+0x184>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d113      	bne.n	8006228 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM17_CLK_ENABLE();
 8006200:	4b0b      	ldr	r3, [pc, #44]	; (8006230 <HAL_TIM_Base_MspInit+0x170>)
 8006202:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006204:	4a0a      	ldr	r2, [pc, #40]	; (8006230 <HAL_TIM_Base_MspInit+0x170>)
 8006206:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800620a:	6613      	str	r3, [r2, #96]	; 0x60
 800620c:	4b08      	ldr	r3, [pc, #32]	; (8006230 <HAL_TIM_Base_MspInit+0x170>)
 800620e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006210:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006214:	60bb      	str	r3, [r7, #8]
 8006216:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8006218:	2200      	movs	r2, #0
 800621a:	2101      	movs	r1, #1
 800621c:	201a      	movs	r0, #26
 800621e:	f001 fcea 	bl	8007bf6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8006222:	201a      	movs	r0, #26
 8006224:	f001 fd01 	bl	8007c2a <HAL_NVIC_EnableIRQ>
}
 8006228:	bf00      	nop
 800622a:	3738      	adds	r7, #56	; 0x38
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}
 8006230:	40021000 	.word	0x40021000
 8006234:	40000c00 	.word	0x40000c00
 8006238:	40013400 	.word	0x40013400
 800623c:	40014000 	.word	0x40014000
 8006240:	40014400 	.word	0x40014400
 8006244:	40014800 	.word	0x40014800

08006248 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006248:	480d      	ldr	r0, [pc, #52]	; (8006280 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800624a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800624c:	480d      	ldr	r0, [pc, #52]	; (8006284 <LoopForever+0x6>)
  ldr r1, =_edata
 800624e:	490e      	ldr	r1, [pc, #56]	; (8006288 <LoopForever+0xa>)
  ldr r2, =_sidata
 8006250:	4a0e      	ldr	r2, [pc, #56]	; (800628c <LoopForever+0xe>)
  movs r3, #0
 8006252:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006254:	e002      	b.n	800625c <LoopCopyDataInit>

08006256 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006256:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006258:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800625a:	3304      	adds	r3, #4

0800625c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800625c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800625e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006260:	d3f9      	bcc.n	8006256 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006262:	4a0b      	ldr	r2, [pc, #44]	; (8006290 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006264:	4c0b      	ldr	r4, [pc, #44]	; (8006294 <LoopForever+0x16>)
  movs r3, #0
 8006266:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006268:	e001      	b.n	800626e <LoopFillZerobss>

0800626a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800626a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800626c:	3204      	adds	r2, #4

0800626e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800626e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006270:	d3fb      	bcc.n	800626a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006272:	f7ff fc81 	bl	8005b78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006276:	f006 f955 	bl	800c524 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800627a:	f7ff f8b7 	bl	80053ec <main>

0800627e <LoopForever>:

LoopForever:
    b LoopForever
 800627e:	e7fe      	b.n	800627e <LoopForever>
  ldr   r0, =_estack
 8006280:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006288:	20001e60 	.word	0x20001e60
  ldr r2, =_sidata
 800628c:	0800fde0 	.word	0x0800fde0
  ldr r2, =_sbss
 8006290:	20001e60 	.word	0x20001e60
  ldr r4, =_ebss
 8006294:	200026ec 	.word	0x200026ec

08006298 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006298:	e7fe      	b.n	8006298 <ADC1_2_IRQHandler>

0800629a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b082      	sub	sp, #8
 800629e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80062a0:	2300      	movs	r3, #0
 80062a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80062a4:	2003      	movs	r0, #3
 80062a6:	f001 fc9b 	bl	8007be0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80062aa:	2000      	movs	r0, #0
 80062ac:	f000 f80e 	bl	80062cc <HAL_InitTick>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80062b6:	2301      	movs	r3, #1
 80062b8:	71fb      	strb	r3, [r7, #7]
 80062ba:	e001      	b.n	80062c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80062bc:	f7ff fa6c 	bl	8005798 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80062c0:	79fb      	ldrb	r3, [r7, #7]

}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3708      	adds	r7, #8
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}
	...

080062cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b084      	sub	sp, #16
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80062d4:	2300      	movs	r3, #0
 80062d6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80062d8:	4b16      	ldr	r3, [pc, #88]	; (8006334 <HAL_InitTick+0x68>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d022      	beq.n	8006326 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80062e0:	4b15      	ldr	r3, [pc, #84]	; (8006338 <HAL_InitTick+0x6c>)
 80062e2:	681a      	ldr	r2, [r3, #0]
 80062e4:	4b13      	ldr	r3, [pc, #76]	; (8006334 <HAL_InitTick+0x68>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80062ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80062f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80062f4:	4618      	mov	r0, r3
 80062f6:	f001 fca6 	bl	8007c46 <HAL_SYSTICK_Config>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d10f      	bne.n	8006320 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b0f      	cmp	r3, #15
 8006304:	d809      	bhi.n	800631a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006306:	2200      	movs	r2, #0
 8006308:	6879      	ldr	r1, [r7, #4]
 800630a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800630e:	f001 fc72 	bl	8007bf6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006312:	4a0a      	ldr	r2, [pc, #40]	; (800633c <HAL_InitTick+0x70>)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6013      	str	r3, [r2, #0]
 8006318:	e007      	b.n	800632a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	73fb      	strb	r3, [r7, #15]
 800631e:	e004      	b.n	800632a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	73fb      	strb	r3, [r7, #15]
 8006324:	e001      	b.n	800632a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800632a:	7bfb      	ldrb	r3, [r7, #15]
}
 800632c:	4618      	mov	r0, r3
 800632e:	3710      	adds	r7, #16
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	20000c44 	.word	0x20000c44
 8006338:	20000c3c 	.word	0x20000c3c
 800633c:	20000c40 	.word	0x20000c40

08006340 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006340:	b480      	push	{r7}
 8006342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006344:	4b05      	ldr	r3, [pc, #20]	; (800635c <HAL_IncTick+0x1c>)
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	4b05      	ldr	r3, [pc, #20]	; (8006360 <HAL_IncTick+0x20>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4413      	add	r3, r2
 800634e:	4a03      	ldr	r2, [pc, #12]	; (800635c <HAL_IncTick+0x1c>)
 8006350:	6013      	str	r3, [r2, #0]
}
 8006352:	bf00      	nop
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	200026e4 	.word	0x200026e4
 8006360:	20000c44 	.word	0x20000c44

08006364 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006364:	b480      	push	{r7}
 8006366:	af00      	add	r7, sp, #0
  return uwTick;
 8006368:	4b03      	ldr	r3, [pc, #12]	; (8006378 <HAL_GetTick+0x14>)
 800636a:	681b      	ldr	r3, [r3, #0]
}
 800636c:	4618      	mov	r0, r3
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr
 8006376:	bf00      	nop
 8006378:	200026e4 	.word	0x200026e4

0800637c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b084      	sub	sp, #16
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006384:	f7ff ffee 	bl	8006364 <HAL_GetTick>
 8006388:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006394:	d004      	beq.n	80063a0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8006396:	4b09      	ldr	r3, [pc, #36]	; (80063bc <HAL_Delay+0x40>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	4413      	add	r3, r2
 800639e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80063a0:	bf00      	nop
 80063a2:	f7ff ffdf 	bl	8006364 <HAL_GetTick>
 80063a6:	4602      	mov	r2, r0
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	1ad3      	subs	r3, r2, r3
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	429a      	cmp	r2, r3
 80063b0:	d8f7      	bhi.n	80063a2 <HAL_Delay+0x26>
  {
  }
}
 80063b2:	bf00      	nop
 80063b4:	3710      	adds	r7, #16
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
 80063ba:	bf00      	nop
 80063bc:	20000c44 	.word	0x20000c44

080063c0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b083      	sub	sp, #12
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
 80063c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689b      	ldr	r3, [r3, #8]
 80063ce:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80063d2:	683b      	ldr	r3, [r7, #0]
 80063d4:	431a      	orrs	r2, r3
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	609a      	str	r2, [r3, #8]
}
 80063da:	bf00      	nop
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr

080063e6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b083      	sub	sp, #12
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
 80063ee:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	431a      	orrs	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	609a      	str	r2, [r3, #8]
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800641c:	4618      	mov	r0, r3
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8006428:	b490      	push	{r4, r7}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
 8006434:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	3360      	adds	r3, #96	; 0x60
 800643a:	461a      	mov	r2, r3
 800643c:	68bb      	ldr	r3, [r7, #8]
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	4413      	add	r3, r2
 8006442:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8006444:	6822      	ldr	r2, [r4, #0]
 8006446:	4b08      	ldr	r3, [pc, #32]	; (8006468 <LL_ADC_SetOffset+0x40>)
 8006448:	4013      	ands	r3, r2
 800644a:	687a      	ldr	r2, [r7, #4]
 800644c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	4313      	orrs	r3, r2
 8006456:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800645a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800645c:	bf00      	nop
 800645e:	3710      	adds	r7, #16
 8006460:	46bd      	mov	sp, r7
 8006462:	bc90      	pop	{r4, r7}
 8006464:	4770      	bx	lr
 8006466:	bf00      	nop
 8006468:	03fff000 	.word	0x03fff000

0800646c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800646c:	b490      	push	{r4, r7}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	3360      	adds	r3, #96	; 0x60
 800647a:	461a      	mov	r2, r3
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4413      	add	r3, r2
 8006482:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006484:	6823      	ldr	r3, [r4, #0]
 8006486:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800648a:	4618      	mov	r0, r3
 800648c:	3708      	adds	r7, #8
 800648e:	46bd      	mov	sp, r7
 8006490:	bc90      	pop	{r4, r7}
 8006492:	4770      	bx	lr

08006494 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8006494:	b490      	push	{r4, r7}
 8006496:	b084      	sub	sp, #16
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	3360      	adds	r3, #96	; 0x60
 80064a4:	461a      	mov	r2, r3
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4413      	add	r3, r2
 80064ac:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80064ae:	6823      	ldr	r3, [r4, #0]
 80064b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	4313      	orrs	r3, r2
 80064b8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80064ba:	bf00      	nop
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bc90      	pop	{r4, r7}
 80064c2:	4770      	bx	lr

080064c4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80064c4:	b490      	push	{r4, r7}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	3360      	adds	r3, #96	; 0x60
 80064d4:	461a      	mov	r2, r3
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	4413      	add	r3, r2
 80064dc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80064de:	6823      	ldr	r3, [r4, #0]
 80064e0:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 80064ea:	bf00      	nop
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bc90      	pop	{r4, r7}
 80064f2:	4770      	bx	lr

080064f4 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80064f4:	b490      	push	{r4, r7}
 80064f6:	b084      	sub	sp, #16
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	60f8      	str	r0, [r7, #12]
 80064fc:	60b9      	str	r1, [r7, #8]
 80064fe:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3360      	adds	r3, #96	; 0x60
 8006504:	461a      	mov	r2, r3
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	009b      	lsls	r3, r3, #2
 800650a:	4413      	add	r3, r2
 800650c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800650e:	6823      	ldr	r3, [r4, #0]
 8006510:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4313      	orrs	r3, r2
 8006518:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800651a:	bf00      	nop
 800651c:	3710      	adds	r7, #16
 800651e:	46bd      	mov	sp, r7
 8006520:	bc90      	pop	{r4, r7}
 8006522:	4770      	bx	lr

08006524 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8006524:	b480      	push	{r7}
 8006526:	b083      	sub	sp, #12
 8006528:	af00      	add	r7, sp, #0
 800652a:	6078      	str	r0, [r7, #4]
 800652c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	431a      	orrs	r2, r3
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	615a      	str	r2, [r3, #20]
}
 800653e:	bf00      	nop
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800654a:	b490      	push	{r4, r7}
 800654c:	b084      	sub	sp, #16
 800654e:	af00      	add	r7, sp, #0
 8006550:	60f8      	str	r0, [r7, #12]
 8006552:	60b9      	str	r1, [r7, #8]
 8006554:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	3330      	adds	r3, #48	; 0x30
 800655a:	461a      	mov	r2, r3
 800655c:	68bb      	ldr	r3, [r7, #8]
 800655e:	0a1b      	lsrs	r3, r3, #8
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	f003 030c 	and.w	r3, r3, #12
 8006566:	4413      	add	r3, r2
 8006568:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800656a:	6822      	ldr	r2, [r4, #0]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	f003 031f 	and.w	r3, r3, #31
 8006572:	211f      	movs	r1, #31
 8006574:	fa01 f303 	lsl.w	r3, r1, r3
 8006578:	43db      	mvns	r3, r3
 800657a:	401a      	ands	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	0e9b      	lsrs	r3, r3, #26
 8006580:	f003 011f 	and.w	r1, r3, #31
 8006584:	68bb      	ldr	r3, [r7, #8]
 8006586:	f003 031f 	and.w	r3, r3, #31
 800658a:	fa01 f303 	lsl.w	r3, r1, r3
 800658e:	4313      	orrs	r3, r2
 8006590:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8006592:	bf00      	nop
 8006594:	3710      	adds	r7, #16
 8006596:	46bd      	mov	sp, r7
 8006598:	bc90      	pop	{r4, r7}
 800659a:	4770      	bx	lr

0800659c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800659c:	b490      	push	{r4, r7}
 800659e:	b084      	sub	sp, #16
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	60b9      	str	r1, [r7, #8]
 80065a6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	3314      	adds	r3, #20
 80065ac:	461a      	mov	r2, r3
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	0e5b      	lsrs	r3, r3, #25
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	f003 0304 	and.w	r3, r3, #4
 80065b8:	4413      	add	r3, r2
 80065ba:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80065bc:	6822      	ldr	r2, [r4, #0]
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	0d1b      	lsrs	r3, r3, #20
 80065c2:	f003 031f 	and.w	r3, r3, #31
 80065c6:	2107      	movs	r1, #7
 80065c8:	fa01 f303 	lsl.w	r3, r1, r3
 80065cc:	43db      	mvns	r3, r3
 80065ce:	401a      	ands	r2, r3
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	0d1b      	lsrs	r3, r3, #20
 80065d4:	f003 031f 	and.w	r3, r3, #31
 80065d8:	6879      	ldr	r1, [r7, #4]
 80065da:	fa01 f303 	lsl.w	r3, r1, r3
 80065de:	4313      	orrs	r3, r2
 80065e0:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80065e2:	bf00      	nop
 80065e4:	3710      	adds	r7, #16
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bc90      	pop	{r4, r7}
 80065ea:	4770      	bx	lr

080065ec <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b085      	sub	sp, #20
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	60f8      	str	r0, [r7, #12]
 80065f4:	60b9      	str	r1, [r7, #8]
 80065f6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006604:	43db      	mvns	r3, r3
 8006606:	401a      	ands	r2, r3
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f003 0318 	and.w	r3, r3, #24
 800660e:	4908      	ldr	r1, [pc, #32]	; (8006630 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006610:	40d9      	lsrs	r1, r3
 8006612:	68bb      	ldr	r3, [r7, #8]
 8006614:	400b      	ands	r3, r1
 8006616:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800661a:	431a      	orrs	r2, r3
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006622:	bf00      	nop
 8006624:	3714      	adds	r7, #20
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	0007ffff 	.word	0x0007ffff

08006634 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006634:	b480      	push	{r7}
 8006636:	b083      	sub	sp, #12
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006644:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006648:	687a      	ldr	r2, [r7, #4]
 800664a:	6093      	str	r3, [r2, #8]
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	689b      	ldr	r3, [r3, #8]
 8006664:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006668:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800666c:	d101      	bne.n	8006672 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800666e:	2301      	movs	r3, #1
 8006670:	e000      	b.n	8006674 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8006672:	2300      	movs	r3, #0
}
 8006674:	4618      	mov	r0, r3
 8006676:	370c      	adds	r7, #12
 8006678:	46bd      	mov	sp, r7
 800667a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667e:	4770      	bx	lr

08006680 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8006680:	b480      	push	{r7}
 8006682:	b083      	sub	sp, #12
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8006690:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006694:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800669c:	bf00      	nop
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	689b      	ldr	r3, [r3, #8]
 80066b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066b8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80066bc:	d101      	bne.n	80066c2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80066be:	2301      	movs	r3, #1
 80066c0:	e000      	b.n	80066c4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80066c2:	2300      	movs	r3, #0
}
 80066c4:	4618      	mov	r0, r3
 80066c6:	370c      	adds	r7, #12
 80066c8:	46bd      	mov	sp, r7
 80066ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ce:	4770      	bx	lr

080066d0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80066d0:	b480      	push	{r7}
 80066d2:	b083      	sub	sp, #12
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	689b      	ldr	r3, [r3, #8]
 80066dc:	f003 0301 	and.w	r3, r3, #1
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d101      	bne.n	80066e8 <LL_ADC_IsEnabled+0x18>
 80066e4:	2301      	movs	r3, #1
 80066e6:	e000      	b.n	80066ea <LL_ADC_IsEnabled+0x1a>
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr

080066f6 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80066f6:	b480      	push	{r7}
 80066f8:	b083      	sub	sp, #12
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	f003 0304 	and.w	r3, r3, #4
 8006706:	2b04      	cmp	r3, #4
 8006708:	d101      	bne.n	800670e <LL_ADC_REG_IsConversionOngoing+0x18>
 800670a:	2301      	movs	r3, #1
 800670c:	e000      	b.n	8006710 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	370c      	adds	r7, #12
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800671c:	b480      	push	{r7}
 800671e:	b083      	sub	sp, #12
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	f003 0308 	and.w	r3, r3, #8
 800672c:	2b08      	cmp	r3, #8
 800672e:	d101      	bne.n	8006734 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006730:	2301      	movs	r3, #1
 8006732:	e000      	b.n	8006736 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006734:	2300      	movs	r3, #0
}
 8006736:	4618      	mov	r0, r3
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006740:	4770      	bx	lr
	...

08006744 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006744:	b590      	push	{r4, r7, lr}
 8006746:	b089      	sub	sp, #36	; 0x24
 8006748:	af00      	add	r7, sp, #0
 800674a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800674c:	2300      	movs	r3, #0
 800674e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006750:	2300      	movs	r3, #0
 8006752:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e1ad      	b.n	8006aba <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	695b      	ldr	r3, [r3, #20]
 8006762:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006768:	2b00      	cmp	r3, #0
 800676a:	d109      	bne.n	8006780 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f7fe f843 	bl	80047f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	4618      	mov	r0, r3
 8006786:	f7ff ff67 	bl	8006658 <LL_ADC_IsDeepPowerDownEnabled>
 800678a:	4603      	mov	r3, r0
 800678c:	2b00      	cmp	r3, #0
 800678e:	d004      	beq.n	800679a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	4618      	mov	r0, r3
 8006796:	f7ff ff4d 	bl	8006634 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	4618      	mov	r0, r3
 80067a0:	f7ff ff82 	bl	80066a8 <LL_ADC_IsInternalRegulatorEnabled>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d113      	bne.n	80067d2 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7ff ff66 	bl	8006680 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80067b4:	4b9e      	ldr	r3, [pc, #632]	; (8006a30 <HAL_ADC_Init+0x2ec>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	099b      	lsrs	r3, r3, #6
 80067ba:	4a9e      	ldr	r2, [pc, #632]	; (8006a34 <HAL_ADC_Init+0x2f0>)
 80067bc:	fba2 2303 	umull	r2, r3, r2, r3
 80067c0:	099b      	lsrs	r3, r3, #6
 80067c2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80067c4:	e002      	b.n	80067cc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	3b01      	subs	r3, #1
 80067ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80067cc:	68bb      	ldr	r3, [r7, #8]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d1f9      	bne.n	80067c6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	4618      	mov	r0, r3
 80067d8:	f7ff ff66 	bl	80066a8 <LL_ADC_IsInternalRegulatorEnabled>
 80067dc:	4603      	mov	r3, r0
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d10d      	bne.n	80067fe <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067e6:	f043 0210 	orr.w	r2, r3, #16
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067f2:	f043 0201 	orr.w	r2, r3, #1
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80067fa:	2301      	movs	r3, #1
 80067fc:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	4618      	mov	r0, r3
 8006804:	f7ff ff77 	bl	80066f6 <LL_ADC_REG_IsConversionOngoing>
 8006808:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800680e:	f003 0310 	and.w	r3, r3, #16
 8006812:	2b00      	cmp	r3, #0
 8006814:	f040 8148 	bne.w	8006aa8 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	2b00      	cmp	r3, #0
 800681c:	f040 8144 	bne.w	8006aa8 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006824:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006828:	f043 0202 	orr.w	r2, r3, #2
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4618      	mov	r0, r3
 8006836:	f7ff ff4b 	bl	80066d0 <LL_ADC_IsEnabled>
 800683a:	4603      	mov	r3, r0
 800683c:	2b00      	cmp	r3, #0
 800683e:	d141      	bne.n	80068c4 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006848:	d004      	beq.n	8006854 <HAL_ADC_Init+0x110>
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a7a      	ldr	r2, [pc, #488]	; (8006a38 <HAL_ADC_Init+0x2f4>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d10f      	bne.n	8006874 <HAL_ADC_Init+0x130>
 8006854:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8006858:	f7ff ff3a 	bl	80066d0 <LL_ADC_IsEnabled>
 800685c:	4604      	mov	r4, r0
 800685e:	4876      	ldr	r0, [pc, #472]	; (8006a38 <HAL_ADC_Init+0x2f4>)
 8006860:	f7ff ff36 	bl	80066d0 <LL_ADC_IsEnabled>
 8006864:	4603      	mov	r3, r0
 8006866:	4323      	orrs	r3, r4
 8006868:	2b00      	cmp	r3, #0
 800686a:	bf0c      	ite	eq
 800686c:	2301      	moveq	r3, #1
 800686e:	2300      	movne	r3, #0
 8006870:	b2db      	uxtb	r3, r3
 8006872:	e012      	b.n	800689a <HAL_ADC_Init+0x156>
 8006874:	4871      	ldr	r0, [pc, #452]	; (8006a3c <HAL_ADC_Init+0x2f8>)
 8006876:	f7ff ff2b 	bl	80066d0 <LL_ADC_IsEnabled>
 800687a:	4604      	mov	r4, r0
 800687c:	4870      	ldr	r0, [pc, #448]	; (8006a40 <HAL_ADC_Init+0x2fc>)
 800687e:	f7ff ff27 	bl	80066d0 <LL_ADC_IsEnabled>
 8006882:	4603      	mov	r3, r0
 8006884:	431c      	orrs	r4, r3
 8006886:	486f      	ldr	r0, [pc, #444]	; (8006a44 <HAL_ADC_Init+0x300>)
 8006888:	f7ff ff22 	bl	80066d0 <LL_ADC_IsEnabled>
 800688c:	4603      	mov	r3, r0
 800688e:	4323      	orrs	r3, r4
 8006890:	2b00      	cmp	r3, #0
 8006892:	bf0c      	ite	eq
 8006894:	2301      	moveq	r3, #1
 8006896:	2300      	movne	r3, #0
 8006898:	b2db      	uxtb	r3, r3
 800689a:	2b00      	cmp	r3, #0
 800689c:	d012      	beq.n	80068c4 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80068a6:	d004      	beq.n	80068b2 <HAL_ADC_Init+0x16e>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a62      	ldr	r2, [pc, #392]	; (8006a38 <HAL_ADC_Init+0x2f4>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d101      	bne.n	80068b6 <HAL_ADC_Init+0x172>
 80068b2:	4a65      	ldr	r2, [pc, #404]	; (8006a48 <HAL_ADC_Init+0x304>)
 80068b4:	e000      	b.n	80068b8 <HAL_ADC_Init+0x174>
 80068b6:	4a65      	ldr	r2, [pc, #404]	; (8006a4c <HAL_ADC_Init+0x308>)
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	4619      	mov	r1, r3
 80068be:	4610      	mov	r0, r2
 80068c0:	f7ff fd7e 	bl	80063c0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	7f5b      	ldrb	r3, [r3, #29]
 80068c8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80068ce:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80068d4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80068da:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80068e2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80068e4:	4313      	orrs	r3, r2
 80068e6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80068ee:	2b01      	cmp	r3, #1
 80068f0:	d106      	bne.n	8006900 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f6:	3b01      	subs	r3, #1
 80068f8:	045b      	lsls	r3, r3, #17
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006904:	2b00      	cmp	r3, #0
 8006906:	d009      	beq.n	800691c <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800690c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006914:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8006916:	69ba      	ldr	r2, [r7, #24]
 8006918:	4313      	orrs	r3, r2
 800691a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	68da      	ldr	r2, [r3, #12]
 8006922:	4b4b      	ldr	r3, [pc, #300]	; (8006a50 <HAL_ADC_Init+0x30c>)
 8006924:	4013      	ands	r3, r2
 8006926:	687a      	ldr	r2, [r7, #4]
 8006928:	6812      	ldr	r2, [r2, #0]
 800692a:	69b9      	ldr	r1, [r7, #24]
 800692c:	430b      	orrs	r3, r1
 800692e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	430a      	orrs	r2, r1
 8006944:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4618      	mov	r0, r3
 800694c:	f7ff fed3 	bl	80066f6 <LL_ADC_REG_IsConversionOngoing>
 8006950:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4618      	mov	r0, r3
 8006958:	f7ff fee0 	bl	800671c <LL_ADC_INJ_IsConversionOngoing>
 800695c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d17f      	bne.n	8006a64 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d17c      	bne.n	8006a64 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800696e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006976:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006978:	4313      	orrs	r3, r2
 800697a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	68db      	ldr	r3, [r3, #12]
 8006982:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006986:	f023 0302 	bic.w	r3, r3, #2
 800698a:	687a      	ldr	r2, [r7, #4]
 800698c:	6812      	ldr	r2, [r2, #0]
 800698e:	69b9      	ldr	r1, [r7, #24]
 8006990:	430b      	orrs	r3, r1
 8006992:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d017      	beq.n	80069cc <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	691a      	ldr	r2, [r3, #16]
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80069aa:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80069b4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80069b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	6911      	ldr	r1, [r2, #16]
 80069c0:	687a      	ldr	r2, [r7, #4]
 80069c2:	6812      	ldr	r2, [r2, #0]
 80069c4:	430b      	orrs	r3, r1
 80069c6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80069ca:	e013      	b.n	80069f4 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	691a      	ldr	r2, [r3, #16]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80069da:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	6812      	ldr	r2, [r2, #0]
 80069e8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80069ec:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80069f0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d12a      	bne.n	8006a54 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	691b      	ldr	r3, [r3, #16]
 8006a04:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006a08:	f023 0304 	bic.w	r3, r3, #4
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006a14:	4311      	orrs	r1, r2
 8006a16:	687a      	ldr	r2, [r7, #4]
 8006a18:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006a1a:	4311      	orrs	r1, r2
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8006a20:	430a      	orrs	r2, r1
 8006a22:	431a      	orrs	r2, r3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f042 0201 	orr.w	r2, r2, #1
 8006a2c:	611a      	str	r2, [r3, #16]
 8006a2e:	e019      	b.n	8006a64 <HAL_ADC_Init+0x320>
 8006a30:	20000c3c 	.word	0x20000c3c
 8006a34:	053e2d63 	.word	0x053e2d63
 8006a38:	50000100 	.word	0x50000100
 8006a3c:	50000400 	.word	0x50000400
 8006a40:	50000500 	.word	0x50000500
 8006a44:	50000600 	.word	0x50000600
 8006a48:	50000300 	.word	0x50000300
 8006a4c:	50000700 	.word	0x50000700
 8006a50:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	691a      	ldr	r2, [r3, #16]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f022 0201 	bic.w	r2, r2, #1
 8006a62:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	2b01      	cmp	r3, #1
 8006a6a:	d10c      	bne.n	8006a86 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a72:	f023 010f 	bic.w	r1, r3, #15
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6a1b      	ldr	r3, [r3, #32]
 8006a7a:	1e5a      	subs	r2, r3, #1
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	430a      	orrs	r2, r1
 8006a82:	631a      	str	r2, [r3, #48]	; 0x30
 8006a84:	e007      	b.n	8006a96 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f022 020f 	bic.w	r2, r2, #15
 8006a94:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a9a:	f023 0303 	bic.w	r3, r3, #3
 8006a9e:	f043 0201 	orr.w	r2, r3, #1
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	65da      	str	r2, [r3, #92]	; 0x5c
 8006aa6:	e007      	b.n	8006ab8 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006aac:	f043 0210 	orr.w	r2, r3, #16
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8006ab8:	7ffb      	ldrb	r3, [r7, #31]
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	3724      	adds	r7, #36	; 0x24
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	bd90      	pop	{r4, r7, pc}
 8006ac2:	bf00      	nop

08006ac4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b0a6      	sub	sp, #152	; 0x98
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
 8006acc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006ace:	2300      	movs	r3, #0
 8006ad0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8006ade:	2b01      	cmp	r3, #1
 8006ae0:	d101      	bne.n	8006ae6 <HAL_ADC_ConfigChannel+0x22>
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	e38e      	b.n	8007204 <HAL_ADC_ConfigChannel+0x740>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7ff fdff 	bl	80066f6 <LL_ADC_REG_IsConversionOngoing>
 8006af8:	4603      	mov	r3, r0
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	f040 836f 	bne.w	80071de <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	6818      	ldr	r0, [r3, #0]
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	6859      	ldr	r1, [r3, #4]
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	461a      	mov	r2, r3
 8006b0e:	f7ff fd1c 	bl	800654a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4618      	mov	r0, r3
 8006b18:	f7ff fded 	bl	80066f6 <LL_ADC_REG_IsConversionOngoing>
 8006b1c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	4618      	mov	r0, r3
 8006b26:	f7ff fdf9 	bl	800671c <LL_ADC_INJ_IsConversionOngoing>
 8006b2a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006b2e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	f040 817b 	bne.w	8006e2e <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8006b38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	f040 8176 	bne.w	8006e2e <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b4a:	d10f      	bne.n	8006b6c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	6818      	ldr	r0, [r3, #0]
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2200      	movs	r2, #0
 8006b56:	4619      	mov	r1, r3
 8006b58:	f7ff fd20 	bl	800659c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006b64:	4618      	mov	r0, r3
 8006b66:	f7ff fcdd 	bl	8006524 <LL_ADC_SetSamplingTimeCommonConfig>
 8006b6a:	e00e      	b.n	8006b8a <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6818      	ldr	r0, [r3, #0]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	6819      	ldr	r1, [r3, #0]
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	689b      	ldr	r3, [r3, #8]
 8006b78:	461a      	mov	r2, r3
 8006b7a:	f7ff fd0f 	bl	800659c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	2100      	movs	r1, #0
 8006b84:	4618      	mov	r0, r3
 8006b86:	f7ff fccd 	bl	8006524 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	695a      	ldr	r2, [r3, #20]
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	08db      	lsrs	r3, r3, #3
 8006b96:	f003 0303 	and.w	r3, r3, #3
 8006b9a:	005b      	lsls	r3, r3, #1
 8006b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8006ba0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	2b04      	cmp	r3, #4
 8006baa:	d022      	beq.n	8006bf2 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6818      	ldr	r0, [r3, #0]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	6919      	ldr	r1, [r3, #16]
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	681a      	ldr	r2, [r3, #0]
 8006bb8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bbc:	f7ff fc34 	bl	8006428 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6818      	ldr	r0, [r3, #0]
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	6919      	ldr	r1, [r3, #16]
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	461a      	mov	r2, r3
 8006bce:	f7ff fc79 	bl	80064c4 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6818      	ldr	r0, [r3, #0]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	6919      	ldr	r1, [r3, #16]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	7f1b      	ldrb	r3, [r3, #28]
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d102      	bne.n	8006be8 <HAL_ADC_ConfigChannel+0x124>
 8006be2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006be6:	e000      	b.n	8006bea <HAL_ADC_ConfigChannel+0x126>
 8006be8:	2300      	movs	r3, #0
 8006bea:	461a      	mov	r2, r3
 8006bec:	f7ff fc82 	bl	80064f4 <LL_ADC_SetOffsetSaturation>
 8006bf0:	e11d      	b.n	8006e2e <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	2100      	movs	r1, #0
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	f7ff fc37 	bl	800646c <LL_ADC_GetOffsetChannel>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d10a      	bne.n	8006c1e <HAL_ADC_ConfigChannel+0x15a>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2100      	movs	r1, #0
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7ff fc2c 	bl	800646c <LL_ADC_GetOffsetChannel>
 8006c14:	4603      	mov	r3, r0
 8006c16:	0e9b      	lsrs	r3, r3, #26
 8006c18:	f003 021f 	and.w	r2, r3, #31
 8006c1c:	e012      	b.n	8006c44 <HAL_ADC_ConfigChannel+0x180>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2100      	movs	r1, #0
 8006c24:	4618      	mov	r0, r3
 8006c26:	f7ff fc21 	bl	800646c <LL_ADC_GetOffsetChannel>
 8006c2a:	4603      	mov	r3, r0
 8006c2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c30:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c34:	fa93 f3a3 	rbit	r3, r3
 8006c38:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006c3a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c3c:	fab3 f383 	clz	r3, r3
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	461a      	mov	r2, r3
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d105      	bne.n	8006c5c <HAL_ADC_ConfigChannel+0x198>
 8006c50:	683b      	ldr	r3, [r7, #0]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	0e9b      	lsrs	r3, r3, #26
 8006c56:	f003 031f 	and.w	r3, r3, #31
 8006c5a:	e00a      	b.n	8006c72 <HAL_ADC_ConfigChannel+0x1ae>
 8006c5c:	683b      	ldr	r3, [r7, #0]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006c64:	fa93 f3a3 	rbit	r3, r3
 8006c68:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8006c6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006c6c:	fab3 f383 	clz	r3, r3
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d106      	bne.n	8006c84 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	2100      	movs	r1, #0
 8006c7e:	4618      	mov	r0, r3
 8006c80:	f7ff fc08 	bl	8006494 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2101      	movs	r1, #1
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	f7ff fbee 	bl	800646c <LL_ADC_GetOffsetChannel>
 8006c90:	4603      	mov	r3, r0
 8006c92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d10a      	bne.n	8006cb0 <HAL_ADC_ConfigChannel+0x1ec>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2101      	movs	r1, #1
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	f7ff fbe3 	bl	800646c <LL_ADC_GetOffsetChannel>
 8006ca6:	4603      	mov	r3, r0
 8006ca8:	0e9b      	lsrs	r3, r3, #26
 8006caa:	f003 021f 	and.w	r2, r3, #31
 8006cae:	e010      	b.n	8006cd2 <HAL_ADC_ConfigChannel+0x20e>
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	2101      	movs	r1, #1
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7ff fbd8 	bl	800646c <LL_ADC_GetOffsetChannel>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cc0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cc2:	fa93 f3a3 	rbit	r3, r3
 8006cc6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8006cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cca:	fab3 f383 	clz	r3, r3
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d105      	bne.n	8006cea <HAL_ADC_ConfigChannel+0x226>
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	0e9b      	lsrs	r3, r3, #26
 8006ce4:	f003 031f 	and.w	r3, r3, #31
 8006ce8:	e00a      	b.n	8006d00 <HAL_ADC_ConfigChannel+0x23c>
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cf0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006cf2:	fa93 f3a3 	rbit	r3, r3
 8006cf6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006cf8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cfa:	fab3 f383 	clz	r3, r3
 8006cfe:	b2db      	uxtb	r3, r3
 8006d00:	429a      	cmp	r2, r3
 8006d02:	d106      	bne.n	8006d12 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	2101      	movs	r1, #1
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7ff fbc1 	bl	8006494 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2102      	movs	r1, #2
 8006d18:	4618      	mov	r0, r3
 8006d1a:	f7ff fba7 	bl	800646c <LL_ADC_GetOffsetChannel>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d10a      	bne.n	8006d3e <HAL_ADC_ConfigChannel+0x27a>
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	2102      	movs	r1, #2
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7ff fb9c 	bl	800646c <LL_ADC_GetOffsetChannel>
 8006d34:	4603      	mov	r3, r0
 8006d36:	0e9b      	lsrs	r3, r3, #26
 8006d38:	f003 021f 	and.w	r2, r3, #31
 8006d3c:	e010      	b.n	8006d60 <HAL_ADC_ConfigChannel+0x29c>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	2102      	movs	r1, #2
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7ff fb91 	bl	800646c <LL_ADC_GetOffsetChannel>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d50:	fa93 f3a3 	rbit	r3, r3
 8006d54:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8006d56:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d58:	fab3 f383 	clz	r3, r3
 8006d5c:	b2db      	uxtb	r3, r3
 8006d5e:	461a      	mov	r2, r3
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d105      	bne.n	8006d78 <HAL_ADC_ConfigChannel+0x2b4>
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	0e9b      	lsrs	r3, r3, #26
 8006d72:	f003 031f 	and.w	r3, r3, #31
 8006d76:	e00a      	b.n	8006d8e <HAL_ADC_ConfigChannel+0x2ca>
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d80:	fa93 f3a3 	rbit	r3, r3
 8006d84:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8006d86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d88:	fab3 f383 	clz	r3, r3
 8006d8c:	b2db      	uxtb	r3, r3
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d106      	bne.n	8006da0 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	2200      	movs	r2, #0
 8006d98:	2102      	movs	r1, #2
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7ff fb7a 	bl	8006494 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	2103      	movs	r1, #3
 8006da6:	4618      	mov	r0, r3
 8006da8:	f7ff fb60 	bl	800646c <LL_ADC_GetOffsetChannel>
 8006dac:	4603      	mov	r3, r0
 8006dae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d10a      	bne.n	8006dcc <HAL_ADC_ConfigChannel+0x308>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	2103      	movs	r1, #3
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	f7ff fb55 	bl	800646c <LL_ADC_GetOffsetChannel>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	0e9b      	lsrs	r3, r3, #26
 8006dc6:	f003 021f 	and.w	r2, r3, #31
 8006dca:	e010      	b.n	8006dee <HAL_ADC_ConfigChannel+0x32a>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	2103      	movs	r1, #3
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	f7ff fb4a 	bl	800646c <LL_ADC_GetOffsetChannel>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dde:	fa93 f3a3 	rbit	r3, r3
 8006de2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006de4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006de6:	fab3 f383 	clz	r3, r3
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	461a      	mov	r2, r3
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d105      	bne.n	8006e06 <HAL_ADC_ConfigChannel+0x342>
 8006dfa:	683b      	ldr	r3, [r7, #0]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	0e9b      	lsrs	r3, r3, #26
 8006e00:	f003 031f 	and.w	r3, r3, #31
 8006e04:	e00a      	b.n	8006e1c <HAL_ADC_ConfigChannel+0x358>
 8006e06:	683b      	ldr	r3, [r7, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e0e:	fa93 f3a3 	rbit	r3, r3
 8006e12:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8006e14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e16:	fab3 f383 	clz	r3, r3
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d106      	bne.n	8006e2e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	2200      	movs	r2, #0
 8006e26:	2103      	movs	r1, #3
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7ff fb33 	bl	8006494 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f7ff fc4c 	bl	80066d0 <LL_ADC_IsEnabled>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	f040 810c 	bne.w	8007058 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6818      	ldr	r0, [r3, #0]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	6819      	ldr	r1, [r3, #0]
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	68db      	ldr	r3, [r3, #12]
 8006e4c:	461a      	mov	r2, r3
 8006e4e:	f7ff fbcd 	bl	80065ec <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	68db      	ldr	r3, [r3, #12]
 8006e56:	4aaf      	ldr	r2, [pc, #700]	; (8007114 <HAL_ADC_ConfigChannel+0x650>)
 8006e58:	4293      	cmp	r3, r2
 8006e5a:	f040 80fd 	bne.w	8007058 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d10b      	bne.n	8006e86 <HAL_ADC_ConfigChannel+0x3c2>
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	0e9b      	lsrs	r3, r3, #26
 8006e74:	3301      	adds	r3, #1
 8006e76:	f003 031f 	and.w	r3, r3, #31
 8006e7a:	2b09      	cmp	r3, #9
 8006e7c:	bf94      	ite	ls
 8006e7e:	2301      	movls	r3, #1
 8006e80:	2300      	movhi	r3, #0
 8006e82:	b2db      	uxtb	r3, r3
 8006e84:	e012      	b.n	8006eac <HAL_ADC_ConfigChannel+0x3e8>
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e8e:	fa93 f3a3 	rbit	r3, r3
 8006e92:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8006e94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e96:	fab3 f383 	clz	r3, r3
 8006e9a:	b2db      	uxtb	r3, r3
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	f003 031f 	and.w	r3, r3, #31
 8006ea2:	2b09      	cmp	r3, #9
 8006ea4:	bf94      	ite	ls
 8006ea6:	2301      	movls	r3, #1
 8006ea8:	2300      	movhi	r3, #0
 8006eaa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d064      	beq.n	8006f7a <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d107      	bne.n	8006ecc <HAL_ADC_ConfigChannel+0x408>
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	0e9b      	lsrs	r3, r3, #26
 8006ec2:	3301      	adds	r3, #1
 8006ec4:	069b      	lsls	r3, r3, #26
 8006ec6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006eca:	e00e      	b.n	8006eea <HAL_ADC_ConfigChannel+0x426>
 8006ecc:	683b      	ldr	r3, [r7, #0]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed4:	fa93 f3a3 	rbit	r3, r3
 8006ed8:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006eda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006edc:	fab3 f383 	clz	r3, r3
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	3301      	adds	r3, #1
 8006ee4:	069b      	lsls	r3, r3, #26
 8006ee6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d109      	bne.n	8006f0a <HAL_ADC_ConfigChannel+0x446>
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	0e9b      	lsrs	r3, r3, #26
 8006efc:	3301      	adds	r3, #1
 8006efe:	f003 031f 	and.w	r3, r3, #31
 8006f02:	2101      	movs	r1, #1
 8006f04:	fa01 f303 	lsl.w	r3, r1, r3
 8006f08:	e010      	b.n	8006f2c <HAL_ADC_ConfigChannel+0x468>
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f12:	fa93 f3a3 	rbit	r3, r3
 8006f16:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8006f18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f1a:	fab3 f383 	clz	r3, r3
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	3301      	adds	r3, #1
 8006f22:	f003 031f 	and.w	r3, r3, #31
 8006f26:	2101      	movs	r1, #1
 8006f28:	fa01 f303 	lsl.w	r3, r1, r3
 8006f2c:	ea42 0103 	orr.w	r1, r2, r3
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10a      	bne.n	8006f52 <HAL_ADC_ConfigChannel+0x48e>
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	0e9b      	lsrs	r3, r3, #26
 8006f42:	3301      	adds	r3, #1
 8006f44:	f003 021f 	and.w	r2, r3, #31
 8006f48:	4613      	mov	r3, r2
 8006f4a:	005b      	lsls	r3, r3, #1
 8006f4c:	4413      	add	r3, r2
 8006f4e:	051b      	lsls	r3, r3, #20
 8006f50:	e011      	b.n	8006f76 <HAL_ADC_ConfigChannel+0x4b2>
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5a:	fa93 f3a3 	rbit	r3, r3
 8006f5e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8006f60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f62:	fab3 f383 	clz	r3, r3
 8006f66:	b2db      	uxtb	r3, r3
 8006f68:	3301      	adds	r3, #1
 8006f6a:	f003 021f 	and.w	r2, r3, #31
 8006f6e:	4613      	mov	r3, r2
 8006f70:	005b      	lsls	r3, r3, #1
 8006f72:	4413      	add	r3, r2
 8006f74:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006f76:	430b      	orrs	r3, r1
 8006f78:	e069      	b.n	800704e <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d107      	bne.n	8006f96 <HAL_ADC_ConfigChannel+0x4d2>
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	0e9b      	lsrs	r3, r3, #26
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	069b      	lsls	r3, r3, #26
 8006f90:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006f94:	e00e      	b.n	8006fb4 <HAL_ADC_ConfigChannel+0x4f0>
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f9c:	6a3b      	ldr	r3, [r7, #32]
 8006f9e:	fa93 f3a3 	rbit	r3, r3
 8006fa2:	61fb      	str	r3, [r7, #28]
  return result;
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	fab3 f383 	clz	r3, r3
 8006faa:	b2db      	uxtb	r3, r3
 8006fac:	3301      	adds	r3, #1
 8006fae:	069b      	lsls	r3, r3, #26
 8006fb0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d109      	bne.n	8006fd4 <HAL_ADC_ConfigChannel+0x510>
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	0e9b      	lsrs	r3, r3, #26
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	f003 031f 	and.w	r3, r3, #31
 8006fcc:	2101      	movs	r1, #1
 8006fce:	fa01 f303 	lsl.w	r3, r1, r3
 8006fd2:	e010      	b.n	8006ff6 <HAL_ADC_ConfigChannel+0x532>
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fda:	69bb      	ldr	r3, [r7, #24]
 8006fdc:	fa93 f3a3 	rbit	r3, r3
 8006fe0:	617b      	str	r3, [r7, #20]
  return result;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	fab3 f383 	clz	r3, r3
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	3301      	adds	r3, #1
 8006fec:	f003 031f 	and.w	r3, r3, #31
 8006ff0:	2101      	movs	r1, #1
 8006ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8006ff6:	ea42 0103 	orr.w	r1, r2, r3
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007002:	2b00      	cmp	r3, #0
 8007004:	d10d      	bne.n	8007022 <HAL_ADC_ConfigChannel+0x55e>
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	0e9b      	lsrs	r3, r3, #26
 800700c:	3301      	adds	r3, #1
 800700e:	f003 021f 	and.w	r2, r3, #31
 8007012:	4613      	mov	r3, r2
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	4413      	add	r3, r2
 8007018:	3b1e      	subs	r3, #30
 800701a:	051b      	lsls	r3, r3, #20
 800701c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007020:	e014      	b.n	800704c <HAL_ADC_ConfigChannel+0x588>
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007028:	693b      	ldr	r3, [r7, #16]
 800702a:	fa93 f3a3 	rbit	r3, r3
 800702e:	60fb      	str	r3, [r7, #12]
  return result;
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	fab3 f383 	clz	r3, r3
 8007036:	b2db      	uxtb	r3, r3
 8007038:	3301      	adds	r3, #1
 800703a:	f003 021f 	and.w	r2, r3, #31
 800703e:	4613      	mov	r3, r2
 8007040:	005b      	lsls	r3, r3, #1
 8007042:	4413      	add	r3, r2
 8007044:	3b1e      	subs	r3, #30
 8007046:	051b      	lsls	r3, r3, #20
 8007048:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800704c:	430b      	orrs	r3, r1
 800704e:	683a      	ldr	r2, [r7, #0]
 8007050:	6892      	ldr	r2, [r2, #8]
 8007052:	4619      	mov	r1, r3
 8007054:	f7ff faa2 	bl	800659c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	4b2e      	ldr	r3, [pc, #184]	; (8007118 <HAL_ADC_ConfigChannel+0x654>)
 800705e:	4013      	ands	r3, r2
 8007060:	2b00      	cmp	r3, #0
 8007062:	f000 80c9 	beq.w	80071f8 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800706e:	d004      	beq.n	800707a <HAL_ADC_ConfigChannel+0x5b6>
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4a29      	ldr	r2, [pc, #164]	; (800711c <HAL_ADC_ConfigChannel+0x658>)
 8007076:	4293      	cmp	r3, r2
 8007078:	d101      	bne.n	800707e <HAL_ADC_ConfigChannel+0x5ba>
 800707a:	4b29      	ldr	r3, [pc, #164]	; (8007120 <HAL_ADC_ConfigChannel+0x65c>)
 800707c:	e000      	b.n	8007080 <HAL_ADC_ConfigChannel+0x5bc>
 800707e:	4b29      	ldr	r3, [pc, #164]	; (8007124 <HAL_ADC_ConfigChannel+0x660>)
 8007080:	4618      	mov	r0, r3
 8007082:	f7ff f9c3 	bl	800640c <LL_ADC_GetCommonPathInternalCh>
 8007086:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a26      	ldr	r2, [pc, #152]	; (8007128 <HAL_ADC_ConfigChannel+0x664>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d004      	beq.n	800709e <HAL_ADC_ConfigChannel+0x5da>
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a24      	ldr	r2, [pc, #144]	; (800712c <HAL_ADC_ConfigChannel+0x668>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d14e      	bne.n	800713c <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800709e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d148      	bne.n	800713c <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070b2:	d005      	beq.n	80070c0 <HAL_ADC_ConfigChannel+0x5fc>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a1d      	ldr	r2, [pc, #116]	; (8007130 <HAL_ADC_ConfigChannel+0x66c>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	f040 8099 	bne.w	80071f2 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070c8:	d004      	beq.n	80070d4 <HAL_ADC_ConfigChannel+0x610>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	4a13      	ldr	r2, [pc, #76]	; (800711c <HAL_ADC_ConfigChannel+0x658>)
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d101      	bne.n	80070d8 <HAL_ADC_ConfigChannel+0x614>
 80070d4:	4a12      	ldr	r2, [pc, #72]	; (8007120 <HAL_ADC_ConfigChannel+0x65c>)
 80070d6:	e000      	b.n	80070da <HAL_ADC_ConfigChannel+0x616>
 80070d8:	4a12      	ldr	r2, [pc, #72]	; (8007124 <HAL_ADC_ConfigChannel+0x660>)
 80070da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80070de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80070e2:	4619      	mov	r1, r3
 80070e4:	4610      	mov	r0, r2
 80070e6:	f7ff f97e 	bl	80063e6 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80070ea:	4b12      	ldr	r3, [pc, #72]	; (8007134 <HAL_ADC_ConfigChannel+0x670>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	099b      	lsrs	r3, r3, #6
 80070f0:	4a11      	ldr	r2, [pc, #68]	; (8007138 <HAL_ADC_ConfigChannel+0x674>)
 80070f2:	fba2 2303 	umull	r2, r3, r2, r3
 80070f6:	099a      	lsrs	r2, r3, #6
 80070f8:	4613      	mov	r3, r2
 80070fa:	005b      	lsls	r3, r3, #1
 80070fc:	4413      	add	r3, r2
 80070fe:	009b      	lsls	r3, r3, #2
 8007100:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8007102:	e002      	b.n	800710a <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	3b01      	subs	r3, #1
 8007108:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1f9      	bne.n	8007104 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8007110:	e06f      	b.n	80071f2 <HAL_ADC_ConfigChannel+0x72e>
 8007112:	bf00      	nop
 8007114:	407f0000 	.word	0x407f0000
 8007118:	80080000 	.word	0x80080000
 800711c:	50000100 	.word	0x50000100
 8007120:	50000300 	.word	0x50000300
 8007124:	50000700 	.word	0x50000700
 8007128:	c3210000 	.word	0xc3210000
 800712c:	90c00010 	.word	0x90c00010
 8007130:	50000600 	.word	0x50000600
 8007134:	20000c3c 	.word	0x20000c3c
 8007138:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a32      	ldr	r2, [pc, #200]	; (800720c <HAL_ADC_ConfigChannel+0x748>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d125      	bne.n	8007192 <HAL_ADC_ConfigChannel+0x6ce>
 8007146:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800714a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800714e:	2b00      	cmp	r3, #0
 8007150:	d11f      	bne.n	8007192 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a2e      	ldr	r2, [pc, #184]	; (8007210 <HAL_ADC_ConfigChannel+0x74c>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d104      	bne.n	8007166 <HAL_ADC_ConfigChannel+0x6a2>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a2c      	ldr	r2, [pc, #176]	; (8007214 <HAL_ADC_ConfigChannel+0x750>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d047      	beq.n	80071f6 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800716e:	d004      	beq.n	800717a <HAL_ADC_ConfigChannel+0x6b6>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	4a26      	ldr	r2, [pc, #152]	; (8007210 <HAL_ADC_ConfigChannel+0x74c>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d101      	bne.n	800717e <HAL_ADC_ConfigChannel+0x6ba>
 800717a:	4a27      	ldr	r2, [pc, #156]	; (8007218 <HAL_ADC_ConfigChannel+0x754>)
 800717c:	e000      	b.n	8007180 <HAL_ADC_ConfigChannel+0x6bc>
 800717e:	4a27      	ldr	r2, [pc, #156]	; (800721c <HAL_ADC_ConfigChannel+0x758>)
 8007180:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007184:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007188:	4619      	mov	r1, r3
 800718a:	4610      	mov	r0, r2
 800718c:	f7ff f92b 	bl	80063e6 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007190:	e031      	b.n	80071f6 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	4a22      	ldr	r2, [pc, #136]	; (8007220 <HAL_ADC_ConfigChannel+0x75c>)
 8007198:	4293      	cmp	r3, r2
 800719a:	d12d      	bne.n	80071f8 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800719c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d127      	bne.n	80071f8 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	4a18      	ldr	r2, [pc, #96]	; (8007210 <HAL_ADC_ConfigChannel+0x74c>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d022      	beq.n	80071f8 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80071ba:	d004      	beq.n	80071c6 <HAL_ADC_ConfigChannel+0x702>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a13      	ldr	r2, [pc, #76]	; (8007210 <HAL_ADC_ConfigChannel+0x74c>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d101      	bne.n	80071ca <HAL_ADC_ConfigChannel+0x706>
 80071c6:	4a14      	ldr	r2, [pc, #80]	; (8007218 <HAL_ADC_ConfigChannel+0x754>)
 80071c8:	e000      	b.n	80071cc <HAL_ADC_ConfigChannel+0x708>
 80071ca:	4a14      	ldr	r2, [pc, #80]	; (800721c <HAL_ADC_ConfigChannel+0x758>)
 80071cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80071d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80071d4:	4619      	mov	r1, r3
 80071d6:	4610      	mov	r0, r2
 80071d8:	f7ff f905 	bl	80063e6 <LL_ADC_SetCommonPathInternalCh>
 80071dc:	e00c      	b.n	80071f8 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071e2:	f043 0220 	orr.w	r2, r3, #32
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80071ea:	2301      	movs	r3, #1
 80071ec:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80071f0:	e002      	b.n	80071f8 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80071f2:	bf00      	nop
 80071f4:	e000      	b.n	80071f8 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80071f6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2200      	movs	r2, #0
 80071fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007200:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8007204:	4618      	mov	r0, r3
 8007206:	3798      	adds	r7, #152	; 0x98
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	c7520000 	.word	0xc7520000
 8007210:	50000100 	.word	0x50000100
 8007214:	50000500 	.word	0x50000500
 8007218:	50000300 	.word	0x50000300
 800721c:	50000700 	.word	0x50000700
 8007220:	cb840000 	.word	0xcb840000

08007224 <LL_ADC_IsEnabled>:
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	689b      	ldr	r3, [r3, #8]
 8007230:	f003 0301 	and.w	r3, r3, #1
 8007234:	2b01      	cmp	r3, #1
 8007236:	d101      	bne.n	800723c <LL_ADC_IsEnabled+0x18>
 8007238:	2301      	movs	r3, #1
 800723a:	e000      	b.n	800723e <LL_ADC_IsEnabled+0x1a>
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	370c      	adds	r7, #12
 8007242:	46bd      	mov	sp, r7
 8007244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007248:	4770      	bx	lr

0800724a <LL_ADC_REG_IsConversionOngoing>:
{
 800724a:	b480      	push	{r7}
 800724c:	b083      	sub	sp, #12
 800724e:	af00      	add	r7, sp, #0
 8007250:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	689b      	ldr	r3, [r3, #8]
 8007256:	f003 0304 	and.w	r3, r3, #4
 800725a:	2b04      	cmp	r3, #4
 800725c:	d101      	bne.n	8007262 <LL_ADC_REG_IsConversionOngoing+0x18>
 800725e:	2301      	movs	r3, #1
 8007260:	e000      	b.n	8007264 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007262:	2300      	movs	r3, #0
}
 8007264:	4618      	mov	r0, r3
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8007270:	b590      	push	{r4, r7, lr}
 8007272:	b0a1      	sub	sp, #132	; 0x84
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800727a:	2300      	movs	r3, #0
 800727c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8007286:	2b01      	cmp	r3, #1
 8007288:	d101      	bne.n	800728e <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800728a:	2302      	movs	r3, #2
 800728c:	e0e3      	b.n	8007456 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2201      	movs	r2, #1
 8007292:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800729e:	d102      	bne.n	80072a6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80072a0:	4b6f      	ldr	r3, [pc, #444]	; (8007460 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80072a2:	60bb      	str	r3, [r7, #8]
 80072a4:	e009      	b.n	80072ba <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	4a6e      	ldr	r2, [pc, #440]	; (8007464 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d102      	bne.n	80072b6 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80072b0:	4b6d      	ldr	r3, [pc, #436]	; (8007468 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80072b2:	60bb      	str	r3, [r7, #8]
 80072b4:	e001      	b.n	80072ba <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80072b6:	2300      	movs	r3, #0
 80072b8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10b      	bne.n	80072d8 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80072c4:	f043 0220 	orr.w	r2, r3, #32
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	e0be      	b.n	8007456 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	4618      	mov	r0, r3
 80072dc:	f7ff ffb5 	bl	800724a <LL_ADC_REG_IsConversionOngoing>
 80072e0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4618      	mov	r0, r3
 80072e8:	f7ff ffaf 	bl	800724a <LL_ADC_REG_IsConversionOngoing>
 80072ec:	4603      	mov	r3, r0
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	f040 80a0 	bne.w	8007434 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80072f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	f040 809c 	bne.w	8007434 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007304:	d004      	beq.n	8007310 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	4a55      	ldr	r2, [pc, #340]	; (8007460 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800730c:	4293      	cmp	r3, r2
 800730e:	d101      	bne.n	8007314 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8007310:	4b56      	ldr	r3, [pc, #344]	; (800746c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8007312:	e000      	b.n	8007316 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8007314:	4b56      	ldr	r3, [pc, #344]	; (8007470 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8007316:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007318:	683b      	ldr	r3, [r7, #0]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d04b      	beq.n	80073b8 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8007320:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	6859      	ldr	r1, [r3, #4]
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007332:	035b      	lsls	r3, r3, #13
 8007334:	430b      	orrs	r3, r1
 8007336:	431a      	orrs	r2, r3
 8007338:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800733a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007344:	d004      	beq.n	8007350 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a45      	ldr	r2, [pc, #276]	; (8007460 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800734c:	4293      	cmp	r3, r2
 800734e:	d10f      	bne.n	8007370 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8007350:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007354:	f7ff ff66 	bl	8007224 <LL_ADC_IsEnabled>
 8007358:	4604      	mov	r4, r0
 800735a:	4841      	ldr	r0, [pc, #260]	; (8007460 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800735c:	f7ff ff62 	bl	8007224 <LL_ADC_IsEnabled>
 8007360:	4603      	mov	r3, r0
 8007362:	4323      	orrs	r3, r4
 8007364:	2b00      	cmp	r3, #0
 8007366:	bf0c      	ite	eq
 8007368:	2301      	moveq	r3, #1
 800736a:	2300      	movne	r3, #0
 800736c:	b2db      	uxtb	r3, r3
 800736e:	e012      	b.n	8007396 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8007370:	483c      	ldr	r0, [pc, #240]	; (8007464 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8007372:	f7ff ff57 	bl	8007224 <LL_ADC_IsEnabled>
 8007376:	4604      	mov	r4, r0
 8007378:	483b      	ldr	r0, [pc, #236]	; (8007468 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800737a:	f7ff ff53 	bl	8007224 <LL_ADC_IsEnabled>
 800737e:	4603      	mov	r3, r0
 8007380:	431c      	orrs	r4, r3
 8007382:	483c      	ldr	r0, [pc, #240]	; (8007474 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8007384:	f7ff ff4e 	bl	8007224 <LL_ADC_IsEnabled>
 8007388:	4603      	mov	r3, r0
 800738a:	4323      	orrs	r3, r4
 800738c:	2b00      	cmp	r3, #0
 800738e:	bf0c      	ite	eq
 8007390:	2301      	moveq	r3, #1
 8007392:	2300      	movne	r3, #0
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d056      	beq.n	8007448 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800739a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800739c:	689b      	ldr	r3, [r3, #8]
 800739e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80073a2:	f023 030f 	bic.w	r3, r3, #15
 80073a6:	683a      	ldr	r2, [r7, #0]
 80073a8:	6811      	ldr	r1, [r2, #0]
 80073aa:	683a      	ldr	r2, [r7, #0]
 80073ac:	6892      	ldr	r2, [r2, #8]
 80073ae:	430a      	orrs	r2, r1
 80073b0:	431a      	orrs	r2, r3
 80073b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073b4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80073b6:	e047      	b.n	8007448 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80073b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80073c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073c2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80073cc:	d004      	beq.n	80073d8 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a23      	ldr	r2, [pc, #140]	; (8007460 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d10f      	bne.n	80073f8 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 80073d8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80073dc:	f7ff ff22 	bl	8007224 <LL_ADC_IsEnabled>
 80073e0:	4604      	mov	r4, r0
 80073e2:	481f      	ldr	r0, [pc, #124]	; (8007460 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80073e4:	f7ff ff1e 	bl	8007224 <LL_ADC_IsEnabled>
 80073e8:	4603      	mov	r3, r0
 80073ea:	4323      	orrs	r3, r4
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	bf0c      	ite	eq
 80073f0:	2301      	moveq	r3, #1
 80073f2:	2300      	movne	r3, #0
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	e012      	b.n	800741e <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 80073f8:	481a      	ldr	r0, [pc, #104]	; (8007464 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80073fa:	f7ff ff13 	bl	8007224 <LL_ADC_IsEnabled>
 80073fe:	4604      	mov	r4, r0
 8007400:	4819      	ldr	r0, [pc, #100]	; (8007468 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8007402:	f7ff ff0f 	bl	8007224 <LL_ADC_IsEnabled>
 8007406:	4603      	mov	r3, r0
 8007408:	431c      	orrs	r4, r3
 800740a:	481a      	ldr	r0, [pc, #104]	; (8007474 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800740c:	f7ff ff0a 	bl	8007224 <LL_ADC_IsEnabled>
 8007410:	4603      	mov	r3, r0
 8007412:	4323      	orrs	r3, r4
 8007414:	2b00      	cmp	r3, #0
 8007416:	bf0c      	ite	eq
 8007418:	2301      	moveq	r3, #1
 800741a:	2300      	movne	r3, #0
 800741c:	b2db      	uxtb	r3, r3
 800741e:	2b00      	cmp	r3, #0
 8007420:	d012      	beq.n	8007448 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8007422:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007424:	689b      	ldr	r3, [r3, #8]
 8007426:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800742a:	f023 030f 	bic.w	r3, r3, #15
 800742e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007430:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007432:	e009      	b.n	8007448 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007438:	f043 0220 	orr.w	r2, r3, #32
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8007440:	2301      	movs	r3, #1
 8007442:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8007446:	e000      	b.n	800744a <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8007448:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8007452:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8007456:	4618      	mov	r0, r3
 8007458:	3784      	adds	r7, #132	; 0x84
 800745a:	46bd      	mov	sp, r7
 800745c:	bd90      	pop	{r4, r7, pc}
 800745e:	bf00      	nop
 8007460:	50000100 	.word	0x50000100
 8007464:	50000400 	.word	0x50000400
 8007468:	50000500 	.word	0x50000500
 800746c:	50000300 	.word	0x50000300
 8007470:	50000700 	.word	0x50000700
 8007474:	50000600 	.word	0x50000600

08007478 <LL_EXTI_EnableIT_0_31>:
{
 8007478:	b480      	push	{r7}
 800747a:	b083      	sub	sp, #12
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007480:	4b05      	ldr	r3, [pc, #20]	; (8007498 <LL_EXTI_EnableIT_0_31+0x20>)
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	4904      	ldr	r1, [pc, #16]	; (8007498 <LL_EXTI_EnableIT_0_31+0x20>)
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	4313      	orrs	r3, r2
 800748a:	600b      	str	r3, [r1, #0]
}
 800748c:	bf00      	nop
 800748e:	370c      	adds	r7, #12
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr
 8007498:	40010400 	.word	0x40010400

0800749c <LL_EXTI_EnableIT_32_63>:
{
 800749c:	b480      	push	{r7}
 800749e:	b083      	sub	sp, #12
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80074a4:	4b05      	ldr	r3, [pc, #20]	; (80074bc <LL_EXTI_EnableIT_32_63+0x20>)
 80074a6:	6a1a      	ldr	r2, [r3, #32]
 80074a8:	4904      	ldr	r1, [pc, #16]	; (80074bc <LL_EXTI_EnableIT_32_63+0x20>)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	4313      	orrs	r3, r2
 80074ae:	620b      	str	r3, [r1, #32]
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr
 80074bc:	40010400 	.word	0x40010400

080074c0 <LL_EXTI_DisableIT_0_31>:
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80074c8:	4b06      	ldr	r3, [pc, #24]	; (80074e4 <LL_EXTI_DisableIT_0_31+0x24>)
 80074ca:	681a      	ldr	r2, [r3, #0]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	43db      	mvns	r3, r3
 80074d0:	4904      	ldr	r1, [pc, #16]	; (80074e4 <LL_EXTI_DisableIT_0_31+0x24>)
 80074d2:	4013      	ands	r3, r2
 80074d4:	600b      	str	r3, [r1, #0]
}
 80074d6:	bf00      	nop
 80074d8:	370c      	adds	r7, #12
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	40010400 	.word	0x40010400

080074e8 <LL_EXTI_DisableIT_32_63>:
{
 80074e8:	b480      	push	{r7}
 80074ea:	b083      	sub	sp, #12
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80074f0:	4b06      	ldr	r3, [pc, #24]	; (800750c <LL_EXTI_DisableIT_32_63+0x24>)
 80074f2:	6a1a      	ldr	r2, [r3, #32]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	43db      	mvns	r3, r3
 80074f8:	4904      	ldr	r1, [pc, #16]	; (800750c <LL_EXTI_DisableIT_32_63+0x24>)
 80074fa:	4013      	ands	r3, r2
 80074fc:	620b      	str	r3, [r1, #32]
}
 80074fe:	bf00      	nop
 8007500:	370c      	adds	r7, #12
 8007502:	46bd      	mov	sp, r7
 8007504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007508:	4770      	bx	lr
 800750a:	bf00      	nop
 800750c:	40010400 	.word	0x40010400

08007510 <LL_EXTI_EnableEvent_0_31>:
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007518:	4b05      	ldr	r3, [pc, #20]	; (8007530 <LL_EXTI_EnableEvent_0_31+0x20>)
 800751a:	685a      	ldr	r2, [r3, #4]
 800751c:	4904      	ldr	r1, [pc, #16]	; (8007530 <LL_EXTI_EnableEvent_0_31+0x20>)
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	4313      	orrs	r3, r2
 8007522:	604b      	str	r3, [r1, #4]
}
 8007524:	bf00      	nop
 8007526:	370c      	adds	r7, #12
 8007528:	46bd      	mov	sp, r7
 800752a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752e:	4770      	bx	lr
 8007530:	40010400 	.word	0x40010400

08007534 <LL_EXTI_EnableEvent_32_63>:
{
 8007534:	b480      	push	{r7}
 8007536:	b083      	sub	sp, #12
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800753c:	4b05      	ldr	r3, [pc, #20]	; (8007554 <LL_EXTI_EnableEvent_32_63+0x20>)
 800753e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007540:	4904      	ldr	r1, [pc, #16]	; (8007554 <LL_EXTI_EnableEvent_32_63+0x20>)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4313      	orrs	r3, r2
 8007546:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007548:	bf00      	nop
 800754a:	370c      	adds	r7, #12
 800754c:	46bd      	mov	sp, r7
 800754e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007552:	4770      	bx	lr
 8007554:	40010400 	.word	0x40010400

08007558 <LL_EXTI_DisableEvent_0_31>:
{
 8007558:	b480      	push	{r7}
 800755a:	b083      	sub	sp, #12
 800755c:	af00      	add	r7, sp, #0
 800755e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007560:	4b06      	ldr	r3, [pc, #24]	; (800757c <LL_EXTI_DisableEvent_0_31+0x24>)
 8007562:	685a      	ldr	r2, [r3, #4]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	43db      	mvns	r3, r3
 8007568:	4904      	ldr	r1, [pc, #16]	; (800757c <LL_EXTI_DisableEvent_0_31+0x24>)
 800756a:	4013      	ands	r3, r2
 800756c:	604b      	str	r3, [r1, #4]
}
 800756e:	bf00      	nop
 8007570:	370c      	adds	r7, #12
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	40010400 	.word	0x40010400

08007580 <LL_EXTI_DisableEvent_32_63>:
{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8007588:	4b06      	ldr	r3, [pc, #24]	; (80075a4 <LL_EXTI_DisableEvent_32_63+0x24>)
 800758a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	43db      	mvns	r3, r3
 8007590:	4904      	ldr	r1, [pc, #16]	; (80075a4 <LL_EXTI_DisableEvent_32_63+0x24>)
 8007592:	4013      	ands	r3, r2
 8007594:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007596:	bf00      	nop
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	40010400 	.word	0x40010400

080075a8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80075b0:	4b05      	ldr	r3, [pc, #20]	; (80075c8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80075b2:	689a      	ldr	r2, [r3, #8]
 80075b4:	4904      	ldr	r1, [pc, #16]	; (80075c8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	608b      	str	r3, [r1, #8]
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr
 80075c8:	40010400 	.word	0x40010400

080075cc <LL_EXTI_EnableRisingTrig_32_63>:
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80075d4:	4b05      	ldr	r3, [pc, #20]	; (80075ec <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80075d6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80075d8:	4904      	ldr	r1, [pc, #16]	; (80075ec <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4313      	orrs	r3, r2
 80075de:	628b      	str	r3, [r1, #40]	; 0x28
}
 80075e0:	bf00      	nop
 80075e2:	370c      	adds	r7, #12
 80075e4:	46bd      	mov	sp, r7
 80075e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ea:	4770      	bx	lr
 80075ec:	40010400 	.word	0x40010400

080075f0 <LL_EXTI_DisableRisingTrig_0_31>:
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80075f8:	4b06      	ldr	r3, [pc, #24]	; (8007614 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80075fa:	689a      	ldr	r2, [r3, #8]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	43db      	mvns	r3, r3
 8007600:	4904      	ldr	r1, [pc, #16]	; (8007614 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007602:	4013      	ands	r3, r2
 8007604:	608b      	str	r3, [r1, #8]
}
 8007606:	bf00      	nop
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	40010400 	.word	0x40010400

08007618 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8007620:	4b06      	ldr	r3, [pc, #24]	; (800763c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8007622:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	43db      	mvns	r3, r3
 8007628:	4904      	ldr	r1, [pc, #16]	; (800763c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800762a:	4013      	ands	r3, r2
 800762c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800762e:	bf00      	nop
 8007630:	370c      	adds	r7, #12
 8007632:	46bd      	mov	sp, r7
 8007634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007638:	4770      	bx	lr
 800763a:	bf00      	nop
 800763c:	40010400 	.word	0x40010400

08007640 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8007640:	b480      	push	{r7}
 8007642:	b083      	sub	sp, #12
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007648:	4b05      	ldr	r3, [pc, #20]	; (8007660 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800764a:	68da      	ldr	r2, [r3, #12]
 800764c:	4904      	ldr	r1, [pc, #16]	; (8007660 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	4313      	orrs	r3, r2
 8007652:	60cb      	str	r3, [r1, #12]
}
 8007654:	bf00      	nop
 8007656:	370c      	adds	r7, #12
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr
 8007660:	40010400 	.word	0x40010400

08007664 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8007664:	b480      	push	{r7}
 8007666:	b083      	sub	sp, #12
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800766c:	4b05      	ldr	r3, [pc, #20]	; (8007684 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800766e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007670:	4904      	ldr	r1, [pc, #16]	; (8007684 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	4313      	orrs	r3, r2
 8007676:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8007678:	bf00      	nop
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	40010400 	.word	0x40010400

08007688 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8007688:	b480      	push	{r7}
 800768a:	b083      	sub	sp, #12
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007690:	4b06      	ldr	r3, [pc, #24]	; (80076ac <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007692:	68da      	ldr	r2, [r3, #12]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	43db      	mvns	r3, r3
 8007698:	4904      	ldr	r1, [pc, #16]	; (80076ac <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800769a:	4013      	ands	r3, r2
 800769c:	60cb      	str	r3, [r1, #12]
}
 800769e:	bf00      	nop
 80076a0:	370c      	adds	r7, #12
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr
 80076aa:	bf00      	nop
 80076ac:	40010400 	.word	0x40010400

080076b0 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80076b8:	4b06      	ldr	r3, [pc, #24]	; (80076d4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80076ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	43db      	mvns	r3, r3
 80076c0:	4904      	ldr	r1, [pc, #16]	; (80076d4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80076c2:	4013      	ands	r3, r2
 80076c4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80076c6:	bf00      	nop
 80076c8:	370c      	adds	r7, #12
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr
 80076d2:	bf00      	nop
 80076d4:	40010400 	.word	0x40010400

080076d8 <LL_EXTI_ClearFlag_0_31>:
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 80076e0:	4a04      	ldr	r2, [pc, #16]	; (80076f4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6153      	str	r3, [r2, #20]
}
 80076e6:	bf00      	nop
 80076e8:	370c      	adds	r7, #12
 80076ea:	46bd      	mov	sp, r7
 80076ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f0:	4770      	bx	lr
 80076f2:	bf00      	nop
 80076f4:	40010400 	.word	0x40010400

080076f8 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8007700:	4a04      	ldr	r2, [pc, #16]	; (8007714 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6353      	str	r3, [r2, #52]	; 0x34
}
 8007706:	bf00      	nop
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	40010400 	.word	0x40010400

08007718 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b088      	sub	sp, #32
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8007720:	2300      	movs	r3, #0
 8007722:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8007724:	2300      	movs	r3, #0
 8007726:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d102      	bne.n	8007734 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800772e:	2301      	movs	r3, #1
 8007730:	77fb      	strb	r3, [r7, #31]
 8007732:	e180      	b.n	8007a36 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800773e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007742:	d102      	bne.n	800774a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	77fb      	strb	r3, [r7, #31]
 8007748:	e175      	b.n	8007a36 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	7f5b      	ldrb	r3, [r3, #29]
 800774e:	b2db      	uxtb	r3, r3
 8007750:	2b00      	cmp	r3, #0
 8007752:	d108      	bne.n	8007766 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2200      	movs	r2, #0
 8007758:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f7fd f8dd 	bl	8004920 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007770:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	695b      	ldr	r3, [r3, #20]
 8007780:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 800778c:	4313      	orrs	r3, r2
 800778e:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	681a      	ldr	r2, [r3, #0]
 8007796:	4b98      	ldr	r3, [pc, #608]	; (80079f8 <HAL_COMP_Init+0x2e0>)
 8007798:	4013      	ands	r3, r2
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	6812      	ldr	r2, [r2, #0]
 800779e:	6979      	ldr	r1, [r7, #20]
 80077a0:	430b      	orrs	r3, r1
 80077a2:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d015      	beq.n	80077de <HAL_COMP_Init+0xc6>
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d112      	bne.n	80077de <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80077b8:	4b90      	ldr	r3, [pc, #576]	; (80079fc <HAL_COMP_Init+0x2e4>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	099b      	lsrs	r3, r3, #6
 80077be:	4a90      	ldr	r2, [pc, #576]	; (8007a00 <HAL_COMP_Init+0x2e8>)
 80077c0:	fba2 2303 	umull	r2, r3, r2, r3
 80077c4:	099a      	lsrs	r2, r3, #6
 80077c6:	4613      	mov	r3, r2
 80077c8:	009b      	lsls	r3, r3, #2
 80077ca:	4413      	add	r3, r2
 80077cc:	009b      	lsls	r3, r3, #2
 80077ce:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80077d0:	e002      	b.n	80077d8 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	3b01      	subs	r3, #1
 80077d6:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1f9      	bne.n	80077d2 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	4a88      	ldr	r2, [pc, #544]	; (8007a04 <HAL_COMP_Init+0x2ec>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d028      	beq.n	800783a <HAL_COMP_Init+0x122>
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	4a86      	ldr	r2, [pc, #536]	; (8007a08 <HAL_COMP_Init+0x2f0>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d020      	beq.n	8007834 <HAL_COMP_Init+0x11c>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4a85      	ldr	r2, [pc, #532]	; (8007a0c <HAL_COMP_Init+0x2f4>)
 80077f8:	4293      	cmp	r3, r2
 80077fa:	d018      	beq.n	800782e <HAL_COMP_Init+0x116>
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	4a83      	ldr	r2, [pc, #524]	; (8007a10 <HAL_COMP_Init+0x2f8>)
 8007802:	4293      	cmp	r3, r2
 8007804:	d010      	beq.n	8007828 <HAL_COMP_Init+0x110>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a82      	ldr	r2, [pc, #520]	; (8007a14 <HAL_COMP_Init+0x2fc>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d008      	beq.n	8007822 <HAL_COMP_Init+0x10a>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a80      	ldr	r2, [pc, #512]	; (8007a18 <HAL_COMP_Init+0x300>)
 8007816:	4293      	cmp	r3, r2
 8007818:	d101      	bne.n	800781e <HAL_COMP_Init+0x106>
 800781a:	2301      	movs	r3, #1
 800781c:	e00f      	b.n	800783e <HAL_COMP_Init+0x126>
 800781e:	2302      	movs	r3, #2
 8007820:	e00d      	b.n	800783e <HAL_COMP_Init+0x126>
 8007822:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007826:	e00a      	b.n	800783e <HAL_COMP_Init+0x126>
 8007828:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800782c:	e007      	b.n	800783e <HAL_COMP_Init+0x126>
 800782e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8007832:	e004      	b.n	800783e <HAL_COMP_Init+0x126>
 8007834:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007838:	e001      	b.n	800783e <HAL_COMP_Init+0x126>
 800783a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800783e:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	f003 0303 	and.w	r3, r3, #3
 8007848:	2b00      	cmp	r3, #0
 800784a:	f000 80b6 	beq.w	80079ba <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	699b      	ldr	r3, [r3, #24]
 8007852:	f003 0310 	and.w	r3, r3, #16
 8007856:	2b00      	cmp	r3, #0
 8007858:	d011      	beq.n	800787e <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a6e      	ldr	r2, [pc, #440]	; (8007a18 <HAL_COMP_Init+0x300>)
 8007860:	4293      	cmp	r3, r2
 8007862:	d004      	beq.n	800786e <HAL_COMP_Init+0x156>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	4a6c      	ldr	r2, [pc, #432]	; (8007a1c <HAL_COMP_Init+0x304>)
 800786a:	4293      	cmp	r3, r2
 800786c:	d103      	bne.n	8007876 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800786e:	6938      	ldr	r0, [r7, #16]
 8007870:	f7ff feac 	bl	80075cc <LL_EXTI_EnableRisingTrig_32_63>
 8007874:	e014      	b.n	80078a0 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8007876:	6938      	ldr	r0, [r7, #16]
 8007878:	f7ff fe96 	bl	80075a8 <LL_EXTI_EnableRisingTrig_0_31>
 800787c:	e010      	b.n	80078a0 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	4a65      	ldr	r2, [pc, #404]	; (8007a18 <HAL_COMP_Init+0x300>)
 8007884:	4293      	cmp	r3, r2
 8007886:	d004      	beq.n	8007892 <HAL_COMP_Init+0x17a>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	4a63      	ldr	r2, [pc, #396]	; (8007a1c <HAL_COMP_Init+0x304>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d103      	bne.n	800789a <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8007892:	6938      	ldr	r0, [r7, #16]
 8007894:	f7ff fec0 	bl	8007618 <LL_EXTI_DisableRisingTrig_32_63>
 8007898:	e002      	b.n	80078a0 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 800789a:	6938      	ldr	r0, [r7, #16]
 800789c:	f7ff fea8 	bl	80075f0 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	699b      	ldr	r3, [r3, #24]
 80078a4:	f003 0320 	and.w	r3, r3, #32
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d011      	beq.n	80078d0 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a59      	ldr	r2, [pc, #356]	; (8007a18 <HAL_COMP_Init+0x300>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d004      	beq.n	80078c0 <HAL_COMP_Init+0x1a8>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a58      	ldr	r2, [pc, #352]	; (8007a1c <HAL_COMP_Init+0x304>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d103      	bne.n	80078c8 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 80078c0:	6938      	ldr	r0, [r7, #16]
 80078c2:	f7ff fecf 	bl	8007664 <LL_EXTI_EnableFallingTrig_32_63>
 80078c6:	e014      	b.n	80078f2 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80078c8:	6938      	ldr	r0, [r7, #16]
 80078ca:	f7ff feb9 	bl	8007640 <LL_EXTI_EnableFallingTrig_0_31>
 80078ce:	e010      	b.n	80078f2 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a50      	ldr	r2, [pc, #320]	; (8007a18 <HAL_COMP_Init+0x300>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d004      	beq.n	80078e4 <HAL_COMP_Init+0x1cc>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	4a4f      	ldr	r2, [pc, #316]	; (8007a1c <HAL_COMP_Init+0x304>)
 80078e0:	4293      	cmp	r3, r2
 80078e2:	d103      	bne.n	80078ec <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 80078e4:	6938      	ldr	r0, [r7, #16]
 80078e6:	f7ff fee3 	bl	80076b0 <LL_EXTI_DisableFallingTrig_32_63>
 80078ea:	e002      	b.n	80078f2 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 80078ec:	6938      	ldr	r0, [r7, #16]
 80078ee:	f7ff fecb 	bl	8007688 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	4a48      	ldr	r2, [pc, #288]	; (8007a18 <HAL_COMP_Init+0x300>)
 80078f8:	4293      	cmp	r3, r2
 80078fa:	d004      	beq.n	8007906 <HAL_COMP_Init+0x1ee>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a46      	ldr	r2, [pc, #280]	; (8007a1c <HAL_COMP_Init+0x304>)
 8007902:	4293      	cmp	r3, r2
 8007904:	d103      	bne.n	800790e <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8007906:	6938      	ldr	r0, [r7, #16]
 8007908:	f7ff fef6 	bl	80076f8 <LL_EXTI_ClearFlag_32_63>
 800790c:	e002      	b.n	8007914 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 800790e:	6938      	ldr	r0, [r7, #16]
 8007910:	f7ff fee2 	bl	80076d8 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	699b      	ldr	r3, [r3, #24]
 8007918:	f003 0302 	and.w	r3, r3, #2
 800791c:	2b00      	cmp	r3, #0
 800791e:	d011      	beq.n	8007944 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	4a3c      	ldr	r2, [pc, #240]	; (8007a18 <HAL_COMP_Init+0x300>)
 8007926:	4293      	cmp	r3, r2
 8007928:	d004      	beq.n	8007934 <HAL_COMP_Init+0x21c>
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	4a3b      	ldr	r2, [pc, #236]	; (8007a1c <HAL_COMP_Init+0x304>)
 8007930:	4293      	cmp	r3, r2
 8007932:	d103      	bne.n	800793c <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8007934:	6938      	ldr	r0, [r7, #16]
 8007936:	f7ff fdfd 	bl	8007534 <LL_EXTI_EnableEvent_32_63>
 800793a:	e014      	b.n	8007966 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 800793c:	6938      	ldr	r0, [r7, #16]
 800793e:	f7ff fde7 	bl	8007510 <LL_EXTI_EnableEvent_0_31>
 8007942:	e010      	b.n	8007966 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a33      	ldr	r2, [pc, #204]	; (8007a18 <HAL_COMP_Init+0x300>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d004      	beq.n	8007958 <HAL_COMP_Init+0x240>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a32      	ldr	r2, [pc, #200]	; (8007a1c <HAL_COMP_Init+0x304>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d103      	bne.n	8007960 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8007958:	6938      	ldr	r0, [r7, #16]
 800795a:	f7ff fe11 	bl	8007580 <LL_EXTI_DisableEvent_32_63>
 800795e:	e002      	b.n	8007966 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8007960:	6938      	ldr	r0, [r7, #16]
 8007962:	f7ff fdf9 	bl	8007558 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b00      	cmp	r3, #0
 8007970:	d011      	beq.n	8007996 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	4a28      	ldr	r2, [pc, #160]	; (8007a18 <HAL_COMP_Init+0x300>)
 8007978:	4293      	cmp	r3, r2
 800797a:	d004      	beq.n	8007986 <HAL_COMP_Init+0x26e>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a26      	ldr	r2, [pc, #152]	; (8007a1c <HAL_COMP_Init+0x304>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d103      	bne.n	800798e <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8007986:	6938      	ldr	r0, [r7, #16]
 8007988:	f7ff fd88 	bl	800749c <LL_EXTI_EnableIT_32_63>
 800798c:	e04b      	b.n	8007a26 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 800798e:	6938      	ldr	r0, [r7, #16]
 8007990:	f7ff fd72 	bl	8007478 <LL_EXTI_EnableIT_0_31>
 8007994:	e047      	b.n	8007a26 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	4a1f      	ldr	r2, [pc, #124]	; (8007a18 <HAL_COMP_Init+0x300>)
 800799c:	4293      	cmp	r3, r2
 800799e:	d004      	beq.n	80079aa <HAL_COMP_Init+0x292>
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	4a1d      	ldr	r2, [pc, #116]	; (8007a1c <HAL_COMP_Init+0x304>)
 80079a6:	4293      	cmp	r3, r2
 80079a8:	d103      	bne.n	80079b2 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 80079aa:	6938      	ldr	r0, [r7, #16]
 80079ac:	f7ff fd9c 	bl	80074e8 <LL_EXTI_DisableIT_32_63>
 80079b0:	e039      	b.n	8007a26 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 80079b2:	6938      	ldr	r0, [r7, #16]
 80079b4:	f7ff fd84 	bl	80074c0 <LL_EXTI_DisableIT_0_31>
 80079b8:	e035      	b.n	8007a26 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	4a16      	ldr	r2, [pc, #88]	; (8007a18 <HAL_COMP_Init+0x300>)
 80079c0:	4293      	cmp	r3, r2
 80079c2:	d004      	beq.n	80079ce <HAL_COMP_Init+0x2b6>
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	4a14      	ldr	r2, [pc, #80]	; (8007a1c <HAL_COMP_Init+0x304>)
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d103      	bne.n	80079d6 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 80079ce:	6938      	ldr	r0, [r7, #16]
 80079d0:	f7ff fdd6 	bl	8007580 <LL_EXTI_DisableEvent_32_63>
 80079d4:	e002      	b.n	80079dc <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80079d6:	6938      	ldr	r0, [r7, #16]
 80079d8:	f7ff fdbe 	bl	8007558 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	4a0d      	ldr	r2, [pc, #52]	; (8007a18 <HAL_COMP_Init+0x300>)
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d004      	beq.n	80079f0 <HAL_COMP_Init+0x2d8>
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	4a0c      	ldr	r2, [pc, #48]	; (8007a1c <HAL_COMP_Init+0x304>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d117      	bne.n	8007a20 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80079f0:	6938      	ldr	r0, [r7, #16]
 80079f2:	f7ff fd79 	bl	80074e8 <LL_EXTI_DisableIT_32_63>
 80079f6:	e016      	b.n	8007a26 <HAL_COMP_Init+0x30e>
 80079f8:	ff007e0f 	.word	0xff007e0f
 80079fc:	20000c3c 	.word	0x20000c3c
 8007a00:	053e2d63 	.word	0x053e2d63
 8007a04:	40010200 	.word	0x40010200
 8007a08:	40010204 	.word	0x40010204
 8007a0c:	40010208 	.word	0x40010208
 8007a10:	4001020c 	.word	0x4001020c
 8007a14:	40010210 	.word	0x40010210
 8007a18:	40010214 	.word	0x40010214
 8007a1c:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8007a20:	6938      	ldr	r0, [r7, #16]
 8007a22:	f7ff fd4d 	bl	80074c0 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	7f5b      	ldrb	r3, [r3, #29]
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d102      	bne.n	8007a36 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2201      	movs	r2, #1
 8007a34:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8007a36:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3720      	adds	r7, #32
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <__NVIC_SetPriorityGrouping>:
{
 8007a40:	b480      	push	{r7}
 8007a42:	b085      	sub	sp, #20
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f003 0307 	and.w	r3, r3, #7
 8007a4e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007a50:	4b0c      	ldr	r3, [pc, #48]	; (8007a84 <__NVIC_SetPriorityGrouping+0x44>)
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007a56:	68ba      	ldr	r2, [r7, #8]
 8007a58:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007a5c:	4013      	ands	r3, r2
 8007a5e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007a68:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007a6c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007a72:	4a04      	ldr	r2, [pc, #16]	; (8007a84 <__NVIC_SetPriorityGrouping+0x44>)
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	60d3      	str	r3, [r2, #12]
}
 8007a78:	bf00      	nop
 8007a7a:	3714      	adds	r7, #20
 8007a7c:	46bd      	mov	sp, r7
 8007a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a82:	4770      	bx	lr
 8007a84:	e000ed00 	.word	0xe000ed00

08007a88 <__NVIC_GetPriorityGrouping>:
{
 8007a88:	b480      	push	{r7}
 8007a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007a8c:	4b04      	ldr	r3, [pc, #16]	; (8007aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8007a8e:	68db      	ldr	r3, [r3, #12]
 8007a90:	0a1b      	lsrs	r3, r3, #8
 8007a92:	f003 0307 	and.w	r3, r3, #7
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	46bd      	mov	sp, r7
 8007a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9e:	4770      	bx	lr
 8007aa0:	e000ed00 	.word	0xe000ed00

08007aa4 <__NVIC_EnableIRQ>:
{
 8007aa4:	b480      	push	{r7}
 8007aa6:	b083      	sub	sp, #12
 8007aa8:	af00      	add	r7, sp, #0
 8007aaa:	4603      	mov	r3, r0
 8007aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	db0b      	blt.n	8007ace <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ab6:	79fb      	ldrb	r3, [r7, #7]
 8007ab8:	f003 021f 	and.w	r2, r3, #31
 8007abc:	4907      	ldr	r1, [pc, #28]	; (8007adc <__NVIC_EnableIRQ+0x38>)
 8007abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ac2:	095b      	lsrs	r3, r3, #5
 8007ac4:	2001      	movs	r0, #1
 8007ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8007aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007ace:	bf00      	nop
 8007ad0:	370c      	adds	r7, #12
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	e000e100 	.word	0xe000e100

08007ae0 <__NVIC_SetPriority>:
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b083      	sub	sp, #12
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	6039      	str	r1, [r7, #0]
 8007aea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	db0a      	blt.n	8007b0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	b2da      	uxtb	r2, r3
 8007af8:	490c      	ldr	r1, [pc, #48]	; (8007b2c <__NVIC_SetPriority+0x4c>)
 8007afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007afe:	0112      	lsls	r2, r2, #4
 8007b00:	b2d2      	uxtb	r2, r2
 8007b02:	440b      	add	r3, r1
 8007b04:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007b08:	e00a      	b.n	8007b20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	b2da      	uxtb	r2, r3
 8007b0e:	4908      	ldr	r1, [pc, #32]	; (8007b30 <__NVIC_SetPriority+0x50>)
 8007b10:	79fb      	ldrb	r3, [r7, #7]
 8007b12:	f003 030f 	and.w	r3, r3, #15
 8007b16:	3b04      	subs	r3, #4
 8007b18:	0112      	lsls	r2, r2, #4
 8007b1a:	b2d2      	uxtb	r2, r2
 8007b1c:	440b      	add	r3, r1
 8007b1e:	761a      	strb	r2, [r3, #24]
}
 8007b20:	bf00      	nop
 8007b22:	370c      	adds	r7, #12
 8007b24:	46bd      	mov	sp, r7
 8007b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2a:	4770      	bx	lr
 8007b2c:	e000e100 	.word	0xe000e100
 8007b30:	e000ed00 	.word	0xe000ed00

08007b34 <NVIC_EncodePriority>:
{
 8007b34:	b480      	push	{r7}
 8007b36:	b089      	sub	sp, #36	; 0x24
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	f003 0307 	and.w	r3, r3, #7
 8007b46:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	f1c3 0307 	rsb	r3, r3, #7
 8007b4e:	2b04      	cmp	r3, #4
 8007b50:	bf28      	it	cs
 8007b52:	2304      	movcs	r3, #4
 8007b54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007b56:	69fb      	ldr	r3, [r7, #28]
 8007b58:	3304      	adds	r3, #4
 8007b5a:	2b06      	cmp	r3, #6
 8007b5c:	d902      	bls.n	8007b64 <NVIC_EncodePriority+0x30>
 8007b5e:	69fb      	ldr	r3, [r7, #28]
 8007b60:	3b03      	subs	r3, #3
 8007b62:	e000      	b.n	8007b66 <NVIC_EncodePriority+0x32>
 8007b64:	2300      	movs	r3, #0
 8007b66:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b68:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b6c:	69bb      	ldr	r3, [r7, #24]
 8007b6e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b72:	43da      	mvns	r2, r3
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	401a      	ands	r2, r3
 8007b78:	697b      	ldr	r3, [r7, #20]
 8007b7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007b7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007b80:	697b      	ldr	r3, [r7, #20]
 8007b82:	fa01 f303 	lsl.w	r3, r1, r3
 8007b86:	43d9      	mvns	r1, r3
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007b8c:	4313      	orrs	r3, r2
}
 8007b8e:	4618      	mov	r0, r3
 8007b90:	3724      	adds	r7, #36	; 0x24
 8007b92:	46bd      	mov	sp, r7
 8007b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b98:	4770      	bx	lr
	...

08007b9c <SysTick_Config>:
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b082      	sub	sp, #8
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	3b01      	subs	r3, #1
 8007ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007bac:	d301      	bcc.n	8007bb2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8007bae:	2301      	movs	r3, #1
 8007bb0:	e00f      	b.n	8007bd2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007bb2:	4a0a      	ldr	r2, [pc, #40]	; (8007bdc <SysTick_Config+0x40>)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	3b01      	subs	r3, #1
 8007bb8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007bba:	210f      	movs	r1, #15
 8007bbc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007bc0:	f7ff ff8e 	bl	8007ae0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007bc4:	4b05      	ldr	r3, [pc, #20]	; (8007bdc <SysTick_Config+0x40>)
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007bca:	4b04      	ldr	r3, [pc, #16]	; (8007bdc <SysTick_Config+0x40>)
 8007bcc:	2207      	movs	r2, #7
 8007bce:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3708      	adds	r7, #8
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}
 8007bda:	bf00      	nop
 8007bdc:	e000e010 	.word	0xe000e010

08007be0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b082      	sub	sp, #8
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007be8:	6878      	ldr	r0, [r7, #4]
 8007bea:	f7ff ff29 	bl	8007a40 <__NVIC_SetPriorityGrouping>
}
 8007bee:	bf00      	nop
 8007bf0:	3708      	adds	r7, #8
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}

08007bf6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007bf6:	b580      	push	{r7, lr}
 8007bf8:	b086      	sub	sp, #24
 8007bfa:	af00      	add	r7, sp, #0
 8007bfc:	4603      	mov	r3, r0
 8007bfe:	60b9      	str	r1, [r7, #8]
 8007c00:	607a      	str	r2, [r7, #4]
 8007c02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007c04:	f7ff ff40 	bl	8007a88 <__NVIC_GetPriorityGrouping>
 8007c08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007c0a:	687a      	ldr	r2, [r7, #4]
 8007c0c:	68b9      	ldr	r1, [r7, #8]
 8007c0e:	6978      	ldr	r0, [r7, #20]
 8007c10:	f7ff ff90 	bl	8007b34 <NVIC_EncodePriority>
 8007c14:	4602      	mov	r2, r0
 8007c16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	4618      	mov	r0, r3
 8007c1e:	f7ff ff5f 	bl	8007ae0 <__NVIC_SetPriority>
}
 8007c22:	bf00      	nop
 8007c24:	3718      	adds	r7, #24
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b082      	sub	sp, #8
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	4603      	mov	r3, r0
 8007c32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007c34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f7ff ff33 	bl	8007aa4 <__NVIC_EnableIRQ>
}
 8007c3e:	bf00      	nop
 8007c40:	3708      	adds	r7, #8
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}

08007c46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007c46:	b580      	push	{r7, lr}
 8007c48:	b082      	sub	sp, #8
 8007c4a:	af00      	add	r7, sp, #0
 8007c4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f7ff ffa4 	bl	8007b9c <SysTick_Config>
 8007c54:	4603      	mov	r3, r0
}
 8007c56:	4618      	mov	r0, r3
 8007c58:	3708      	adds	r7, #8
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	bd80      	pop	{r7, pc}

08007c5e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007c5e:	b580      	push	{r7, lr}
 8007c60:	b082      	sub	sp, #8
 8007c62:	af00      	add	r7, sp, #0
 8007c64:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d101      	bne.n	8007c70 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007c6c:	2301      	movs	r3, #1
 8007c6e:	e014      	b.n	8007c9a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	791b      	ldrb	r3, [r3, #4]
 8007c74:	b2db      	uxtb	r3, r3
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d105      	bne.n	8007c86 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007c80:	6878      	ldr	r0, [r7, #4]
 8007c82:	f7fc ff03 	bl	8004a8c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2202      	movs	r2, #2
 8007c8a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2201      	movs	r2, #1
 8007c96:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007c98:	2300      	movs	r3, #0
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3708      	adds	r7, #8
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}

08007ca2 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007ca2:	b580      	push	{r7, lr}
 8007ca4:	b082      	sub	sp, #8
 8007ca6:	af00      	add	r7, sp, #0
 8007ca8:	6078      	str	r0, [r7, #4]
 8007caa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	795b      	ldrb	r3, [r3, #5]
 8007cb0:	2b01      	cmp	r3, #1
 8007cb2:	d101      	bne.n	8007cb8 <HAL_DAC_Start+0x16>
 8007cb4:	2302      	movs	r3, #2
 8007cb6:	e043      	b.n	8007d40 <HAL_DAC_Start+0x9e>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	6819      	ldr	r1, [r3, #0]
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	f003 0310 	and.w	r3, r3, #16
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	409a      	lsls	r2, r3
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	430a      	orrs	r2, r1
 8007cda:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8007cdc:	2001      	movs	r0, #1
 8007cde:	f7fe fb4d 	bl	800637c <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10f      	bne.n	8007d08 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d11d      	bne.n	8007d32 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f042 0201 	orr.w	r2, r2, #1
 8007d04:	605a      	str	r2, [r3, #4]
 8007d06:	e014      	b.n	8007d32 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	f003 0310 	and.w	r3, r3, #16
 8007d18:	2102      	movs	r1, #2
 8007d1a:	fa01 f303 	lsl.w	r3, r1, r3
 8007d1e:	429a      	cmp	r2, r3
 8007d20:	d107      	bne.n	8007d32 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	685a      	ldr	r2, [r3, #4]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f042 0202 	orr.w	r2, r2, #2
 8007d30:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	2201      	movs	r2, #1
 8007d36:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8007d3e:	2300      	movs	r3, #0
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3708      	adds	r7, #8
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b086      	sub	sp, #24
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	60f8      	str	r0, [r7, #12]
 8007d50:	60b9      	str	r1, [r7, #8]
 8007d52:	607a      	str	r2, [r7, #4]
 8007d54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8007d56:	2300      	movs	r3, #0
 8007d58:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	795b      	ldrb	r3, [r3, #5]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d101      	bne.n	8007d66 <HAL_DAC_Start_DMA+0x1e>
 8007d62:	2302      	movs	r3, #2
 8007d64:	e0a1      	b.n	8007eaa <HAL_DAC_Start_DMA+0x162>
 8007d66:	68fb      	ldr	r3, [r7, #12]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2202      	movs	r2, #2
 8007d70:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d12a      	bne.n	8007dce <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	689b      	ldr	r3, [r3, #8]
 8007d7c:	4a4d      	ldr	r2, [pc, #308]	; (8007eb4 <HAL_DAC_Start_DMA+0x16c>)
 8007d7e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	689b      	ldr	r3, [r3, #8]
 8007d84:	4a4c      	ldr	r2, [pc, #304]	; (8007eb8 <HAL_DAC_Start_DMA+0x170>)
 8007d86:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	689b      	ldr	r3, [r3, #8]
 8007d8c:	4a4b      	ldr	r2, [pc, #300]	; (8007ebc <HAL_DAC_Start_DMA+0x174>)
 8007d8e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	681a      	ldr	r2, [r3, #0]
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d9e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	2b04      	cmp	r3, #4
 8007da4:	d009      	beq.n	8007dba <HAL_DAC_Start_DMA+0x72>
 8007da6:	2b08      	cmp	r3, #8
 8007da8:	d00c      	beq.n	8007dc4 <HAL_DAC_Start_DMA+0x7c>
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d000      	beq.n	8007db0 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8007dae:	e039      	b.n	8007e24 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	3308      	adds	r3, #8
 8007db6:	613b      	str	r3, [r7, #16]
        break;
 8007db8:	e034      	b.n	8007e24 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	330c      	adds	r3, #12
 8007dc0:	613b      	str	r3, [r7, #16]
        break;
 8007dc2:	e02f      	b.n	8007e24 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	3310      	adds	r3, #16
 8007dca:	613b      	str	r3, [r7, #16]
        break;
 8007dcc:	e02a      	b.n	8007e24 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	68db      	ldr	r3, [r3, #12]
 8007dd2:	4a3b      	ldr	r2, [pc, #236]	; (8007ec0 <HAL_DAC_Start_DMA+0x178>)
 8007dd4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	68db      	ldr	r3, [r3, #12]
 8007dda:	4a3a      	ldr	r2, [pc, #232]	; (8007ec4 <HAL_DAC_Start_DMA+0x17c>)
 8007ddc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	68db      	ldr	r3, [r3, #12]
 8007de2:	4a39      	ldr	r2, [pc, #228]	; (8007ec8 <HAL_DAC_Start_DMA+0x180>)
 8007de4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007df4:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8007df6:	6a3b      	ldr	r3, [r7, #32]
 8007df8:	2b04      	cmp	r3, #4
 8007dfa:	d009      	beq.n	8007e10 <HAL_DAC_Start_DMA+0xc8>
 8007dfc:	2b08      	cmp	r3, #8
 8007dfe:	d00c      	beq.n	8007e1a <HAL_DAC_Start_DMA+0xd2>
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d000      	beq.n	8007e06 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8007e04:	e00e      	b.n	8007e24 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	3314      	adds	r3, #20
 8007e0c:	613b      	str	r3, [r7, #16]
        break;
 8007e0e:	e009      	b.n	8007e24 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	3318      	adds	r3, #24
 8007e16:	613b      	str	r3, [r7, #16]
        break;
 8007e18:	e004      	b.n	8007e24 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	331c      	adds	r3, #28
 8007e20:	613b      	str	r3, [r7, #16]
        break;
 8007e22:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d111      	bne.n	8007e4e <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	681a      	ldr	r2, [r3, #0]
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007e38:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6898      	ldr	r0, [r3, #8]
 8007e3e:	6879      	ldr	r1, [r7, #4]
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	693a      	ldr	r2, [r7, #16]
 8007e44:	f000 fbc8 	bl	80085d8 <HAL_DMA_Start_IT>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	75fb      	strb	r3, [r7, #23]
 8007e4c:	e010      	b.n	8007e70 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8007e5c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	68d8      	ldr	r0, [r3, #12]
 8007e62:	6879      	ldr	r1, [r7, #4]
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	693a      	ldr	r2, [r7, #16]
 8007e68:	f000 fbb6 	bl	80085d8 <HAL_DMA_Start_IT>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2200      	movs	r2, #0
 8007e74:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007e76:	7dfb      	ldrb	r3, [r7, #23]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d10f      	bne.n	8007e9c <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	6819      	ldr	r1, [r3, #0]
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	f003 0310 	and.w	r3, r3, #16
 8007e88:	2201      	movs	r2, #1
 8007e8a:	409a      	lsls	r2, r3
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	430a      	orrs	r2, r1
 8007e92:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8007e94:	2001      	movs	r0, #1
 8007e96:	f7fe fa71 	bl	800637c <HAL_Delay>
 8007e9a:	e005      	b.n	8007ea8 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	691b      	ldr	r3, [r3, #16]
 8007ea0:	f043 0204 	orr.w	r2, r3, #4
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8007ea8:	7dfb      	ldrb	r3, [r7, #23]
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	3718      	adds	r7, #24
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	bd80      	pop	{r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	08008375 	.word	0x08008375
 8007eb8:	08008397 	.word	0x08008397
 8007ebc:	080083b3 	.word	0x080083b3
 8007ec0:	0800841d 	.word	0x0800841d
 8007ec4:	0800843f 	.word	0x0800843f
 8007ec8:	0800845b 	.word	0x0800845b

08007ecc <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	6819      	ldr	r1, [r3, #0]
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	f003 0310 	and.w	r3, r3, #16
 8007ee2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8007eea:	43da      	mvns	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	400a      	ands	r2, r1
 8007ef2:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	6819      	ldr	r1, [r3, #0]
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	f003 0310 	and.w	r3, r3, #16
 8007f00:	2201      	movs	r2, #1
 8007f02:	fa02 f303 	lsl.w	r3, r2, r3
 8007f06:	43da      	mvns	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	400a      	ands	r2, r1
 8007f0e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8007f10:	2001      	movs	r0, #1
 8007f12:	f7fe fa33 	bl	800637c <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d10f      	bne.n	8007f3c <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	4618      	mov	r0, r3
 8007f22:	f000 fbd4 	bl	80086ce <HAL_DMA_Abort>
 8007f26:	4603      	mov	r3, r0
 8007f28:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	681a      	ldr	r2, [r3, #0]
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007f38:	601a      	str	r2, [r3, #0]
 8007f3a:	e00e      	b.n	8007f5a <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	68db      	ldr	r3, [r3, #12]
 8007f40:	4618      	mov	r0, r3
 8007f42:	f000 fbc4 	bl	80086ce <HAL_DMA_Abort>
 8007f46:	4603      	mov	r3, r0
 8007f48:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	681b      	ldr	r3, [r3, #0]
 8007f54:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 8007f58:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 8007f5a:	7bfb      	ldrb	r3, [r7, #15]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d003      	beq.n	8007f68 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	2204      	movs	r2, #4
 8007f64:	711a      	strb	r2, [r3, #4]
 8007f66:	e002      	b.n	8007f6e <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2201      	movs	r2, #1
 8007f6c:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8007f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f70:	4618      	mov	r0, r3
 8007f72:	3710      	adds	r7, #16
 8007f74:	46bd      	mov	sp, r7
 8007f76:	bd80      	pop	{r7, pc}

08007f78 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	b087      	sub	sp, #28
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	60f8      	str	r0, [r7, #12]
 8007f80:	60b9      	str	r1, [r7, #8]
 8007f82:	607a      	str	r2, [r7, #4]
 8007f84:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8007f86:	2300      	movs	r3, #0
 8007f88:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d105      	bne.n	8007fa8 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8007f9c:	697a      	ldr	r2, [r7, #20]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	4413      	add	r3, r2
 8007fa2:	3308      	adds	r3, #8
 8007fa4:	617b      	str	r3, [r7, #20]
 8007fa6:	e004      	b.n	8007fb2 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8007fa8:	697a      	ldr	r2, [r7, #20]
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4413      	add	r3, r2
 8007fae:	3314      	adds	r3, #20
 8007fb0:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	461a      	mov	r2, r3
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8007fba:	2300      	movs	r3, #0
}
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	371c      	adds	r7, #28
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc6:	4770      	bx	lr

08007fc8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007fc8:	b480      	push	{r7}
 8007fca:	b083      	sub	sp, #12
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8007fd0:	bf00      	nop
 8007fd2:	370c      	adds	r7, #12
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fda:	4770      	bx	lr

08007fdc <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007fdc:	b480      	push	{r7}
 8007fde:	b083      	sub	sp, #12
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8007fe4:	bf00      	nop
 8007fe6:	370c      	adds	r7, #12
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr

08007ff0 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b083      	sub	sp, #12
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 8007ffa:	683b      	ldr	r3, [r7, #0]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d103      	bne.n	8008008 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008006:	e002      	b.n	800800e <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 800800e:	4618      	mov	r0, r3
 8008010:	370c      	adds	r7, #12
 8008012:	46bd      	mov	sp, r7
 8008014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008018:	4770      	bx	lr
	...

0800801c <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b08a      	sub	sp, #40	; 0x28
 8008020:	af00      	add	r7, sp, #0
 8008022:	60f8      	str	r0, [r7, #12]
 8008024:	60b9      	str	r1, [r7, #8]
 8008026:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8008028:	2300      	movs	r3, #0
 800802a:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	795b      	ldrb	r3, [r3, #5]
 8008030:	2b01      	cmp	r3, #1
 8008032:	d101      	bne.n	8008038 <HAL_DAC_ConfigChannel+0x1c>
 8008034:	2302      	movs	r3, #2
 8008036:	e194      	b.n	8008362 <HAL_DAC_ConfigChannel+0x346>
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	2201      	movs	r2, #1
 800803c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	2202      	movs	r2, #2
 8008042:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	689b      	ldr	r3, [r3, #8]
 8008048:	2b04      	cmp	r3, #4
 800804a:	d174      	bne.n	8008136 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d137      	bne.n	80080c2 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 8008052:	f7fe f987 	bl	8006364 <HAL_GetTick>
 8008056:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008058:	e011      	b.n	800807e <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800805a:	f7fe f983 	bl	8006364 <HAL_GetTick>
 800805e:	4602      	mov	r2, r0
 8008060:	69fb      	ldr	r3, [r7, #28]
 8008062:	1ad3      	subs	r3, r2, r3
 8008064:	2b01      	cmp	r3, #1
 8008066:	d90a      	bls.n	800807e <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	691b      	ldr	r3, [r3, #16]
 800806c:	f043 0208 	orr.w	r2, r3, #8
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	2203      	movs	r2, #3
 8008078:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800807a:	2303      	movs	r3, #3
 800807c:	e171      	b.n	8008362 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008084:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1e6      	bne.n	800805a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800808c:	2001      	movs	r0, #1
 800808e:	f7fe f975 	bl	800637c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800809a:	641a      	str	r2, [r3, #64]	; 0x40
 800809c:	e01e      	b.n	80080dc <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800809e:	f7fe f961 	bl	8006364 <HAL_GetTick>
 80080a2:	4602      	mov	r2, r0
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d90a      	bls.n	80080c2 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	f043 0208 	orr.w	r2, r3, #8
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2203      	movs	r2, #3
 80080bc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80080be:	2303      	movs	r3, #3
 80080c0:	e14f      	b.n	8008362 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	dbe8      	blt.n	800809e <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80080cc:	2001      	movs	r0, #1
 80080ce:	f7fe f955 	bl	800637c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80080da:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f003 0310 	and.w	r3, r3, #16
 80080e8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80080ec:	fa01 f303 	lsl.w	r3, r1, r3
 80080f0:	43db      	mvns	r3, r3
 80080f2:	ea02 0103 	and.w	r1, r2, r3
 80080f6:	68bb      	ldr	r3, [r7, #8]
 80080f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	f003 0310 	and.w	r3, r3, #16
 8008100:	409a      	lsls	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	430a      	orrs	r2, r1
 8008108:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f003 0310 	and.w	r3, r3, #16
 8008116:	21ff      	movs	r1, #255	; 0xff
 8008118:	fa01 f303 	lsl.w	r3, r1, r3
 800811c:	43db      	mvns	r3, r3
 800811e:	ea02 0103 	and.w	r1, r2, r3
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f003 0310 	and.w	r3, r3, #16
 800812c:	409a      	lsls	r2, r3
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	430a      	orrs	r2, r1
 8008134:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	69db      	ldr	r3, [r3, #28]
 800813a:	2b01      	cmp	r3, #1
 800813c:	d11d      	bne.n	800817a <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008144:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	f003 0310 	and.w	r3, r3, #16
 800814c:	221f      	movs	r2, #31
 800814e:	fa02 f303 	lsl.w	r3, r2, r3
 8008152:	43db      	mvns	r3, r3
 8008154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008156:	4013      	ands	r3, r2
 8008158:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	6a1b      	ldr	r3, [r3, #32]
 800815e:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	f003 0310 	and.w	r3, r3, #16
 8008166:	69ba      	ldr	r2, [r7, #24]
 8008168:	fa02 f303 	lsl.w	r3, r2, r3
 800816c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800816e:	4313      	orrs	r3, r2
 8008170:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008178:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008180:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	f003 0310 	and.w	r3, r3, #16
 8008188:	2207      	movs	r2, #7
 800818a:	fa02 f303 	lsl.w	r3, r2, r3
 800818e:	43db      	mvns	r3, r3
 8008190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008192:	4013      	ands	r3, r2
 8008194:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	699b      	ldr	r3, [r3, #24]
 800819a:	f003 0301 	and.w	r3, r3, #1
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d002      	beq.n	80081a8 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 80081a2:	2300      	movs	r3, #0
 80081a4:	623b      	str	r3, [r7, #32]
 80081a6:	e011      	b.n	80081cc <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	f003 0302 	and.w	r3, r3, #2
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d002      	beq.n	80081ba <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80081b4:	2301      	movs	r3, #1
 80081b6:	623b      	str	r3, [r7, #32]
 80081b8:	e008      	b.n	80081cc <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	695b      	ldr	r3, [r3, #20]
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d102      	bne.n	80081c8 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80081c2:	2301      	movs	r3, #1
 80081c4:	623b      	str	r3, [r7, #32]
 80081c6:	e001      	b.n	80081cc <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80081c8:	2300      	movs	r3, #0
 80081ca:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80081cc:	68bb      	ldr	r3, [r7, #8]
 80081ce:	689a      	ldr	r2, [r3, #8]
 80081d0:	68bb      	ldr	r3, [r7, #8]
 80081d2:	695b      	ldr	r3, [r3, #20]
 80081d4:	4313      	orrs	r3, r2
 80081d6:	6a3a      	ldr	r2, [r7, #32]
 80081d8:	4313      	orrs	r3, r2
 80081da:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	f003 0310 	and.w	r3, r3, #16
 80081e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80081e6:	fa02 f303 	lsl.w	r3, r2, r3
 80081ea:	43db      	mvns	r3, r3
 80081ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80081ee:	4013      	ands	r3, r2
 80081f0:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	791b      	ldrb	r3, [r3, #4]
 80081f6:	2b01      	cmp	r3, #1
 80081f8:	d102      	bne.n	8008200 <HAL_DAC_ConfigChannel+0x1e4>
 80081fa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80081fe:	e000      	b.n	8008202 <HAL_DAC_ConfigChannel+0x1e6>
 8008200:	2300      	movs	r3, #0
 8008202:	69ba      	ldr	r2, [r7, #24]
 8008204:	4313      	orrs	r3, r2
 8008206:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f003 0310 	and.w	r3, r3, #16
 800820e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008212:	fa02 f303 	lsl.w	r3, r2, r3
 8008216:	43db      	mvns	r3, r3
 8008218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800821a:	4013      	ands	r3, r2
 800821c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800821e:	68bb      	ldr	r3, [r7, #8]
 8008220:	795b      	ldrb	r3, [r3, #5]
 8008222:	2b01      	cmp	r3, #1
 8008224:	d102      	bne.n	800822c <HAL_DAC_ConfigChannel+0x210>
 8008226:	f44f 7300 	mov.w	r3, #512	; 0x200
 800822a:	e000      	b.n	800822e <HAL_DAC_ConfigChannel+0x212>
 800822c:	2300      	movs	r3, #0
 800822e:	69ba      	ldr	r2, [r7, #24]
 8008230:	4313      	orrs	r3, r2
 8008232:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8008234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008236:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800823a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800823c:	68bb      	ldr	r3, [r7, #8]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2b02      	cmp	r3, #2
 8008242:	d114      	bne.n	800826e <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8008244:	f001 fae0 	bl	8009808 <HAL_RCC_GetHCLKFreq>
 8008248:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800824a:	697b      	ldr	r3, [r7, #20]
 800824c:	4a47      	ldr	r2, [pc, #284]	; (800836c <HAL_DAC_ConfigChannel+0x350>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d904      	bls.n	800825c <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8008252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008254:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008258:	627b      	str	r3, [r7, #36]	; 0x24
 800825a:	e00d      	b.n	8008278 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	4a44      	ldr	r2, [pc, #272]	; (8008370 <HAL_DAC_ConfigChannel+0x354>)
 8008260:	4293      	cmp	r3, r2
 8008262:	d909      	bls.n	8008278 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8008264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008266:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800826a:	627b      	str	r3, [r7, #36]	; 0x24
 800826c:	e004      	b.n	8008278 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008274:	4313      	orrs	r3, r2
 8008276:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f003 0310 	and.w	r3, r3, #16
 800827e:	69ba      	ldr	r2, [r7, #24]
 8008280:	fa02 f303 	lsl.w	r3, r2, r3
 8008284:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008286:	4313      	orrs	r3, r2
 8008288:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008290:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	6819      	ldr	r1, [r3, #0]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f003 0310 	and.w	r3, r3, #16
 800829e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80082a2:	fa02 f303 	lsl.w	r3, r2, r3
 80082a6:	43da      	mvns	r2, r3
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	400a      	ands	r2, r1
 80082ae:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f003 0310 	and.w	r3, r3, #16
 80082be:	f640 72fe 	movw	r2, #4094	; 0xffe
 80082c2:	fa02 f303 	lsl.w	r3, r2, r3
 80082c6:	43db      	mvns	r3, r3
 80082c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ca:	4013      	ands	r3, r2
 80082cc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80082ce:	68bb      	ldr	r3, [r7, #8]
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	f003 0310 	and.w	r3, r3, #16
 80082da:	69ba      	ldr	r2, [r7, #24]
 80082dc:	fa02 f303 	lsl.w	r3, r2, r3
 80082e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082e2:	4313      	orrs	r3, r2
 80082e4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80082ec:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	6819      	ldr	r1, [r3, #0]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	f003 0310 	and.w	r3, r3, #16
 80082fa:	22c0      	movs	r2, #192	; 0xc0
 80082fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008300:	43da      	mvns	r2, r3
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	400a      	ands	r2, r1
 8008308:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	68db      	ldr	r3, [r3, #12]
 800830e:	089b      	lsrs	r3, r3, #2
 8008310:	f003 030f 	and.w	r3, r3, #15
 8008314:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	691b      	ldr	r3, [r3, #16]
 800831a:	089b      	lsrs	r3, r3, #2
 800831c:	021b      	lsls	r3, r3, #8
 800831e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8008322:	69ba      	ldr	r2, [r7, #24]
 8008324:	4313      	orrs	r3, r2
 8008326:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f003 0310 	and.w	r3, r3, #16
 8008334:	f640 710f 	movw	r1, #3855	; 0xf0f
 8008338:	fa01 f303 	lsl.w	r3, r1, r3
 800833c:	43db      	mvns	r3, r3
 800833e:	ea02 0103 	and.w	r1, r2, r3
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f003 0310 	and.w	r3, r3, #16
 8008348:	69ba      	ldr	r2, [r7, #24]
 800834a:	409a      	lsls	r2, r3
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	430a      	orrs	r2, r1
 8008352:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2201      	movs	r2, #1
 8008358:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2200      	movs	r2, #0
 800835e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8008360:	2300      	movs	r3, #0
}
 8008362:	4618      	mov	r0, r3
 8008364:	3728      	adds	r7, #40	; 0x28
 8008366:	46bd      	mov	sp, r7
 8008368:	bd80      	pop	{r7, pc}
 800836a:	bf00      	nop
 800836c:	09896800 	.word	0x09896800
 8008370:	04c4b400 	.word	0x04c4b400

08008374 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b084      	sub	sp, #16
 8008378:	af00      	add	r7, sp, #0
 800837a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008380:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8008382:	68f8      	ldr	r0, [r7, #12]
 8008384:	f7ff fe20 	bl	8007fc8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	2201      	movs	r2, #1
 800838c:	711a      	strb	r2, [r3, #4]
}
 800838e:	bf00      	nop
 8008390:	3710      	adds	r7, #16
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}

08008396 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008396:	b580      	push	{r7, lr}
 8008398:	b084      	sub	sp, #16
 800839a:	af00      	add	r7, sp, #0
 800839c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083a2:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80083a4:	68f8      	ldr	r0, [r7, #12]
 80083a6:	f7ff fe19 	bl	8007fdc <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80083aa:	bf00      	nop
 80083ac:	3710      	adds	r7, #16
 80083ae:	46bd      	mov	sp, r7
 80083b0:	bd80      	pop	{r7, pc}

080083b2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80083b2:	b580      	push	{r7, lr}
 80083b4:	b084      	sub	sp, #16
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083be:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	691b      	ldr	r3, [r3, #16]
 80083c4:	f043 0204 	orr.w	r2, r3, #4
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80083cc:	68f8      	ldr	r0, [r7, #12]
 80083ce:	f7fd f802 	bl	80053d6 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	2201      	movs	r2, #1
 80083d6:	711a      	strb	r2, [r3, #4]
}
 80083d8:	bf00      	nop
 80083da:	3710      	adds	r7, #16
 80083dc:	46bd      	mov	sp, r7
 80083de:	bd80      	pop	{r7, pc}

080083e0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80083e8:	bf00      	nop
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80083fc:	bf00      	nop
 80083fe:	370c      	adds	r7, #12
 8008400:	46bd      	mov	sp, r7
 8008402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008406:	4770      	bx	lr

08008408 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008408:	b480      	push	{r7}
 800840a:	b083      	sub	sp, #12
 800840c:	af00      	add	r7, sp, #0
 800840e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8008410:	bf00      	nop
 8008412:	370c      	adds	r7, #12
 8008414:	46bd      	mov	sp, r7
 8008416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800841a:	4770      	bx	lr

0800841c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008428:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800842a:	68f8      	ldr	r0, [r7, #12]
 800842c:	f7ff ffd8 	bl	80083e0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2201      	movs	r2, #1
 8008434:	711a      	strb	r2, [r3, #4]
}
 8008436:	bf00      	nop
 8008438:	3710      	adds	r7, #16
 800843a:	46bd      	mov	sp, r7
 800843c:	bd80      	pop	{r7, pc}

0800843e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800843e:	b580      	push	{r7, lr}
 8008440:	b084      	sub	sp, #16
 8008442:	af00      	add	r7, sp, #0
 8008444:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800844a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800844c:	68f8      	ldr	r0, [r7, #12]
 800844e:	f7ff ffd1 	bl	80083f4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008452:	bf00      	nop
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b084      	sub	sp, #16
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008466:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	691b      	ldr	r3, [r3, #16]
 800846c:	f043 0204 	orr.w	r2, r3, #4
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f7ff ffc7 	bl	8008408 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2201      	movs	r2, #1
 800847e:	711a      	strb	r2, [r3, #4]
}
 8008480:	bf00      	nop
 8008482:	3710      	adds	r7, #16
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}

08008488 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b084      	sub	sp, #16
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2b00      	cmp	r3, #0
 8008494:	d101      	bne.n	800849a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e08d      	b.n	80085b6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	461a      	mov	r2, r3
 80084a0:	4b47      	ldr	r3, [pc, #284]	; (80085c0 <HAL_DMA_Init+0x138>)
 80084a2:	429a      	cmp	r2, r3
 80084a4:	d80f      	bhi.n	80084c6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	461a      	mov	r2, r3
 80084ac:	4b45      	ldr	r3, [pc, #276]	; (80085c4 <HAL_DMA_Init+0x13c>)
 80084ae:	4413      	add	r3, r2
 80084b0:	4a45      	ldr	r2, [pc, #276]	; (80085c8 <HAL_DMA_Init+0x140>)
 80084b2:	fba2 2303 	umull	r2, r3, r2, r3
 80084b6:	091b      	lsrs	r3, r3, #4
 80084b8:	009a      	lsls	r2, r3, #2
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	4a42      	ldr	r2, [pc, #264]	; (80085cc <HAL_DMA_Init+0x144>)
 80084c2:	641a      	str	r2, [r3, #64]	; 0x40
 80084c4:	e00e      	b.n	80084e4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	461a      	mov	r2, r3
 80084cc:	4b40      	ldr	r3, [pc, #256]	; (80085d0 <HAL_DMA_Init+0x148>)
 80084ce:	4413      	add	r3, r2
 80084d0:	4a3d      	ldr	r2, [pc, #244]	; (80085c8 <HAL_DMA_Init+0x140>)
 80084d2:	fba2 2303 	umull	r2, r3, r2, r3
 80084d6:	091b      	lsrs	r3, r3, #4
 80084d8:	009a      	lsls	r2, r3, #2
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a3c      	ldr	r2, [pc, #240]	; (80085d4 <HAL_DMA_Init+0x14c>)
 80084e2:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2202      	movs	r2, #2
 80084e8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80084fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084fe:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008508:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	691b      	ldr	r3, [r3, #16]
 800850e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008514:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008520:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a1b      	ldr	r3, [r3, #32]
 8008526:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	4313      	orrs	r3, r2
 800852c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	68fa      	ldr	r2, [r7, #12]
 8008534:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008536:	6878      	ldr	r0, [r7, #4]
 8008538:	f000 fa10 	bl	800895c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008544:	d102      	bne.n	800854c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	685a      	ldr	r2, [r3, #4]
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008554:	b2d2      	uxtb	r2, r2
 8008556:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800855c:	687a      	ldr	r2, [r7, #4]
 800855e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008560:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d010      	beq.n	800858c <HAL_DMA_Init+0x104>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	2b04      	cmp	r3, #4
 8008570:	d80c      	bhi.n	800858c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008572:	6878      	ldr	r0, [r7, #4]
 8008574:	f000 fa30 	bl	80089d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800857c:	2200      	movs	r2, #0
 800857e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008584:	687a      	ldr	r2, [r7, #4]
 8008586:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008588:	605a      	str	r2, [r3, #4]
 800858a:	e008      	b.n	800859e <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	2200      	movs	r2, #0
 8008590:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2200      	movs	r2, #0
 8008596:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	2201      	movs	r2, #1
 80085a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2200      	movs	r2, #0
 80085b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80085b4:	2300      	movs	r3, #0
}
 80085b6:	4618      	mov	r0, r3
 80085b8:	3710      	adds	r7, #16
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}
 80085be:	bf00      	nop
 80085c0:	40020407 	.word	0x40020407
 80085c4:	bffdfff8 	.word	0xbffdfff8
 80085c8:	cccccccd 	.word	0xcccccccd
 80085cc:	40020000 	.word	0x40020000
 80085d0:	bffdfbf8 	.word	0xbffdfbf8
 80085d4:	40020400 	.word	0x40020400

080085d8 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80085d8:	b580      	push	{r7, lr}
 80085da:	b086      	sub	sp, #24
 80085dc:	af00      	add	r7, sp, #0
 80085de:	60f8      	str	r0, [r7, #12]
 80085e0:	60b9      	str	r1, [r7, #8]
 80085e2:	607a      	str	r2, [r7, #4]
 80085e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80085f0:	2b01      	cmp	r3, #1
 80085f2:	d101      	bne.n	80085f8 <HAL_DMA_Start_IT+0x20>
 80085f4:	2302      	movs	r3, #2
 80085f6:	e066      	b.n	80086c6 <HAL_DMA_Start_IT+0xee>
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	2201      	movs	r2, #1
 80085fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8008606:	b2db      	uxtb	r3, r3
 8008608:	2b01      	cmp	r3, #1
 800860a:	d155      	bne.n	80086b8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2202      	movs	r2, #2
 8008610:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2200      	movs	r2, #0
 8008618:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	f022 0201 	bic.w	r2, r2, #1
 8008628:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	68b9      	ldr	r1, [r7, #8]
 8008630:	68f8      	ldr	r0, [r7, #12]
 8008632:	f000 f954 	bl	80088de <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800863a:	2b00      	cmp	r3, #0
 800863c:	d008      	beq.n	8008650 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	681a      	ldr	r2, [r3, #0]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f042 020e 	orr.w	r2, r2, #14
 800864c:	601a      	str	r2, [r3, #0]
 800864e:	e00f      	b.n	8008670 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	681a      	ldr	r2, [r3, #0]
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f022 0204 	bic.w	r2, r2, #4
 800865e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	f042 020a 	orr.w	r2, r2, #10
 800866e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800867a:	2b00      	cmp	r3, #0
 800867c:	d007      	beq.n	800868e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008688:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800868c:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008692:	2b00      	cmp	r3, #0
 8008694:	d007      	beq.n	80086a6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80086a4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	681a      	ldr	r2, [r3, #0]
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	f042 0201 	orr.w	r2, r2, #1
 80086b4:	601a      	str	r2, [r3, #0]
 80086b6:	e005      	b.n	80086c4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	2200      	movs	r2, #0
 80086bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80086c0:	2302      	movs	r3, #2
 80086c2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80086c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80086c6:	4618      	mov	r0, r3
 80086c8:	3718      	adds	r7, #24
 80086ca:	46bd      	mov	sp, r7
 80086cc:	bd80      	pop	{r7, pc}

080086ce <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80086ce:	b480      	push	{r7}
 80086d0:	b085      	sub	sp, #20
 80086d2:	af00      	add	r7, sp, #0
 80086d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80086d6:	2300      	movs	r3, #0
 80086d8:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80086e0:	b2db      	uxtb	r3, r3
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d005      	beq.n	80086f2 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2204      	movs	r2, #4
 80086ea:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80086ec:	2301      	movs	r3, #1
 80086ee:	73fb      	strb	r3, [r7, #15]
 80086f0:	e037      	b.n	8008762 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f022 020e 	bic.w	r2, r2, #14
 8008700:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008706:	681a      	ldr	r2, [r3, #0]
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800870c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008710:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f022 0201 	bic.w	r2, r2, #1
 8008720:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008726:	f003 021f 	and.w	r2, r3, #31
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800872e:	2101      	movs	r1, #1
 8008730:	fa01 f202 	lsl.w	r2, r1, r2
 8008734:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800873a:	687a      	ldr	r2, [r7, #4]
 800873c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800873e:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008744:	2b00      	cmp	r3, #0
 8008746:	d00c      	beq.n	8008762 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800874c:	681a      	ldr	r2, [r3, #0]
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008752:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008756:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800875c:	687a      	ldr	r2, [r7, #4]
 800875e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008760:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	2201      	movs	r2, #1
 8008766:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2200      	movs	r2, #0
 800876e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8008772:	7bfb      	ldrb	r3, [r7, #15]
}
 8008774:	4618      	mov	r0, r3
 8008776:	3714      	adds	r7, #20
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800879c:	f003 031f 	and.w	r3, r3, #31
 80087a0:	2204      	movs	r2, #4
 80087a2:	409a      	lsls	r2, r3
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	4013      	ands	r3, r2
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d026      	beq.n	80087fa <HAL_DMA_IRQHandler+0x7a>
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	f003 0304 	and.w	r3, r3, #4
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d021      	beq.n	80087fa <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f003 0320 	and.w	r3, r3, #32
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d107      	bne.n	80087d4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	681a      	ldr	r2, [r3, #0]
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f022 0204 	bic.w	r2, r2, #4
 80087d2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087d8:	f003 021f 	and.w	r2, r3, #31
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087e0:	2104      	movs	r1, #4
 80087e2:	fa01 f202 	lsl.w	r2, r1, r2
 80087e6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d071      	beq.n	80088d4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087f4:	6878      	ldr	r0, [r7, #4]
 80087f6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80087f8:	e06c      	b.n	80088d4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087fe:	f003 031f 	and.w	r3, r3, #31
 8008802:	2202      	movs	r2, #2
 8008804:	409a      	lsls	r2, r3
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	4013      	ands	r3, r2
 800880a:	2b00      	cmp	r3, #0
 800880c:	d02e      	beq.n	800886c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	f003 0302 	and.w	r3, r3, #2
 8008814:	2b00      	cmp	r3, #0
 8008816:	d029      	beq.n	800886c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f003 0320 	and.w	r3, r3, #32
 8008822:	2b00      	cmp	r3, #0
 8008824:	d10b      	bne.n	800883e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	681a      	ldr	r2, [r3, #0]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	f022 020a 	bic.w	r2, r2, #10
 8008834:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	2201      	movs	r2, #1
 800883a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008842:	f003 021f 	and.w	r2, r3, #31
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800884a:	2102      	movs	r1, #2
 800884c:	fa01 f202 	lsl.w	r2, r1, r2
 8008850:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2200      	movs	r2, #0
 8008856:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800885e:	2b00      	cmp	r3, #0
 8008860:	d038      	beq.n	80088d4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800886a:	e033      	b.n	80088d4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008870:	f003 031f 	and.w	r3, r3, #31
 8008874:	2208      	movs	r2, #8
 8008876:	409a      	lsls	r2, r3
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	4013      	ands	r3, r2
 800887c:	2b00      	cmp	r3, #0
 800887e:	d02a      	beq.n	80088d6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	f003 0308 	and.w	r3, r3, #8
 8008886:	2b00      	cmp	r3, #0
 8008888:	d025      	beq.n	80088d6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f022 020e 	bic.w	r2, r2, #14
 8008898:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800889e:	f003 021f 	and.w	r2, r3, #31
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a6:	2101      	movs	r1, #1
 80088a8:	fa01 f202 	lsl.w	r2, r1, r2
 80088ac:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2201      	movs	r2, #1
 80088b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2201      	movs	r2, #1
 80088b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	2200      	movs	r2, #0
 80088c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d004      	beq.n	80088d6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088d0:	6878      	ldr	r0, [r7, #4]
 80088d2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80088d4:	bf00      	nop
 80088d6:	bf00      	nop
}
 80088d8:	3710      	adds	r7, #16
 80088da:	46bd      	mov	sp, r7
 80088dc:	bd80      	pop	{r7, pc}

080088de <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80088de:	b480      	push	{r7}
 80088e0:	b085      	sub	sp, #20
 80088e2:	af00      	add	r7, sp, #0
 80088e4:	60f8      	str	r0, [r7, #12]
 80088e6:	60b9      	str	r1, [r7, #8]
 80088e8:	607a      	str	r2, [r7, #4]
 80088ea:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80088f0:	68fa      	ldr	r2, [r7, #12]
 80088f2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80088f4:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d004      	beq.n	8008908 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008902:	68fa      	ldr	r2, [r7, #12]
 8008904:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8008906:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800890c:	f003 021f 	and.w	r2, r3, #31
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008914:	2101      	movs	r1, #1
 8008916:	fa01 f202 	lsl.w	r2, r1, r2
 800891a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	683a      	ldr	r2, [r7, #0]
 8008922:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	689b      	ldr	r3, [r3, #8]
 8008928:	2b10      	cmp	r3, #16
 800892a:	d108      	bne.n	800893e <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	687a      	ldr	r2, [r7, #4]
 8008932:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800893c:	e007      	b.n	800894e <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	68ba      	ldr	r2, [r7, #8]
 8008944:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	687a      	ldr	r2, [r7, #4]
 800894c:	60da      	str	r2, [r3, #12]
}
 800894e:	bf00      	nop
 8008950:	3714      	adds	r7, #20
 8008952:	46bd      	mov	sp, r7
 8008954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008958:	4770      	bx	lr
	...

0800895c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800895c:	b480      	push	{r7}
 800895e:	b087      	sub	sp, #28
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	461a      	mov	r2, r3
 800896a:	4b16      	ldr	r3, [pc, #88]	; (80089c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800896c:	429a      	cmp	r2, r3
 800896e:	d802      	bhi.n	8008976 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8008970:	4b15      	ldr	r3, [pc, #84]	; (80089c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8008972:	617b      	str	r3, [r7, #20]
 8008974:	e001      	b.n	800897a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8008976:	4b15      	ldr	r3, [pc, #84]	; (80089cc <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8008978:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	b2db      	uxtb	r3, r3
 8008984:	3b08      	subs	r3, #8
 8008986:	4a12      	ldr	r2, [pc, #72]	; (80089d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8008988:	fba2 2303 	umull	r2, r3, r2, r3
 800898c:	091b      	lsrs	r3, r3, #4
 800898e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008994:	089b      	lsrs	r3, r3, #2
 8008996:	009a      	lsls	r2, r3, #2
 8008998:	693b      	ldr	r3, [r7, #16]
 800899a:	4413      	add	r3, r2
 800899c:	461a      	mov	r2, r3
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	4a0b      	ldr	r2, [pc, #44]	; (80089d4 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 80089a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	f003 031f 	and.w	r3, r3, #31
 80089ae:	2201      	movs	r2, #1
 80089b0:	409a      	lsls	r2, r3
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80089b6:	bf00      	nop
 80089b8:	371c      	adds	r7, #28
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	40020407 	.word	0x40020407
 80089c8:	40020800 	.word	0x40020800
 80089cc:	40020820 	.word	0x40020820
 80089d0:	cccccccd 	.word	0xcccccccd
 80089d4:	40020880 	.word	0x40020880

080089d8 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80089d8:	b480      	push	{r7}
 80089da:	b085      	sub	sp, #20
 80089dc:	af00      	add	r7, sp, #0
 80089de:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	b2db      	uxtb	r3, r3
 80089e6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80089e8:	68fa      	ldr	r2, [r7, #12]
 80089ea:	4b0b      	ldr	r3, [pc, #44]	; (8008a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80089ec:	4413      	add	r3, r2
 80089ee:	009b      	lsls	r3, r3, #2
 80089f0:	461a      	mov	r2, r3
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	4a08      	ldr	r2, [pc, #32]	; (8008a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80089fa:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	3b01      	subs	r3, #1
 8008a00:	f003 031f 	and.w	r3, r3, #31
 8008a04:	2201      	movs	r2, #1
 8008a06:	409a      	lsls	r2, r3
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8008a0c:	bf00      	nop
 8008a0e:	3714      	adds	r7, #20
 8008a10:	46bd      	mov	sp, r7
 8008a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a16:	4770      	bx	lr
 8008a18:	1000823f 	.word	0x1000823f
 8008a1c:	40020940 	.word	0x40020940

08008a20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b087      	sub	sp, #28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
 8008a28:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008a2a:	2300      	movs	r3, #0
 8008a2c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008a2e:	e15a      	b.n	8008ce6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	681a      	ldr	r2, [r3, #0]
 8008a34:	2101      	movs	r1, #1
 8008a36:	697b      	ldr	r3, [r7, #20]
 8008a38:	fa01 f303 	lsl.w	r3, r1, r3
 8008a3c:	4013      	ands	r3, r2
 8008a3e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f000 814c 	beq.w	8008ce0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	2b01      	cmp	r3, #1
 8008a4e:	d00b      	beq.n	8008a68 <HAL_GPIO_Init+0x48>
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	685b      	ldr	r3, [r3, #4]
 8008a54:	2b02      	cmp	r3, #2
 8008a56:	d007      	beq.n	8008a68 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008a5c:	2b11      	cmp	r3, #17
 8008a5e:	d003      	beq.n	8008a68 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a60:	683b      	ldr	r3, [r7, #0]
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	2b12      	cmp	r3, #18
 8008a66:	d130      	bne.n	8008aca <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	005b      	lsls	r3, r3, #1
 8008a72:	2203      	movs	r2, #3
 8008a74:	fa02 f303 	lsl.w	r3, r2, r3
 8008a78:	43db      	mvns	r3, r3
 8008a7a:	693a      	ldr	r2, [r7, #16]
 8008a7c:	4013      	ands	r3, r2
 8008a7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	68da      	ldr	r2, [r3, #12]
 8008a84:	697b      	ldr	r3, [r7, #20]
 8008a86:	005b      	lsls	r3, r3, #1
 8008a88:	fa02 f303 	lsl.w	r3, r2, r3
 8008a8c:	693a      	ldr	r2, [r7, #16]
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	693a      	ldr	r2, [r7, #16]
 8008a96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	685b      	ldr	r3, [r3, #4]
 8008a9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a9e:	2201      	movs	r2, #1
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8008aa6:	43db      	mvns	r3, r3
 8008aa8:	693a      	ldr	r2, [r7, #16]
 8008aaa:	4013      	ands	r3, r2
 8008aac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8008aae:	683b      	ldr	r3, [r7, #0]
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	091b      	lsrs	r3, r3, #4
 8008ab4:	f003 0201 	and.w	r2, r3, #1
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	fa02 f303 	lsl.w	r3, r2, r3
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	68db      	ldr	r3, [r3, #12]
 8008ace:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008ad0:	697b      	ldr	r3, [r7, #20]
 8008ad2:	005b      	lsls	r3, r3, #1
 8008ad4:	2203      	movs	r2, #3
 8008ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8008ada:	43db      	mvns	r3, r3
 8008adc:	693a      	ldr	r2, [r7, #16]
 8008ade:	4013      	ands	r3, r2
 8008ae0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	689a      	ldr	r2, [r3, #8]
 8008ae6:	697b      	ldr	r3, [r7, #20]
 8008ae8:	005b      	lsls	r3, r3, #1
 8008aea:	fa02 f303 	lsl.w	r3, r2, r3
 8008aee:	693a      	ldr	r2, [r7, #16]
 8008af0:	4313      	orrs	r3, r2
 8008af2:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	693a      	ldr	r2, [r7, #16]
 8008af8:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008afa:	683b      	ldr	r3, [r7, #0]
 8008afc:	685b      	ldr	r3, [r3, #4]
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d003      	beq.n	8008b0a <HAL_GPIO_Init+0xea>
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	2b12      	cmp	r3, #18
 8008b08:	d123      	bne.n	8008b52 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	08da      	lsrs	r2, r3, #3
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	3208      	adds	r2, #8
 8008b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b16:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	f003 0307 	and.w	r3, r3, #7
 8008b1e:	009b      	lsls	r3, r3, #2
 8008b20:	220f      	movs	r2, #15
 8008b22:	fa02 f303 	lsl.w	r3, r2, r3
 8008b26:	43db      	mvns	r3, r3
 8008b28:	693a      	ldr	r2, [r7, #16]
 8008b2a:	4013      	ands	r3, r2
 8008b2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8008b2e:	683b      	ldr	r3, [r7, #0]
 8008b30:	691a      	ldr	r2, [r3, #16]
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	f003 0307 	and.w	r3, r3, #7
 8008b38:	009b      	lsls	r3, r3, #2
 8008b3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008b44:	697b      	ldr	r3, [r7, #20]
 8008b46:	08da      	lsrs	r2, r3, #3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	3208      	adds	r2, #8
 8008b4c:	6939      	ldr	r1, [r7, #16]
 8008b4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008b58:	697b      	ldr	r3, [r7, #20]
 8008b5a:	005b      	lsls	r3, r3, #1
 8008b5c:	2203      	movs	r2, #3
 8008b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008b62:	43db      	mvns	r3, r3
 8008b64:	693a      	ldr	r2, [r7, #16]
 8008b66:	4013      	ands	r3, r2
 8008b68:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008b6a:	683b      	ldr	r3, [r7, #0]
 8008b6c:	685b      	ldr	r3, [r3, #4]
 8008b6e:	f003 0203 	and.w	r2, r3, #3
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	005b      	lsls	r3, r3, #1
 8008b76:	fa02 f303 	lsl.w	r3, r2, r3
 8008b7a:	693a      	ldr	r2, [r7, #16]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	693a      	ldr	r2, [r7, #16]
 8008b84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008b86:	683b      	ldr	r3, [r7, #0]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	f000 80a6 	beq.w	8008ce0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b94:	4b5b      	ldr	r3, [pc, #364]	; (8008d04 <HAL_GPIO_Init+0x2e4>)
 8008b96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b98:	4a5a      	ldr	r2, [pc, #360]	; (8008d04 <HAL_GPIO_Init+0x2e4>)
 8008b9a:	f043 0301 	orr.w	r3, r3, #1
 8008b9e:	6613      	str	r3, [r2, #96]	; 0x60
 8008ba0:	4b58      	ldr	r3, [pc, #352]	; (8008d04 <HAL_GPIO_Init+0x2e4>)
 8008ba2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008ba4:	f003 0301 	and.w	r3, r3, #1
 8008ba8:	60bb      	str	r3, [r7, #8]
 8008baa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008bac:	4a56      	ldr	r2, [pc, #344]	; (8008d08 <HAL_GPIO_Init+0x2e8>)
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	089b      	lsrs	r3, r3, #2
 8008bb2:	3302      	adds	r3, #2
 8008bb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bb8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	f003 0303 	and.w	r3, r3, #3
 8008bc0:	009b      	lsls	r3, r3, #2
 8008bc2:	220f      	movs	r2, #15
 8008bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8008bc8:	43db      	mvns	r3, r3
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	4013      	ands	r3, r2
 8008bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008bd6:	d01f      	beq.n	8008c18 <HAL_GPIO_Init+0x1f8>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a4c      	ldr	r2, [pc, #304]	; (8008d0c <HAL_GPIO_Init+0x2ec>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d019      	beq.n	8008c14 <HAL_GPIO_Init+0x1f4>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a4b      	ldr	r2, [pc, #300]	; (8008d10 <HAL_GPIO_Init+0x2f0>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d013      	beq.n	8008c10 <HAL_GPIO_Init+0x1f0>
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	4a4a      	ldr	r2, [pc, #296]	; (8008d14 <HAL_GPIO_Init+0x2f4>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d00d      	beq.n	8008c0c <HAL_GPIO_Init+0x1ec>
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	4a49      	ldr	r2, [pc, #292]	; (8008d18 <HAL_GPIO_Init+0x2f8>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d007      	beq.n	8008c08 <HAL_GPIO_Init+0x1e8>
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	4a48      	ldr	r2, [pc, #288]	; (8008d1c <HAL_GPIO_Init+0x2fc>)
 8008bfc:	4293      	cmp	r3, r2
 8008bfe:	d101      	bne.n	8008c04 <HAL_GPIO_Init+0x1e4>
 8008c00:	2305      	movs	r3, #5
 8008c02:	e00a      	b.n	8008c1a <HAL_GPIO_Init+0x1fa>
 8008c04:	2306      	movs	r3, #6
 8008c06:	e008      	b.n	8008c1a <HAL_GPIO_Init+0x1fa>
 8008c08:	2304      	movs	r3, #4
 8008c0a:	e006      	b.n	8008c1a <HAL_GPIO_Init+0x1fa>
 8008c0c:	2303      	movs	r3, #3
 8008c0e:	e004      	b.n	8008c1a <HAL_GPIO_Init+0x1fa>
 8008c10:	2302      	movs	r3, #2
 8008c12:	e002      	b.n	8008c1a <HAL_GPIO_Init+0x1fa>
 8008c14:	2301      	movs	r3, #1
 8008c16:	e000      	b.n	8008c1a <HAL_GPIO_Init+0x1fa>
 8008c18:	2300      	movs	r3, #0
 8008c1a:	697a      	ldr	r2, [r7, #20]
 8008c1c:	f002 0203 	and.w	r2, r2, #3
 8008c20:	0092      	lsls	r2, r2, #2
 8008c22:	4093      	lsls	r3, r2
 8008c24:	693a      	ldr	r2, [r7, #16]
 8008c26:	4313      	orrs	r3, r2
 8008c28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008c2a:	4937      	ldr	r1, [pc, #220]	; (8008d08 <HAL_GPIO_Init+0x2e8>)
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	089b      	lsrs	r3, r3, #2
 8008c30:	3302      	adds	r3, #2
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8008c38:	4b39      	ldr	r3, [pc, #228]	; (8008d20 <HAL_GPIO_Init+0x300>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	43db      	mvns	r3, r3
 8008c42:	693a      	ldr	r2, [r7, #16]
 8008c44:	4013      	ands	r3, r2
 8008c46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008c48:	683b      	ldr	r3, [r7, #0]
 8008c4a:	685b      	ldr	r3, [r3, #4]
 8008c4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d003      	beq.n	8008c5c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8008c54:	693a      	ldr	r2, [r7, #16]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008c5c:	4a30      	ldr	r2, [pc, #192]	; (8008d20 <HAL_GPIO_Init+0x300>)
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8008c62:	4b2f      	ldr	r3, [pc, #188]	; (8008d20 <HAL_GPIO_Init+0x300>)
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008c68:	68fb      	ldr	r3, [r7, #12]
 8008c6a:	43db      	mvns	r3, r3
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	4013      	ands	r3, r2
 8008c70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	685b      	ldr	r3, [r3, #4]
 8008c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d003      	beq.n	8008c86 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8008c7e:	693a      	ldr	r2, [r7, #16]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008c86:	4a26      	ldr	r2, [pc, #152]	; (8008d20 <HAL_GPIO_Init+0x300>)
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008c8c:	4b24      	ldr	r3, [pc, #144]	; (8008d20 <HAL_GPIO_Init+0x300>)
 8008c8e:	689b      	ldr	r3, [r3, #8]
 8008c90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	43db      	mvns	r3, r3
 8008c96:	693a      	ldr	r2, [r7, #16]
 8008c98:	4013      	ands	r3, r2
 8008c9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	685b      	ldr	r3, [r3, #4]
 8008ca0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d003      	beq.n	8008cb0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8008ca8:	693a      	ldr	r2, [r7, #16]
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	4313      	orrs	r3, r2
 8008cae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008cb0:	4a1b      	ldr	r2, [pc, #108]	; (8008d20 <HAL_GPIO_Init+0x300>)
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008cb6:	4b1a      	ldr	r3, [pc, #104]	; (8008d20 <HAL_GPIO_Init+0x300>)
 8008cb8:	68db      	ldr	r3, [r3, #12]
 8008cba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	43db      	mvns	r3, r3
 8008cc0:	693a      	ldr	r2, [r7, #16]
 8008cc2:	4013      	ands	r3, r2
 8008cc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	685b      	ldr	r3, [r3, #4]
 8008cca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d003      	beq.n	8008cda <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8008cd2:	693a      	ldr	r2, [r7, #16]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008cda:	4a11      	ldr	r2, [pc, #68]	; (8008d20 <HAL_GPIO_Init+0x300>)
 8008cdc:	693b      	ldr	r3, [r7, #16]
 8008cde:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8008ce0:	697b      	ldr	r3, [r7, #20]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	697b      	ldr	r3, [r7, #20]
 8008cec:	fa22 f303 	lsr.w	r3, r2, r3
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f47f ae9d 	bne.w	8008a30 <HAL_GPIO_Init+0x10>
  }
}
 8008cf6:	bf00      	nop
 8008cf8:	371c      	adds	r7, #28
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr
 8008d02:	bf00      	nop
 8008d04:	40021000 	.word	0x40021000
 8008d08:	40010000 	.word	0x40010000
 8008d0c:	48000400 	.word	0x48000400
 8008d10:	48000800 	.word	0x48000800
 8008d14:	48000c00 	.word	0x48000c00
 8008d18:	48001000 	.word	0x48001000
 8008d1c:	48001400 	.word	0x48001400
 8008d20:	40010400 	.word	0x40010400

08008d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008d24:	b480      	push	{r7}
 8008d26:	b083      	sub	sp, #12
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	460b      	mov	r3, r1
 8008d2e:	807b      	strh	r3, [r7, #2]
 8008d30:	4613      	mov	r3, r2
 8008d32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008d34:	787b      	ldrb	r3, [r7, #1]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d003      	beq.n	8008d42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008d3a:	887a      	ldrh	r2, [r7, #2]
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008d40:	e002      	b.n	8008d48 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008d42:	887a      	ldrh	r2, [r7, #2]
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008d48:	bf00      	nop
 8008d4a:	370c      	adds	r7, #12
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr

08008d54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008d54:	b480      	push	{r7}
 8008d56:	b085      	sub	sp, #20
 8008d58:	af00      	add	r7, sp, #0
 8008d5a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d141      	bne.n	8008de6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008d62:	4b4b      	ldr	r3, [pc, #300]	; (8008e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008d6a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d6e:	d131      	bne.n	8008dd4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008d70:	4b47      	ldr	r3, [pc, #284]	; (8008e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008d76:	4a46      	ldr	r2, [pc, #280]	; (8008e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008d7c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008d80:	4b43      	ldr	r3, [pc, #268]	; (8008e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008d88:	4a41      	ldr	r2, [pc, #260]	; (8008e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008d8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008d8e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008d90:	4b40      	ldr	r3, [pc, #256]	; (8008e94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	2232      	movs	r2, #50	; 0x32
 8008d96:	fb02 f303 	mul.w	r3, r2, r3
 8008d9a:	4a3f      	ldr	r2, [pc, #252]	; (8008e98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8008da0:	0c9b      	lsrs	r3, r3, #18
 8008da2:	3301      	adds	r3, #1
 8008da4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008da6:	e002      	b.n	8008dae <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	3b01      	subs	r3, #1
 8008dac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008dae:	4b38      	ldr	r3, [pc, #224]	; (8008e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008db0:	695b      	ldr	r3, [r3, #20]
 8008db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dba:	d102      	bne.n	8008dc2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d1f2      	bne.n	8008da8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008dc2:	4b33      	ldr	r3, [pc, #204]	; (8008e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dc4:	695b      	ldr	r3, [r3, #20]
 8008dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008dca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dce:	d158      	bne.n	8008e82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008dd0:	2303      	movs	r3, #3
 8008dd2:	e057      	b.n	8008e84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008dd4:	4b2e      	ldr	r3, [pc, #184]	; (8008e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dd6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008dda:	4a2d      	ldr	r2, [pc, #180]	; (8008e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008ddc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008de0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008de4:	e04d      	b.n	8008e82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008dec:	d141      	bne.n	8008e72 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8008dee:	4b28      	ldr	r3, [pc, #160]	; (8008e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008df6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dfa:	d131      	bne.n	8008e60 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008dfc:	4b24      	ldr	r3, [pc, #144]	; (8008e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008dfe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e02:	4a23      	ldr	r2, [pc, #140]	; (8008e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e08:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008e0c:	4b20      	ldr	r3, [pc, #128]	; (8008e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008e14:	4a1e      	ldr	r2, [pc, #120]	; (8008e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008e1c:	4b1d      	ldr	r3, [pc, #116]	; (8008e94 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	2232      	movs	r2, #50	; 0x32
 8008e22:	fb02 f303 	mul.w	r3, r2, r3
 8008e26:	4a1c      	ldr	r2, [pc, #112]	; (8008e98 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8008e28:	fba2 2303 	umull	r2, r3, r2, r3
 8008e2c:	0c9b      	lsrs	r3, r3, #18
 8008e2e:	3301      	adds	r3, #1
 8008e30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e32:	e002      	b.n	8008e3a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	3b01      	subs	r3, #1
 8008e38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8008e3a:	4b15      	ldr	r3, [pc, #84]	; (8008e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e3c:	695b      	ldr	r3, [r3, #20]
 8008e3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e46:	d102      	bne.n	8008e4e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d1f2      	bne.n	8008e34 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8008e4e:	4b10      	ldr	r3, [pc, #64]	; (8008e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e50:	695b      	ldr	r3, [r3, #20]
 8008e52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e5a:	d112      	bne.n	8008e82 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8008e5c:	2303      	movs	r3, #3
 8008e5e:	e011      	b.n	8008e84 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8008e60:	4b0b      	ldr	r3, [pc, #44]	; (8008e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008e66:	4a0a      	ldr	r2, [pc, #40]	; (8008e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8008e70:	e007      	b.n	8008e82 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8008e72:	4b07      	ldr	r3, [pc, #28]	; (8008e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008e7a:	4a05      	ldr	r2, [pc, #20]	; (8008e90 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8008e7c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008e80:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8008e82:	2300      	movs	r3, #0
}
 8008e84:	4618      	mov	r0, r3
 8008e86:	3714      	adds	r7, #20
 8008e88:	46bd      	mov	sp, r7
 8008e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8e:	4770      	bx	lr
 8008e90:	40007000 	.word	0x40007000
 8008e94:	20000c3c 	.word	0x20000c3c
 8008e98:	431bde83 	.word	0x431bde83

08008e9c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008e9c:	b580      	push	{r7, lr}
 8008e9e:	b088      	sub	sp, #32
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d101      	bne.n	8008eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008eaa:	2301      	movs	r3, #1
 8008eac:	e308      	b.n	80094c0 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f003 0301 	and.w	r3, r3, #1
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d075      	beq.n	8008fa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008eba:	4ba3      	ldr	r3, [pc, #652]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 8008ebc:	689b      	ldr	r3, [r3, #8]
 8008ebe:	f003 030c 	and.w	r3, r3, #12
 8008ec2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008ec4:	4ba0      	ldr	r3, [pc, #640]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 8008ec6:	68db      	ldr	r3, [r3, #12]
 8008ec8:	f003 0303 	and.w	r3, r3, #3
 8008ecc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8008ece:	69bb      	ldr	r3, [r7, #24]
 8008ed0:	2b0c      	cmp	r3, #12
 8008ed2:	d102      	bne.n	8008eda <HAL_RCC_OscConfig+0x3e>
 8008ed4:	697b      	ldr	r3, [r7, #20]
 8008ed6:	2b03      	cmp	r3, #3
 8008ed8:	d002      	beq.n	8008ee0 <HAL_RCC_OscConfig+0x44>
 8008eda:	69bb      	ldr	r3, [r7, #24]
 8008edc:	2b08      	cmp	r3, #8
 8008ede:	d10b      	bne.n	8008ef8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008ee0:	4b99      	ldr	r3, [pc, #612]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d05b      	beq.n	8008fa4 <HAL_RCC_OscConfig+0x108>
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d157      	bne.n	8008fa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e2e3      	b.n	80094c0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	685b      	ldr	r3, [r3, #4]
 8008efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f00:	d106      	bne.n	8008f10 <HAL_RCC_OscConfig+0x74>
 8008f02:	4b91      	ldr	r3, [pc, #580]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	4a90      	ldr	r2, [pc, #576]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 8008f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f0c:	6013      	str	r3, [r2, #0]
 8008f0e:	e01d      	b.n	8008f4c <HAL_RCC_OscConfig+0xb0>
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	685b      	ldr	r3, [r3, #4]
 8008f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f18:	d10c      	bne.n	8008f34 <HAL_RCC_OscConfig+0x98>
 8008f1a:	4b8b      	ldr	r3, [pc, #556]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4a8a      	ldr	r2, [pc, #552]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 8008f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f24:	6013      	str	r3, [r2, #0]
 8008f26:	4b88      	ldr	r3, [pc, #544]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	4a87      	ldr	r2, [pc, #540]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 8008f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f30:	6013      	str	r3, [r2, #0]
 8008f32:	e00b      	b.n	8008f4c <HAL_RCC_OscConfig+0xb0>
 8008f34:	4b84      	ldr	r3, [pc, #528]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	4a83      	ldr	r2, [pc, #524]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 8008f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008f3e:	6013      	str	r3, [r2, #0]
 8008f40:	4b81      	ldr	r3, [pc, #516]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a80      	ldr	r2, [pc, #512]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 8008f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d013      	beq.n	8008f7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f54:	f7fd fa06 	bl	8006364 <HAL_GetTick>
 8008f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f5a:	e008      	b.n	8008f6e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f5c:	f7fd fa02 	bl	8006364 <HAL_GetTick>
 8008f60:	4602      	mov	r2, r0
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	1ad3      	subs	r3, r2, r3
 8008f66:	2b64      	cmp	r3, #100	; 0x64
 8008f68:	d901      	bls.n	8008f6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008f6a:	2303      	movs	r3, #3
 8008f6c:	e2a8      	b.n	80094c0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008f6e:	4b76      	ldr	r3, [pc, #472]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d0f0      	beq.n	8008f5c <HAL_RCC_OscConfig+0xc0>
 8008f7a:	e014      	b.n	8008fa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f7c:	f7fd f9f2 	bl	8006364 <HAL_GetTick>
 8008f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008f82:	e008      	b.n	8008f96 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008f84:	f7fd f9ee 	bl	8006364 <HAL_GetTick>
 8008f88:	4602      	mov	r2, r0
 8008f8a:	693b      	ldr	r3, [r7, #16]
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	2b64      	cmp	r3, #100	; 0x64
 8008f90:	d901      	bls.n	8008f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008f92:	2303      	movs	r3, #3
 8008f94:	e294      	b.n	80094c0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008f96:	4b6c      	ldr	r3, [pc, #432]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d1f0      	bne.n	8008f84 <HAL_RCC_OscConfig+0xe8>
 8008fa2:	e000      	b.n	8008fa6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f003 0302 	and.w	r3, r3, #2
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d075      	beq.n	800909e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008fb2:	4b65      	ldr	r3, [pc, #404]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 8008fb4:	689b      	ldr	r3, [r3, #8]
 8008fb6:	f003 030c 	and.w	r3, r3, #12
 8008fba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008fbc:	4b62      	ldr	r3, [pc, #392]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 8008fbe:	68db      	ldr	r3, [r3, #12]
 8008fc0:	f003 0303 	and.w	r3, r3, #3
 8008fc4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	2b0c      	cmp	r3, #12
 8008fca:	d102      	bne.n	8008fd2 <HAL_RCC_OscConfig+0x136>
 8008fcc:	697b      	ldr	r3, [r7, #20]
 8008fce:	2b02      	cmp	r3, #2
 8008fd0:	d002      	beq.n	8008fd8 <HAL_RCC_OscConfig+0x13c>
 8008fd2:	69bb      	ldr	r3, [r7, #24]
 8008fd4:	2b04      	cmp	r3, #4
 8008fd6:	d11f      	bne.n	8009018 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008fd8:	4b5b      	ldr	r3, [pc, #364]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d005      	beq.n	8008ff0 <HAL_RCC_OscConfig+0x154>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	68db      	ldr	r3, [r3, #12]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d101      	bne.n	8008ff0 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8008fec:	2301      	movs	r3, #1
 8008fee:	e267      	b.n	80094c0 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ff0:	4b55      	ldr	r3, [pc, #340]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	691b      	ldr	r3, [r3, #16]
 8008ffc:	061b      	lsls	r3, r3, #24
 8008ffe:	4952      	ldr	r1, [pc, #328]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 8009000:	4313      	orrs	r3, r2
 8009002:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8009004:	4b51      	ldr	r3, [pc, #324]	; (800914c <HAL_RCC_OscConfig+0x2b0>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4618      	mov	r0, r3
 800900a:	f7fd f95f 	bl	80062cc <HAL_InitTick>
 800900e:	4603      	mov	r3, r0
 8009010:	2b00      	cmp	r3, #0
 8009012:	d043      	beq.n	800909c <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8009014:	2301      	movs	r3, #1
 8009016:	e253      	b.n	80094c0 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d023      	beq.n	8009068 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009020:	4b49      	ldr	r3, [pc, #292]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a48      	ldr	r2, [pc, #288]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 8009026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800902a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800902c:	f7fd f99a 	bl	8006364 <HAL_GetTick>
 8009030:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009032:	e008      	b.n	8009046 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009034:	f7fd f996 	bl	8006364 <HAL_GetTick>
 8009038:	4602      	mov	r2, r0
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	1ad3      	subs	r3, r2, r3
 800903e:	2b02      	cmp	r3, #2
 8009040:	d901      	bls.n	8009046 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009042:	2303      	movs	r3, #3
 8009044:	e23c      	b.n	80094c0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009046:	4b40      	ldr	r3, [pc, #256]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800904e:	2b00      	cmp	r3, #0
 8009050:	d0f0      	beq.n	8009034 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009052:	4b3d      	ldr	r3, [pc, #244]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 8009054:	685b      	ldr	r3, [r3, #4]
 8009056:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	691b      	ldr	r3, [r3, #16]
 800905e:	061b      	lsls	r3, r3, #24
 8009060:	4939      	ldr	r1, [pc, #228]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 8009062:	4313      	orrs	r3, r2
 8009064:	604b      	str	r3, [r1, #4]
 8009066:	e01a      	b.n	800909e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009068:	4b37      	ldr	r3, [pc, #220]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a36      	ldr	r2, [pc, #216]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 800906e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009072:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009074:	f7fd f976 	bl	8006364 <HAL_GetTick>
 8009078:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800907a:	e008      	b.n	800908e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800907c:	f7fd f972 	bl	8006364 <HAL_GetTick>
 8009080:	4602      	mov	r2, r0
 8009082:	693b      	ldr	r3, [r7, #16]
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	2b02      	cmp	r3, #2
 8009088:	d901      	bls.n	800908e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800908a:	2303      	movs	r3, #3
 800908c:	e218      	b.n	80094c0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800908e:	4b2e      	ldr	r3, [pc, #184]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009096:	2b00      	cmp	r3, #0
 8009098:	d1f0      	bne.n	800907c <HAL_RCC_OscConfig+0x1e0>
 800909a:	e000      	b.n	800909e <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800909c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	f003 0308 	and.w	r3, r3, #8
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d03c      	beq.n	8009124 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	695b      	ldr	r3, [r3, #20]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d01c      	beq.n	80090ec <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80090b2:	4b25      	ldr	r3, [pc, #148]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 80090b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090b8:	4a23      	ldr	r2, [pc, #140]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 80090ba:	f043 0301 	orr.w	r3, r3, #1
 80090be:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090c2:	f7fd f94f 	bl	8006364 <HAL_GetTick>
 80090c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80090c8:	e008      	b.n	80090dc <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80090ca:	f7fd f94b 	bl	8006364 <HAL_GetTick>
 80090ce:	4602      	mov	r2, r0
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	1ad3      	subs	r3, r2, r3
 80090d4:	2b02      	cmp	r3, #2
 80090d6:	d901      	bls.n	80090dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80090d8:	2303      	movs	r3, #3
 80090da:	e1f1      	b.n	80094c0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80090dc:	4b1a      	ldr	r3, [pc, #104]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 80090de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090e2:	f003 0302 	and.w	r3, r3, #2
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d0ef      	beq.n	80090ca <HAL_RCC_OscConfig+0x22e>
 80090ea:	e01b      	b.n	8009124 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80090ec:	4b16      	ldr	r3, [pc, #88]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 80090ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80090f2:	4a15      	ldr	r2, [pc, #84]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 80090f4:	f023 0301 	bic.w	r3, r3, #1
 80090f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090fc:	f7fd f932 	bl	8006364 <HAL_GetTick>
 8009100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009102:	e008      	b.n	8009116 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009104:	f7fd f92e 	bl	8006364 <HAL_GetTick>
 8009108:	4602      	mov	r2, r0
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	2b02      	cmp	r3, #2
 8009110:	d901      	bls.n	8009116 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8009112:	2303      	movs	r3, #3
 8009114:	e1d4      	b.n	80094c0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009116:	4b0c      	ldr	r3, [pc, #48]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 8009118:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800911c:	f003 0302 	and.w	r3, r3, #2
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1ef      	bne.n	8009104 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f003 0304 	and.w	r3, r3, #4
 800912c:	2b00      	cmp	r3, #0
 800912e:	f000 80ab 	beq.w	8009288 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009132:	2300      	movs	r3, #0
 8009134:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009136:	4b04      	ldr	r3, [pc, #16]	; (8009148 <HAL_RCC_OscConfig+0x2ac>)
 8009138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800913a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800913e:	2b00      	cmp	r3, #0
 8009140:	d106      	bne.n	8009150 <HAL_RCC_OscConfig+0x2b4>
 8009142:	2301      	movs	r3, #1
 8009144:	e005      	b.n	8009152 <HAL_RCC_OscConfig+0x2b6>
 8009146:	bf00      	nop
 8009148:	40021000 	.word	0x40021000
 800914c:	20000c40 	.word	0x20000c40
 8009150:	2300      	movs	r3, #0
 8009152:	2b00      	cmp	r3, #0
 8009154:	d00d      	beq.n	8009172 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009156:	4baf      	ldr	r3, [pc, #700]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 8009158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800915a:	4aae      	ldr	r2, [pc, #696]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 800915c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009160:	6593      	str	r3, [r2, #88]	; 0x58
 8009162:	4bac      	ldr	r3, [pc, #688]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 8009164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800916a:	60fb      	str	r3, [r7, #12]
 800916c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800916e:	2301      	movs	r3, #1
 8009170:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009172:	4ba9      	ldr	r3, [pc, #676]	; (8009418 <HAL_RCC_OscConfig+0x57c>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800917a:	2b00      	cmp	r3, #0
 800917c:	d118      	bne.n	80091b0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800917e:	4ba6      	ldr	r3, [pc, #664]	; (8009418 <HAL_RCC_OscConfig+0x57c>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	4aa5      	ldr	r2, [pc, #660]	; (8009418 <HAL_RCC_OscConfig+0x57c>)
 8009184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009188:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800918a:	f7fd f8eb 	bl	8006364 <HAL_GetTick>
 800918e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009190:	e008      	b.n	80091a4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009192:	f7fd f8e7 	bl	8006364 <HAL_GetTick>
 8009196:	4602      	mov	r2, r0
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	1ad3      	subs	r3, r2, r3
 800919c:	2b02      	cmp	r3, #2
 800919e:	d901      	bls.n	80091a4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80091a0:	2303      	movs	r3, #3
 80091a2:	e18d      	b.n	80094c0 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80091a4:	4b9c      	ldr	r3, [pc, #624]	; (8009418 <HAL_RCC_OscConfig+0x57c>)
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d0f0      	beq.n	8009192 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	689b      	ldr	r3, [r3, #8]
 80091b4:	2b01      	cmp	r3, #1
 80091b6:	d108      	bne.n	80091ca <HAL_RCC_OscConfig+0x32e>
 80091b8:	4b96      	ldr	r3, [pc, #600]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 80091ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091be:	4a95      	ldr	r2, [pc, #596]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 80091c0:	f043 0301 	orr.w	r3, r3, #1
 80091c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80091c8:	e024      	b.n	8009214 <HAL_RCC_OscConfig+0x378>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	2b05      	cmp	r3, #5
 80091d0:	d110      	bne.n	80091f4 <HAL_RCC_OscConfig+0x358>
 80091d2:	4b90      	ldr	r3, [pc, #576]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 80091d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091d8:	4a8e      	ldr	r2, [pc, #568]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 80091da:	f043 0304 	orr.w	r3, r3, #4
 80091de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80091e2:	4b8c      	ldr	r3, [pc, #560]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 80091e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091e8:	4a8a      	ldr	r2, [pc, #552]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 80091ea:	f043 0301 	orr.w	r3, r3, #1
 80091ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80091f2:	e00f      	b.n	8009214 <HAL_RCC_OscConfig+0x378>
 80091f4:	4b87      	ldr	r3, [pc, #540]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 80091f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091fa:	4a86      	ldr	r2, [pc, #536]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 80091fc:	f023 0301 	bic.w	r3, r3, #1
 8009200:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009204:	4b83      	ldr	r3, [pc, #524]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 8009206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800920a:	4a82      	ldr	r2, [pc, #520]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 800920c:	f023 0304 	bic.w	r3, r3, #4
 8009210:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	689b      	ldr	r3, [r3, #8]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d016      	beq.n	800924a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800921c:	f7fd f8a2 	bl	8006364 <HAL_GetTick>
 8009220:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009222:	e00a      	b.n	800923a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009224:	f7fd f89e 	bl	8006364 <HAL_GetTick>
 8009228:	4602      	mov	r2, r0
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	1ad3      	subs	r3, r2, r3
 800922e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009232:	4293      	cmp	r3, r2
 8009234:	d901      	bls.n	800923a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8009236:	2303      	movs	r3, #3
 8009238:	e142      	b.n	80094c0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800923a:	4b76      	ldr	r3, [pc, #472]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 800923c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009240:	f003 0302 	and.w	r3, r3, #2
 8009244:	2b00      	cmp	r3, #0
 8009246:	d0ed      	beq.n	8009224 <HAL_RCC_OscConfig+0x388>
 8009248:	e015      	b.n	8009276 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800924a:	f7fd f88b 	bl	8006364 <HAL_GetTick>
 800924e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009250:	e00a      	b.n	8009268 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009252:	f7fd f887 	bl	8006364 <HAL_GetTick>
 8009256:	4602      	mov	r2, r0
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	1ad3      	subs	r3, r2, r3
 800925c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009260:	4293      	cmp	r3, r2
 8009262:	d901      	bls.n	8009268 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8009264:	2303      	movs	r3, #3
 8009266:	e12b      	b.n	80094c0 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009268:	4b6a      	ldr	r3, [pc, #424]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 800926a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800926e:	f003 0302 	and.w	r3, r3, #2
 8009272:	2b00      	cmp	r3, #0
 8009274:	d1ed      	bne.n	8009252 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8009276:	7ffb      	ldrb	r3, [r7, #31]
 8009278:	2b01      	cmp	r3, #1
 800927a:	d105      	bne.n	8009288 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800927c:	4b65      	ldr	r3, [pc, #404]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 800927e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009280:	4a64      	ldr	r2, [pc, #400]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 8009282:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009286:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f003 0320 	and.w	r3, r3, #32
 8009290:	2b00      	cmp	r3, #0
 8009292:	d03c      	beq.n	800930e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	699b      	ldr	r3, [r3, #24]
 8009298:	2b00      	cmp	r3, #0
 800929a:	d01c      	beq.n	80092d6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800929c:	4b5d      	ldr	r3, [pc, #372]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 800929e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80092a2:	4a5c      	ldr	r2, [pc, #368]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 80092a4:	f043 0301 	orr.w	r3, r3, #1
 80092a8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092ac:	f7fd f85a 	bl	8006364 <HAL_GetTick>
 80092b0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80092b2:	e008      	b.n	80092c6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80092b4:	f7fd f856 	bl	8006364 <HAL_GetTick>
 80092b8:	4602      	mov	r2, r0
 80092ba:	693b      	ldr	r3, [r7, #16]
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	2b02      	cmp	r3, #2
 80092c0:	d901      	bls.n	80092c6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80092c2:	2303      	movs	r3, #3
 80092c4:	e0fc      	b.n	80094c0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80092c6:	4b53      	ldr	r3, [pc, #332]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 80092c8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80092cc:	f003 0302 	and.w	r3, r3, #2
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d0ef      	beq.n	80092b4 <HAL_RCC_OscConfig+0x418>
 80092d4:	e01b      	b.n	800930e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80092d6:	4b4f      	ldr	r3, [pc, #316]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 80092d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80092dc:	4a4d      	ldr	r2, [pc, #308]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 80092de:	f023 0301 	bic.w	r3, r3, #1
 80092e2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092e6:	f7fd f83d 	bl	8006364 <HAL_GetTick>
 80092ea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80092ec:	e008      	b.n	8009300 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80092ee:	f7fd f839 	bl	8006364 <HAL_GetTick>
 80092f2:	4602      	mov	r2, r0
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	1ad3      	subs	r3, r2, r3
 80092f8:	2b02      	cmp	r3, #2
 80092fa:	d901      	bls.n	8009300 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80092fc:	2303      	movs	r3, #3
 80092fe:	e0df      	b.n	80094c0 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009300:	4b44      	ldr	r3, [pc, #272]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 8009302:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009306:	f003 0302 	and.w	r3, r3, #2
 800930a:	2b00      	cmp	r3, #0
 800930c:	d1ef      	bne.n	80092ee <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	69db      	ldr	r3, [r3, #28]
 8009312:	2b00      	cmp	r3, #0
 8009314:	f000 80d3 	beq.w	80094be <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009318:	4b3e      	ldr	r3, [pc, #248]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 800931a:	689b      	ldr	r3, [r3, #8]
 800931c:	f003 030c 	and.w	r3, r3, #12
 8009320:	2b0c      	cmp	r3, #12
 8009322:	f000 808d 	beq.w	8009440 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	69db      	ldr	r3, [r3, #28]
 800932a:	2b02      	cmp	r3, #2
 800932c:	d15a      	bne.n	80093e4 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800932e:	4b39      	ldr	r3, [pc, #228]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a38      	ldr	r2, [pc, #224]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 8009334:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009338:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800933a:	f7fd f813 	bl	8006364 <HAL_GetTick>
 800933e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009340:	e008      	b.n	8009354 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009342:	f7fd f80f 	bl	8006364 <HAL_GetTick>
 8009346:	4602      	mov	r2, r0
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	1ad3      	subs	r3, r2, r3
 800934c:	2b02      	cmp	r3, #2
 800934e:	d901      	bls.n	8009354 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8009350:	2303      	movs	r3, #3
 8009352:	e0b5      	b.n	80094c0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009354:	4b2f      	ldr	r3, [pc, #188]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800935c:	2b00      	cmp	r3, #0
 800935e:	d1f0      	bne.n	8009342 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009360:	4b2c      	ldr	r3, [pc, #176]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 8009362:	68da      	ldr	r2, [r3, #12]
 8009364:	4b2d      	ldr	r3, [pc, #180]	; (800941c <HAL_RCC_OscConfig+0x580>)
 8009366:	4013      	ands	r3, r2
 8009368:	687a      	ldr	r2, [r7, #4]
 800936a:	6a11      	ldr	r1, [r2, #32]
 800936c:	687a      	ldr	r2, [r7, #4]
 800936e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009370:	3a01      	subs	r2, #1
 8009372:	0112      	lsls	r2, r2, #4
 8009374:	4311      	orrs	r1, r2
 8009376:	687a      	ldr	r2, [r7, #4]
 8009378:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800937a:	0212      	lsls	r2, r2, #8
 800937c:	4311      	orrs	r1, r2
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009382:	0852      	lsrs	r2, r2, #1
 8009384:	3a01      	subs	r2, #1
 8009386:	0552      	lsls	r2, r2, #21
 8009388:	4311      	orrs	r1, r2
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800938e:	0852      	lsrs	r2, r2, #1
 8009390:	3a01      	subs	r2, #1
 8009392:	0652      	lsls	r2, r2, #25
 8009394:	4311      	orrs	r1, r2
 8009396:	687a      	ldr	r2, [r7, #4]
 8009398:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800939a:	06d2      	lsls	r2, r2, #27
 800939c:	430a      	orrs	r2, r1
 800939e:	491d      	ldr	r1, [pc, #116]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 80093a0:	4313      	orrs	r3, r2
 80093a2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80093a4:	4b1b      	ldr	r3, [pc, #108]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a1a      	ldr	r2, [pc, #104]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 80093aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093ae:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80093b0:	4b18      	ldr	r3, [pc, #96]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 80093b2:	68db      	ldr	r3, [r3, #12]
 80093b4:	4a17      	ldr	r2, [pc, #92]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 80093b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80093ba:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80093bc:	f7fc ffd2 	bl	8006364 <HAL_GetTick>
 80093c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80093c2:	e008      	b.n	80093d6 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80093c4:	f7fc ffce 	bl	8006364 <HAL_GetTick>
 80093c8:	4602      	mov	r2, r0
 80093ca:	693b      	ldr	r3, [r7, #16]
 80093cc:	1ad3      	subs	r3, r2, r3
 80093ce:	2b02      	cmp	r3, #2
 80093d0:	d901      	bls.n	80093d6 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80093d2:	2303      	movs	r3, #3
 80093d4:	e074      	b.n	80094c0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80093d6:	4b0f      	ldr	r3, [pc, #60]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d0f0      	beq.n	80093c4 <HAL_RCC_OscConfig+0x528>
 80093e2:	e06c      	b.n	80094be <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093e4:	4b0b      	ldr	r3, [pc, #44]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	4a0a      	ldr	r2, [pc, #40]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 80093ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80093ee:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80093f0:	4b08      	ldr	r3, [pc, #32]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 80093f2:	68db      	ldr	r3, [r3, #12]
 80093f4:	4a07      	ldr	r2, [pc, #28]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 80093f6:	f023 0303 	bic.w	r3, r3, #3
 80093fa:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80093fc:	4b05      	ldr	r3, [pc, #20]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 80093fe:	68db      	ldr	r3, [r3, #12]
 8009400:	4a04      	ldr	r2, [pc, #16]	; (8009414 <HAL_RCC_OscConfig+0x578>)
 8009402:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8009406:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800940a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800940c:	f7fc ffaa 	bl	8006364 <HAL_GetTick>
 8009410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009412:	e00e      	b.n	8009432 <HAL_RCC_OscConfig+0x596>
 8009414:	40021000 	.word	0x40021000
 8009418:	40007000 	.word	0x40007000
 800941c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009420:	f7fc ffa0 	bl	8006364 <HAL_GetTick>
 8009424:	4602      	mov	r2, r0
 8009426:	693b      	ldr	r3, [r7, #16]
 8009428:	1ad3      	subs	r3, r2, r3
 800942a:	2b02      	cmp	r3, #2
 800942c:	d901      	bls.n	8009432 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800942e:	2303      	movs	r3, #3
 8009430:	e046      	b.n	80094c0 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009432:	4b25      	ldr	r3, [pc, #148]	; (80094c8 <HAL_RCC_OscConfig+0x62c>)
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800943a:	2b00      	cmp	r3, #0
 800943c:	d1f0      	bne.n	8009420 <HAL_RCC_OscConfig+0x584>
 800943e:	e03e      	b.n	80094be <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	69db      	ldr	r3, [r3, #28]
 8009444:	2b01      	cmp	r3, #1
 8009446:	d101      	bne.n	800944c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8009448:	2301      	movs	r3, #1
 800944a:	e039      	b.n	80094c0 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800944c:	4b1e      	ldr	r3, [pc, #120]	; (80094c8 <HAL_RCC_OscConfig+0x62c>)
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009452:	697b      	ldr	r3, [r7, #20]
 8009454:	f003 0203 	and.w	r2, r3, #3
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6a1b      	ldr	r3, [r3, #32]
 800945c:	429a      	cmp	r2, r3
 800945e:	d12c      	bne.n	80094ba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009460:	697b      	ldr	r3, [r7, #20]
 8009462:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800946a:	3b01      	subs	r3, #1
 800946c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800946e:	429a      	cmp	r2, r3
 8009470:	d123      	bne.n	80094ba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8009472:	697b      	ldr	r3, [r7, #20]
 8009474:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800947c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800947e:	429a      	cmp	r2, r3
 8009480:	d11b      	bne.n	80094ba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009482:	697b      	ldr	r3, [r7, #20]
 8009484:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800948e:	429a      	cmp	r2, r3
 8009490:	d113      	bne.n	80094ba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009492:	697b      	ldr	r3, [r7, #20]
 8009494:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800949c:	085b      	lsrs	r3, r3, #1
 800949e:	3b01      	subs	r3, #1
 80094a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d109      	bne.n	80094ba <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094b0:	085b      	lsrs	r3, r3, #1
 80094b2:	3b01      	subs	r3, #1
 80094b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d001      	beq.n	80094be <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e000      	b.n	80094c0 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80094be:	2300      	movs	r3, #0
}
 80094c0:	4618      	mov	r0, r3
 80094c2:	3720      	adds	r7, #32
 80094c4:	46bd      	mov	sp, r7
 80094c6:	bd80      	pop	{r7, pc}
 80094c8:	40021000 	.word	0x40021000

080094cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b086      	sub	sp, #24
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
 80094d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80094d6:	2300      	movs	r3, #0
 80094d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d101      	bne.n	80094e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80094e0:	2301      	movs	r3, #1
 80094e2:	e11e      	b.n	8009722 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80094e4:	4b91      	ldr	r3, [pc, #580]	; (800972c <HAL_RCC_ClockConfig+0x260>)
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	f003 030f 	and.w	r3, r3, #15
 80094ec:	683a      	ldr	r2, [r7, #0]
 80094ee:	429a      	cmp	r2, r3
 80094f0:	d910      	bls.n	8009514 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094f2:	4b8e      	ldr	r3, [pc, #568]	; (800972c <HAL_RCC_ClockConfig+0x260>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f023 020f 	bic.w	r2, r3, #15
 80094fa:	498c      	ldr	r1, [pc, #560]	; (800972c <HAL_RCC_ClockConfig+0x260>)
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	4313      	orrs	r3, r2
 8009500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009502:	4b8a      	ldr	r3, [pc, #552]	; (800972c <HAL_RCC_ClockConfig+0x260>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f003 030f 	and.w	r3, r3, #15
 800950a:	683a      	ldr	r2, [r7, #0]
 800950c:	429a      	cmp	r2, r3
 800950e:	d001      	beq.n	8009514 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009510:	2301      	movs	r3, #1
 8009512:	e106      	b.n	8009722 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	f003 0301 	and.w	r3, r3, #1
 800951c:	2b00      	cmp	r3, #0
 800951e:	d073      	beq.n	8009608 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	685b      	ldr	r3, [r3, #4]
 8009524:	2b03      	cmp	r3, #3
 8009526:	d129      	bne.n	800957c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009528:	4b81      	ldr	r3, [pc, #516]	; (8009730 <HAL_RCC_ClockConfig+0x264>)
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009530:	2b00      	cmp	r3, #0
 8009532:	d101      	bne.n	8009538 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	e0f4      	b.n	8009722 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8009538:	f000 f972 	bl	8009820 <RCC_GetSysClockFreqFromPLLSource>
 800953c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	4a7c      	ldr	r2, [pc, #496]	; (8009734 <HAL_RCC_ClockConfig+0x268>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d93f      	bls.n	80095c6 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8009546:	4b7a      	ldr	r3, [pc, #488]	; (8009730 <HAL_RCC_ClockConfig+0x264>)
 8009548:	689b      	ldr	r3, [r3, #8]
 800954a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800954e:	2b00      	cmp	r3, #0
 8009550:	d009      	beq.n	8009566 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800955a:	2b00      	cmp	r3, #0
 800955c:	d033      	beq.n	80095c6 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8009562:	2b00      	cmp	r3, #0
 8009564:	d12f      	bne.n	80095c6 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8009566:	4b72      	ldr	r3, [pc, #456]	; (8009730 <HAL_RCC_ClockConfig+0x264>)
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800956e:	4a70      	ldr	r2, [pc, #448]	; (8009730 <HAL_RCC_ClockConfig+0x264>)
 8009570:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009574:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8009576:	2380      	movs	r3, #128	; 0x80
 8009578:	617b      	str	r3, [r7, #20]
 800957a:	e024      	b.n	80095c6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	685b      	ldr	r3, [r3, #4]
 8009580:	2b02      	cmp	r3, #2
 8009582:	d107      	bne.n	8009594 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009584:	4b6a      	ldr	r3, [pc, #424]	; (8009730 <HAL_RCC_ClockConfig+0x264>)
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800958c:	2b00      	cmp	r3, #0
 800958e:	d109      	bne.n	80095a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8009590:	2301      	movs	r3, #1
 8009592:	e0c6      	b.n	8009722 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009594:	4b66      	ldr	r3, [pc, #408]	; (8009730 <HAL_RCC_ClockConfig+0x264>)
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800959c:	2b00      	cmp	r3, #0
 800959e:	d101      	bne.n	80095a4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80095a0:	2301      	movs	r3, #1
 80095a2:	e0be      	b.n	8009722 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80095a4:	f000 f8ce 	bl	8009744 <HAL_RCC_GetSysClockFreq>
 80095a8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80095aa:	693b      	ldr	r3, [r7, #16]
 80095ac:	4a61      	ldr	r2, [pc, #388]	; (8009734 <HAL_RCC_ClockConfig+0x268>)
 80095ae:	4293      	cmp	r3, r2
 80095b0:	d909      	bls.n	80095c6 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80095b2:	4b5f      	ldr	r3, [pc, #380]	; (8009730 <HAL_RCC_ClockConfig+0x264>)
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80095ba:	4a5d      	ldr	r2, [pc, #372]	; (8009730 <HAL_RCC_ClockConfig+0x264>)
 80095bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095c0:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80095c2:	2380      	movs	r3, #128	; 0x80
 80095c4:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80095c6:	4b5a      	ldr	r3, [pc, #360]	; (8009730 <HAL_RCC_ClockConfig+0x264>)
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	f023 0203 	bic.w	r2, r3, #3
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	4957      	ldr	r1, [pc, #348]	; (8009730 <HAL_RCC_ClockConfig+0x264>)
 80095d4:	4313      	orrs	r3, r2
 80095d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80095d8:	f7fc fec4 	bl	8006364 <HAL_GetTick>
 80095dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095de:	e00a      	b.n	80095f6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095e0:	f7fc fec0 	bl	8006364 <HAL_GetTick>
 80095e4:	4602      	mov	r2, r0
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	1ad3      	subs	r3, r2, r3
 80095ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d901      	bls.n	80095f6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80095f2:	2303      	movs	r3, #3
 80095f4:	e095      	b.n	8009722 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095f6:	4b4e      	ldr	r3, [pc, #312]	; (8009730 <HAL_RCC_ClockConfig+0x264>)
 80095f8:	689b      	ldr	r3, [r3, #8]
 80095fa:	f003 020c 	and.w	r2, r3, #12
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	685b      	ldr	r3, [r3, #4]
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	429a      	cmp	r2, r3
 8009606:	d1eb      	bne.n	80095e0 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	681b      	ldr	r3, [r3, #0]
 800960c:	f003 0302 	and.w	r3, r3, #2
 8009610:	2b00      	cmp	r3, #0
 8009612:	d023      	beq.n	800965c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f003 0304 	and.w	r3, r3, #4
 800961c:	2b00      	cmp	r3, #0
 800961e:	d005      	beq.n	800962c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009620:	4b43      	ldr	r3, [pc, #268]	; (8009730 <HAL_RCC_ClockConfig+0x264>)
 8009622:	689b      	ldr	r3, [r3, #8]
 8009624:	4a42      	ldr	r2, [pc, #264]	; (8009730 <HAL_RCC_ClockConfig+0x264>)
 8009626:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800962a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f003 0308 	and.w	r3, r3, #8
 8009634:	2b00      	cmp	r3, #0
 8009636:	d007      	beq.n	8009648 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8009638:	4b3d      	ldr	r3, [pc, #244]	; (8009730 <HAL_RCC_ClockConfig+0x264>)
 800963a:	689b      	ldr	r3, [r3, #8]
 800963c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009640:	4a3b      	ldr	r2, [pc, #236]	; (8009730 <HAL_RCC_ClockConfig+0x264>)
 8009642:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8009646:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009648:	4b39      	ldr	r3, [pc, #228]	; (8009730 <HAL_RCC_ClockConfig+0x264>)
 800964a:	689b      	ldr	r3, [r3, #8]
 800964c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	689b      	ldr	r3, [r3, #8]
 8009654:	4936      	ldr	r1, [pc, #216]	; (8009730 <HAL_RCC_ClockConfig+0x264>)
 8009656:	4313      	orrs	r3, r2
 8009658:	608b      	str	r3, [r1, #8]
 800965a:	e008      	b.n	800966e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800965c:	697b      	ldr	r3, [r7, #20]
 800965e:	2b80      	cmp	r3, #128	; 0x80
 8009660:	d105      	bne.n	800966e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8009662:	4b33      	ldr	r3, [pc, #204]	; (8009730 <HAL_RCC_ClockConfig+0x264>)
 8009664:	689b      	ldr	r3, [r3, #8]
 8009666:	4a32      	ldr	r2, [pc, #200]	; (8009730 <HAL_RCC_ClockConfig+0x264>)
 8009668:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800966c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800966e:	4b2f      	ldr	r3, [pc, #188]	; (800972c <HAL_RCC_ClockConfig+0x260>)
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	f003 030f 	and.w	r3, r3, #15
 8009676:	683a      	ldr	r2, [r7, #0]
 8009678:	429a      	cmp	r2, r3
 800967a:	d21d      	bcs.n	80096b8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800967c:	4b2b      	ldr	r3, [pc, #172]	; (800972c <HAL_RCC_ClockConfig+0x260>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f023 020f 	bic.w	r2, r3, #15
 8009684:	4929      	ldr	r1, [pc, #164]	; (800972c <HAL_RCC_ClockConfig+0x260>)
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	4313      	orrs	r3, r2
 800968a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800968c:	f7fc fe6a 	bl	8006364 <HAL_GetTick>
 8009690:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009692:	e00a      	b.n	80096aa <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009694:	f7fc fe66 	bl	8006364 <HAL_GetTick>
 8009698:	4602      	mov	r2, r0
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	1ad3      	subs	r3, r2, r3
 800969e:	f241 3288 	movw	r2, #5000	; 0x1388
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d901      	bls.n	80096aa <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80096a6:	2303      	movs	r3, #3
 80096a8:	e03b      	b.n	8009722 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80096aa:	4b20      	ldr	r3, [pc, #128]	; (800972c <HAL_RCC_ClockConfig+0x260>)
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f003 030f 	and.w	r3, r3, #15
 80096b2:	683a      	ldr	r2, [r7, #0]
 80096b4:	429a      	cmp	r2, r3
 80096b6:	d1ed      	bne.n	8009694 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	f003 0304 	and.w	r3, r3, #4
 80096c0:	2b00      	cmp	r3, #0
 80096c2:	d008      	beq.n	80096d6 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80096c4:	4b1a      	ldr	r3, [pc, #104]	; (8009730 <HAL_RCC_ClockConfig+0x264>)
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	4917      	ldr	r1, [pc, #92]	; (8009730 <HAL_RCC_ClockConfig+0x264>)
 80096d2:	4313      	orrs	r3, r2
 80096d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f003 0308 	and.w	r3, r3, #8
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d009      	beq.n	80096f6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80096e2:	4b13      	ldr	r3, [pc, #76]	; (8009730 <HAL_RCC_ClockConfig+0x264>)
 80096e4:	689b      	ldr	r3, [r3, #8]
 80096e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	691b      	ldr	r3, [r3, #16]
 80096ee:	00db      	lsls	r3, r3, #3
 80096f0:	490f      	ldr	r1, [pc, #60]	; (8009730 <HAL_RCC_ClockConfig+0x264>)
 80096f2:	4313      	orrs	r3, r2
 80096f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80096f6:	f000 f825 	bl	8009744 <HAL_RCC_GetSysClockFreq>
 80096fa:	4601      	mov	r1, r0
 80096fc:	4b0c      	ldr	r3, [pc, #48]	; (8009730 <HAL_RCC_ClockConfig+0x264>)
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	091b      	lsrs	r3, r3, #4
 8009702:	f003 030f 	and.w	r3, r3, #15
 8009706:	4a0c      	ldr	r2, [pc, #48]	; (8009738 <HAL_RCC_ClockConfig+0x26c>)
 8009708:	5cd3      	ldrb	r3, [r2, r3]
 800970a:	f003 031f 	and.w	r3, r3, #31
 800970e:	fa21 f303 	lsr.w	r3, r1, r3
 8009712:	4a0a      	ldr	r2, [pc, #40]	; (800973c <HAL_RCC_ClockConfig+0x270>)
 8009714:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8009716:	4b0a      	ldr	r3, [pc, #40]	; (8009740 <HAL_RCC_ClockConfig+0x274>)
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	4618      	mov	r0, r3
 800971c:	f7fc fdd6 	bl	80062cc <HAL_InitTick>
 8009720:	4603      	mov	r3, r0
}
 8009722:	4618      	mov	r0, r3
 8009724:	3718      	adds	r7, #24
 8009726:	46bd      	mov	sp, r7
 8009728:	bd80      	pop	{r7, pc}
 800972a:	bf00      	nop
 800972c:	40022000 	.word	0x40022000
 8009730:	40021000 	.word	0x40021000
 8009734:	04c4b400 	.word	0x04c4b400
 8009738:	0800f8c8 	.word	0x0800f8c8
 800973c:	20000c3c 	.word	0x20000c3c
 8009740:	20000c40 	.word	0x20000c40

08009744 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009744:	b480      	push	{r7}
 8009746:	b087      	sub	sp, #28
 8009748:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800974a:	4b2c      	ldr	r3, [pc, #176]	; (80097fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800974c:	689b      	ldr	r3, [r3, #8]
 800974e:	f003 030c 	and.w	r3, r3, #12
 8009752:	2b04      	cmp	r3, #4
 8009754:	d102      	bne.n	800975c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8009756:	4b2a      	ldr	r3, [pc, #168]	; (8009800 <HAL_RCC_GetSysClockFreq+0xbc>)
 8009758:	613b      	str	r3, [r7, #16]
 800975a:	e047      	b.n	80097ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800975c:	4b27      	ldr	r3, [pc, #156]	; (80097fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	f003 030c 	and.w	r3, r3, #12
 8009764:	2b08      	cmp	r3, #8
 8009766:	d102      	bne.n	800976e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8009768:	4b26      	ldr	r3, [pc, #152]	; (8009804 <HAL_RCC_GetSysClockFreq+0xc0>)
 800976a:	613b      	str	r3, [r7, #16]
 800976c:	e03e      	b.n	80097ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800976e:	4b23      	ldr	r3, [pc, #140]	; (80097fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	f003 030c 	and.w	r3, r3, #12
 8009776:	2b0c      	cmp	r3, #12
 8009778:	d136      	bne.n	80097e8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800977a:	4b20      	ldr	r3, [pc, #128]	; (80097fc <HAL_RCC_GetSysClockFreq+0xb8>)
 800977c:	68db      	ldr	r3, [r3, #12]
 800977e:	f003 0303 	and.w	r3, r3, #3
 8009782:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009784:	4b1d      	ldr	r3, [pc, #116]	; (80097fc <HAL_RCC_GetSysClockFreq+0xb8>)
 8009786:	68db      	ldr	r3, [r3, #12]
 8009788:	091b      	lsrs	r3, r3, #4
 800978a:	f003 030f 	and.w	r3, r3, #15
 800978e:	3301      	adds	r3, #1
 8009790:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	2b03      	cmp	r3, #3
 8009796:	d10c      	bne.n	80097b2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009798:	4a1a      	ldr	r2, [pc, #104]	; (8009804 <HAL_RCC_GetSysClockFreq+0xc0>)
 800979a:	68bb      	ldr	r3, [r7, #8]
 800979c:	fbb2 f3f3 	udiv	r3, r2, r3
 80097a0:	4a16      	ldr	r2, [pc, #88]	; (80097fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80097a2:	68d2      	ldr	r2, [r2, #12]
 80097a4:	0a12      	lsrs	r2, r2, #8
 80097a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80097aa:	fb02 f303 	mul.w	r3, r2, r3
 80097ae:	617b      	str	r3, [r7, #20]
      break;
 80097b0:	e00c      	b.n	80097cc <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80097b2:	4a13      	ldr	r2, [pc, #76]	; (8009800 <HAL_RCC_GetSysClockFreq+0xbc>)
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80097ba:	4a10      	ldr	r2, [pc, #64]	; (80097fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80097bc:	68d2      	ldr	r2, [r2, #12]
 80097be:	0a12      	lsrs	r2, r2, #8
 80097c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80097c4:	fb02 f303 	mul.w	r3, r2, r3
 80097c8:	617b      	str	r3, [r7, #20]
      break;
 80097ca:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80097cc:	4b0b      	ldr	r3, [pc, #44]	; (80097fc <HAL_RCC_GetSysClockFreq+0xb8>)
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	0e5b      	lsrs	r3, r3, #25
 80097d2:	f003 0303 	and.w	r3, r3, #3
 80097d6:	3301      	adds	r3, #1
 80097d8:	005b      	lsls	r3, r3, #1
 80097da:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80097e4:	613b      	str	r3, [r7, #16]
 80097e6:	e001      	b.n	80097ec <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80097e8:	2300      	movs	r3, #0
 80097ea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80097ec:	693b      	ldr	r3, [r7, #16]
}
 80097ee:	4618      	mov	r0, r3
 80097f0:	371c      	adds	r7, #28
 80097f2:	46bd      	mov	sp, r7
 80097f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f8:	4770      	bx	lr
 80097fa:	bf00      	nop
 80097fc:	40021000 	.word	0x40021000
 8009800:	00f42400 	.word	0x00f42400
 8009804:	007a1200 	.word	0x007a1200

08009808 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009808:	b480      	push	{r7}
 800980a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800980c:	4b03      	ldr	r3, [pc, #12]	; (800981c <HAL_RCC_GetHCLKFreq+0x14>)
 800980e:	681b      	ldr	r3, [r3, #0]
}
 8009810:	4618      	mov	r0, r3
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	20000c3c 	.word	0x20000c3c

08009820 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8009820:	b480      	push	{r7}
 8009822:	b087      	sub	sp, #28
 8009824:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8009826:	4b1e      	ldr	r3, [pc, #120]	; (80098a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	f003 0303 	and.w	r3, r3, #3
 800982e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8009830:	4b1b      	ldr	r3, [pc, #108]	; (80098a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009832:	68db      	ldr	r3, [r3, #12]
 8009834:	091b      	lsrs	r3, r3, #4
 8009836:	f003 030f 	and.w	r3, r3, #15
 800983a:	3301      	adds	r3, #1
 800983c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800983e:	693b      	ldr	r3, [r7, #16]
 8009840:	2b03      	cmp	r3, #3
 8009842:	d10c      	bne.n	800985e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8009844:	4a17      	ldr	r2, [pc, #92]	; (80098a4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	fbb2 f3f3 	udiv	r3, r2, r3
 800984c:	4a14      	ldr	r2, [pc, #80]	; (80098a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800984e:	68d2      	ldr	r2, [r2, #12]
 8009850:	0a12      	lsrs	r2, r2, #8
 8009852:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009856:	fb02 f303 	mul.w	r3, r2, r3
 800985a:	617b      	str	r3, [r7, #20]
    break;
 800985c:	e00c      	b.n	8009878 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800985e:	4a12      	ldr	r2, [pc, #72]	; (80098a8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	fbb2 f3f3 	udiv	r3, r2, r3
 8009866:	4a0e      	ldr	r2, [pc, #56]	; (80098a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8009868:	68d2      	ldr	r2, [r2, #12]
 800986a:	0a12      	lsrs	r2, r2, #8
 800986c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8009870:	fb02 f303 	mul.w	r3, r2, r3
 8009874:	617b      	str	r3, [r7, #20]
    break;
 8009876:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009878:	4b09      	ldr	r3, [pc, #36]	; (80098a0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800987a:	68db      	ldr	r3, [r3, #12]
 800987c:	0e5b      	lsrs	r3, r3, #25
 800987e:	f003 0303 	and.w	r3, r3, #3
 8009882:	3301      	adds	r3, #1
 8009884:	005b      	lsls	r3, r3, #1
 8009886:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8009888:	697a      	ldr	r2, [r7, #20]
 800988a:	68bb      	ldr	r3, [r7, #8]
 800988c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009890:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8009892:	687b      	ldr	r3, [r7, #4]
}
 8009894:	4618      	mov	r0, r3
 8009896:	371c      	adds	r7, #28
 8009898:	46bd      	mov	sp, r7
 800989a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989e:	4770      	bx	lr
 80098a0:	40021000 	.word	0x40021000
 80098a4:	007a1200 	.word	0x007a1200
 80098a8:	00f42400 	.word	0x00f42400

080098ac <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b086      	sub	sp, #24
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80098b4:	2300      	movs	r3, #0
 80098b6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80098b8:	2300      	movs	r3, #0
 80098ba:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	f000 8098 	beq.w	80099fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80098ca:	2300      	movs	r3, #0
 80098cc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80098ce:	4b43      	ldr	r3, [pc, #268]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80098d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d10d      	bne.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80098da:	4b40      	ldr	r3, [pc, #256]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80098dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098de:	4a3f      	ldr	r2, [pc, #252]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80098e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098e4:	6593      	str	r3, [r2, #88]	; 0x58
 80098e6:	4b3d      	ldr	r3, [pc, #244]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80098e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80098ee:	60bb      	str	r3, [r7, #8]
 80098f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80098f2:	2301      	movs	r3, #1
 80098f4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80098f6:	4b3a      	ldr	r3, [pc, #232]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	4a39      	ldr	r2, [pc, #228]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80098fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009900:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009902:	f7fc fd2f 	bl	8006364 <HAL_GetTick>
 8009906:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009908:	e009      	b.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800990a:	f7fc fd2b 	bl	8006364 <HAL_GetTick>
 800990e:	4602      	mov	r2, r0
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	1ad3      	subs	r3, r2, r3
 8009914:	2b02      	cmp	r3, #2
 8009916:	d902      	bls.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8009918:	2303      	movs	r3, #3
 800991a:	74fb      	strb	r3, [r7, #19]
        break;
 800991c:	e005      	b.n	800992a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800991e:	4b30      	ldr	r3, [pc, #192]	; (80099e0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009926:	2b00      	cmp	r3, #0
 8009928:	d0ef      	beq.n	800990a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800992a:	7cfb      	ldrb	r3, [r7, #19]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d159      	bne.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8009930:	4b2a      	ldr	r3, [pc, #168]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009936:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800993a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d01e      	beq.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009946:	697a      	ldr	r2, [r7, #20]
 8009948:	429a      	cmp	r2, r3
 800994a:	d019      	beq.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800994c:	4b23      	ldr	r3, [pc, #140]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800994e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009956:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009958:	4b20      	ldr	r3, [pc, #128]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800995a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800995e:	4a1f      	ldr	r2, [pc, #124]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009960:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009964:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009968:	4b1c      	ldr	r3, [pc, #112]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800996a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800996e:	4a1b      	ldr	r2, [pc, #108]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8009970:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009974:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009978:	4a18      	ldr	r2, [pc, #96]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800997a:	697b      	ldr	r3, [r7, #20]
 800997c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8009980:	697b      	ldr	r3, [r7, #20]
 8009982:	f003 0301 	and.w	r3, r3, #1
 8009986:	2b00      	cmp	r3, #0
 8009988:	d016      	beq.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800998a:	f7fc fceb 	bl	8006364 <HAL_GetTick>
 800998e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009990:	e00b      	b.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009992:	f7fc fce7 	bl	8006364 <HAL_GetTick>
 8009996:	4602      	mov	r2, r0
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	1ad3      	subs	r3, r2, r3
 800999c:	f241 3288 	movw	r2, #5000	; 0x1388
 80099a0:	4293      	cmp	r3, r2
 80099a2:	d902      	bls.n	80099aa <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80099a4:	2303      	movs	r3, #3
 80099a6:	74fb      	strb	r3, [r7, #19]
            break;
 80099a8:	e006      	b.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80099aa:	4b0c      	ldr	r3, [pc, #48]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099b0:	f003 0302 	and.w	r3, r3, #2
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d0ec      	beq.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80099b8:	7cfb      	ldrb	r3, [r7, #19]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d10b      	bne.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80099be:	4b07      	ldr	r3, [pc, #28]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099c4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099cc:	4903      	ldr	r1, [pc, #12]	; (80099dc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80099ce:	4313      	orrs	r3, r2
 80099d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80099d4:	e008      	b.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80099d6:	7cfb      	ldrb	r3, [r7, #19]
 80099d8:	74bb      	strb	r3, [r7, #18]
 80099da:	e005      	b.n	80099e8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80099dc:	40021000 	.word	0x40021000
 80099e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80099e4:	7cfb      	ldrb	r3, [r7, #19]
 80099e6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80099e8:	7c7b      	ldrb	r3, [r7, #17]
 80099ea:	2b01      	cmp	r3, #1
 80099ec:	d105      	bne.n	80099fa <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80099ee:	4baf      	ldr	r3, [pc, #700]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80099f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80099f2:	4aae      	ldr	r2, [pc, #696]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80099f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099f8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	f003 0301 	and.w	r3, r3, #1
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d00a      	beq.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009a06:	4ba9      	ldr	r3, [pc, #676]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a0c:	f023 0203 	bic.w	r2, r3, #3
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	685b      	ldr	r3, [r3, #4]
 8009a14:	49a5      	ldr	r1, [pc, #660]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a16:	4313      	orrs	r3, r2
 8009a18:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	f003 0302 	and.w	r3, r3, #2
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d00a      	beq.n	8009a3e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009a28:	4ba0      	ldr	r3, [pc, #640]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a2e:	f023 020c 	bic.w	r2, r3, #12
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	689b      	ldr	r3, [r3, #8]
 8009a36:	499d      	ldr	r1, [pc, #628]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a38:	4313      	orrs	r3, r2
 8009a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	f003 0304 	and.w	r3, r3, #4
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d00a      	beq.n	8009a60 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009a4a:	4b98      	ldr	r3, [pc, #608]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a50:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	68db      	ldr	r3, [r3, #12]
 8009a58:	4994      	ldr	r1, [pc, #592]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	f003 0308 	and.w	r3, r3, #8
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00a      	beq.n	8009a82 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009a6c:	4b8f      	ldr	r3, [pc, #572]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a72:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	691b      	ldr	r3, [r3, #16]
 8009a7a:	498c      	ldr	r1, [pc, #560]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a7c:	4313      	orrs	r3, r2
 8009a7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f003 0310 	and.w	r3, r3, #16
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00a      	beq.n	8009aa4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009a8e:	4b87      	ldr	r3, [pc, #540]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009a94:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	695b      	ldr	r3, [r3, #20]
 8009a9c:	4983      	ldr	r1, [pc, #524]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009a9e:	4313      	orrs	r3, r2
 8009aa0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f003 0320 	and.w	r3, r3, #32
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	d00a      	beq.n	8009ac6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009ab0:	4b7e      	ldr	r3, [pc, #504]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ab6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	699b      	ldr	r3, [r3, #24]
 8009abe:	497b      	ldr	r1, [pc, #492]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ac0:	4313      	orrs	r3, r2
 8009ac2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d00a      	beq.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009ad2:	4b76      	ldr	r3, [pc, #472]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ad4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009ad8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	69db      	ldr	r3, [r3, #28]
 8009ae0:	4972      	ldr	r1, [pc, #456]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00a      	beq.n	8009b0a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009af4:	4b6d      	ldr	r3, [pc, #436]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009af6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009afa:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a1b      	ldr	r3, [r3, #32]
 8009b02:	496a      	ldr	r1, [pc, #424]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009b04:	4313      	orrs	r3, r2
 8009b06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00a      	beq.n	8009b2c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009b16:	4b65      	ldr	r3, [pc, #404]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009b18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b1c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b24:	4961      	ldr	r1, [pc, #388]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009b26:	4313      	orrs	r3, r2
 8009b28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d00a      	beq.n	8009b4e <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009b38:	4b5c      	ldr	r3, [pc, #368]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009b3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009b3e:	f023 0203 	bic.w	r2, r3, #3
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009b46:	4959      	ldr	r1, [pc, #356]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009b48:	4313      	orrs	r3, r2
 8009b4a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d00a      	beq.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009b5a:	4b54      	ldr	r3, [pc, #336]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009b5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b68:	4950      	ldr	r1, [pc, #320]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009b6a:	4313      	orrs	r3, r2
 8009b6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b78:	2b00      	cmp	r3, #0
 8009b7a:	d015      	beq.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009b7c:	4b4b      	ldr	r3, [pc, #300]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b8a:	4948      	ldr	r1, [pc, #288]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b9a:	d105      	bne.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009b9c:	4b43      	ldr	r3, [pc, #268]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009b9e:	68db      	ldr	r3, [r3, #12]
 8009ba0:	4a42      	ldr	r2, [pc, #264]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ba2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009ba6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d015      	beq.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009bb4:	4b3d      	ldr	r3, [pc, #244]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bc2:	493a      	ldr	r1, [pc, #232]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009bc4:	4313      	orrs	r3, r2
 8009bc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009bce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009bd2:	d105      	bne.n	8009be0 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009bd4:	4b35      	ldr	r3, [pc, #212]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009bd6:	68db      	ldr	r3, [r3, #12]
 8009bd8:	4a34      	ldr	r2, [pc, #208]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009bda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009bde:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d015      	beq.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009bec:	4b2f      	ldr	r3, [pc, #188]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bf2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bfa:	492c      	ldr	r1, [pc, #176]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009c06:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009c0a:	d105      	bne.n	8009c18 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c0c:	4b27      	ldr	r3, [pc, #156]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c0e:	68db      	ldr	r3, [r3, #12]
 8009c10:	4a26      	ldr	r2, [pc, #152]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c16:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	d015      	beq.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8009c24:	4b21      	ldr	r3, [pc, #132]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c2a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c32:	491e      	ldr	r1, [pc, #120]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c34:	4313      	orrs	r3, r2
 8009c36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c3e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c42:	d105      	bne.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c44:	4b19      	ldr	r3, [pc, #100]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c46:	68db      	ldr	r3, [r3, #12]
 8009c48:	4a18      	ldr	r2, [pc, #96]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c4e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	d015      	beq.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009c5c:	4b13      	ldr	r3, [pc, #76]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c62:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c6a:	4910      	ldr	r1, [pc, #64]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009c7a:	d105      	bne.n	8009c88 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009c7c:	4b0b      	ldr	r3, [pc, #44]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c7e:	68db      	ldr	r3, [r3, #12]
 8009c80:	4a0a      	ldr	r2, [pc, #40]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009c86:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d018      	beq.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8009c94:	4b05      	ldr	r3, [pc, #20]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c9a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009ca2:	4902      	ldr	r1, [pc, #8]	; (8009cac <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8009ca4:	4313      	orrs	r3, r2
 8009ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8009caa:	e001      	b.n	8009cb0 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8009cac:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cb4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009cb8:	d105      	bne.n	8009cc6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009cba:	4b21      	ldr	r3, [pc, #132]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009cbc:	68db      	ldr	r3, [r3, #12]
 8009cbe:	4a20      	ldr	r2, [pc, #128]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009cc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cc4:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	681b      	ldr	r3, [r3, #0]
 8009cca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d015      	beq.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8009cd2:	4b1b      	ldr	r3, [pc, #108]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009cd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009cd8:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ce0:	4917      	ldr	r1, [pc, #92]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009ce2:	4313      	orrs	r3, r2
 8009ce4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009cf0:	d105      	bne.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8009cf2:	4b13      	ldr	r3, [pc, #76]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009cf4:	68db      	ldr	r3, [r3, #12]
 8009cf6:	4a12      	ldr	r2, [pc, #72]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009cf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009cfc:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d015      	beq.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009d0a:	4b0d      	ldr	r3, [pc, #52]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009d0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d18:	4909      	ldr	r1, [pc, #36]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009d24:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009d28:	d105      	bne.n	8009d36 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009d2a:	4b05      	ldr	r3, [pc, #20]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009d2c:	68db      	ldr	r3, [r3, #12]
 8009d2e:	4a04      	ldr	r2, [pc, #16]	; (8009d40 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8009d30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009d34:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8009d36:	7cbb      	ldrb	r3, [r7, #18]
}
 8009d38:	4618      	mov	r0, r3
 8009d3a:	3718      	adds	r7, #24
 8009d3c:	46bd      	mov	sp, r7
 8009d3e:	bd80      	pop	{r7, pc}
 8009d40:	40021000 	.word	0x40021000

08009d44 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009d44:	b580      	push	{r7, lr}
 8009d46:	b084      	sub	sp, #16
 8009d48:	af00      	add	r7, sp, #0
 8009d4a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d101      	bne.n	8009d56 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009d52:	2301      	movs	r3, #1
 8009d54:	e084      	b.n	8009e60 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	2200      	movs	r2, #0
 8009d5a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d106      	bne.n	8009d76 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f7fb fcbd 	bl	80056f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2202      	movs	r2, #2
 8009d7a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	681a      	ldr	r2, [r3, #0]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d8c:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	68db      	ldr	r3, [r3, #12]
 8009d92:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009d96:	d902      	bls.n	8009d9e <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	60fb      	str	r3, [r7, #12]
 8009d9c:	e002      	b.n	8009da4 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009d9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009da2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	68db      	ldr	r3, [r3, #12]
 8009da8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009dac:	d007      	beq.n	8009dbe <HAL_SPI_Init+0x7a>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	68db      	ldr	r3, [r3, #12]
 8009db2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009db6:	d002      	beq.n	8009dbe <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d10b      	bne.n	8009dde <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	68db      	ldr	r3, [r3, #12]
 8009dca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009dce:	d903      	bls.n	8009dd8 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2202      	movs	r2, #2
 8009dd4:	631a      	str	r2, [r3, #48]	; 0x30
 8009dd6:	e002      	b.n	8009dde <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2201      	movs	r2, #1
 8009ddc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	685a      	ldr	r2, [r3, #4]
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	689b      	ldr	r3, [r3, #8]
 8009de6:	431a      	orrs	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	691b      	ldr	r3, [r3, #16]
 8009dec:	431a      	orrs	r2, r3
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	695b      	ldr	r3, [r3, #20]
 8009df2:	431a      	orrs	r2, r3
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	699b      	ldr	r3, [r3, #24]
 8009df8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009dfc:	431a      	orrs	r2, r3
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	69db      	ldr	r3, [r3, #28]
 8009e02:	431a      	orrs	r2, r3
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	6a1b      	ldr	r3, [r3, #32]
 8009e08:	ea42 0103 	orr.w	r1, r2, r3
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	430a      	orrs	r2, r1
 8009e16:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	699b      	ldr	r3, [r3, #24]
 8009e1c:	0c1b      	lsrs	r3, r3, #16
 8009e1e:	f003 0204 	and.w	r2, r3, #4
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e26:	431a      	orrs	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e2c:	431a      	orrs	r2, r3
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	68db      	ldr	r3, [r3, #12]
 8009e32:	ea42 0103 	orr.w	r1, r2, r3
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	681b      	ldr	r3, [r3, #0]
 8009e3a:	68fa      	ldr	r2, [r7, #12]
 8009e3c:	430a      	orrs	r2, r1
 8009e3e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	69da      	ldr	r2, [r3, #28]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009e4e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2200      	movs	r2, #0
 8009e54:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	2201      	movs	r2, #1
 8009e5a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009e5e:	2300      	movs	r3, #0
}
 8009e60:	4618      	mov	r0, r3
 8009e62:	3710      	adds	r7, #16
 8009e64:	46bd      	mov	sp, r7
 8009e66:	bd80      	pop	{r7, pc}

08009e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d101      	bne.n	8009e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e76:	2301      	movs	r3, #1
 8009e78:	e049      	b.n	8009f0e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e80:	b2db      	uxtb	r3, r3
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d106      	bne.n	8009e94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f7fc f916 	bl	80060c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	2202      	movs	r2, #2
 8009e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681a      	ldr	r2, [r3, #0]
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	3304      	adds	r3, #4
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	4610      	mov	r0, r2
 8009ea8:	f000 fc52 	bl	800a750 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2201      	movs	r2, #1
 8009eb0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	2201      	movs	r2, #1
 8009eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	2201      	movs	r2, #1
 8009ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2201      	movs	r2, #1
 8009ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	2201      	movs	r2, #1
 8009ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	2201      	movs	r2, #1
 8009ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	2201      	movs	r2, #1
 8009ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	2201      	movs	r2, #1
 8009ef8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2201      	movs	r2, #1
 8009f00:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2201      	movs	r2, #1
 8009f08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f0c:	2300      	movs	r3, #0
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3708      	adds	r7, #8
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
	...

08009f18 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009f18:	b480      	push	{r7}
 8009f1a:	b085      	sub	sp, #20
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f26:	b2db      	uxtb	r3, r3
 8009f28:	2b01      	cmp	r3, #1
 8009f2a:	d001      	beq.n	8009f30 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009f2c:	2301      	movs	r3, #1
 8009f2e:	e019      	b.n	8009f64 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	2202      	movs	r2, #2
 8009f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	689a      	ldr	r2, [r3, #8]
 8009f3e:	4b0c      	ldr	r3, [pc, #48]	; (8009f70 <HAL_TIM_Base_Start+0x58>)
 8009f40:	4013      	ands	r3, r2
 8009f42:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2b06      	cmp	r3, #6
 8009f48:	d00b      	beq.n	8009f62 <HAL_TIM_Base_Start+0x4a>
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f50:	d007      	beq.n	8009f62 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	f042 0201 	orr.w	r2, r2, #1
 8009f60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009f62:	2300      	movs	r3, #0
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3714      	adds	r7, #20
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6e:	4770      	bx	lr
 8009f70:	00010007 	.word	0x00010007

08009f74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009f74:	b480      	push	{r7}
 8009f76:	b085      	sub	sp, #20
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	2b01      	cmp	r3, #1
 8009f86:	d001      	beq.n	8009f8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	e021      	b.n	8009fd0 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	2202      	movs	r2, #2
 8009f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	68da      	ldr	r2, [r3, #12]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f042 0201 	orr.w	r2, r2, #1
 8009fa2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	689a      	ldr	r2, [r3, #8]
 8009faa:	4b0c      	ldr	r3, [pc, #48]	; (8009fdc <HAL_TIM_Base_Start_IT+0x68>)
 8009fac:	4013      	ands	r3, r2
 8009fae:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	2b06      	cmp	r3, #6
 8009fb4:	d00b      	beq.n	8009fce <HAL_TIM_Base_Start_IT+0x5a>
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fbc:	d007      	beq.n	8009fce <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	681a      	ldr	r2, [r3, #0]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	f042 0201 	orr.w	r2, r2, #1
 8009fcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009fce:	2300      	movs	r3, #0
}
 8009fd0:	4618      	mov	r0, r3
 8009fd2:	3714      	adds	r7, #20
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fda:	4770      	bx	lr
 8009fdc:	00010007 	.word	0x00010007

08009fe0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009fe0:	b480      	push	{r7}
 8009fe2:	b083      	sub	sp, #12
 8009fe4:	af00      	add	r7, sp, #0
 8009fe6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68da      	ldr	r2, [r3, #12]
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f022 0201 	bic.w	r2, r2, #1
 8009ff6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	6a1a      	ldr	r2, [r3, #32]
 8009ffe:	f241 1311 	movw	r3, #4369	; 0x1111
 800a002:	4013      	ands	r3, r2
 800a004:	2b00      	cmp	r3, #0
 800a006:	d10f      	bne.n	800a028 <HAL_TIM_Base_Stop_IT+0x48>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	6a1a      	ldr	r2, [r3, #32]
 800a00e:	f244 4344 	movw	r3, #17476	; 0x4444
 800a012:	4013      	ands	r3, r2
 800a014:	2b00      	cmp	r3, #0
 800a016:	d107      	bne.n	800a028 <HAL_TIM_Base_Stop_IT+0x48>
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	681a      	ldr	r2, [r3, #0]
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	f022 0201 	bic.w	r2, r2, #1
 800a026:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2201      	movs	r2, #1
 800a02c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800a030:	2300      	movs	r3, #0
}
 800a032:	4618      	mov	r0, r3
 800a034:	370c      	adds	r7, #12
 800a036:	46bd      	mov	sp, r7
 800a038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a03c:	4770      	bx	lr

0800a03e <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a03e:	b580      	push	{r7, lr}
 800a040:	b086      	sub	sp, #24
 800a042:	af00      	add	r7, sp, #0
 800a044:	6078      	str	r0, [r7, #4]
 800a046:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d101      	bne.n	800a052 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	e097      	b.n	800a182 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a058:	b2db      	uxtb	r3, r3
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d106      	bne.n	800a06c <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2200      	movs	r2, #0
 800a062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f7fb ffce 	bl	8006008 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	2202      	movs	r2, #2
 800a070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	689b      	ldr	r3, [r3, #8]
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	6812      	ldr	r2, [r2, #0]
 800a07e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800a082:	f023 0307 	bic.w	r3, r3, #7
 800a086:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681a      	ldr	r2, [r3, #0]
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	3304      	adds	r3, #4
 800a090:	4619      	mov	r1, r3
 800a092:	4610      	mov	r0, r2
 800a094:	f000 fb5c 	bl	800a750 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	699b      	ldr	r3, [r3, #24]
 800a0a6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	6a1b      	ldr	r3, [r3, #32]
 800a0ae:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a0b0:	683b      	ldr	r3, [r7, #0]
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	697a      	ldr	r2, [r7, #20]
 800a0b6:	4313      	orrs	r3, r2
 800a0b8:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a0ba:	693b      	ldr	r3, [r7, #16]
 800a0bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0c0:	f023 0303 	bic.w	r3, r3, #3
 800a0c4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	689a      	ldr	r2, [r3, #8]
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	699b      	ldr	r3, [r3, #24]
 800a0ce:	021b      	lsls	r3, r3, #8
 800a0d0:	4313      	orrs	r3, r2
 800a0d2:	693a      	ldr	r2, [r7, #16]
 800a0d4:	4313      	orrs	r3, r2
 800a0d6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a0d8:	693b      	ldr	r3, [r7, #16]
 800a0da:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a0de:	f023 030c 	bic.w	r3, r3, #12
 800a0e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a0ea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a0ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	68da      	ldr	r2, [r3, #12]
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	69db      	ldr	r3, [r3, #28]
 800a0f8:	021b      	lsls	r3, r3, #8
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	693a      	ldr	r2, [r7, #16]
 800a0fe:	4313      	orrs	r3, r2
 800a100:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	691b      	ldr	r3, [r3, #16]
 800a106:	011a      	lsls	r2, r3, #4
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	6a1b      	ldr	r3, [r3, #32]
 800a10c:	031b      	lsls	r3, r3, #12
 800a10e:	4313      	orrs	r3, r2
 800a110:	693a      	ldr	r2, [r7, #16]
 800a112:	4313      	orrs	r3, r2
 800a114:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a11c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a124:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	685a      	ldr	r2, [r3, #4]
 800a12a:	683b      	ldr	r3, [r7, #0]
 800a12c:	695b      	ldr	r3, [r3, #20]
 800a12e:	011b      	lsls	r3, r3, #4
 800a130:	4313      	orrs	r3, r2
 800a132:	68fa      	ldr	r2, [r7, #12]
 800a134:	4313      	orrs	r3, r2
 800a136:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	697a      	ldr	r2, [r7, #20]
 800a13e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	693a      	ldr	r2, [r7, #16]
 800a146:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2201      	movs	r2, #1
 800a154:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	2201      	movs	r2, #1
 800a164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2201      	movs	r2, #1
 800a174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2201      	movs	r2, #1
 800a17c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3718      	adds	r7, #24
 800a186:	46bd      	mov	sp, r7
 800a188:	bd80      	pop	{r7, pc}

0800a18a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a18a:	b580      	push	{r7, lr}
 800a18c:	b082      	sub	sp, #8
 800a18e:	af00      	add	r7, sp, #0
 800a190:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	f003 0302 	and.w	r3, r3, #2
 800a19c:	2b02      	cmp	r3, #2
 800a19e:	d122      	bne.n	800a1e6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	68db      	ldr	r3, [r3, #12]
 800a1a6:	f003 0302 	and.w	r3, r3, #2
 800a1aa:	2b02      	cmp	r3, #2
 800a1ac:	d11b      	bne.n	800a1e6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f06f 0202 	mvn.w	r2, #2
 800a1b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2201      	movs	r2, #1
 800a1bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	699b      	ldr	r3, [r3, #24]
 800a1c4:	f003 0303 	and.w	r3, r3, #3
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d003      	beq.n	800a1d4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a1cc:	6878      	ldr	r0, [r7, #4]
 800a1ce:	f000 faa1 	bl	800a714 <HAL_TIM_IC_CaptureCallback>
 800a1d2:	e005      	b.n	800a1e0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a1d4:	6878      	ldr	r0, [r7, #4]
 800a1d6:	f000 fa93 	bl	800a700 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a1da:	6878      	ldr	r0, [r7, #4]
 800a1dc:	f000 faa4 	bl	800a728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	691b      	ldr	r3, [r3, #16]
 800a1ec:	f003 0304 	and.w	r3, r3, #4
 800a1f0:	2b04      	cmp	r3, #4
 800a1f2:	d122      	bne.n	800a23a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	68db      	ldr	r3, [r3, #12]
 800a1fa:	f003 0304 	and.w	r3, r3, #4
 800a1fe:	2b04      	cmp	r3, #4
 800a200:	d11b      	bne.n	800a23a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f06f 0204 	mvn.w	r2, #4
 800a20a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	2202      	movs	r2, #2
 800a210:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	699b      	ldr	r3, [r3, #24]
 800a218:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d003      	beq.n	800a228 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a220:	6878      	ldr	r0, [r7, #4]
 800a222:	f000 fa77 	bl	800a714 <HAL_TIM_IC_CaptureCallback>
 800a226:	e005      	b.n	800a234 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a228:	6878      	ldr	r0, [r7, #4]
 800a22a:	f000 fa69 	bl	800a700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f000 fa7a 	bl	800a728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	691b      	ldr	r3, [r3, #16]
 800a240:	f003 0308 	and.w	r3, r3, #8
 800a244:	2b08      	cmp	r3, #8
 800a246:	d122      	bne.n	800a28e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68db      	ldr	r3, [r3, #12]
 800a24e:	f003 0308 	and.w	r3, r3, #8
 800a252:	2b08      	cmp	r3, #8
 800a254:	d11b      	bne.n	800a28e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f06f 0208 	mvn.w	r2, #8
 800a25e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2204      	movs	r2, #4
 800a264:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	69db      	ldr	r3, [r3, #28]
 800a26c:	f003 0303 	and.w	r3, r3, #3
 800a270:	2b00      	cmp	r3, #0
 800a272:	d003      	beq.n	800a27c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a274:	6878      	ldr	r0, [r7, #4]
 800a276:	f000 fa4d 	bl	800a714 <HAL_TIM_IC_CaptureCallback>
 800a27a:	e005      	b.n	800a288 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a27c:	6878      	ldr	r0, [r7, #4]
 800a27e:	f000 fa3f 	bl	800a700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a282:	6878      	ldr	r0, [r7, #4]
 800a284:	f000 fa50 	bl	800a728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	f003 0310 	and.w	r3, r3, #16
 800a298:	2b10      	cmp	r3, #16
 800a29a:	d122      	bne.n	800a2e2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a29c:	687b      	ldr	r3, [r7, #4]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	68db      	ldr	r3, [r3, #12]
 800a2a2:	f003 0310 	and.w	r3, r3, #16
 800a2a6:	2b10      	cmp	r3, #16
 800a2a8:	d11b      	bne.n	800a2e2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a2aa:	687b      	ldr	r3, [r7, #4]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f06f 0210 	mvn.w	r2, #16
 800a2b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2208      	movs	r2, #8
 800a2b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	69db      	ldr	r3, [r3, #28]
 800a2c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d003      	beq.n	800a2d0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a2c8:	6878      	ldr	r0, [r7, #4]
 800a2ca:	f000 fa23 	bl	800a714 <HAL_TIM_IC_CaptureCallback>
 800a2ce:	e005      	b.n	800a2dc <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a2d0:	6878      	ldr	r0, [r7, #4]
 800a2d2:	f000 fa15 	bl	800a700 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a2d6:	6878      	ldr	r0, [r7, #4]
 800a2d8:	f000 fa26 	bl	800a728 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	f003 0301 	and.w	r3, r3, #1
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d10e      	bne.n	800a30e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	681b      	ldr	r3, [r3, #0]
 800a2f4:	68db      	ldr	r3, [r3, #12]
 800a2f6:	f003 0301 	and.w	r3, r3, #1
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d107      	bne.n	800a30e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	681b      	ldr	r3, [r3, #0]
 800a302:	f06f 0201 	mvn.w	r2, #1
 800a306:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a308:	6878      	ldr	r0, [r7, #4]
 800a30a:	f000 f9ef 	bl	800a6ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a318:	2b80      	cmp	r3, #128	; 0x80
 800a31a:	d10e      	bne.n	800a33a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	68db      	ldr	r3, [r3, #12]
 800a322:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a326:	2b80      	cmp	r3, #128	; 0x80
 800a328:	d107      	bne.n	800a33a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	681b      	ldr	r3, [r3, #0]
 800a32e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a332:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	f000 fd5d 	bl	800adf4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	691b      	ldr	r3, [r3, #16]
 800a340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a344:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a348:	d10e      	bne.n	800a368 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	68db      	ldr	r3, [r3, #12]
 800a350:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a354:	2b80      	cmp	r3, #128	; 0x80
 800a356:	d107      	bne.n	800a368 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 fd50 	bl	800ae08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a372:	2b40      	cmp	r3, #64	; 0x40
 800a374:	d10e      	bne.n	800a394 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a380:	2b40      	cmp	r3, #64	; 0x40
 800a382:	d107      	bne.n	800a394 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a38c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a38e:	6878      	ldr	r0, [r7, #4]
 800a390:	f000 f9d4 	bl	800a73c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	691b      	ldr	r3, [r3, #16]
 800a39a:	f003 0320 	and.w	r3, r3, #32
 800a39e:	2b20      	cmp	r3, #32
 800a3a0:	d10e      	bne.n	800a3c0 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	68db      	ldr	r3, [r3, #12]
 800a3a8:	f003 0320 	and.w	r3, r3, #32
 800a3ac:	2b20      	cmp	r3, #32
 800a3ae:	d107      	bne.n	800a3c0 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	f06f 0220 	mvn.w	r2, #32
 800a3b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 fd10 	bl	800ade0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	691b      	ldr	r3, [r3, #16]
 800a3c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a3ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3ce:	d10f      	bne.n	800a3f0 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	68db      	ldr	r3, [r3, #12]
 800a3d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a3da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a3de:	d107      	bne.n	800a3f0 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800a3e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 fd16 	bl	800ae1c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	691b      	ldr	r3, [r3, #16]
 800a3f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a3fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a3fe:	d10f      	bne.n	800a420 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	68db      	ldr	r3, [r3, #12]
 800a406:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a40a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a40e:	d107      	bne.n	800a420 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800a418:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800a41a:	6878      	ldr	r0, [r7, #4]
 800a41c:	f000 fd08 	bl	800ae30 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	691b      	ldr	r3, [r3, #16]
 800a426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a42a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a42e:	d10f      	bne.n	800a450 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a43a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a43e:	d107      	bne.n	800a450 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800a448:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	f000 fcfa 	bl	800ae44 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	691b      	ldr	r3, [r3, #16]
 800a456:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a45a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a45e:	d10f      	bne.n	800a480 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	68db      	ldr	r3, [r3, #12]
 800a466:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a46a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a46e:	d107      	bne.n	800a480 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800a478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800a47a:	6878      	ldr	r0, [r7, #4]
 800a47c:	f000 fcec 	bl	800ae58 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a480:	bf00      	nop
 800a482:	3708      	adds	r7, #8
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}

0800a488 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a488:	b580      	push	{r7, lr}
 800a48a:	b084      	sub	sp, #16
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
 800a490:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d101      	bne.n	800a4a0 <HAL_TIM_ConfigClockSource+0x18>
 800a49c:	2302      	movs	r3, #2
 800a49e:	e0d2      	b.n	800a646 <HAL_TIM_ConfigClockSource+0x1be>
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	2202      	movs	r2, #2
 800a4ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	689b      	ldr	r3, [r3, #8]
 800a4b6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800a4be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a4c2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a4ca:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4dc:	f000 80a9 	beq.w	800a632 <HAL_TIM_ConfigClockSource+0x1aa>
 800a4e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4e4:	d81a      	bhi.n	800a51c <HAL_TIM_ConfigClockSource+0x94>
 800a4e6:	2b30      	cmp	r3, #48	; 0x30
 800a4e8:	f000 809a 	beq.w	800a620 <HAL_TIM_ConfigClockSource+0x198>
 800a4ec:	2b30      	cmp	r3, #48	; 0x30
 800a4ee:	d809      	bhi.n	800a504 <HAL_TIM_ConfigClockSource+0x7c>
 800a4f0:	2b10      	cmp	r3, #16
 800a4f2:	f000 8095 	beq.w	800a620 <HAL_TIM_ConfigClockSource+0x198>
 800a4f6:	2b20      	cmp	r3, #32
 800a4f8:	f000 8092 	beq.w	800a620 <HAL_TIM_ConfigClockSource+0x198>
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	f000 808f 	beq.w	800a620 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a502:	e097      	b.n	800a634 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800a504:	2b50      	cmp	r3, #80	; 0x50
 800a506:	d05b      	beq.n	800a5c0 <HAL_TIM_ConfigClockSource+0x138>
 800a508:	2b50      	cmp	r3, #80	; 0x50
 800a50a:	d802      	bhi.n	800a512 <HAL_TIM_ConfigClockSource+0x8a>
 800a50c:	2b40      	cmp	r3, #64	; 0x40
 800a50e:	d077      	beq.n	800a600 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a510:	e090      	b.n	800a634 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800a512:	2b60      	cmp	r3, #96	; 0x60
 800a514:	d064      	beq.n	800a5e0 <HAL_TIM_ConfigClockSource+0x158>
 800a516:	2b70      	cmp	r3, #112	; 0x70
 800a518:	d028      	beq.n	800a56c <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800a51a:	e08b      	b.n	800a634 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800a51c:	4a4c      	ldr	r2, [pc, #304]	; (800a650 <HAL_TIM_ConfigClockSource+0x1c8>)
 800a51e:	4293      	cmp	r3, r2
 800a520:	d07e      	beq.n	800a620 <HAL_TIM_ConfigClockSource+0x198>
 800a522:	4a4b      	ldr	r2, [pc, #300]	; (800a650 <HAL_TIM_ConfigClockSource+0x1c8>)
 800a524:	4293      	cmp	r3, r2
 800a526:	d810      	bhi.n	800a54a <HAL_TIM_ConfigClockSource+0xc2>
 800a528:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a52c:	d078      	beq.n	800a620 <HAL_TIM_ConfigClockSource+0x198>
 800a52e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a532:	d803      	bhi.n	800a53c <HAL_TIM_ConfigClockSource+0xb4>
 800a534:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a538:	d02f      	beq.n	800a59a <HAL_TIM_ConfigClockSource+0x112>
      break;
 800a53a:	e07b      	b.n	800a634 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800a53c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a540:	d06e      	beq.n	800a620 <HAL_TIM_ConfigClockSource+0x198>
 800a542:	4a44      	ldr	r2, [pc, #272]	; (800a654 <HAL_TIM_ConfigClockSource+0x1cc>)
 800a544:	4293      	cmp	r3, r2
 800a546:	d06b      	beq.n	800a620 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800a548:	e074      	b.n	800a634 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800a54a:	4a43      	ldr	r2, [pc, #268]	; (800a658 <HAL_TIM_ConfigClockSource+0x1d0>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d067      	beq.n	800a620 <HAL_TIM_ConfigClockSource+0x198>
 800a550:	4a41      	ldr	r2, [pc, #260]	; (800a658 <HAL_TIM_ConfigClockSource+0x1d0>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d803      	bhi.n	800a55e <HAL_TIM_ConfigClockSource+0xd6>
 800a556:	4a41      	ldr	r2, [pc, #260]	; (800a65c <HAL_TIM_ConfigClockSource+0x1d4>)
 800a558:	4293      	cmp	r3, r2
 800a55a:	d061      	beq.n	800a620 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800a55c:	e06a      	b.n	800a634 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800a55e:	4a40      	ldr	r2, [pc, #256]	; (800a660 <HAL_TIM_ConfigClockSource+0x1d8>)
 800a560:	4293      	cmp	r3, r2
 800a562:	d05d      	beq.n	800a620 <HAL_TIM_ConfigClockSource+0x198>
 800a564:	4a3f      	ldr	r2, [pc, #252]	; (800a664 <HAL_TIM_ConfigClockSource+0x1dc>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d05a      	beq.n	800a620 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800a56a:	e063      	b.n	800a634 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6818      	ldr	r0, [r3, #0]
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	6899      	ldr	r1, [r3, #8]
 800a574:	683b      	ldr	r3, [r7, #0]
 800a576:	685a      	ldr	r2, [r3, #4]
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	68db      	ldr	r3, [r3, #12]
 800a57c:	f000 fac8 	bl	800ab10 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a58e:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	68fa      	ldr	r2, [r7, #12]
 800a596:	609a      	str	r2, [r3, #8]
      break;
 800a598:	e04c      	b.n	800a634 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6818      	ldr	r0, [r3, #0]
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	6899      	ldr	r1, [r3, #8]
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	685a      	ldr	r2, [r3, #4]
 800a5a6:	683b      	ldr	r3, [r7, #0]
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	f000 fab1 	bl	800ab10 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	689a      	ldr	r2, [r3, #8]
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	681b      	ldr	r3, [r3, #0]
 800a5b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a5bc:	609a      	str	r2, [r3, #8]
      break;
 800a5be:	e039      	b.n	800a634 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	6818      	ldr	r0, [r3, #0]
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	6859      	ldr	r1, [r3, #4]
 800a5c8:	683b      	ldr	r3, [r7, #0]
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	f000 fa23 	bl	800aa18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	2150      	movs	r1, #80	; 0x50
 800a5d8:	4618      	mov	r0, r3
 800a5da:	f000 fa7c 	bl	800aad6 <TIM_ITRx_SetConfig>
      break;
 800a5de:	e029      	b.n	800a634 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	6818      	ldr	r0, [r3, #0]
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	6859      	ldr	r1, [r3, #4]
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	68db      	ldr	r3, [r3, #12]
 800a5ec:	461a      	mov	r2, r3
 800a5ee:	f000 fa42 	bl	800aa76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2160      	movs	r1, #96	; 0x60
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	f000 fa6c 	bl	800aad6 <TIM_ITRx_SetConfig>
      break;
 800a5fe:	e019      	b.n	800a634 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	6818      	ldr	r0, [r3, #0]
 800a604:	683b      	ldr	r3, [r7, #0]
 800a606:	6859      	ldr	r1, [r3, #4]
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	68db      	ldr	r3, [r3, #12]
 800a60c:	461a      	mov	r2, r3
 800a60e:	f000 fa03 	bl	800aa18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	2140      	movs	r1, #64	; 0x40
 800a618:	4618      	mov	r0, r3
 800a61a:	f000 fa5c 	bl	800aad6 <TIM_ITRx_SetConfig>
      break;
 800a61e:	e009      	b.n	800a634 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681a      	ldr	r2, [r3, #0]
 800a624:	683b      	ldr	r3, [r7, #0]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	4619      	mov	r1, r3
 800a62a:	4610      	mov	r0, r2
 800a62c:	f000 fa53 	bl	800aad6 <TIM_ITRx_SetConfig>
      break;
 800a630:	e000      	b.n	800a634 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800a632:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2201      	movs	r2, #1
 800a638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	2200      	movs	r2, #0
 800a640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a644:	2300      	movs	r3, #0
}
 800a646:	4618      	mov	r0, r3
 800a648:	3710      	adds	r7, #16
 800a64a:	46bd      	mov	sp, r7
 800a64c:	bd80      	pop	{r7, pc}
 800a64e:	bf00      	nop
 800a650:	00100030 	.word	0x00100030
 800a654:	00100020 	.word	0x00100020
 800a658:	00100050 	.word	0x00100050
 800a65c:	00100040 	.word	0x00100040
 800a660:	00100060 	.word	0x00100060
 800a664:	00100070 	.word	0x00100070

0800a668 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a678:	2b01      	cmp	r3, #1
 800a67a:	d101      	bne.n	800a680 <HAL_TIM_SlaveConfigSynchro+0x18>
 800a67c:	2302      	movs	r3, #2
 800a67e:	e031      	b.n	800a6e4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2201      	movs	r2, #1
 800a684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2202      	movs	r2, #2
 800a68c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800a690:	6839      	ldr	r1, [r7, #0]
 800a692:	6878      	ldr	r0, [r7, #4]
 800a694:	f000 f904 	bl	800a8a0 <TIM_SlaveTimer_SetConfig>
 800a698:	4603      	mov	r3, r0
 800a69a:	2b00      	cmp	r3, #0
 800a69c:	d009      	beq.n	800a6b2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2201      	movs	r2, #1
 800a6a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800a6ae:	2301      	movs	r3, #1
 800a6b0:	e018      	b.n	800a6e4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	68da      	ldr	r2, [r3, #12]
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6c0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	68da      	ldr	r2, [r3, #12]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a6d0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3708      	adds	r7, #8
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}

0800a6ec <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800a6f4:	bf00      	nop
 800a6f6:	370c      	adds	r7, #12
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a700:	b480      	push	{r7}
 800a702:	b083      	sub	sp, #12
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a708:	bf00      	nop
 800a70a:	370c      	adds	r7, #12
 800a70c:	46bd      	mov	sp, r7
 800a70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a712:	4770      	bx	lr

0800a714 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a714:	b480      	push	{r7}
 800a716:	b083      	sub	sp, #12
 800a718:	af00      	add	r7, sp, #0
 800a71a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a71c:	bf00      	nop
 800a71e:	370c      	adds	r7, #12
 800a720:	46bd      	mov	sp, r7
 800a722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a726:	4770      	bx	lr

0800a728 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a728:	b480      	push	{r7}
 800a72a:	b083      	sub	sp, #12
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a730:	bf00      	nop
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b083      	sub	sp, #12
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a744:	bf00      	nop
 800a746:	370c      	adds	r7, #12
 800a748:	46bd      	mov	sp, r7
 800a74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74e:	4770      	bx	lr

0800a750 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a750:	b480      	push	{r7}
 800a752:	b085      	sub	sp, #20
 800a754:	af00      	add	r7, sp, #0
 800a756:	6078      	str	r0, [r7, #4]
 800a758:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	4a46      	ldr	r2, [pc, #280]	; (800a87c <TIM_Base_SetConfig+0x12c>)
 800a764:	4293      	cmp	r3, r2
 800a766:	d017      	beq.n	800a798 <TIM_Base_SetConfig+0x48>
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a76e:	d013      	beq.n	800a798 <TIM_Base_SetConfig+0x48>
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	4a43      	ldr	r2, [pc, #268]	; (800a880 <TIM_Base_SetConfig+0x130>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d00f      	beq.n	800a798 <TIM_Base_SetConfig+0x48>
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	4a42      	ldr	r2, [pc, #264]	; (800a884 <TIM_Base_SetConfig+0x134>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d00b      	beq.n	800a798 <TIM_Base_SetConfig+0x48>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	4a41      	ldr	r2, [pc, #260]	; (800a888 <TIM_Base_SetConfig+0x138>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d007      	beq.n	800a798 <TIM_Base_SetConfig+0x48>
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	4a40      	ldr	r2, [pc, #256]	; (800a88c <TIM_Base_SetConfig+0x13c>)
 800a78c:	4293      	cmp	r3, r2
 800a78e:	d003      	beq.n	800a798 <TIM_Base_SetConfig+0x48>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	4a3f      	ldr	r2, [pc, #252]	; (800a890 <TIM_Base_SetConfig+0x140>)
 800a794:	4293      	cmp	r3, r2
 800a796:	d108      	bne.n	800a7aa <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a79e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7a0:	683b      	ldr	r3, [r7, #0]
 800a7a2:	685b      	ldr	r3, [r3, #4]
 800a7a4:	68fa      	ldr	r2, [r7, #12]
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	4a33      	ldr	r2, [pc, #204]	; (800a87c <TIM_Base_SetConfig+0x12c>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d023      	beq.n	800a7fa <TIM_Base_SetConfig+0xaa>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7b8:	d01f      	beq.n	800a7fa <TIM_Base_SetConfig+0xaa>
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	4a30      	ldr	r2, [pc, #192]	; (800a880 <TIM_Base_SetConfig+0x130>)
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d01b      	beq.n	800a7fa <TIM_Base_SetConfig+0xaa>
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	4a2f      	ldr	r2, [pc, #188]	; (800a884 <TIM_Base_SetConfig+0x134>)
 800a7c6:	4293      	cmp	r3, r2
 800a7c8:	d017      	beq.n	800a7fa <TIM_Base_SetConfig+0xaa>
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	4a2e      	ldr	r2, [pc, #184]	; (800a888 <TIM_Base_SetConfig+0x138>)
 800a7ce:	4293      	cmp	r3, r2
 800a7d0:	d013      	beq.n	800a7fa <TIM_Base_SetConfig+0xaa>
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	4a2d      	ldr	r2, [pc, #180]	; (800a88c <TIM_Base_SetConfig+0x13c>)
 800a7d6:	4293      	cmp	r3, r2
 800a7d8:	d00f      	beq.n	800a7fa <TIM_Base_SetConfig+0xaa>
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4a2d      	ldr	r2, [pc, #180]	; (800a894 <TIM_Base_SetConfig+0x144>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d00b      	beq.n	800a7fa <TIM_Base_SetConfig+0xaa>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	4a2c      	ldr	r2, [pc, #176]	; (800a898 <TIM_Base_SetConfig+0x148>)
 800a7e6:	4293      	cmp	r3, r2
 800a7e8:	d007      	beq.n	800a7fa <TIM_Base_SetConfig+0xaa>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a2b      	ldr	r2, [pc, #172]	; (800a89c <TIM_Base_SetConfig+0x14c>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d003      	beq.n	800a7fa <TIM_Base_SetConfig+0xaa>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a26      	ldr	r2, [pc, #152]	; (800a890 <TIM_Base_SetConfig+0x140>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d108      	bne.n	800a80c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a802:	683b      	ldr	r3, [r7, #0]
 800a804:	68db      	ldr	r3, [r3, #12]
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	4313      	orrs	r3, r2
 800a80a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a812:	683b      	ldr	r3, [r7, #0]
 800a814:	695b      	ldr	r3, [r3, #20]
 800a816:	4313      	orrs	r3, r2
 800a818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	68fa      	ldr	r2, [r7, #12]
 800a81e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	689a      	ldr	r2, [r3, #8]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	681a      	ldr	r2, [r3, #0]
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	4a12      	ldr	r2, [pc, #72]	; (800a87c <TIM_Base_SetConfig+0x12c>)
 800a834:	4293      	cmp	r3, r2
 800a836:	d013      	beq.n	800a860 <TIM_Base_SetConfig+0x110>
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	4a14      	ldr	r2, [pc, #80]	; (800a88c <TIM_Base_SetConfig+0x13c>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d00f      	beq.n	800a860 <TIM_Base_SetConfig+0x110>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	4a14      	ldr	r2, [pc, #80]	; (800a894 <TIM_Base_SetConfig+0x144>)
 800a844:	4293      	cmp	r3, r2
 800a846:	d00b      	beq.n	800a860 <TIM_Base_SetConfig+0x110>
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	4a13      	ldr	r2, [pc, #76]	; (800a898 <TIM_Base_SetConfig+0x148>)
 800a84c:	4293      	cmp	r3, r2
 800a84e:	d007      	beq.n	800a860 <TIM_Base_SetConfig+0x110>
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4a12      	ldr	r2, [pc, #72]	; (800a89c <TIM_Base_SetConfig+0x14c>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d003      	beq.n	800a860 <TIM_Base_SetConfig+0x110>
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	4a0d      	ldr	r2, [pc, #52]	; (800a890 <TIM_Base_SetConfig+0x140>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d103      	bne.n	800a868 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	691a      	ldr	r2, [r3, #16]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2201      	movs	r2, #1
 800a86c:	615a      	str	r2, [r3, #20]
}
 800a86e:	bf00      	nop
 800a870:	3714      	adds	r7, #20
 800a872:	46bd      	mov	sp, r7
 800a874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a878:	4770      	bx	lr
 800a87a:	bf00      	nop
 800a87c:	40012c00 	.word	0x40012c00
 800a880:	40000400 	.word	0x40000400
 800a884:	40000800 	.word	0x40000800
 800a888:	40000c00 	.word	0x40000c00
 800a88c:	40013400 	.word	0x40013400
 800a890:	40015000 	.word	0x40015000
 800a894:	40014000 	.word	0x40014000
 800a898:	40014400 	.word	0x40014400
 800a89c:	40014800 	.word	0x40014800

0800a8a0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b086      	sub	sp, #24
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
 800a8a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	689b      	ldr	r3, [r3, #8]
 800a8b0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a8b2:	697b      	ldr	r3, [r7, #20]
 800a8b4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a8b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8bc:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	697a      	ldr	r2, [r7, #20]
 800a8c4:	4313      	orrs	r3, r2
 800a8c6:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a8ce:	f023 0307 	bic.w	r3, r3, #7
 800a8d2:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	697a      	ldr	r2, [r7, #20]
 800a8da:	4313      	orrs	r3, r2
 800a8dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	697a      	ldr	r2, [r7, #20]
 800a8e4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	2b70      	cmp	r3, #112	; 0x70
 800a8ec:	d034      	beq.n	800a958 <TIM_SlaveTimer_SetConfig+0xb8>
 800a8ee:	2b70      	cmp	r3, #112	; 0x70
 800a8f0:	d811      	bhi.n	800a916 <TIM_SlaveTimer_SetConfig+0x76>
 800a8f2:	2b30      	cmp	r3, #48	; 0x30
 800a8f4:	d07d      	beq.n	800a9f2 <TIM_SlaveTimer_SetConfig+0x152>
 800a8f6:	2b30      	cmp	r3, #48	; 0x30
 800a8f8:	d806      	bhi.n	800a908 <TIM_SlaveTimer_SetConfig+0x68>
 800a8fa:	2b10      	cmp	r3, #16
 800a8fc:	d079      	beq.n	800a9f2 <TIM_SlaveTimer_SetConfig+0x152>
 800a8fe:	2b20      	cmp	r3, #32
 800a900:	d077      	beq.n	800a9f2 <TIM_SlaveTimer_SetConfig+0x152>
 800a902:	2b00      	cmp	r3, #0
 800a904:	d075      	beq.n	800a9f2 <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800a906:	e075      	b.n	800a9f4 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800a908:	2b50      	cmp	r3, #80	; 0x50
 800a90a:	d05e      	beq.n	800a9ca <TIM_SlaveTimer_SetConfig+0x12a>
 800a90c:	2b60      	cmp	r3, #96	; 0x60
 800a90e:	d066      	beq.n	800a9de <TIM_SlaveTimer_SetConfig+0x13e>
 800a910:	2b40      	cmp	r3, #64	; 0x40
 800a912:	d02c      	beq.n	800a96e <TIM_SlaveTimer_SetConfig+0xce>
      break;
 800a914:	e06e      	b.n	800a9f4 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800a916:	4a3a      	ldr	r2, [pc, #232]	; (800aa00 <TIM_SlaveTimer_SetConfig+0x160>)
 800a918:	4293      	cmp	r3, r2
 800a91a:	d06a      	beq.n	800a9f2 <TIM_SlaveTimer_SetConfig+0x152>
 800a91c:	4a38      	ldr	r2, [pc, #224]	; (800aa00 <TIM_SlaveTimer_SetConfig+0x160>)
 800a91e:	4293      	cmp	r3, r2
 800a920:	d809      	bhi.n	800a936 <TIM_SlaveTimer_SetConfig+0x96>
 800a922:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a926:	d064      	beq.n	800a9f2 <TIM_SlaveTimer_SetConfig+0x152>
 800a928:	4a36      	ldr	r2, [pc, #216]	; (800aa04 <TIM_SlaveTimer_SetConfig+0x164>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d061      	beq.n	800a9f2 <TIM_SlaveTimer_SetConfig+0x152>
 800a92e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a932:	d05e      	beq.n	800a9f2 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800a934:	e05e      	b.n	800a9f4 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800a936:	4a34      	ldr	r2, [pc, #208]	; (800aa08 <TIM_SlaveTimer_SetConfig+0x168>)
 800a938:	4293      	cmp	r3, r2
 800a93a:	d05a      	beq.n	800a9f2 <TIM_SlaveTimer_SetConfig+0x152>
 800a93c:	4a32      	ldr	r2, [pc, #200]	; (800aa08 <TIM_SlaveTimer_SetConfig+0x168>)
 800a93e:	4293      	cmp	r3, r2
 800a940:	d803      	bhi.n	800a94a <TIM_SlaveTimer_SetConfig+0xaa>
 800a942:	4a32      	ldr	r2, [pc, #200]	; (800aa0c <TIM_SlaveTimer_SetConfig+0x16c>)
 800a944:	4293      	cmp	r3, r2
 800a946:	d054      	beq.n	800a9f2 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800a948:	e054      	b.n	800a9f4 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800a94a:	4a31      	ldr	r2, [pc, #196]	; (800aa10 <TIM_SlaveTimer_SetConfig+0x170>)
 800a94c:	4293      	cmp	r3, r2
 800a94e:	d050      	beq.n	800a9f2 <TIM_SlaveTimer_SetConfig+0x152>
 800a950:	4a30      	ldr	r2, [pc, #192]	; (800aa14 <TIM_SlaveTimer_SetConfig+0x174>)
 800a952:	4293      	cmp	r3, r2
 800a954:	d04d      	beq.n	800a9f2 <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800a956:	e04d      	b.n	800a9f4 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	6818      	ldr	r0, [r3, #0]
 800a95c:	683b      	ldr	r3, [r7, #0]
 800a95e:	68d9      	ldr	r1, [r3, #12]
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	689a      	ldr	r2, [r3, #8]
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	691b      	ldr	r3, [r3, #16]
 800a968:	f000 f8d2 	bl	800ab10 <TIM_ETR_SetConfig>
      break;
 800a96c:	e042      	b.n	800a9f4 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	2b05      	cmp	r3, #5
 800a974:	d004      	beq.n	800a980 <TIM_SlaveTimer_SetConfig+0xe0>
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800a97e:	d101      	bne.n	800a984 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	e038      	b.n	800a9f6 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	6a1b      	ldr	r3, [r3, #32]
 800a98a:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	6a1a      	ldr	r2, [r3, #32]
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	f022 0201 	bic.w	r2, r2, #1
 800a99a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	699b      	ldr	r3, [r3, #24]
 800a9a2:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9aa:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	691b      	ldr	r3, [r3, #16]
 800a9b0:	011b      	lsls	r3, r3, #4
 800a9b2:	68fa      	ldr	r2, [r7, #12]
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	68fa      	ldr	r2, [r7, #12]
 800a9be:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	681b      	ldr	r3, [r3, #0]
 800a9c4:	693a      	ldr	r2, [r7, #16]
 800a9c6:	621a      	str	r2, [r3, #32]
      break;
 800a9c8:	e014      	b.n	800a9f4 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6818      	ldr	r0, [r3, #0]
 800a9ce:	683b      	ldr	r3, [r7, #0]
 800a9d0:	6899      	ldr	r1, [r3, #8]
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	691b      	ldr	r3, [r3, #16]
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	f000 f81e 	bl	800aa18 <TIM_TI1_ConfigInputStage>
      break;
 800a9dc:	e00a      	b.n	800a9f4 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6818      	ldr	r0, [r3, #0]
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	6899      	ldr	r1, [r3, #8]
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	691b      	ldr	r3, [r3, #16]
 800a9ea:	461a      	mov	r2, r3
 800a9ec:	f000 f843 	bl	800aa76 <TIM_TI2_ConfigInputStage>
      break;
 800a9f0:	e000      	b.n	800a9f4 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 800a9f2:	bf00      	nop
  }
  return HAL_OK;
 800a9f4:	2300      	movs	r3, #0
}
 800a9f6:	4618      	mov	r0, r3
 800a9f8:	3718      	adds	r7, #24
 800a9fa:	46bd      	mov	sp, r7
 800a9fc:	bd80      	pop	{r7, pc}
 800a9fe:	bf00      	nop
 800aa00:	00100030 	.word	0x00100030
 800aa04:	00100020 	.word	0x00100020
 800aa08:	00100050 	.word	0x00100050
 800aa0c:	00100040 	.word	0x00100040
 800aa10:	00100060 	.word	0x00100060
 800aa14:	00100070 	.word	0x00100070

0800aa18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa18:	b480      	push	{r7}
 800aa1a:	b087      	sub	sp, #28
 800aa1c:	af00      	add	r7, sp, #0
 800aa1e:	60f8      	str	r0, [r7, #12]
 800aa20:	60b9      	str	r1, [r7, #8]
 800aa22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	6a1b      	ldr	r3, [r3, #32]
 800aa28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	6a1b      	ldr	r3, [r3, #32]
 800aa2e:	f023 0201 	bic.w	r2, r3, #1
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	699b      	ldr	r3, [r3, #24]
 800aa3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800aa3c:	693b      	ldr	r3, [r7, #16]
 800aa3e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aa42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	011b      	lsls	r3, r3, #4
 800aa48:	693a      	ldr	r2, [r7, #16]
 800aa4a:	4313      	orrs	r3, r2
 800aa4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800aa4e:	697b      	ldr	r3, [r7, #20]
 800aa50:	f023 030a 	bic.w	r3, r3, #10
 800aa54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa56:	697a      	ldr	r2, [r7, #20]
 800aa58:	68bb      	ldr	r3, [r7, #8]
 800aa5a:	4313      	orrs	r3, r2
 800aa5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa5e:	68fb      	ldr	r3, [r7, #12]
 800aa60:	693a      	ldr	r2, [r7, #16]
 800aa62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	697a      	ldr	r2, [r7, #20]
 800aa68:	621a      	str	r2, [r3, #32]
}
 800aa6a:	bf00      	nop
 800aa6c:	371c      	adds	r7, #28
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa74:	4770      	bx	lr

0800aa76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa76:	b480      	push	{r7}
 800aa78:	b087      	sub	sp, #28
 800aa7a:	af00      	add	r7, sp, #0
 800aa7c:	60f8      	str	r0, [r7, #12]
 800aa7e:	60b9      	str	r1, [r7, #8]
 800aa80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	6a1b      	ldr	r3, [r3, #32]
 800aa86:	f023 0210 	bic.w	r2, r3, #16
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	699b      	ldr	r3, [r3, #24]
 800aa92:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa94:	68fb      	ldr	r3, [r7, #12]
 800aa96:	6a1b      	ldr	r3, [r3, #32]
 800aa98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa9a:	697b      	ldr	r3, [r7, #20]
 800aa9c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aaa0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	031b      	lsls	r3, r3, #12
 800aaa6:	697a      	ldr	r2, [r7, #20]
 800aaa8:	4313      	orrs	r3, r2
 800aaaa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aaac:	693b      	ldr	r3, [r7, #16]
 800aaae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aab2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aab4:	68bb      	ldr	r3, [r7, #8]
 800aab6:	011b      	lsls	r3, r3, #4
 800aab8:	693a      	ldr	r2, [r7, #16]
 800aaba:	4313      	orrs	r3, r2
 800aabc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	697a      	ldr	r2, [r7, #20]
 800aac2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	693a      	ldr	r2, [r7, #16]
 800aac8:	621a      	str	r2, [r3, #32]
}
 800aaca:	bf00      	nop
 800aacc:	371c      	adds	r7, #28
 800aace:	46bd      	mov	sp, r7
 800aad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad4:	4770      	bx	lr

0800aad6 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aad6:	b480      	push	{r7}
 800aad8:	b085      	sub	sp, #20
 800aada:	af00      	add	r7, sp, #0
 800aadc:	6078      	str	r0, [r7, #4]
 800aade:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	689b      	ldr	r3, [r3, #8]
 800aae4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800aaec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aaf0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aaf2:	683a      	ldr	r2, [r7, #0]
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	4313      	orrs	r3, r2
 800aaf8:	f043 0307 	orr.w	r3, r3, #7
 800aafc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	68fa      	ldr	r2, [r7, #12]
 800ab02:	609a      	str	r2, [r3, #8]
}
 800ab04:	bf00      	nop
 800ab06:	3714      	adds	r7, #20
 800ab08:	46bd      	mov	sp, r7
 800ab0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0e:	4770      	bx	lr

0800ab10 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ab10:	b480      	push	{r7}
 800ab12:	b087      	sub	sp, #28
 800ab14:	af00      	add	r7, sp, #0
 800ab16:	60f8      	str	r0, [r7, #12]
 800ab18:	60b9      	str	r1, [r7, #8]
 800ab1a:	607a      	str	r2, [r7, #4]
 800ab1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	689b      	ldr	r3, [r3, #8]
 800ab22:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ab24:	697b      	ldr	r3, [r7, #20]
 800ab26:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ab2a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ab2c:	683b      	ldr	r3, [r7, #0]
 800ab2e:	021a      	lsls	r2, r3, #8
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	431a      	orrs	r2, r3
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	4313      	orrs	r3, r2
 800ab38:	697a      	ldr	r2, [r7, #20]
 800ab3a:	4313      	orrs	r3, r2
 800ab3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	697a      	ldr	r2, [r7, #20]
 800ab42:	609a      	str	r2, [r3, #8]
}
 800ab44:	bf00      	nop
 800ab46:	371c      	adds	r7, #28
 800ab48:	46bd      	mov	sp, r7
 800ab4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4e:	4770      	bx	lr

0800ab50 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab50:	b480      	push	{r7}
 800ab52:	b085      	sub	sp, #20
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
 800ab58:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab60:	2b01      	cmp	r3, #1
 800ab62:	d101      	bne.n	800ab68 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab64:	2302      	movs	r3, #2
 800ab66:	e074      	b.n	800ac52 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2202      	movs	r2, #2
 800ab74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	689b      	ldr	r3, [r3, #8]
 800ab86:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	4a34      	ldr	r2, [pc, #208]	; (800ac60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ab8e:	4293      	cmp	r3, r2
 800ab90:	d009      	beq.n	800aba6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4a33      	ldr	r2, [pc, #204]	; (800ac64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ab98:	4293      	cmp	r3, r2
 800ab9a:	d004      	beq.n	800aba6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	4a31      	ldr	r2, [pc, #196]	; (800ac68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800aba2:	4293      	cmp	r3, r2
 800aba4:	d108      	bne.n	800abb8 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800aba6:	68fb      	ldr	r3, [r7, #12]
 800aba8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800abac:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	685b      	ldr	r3, [r3, #4]
 800abb2:	68fa      	ldr	r2, [r7, #12]
 800abb4:	4313      	orrs	r3, r2
 800abb6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800abbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800abc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	681b      	ldr	r3, [r3, #0]
 800abc8:	68fa      	ldr	r2, [r7, #12]
 800abca:	4313      	orrs	r3, r2
 800abcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	68fa      	ldr	r2, [r7, #12]
 800abd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a21      	ldr	r2, [pc, #132]	; (800ac60 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d022      	beq.n	800ac26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abe8:	d01d      	beq.n	800ac26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4a1f      	ldr	r2, [pc, #124]	; (800ac6c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d018      	beq.n	800ac26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a1d      	ldr	r2, [pc, #116]	; (800ac70 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d013      	beq.n	800ac26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4a1c      	ldr	r2, [pc, #112]	; (800ac74 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d00e      	beq.n	800ac26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4a15      	ldr	r2, [pc, #84]	; (800ac64 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d009      	beq.n	800ac26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4a18      	ldr	r2, [pc, #96]	; (800ac78 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d004      	beq.n	800ac26 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a11      	ldr	r2, [pc, #68]	; (800ac68 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d10c      	bne.n	800ac40 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ac26:	68bb      	ldr	r3, [r7, #8]
 800ac28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ac2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ac2e:	683b      	ldr	r3, [r7, #0]
 800ac30:	689b      	ldr	r3, [r3, #8]
 800ac32:	68ba      	ldr	r2, [r7, #8]
 800ac34:	4313      	orrs	r3, r2
 800ac36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	68ba      	ldr	r2, [r7, #8]
 800ac3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2201      	movs	r2, #1
 800ac44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2200      	movs	r2, #0
 800ac4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac50:	2300      	movs	r3, #0
}
 800ac52:	4618      	mov	r0, r3
 800ac54:	3714      	adds	r7, #20
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr
 800ac5e:	bf00      	nop
 800ac60:	40012c00 	.word	0x40012c00
 800ac64:	40013400 	.word	0x40013400
 800ac68:	40015000 	.word	0x40015000
 800ac6c:	40000400 	.word	0x40000400
 800ac70:	40000800 	.word	0x40000800
 800ac74:	40000c00 	.word	0x40000c00
 800ac78:	40014000 	.word	0x40014000

0800ac7c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800ac7c:	b480      	push	{r7}
 800ac7e:	b085      	sub	sp, #20
 800ac80:	af00      	add	r7, sp, #0
 800ac82:	6078      	str	r0, [r7, #4]
 800ac84:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800ac86:	2300      	movs	r3, #0
 800ac88:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac90:	2b01      	cmp	r3, #1
 800ac92:	d101      	bne.n	800ac98 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800ac94:	2302      	movs	r3, #2
 800ac96:	e096      	b.n	800adc6 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2201      	movs	r2, #1
 800ac9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	68db      	ldr	r3, [r3, #12]
 800acaa:	4313      	orrs	r3, r2
 800acac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	689b      	ldr	r3, [r3, #8]
 800acb8:	4313      	orrs	r3, r2
 800acba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800acc2:	683b      	ldr	r3, [r7, #0]
 800acc4:	685b      	ldr	r3, [r3, #4]
 800acc6:	4313      	orrs	r3, r2
 800acc8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800acd0:	683b      	ldr	r3, [r7, #0]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4313      	orrs	r3, r2
 800acd6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	691b      	ldr	r3, [r3, #16]
 800ace2:	4313      	orrs	r3, r2
 800ace4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800acec:	683b      	ldr	r3, [r7, #0]
 800acee:	695b      	ldr	r3, [r3, #20]
 800acf0:	4313      	orrs	r3, r2
 800acf2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acfe:	4313      	orrs	r3, r2
 800ad00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800ad08:	683b      	ldr	r3, [r7, #0]
 800ad0a:	699b      	ldr	r3, [r3, #24]
 800ad0c:	041b      	lsls	r3, r3, #16
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	4a2f      	ldr	r2, [pc, #188]	; (800add4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ad18:	4293      	cmp	r3, r2
 800ad1a:	d009      	beq.n	800ad30 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	681b      	ldr	r3, [r3, #0]
 800ad20:	4a2d      	ldr	r2, [pc, #180]	; (800add8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ad22:	4293      	cmp	r3, r2
 800ad24:	d004      	beq.n	800ad30 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	4a2c      	ldr	r2, [pc, #176]	; (800addc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ad2c:	4293      	cmp	r3, r2
 800ad2e:	d106      	bne.n	800ad3e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ad36:	683b      	ldr	r3, [r7, #0]
 800ad38:	69db      	ldr	r3, [r3, #28]
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a24      	ldr	r2, [pc, #144]	; (800add4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d009      	beq.n	800ad5c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a22      	ldr	r2, [pc, #136]	; (800add8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d004      	beq.n	800ad5c <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4a21      	ldr	r2, [pc, #132]	; (800addc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d12b      	bne.n	800adb4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ad66:	051b      	lsls	r3, r3, #20
 800ad68:	4313      	orrs	r3, r2
 800ad6a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	6a1b      	ldr	r3, [r3, #32]
 800ad76:	4313      	orrs	r3, r2
 800ad78:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800ad80:	683b      	ldr	r3, [r7, #0]
 800ad82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad84:	4313      	orrs	r3, r2
 800ad86:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	4a11      	ldr	r2, [pc, #68]	; (800add4 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ad8e:	4293      	cmp	r3, r2
 800ad90:	d009      	beq.n	800ada6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	4a10      	ldr	r2, [pc, #64]	; (800add8 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ad98:	4293      	cmp	r3, r2
 800ad9a:	d004      	beq.n	800ada6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	681b      	ldr	r3, [r3, #0]
 800ada0:	4a0e      	ldr	r2, [pc, #56]	; (800addc <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ada2:	4293      	cmp	r3, r2
 800ada4:	d106      	bne.n	800adb4 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800adb0:	4313      	orrs	r3, r2
 800adb2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	68fa      	ldr	r2, [r7, #12]
 800adba:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	2200      	movs	r2, #0
 800adc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800adc4:	2300      	movs	r3, #0
}
 800adc6:	4618      	mov	r0, r3
 800adc8:	3714      	adds	r7, #20
 800adca:	46bd      	mov	sp, r7
 800adcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800add0:	4770      	bx	lr
 800add2:	bf00      	nop
 800add4:	40012c00 	.word	0x40012c00
 800add8:	40013400 	.word	0x40013400
 800addc:	40015000 	.word	0x40015000

0800ade0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ade0:	b480      	push	{r7}
 800ade2:	b083      	sub	sp, #12
 800ade4:	af00      	add	r7, sp, #0
 800ade6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ade8:	bf00      	nop
 800adea:	370c      	adds	r7, #12
 800adec:	46bd      	mov	sp, r7
 800adee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adf2:	4770      	bx	lr

0800adf4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800adfc:	bf00      	nop
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b083      	sub	sp, #12
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ae10:	bf00      	nop
 800ae12:	370c      	adds	r7, #12
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800ae24:	bf00      	nop
 800ae26:	370c      	adds	r7, #12
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800ae38:	bf00      	nop
 800ae3a:	370c      	adds	r7, #12
 800ae3c:	46bd      	mov	sp, r7
 800ae3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae42:	4770      	bx	lr

0800ae44 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800ae44:	b480      	push	{r7}
 800ae46:	b083      	sub	sp, #12
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800ae4c:	bf00      	nop
 800ae4e:	370c      	adds	r7, #12
 800ae50:	46bd      	mov	sp, r7
 800ae52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae56:	4770      	bx	lr

0800ae58 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800ae58:	b480      	push	{r7}
 800ae5a:	b083      	sub	sp, #12
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800ae60:	bf00      	nop
 800ae62:	370c      	adds	r7, #12
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <LL_EXTI_EnableIT_0_31>:
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800ae74:	4b05      	ldr	r3, [pc, #20]	; (800ae8c <LL_EXTI_EnableIT_0_31+0x20>)
 800ae76:	681a      	ldr	r2, [r3, #0]
 800ae78:	4904      	ldr	r1, [pc, #16]	; (800ae8c <LL_EXTI_EnableIT_0_31+0x20>)
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	4313      	orrs	r3, r2
 800ae7e:	600b      	str	r3, [r1, #0]
}
 800ae80:	bf00      	nop
 800ae82:	370c      	adds	r7, #12
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr
 800ae8c:	40010400 	.word	0x40010400

0800ae90 <LL_EXTI_EnableIT_32_63>:
{
 800ae90:	b480      	push	{r7}
 800ae92:	b083      	sub	sp, #12
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800ae98:	4b05      	ldr	r3, [pc, #20]	; (800aeb0 <LL_EXTI_EnableIT_32_63+0x20>)
 800ae9a:	6a1a      	ldr	r2, [r3, #32]
 800ae9c:	4904      	ldr	r1, [pc, #16]	; (800aeb0 <LL_EXTI_EnableIT_32_63+0x20>)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	4313      	orrs	r3, r2
 800aea2:	620b      	str	r3, [r1, #32]
}
 800aea4:	bf00      	nop
 800aea6:	370c      	adds	r7, #12
 800aea8:	46bd      	mov	sp, r7
 800aeaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeae:	4770      	bx	lr
 800aeb0:	40010400 	.word	0x40010400

0800aeb4 <LL_EXTI_DisableIT_0_31>:
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b083      	sub	sp, #12
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800aebc:	4b06      	ldr	r3, [pc, #24]	; (800aed8 <LL_EXTI_DisableIT_0_31+0x24>)
 800aebe:	681a      	ldr	r2, [r3, #0]
 800aec0:	687b      	ldr	r3, [r7, #4]
 800aec2:	43db      	mvns	r3, r3
 800aec4:	4904      	ldr	r1, [pc, #16]	; (800aed8 <LL_EXTI_DisableIT_0_31+0x24>)
 800aec6:	4013      	ands	r3, r2
 800aec8:	600b      	str	r3, [r1, #0]
}
 800aeca:	bf00      	nop
 800aecc:	370c      	adds	r7, #12
 800aece:	46bd      	mov	sp, r7
 800aed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aed4:	4770      	bx	lr
 800aed6:	bf00      	nop
 800aed8:	40010400 	.word	0x40010400

0800aedc <LL_EXTI_DisableIT_32_63>:
{
 800aedc:	b480      	push	{r7}
 800aede:	b083      	sub	sp, #12
 800aee0:	af00      	add	r7, sp, #0
 800aee2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800aee4:	4b06      	ldr	r3, [pc, #24]	; (800af00 <LL_EXTI_DisableIT_32_63+0x24>)
 800aee6:	6a1a      	ldr	r2, [r3, #32]
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	43db      	mvns	r3, r3
 800aeec:	4904      	ldr	r1, [pc, #16]	; (800af00 <LL_EXTI_DisableIT_32_63+0x24>)
 800aeee:	4013      	ands	r3, r2
 800aef0:	620b      	str	r3, [r1, #32]
}
 800aef2:	bf00      	nop
 800aef4:	370c      	adds	r7, #12
 800aef6:	46bd      	mov	sp, r7
 800aef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefc:	4770      	bx	lr
 800aefe:	bf00      	nop
 800af00:	40010400 	.word	0x40010400

0800af04 <LL_EXTI_EnableEvent_0_31>:
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800af0c:	4b05      	ldr	r3, [pc, #20]	; (800af24 <LL_EXTI_EnableEvent_0_31+0x20>)
 800af0e:	685a      	ldr	r2, [r3, #4]
 800af10:	4904      	ldr	r1, [pc, #16]	; (800af24 <LL_EXTI_EnableEvent_0_31+0x20>)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	4313      	orrs	r3, r2
 800af16:	604b      	str	r3, [r1, #4]
}
 800af18:	bf00      	nop
 800af1a:	370c      	adds	r7, #12
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr
 800af24:	40010400 	.word	0x40010400

0800af28 <LL_EXTI_EnableEvent_32_63>:
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800af30:	4b05      	ldr	r3, [pc, #20]	; (800af48 <LL_EXTI_EnableEvent_32_63+0x20>)
 800af32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af34:	4904      	ldr	r1, [pc, #16]	; (800af48 <LL_EXTI_EnableEvent_32_63+0x20>)
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	4313      	orrs	r3, r2
 800af3a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800af3c:	bf00      	nop
 800af3e:	370c      	adds	r7, #12
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr
 800af48:	40010400 	.word	0x40010400

0800af4c <LL_EXTI_DisableEvent_0_31>:
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800af54:	4b06      	ldr	r3, [pc, #24]	; (800af70 <LL_EXTI_DisableEvent_0_31+0x24>)
 800af56:	685a      	ldr	r2, [r3, #4]
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	43db      	mvns	r3, r3
 800af5c:	4904      	ldr	r1, [pc, #16]	; (800af70 <LL_EXTI_DisableEvent_0_31+0x24>)
 800af5e:	4013      	ands	r3, r2
 800af60:	604b      	str	r3, [r1, #4]
}
 800af62:	bf00      	nop
 800af64:	370c      	adds	r7, #12
 800af66:	46bd      	mov	sp, r7
 800af68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6c:	4770      	bx	lr
 800af6e:	bf00      	nop
 800af70:	40010400 	.word	0x40010400

0800af74 <LL_EXTI_DisableEvent_32_63>:
{
 800af74:	b480      	push	{r7}
 800af76:	b083      	sub	sp, #12
 800af78:	af00      	add	r7, sp, #0
 800af7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800af7c:	4b06      	ldr	r3, [pc, #24]	; (800af98 <LL_EXTI_DisableEvent_32_63+0x24>)
 800af7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	43db      	mvns	r3, r3
 800af84:	4904      	ldr	r1, [pc, #16]	; (800af98 <LL_EXTI_DisableEvent_32_63+0x24>)
 800af86:	4013      	ands	r3, r2
 800af88:	624b      	str	r3, [r1, #36]	; 0x24
}
 800af8a:	bf00      	nop
 800af8c:	370c      	adds	r7, #12
 800af8e:	46bd      	mov	sp, r7
 800af90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af94:	4770      	bx	lr
 800af96:	bf00      	nop
 800af98:	40010400 	.word	0x40010400

0800af9c <LL_EXTI_EnableRisingTrig_0_31>:
{
 800af9c:	b480      	push	{r7}
 800af9e:	b083      	sub	sp, #12
 800afa0:	af00      	add	r7, sp, #0
 800afa2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800afa4:	4b05      	ldr	r3, [pc, #20]	; (800afbc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800afa6:	689a      	ldr	r2, [r3, #8]
 800afa8:	4904      	ldr	r1, [pc, #16]	; (800afbc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	4313      	orrs	r3, r2
 800afae:	608b      	str	r3, [r1, #8]
}
 800afb0:	bf00      	nop
 800afb2:	370c      	adds	r7, #12
 800afb4:	46bd      	mov	sp, r7
 800afb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afba:	4770      	bx	lr
 800afbc:	40010400 	.word	0x40010400

0800afc0 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800afc0:	b480      	push	{r7}
 800afc2:	b083      	sub	sp, #12
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800afc8:	4b05      	ldr	r3, [pc, #20]	; (800afe0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800afca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800afcc:	4904      	ldr	r1, [pc, #16]	; (800afe0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	4313      	orrs	r3, r2
 800afd2:	628b      	str	r3, [r1, #40]	; 0x28
}
 800afd4:	bf00      	nop
 800afd6:	370c      	adds	r7, #12
 800afd8:	46bd      	mov	sp, r7
 800afda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afde:	4770      	bx	lr
 800afe0:	40010400 	.word	0x40010400

0800afe4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800afe4:	b480      	push	{r7}
 800afe6:	b083      	sub	sp, #12
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800afec:	4b06      	ldr	r3, [pc, #24]	; (800b008 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800afee:	689a      	ldr	r2, [r3, #8]
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	43db      	mvns	r3, r3
 800aff4:	4904      	ldr	r1, [pc, #16]	; (800b008 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800aff6:	4013      	ands	r3, r2
 800aff8:	608b      	str	r3, [r1, #8]
}
 800affa:	bf00      	nop
 800affc:	370c      	adds	r7, #12
 800affe:	46bd      	mov	sp, r7
 800b000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b004:	4770      	bx	lr
 800b006:	bf00      	nop
 800b008:	40010400 	.word	0x40010400

0800b00c <LL_EXTI_DisableRisingTrig_32_63>:
{
 800b00c:	b480      	push	{r7}
 800b00e:	b083      	sub	sp, #12
 800b010:	af00      	add	r7, sp, #0
 800b012:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800b014:	4b06      	ldr	r3, [pc, #24]	; (800b030 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800b016:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	43db      	mvns	r3, r3
 800b01c:	4904      	ldr	r1, [pc, #16]	; (800b030 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800b01e:	4013      	ands	r3, r2
 800b020:	628b      	str	r3, [r1, #40]	; 0x28
}
 800b022:	bf00      	nop
 800b024:	370c      	adds	r7, #12
 800b026:	46bd      	mov	sp, r7
 800b028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02c:	4770      	bx	lr
 800b02e:	bf00      	nop
 800b030:	40010400 	.word	0x40010400

0800b034 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800b034:	b480      	push	{r7}
 800b036:	b083      	sub	sp, #12
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800b03c:	4b05      	ldr	r3, [pc, #20]	; (800b054 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800b03e:	68da      	ldr	r2, [r3, #12]
 800b040:	4904      	ldr	r1, [pc, #16]	; (800b054 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	4313      	orrs	r3, r2
 800b046:	60cb      	str	r3, [r1, #12]
}
 800b048:	bf00      	nop
 800b04a:	370c      	adds	r7, #12
 800b04c:	46bd      	mov	sp, r7
 800b04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b052:	4770      	bx	lr
 800b054:	40010400 	.word	0x40010400

0800b058 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800b058:	b480      	push	{r7}
 800b05a:	b083      	sub	sp, #12
 800b05c:	af00      	add	r7, sp, #0
 800b05e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800b060:	4b05      	ldr	r3, [pc, #20]	; (800b078 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800b062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b064:	4904      	ldr	r1, [pc, #16]	; (800b078 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	4313      	orrs	r3, r2
 800b06a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800b06c:	bf00      	nop
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr
 800b078:	40010400 	.word	0x40010400

0800b07c <LL_EXTI_DisableFallingTrig_0_31>:
{
 800b07c:	b480      	push	{r7}
 800b07e:	b083      	sub	sp, #12
 800b080:	af00      	add	r7, sp, #0
 800b082:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800b084:	4b06      	ldr	r3, [pc, #24]	; (800b0a0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800b086:	68da      	ldr	r2, [r3, #12]
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	43db      	mvns	r3, r3
 800b08c:	4904      	ldr	r1, [pc, #16]	; (800b0a0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800b08e:	4013      	ands	r3, r2
 800b090:	60cb      	str	r3, [r1, #12]
}
 800b092:	bf00      	nop
 800b094:	370c      	adds	r7, #12
 800b096:	46bd      	mov	sp, r7
 800b098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09c:	4770      	bx	lr
 800b09e:	bf00      	nop
 800b0a0:	40010400 	.word	0x40010400

0800b0a4 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800b0a4:	b480      	push	{r7}
 800b0a6:	b083      	sub	sp, #12
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800b0ac:	4b06      	ldr	r3, [pc, #24]	; (800b0c8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800b0ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	43db      	mvns	r3, r3
 800b0b4:	4904      	ldr	r1, [pc, #16]	; (800b0c8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800b0b6:	4013      	ands	r3, r2
 800b0b8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800b0ba:	bf00      	nop
 800b0bc:	370c      	adds	r7, #12
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr
 800b0c6:	bf00      	nop
 800b0c8:	40010400 	.word	0x40010400

0800b0cc <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800b0cc:	b580      	push	{r7, lr}
 800b0ce:	b084      	sub	sp, #16
 800b0d0:	af00      	add	r7, sp, #0
 800b0d2:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	7a1b      	ldrb	r3, [r3, #8]
 800b0dc:	2b00      	cmp	r3, #0
 800b0de:	f000 80c8 	beq.w	800b272 <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d05d      	beq.n	800b1a6 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	7a5b      	ldrb	r3, [r3, #9]
 800b0ee:	2b01      	cmp	r3, #1
 800b0f0:	d00e      	beq.n	800b110 <LL_EXTI_Init+0x44>
 800b0f2:	2b02      	cmp	r3, #2
 800b0f4:	d017      	beq.n	800b126 <LL_EXTI_Init+0x5a>
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d120      	bne.n	800b13c <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	4618      	mov	r0, r3
 800b100:	f7ff ff24 	bl	800af4c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	4618      	mov	r0, r3
 800b10a:	f7ff feaf 	bl	800ae6c <LL_EXTI_EnableIT_0_31>
          break;
 800b10e:	e018      	b.n	800b142 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	4618      	mov	r0, r3
 800b116:	f7ff fecd 	bl	800aeb4 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	4618      	mov	r0, r3
 800b120:	f7ff fef0 	bl	800af04 <LL_EXTI_EnableEvent_0_31>
          break;
 800b124:	e00d      	b.n	800b142 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	4618      	mov	r0, r3
 800b12c:	f7ff fe9e 	bl	800ae6c <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	681b      	ldr	r3, [r3, #0]
 800b134:	4618      	mov	r0, r3
 800b136:	f7ff fee5 	bl	800af04 <LL_EXTI_EnableEvent_0_31>
          break;
 800b13a:	e002      	b.n	800b142 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800b13c:	2301      	movs	r3, #1
 800b13e:	60fb      	str	r3, [r7, #12]
          break;
 800b140:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	7a9b      	ldrb	r3, [r3, #10]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d02d      	beq.n	800b1a6 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	7a9b      	ldrb	r3, [r3, #10]
 800b14e:	2b02      	cmp	r3, #2
 800b150:	d00e      	beq.n	800b170 <LL_EXTI_Init+0xa4>
 800b152:	2b03      	cmp	r3, #3
 800b154:	d017      	beq.n	800b186 <LL_EXTI_Init+0xba>
 800b156:	2b01      	cmp	r3, #1
 800b158:	d120      	bne.n	800b19c <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	4618      	mov	r0, r3
 800b160:	f7ff ff8c 	bl	800b07c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4618      	mov	r0, r3
 800b16a:	f7ff ff17 	bl	800af9c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800b16e:	e01b      	b.n	800b1a8 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	681b      	ldr	r3, [r3, #0]
 800b174:	4618      	mov	r0, r3
 800b176:	f7ff ff35 	bl	800afe4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	4618      	mov	r0, r3
 800b180:	f7ff ff58 	bl	800b034 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800b184:	e010      	b.n	800b1a8 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	4618      	mov	r0, r3
 800b18c:	f7ff ff06 	bl	800af9c <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	4618      	mov	r0, r3
 800b196:	f7ff ff4d 	bl	800b034 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800b19a:	e005      	b.n	800b1a8 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	f043 0302 	orr.w	r3, r3, #2
 800b1a2:	60fb      	str	r3, [r7, #12]
            break;
 800b1a4:	e000      	b.n	800b1a8 <LL_EXTI_Init+0xdc>
        }
      }
 800b1a6:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	685b      	ldr	r3, [r3, #4]
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d075      	beq.n	800b29c <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	7a5b      	ldrb	r3, [r3, #9]
 800b1b4:	2b01      	cmp	r3, #1
 800b1b6:	d00e      	beq.n	800b1d6 <LL_EXTI_Init+0x10a>
 800b1b8:	2b02      	cmp	r3, #2
 800b1ba:	d017      	beq.n	800b1ec <LL_EXTI_Init+0x120>
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d120      	bne.n	800b202 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	685b      	ldr	r3, [r3, #4]
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	f7ff fed5 	bl	800af74 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	f7ff fe5e 	bl	800ae90 <LL_EXTI_EnableIT_32_63>
          break;
 800b1d4:	e01a      	b.n	800b20c <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7ff fe7e 	bl	800aedc <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	685b      	ldr	r3, [r3, #4]
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7ff fe9f 	bl	800af28 <LL_EXTI_EnableEvent_32_63>
          break;
 800b1ea:	e00f      	b.n	800b20c <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	685b      	ldr	r3, [r3, #4]
 800b1f0:	4618      	mov	r0, r3
 800b1f2:	f7ff fe4d 	bl	800ae90 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	f7ff fe94 	bl	800af28 <LL_EXTI_EnableEvent_32_63>
          break;
 800b200:	e004      	b.n	800b20c <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	f043 0304 	orr.w	r3, r3, #4
 800b208:	60fb      	str	r3, [r7, #12]
          break;
 800b20a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	7a9b      	ldrb	r3, [r3, #10]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d043      	beq.n	800b29c <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	7a9b      	ldrb	r3, [r3, #10]
 800b218:	2b02      	cmp	r3, #2
 800b21a:	d00e      	beq.n	800b23a <LL_EXTI_Init+0x16e>
 800b21c:	2b03      	cmp	r3, #3
 800b21e:	d017      	beq.n	800b250 <LL_EXTI_Init+0x184>
 800b220:	2b01      	cmp	r3, #1
 800b222:	d120      	bne.n	800b266 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	685b      	ldr	r3, [r3, #4]
 800b228:	4618      	mov	r0, r3
 800b22a:	f7ff ff3b 	bl	800b0a4 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	685b      	ldr	r3, [r3, #4]
 800b232:	4618      	mov	r0, r3
 800b234:	f7ff fec4 	bl	800afc0 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800b238:	e031      	b.n	800b29e <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	685b      	ldr	r3, [r3, #4]
 800b23e:	4618      	mov	r0, r3
 800b240:	f7ff fee4 	bl	800b00c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	4618      	mov	r0, r3
 800b24a:	f7ff ff05 	bl	800b058 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800b24e:	e026      	b.n	800b29e <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	685b      	ldr	r3, [r3, #4]
 800b254:	4618      	mov	r0, r3
 800b256:	f7ff feb3 	bl	800afc0 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	685b      	ldr	r3, [r3, #4]
 800b25e:	4618      	mov	r0, r3
 800b260:	f7ff fefa 	bl	800b058 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800b264:	e01b      	b.n	800b29e <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	f043 0305 	orr.w	r3, r3, #5
 800b26c:	60fb      	str	r3, [r7, #12]
            break;
 800b26e:	bf00      	nop
 800b270:	e015      	b.n	800b29e <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	4618      	mov	r0, r3
 800b278:	f7ff fe1c 	bl	800aeb4 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	4618      	mov	r0, r3
 800b282:	f7ff fe63 	bl	800af4c <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	685b      	ldr	r3, [r3, #4]
 800b28a:	4618      	mov	r0, r3
 800b28c:	f7ff fe26 	bl	800aedc <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	4618      	mov	r0, r3
 800b296:	f7ff fe6d 	bl	800af74 <LL_EXTI_DisableEvent_32_63>
 800b29a:	e000      	b.n	800b29e <LL_EXTI_Init+0x1d2>
      }
 800b29c:	bf00      	nop
  }

  return status;
 800b29e:	68fb      	ldr	r3, [r7, #12]
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3710      	adds	r7, #16
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}

0800b2a8 <LL_GPIO_SetPinMode>:
{
 800b2a8:	b480      	push	{r7}
 800b2aa:	b089      	sub	sp, #36	; 0x24
 800b2ac:	af00      	add	r7, sp, #0
 800b2ae:	60f8      	str	r0, [r7, #12]
 800b2b0:	60b9      	str	r1, [r7, #8]
 800b2b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	681a      	ldr	r2, [r3, #0]
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b2bc:	697b      	ldr	r3, [r7, #20]
 800b2be:	fa93 f3a3 	rbit	r3, r3
 800b2c2:	613b      	str	r3, [r7, #16]
  return result;
 800b2c4:	693b      	ldr	r3, [r7, #16]
 800b2c6:	fab3 f383 	clz	r3, r3
 800b2ca:	b2db      	uxtb	r3, r3
 800b2cc:	005b      	lsls	r3, r3, #1
 800b2ce:	2103      	movs	r1, #3
 800b2d0:	fa01 f303 	lsl.w	r3, r1, r3
 800b2d4:	43db      	mvns	r3, r3
 800b2d6:	401a      	ands	r2, r3
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b2dc:	69fb      	ldr	r3, [r7, #28]
 800b2de:	fa93 f3a3 	rbit	r3, r3
 800b2e2:	61bb      	str	r3, [r7, #24]
  return result;
 800b2e4:	69bb      	ldr	r3, [r7, #24]
 800b2e6:	fab3 f383 	clz	r3, r3
 800b2ea:	b2db      	uxtb	r3, r3
 800b2ec:	005b      	lsls	r3, r3, #1
 800b2ee:	6879      	ldr	r1, [r7, #4]
 800b2f0:	fa01 f303 	lsl.w	r3, r1, r3
 800b2f4:	431a      	orrs	r2, r3
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	601a      	str	r2, [r3, #0]
}
 800b2fa:	bf00      	nop
 800b2fc:	3724      	adds	r7, #36	; 0x24
 800b2fe:	46bd      	mov	sp, r7
 800b300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b304:	4770      	bx	lr

0800b306 <LL_GPIO_SetPinOutputType>:
{
 800b306:	b480      	push	{r7}
 800b308:	b085      	sub	sp, #20
 800b30a:	af00      	add	r7, sp, #0
 800b30c:	60f8      	str	r0, [r7, #12]
 800b30e:	60b9      	str	r1, [r7, #8]
 800b310:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	685a      	ldr	r2, [r3, #4]
 800b316:	68bb      	ldr	r3, [r7, #8]
 800b318:	43db      	mvns	r3, r3
 800b31a:	401a      	ands	r2, r3
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	6879      	ldr	r1, [r7, #4]
 800b320:	fb01 f303 	mul.w	r3, r1, r3
 800b324:	431a      	orrs	r2, r3
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	605a      	str	r2, [r3, #4]
}
 800b32a:	bf00      	nop
 800b32c:	3714      	adds	r7, #20
 800b32e:	46bd      	mov	sp, r7
 800b330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b334:	4770      	bx	lr

0800b336 <LL_GPIO_SetPinSpeed>:
{
 800b336:	b480      	push	{r7}
 800b338:	b089      	sub	sp, #36	; 0x24
 800b33a:	af00      	add	r7, sp, #0
 800b33c:	60f8      	str	r0, [r7, #12]
 800b33e:	60b9      	str	r1, [r7, #8]
 800b340:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800b342:	68fb      	ldr	r3, [r7, #12]
 800b344:	689a      	ldr	r2, [r3, #8]
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b34a:	697b      	ldr	r3, [r7, #20]
 800b34c:	fa93 f3a3 	rbit	r3, r3
 800b350:	613b      	str	r3, [r7, #16]
  return result;
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	fab3 f383 	clz	r3, r3
 800b358:	b2db      	uxtb	r3, r3
 800b35a:	005b      	lsls	r3, r3, #1
 800b35c:	2103      	movs	r1, #3
 800b35e:	fa01 f303 	lsl.w	r3, r1, r3
 800b362:	43db      	mvns	r3, r3
 800b364:	401a      	ands	r2, r3
 800b366:	68bb      	ldr	r3, [r7, #8]
 800b368:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b36a:	69fb      	ldr	r3, [r7, #28]
 800b36c:	fa93 f3a3 	rbit	r3, r3
 800b370:	61bb      	str	r3, [r7, #24]
  return result;
 800b372:	69bb      	ldr	r3, [r7, #24]
 800b374:	fab3 f383 	clz	r3, r3
 800b378:	b2db      	uxtb	r3, r3
 800b37a:	005b      	lsls	r3, r3, #1
 800b37c:	6879      	ldr	r1, [r7, #4]
 800b37e:	fa01 f303 	lsl.w	r3, r1, r3
 800b382:	431a      	orrs	r2, r3
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	609a      	str	r2, [r3, #8]
}
 800b388:	bf00      	nop
 800b38a:	3724      	adds	r7, #36	; 0x24
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <LL_GPIO_SetPinPull>:
{
 800b394:	b480      	push	{r7}
 800b396:	b089      	sub	sp, #36	; 0x24
 800b398:	af00      	add	r7, sp, #0
 800b39a:	60f8      	str	r0, [r7, #12]
 800b39c:	60b9      	str	r1, [r7, #8]
 800b39e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	68da      	ldr	r2, [r3, #12]
 800b3a4:	68bb      	ldr	r3, [r7, #8]
 800b3a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b3a8:	697b      	ldr	r3, [r7, #20]
 800b3aa:	fa93 f3a3 	rbit	r3, r3
 800b3ae:	613b      	str	r3, [r7, #16]
  return result;
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	fab3 f383 	clz	r3, r3
 800b3b6:	b2db      	uxtb	r3, r3
 800b3b8:	005b      	lsls	r3, r3, #1
 800b3ba:	2103      	movs	r1, #3
 800b3bc:	fa01 f303 	lsl.w	r3, r1, r3
 800b3c0:	43db      	mvns	r3, r3
 800b3c2:	401a      	ands	r2, r3
 800b3c4:	68bb      	ldr	r3, [r7, #8]
 800b3c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b3c8:	69fb      	ldr	r3, [r7, #28]
 800b3ca:	fa93 f3a3 	rbit	r3, r3
 800b3ce:	61bb      	str	r3, [r7, #24]
  return result;
 800b3d0:	69bb      	ldr	r3, [r7, #24]
 800b3d2:	fab3 f383 	clz	r3, r3
 800b3d6:	b2db      	uxtb	r3, r3
 800b3d8:	005b      	lsls	r3, r3, #1
 800b3da:	6879      	ldr	r1, [r7, #4]
 800b3dc:	fa01 f303 	lsl.w	r3, r1, r3
 800b3e0:	431a      	orrs	r2, r3
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	60da      	str	r2, [r3, #12]
}
 800b3e6:	bf00      	nop
 800b3e8:	3724      	adds	r7, #36	; 0x24
 800b3ea:	46bd      	mov	sp, r7
 800b3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f0:	4770      	bx	lr

0800b3f2 <LL_GPIO_SetAFPin_0_7>:
{
 800b3f2:	b480      	push	{r7}
 800b3f4:	b089      	sub	sp, #36	; 0x24
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	60f8      	str	r0, [r7, #12]
 800b3fa:	60b9      	str	r1, [r7, #8]
 800b3fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	6a1a      	ldr	r2, [r3, #32]
 800b402:	68bb      	ldr	r3, [r7, #8]
 800b404:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b406:	697b      	ldr	r3, [r7, #20]
 800b408:	fa93 f3a3 	rbit	r3, r3
 800b40c:	613b      	str	r3, [r7, #16]
  return result;
 800b40e:	693b      	ldr	r3, [r7, #16]
 800b410:	fab3 f383 	clz	r3, r3
 800b414:	b2db      	uxtb	r3, r3
 800b416:	009b      	lsls	r3, r3, #2
 800b418:	210f      	movs	r1, #15
 800b41a:	fa01 f303 	lsl.w	r3, r1, r3
 800b41e:	43db      	mvns	r3, r3
 800b420:	401a      	ands	r2, r3
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b426:	69fb      	ldr	r3, [r7, #28]
 800b428:	fa93 f3a3 	rbit	r3, r3
 800b42c:	61bb      	str	r3, [r7, #24]
  return result;
 800b42e:	69bb      	ldr	r3, [r7, #24]
 800b430:	fab3 f383 	clz	r3, r3
 800b434:	b2db      	uxtb	r3, r3
 800b436:	009b      	lsls	r3, r3, #2
 800b438:	6879      	ldr	r1, [r7, #4]
 800b43a:	fa01 f303 	lsl.w	r3, r1, r3
 800b43e:	431a      	orrs	r2, r3
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	621a      	str	r2, [r3, #32]
}
 800b444:	bf00      	nop
 800b446:	3724      	adds	r7, #36	; 0x24
 800b448:	46bd      	mov	sp, r7
 800b44a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44e:	4770      	bx	lr

0800b450 <LL_GPIO_SetAFPin_8_15>:
{
 800b450:	b480      	push	{r7}
 800b452:	b089      	sub	sp, #36	; 0x24
 800b454:	af00      	add	r7, sp, #0
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	60b9      	str	r1, [r7, #8]
 800b45a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b460:	68bb      	ldr	r3, [r7, #8]
 800b462:	0a1b      	lsrs	r3, r3, #8
 800b464:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	fa93 f3a3 	rbit	r3, r3
 800b46c:	613b      	str	r3, [r7, #16]
  return result;
 800b46e:	693b      	ldr	r3, [r7, #16]
 800b470:	fab3 f383 	clz	r3, r3
 800b474:	b2db      	uxtb	r3, r3
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	210f      	movs	r1, #15
 800b47a:	fa01 f303 	lsl.w	r3, r1, r3
 800b47e:	43db      	mvns	r3, r3
 800b480:	401a      	ands	r2, r3
 800b482:	68bb      	ldr	r3, [r7, #8]
 800b484:	0a1b      	lsrs	r3, r3, #8
 800b486:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b488:	69fb      	ldr	r3, [r7, #28]
 800b48a:	fa93 f3a3 	rbit	r3, r3
 800b48e:	61bb      	str	r3, [r7, #24]
  return result;
 800b490:	69bb      	ldr	r3, [r7, #24]
 800b492:	fab3 f383 	clz	r3, r3
 800b496:	b2db      	uxtb	r3, r3
 800b498:	009b      	lsls	r3, r3, #2
 800b49a:	6879      	ldr	r1, [r7, #4]
 800b49c:	fa01 f303 	lsl.w	r3, r1, r3
 800b4a0:	431a      	orrs	r2, r3
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	625a      	str	r2, [r3, #36]	; 0x24
}
 800b4a6:	bf00      	nop
 800b4a8:	3724      	adds	r7, #36	; 0x24
 800b4aa:	46bd      	mov	sp, r7
 800b4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b0:	4770      	bx	lr

0800b4b2 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b086      	sub	sp, #24
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	6078      	str	r0, [r7, #4]
 800b4ba:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800b4bc:	683b      	ldr	r3, [r7, #0]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	fa93 f3a3 	rbit	r3, r3
 800b4c8:	60bb      	str	r3, [r7, #8]
  return result;
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	fab3 f383 	clz	r3, r3
 800b4d0:	b2db      	uxtb	r3, r3
 800b4d2:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b4d4:	e040      	b.n	800b558 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800b4d6:	683b      	ldr	r3, [r7, #0]
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	2101      	movs	r1, #1
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	fa01 f303 	lsl.w	r3, r1, r3
 800b4e2:	4013      	ands	r3, r2
 800b4e4:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	2b00      	cmp	r3, #0
 800b4ea:	d032      	beq.n	800b552 <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800b4ec:	683b      	ldr	r3, [r7, #0]
 800b4ee:	685b      	ldr	r3, [r3, #4]
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	6939      	ldr	r1, [r7, #16]
 800b4f4:	6878      	ldr	r0, [r7, #4]
 800b4f6:	f7ff fed7 	bl	800b2a8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	685b      	ldr	r3, [r3, #4]
 800b4fe:	2b01      	cmp	r3, #1
 800b500:	d003      	beq.n	800b50a <LL_GPIO_Init+0x58>
 800b502:	683b      	ldr	r3, [r7, #0]
 800b504:	685b      	ldr	r3, [r3, #4]
 800b506:	2b02      	cmp	r3, #2
 800b508:	d106      	bne.n	800b518 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	689b      	ldr	r3, [r3, #8]
 800b50e:	461a      	mov	r2, r3
 800b510:	6939      	ldr	r1, [r7, #16]
 800b512:	6878      	ldr	r0, [r7, #4]
 800b514:	f7ff ff0f 	bl	800b336 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800b518:	683b      	ldr	r3, [r7, #0]
 800b51a:	691b      	ldr	r3, [r3, #16]
 800b51c:	461a      	mov	r2, r3
 800b51e:	6939      	ldr	r1, [r7, #16]
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f7ff ff37 	bl	800b394 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800b526:	683b      	ldr	r3, [r7, #0]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	2b02      	cmp	r3, #2
 800b52c:	d111      	bne.n	800b552 <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800b52e:	693b      	ldr	r3, [r7, #16]
 800b530:	2bff      	cmp	r3, #255	; 0xff
 800b532:	d807      	bhi.n	800b544 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	695b      	ldr	r3, [r3, #20]
 800b538:	461a      	mov	r2, r3
 800b53a:	6939      	ldr	r1, [r7, #16]
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f7ff ff58 	bl	800b3f2 <LL_GPIO_SetAFPin_0_7>
 800b542:	e006      	b.n	800b552 <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	695b      	ldr	r3, [r3, #20]
 800b548:	461a      	mov	r2, r3
 800b54a:	6939      	ldr	r1, [r7, #16]
 800b54c:	6878      	ldr	r0, [r7, #4]
 800b54e:	f7ff ff7f 	bl	800b450 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	3301      	adds	r3, #1
 800b556:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	681a      	ldr	r2, [r3, #0]
 800b55c:	697b      	ldr	r3, [r7, #20]
 800b55e:	fa22 f303 	lsr.w	r3, r2, r3
 800b562:	2b00      	cmp	r3, #0
 800b564:	d1b7      	bne.n	800b4d6 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800b566:	683b      	ldr	r3, [r7, #0]
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	2b01      	cmp	r3, #1
 800b56c:	d003      	beq.n	800b576 <LL_GPIO_Init+0xc4>
 800b56e:	683b      	ldr	r3, [r7, #0]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	2b02      	cmp	r3, #2
 800b574:	d107      	bne.n	800b586 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	6819      	ldr	r1, [r3, #0]
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	68db      	ldr	r3, [r3, #12]
 800b57e:	461a      	mov	r2, r3
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f7ff fec0 	bl	800b306 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800b586:	2300      	movs	r3, #0
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3718      	adds	r7, #24
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}

0800b590 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 800b590:	b590      	push	{r4, r7, lr}
 800b592:	b087      	sub	sp, #28
 800b594:	af02      	add	r7, sp, #8
 800b596:	4604      	mov	r4, r0
 800b598:	4608      	mov	r0, r1
 800b59a:	4611      	mov	r1, r2
 800b59c:	461a      	mov	r2, r3
 800b59e:	4623      	mov	r3, r4
 800b5a0:	80fb      	strh	r3, [r7, #6]
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	80bb      	strh	r3, [r7, #4]
 800b5a6:	460b      	mov	r3, r1
 800b5a8:	807b      	strh	r3, [r7, #2]
 800b5aa:	4613      	mov	r3, r2
 800b5ac:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800b5b2:	7bfa      	ldrb	r2, [r7, #15]
 800b5b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b5b8:	429a      	cmp	r2, r3
 800b5ba:	d93a      	bls.n	800b632 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800b5bc:	88ba      	ldrh	r2, [r7, #4]
 800b5be:	7bfb      	ldrb	r3, [r7, #15]
 800b5c0:	441a      	add	r2, r3
 800b5c2:	88b9      	ldrh	r1, [r7, #4]
 800b5c4:	883b      	ldrh	r3, [r7, #0]
 800b5c6:	4419      	add	r1, r3
 800b5c8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ca:	1acb      	subs	r3, r1, r3
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	f000 8090 	beq.w	800b6f2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 800b5d2:	88fa      	ldrh	r2, [r7, #6]
 800b5d4:	7bfb      	ldrb	r3, [r7, #15]
 800b5d6:	441a      	add	r2, r3
 800b5d8:	88f9      	ldrh	r1, [r7, #6]
 800b5da:	887b      	ldrh	r3, [r7, #2]
 800b5dc:	4419      	add	r1, r3
 800b5de:	7bfb      	ldrb	r3, [r7, #15]
 800b5e0:	1acb      	subs	r3, r1, r3
 800b5e2:	429a      	cmp	r2, r3
 800b5e4:	f000 8085 	beq.w	800b6f2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800b5e8:	7bfb      	ldrb	r3, [r7, #15]
 800b5ea:	b29a      	uxth	r2, r3
 800b5ec:	88fb      	ldrh	r3, [r7, #6]
 800b5ee:	4413      	add	r3, r2
 800b5f0:	b298      	uxth	r0, r3
 800b5f2:	7bfb      	ldrb	r3, [r7, #15]
 800b5f4:	b29a      	uxth	r2, r3
 800b5f6:	88bb      	ldrh	r3, [r7, #4]
 800b5f8:	4413      	add	r3, r2
 800b5fa:	b299      	uxth	r1, r3
 800b5fc:	7bfb      	ldrb	r3, [r7, #15]
 800b5fe:	b29b      	uxth	r3, r3
 800b600:	005b      	lsls	r3, r3, #1
 800b602:	b29b      	uxth	r3, r3
 800b604:	887a      	ldrh	r2, [r7, #2]
 800b606:	1ad3      	subs	r3, r2, r3
 800b608:	b29b      	uxth	r3, r3
 800b60a:	3301      	adds	r3, #1
 800b60c:	b29c      	uxth	r4, r3
 800b60e:	7bfb      	ldrb	r3, [r7, #15]
 800b610:	b29b      	uxth	r3, r3
 800b612:	005b      	lsls	r3, r3, #1
 800b614:	b29b      	uxth	r3, r3
 800b616:	883a      	ldrh	r2, [r7, #0]
 800b618:	1ad3      	subs	r3, r2, r3
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	3301      	adds	r3, #1
 800b61e:	b29a      	uxth	r2, r3
 800b620:	2304      	movs	r3, #4
 800b622:	9301      	str	r3, [sp, #4]
 800b624:	8c3b      	ldrh	r3, [r7, #32]
 800b626:	9300      	str	r3, [sp, #0]
 800b628:	4613      	mov	r3, r2
 800b62a:	4622      	mov	r2, r4
 800b62c:	f000 fcd6 	bl	800bfdc <ILI9341_Draw_Rectangle>
				goto finish;
 800b630:	e060      	b.n	800b6f4 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 800b632:	7bfb      	ldrb	r3, [r7, #15]
 800b634:	b29a      	uxth	r2, r3
 800b636:	88fb      	ldrh	r3, [r7, #6]
 800b638:	4413      	add	r3, r2
 800b63a:	b298      	uxth	r0, r3
 800b63c:	7bfb      	ldrb	r3, [r7, #15]
 800b63e:	b29a      	uxth	r2, r3
 800b640:	88bb      	ldrh	r3, [r7, #4]
 800b642:	4413      	add	r3, r2
 800b644:	b299      	uxth	r1, r3
 800b646:	7bfb      	ldrb	r3, [r7, #15]
 800b648:	b29b      	uxth	r3, r3
 800b64a:	005b      	lsls	r3, r3, #1
 800b64c:	b29b      	uxth	r3, r3
 800b64e:	887a      	ldrh	r2, [r7, #2]
 800b650:	1ad3      	subs	r3, r2, r3
 800b652:	b29a      	uxth	r2, r3
 800b654:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b658:	b29b      	uxth	r3, r3
 800b65a:	f000 fa81 	bl	800bb60 <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 800b65e:	7bfb      	ldrb	r3, [r7, #15]
 800b660:	b29a      	uxth	r2, r3
 800b662:	88fb      	ldrh	r3, [r7, #6]
 800b664:	4413      	add	r3, r2
 800b666:	b298      	uxth	r0, r3
										(y + h) - b,
 800b668:	88ba      	ldrh	r2, [r7, #4]
 800b66a:	883b      	ldrh	r3, [r7, #0]
 800b66c:	4413      	add	r3, r2
 800b66e:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800b670:	7bfb      	ldrb	r3, [r7, #15]
 800b672:	b29b      	uxth	r3, r3
 800b674:	1ad3      	subs	r3, r2, r3
 800b676:	b299      	uxth	r1, r3
 800b678:	7bfb      	ldrb	r3, [r7, #15]
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	887a      	ldrh	r2, [r7, #2]
 800b67e:	1ad3      	subs	r3, r2, r3
 800b680:	b29a      	uxth	r2, r3
 800b682:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b686:	b29b      	uxth	r3, r3
 800b688:	f000 fa6a 	bl	800bb60 <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 800b68c:	7bfb      	ldrb	r3, [r7, #15]
 800b68e:	b29a      	uxth	r2, r3
 800b690:	88fb      	ldrh	r3, [r7, #6]
 800b692:	4413      	add	r3, r2
 800b694:	b298      	uxth	r0, r3
 800b696:	7bfb      	ldrb	r3, [r7, #15]
 800b698:	b29a      	uxth	r2, r3
 800b69a:	88bb      	ldrh	r3, [r7, #4]
 800b69c:	4413      	add	r3, r2
 800b69e:	b299      	uxth	r1, r3
 800b6a0:	7bfb      	ldrb	r3, [r7, #15]
 800b6a2:	b29b      	uxth	r3, r3
 800b6a4:	005b      	lsls	r3, r3, #1
 800b6a6:	b29b      	uxth	r3, r3
 800b6a8:	883a      	ldrh	r2, [r7, #0]
 800b6aa:	1ad3      	subs	r3, r2, r3
 800b6ac:	b29a      	uxth	r2, r3
 800b6ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b6b2:	b29b      	uxth	r3, r3
 800b6b4:	f000 fa9c 	bl	800bbf0 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 800b6b8:	88fa      	ldrh	r2, [r7, #6]
 800b6ba:	887b      	ldrh	r3, [r7, #2]
 800b6bc:	4413      	add	r3, r2
 800b6be:	b29a      	uxth	r2, r3
 800b6c0:	7bfb      	ldrb	r3, [r7, #15]
 800b6c2:	b29b      	uxth	r3, r3
 800b6c4:	1ad3      	subs	r3, r2, r3
 800b6c6:	b298      	uxth	r0, r3
 800b6c8:	7bfb      	ldrb	r3, [r7, #15]
 800b6ca:	b29a      	uxth	r2, r3
 800b6cc:	88bb      	ldrh	r3, [r7, #4]
 800b6ce:	4413      	add	r3, r2
 800b6d0:	b299      	uxth	r1, r3
 800b6d2:	7bfb      	ldrb	r3, [r7, #15]
 800b6d4:	b29b      	uxth	r3, r3
 800b6d6:	005b      	lsls	r3, r3, #1
 800b6d8:	b29b      	uxth	r3, r3
 800b6da:	883a      	ldrh	r2, [r7, #0]
 800b6dc:	1ad3      	subs	r3, r2, r3
 800b6de:	b29a      	uxth	r2, r3
 800b6e0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b6e4:	b29b      	uxth	r3, r3
 800b6e6:	f000 fa83 	bl	800bbf0 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800b6ea:	7bfb      	ldrb	r3, [r7, #15]
 800b6ec:	3301      	adds	r3, #1
 800b6ee:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800b6f0:	e75f      	b.n	800b5b2 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800b6f2:	bf00      	nop
	// done
	return;
 800b6f4:	bf00      	nop
}
 800b6f6:	3714      	adds	r7, #20
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd90      	pop	{r4, r7, pc}

0800b6fc <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800b6fc:	b590      	push	{r4, r7, lr}
 800b6fe:	b089      	sub	sp, #36	; 0x24
 800b700:	af02      	add	r7, sp, #8
 800b702:	4604      	mov	r4, r0
 800b704:	4608      	mov	r0, r1
 800b706:	4611      	mov	r1, r2
 800b708:	461a      	mov	r2, r3
 800b70a:	4623      	mov	r3, r4
 800b70c:	71fb      	strb	r3, [r7, #7]
 800b70e:	4603      	mov	r3, r0
 800b710:	80bb      	strh	r3, [r7, #4]
 800b712:	460b      	mov	r3, r1
 800b714:	807b      	strh	r3, [r7, #2]
 800b716:	4613      	mov	r3, r2
 800b718:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800b71a:	79fb      	ldrb	r3, [r7, #7]
 800b71c:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800b71e:	7dfb      	ldrb	r3, [r7, #23]
 800b720:	2b1f      	cmp	r3, #31
 800b722:	d802      	bhi.n	800b72a <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800b724:	2300      	movs	r3, #0
 800b726:	71fb      	strb	r3, [r7, #7]
 800b728:	e002      	b.n	800b730 <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800b72a:	7dfb      	ldrb	r3, [r7, #23]
 800b72c:	3b20      	subs	r3, #32
 800b72e:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800b730:	2300      	movs	r3, #0
 800b732:	753b      	strb	r3, [r7, #20]
 800b734:	e012      	b.n	800b75c <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800b736:	7dfa      	ldrb	r2, [r7, #23]
 800b738:	7d38      	ldrb	r0, [r7, #20]
 800b73a:	7d39      	ldrb	r1, [r7, #20]
 800b73c:	4c48      	ldr	r4, [pc, #288]	; (800b860 <ILI9341_Draw_Char+0x164>)
 800b73e:	4613      	mov	r3, r2
 800b740:	005b      	lsls	r3, r3, #1
 800b742:	4413      	add	r3, r2
 800b744:	005b      	lsls	r3, r3, #1
 800b746:	4423      	add	r3, r4
 800b748:	4403      	add	r3, r0
 800b74a:	781a      	ldrb	r2, [r3, #0]
 800b74c:	f107 0318 	add.w	r3, r7, #24
 800b750:	440b      	add	r3, r1
 800b752:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800b756:	7d3b      	ldrb	r3, [r7, #20]
 800b758:	3301      	adds	r3, #1
 800b75a:	753b      	strb	r3, [r7, #20]
 800b75c:	7d3b      	ldrb	r3, [r7, #20]
 800b75e:	2b05      	cmp	r3, #5
 800b760:	d9e9      	bls.n	800b736 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800b762:	2300      	movs	r3, #0
 800b764:	757b      	strb	r3, [r7, #21]
 800b766:	e074      	b.n	800b852 <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800b768:	2300      	movs	r3, #0
 800b76a:	75bb      	strb	r3, [r7, #22]
 800b76c:	e06b      	b.n	800b846 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800b76e:	7d7b      	ldrb	r3, [r7, #21]
 800b770:	f107 0218 	add.w	r2, r7, #24
 800b774:	4413      	add	r3, r2
 800b776:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800b77a:	461a      	mov	r2, r3
 800b77c:	7dbb      	ldrb	r3, [r7, #22]
 800b77e:	fa42 f303 	asr.w	r3, r2, r3
 800b782:	f003 0301 	and.w	r3, r3, #1
 800b786:	2b00      	cmp	r3, #0
 800b788:	d02d      	beq.n	800b7e6 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800b78a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b78c:	2b01      	cmp	r3, #1
 800b78e:	d10e      	bne.n	800b7ae <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800b790:	7d7b      	ldrb	r3, [r7, #21]
 800b792:	b29a      	uxth	r2, r3
 800b794:	88bb      	ldrh	r3, [r7, #4]
 800b796:	4413      	add	r3, r2
 800b798:	b298      	uxth	r0, r3
 800b79a:	7dbb      	ldrb	r3, [r7, #22]
 800b79c:	b29a      	uxth	r2, r3
 800b79e:	887b      	ldrh	r3, [r7, #2]
 800b7a0:	4413      	add	r3, r2
 800b7a2:	b29b      	uxth	r3, r3
 800b7a4:	883a      	ldrh	r2, [r7, #0]
 800b7a6:	4619      	mov	r1, r3
 800b7a8:	f000 fae0 	bl	800bd6c <ILI9341_Draw_Pixel>
 800b7ac:	e048      	b.n	800b840 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800b7ae:	7d7b      	ldrb	r3, [r7, #21]
 800b7b0:	b29b      	uxth	r3, r3
 800b7b2:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b7b4:	fb12 f303 	smulbb	r3, r2, r3
 800b7b8:	b29a      	uxth	r2, r3
 800b7ba:	88bb      	ldrh	r3, [r7, #4]
 800b7bc:	4413      	add	r3, r2
 800b7be:	b298      	uxth	r0, r3
 800b7c0:	7dbb      	ldrb	r3, [r7, #22]
 800b7c2:	b29b      	uxth	r3, r3
 800b7c4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b7c6:	fb12 f303 	smulbb	r3, r2, r3
 800b7ca:	b29a      	uxth	r2, r3
 800b7cc:	887b      	ldrh	r3, [r7, #2]
 800b7ce:	4413      	add	r3, r2
 800b7d0:	b299      	uxth	r1, r3
 800b7d2:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800b7d4:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	9301      	str	r3, [sp, #4]
 800b7da:	883b      	ldrh	r3, [r7, #0]
 800b7dc:	9300      	str	r3, [sp, #0]
 800b7de:	4623      	mov	r3, r4
 800b7e0:	f000 fbfc 	bl	800bfdc <ILI9341_Draw_Rectangle>
 800b7e4:	e02c      	b.n	800b840 <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800b7e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b7e8:	2b01      	cmp	r3, #1
 800b7ea:	d10e      	bne.n	800b80a <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800b7ec:	7d7b      	ldrb	r3, [r7, #21]
 800b7ee:	b29a      	uxth	r2, r3
 800b7f0:	88bb      	ldrh	r3, [r7, #4]
 800b7f2:	4413      	add	r3, r2
 800b7f4:	b298      	uxth	r0, r3
 800b7f6:	7dbb      	ldrb	r3, [r7, #22]
 800b7f8:	b29a      	uxth	r2, r3
 800b7fa:	887b      	ldrh	r3, [r7, #2]
 800b7fc:	4413      	add	r3, r2
 800b7fe:	b29b      	uxth	r3, r3
 800b800:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800b802:	4619      	mov	r1, r3
 800b804:	f000 fab2 	bl	800bd6c <ILI9341_Draw_Pixel>
 800b808:	e01a      	b.n	800b840 <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800b80a:	7d7b      	ldrb	r3, [r7, #21]
 800b80c:	b29b      	uxth	r3, r3
 800b80e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b810:	fb12 f303 	smulbb	r3, r2, r3
 800b814:	b29a      	uxth	r2, r3
 800b816:	88bb      	ldrh	r3, [r7, #4]
 800b818:	4413      	add	r3, r2
 800b81a:	b298      	uxth	r0, r3
 800b81c:	7dbb      	ldrb	r3, [r7, #22]
 800b81e:	b29b      	uxth	r3, r3
 800b820:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b822:	fb12 f303 	smulbb	r3, r2, r3
 800b826:	b29a      	uxth	r2, r3
 800b828:	887b      	ldrh	r3, [r7, #2]
 800b82a:	4413      	add	r3, r2
 800b82c:	b299      	uxth	r1, r3
 800b82e:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800b830:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b832:	2301      	movs	r3, #1
 800b834:	9301      	str	r3, [sp, #4]
 800b836:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800b838:	9300      	str	r3, [sp, #0]
 800b83a:	4623      	mov	r3, r4
 800b83c:	f000 fbce 	bl	800bfdc <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800b840:	7dbb      	ldrb	r3, [r7, #22]
 800b842:	3301      	adds	r3, #1
 800b844:	75bb      	strb	r3, [r7, #22]
 800b846:	7dbb      	ldrb	r3, [r7, #22]
 800b848:	2b07      	cmp	r3, #7
 800b84a:	d990      	bls.n	800b76e <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800b84c:	7d7b      	ldrb	r3, [r7, #21]
 800b84e:	3301      	adds	r3, #1
 800b850:	757b      	strb	r3, [r7, #21]
 800b852:	7d7b      	ldrb	r3, [r7, #21]
 800b854:	2b05      	cmp	r3, #5
 800b856:	d987      	bls.n	800b768 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800b858:	bf00      	nop
 800b85a:	371c      	adds	r7, #28
 800b85c:	46bd      	mov	sp, r7
 800b85e:	bd90      	pop	{r4, r7, pc}
 800b860:	0800f8d8 	.word	0x0800f8d8

0800b864 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800b864:	b590      	push	{r4, r7, lr}
 800b866:	b087      	sub	sp, #28
 800b868:	af02      	add	r7, sp, #8
 800b86a:	60f8      	str	r0, [r7, #12]
 800b86c:	4608      	mov	r0, r1
 800b86e:	4611      	mov	r1, r2
 800b870:	461a      	mov	r2, r3
 800b872:	4603      	mov	r3, r0
 800b874:	817b      	strh	r3, [r7, #10]
 800b876:	460b      	mov	r3, r1
 800b878:	813b      	strh	r3, [r7, #8]
 800b87a:	4613      	mov	r3, r2
 800b87c:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 800b87e:	e016      	b.n	800b8ae <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800b880:	68fb      	ldr	r3, [r7, #12]
 800b882:	1c5a      	adds	r2, r3, #1
 800b884:	60fa      	str	r2, [r7, #12]
 800b886:	7818      	ldrb	r0, [r3, #0]
 800b888:	88fc      	ldrh	r4, [r7, #6]
 800b88a:	893a      	ldrh	r2, [r7, #8]
 800b88c:	8979      	ldrh	r1, [r7, #10]
 800b88e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800b890:	9301      	str	r3, [sp, #4]
 800b892:	8c3b      	ldrh	r3, [r7, #32]
 800b894:	9300      	str	r3, [sp, #0]
 800b896:	4623      	mov	r3, r4
 800b898:	f7ff ff30 	bl	800b6fc <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800b89c:	8c3b      	ldrh	r3, [r7, #32]
 800b89e:	461a      	mov	r2, r3
 800b8a0:	0052      	lsls	r2, r2, #1
 800b8a2:	4413      	add	r3, r2
 800b8a4:	005b      	lsls	r3, r3, #1
 800b8a6:	b29a      	uxth	r2, r3
 800b8a8:	897b      	ldrh	r3, [r7, #10]
 800b8aa:	4413      	add	r3, r2
 800b8ac:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	781b      	ldrb	r3, [r3, #0]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d1e4      	bne.n	800b880 <ILI9341_Draw_Text+0x1c>
    }


}
 800b8b6:	bf00      	nop
 800b8b8:	3714      	adds	r7, #20
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd90      	pop	{r4, r7, pc}
	...

0800b8c0 <ILI9341_FillScreenGradient>:
		GPIOC->ODR |= CS_Pin;
	}
}

void ILI9341_FillScreenGradient()
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af02      	add	r7, sp, #8
	uint16_t x = 0;
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	80bb      	strh	r3, [r7, #4]
	//ILI9341_Draw_Text("Colour gradient", 10, 10, BLACK, 1, WHITE);
	//ILI9341_Draw_Text("Grayscale", 10, 20, BLACK, 1, WHITE);



	for(uint16_t i = 0; i <= (320); i++)
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	80fb      	strh	r3, [r7, #6]
 800b8ce:	e010      	b.n	800b8f2 <ILI9341_FillScreenGradient+0x32>

		uint16_t RGB_color = Red + Green + Blue;
		ILI9341_Draw_Rectangle(i, x, 1, 240, RGB_color, AREA_CHUNK);
*/

	ILI9341_Draw_Rectangle(i, x, 1, 240, (uint16_t)fade_log_seq_data_table[i], AREA_CHUNK);
 800b8d0:	88fb      	ldrh	r3, [r7, #6]
 800b8d2:	4a0c      	ldr	r2, [pc, #48]	; (800b904 <ILI9341_FillScreenGradient+0x44>)
 800b8d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b8d8:	b29b      	uxth	r3, r3
 800b8da:	88b9      	ldrh	r1, [r7, #4]
 800b8dc:	88f8      	ldrh	r0, [r7, #6]
 800b8de:	2204      	movs	r2, #4
 800b8e0:	9201      	str	r2, [sp, #4]
 800b8e2:	9300      	str	r3, [sp, #0]
 800b8e4:	23f0      	movs	r3, #240	; 0xf0
 800b8e6:	2201      	movs	r2, #1
 800b8e8:	f000 fb78 	bl	800bfdc <ILI9341_Draw_Rectangle>
	for(uint16_t i = 0; i <= (320); i++)
 800b8ec:	88fb      	ldrh	r3, [r7, #6]
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	80fb      	strh	r3, [r7, #6]
 800b8f2:	88fb      	ldrh	r3, [r7, #6]
 800b8f4:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800b8f8:	d9ea      	bls.n	800b8d0 <ILI9341_FillScreenGradient+0x10>

	}
}
 800b8fa:	bf00      	nop
 800b8fc:	3708      	adds	r7, #8
 800b8fe:	46bd      	mov	sp, r7
 800b900:	bd80      	pop	{r7, pc}
 800b902:	bf00      	nop
 800b904:	20000c50 	.word	0x20000c50

0800b908 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800b90c:	f000 fc3a 	bl	800c184 <_LCD_Enable>
	ILI9341_SPI_Init();
 800b910:	f000 f908 	bl	800bb24 <ILI9341_SPI_Init>
	_LCD_Reset();
 800b914:	f000 fc46 	bl	800c1a4 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800b918:	2001      	movs	r0, #1
 800b91a:	f000 fd11 	bl	800c340 <_LCD_SendCommand>
	HAL_Delay(2000);
 800b91e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800b922:	f7fa fd2b 	bl	800637c <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800b926:	20cb      	movs	r0, #203	; 0xcb
 800b928:	f000 fd0a 	bl	800c340 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800b92c:	2039      	movs	r0, #57	; 0x39
 800b92e:	f000 fd39 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800b932:	202c      	movs	r0, #44	; 0x2c
 800b934:	f000 fd36 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x00);
 800b938:	2000      	movs	r0, #0
 800b93a:	f000 fd33 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x34);
 800b93e:	2034      	movs	r0, #52	; 0x34
 800b940:	f000 fd30 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x02);
 800b944:	2002      	movs	r0, #2
 800b946:	f000 fd2d 	bl	800c3a4 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800b94a:	20cf      	movs	r0, #207	; 0xcf
 800b94c:	f000 fcf8 	bl	800c340 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800b950:	2000      	movs	r0, #0
 800b952:	f000 fd27 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800b956:	20c1      	movs	r0, #193	; 0xc1
 800b958:	f000 fd24 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x30);
 800b95c:	2030      	movs	r0, #48	; 0x30
 800b95e:	f000 fd21 	bl	800c3a4 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800b962:	20e8      	movs	r0, #232	; 0xe8
 800b964:	f000 fcec 	bl	800c340 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800b968:	2085      	movs	r0, #133	; 0x85
 800b96a:	f000 fd1b 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x00);
 800b96e:	2000      	movs	r0, #0
 800b970:	f000 fd18 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x78);
 800b974:	2078      	movs	r0, #120	; 0x78
 800b976:	f000 fd15 	bl	800c3a4 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800b97a:	20ea      	movs	r0, #234	; 0xea
 800b97c:	f000 fce0 	bl	800c340 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800b980:	2000      	movs	r0, #0
 800b982:	f000 fd0f 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x00);
 800b986:	2000      	movs	r0, #0
 800b988:	f000 fd0c 	bl	800c3a4 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800b98c:	20ed      	movs	r0, #237	; 0xed
 800b98e:	f000 fcd7 	bl	800c340 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800b992:	2064      	movs	r0, #100	; 0x64
 800b994:	f000 fd06 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x03);
 800b998:	2003      	movs	r0, #3
 800b99a:	f000 fd03 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x12);
 800b99e:	2012      	movs	r0, #18
 800b9a0:	f000 fd00 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x81);
 800b9a4:	2081      	movs	r0, #129	; 0x81
 800b9a6:	f000 fcfd 	bl	800c3a4 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800b9aa:	20f7      	movs	r0, #247	; 0xf7
 800b9ac:	f000 fcc8 	bl	800c340 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800b9b0:	2020      	movs	r0, #32
 800b9b2:	f000 fcf7 	bl	800c3a4 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800b9b6:	20c0      	movs	r0, #192	; 0xc0
 800b9b8:	f000 fcc2 	bl	800c340 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800b9bc:	2023      	movs	r0, #35	; 0x23
 800b9be:	f000 fcf1 	bl	800c3a4 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800b9c2:	20c1      	movs	r0, #193	; 0xc1
 800b9c4:	f000 fcbc 	bl	800c340 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800b9c8:	2010      	movs	r0, #16
 800b9ca:	f000 fceb 	bl	800c3a4 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800b9ce:	20c5      	movs	r0, #197	; 0xc5
 800b9d0:	f000 fcb6 	bl	800c340 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800b9d4:	203e      	movs	r0, #62	; 0x3e
 800b9d6:	f000 fce5 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x28);
 800b9da:	2028      	movs	r0, #40	; 0x28
 800b9dc:	f000 fce2 	bl	800c3a4 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800b9e0:	20c7      	movs	r0, #199	; 0xc7
 800b9e2:	f000 fcad 	bl	800c340 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800b9e6:	2086      	movs	r0, #134	; 0x86
 800b9e8:	f000 fcdc 	bl	800c3a4 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800b9ec:	2036      	movs	r0, #54	; 0x36
 800b9ee:	f000 fca7 	bl	800c340 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800b9f2:	2048      	movs	r0, #72	; 0x48
 800b9f4:	f000 fcd6 	bl	800c3a4 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800b9f8:	203a      	movs	r0, #58	; 0x3a
 800b9fa:	f000 fca1 	bl	800c340 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800b9fe:	2055      	movs	r0, #85	; 0x55
 800ba00:	f000 fcd0 	bl	800c3a4 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800ba04:	20b1      	movs	r0, #177	; 0xb1
 800ba06:	f000 fc9b 	bl	800c340 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800ba0a:	2000      	movs	r0, #0
 800ba0c:	f000 fcca 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x18);
 800ba10:	2018      	movs	r0, #24
 800ba12:	f000 fcc7 	bl	800c3a4 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800ba16:	20b6      	movs	r0, #182	; 0xb6
 800ba18:	f000 fc92 	bl	800c340 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800ba1c:	2008      	movs	r0, #8
 800ba1e:	f000 fcc1 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x82);
 800ba22:	2082      	movs	r0, #130	; 0x82
 800ba24:	f000 fcbe 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x27);
 800ba28:	2027      	movs	r0, #39	; 0x27
 800ba2a:	f000 fcbb 	bl	800c3a4 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800ba2e:	20f2      	movs	r0, #242	; 0xf2
 800ba30:	f000 fc86 	bl	800c340 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800ba34:	2000      	movs	r0, #0
 800ba36:	f000 fcb5 	bl	800c3a4 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800ba3a:	2026      	movs	r0, #38	; 0x26
 800ba3c:	f000 fc80 	bl	800c340 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800ba40:	2001      	movs	r0, #1
 800ba42:	f000 fcaf 	bl	800c3a4 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800ba46:	20e0      	movs	r0, #224	; 0xe0
 800ba48:	f000 fc7a 	bl	800c340 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800ba4c:	200f      	movs	r0, #15
 800ba4e:	f000 fca9 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x31);
 800ba52:	2031      	movs	r0, #49	; 0x31
 800ba54:	f000 fca6 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x2B);
 800ba58:	202b      	movs	r0, #43	; 0x2b
 800ba5a:	f000 fca3 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800ba5e:	200c      	movs	r0, #12
 800ba60:	f000 fca0 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800ba64:	200e      	movs	r0, #14
 800ba66:	f000 fc9d 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x08);
 800ba6a:	2008      	movs	r0, #8
 800ba6c:	f000 fc9a 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x4E);
 800ba70:	204e      	movs	r0, #78	; 0x4e
 800ba72:	f000 fc97 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0xF1);
 800ba76:	20f1      	movs	r0, #241	; 0xf1
 800ba78:	f000 fc94 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x37);
 800ba7c:	2037      	movs	r0, #55	; 0x37
 800ba7e:	f000 fc91 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x07);
 800ba82:	2007      	movs	r0, #7
 800ba84:	f000 fc8e 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x10);
 800ba88:	2010      	movs	r0, #16
 800ba8a:	f000 fc8b 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x03);
 800ba8e:	2003      	movs	r0, #3
 800ba90:	f000 fc88 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800ba94:	200e      	movs	r0, #14
 800ba96:	f000 fc85 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x09);
 800ba9a:	2009      	movs	r0, #9
 800ba9c:	f000 fc82 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x00);
 800baa0:	2000      	movs	r0, #0
 800baa2:	f000 fc7f 	bl	800c3a4 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800baa6:	20e1      	movs	r0, #225	; 0xe1
 800baa8:	f000 fc4a 	bl	800c340 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800baac:	2000      	movs	r0, #0
 800baae:	f000 fc79 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800bab2:	200e      	movs	r0, #14
 800bab4:	f000 fc76 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x14);
 800bab8:	2014      	movs	r0, #20
 800baba:	f000 fc73 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x03);
 800babe:	2003      	movs	r0, #3
 800bac0:	f000 fc70 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x11);
 800bac4:	2011      	movs	r0, #17
 800bac6:	f000 fc6d 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x07);
 800baca:	2007      	movs	r0, #7
 800bacc:	f000 fc6a 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x31);
 800bad0:	2031      	movs	r0, #49	; 0x31
 800bad2:	f000 fc67 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800bad6:	20c1      	movs	r0, #193	; 0xc1
 800bad8:	f000 fc64 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x48);
 800badc:	2048      	movs	r0, #72	; 0x48
 800bade:	f000 fc61 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x08);
 800bae2:	2008      	movs	r0, #8
 800bae4:	f000 fc5e 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800bae8:	200f      	movs	r0, #15
 800baea:	f000 fc5b 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800baee:	200c      	movs	r0, #12
 800baf0:	f000 fc58 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x31);
 800baf4:	2031      	movs	r0, #49	; 0x31
 800baf6:	f000 fc55 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x36);
 800bafa:	2036      	movs	r0, #54	; 0x36
 800bafc:	f000 fc52 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800bb00:	200f      	movs	r0, #15
 800bb02:	f000 fc4f 	bl	800c3a4 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800bb06:	2011      	movs	r0, #17
 800bb08:	f000 fc1a 	bl	800c340 <_LCD_SendCommand>
	HAL_Delay(240);
 800bb0c:	20f0      	movs	r0, #240	; 0xf0
 800bb0e:	f7fa fc35 	bl	800637c <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800bb12:	2029      	movs	r0, #41	; 0x29
 800bb14:	f000 fc14 	bl	800c340 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800bb18:	2000      	movs	r0, #0
 800bb1a:	f000 fae5 	bl	800c0e8 <ILI9341_Set_Rotation>
}
 800bb1e:	bf00      	nop
 800bb20:	bd80      	pop	{r7, pc}
	...

0800bb24 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800bb24:	b480      	push	{r7}
 800bb26:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800bb28:	4b0b      	ldr	r3, [pc, #44]	; (800bb58 <ILI9341_SPI_Init+0x34>)
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb30:	2b40      	cmp	r3, #64	; 0x40
 800bb32:	d005      	beq.n	800bb40 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800bb34:	4b08      	ldr	r3, [pc, #32]	; (800bb58 <ILI9341_SPI_Init+0x34>)
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	4a07      	ldr	r2, [pc, #28]	; (800bb58 <ILI9341_SPI_Init+0x34>)
 800bb3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb3e:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bb40:	4b06      	ldr	r3, [pc, #24]	; (800bb5c <ILI9341_SPI_Init+0x38>)
 800bb42:	695b      	ldr	r3, [r3, #20]
 800bb44:	4a05      	ldr	r2, [pc, #20]	; (800bb5c <ILI9341_SPI_Init+0x38>)
 800bb46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb4a:	6153      	str	r3, [r2, #20]
}
 800bb4c:	bf00      	nop
 800bb4e:	46bd      	mov	sp, r7
 800bb50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb54:	4770      	bx	lr
 800bb56:	bf00      	nop
 800bb58:	40003c00 	.word	0x40003c00
 800bb5c:	48000400 	.word	0x48000400

0800bb60 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800bb60:	b590      	push	{r4, r7, lr}
 800bb62:	b085      	sub	sp, #20
 800bb64:	af02      	add	r7, sp, #8
 800bb66:	4604      	mov	r4, r0
 800bb68:	4608      	mov	r0, r1
 800bb6a:	4611      	mov	r1, r2
 800bb6c:	461a      	mov	r2, r3
 800bb6e:	4623      	mov	r3, r4
 800bb70:	80fb      	strh	r3, [r7, #6]
 800bb72:	4603      	mov	r3, r0
 800bb74:	80bb      	strh	r3, [r7, #4]
 800bb76:	460b      	mov	r3, r1
 800bb78:	807b      	strh	r3, [r7, #2]
 800bb7a:	4613      	mov	r3, r2
 800bb7c:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800bb7e:	4b1a      	ldr	r3, [pc, #104]	; (800bbe8 <ILI9341_Draw_Horizontal_Line+0x88>)
 800bb80:	881b      	ldrh	r3, [r3, #0]
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	88fa      	ldrh	r2, [r7, #6]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d229      	bcs.n	800bbde <ILI9341_Draw_Horizontal_Line+0x7e>
 800bb8a:	4b18      	ldr	r3, [pc, #96]	; (800bbec <ILI9341_Draw_Horizontal_Line+0x8c>)
 800bb8c:	881b      	ldrh	r3, [r3, #0]
 800bb8e:	b29b      	uxth	r3, r3
 800bb90:	88ba      	ldrh	r2, [r7, #4]
 800bb92:	429a      	cmp	r2, r3
 800bb94:	d223      	bcs.n	800bbde <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800bb96:	88fa      	ldrh	r2, [r7, #6]
 800bb98:	887b      	ldrh	r3, [r7, #2]
 800bb9a:	4413      	add	r3, r2
 800bb9c:	3b01      	subs	r3, #1
 800bb9e:	4a12      	ldr	r2, [pc, #72]	; (800bbe8 <ILI9341_Draw_Horizontal_Line+0x88>)
 800bba0:	8812      	ldrh	r2, [r2, #0]
 800bba2:	b292      	uxth	r2, r2
 800bba4:	4293      	cmp	r3, r2
 800bba6:	db05      	blt.n	800bbb4 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800bba8:	4b0f      	ldr	r3, [pc, #60]	; (800bbe8 <ILI9341_Draw_Horizontal_Line+0x88>)
 800bbaa:	881b      	ldrh	r3, [r3, #0]
 800bbac:	b29a      	uxth	r2, r3
 800bbae:	88fb      	ldrh	r3, [r7, #6]
 800bbb0:	1ad3      	subs	r3, r2, r3
 800bbb2:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800bbb4:	88fa      	ldrh	r2, [r7, #6]
 800bbb6:	887b      	ldrh	r3, [r7, #2]
 800bbb8:	4413      	add	r3, r2
 800bbba:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800bbbc:	3b01      	subs	r3, #1
 800bbbe:	b29a      	uxth	r2, r3
 800bbc0:	88bb      	ldrh	r3, [r7, #4]
 800bbc2:	88b9      	ldrh	r1, [r7, #4]
 800bbc4:	88f8      	ldrh	r0, [r7, #6]
 800bbc6:	f000 f85b 	bl	800bc80 <ILI9341_Set_Frame>
							ypos);

	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800bbca:	887c      	ldrh	r4, [r7, #2]
 800bbcc:	883a      	ldrh	r2, [r7, #0]
 800bbce:	88b9      	ldrh	r1, [r7, #4]
 800bbd0:	88f8      	ldrh	r0, [r7, #6]
 800bbd2:	2303      	movs	r3, #3
 800bbd4:	9300      	str	r3, [sp, #0]
 800bbd6:	4623      	mov	r3, r4
 800bbd8:	f000 fb02 	bl	800c1e0 <_LCD_Write_Frame>
 800bbdc:	e000      	b.n	800bbe0 <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800bbde:	bf00      	nop
}
 800bbe0:	370c      	adds	r7, #12
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd90      	pop	{r4, r7, pc}
 800bbe6:	bf00      	nop
 800bbe8:	20000c4a 	.word	0x20000c4a
 800bbec:	20000c48 	.word	0x20000c48

0800bbf0 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800bbf0:	b590      	push	{r4, r7, lr}
 800bbf2:	b085      	sub	sp, #20
 800bbf4:	af02      	add	r7, sp, #8
 800bbf6:	4604      	mov	r4, r0
 800bbf8:	4608      	mov	r0, r1
 800bbfa:	4611      	mov	r1, r2
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	4623      	mov	r3, r4
 800bc00:	80fb      	strh	r3, [r7, #6]
 800bc02:	4603      	mov	r3, r0
 800bc04:	80bb      	strh	r3, [r7, #4]
 800bc06:	460b      	mov	r3, r1
 800bc08:	807b      	strh	r3, [r7, #2]
 800bc0a:	4613      	mov	r3, r2
 800bc0c:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800bc0e:	4b1a      	ldr	r3, [pc, #104]	; (800bc78 <ILI9341_Draw_Vertical_Line+0x88>)
 800bc10:	881b      	ldrh	r3, [r3, #0]
 800bc12:	b29b      	uxth	r3, r3
 800bc14:	88fa      	ldrh	r2, [r7, #6]
 800bc16:	429a      	cmp	r2, r3
 800bc18:	d229      	bcs.n	800bc6e <ILI9341_Draw_Vertical_Line+0x7e>
 800bc1a:	4b18      	ldr	r3, [pc, #96]	; (800bc7c <ILI9341_Draw_Vertical_Line+0x8c>)
 800bc1c:	881b      	ldrh	r3, [r3, #0]
 800bc1e:	b29b      	uxth	r3, r3
 800bc20:	88ba      	ldrh	r2, [r7, #4]
 800bc22:	429a      	cmp	r2, r3
 800bc24:	d223      	bcs.n	800bc6e <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800bc26:	88ba      	ldrh	r2, [r7, #4]
 800bc28:	887b      	ldrh	r3, [r7, #2]
 800bc2a:	4413      	add	r3, r2
 800bc2c:	3b01      	subs	r3, #1
 800bc2e:	4a13      	ldr	r2, [pc, #76]	; (800bc7c <ILI9341_Draw_Vertical_Line+0x8c>)
 800bc30:	8812      	ldrh	r2, [r2, #0]
 800bc32:	b292      	uxth	r2, r2
 800bc34:	4293      	cmp	r3, r2
 800bc36:	db05      	blt.n	800bc44 <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 800bc38:	4b10      	ldr	r3, [pc, #64]	; (800bc7c <ILI9341_Draw_Vertical_Line+0x8c>)
 800bc3a:	881b      	ldrh	r3, [r3, #0]
 800bc3c:	b29a      	uxth	r2, r3
 800bc3e:	88bb      	ldrh	r3, [r7, #4]
 800bc40:	1ad3      	subs	r3, r2, r3
 800bc42:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800bc44:	88ba      	ldrh	r2, [r7, #4]
 800bc46:	887b      	ldrh	r3, [r7, #2]
 800bc48:	4413      	add	r3, r2
 800bc4a:	b29b      	uxth	r3, r3
 800bc4c:	3b01      	subs	r3, #1
 800bc4e:	b29b      	uxth	r3, r3
 800bc50:	88fa      	ldrh	r2, [r7, #6]
 800bc52:	88b9      	ldrh	r1, [r7, #4]
 800bc54:	88f8      	ldrh	r0, [r7, #6]
 800bc56:	f000 f813 	bl	800bc80 <ILI9341_Set_Frame>
	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800bc5a:	887c      	ldrh	r4, [r7, #2]
 800bc5c:	883a      	ldrh	r2, [r7, #0]
 800bc5e:	88b9      	ldrh	r1, [r7, #4]
 800bc60:	88f8      	ldrh	r0, [r7, #6]
 800bc62:	2303      	movs	r3, #3
 800bc64:	9300      	str	r3, [sp, #0]
 800bc66:	4623      	mov	r3, r4
 800bc68:	f000 faba 	bl	800c1e0 <_LCD_Write_Frame>
 800bc6c:	e000      	b.n	800bc70 <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800bc6e:	bf00      	nop
}
 800bc70:	370c      	adds	r7, #12
 800bc72:	46bd      	mov	sp, r7
 800bc74:	bd90      	pop	{r4, r7, pc}
 800bc76:	bf00      	nop
 800bc78:	20000c4a 	.word	0x20000c4a
 800bc7c:	20000c48 	.word	0x20000c48

0800bc80 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800bc80:	b590      	push	{r4, r7, lr}
 800bc82:	b083      	sub	sp, #12
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	4604      	mov	r4, r0
 800bc88:	4608      	mov	r0, r1
 800bc8a:	4611      	mov	r1, r2
 800bc8c:	461a      	mov	r2, r3
 800bc8e:	4623      	mov	r3, r4
 800bc90:	80fb      	strh	r3, [r7, #6]
 800bc92:	4603      	mov	r3, r0
 800bc94:	80bb      	strh	r3, [r7, #4]
 800bc96:	460b      	mov	r3, r1
 800bc98:	807b      	strh	r3, [r7, #2]
 800bc9a:	4613      	mov	r3, r2
 800bc9c:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800bc9e:	202a      	movs	r0, #42	; 0x2a
 800bca0:	f000 fb4e 	bl	800c340 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800bca4:	88fb      	ldrh	r3, [r7, #6]
 800bca6:	0a1b      	lsrs	r3, r3, #8
 800bca8:	b29b      	uxth	r3, r3
 800bcaa:	b2db      	uxtb	r3, r3
 800bcac:	4618      	mov	r0, r3
 800bcae:	f000 fb79 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(sc);
 800bcb2:	88fb      	ldrh	r3, [r7, #6]
 800bcb4:	b2db      	uxtb	r3, r3
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f000 fb74 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800bcbc:	887b      	ldrh	r3, [r7, #2]
 800bcbe:	0a1b      	lsrs	r3, r3, #8
 800bcc0:	b29b      	uxth	r3, r3
 800bcc2:	b2db      	uxtb	r3, r3
 800bcc4:	4618      	mov	r0, r3
 800bcc6:	f000 fb6d 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(ec);
 800bcca:	887b      	ldrh	r3, [r7, #2]
 800bccc:	b2db      	uxtb	r3, r3
 800bcce:	4618      	mov	r0, r3
 800bcd0:	f000 fb68 	bl	800c3a4 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800bcd4:	202b      	movs	r0, #43	; 0x2b
 800bcd6:	f000 fb33 	bl	800c340 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800bcda:	88bb      	ldrh	r3, [r7, #4]
 800bcdc:	0a1b      	lsrs	r3, r3, #8
 800bcde:	b29b      	uxth	r3, r3
 800bce0:	b2db      	uxtb	r3, r3
 800bce2:	4618      	mov	r0, r3
 800bce4:	f000 fb5e 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(sp);
 800bce8:	88bb      	ldrh	r3, [r7, #4]
 800bcea:	b2db      	uxtb	r3, r3
 800bcec:	4618      	mov	r0, r3
 800bcee:	f000 fb59 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800bcf2:	883b      	ldrh	r3, [r7, #0]
 800bcf4:	0a1b      	lsrs	r3, r3, #8
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	b2db      	uxtb	r3, r3
 800bcfa:	4618      	mov	r0, r3
 800bcfc:	f000 fb52 	bl	800c3a4 <_LCD_SendData>
	_LCD_SendData(ep);
 800bd00:	883b      	ldrh	r3, [r7, #0]
 800bd02:	b2db      	uxtb	r3, r3
 800bd04:	4618      	mov	r0, r3
 800bd06:	f000 fb4d 	bl	800c3a4 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800bd0a:	202c      	movs	r0, #44	; 0x2c
 800bd0c:	f000 fb18 	bl	800c340 <_LCD_SendCommand>
}
 800bd10:	bf00      	nop
 800bd12:	370c      	adds	r7, #12
 800bd14:	46bd      	mov	sp, r7
 800bd16:	bd90      	pop	{r4, r7, pc}

0800bd18 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800bd18:	b580      	push	{r7, lr}
 800bd1a:	b084      	sub	sp, #16
 800bd1c:	af02      	add	r7, sp, #8
 800bd1e:	4603      	mov	r3, r0
 800bd20:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800bd22:	4b10      	ldr	r3, [pc, #64]	; (800bd64 <ILI9341_Fill_Screen+0x4c>)
 800bd24:	881b      	ldrh	r3, [r3, #0]
 800bd26:	b29a      	uxth	r2, r3
 800bd28:	4b0f      	ldr	r3, [pc, #60]	; (800bd68 <ILI9341_Fill_Screen+0x50>)
 800bd2a:	881b      	ldrh	r3, [r3, #0]
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	2100      	movs	r1, #0
 800bd30:	2000      	movs	r0, #0
 800bd32:	f7ff ffa5 	bl	800bc80 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800bd36:	4b0b      	ldr	r3, [pc, #44]	; (800bd64 <ILI9341_Fill_Screen+0x4c>)
 800bd38:	881b      	ldrh	r3, [r3, #0]
 800bd3a:	b29b      	uxth	r3, r3
 800bd3c:	461a      	mov	r2, r3
 800bd3e:	4b0a      	ldr	r3, [pc, #40]	; (800bd68 <ILI9341_Fill_Screen+0x50>)
 800bd40:	881b      	ldrh	r3, [r3, #0]
 800bd42:	b29b      	uxth	r3, r3
 800bd44:	fb03 f302 	mul.w	r3, r3, r2
 800bd48:	4619      	mov	r1, r3
 800bd4a:	88fa      	ldrh	r2, [r7, #6]
 800bd4c:	2304      	movs	r3, #4
 800bd4e:	9300      	str	r3, [sp, #0]
 800bd50:	460b      	mov	r3, r1
 800bd52:	2100      	movs	r1, #0
 800bd54:	2000      	movs	r0, #0
 800bd56:	f000 fa43 	bl	800c1e0 <_LCD_Write_Frame>
}
 800bd5a:	bf00      	nop
 800bd5c:	3708      	adds	r7, #8
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bd80      	pop	{r7, pc}
 800bd62:	bf00      	nop
 800bd64:	20000c4a 	.word	0x20000c4a
 800bd68:	20000c48 	.word	0x20000c48

0800bd6c <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b08c      	sub	sp, #48	; 0x30
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	4603      	mov	r3, r0
 800bd74:	80fb      	strh	r3, [r7, #6]
 800bd76:	460b      	mov	r3, r1
 800bd78:	80bb      	strh	r3, [r7, #4]
 800bd7a:	4613      	mov	r3, r2
 800bd7c:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800bd7e:	4b94      	ldr	r3, [pc, #592]	; (800bfd0 <ILI9341_Draw_Pixel+0x264>)
 800bd80:	881b      	ldrh	r3, [r3, #0]
 800bd82:	b29b      	uxth	r3, r3
 800bd84:	88fa      	ldrh	r2, [r7, #6]
 800bd86:	429a      	cmp	r2, r3
 800bd88:	f080 811e 	bcs.w	800bfc8 <ILI9341_Draw_Pixel+0x25c>
 800bd8c:	4b91      	ldr	r3, [pc, #580]	; (800bfd4 <ILI9341_Draw_Pixel+0x268>)
 800bd8e:	881b      	ldrh	r3, [r3, #0]
 800bd90:	b29b      	uxth	r3, r3
 800bd92:	88ba      	ldrh	r2, [r7, #4]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	f080 8117 	bcs.w	800bfc8 <ILI9341_Draw_Pixel+0x25c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800bd9a:	4b8f      	ldr	r3, [pc, #572]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bd9c:	695b      	ldr	r3, [r3, #20]
 800bd9e:	4a8e      	ldr	r2, [pc, #568]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bda0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bda4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bda6:	4b8c      	ldr	r3, [pc, #560]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bda8:	695b      	ldr	r3, [r3, #20]
 800bdaa:	4a8b      	ldr	r2, [pc, #556]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bdac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdb0:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2A, 0, 0);
 800bdb2:	2200      	movs	r2, #0
 800bdb4:	2100      	movs	r1, #0
 800bdb6:	202a      	movs	r0, #42	; 0x2a
 800bdb8:	f000 fb26 	bl	800c408 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800bdbc:	2300      	movs	r3, #0
 800bdbe:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bdc0:	e008      	b.n	800bdd4 <ILI9341_Draw_Pixel+0x68>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bdc2:	4b85      	ldr	r3, [pc, #532]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bdc4:	695b      	ldr	r3, [r3, #20]
 800bdc6:	4a84      	ldr	r2, [pc, #528]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bdc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdcc:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800bdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bdd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd6:	2b02      	cmp	r3, #2
 800bdd8:	ddf3      	ble.n	800bdc2 <ILI9341_Draw_Pixel+0x56>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800bdda:	4b7f      	ldr	r3, [pc, #508]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bddc:	695b      	ldr	r3, [r3, #20]
 800bdde:	4a7e      	ldr	r2, [pc, #504]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bde0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bde4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800bde6:	4b7c      	ldr	r3, [pc, #496]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bde8:	695b      	ldr	r3, [r3, #20]
 800bdea:	4a7b      	ldr	r2, [pc, #492]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bdec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdf0:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bdf2:	4b79      	ldr	r3, [pc, #484]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bdf4:	695b      	ldr	r3, [r3, #20]
 800bdf6:	4a78      	ldr	r2, [pc, #480]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bdf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bdfc:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] =
 800bdfe:	88fb      	ldrh	r3, [r7, #6]
 800be00:	0a1b      	lsrs	r3, r3, #8
 800be02:	b29b      	uxth	r3, r3
 800be04:	b2db      	uxtb	r3, r3
 800be06:	753b      	strb	r3, [r7, #20]
 800be08:	88fb      	ldrh	r3, [r7, #6]
 800be0a:	b2db      	uxtb	r3, r3
 800be0c:	757b      	strb	r3, [r7, #21]
	{
			x >> 8,
			x,
			(x + 1) >> 8,
 800be0e:	88fb      	ldrh	r3, [r7, #6]
 800be10:	3301      	adds	r3, #1
 800be12:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer[4] =
 800be14:	b2db      	uxtb	r3, r3
 800be16:	75bb      	strb	r3, [r7, #22]
			(x + 1)
 800be18:	88fb      	ldrh	r3, [r7, #6]
 800be1a:	b2db      	uxtb	r3, r3
 800be1c:	3301      	adds	r3, #1
 800be1e:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer[4] =
 800be20:	75fb      	strb	r3, [r7, #23]
	};

	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800be22:	f107 0014 	add.w	r0, r7, #20
 800be26:	230a      	movs	r3, #10
 800be28:	2200      	movs	r2, #0
 800be2a:	2104      	movs	r1, #4
 800be2c:	f000 fb1e 	bl	800c46c <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800be30:	2300      	movs	r3, #0
 800be32:	62bb      	str	r3, [r7, #40]	; 0x28
 800be34:	e008      	b.n	800be48 <ILI9341_Draw_Pixel+0xdc>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800be36:	4b68      	ldr	r3, [pc, #416]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800be38:	695b      	ldr	r3, [r3, #20]
 800be3a:	4a67      	ldr	r2, [pc, #412]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800be3c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be40:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800be42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be44:	3301      	adds	r3, #1
 800be46:	62bb      	str	r3, [r7, #40]	; 0x28
 800be48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be4a:	2b02      	cmp	r3, #2
 800be4c:	ddf3      	ble.n	800be36 <ILI9341_Draw_Pixel+0xca>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800be4e:	4b62      	ldr	r3, [pc, #392]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800be50:	695b      	ldr	r3, [r3, #20]
 800be52:	4a61      	ldr	r2, [pc, #388]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800be54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be58:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800be5a:	4b5f      	ldr	r3, [pc, #380]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800be5c:	695b      	ldr	r3, [r3, #20]
 800be5e:	4a5e      	ldr	r2, [pc, #376]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800be60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800be64:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800be66:	4b5c      	ldr	r3, [pc, #368]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800be68:	695b      	ldr	r3, [r3, #20]
 800be6a:	4a5b      	ldr	r2, [pc, #364]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800be6c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be70:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2B, 0, 0);
 800be72:	2200      	movs	r2, #0
 800be74:	2100      	movs	r1, #0
 800be76:	202b      	movs	r0, #43	; 0x2b
 800be78:	f000 fac6 	bl	800c408 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800be7c:	2300      	movs	r3, #0
 800be7e:	627b      	str	r3, [r7, #36]	; 0x24
 800be80:	e008      	b.n	800be94 <ILI9341_Draw_Pixel+0x128>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800be82:	4b55      	ldr	r3, [pc, #340]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800be84:	695b      	ldr	r3, [r3, #20]
 800be86:	4a54      	ldr	r2, [pc, #336]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800be88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800be8c:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800be8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be90:	3301      	adds	r3, #1
 800be92:	627b      	str	r3, [r7, #36]	; 0x24
 800be94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be96:	2b02      	cmp	r3, #2
 800be98:	ddf3      	ble.n	800be82 <ILI9341_Draw_Pixel+0x116>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800be9a:	4b4f      	ldr	r3, [pc, #316]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800be9c:	695b      	ldr	r3, [r3, #20]
 800be9e:	4a4e      	ldr	r2, [pc, #312]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bea0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bea4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800bea6:	4b4c      	ldr	r3, [pc, #304]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bea8:	695b      	ldr	r3, [r3, #20]
 800beaa:	4a4b      	ldr	r2, [pc, #300]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800beac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800beb0:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800beb2:	4b49      	ldr	r3, [pc, #292]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800beb4:	695b      	ldr	r3, [r3, #20]
 800beb6:	4a48      	ldr	r2, [pc, #288]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800beb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bebc:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] =
 800bebe:	88bb      	ldrh	r3, [r7, #4]
 800bec0:	0a1b      	lsrs	r3, r3, #8
 800bec2:	b29b      	uxth	r3, r3
 800bec4:	b2db      	uxtb	r3, r3
 800bec6:	743b      	strb	r3, [r7, #16]
 800bec8:	88bb      	ldrh	r3, [r7, #4]
 800beca:	b2db      	uxtb	r3, r3
 800becc:	747b      	strb	r3, [r7, #17]
	{
			y >> 8,
			y,
			(y + 1) >> 8,
 800bece:	88bb      	ldrh	r3, [r7, #4]
 800bed0:	3301      	adds	r3, #1
 800bed2:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer1[4] =
 800bed4:	b2db      	uxtb	r3, r3
 800bed6:	74bb      	strb	r3, [r7, #18]
			(y + 1)
 800bed8:	88bb      	ldrh	r3, [r7, #4]
 800beda:	b2db      	uxtb	r3, r3
 800bedc:	3301      	adds	r3, #1
 800bede:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer1[4] =
 800bee0:	74fb      	strb	r3, [r7, #19]
	};

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800bee2:	f107 0010 	add.w	r0, r7, #16
 800bee6:	230a      	movs	r3, #10
 800bee8:	2200      	movs	r2, #0
 800beea:	2104      	movs	r1, #4
 800beec:	f000 fabe 	bl	800c46c <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800bef0:	2300      	movs	r3, #0
 800bef2:	623b      	str	r3, [r7, #32]
 800bef4:	e008      	b.n	800bf08 <ILI9341_Draw_Pixel+0x19c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bef6:	4b38      	ldr	r3, [pc, #224]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bef8:	695b      	ldr	r3, [r3, #20]
 800befa:	4a37      	ldr	r2, [pc, #220]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800befc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf00:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800bf02:	6a3b      	ldr	r3, [r7, #32]
 800bf04:	3301      	adds	r3, #1
 800bf06:	623b      	str	r3, [r7, #32]
 800bf08:	6a3b      	ldr	r3, [r7, #32]
 800bf0a:	2b02      	cmp	r3, #2
 800bf0c:	ddf3      	ble.n	800bef6 <ILI9341_Draw_Pixel+0x18a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800bf0e:	4b32      	ldr	r3, [pc, #200]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bf10:	695b      	ldr	r3, [r3, #20]
 800bf12:	4a31      	ldr	r2, [pc, #196]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bf14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf18:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800bf1a:	4b2f      	ldr	r3, [pc, #188]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bf1c:	695b      	ldr	r3, [r3, #20]
 800bf1e:	4a2e      	ldr	r2, [pc, #184]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bf20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bf24:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bf26:	4b2c      	ldr	r3, [pc, #176]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bf28:	695b      	ldr	r3, [r3, #20]
 800bf2a:	4a2b      	ldr	r2, [pc, #172]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bf2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf30:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2C, 0, 0);
 800bf32:	2200      	movs	r2, #0
 800bf34:	2100      	movs	r1, #0
 800bf36:	202c      	movs	r0, #44	; 0x2c
 800bf38:	f000 fa66 	bl	800c408 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800bf3c:	2300      	movs	r3, #0
 800bf3e:	61fb      	str	r3, [r7, #28]
 800bf40:	e008      	b.n	800bf54 <ILI9341_Draw_Pixel+0x1e8>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bf42:	4b25      	ldr	r3, [pc, #148]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bf44:	695b      	ldr	r3, [r3, #20]
 800bf46:	4a24      	ldr	r2, [pc, #144]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bf48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf4c:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800bf4e:	69fb      	ldr	r3, [r7, #28]
 800bf50:	3301      	adds	r3, #1
 800bf52:	61fb      	str	r3, [r7, #28]
 800bf54:	69fb      	ldr	r3, [r7, #28]
 800bf56:	2b02      	cmp	r3, #2
 800bf58:	ddf3      	ble.n	800bf42 <ILI9341_Draw_Pixel+0x1d6>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800bf5a:	4b1f      	ldr	r3, [pc, #124]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bf5c:	695b      	ldr	r3, [r3, #20]
 800bf5e:	4a1e      	ldr	r2, [pc, #120]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bf60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf64:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800bf66:	4b1c      	ldr	r3, [pc, #112]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bf68:	695b      	ldr	r3, [r3, #20]
 800bf6a:	4a1b      	ldr	r2, [pc, #108]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bf6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf70:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bf72:	4b19      	ldr	r3, [pc, #100]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bf74:	695b      	ldr	r3, [r3, #20]
 800bf76:	4a18      	ldr	r2, [pc, #96]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bf78:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bf7c:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800bf7e:	887b      	ldrh	r3, [r7, #2]
 800bf80:	0a1b      	lsrs	r3, r3, #8
 800bf82:	b29b      	uxth	r3, r3
 800bf84:	b2db      	uxtb	r3, r3
 800bf86:	733b      	strb	r3, [r7, #12]
 800bf88:	887b      	ldrh	r3, [r7, #2]
 800bf8a:	b2db      	uxtb	r3, r3
 800bf8c:	737b      	strb	r3, [r7, #13]

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 4, 0, 10);
 800bf8e:	f107 000c 	add.w	r0, r7, #12
 800bf92:	230a      	movs	r3, #10
 800bf94:	2200      	movs	r2, #0
 800bf96:	2104      	movs	r1, #4
 800bf98:	f000 fa68 	bl	800c46c <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	61bb      	str	r3, [r7, #24]
 800bfa0:	e008      	b.n	800bfb4 <ILI9341_Draw_Pixel+0x248>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800bfa2:	4b0d      	ldr	r3, [pc, #52]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bfa4:	695b      	ldr	r3, [r3, #20]
 800bfa6:	4a0c      	ldr	r2, [pc, #48]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bfa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfac:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800bfae:	69bb      	ldr	r3, [r7, #24]
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	61bb      	str	r3, [r7, #24]
 800bfb4:	69bb      	ldr	r3, [r7, #24]
 800bfb6:	2b02      	cmp	r3, #2
 800bfb8:	ddf3      	ble.n	800bfa2 <ILI9341_Draw_Pixel+0x236>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800bfba:	4b07      	ldr	r3, [pc, #28]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bfbc:	695b      	ldr	r3, [r3, #20]
 800bfbe:	4a06      	ldr	r2, [pc, #24]	; (800bfd8 <ILI9341_Draw_Pixel+0x26c>)
 800bfc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bfc4:	6153      	str	r3, [r2, #20]
 800bfc6:	e000      	b.n	800bfca <ILI9341_Draw_Pixel+0x25e>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800bfc8:	bf00      	nop


}
 800bfca:	3730      	adds	r7, #48	; 0x30
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}
 800bfd0:	20000c4a 	.word	0x20000c4a
 800bfd4:	20000c48 	.word	0x20000c48
 800bfd8:	48000400 	.word	0x48000400

0800bfdc <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800bfdc:	b590      	push	{r4, r7, lr}
 800bfde:	b087      	sub	sp, #28
 800bfe0:	af02      	add	r7, sp, #8
 800bfe2:	4604      	mov	r4, r0
 800bfe4:	4608      	mov	r0, r1
 800bfe6:	4611      	mov	r1, r2
 800bfe8:	461a      	mov	r2, r3
 800bfea:	4623      	mov	r3, r4
 800bfec:	80fb      	strh	r3, [r7, #6]
 800bfee:	4603      	mov	r3, r0
 800bff0:	80bb      	strh	r3, [r7, #4]
 800bff2:	460b      	mov	r3, r1
 800bff4:	807b      	strh	r3, [r7, #2]
 800bff6:	4613      	mov	r3, r2
 800bff8:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800bffa:	4b39      	ldr	r3, [pc, #228]	; (800c0e0 <ILI9341_Draw_Rectangle+0x104>)
 800bffc:	881b      	ldrh	r3, [r3, #0]
 800bffe:	b29b      	uxth	r3, r3
 800c000:	88fa      	ldrh	r2, [r7, #6]
 800c002:	429a      	cmp	r2, r3
 800c004:	d268      	bcs.n	800c0d8 <ILI9341_Draw_Rectangle+0xfc>
 800c006:	4b37      	ldr	r3, [pc, #220]	; (800c0e4 <ILI9341_Draw_Rectangle+0x108>)
 800c008:	881b      	ldrh	r3, [r3, #0]
 800c00a:	b29b      	uxth	r3, r3
 800c00c:	88ba      	ldrh	r2, [r7, #4]
 800c00e:	429a      	cmp	r2, r3
 800c010:	d262      	bcs.n	800c0d8 <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 800c012:	88fa      	ldrh	r2, [r7, #6]
 800c014:	887b      	ldrh	r3, [r7, #2]
 800c016:	4413      	add	r3, r2
 800c018:	3b01      	subs	r3, #1
 800c01a:	4a31      	ldr	r2, [pc, #196]	; (800c0e0 <ILI9341_Draw_Rectangle+0x104>)
 800c01c:	8812      	ldrh	r2, [r2, #0]
 800c01e:	b292      	uxth	r2, r2
 800c020:	4293      	cmp	r3, r2
 800c022:	db05      	blt.n	800c030 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800c024:	4b2e      	ldr	r3, [pc, #184]	; (800c0e0 <ILI9341_Draw_Rectangle+0x104>)
 800c026:	881b      	ldrh	r3, [r3, #0]
 800c028:	b29a      	uxth	r2, r3
 800c02a:	88fb      	ldrh	r3, [r7, #6]
 800c02c:	1ad3      	subs	r3, r2, r3
 800c02e:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800c030:	88ba      	ldrh	r2, [r7, #4]
 800c032:	883b      	ldrh	r3, [r7, #0]
 800c034:	4413      	add	r3, r2
 800c036:	3b01      	subs	r3, #1
 800c038:	4a2a      	ldr	r2, [pc, #168]	; (800c0e4 <ILI9341_Draw_Rectangle+0x108>)
 800c03a:	8812      	ldrh	r2, [r2, #0]
 800c03c:	b292      	uxth	r2, r2
 800c03e:	4293      	cmp	r3, r2
 800c040:	db05      	blt.n	800c04e <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800c042:	4b28      	ldr	r3, [pc, #160]	; (800c0e4 <ILI9341_Draw_Rectangle+0x108>)
 800c044:	881b      	ldrh	r3, [r3, #0]
 800c046:	b29a      	uxth	r2, r3
 800c048:	88bb      	ldrh	r3, [r7, #4]
 800c04a:	1ad3      	subs	r3, r2, r3
 800c04c:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800c04e:	88fa      	ldrh	r2, [r7, #6]
 800c050:	887b      	ldrh	r3, [r7, #2]
 800c052:	4413      	add	r3, r2
 800c054:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800c056:	3b01      	subs	r3, #1
 800c058:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800c05a:	88ba      	ldrh	r2, [r7, #4]
 800c05c:	883b      	ldrh	r3, [r7, #0]
 800c05e:	4413      	add	r3, r2
 800c060:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800c062:	3b01      	subs	r3, #1
 800c064:	b29b      	uxth	r3, r3
 800c066:	88b9      	ldrh	r1, [r7, #4]
 800c068:	88f8      	ldrh	r0, [r7, #6]
 800c06a:	4622      	mov	r2, r4
 800c06c:	f7ff fe08 	bl	800bc80 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800c070:	883a      	ldrh	r2, [r7, #0]
 800c072:	887b      	ldrh	r3, [r7, #2]
 800c074:	fb12 f303 	smulbb	r3, r2, r3
 800c078:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800c07a:	2300      	movs	r3, #0
 800c07c:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800c07e:	89fb      	ldrh	r3, [r7, #14]
 800c080:	f003 0301 	and.w	r3, r3, #1
 800c084:	2b00      	cmp	r3, #0
 800c086:	d009      	beq.n	800c09c <ILI9341_Draw_Rectangle+0xc0>
 800c088:	89fb      	ldrh	r3, [r7, #14]
 800c08a:	2b01      	cmp	r3, #1
 800c08c:	d906      	bls.n	800c09c <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800c08e:	2301      	movs	r3, #1
 800c090:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800c092:	89fb      	ldrh	r3, [r7, #14]
 800c094:	085b      	lsrs	r3, r3, #1
 800c096:	b29b      	uxth	r3, r3
 800c098:	005b      	lsls	r3, r3, #1
 800c09a:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800c09c:	89fc      	ldrh	r4, [r7, #14]
 800c09e:	8c3a      	ldrh	r2, [r7, #32]
 800c0a0:	88b9      	ldrh	r1, [r7, #4]
 800c0a2:	88f8      	ldrh	r0, [r7, #6]
 800c0a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800c0a8:	9300      	str	r3, [sp, #0]
 800c0aa:	4623      	mov	r3, r4
 800c0ac:	f000 f898 	bl	800c1e0 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800c0b0:	7b7b      	ldrb	r3, [r7, #13]
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d011      	beq.n	800c0da <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800c0b6:	88fa      	ldrh	r2, [r7, #6]
 800c0b8:	887b      	ldrh	r3, [r7, #2]
 800c0ba:	4413      	add	r3, r2
 800c0bc:	b29b      	uxth	r3, r3
 800c0be:	3b01      	subs	r3, #1
 800c0c0:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800c0c2:	88ba      	ldrh	r2, [r7, #4]
 800c0c4:	883b      	ldrh	r3, [r7, #0]
 800c0c6:	4413      	add	r3, r2
 800c0c8:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800c0ca:	3b01      	subs	r3, #1
 800c0cc:	b29b      	uxth	r3, r3
 800c0ce:	8c3a      	ldrh	r2, [r7, #32]
 800c0d0:	4619      	mov	r1, r3
 800c0d2:	f7ff fe4b 	bl	800bd6c <ILI9341_Draw_Pixel>
 800c0d6:	e000      	b.n	800c0da <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800c0d8:	bf00      	nop
							colour);
	}
}
 800c0da:	3714      	adds	r7, #20
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	bd90      	pop	{r4, r7, pc}
 800c0e0:	20000c4a 	.word	0x20000c4a
 800c0e4:	20000c48 	.word	0x20000c48

0800c0e8 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800c0e8:	b580      	push	{r7, lr}
 800c0ea:	b084      	sub	sp, #16
 800c0ec:	af00      	add	r7, sp, #0
 800c0ee:	4603      	mov	r3, r0
 800c0f0:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800c0f2:	79fb      	ldrb	r3, [r7, #7]
 800c0f4:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800c0f6:	2036      	movs	r0, #54	; 0x36
 800c0f8:	f000 f922 	bl	800c340 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800c0fc:	7bfb      	ldrb	r3, [r7, #15]
 800c0fe:	2b03      	cmp	r3, #3
 800c100:	d836      	bhi.n	800c170 <ILI9341_Set_Rotation+0x88>
 800c102:	a201      	add	r2, pc, #4	; (adr r2, 800c108 <ILI9341_Set_Rotation+0x20>)
 800c104:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c108:	0800c119 	.word	0x0800c119
 800c10c:	0800c12f 	.word	0x0800c12f
 800c110:	0800c145 	.word	0x0800c145
 800c114:	0800c15b 	.word	0x0800c15b
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800c118:	2048      	movs	r0, #72	; 0x48
 800c11a:	f000 f943 	bl	800c3a4 <_LCD_SendData>
			LCD_WIDTH = 240;
 800c11e:	4b17      	ldr	r3, [pc, #92]	; (800c17c <ILI9341_Set_Rotation+0x94>)
 800c120:	22f0      	movs	r2, #240	; 0xf0
 800c122:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800c124:	4b16      	ldr	r3, [pc, #88]	; (800c180 <ILI9341_Set_Rotation+0x98>)
 800c126:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c12a:	801a      	strh	r2, [r3, #0]
			break;
 800c12c:	e021      	b.n	800c172 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800c12e:	2028      	movs	r0, #40	; 0x28
 800c130:	f000 f938 	bl	800c3a4 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800c134:	4b11      	ldr	r3, [pc, #68]	; (800c17c <ILI9341_Set_Rotation+0x94>)
 800c136:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c13a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800c13c:	4b10      	ldr	r3, [pc, #64]	; (800c180 <ILI9341_Set_Rotation+0x98>)
 800c13e:	22f0      	movs	r2, #240	; 0xf0
 800c140:	801a      	strh	r2, [r3, #0]
			break;
 800c142:	e016      	b.n	800c172 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800c144:	2088      	movs	r0, #136	; 0x88
 800c146:	f000 f92d 	bl	800c3a4 <_LCD_SendData>
			LCD_WIDTH  = 240;
 800c14a:	4b0c      	ldr	r3, [pc, #48]	; (800c17c <ILI9341_Set_Rotation+0x94>)
 800c14c:	22f0      	movs	r2, #240	; 0xf0
 800c14e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800c150:	4b0b      	ldr	r3, [pc, #44]	; (800c180 <ILI9341_Set_Rotation+0x98>)
 800c152:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c156:	801a      	strh	r2, [r3, #0]
			break;
 800c158:	e00b      	b.n	800c172 <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800c15a:	20e8      	movs	r0, #232	; 0xe8
 800c15c:	f000 f922 	bl	800c3a4 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800c160:	4b06      	ldr	r3, [pc, #24]	; (800c17c <ILI9341_Set_Rotation+0x94>)
 800c162:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c166:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800c168:	4b05      	ldr	r3, [pc, #20]	; (800c180 <ILI9341_Set_Rotation+0x98>)
 800c16a:	22f0      	movs	r2, #240	; 0xf0
 800c16c:	801a      	strh	r2, [r3, #0]
			break;
 800c16e:	e000      	b.n	800c172 <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800c170:	bf00      	nop
	}
}
 800c172:	bf00      	nop
 800c174:	3710      	adds	r7, #16
 800c176:	46bd      	mov	sp, r7
 800c178:	bd80      	pop	{r7, pc}
 800c17a:	bf00      	nop
 800c17c:	20000c4a 	.word	0x20000c4a
 800c180:	20000c48 	.word	0x20000c48

0800c184 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800c184:	b480      	push	{r7}
 800c186:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800c188:	4b05      	ldr	r3, [pc, #20]	; (800c1a0 <_LCD_Enable+0x1c>)
 800c18a:	695b      	ldr	r3, [r3, #20]
 800c18c:	4a04      	ldr	r2, [pc, #16]	; (800c1a0 <_LCD_Enable+0x1c>)
 800c18e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c192:	6153      	str	r3, [r2, #20]
}
 800c194:	bf00      	nop
 800c196:	46bd      	mov	sp, r7
 800c198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c19c:	4770      	bx	lr
 800c19e:	bf00      	nop
 800c1a0:	48000400 	.word	0x48000400

0800c1a4 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800c1a8:	4b0c      	ldr	r3, [pc, #48]	; (800c1dc <_LCD_Reset+0x38>)
 800c1aa:	695b      	ldr	r3, [r3, #20]
 800c1ac:	4a0b      	ldr	r2, [pc, #44]	; (800c1dc <_LCD_Reset+0x38>)
 800c1ae:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800c1b2:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800c1b4:	20c8      	movs	r0, #200	; 0xc8
 800c1b6:	f7fa f8e1 	bl	800637c <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c1ba:	4b08      	ldr	r3, [pc, #32]	; (800c1dc <_LCD_Reset+0x38>)
 800c1bc:	695b      	ldr	r3, [r3, #20]
 800c1be:	4a07      	ldr	r2, [pc, #28]	; (800c1dc <_LCD_Reset+0x38>)
 800c1c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c1c4:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800c1c6:	20c8      	movs	r0, #200	; 0xc8
 800c1c8:	f7fa f8d8 	bl	800637c <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800c1cc:	4b03      	ldr	r3, [pc, #12]	; (800c1dc <_LCD_Reset+0x38>)
 800c1ce:	695b      	ldr	r3, [r3, #20]
 800c1d0:	4a02      	ldr	r2, [pc, #8]	; (800c1dc <_LCD_Reset+0x38>)
 800c1d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800c1d6:	6153      	str	r3, [r2, #20]
}
 800c1d8:	bf00      	nop
 800c1da:	bd80      	pop	{r7, pc}
 800c1dc:	48000400 	.word	0x48000400

0800c1e0 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800c1e0:	b5b0      	push	{r4, r5, r7, lr}
 800c1e2:	b08e      	sub	sp, #56	; 0x38
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	607b      	str	r3, [r7, #4]
 800c1e8:	4603      	mov	r3, r0
 800c1ea:	81fb      	strh	r3, [r7, #14]
 800c1ec:	460b      	mov	r3, r1
 800c1ee:	81bb      	strh	r3, [r7, #12]
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	817b      	strh	r3, [r7, #10]
 800c1f4:	466b      	mov	r3, sp
 800c1f6:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	005b      	lsls	r3, r3, #1
 800c200:	4a4d      	ldr	r2, [pc, #308]	; (800c338 <_LCD_Write_Frame+0x158>)
 800c202:	8812      	ldrh	r2, [r2, #0]
 800c204:	4293      	cmp	r3, r2
 800c206:	d202      	bcs.n	800c20e <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c20c:	e002      	b.n	800c214 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800c20e:	4b4a      	ldr	r3, [pc, #296]	; (800c338 <_LCD_Write_Frame+0x158>)
 800c210:	881b      	ldrh	r3, [r3, #0]
 800c212:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800c214:	897b      	ldrh	r3, [r7, #10]
 800c216:	0a1b      	lsrs	r3, r3, #8
 800c218:	b29b      	uxth	r3, r3
 800c21a:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800c21c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c21e:	4603      	mov	r3, r0
 800c220:	3b01      	subs	r3, #1
 800c222:	61bb      	str	r3, [r7, #24]
 800c224:	4601      	mov	r1, r0
 800c226:	f04f 0200 	mov.w	r2, #0
 800c22a:	f04f 0300 	mov.w	r3, #0
 800c22e:	f04f 0400 	mov.w	r4, #0
 800c232:	00d4      	lsls	r4, r2, #3
 800c234:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800c238:	00cb      	lsls	r3, r1, #3
 800c23a:	4601      	mov	r1, r0
 800c23c:	f04f 0200 	mov.w	r2, #0
 800c240:	f04f 0300 	mov.w	r3, #0
 800c244:	f04f 0400 	mov.w	r4, #0
 800c248:	00d4      	lsls	r4, r2, #3
 800c24a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800c24e:	00cb      	lsls	r3, r1, #3
 800c250:	1dc3      	adds	r3, r0, #7
 800c252:	08db      	lsrs	r3, r3, #3
 800c254:	00db      	lsls	r3, r3, #3
 800c256:	ebad 0d03 	sub.w	sp, sp, r3
 800c25a:	466b      	mov	r3, sp
 800c25c:	3300      	adds	r3, #0
 800c25e:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800c260:	2300      	movs	r3, #0
 800c262:	633b      	str	r3, [r7, #48]	; 0x30
 800c264:	e00d      	b.n	800c282 <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800c266:	697a      	ldr	r2, [r7, #20]
 800c268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c26a:	4413      	add	r3, r2
 800c26c:	7ffa      	ldrb	r2, [r7, #31]
 800c26e:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800c270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c272:	3301      	adds	r3, #1
 800c274:	897a      	ldrh	r2, [r7, #10]
 800c276:	b2d1      	uxtb	r1, r2
 800c278:	697a      	ldr	r2, [r7, #20]
 800c27a:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800c27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27e:	3302      	adds	r3, #2
 800c280:	633b      	str	r3, [r7, #48]	; 0x30
 800c282:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c286:	429a      	cmp	r2, r3
 800c288:	d3ed      	bcc.n	800c266 <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	005b      	lsls	r3, r3, #1
 800c28e:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800c290:	2301      	movs	r3, #1
 800c292:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800c294:	2300      	movs	r3, #0
 800c296:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d00d      	beq.n	800c2ba <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800c29e:	693a      	ldr	r2, [r7, #16]
 800c2a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c2a6:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c2ac:	fbb3 f2f2 	udiv	r2, r3, r2
 800c2b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2b2:	fb01 f202 	mul.w	r2, r1, r2
 800c2b6:	1a9b      	subs	r3, r3, r2
 800c2b8:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800c2ba:	4b20      	ldr	r3, [pc, #128]	; (800c33c <_LCD_Write_Frame+0x15c>)
 800c2bc:	695b      	ldr	r3, [r3, #20]
 800c2be:	4a1f      	ldr	r2, [pc, #124]	; (800c33c <_LCD_Write_Frame+0x15c>)
 800c2c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c2c4:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c2c6:	4b1d      	ldr	r3, [pc, #116]	; (800c33c <_LCD_Write_Frame+0x15c>)
 800c2c8:	695b      	ldr	r3, [r3, #20]
 800c2ca:	4a1c      	ldr	r2, [pc, #112]	; (800c33c <_LCD_Write_Frame+0x15c>)
 800c2cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c2d0:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 800c2d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d00f      	beq.n	800c2f8 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800c2d8:	2300      	movs	r3, #0
 800c2da:	627b      	str	r3, [r7, #36]	; 0x24
 800c2dc:	e008      	b.n	800c2f0 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800c2de:	6978      	ldr	r0, [r7, #20]
 800c2e0:	230a      	movs	r3, #10
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c2e6:	f000 f8c1 	bl	800c46c <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800c2ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ec:	3301      	adds	r3, #1
 800c2ee:	627b      	str	r3, [r7, #36]	; 0x24
 800c2f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c2f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d3f2      	bcc.n	800c2de <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 800c2f8:	6978      	ldr	r0, [r7, #20]
 800c2fa:	230a      	movs	r3, #10
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c300:	f000 f8b4 	bl	800c46c <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800c304:	2300      	movs	r3, #0
 800c306:	623b      	str	r3, [r7, #32]
 800c308:	e008      	b.n	800c31c <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c30a:	4b0c      	ldr	r3, [pc, #48]	; (800c33c <_LCD_Write_Frame+0x15c>)
 800c30c:	695b      	ldr	r3, [r3, #20]
 800c30e:	4a0b      	ldr	r2, [pc, #44]	; (800c33c <_LCD_Write_Frame+0x15c>)
 800c310:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c314:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800c316:	6a3b      	ldr	r3, [r7, #32]
 800c318:	3301      	adds	r3, #1
 800c31a:	623b      	str	r3, [r7, #32]
 800c31c:	6a3b      	ldr	r3, [r7, #32]
 800c31e:	2b02      	cmp	r3, #2
 800c320:	ddf3      	ble.n	800c30a <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800c322:	4b06      	ldr	r3, [pc, #24]	; (800c33c <_LCD_Write_Frame+0x15c>)
 800c324:	695b      	ldr	r3, [r3, #20]
 800c326:	4a05      	ldr	r2, [pc, #20]	; (800c33c <_LCD_Write_Frame+0x15c>)
 800c328:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c32c:	6153      	str	r3, [r2, #20]
 800c32e:	46ad      	mov	sp, r5

}
 800c330:	bf00      	nop
 800c332:	3738      	adds	r7, #56	; 0x38
 800c334:	46bd      	mov	sp, r7
 800c336:	bdb0      	pop	{r4, r5, r7, pc}
 800c338:	20000c4c 	.word	0x20000c4c
 800c33c:	48000400 	.word	0x48000400

0800c340 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b084      	sub	sp, #16
 800c344:	af00      	add	r7, sp, #0
 800c346:	4603      	mov	r3, r0
 800c348:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c34a:	4b15      	ldr	r3, [pc, #84]	; (800c3a0 <_LCD_SendCommand+0x60>)
 800c34c:	695b      	ldr	r3, [r3, #20]
 800c34e:	4a14      	ldr	r2, [pc, #80]	; (800c3a0 <_LCD_SendCommand+0x60>)
 800c350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c354:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800c356:	4b12      	ldr	r3, [pc, #72]	; (800c3a0 <_LCD_SendCommand+0x60>)
 800c358:	695b      	ldr	r3, [r3, #20]
 800c35a:	4a11      	ldr	r2, [pc, #68]	; (800c3a0 <_LCD_SendCommand+0x60>)
 800c35c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c360:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800c362:	79fb      	ldrb	r3, [r7, #7]
 800c364:	2200      	movs	r2, #0
 800c366:	2100      	movs	r1, #0
 800c368:	4618      	mov	r0, r3
 800c36a:	f000 f84d 	bl	800c408 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800c36e:	2300      	movs	r3, #0
 800c370:	60fb      	str	r3, [r7, #12]
 800c372:	e008      	b.n	800c386 <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c374:	4b0a      	ldr	r3, [pc, #40]	; (800c3a0 <_LCD_SendCommand+0x60>)
 800c376:	695b      	ldr	r3, [r3, #20]
 800c378:	4a09      	ldr	r2, [pc, #36]	; (800c3a0 <_LCD_SendCommand+0x60>)
 800c37a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c37e:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	3301      	adds	r3, #1
 800c384:	60fb      	str	r3, [r7, #12]
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	2b02      	cmp	r3, #2
 800c38a:	ddf3      	ble.n	800c374 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800c38c:	4b04      	ldr	r3, [pc, #16]	; (800c3a0 <_LCD_SendCommand+0x60>)
 800c38e:	695b      	ldr	r3, [r3, #20]
 800c390:	4a03      	ldr	r2, [pc, #12]	; (800c3a0 <_LCD_SendCommand+0x60>)
 800c392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c396:	6153      	str	r3, [r2, #20]
}
 800c398:	bf00      	nop
 800c39a:	3710      	adds	r7, #16
 800c39c:	46bd      	mov	sp, r7
 800c39e:	bd80      	pop	{r7, pc}
 800c3a0:	48000400 	.word	0x48000400

0800c3a4 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800c3a4:	b580      	push	{r7, lr}
 800c3a6:	b084      	sub	sp, #16
 800c3a8:	af00      	add	r7, sp, #0
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800c3ae:	4b15      	ldr	r3, [pc, #84]	; (800c404 <_LCD_SendData+0x60>)
 800c3b0:	695b      	ldr	r3, [r3, #20]
 800c3b2:	4a14      	ldr	r2, [pc, #80]	; (800c404 <_LCD_SendData+0x60>)
 800c3b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3b8:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c3ba:	4b12      	ldr	r3, [pc, #72]	; (800c404 <_LCD_SendData+0x60>)
 800c3bc:	695b      	ldr	r3, [r3, #20]
 800c3be:	4a11      	ldr	r2, [pc, #68]	; (800c404 <_LCD_SendData+0x60>)
 800c3c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c3c4:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800c3c6:	79fb      	ldrb	r3, [r7, #7]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	2100      	movs	r1, #0
 800c3cc:	4618      	mov	r0, r3
 800c3ce:	f000 f81b 	bl	800c408 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	60fb      	str	r3, [r7, #12]
 800c3d6:	e008      	b.n	800c3ea <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c3d8:	4b0a      	ldr	r3, [pc, #40]	; (800c404 <_LCD_SendData+0x60>)
 800c3da:	695b      	ldr	r3, [r3, #20]
 800c3dc:	4a09      	ldr	r2, [pc, #36]	; (800c404 <_LCD_SendData+0x60>)
 800c3de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c3e2:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	3301      	adds	r3, #1
 800c3e8:	60fb      	str	r3, [r7, #12]
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	2b02      	cmp	r3, #2
 800c3ee:	ddf3      	ble.n	800c3d8 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800c3f0:	4b04      	ldr	r3, [pc, #16]	; (800c404 <_LCD_SendData+0x60>)
 800c3f2:	695b      	ldr	r3, [r3, #20]
 800c3f4:	4a03      	ldr	r2, [pc, #12]	; (800c404 <_LCD_SendData+0x60>)
 800c3f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c3fa:	6153      	str	r3, [r2, #20]
}
 800c3fc:	bf00      	nop
 800c3fe:	3710      	adds	r7, #16
 800c400:	46bd      	mov	sp, r7
 800c402:	bd80      	pop	{r7, pc}
 800c404:	48000400 	.word	0x48000400

0800c408 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800c408:	b480      	push	{r7}
 800c40a:	b085      	sub	sp, #20
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	4603      	mov	r3, r0
 800c410:	71fb      	strb	r3, [r7, #7]
 800c412:	460b      	mov	r3, r1
 800c414:	71bb      	strb	r3, [r7, #6]
 800c416:	4613      	mov	r3, r2
 800c418:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800c41a:	2300      	movs	r3, #0
 800c41c:	60fb      	str	r3, [r7, #12]
 800c41e:	e003      	b.n	800c428 <_SPI_SendByte+0x20>
   		asm("nop");
 800c420:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	3301      	adds	r3, #1
 800c426:	60fb      	str	r3, [r7, #12]
 800c428:	79bb      	ldrb	r3, [r7, #6]
 800c42a:	68fa      	ldr	r2, [r7, #12]
 800c42c:	429a      	cmp	r2, r3
 800c42e:	dbf7      	blt.n	800c420 <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800c430:	4b0c      	ldr	r3, [pc, #48]	; (800c464 <_SPI_SendByte+0x5c>)
 800c432:	689b      	ldr	r3, [r3, #8]
 800c434:	f003 0302 	and.w	r3, r3, #2
 800c438:	2b02      	cmp	r3, #2
 800c43a:	d102      	bne.n	800c442 <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 800c43c:	4a0a      	ldr	r2, [pc, #40]	; (800c468 <_SPI_SendByte+0x60>)
 800c43e:	79fb      	ldrb	r3, [r7, #7]
 800c440:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800c442:	2300      	movs	r3, #0
 800c444:	60bb      	str	r3, [r7, #8]
 800c446:	e003      	b.n	800c450 <_SPI_SendByte+0x48>
   		asm("nop");
 800c448:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800c44a:	68bb      	ldr	r3, [r7, #8]
 800c44c:	3301      	adds	r3, #1
 800c44e:	60bb      	str	r3, [r7, #8]
 800c450:	797b      	ldrb	r3, [r7, #5]
 800c452:	68ba      	ldr	r2, [r7, #8]
 800c454:	429a      	cmp	r2, r3
 800c456:	dbf7      	blt.n	800c448 <_SPI_SendByte+0x40>

#endif

}
 800c458:	bf00      	nop
 800c45a:	3714      	adds	r7, #20
 800c45c:	46bd      	mov	sp, r7
 800c45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c462:	4770      	bx	lr
 800c464:	40003c00 	.word	0x40003c00
 800c468:	40003c0c 	.word	0x40003c0c

0800c46c <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800c46c:	b480      	push	{r7}
 800c46e:	b089      	sub	sp, #36	; 0x24
 800c470:	af00      	add	r7, sp, #0
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	60b9      	str	r1, [r7, #8]
 800c476:	4611      	mov	r1, r2
 800c478:	461a      	mov	r2, r3
 800c47a:	460b      	mov	r3, r1
 800c47c:	71fb      	strb	r3, [r7, #7]
 800c47e:	4613      	mov	r3, r2
 800c480:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800c482:	2300      	movs	r3, #0
 800c484:	61fb      	str	r3, [r7, #28]
 800c486:	e003      	b.n	800c490 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 800c488:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800c48a:	69fb      	ldr	r3, [r7, #28]
 800c48c:	3301      	adds	r3, #1
 800c48e:	61fb      	str	r3, [r7, #28]
 800c490:	79fb      	ldrb	r3, [r7, #7]
 800c492:	69fa      	ldr	r2, [r7, #28]
 800c494:	429a      	cmp	r2, r3
 800c496:	dbf7      	blt.n	800c488 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 800c49c:	e01d      	b.n	800c4da <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800c49e:	4b1c      	ldr	r3, [pc, #112]	; (800c510 <_SPI_SendByteMultiByte+0xa4>)
 800c4a0:	689b      	ldr	r3, [r3, #8]
 800c4a2:	f003 0302 	and.w	r3, r3, #2
 800c4a6:	2b02      	cmp	r3, #2
 800c4a8:	d117      	bne.n	800c4da <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 800c4aa:	68bb      	ldr	r3, [r7, #8]
 800c4ac:	2b01      	cmp	r3, #1
 800c4ae:	d90a      	bls.n	800c4c6 <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800c4b0:	69bb      	ldr	r3, [r7, #24]
 800c4b2:	881a      	ldrh	r2, [r3, #0]
 800c4b4:	4b16      	ldr	r3, [pc, #88]	; (800c510 <_SPI_SendByteMultiByte+0xa4>)
 800c4b6:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 800c4b8:	69bb      	ldr	r3, [r7, #24]
 800c4ba:	3302      	adds	r3, #2
 800c4bc:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	3b02      	subs	r3, #2
 800c4c2:	60bb      	str	r3, [r7, #8]
 800c4c4:	e009      	b.n	800c4da <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 800c4c6:	4a13      	ldr	r2, [pc, #76]	; (800c514 <_SPI_SendByteMultiByte+0xa8>)
 800c4c8:	69bb      	ldr	r3, [r7, #24]
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 800c4ce:	69bb      	ldr	r3, [r7, #24]
 800c4d0:	3301      	adds	r3, #1
 800c4d2:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	3b01      	subs	r3, #1
 800c4d8:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 800c4da:	68bb      	ldr	r3, [r7, #8]
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	d1de      	bne.n	800c49e <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800c4e0:	4b0b      	ldr	r3, [pc, #44]	; (800c510 <_SPI_SendByteMultiByte+0xa4>)
 800c4e2:	689b      	ldr	r3, [r3, #8]
 800c4e4:	4a0a      	ldr	r2, [pc, #40]	; (800c510 <_SPI_SendByteMultiByte+0xa4>)
 800c4e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4ea:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800c4ec:	2300      	movs	r3, #0
 800c4ee:	617b      	str	r3, [r7, #20]
 800c4f0:	e003      	b.n	800c4fa <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 800c4f2:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800c4f4:	697b      	ldr	r3, [r7, #20]
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	617b      	str	r3, [r7, #20]
 800c4fa:	79bb      	ldrb	r3, [r7, #6]
 800c4fc:	697a      	ldr	r2, [r7, #20]
 800c4fe:	429a      	cmp	r2, r3
 800c500:	dbf7      	blt.n	800c4f2 <_SPI_SendByteMultiByte+0x86>

#endif

}
 800c502:	bf00      	nop
 800c504:	3724      	adds	r7, #36	; 0x24
 800c506:	46bd      	mov	sp, r7
 800c508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50c:	4770      	bx	lr
 800c50e:	bf00      	nop
 800c510:	40003c00 	.word	0x40003c00
 800c514:	40003c0c 	.word	0x40003c0c

0800c518 <__errno>:
 800c518:	4b01      	ldr	r3, [pc, #4]	; (800c520 <__errno+0x8>)
 800c51a:	6818      	ldr	r0, [r3, #0]
 800c51c:	4770      	bx	lr
 800c51e:	bf00      	nop
 800c520:	20001c90 	.word	0x20001c90

0800c524 <__libc_init_array>:
 800c524:	b570      	push	{r4, r5, r6, lr}
 800c526:	4e0d      	ldr	r6, [pc, #52]	; (800c55c <__libc_init_array+0x38>)
 800c528:	4c0d      	ldr	r4, [pc, #52]	; (800c560 <__libc_init_array+0x3c>)
 800c52a:	1ba4      	subs	r4, r4, r6
 800c52c:	10a4      	asrs	r4, r4, #2
 800c52e:	2500      	movs	r5, #0
 800c530:	42a5      	cmp	r5, r4
 800c532:	d109      	bne.n	800c548 <__libc_init_array+0x24>
 800c534:	4e0b      	ldr	r6, [pc, #44]	; (800c564 <__libc_init_array+0x40>)
 800c536:	4c0c      	ldr	r4, [pc, #48]	; (800c568 <__libc_init_array+0x44>)
 800c538:	f002 fc32 	bl	800eda0 <_init>
 800c53c:	1ba4      	subs	r4, r4, r6
 800c53e:	10a4      	asrs	r4, r4, #2
 800c540:	2500      	movs	r5, #0
 800c542:	42a5      	cmp	r5, r4
 800c544:	d105      	bne.n	800c552 <__libc_init_array+0x2e>
 800c546:	bd70      	pop	{r4, r5, r6, pc}
 800c548:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c54c:	4798      	blx	r3
 800c54e:	3501      	adds	r5, #1
 800c550:	e7ee      	b.n	800c530 <__libc_init_array+0xc>
 800c552:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800c556:	4798      	blx	r3
 800c558:	3501      	adds	r5, #1
 800c55a:	e7f2      	b.n	800c542 <__libc_init_array+0x1e>
 800c55c:	0800fdd8 	.word	0x0800fdd8
 800c560:	0800fdd8 	.word	0x0800fdd8
 800c564:	0800fdd8 	.word	0x0800fdd8
 800c568:	0800fddc 	.word	0x0800fddc

0800c56c <memset>:
 800c56c:	4402      	add	r2, r0
 800c56e:	4603      	mov	r3, r0
 800c570:	4293      	cmp	r3, r2
 800c572:	d100      	bne.n	800c576 <memset+0xa>
 800c574:	4770      	bx	lr
 800c576:	f803 1b01 	strb.w	r1, [r3], #1
 800c57a:	e7f9      	b.n	800c570 <memset+0x4>

0800c57c <__cvt>:
 800c57c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c580:	ec55 4b10 	vmov	r4, r5, d0
 800c584:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800c586:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c58a:	2d00      	cmp	r5, #0
 800c58c:	460e      	mov	r6, r1
 800c58e:	4691      	mov	r9, r2
 800c590:	4619      	mov	r1, r3
 800c592:	bfb8      	it	lt
 800c594:	4622      	movlt	r2, r4
 800c596:	462b      	mov	r3, r5
 800c598:	f027 0720 	bic.w	r7, r7, #32
 800c59c:	bfbb      	ittet	lt
 800c59e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c5a2:	461d      	movlt	r5, r3
 800c5a4:	2300      	movge	r3, #0
 800c5a6:	232d      	movlt	r3, #45	; 0x2d
 800c5a8:	bfb8      	it	lt
 800c5aa:	4614      	movlt	r4, r2
 800c5ac:	2f46      	cmp	r7, #70	; 0x46
 800c5ae:	700b      	strb	r3, [r1, #0]
 800c5b0:	d004      	beq.n	800c5bc <__cvt+0x40>
 800c5b2:	2f45      	cmp	r7, #69	; 0x45
 800c5b4:	d100      	bne.n	800c5b8 <__cvt+0x3c>
 800c5b6:	3601      	adds	r6, #1
 800c5b8:	2102      	movs	r1, #2
 800c5ba:	e000      	b.n	800c5be <__cvt+0x42>
 800c5bc:	2103      	movs	r1, #3
 800c5be:	ab03      	add	r3, sp, #12
 800c5c0:	9301      	str	r3, [sp, #4]
 800c5c2:	ab02      	add	r3, sp, #8
 800c5c4:	9300      	str	r3, [sp, #0]
 800c5c6:	4632      	mov	r2, r6
 800c5c8:	4653      	mov	r3, sl
 800c5ca:	ec45 4b10 	vmov	d0, r4, r5
 800c5ce:	f000 fe27 	bl	800d220 <_dtoa_r>
 800c5d2:	2f47      	cmp	r7, #71	; 0x47
 800c5d4:	4680      	mov	r8, r0
 800c5d6:	d102      	bne.n	800c5de <__cvt+0x62>
 800c5d8:	f019 0f01 	tst.w	r9, #1
 800c5dc:	d026      	beq.n	800c62c <__cvt+0xb0>
 800c5de:	2f46      	cmp	r7, #70	; 0x46
 800c5e0:	eb08 0906 	add.w	r9, r8, r6
 800c5e4:	d111      	bne.n	800c60a <__cvt+0x8e>
 800c5e6:	f898 3000 	ldrb.w	r3, [r8]
 800c5ea:	2b30      	cmp	r3, #48	; 0x30
 800c5ec:	d10a      	bne.n	800c604 <__cvt+0x88>
 800c5ee:	2200      	movs	r2, #0
 800c5f0:	2300      	movs	r3, #0
 800c5f2:	4620      	mov	r0, r4
 800c5f4:	4629      	mov	r1, r5
 800c5f6:	f7f4 fa8f 	bl	8000b18 <__aeabi_dcmpeq>
 800c5fa:	b918      	cbnz	r0, 800c604 <__cvt+0x88>
 800c5fc:	f1c6 0601 	rsb	r6, r6, #1
 800c600:	f8ca 6000 	str.w	r6, [sl]
 800c604:	f8da 3000 	ldr.w	r3, [sl]
 800c608:	4499      	add	r9, r3
 800c60a:	2200      	movs	r2, #0
 800c60c:	2300      	movs	r3, #0
 800c60e:	4620      	mov	r0, r4
 800c610:	4629      	mov	r1, r5
 800c612:	f7f4 fa81 	bl	8000b18 <__aeabi_dcmpeq>
 800c616:	b938      	cbnz	r0, 800c628 <__cvt+0xac>
 800c618:	2230      	movs	r2, #48	; 0x30
 800c61a:	9b03      	ldr	r3, [sp, #12]
 800c61c:	454b      	cmp	r3, r9
 800c61e:	d205      	bcs.n	800c62c <__cvt+0xb0>
 800c620:	1c59      	adds	r1, r3, #1
 800c622:	9103      	str	r1, [sp, #12]
 800c624:	701a      	strb	r2, [r3, #0]
 800c626:	e7f8      	b.n	800c61a <__cvt+0x9e>
 800c628:	f8cd 900c 	str.w	r9, [sp, #12]
 800c62c:	9b03      	ldr	r3, [sp, #12]
 800c62e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c630:	eba3 0308 	sub.w	r3, r3, r8
 800c634:	4640      	mov	r0, r8
 800c636:	6013      	str	r3, [r2, #0]
 800c638:	b004      	add	sp, #16
 800c63a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800c63e <__exponent>:
 800c63e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c640:	2900      	cmp	r1, #0
 800c642:	4604      	mov	r4, r0
 800c644:	bfba      	itte	lt
 800c646:	4249      	neglt	r1, r1
 800c648:	232d      	movlt	r3, #45	; 0x2d
 800c64a:	232b      	movge	r3, #43	; 0x2b
 800c64c:	2909      	cmp	r1, #9
 800c64e:	f804 2b02 	strb.w	r2, [r4], #2
 800c652:	7043      	strb	r3, [r0, #1]
 800c654:	dd20      	ble.n	800c698 <__exponent+0x5a>
 800c656:	f10d 0307 	add.w	r3, sp, #7
 800c65a:	461f      	mov	r7, r3
 800c65c:	260a      	movs	r6, #10
 800c65e:	fb91 f5f6 	sdiv	r5, r1, r6
 800c662:	fb06 1115 	mls	r1, r6, r5, r1
 800c666:	3130      	adds	r1, #48	; 0x30
 800c668:	2d09      	cmp	r5, #9
 800c66a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c66e:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800c672:	4629      	mov	r1, r5
 800c674:	dc09      	bgt.n	800c68a <__exponent+0x4c>
 800c676:	3130      	adds	r1, #48	; 0x30
 800c678:	3b02      	subs	r3, #2
 800c67a:	f802 1c01 	strb.w	r1, [r2, #-1]
 800c67e:	42bb      	cmp	r3, r7
 800c680:	4622      	mov	r2, r4
 800c682:	d304      	bcc.n	800c68e <__exponent+0x50>
 800c684:	1a10      	subs	r0, r2, r0
 800c686:	b003      	add	sp, #12
 800c688:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c68a:	4613      	mov	r3, r2
 800c68c:	e7e7      	b.n	800c65e <__exponent+0x20>
 800c68e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c692:	f804 2b01 	strb.w	r2, [r4], #1
 800c696:	e7f2      	b.n	800c67e <__exponent+0x40>
 800c698:	2330      	movs	r3, #48	; 0x30
 800c69a:	4419      	add	r1, r3
 800c69c:	7083      	strb	r3, [r0, #2]
 800c69e:	1d02      	adds	r2, r0, #4
 800c6a0:	70c1      	strb	r1, [r0, #3]
 800c6a2:	e7ef      	b.n	800c684 <__exponent+0x46>

0800c6a4 <_printf_float>:
 800c6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6a8:	b08d      	sub	sp, #52	; 0x34
 800c6aa:	460c      	mov	r4, r1
 800c6ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800c6b0:	4616      	mov	r6, r2
 800c6b2:	461f      	mov	r7, r3
 800c6b4:	4605      	mov	r5, r0
 800c6b6:	f001 fce5 	bl	800e084 <_localeconv_r>
 800c6ba:	6803      	ldr	r3, [r0, #0]
 800c6bc:	9304      	str	r3, [sp, #16]
 800c6be:	4618      	mov	r0, r3
 800c6c0:	f7f3 fdae 	bl	8000220 <strlen>
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	930a      	str	r3, [sp, #40]	; 0x28
 800c6c8:	f8d8 3000 	ldr.w	r3, [r8]
 800c6cc:	9005      	str	r0, [sp, #20]
 800c6ce:	3307      	adds	r3, #7
 800c6d0:	f023 0307 	bic.w	r3, r3, #7
 800c6d4:	f103 0208 	add.w	r2, r3, #8
 800c6d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c6dc:	f8d4 b000 	ldr.w	fp, [r4]
 800c6e0:	f8c8 2000 	str.w	r2, [r8]
 800c6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c6e8:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c6ec:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c6f0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c6f4:	9307      	str	r3, [sp, #28]
 800c6f6:	f8cd 8018 	str.w	r8, [sp, #24]
 800c6fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c6fe:	4ba7      	ldr	r3, [pc, #668]	; (800c99c <_printf_float+0x2f8>)
 800c700:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c704:	f7f4 fa3a 	bl	8000b7c <__aeabi_dcmpun>
 800c708:	bb70      	cbnz	r0, 800c768 <_printf_float+0xc4>
 800c70a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c70e:	4ba3      	ldr	r3, [pc, #652]	; (800c99c <_printf_float+0x2f8>)
 800c710:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c714:	f7f4 fa14 	bl	8000b40 <__aeabi_dcmple>
 800c718:	bb30      	cbnz	r0, 800c768 <_printf_float+0xc4>
 800c71a:	2200      	movs	r2, #0
 800c71c:	2300      	movs	r3, #0
 800c71e:	4640      	mov	r0, r8
 800c720:	4649      	mov	r1, r9
 800c722:	f7f4 fa03 	bl	8000b2c <__aeabi_dcmplt>
 800c726:	b110      	cbz	r0, 800c72e <_printf_float+0x8a>
 800c728:	232d      	movs	r3, #45	; 0x2d
 800c72a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c72e:	4a9c      	ldr	r2, [pc, #624]	; (800c9a0 <_printf_float+0x2fc>)
 800c730:	4b9c      	ldr	r3, [pc, #624]	; (800c9a4 <_printf_float+0x300>)
 800c732:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c736:	bf8c      	ite	hi
 800c738:	4690      	movhi	r8, r2
 800c73a:	4698      	movls	r8, r3
 800c73c:	2303      	movs	r3, #3
 800c73e:	f02b 0204 	bic.w	r2, fp, #4
 800c742:	6123      	str	r3, [r4, #16]
 800c744:	6022      	str	r2, [r4, #0]
 800c746:	f04f 0900 	mov.w	r9, #0
 800c74a:	9700      	str	r7, [sp, #0]
 800c74c:	4633      	mov	r3, r6
 800c74e:	aa0b      	add	r2, sp, #44	; 0x2c
 800c750:	4621      	mov	r1, r4
 800c752:	4628      	mov	r0, r5
 800c754:	f000 f9e6 	bl	800cb24 <_printf_common>
 800c758:	3001      	adds	r0, #1
 800c75a:	f040 808d 	bne.w	800c878 <_printf_float+0x1d4>
 800c75e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800c762:	b00d      	add	sp, #52	; 0x34
 800c764:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c768:	4642      	mov	r2, r8
 800c76a:	464b      	mov	r3, r9
 800c76c:	4640      	mov	r0, r8
 800c76e:	4649      	mov	r1, r9
 800c770:	f7f4 fa04 	bl	8000b7c <__aeabi_dcmpun>
 800c774:	b110      	cbz	r0, 800c77c <_printf_float+0xd8>
 800c776:	4a8c      	ldr	r2, [pc, #560]	; (800c9a8 <_printf_float+0x304>)
 800c778:	4b8c      	ldr	r3, [pc, #560]	; (800c9ac <_printf_float+0x308>)
 800c77a:	e7da      	b.n	800c732 <_printf_float+0x8e>
 800c77c:	6861      	ldr	r1, [r4, #4]
 800c77e:	1c4b      	adds	r3, r1, #1
 800c780:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800c784:	a80a      	add	r0, sp, #40	; 0x28
 800c786:	d13e      	bne.n	800c806 <_printf_float+0x162>
 800c788:	2306      	movs	r3, #6
 800c78a:	6063      	str	r3, [r4, #4]
 800c78c:	2300      	movs	r3, #0
 800c78e:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800c792:	ab09      	add	r3, sp, #36	; 0x24
 800c794:	9300      	str	r3, [sp, #0]
 800c796:	ec49 8b10 	vmov	d0, r8, r9
 800c79a:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c79e:	6022      	str	r2, [r4, #0]
 800c7a0:	f8cd a004 	str.w	sl, [sp, #4]
 800c7a4:	6861      	ldr	r1, [r4, #4]
 800c7a6:	4628      	mov	r0, r5
 800c7a8:	f7ff fee8 	bl	800c57c <__cvt>
 800c7ac:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800c7b0:	2b47      	cmp	r3, #71	; 0x47
 800c7b2:	4680      	mov	r8, r0
 800c7b4:	d109      	bne.n	800c7ca <_printf_float+0x126>
 800c7b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c7b8:	1cd8      	adds	r0, r3, #3
 800c7ba:	db02      	blt.n	800c7c2 <_printf_float+0x11e>
 800c7bc:	6862      	ldr	r2, [r4, #4]
 800c7be:	4293      	cmp	r3, r2
 800c7c0:	dd47      	ble.n	800c852 <_printf_float+0x1ae>
 800c7c2:	f1aa 0a02 	sub.w	sl, sl, #2
 800c7c6:	fa5f fa8a 	uxtb.w	sl, sl
 800c7ca:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c7ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c7d0:	d824      	bhi.n	800c81c <_printf_float+0x178>
 800c7d2:	3901      	subs	r1, #1
 800c7d4:	4652      	mov	r2, sl
 800c7d6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c7da:	9109      	str	r1, [sp, #36]	; 0x24
 800c7dc:	f7ff ff2f 	bl	800c63e <__exponent>
 800c7e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c7e2:	1813      	adds	r3, r2, r0
 800c7e4:	2a01      	cmp	r2, #1
 800c7e6:	4681      	mov	r9, r0
 800c7e8:	6123      	str	r3, [r4, #16]
 800c7ea:	dc02      	bgt.n	800c7f2 <_printf_float+0x14e>
 800c7ec:	6822      	ldr	r2, [r4, #0]
 800c7ee:	07d1      	lsls	r1, r2, #31
 800c7f0:	d501      	bpl.n	800c7f6 <_printf_float+0x152>
 800c7f2:	3301      	adds	r3, #1
 800c7f4:	6123      	str	r3, [r4, #16]
 800c7f6:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d0a5      	beq.n	800c74a <_printf_float+0xa6>
 800c7fe:	232d      	movs	r3, #45	; 0x2d
 800c800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c804:	e7a1      	b.n	800c74a <_printf_float+0xa6>
 800c806:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800c80a:	f000 8177 	beq.w	800cafc <_printf_float+0x458>
 800c80e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800c812:	d1bb      	bne.n	800c78c <_printf_float+0xe8>
 800c814:	2900      	cmp	r1, #0
 800c816:	d1b9      	bne.n	800c78c <_printf_float+0xe8>
 800c818:	2301      	movs	r3, #1
 800c81a:	e7b6      	b.n	800c78a <_printf_float+0xe6>
 800c81c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800c820:	d119      	bne.n	800c856 <_printf_float+0x1b2>
 800c822:	2900      	cmp	r1, #0
 800c824:	6863      	ldr	r3, [r4, #4]
 800c826:	dd0c      	ble.n	800c842 <_printf_float+0x19e>
 800c828:	6121      	str	r1, [r4, #16]
 800c82a:	b913      	cbnz	r3, 800c832 <_printf_float+0x18e>
 800c82c:	6822      	ldr	r2, [r4, #0]
 800c82e:	07d2      	lsls	r2, r2, #31
 800c830:	d502      	bpl.n	800c838 <_printf_float+0x194>
 800c832:	3301      	adds	r3, #1
 800c834:	440b      	add	r3, r1
 800c836:	6123      	str	r3, [r4, #16]
 800c838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c83a:	65a3      	str	r3, [r4, #88]	; 0x58
 800c83c:	f04f 0900 	mov.w	r9, #0
 800c840:	e7d9      	b.n	800c7f6 <_printf_float+0x152>
 800c842:	b913      	cbnz	r3, 800c84a <_printf_float+0x1a6>
 800c844:	6822      	ldr	r2, [r4, #0]
 800c846:	07d0      	lsls	r0, r2, #31
 800c848:	d501      	bpl.n	800c84e <_printf_float+0x1aa>
 800c84a:	3302      	adds	r3, #2
 800c84c:	e7f3      	b.n	800c836 <_printf_float+0x192>
 800c84e:	2301      	movs	r3, #1
 800c850:	e7f1      	b.n	800c836 <_printf_float+0x192>
 800c852:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800c856:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800c85a:	4293      	cmp	r3, r2
 800c85c:	db05      	blt.n	800c86a <_printf_float+0x1c6>
 800c85e:	6822      	ldr	r2, [r4, #0]
 800c860:	6123      	str	r3, [r4, #16]
 800c862:	07d1      	lsls	r1, r2, #31
 800c864:	d5e8      	bpl.n	800c838 <_printf_float+0x194>
 800c866:	3301      	adds	r3, #1
 800c868:	e7e5      	b.n	800c836 <_printf_float+0x192>
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	bfd4      	ite	le
 800c86e:	f1c3 0302 	rsble	r3, r3, #2
 800c872:	2301      	movgt	r3, #1
 800c874:	4413      	add	r3, r2
 800c876:	e7de      	b.n	800c836 <_printf_float+0x192>
 800c878:	6823      	ldr	r3, [r4, #0]
 800c87a:	055a      	lsls	r2, r3, #21
 800c87c:	d407      	bmi.n	800c88e <_printf_float+0x1ea>
 800c87e:	6923      	ldr	r3, [r4, #16]
 800c880:	4642      	mov	r2, r8
 800c882:	4631      	mov	r1, r6
 800c884:	4628      	mov	r0, r5
 800c886:	47b8      	blx	r7
 800c888:	3001      	adds	r0, #1
 800c88a:	d12b      	bne.n	800c8e4 <_printf_float+0x240>
 800c88c:	e767      	b.n	800c75e <_printf_float+0xba>
 800c88e:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800c892:	f240 80dc 	bls.w	800ca4e <_printf_float+0x3aa>
 800c896:	2200      	movs	r2, #0
 800c898:	2300      	movs	r3, #0
 800c89a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c89e:	f7f4 f93b 	bl	8000b18 <__aeabi_dcmpeq>
 800c8a2:	2800      	cmp	r0, #0
 800c8a4:	d033      	beq.n	800c90e <_printf_float+0x26a>
 800c8a6:	2301      	movs	r3, #1
 800c8a8:	4a41      	ldr	r2, [pc, #260]	; (800c9b0 <_printf_float+0x30c>)
 800c8aa:	4631      	mov	r1, r6
 800c8ac:	4628      	mov	r0, r5
 800c8ae:	47b8      	blx	r7
 800c8b0:	3001      	adds	r0, #1
 800c8b2:	f43f af54 	beq.w	800c75e <_printf_float+0xba>
 800c8b6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c8ba:	429a      	cmp	r2, r3
 800c8bc:	db02      	blt.n	800c8c4 <_printf_float+0x220>
 800c8be:	6823      	ldr	r3, [r4, #0]
 800c8c0:	07d8      	lsls	r0, r3, #31
 800c8c2:	d50f      	bpl.n	800c8e4 <_printf_float+0x240>
 800c8c4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c8c8:	4631      	mov	r1, r6
 800c8ca:	4628      	mov	r0, r5
 800c8cc:	47b8      	blx	r7
 800c8ce:	3001      	adds	r0, #1
 800c8d0:	f43f af45 	beq.w	800c75e <_printf_float+0xba>
 800c8d4:	f04f 0800 	mov.w	r8, #0
 800c8d8:	f104 091a 	add.w	r9, r4, #26
 800c8dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8de:	3b01      	subs	r3, #1
 800c8e0:	4543      	cmp	r3, r8
 800c8e2:	dc09      	bgt.n	800c8f8 <_printf_float+0x254>
 800c8e4:	6823      	ldr	r3, [r4, #0]
 800c8e6:	079b      	lsls	r3, r3, #30
 800c8e8:	f100 8103 	bmi.w	800caf2 <_printf_float+0x44e>
 800c8ec:	68e0      	ldr	r0, [r4, #12]
 800c8ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c8f0:	4298      	cmp	r0, r3
 800c8f2:	bfb8      	it	lt
 800c8f4:	4618      	movlt	r0, r3
 800c8f6:	e734      	b.n	800c762 <_printf_float+0xbe>
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	464a      	mov	r2, r9
 800c8fc:	4631      	mov	r1, r6
 800c8fe:	4628      	mov	r0, r5
 800c900:	47b8      	blx	r7
 800c902:	3001      	adds	r0, #1
 800c904:	f43f af2b 	beq.w	800c75e <_printf_float+0xba>
 800c908:	f108 0801 	add.w	r8, r8, #1
 800c90c:	e7e6      	b.n	800c8dc <_printf_float+0x238>
 800c90e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c910:	2b00      	cmp	r3, #0
 800c912:	dc2b      	bgt.n	800c96c <_printf_float+0x2c8>
 800c914:	2301      	movs	r3, #1
 800c916:	4a26      	ldr	r2, [pc, #152]	; (800c9b0 <_printf_float+0x30c>)
 800c918:	4631      	mov	r1, r6
 800c91a:	4628      	mov	r0, r5
 800c91c:	47b8      	blx	r7
 800c91e:	3001      	adds	r0, #1
 800c920:	f43f af1d 	beq.w	800c75e <_printf_float+0xba>
 800c924:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c926:	b923      	cbnz	r3, 800c932 <_printf_float+0x28e>
 800c928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c92a:	b913      	cbnz	r3, 800c932 <_printf_float+0x28e>
 800c92c:	6823      	ldr	r3, [r4, #0]
 800c92e:	07d9      	lsls	r1, r3, #31
 800c930:	d5d8      	bpl.n	800c8e4 <_printf_float+0x240>
 800c932:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c936:	4631      	mov	r1, r6
 800c938:	4628      	mov	r0, r5
 800c93a:	47b8      	blx	r7
 800c93c:	3001      	adds	r0, #1
 800c93e:	f43f af0e 	beq.w	800c75e <_printf_float+0xba>
 800c942:	f04f 0900 	mov.w	r9, #0
 800c946:	f104 0a1a 	add.w	sl, r4, #26
 800c94a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c94c:	425b      	negs	r3, r3
 800c94e:	454b      	cmp	r3, r9
 800c950:	dc01      	bgt.n	800c956 <_printf_float+0x2b2>
 800c952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c954:	e794      	b.n	800c880 <_printf_float+0x1dc>
 800c956:	2301      	movs	r3, #1
 800c958:	4652      	mov	r2, sl
 800c95a:	4631      	mov	r1, r6
 800c95c:	4628      	mov	r0, r5
 800c95e:	47b8      	blx	r7
 800c960:	3001      	adds	r0, #1
 800c962:	f43f aefc 	beq.w	800c75e <_printf_float+0xba>
 800c966:	f109 0901 	add.w	r9, r9, #1
 800c96a:	e7ee      	b.n	800c94a <_printf_float+0x2a6>
 800c96c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c96e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c970:	429a      	cmp	r2, r3
 800c972:	bfa8      	it	ge
 800c974:	461a      	movge	r2, r3
 800c976:	2a00      	cmp	r2, #0
 800c978:	4691      	mov	r9, r2
 800c97a:	dd07      	ble.n	800c98c <_printf_float+0x2e8>
 800c97c:	4613      	mov	r3, r2
 800c97e:	4631      	mov	r1, r6
 800c980:	4642      	mov	r2, r8
 800c982:	4628      	mov	r0, r5
 800c984:	47b8      	blx	r7
 800c986:	3001      	adds	r0, #1
 800c988:	f43f aee9 	beq.w	800c75e <_printf_float+0xba>
 800c98c:	f104 031a 	add.w	r3, r4, #26
 800c990:	f04f 0b00 	mov.w	fp, #0
 800c994:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c998:	9306      	str	r3, [sp, #24]
 800c99a:	e015      	b.n	800c9c8 <_printf_float+0x324>
 800c99c:	7fefffff 	.word	0x7fefffff
 800c9a0:	0800fb20 	.word	0x0800fb20
 800c9a4:	0800fb1c 	.word	0x0800fb1c
 800c9a8:	0800fb28 	.word	0x0800fb28
 800c9ac:	0800fb24 	.word	0x0800fb24
 800c9b0:	0800fb2c 	.word	0x0800fb2c
 800c9b4:	2301      	movs	r3, #1
 800c9b6:	9a06      	ldr	r2, [sp, #24]
 800c9b8:	4631      	mov	r1, r6
 800c9ba:	4628      	mov	r0, r5
 800c9bc:	47b8      	blx	r7
 800c9be:	3001      	adds	r0, #1
 800c9c0:	f43f aecd 	beq.w	800c75e <_printf_float+0xba>
 800c9c4:	f10b 0b01 	add.w	fp, fp, #1
 800c9c8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800c9cc:	ebaa 0309 	sub.w	r3, sl, r9
 800c9d0:	455b      	cmp	r3, fp
 800c9d2:	dcef      	bgt.n	800c9b4 <_printf_float+0x310>
 800c9d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c9d8:	429a      	cmp	r2, r3
 800c9da:	44d0      	add	r8, sl
 800c9dc:	db15      	blt.n	800ca0a <_printf_float+0x366>
 800c9de:	6823      	ldr	r3, [r4, #0]
 800c9e0:	07da      	lsls	r2, r3, #31
 800c9e2:	d412      	bmi.n	800ca0a <_printf_float+0x366>
 800c9e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9e6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c9e8:	eba3 020a 	sub.w	r2, r3, sl
 800c9ec:	eba3 0a01 	sub.w	sl, r3, r1
 800c9f0:	4592      	cmp	sl, r2
 800c9f2:	bfa8      	it	ge
 800c9f4:	4692      	movge	sl, r2
 800c9f6:	f1ba 0f00 	cmp.w	sl, #0
 800c9fa:	dc0e      	bgt.n	800ca1a <_printf_float+0x376>
 800c9fc:	f04f 0800 	mov.w	r8, #0
 800ca00:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ca04:	f104 091a 	add.w	r9, r4, #26
 800ca08:	e019      	b.n	800ca3e <_printf_float+0x39a>
 800ca0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca0e:	4631      	mov	r1, r6
 800ca10:	4628      	mov	r0, r5
 800ca12:	47b8      	blx	r7
 800ca14:	3001      	adds	r0, #1
 800ca16:	d1e5      	bne.n	800c9e4 <_printf_float+0x340>
 800ca18:	e6a1      	b.n	800c75e <_printf_float+0xba>
 800ca1a:	4653      	mov	r3, sl
 800ca1c:	4642      	mov	r2, r8
 800ca1e:	4631      	mov	r1, r6
 800ca20:	4628      	mov	r0, r5
 800ca22:	47b8      	blx	r7
 800ca24:	3001      	adds	r0, #1
 800ca26:	d1e9      	bne.n	800c9fc <_printf_float+0x358>
 800ca28:	e699      	b.n	800c75e <_printf_float+0xba>
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	464a      	mov	r2, r9
 800ca2e:	4631      	mov	r1, r6
 800ca30:	4628      	mov	r0, r5
 800ca32:	47b8      	blx	r7
 800ca34:	3001      	adds	r0, #1
 800ca36:	f43f ae92 	beq.w	800c75e <_printf_float+0xba>
 800ca3a:	f108 0801 	add.w	r8, r8, #1
 800ca3e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca42:	1a9b      	subs	r3, r3, r2
 800ca44:	eba3 030a 	sub.w	r3, r3, sl
 800ca48:	4543      	cmp	r3, r8
 800ca4a:	dcee      	bgt.n	800ca2a <_printf_float+0x386>
 800ca4c:	e74a      	b.n	800c8e4 <_printf_float+0x240>
 800ca4e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca50:	2a01      	cmp	r2, #1
 800ca52:	dc01      	bgt.n	800ca58 <_printf_float+0x3b4>
 800ca54:	07db      	lsls	r3, r3, #31
 800ca56:	d53a      	bpl.n	800cace <_printf_float+0x42a>
 800ca58:	2301      	movs	r3, #1
 800ca5a:	4642      	mov	r2, r8
 800ca5c:	4631      	mov	r1, r6
 800ca5e:	4628      	mov	r0, r5
 800ca60:	47b8      	blx	r7
 800ca62:	3001      	adds	r0, #1
 800ca64:	f43f ae7b 	beq.w	800c75e <_printf_float+0xba>
 800ca68:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ca6c:	4631      	mov	r1, r6
 800ca6e:	4628      	mov	r0, r5
 800ca70:	47b8      	blx	r7
 800ca72:	3001      	adds	r0, #1
 800ca74:	f108 0801 	add.w	r8, r8, #1
 800ca78:	f43f ae71 	beq.w	800c75e <_printf_float+0xba>
 800ca7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca7e:	2200      	movs	r2, #0
 800ca80:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800ca84:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ca88:	2300      	movs	r3, #0
 800ca8a:	f7f4 f845 	bl	8000b18 <__aeabi_dcmpeq>
 800ca8e:	b9c8      	cbnz	r0, 800cac4 <_printf_float+0x420>
 800ca90:	4653      	mov	r3, sl
 800ca92:	4642      	mov	r2, r8
 800ca94:	4631      	mov	r1, r6
 800ca96:	4628      	mov	r0, r5
 800ca98:	47b8      	blx	r7
 800ca9a:	3001      	adds	r0, #1
 800ca9c:	d10e      	bne.n	800cabc <_printf_float+0x418>
 800ca9e:	e65e      	b.n	800c75e <_printf_float+0xba>
 800caa0:	2301      	movs	r3, #1
 800caa2:	4652      	mov	r2, sl
 800caa4:	4631      	mov	r1, r6
 800caa6:	4628      	mov	r0, r5
 800caa8:	47b8      	blx	r7
 800caaa:	3001      	adds	r0, #1
 800caac:	f43f ae57 	beq.w	800c75e <_printf_float+0xba>
 800cab0:	f108 0801 	add.w	r8, r8, #1
 800cab4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cab6:	3b01      	subs	r3, #1
 800cab8:	4543      	cmp	r3, r8
 800caba:	dcf1      	bgt.n	800caa0 <_printf_float+0x3fc>
 800cabc:	464b      	mov	r3, r9
 800cabe:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cac2:	e6de      	b.n	800c882 <_printf_float+0x1de>
 800cac4:	f04f 0800 	mov.w	r8, #0
 800cac8:	f104 0a1a 	add.w	sl, r4, #26
 800cacc:	e7f2      	b.n	800cab4 <_printf_float+0x410>
 800cace:	2301      	movs	r3, #1
 800cad0:	e7df      	b.n	800ca92 <_printf_float+0x3ee>
 800cad2:	2301      	movs	r3, #1
 800cad4:	464a      	mov	r2, r9
 800cad6:	4631      	mov	r1, r6
 800cad8:	4628      	mov	r0, r5
 800cada:	47b8      	blx	r7
 800cadc:	3001      	adds	r0, #1
 800cade:	f43f ae3e 	beq.w	800c75e <_printf_float+0xba>
 800cae2:	f108 0801 	add.w	r8, r8, #1
 800cae6:	68e3      	ldr	r3, [r4, #12]
 800cae8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800caea:	1a9b      	subs	r3, r3, r2
 800caec:	4543      	cmp	r3, r8
 800caee:	dcf0      	bgt.n	800cad2 <_printf_float+0x42e>
 800caf0:	e6fc      	b.n	800c8ec <_printf_float+0x248>
 800caf2:	f04f 0800 	mov.w	r8, #0
 800caf6:	f104 0919 	add.w	r9, r4, #25
 800cafa:	e7f4      	b.n	800cae6 <_printf_float+0x442>
 800cafc:	2900      	cmp	r1, #0
 800cafe:	f43f ae8b 	beq.w	800c818 <_printf_float+0x174>
 800cb02:	2300      	movs	r3, #0
 800cb04:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800cb08:	ab09      	add	r3, sp, #36	; 0x24
 800cb0a:	9300      	str	r3, [sp, #0]
 800cb0c:	ec49 8b10 	vmov	d0, r8, r9
 800cb10:	6022      	str	r2, [r4, #0]
 800cb12:	f8cd a004 	str.w	sl, [sp, #4]
 800cb16:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cb1a:	4628      	mov	r0, r5
 800cb1c:	f7ff fd2e 	bl	800c57c <__cvt>
 800cb20:	4680      	mov	r8, r0
 800cb22:	e648      	b.n	800c7b6 <_printf_float+0x112>

0800cb24 <_printf_common>:
 800cb24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb28:	4691      	mov	r9, r2
 800cb2a:	461f      	mov	r7, r3
 800cb2c:	688a      	ldr	r2, [r1, #8]
 800cb2e:	690b      	ldr	r3, [r1, #16]
 800cb30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb34:	4293      	cmp	r3, r2
 800cb36:	bfb8      	it	lt
 800cb38:	4613      	movlt	r3, r2
 800cb3a:	f8c9 3000 	str.w	r3, [r9]
 800cb3e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb42:	4606      	mov	r6, r0
 800cb44:	460c      	mov	r4, r1
 800cb46:	b112      	cbz	r2, 800cb4e <_printf_common+0x2a>
 800cb48:	3301      	adds	r3, #1
 800cb4a:	f8c9 3000 	str.w	r3, [r9]
 800cb4e:	6823      	ldr	r3, [r4, #0]
 800cb50:	0699      	lsls	r1, r3, #26
 800cb52:	bf42      	ittt	mi
 800cb54:	f8d9 3000 	ldrmi.w	r3, [r9]
 800cb58:	3302      	addmi	r3, #2
 800cb5a:	f8c9 3000 	strmi.w	r3, [r9]
 800cb5e:	6825      	ldr	r5, [r4, #0]
 800cb60:	f015 0506 	ands.w	r5, r5, #6
 800cb64:	d107      	bne.n	800cb76 <_printf_common+0x52>
 800cb66:	f104 0a19 	add.w	sl, r4, #25
 800cb6a:	68e3      	ldr	r3, [r4, #12]
 800cb6c:	f8d9 2000 	ldr.w	r2, [r9]
 800cb70:	1a9b      	subs	r3, r3, r2
 800cb72:	42ab      	cmp	r3, r5
 800cb74:	dc28      	bgt.n	800cbc8 <_printf_common+0xa4>
 800cb76:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800cb7a:	6822      	ldr	r2, [r4, #0]
 800cb7c:	3300      	adds	r3, #0
 800cb7e:	bf18      	it	ne
 800cb80:	2301      	movne	r3, #1
 800cb82:	0692      	lsls	r2, r2, #26
 800cb84:	d42d      	bmi.n	800cbe2 <_printf_common+0xbe>
 800cb86:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cb8a:	4639      	mov	r1, r7
 800cb8c:	4630      	mov	r0, r6
 800cb8e:	47c0      	blx	r8
 800cb90:	3001      	adds	r0, #1
 800cb92:	d020      	beq.n	800cbd6 <_printf_common+0xb2>
 800cb94:	6823      	ldr	r3, [r4, #0]
 800cb96:	68e5      	ldr	r5, [r4, #12]
 800cb98:	f8d9 2000 	ldr.w	r2, [r9]
 800cb9c:	f003 0306 	and.w	r3, r3, #6
 800cba0:	2b04      	cmp	r3, #4
 800cba2:	bf08      	it	eq
 800cba4:	1aad      	subeq	r5, r5, r2
 800cba6:	68a3      	ldr	r3, [r4, #8]
 800cba8:	6922      	ldr	r2, [r4, #16]
 800cbaa:	bf0c      	ite	eq
 800cbac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cbb0:	2500      	movne	r5, #0
 800cbb2:	4293      	cmp	r3, r2
 800cbb4:	bfc4      	itt	gt
 800cbb6:	1a9b      	subgt	r3, r3, r2
 800cbb8:	18ed      	addgt	r5, r5, r3
 800cbba:	f04f 0900 	mov.w	r9, #0
 800cbbe:	341a      	adds	r4, #26
 800cbc0:	454d      	cmp	r5, r9
 800cbc2:	d11a      	bne.n	800cbfa <_printf_common+0xd6>
 800cbc4:	2000      	movs	r0, #0
 800cbc6:	e008      	b.n	800cbda <_printf_common+0xb6>
 800cbc8:	2301      	movs	r3, #1
 800cbca:	4652      	mov	r2, sl
 800cbcc:	4639      	mov	r1, r7
 800cbce:	4630      	mov	r0, r6
 800cbd0:	47c0      	blx	r8
 800cbd2:	3001      	adds	r0, #1
 800cbd4:	d103      	bne.n	800cbde <_printf_common+0xba>
 800cbd6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cbda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbde:	3501      	adds	r5, #1
 800cbe0:	e7c3      	b.n	800cb6a <_printf_common+0x46>
 800cbe2:	18e1      	adds	r1, r4, r3
 800cbe4:	1c5a      	adds	r2, r3, #1
 800cbe6:	2030      	movs	r0, #48	; 0x30
 800cbe8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cbec:	4422      	add	r2, r4
 800cbee:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cbf2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cbf6:	3302      	adds	r3, #2
 800cbf8:	e7c5      	b.n	800cb86 <_printf_common+0x62>
 800cbfa:	2301      	movs	r3, #1
 800cbfc:	4622      	mov	r2, r4
 800cbfe:	4639      	mov	r1, r7
 800cc00:	4630      	mov	r0, r6
 800cc02:	47c0      	blx	r8
 800cc04:	3001      	adds	r0, #1
 800cc06:	d0e6      	beq.n	800cbd6 <_printf_common+0xb2>
 800cc08:	f109 0901 	add.w	r9, r9, #1
 800cc0c:	e7d8      	b.n	800cbc0 <_printf_common+0x9c>
	...

0800cc10 <_printf_i>:
 800cc10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800cc14:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800cc18:	460c      	mov	r4, r1
 800cc1a:	7e09      	ldrb	r1, [r1, #24]
 800cc1c:	b085      	sub	sp, #20
 800cc1e:	296e      	cmp	r1, #110	; 0x6e
 800cc20:	4617      	mov	r7, r2
 800cc22:	4606      	mov	r6, r0
 800cc24:	4698      	mov	r8, r3
 800cc26:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc28:	f000 80b3 	beq.w	800cd92 <_printf_i+0x182>
 800cc2c:	d822      	bhi.n	800cc74 <_printf_i+0x64>
 800cc2e:	2963      	cmp	r1, #99	; 0x63
 800cc30:	d036      	beq.n	800cca0 <_printf_i+0x90>
 800cc32:	d80a      	bhi.n	800cc4a <_printf_i+0x3a>
 800cc34:	2900      	cmp	r1, #0
 800cc36:	f000 80b9 	beq.w	800cdac <_printf_i+0x19c>
 800cc3a:	2958      	cmp	r1, #88	; 0x58
 800cc3c:	f000 8083 	beq.w	800cd46 <_printf_i+0x136>
 800cc40:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc44:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800cc48:	e032      	b.n	800ccb0 <_printf_i+0xa0>
 800cc4a:	2964      	cmp	r1, #100	; 0x64
 800cc4c:	d001      	beq.n	800cc52 <_printf_i+0x42>
 800cc4e:	2969      	cmp	r1, #105	; 0x69
 800cc50:	d1f6      	bne.n	800cc40 <_printf_i+0x30>
 800cc52:	6820      	ldr	r0, [r4, #0]
 800cc54:	6813      	ldr	r3, [r2, #0]
 800cc56:	0605      	lsls	r5, r0, #24
 800cc58:	f103 0104 	add.w	r1, r3, #4
 800cc5c:	d52a      	bpl.n	800ccb4 <_printf_i+0xa4>
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	6011      	str	r1, [r2, #0]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	da03      	bge.n	800cc6e <_printf_i+0x5e>
 800cc66:	222d      	movs	r2, #45	; 0x2d
 800cc68:	425b      	negs	r3, r3
 800cc6a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800cc6e:	486f      	ldr	r0, [pc, #444]	; (800ce2c <_printf_i+0x21c>)
 800cc70:	220a      	movs	r2, #10
 800cc72:	e039      	b.n	800cce8 <_printf_i+0xd8>
 800cc74:	2973      	cmp	r1, #115	; 0x73
 800cc76:	f000 809d 	beq.w	800cdb4 <_printf_i+0x1a4>
 800cc7a:	d808      	bhi.n	800cc8e <_printf_i+0x7e>
 800cc7c:	296f      	cmp	r1, #111	; 0x6f
 800cc7e:	d020      	beq.n	800ccc2 <_printf_i+0xb2>
 800cc80:	2970      	cmp	r1, #112	; 0x70
 800cc82:	d1dd      	bne.n	800cc40 <_printf_i+0x30>
 800cc84:	6823      	ldr	r3, [r4, #0]
 800cc86:	f043 0320 	orr.w	r3, r3, #32
 800cc8a:	6023      	str	r3, [r4, #0]
 800cc8c:	e003      	b.n	800cc96 <_printf_i+0x86>
 800cc8e:	2975      	cmp	r1, #117	; 0x75
 800cc90:	d017      	beq.n	800ccc2 <_printf_i+0xb2>
 800cc92:	2978      	cmp	r1, #120	; 0x78
 800cc94:	d1d4      	bne.n	800cc40 <_printf_i+0x30>
 800cc96:	2378      	movs	r3, #120	; 0x78
 800cc98:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cc9c:	4864      	ldr	r0, [pc, #400]	; (800ce30 <_printf_i+0x220>)
 800cc9e:	e055      	b.n	800cd4c <_printf_i+0x13c>
 800cca0:	6813      	ldr	r3, [r2, #0]
 800cca2:	1d19      	adds	r1, r3, #4
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	6011      	str	r1, [r2, #0]
 800cca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ccac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	e08c      	b.n	800cdce <_printf_i+0x1be>
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	6011      	str	r1, [r2, #0]
 800ccb8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ccbc:	bf18      	it	ne
 800ccbe:	b21b      	sxthne	r3, r3
 800ccc0:	e7cf      	b.n	800cc62 <_printf_i+0x52>
 800ccc2:	6813      	ldr	r3, [r2, #0]
 800ccc4:	6825      	ldr	r5, [r4, #0]
 800ccc6:	1d18      	adds	r0, r3, #4
 800ccc8:	6010      	str	r0, [r2, #0]
 800ccca:	0628      	lsls	r0, r5, #24
 800cccc:	d501      	bpl.n	800ccd2 <_printf_i+0xc2>
 800ccce:	681b      	ldr	r3, [r3, #0]
 800ccd0:	e002      	b.n	800ccd8 <_printf_i+0xc8>
 800ccd2:	0668      	lsls	r0, r5, #25
 800ccd4:	d5fb      	bpl.n	800ccce <_printf_i+0xbe>
 800ccd6:	881b      	ldrh	r3, [r3, #0]
 800ccd8:	4854      	ldr	r0, [pc, #336]	; (800ce2c <_printf_i+0x21c>)
 800ccda:	296f      	cmp	r1, #111	; 0x6f
 800ccdc:	bf14      	ite	ne
 800ccde:	220a      	movne	r2, #10
 800cce0:	2208      	moveq	r2, #8
 800cce2:	2100      	movs	r1, #0
 800cce4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cce8:	6865      	ldr	r5, [r4, #4]
 800ccea:	60a5      	str	r5, [r4, #8]
 800ccec:	2d00      	cmp	r5, #0
 800ccee:	f2c0 8095 	blt.w	800ce1c <_printf_i+0x20c>
 800ccf2:	6821      	ldr	r1, [r4, #0]
 800ccf4:	f021 0104 	bic.w	r1, r1, #4
 800ccf8:	6021      	str	r1, [r4, #0]
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d13d      	bne.n	800cd7a <_printf_i+0x16a>
 800ccfe:	2d00      	cmp	r5, #0
 800cd00:	f040 808e 	bne.w	800ce20 <_printf_i+0x210>
 800cd04:	4665      	mov	r5, ip
 800cd06:	2a08      	cmp	r2, #8
 800cd08:	d10b      	bne.n	800cd22 <_printf_i+0x112>
 800cd0a:	6823      	ldr	r3, [r4, #0]
 800cd0c:	07db      	lsls	r3, r3, #31
 800cd0e:	d508      	bpl.n	800cd22 <_printf_i+0x112>
 800cd10:	6923      	ldr	r3, [r4, #16]
 800cd12:	6862      	ldr	r2, [r4, #4]
 800cd14:	429a      	cmp	r2, r3
 800cd16:	bfde      	ittt	le
 800cd18:	2330      	movle	r3, #48	; 0x30
 800cd1a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cd1e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800cd22:	ebac 0305 	sub.w	r3, ip, r5
 800cd26:	6123      	str	r3, [r4, #16]
 800cd28:	f8cd 8000 	str.w	r8, [sp]
 800cd2c:	463b      	mov	r3, r7
 800cd2e:	aa03      	add	r2, sp, #12
 800cd30:	4621      	mov	r1, r4
 800cd32:	4630      	mov	r0, r6
 800cd34:	f7ff fef6 	bl	800cb24 <_printf_common>
 800cd38:	3001      	adds	r0, #1
 800cd3a:	d14d      	bne.n	800cdd8 <_printf_i+0x1c8>
 800cd3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cd40:	b005      	add	sp, #20
 800cd42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cd46:	4839      	ldr	r0, [pc, #228]	; (800ce2c <_printf_i+0x21c>)
 800cd48:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800cd4c:	6813      	ldr	r3, [r2, #0]
 800cd4e:	6821      	ldr	r1, [r4, #0]
 800cd50:	1d1d      	adds	r5, r3, #4
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	6015      	str	r5, [r2, #0]
 800cd56:	060a      	lsls	r2, r1, #24
 800cd58:	d50b      	bpl.n	800cd72 <_printf_i+0x162>
 800cd5a:	07ca      	lsls	r2, r1, #31
 800cd5c:	bf44      	itt	mi
 800cd5e:	f041 0120 	orrmi.w	r1, r1, #32
 800cd62:	6021      	strmi	r1, [r4, #0]
 800cd64:	b91b      	cbnz	r3, 800cd6e <_printf_i+0x15e>
 800cd66:	6822      	ldr	r2, [r4, #0]
 800cd68:	f022 0220 	bic.w	r2, r2, #32
 800cd6c:	6022      	str	r2, [r4, #0]
 800cd6e:	2210      	movs	r2, #16
 800cd70:	e7b7      	b.n	800cce2 <_printf_i+0xd2>
 800cd72:	064d      	lsls	r5, r1, #25
 800cd74:	bf48      	it	mi
 800cd76:	b29b      	uxthmi	r3, r3
 800cd78:	e7ef      	b.n	800cd5a <_printf_i+0x14a>
 800cd7a:	4665      	mov	r5, ip
 800cd7c:	fbb3 f1f2 	udiv	r1, r3, r2
 800cd80:	fb02 3311 	mls	r3, r2, r1, r3
 800cd84:	5cc3      	ldrb	r3, [r0, r3]
 800cd86:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800cd8a:	460b      	mov	r3, r1
 800cd8c:	2900      	cmp	r1, #0
 800cd8e:	d1f5      	bne.n	800cd7c <_printf_i+0x16c>
 800cd90:	e7b9      	b.n	800cd06 <_printf_i+0xf6>
 800cd92:	6813      	ldr	r3, [r2, #0]
 800cd94:	6825      	ldr	r5, [r4, #0]
 800cd96:	6961      	ldr	r1, [r4, #20]
 800cd98:	1d18      	adds	r0, r3, #4
 800cd9a:	6010      	str	r0, [r2, #0]
 800cd9c:	0628      	lsls	r0, r5, #24
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	d501      	bpl.n	800cda6 <_printf_i+0x196>
 800cda2:	6019      	str	r1, [r3, #0]
 800cda4:	e002      	b.n	800cdac <_printf_i+0x19c>
 800cda6:	066a      	lsls	r2, r5, #25
 800cda8:	d5fb      	bpl.n	800cda2 <_printf_i+0x192>
 800cdaa:	8019      	strh	r1, [r3, #0]
 800cdac:	2300      	movs	r3, #0
 800cdae:	6123      	str	r3, [r4, #16]
 800cdb0:	4665      	mov	r5, ip
 800cdb2:	e7b9      	b.n	800cd28 <_printf_i+0x118>
 800cdb4:	6813      	ldr	r3, [r2, #0]
 800cdb6:	1d19      	adds	r1, r3, #4
 800cdb8:	6011      	str	r1, [r2, #0]
 800cdba:	681d      	ldr	r5, [r3, #0]
 800cdbc:	6862      	ldr	r2, [r4, #4]
 800cdbe:	2100      	movs	r1, #0
 800cdc0:	4628      	mov	r0, r5
 800cdc2:	f7f3 fa35 	bl	8000230 <memchr>
 800cdc6:	b108      	cbz	r0, 800cdcc <_printf_i+0x1bc>
 800cdc8:	1b40      	subs	r0, r0, r5
 800cdca:	6060      	str	r0, [r4, #4]
 800cdcc:	6863      	ldr	r3, [r4, #4]
 800cdce:	6123      	str	r3, [r4, #16]
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cdd6:	e7a7      	b.n	800cd28 <_printf_i+0x118>
 800cdd8:	6923      	ldr	r3, [r4, #16]
 800cdda:	462a      	mov	r2, r5
 800cddc:	4639      	mov	r1, r7
 800cdde:	4630      	mov	r0, r6
 800cde0:	47c0      	blx	r8
 800cde2:	3001      	adds	r0, #1
 800cde4:	d0aa      	beq.n	800cd3c <_printf_i+0x12c>
 800cde6:	6823      	ldr	r3, [r4, #0]
 800cde8:	079b      	lsls	r3, r3, #30
 800cdea:	d413      	bmi.n	800ce14 <_printf_i+0x204>
 800cdec:	68e0      	ldr	r0, [r4, #12]
 800cdee:	9b03      	ldr	r3, [sp, #12]
 800cdf0:	4298      	cmp	r0, r3
 800cdf2:	bfb8      	it	lt
 800cdf4:	4618      	movlt	r0, r3
 800cdf6:	e7a3      	b.n	800cd40 <_printf_i+0x130>
 800cdf8:	2301      	movs	r3, #1
 800cdfa:	464a      	mov	r2, r9
 800cdfc:	4639      	mov	r1, r7
 800cdfe:	4630      	mov	r0, r6
 800ce00:	47c0      	blx	r8
 800ce02:	3001      	adds	r0, #1
 800ce04:	d09a      	beq.n	800cd3c <_printf_i+0x12c>
 800ce06:	3501      	adds	r5, #1
 800ce08:	68e3      	ldr	r3, [r4, #12]
 800ce0a:	9a03      	ldr	r2, [sp, #12]
 800ce0c:	1a9b      	subs	r3, r3, r2
 800ce0e:	42ab      	cmp	r3, r5
 800ce10:	dcf2      	bgt.n	800cdf8 <_printf_i+0x1e8>
 800ce12:	e7eb      	b.n	800cdec <_printf_i+0x1dc>
 800ce14:	2500      	movs	r5, #0
 800ce16:	f104 0919 	add.w	r9, r4, #25
 800ce1a:	e7f5      	b.n	800ce08 <_printf_i+0x1f8>
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d1ac      	bne.n	800cd7a <_printf_i+0x16a>
 800ce20:	7803      	ldrb	r3, [r0, #0]
 800ce22:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce26:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce2a:	e76c      	b.n	800cd06 <_printf_i+0xf6>
 800ce2c:	0800fb2e 	.word	0x0800fb2e
 800ce30:	0800fb3f 	.word	0x0800fb3f

0800ce34 <_puts_r>:
 800ce34:	b570      	push	{r4, r5, r6, lr}
 800ce36:	460e      	mov	r6, r1
 800ce38:	4605      	mov	r5, r0
 800ce3a:	b118      	cbz	r0, 800ce44 <_puts_r+0x10>
 800ce3c:	6983      	ldr	r3, [r0, #24]
 800ce3e:	b90b      	cbnz	r3, 800ce44 <_puts_r+0x10>
 800ce40:	f001 f896 	bl	800df70 <__sinit>
 800ce44:	69ab      	ldr	r3, [r5, #24]
 800ce46:	68ac      	ldr	r4, [r5, #8]
 800ce48:	b913      	cbnz	r3, 800ce50 <_puts_r+0x1c>
 800ce4a:	4628      	mov	r0, r5
 800ce4c:	f001 f890 	bl	800df70 <__sinit>
 800ce50:	4b23      	ldr	r3, [pc, #140]	; (800cee0 <_puts_r+0xac>)
 800ce52:	429c      	cmp	r4, r3
 800ce54:	d117      	bne.n	800ce86 <_puts_r+0x52>
 800ce56:	686c      	ldr	r4, [r5, #4]
 800ce58:	89a3      	ldrh	r3, [r4, #12]
 800ce5a:	071b      	lsls	r3, r3, #28
 800ce5c:	d51d      	bpl.n	800ce9a <_puts_r+0x66>
 800ce5e:	6923      	ldr	r3, [r4, #16]
 800ce60:	b1db      	cbz	r3, 800ce9a <_puts_r+0x66>
 800ce62:	3e01      	subs	r6, #1
 800ce64:	68a3      	ldr	r3, [r4, #8]
 800ce66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ce6a:	3b01      	subs	r3, #1
 800ce6c:	60a3      	str	r3, [r4, #8]
 800ce6e:	b9e9      	cbnz	r1, 800ceac <_puts_r+0x78>
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	da2e      	bge.n	800ced2 <_puts_r+0x9e>
 800ce74:	4622      	mov	r2, r4
 800ce76:	210a      	movs	r1, #10
 800ce78:	4628      	mov	r0, r5
 800ce7a:	f000 f883 	bl	800cf84 <__swbuf_r>
 800ce7e:	3001      	adds	r0, #1
 800ce80:	d011      	beq.n	800cea6 <_puts_r+0x72>
 800ce82:	200a      	movs	r0, #10
 800ce84:	e011      	b.n	800ceaa <_puts_r+0x76>
 800ce86:	4b17      	ldr	r3, [pc, #92]	; (800cee4 <_puts_r+0xb0>)
 800ce88:	429c      	cmp	r4, r3
 800ce8a:	d101      	bne.n	800ce90 <_puts_r+0x5c>
 800ce8c:	68ac      	ldr	r4, [r5, #8]
 800ce8e:	e7e3      	b.n	800ce58 <_puts_r+0x24>
 800ce90:	4b15      	ldr	r3, [pc, #84]	; (800cee8 <_puts_r+0xb4>)
 800ce92:	429c      	cmp	r4, r3
 800ce94:	bf08      	it	eq
 800ce96:	68ec      	ldreq	r4, [r5, #12]
 800ce98:	e7de      	b.n	800ce58 <_puts_r+0x24>
 800ce9a:	4621      	mov	r1, r4
 800ce9c:	4628      	mov	r0, r5
 800ce9e:	f000 f8c3 	bl	800d028 <__swsetup_r>
 800cea2:	2800      	cmp	r0, #0
 800cea4:	d0dd      	beq.n	800ce62 <_puts_r+0x2e>
 800cea6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ceaa:	bd70      	pop	{r4, r5, r6, pc}
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	da04      	bge.n	800ceba <_puts_r+0x86>
 800ceb0:	69a2      	ldr	r2, [r4, #24]
 800ceb2:	429a      	cmp	r2, r3
 800ceb4:	dc06      	bgt.n	800cec4 <_puts_r+0x90>
 800ceb6:	290a      	cmp	r1, #10
 800ceb8:	d004      	beq.n	800cec4 <_puts_r+0x90>
 800ceba:	6823      	ldr	r3, [r4, #0]
 800cebc:	1c5a      	adds	r2, r3, #1
 800cebe:	6022      	str	r2, [r4, #0]
 800cec0:	7019      	strb	r1, [r3, #0]
 800cec2:	e7cf      	b.n	800ce64 <_puts_r+0x30>
 800cec4:	4622      	mov	r2, r4
 800cec6:	4628      	mov	r0, r5
 800cec8:	f000 f85c 	bl	800cf84 <__swbuf_r>
 800cecc:	3001      	adds	r0, #1
 800cece:	d1c9      	bne.n	800ce64 <_puts_r+0x30>
 800ced0:	e7e9      	b.n	800cea6 <_puts_r+0x72>
 800ced2:	6823      	ldr	r3, [r4, #0]
 800ced4:	200a      	movs	r0, #10
 800ced6:	1c5a      	adds	r2, r3, #1
 800ced8:	6022      	str	r2, [r4, #0]
 800ceda:	7018      	strb	r0, [r3, #0]
 800cedc:	e7e5      	b.n	800ceaa <_puts_r+0x76>
 800cede:	bf00      	nop
 800cee0:	0800fb80 	.word	0x0800fb80
 800cee4:	0800fba0 	.word	0x0800fba0
 800cee8:	0800fb60 	.word	0x0800fb60

0800ceec <puts>:
 800ceec:	4b02      	ldr	r3, [pc, #8]	; (800cef8 <puts+0xc>)
 800ceee:	4601      	mov	r1, r0
 800cef0:	6818      	ldr	r0, [r3, #0]
 800cef2:	f7ff bf9f 	b.w	800ce34 <_puts_r>
 800cef6:	bf00      	nop
 800cef8:	20001c90 	.word	0x20001c90

0800cefc <sniprintf>:
 800cefc:	b40c      	push	{r2, r3}
 800cefe:	b530      	push	{r4, r5, lr}
 800cf00:	4b17      	ldr	r3, [pc, #92]	; (800cf60 <sniprintf+0x64>)
 800cf02:	1e0c      	subs	r4, r1, #0
 800cf04:	b09d      	sub	sp, #116	; 0x74
 800cf06:	681d      	ldr	r5, [r3, #0]
 800cf08:	da08      	bge.n	800cf1c <sniprintf+0x20>
 800cf0a:	238b      	movs	r3, #139	; 0x8b
 800cf0c:	602b      	str	r3, [r5, #0]
 800cf0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800cf12:	b01d      	add	sp, #116	; 0x74
 800cf14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cf18:	b002      	add	sp, #8
 800cf1a:	4770      	bx	lr
 800cf1c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800cf20:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cf24:	bf14      	ite	ne
 800cf26:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800cf2a:	4623      	moveq	r3, r4
 800cf2c:	9304      	str	r3, [sp, #16]
 800cf2e:	9307      	str	r3, [sp, #28]
 800cf30:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800cf34:	9002      	str	r0, [sp, #8]
 800cf36:	9006      	str	r0, [sp, #24]
 800cf38:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cf3c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800cf3e:	ab21      	add	r3, sp, #132	; 0x84
 800cf40:	a902      	add	r1, sp, #8
 800cf42:	4628      	mov	r0, r5
 800cf44:	9301      	str	r3, [sp, #4]
 800cf46:	f001 fd0d 	bl	800e964 <_svfiprintf_r>
 800cf4a:	1c43      	adds	r3, r0, #1
 800cf4c:	bfbc      	itt	lt
 800cf4e:	238b      	movlt	r3, #139	; 0x8b
 800cf50:	602b      	strlt	r3, [r5, #0]
 800cf52:	2c00      	cmp	r4, #0
 800cf54:	d0dd      	beq.n	800cf12 <sniprintf+0x16>
 800cf56:	9b02      	ldr	r3, [sp, #8]
 800cf58:	2200      	movs	r2, #0
 800cf5a:	701a      	strb	r2, [r3, #0]
 800cf5c:	e7d9      	b.n	800cf12 <sniprintf+0x16>
 800cf5e:	bf00      	nop
 800cf60:	20001c90 	.word	0x20001c90

0800cf64 <strcat>:
 800cf64:	b510      	push	{r4, lr}
 800cf66:	4603      	mov	r3, r0
 800cf68:	781a      	ldrb	r2, [r3, #0]
 800cf6a:	1c5c      	adds	r4, r3, #1
 800cf6c:	b93a      	cbnz	r2, 800cf7e <strcat+0x1a>
 800cf6e:	3b01      	subs	r3, #1
 800cf70:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf74:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf78:	2a00      	cmp	r2, #0
 800cf7a:	d1f9      	bne.n	800cf70 <strcat+0xc>
 800cf7c:	bd10      	pop	{r4, pc}
 800cf7e:	4623      	mov	r3, r4
 800cf80:	e7f2      	b.n	800cf68 <strcat+0x4>
	...

0800cf84 <__swbuf_r>:
 800cf84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf86:	460e      	mov	r6, r1
 800cf88:	4614      	mov	r4, r2
 800cf8a:	4605      	mov	r5, r0
 800cf8c:	b118      	cbz	r0, 800cf96 <__swbuf_r+0x12>
 800cf8e:	6983      	ldr	r3, [r0, #24]
 800cf90:	b90b      	cbnz	r3, 800cf96 <__swbuf_r+0x12>
 800cf92:	f000 ffed 	bl	800df70 <__sinit>
 800cf96:	4b21      	ldr	r3, [pc, #132]	; (800d01c <__swbuf_r+0x98>)
 800cf98:	429c      	cmp	r4, r3
 800cf9a:	d12a      	bne.n	800cff2 <__swbuf_r+0x6e>
 800cf9c:	686c      	ldr	r4, [r5, #4]
 800cf9e:	69a3      	ldr	r3, [r4, #24]
 800cfa0:	60a3      	str	r3, [r4, #8]
 800cfa2:	89a3      	ldrh	r3, [r4, #12]
 800cfa4:	071a      	lsls	r2, r3, #28
 800cfa6:	d52e      	bpl.n	800d006 <__swbuf_r+0x82>
 800cfa8:	6923      	ldr	r3, [r4, #16]
 800cfaa:	b363      	cbz	r3, 800d006 <__swbuf_r+0x82>
 800cfac:	6923      	ldr	r3, [r4, #16]
 800cfae:	6820      	ldr	r0, [r4, #0]
 800cfb0:	1ac0      	subs	r0, r0, r3
 800cfb2:	6963      	ldr	r3, [r4, #20]
 800cfb4:	b2f6      	uxtb	r6, r6
 800cfb6:	4283      	cmp	r3, r0
 800cfb8:	4637      	mov	r7, r6
 800cfba:	dc04      	bgt.n	800cfc6 <__swbuf_r+0x42>
 800cfbc:	4621      	mov	r1, r4
 800cfbe:	4628      	mov	r0, r5
 800cfc0:	f000 ff6c 	bl	800de9c <_fflush_r>
 800cfc4:	bb28      	cbnz	r0, 800d012 <__swbuf_r+0x8e>
 800cfc6:	68a3      	ldr	r3, [r4, #8]
 800cfc8:	3b01      	subs	r3, #1
 800cfca:	60a3      	str	r3, [r4, #8]
 800cfcc:	6823      	ldr	r3, [r4, #0]
 800cfce:	1c5a      	adds	r2, r3, #1
 800cfd0:	6022      	str	r2, [r4, #0]
 800cfd2:	701e      	strb	r6, [r3, #0]
 800cfd4:	6963      	ldr	r3, [r4, #20]
 800cfd6:	3001      	adds	r0, #1
 800cfd8:	4283      	cmp	r3, r0
 800cfda:	d004      	beq.n	800cfe6 <__swbuf_r+0x62>
 800cfdc:	89a3      	ldrh	r3, [r4, #12]
 800cfde:	07db      	lsls	r3, r3, #31
 800cfe0:	d519      	bpl.n	800d016 <__swbuf_r+0x92>
 800cfe2:	2e0a      	cmp	r6, #10
 800cfe4:	d117      	bne.n	800d016 <__swbuf_r+0x92>
 800cfe6:	4621      	mov	r1, r4
 800cfe8:	4628      	mov	r0, r5
 800cfea:	f000 ff57 	bl	800de9c <_fflush_r>
 800cfee:	b190      	cbz	r0, 800d016 <__swbuf_r+0x92>
 800cff0:	e00f      	b.n	800d012 <__swbuf_r+0x8e>
 800cff2:	4b0b      	ldr	r3, [pc, #44]	; (800d020 <__swbuf_r+0x9c>)
 800cff4:	429c      	cmp	r4, r3
 800cff6:	d101      	bne.n	800cffc <__swbuf_r+0x78>
 800cff8:	68ac      	ldr	r4, [r5, #8]
 800cffa:	e7d0      	b.n	800cf9e <__swbuf_r+0x1a>
 800cffc:	4b09      	ldr	r3, [pc, #36]	; (800d024 <__swbuf_r+0xa0>)
 800cffe:	429c      	cmp	r4, r3
 800d000:	bf08      	it	eq
 800d002:	68ec      	ldreq	r4, [r5, #12]
 800d004:	e7cb      	b.n	800cf9e <__swbuf_r+0x1a>
 800d006:	4621      	mov	r1, r4
 800d008:	4628      	mov	r0, r5
 800d00a:	f000 f80d 	bl	800d028 <__swsetup_r>
 800d00e:	2800      	cmp	r0, #0
 800d010:	d0cc      	beq.n	800cfac <__swbuf_r+0x28>
 800d012:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800d016:	4638      	mov	r0, r7
 800d018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d01a:	bf00      	nop
 800d01c:	0800fb80 	.word	0x0800fb80
 800d020:	0800fba0 	.word	0x0800fba0
 800d024:	0800fb60 	.word	0x0800fb60

0800d028 <__swsetup_r>:
 800d028:	4b32      	ldr	r3, [pc, #200]	; (800d0f4 <__swsetup_r+0xcc>)
 800d02a:	b570      	push	{r4, r5, r6, lr}
 800d02c:	681d      	ldr	r5, [r3, #0]
 800d02e:	4606      	mov	r6, r0
 800d030:	460c      	mov	r4, r1
 800d032:	b125      	cbz	r5, 800d03e <__swsetup_r+0x16>
 800d034:	69ab      	ldr	r3, [r5, #24]
 800d036:	b913      	cbnz	r3, 800d03e <__swsetup_r+0x16>
 800d038:	4628      	mov	r0, r5
 800d03a:	f000 ff99 	bl	800df70 <__sinit>
 800d03e:	4b2e      	ldr	r3, [pc, #184]	; (800d0f8 <__swsetup_r+0xd0>)
 800d040:	429c      	cmp	r4, r3
 800d042:	d10f      	bne.n	800d064 <__swsetup_r+0x3c>
 800d044:	686c      	ldr	r4, [r5, #4]
 800d046:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d04a:	b29a      	uxth	r2, r3
 800d04c:	0715      	lsls	r5, r2, #28
 800d04e:	d42c      	bmi.n	800d0aa <__swsetup_r+0x82>
 800d050:	06d0      	lsls	r0, r2, #27
 800d052:	d411      	bmi.n	800d078 <__swsetup_r+0x50>
 800d054:	2209      	movs	r2, #9
 800d056:	6032      	str	r2, [r6, #0]
 800d058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d05c:	81a3      	strh	r3, [r4, #12]
 800d05e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800d062:	e03e      	b.n	800d0e2 <__swsetup_r+0xba>
 800d064:	4b25      	ldr	r3, [pc, #148]	; (800d0fc <__swsetup_r+0xd4>)
 800d066:	429c      	cmp	r4, r3
 800d068:	d101      	bne.n	800d06e <__swsetup_r+0x46>
 800d06a:	68ac      	ldr	r4, [r5, #8]
 800d06c:	e7eb      	b.n	800d046 <__swsetup_r+0x1e>
 800d06e:	4b24      	ldr	r3, [pc, #144]	; (800d100 <__swsetup_r+0xd8>)
 800d070:	429c      	cmp	r4, r3
 800d072:	bf08      	it	eq
 800d074:	68ec      	ldreq	r4, [r5, #12]
 800d076:	e7e6      	b.n	800d046 <__swsetup_r+0x1e>
 800d078:	0751      	lsls	r1, r2, #29
 800d07a:	d512      	bpl.n	800d0a2 <__swsetup_r+0x7a>
 800d07c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d07e:	b141      	cbz	r1, 800d092 <__swsetup_r+0x6a>
 800d080:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d084:	4299      	cmp	r1, r3
 800d086:	d002      	beq.n	800d08e <__swsetup_r+0x66>
 800d088:	4630      	mov	r0, r6
 800d08a:	f001 fb69 	bl	800e760 <_free_r>
 800d08e:	2300      	movs	r3, #0
 800d090:	6363      	str	r3, [r4, #52]	; 0x34
 800d092:	89a3      	ldrh	r3, [r4, #12]
 800d094:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d098:	81a3      	strh	r3, [r4, #12]
 800d09a:	2300      	movs	r3, #0
 800d09c:	6063      	str	r3, [r4, #4]
 800d09e:	6923      	ldr	r3, [r4, #16]
 800d0a0:	6023      	str	r3, [r4, #0]
 800d0a2:	89a3      	ldrh	r3, [r4, #12]
 800d0a4:	f043 0308 	orr.w	r3, r3, #8
 800d0a8:	81a3      	strh	r3, [r4, #12]
 800d0aa:	6923      	ldr	r3, [r4, #16]
 800d0ac:	b94b      	cbnz	r3, 800d0c2 <__swsetup_r+0x9a>
 800d0ae:	89a3      	ldrh	r3, [r4, #12]
 800d0b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d0b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d0b8:	d003      	beq.n	800d0c2 <__swsetup_r+0x9a>
 800d0ba:	4621      	mov	r1, r4
 800d0bc:	4630      	mov	r0, r6
 800d0be:	f001 f813 	bl	800e0e8 <__smakebuf_r>
 800d0c2:	89a2      	ldrh	r2, [r4, #12]
 800d0c4:	f012 0301 	ands.w	r3, r2, #1
 800d0c8:	d00c      	beq.n	800d0e4 <__swsetup_r+0xbc>
 800d0ca:	2300      	movs	r3, #0
 800d0cc:	60a3      	str	r3, [r4, #8]
 800d0ce:	6963      	ldr	r3, [r4, #20]
 800d0d0:	425b      	negs	r3, r3
 800d0d2:	61a3      	str	r3, [r4, #24]
 800d0d4:	6923      	ldr	r3, [r4, #16]
 800d0d6:	b953      	cbnz	r3, 800d0ee <__swsetup_r+0xc6>
 800d0d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d0dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800d0e0:	d1ba      	bne.n	800d058 <__swsetup_r+0x30>
 800d0e2:	bd70      	pop	{r4, r5, r6, pc}
 800d0e4:	0792      	lsls	r2, r2, #30
 800d0e6:	bf58      	it	pl
 800d0e8:	6963      	ldrpl	r3, [r4, #20]
 800d0ea:	60a3      	str	r3, [r4, #8]
 800d0ec:	e7f2      	b.n	800d0d4 <__swsetup_r+0xac>
 800d0ee:	2000      	movs	r0, #0
 800d0f0:	e7f7      	b.n	800d0e2 <__swsetup_r+0xba>
 800d0f2:	bf00      	nop
 800d0f4:	20001c90 	.word	0x20001c90
 800d0f8:	0800fb80 	.word	0x0800fb80
 800d0fc:	0800fba0 	.word	0x0800fba0
 800d100:	0800fb60 	.word	0x0800fb60

0800d104 <quorem>:
 800d104:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d108:	6903      	ldr	r3, [r0, #16]
 800d10a:	690c      	ldr	r4, [r1, #16]
 800d10c:	42a3      	cmp	r3, r4
 800d10e:	4680      	mov	r8, r0
 800d110:	f2c0 8082 	blt.w	800d218 <quorem+0x114>
 800d114:	3c01      	subs	r4, #1
 800d116:	f101 0714 	add.w	r7, r1, #20
 800d11a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800d11e:	f100 0614 	add.w	r6, r0, #20
 800d122:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800d126:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800d12a:	eb06 030c 	add.w	r3, r6, ip
 800d12e:	3501      	adds	r5, #1
 800d130:	eb07 090c 	add.w	r9, r7, ip
 800d134:	9301      	str	r3, [sp, #4]
 800d136:	fbb0 f5f5 	udiv	r5, r0, r5
 800d13a:	b395      	cbz	r5, 800d1a2 <quorem+0x9e>
 800d13c:	f04f 0a00 	mov.w	sl, #0
 800d140:	4638      	mov	r0, r7
 800d142:	46b6      	mov	lr, r6
 800d144:	46d3      	mov	fp, sl
 800d146:	f850 2b04 	ldr.w	r2, [r0], #4
 800d14a:	b293      	uxth	r3, r2
 800d14c:	fb05 a303 	mla	r3, r5, r3, sl
 800d150:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d154:	b29b      	uxth	r3, r3
 800d156:	ebab 0303 	sub.w	r3, fp, r3
 800d15a:	0c12      	lsrs	r2, r2, #16
 800d15c:	f8de b000 	ldr.w	fp, [lr]
 800d160:	fb05 a202 	mla	r2, r5, r2, sl
 800d164:	fa13 f38b 	uxtah	r3, r3, fp
 800d168:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800d16c:	fa1f fb82 	uxth.w	fp, r2
 800d170:	f8de 2000 	ldr.w	r2, [lr]
 800d174:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800d178:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d17c:	b29b      	uxth	r3, r3
 800d17e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d182:	4581      	cmp	r9, r0
 800d184:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800d188:	f84e 3b04 	str.w	r3, [lr], #4
 800d18c:	d2db      	bcs.n	800d146 <quorem+0x42>
 800d18e:	f856 300c 	ldr.w	r3, [r6, ip]
 800d192:	b933      	cbnz	r3, 800d1a2 <quorem+0x9e>
 800d194:	9b01      	ldr	r3, [sp, #4]
 800d196:	3b04      	subs	r3, #4
 800d198:	429e      	cmp	r6, r3
 800d19a:	461a      	mov	r2, r3
 800d19c:	d330      	bcc.n	800d200 <quorem+0xfc>
 800d19e:	f8c8 4010 	str.w	r4, [r8, #16]
 800d1a2:	4640      	mov	r0, r8
 800d1a4:	f001 fa08 	bl	800e5b8 <__mcmp>
 800d1a8:	2800      	cmp	r0, #0
 800d1aa:	db25      	blt.n	800d1f8 <quorem+0xf4>
 800d1ac:	3501      	adds	r5, #1
 800d1ae:	4630      	mov	r0, r6
 800d1b0:	f04f 0c00 	mov.w	ip, #0
 800d1b4:	f857 2b04 	ldr.w	r2, [r7], #4
 800d1b8:	f8d0 e000 	ldr.w	lr, [r0]
 800d1bc:	b293      	uxth	r3, r2
 800d1be:	ebac 0303 	sub.w	r3, ip, r3
 800d1c2:	0c12      	lsrs	r2, r2, #16
 800d1c4:	fa13 f38e 	uxtah	r3, r3, lr
 800d1c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d1cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d1d0:	b29b      	uxth	r3, r3
 800d1d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d1d6:	45b9      	cmp	r9, r7
 800d1d8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d1dc:	f840 3b04 	str.w	r3, [r0], #4
 800d1e0:	d2e8      	bcs.n	800d1b4 <quorem+0xb0>
 800d1e2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800d1e6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800d1ea:	b92a      	cbnz	r2, 800d1f8 <quorem+0xf4>
 800d1ec:	3b04      	subs	r3, #4
 800d1ee:	429e      	cmp	r6, r3
 800d1f0:	461a      	mov	r2, r3
 800d1f2:	d30b      	bcc.n	800d20c <quorem+0x108>
 800d1f4:	f8c8 4010 	str.w	r4, [r8, #16]
 800d1f8:	4628      	mov	r0, r5
 800d1fa:	b003      	add	sp, #12
 800d1fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d200:	6812      	ldr	r2, [r2, #0]
 800d202:	3b04      	subs	r3, #4
 800d204:	2a00      	cmp	r2, #0
 800d206:	d1ca      	bne.n	800d19e <quorem+0x9a>
 800d208:	3c01      	subs	r4, #1
 800d20a:	e7c5      	b.n	800d198 <quorem+0x94>
 800d20c:	6812      	ldr	r2, [r2, #0]
 800d20e:	3b04      	subs	r3, #4
 800d210:	2a00      	cmp	r2, #0
 800d212:	d1ef      	bne.n	800d1f4 <quorem+0xf0>
 800d214:	3c01      	subs	r4, #1
 800d216:	e7ea      	b.n	800d1ee <quorem+0xea>
 800d218:	2000      	movs	r0, #0
 800d21a:	e7ee      	b.n	800d1fa <quorem+0xf6>
 800d21c:	0000      	movs	r0, r0
	...

0800d220 <_dtoa_r>:
 800d220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d224:	ec57 6b10 	vmov	r6, r7, d0
 800d228:	b097      	sub	sp, #92	; 0x5c
 800d22a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d22c:	9106      	str	r1, [sp, #24]
 800d22e:	4604      	mov	r4, r0
 800d230:	920b      	str	r2, [sp, #44]	; 0x2c
 800d232:	9312      	str	r3, [sp, #72]	; 0x48
 800d234:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d238:	e9cd 6700 	strd	r6, r7, [sp]
 800d23c:	b93d      	cbnz	r5, 800d24e <_dtoa_r+0x2e>
 800d23e:	2010      	movs	r0, #16
 800d240:	f000 ff92 	bl	800e168 <malloc>
 800d244:	6260      	str	r0, [r4, #36]	; 0x24
 800d246:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d24a:	6005      	str	r5, [r0, #0]
 800d24c:	60c5      	str	r5, [r0, #12]
 800d24e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d250:	6819      	ldr	r1, [r3, #0]
 800d252:	b151      	cbz	r1, 800d26a <_dtoa_r+0x4a>
 800d254:	685a      	ldr	r2, [r3, #4]
 800d256:	604a      	str	r2, [r1, #4]
 800d258:	2301      	movs	r3, #1
 800d25a:	4093      	lsls	r3, r2
 800d25c:	608b      	str	r3, [r1, #8]
 800d25e:	4620      	mov	r0, r4
 800d260:	f000 ffc9 	bl	800e1f6 <_Bfree>
 800d264:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d266:	2200      	movs	r2, #0
 800d268:	601a      	str	r2, [r3, #0]
 800d26a:	1e3b      	subs	r3, r7, #0
 800d26c:	bfbb      	ittet	lt
 800d26e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d272:	9301      	strlt	r3, [sp, #4]
 800d274:	2300      	movge	r3, #0
 800d276:	2201      	movlt	r2, #1
 800d278:	bfac      	ite	ge
 800d27a:	f8c8 3000 	strge.w	r3, [r8]
 800d27e:	f8c8 2000 	strlt.w	r2, [r8]
 800d282:	4baf      	ldr	r3, [pc, #700]	; (800d540 <_dtoa_r+0x320>)
 800d284:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800d288:	ea33 0308 	bics.w	r3, r3, r8
 800d28c:	d114      	bne.n	800d2b8 <_dtoa_r+0x98>
 800d28e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d290:	f242 730f 	movw	r3, #9999	; 0x270f
 800d294:	6013      	str	r3, [r2, #0]
 800d296:	9b00      	ldr	r3, [sp, #0]
 800d298:	b923      	cbnz	r3, 800d2a4 <_dtoa_r+0x84>
 800d29a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800d29e:	2800      	cmp	r0, #0
 800d2a0:	f000 8542 	beq.w	800dd28 <_dtoa_r+0xb08>
 800d2a4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d2a6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800d554 <_dtoa_r+0x334>
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	f000 8544 	beq.w	800dd38 <_dtoa_r+0xb18>
 800d2b0:	f10b 0303 	add.w	r3, fp, #3
 800d2b4:	f000 bd3e 	b.w	800dd34 <_dtoa_r+0xb14>
 800d2b8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d2bc:	2200      	movs	r2, #0
 800d2be:	2300      	movs	r3, #0
 800d2c0:	4630      	mov	r0, r6
 800d2c2:	4639      	mov	r1, r7
 800d2c4:	f7f3 fc28 	bl	8000b18 <__aeabi_dcmpeq>
 800d2c8:	4681      	mov	r9, r0
 800d2ca:	b168      	cbz	r0, 800d2e8 <_dtoa_r+0xc8>
 800d2cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	6013      	str	r3, [r2, #0]
 800d2d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	f000 8524 	beq.w	800dd22 <_dtoa_r+0xb02>
 800d2da:	4b9a      	ldr	r3, [pc, #616]	; (800d544 <_dtoa_r+0x324>)
 800d2dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d2de:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800d2e2:	6013      	str	r3, [r2, #0]
 800d2e4:	f000 bd28 	b.w	800dd38 <_dtoa_r+0xb18>
 800d2e8:	aa14      	add	r2, sp, #80	; 0x50
 800d2ea:	a915      	add	r1, sp, #84	; 0x54
 800d2ec:	ec47 6b10 	vmov	d0, r6, r7
 800d2f0:	4620      	mov	r0, r4
 800d2f2:	f001 f9d8 	bl	800e6a6 <__d2b>
 800d2f6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800d2fa:	9004      	str	r0, [sp, #16]
 800d2fc:	2d00      	cmp	r5, #0
 800d2fe:	d07c      	beq.n	800d3fa <_dtoa_r+0x1da>
 800d300:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d304:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800d308:	46b2      	mov	sl, r6
 800d30a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800d30e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d312:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800d316:	2200      	movs	r2, #0
 800d318:	4b8b      	ldr	r3, [pc, #556]	; (800d548 <_dtoa_r+0x328>)
 800d31a:	4650      	mov	r0, sl
 800d31c:	4659      	mov	r1, fp
 800d31e:	f7f2 ffdb 	bl	80002d8 <__aeabi_dsub>
 800d322:	a381      	add	r3, pc, #516	; (adr r3, 800d528 <_dtoa_r+0x308>)
 800d324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d328:	f7f3 f98e 	bl	8000648 <__aeabi_dmul>
 800d32c:	a380      	add	r3, pc, #512	; (adr r3, 800d530 <_dtoa_r+0x310>)
 800d32e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d332:	f7f2 ffd3 	bl	80002dc <__adddf3>
 800d336:	4606      	mov	r6, r0
 800d338:	4628      	mov	r0, r5
 800d33a:	460f      	mov	r7, r1
 800d33c:	f7f3 f91a 	bl	8000574 <__aeabi_i2d>
 800d340:	a37d      	add	r3, pc, #500	; (adr r3, 800d538 <_dtoa_r+0x318>)
 800d342:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d346:	f7f3 f97f 	bl	8000648 <__aeabi_dmul>
 800d34a:	4602      	mov	r2, r0
 800d34c:	460b      	mov	r3, r1
 800d34e:	4630      	mov	r0, r6
 800d350:	4639      	mov	r1, r7
 800d352:	f7f2 ffc3 	bl	80002dc <__adddf3>
 800d356:	4606      	mov	r6, r0
 800d358:	460f      	mov	r7, r1
 800d35a:	f7f3 fc25 	bl	8000ba8 <__aeabi_d2iz>
 800d35e:	2200      	movs	r2, #0
 800d360:	4682      	mov	sl, r0
 800d362:	2300      	movs	r3, #0
 800d364:	4630      	mov	r0, r6
 800d366:	4639      	mov	r1, r7
 800d368:	f7f3 fbe0 	bl	8000b2c <__aeabi_dcmplt>
 800d36c:	b148      	cbz	r0, 800d382 <_dtoa_r+0x162>
 800d36e:	4650      	mov	r0, sl
 800d370:	f7f3 f900 	bl	8000574 <__aeabi_i2d>
 800d374:	4632      	mov	r2, r6
 800d376:	463b      	mov	r3, r7
 800d378:	f7f3 fbce 	bl	8000b18 <__aeabi_dcmpeq>
 800d37c:	b908      	cbnz	r0, 800d382 <_dtoa_r+0x162>
 800d37e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d382:	f1ba 0f16 	cmp.w	sl, #22
 800d386:	d859      	bhi.n	800d43c <_dtoa_r+0x21c>
 800d388:	4970      	ldr	r1, [pc, #448]	; (800d54c <_dtoa_r+0x32c>)
 800d38a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800d38e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d392:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d396:	f7f3 fbe7 	bl	8000b68 <__aeabi_dcmpgt>
 800d39a:	2800      	cmp	r0, #0
 800d39c:	d050      	beq.n	800d440 <_dtoa_r+0x220>
 800d39e:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	930f      	str	r3, [sp, #60]	; 0x3c
 800d3a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d3a8:	1b5d      	subs	r5, r3, r5
 800d3aa:	f1b5 0801 	subs.w	r8, r5, #1
 800d3ae:	bf49      	itett	mi
 800d3b0:	f1c5 0301 	rsbmi	r3, r5, #1
 800d3b4:	2300      	movpl	r3, #0
 800d3b6:	9305      	strmi	r3, [sp, #20]
 800d3b8:	f04f 0800 	movmi.w	r8, #0
 800d3bc:	bf58      	it	pl
 800d3be:	9305      	strpl	r3, [sp, #20]
 800d3c0:	f1ba 0f00 	cmp.w	sl, #0
 800d3c4:	db3e      	blt.n	800d444 <_dtoa_r+0x224>
 800d3c6:	2300      	movs	r3, #0
 800d3c8:	44d0      	add	r8, sl
 800d3ca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800d3ce:	9307      	str	r3, [sp, #28]
 800d3d0:	9b06      	ldr	r3, [sp, #24]
 800d3d2:	2b09      	cmp	r3, #9
 800d3d4:	f200 8090 	bhi.w	800d4f8 <_dtoa_r+0x2d8>
 800d3d8:	2b05      	cmp	r3, #5
 800d3da:	bfc4      	itt	gt
 800d3dc:	3b04      	subgt	r3, #4
 800d3de:	9306      	strgt	r3, [sp, #24]
 800d3e0:	9b06      	ldr	r3, [sp, #24]
 800d3e2:	f1a3 0302 	sub.w	r3, r3, #2
 800d3e6:	bfcc      	ite	gt
 800d3e8:	2500      	movgt	r5, #0
 800d3ea:	2501      	movle	r5, #1
 800d3ec:	2b03      	cmp	r3, #3
 800d3ee:	f200 808f 	bhi.w	800d510 <_dtoa_r+0x2f0>
 800d3f2:	e8df f003 	tbb	[pc, r3]
 800d3f6:	7f7d      	.short	0x7f7d
 800d3f8:	7131      	.short	0x7131
 800d3fa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800d3fe:	441d      	add	r5, r3
 800d400:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800d404:	2820      	cmp	r0, #32
 800d406:	dd13      	ble.n	800d430 <_dtoa_r+0x210>
 800d408:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800d40c:	9b00      	ldr	r3, [sp, #0]
 800d40e:	fa08 f800 	lsl.w	r8, r8, r0
 800d412:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800d416:	fa23 f000 	lsr.w	r0, r3, r0
 800d41a:	ea48 0000 	orr.w	r0, r8, r0
 800d41e:	f7f3 f899 	bl	8000554 <__aeabi_ui2d>
 800d422:	2301      	movs	r3, #1
 800d424:	4682      	mov	sl, r0
 800d426:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800d42a:	3d01      	subs	r5, #1
 800d42c:	9313      	str	r3, [sp, #76]	; 0x4c
 800d42e:	e772      	b.n	800d316 <_dtoa_r+0xf6>
 800d430:	9b00      	ldr	r3, [sp, #0]
 800d432:	f1c0 0020 	rsb	r0, r0, #32
 800d436:	fa03 f000 	lsl.w	r0, r3, r0
 800d43a:	e7f0      	b.n	800d41e <_dtoa_r+0x1fe>
 800d43c:	2301      	movs	r3, #1
 800d43e:	e7b1      	b.n	800d3a4 <_dtoa_r+0x184>
 800d440:	900f      	str	r0, [sp, #60]	; 0x3c
 800d442:	e7b0      	b.n	800d3a6 <_dtoa_r+0x186>
 800d444:	9b05      	ldr	r3, [sp, #20]
 800d446:	eba3 030a 	sub.w	r3, r3, sl
 800d44a:	9305      	str	r3, [sp, #20]
 800d44c:	f1ca 0300 	rsb	r3, sl, #0
 800d450:	9307      	str	r3, [sp, #28]
 800d452:	2300      	movs	r3, #0
 800d454:	930e      	str	r3, [sp, #56]	; 0x38
 800d456:	e7bb      	b.n	800d3d0 <_dtoa_r+0x1b0>
 800d458:	2301      	movs	r3, #1
 800d45a:	930a      	str	r3, [sp, #40]	; 0x28
 800d45c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d45e:	2b00      	cmp	r3, #0
 800d460:	dd59      	ble.n	800d516 <_dtoa_r+0x2f6>
 800d462:	9302      	str	r3, [sp, #8]
 800d464:	4699      	mov	r9, r3
 800d466:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d468:	2200      	movs	r2, #0
 800d46a:	6072      	str	r2, [r6, #4]
 800d46c:	2204      	movs	r2, #4
 800d46e:	f102 0014 	add.w	r0, r2, #20
 800d472:	4298      	cmp	r0, r3
 800d474:	6871      	ldr	r1, [r6, #4]
 800d476:	d953      	bls.n	800d520 <_dtoa_r+0x300>
 800d478:	4620      	mov	r0, r4
 800d47a:	f000 fe88 	bl	800e18e <_Balloc>
 800d47e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d480:	6030      	str	r0, [r6, #0]
 800d482:	f1b9 0f0e 	cmp.w	r9, #14
 800d486:	f8d3 b000 	ldr.w	fp, [r3]
 800d48a:	f200 80e6 	bhi.w	800d65a <_dtoa_r+0x43a>
 800d48e:	2d00      	cmp	r5, #0
 800d490:	f000 80e3 	beq.w	800d65a <_dtoa_r+0x43a>
 800d494:	ed9d 7b00 	vldr	d7, [sp]
 800d498:	f1ba 0f00 	cmp.w	sl, #0
 800d49c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800d4a0:	dd74      	ble.n	800d58c <_dtoa_r+0x36c>
 800d4a2:	4a2a      	ldr	r2, [pc, #168]	; (800d54c <_dtoa_r+0x32c>)
 800d4a4:	f00a 030f 	and.w	r3, sl, #15
 800d4a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d4ac:	ed93 7b00 	vldr	d7, [r3]
 800d4b0:	ea4f 162a 	mov.w	r6, sl, asr #4
 800d4b4:	06f0      	lsls	r0, r6, #27
 800d4b6:	ed8d 7b08 	vstr	d7, [sp, #32]
 800d4ba:	d565      	bpl.n	800d588 <_dtoa_r+0x368>
 800d4bc:	4b24      	ldr	r3, [pc, #144]	; (800d550 <_dtoa_r+0x330>)
 800d4be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d4c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d4c6:	f7f3 f9e9 	bl	800089c <__aeabi_ddiv>
 800d4ca:	e9cd 0100 	strd	r0, r1, [sp]
 800d4ce:	f006 060f 	and.w	r6, r6, #15
 800d4d2:	2503      	movs	r5, #3
 800d4d4:	4f1e      	ldr	r7, [pc, #120]	; (800d550 <_dtoa_r+0x330>)
 800d4d6:	e04c      	b.n	800d572 <_dtoa_r+0x352>
 800d4d8:	2301      	movs	r3, #1
 800d4da:	930a      	str	r3, [sp, #40]	; 0x28
 800d4dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d4de:	4453      	add	r3, sl
 800d4e0:	f103 0901 	add.w	r9, r3, #1
 800d4e4:	9302      	str	r3, [sp, #8]
 800d4e6:	464b      	mov	r3, r9
 800d4e8:	2b01      	cmp	r3, #1
 800d4ea:	bfb8      	it	lt
 800d4ec:	2301      	movlt	r3, #1
 800d4ee:	e7ba      	b.n	800d466 <_dtoa_r+0x246>
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	e7b2      	b.n	800d45a <_dtoa_r+0x23a>
 800d4f4:	2300      	movs	r3, #0
 800d4f6:	e7f0      	b.n	800d4da <_dtoa_r+0x2ba>
 800d4f8:	2501      	movs	r5, #1
 800d4fa:	2300      	movs	r3, #0
 800d4fc:	9306      	str	r3, [sp, #24]
 800d4fe:	950a      	str	r5, [sp, #40]	; 0x28
 800d500:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800d504:	9302      	str	r3, [sp, #8]
 800d506:	4699      	mov	r9, r3
 800d508:	2200      	movs	r2, #0
 800d50a:	2312      	movs	r3, #18
 800d50c:	920b      	str	r2, [sp, #44]	; 0x2c
 800d50e:	e7aa      	b.n	800d466 <_dtoa_r+0x246>
 800d510:	2301      	movs	r3, #1
 800d512:	930a      	str	r3, [sp, #40]	; 0x28
 800d514:	e7f4      	b.n	800d500 <_dtoa_r+0x2e0>
 800d516:	2301      	movs	r3, #1
 800d518:	9302      	str	r3, [sp, #8]
 800d51a:	4699      	mov	r9, r3
 800d51c:	461a      	mov	r2, r3
 800d51e:	e7f5      	b.n	800d50c <_dtoa_r+0x2ec>
 800d520:	3101      	adds	r1, #1
 800d522:	6071      	str	r1, [r6, #4]
 800d524:	0052      	lsls	r2, r2, #1
 800d526:	e7a2      	b.n	800d46e <_dtoa_r+0x24e>
 800d528:	636f4361 	.word	0x636f4361
 800d52c:	3fd287a7 	.word	0x3fd287a7
 800d530:	8b60c8b3 	.word	0x8b60c8b3
 800d534:	3fc68a28 	.word	0x3fc68a28
 800d538:	509f79fb 	.word	0x509f79fb
 800d53c:	3fd34413 	.word	0x3fd34413
 800d540:	7ff00000 	.word	0x7ff00000
 800d544:	0800fb2d 	.word	0x0800fb2d
 800d548:	3ff80000 	.word	0x3ff80000
 800d54c:	0800fbe8 	.word	0x0800fbe8
 800d550:	0800fbc0 	.word	0x0800fbc0
 800d554:	0800fb59 	.word	0x0800fb59
 800d558:	07f1      	lsls	r1, r6, #31
 800d55a:	d508      	bpl.n	800d56e <_dtoa_r+0x34e>
 800d55c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800d560:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d564:	f7f3 f870 	bl	8000648 <__aeabi_dmul>
 800d568:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d56c:	3501      	adds	r5, #1
 800d56e:	1076      	asrs	r6, r6, #1
 800d570:	3708      	adds	r7, #8
 800d572:	2e00      	cmp	r6, #0
 800d574:	d1f0      	bne.n	800d558 <_dtoa_r+0x338>
 800d576:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800d57a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d57e:	f7f3 f98d 	bl	800089c <__aeabi_ddiv>
 800d582:	e9cd 0100 	strd	r0, r1, [sp]
 800d586:	e01a      	b.n	800d5be <_dtoa_r+0x39e>
 800d588:	2502      	movs	r5, #2
 800d58a:	e7a3      	b.n	800d4d4 <_dtoa_r+0x2b4>
 800d58c:	f000 80a0 	beq.w	800d6d0 <_dtoa_r+0x4b0>
 800d590:	f1ca 0600 	rsb	r6, sl, #0
 800d594:	4b9f      	ldr	r3, [pc, #636]	; (800d814 <_dtoa_r+0x5f4>)
 800d596:	4fa0      	ldr	r7, [pc, #640]	; (800d818 <_dtoa_r+0x5f8>)
 800d598:	f006 020f 	and.w	r2, r6, #15
 800d59c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800d5a8:	f7f3 f84e 	bl	8000648 <__aeabi_dmul>
 800d5ac:	e9cd 0100 	strd	r0, r1, [sp]
 800d5b0:	1136      	asrs	r6, r6, #4
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	2502      	movs	r5, #2
 800d5b6:	2e00      	cmp	r6, #0
 800d5b8:	d17f      	bne.n	800d6ba <_dtoa_r+0x49a>
 800d5ba:	2b00      	cmp	r3, #0
 800d5bc:	d1e1      	bne.n	800d582 <_dtoa_r+0x362>
 800d5be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	f000 8087 	beq.w	800d6d4 <_dtoa_r+0x4b4>
 800d5c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d5ca:	2200      	movs	r2, #0
 800d5cc:	4b93      	ldr	r3, [pc, #588]	; (800d81c <_dtoa_r+0x5fc>)
 800d5ce:	4630      	mov	r0, r6
 800d5d0:	4639      	mov	r1, r7
 800d5d2:	f7f3 faab 	bl	8000b2c <__aeabi_dcmplt>
 800d5d6:	2800      	cmp	r0, #0
 800d5d8:	d07c      	beq.n	800d6d4 <_dtoa_r+0x4b4>
 800d5da:	f1b9 0f00 	cmp.w	r9, #0
 800d5de:	d079      	beq.n	800d6d4 <_dtoa_r+0x4b4>
 800d5e0:	9b02      	ldr	r3, [sp, #8]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	dd35      	ble.n	800d652 <_dtoa_r+0x432>
 800d5e6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800d5ea:	9308      	str	r3, [sp, #32]
 800d5ec:	4639      	mov	r1, r7
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	4b8b      	ldr	r3, [pc, #556]	; (800d820 <_dtoa_r+0x600>)
 800d5f2:	4630      	mov	r0, r6
 800d5f4:	f7f3 f828 	bl	8000648 <__aeabi_dmul>
 800d5f8:	e9cd 0100 	strd	r0, r1, [sp]
 800d5fc:	9f02      	ldr	r7, [sp, #8]
 800d5fe:	3501      	adds	r5, #1
 800d600:	4628      	mov	r0, r5
 800d602:	f7f2 ffb7 	bl	8000574 <__aeabi_i2d>
 800d606:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d60a:	f7f3 f81d 	bl	8000648 <__aeabi_dmul>
 800d60e:	2200      	movs	r2, #0
 800d610:	4b84      	ldr	r3, [pc, #528]	; (800d824 <_dtoa_r+0x604>)
 800d612:	f7f2 fe63 	bl	80002dc <__adddf3>
 800d616:	4605      	mov	r5, r0
 800d618:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800d61c:	2f00      	cmp	r7, #0
 800d61e:	d15d      	bne.n	800d6dc <_dtoa_r+0x4bc>
 800d620:	2200      	movs	r2, #0
 800d622:	4b81      	ldr	r3, [pc, #516]	; (800d828 <_dtoa_r+0x608>)
 800d624:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d628:	f7f2 fe56 	bl	80002d8 <__aeabi_dsub>
 800d62c:	462a      	mov	r2, r5
 800d62e:	4633      	mov	r3, r6
 800d630:	e9cd 0100 	strd	r0, r1, [sp]
 800d634:	f7f3 fa98 	bl	8000b68 <__aeabi_dcmpgt>
 800d638:	2800      	cmp	r0, #0
 800d63a:	f040 8288 	bne.w	800db4e <_dtoa_r+0x92e>
 800d63e:	462a      	mov	r2, r5
 800d640:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800d644:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d648:	f7f3 fa70 	bl	8000b2c <__aeabi_dcmplt>
 800d64c:	2800      	cmp	r0, #0
 800d64e:	f040 827c 	bne.w	800db4a <_dtoa_r+0x92a>
 800d652:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800d656:	e9cd 2300 	strd	r2, r3, [sp]
 800d65a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	f2c0 8150 	blt.w	800d902 <_dtoa_r+0x6e2>
 800d662:	f1ba 0f0e 	cmp.w	sl, #14
 800d666:	f300 814c 	bgt.w	800d902 <_dtoa_r+0x6e2>
 800d66a:	4b6a      	ldr	r3, [pc, #424]	; (800d814 <_dtoa_r+0x5f4>)
 800d66c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d670:	ed93 7b00 	vldr	d7, [r3]
 800d674:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d676:	2b00      	cmp	r3, #0
 800d678:	ed8d 7b02 	vstr	d7, [sp, #8]
 800d67c:	f280 80d8 	bge.w	800d830 <_dtoa_r+0x610>
 800d680:	f1b9 0f00 	cmp.w	r9, #0
 800d684:	f300 80d4 	bgt.w	800d830 <_dtoa_r+0x610>
 800d688:	f040 825e 	bne.w	800db48 <_dtoa_r+0x928>
 800d68c:	2200      	movs	r2, #0
 800d68e:	4b66      	ldr	r3, [pc, #408]	; (800d828 <_dtoa_r+0x608>)
 800d690:	ec51 0b17 	vmov	r0, r1, d7
 800d694:	f7f2 ffd8 	bl	8000648 <__aeabi_dmul>
 800d698:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d69c:	f7f3 fa5a 	bl	8000b54 <__aeabi_dcmpge>
 800d6a0:	464f      	mov	r7, r9
 800d6a2:	464e      	mov	r6, r9
 800d6a4:	2800      	cmp	r0, #0
 800d6a6:	f040 8234 	bne.w	800db12 <_dtoa_r+0x8f2>
 800d6aa:	2331      	movs	r3, #49	; 0x31
 800d6ac:	f10b 0501 	add.w	r5, fp, #1
 800d6b0:	f88b 3000 	strb.w	r3, [fp]
 800d6b4:	f10a 0a01 	add.w	sl, sl, #1
 800d6b8:	e22f      	b.n	800db1a <_dtoa_r+0x8fa>
 800d6ba:	07f2      	lsls	r2, r6, #31
 800d6bc:	d505      	bpl.n	800d6ca <_dtoa_r+0x4aa>
 800d6be:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d6c2:	f7f2 ffc1 	bl	8000648 <__aeabi_dmul>
 800d6c6:	3501      	adds	r5, #1
 800d6c8:	2301      	movs	r3, #1
 800d6ca:	1076      	asrs	r6, r6, #1
 800d6cc:	3708      	adds	r7, #8
 800d6ce:	e772      	b.n	800d5b6 <_dtoa_r+0x396>
 800d6d0:	2502      	movs	r5, #2
 800d6d2:	e774      	b.n	800d5be <_dtoa_r+0x39e>
 800d6d4:	f8cd a020 	str.w	sl, [sp, #32]
 800d6d8:	464f      	mov	r7, r9
 800d6da:	e791      	b.n	800d600 <_dtoa_r+0x3e0>
 800d6dc:	4b4d      	ldr	r3, [pc, #308]	; (800d814 <_dtoa_r+0x5f4>)
 800d6de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d6e2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800d6e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d047      	beq.n	800d77c <_dtoa_r+0x55c>
 800d6ec:	4602      	mov	r2, r0
 800d6ee:	460b      	mov	r3, r1
 800d6f0:	2000      	movs	r0, #0
 800d6f2:	494e      	ldr	r1, [pc, #312]	; (800d82c <_dtoa_r+0x60c>)
 800d6f4:	f7f3 f8d2 	bl	800089c <__aeabi_ddiv>
 800d6f8:	462a      	mov	r2, r5
 800d6fa:	4633      	mov	r3, r6
 800d6fc:	f7f2 fdec 	bl	80002d8 <__aeabi_dsub>
 800d700:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d704:	465d      	mov	r5, fp
 800d706:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d70a:	f7f3 fa4d 	bl	8000ba8 <__aeabi_d2iz>
 800d70e:	4606      	mov	r6, r0
 800d710:	f7f2 ff30 	bl	8000574 <__aeabi_i2d>
 800d714:	4602      	mov	r2, r0
 800d716:	460b      	mov	r3, r1
 800d718:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d71c:	f7f2 fddc 	bl	80002d8 <__aeabi_dsub>
 800d720:	3630      	adds	r6, #48	; 0x30
 800d722:	f805 6b01 	strb.w	r6, [r5], #1
 800d726:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d72a:	e9cd 0100 	strd	r0, r1, [sp]
 800d72e:	f7f3 f9fd 	bl	8000b2c <__aeabi_dcmplt>
 800d732:	2800      	cmp	r0, #0
 800d734:	d163      	bne.n	800d7fe <_dtoa_r+0x5de>
 800d736:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d73a:	2000      	movs	r0, #0
 800d73c:	4937      	ldr	r1, [pc, #220]	; (800d81c <_dtoa_r+0x5fc>)
 800d73e:	f7f2 fdcb 	bl	80002d8 <__aeabi_dsub>
 800d742:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d746:	f7f3 f9f1 	bl	8000b2c <__aeabi_dcmplt>
 800d74a:	2800      	cmp	r0, #0
 800d74c:	f040 80b7 	bne.w	800d8be <_dtoa_r+0x69e>
 800d750:	eba5 030b 	sub.w	r3, r5, fp
 800d754:	429f      	cmp	r7, r3
 800d756:	f77f af7c 	ble.w	800d652 <_dtoa_r+0x432>
 800d75a:	2200      	movs	r2, #0
 800d75c:	4b30      	ldr	r3, [pc, #192]	; (800d820 <_dtoa_r+0x600>)
 800d75e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d762:	f7f2 ff71 	bl	8000648 <__aeabi_dmul>
 800d766:	2200      	movs	r2, #0
 800d768:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d76c:	4b2c      	ldr	r3, [pc, #176]	; (800d820 <_dtoa_r+0x600>)
 800d76e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d772:	f7f2 ff69 	bl	8000648 <__aeabi_dmul>
 800d776:	e9cd 0100 	strd	r0, r1, [sp]
 800d77a:	e7c4      	b.n	800d706 <_dtoa_r+0x4e6>
 800d77c:	462a      	mov	r2, r5
 800d77e:	4633      	mov	r3, r6
 800d780:	f7f2 ff62 	bl	8000648 <__aeabi_dmul>
 800d784:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d788:	eb0b 0507 	add.w	r5, fp, r7
 800d78c:	465e      	mov	r6, fp
 800d78e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d792:	f7f3 fa09 	bl	8000ba8 <__aeabi_d2iz>
 800d796:	4607      	mov	r7, r0
 800d798:	f7f2 feec 	bl	8000574 <__aeabi_i2d>
 800d79c:	3730      	adds	r7, #48	; 0x30
 800d79e:	4602      	mov	r2, r0
 800d7a0:	460b      	mov	r3, r1
 800d7a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d7a6:	f7f2 fd97 	bl	80002d8 <__aeabi_dsub>
 800d7aa:	f806 7b01 	strb.w	r7, [r6], #1
 800d7ae:	42ae      	cmp	r6, r5
 800d7b0:	e9cd 0100 	strd	r0, r1, [sp]
 800d7b4:	f04f 0200 	mov.w	r2, #0
 800d7b8:	d126      	bne.n	800d808 <_dtoa_r+0x5e8>
 800d7ba:	4b1c      	ldr	r3, [pc, #112]	; (800d82c <_dtoa_r+0x60c>)
 800d7bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d7c0:	f7f2 fd8c 	bl	80002dc <__adddf3>
 800d7c4:	4602      	mov	r2, r0
 800d7c6:	460b      	mov	r3, r1
 800d7c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d7cc:	f7f3 f9cc 	bl	8000b68 <__aeabi_dcmpgt>
 800d7d0:	2800      	cmp	r0, #0
 800d7d2:	d174      	bne.n	800d8be <_dtoa_r+0x69e>
 800d7d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800d7d8:	2000      	movs	r0, #0
 800d7da:	4914      	ldr	r1, [pc, #80]	; (800d82c <_dtoa_r+0x60c>)
 800d7dc:	f7f2 fd7c 	bl	80002d8 <__aeabi_dsub>
 800d7e0:	4602      	mov	r2, r0
 800d7e2:	460b      	mov	r3, r1
 800d7e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d7e8:	f7f3 f9a0 	bl	8000b2c <__aeabi_dcmplt>
 800d7ec:	2800      	cmp	r0, #0
 800d7ee:	f43f af30 	beq.w	800d652 <_dtoa_r+0x432>
 800d7f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d7f6:	2b30      	cmp	r3, #48	; 0x30
 800d7f8:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800d7fc:	d002      	beq.n	800d804 <_dtoa_r+0x5e4>
 800d7fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 800d802:	e04a      	b.n	800d89a <_dtoa_r+0x67a>
 800d804:	4615      	mov	r5, r2
 800d806:	e7f4      	b.n	800d7f2 <_dtoa_r+0x5d2>
 800d808:	4b05      	ldr	r3, [pc, #20]	; (800d820 <_dtoa_r+0x600>)
 800d80a:	f7f2 ff1d 	bl	8000648 <__aeabi_dmul>
 800d80e:	e9cd 0100 	strd	r0, r1, [sp]
 800d812:	e7bc      	b.n	800d78e <_dtoa_r+0x56e>
 800d814:	0800fbe8 	.word	0x0800fbe8
 800d818:	0800fbc0 	.word	0x0800fbc0
 800d81c:	3ff00000 	.word	0x3ff00000
 800d820:	40240000 	.word	0x40240000
 800d824:	401c0000 	.word	0x401c0000
 800d828:	40140000 	.word	0x40140000
 800d82c:	3fe00000 	.word	0x3fe00000
 800d830:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d834:	465d      	mov	r5, fp
 800d836:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d83a:	4630      	mov	r0, r6
 800d83c:	4639      	mov	r1, r7
 800d83e:	f7f3 f82d 	bl	800089c <__aeabi_ddiv>
 800d842:	f7f3 f9b1 	bl	8000ba8 <__aeabi_d2iz>
 800d846:	4680      	mov	r8, r0
 800d848:	f7f2 fe94 	bl	8000574 <__aeabi_i2d>
 800d84c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d850:	f7f2 fefa 	bl	8000648 <__aeabi_dmul>
 800d854:	4602      	mov	r2, r0
 800d856:	460b      	mov	r3, r1
 800d858:	4630      	mov	r0, r6
 800d85a:	4639      	mov	r1, r7
 800d85c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800d860:	f7f2 fd3a 	bl	80002d8 <__aeabi_dsub>
 800d864:	f805 6b01 	strb.w	r6, [r5], #1
 800d868:	eba5 060b 	sub.w	r6, r5, fp
 800d86c:	45b1      	cmp	r9, r6
 800d86e:	4602      	mov	r2, r0
 800d870:	460b      	mov	r3, r1
 800d872:	d139      	bne.n	800d8e8 <_dtoa_r+0x6c8>
 800d874:	f7f2 fd32 	bl	80002dc <__adddf3>
 800d878:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d87c:	4606      	mov	r6, r0
 800d87e:	460f      	mov	r7, r1
 800d880:	f7f3 f972 	bl	8000b68 <__aeabi_dcmpgt>
 800d884:	b9c8      	cbnz	r0, 800d8ba <_dtoa_r+0x69a>
 800d886:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d88a:	4630      	mov	r0, r6
 800d88c:	4639      	mov	r1, r7
 800d88e:	f7f3 f943 	bl	8000b18 <__aeabi_dcmpeq>
 800d892:	b110      	cbz	r0, 800d89a <_dtoa_r+0x67a>
 800d894:	f018 0f01 	tst.w	r8, #1
 800d898:	d10f      	bne.n	800d8ba <_dtoa_r+0x69a>
 800d89a:	9904      	ldr	r1, [sp, #16]
 800d89c:	4620      	mov	r0, r4
 800d89e:	f000 fcaa 	bl	800e1f6 <_Bfree>
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d8a6:	702b      	strb	r3, [r5, #0]
 800d8a8:	f10a 0301 	add.w	r3, sl, #1
 800d8ac:	6013      	str	r3, [r2, #0]
 800d8ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	f000 8241 	beq.w	800dd38 <_dtoa_r+0xb18>
 800d8b6:	601d      	str	r5, [r3, #0]
 800d8b8:	e23e      	b.n	800dd38 <_dtoa_r+0xb18>
 800d8ba:	f8cd a020 	str.w	sl, [sp, #32]
 800d8be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d8c2:	2a39      	cmp	r2, #57	; 0x39
 800d8c4:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800d8c8:	d108      	bne.n	800d8dc <_dtoa_r+0x6bc>
 800d8ca:	459b      	cmp	fp, r3
 800d8cc:	d10a      	bne.n	800d8e4 <_dtoa_r+0x6c4>
 800d8ce:	9b08      	ldr	r3, [sp, #32]
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	9308      	str	r3, [sp, #32]
 800d8d4:	2330      	movs	r3, #48	; 0x30
 800d8d6:	f88b 3000 	strb.w	r3, [fp]
 800d8da:	465b      	mov	r3, fp
 800d8dc:	781a      	ldrb	r2, [r3, #0]
 800d8de:	3201      	adds	r2, #1
 800d8e0:	701a      	strb	r2, [r3, #0]
 800d8e2:	e78c      	b.n	800d7fe <_dtoa_r+0x5de>
 800d8e4:	461d      	mov	r5, r3
 800d8e6:	e7ea      	b.n	800d8be <_dtoa_r+0x69e>
 800d8e8:	2200      	movs	r2, #0
 800d8ea:	4b9b      	ldr	r3, [pc, #620]	; (800db58 <_dtoa_r+0x938>)
 800d8ec:	f7f2 feac 	bl	8000648 <__aeabi_dmul>
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	2300      	movs	r3, #0
 800d8f4:	4606      	mov	r6, r0
 800d8f6:	460f      	mov	r7, r1
 800d8f8:	f7f3 f90e 	bl	8000b18 <__aeabi_dcmpeq>
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	d09a      	beq.n	800d836 <_dtoa_r+0x616>
 800d900:	e7cb      	b.n	800d89a <_dtoa_r+0x67a>
 800d902:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d904:	2a00      	cmp	r2, #0
 800d906:	f000 808b 	beq.w	800da20 <_dtoa_r+0x800>
 800d90a:	9a06      	ldr	r2, [sp, #24]
 800d90c:	2a01      	cmp	r2, #1
 800d90e:	dc6e      	bgt.n	800d9ee <_dtoa_r+0x7ce>
 800d910:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d912:	2a00      	cmp	r2, #0
 800d914:	d067      	beq.n	800d9e6 <_dtoa_r+0x7c6>
 800d916:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d91a:	9f07      	ldr	r7, [sp, #28]
 800d91c:	9d05      	ldr	r5, [sp, #20]
 800d91e:	9a05      	ldr	r2, [sp, #20]
 800d920:	2101      	movs	r1, #1
 800d922:	441a      	add	r2, r3
 800d924:	4620      	mov	r0, r4
 800d926:	9205      	str	r2, [sp, #20]
 800d928:	4498      	add	r8, r3
 800d92a:	f000 fd04 	bl	800e336 <__i2b>
 800d92e:	4606      	mov	r6, r0
 800d930:	2d00      	cmp	r5, #0
 800d932:	dd0c      	ble.n	800d94e <_dtoa_r+0x72e>
 800d934:	f1b8 0f00 	cmp.w	r8, #0
 800d938:	dd09      	ble.n	800d94e <_dtoa_r+0x72e>
 800d93a:	4545      	cmp	r5, r8
 800d93c:	9a05      	ldr	r2, [sp, #20]
 800d93e:	462b      	mov	r3, r5
 800d940:	bfa8      	it	ge
 800d942:	4643      	movge	r3, r8
 800d944:	1ad2      	subs	r2, r2, r3
 800d946:	9205      	str	r2, [sp, #20]
 800d948:	1aed      	subs	r5, r5, r3
 800d94a:	eba8 0803 	sub.w	r8, r8, r3
 800d94e:	9b07      	ldr	r3, [sp, #28]
 800d950:	b1eb      	cbz	r3, 800d98e <_dtoa_r+0x76e>
 800d952:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d954:	2b00      	cmp	r3, #0
 800d956:	d067      	beq.n	800da28 <_dtoa_r+0x808>
 800d958:	b18f      	cbz	r7, 800d97e <_dtoa_r+0x75e>
 800d95a:	4631      	mov	r1, r6
 800d95c:	463a      	mov	r2, r7
 800d95e:	4620      	mov	r0, r4
 800d960:	f000 fd88 	bl	800e474 <__pow5mult>
 800d964:	9a04      	ldr	r2, [sp, #16]
 800d966:	4601      	mov	r1, r0
 800d968:	4606      	mov	r6, r0
 800d96a:	4620      	mov	r0, r4
 800d96c:	f000 fcec 	bl	800e348 <__multiply>
 800d970:	9904      	ldr	r1, [sp, #16]
 800d972:	9008      	str	r0, [sp, #32]
 800d974:	4620      	mov	r0, r4
 800d976:	f000 fc3e 	bl	800e1f6 <_Bfree>
 800d97a:	9b08      	ldr	r3, [sp, #32]
 800d97c:	9304      	str	r3, [sp, #16]
 800d97e:	9b07      	ldr	r3, [sp, #28]
 800d980:	1bda      	subs	r2, r3, r7
 800d982:	d004      	beq.n	800d98e <_dtoa_r+0x76e>
 800d984:	9904      	ldr	r1, [sp, #16]
 800d986:	4620      	mov	r0, r4
 800d988:	f000 fd74 	bl	800e474 <__pow5mult>
 800d98c:	9004      	str	r0, [sp, #16]
 800d98e:	2101      	movs	r1, #1
 800d990:	4620      	mov	r0, r4
 800d992:	f000 fcd0 	bl	800e336 <__i2b>
 800d996:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d998:	4607      	mov	r7, r0
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	f000 81d0 	beq.w	800dd40 <_dtoa_r+0xb20>
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	4601      	mov	r1, r0
 800d9a4:	4620      	mov	r0, r4
 800d9a6:	f000 fd65 	bl	800e474 <__pow5mult>
 800d9aa:	9b06      	ldr	r3, [sp, #24]
 800d9ac:	2b01      	cmp	r3, #1
 800d9ae:	4607      	mov	r7, r0
 800d9b0:	dc40      	bgt.n	800da34 <_dtoa_r+0x814>
 800d9b2:	9b00      	ldr	r3, [sp, #0]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d139      	bne.n	800da2c <_dtoa_r+0x80c>
 800d9b8:	9b01      	ldr	r3, [sp, #4]
 800d9ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d136      	bne.n	800da30 <_dtoa_r+0x810>
 800d9c2:	9b01      	ldr	r3, [sp, #4]
 800d9c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d9c8:	0d1b      	lsrs	r3, r3, #20
 800d9ca:	051b      	lsls	r3, r3, #20
 800d9cc:	b12b      	cbz	r3, 800d9da <_dtoa_r+0x7ba>
 800d9ce:	9b05      	ldr	r3, [sp, #20]
 800d9d0:	3301      	adds	r3, #1
 800d9d2:	9305      	str	r3, [sp, #20]
 800d9d4:	f108 0801 	add.w	r8, r8, #1
 800d9d8:	2301      	movs	r3, #1
 800d9da:	9307      	str	r3, [sp, #28]
 800d9dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d12a      	bne.n	800da38 <_dtoa_r+0x818>
 800d9e2:	2001      	movs	r0, #1
 800d9e4:	e030      	b.n	800da48 <_dtoa_r+0x828>
 800d9e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d9e8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d9ec:	e795      	b.n	800d91a <_dtoa_r+0x6fa>
 800d9ee:	9b07      	ldr	r3, [sp, #28]
 800d9f0:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800d9f4:	42bb      	cmp	r3, r7
 800d9f6:	bfbf      	itttt	lt
 800d9f8:	9b07      	ldrlt	r3, [sp, #28]
 800d9fa:	9707      	strlt	r7, [sp, #28]
 800d9fc:	1afa      	sublt	r2, r7, r3
 800d9fe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800da00:	bfbb      	ittet	lt
 800da02:	189b      	addlt	r3, r3, r2
 800da04:	930e      	strlt	r3, [sp, #56]	; 0x38
 800da06:	1bdf      	subge	r7, r3, r7
 800da08:	2700      	movlt	r7, #0
 800da0a:	f1b9 0f00 	cmp.w	r9, #0
 800da0e:	bfb5      	itete	lt
 800da10:	9b05      	ldrlt	r3, [sp, #20]
 800da12:	9d05      	ldrge	r5, [sp, #20]
 800da14:	eba3 0509 	sublt.w	r5, r3, r9
 800da18:	464b      	movge	r3, r9
 800da1a:	bfb8      	it	lt
 800da1c:	2300      	movlt	r3, #0
 800da1e:	e77e      	b.n	800d91e <_dtoa_r+0x6fe>
 800da20:	9f07      	ldr	r7, [sp, #28]
 800da22:	9d05      	ldr	r5, [sp, #20]
 800da24:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800da26:	e783      	b.n	800d930 <_dtoa_r+0x710>
 800da28:	9a07      	ldr	r2, [sp, #28]
 800da2a:	e7ab      	b.n	800d984 <_dtoa_r+0x764>
 800da2c:	2300      	movs	r3, #0
 800da2e:	e7d4      	b.n	800d9da <_dtoa_r+0x7ba>
 800da30:	9b00      	ldr	r3, [sp, #0]
 800da32:	e7d2      	b.n	800d9da <_dtoa_r+0x7ba>
 800da34:	2300      	movs	r3, #0
 800da36:	9307      	str	r3, [sp, #28]
 800da38:	693b      	ldr	r3, [r7, #16]
 800da3a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800da3e:	6918      	ldr	r0, [r3, #16]
 800da40:	f000 fc2b 	bl	800e29a <__hi0bits>
 800da44:	f1c0 0020 	rsb	r0, r0, #32
 800da48:	4440      	add	r0, r8
 800da4a:	f010 001f 	ands.w	r0, r0, #31
 800da4e:	d047      	beq.n	800dae0 <_dtoa_r+0x8c0>
 800da50:	f1c0 0320 	rsb	r3, r0, #32
 800da54:	2b04      	cmp	r3, #4
 800da56:	dd3b      	ble.n	800dad0 <_dtoa_r+0x8b0>
 800da58:	9b05      	ldr	r3, [sp, #20]
 800da5a:	f1c0 001c 	rsb	r0, r0, #28
 800da5e:	4403      	add	r3, r0
 800da60:	9305      	str	r3, [sp, #20]
 800da62:	4405      	add	r5, r0
 800da64:	4480      	add	r8, r0
 800da66:	9b05      	ldr	r3, [sp, #20]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	dd05      	ble.n	800da78 <_dtoa_r+0x858>
 800da6c:	461a      	mov	r2, r3
 800da6e:	9904      	ldr	r1, [sp, #16]
 800da70:	4620      	mov	r0, r4
 800da72:	f000 fd4d 	bl	800e510 <__lshift>
 800da76:	9004      	str	r0, [sp, #16]
 800da78:	f1b8 0f00 	cmp.w	r8, #0
 800da7c:	dd05      	ble.n	800da8a <_dtoa_r+0x86a>
 800da7e:	4639      	mov	r1, r7
 800da80:	4642      	mov	r2, r8
 800da82:	4620      	mov	r0, r4
 800da84:	f000 fd44 	bl	800e510 <__lshift>
 800da88:	4607      	mov	r7, r0
 800da8a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800da8c:	b353      	cbz	r3, 800dae4 <_dtoa_r+0x8c4>
 800da8e:	4639      	mov	r1, r7
 800da90:	9804      	ldr	r0, [sp, #16]
 800da92:	f000 fd91 	bl	800e5b8 <__mcmp>
 800da96:	2800      	cmp	r0, #0
 800da98:	da24      	bge.n	800dae4 <_dtoa_r+0x8c4>
 800da9a:	2300      	movs	r3, #0
 800da9c:	220a      	movs	r2, #10
 800da9e:	9904      	ldr	r1, [sp, #16]
 800daa0:	4620      	mov	r0, r4
 800daa2:	f000 fbbf 	bl	800e224 <__multadd>
 800daa6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800daa8:	9004      	str	r0, [sp, #16]
 800daaa:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800daae:	2b00      	cmp	r3, #0
 800dab0:	f000 814d 	beq.w	800dd4e <_dtoa_r+0xb2e>
 800dab4:	2300      	movs	r3, #0
 800dab6:	4631      	mov	r1, r6
 800dab8:	220a      	movs	r2, #10
 800daba:	4620      	mov	r0, r4
 800dabc:	f000 fbb2 	bl	800e224 <__multadd>
 800dac0:	9b02      	ldr	r3, [sp, #8]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	4606      	mov	r6, r0
 800dac6:	dc4f      	bgt.n	800db68 <_dtoa_r+0x948>
 800dac8:	9b06      	ldr	r3, [sp, #24]
 800daca:	2b02      	cmp	r3, #2
 800dacc:	dd4c      	ble.n	800db68 <_dtoa_r+0x948>
 800dace:	e011      	b.n	800daf4 <_dtoa_r+0x8d4>
 800dad0:	d0c9      	beq.n	800da66 <_dtoa_r+0x846>
 800dad2:	9a05      	ldr	r2, [sp, #20]
 800dad4:	331c      	adds	r3, #28
 800dad6:	441a      	add	r2, r3
 800dad8:	9205      	str	r2, [sp, #20]
 800dada:	441d      	add	r5, r3
 800dadc:	4498      	add	r8, r3
 800dade:	e7c2      	b.n	800da66 <_dtoa_r+0x846>
 800dae0:	4603      	mov	r3, r0
 800dae2:	e7f6      	b.n	800dad2 <_dtoa_r+0x8b2>
 800dae4:	f1b9 0f00 	cmp.w	r9, #0
 800dae8:	dc38      	bgt.n	800db5c <_dtoa_r+0x93c>
 800daea:	9b06      	ldr	r3, [sp, #24]
 800daec:	2b02      	cmp	r3, #2
 800daee:	dd35      	ble.n	800db5c <_dtoa_r+0x93c>
 800daf0:	f8cd 9008 	str.w	r9, [sp, #8]
 800daf4:	9b02      	ldr	r3, [sp, #8]
 800daf6:	b963      	cbnz	r3, 800db12 <_dtoa_r+0x8f2>
 800daf8:	4639      	mov	r1, r7
 800dafa:	2205      	movs	r2, #5
 800dafc:	4620      	mov	r0, r4
 800dafe:	f000 fb91 	bl	800e224 <__multadd>
 800db02:	4601      	mov	r1, r0
 800db04:	4607      	mov	r7, r0
 800db06:	9804      	ldr	r0, [sp, #16]
 800db08:	f000 fd56 	bl	800e5b8 <__mcmp>
 800db0c:	2800      	cmp	r0, #0
 800db0e:	f73f adcc 	bgt.w	800d6aa <_dtoa_r+0x48a>
 800db12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db14:	465d      	mov	r5, fp
 800db16:	ea6f 0a03 	mvn.w	sl, r3
 800db1a:	f04f 0900 	mov.w	r9, #0
 800db1e:	4639      	mov	r1, r7
 800db20:	4620      	mov	r0, r4
 800db22:	f000 fb68 	bl	800e1f6 <_Bfree>
 800db26:	2e00      	cmp	r6, #0
 800db28:	f43f aeb7 	beq.w	800d89a <_dtoa_r+0x67a>
 800db2c:	f1b9 0f00 	cmp.w	r9, #0
 800db30:	d005      	beq.n	800db3e <_dtoa_r+0x91e>
 800db32:	45b1      	cmp	r9, r6
 800db34:	d003      	beq.n	800db3e <_dtoa_r+0x91e>
 800db36:	4649      	mov	r1, r9
 800db38:	4620      	mov	r0, r4
 800db3a:	f000 fb5c 	bl	800e1f6 <_Bfree>
 800db3e:	4631      	mov	r1, r6
 800db40:	4620      	mov	r0, r4
 800db42:	f000 fb58 	bl	800e1f6 <_Bfree>
 800db46:	e6a8      	b.n	800d89a <_dtoa_r+0x67a>
 800db48:	2700      	movs	r7, #0
 800db4a:	463e      	mov	r6, r7
 800db4c:	e7e1      	b.n	800db12 <_dtoa_r+0x8f2>
 800db4e:	f8dd a020 	ldr.w	sl, [sp, #32]
 800db52:	463e      	mov	r6, r7
 800db54:	e5a9      	b.n	800d6aa <_dtoa_r+0x48a>
 800db56:	bf00      	nop
 800db58:	40240000 	.word	0x40240000
 800db5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db5e:	f8cd 9008 	str.w	r9, [sp, #8]
 800db62:	2b00      	cmp	r3, #0
 800db64:	f000 80fa 	beq.w	800dd5c <_dtoa_r+0xb3c>
 800db68:	2d00      	cmp	r5, #0
 800db6a:	dd05      	ble.n	800db78 <_dtoa_r+0x958>
 800db6c:	4631      	mov	r1, r6
 800db6e:	462a      	mov	r2, r5
 800db70:	4620      	mov	r0, r4
 800db72:	f000 fccd 	bl	800e510 <__lshift>
 800db76:	4606      	mov	r6, r0
 800db78:	9b07      	ldr	r3, [sp, #28]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d04c      	beq.n	800dc18 <_dtoa_r+0x9f8>
 800db7e:	6871      	ldr	r1, [r6, #4]
 800db80:	4620      	mov	r0, r4
 800db82:	f000 fb04 	bl	800e18e <_Balloc>
 800db86:	6932      	ldr	r2, [r6, #16]
 800db88:	3202      	adds	r2, #2
 800db8a:	4605      	mov	r5, r0
 800db8c:	0092      	lsls	r2, r2, #2
 800db8e:	f106 010c 	add.w	r1, r6, #12
 800db92:	300c      	adds	r0, #12
 800db94:	f000 faf0 	bl	800e178 <memcpy>
 800db98:	2201      	movs	r2, #1
 800db9a:	4629      	mov	r1, r5
 800db9c:	4620      	mov	r0, r4
 800db9e:	f000 fcb7 	bl	800e510 <__lshift>
 800dba2:	9b00      	ldr	r3, [sp, #0]
 800dba4:	f8cd b014 	str.w	fp, [sp, #20]
 800dba8:	f003 0301 	and.w	r3, r3, #1
 800dbac:	46b1      	mov	r9, r6
 800dbae:	9307      	str	r3, [sp, #28]
 800dbb0:	4606      	mov	r6, r0
 800dbb2:	4639      	mov	r1, r7
 800dbb4:	9804      	ldr	r0, [sp, #16]
 800dbb6:	f7ff faa5 	bl	800d104 <quorem>
 800dbba:	4649      	mov	r1, r9
 800dbbc:	4605      	mov	r5, r0
 800dbbe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800dbc2:	9804      	ldr	r0, [sp, #16]
 800dbc4:	f000 fcf8 	bl	800e5b8 <__mcmp>
 800dbc8:	4632      	mov	r2, r6
 800dbca:	9000      	str	r0, [sp, #0]
 800dbcc:	4639      	mov	r1, r7
 800dbce:	4620      	mov	r0, r4
 800dbd0:	f000 fd0c 	bl	800e5ec <__mdiff>
 800dbd4:	68c3      	ldr	r3, [r0, #12]
 800dbd6:	4602      	mov	r2, r0
 800dbd8:	bb03      	cbnz	r3, 800dc1c <_dtoa_r+0x9fc>
 800dbda:	4601      	mov	r1, r0
 800dbdc:	9008      	str	r0, [sp, #32]
 800dbde:	9804      	ldr	r0, [sp, #16]
 800dbe0:	f000 fcea 	bl	800e5b8 <__mcmp>
 800dbe4:	9a08      	ldr	r2, [sp, #32]
 800dbe6:	4603      	mov	r3, r0
 800dbe8:	4611      	mov	r1, r2
 800dbea:	4620      	mov	r0, r4
 800dbec:	9308      	str	r3, [sp, #32]
 800dbee:	f000 fb02 	bl	800e1f6 <_Bfree>
 800dbf2:	9b08      	ldr	r3, [sp, #32]
 800dbf4:	b9a3      	cbnz	r3, 800dc20 <_dtoa_r+0xa00>
 800dbf6:	9a06      	ldr	r2, [sp, #24]
 800dbf8:	b992      	cbnz	r2, 800dc20 <_dtoa_r+0xa00>
 800dbfa:	9a07      	ldr	r2, [sp, #28]
 800dbfc:	b982      	cbnz	r2, 800dc20 <_dtoa_r+0xa00>
 800dbfe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dc02:	d029      	beq.n	800dc58 <_dtoa_r+0xa38>
 800dc04:	9b00      	ldr	r3, [sp, #0]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	dd01      	ble.n	800dc0e <_dtoa_r+0x9ee>
 800dc0a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800dc0e:	9b05      	ldr	r3, [sp, #20]
 800dc10:	1c5d      	adds	r5, r3, #1
 800dc12:	f883 8000 	strb.w	r8, [r3]
 800dc16:	e782      	b.n	800db1e <_dtoa_r+0x8fe>
 800dc18:	4630      	mov	r0, r6
 800dc1a:	e7c2      	b.n	800dba2 <_dtoa_r+0x982>
 800dc1c:	2301      	movs	r3, #1
 800dc1e:	e7e3      	b.n	800dbe8 <_dtoa_r+0x9c8>
 800dc20:	9a00      	ldr	r2, [sp, #0]
 800dc22:	2a00      	cmp	r2, #0
 800dc24:	db04      	blt.n	800dc30 <_dtoa_r+0xa10>
 800dc26:	d125      	bne.n	800dc74 <_dtoa_r+0xa54>
 800dc28:	9a06      	ldr	r2, [sp, #24]
 800dc2a:	bb1a      	cbnz	r2, 800dc74 <_dtoa_r+0xa54>
 800dc2c:	9a07      	ldr	r2, [sp, #28]
 800dc2e:	bb0a      	cbnz	r2, 800dc74 <_dtoa_r+0xa54>
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	ddec      	ble.n	800dc0e <_dtoa_r+0x9ee>
 800dc34:	2201      	movs	r2, #1
 800dc36:	9904      	ldr	r1, [sp, #16]
 800dc38:	4620      	mov	r0, r4
 800dc3a:	f000 fc69 	bl	800e510 <__lshift>
 800dc3e:	4639      	mov	r1, r7
 800dc40:	9004      	str	r0, [sp, #16]
 800dc42:	f000 fcb9 	bl	800e5b8 <__mcmp>
 800dc46:	2800      	cmp	r0, #0
 800dc48:	dc03      	bgt.n	800dc52 <_dtoa_r+0xa32>
 800dc4a:	d1e0      	bne.n	800dc0e <_dtoa_r+0x9ee>
 800dc4c:	f018 0f01 	tst.w	r8, #1
 800dc50:	d0dd      	beq.n	800dc0e <_dtoa_r+0x9ee>
 800dc52:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dc56:	d1d8      	bne.n	800dc0a <_dtoa_r+0x9ea>
 800dc58:	9b05      	ldr	r3, [sp, #20]
 800dc5a:	9a05      	ldr	r2, [sp, #20]
 800dc5c:	1c5d      	adds	r5, r3, #1
 800dc5e:	2339      	movs	r3, #57	; 0x39
 800dc60:	7013      	strb	r3, [r2, #0]
 800dc62:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dc66:	2b39      	cmp	r3, #57	; 0x39
 800dc68:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800dc6c:	d04f      	beq.n	800dd0e <_dtoa_r+0xaee>
 800dc6e:	3301      	adds	r3, #1
 800dc70:	7013      	strb	r3, [r2, #0]
 800dc72:	e754      	b.n	800db1e <_dtoa_r+0x8fe>
 800dc74:	9a05      	ldr	r2, [sp, #20]
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	f102 0501 	add.w	r5, r2, #1
 800dc7c:	dd06      	ble.n	800dc8c <_dtoa_r+0xa6c>
 800dc7e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800dc82:	d0e9      	beq.n	800dc58 <_dtoa_r+0xa38>
 800dc84:	f108 0801 	add.w	r8, r8, #1
 800dc88:	9b05      	ldr	r3, [sp, #20]
 800dc8a:	e7c2      	b.n	800dc12 <_dtoa_r+0x9f2>
 800dc8c:	9a02      	ldr	r2, [sp, #8]
 800dc8e:	f805 8c01 	strb.w	r8, [r5, #-1]
 800dc92:	eba5 030b 	sub.w	r3, r5, fp
 800dc96:	4293      	cmp	r3, r2
 800dc98:	d021      	beq.n	800dcde <_dtoa_r+0xabe>
 800dc9a:	2300      	movs	r3, #0
 800dc9c:	220a      	movs	r2, #10
 800dc9e:	9904      	ldr	r1, [sp, #16]
 800dca0:	4620      	mov	r0, r4
 800dca2:	f000 fabf 	bl	800e224 <__multadd>
 800dca6:	45b1      	cmp	r9, r6
 800dca8:	9004      	str	r0, [sp, #16]
 800dcaa:	f04f 0300 	mov.w	r3, #0
 800dcae:	f04f 020a 	mov.w	r2, #10
 800dcb2:	4649      	mov	r1, r9
 800dcb4:	4620      	mov	r0, r4
 800dcb6:	d105      	bne.n	800dcc4 <_dtoa_r+0xaa4>
 800dcb8:	f000 fab4 	bl	800e224 <__multadd>
 800dcbc:	4681      	mov	r9, r0
 800dcbe:	4606      	mov	r6, r0
 800dcc0:	9505      	str	r5, [sp, #20]
 800dcc2:	e776      	b.n	800dbb2 <_dtoa_r+0x992>
 800dcc4:	f000 faae 	bl	800e224 <__multadd>
 800dcc8:	4631      	mov	r1, r6
 800dcca:	4681      	mov	r9, r0
 800dccc:	2300      	movs	r3, #0
 800dcce:	220a      	movs	r2, #10
 800dcd0:	4620      	mov	r0, r4
 800dcd2:	f000 faa7 	bl	800e224 <__multadd>
 800dcd6:	4606      	mov	r6, r0
 800dcd8:	e7f2      	b.n	800dcc0 <_dtoa_r+0xaa0>
 800dcda:	f04f 0900 	mov.w	r9, #0
 800dcde:	2201      	movs	r2, #1
 800dce0:	9904      	ldr	r1, [sp, #16]
 800dce2:	4620      	mov	r0, r4
 800dce4:	f000 fc14 	bl	800e510 <__lshift>
 800dce8:	4639      	mov	r1, r7
 800dcea:	9004      	str	r0, [sp, #16]
 800dcec:	f000 fc64 	bl	800e5b8 <__mcmp>
 800dcf0:	2800      	cmp	r0, #0
 800dcf2:	dcb6      	bgt.n	800dc62 <_dtoa_r+0xa42>
 800dcf4:	d102      	bne.n	800dcfc <_dtoa_r+0xadc>
 800dcf6:	f018 0f01 	tst.w	r8, #1
 800dcfa:	d1b2      	bne.n	800dc62 <_dtoa_r+0xa42>
 800dcfc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dd00:	2b30      	cmp	r3, #48	; 0x30
 800dd02:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800dd06:	f47f af0a 	bne.w	800db1e <_dtoa_r+0x8fe>
 800dd0a:	4615      	mov	r5, r2
 800dd0c:	e7f6      	b.n	800dcfc <_dtoa_r+0xadc>
 800dd0e:	4593      	cmp	fp, r2
 800dd10:	d105      	bne.n	800dd1e <_dtoa_r+0xafe>
 800dd12:	2331      	movs	r3, #49	; 0x31
 800dd14:	f10a 0a01 	add.w	sl, sl, #1
 800dd18:	f88b 3000 	strb.w	r3, [fp]
 800dd1c:	e6ff      	b.n	800db1e <_dtoa_r+0x8fe>
 800dd1e:	4615      	mov	r5, r2
 800dd20:	e79f      	b.n	800dc62 <_dtoa_r+0xa42>
 800dd22:	f8df b064 	ldr.w	fp, [pc, #100]	; 800dd88 <_dtoa_r+0xb68>
 800dd26:	e007      	b.n	800dd38 <_dtoa_r+0xb18>
 800dd28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dd2a:	f8df b060 	ldr.w	fp, [pc, #96]	; 800dd8c <_dtoa_r+0xb6c>
 800dd2e:	b11b      	cbz	r3, 800dd38 <_dtoa_r+0xb18>
 800dd30:	f10b 0308 	add.w	r3, fp, #8
 800dd34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800dd36:	6013      	str	r3, [r2, #0]
 800dd38:	4658      	mov	r0, fp
 800dd3a:	b017      	add	sp, #92	; 0x5c
 800dd3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd40:	9b06      	ldr	r3, [sp, #24]
 800dd42:	2b01      	cmp	r3, #1
 800dd44:	f77f ae35 	ble.w	800d9b2 <_dtoa_r+0x792>
 800dd48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800dd4a:	9307      	str	r3, [sp, #28]
 800dd4c:	e649      	b.n	800d9e2 <_dtoa_r+0x7c2>
 800dd4e:	9b02      	ldr	r3, [sp, #8]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	dc03      	bgt.n	800dd5c <_dtoa_r+0xb3c>
 800dd54:	9b06      	ldr	r3, [sp, #24]
 800dd56:	2b02      	cmp	r3, #2
 800dd58:	f73f aecc 	bgt.w	800daf4 <_dtoa_r+0x8d4>
 800dd5c:	465d      	mov	r5, fp
 800dd5e:	4639      	mov	r1, r7
 800dd60:	9804      	ldr	r0, [sp, #16]
 800dd62:	f7ff f9cf 	bl	800d104 <quorem>
 800dd66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800dd6a:	f805 8b01 	strb.w	r8, [r5], #1
 800dd6e:	9a02      	ldr	r2, [sp, #8]
 800dd70:	eba5 030b 	sub.w	r3, r5, fp
 800dd74:	429a      	cmp	r2, r3
 800dd76:	ddb0      	ble.n	800dcda <_dtoa_r+0xaba>
 800dd78:	2300      	movs	r3, #0
 800dd7a:	220a      	movs	r2, #10
 800dd7c:	9904      	ldr	r1, [sp, #16]
 800dd7e:	4620      	mov	r0, r4
 800dd80:	f000 fa50 	bl	800e224 <__multadd>
 800dd84:	9004      	str	r0, [sp, #16]
 800dd86:	e7ea      	b.n	800dd5e <_dtoa_r+0xb3e>
 800dd88:	0800fb2c 	.word	0x0800fb2c
 800dd8c:	0800fb50 	.word	0x0800fb50

0800dd90 <__sflush_r>:
 800dd90:	898a      	ldrh	r2, [r1, #12]
 800dd92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd96:	4605      	mov	r5, r0
 800dd98:	0710      	lsls	r0, r2, #28
 800dd9a:	460c      	mov	r4, r1
 800dd9c:	d458      	bmi.n	800de50 <__sflush_r+0xc0>
 800dd9e:	684b      	ldr	r3, [r1, #4]
 800dda0:	2b00      	cmp	r3, #0
 800dda2:	dc05      	bgt.n	800ddb0 <__sflush_r+0x20>
 800dda4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dda6:	2b00      	cmp	r3, #0
 800dda8:	dc02      	bgt.n	800ddb0 <__sflush_r+0x20>
 800ddaa:	2000      	movs	r0, #0
 800ddac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddb0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ddb2:	2e00      	cmp	r6, #0
 800ddb4:	d0f9      	beq.n	800ddaa <__sflush_r+0x1a>
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800ddbc:	682f      	ldr	r7, [r5, #0]
 800ddbe:	6a21      	ldr	r1, [r4, #32]
 800ddc0:	602b      	str	r3, [r5, #0]
 800ddc2:	d032      	beq.n	800de2a <__sflush_r+0x9a>
 800ddc4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800ddc6:	89a3      	ldrh	r3, [r4, #12]
 800ddc8:	075a      	lsls	r2, r3, #29
 800ddca:	d505      	bpl.n	800ddd8 <__sflush_r+0x48>
 800ddcc:	6863      	ldr	r3, [r4, #4]
 800ddce:	1ac0      	subs	r0, r0, r3
 800ddd0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ddd2:	b10b      	cbz	r3, 800ddd8 <__sflush_r+0x48>
 800ddd4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ddd6:	1ac0      	subs	r0, r0, r3
 800ddd8:	2300      	movs	r3, #0
 800ddda:	4602      	mov	r2, r0
 800dddc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ddde:	6a21      	ldr	r1, [r4, #32]
 800dde0:	4628      	mov	r0, r5
 800dde2:	47b0      	blx	r6
 800dde4:	1c43      	adds	r3, r0, #1
 800dde6:	89a3      	ldrh	r3, [r4, #12]
 800dde8:	d106      	bne.n	800ddf8 <__sflush_r+0x68>
 800ddea:	6829      	ldr	r1, [r5, #0]
 800ddec:	291d      	cmp	r1, #29
 800ddee:	d848      	bhi.n	800de82 <__sflush_r+0xf2>
 800ddf0:	4a29      	ldr	r2, [pc, #164]	; (800de98 <__sflush_r+0x108>)
 800ddf2:	40ca      	lsrs	r2, r1
 800ddf4:	07d6      	lsls	r6, r2, #31
 800ddf6:	d544      	bpl.n	800de82 <__sflush_r+0xf2>
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	6062      	str	r2, [r4, #4]
 800ddfc:	04d9      	lsls	r1, r3, #19
 800ddfe:	6922      	ldr	r2, [r4, #16]
 800de00:	6022      	str	r2, [r4, #0]
 800de02:	d504      	bpl.n	800de0e <__sflush_r+0x7e>
 800de04:	1c42      	adds	r2, r0, #1
 800de06:	d101      	bne.n	800de0c <__sflush_r+0x7c>
 800de08:	682b      	ldr	r3, [r5, #0]
 800de0a:	b903      	cbnz	r3, 800de0e <__sflush_r+0x7e>
 800de0c:	6560      	str	r0, [r4, #84]	; 0x54
 800de0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800de10:	602f      	str	r7, [r5, #0]
 800de12:	2900      	cmp	r1, #0
 800de14:	d0c9      	beq.n	800ddaa <__sflush_r+0x1a>
 800de16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800de1a:	4299      	cmp	r1, r3
 800de1c:	d002      	beq.n	800de24 <__sflush_r+0x94>
 800de1e:	4628      	mov	r0, r5
 800de20:	f000 fc9e 	bl	800e760 <_free_r>
 800de24:	2000      	movs	r0, #0
 800de26:	6360      	str	r0, [r4, #52]	; 0x34
 800de28:	e7c0      	b.n	800ddac <__sflush_r+0x1c>
 800de2a:	2301      	movs	r3, #1
 800de2c:	4628      	mov	r0, r5
 800de2e:	47b0      	blx	r6
 800de30:	1c41      	adds	r1, r0, #1
 800de32:	d1c8      	bne.n	800ddc6 <__sflush_r+0x36>
 800de34:	682b      	ldr	r3, [r5, #0]
 800de36:	2b00      	cmp	r3, #0
 800de38:	d0c5      	beq.n	800ddc6 <__sflush_r+0x36>
 800de3a:	2b1d      	cmp	r3, #29
 800de3c:	d001      	beq.n	800de42 <__sflush_r+0xb2>
 800de3e:	2b16      	cmp	r3, #22
 800de40:	d101      	bne.n	800de46 <__sflush_r+0xb6>
 800de42:	602f      	str	r7, [r5, #0]
 800de44:	e7b1      	b.n	800ddaa <__sflush_r+0x1a>
 800de46:	89a3      	ldrh	r3, [r4, #12]
 800de48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de4c:	81a3      	strh	r3, [r4, #12]
 800de4e:	e7ad      	b.n	800ddac <__sflush_r+0x1c>
 800de50:	690f      	ldr	r7, [r1, #16]
 800de52:	2f00      	cmp	r7, #0
 800de54:	d0a9      	beq.n	800ddaa <__sflush_r+0x1a>
 800de56:	0793      	lsls	r3, r2, #30
 800de58:	680e      	ldr	r6, [r1, #0]
 800de5a:	bf08      	it	eq
 800de5c:	694b      	ldreq	r3, [r1, #20]
 800de5e:	600f      	str	r7, [r1, #0]
 800de60:	bf18      	it	ne
 800de62:	2300      	movne	r3, #0
 800de64:	eba6 0807 	sub.w	r8, r6, r7
 800de68:	608b      	str	r3, [r1, #8]
 800de6a:	f1b8 0f00 	cmp.w	r8, #0
 800de6e:	dd9c      	ble.n	800ddaa <__sflush_r+0x1a>
 800de70:	4643      	mov	r3, r8
 800de72:	463a      	mov	r2, r7
 800de74:	6a21      	ldr	r1, [r4, #32]
 800de76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800de78:	4628      	mov	r0, r5
 800de7a:	47b0      	blx	r6
 800de7c:	2800      	cmp	r0, #0
 800de7e:	dc06      	bgt.n	800de8e <__sflush_r+0xfe>
 800de80:	89a3      	ldrh	r3, [r4, #12]
 800de82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de86:	81a3      	strh	r3, [r4, #12]
 800de88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800de8c:	e78e      	b.n	800ddac <__sflush_r+0x1c>
 800de8e:	4407      	add	r7, r0
 800de90:	eba8 0800 	sub.w	r8, r8, r0
 800de94:	e7e9      	b.n	800de6a <__sflush_r+0xda>
 800de96:	bf00      	nop
 800de98:	20400001 	.word	0x20400001

0800de9c <_fflush_r>:
 800de9c:	b538      	push	{r3, r4, r5, lr}
 800de9e:	690b      	ldr	r3, [r1, #16]
 800dea0:	4605      	mov	r5, r0
 800dea2:	460c      	mov	r4, r1
 800dea4:	b1db      	cbz	r3, 800dede <_fflush_r+0x42>
 800dea6:	b118      	cbz	r0, 800deb0 <_fflush_r+0x14>
 800dea8:	6983      	ldr	r3, [r0, #24]
 800deaa:	b90b      	cbnz	r3, 800deb0 <_fflush_r+0x14>
 800deac:	f000 f860 	bl	800df70 <__sinit>
 800deb0:	4b0c      	ldr	r3, [pc, #48]	; (800dee4 <_fflush_r+0x48>)
 800deb2:	429c      	cmp	r4, r3
 800deb4:	d109      	bne.n	800deca <_fflush_r+0x2e>
 800deb6:	686c      	ldr	r4, [r5, #4]
 800deb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800debc:	b17b      	cbz	r3, 800dede <_fflush_r+0x42>
 800debe:	4621      	mov	r1, r4
 800dec0:	4628      	mov	r0, r5
 800dec2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dec6:	f7ff bf63 	b.w	800dd90 <__sflush_r>
 800deca:	4b07      	ldr	r3, [pc, #28]	; (800dee8 <_fflush_r+0x4c>)
 800decc:	429c      	cmp	r4, r3
 800dece:	d101      	bne.n	800ded4 <_fflush_r+0x38>
 800ded0:	68ac      	ldr	r4, [r5, #8]
 800ded2:	e7f1      	b.n	800deb8 <_fflush_r+0x1c>
 800ded4:	4b05      	ldr	r3, [pc, #20]	; (800deec <_fflush_r+0x50>)
 800ded6:	429c      	cmp	r4, r3
 800ded8:	bf08      	it	eq
 800deda:	68ec      	ldreq	r4, [r5, #12]
 800dedc:	e7ec      	b.n	800deb8 <_fflush_r+0x1c>
 800dede:	2000      	movs	r0, #0
 800dee0:	bd38      	pop	{r3, r4, r5, pc}
 800dee2:	bf00      	nop
 800dee4:	0800fb80 	.word	0x0800fb80
 800dee8:	0800fba0 	.word	0x0800fba0
 800deec:	0800fb60 	.word	0x0800fb60

0800def0 <std>:
 800def0:	2300      	movs	r3, #0
 800def2:	b510      	push	{r4, lr}
 800def4:	4604      	mov	r4, r0
 800def6:	e9c0 3300 	strd	r3, r3, [r0]
 800defa:	6083      	str	r3, [r0, #8]
 800defc:	8181      	strh	r1, [r0, #12]
 800defe:	6643      	str	r3, [r0, #100]	; 0x64
 800df00:	81c2      	strh	r2, [r0, #14]
 800df02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800df06:	6183      	str	r3, [r0, #24]
 800df08:	4619      	mov	r1, r3
 800df0a:	2208      	movs	r2, #8
 800df0c:	305c      	adds	r0, #92	; 0x5c
 800df0e:	f7fe fb2d 	bl	800c56c <memset>
 800df12:	4b05      	ldr	r3, [pc, #20]	; (800df28 <std+0x38>)
 800df14:	6263      	str	r3, [r4, #36]	; 0x24
 800df16:	4b05      	ldr	r3, [pc, #20]	; (800df2c <std+0x3c>)
 800df18:	62a3      	str	r3, [r4, #40]	; 0x28
 800df1a:	4b05      	ldr	r3, [pc, #20]	; (800df30 <std+0x40>)
 800df1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800df1e:	4b05      	ldr	r3, [pc, #20]	; (800df34 <std+0x44>)
 800df20:	6224      	str	r4, [r4, #32]
 800df22:	6323      	str	r3, [r4, #48]	; 0x30
 800df24:	bd10      	pop	{r4, pc}
 800df26:	bf00      	nop
 800df28:	0800eb75 	.word	0x0800eb75
 800df2c:	0800eb97 	.word	0x0800eb97
 800df30:	0800ebcf 	.word	0x0800ebcf
 800df34:	0800ebf3 	.word	0x0800ebf3

0800df38 <_cleanup_r>:
 800df38:	4901      	ldr	r1, [pc, #4]	; (800df40 <_cleanup_r+0x8>)
 800df3a:	f000 b885 	b.w	800e048 <_fwalk_reent>
 800df3e:	bf00      	nop
 800df40:	0800de9d 	.word	0x0800de9d

0800df44 <__sfmoreglue>:
 800df44:	b570      	push	{r4, r5, r6, lr}
 800df46:	1e4a      	subs	r2, r1, #1
 800df48:	2568      	movs	r5, #104	; 0x68
 800df4a:	4355      	muls	r5, r2
 800df4c:	460e      	mov	r6, r1
 800df4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800df52:	f000 fc53 	bl	800e7fc <_malloc_r>
 800df56:	4604      	mov	r4, r0
 800df58:	b140      	cbz	r0, 800df6c <__sfmoreglue+0x28>
 800df5a:	2100      	movs	r1, #0
 800df5c:	e9c0 1600 	strd	r1, r6, [r0]
 800df60:	300c      	adds	r0, #12
 800df62:	60a0      	str	r0, [r4, #8]
 800df64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800df68:	f7fe fb00 	bl	800c56c <memset>
 800df6c:	4620      	mov	r0, r4
 800df6e:	bd70      	pop	{r4, r5, r6, pc}

0800df70 <__sinit>:
 800df70:	6983      	ldr	r3, [r0, #24]
 800df72:	b510      	push	{r4, lr}
 800df74:	4604      	mov	r4, r0
 800df76:	bb33      	cbnz	r3, 800dfc6 <__sinit+0x56>
 800df78:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800df7c:	6503      	str	r3, [r0, #80]	; 0x50
 800df7e:	4b12      	ldr	r3, [pc, #72]	; (800dfc8 <__sinit+0x58>)
 800df80:	4a12      	ldr	r2, [pc, #72]	; (800dfcc <__sinit+0x5c>)
 800df82:	681b      	ldr	r3, [r3, #0]
 800df84:	6282      	str	r2, [r0, #40]	; 0x28
 800df86:	4298      	cmp	r0, r3
 800df88:	bf04      	itt	eq
 800df8a:	2301      	moveq	r3, #1
 800df8c:	6183      	streq	r3, [r0, #24]
 800df8e:	f000 f81f 	bl	800dfd0 <__sfp>
 800df92:	6060      	str	r0, [r4, #4]
 800df94:	4620      	mov	r0, r4
 800df96:	f000 f81b 	bl	800dfd0 <__sfp>
 800df9a:	60a0      	str	r0, [r4, #8]
 800df9c:	4620      	mov	r0, r4
 800df9e:	f000 f817 	bl	800dfd0 <__sfp>
 800dfa2:	2200      	movs	r2, #0
 800dfa4:	60e0      	str	r0, [r4, #12]
 800dfa6:	2104      	movs	r1, #4
 800dfa8:	6860      	ldr	r0, [r4, #4]
 800dfaa:	f7ff ffa1 	bl	800def0 <std>
 800dfae:	2201      	movs	r2, #1
 800dfb0:	2109      	movs	r1, #9
 800dfb2:	68a0      	ldr	r0, [r4, #8]
 800dfb4:	f7ff ff9c 	bl	800def0 <std>
 800dfb8:	2202      	movs	r2, #2
 800dfba:	2112      	movs	r1, #18
 800dfbc:	68e0      	ldr	r0, [r4, #12]
 800dfbe:	f7ff ff97 	bl	800def0 <std>
 800dfc2:	2301      	movs	r3, #1
 800dfc4:	61a3      	str	r3, [r4, #24]
 800dfc6:	bd10      	pop	{r4, pc}
 800dfc8:	0800fb18 	.word	0x0800fb18
 800dfcc:	0800df39 	.word	0x0800df39

0800dfd0 <__sfp>:
 800dfd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfd2:	4b1b      	ldr	r3, [pc, #108]	; (800e040 <__sfp+0x70>)
 800dfd4:	681e      	ldr	r6, [r3, #0]
 800dfd6:	69b3      	ldr	r3, [r6, #24]
 800dfd8:	4607      	mov	r7, r0
 800dfda:	b913      	cbnz	r3, 800dfe2 <__sfp+0x12>
 800dfdc:	4630      	mov	r0, r6
 800dfde:	f7ff ffc7 	bl	800df70 <__sinit>
 800dfe2:	3648      	adds	r6, #72	; 0x48
 800dfe4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800dfe8:	3b01      	subs	r3, #1
 800dfea:	d503      	bpl.n	800dff4 <__sfp+0x24>
 800dfec:	6833      	ldr	r3, [r6, #0]
 800dfee:	b133      	cbz	r3, 800dffe <__sfp+0x2e>
 800dff0:	6836      	ldr	r6, [r6, #0]
 800dff2:	e7f7      	b.n	800dfe4 <__sfp+0x14>
 800dff4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800dff8:	b16d      	cbz	r5, 800e016 <__sfp+0x46>
 800dffa:	3468      	adds	r4, #104	; 0x68
 800dffc:	e7f4      	b.n	800dfe8 <__sfp+0x18>
 800dffe:	2104      	movs	r1, #4
 800e000:	4638      	mov	r0, r7
 800e002:	f7ff ff9f 	bl	800df44 <__sfmoreglue>
 800e006:	6030      	str	r0, [r6, #0]
 800e008:	2800      	cmp	r0, #0
 800e00a:	d1f1      	bne.n	800dff0 <__sfp+0x20>
 800e00c:	230c      	movs	r3, #12
 800e00e:	603b      	str	r3, [r7, #0]
 800e010:	4604      	mov	r4, r0
 800e012:	4620      	mov	r0, r4
 800e014:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e016:	4b0b      	ldr	r3, [pc, #44]	; (800e044 <__sfp+0x74>)
 800e018:	6665      	str	r5, [r4, #100]	; 0x64
 800e01a:	e9c4 5500 	strd	r5, r5, [r4]
 800e01e:	60a5      	str	r5, [r4, #8]
 800e020:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800e024:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800e028:	2208      	movs	r2, #8
 800e02a:	4629      	mov	r1, r5
 800e02c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e030:	f7fe fa9c 	bl	800c56c <memset>
 800e034:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e038:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e03c:	e7e9      	b.n	800e012 <__sfp+0x42>
 800e03e:	bf00      	nop
 800e040:	0800fb18 	.word	0x0800fb18
 800e044:	ffff0001 	.word	0xffff0001

0800e048 <_fwalk_reent>:
 800e048:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e04c:	4680      	mov	r8, r0
 800e04e:	4689      	mov	r9, r1
 800e050:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e054:	2600      	movs	r6, #0
 800e056:	b914      	cbnz	r4, 800e05e <_fwalk_reent+0x16>
 800e058:	4630      	mov	r0, r6
 800e05a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e05e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800e062:	3f01      	subs	r7, #1
 800e064:	d501      	bpl.n	800e06a <_fwalk_reent+0x22>
 800e066:	6824      	ldr	r4, [r4, #0]
 800e068:	e7f5      	b.n	800e056 <_fwalk_reent+0xe>
 800e06a:	89ab      	ldrh	r3, [r5, #12]
 800e06c:	2b01      	cmp	r3, #1
 800e06e:	d907      	bls.n	800e080 <_fwalk_reent+0x38>
 800e070:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e074:	3301      	adds	r3, #1
 800e076:	d003      	beq.n	800e080 <_fwalk_reent+0x38>
 800e078:	4629      	mov	r1, r5
 800e07a:	4640      	mov	r0, r8
 800e07c:	47c8      	blx	r9
 800e07e:	4306      	orrs	r6, r0
 800e080:	3568      	adds	r5, #104	; 0x68
 800e082:	e7ee      	b.n	800e062 <_fwalk_reent+0x1a>

0800e084 <_localeconv_r>:
 800e084:	4b04      	ldr	r3, [pc, #16]	; (800e098 <_localeconv_r+0x14>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	6a18      	ldr	r0, [r3, #32]
 800e08a:	4b04      	ldr	r3, [pc, #16]	; (800e09c <_localeconv_r+0x18>)
 800e08c:	2800      	cmp	r0, #0
 800e08e:	bf08      	it	eq
 800e090:	4618      	moveq	r0, r3
 800e092:	30f0      	adds	r0, #240	; 0xf0
 800e094:	4770      	bx	lr
 800e096:	bf00      	nop
 800e098:	20001c90 	.word	0x20001c90
 800e09c:	20001cf4 	.word	0x20001cf4

0800e0a0 <__swhatbuf_r>:
 800e0a0:	b570      	push	{r4, r5, r6, lr}
 800e0a2:	460e      	mov	r6, r1
 800e0a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e0a8:	2900      	cmp	r1, #0
 800e0aa:	b096      	sub	sp, #88	; 0x58
 800e0ac:	4614      	mov	r4, r2
 800e0ae:	461d      	mov	r5, r3
 800e0b0:	da07      	bge.n	800e0c2 <__swhatbuf_r+0x22>
 800e0b2:	2300      	movs	r3, #0
 800e0b4:	602b      	str	r3, [r5, #0]
 800e0b6:	89b3      	ldrh	r3, [r6, #12]
 800e0b8:	061a      	lsls	r2, r3, #24
 800e0ba:	d410      	bmi.n	800e0de <__swhatbuf_r+0x3e>
 800e0bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e0c0:	e00e      	b.n	800e0e0 <__swhatbuf_r+0x40>
 800e0c2:	466a      	mov	r2, sp
 800e0c4:	f000 fdbc 	bl	800ec40 <_fstat_r>
 800e0c8:	2800      	cmp	r0, #0
 800e0ca:	dbf2      	blt.n	800e0b2 <__swhatbuf_r+0x12>
 800e0cc:	9a01      	ldr	r2, [sp, #4]
 800e0ce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e0d2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e0d6:	425a      	negs	r2, r3
 800e0d8:	415a      	adcs	r2, r3
 800e0da:	602a      	str	r2, [r5, #0]
 800e0dc:	e7ee      	b.n	800e0bc <__swhatbuf_r+0x1c>
 800e0de:	2340      	movs	r3, #64	; 0x40
 800e0e0:	2000      	movs	r0, #0
 800e0e2:	6023      	str	r3, [r4, #0]
 800e0e4:	b016      	add	sp, #88	; 0x58
 800e0e6:	bd70      	pop	{r4, r5, r6, pc}

0800e0e8 <__smakebuf_r>:
 800e0e8:	898b      	ldrh	r3, [r1, #12]
 800e0ea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e0ec:	079d      	lsls	r5, r3, #30
 800e0ee:	4606      	mov	r6, r0
 800e0f0:	460c      	mov	r4, r1
 800e0f2:	d507      	bpl.n	800e104 <__smakebuf_r+0x1c>
 800e0f4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e0f8:	6023      	str	r3, [r4, #0]
 800e0fa:	6123      	str	r3, [r4, #16]
 800e0fc:	2301      	movs	r3, #1
 800e0fe:	6163      	str	r3, [r4, #20]
 800e100:	b002      	add	sp, #8
 800e102:	bd70      	pop	{r4, r5, r6, pc}
 800e104:	ab01      	add	r3, sp, #4
 800e106:	466a      	mov	r2, sp
 800e108:	f7ff ffca 	bl	800e0a0 <__swhatbuf_r>
 800e10c:	9900      	ldr	r1, [sp, #0]
 800e10e:	4605      	mov	r5, r0
 800e110:	4630      	mov	r0, r6
 800e112:	f000 fb73 	bl	800e7fc <_malloc_r>
 800e116:	b948      	cbnz	r0, 800e12c <__smakebuf_r+0x44>
 800e118:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e11c:	059a      	lsls	r2, r3, #22
 800e11e:	d4ef      	bmi.n	800e100 <__smakebuf_r+0x18>
 800e120:	f023 0303 	bic.w	r3, r3, #3
 800e124:	f043 0302 	orr.w	r3, r3, #2
 800e128:	81a3      	strh	r3, [r4, #12]
 800e12a:	e7e3      	b.n	800e0f4 <__smakebuf_r+0xc>
 800e12c:	4b0d      	ldr	r3, [pc, #52]	; (800e164 <__smakebuf_r+0x7c>)
 800e12e:	62b3      	str	r3, [r6, #40]	; 0x28
 800e130:	89a3      	ldrh	r3, [r4, #12]
 800e132:	6020      	str	r0, [r4, #0]
 800e134:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e138:	81a3      	strh	r3, [r4, #12]
 800e13a:	9b00      	ldr	r3, [sp, #0]
 800e13c:	6163      	str	r3, [r4, #20]
 800e13e:	9b01      	ldr	r3, [sp, #4]
 800e140:	6120      	str	r0, [r4, #16]
 800e142:	b15b      	cbz	r3, 800e15c <__smakebuf_r+0x74>
 800e144:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e148:	4630      	mov	r0, r6
 800e14a:	f000 fd8b 	bl	800ec64 <_isatty_r>
 800e14e:	b128      	cbz	r0, 800e15c <__smakebuf_r+0x74>
 800e150:	89a3      	ldrh	r3, [r4, #12]
 800e152:	f023 0303 	bic.w	r3, r3, #3
 800e156:	f043 0301 	orr.w	r3, r3, #1
 800e15a:	81a3      	strh	r3, [r4, #12]
 800e15c:	89a3      	ldrh	r3, [r4, #12]
 800e15e:	431d      	orrs	r5, r3
 800e160:	81a5      	strh	r5, [r4, #12]
 800e162:	e7cd      	b.n	800e100 <__smakebuf_r+0x18>
 800e164:	0800df39 	.word	0x0800df39

0800e168 <malloc>:
 800e168:	4b02      	ldr	r3, [pc, #8]	; (800e174 <malloc+0xc>)
 800e16a:	4601      	mov	r1, r0
 800e16c:	6818      	ldr	r0, [r3, #0]
 800e16e:	f000 bb45 	b.w	800e7fc <_malloc_r>
 800e172:	bf00      	nop
 800e174:	20001c90 	.word	0x20001c90

0800e178 <memcpy>:
 800e178:	b510      	push	{r4, lr}
 800e17a:	1e43      	subs	r3, r0, #1
 800e17c:	440a      	add	r2, r1
 800e17e:	4291      	cmp	r1, r2
 800e180:	d100      	bne.n	800e184 <memcpy+0xc>
 800e182:	bd10      	pop	{r4, pc}
 800e184:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e188:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e18c:	e7f7      	b.n	800e17e <memcpy+0x6>

0800e18e <_Balloc>:
 800e18e:	b570      	push	{r4, r5, r6, lr}
 800e190:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e192:	4604      	mov	r4, r0
 800e194:	460e      	mov	r6, r1
 800e196:	b93d      	cbnz	r5, 800e1a8 <_Balloc+0x1a>
 800e198:	2010      	movs	r0, #16
 800e19a:	f7ff ffe5 	bl	800e168 <malloc>
 800e19e:	6260      	str	r0, [r4, #36]	; 0x24
 800e1a0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e1a4:	6005      	str	r5, [r0, #0]
 800e1a6:	60c5      	str	r5, [r0, #12]
 800e1a8:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800e1aa:	68eb      	ldr	r3, [r5, #12]
 800e1ac:	b183      	cbz	r3, 800e1d0 <_Balloc+0x42>
 800e1ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1b0:	68db      	ldr	r3, [r3, #12]
 800e1b2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800e1b6:	b9b8      	cbnz	r0, 800e1e8 <_Balloc+0x5a>
 800e1b8:	2101      	movs	r1, #1
 800e1ba:	fa01 f506 	lsl.w	r5, r1, r6
 800e1be:	1d6a      	adds	r2, r5, #5
 800e1c0:	0092      	lsls	r2, r2, #2
 800e1c2:	4620      	mov	r0, r4
 800e1c4:	f000 fabe 	bl	800e744 <_calloc_r>
 800e1c8:	b160      	cbz	r0, 800e1e4 <_Balloc+0x56>
 800e1ca:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800e1ce:	e00e      	b.n	800e1ee <_Balloc+0x60>
 800e1d0:	2221      	movs	r2, #33	; 0x21
 800e1d2:	2104      	movs	r1, #4
 800e1d4:	4620      	mov	r0, r4
 800e1d6:	f000 fab5 	bl	800e744 <_calloc_r>
 800e1da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1dc:	60e8      	str	r0, [r5, #12]
 800e1de:	68db      	ldr	r3, [r3, #12]
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d1e4      	bne.n	800e1ae <_Balloc+0x20>
 800e1e4:	2000      	movs	r0, #0
 800e1e6:	bd70      	pop	{r4, r5, r6, pc}
 800e1e8:	6802      	ldr	r2, [r0, #0]
 800e1ea:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800e1ee:	2300      	movs	r3, #0
 800e1f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e1f4:	e7f7      	b.n	800e1e6 <_Balloc+0x58>

0800e1f6 <_Bfree>:
 800e1f6:	b570      	push	{r4, r5, r6, lr}
 800e1f8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800e1fa:	4606      	mov	r6, r0
 800e1fc:	460d      	mov	r5, r1
 800e1fe:	b93c      	cbnz	r4, 800e210 <_Bfree+0x1a>
 800e200:	2010      	movs	r0, #16
 800e202:	f7ff ffb1 	bl	800e168 <malloc>
 800e206:	6270      	str	r0, [r6, #36]	; 0x24
 800e208:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e20c:	6004      	str	r4, [r0, #0]
 800e20e:	60c4      	str	r4, [r0, #12]
 800e210:	b13d      	cbz	r5, 800e222 <_Bfree+0x2c>
 800e212:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800e214:	686a      	ldr	r2, [r5, #4]
 800e216:	68db      	ldr	r3, [r3, #12]
 800e218:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e21c:	6029      	str	r1, [r5, #0]
 800e21e:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800e222:	bd70      	pop	{r4, r5, r6, pc}

0800e224 <__multadd>:
 800e224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e228:	690d      	ldr	r5, [r1, #16]
 800e22a:	461f      	mov	r7, r3
 800e22c:	4606      	mov	r6, r0
 800e22e:	460c      	mov	r4, r1
 800e230:	f101 0c14 	add.w	ip, r1, #20
 800e234:	2300      	movs	r3, #0
 800e236:	f8dc 0000 	ldr.w	r0, [ip]
 800e23a:	b281      	uxth	r1, r0
 800e23c:	fb02 7101 	mla	r1, r2, r1, r7
 800e240:	0c0f      	lsrs	r7, r1, #16
 800e242:	0c00      	lsrs	r0, r0, #16
 800e244:	fb02 7000 	mla	r0, r2, r0, r7
 800e248:	b289      	uxth	r1, r1
 800e24a:	3301      	adds	r3, #1
 800e24c:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800e250:	429d      	cmp	r5, r3
 800e252:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800e256:	f84c 1b04 	str.w	r1, [ip], #4
 800e25a:	dcec      	bgt.n	800e236 <__multadd+0x12>
 800e25c:	b1d7      	cbz	r7, 800e294 <__multadd+0x70>
 800e25e:	68a3      	ldr	r3, [r4, #8]
 800e260:	42ab      	cmp	r3, r5
 800e262:	dc12      	bgt.n	800e28a <__multadd+0x66>
 800e264:	6861      	ldr	r1, [r4, #4]
 800e266:	4630      	mov	r0, r6
 800e268:	3101      	adds	r1, #1
 800e26a:	f7ff ff90 	bl	800e18e <_Balloc>
 800e26e:	6922      	ldr	r2, [r4, #16]
 800e270:	3202      	adds	r2, #2
 800e272:	f104 010c 	add.w	r1, r4, #12
 800e276:	4680      	mov	r8, r0
 800e278:	0092      	lsls	r2, r2, #2
 800e27a:	300c      	adds	r0, #12
 800e27c:	f7ff ff7c 	bl	800e178 <memcpy>
 800e280:	4621      	mov	r1, r4
 800e282:	4630      	mov	r0, r6
 800e284:	f7ff ffb7 	bl	800e1f6 <_Bfree>
 800e288:	4644      	mov	r4, r8
 800e28a:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e28e:	3501      	adds	r5, #1
 800e290:	615f      	str	r7, [r3, #20]
 800e292:	6125      	str	r5, [r4, #16]
 800e294:	4620      	mov	r0, r4
 800e296:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e29a <__hi0bits>:
 800e29a:	0c02      	lsrs	r2, r0, #16
 800e29c:	0412      	lsls	r2, r2, #16
 800e29e:	4603      	mov	r3, r0
 800e2a0:	b9b2      	cbnz	r2, 800e2d0 <__hi0bits+0x36>
 800e2a2:	0403      	lsls	r3, r0, #16
 800e2a4:	2010      	movs	r0, #16
 800e2a6:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800e2aa:	bf04      	itt	eq
 800e2ac:	021b      	lsleq	r3, r3, #8
 800e2ae:	3008      	addeq	r0, #8
 800e2b0:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800e2b4:	bf04      	itt	eq
 800e2b6:	011b      	lsleq	r3, r3, #4
 800e2b8:	3004      	addeq	r0, #4
 800e2ba:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800e2be:	bf04      	itt	eq
 800e2c0:	009b      	lsleq	r3, r3, #2
 800e2c2:	3002      	addeq	r0, #2
 800e2c4:	2b00      	cmp	r3, #0
 800e2c6:	db06      	blt.n	800e2d6 <__hi0bits+0x3c>
 800e2c8:	005b      	lsls	r3, r3, #1
 800e2ca:	d503      	bpl.n	800e2d4 <__hi0bits+0x3a>
 800e2cc:	3001      	adds	r0, #1
 800e2ce:	4770      	bx	lr
 800e2d0:	2000      	movs	r0, #0
 800e2d2:	e7e8      	b.n	800e2a6 <__hi0bits+0xc>
 800e2d4:	2020      	movs	r0, #32
 800e2d6:	4770      	bx	lr

0800e2d8 <__lo0bits>:
 800e2d8:	6803      	ldr	r3, [r0, #0]
 800e2da:	f013 0207 	ands.w	r2, r3, #7
 800e2de:	4601      	mov	r1, r0
 800e2e0:	d00b      	beq.n	800e2fa <__lo0bits+0x22>
 800e2e2:	07da      	lsls	r2, r3, #31
 800e2e4:	d423      	bmi.n	800e32e <__lo0bits+0x56>
 800e2e6:	0798      	lsls	r0, r3, #30
 800e2e8:	bf49      	itett	mi
 800e2ea:	085b      	lsrmi	r3, r3, #1
 800e2ec:	089b      	lsrpl	r3, r3, #2
 800e2ee:	2001      	movmi	r0, #1
 800e2f0:	600b      	strmi	r3, [r1, #0]
 800e2f2:	bf5c      	itt	pl
 800e2f4:	600b      	strpl	r3, [r1, #0]
 800e2f6:	2002      	movpl	r0, #2
 800e2f8:	4770      	bx	lr
 800e2fa:	b298      	uxth	r0, r3
 800e2fc:	b9a8      	cbnz	r0, 800e32a <__lo0bits+0x52>
 800e2fe:	0c1b      	lsrs	r3, r3, #16
 800e300:	2010      	movs	r0, #16
 800e302:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e306:	bf04      	itt	eq
 800e308:	0a1b      	lsreq	r3, r3, #8
 800e30a:	3008      	addeq	r0, #8
 800e30c:	071a      	lsls	r2, r3, #28
 800e30e:	bf04      	itt	eq
 800e310:	091b      	lsreq	r3, r3, #4
 800e312:	3004      	addeq	r0, #4
 800e314:	079a      	lsls	r2, r3, #30
 800e316:	bf04      	itt	eq
 800e318:	089b      	lsreq	r3, r3, #2
 800e31a:	3002      	addeq	r0, #2
 800e31c:	07da      	lsls	r2, r3, #31
 800e31e:	d402      	bmi.n	800e326 <__lo0bits+0x4e>
 800e320:	085b      	lsrs	r3, r3, #1
 800e322:	d006      	beq.n	800e332 <__lo0bits+0x5a>
 800e324:	3001      	adds	r0, #1
 800e326:	600b      	str	r3, [r1, #0]
 800e328:	4770      	bx	lr
 800e32a:	4610      	mov	r0, r2
 800e32c:	e7e9      	b.n	800e302 <__lo0bits+0x2a>
 800e32e:	2000      	movs	r0, #0
 800e330:	4770      	bx	lr
 800e332:	2020      	movs	r0, #32
 800e334:	4770      	bx	lr

0800e336 <__i2b>:
 800e336:	b510      	push	{r4, lr}
 800e338:	460c      	mov	r4, r1
 800e33a:	2101      	movs	r1, #1
 800e33c:	f7ff ff27 	bl	800e18e <_Balloc>
 800e340:	2201      	movs	r2, #1
 800e342:	6144      	str	r4, [r0, #20]
 800e344:	6102      	str	r2, [r0, #16]
 800e346:	bd10      	pop	{r4, pc}

0800e348 <__multiply>:
 800e348:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e34c:	4614      	mov	r4, r2
 800e34e:	690a      	ldr	r2, [r1, #16]
 800e350:	6923      	ldr	r3, [r4, #16]
 800e352:	429a      	cmp	r2, r3
 800e354:	bfb8      	it	lt
 800e356:	460b      	movlt	r3, r1
 800e358:	4688      	mov	r8, r1
 800e35a:	bfbc      	itt	lt
 800e35c:	46a0      	movlt	r8, r4
 800e35e:	461c      	movlt	r4, r3
 800e360:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e364:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e368:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e36c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e370:	eb07 0609 	add.w	r6, r7, r9
 800e374:	42b3      	cmp	r3, r6
 800e376:	bfb8      	it	lt
 800e378:	3101      	addlt	r1, #1
 800e37a:	f7ff ff08 	bl	800e18e <_Balloc>
 800e37e:	f100 0514 	add.w	r5, r0, #20
 800e382:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800e386:	462b      	mov	r3, r5
 800e388:	2200      	movs	r2, #0
 800e38a:	4573      	cmp	r3, lr
 800e38c:	d316      	bcc.n	800e3bc <__multiply+0x74>
 800e38e:	f104 0214 	add.w	r2, r4, #20
 800e392:	f108 0114 	add.w	r1, r8, #20
 800e396:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800e39a:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800e39e:	9300      	str	r3, [sp, #0]
 800e3a0:	9b00      	ldr	r3, [sp, #0]
 800e3a2:	9201      	str	r2, [sp, #4]
 800e3a4:	4293      	cmp	r3, r2
 800e3a6:	d80c      	bhi.n	800e3c2 <__multiply+0x7a>
 800e3a8:	2e00      	cmp	r6, #0
 800e3aa:	dd03      	ble.n	800e3b4 <__multiply+0x6c>
 800e3ac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d05d      	beq.n	800e470 <__multiply+0x128>
 800e3b4:	6106      	str	r6, [r0, #16]
 800e3b6:	b003      	add	sp, #12
 800e3b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3bc:	f843 2b04 	str.w	r2, [r3], #4
 800e3c0:	e7e3      	b.n	800e38a <__multiply+0x42>
 800e3c2:	f8b2 b000 	ldrh.w	fp, [r2]
 800e3c6:	f1bb 0f00 	cmp.w	fp, #0
 800e3ca:	d023      	beq.n	800e414 <__multiply+0xcc>
 800e3cc:	4689      	mov	r9, r1
 800e3ce:	46ac      	mov	ip, r5
 800e3d0:	f04f 0800 	mov.w	r8, #0
 800e3d4:	f859 4b04 	ldr.w	r4, [r9], #4
 800e3d8:	f8dc a000 	ldr.w	sl, [ip]
 800e3dc:	b2a3      	uxth	r3, r4
 800e3de:	fa1f fa8a 	uxth.w	sl, sl
 800e3e2:	fb0b a303 	mla	r3, fp, r3, sl
 800e3e6:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e3ea:	f8dc 4000 	ldr.w	r4, [ip]
 800e3ee:	4443      	add	r3, r8
 800e3f0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e3f4:	fb0b 840a 	mla	r4, fp, sl, r8
 800e3f8:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800e3fc:	46e2      	mov	sl, ip
 800e3fe:	b29b      	uxth	r3, r3
 800e400:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e404:	454f      	cmp	r7, r9
 800e406:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800e40a:	f84a 3b04 	str.w	r3, [sl], #4
 800e40e:	d82b      	bhi.n	800e468 <__multiply+0x120>
 800e410:	f8cc 8004 	str.w	r8, [ip, #4]
 800e414:	9b01      	ldr	r3, [sp, #4]
 800e416:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800e41a:	3204      	adds	r2, #4
 800e41c:	f1ba 0f00 	cmp.w	sl, #0
 800e420:	d020      	beq.n	800e464 <__multiply+0x11c>
 800e422:	682b      	ldr	r3, [r5, #0]
 800e424:	4689      	mov	r9, r1
 800e426:	46a8      	mov	r8, r5
 800e428:	f04f 0b00 	mov.w	fp, #0
 800e42c:	f8b9 c000 	ldrh.w	ip, [r9]
 800e430:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800e434:	fb0a 440c 	mla	r4, sl, ip, r4
 800e438:	445c      	add	r4, fp
 800e43a:	46c4      	mov	ip, r8
 800e43c:	b29b      	uxth	r3, r3
 800e43e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800e442:	f84c 3b04 	str.w	r3, [ip], #4
 800e446:	f859 3b04 	ldr.w	r3, [r9], #4
 800e44a:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800e44e:	0c1b      	lsrs	r3, r3, #16
 800e450:	fb0a b303 	mla	r3, sl, r3, fp
 800e454:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800e458:	454f      	cmp	r7, r9
 800e45a:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800e45e:	d805      	bhi.n	800e46c <__multiply+0x124>
 800e460:	f8c8 3004 	str.w	r3, [r8, #4]
 800e464:	3504      	adds	r5, #4
 800e466:	e79b      	b.n	800e3a0 <__multiply+0x58>
 800e468:	46d4      	mov	ip, sl
 800e46a:	e7b3      	b.n	800e3d4 <__multiply+0x8c>
 800e46c:	46e0      	mov	r8, ip
 800e46e:	e7dd      	b.n	800e42c <__multiply+0xe4>
 800e470:	3e01      	subs	r6, #1
 800e472:	e799      	b.n	800e3a8 <__multiply+0x60>

0800e474 <__pow5mult>:
 800e474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e478:	4615      	mov	r5, r2
 800e47a:	f012 0203 	ands.w	r2, r2, #3
 800e47e:	4606      	mov	r6, r0
 800e480:	460f      	mov	r7, r1
 800e482:	d007      	beq.n	800e494 <__pow5mult+0x20>
 800e484:	3a01      	subs	r2, #1
 800e486:	4c21      	ldr	r4, [pc, #132]	; (800e50c <__pow5mult+0x98>)
 800e488:	2300      	movs	r3, #0
 800e48a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e48e:	f7ff fec9 	bl	800e224 <__multadd>
 800e492:	4607      	mov	r7, r0
 800e494:	10ad      	asrs	r5, r5, #2
 800e496:	d035      	beq.n	800e504 <__pow5mult+0x90>
 800e498:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e49a:	b93c      	cbnz	r4, 800e4ac <__pow5mult+0x38>
 800e49c:	2010      	movs	r0, #16
 800e49e:	f7ff fe63 	bl	800e168 <malloc>
 800e4a2:	6270      	str	r0, [r6, #36]	; 0x24
 800e4a4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e4a8:	6004      	str	r4, [r0, #0]
 800e4aa:	60c4      	str	r4, [r0, #12]
 800e4ac:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e4b0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e4b4:	b94c      	cbnz	r4, 800e4ca <__pow5mult+0x56>
 800e4b6:	f240 2171 	movw	r1, #625	; 0x271
 800e4ba:	4630      	mov	r0, r6
 800e4bc:	f7ff ff3b 	bl	800e336 <__i2b>
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	f8c8 0008 	str.w	r0, [r8, #8]
 800e4c6:	4604      	mov	r4, r0
 800e4c8:	6003      	str	r3, [r0, #0]
 800e4ca:	f04f 0800 	mov.w	r8, #0
 800e4ce:	07eb      	lsls	r3, r5, #31
 800e4d0:	d50a      	bpl.n	800e4e8 <__pow5mult+0x74>
 800e4d2:	4639      	mov	r1, r7
 800e4d4:	4622      	mov	r2, r4
 800e4d6:	4630      	mov	r0, r6
 800e4d8:	f7ff ff36 	bl	800e348 <__multiply>
 800e4dc:	4639      	mov	r1, r7
 800e4de:	4681      	mov	r9, r0
 800e4e0:	4630      	mov	r0, r6
 800e4e2:	f7ff fe88 	bl	800e1f6 <_Bfree>
 800e4e6:	464f      	mov	r7, r9
 800e4e8:	106d      	asrs	r5, r5, #1
 800e4ea:	d00b      	beq.n	800e504 <__pow5mult+0x90>
 800e4ec:	6820      	ldr	r0, [r4, #0]
 800e4ee:	b938      	cbnz	r0, 800e500 <__pow5mult+0x8c>
 800e4f0:	4622      	mov	r2, r4
 800e4f2:	4621      	mov	r1, r4
 800e4f4:	4630      	mov	r0, r6
 800e4f6:	f7ff ff27 	bl	800e348 <__multiply>
 800e4fa:	6020      	str	r0, [r4, #0]
 800e4fc:	f8c0 8000 	str.w	r8, [r0]
 800e500:	4604      	mov	r4, r0
 800e502:	e7e4      	b.n	800e4ce <__pow5mult+0x5a>
 800e504:	4638      	mov	r0, r7
 800e506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e50a:	bf00      	nop
 800e50c:	0800fcb0 	.word	0x0800fcb0

0800e510 <__lshift>:
 800e510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e514:	460c      	mov	r4, r1
 800e516:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e51a:	6923      	ldr	r3, [r4, #16]
 800e51c:	6849      	ldr	r1, [r1, #4]
 800e51e:	eb0a 0903 	add.w	r9, sl, r3
 800e522:	68a3      	ldr	r3, [r4, #8]
 800e524:	4607      	mov	r7, r0
 800e526:	4616      	mov	r6, r2
 800e528:	f109 0501 	add.w	r5, r9, #1
 800e52c:	42ab      	cmp	r3, r5
 800e52e:	db32      	blt.n	800e596 <__lshift+0x86>
 800e530:	4638      	mov	r0, r7
 800e532:	f7ff fe2c 	bl	800e18e <_Balloc>
 800e536:	2300      	movs	r3, #0
 800e538:	4680      	mov	r8, r0
 800e53a:	f100 0114 	add.w	r1, r0, #20
 800e53e:	461a      	mov	r2, r3
 800e540:	4553      	cmp	r3, sl
 800e542:	db2b      	blt.n	800e59c <__lshift+0x8c>
 800e544:	6920      	ldr	r0, [r4, #16]
 800e546:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e54a:	f104 0314 	add.w	r3, r4, #20
 800e54e:	f016 021f 	ands.w	r2, r6, #31
 800e552:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e556:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e55a:	d025      	beq.n	800e5a8 <__lshift+0x98>
 800e55c:	f1c2 0e20 	rsb	lr, r2, #32
 800e560:	2000      	movs	r0, #0
 800e562:	681e      	ldr	r6, [r3, #0]
 800e564:	468a      	mov	sl, r1
 800e566:	4096      	lsls	r6, r2
 800e568:	4330      	orrs	r0, r6
 800e56a:	f84a 0b04 	str.w	r0, [sl], #4
 800e56e:	f853 0b04 	ldr.w	r0, [r3], #4
 800e572:	459c      	cmp	ip, r3
 800e574:	fa20 f00e 	lsr.w	r0, r0, lr
 800e578:	d814      	bhi.n	800e5a4 <__lshift+0x94>
 800e57a:	6048      	str	r0, [r1, #4]
 800e57c:	b108      	cbz	r0, 800e582 <__lshift+0x72>
 800e57e:	f109 0502 	add.w	r5, r9, #2
 800e582:	3d01      	subs	r5, #1
 800e584:	4638      	mov	r0, r7
 800e586:	f8c8 5010 	str.w	r5, [r8, #16]
 800e58a:	4621      	mov	r1, r4
 800e58c:	f7ff fe33 	bl	800e1f6 <_Bfree>
 800e590:	4640      	mov	r0, r8
 800e592:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e596:	3101      	adds	r1, #1
 800e598:	005b      	lsls	r3, r3, #1
 800e59a:	e7c7      	b.n	800e52c <__lshift+0x1c>
 800e59c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800e5a0:	3301      	adds	r3, #1
 800e5a2:	e7cd      	b.n	800e540 <__lshift+0x30>
 800e5a4:	4651      	mov	r1, sl
 800e5a6:	e7dc      	b.n	800e562 <__lshift+0x52>
 800e5a8:	3904      	subs	r1, #4
 800e5aa:	f853 2b04 	ldr.w	r2, [r3], #4
 800e5ae:	f841 2f04 	str.w	r2, [r1, #4]!
 800e5b2:	459c      	cmp	ip, r3
 800e5b4:	d8f9      	bhi.n	800e5aa <__lshift+0x9a>
 800e5b6:	e7e4      	b.n	800e582 <__lshift+0x72>

0800e5b8 <__mcmp>:
 800e5b8:	6903      	ldr	r3, [r0, #16]
 800e5ba:	690a      	ldr	r2, [r1, #16]
 800e5bc:	1a9b      	subs	r3, r3, r2
 800e5be:	b530      	push	{r4, r5, lr}
 800e5c0:	d10c      	bne.n	800e5dc <__mcmp+0x24>
 800e5c2:	0092      	lsls	r2, r2, #2
 800e5c4:	3014      	adds	r0, #20
 800e5c6:	3114      	adds	r1, #20
 800e5c8:	1884      	adds	r4, r0, r2
 800e5ca:	4411      	add	r1, r2
 800e5cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e5d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e5d4:	4295      	cmp	r5, r2
 800e5d6:	d003      	beq.n	800e5e0 <__mcmp+0x28>
 800e5d8:	d305      	bcc.n	800e5e6 <__mcmp+0x2e>
 800e5da:	2301      	movs	r3, #1
 800e5dc:	4618      	mov	r0, r3
 800e5de:	bd30      	pop	{r4, r5, pc}
 800e5e0:	42a0      	cmp	r0, r4
 800e5e2:	d3f3      	bcc.n	800e5cc <__mcmp+0x14>
 800e5e4:	e7fa      	b.n	800e5dc <__mcmp+0x24>
 800e5e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e5ea:	e7f7      	b.n	800e5dc <__mcmp+0x24>

0800e5ec <__mdiff>:
 800e5ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e5f0:	460d      	mov	r5, r1
 800e5f2:	4607      	mov	r7, r0
 800e5f4:	4611      	mov	r1, r2
 800e5f6:	4628      	mov	r0, r5
 800e5f8:	4614      	mov	r4, r2
 800e5fa:	f7ff ffdd 	bl	800e5b8 <__mcmp>
 800e5fe:	1e06      	subs	r6, r0, #0
 800e600:	d108      	bne.n	800e614 <__mdiff+0x28>
 800e602:	4631      	mov	r1, r6
 800e604:	4638      	mov	r0, r7
 800e606:	f7ff fdc2 	bl	800e18e <_Balloc>
 800e60a:	2301      	movs	r3, #1
 800e60c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800e610:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e614:	bfa4      	itt	ge
 800e616:	4623      	movge	r3, r4
 800e618:	462c      	movge	r4, r5
 800e61a:	4638      	mov	r0, r7
 800e61c:	6861      	ldr	r1, [r4, #4]
 800e61e:	bfa6      	itte	ge
 800e620:	461d      	movge	r5, r3
 800e622:	2600      	movge	r6, #0
 800e624:	2601      	movlt	r6, #1
 800e626:	f7ff fdb2 	bl	800e18e <_Balloc>
 800e62a:	692b      	ldr	r3, [r5, #16]
 800e62c:	60c6      	str	r6, [r0, #12]
 800e62e:	6926      	ldr	r6, [r4, #16]
 800e630:	f105 0914 	add.w	r9, r5, #20
 800e634:	f104 0214 	add.w	r2, r4, #20
 800e638:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800e63c:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800e640:	f100 0514 	add.w	r5, r0, #20
 800e644:	f04f 0e00 	mov.w	lr, #0
 800e648:	f852 ab04 	ldr.w	sl, [r2], #4
 800e64c:	f859 4b04 	ldr.w	r4, [r9], #4
 800e650:	fa1e f18a 	uxtah	r1, lr, sl
 800e654:	b2a3      	uxth	r3, r4
 800e656:	1ac9      	subs	r1, r1, r3
 800e658:	0c23      	lsrs	r3, r4, #16
 800e65a:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800e65e:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800e662:	b289      	uxth	r1, r1
 800e664:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800e668:	45c8      	cmp	r8, r9
 800e66a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800e66e:	4694      	mov	ip, r2
 800e670:	f845 3b04 	str.w	r3, [r5], #4
 800e674:	d8e8      	bhi.n	800e648 <__mdiff+0x5c>
 800e676:	45bc      	cmp	ip, r7
 800e678:	d304      	bcc.n	800e684 <__mdiff+0x98>
 800e67a:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800e67e:	b183      	cbz	r3, 800e6a2 <__mdiff+0xb6>
 800e680:	6106      	str	r6, [r0, #16]
 800e682:	e7c5      	b.n	800e610 <__mdiff+0x24>
 800e684:	f85c 1b04 	ldr.w	r1, [ip], #4
 800e688:	fa1e f381 	uxtah	r3, lr, r1
 800e68c:	141a      	asrs	r2, r3, #16
 800e68e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e692:	b29b      	uxth	r3, r3
 800e694:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e698:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800e69c:	f845 3b04 	str.w	r3, [r5], #4
 800e6a0:	e7e9      	b.n	800e676 <__mdiff+0x8a>
 800e6a2:	3e01      	subs	r6, #1
 800e6a4:	e7e9      	b.n	800e67a <__mdiff+0x8e>

0800e6a6 <__d2b>:
 800e6a6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e6aa:	460e      	mov	r6, r1
 800e6ac:	2101      	movs	r1, #1
 800e6ae:	ec59 8b10 	vmov	r8, r9, d0
 800e6b2:	4615      	mov	r5, r2
 800e6b4:	f7ff fd6b 	bl	800e18e <_Balloc>
 800e6b8:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800e6bc:	4607      	mov	r7, r0
 800e6be:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e6c2:	bb34      	cbnz	r4, 800e712 <__d2b+0x6c>
 800e6c4:	9301      	str	r3, [sp, #4]
 800e6c6:	f1b8 0300 	subs.w	r3, r8, #0
 800e6ca:	d027      	beq.n	800e71c <__d2b+0x76>
 800e6cc:	a802      	add	r0, sp, #8
 800e6ce:	f840 3d08 	str.w	r3, [r0, #-8]!
 800e6d2:	f7ff fe01 	bl	800e2d8 <__lo0bits>
 800e6d6:	9900      	ldr	r1, [sp, #0]
 800e6d8:	b1f0      	cbz	r0, 800e718 <__d2b+0x72>
 800e6da:	9a01      	ldr	r2, [sp, #4]
 800e6dc:	f1c0 0320 	rsb	r3, r0, #32
 800e6e0:	fa02 f303 	lsl.w	r3, r2, r3
 800e6e4:	430b      	orrs	r3, r1
 800e6e6:	40c2      	lsrs	r2, r0
 800e6e8:	617b      	str	r3, [r7, #20]
 800e6ea:	9201      	str	r2, [sp, #4]
 800e6ec:	9b01      	ldr	r3, [sp, #4]
 800e6ee:	61bb      	str	r3, [r7, #24]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	bf14      	ite	ne
 800e6f4:	2102      	movne	r1, #2
 800e6f6:	2101      	moveq	r1, #1
 800e6f8:	6139      	str	r1, [r7, #16]
 800e6fa:	b1c4      	cbz	r4, 800e72e <__d2b+0x88>
 800e6fc:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800e700:	4404      	add	r4, r0
 800e702:	6034      	str	r4, [r6, #0]
 800e704:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e708:	6028      	str	r0, [r5, #0]
 800e70a:	4638      	mov	r0, r7
 800e70c:	b003      	add	sp, #12
 800e70e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e712:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e716:	e7d5      	b.n	800e6c4 <__d2b+0x1e>
 800e718:	6179      	str	r1, [r7, #20]
 800e71a:	e7e7      	b.n	800e6ec <__d2b+0x46>
 800e71c:	a801      	add	r0, sp, #4
 800e71e:	f7ff fddb 	bl	800e2d8 <__lo0bits>
 800e722:	9b01      	ldr	r3, [sp, #4]
 800e724:	617b      	str	r3, [r7, #20]
 800e726:	2101      	movs	r1, #1
 800e728:	6139      	str	r1, [r7, #16]
 800e72a:	3020      	adds	r0, #32
 800e72c:	e7e5      	b.n	800e6fa <__d2b+0x54>
 800e72e:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800e732:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e736:	6030      	str	r0, [r6, #0]
 800e738:	6918      	ldr	r0, [r3, #16]
 800e73a:	f7ff fdae 	bl	800e29a <__hi0bits>
 800e73e:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800e742:	e7e1      	b.n	800e708 <__d2b+0x62>

0800e744 <_calloc_r>:
 800e744:	b538      	push	{r3, r4, r5, lr}
 800e746:	fb02 f401 	mul.w	r4, r2, r1
 800e74a:	4621      	mov	r1, r4
 800e74c:	f000 f856 	bl	800e7fc <_malloc_r>
 800e750:	4605      	mov	r5, r0
 800e752:	b118      	cbz	r0, 800e75c <_calloc_r+0x18>
 800e754:	4622      	mov	r2, r4
 800e756:	2100      	movs	r1, #0
 800e758:	f7fd ff08 	bl	800c56c <memset>
 800e75c:	4628      	mov	r0, r5
 800e75e:	bd38      	pop	{r3, r4, r5, pc}

0800e760 <_free_r>:
 800e760:	b538      	push	{r3, r4, r5, lr}
 800e762:	4605      	mov	r5, r0
 800e764:	2900      	cmp	r1, #0
 800e766:	d045      	beq.n	800e7f4 <_free_r+0x94>
 800e768:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e76c:	1f0c      	subs	r4, r1, #4
 800e76e:	2b00      	cmp	r3, #0
 800e770:	bfb8      	it	lt
 800e772:	18e4      	addlt	r4, r4, r3
 800e774:	f000 fac3 	bl	800ecfe <__malloc_lock>
 800e778:	4a1f      	ldr	r2, [pc, #124]	; (800e7f8 <_free_r+0x98>)
 800e77a:	6813      	ldr	r3, [r2, #0]
 800e77c:	4610      	mov	r0, r2
 800e77e:	b933      	cbnz	r3, 800e78e <_free_r+0x2e>
 800e780:	6063      	str	r3, [r4, #4]
 800e782:	6014      	str	r4, [r2, #0]
 800e784:	4628      	mov	r0, r5
 800e786:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e78a:	f000 bab9 	b.w	800ed00 <__malloc_unlock>
 800e78e:	42a3      	cmp	r3, r4
 800e790:	d90c      	bls.n	800e7ac <_free_r+0x4c>
 800e792:	6821      	ldr	r1, [r4, #0]
 800e794:	1862      	adds	r2, r4, r1
 800e796:	4293      	cmp	r3, r2
 800e798:	bf04      	itt	eq
 800e79a:	681a      	ldreq	r2, [r3, #0]
 800e79c:	685b      	ldreq	r3, [r3, #4]
 800e79e:	6063      	str	r3, [r4, #4]
 800e7a0:	bf04      	itt	eq
 800e7a2:	1852      	addeq	r2, r2, r1
 800e7a4:	6022      	streq	r2, [r4, #0]
 800e7a6:	6004      	str	r4, [r0, #0]
 800e7a8:	e7ec      	b.n	800e784 <_free_r+0x24>
 800e7aa:	4613      	mov	r3, r2
 800e7ac:	685a      	ldr	r2, [r3, #4]
 800e7ae:	b10a      	cbz	r2, 800e7b4 <_free_r+0x54>
 800e7b0:	42a2      	cmp	r2, r4
 800e7b2:	d9fa      	bls.n	800e7aa <_free_r+0x4a>
 800e7b4:	6819      	ldr	r1, [r3, #0]
 800e7b6:	1858      	adds	r0, r3, r1
 800e7b8:	42a0      	cmp	r0, r4
 800e7ba:	d10b      	bne.n	800e7d4 <_free_r+0x74>
 800e7bc:	6820      	ldr	r0, [r4, #0]
 800e7be:	4401      	add	r1, r0
 800e7c0:	1858      	adds	r0, r3, r1
 800e7c2:	4282      	cmp	r2, r0
 800e7c4:	6019      	str	r1, [r3, #0]
 800e7c6:	d1dd      	bne.n	800e784 <_free_r+0x24>
 800e7c8:	6810      	ldr	r0, [r2, #0]
 800e7ca:	6852      	ldr	r2, [r2, #4]
 800e7cc:	605a      	str	r2, [r3, #4]
 800e7ce:	4401      	add	r1, r0
 800e7d0:	6019      	str	r1, [r3, #0]
 800e7d2:	e7d7      	b.n	800e784 <_free_r+0x24>
 800e7d4:	d902      	bls.n	800e7dc <_free_r+0x7c>
 800e7d6:	230c      	movs	r3, #12
 800e7d8:	602b      	str	r3, [r5, #0]
 800e7da:	e7d3      	b.n	800e784 <_free_r+0x24>
 800e7dc:	6820      	ldr	r0, [r4, #0]
 800e7de:	1821      	adds	r1, r4, r0
 800e7e0:	428a      	cmp	r2, r1
 800e7e2:	bf04      	itt	eq
 800e7e4:	6811      	ldreq	r1, [r2, #0]
 800e7e6:	6852      	ldreq	r2, [r2, #4]
 800e7e8:	6062      	str	r2, [r4, #4]
 800e7ea:	bf04      	itt	eq
 800e7ec:	1809      	addeq	r1, r1, r0
 800e7ee:	6021      	streq	r1, [r4, #0]
 800e7f0:	605c      	str	r4, [r3, #4]
 800e7f2:	e7c7      	b.n	800e784 <_free_r+0x24>
 800e7f4:	bd38      	pop	{r3, r4, r5, pc}
 800e7f6:	bf00      	nop
 800e7f8:	20001ec0 	.word	0x20001ec0

0800e7fc <_malloc_r>:
 800e7fc:	b570      	push	{r4, r5, r6, lr}
 800e7fe:	1ccd      	adds	r5, r1, #3
 800e800:	f025 0503 	bic.w	r5, r5, #3
 800e804:	3508      	adds	r5, #8
 800e806:	2d0c      	cmp	r5, #12
 800e808:	bf38      	it	cc
 800e80a:	250c      	movcc	r5, #12
 800e80c:	2d00      	cmp	r5, #0
 800e80e:	4606      	mov	r6, r0
 800e810:	db01      	blt.n	800e816 <_malloc_r+0x1a>
 800e812:	42a9      	cmp	r1, r5
 800e814:	d903      	bls.n	800e81e <_malloc_r+0x22>
 800e816:	230c      	movs	r3, #12
 800e818:	6033      	str	r3, [r6, #0]
 800e81a:	2000      	movs	r0, #0
 800e81c:	bd70      	pop	{r4, r5, r6, pc}
 800e81e:	f000 fa6e 	bl	800ecfe <__malloc_lock>
 800e822:	4a21      	ldr	r2, [pc, #132]	; (800e8a8 <_malloc_r+0xac>)
 800e824:	6814      	ldr	r4, [r2, #0]
 800e826:	4621      	mov	r1, r4
 800e828:	b991      	cbnz	r1, 800e850 <_malloc_r+0x54>
 800e82a:	4c20      	ldr	r4, [pc, #128]	; (800e8ac <_malloc_r+0xb0>)
 800e82c:	6823      	ldr	r3, [r4, #0]
 800e82e:	b91b      	cbnz	r3, 800e838 <_malloc_r+0x3c>
 800e830:	4630      	mov	r0, r6
 800e832:	f000 f98f 	bl	800eb54 <_sbrk_r>
 800e836:	6020      	str	r0, [r4, #0]
 800e838:	4629      	mov	r1, r5
 800e83a:	4630      	mov	r0, r6
 800e83c:	f000 f98a 	bl	800eb54 <_sbrk_r>
 800e840:	1c43      	adds	r3, r0, #1
 800e842:	d124      	bne.n	800e88e <_malloc_r+0x92>
 800e844:	230c      	movs	r3, #12
 800e846:	6033      	str	r3, [r6, #0]
 800e848:	4630      	mov	r0, r6
 800e84a:	f000 fa59 	bl	800ed00 <__malloc_unlock>
 800e84e:	e7e4      	b.n	800e81a <_malloc_r+0x1e>
 800e850:	680b      	ldr	r3, [r1, #0]
 800e852:	1b5b      	subs	r3, r3, r5
 800e854:	d418      	bmi.n	800e888 <_malloc_r+0x8c>
 800e856:	2b0b      	cmp	r3, #11
 800e858:	d90f      	bls.n	800e87a <_malloc_r+0x7e>
 800e85a:	600b      	str	r3, [r1, #0]
 800e85c:	50cd      	str	r5, [r1, r3]
 800e85e:	18cc      	adds	r4, r1, r3
 800e860:	4630      	mov	r0, r6
 800e862:	f000 fa4d 	bl	800ed00 <__malloc_unlock>
 800e866:	f104 000b 	add.w	r0, r4, #11
 800e86a:	1d23      	adds	r3, r4, #4
 800e86c:	f020 0007 	bic.w	r0, r0, #7
 800e870:	1ac3      	subs	r3, r0, r3
 800e872:	d0d3      	beq.n	800e81c <_malloc_r+0x20>
 800e874:	425a      	negs	r2, r3
 800e876:	50e2      	str	r2, [r4, r3]
 800e878:	e7d0      	b.n	800e81c <_malloc_r+0x20>
 800e87a:	428c      	cmp	r4, r1
 800e87c:	684b      	ldr	r3, [r1, #4]
 800e87e:	bf16      	itet	ne
 800e880:	6063      	strne	r3, [r4, #4]
 800e882:	6013      	streq	r3, [r2, #0]
 800e884:	460c      	movne	r4, r1
 800e886:	e7eb      	b.n	800e860 <_malloc_r+0x64>
 800e888:	460c      	mov	r4, r1
 800e88a:	6849      	ldr	r1, [r1, #4]
 800e88c:	e7cc      	b.n	800e828 <_malloc_r+0x2c>
 800e88e:	1cc4      	adds	r4, r0, #3
 800e890:	f024 0403 	bic.w	r4, r4, #3
 800e894:	42a0      	cmp	r0, r4
 800e896:	d005      	beq.n	800e8a4 <_malloc_r+0xa8>
 800e898:	1a21      	subs	r1, r4, r0
 800e89a:	4630      	mov	r0, r6
 800e89c:	f000 f95a 	bl	800eb54 <_sbrk_r>
 800e8a0:	3001      	adds	r0, #1
 800e8a2:	d0cf      	beq.n	800e844 <_malloc_r+0x48>
 800e8a4:	6025      	str	r5, [r4, #0]
 800e8a6:	e7db      	b.n	800e860 <_malloc_r+0x64>
 800e8a8:	20001ec0 	.word	0x20001ec0
 800e8ac:	20001ec4 	.word	0x20001ec4

0800e8b0 <__ssputs_r>:
 800e8b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8b4:	688e      	ldr	r6, [r1, #8]
 800e8b6:	429e      	cmp	r6, r3
 800e8b8:	4682      	mov	sl, r0
 800e8ba:	460c      	mov	r4, r1
 800e8bc:	4690      	mov	r8, r2
 800e8be:	4699      	mov	r9, r3
 800e8c0:	d837      	bhi.n	800e932 <__ssputs_r+0x82>
 800e8c2:	898a      	ldrh	r2, [r1, #12]
 800e8c4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e8c8:	d031      	beq.n	800e92e <__ssputs_r+0x7e>
 800e8ca:	6825      	ldr	r5, [r4, #0]
 800e8cc:	6909      	ldr	r1, [r1, #16]
 800e8ce:	1a6f      	subs	r7, r5, r1
 800e8d0:	6965      	ldr	r5, [r4, #20]
 800e8d2:	2302      	movs	r3, #2
 800e8d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e8d8:	fb95 f5f3 	sdiv	r5, r5, r3
 800e8dc:	f109 0301 	add.w	r3, r9, #1
 800e8e0:	443b      	add	r3, r7
 800e8e2:	429d      	cmp	r5, r3
 800e8e4:	bf38      	it	cc
 800e8e6:	461d      	movcc	r5, r3
 800e8e8:	0553      	lsls	r3, r2, #21
 800e8ea:	d530      	bpl.n	800e94e <__ssputs_r+0x9e>
 800e8ec:	4629      	mov	r1, r5
 800e8ee:	f7ff ff85 	bl	800e7fc <_malloc_r>
 800e8f2:	4606      	mov	r6, r0
 800e8f4:	b950      	cbnz	r0, 800e90c <__ssputs_r+0x5c>
 800e8f6:	230c      	movs	r3, #12
 800e8f8:	f8ca 3000 	str.w	r3, [sl]
 800e8fc:	89a3      	ldrh	r3, [r4, #12]
 800e8fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e902:	81a3      	strh	r3, [r4, #12]
 800e904:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e908:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e90c:	463a      	mov	r2, r7
 800e90e:	6921      	ldr	r1, [r4, #16]
 800e910:	f7ff fc32 	bl	800e178 <memcpy>
 800e914:	89a3      	ldrh	r3, [r4, #12]
 800e916:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e91a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e91e:	81a3      	strh	r3, [r4, #12]
 800e920:	6126      	str	r6, [r4, #16]
 800e922:	6165      	str	r5, [r4, #20]
 800e924:	443e      	add	r6, r7
 800e926:	1bed      	subs	r5, r5, r7
 800e928:	6026      	str	r6, [r4, #0]
 800e92a:	60a5      	str	r5, [r4, #8]
 800e92c:	464e      	mov	r6, r9
 800e92e:	454e      	cmp	r6, r9
 800e930:	d900      	bls.n	800e934 <__ssputs_r+0x84>
 800e932:	464e      	mov	r6, r9
 800e934:	4632      	mov	r2, r6
 800e936:	4641      	mov	r1, r8
 800e938:	6820      	ldr	r0, [r4, #0]
 800e93a:	f000 f9c7 	bl	800eccc <memmove>
 800e93e:	68a3      	ldr	r3, [r4, #8]
 800e940:	1b9b      	subs	r3, r3, r6
 800e942:	60a3      	str	r3, [r4, #8]
 800e944:	6823      	ldr	r3, [r4, #0]
 800e946:	441e      	add	r6, r3
 800e948:	6026      	str	r6, [r4, #0]
 800e94a:	2000      	movs	r0, #0
 800e94c:	e7dc      	b.n	800e908 <__ssputs_r+0x58>
 800e94e:	462a      	mov	r2, r5
 800e950:	f000 f9d7 	bl	800ed02 <_realloc_r>
 800e954:	4606      	mov	r6, r0
 800e956:	2800      	cmp	r0, #0
 800e958:	d1e2      	bne.n	800e920 <__ssputs_r+0x70>
 800e95a:	6921      	ldr	r1, [r4, #16]
 800e95c:	4650      	mov	r0, sl
 800e95e:	f7ff feff 	bl	800e760 <_free_r>
 800e962:	e7c8      	b.n	800e8f6 <__ssputs_r+0x46>

0800e964 <_svfiprintf_r>:
 800e964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e968:	461d      	mov	r5, r3
 800e96a:	898b      	ldrh	r3, [r1, #12]
 800e96c:	061f      	lsls	r7, r3, #24
 800e96e:	b09d      	sub	sp, #116	; 0x74
 800e970:	4680      	mov	r8, r0
 800e972:	460c      	mov	r4, r1
 800e974:	4616      	mov	r6, r2
 800e976:	d50f      	bpl.n	800e998 <_svfiprintf_r+0x34>
 800e978:	690b      	ldr	r3, [r1, #16]
 800e97a:	b96b      	cbnz	r3, 800e998 <_svfiprintf_r+0x34>
 800e97c:	2140      	movs	r1, #64	; 0x40
 800e97e:	f7ff ff3d 	bl	800e7fc <_malloc_r>
 800e982:	6020      	str	r0, [r4, #0]
 800e984:	6120      	str	r0, [r4, #16]
 800e986:	b928      	cbnz	r0, 800e994 <_svfiprintf_r+0x30>
 800e988:	230c      	movs	r3, #12
 800e98a:	f8c8 3000 	str.w	r3, [r8]
 800e98e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e992:	e0c8      	b.n	800eb26 <_svfiprintf_r+0x1c2>
 800e994:	2340      	movs	r3, #64	; 0x40
 800e996:	6163      	str	r3, [r4, #20]
 800e998:	2300      	movs	r3, #0
 800e99a:	9309      	str	r3, [sp, #36]	; 0x24
 800e99c:	2320      	movs	r3, #32
 800e99e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e9a2:	2330      	movs	r3, #48	; 0x30
 800e9a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e9a8:	9503      	str	r5, [sp, #12]
 800e9aa:	f04f 0b01 	mov.w	fp, #1
 800e9ae:	4637      	mov	r7, r6
 800e9b0:	463d      	mov	r5, r7
 800e9b2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e9b6:	b10b      	cbz	r3, 800e9bc <_svfiprintf_r+0x58>
 800e9b8:	2b25      	cmp	r3, #37	; 0x25
 800e9ba:	d13e      	bne.n	800ea3a <_svfiprintf_r+0xd6>
 800e9bc:	ebb7 0a06 	subs.w	sl, r7, r6
 800e9c0:	d00b      	beq.n	800e9da <_svfiprintf_r+0x76>
 800e9c2:	4653      	mov	r3, sl
 800e9c4:	4632      	mov	r2, r6
 800e9c6:	4621      	mov	r1, r4
 800e9c8:	4640      	mov	r0, r8
 800e9ca:	f7ff ff71 	bl	800e8b0 <__ssputs_r>
 800e9ce:	3001      	adds	r0, #1
 800e9d0:	f000 80a4 	beq.w	800eb1c <_svfiprintf_r+0x1b8>
 800e9d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e9d6:	4453      	add	r3, sl
 800e9d8:	9309      	str	r3, [sp, #36]	; 0x24
 800e9da:	783b      	ldrb	r3, [r7, #0]
 800e9dc:	2b00      	cmp	r3, #0
 800e9de:	f000 809d 	beq.w	800eb1c <_svfiprintf_r+0x1b8>
 800e9e2:	2300      	movs	r3, #0
 800e9e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e9e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9ec:	9304      	str	r3, [sp, #16]
 800e9ee:	9307      	str	r3, [sp, #28]
 800e9f0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e9f4:	931a      	str	r3, [sp, #104]	; 0x68
 800e9f6:	462f      	mov	r7, r5
 800e9f8:	2205      	movs	r2, #5
 800e9fa:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e9fe:	4850      	ldr	r0, [pc, #320]	; (800eb40 <_svfiprintf_r+0x1dc>)
 800ea00:	f7f1 fc16 	bl	8000230 <memchr>
 800ea04:	9b04      	ldr	r3, [sp, #16]
 800ea06:	b9d0      	cbnz	r0, 800ea3e <_svfiprintf_r+0xda>
 800ea08:	06d9      	lsls	r1, r3, #27
 800ea0a:	bf44      	itt	mi
 800ea0c:	2220      	movmi	r2, #32
 800ea0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ea12:	071a      	lsls	r2, r3, #28
 800ea14:	bf44      	itt	mi
 800ea16:	222b      	movmi	r2, #43	; 0x2b
 800ea18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ea1c:	782a      	ldrb	r2, [r5, #0]
 800ea1e:	2a2a      	cmp	r2, #42	; 0x2a
 800ea20:	d015      	beq.n	800ea4e <_svfiprintf_r+0xea>
 800ea22:	9a07      	ldr	r2, [sp, #28]
 800ea24:	462f      	mov	r7, r5
 800ea26:	2000      	movs	r0, #0
 800ea28:	250a      	movs	r5, #10
 800ea2a:	4639      	mov	r1, r7
 800ea2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea30:	3b30      	subs	r3, #48	; 0x30
 800ea32:	2b09      	cmp	r3, #9
 800ea34:	d94d      	bls.n	800ead2 <_svfiprintf_r+0x16e>
 800ea36:	b1b8      	cbz	r0, 800ea68 <_svfiprintf_r+0x104>
 800ea38:	e00f      	b.n	800ea5a <_svfiprintf_r+0xf6>
 800ea3a:	462f      	mov	r7, r5
 800ea3c:	e7b8      	b.n	800e9b0 <_svfiprintf_r+0x4c>
 800ea3e:	4a40      	ldr	r2, [pc, #256]	; (800eb40 <_svfiprintf_r+0x1dc>)
 800ea40:	1a80      	subs	r0, r0, r2
 800ea42:	fa0b f000 	lsl.w	r0, fp, r0
 800ea46:	4318      	orrs	r0, r3
 800ea48:	9004      	str	r0, [sp, #16]
 800ea4a:	463d      	mov	r5, r7
 800ea4c:	e7d3      	b.n	800e9f6 <_svfiprintf_r+0x92>
 800ea4e:	9a03      	ldr	r2, [sp, #12]
 800ea50:	1d11      	adds	r1, r2, #4
 800ea52:	6812      	ldr	r2, [r2, #0]
 800ea54:	9103      	str	r1, [sp, #12]
 800ea56:	2a00      	cmp	r2, #0
 800ea58:	db01      	blt.n	800ea5e <_svfiprintf_r+0xfa>
 800ea5a:	9207      	str	r2, [sp, #28]
 800ea5c:	e004      	b.n	800ea68 <_svfiprintf_r+0x104>
 800ea5e:	4252      	negs	r2, r2
 800ea60:	f043 0302 	orr.w	r3, r3, #2
 800ea64:	9207      	str	r2, [sp, #28]
 800ea66:	9304      	str	r3, [sp, #16]
 800ea68:	783b      	ldrb	r3, [r7, #0]
 800ea6a:	2b2e      	cmp	r3, #46	; 0x2e
 800ea6c:	d10c      	bne.n	800ea88 <_svfiprintf_r+0x124>
 800ea6e:	787b      	ldrb	r3, [r7, #1]
 800ea70:	2b2a      	cmp	r3, #42	; 0x2a
 800ea72:	d133      	bne.n	800eadc <_svfiprintf_r+0x178>
 800ea74:	9b03      	ldr	r3, [sp, #12]
 800ea76:	1d1a      	adds	r2, r3, #4
 800ea78:	681b      	ldr	r3, [r3, #0]
 800ea7a:	9203      	str	r2, [sp, #12]
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	bfb8      	it	lt
 800ea80:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800ea84:	3702      	adds	r7, #2
 800ea86:	9305      	str	r3, [sp, #20]
 800ea88:	4d2e      	ldr	r5, [pc, #184]	; (800eb44 <_svfiprintf_r+0x1e0>)
 800ea8a:	7839      	ldrb	r1, [r7, #0]
 800ea8c:	2203      	movs	r2, #3
 800ea8e:	4628      	mov	r0, r5
 800ea90:	f7f1 fbce 	bl	8000230 <memchr>
 800ea94:	b138      	cbz	r0, 800eaa6 <_svfiprintf_r+0x142>
 800ea96:	2340      	movs	r3, #64	; 0x40
 800ea98:	1b40      	subs	r0, r0, r5
 800ea9a:	fa03 f000 	lsl.w	r0, r3, r0
 800ea9e:	9b04      	ldr	r3, [sp, #16]
 800eaa0:	4303      	orrs	r3, r0
 800eaa2:	3701      	adds	r7, #1
 800eaa4:	9304      	str	r3, [sp, #16]
 800eaa6:	7839      	ldrb	r1, [r7, #0]
 800eaa8:	4827      	ldr	r0, [pc, #156]	; (800eb48 <_svfiprintf_r+0x1e4>)
 800eaaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eaae:	2206      	movs	r2, #6
 800eab0:	1c7e      	adds	r6, r7, #1
 800eab2:	f7f1 fbbd 	bl	8000230 <memchr>
 800eab6:	2800      	cmp	r0, #0
 800eab8:	d038      	beq.n	800eb2c <_svfiprintf_r+0x1c8>
 800eaba:	4b24      	ldr	r3, [pc, #144]	; (800eb4c <_svfiprintf_r+0x1e8>)
 800eabc:	bb13      	cbnz	r3, 800eb04 <_svfiprintf_r+0x1a0>
 800eabe:	9b03      	ldr	r3, [sp, #12]
 800eac0:	3307      	adds	r3, #7
 800eac2:	f023 0307 	bic.w	r3, r3, #7
 800eac6:	3308      	adds	r3, #8
 800eac8:	9303      	str	r3, [sp, #12]
 800eaca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eacc:	444b      	add	r3, r9
 800eace:	9309      	str	r3, [sp, #36]	; 0x24
 800ead0:	e76d      	b.n	800e9ae <_svfiprintf_r+0x4a>
 800ead2:	fb05 3202 	mla	r2, r5, r2, r3
 800ead6:	2001      	movs	r0, #1
 800ead8:	460f      	mov	r7, r1
 800eada:	e7a6      	b.n	800ea2a <_svfiprintf_r+0xc6>
 800eadc:	2300      	movs	r3, #0
 800eade:	3701      	adds	r7, #1
 800eae0:	9305      	str	r3, [sp, #20]
 800eae2:	4619      	mov	r1, r3
 800eae4:	250a      	movs	r5, #10
 800eae6:	4638      	mov	r0, r7
 800eae8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eaec:	3a30      	subs	r2, #48	; 0x30
 800eaee:	2a09      	cmp	r2, #9
 800eaf0:	d903      	bls.n	800eafa <_svfiprintf_r+0x196>
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d0c8      	beq.n	800ea88 <_svfiprintf_r+0x124>
 800eaf6:	9105      	str	r1, [sp, #20]
 800eaf8:	e7c6      	b.n	800ea88 <_svfiprintf_r+0x124>
 800eafa:	fb05 2101 	mla	r1, r5, r1, r2
 800eafe:	2301      	movs	r3, #1
 800eb00:	4607      	mov	r7, r0
 800eb02:	e7f0      	b.n	800eae6 <_svfiprintf_r+0x182>
 800eb04:	ab03      	add	r3, sp, #12
 800eb06:	9300      	str	r3, [sp, #0]
 800eb08:	4622      	mov	r2, r4
 800eb0a:	4b11      	ldr	r3, [pc, #68]	; (800eb50 <_svfiprintf_r+0x1ec>)
 800eb0c:	a904      	add	r1, sp, #16
 800eb0e:	4640      	mov	r0, r8
 800eb10:	f7fd fdc8 	bl	800c6a4 <_printf_float>
 800eb14:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800eb18:	4681      	mov	r9, r0
 800eb1a:	d1d6      	bne.n	800eaca <_svfiprintf_r+0x166>
 800eb1c:	89a3      	ldrh	r3, [r4, #12]
 800eb1e:	065b      	lsls	r3, r3, #25
 800eb20:	f53f af35 	bmi.w	800e98e <_svfiprintf_r+0x2a>
 800eb24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb26:	b01d      	add	sp, #116	; 0x74
 800eb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb2c:	ab03      	add	r3, sp, #12
 800eb2e:	9300      	str	r3, [sp, #0]
 800eb30:	4622      	mov	r2, r4
 800eb32:	4b07      	ldr	r3, [pc, #28]	; (800eb50 <_svfiprintf_r+0x1ec>)
 800eb34:	a904      	add	r1, sp, #16
 800eb36:	4640      	mov	r0, r8
 800eb38:	f7fe f86a 	bl	800cc10 <_printf_i>
 800eb3c:	e7ea      	b.n	800eb14 <_svfiprintf_r+0x1b0>
 800eb3e:	bf00      	nop
 800eb40:	0800fcbc 	.word	0x0800fcbc
 800eb44:	0800fcc2 	.word	0x0800fcc2
 800eb48:	0800fcc6 	.word	0x0800fcc6
 800eb4c:	0800c6a5 	.word	0x0800c6a5
 800eb50:	0800e8b1 	.word	0x0800e8b1

0800eb54 <_sbrk_r>:
 800eb54:	b538      	push	{r3, r4, r5, lr}
 800eb56:	4c06      	ldr	r4, [pc, #24]	; (800eb70 <_sbrk_r+0x1c>)
 800eb58:	2300      	movs	r3, #0
 800eb5a:	4605      	mov	r5, r0
 800eb5c:	4608      	mov	r0, r1
 800eb5e:	6023      	str	r3, [r4, #0]
 800eb60:	f7f6 ffde 	bl	8005b20 <_sbrk>
 800eb64:	1c43      	adds	r3, r0, #1
 800eb66:	d102      	bne.n	800eb6e <_sbrk_r+0x1a>
 800eb68:	6823      	ldr	r3, [r4, #0]
 800eb6a:	b103      	cbz	r3, 800eb6e <_sbrk_r+0x1a>
 800eb6c:	602b      	str	r3, [r5, #0]
 800eb6e:	bd38      	pop	{r3, r4, r5, pc}
 800eb70:	200026e8 	.word	0x200026e8

0800eb74 <__sread>:
 800eb74:	b510      	push	{r4, lr}
 800eb76:	460c      	mov	r4, r1
 800eb78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800eb7c:	f000 f8e8 	bl	800ed50 <_read_r>
 800eb80:	2800      	cmp	r0, #0
 800eb82:	bfab      	itete	ge
 800eb84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800eb86:	89a3      	ldrhlt	r3, [r4, #12]
 800eb88:	181b      	addge	r3, r3, r0
 800eb8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800eb8e:	bfac      	ite	ge
 800eb90:	6563      	strge	r3, [r4, #84]	; 0x54
 800eb92:	81a3      	strhlt	r3, [r4, #12]
 800eb94:	bd10      	pop	{r4, pc}

0800eb96 <__swrite>:
 800eb96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb9a:	461f      	mov	r7, r3
 800eb9c:	898b      	ldrh	r3, [r1, #12]
 800eb9e:	05db      	lsls	r3, r3, #23
 800eba0:	4605      	mov	r5, r0
 800eba2:	460c      	mov	r4, r1
 800eba4:	4616      	mov	r6, r2
 800eba6:	d505      	bpl.n	800ebb4 <__swrite+0x1e>
 800eba8:	2302      	movs	r3, #2
 800ebaa:	2200      	movs	r2, #0
 800ebac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebb0:	f000 f868 	bl	800ec84 <_lseek_r>
 800ebb4:	89a3      	ldrh	r3, [r4, #12]
 800ebb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ebba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ebbe:	81a3      	strh	r3, [r4, #12]
 800ebc0:	4632      	mov	r2, r6
 800ebc2:	463b      	mov	r3, r7
 800ebc4:	4628      	mov	r0, r5
 800ebc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ebca:	f000 b817 	b.w	800ebfc <_write_r>

0800ebce <__sseek>:
 800ebce:	b510      	push	{r4, lr}
 800ebd0:	460c      	mov	r4, r1
 800ebd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebd6:	f000 f855 	bl	800ec84 <_lseek_r>
 800ebda:	1c43      	adds	r3, r0, #1
 800ebdc:	89a3      	ldrh	r3, [r4, #12]
 800ebde:	bf15      	itete	ne
 800ebe0:	6560      	strne	r0, [r4, #84]	; 0x54
 800ebe2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800ebe6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800ebea:	81a3      	strheq	r3, [r4, #12]
 800ebec:	bf18      	it	ne
 800ebee:	81a3      	strhne	r3, [r4, #12]
 800ebf0:	bd10      	pop	{r4, pc}

0800ebf2 <__sclose>:
 800ebf2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ebf6:	f000 b813 	b.w	800ec20 <_close_r>
	...

0800ebfc <_write_r>:
 800ebfc:	b538      	push	{r3, r4, r5, lr}
 800ebfe:	4c07      	ldr	r4, [pc, #28]	; (800ec1c <_write_r+0x20>)
 800ec00:	4605      	mov	r5, r0
 800ec02:	4608      	mov	r0, r1
 800ec04:	4611      	mov	r1, r2
 800ec06:	2200      	movs	r2, #0
 800ec08:	6022      	str	r2, [r4, #0]
 800ec0a:	461a      	mov	r2, r3
 800ec0c:	f7f6 fbc5 	bl	800539a <_write>
 800ec10:	1c43      	adds	r3, r0, #1
 800ec12:	d102      	bne.n	800ec1a <_write_r+0x1e>
 800ec14:	6823      	ldr	r3, [r4, #0]
 800ec16:	b103      	cbz	r3, 800ec1a <_write_r+0x1e>
 800ec18:	602b      	str	r3, [r5, #0]
 800ec1a:	bd38      	pop	{r3, r4, r5, pc}
 800ec1c:	200026e8 	.word	0x200026e8

0800ec20 <_close_r>:
 800ec20:	b538      	push	{r3, r4, r5, lr}
 800ec22:	4c06      	ldr	r4, [pc, #24]	; (800ec3c <_close_r+0x1c>)
 800ec24:	2300      	movs	r3, #0
 800ec26:	4605      	mov	r5, r0
 800ec28:	4608      	mov	r0, r1
 800ec2a:	6023      	str	r3, [r4, #0]
 800ec2c:	f7f6 ff43 	bl	8005ab6 <_close>
 800ec30:	1c43      	adds	r3, r0, #1
 800ec32:	d102      	bne.n	800ec3a <_close_r+0x1a>
 800ec34:	6823      	ldr	r3, [r4, #0]
 800ec36:	b103      	cbz	r3, 800ec3a <_close_r+0x1a>
 800ec38:	602b      	str	r3, [r5, #0]
 800ec3a:	bd38      	pop	{r3, r4, r5, pc}
 800ec3c:	200026e8 	.word	0x200026e8

0800ec40 <_fstat_r>:
 800ec40:	b538      	push	{r3, r4, r5, lr}
 800ec42:	4c07      	ldr	r4, [pc, #28]	; (800ec60 <_fstat_r+0x20>)
 800ec44:	2300      	movs	r3, #0
 800ec46:	4605      	mov	r5, r0
 800ec48:	4608      	mov	r0, r1
 800ec4a:	4611      	mov	r1, r2
 800ec4c:	6023      	str	r3, [r4, #0]
 800ec4e:	f7f6 ff3e 	bl	8005ace <_fstat>
 800ec52:	1c43      	adds	r3, r0, #1
 800ec54:	d102      	bne.n	800ec5c <_fstat_r+0x1c>
 800ec56:	6823      	ldr	r3, [r4, #0]
 800ec58:	b103      	cbz	r3, 800ec5c <_fstat_r+0x1c>
 800ec5a:	602b      	str	r3, [r5, #0]
 800ec5c:	bd38      	pop	{r3, r4, r5, pc}
 800ec5e:	bf00      	nop
 800ec60:	200026e8 	.word	0x200026e8

0800ec64 <_isatty_r>:
 800ec64:	b538      	push	{r3, r4, r5, lr}
 800ec66:	4c06      	ldr	r4, [pc, #24]	; (800ec80 <_isatty_r+0x1c>)
 800ec68:	2300      	movs	r3, #0
 800ec6a:	4605      	mov	r5, r0
 800ec6c:	4608      	mov	r0, r1
 800ec6e:	6023      	str	r3, [r4, #0]
 800ec70:	f7f6 ff3d 	bl	8005aee <_isatty>
 800ec74:	1c43      	adds	r3, r0, #1
 800ec76:	d102      	bne.n	800ec7e <_isatty_r+0x1a>
 800ec78:	6823      	ldr	r3, [r4, #0]
 800ec7a:	b103      	cbz	r3, 800ec7e <_isatty_r+0x1a>
 800ec7c:	602b      	str	r3, [r5, #0]
 800ec7e:	bd38      	pop	{r3, r4, r5, pc}
 800ec80:	200026e8 	.word	0x200026e8

0800ec84 <_lseek_r>:
 800ec84:	b538      	push	{r3, r4, r5, lr}
 800ec86:	4c07      	ldr	r4, [pc, #28]	; (800eca4 <_lseek_r+0x20>)
 800ec88:	4605      	mov	r5, r0
 800ec8a:	4608      	mov	r0, r1
 800ec8c:	4611      	mov	r1, r2
 800ec8e:	2200      	movs	r2, #0
 800ec90:	6022      	str	r2, [r4, #0]
 800ec92:	461a      	mov	r2, r3
 800ec94:	f7f6 ff36 	bl	8005b04 <_lseek>
 800ec98:	1c43      	adds	r3, r0, #1
 800ec9a:	d102      	bne.n	800eca2 <_lseek_r+0x1e>
 800ec9c:	6823      	ldr	r3, [r4, #0]
 800ec9e:	b103      	cbz	r3, 800eca2 <_lseek_r+0x1e>
 800eca0:	602b      	str	r3, [r5, #0]
 800eca2:	bd38      	pop	{r3, r4, r5, pc}
 800eca4:	200026e8 	.word	0x200026e8

0800eca8 <__ascii_mbtowc>:
 800eca8:	b082      	sub	sp, #8
 800ecaa:	b901      	cbnz	r1, 800ecae <__ascii_mbtowc+0x6>
 800ecac:	a901      	add	r1, sp, #4
 800ecae:	b142      	cbz	r2, 800ecc2 <__ascii_mbtowc+0x1a>
 800ecb0:	b14b      	cbz	r3, 800ecc6 <__ascii_mbtowc+0x1e>
 800ecb2:	7813      	ldrb	r3, [r2, #0]
 800ecb4:	600b      	str	r3, [r1, #0]
 800ecb6:	7812      	ldrb	r2, [r2, #0]
 800ecb8:	1c10      	adds	r0, r2, #0
 800ecba:	bf18      	it	ne
 800ecbc:	2001      	movne	r0, #1
 800ecbe:	b002      	add	sp, #8
 800ecc0:	4770      	bx	lr
 800ecc2:	4610      	mov	r0, r2
 800ecc4:	e7fb      	b.n	800ecbe <__ascii_mbtowc+0x16>
 800ecc6:	f06f 0001 	mvn.w	r0, #1
 800ecca:	e7f8      	b.n	800ecbe <__ascii_mbtowc+0x16>

0800eccc <memmove>:
 800eccc:	4288      	cmp	r0, r1
 800ecce:	b510      	push	{r4, lr}
 800ecd0:	eb01 0302 	add.w	r3, r1, r2
 800ecd4:	d807      	bhi.n	800ece6 <memmove+0x1a>
 800ecd6:	1e42      	subs	r2, r0, #1
 800ecd8:	4299      	cmp	r1, r3
 800ecda:	d00a      	beq.n	800ecf2 <memmove+0x26>
 800ecdc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ece0:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ece4:	e7f8      	b.n	800ecd8 <memmove+0xc>
 800ece6:	4283      	cmp	r3, r0
 800ece8:	d9f5      	bls.n	800ecd6 <memmove+0xa>
 800ecea:	1881      	adds	r1, r0, r2
 800ecec:	1ad2      	subs	r2, r2, r3
 800ecee:	42d3      	cmn	r3, r2
 800ecf0:	d100      	bne.n	800ecf4 <memmove+0x28>
 800ecf2:	bd10      	pop	{r4, pc}
 800ecf4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ecf8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800ecfc:	e7f7      	b.n	800ecee <memmove+0x22>

0800ecfe <__malloc_lock>:
 800ecfe:	4770      	bx	lr

0800ed00 <__malloc_unlock>:
 800ed00:	4770      	bx	lr

0800ed02 <_realloc_r>:
 800ed02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ed04:	4607      	mov	r7, r0
 800ed06:	4614      	mov	r4, r2
 800ed08:	460e      	mov	r6, r1
 800ed0a:	b921      	cbnz	r1, 800ed16 <_realloc_r+0x14>
 800ed0c:	4611      	mov	r1, r2
 800ed0e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ed12:	f7ff bd73 	b.w	800e7fc <_malloc_r>
 800ed16:	b922      	cbnz	r2, 800ed22 <_realloc_r+0x20>
 800ed18:	f7ff fd22 	bl	800e760 <_free_r>
 800ed1c:	4625      	mov	r5, r4
 800ed1e:	4628      	mov	r0, r5
 800ed20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ed22:	f000 f834 	bl	800ed8e <_malloc_usable_size_r>
 800ed26:	42a0      	cmp	r0, r4
 800ed28:	d20f      	bcs.n	800ed4a <_realloc_r+0x48>
 800ed2a:	4621      	mov	r1, r4
 800ed2c:	4638      	mov	r0, r7
 800ed2e:	f7ff fd65 	bl	800e7fc <_malloc_r>
 800ed32:	4605      	mov	r5, r0
 800ed34:	2800      	cmp	r0, #0
 800ed36:	d0f2      	beq.n	800ed1e <_realloc_r+0x1c>
 800ed38:	4631      	mov	r1, r6
 800ed3a:	4622      	mov	r2, r4
 800ed3c:	f7ff fa1c 	bl	800e178 <memcpy>
 800ed40:	4631      	mov	r1, r6
 800ed42:	4638      	mov	r0, r7
 800ed44:	f7ff fd0c 	bl	800e760 <_free_r>
 800ed48:	e7e9      	b.n	800ed1e <_realloc_r+0x1c>
 800ed4a:	4635      	mov	r5, r6
 800ed4c:	e7e7      	b.n	800ed1e <_realloc_r+0x1c>
	...

0800ed50 <_read_r>:
 800ed50:	b538      	push	{r3, r4, r5, lr}
 800ed52:	4c07      	ldr	r4, [pc, #28]	; (800ed70 <_read_r+0x20>)
 800ed54:	4605      	mov	r5, r0
 800ed56:	4608      	mov	r0, r1
 800ed58:	4611      	mov	r1, r2
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	6022      	str	r2, [r4, #0]
 800ed5e:	461a      	mov	r2, r3
 800ed60:	f7f6 fe8c 	bl	8005a7c <_read>
 800ed64:	1c43      	adds	r3, r0, #1
 800ed66:	d102      	bne.n	800ed6e <_read_r+0x1e>
 800ed68:	6823      	ldr	r3, [r4, #0]
 800ed6a:	b103      	cbz	r3, 800ed6e <_read_r+0x1e>
 800ed6c:	602b      	str	r3, [r5, #0]
 800ed6e:	bd38      	pop	{r3, r4, r5, pc}
 800ed70:	200026e8 	.word	0x200026e8

0800ed74 <__ascii_wctomb>:
 800ed74:	b149      	cbz	r1, 800ed8a <__ascii_wctomb+0x16>
 800ed76:	2aff      	cmp	r2, #255	; 0xff
 800ed78:	bf85      	ittet	hi
 800ed7a:	238a      	movhi	r3, #138	; 0x8a
 800ed7c:	6003      	strhi	r3, [r0, #0]
 800ed7e:	700a      	strbls	r2, [r1, #0]
 800ed80:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ed84:	bf98      	it	ls
 800ed86:	2001      	movls	r0, #1
 800ed88:	4770      	bx	lr
 800ed8a:	4608      	mov	r0, r1
 800ed8c:	4770      	bx	lr

0800ed8e <_malloc_usable_size_r>:
 800ed8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed92:	1f18      	subs	r0, r3, #4
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	bfbc      	itt	lt
 800ed98:	580b      	ldrlt	r3, [r1, r0]
 800ed9a:	18c0      	addlt	r0, r0, r3
 800ed9c:	4770      	bx	lr
	...

0800eda0 <_init>:
 800eda0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eda2:	bf00      	nop
 800eda4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800eda6:	bc08      	pop	{r3}
 800eda8:	469e      	mov	lr, r3
 800edaa:	4770      	bx	lr

0800edac <_fini>:
 800edac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edae:	bf00      	nop
 800edb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800edb2:	bc08      	pop	{r3}
 800edb4:	469e      	mov	lr, r3
 800edb6:	4770      	bx	lr
