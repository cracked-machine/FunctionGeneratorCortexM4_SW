
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011c7c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ac8  08011e60  08011e60  00021e60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013928  08013928  000319c8  2**0
                  CONTENTS
  4 .ARM          00000000  08013928  08013928  000319c8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08013928  08013928  000319c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013928  08013928  00023928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801392c  0801392c  0002392c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000019c8  20000000  08013930  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a9c  200019c8  080152f8  000319c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002464  080152f8  00032464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000319c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003ffcf  00000000  00000000  000319f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000072aa  00000000  00000000  000719c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002140  00000000  00000000  00078c78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001d70  00000000  00000000  0007adb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000340be  00000000  00000000  0007cb28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002bc18  00000000  00000000  000b0be6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00125fc1  00000000  00000000  000dc7fe  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  002027bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009350  00000000  00000000  0020283c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200019c8 	.word	0x200019c8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08011e44 	.word	0x08011e44

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200019cc 	.word	0x200019cc
 800021c:	08011e44 	.word	0x08011e44

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	2b01      	cmp	r3, #1
 8000c46:	d000      	beq.n	8000c4a <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000c48:	e002      	b.n	8000c50 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000c4a:	f000 f805 	bl	8000c58 <BiasMenu_DrawMainMenu>
			break;
 8000c4e:	bf00      	nop

	}
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->BIAS", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8000c5e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c62:	9301      	str	r3, [sp, #4]
 8000c64:	2302      	movs	r3, #2
 8000c66:	9300      	str	r3, [sp, #0]
 8000c68:	2300      	movs	r3, #0
 8000c6a:	220a      	movs	r2, #10
 8000c6c:	210a      	movs	r1, #10
 8000c6e:	4804      	ldr	r0, [pc, #16]	; (8000c80 <BiasMenu_DrawMainMenu+0x28>)
 8000c70:	f00c fdbe 	bl	800d7f0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8000c74:	f000 f936 	bl	8000ee4 <DM_DisplayFormattedOutput>

}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	08011e60 	.word	0x08011e60

08000c84 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000c88:	f00c fdf3 	bl	800d872 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000c8c:	2003      	movs	r0, #3
 8000c8e:	f00d fa27 	bl	800e0e0 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000c92:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c96:	f00d f82b 	bl	800dcf0 <ILI9341_Fill_Screen>

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
	...

08000ca0 <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, NORMAL_TEXT_FGCOLOUR, 1, NORMAL_TEXT_BGCOLOUR);
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	9301      	str	r3, [sp, #4]
 8000caa:	2301      	movs	r3, #1
 8000cac:	9300      	str	r3, [sp, #0]
 8000cae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000cb2:	220a      	movs	r2, #10
 8000cb4:	210a      	movs	r1, #10
 8000cb6:	4807      	ldr	r0, [pc, #28]	; (8000cd4 <DM_PostInit+0x34>)
 8000cb8:	f00c fd9a 	bl	800d7f0 <ILI9341_Draw_Text>
	  HAL_Delay(500);
 8000cbc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000cc0:	f007 fbf4 	bl	80084ac <HAL_Delay>

	  DM_RefreshScreen();
 8000cc4:	f000 fa96 	bl	80011f4 <DM_RefreshScreen>
#ifdef SWV_DEBUG_ENABLED
	  printf("Init Completed\n");
 8000cc8:	4803      	ldr	r0, [pc, #12]	; (8000cd8 <DM_PostInit+0x38>)
 8000cca:	f00e f90b 	bl	800eee4 <puts>
#endif


}
 8000cce:	bf00      	nop
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	08011e6c 	.word	0x08011e6c
 8000cd8:	08011e7c 	.word	0x08011e7c

08000cdc <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b09c      	sub	sp, #112	; 0x70
 8000ce0:	af02      	add	r7, sp, #8
	/*
	 * 	Top level menu
	 */
	if(ToplevelMenu_getStatus())
 8000ce2:	f003 fbef 	bl	80044c4 <ToplevelMenu_getStatus>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d018      	beq.n	8000d1e <DM_UpdateDisplay+0x42>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000cec:	4872      	ldr	r0, [pc, #456]	; (8000eb8 <DM_UpdateDisplay+0x1dc>)
 8000cee:	f00e f8f9 	bl	800eee4 <puts>
		#endif

		switch(ToplevelMenu_getStatus())
 8000cf2:	f003 fbe7 	bl	80044c4 <ToplevelMenu_getStatus>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d008      	beq.n	8000d0e <DM_UpdateDisplay+0x32>
 8000cfc:	2b03      	cmp	r3, #3
 8000cfe:	d00a      	beq.n	8000d16 <DM_UpdateDisplay+0x3a>
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d000      	beq.n	8000d06 <DM_UpdateDisplay+0x2a>

				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
				break;

			default:
				break;
 8000d04:	e089      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_MAIN_MENU);
 8000d06:	2001      	movs	r0, #1
 8000d08:	f002 faf4 	bl	80032f4 <ToplevelMenu_DrawMenu>
				break;
 8000d0c:	e085      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8000d0e:	2002      	movs	r0, #2
 8000d10:	f002 faf0 	bl	80032f4 <ToplevelMenu_DrawMenu>
				break;
 8000d14:	e081      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				ToplevelMenu_DrawMenu(ENABLE_TOPLEVEL_INPUT_MENU);
 8000d16:	2003      	movs	r0, #3
 8000d18:	f002 faec 	bl	80032f4 <ToplevelMenu_DrawMenu>
				break;
 8000d1c:	e07d      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	Function menus
	 */
	else if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000d1e:	f003 f9d1 	bl	80040c4 <FuncMenu_getStatus>
 8000d22:	4603      	mov	r3, r0
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d018      	beq.n	8000d5a <DM_UpdateDisplay+0x7e>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FuncMenu_DrawMenu\n");
 8000d28:	4863      	ldr	r0, [pc, #396]	; (8000eb8 <DM_UpdateDisplay+0x1dc>)
 8000d2a:	f00e f8db 	bl	800eee4 <puts>
		#endif

		switch(FuncMenu_getStatus())
 8000d2e:	f003 f9c9 	bl	80040c4 <FuncMenu_getStatus>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d008      	beq.n	8000d4a <DM_UpdateDisplay+0x6e>
 8000d38:	2b03      	cmp	r3, #3
 8000d3a:	d00a      	beq.n	8000d52 <DM_UpdateDisplay+0x76>
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d000      	beq.n	8000d42 <DM_UpdateDisplay+0x66>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);

				break;

			default:
				break;
 8000d40:	e06b      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000d42:	2001      	movs	r0, #1
 8000d44:	f002 f802 	bl	8002d4c <FuncMenu_DrawMenu>
				break;
 8000d48:	e067      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000d4a:	2002      	movs	r0, #2
 8000d4c:	f001 fffe 	bl	8002d4c <FuncMenu_DrawMenu>
				break;
 8000d50:	e063      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);
 8000d52:	2003      	movs	r0, #3
 8000d54:	f001 fffa 	bl	8002d4c <FuncMenu_DrawMenu>
				break;
 8000d58:	e05f      	b.n	8000e1a <DM_UpdateDisplay+0x13e>

	}
	/*
	 * 	Gain menus
	 */
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000d5a:	f003 fab5 	bl	80042c8 <GainMenu_getStatus>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d018      	beq.n	8000d96 <DM_UpdateDisplay+0xba>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("GainMenu_DrawMenu\n");
 8000d64:	4855      	ldr	r0, [pc, #340]	; (8000ebc <DM_UpdateDisplay+0x1e0>)
 8000d66:	f00e f8bd 	bl	800eee4 <puts>
		#endif

		switch(GainMenu_getStatus())
 8000d6a:	f003 faad 	bl	80042c8 <GainMenu_getStatus>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d008      	beq.n	8000d86 <DM_UpdateDisplay+0xaa>
 8000d74:	2b03      	cmp	r3, #3
 8000d76:	d00a      	beq.n	8000d8e <DM_UpdateDisplay+0xb2>
 8000d78:	2b01      	cmp	r3, #1
 8000d7a:	d000      	beq.n	8000d7e <DM_UpdateDisplay+0xa2>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);

				break;

			default:
				break;
 8000d7c:	e04d      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000d7e:	2001      	movs	r0, #1
 8000d80:	f002 fa2a 	bl	80031d8 <GainMenu_DrawMenu>
				break;
 8000d84:	e049      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000d86:	2002      	movs	r0, #2
 8000d88:	f002 fa26 	bl	80031d8 <GainMenu_DrawMenu>
				break;
 8000d8c:	e045      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);
 8000d8e:	2003      	movs	r0, #3
 8000d90:	f002 fa22 	bl	80031d8 <GainMenu_DrawMenu>
				break;
 8000d94:	e041      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	 Frequency menus
	 */
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000d96:	f003 f989 	bl	80040ac <FreqMenu_getStatus>
 8000d9a:	4603      	mov	r3, r0
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d023      	beq.n	8000de8 <DM_UpdateDisplay+0x10c>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("FreqMenu_DrawMenu\n");
 8000da0:	4847      	ldr	r0, [pc, #284]	; (8000ec0 <DM_UpdateDisplay+0x1e4>)
 8000da2:	f00e f89f 	bl	800eee4 <puts>
		#endif

		//ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);

		switch(FreqMenu_getStatus())
 8000da6:	f003 f981 	bl	80040ac <FreqMenu_getStatus>
 8000daa:	4603      	mov	r3, r0
 8000dac:	3b01      	subs	r3, #1
 8000dae:	2b03      	cmp	r3, #3
 8000db0:	d832      	bhi.n	8000e18 <DM_UpdateDisplay+0x13c>
 8000db2:	a201      	add	r2, pc, #4	; (adr r2, 8000db8 <DM_UpdateDisplay+0xdc>)
 8000db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000db8:	08000dc9 	.word	0x08000dc9
 8000dbc:	08000dd1 	.word	0x08000dd1
 8000dc0:	08000dd9 	.word	0x08000dd9
 8000dc4:	08000de1 	.word	0x08000de1
		{
			case ENABLE_FREQ_MAIN_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000dc8:	2001      	movs	r0, #1
 8000dca:	f000 fa6b 	bl	80012a4 <FreqMenu_DrawMenu>

				break;
 8000dce:	e024      	b.n	8000e1a <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000dd0:	2002      	movs	r0, #2
 8000dd2:	f000 fa67 	bl	80012a4 <FreqMenu_DrawMenu>
				break;
 8000dd6:	e020      	b.n	8000e1a <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_ADJUST_MENU:


				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000dd8:	2003      	movs	r0, #3
 8000dda:	f000 fa63 	bl	80012a4 <FreqMenu_DrawMenu>

				break;
 8000dde:	e01c      	b.n	8000e1a <DM_UpdateDisplay+0x13e>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000de0:	2004      	movs	r0, #4
 8000de2:	f000 fa5f 	bl	80012a4 <FreqMenu_DrawMenu>
				break;
 8000de6:	e018      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
	}

	/*
	 * 	Bias menu
	 */
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000de8:	f002 fb3e 	bl	8003468 <BiasMenu_getStatus>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d006      	beq.n	8000e00 <DM_UpdateDisplay+0x124>
	{

		#ifdef SWV_DEBUG_ENABLED
			  printf("BiasMenu_DrawMenu\n");
 8000df2:	4834      	ldr	r0, [pc, #208]	; (8000ec4 <DM_UpdateDisplay+0x1e8>)
 8000df4:	f00e f876 	bl	800eee4 <puts>
		#endif

		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000df8:	2001      	movs	r0, #1
 8000dfa:	f7ff ff1d 	bl	8000c38 <BiasMenu_DrawMenu>
 8000dfe:	e00c      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
	/*
	 * 		Error
	 */
	else
	{
		ILI9341_Draw_Text("DisplayManager: no menu status set!", 10, 50, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000e00:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	2301      	movs	r3, #1
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	2232      	movs	r2, #50	; 0x32
 8000e0e:	210a      	movs	r1, #10
 8000e10:	482d      	ldr	r0, [pc, #180]	; (8000ec8 <DM_UpdateDisplay+0x1ec>)
 8000e12:	f00c fced 	bl	800d7f0 <ILI9341_Draw_Text>
 8000e16:	e000      	b.n	8000e1a <DM_UpdateDisplay+0x13e>
				break;
 8000e18:	bf00      	nop

	/*
	 * 	Debug messages
	 */
	#ifdef ENCODER_DEBUG
		char tim5_text[50] = "";
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8000e1e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000e22:	222e      	movs	r2, #46	; 0x2e
 8000e24:	2100      	movs	r1, #0
 8000e26:	4618      	mov	r0, r3
 8000e28:	f00d fb9c 	bl	800e564 <memset>
		snprintf(tim5_text, sizeof(tim5_text), "OUTPUT_TIMER->ARR: %5lu", OUTPUT_TIMER->ARR);
 8000e2c:	4b27      	ldr	r3, [pc, #156]	; (8000ecc <DM_UpdateDisplay+0x1f0>)
 8000e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e30:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000e34:	4a26      	ldr	r2, [pc, #152]	; (8000ed0 <DM_UpdateDisplay+0x1f4>)
 8000e36:	2132      	movs	r1, #50	; 0x32
 8000e38:	f00e f85c 	bl	800eef4 <sniprintf>
		ILI9341_Draw_Text(tim5_text, 10, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000e3c:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8000e40:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000e44:	9301      	str	r3, [sp, #4]
 8000e46:	2301      	movs	r3, #1
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	22b4      	movs	r2, #180	; 0xb4
 8000e4e:	210a      	movs	r1, #10
 8000e50:	f00c fcce 	bl	800d7f0 <ILI9341_Draw_Text>

		char encoder_value[50] = "";
 8000e54:	2300      	movs	r3, #0
 8000e56:	603b      	str	r3, [r7, #0]
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	222e      	movs	r2, #46	; 0x2e
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f00d fb80 	bl	800e564 <memset>
		snprintf(encoder_value, sizeof(encoder_value), "SWEEP_TIMER->ARR: %5lu - ENCODER: %5lu", SWEEP_TIMER->ARR, ENCODER_TIMER->CNT);
 8000e64:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <DM_UpdateDisplay+0x1f8>)
 8000e66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <DM_UpdateDisplay+0x1fc>)
 8000e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e6c:	4638      	mov	r0, r7
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	4613      	mov	r3, r2
 8000e72:	4a1a      	ldr	r2, [pc, #104]	; (8000edc <DM_UpdateDisplay+0x200>)
 8000e74:	2132      	movs	r1, #50	; 0x32
 8000e76:	f00e f83d 	bl	800eef4 <sniprintf>
		ILI9341_Draw_Text(encoder_value, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000e7a:	4638      	mov	r0, r7
 8000e7c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000e80:	9301      	str	r3, [sp, #4]
 8000e82:	2301      	movs	r3, #1
 8000e84:	9300      	str	r3, [sp, #0]
 8000e86:	2300      	movs	r3, #0
 8000e88:	22be      	movs	r2, #190	; 0xbe
 8000e8a:	210a      	movs	r1, #10
 8000e8c:	f00c fcb0 	bl	800d7f0 <ILI9341_Draw_Text>
	#endif //ENCODER_DEBUG

	if(*ErrorDebugMsg)
 8000e90:	4b13      	ldr	r3, [pc, #76]	; (8000ee0 <DM_UpdateDisplay+0x204>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d00a      	beq.n	8000eae <DM_UpdateDisplay+0x1d2>
		ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8000e98:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8000e9c:	9301      	str	r3, [sp, #4]
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	9300      	str	r3, [sp, #0]
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	22be      	movs	r2, #190	; 0xbe
 8000ea6:	210a      	movs	r1, #10
 8000ea8:	480d      	ldr	r0, [pc, #52]	; (8000ee0 <DM_UpdateDisplay+0x204>)
 8000eaa:	f00c fca1 	bl	800d7f0 <ILI9341_Draw_Text>

}
 8000eae:	bf00      	nop
 8000eb0:	3768      	adds	r7, #104	; 0x68
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	08011e8c 	.word	0x08011e8c
 8000ebc:	08011ea0 	.word	0x08011ea0
 8000ec0:	08011eb4 	.word	0x08011eb4
 8000ec4:	08011ec8 	.word	0x08011ec8
 8000ec8:	08011edc 	.word	0x08011edc
 8000ecc:	40013400 	.word	0x40013400
 8000ed0:	08011f00 	.word	0x08011f00
 8000ed4:	40000c00 	.word	0x40000c00
 8000ed8:	40012c00 	.word	0x40012c00
 8000edc:	08011f18 	.word	0x08011f18
 8000ee0:	200019e4 	.word	0x200019e4

08000ee4 <DM_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void DM_DisplayFormattedOutput()
{
 8000ee4:	b590      	push	{r4, r7, lr}
 8000ee6:	b09b      	sub	sp, #108	; 0x6c
 8000ee8:	af02      	add	r7, sp, #8
	uint8_t text_size = 2;
 8000eea:	2302      	movs	r3, #2
 8000eec:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

	char out_hertz[15] = "";
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 8000ef4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	f8c3 2007 	str.w	r2, [r3, #7]
	uint8_t out_hertz_x = 140;
 8000f02:	238c      	movs	r3, #140	; 0x8c
 8000f04:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
	uint8_t out_hertz_y = 40;
 8000f08:	2328      	movs	r3, #40	; 0x28
 8000f0a:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59

	char out_vpp[18] = "";
 8000f0e:	2300      	movs	r3, #0
 8000f10:	627b      	str	r3, [r7, #36]	; 0x24
 8000f12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]
 8000f1c:	609a      	str	r2, [r3, #8]
 8000f1e:	819a      	strh	r2, [r3, #12]
	uint8_t out_vpp_x = 175;
 8000f20:	23af      	movs	r3, #175	; 0xaf
 8000f22:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
	uint8_t out_vpp_y = 70;
 8000f26:	2346      	movs	r3, #70	; 0x46
 8000f28:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	char out_decibels[13] = "";
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	617b      	str	r3, [r7, #20]
 8000f30:	f107 0318 	add.w	r3, r7, #24
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	721a      	strb	r2, [r3, #8]
	uint8_t out_decibels_x = 140;
 8000f3c:	238c      	movs	r3, #140	; 0x8c
 8000f3e:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
	uint8_t out_decibels_y = 100;
 8000f42:	2364      	movs	r3, #100	; 0x64
 8000f44:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55


	float volts_per_thou = 0.00075;
 8000f48:	4b9e      	ldr	r3, [pc, #632]	; (80011c4 <DM_DisplayFormattedOutput+0x2e0>)
 8000f4a:	653b      	str	r3, [r7, #80]	; 0x50
	char out_dcvolts[12] = "";
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	60bb      	str	r3, [r7, #8]
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]
 8000f58:	605a      	str	r2, [r3, #4]
	uint8_t out_dcvolts_x = 152;
 8000f5a:	2398      	movs	r3, #152	; 0x98
 8000f5c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t out_dcvolts_y = 130;
 8000f60:	2382      	movs	r3, #130	; 0x82
 8000f62:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

	ILI9341_Draw_Text(" FREQ   ....", 3, out_hertz_y , NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000f66:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8000f6a:	b299      	uxth	r1, r3
 8000f6c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	2200      	movs	r2, #0
 8000f74:	9201      	str	r2, [sp, #4]
 8000f76:	9300      	str	r3, [sp, #0]
 8000f78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000f7c:	460a      	mov	r2, r1
 8000f7e:	2103      	movs	r1, #3
 8000f80:	4891      	ldr	r0, [pc, #580]	; (80011c8 <DM_DisplayFormattedOutput+0x2e4>)
 8000f82:	f00c fc35 	bl	800d7f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" VPP    ....", 3, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000f86:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000f8a:	b299      	uxth	r1, r3
 8000f8c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000f90:	b29b      	uxth	r3, r3
 8000f92:	2200      	movs	r2, #0
 8000f94:	9201      	str	r2, [sp, #4]
 8000f96:	9300      	str	r3, [sp, #0]
 8000f98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000f9c:	460a      	mov	r2, r1
 8000f9e:	2103      	movs	r1, #3
 8000fa0:	488a      	ldr	r0, [pc, #552]	; (80011cc <DM_DisplayFormattedOutput+0x2e8>)
 8000fa2:	f00c fc25 	bl	800d7f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" GAIN   ....", 3, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fa6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8000faa:	b299      	uxth	r1, r3
 8000fac:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000fb0:	b29b      	uxth	r3, r3
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	9201      	str	r2, [sp, #4]
 8000fb6:	9300      	str	r3, [sp, #0]
 8000fb8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fbc:	460a      	mov	r2, r1
 8000fbe:	2103      	movs	r1, #3
 8000fc0:	4883      	ldr	r0, [pc, #524]	; (80011d0 <DM_DisplayFormattedOutput+0x2ec>)
 8000fc2:	f00c fc15 	bl	800d7f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(" OFFSET ....", 3, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8000fc6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000fca:	b299      	uxth	r1, r3
 8000fcc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8000fd0:	b29b      	uxth	r3, r3
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	9201      	str	r2, [sp, #4]
 8000fd6:	9300      	str	r3, [sp, #0]
 8000fd8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8000fdc:	460a      	mov	r2, r1
 8000fde:	2103      	movs	r1, #3
 8000fe0:	487c      	ldr	r0, [pc, #496]	; (80011d4 <DM_DisplayFormattedOutput+0x2f0>)
 8000fe2:	f00c fc05 	bl	800d7f0 <ILI9341_Draw_Text>

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), " %4.2f   Hz ", SM_GetOutputInHertz());
 8000fe6:	f004 fa05 	bl	80053f4 <SM_GetOutputInHertz>
 8000fea:	ee10 3a10 	vmov	r3, s0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fad2 	bl	8000598 <__aeabi_f2d>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	460c      	mov	r4, r1
 8000ff8:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8000ffc:	e9cd 3400 	strd	r3, r4, [sp]
 8001000:	4a75      	ldr	r2, [pc, #468]	; (80011d8 <DM_DisplayFormattedOutput+0x2f4>)
 8001002:	210f      	movs	r1, #15
 8001004:	f00d ff76 	bl	800eef4 <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001008:	f897 305a 	ldrb.w	r3, [r7, #90]	; 0x5a
 800100c:	b299      	uxth	r1, r3
 800100e:	f897 3059 	ldrb.w	r3, [r7, #89]	; 0x59
 8001012:	b29c      	uxth	r4, r3
 8001014:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001018:	b29b      	uxth	r3, r3
 800101a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800101e:	2200      	movs	r2, #0
 8001020:	9201      	str	r2, [sp, #4]
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001028:	4622      	mov	r2, r4
 800102a:	f00c fbe1 	bl	800d7f0 <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 800102e:	2000      	movs	r0, #0
 8001030:	f004 f9ae 	bl	8005390 <SM_GetOutputChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 800103a:	64bb      	str	r3, [r7, #72]	; 0x48

	if(pTmpVppPreset)
 800103c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800103e:	2b00      	cmp	r3, #0
 8001040:	d016      	beq.n	8001070 <DM_DisplayFormattedOutput+0x18c>
	{
		snprintf(out_vpp, sizeof(out_vpp), " %2.2f   V ", pTmpVppPreset->amp_value);
 8001042:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff faa6 	bl	8000598 <__aeabi_f2d>
 800104c:	4603      	mov	r3, r0
 800104e:	460c      	mov	r4, r1
 8001050:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001054:	e9cd 3400 	strd	r3, r4, [sp]
 8001058:	4a60      	ldr	r2, [pc, #384]	; (80011dc <DM_DisplayFormattedOutput+0x2f8>)
 800105a:	2112      	movs	r1, #18
 800105c:	f00d ff4a 	bl	800eef4 <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels)-4, " %s ", pTmpVppPreset->gain_decibels);
 8001060:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001062:	68db      	ldr	r3, [r3, #12]
 8001064:	f107 0014 	add.w	r0, r7, #20
 8001068:	4a5d      	ldr	r2, [pc, #372]	; (80011e0 <DM_DisplayFormattedOutput+0x2fc>)
 800106a:	2109      	movs	r1, #9
 800106c:	f00d ff42 	bl	800eef4 <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001070:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8001074:	b299      	uxth	r1, r3
 8001076:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800107a:	b29c      	uxth	r4, r3
 800107c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001080:	b29b      	uxth	r3, r3
 8001082:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001086:	2200      	movs	r2, #0
 8001088:	9201      	str	r2, [sp, #4]
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001090:	4622      	mov	r2, r4
 8001092:	f00c fbad 	bl	800d7f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001096:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800109a:	b299      	uxth	r1, r3
 800109c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80010a0:	b29c      	uxth	r4, r3
 80010a2:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	f107 0014 	add.w	r0, r7, #20
 80010ac:	2200      	movs	r2, #0
 80010ae:	9201      	str	r2, [sp, #4]
 80010b0:	9300      	str	r3, [sp, #0]
 80010b2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010b6:	4622      	mov	r2, r4
 80010b8:	f00c fb9a 	bl	800d7f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("dBmV", out_decibels_x + 128, out_decibels_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 80010bc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	3380      	adds	r3, #128	; 0x80
 80010c4:	b299      	uxth	r1, r3
 80010c6:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 80010ca:	b298      	uxth	r0, r3
 80010cc:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	2200      	movs	r2, #0
 80010d4:	9201      	str	r2, [sp, #4]
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80010dc:	4602      	mov	r2, r0
 80010de:	4841      	ldr	r0, [pc, #260]	; (80011e4 <DM_DisplayFormattedOutput+0x300>)
 80010e0:	f00c fb86 	bl	800d7f0 <ILI9341_Draw_Text>


	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 80010e4:	f003 fc1e 	bl	8004924 <BO_GetOutputBias>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d103      	bne.n	80010f6 <DM_DisplayFormattedOutput+0x212>
 80010ee:	f04f 0300 	mov.w	r3, #0
 80010f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80010f4:	e00b      	b.n	800110e <DM_DisplayFormattedOutput+0x22a>
 80010f6:	f003 fc15 	bl	8004924 <BO_GetOutputBias>
 80010fa:	ee07 0a90 	vmov	s15, r0
 80010fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001102:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8001106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800110a:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c

	snprintf(out_dcvolts, sizeof(out_dcvolts), "  %1.4f v ", dc_volts);
 800110e:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8001110:	f7ff fa42 	bl	8000598 <__aeabi_f2d>
 8001114:	4603      	mov	r3, r0
 8001116:	460c      	mov	r4, r1
 8001118:	f107 0008 	add.w	r0, r7, #8
 800111c:	e9cd 3400 	strd	r3, r4, [sp]
 8001120:	4a31      	ldr	r2, [pc, #196]	; (80011e8 <DM_DisplayFormattedOutput+0x304>)
 8001122:	210c      	movs	r1, #12
 8001124:	f00d fee6 	bl	800eef4 <sniprintf>
	if(BO_GetBiasPolarity())
 8001128:	f003 fb9c 	bl	8004864 <BO_GetBiasPolarity>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d022      	beq.n	8001178 <DM_DisplayFormattedOutput+0x294>
	{
		char symbol[3] = "+\0";
 8001132:	4a2e      	ldr	r2, [pc, #184]	; (80011ec <DM_DisplayFormattedOutput+0x308>)
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	6812      	ldr	r2, [r2, #0]
 8001138:	4611      	mov	r1, r2
 800113a:	8019      	strh	r1, [r3, #0]
 800113c:	3302      	adds	r3, #2
 800113e:	0c12      	lsrs	r2, r2, #16
 8001140:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001142:	f107 0208 	add.w	r2, r7, #8
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	4611      	mov	r1, r2
 800114a:	4618      	mov	r0, r3
 800114c:	f00d ff06 	bl	800ef5c <strcat>
 8001150:	4604      	mov	r4, r0
 8001152:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8001156:	b299      	uxth	r1, r3
 8001158:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 800115c:	b298      	uxth	r0, r3
 800115e:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 8001162:	b29b      	uxth	r3, r3
 8001164:	2200      	movs	r2, #0
 8001166:	9201      	str	r2, [sp, #4]
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800116e:	4602      	mov	r2, r0
 8001170:	4620      	mov	r0, r4
 8001172:	f00c fb3d 	bl	800d7f0 <ILI9341_Draw_Text>
	{
		char symbol[3] = "-\0";
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
	}

}
 8001176:	e021      	b.n	80011bc <DM_DisplayFormattedOutput+0x2d8>
		char symbol[3] = "-\0";
 8001178:	4a1d      	ldr	r2, [pc, #116]	; (80011f0 <DM_DisplayFormattedOutput+0x30c>)
 800117a:	463b      	mov	r3, r7
 800117c:	6812      	ldr	r2, [r2, #0]
 800117e:	4611      	mov	r1, r2
 8001180:	8019      	strh	r1, [r3, #0]
 8001182:	3302      	adds	r3, #2
 8001184:	0c12      	lsrs	r2, r2, #16
 8001186:	701a      	strb	r2, [r3, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, NORMAL_TEXT_FGCOLOUR, text_size, NORMAL_TEXT_BGCOLOUR);
 8001188:	f107 0208 	add.w	r2, r7, #8
 800118c:	463b      	mov	r3, r7
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f00d fee3 	bl	800ef5c <strcat>
 8001196:	4604      	mov	r4, r0
 8001198:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800119c:	b299      	uxth	r1, r3
 800119e:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80011a2:	b298      	uxth	r0, r3
 80011a4:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80011a8:	b29b      	uxth	r3, r3
 80011aa:	2200      	movs	r2, #0
 80011ac:	9201      	str	r2, [sp, #4]
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80011b4:	4602      	mov	r2, r0
 80011b6:	4620      	mov	r0, r4
 80011b8:	f00c fb1a 	bl	800d7f0 <ILI9341_Draw_Text>
}
 80011bc:	bf00      	nop
 80011be:	3764      	adds	r7, #100	; 0x64
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd90      	pop	{r4, r7, pc}
 80011c4:	3a449ba6 	.word	0x3a449ba6
 80011c8:	08011f40 	.word	0x08011f40
 80011cc:	08011f50 	.word	0x08011f50
 80011d0:	08011f60 	.word	0x08011f60
 80011d4:	08011f70 	.word	0x08011f70
 80011d8:	08011f80 	.word	0x08011f80
 80011dc:	08011f90 	.word	0x08011f90
 80011e0:	08011f9c 	.word	0x08011f9c
 80011e4:	08011fa4 	.word	0x08011fa4
 80011e8:	08011fac 	.word	0x08011fac
 80011ec:	08011fb8 	.word	0x08011fb8
 80011f0:	08011fbc 	.word	0x08011fbc

080011f4 <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af04      	add	r7, sp, #16



	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 80011fa:	4820      	ldr	r0, [pc, #128]	; (800127c <DM_RefreshScreen+0x88>)
 80011fc:	f00a ffba 	bl	800c174 <HAL_TIM_Base_Stop_IT>


	ILI9341_Fill_Screen(SCREEN_BGCOLOUR);
 8001200:	2000      	movs	r0, #0
 8001202:	f00c fd75 	bl	800dcf0 <ILI9341_Fill_Screen>
	//ILI9341_FillScreenGradient();


	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	0,
 8001206:	2300      	movs	r3, #0
 8001208:	9302      	str	r3, [sp, #8]
 800120a:	2302      	movs	r3, #2
 800120c:	9301      	str	r3, [sp, #4]
 800120e:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001212:	9300      	str	r3, [sp, #0]
 8001214:	2328      	movs	r3, #40	; 0x28
 8001216:	2250      	movs	r2, #80	; 0x50
 8001218:	21c8      	movs	r1, #200	; 0xc8
 800121a:	2000      	movs	r0, #0
 800121c:	f00c f984 	bl	800d528 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN1_FILL_COLOUR,
													BTN1_BORDER_WEIGHT,
													BTN1_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH,
 8001220:	2300      	movs	r3, #0
 8001222:	9302      	str	r3, [sp, #8]
 8001224:	2302      	movs	r3, #2
 8001226:	9301      	str	r3, [sp, #4]
 8001228:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800122c:	9300      	str	r3, [sp, #0]
 800122e:	2328      	movs	r3, #40	; 0x28
 8001230:	2250      	movs	r2, #80	; 0x50
 8001232:	21c8      	movs	r1, #200	; 0xc8
 8001234:	2050      	movs	r0, #80	; 0x50
 8001236:	f00c f977 	bl	800d528 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN2_FILL_COLOUR,
													BTN2_BORDER_WEIGHT,
													BTN2_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*2,
 800123a:	2300      	movs	r3, #0
 800123c:	9302      	str	r3, [sp, #8]
 800123e:	2302      	movs	r3, #2
 8001240:	9301      	str	r3, [sp, #4]
 8001242:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2328      	movs	r3, #40	; 0x28
 800124a:	2250      	movs	r2, #80	; 0x50
 800124c:	21c8      	movs	r1, #200	; 0xc8
 800124e:	20a0      	movs	r0, #160	; 0xa0
 8001250:	f00c f96a 	bl	800d528 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													BTN3_FILL_COLOUR,
													BTN3_BORDER_WEIGHT,
													BTN3_BORDER_COLOUR);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	BTN_WIDTH*3,
 8001254:	2300      	movs	r3, #0
 8001256:	9302      	str	r3, [sp, #8]
 8001258:	2302      	movs	r3, #2
 800125a:	9301      	str	r3, [sp, #4]
 800125c:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2328      	movs	r3, #40	; 0x28
 8001264:	2250      	movs	r2, #80	; 0x50
 8001266:	21c8      	movs	r1, #200	; 0xc8
 8001268:	20f0      	movs	r0, #240	; 0xf0
 800126a:	f00c f95d 	bl	800d528 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN4_FILL_COLOUR,
													BTN4_BORDER_WEIGHT,
													BTN4_BORDER_COLOUR);

	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 800126e:	4803      	ldr	r0, [pc, #12]	; (800127c <DM_RefreshScreen+0x88>)
 8001270:	f00a ff4a 	bl	800c108 <HAL_TIM_Base_Start_IT>


}
 8001274:	bf00      	nop
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20002294 	.word	0x20002294

08001280 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a04      	ldr	r2, [pc, #16]	; (800129c <DM_SetErrorDebugMsg+0x1c>)
 800128c:	212d      	movs	r1, #45	; 0x2d
 800128e:	4804      	ldr	r0, [pc, #16]	; (80012a0 <DM_SetErrorDebugMsg+0x20>)
 8001290:	f00d fe30 	bl	800eef4 <sniprintf>
}
 8001294:	bf00      	nop
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	0801203c 	.word	0x0801203c
 80012a0:	200019e4 	.word	0x200019e4

080012a4 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	4603      	mov	r3, r0
 80012ac:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	3b01      	subs	r3, #1
 80012b2:	2b03      	cmp	r3, #3
 80012b4:	d816      	bhi.n	80012e4 <FreqMenu_DrawMenu+0x40>
 80012b6:	a201      	add	r2, pc, #4	; (adr r2, 80012bc <FreqMenu_DrawMenu+0x18>)
 80012b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012bc:	080012cd 	.word	0x080012cd
 80012c0:	080012d3 	.word	0x080012d3
 80012c4:	080012d9 	.word	0x080012d9
 80012c8:	080012df 	.word	0x080012df
	{
		case ENABLE_FREQ_MAIN_MENU:
			FreqMenu_DrawMainMenu();
 80012cc:	f000 f810 	bl	80012f0 <FreqMenu_DrawMainMenu>
			break;
 80012d0:	e009      	b.n	80012e6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_PRESET_MENU:
			FreqMenu_DrawPresetMenu();
 80012d2:	f000 f849 	bl	8001368 <FreqMenu_DrawPresetMenu>
			break;
 80012d6:	e006      	b.n	80012e6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
 80012d8:	f001 faf4 	bl	80028c4 <FreqMenu_DrawAdjustMenu>
			break;
 80012dc:	e003      	b.n	80012e6 <FreqMenu_DrawMenu+0x42>
		case ENABLE_FREQ_SWEEP_MENU:
			FreqMenu_DrawSweepMenu();
 80012de:	f001 fb07 	bl	80028f0 <FreqMenu_DrawSweepMenu>
			break;
 80012e2:	e000      	b.n	80012e6 <FreqMenu_DrawMenu+0x42>

		default:
			break;
 80012e4:	bf00      	nop

	}
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop

080012f0 <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("OUT->FREQ", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80012f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	2302      	movs	r3, #2
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2300      	movs	r3, #0
 8001302:	220a      	movs	r2, #10
 8001304:	2105      	movs	r1, #5
 8001306:	4814      	ldr	r0, [pc, #80]	; (8001358 <FreqMenu_DrawMainMenu+0x68>)
 8001308:	f00c fa72 	bl	800d7f0 <ILI9341_Draw_Text>
//	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);

	DM_DisplayFormattedOutput();
 800130c:	f7ff fdea 	bl	8000ee4 <DM_DisplayFormattedOutput>

	// buttons
	ILI9341_Draw_Text("PRESET", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8001310:	f240 23fd 	movw	r3, #765	; 0x2fd
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	2302      	movs	r3, #2
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2300      	movs	r3, #0
 800131c:	22d2      	movs	r2, #210	; 0xd2
 800131e:	2105      	movs	r1, #5
 8001320:	480e      	ldr	r0, [pc, #56]	; (800135c <FreqMenu_DrawMainMenu+0x6c>)
 8001322:	f00c fa65 	bl	800d7f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 87,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8001326:	f241 43a2 	movw	r3, #5282	; 0x14a2
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	2302      	movs	r3, #2
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2300      	movs	r3, #0
 8001332:	22d2      	movs	r2, #210	; 0xd2
 8001334:	2157      	movs	r1, #87	; 0x57
 8001336:	480a      	ldr	r0, [pc, #40]	; (8001360 <FreqMenu_DrawMainMenu+0x70>)
 8001338:	f00c fa5a 	bl	800d7f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP",  174, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 800133c:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001340:	9301      	str	r3, [sp, #4]
 8001342:	2302      	movs	r3, #2
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	2300      	movs	r3, #0
 8001348:	22d2      	movs	r2, #210	; 0xd2
 800134a:	21ae      	movs	r1, #174	; 0xae
 800134c:	4805      	ldr	r0, [pc, #20]	; (8001364 <FreqMenu_DrawMainMenu+0x74>)
 800134e:	f00c fa4f 	bl	800d7f0 <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
}
 8001352:	bf00      	nop
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	08012040 	.word	0x08012040
 800135c:	0801204c 	.word	0x0801204c
 8001360:	08012054 	.word	0x08012054
 8001364:	0801205c 	.word	0x0801205c

08001368 <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b086      	sub	sp, #24
 800136c:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->FREQ->PRESET", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 800136e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001372:	9301      	str	r3, [sp, #4]
 8001374:	2302      	movs	r3, #2
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2300      	movs	r3, #0
 800137a:	220a      	movs	r2, #10
 800137c:	2105      	movs	r1, #5
 800137e:	4886      	ldr	r0, [pc, #536]	; (8001598 <FreqMenu_DrawPresetMenu+0x230>)
 8001380:	f00c fa36 	bl	800d7f0 <ILI9341_Draw_Text>
	uint8_t menu_pos_y1 = 40;
 8001384:	2328      	movs	r3, #40	; 0x28
 8001386:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 60;
 8001388:	233c      	movs	r3, #60	; 0x3c
 800138a:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 80;
 800138c:	2350      	movs	r3, #80	; 0x50
 800138e:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 100;
 8001390:	2364      	movs	r3, #100	; 0x64
 8001392:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 120;
 8001394:	2378      	movs	r3, #120	; 0x78
 8001396:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 140;
 8001398:	238c      	movs	r3, #140	; 0x8c
 800139a:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 160;
 800139c:	23a0      	movs	r3, #160	; 0xa0
 800139e:	727b      	strb	r3, [r7, #9]
	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 80013a0:	f003 fc76 	bl	8004c90 <FreqO_GetFPresetObject>
 80013a4:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f001 825d 	beq.w	8002868 <FreqMenu_DrawPresetMenu+0x1500>
	{
		switch(pFreqPresetTmp->hertz)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80013b6:	4293      	cmp	r3, r2
 80013b8:	f000 849a 	beq.w	8001cf0 <FreqMenu_DrawPresetMenu+0x988>
 80013bc:	f240 22ee 	movw	r2, #750	; 0x2ee
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d817      	bhi.n	80013f4 <FreqMenu_DrawPresetMenu+0x8c>
 80013c4:	2b32      	cmp	r3, #50	; 0x32
 80013c6:	f000 81b3 	beq.w	8001730 <FreqMenu_DrawPresetMenu+0x3c8>
 80013ca:	2b32      	cmp	r3, #50	; 0x32
 80013cc:	d806      	bhi.n	80013dc <FreqMenu_DrawPresetMenu+0x74>
 80013ce:	2b01      	cmp	r3, #1
 80013d0:	d038      	beq.n	8001444 <FreqMenu_DrawPresetMenu+0xdc>
 80013d2:	2b0a      	cmp	r3, #10
 80013d4:	f000 8102 	beq.w	80015dc <FreqMenu_DrawPresetMenu+0x274>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
	}

}
 80013d8:	f001 ba52 	b.w	8002880 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80013dc:	2bfa      	cmp	r3, #250	; 0xfa
 80013de:	f000 8317 	beq.w	8001a10 <FreqMenu_DrawPresetMenu+0x6a8>
 80013e2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013e6:	f000 83d9 	beq.w	8001b9c <FreqMenu_DrawPresetMenu+0x834>
 80013ea:	2b64      	cmp	r3, #100	; 0x64
 80013ec:	f000 8266 	beq.w	80018bc <FreqMenu_DrawPresetMenu+0x554>
}
 80013f0:	f001 ba46 	b.w	8002880 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 80013f4:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80013f8:	4293      	cmp	r3, r2
 80013fa:	f000 8758 	beq.w	80022ae <FreqMenu_DrawPresetMenu+0xf46>
 80013fe:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8001402:	4293      	cmp	r3, r2
 8001404:	d80f      	bhi.n	8001426 <FreqMenu_DrawPresetMenu+0xbe>
 8001406:	f241 3288 	movw	r2, #5000	; 0x1388
 800140a:	4293      	cmp	r3, r2
 800140c:	f000 85e0 	beq.w	8001fd0 <FreqMenu_DrawPresetMenu+0xc68>
 8001410:	f242 7210 	movw	r2, #10000	; 0x2710
 8001414:	4293      	cmp	r3, r2
 8001416:	f000 86a1 	beq.w	800215c <FreqMenu_DrawPresetMenu+0xdf4>
 800141a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800141e:	f000 852d 	beq.w	8001e7c <FreqMenu_DrawPresetMenu+0xb14>
}
 8001422:	f001 ba2d 	b.w	8002880 <FreqMenu_DrawPresetMenu+0x1518>
		switch(pFreqPresetTmp->hertz)
 8001426:	4a5d      	ldr	r2, [pc, #372]	; (800159c <FreqMenu_DrawPresetMenu+0x234>)
 8001428:	4293      	cmp	r3, r2
 800142a:	f001 80ae 	beq.w	800258a <FreqMenu_DrawPresetMenu+0x1222>
 800142e:	4a5c      	ldr	r2, [pc, #368]	; (80015a0 <FreqMenu_DrawPresetMenu+0x238>)
 8001430:	4293      	cmp	r3, r2
 8001432:	f001 816f 	beq.w	8002714 <FreqMenu_DrawPresetMenu+0x13ac>
 8001436:	f24c 3250 	movw	r2, #50000	; 0xc350
 800143a:	4293      	cmp	r3, r2
 800143c:	f000 87fc 	beq.w	8002438 <FreqMenu_DrawPresetMenu+0x10d0>
}
 8001440:	f001 ba1e 	b.w	8002880 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	b29a      	uxth	r2, r3
 8001448:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800144c:	9301      	str	r3, [sp, #4]
 800144e:	2302      	movs	r3, #2
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2300      	movs	r3, #0
 8001454:	2105      	movs	r1, #5
 8001456:	4853      	ldr	r0, [pc, #332]	; (80015a4 <FreqMenu_DrawPresetMenu+0x23c>)
 8001458:	f00c f9ca 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800145c:	7bbb      	ldrb	r3, [r7, #14]
 800145e:	b29a      	uxth	r2, r3
 8001460:	2300      	movs	r3, #0
 8001462:	9301      	str	r3, [sp, #4]
 8001464:	2302      	movs	r3, #2
 8001466:	9300      	str	r3, [sp, #0]
 8001468:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800146c:	2105      	movs	r1, #5
 800146e:	484e      	ldr	r0, [pc, #312]	; (80015a8 <FreqMenu_DrawPresetMenu+0x240>)
 8001470:	f00c f9be 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001474:	7b7b      	ldrb	r3, [r7, #13]
 8001476:	b29a      	uxth	r2, r3
 8001478:	2300      	movs	r3, #0
 800147a:	9301      	str	r3, [sp, #4]
 800147c:	2302      	movs	r3, #2
 800147e:	9300      	str	r3, [sp, #0]
 8001480:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001484:	2105      	movs	r1, #5
 8001486:	4849      	ldr	r0, [pc, #292]	; (80015ac <FreqMenu_DrawPresetMenu+0x244>)
 8001488:	f00c f9b2 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800148c:	7b3b      	ldrb	r3, [r7, #12]
 800148e:	b29a      	uxth	r2, r3
 8001490:	2300      	movs	r3, #0
 8001492:	9301      	str	r3, [sp, #4]
 8001494:	2302      	movs	r3, #2
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800149c:	2105      	movs	r1, #5
 800149e:	4844      	ldr	r0, [pc, #272]	; (80015b0 <FreqMenu_DrawPresetMenu+0x248>)
 80014a0:	f00c f9a6 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80014a4:	7afb      	ldrb	r3, [r7, #11]
 80014a6:	b29a      	uxth	r2, r3
 80014a8:	2300      	movs	r3, #0
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	2302      	movs	r3, #2
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80014b4:	2105      	movs	r1, #5
 80014b6:	483f      	ldr	r0, [pc, #252]	; (80015b4 <FreqMenu_DrawPresetMenu+0x24c>)
 80014b8:	f00c f99a 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80014bc:	7abb      	ldrb	r3, [r7, #10]
 80014be:	b29a      	uxth	r2, r3
 80014c0:	2300      	movs	r3, #0
 80014c2:	9301      	str	r3, [sp, #4]
 80014c4:	2302      	movs	r3, #2
 80014c6:	9300      	str	r3, [sp, #0]
 80014c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80014cc:	2105      	movs	r1, #5
 80014ce:	483a      	ldr	r0, [pc, #232]	; (80015b8 <FreqMenu_DrawPresetMenu+0x250>)
 80014d0:	f00c f98e 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80014d4:	7a7b      	ldrb	r3, [r7, #9]
 80014d6:	b29a      	uxth	r2, r3
 80014d8:	2300      	movs	r3, #0
 80014da:	9301      	str	r3, [sp, #4]
 80014dc:	2302      	movs	r3, #2
 80014de:	9300      	str	r3, [sp, #0]
 80014e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80014e4:	2105      	movs	r1, #5
 80014e6:	4835      	ldr	r0, [pc, #212]	; (80015bc <FreqMenu_DrawPresetMenu+0x254>)
 80014e8:	f00c f982 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	b29a      	uxth	r2, r3
 80014f0:	2300      	movs	r3, #0
 80014f2:	9301      	str	r3, [sp, #4]
 80014f4:	2302      	movs	r3, #2
 80014f6:	9300      	str	r3, [sp, #0]
 80014f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80014fc:	2178      	movs	r1, #120	; 0x78
 80014fe:	4830      	ldr	r0, [pc, #192]	; (80015c0 <FreqMenu_DrawPresetMenu+0x258>)
 8001500:	f00c f976 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001504:	7bbb      	ldrb	r3, [r7, #14]
 8001506:	b29a      	uxth	r2, r3
 8001508:	2300      	movs	r3, #0
 800150a:	9301      	str	r3, [sp, #4]
 800150c:	2302      	movs	r3, #2
 800150e:	9300      	str	r3, [sp, #0]
 8001510:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001514:	2178      	movs	r1, #120	; 0x78
 8001516:	482b      	ldr	r0, [pc, #172]	; (80015c4 <FreqMenu_DrawPresetMenu+0x25c>)
 8001518:	f00c f96a 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800151c:	7b7b      	ldrb	r3, [r7, #13]
 800151e:	b29a      	uxth	r2, r3
 8001520:	2300      	movs	r3, #0
 8001522:	9301      	str	r3, [sp, #4]
 8001524:	2302      	movs	r3, #2
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800152c:	2178      	movs	r1, #120	; 0x78
 800152e:	4826      	ldr	r0, [pc, #152]	; (80015c8 <FreqMenu_DrawPresetMenu+0x260>)
 8001530:	f00c f95e 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001534:	7b3b      	ldrb	r3, [r7, #12]
 8001536:	b29a      	uxth	r2, r3
 8001538:	2300      	movs	r3, #0
 800153a:	9301      	str	r3, [sp, #4]
 800153c:	2302      	movs	r3, #2
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001544:	2178      	movs	r1, #120	; 0x78
 8001546:	4821      	ldr	r0, [pc, #132]	; (80015cc <FreqMenu_DrawPresetMenu+0x264>)
 8001548:	f00c f952 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800154c:	7afb      	ldrb	r3, [r7, #11]
 800154e:	b29a      	uxth	r2, r3
 8001550:	2300      	movs	r3, #0
 8001552:	9301      	str	r3, [sp, #4]
 8001554:	2302      	movs	r3, #2
 8001556:	9300      	str	r3, [sp, #0]
 8001558:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800155c:	2178      	movs	r1, #120	; 0x78
 800155e:	481c      	ldr	r0, [pc, #112]	; (80015d0 <FreqMenu_DrawPresetMenu+0x268>)
 8001560:	f00c f946 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001564:	7abb      	ldrb	r3, [r7, #10]
 8001566:	b29a      	uxth	r2, r3
 8001568:	2300      	movs	r3, #0
 800156a:	9301      	str	r3, [sp, #4]
 800156c:	2302      	movs	r3, #2
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001574:	2178      	movs	r1, #120	; 0x78
 8001576:	4817      	ldr	r0, [pc, #92]	; (80015d4 <FreqMenu_DrawPresetMenu+0x26c>)
 8001578:	f00c f93a 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800157c:	7a7b      	ldrb	r3, [r7, #9]
 800157e:	b29a      	uxth	r2, r3
 8001580:	2300      	movs	r3, #0
 8001582:	9301      	str	r3, [sp, #4]
 8001584:	2302      	movs	r3, #2
 8001586:	9300      	str	r3, [sp, #0]
 8001588:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800158c:	2178      	movs	r1, #120	; 0x78
 800158e:	4812      	ldr	r0, [pc, #72]	; (80015d8 <FreqMenu_DrawPresetMenu+0x270>)
 8001590:	f00c f92e 	bl	800d7f0 <ILI9341_Draw_Text>
				break;
 8001594:	f001 b974 	b.w	8002880 <FreqMenu_DrawPresetMenu+0x1518>
 8001598:	08012064 	.word	0x08012064
 800159c:	000124f8 	.word	0x000124f8
 80015a0:	000186a0 	.word	0x000186a0
 80015a4:	08012078 	.word	0x08012078
 80015a8:	08012080 	.word	0x08012080
 80015ac:	08012088 	.word	0x08012088
 80015b0:	08012090 	.word	0x08012090
 80015b4:	08012098 	.word	0x08012098
 80015b8:	080120a0 	.word	0x080120a0
 80015bc:	080120a8 	.word	0x080120a8
 80015c0:	080120b0 	.word	0x080120b0
 80015c4:	080120b8 	.word	0x080120b8
 80015c8:	080120c0 	.word	0x080120c0
 80015cc:	080120c8 	.word	0x080120c8
 80015d0:	080120d0 	.word	0x080120d0
 80015d4:	080120d8 	.word	0x080120d8
 80015d8:	080120e0 	.word	0x080120e0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
 80015de:	b29a      	uxth	r2, r3
 80015e0:	2300      	movs	r3, #0
 80015e2:	9301      	str	r3, [sp, #4]
 80015e4:	2302      	movs	r3, #2
 80015e6:	9300      	str	r3, [sp, #0]
 80015e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80015ec:	2105      	movs	r1, #5
 80015ee:	48a5      	ldr	r0, [pc, #660]	; (8001884 <FreqMenu_DrawPresetMenu+0x51c>)
 80015f0:	f00c f8fe 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80015f4:	7bbb      	ldrb	r3, [r7, #14]
 80015f6:	b29a      	uxth	r2, r3
 80015f8:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80015fc:	9301      	str	r3, [sp, #4]
 80015fe:	2302      	movs	r3, #2
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	2300      	movs	r3, #0
 8001604:	2105      	movs	r1, #5
 8001606:	48a0      	ldr	r0, [pc, #640]	; (8001888 <FreqMenu_DrawPresetMenu+0x520>)
 8001608:	f00c f8f2 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800160c:	7b7b      	ldrb	r3, [r7, #13]
 800160e:	b29a      	uxth	r2, r3
 8001610:	2300      	movs	r3, #0
 8001612:	9301      	str	r3, [sp, #4]
 8001614:	2302      	movs	r3, #2
 8001616:	9300      	str	r3, [sp, #0]
 8001618:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800161c:	2105      	movs	r1, #5
 800161e:	489b      	ldr	r0, [pc, #620]	; (800188c <FreqMenu_DrawPresetMenu+0x524>)
 8001620:	f00c f8e6 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001624:	7b3b      	ldrb	r3, [r7, #12]
 8001626:	b29a      	uxth	r2, r3
 8001628:	2300      	movs	r3, #0
 800162a:	9301      	str	r3, [sp, #4]
 800162c:	2302      	movs	r3, #2
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001634:	2105      	movs	r1, #5
 8001636:	4896      	ldr	r0, [pc, #600]	; (8001890 <FreqMenu_DrawPresetMenu+0x528>)
 8001638:	f00c f8da 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800163c:	7afb      	ldrb	r3, [r7, #11]
 800163e:	b29a      	uxth	r2, r3
 8001640:	2300      	movs	r3, #0
 8001642:	9301      	str	r3, [sp, #4]
 8001644:	2302      	movs	r3, #2
 8001646:	9300      	str	r3, [sp, #0]
 8001648:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800164c:	2105      	movs	r1, #5
 800164e:	4891      	ldr	r0, [pc, #580]	; (8001894 <FreqMenu_DrawPresetMenu+0x52c>)
 8001650:	f00c f8ce 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001654:	7abb      	ldrb	r3, [r7, #10]
 8001656:	b29a      	uxth	r2, r3
 8001658:	2300      	movs	r3, #0
 800165a:	9301      	str	r3, [sp, #4]
 800165c:	2302      	movs	r3, #2
 800165e:	9300      	str	r3, [sp, #0]
 8001660:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001664:	2105      	movs	r1, #5
 8001666:	488c      	ldr	r0, [pc, #560]	; (8001898 <FreqMenu_DrawPresetMenu+0x530>)
 8001668:	f00c f8c2 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800166c:	7a7b      	ldrb	r3, [r7, #9]
 800166e:	b29a      	uxth	r2, r3
 8001670:	2300      	movs	r3, #0
 8001672:	9301      	str	r3, [sp, #4]
 8001674:	2302      	movs	r3, #2
 8001676:	9300      	str	r3, [sp, #0]
 8001678:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800167c:	2105      	movs	r1, #5
 800167e:	4887      	ldr	r0, [pc, #540]	; (800189c <FreqMenu_DrawPresetMenu+0x534>)
 8001680:	f00c f8b6 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001684:	7bfb      	ldrb	r3, [r7, #15]
 8001686:	b29a      	uxth	r2, r3
 8001688:	2300      	movs	r3, #0
 800168a:	9301      	str	r3, [sp, #4]
 800168c:	2302      	movs	r3, #2
 800168e:	9300      	str	r3, [sp, #0]
 8001690:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001694:	2178      	movs	r1, #120	; 0x78
 8001696:	4882      	ldr	r0, [pc, #520]	; (80018a0 <FreqMenu_DrawPresetMenu+0x538>)
 8001698:	f00c f8aa 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800169c:	7bbb      	ldrb	r3, [r7, #14]
 800169e:	b29a      	uxth	r2, r3
 80016a0:	2300      	movs	r3, #0
 80016a2:	9301      	str	r3, [sp, #4]
 80016a4:	2302      	movs	r3, #2
 80016a6:	9300      	str	r3, [sp, #0]
 80016a8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80016ac:	2178      	movs	r1, #120	; 0x78
 80016ae:	487d      	ldr	r0, [pc, #500]	; (80018a4 <FreqMenu_DrawPresetMenu+0x53c>)
 80016b0:	f00c f89e 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80016b4:	7b7b      	ldrb	r3, [r7, #13]
 80016b6:	b29a      	uxth	r2, r3
 80016b8:	2300      	movs	r3, #0
 80016ba:	9301      	str	r3, [sp, #4]
 80016bc:	2302      	movs	r3, #2
 80016be:	9300      	str	r3, [sp, #0]
 80016c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80016c4:	2178      	movs	r1, #120	; 0x78
 80016c6:	4878      	ldr	r0, [pc, #480]	; (80018a8 <FreqMenu_DrawPresetMenu+0x540>)
 80016c8:	f00c f892 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80016cc:	7b3b      	ldrb	r3, [r7, #12]
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	2300      	movs	r3, #0
 80016d2:	9301      	str	r3, [sp, #4]
 80016d4:	2302      	movs	r3, #2
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80016dc:	2178      	movs	r1, #120	; 0x78
 80016de:	4873      	ldr	r0, [pc, #460]	; (80018ac <FreqMenu_DrawPresetMenu+0x544>)
 80016e0:	f00c f886 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80016e4:	7afb      	ldrb	r3, [r7, #11]
 80016e6:	b29a      	uxth	r2, r3
 80016e8:	2300      	movs	r3, #0
 80016ea:	9301      	str	r3, [sp, #4]
 80016ec:	2302      	movs	r3, #2
 80016ee:	9300      	str	r3, [sp, #0]
 80016f0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80016f4:	2178      	movs	r1, #120	; 0x78
 80016f6:	486e      	ldr	r0, [pc, #440]	; (80018b0 <FreqMenu_DrawPresetMenu+0x548>)
 80016f8:	f00c f87a 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80016fc:	7abb      	ldrb	r3, [r7, #10]
 80016fe:	b29a      	uxth	r2, r3
 8001700:	2300      	movs	r3, #0
 8001702:	9301      	str	r3, [sp, #4]
 8001704:	2302      	movs	r3, #2
 8001706:	9300      	str	r3, [sp, #0]
 8001708:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800170c:	2178      	movs	r1, #120	; 0x78
 800170e:	4869      	ldr	r0, [pc, #420]	; (80018b4 <FreqMenu_DrawPresetMenu+0x54c>)
 8001710:	f00c f86e 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001714:	7a7b      	ldrb	r3, [r7, #9]
 8001716:	b29a      	uxth	r2, r3
 8001718:	2300      	movs	r3, #0
 800171a:	9301      	str	r3, [sp, #4]
 800171c:	2302      	movs	r3, #2
 800171e:	9300      	str	r3, [sp, #0]
 8001720:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001724:	2178      	movs	r1, #120	; 0x78
 8001726:	4864      	ldr	r0, [pc, #400]	; (80018b8 <FreqMenu_DrawPresetMenu+0x550>)
 8001728:	f00c f862 	bl	800d7f0 <ILI9341_Draw_Text>
				break;
 800172c:	f001 b8a8 	b.w	8002880 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	b29a      	uxth	r2, r3
 8001734:	2300      	movs	r3, #0
 8001736:	9301      	str	r3, [sp, #4]
 8001738:	2302      	movs	r3, #2
 800173a:	9300      	str	r3, [sp, #0]
 800173c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001740:	2105      	movs	r1, #5
 8001742:	4850      	ldr	r0, [pc, #320]	; (8001884 <FreqMenu_DrawPresetMenu+0x51c>)
 8001744:	f00c f854 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001748:	7bbb      	ldrb	r3, [r7, #14]
 800174a:	b29a      	uxth	r2, r3
 800174c:	2300      	movs	r3, #0
 800174e:	9301      	str	r3, [sp, #4]
 8001750:	2302      	movs	r3, #2
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001758:	2105      	movs	r1, #5
 800175a:	484b      	ldr	r0, [pc, #300]	; (8001888 <FreqMenu_DrawPresetMenu+0x520>)
 800175c:	f00c f848 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001760:	7b7b      	ldrb	r3, [r7, #13]
 8001762:	b29a      	uxth	r2, r3
 8001764:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001768:	9301      	str	r3, [sp, #4]
 800176a:	2302      	movs	r3, #2
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	2300      	movs	r3, #0
 8001770:	2105      	movs	r1, #5
 8001772:	4846      	ldr	r0, [pc, #280]	; (800188c <FreqMenu_DrawPresetMenu+0x524>)
 8001774:	f00c f83c 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001778:	7b3b      	ldrb	r3, [r7, #12]
 800177a:	b29a      	uxth	r2, r3
 800177c:	2300      	movs	r3, #0
 800177e:	9301      	str	r3, [sp, #4]
 8001780:	2302      	movs	r3, #2
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001788:	2105      	movs	r1, #5
 800178a:	4841      	ldr	r0, [pc, #260]	; (8001890 <FreqMenu_DrawPresetMenu+0x528>)
 800178c:	f00c f830 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001790:	7afb      	ldrb	r3, [r7, #11]
 8001792:	b29a      	uxth	r2, r3
 8001794:	2300      	movs	r3, #0
 8001796:	9301      	str	r3, [sp, #4]
 8001798:	2302      	movs	r3, #2
 800179a:	9300      	str	r3, [sp, #0]
 800179c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017a0:	2105      	movs	r1, #5
 80017a2:	483c      	ldr	r0, [pc, #240]	; (8001894 <FreqMenu_DrawPresetMenu+0x52c>)
 80017a4:	f00c f824 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017a8:	7abb      	ldrb	r3, [r7, #10]
 80017aa:	b29a      	uxth	r2, r3
 80017ac:	2300      	movs	r3, #0
 80017ae:	9301      	str	r3, [sp, #4]
 80017b0:	2302      	movs	r3, #2
 80017b2:	9300      	str	r3, [sp, #0]
 80017b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017b8:	2105      	movs	r1, #5
 80017ba:	4837      	ldr	r0, [pc, #220]	; (8001898 <FreqMenu_DrawPresetMenu+0x530>)
 80017bc:	f00c f818 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017c0:	7a7b      	ldrb	r3, [r7, #9]
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	2300      	movs	r3, #0
 80017c6:	9301      	str	r3, [sp, #4]
 80017c8:	2302      	movs	r3, #2
 80017ca:	9300      	str	r3, [sp, #0]
 80017cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017d0:	2105      	movs	r1, #5
 80017d2:	4832      	ldr	r0, [pc, #200]	; (800189c <FreqMenu_DrawPresetMenu+0x534>)
 80017d4:	f00c f80c 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	b29a      	uxth	r2, r3
 80017dc:	2300      	movs	r3, #0
 80017de:	9301      	str	r3, [sp, #4]
 80017e0:	2302      	movs	r3, #2
 80017e2:	9300      	str	r3, [sp, #0]
 80017e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80017e8:	2178      	movs	r1, #120	; 0x78
 80017ea:	482d      	ldr	r0, [pc, #180]	; (80018a0 <FreqMenu_DrawPresetMenu+0x538>)
 80017ec:	f00c f800 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80017f0:	7bbb      	ldrb	r3, [r7, #14]
 80017f2:	b29a      	uxth	r2, r3
 80017f4:	2300      	movs	r3, #0
 80017f6:	9301      	str	r3, [sp, #4]
 80017f8:	2302      	movs	r3, #2
 80017fa:	9300      	str	r3, [sp, #0]
 80017fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001800:	2178      	movs	r1, #120	; 0x78
 8001802:	4828      	ldr	r0, [pc, #160]	; (80018a4 <FreqMenu_DrawPresetMenu+0x53c>)
 8001804:	f00b fff4 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001808:	7b7b      	ldrb	r3, [r7, #13]
 800180a:	b29a      	uxth	r2, r3
 800180c:	2300      	movs	r3, #0
 800180e:	9301      	str	r3, [sp, #4]
 8001810:	2302      	movs	r3, #2
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001818:	2178      	movs	r1, #120	; 0x78
 800181a:	4823      	ldr	r0, [pc, #140]	; (80018a8 <FreqMenu_DrawPresetMenu+0x540>)
 800181c:	f00b ffe8 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001820:	7b3b      	ldrb	r3, [r7, #12]
 8001822:	b29a      	uxth	r2, r3
 8001824:	2300      	movs	r3, #0
 8001826:	9301      	str	r3, [sp, #4]
 8001828:	2302      	movs	r3, #2
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001830:	2178      	movs	r1, #120	; 0x78
 8001832:	481e      	ldr	r0, [pc, #120]	; (80018ac <FreqMenu_DrawPresetMenu+0x544>)
 8001834:	f00b ffdc 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001838:	7afb      	ldrb	r3, [r7, #11]
 800183a:	b29a      	uxth	r2, r3
 800183c:	2300      	movs	r3, #0
 800183e:	9301      	str	r3, [sp, #4]
 8001840:	2302      	movs	r3, #2
 8001842:	9300      	str	r3, [sp, #0]
 8001844:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001848:	2178      	movs	r1, #120	; 0x78
 800184a:	4819      	ldr	r0, [pc, #100]	; (80018b0 <FreqMenu_DrawPresetMenu+0x548>)
 800184c:	f00b ffd0 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001850:	7abb      	ldrb	r3, [r7, #10]
 8001852:	b29a      	uxth	r2, r3
 8001854:	2300      	movs	r3, #0
 8001856:	9301      	str	r3, [sp, #4]
 8001858:	2302      	movs	r3, #2
 800185a:	9300      	str	r3, [sp, #0]
 800185c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001860:	2178      	movs	r1, #120	; 0x78
 8001862:	4814      	ldr	r0, [pc, #80]	; (80018b4 <FreqMenu_DrawPresetMenu+0x54c>)
 8001864:	f00b ffc4 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001868:	7a7b      	ldrb	r3, [r7, #9]
 800186a:	b29a      	uxth	r2, r3
 800186c:	2300      	movs	r3, #0
 800186e:	9301      	str	r3, [sp, #4]
 8001870:	2302      	movs	r3, #2
 8001872:	9300      	str	r3, [sp, #0]
 8001874:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001878:	2178      	movs	r1, #120	; 0x78
 800187a:	480f      	ldr	r0, [pc, #60]	; (80018b8 <FreqMenu_DrawPresetMenu+0x550>)
 800187c:	f00b ffb8 	bl	800d7f0 <ILI9341_Draw_Text>
				break;
 8001880:	f000 bffe 	b.w	8002880 <FreqMenu_DrawPresetMenu+0x1518>
 8001884:	08012078 	.word	0x08012078
 8001888:	08012080 	.word	0x08012080
 800188c:	08012088 	.word	0x08012088
 8001890:	08012090 	.word	0x08012090
 8001894:	08012098 	.word	0x08012098
 8001898:	080120a0 	.word	0x080120a0
 800189c:	080120a8 	.word	0x080120a8
 80018a0:	080120b0 	.word	0x080120b0
 80018a4:	080120b8 	.word	0x080120b8
 80018a8:	080120c0 	.word	0x080120c0
 80018ac:	080120c8 	.word	0x080120c8
 80018b0:	080120d0 	.word	0x080120d0
 80018b4:	080120d8 	.word	0x080120d8
 80018b8:	080120e0 	.word	0x080120e0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018bc:	7bfb      	ldrb	r3, [r7, #15]
 80018be:	b29a      	uxth	r2, r3
 80018c0:	2300      	movs	r3, #0
 80018c2:	9301      	str	r3, [sp, #4]
 80018c4:	2302      	movs	r3, #2
 80018c6:	9300      	str	r3, [sp, #0]
 80018c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018cc:	2105      	movs	r1, #5
 80018ce:	48a5      	ldr	r0, [pc, #660]	; (8001b64 <FreqMenu_DrawPresetMenu+0x7fc>)
 80018d0:	f00b ff8e 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018d4:	7bbb      	ldrb	r3, [r7, #14]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	2300      	movs	r3, #0
 80018da:	9301      	str	r3, [sp, #4]
 80018dc:	2302      	movs	r3, #2
 80018de:	9300      	str	r3, [sp, #0]
 80018e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018e4:	2105      	movs	r1, #5
 80018e6:	48a0      	ldr	r0, [pc, #640]	; (8001b68 <FreqMenu_DrawPresetMenu+0x800>)
 80018e8:	f00b ff82 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80018ec:	7b7b      	ldrb	r3, [r7, #13]
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	2300      	movs	r3, #0
 80018f2:	9301      	str	r3, [sp, #4]
 80018f4:	2302      	movs	r3, #2
 80018f6:	9300      	str	r3, [sp, #0]
 80018f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80018fc:	2105      	movs	r1, #5
 80018fe:	489b      	ldr	r0, [pc, #620]	; (8001b6c <FreqMenu_DrawPresetMenu+0x804>)
 8001900:	f00b ff76 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001904:	7b3b      	ldrb	r3, [r7, #12]
 8001906:	b29a      	uxth	r2, r3
 8001908:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800190c:	9301      	str	r3, [sp, #4]
 800190e:	2302      	movs	r3, #2
 8001910:	9300      	str	r3, [sp, #0]
 8001912:	2300      	movs	r3, #0
 8001914:	2105      	movs	r1, #5
 8001916:	4896      	ldr	r0, [pc, #600]	; (8001b70 <FreqMenu_DrawPresetMenu+0x808>)
 8001918:	f00b ff6a 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800191c:	7afb      	ldrb	r3, [r7, #11]
 800191e:	b29a      	uxth	r2, r3
 8001920:	2300      	movs	r3, #0
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	2302      	movs	r3, #2
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800192c:	2105      	movs	r1, #5
 800192e:	4891      	ldr	r0, [pc, #580]	; (8001b74 <FreqMenu_DrawPresetMenu+0x80c>)
 8001930:	f00b ff5e 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001934:	7abb      	ldrb	r3, [r7, #10]
 8001936:	b29a      	uxth	r2, r3
 8001938:	2300      	movs	r3, #0
 800193a:	9301      	str	r3, [sp, #4]
 800193c:	2302      	movs	r3, #2
 800193e:	9300      	str	r3, [sp, #0]
 8001940:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001944:	2105      	movs	r1, #5
 8001946:	488c      	ldr	r0, [pc, #560]	; (8001b78 <FreqMenu_DrawPresetMenu+0x810>)
 8001948:	f00b ff52 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800194c:	7a7b      	ldrb	r3, [r7, #9]
 800194e:	b29a      	uxth	r2, r3
 8001950:	2300      	movs	r3, #0
 8001952:	9301      	str	r3, [sp, #4]
 8001954:	2302      	movs	r3, #2
 8001956:	9300      	str	r3, [sp, #0]
 8001958:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800195c:	2105      	movs	r1, #5
 800195e:	4887      	ldr	r0, [pc, #540]	; (8001b7c <FreqMenu_DrawPresetMenu+0x814>)
 8001960:	f00b ff46 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001964:	7bfb      	ldrb	r3, [r7, #15]
 8001966:	b29a      	uxth	r2, r3
 8001968:	2300      	movs	r3, #0
 800196a:	9301      	str	r3, [sp, #4]
 800196c:	2302      	movs	r3, #2
 800196e:	9300      	str	r3, [sp, #0]
 8001970:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001974:	2178      	movs	r1, #120	; 0x78
 8001976:	4882      	ldr	r0, [pc, #520]	; (8001b80 <FreqMenu_DrawPresetMenu+0x818>)
 8001978:	f00b ff3a 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800197c:	7bbb      	ldrb	r3, [r7, #14]
 800197e:	b29a      	uxth	r2, r3
 8001980:	2300      	movs	r3, #0
 8001982:	9301      	str	r3, [sp, #4]
 8001984:	2302      	movs	r3, #2
 8001986:	9300      	str	r3, [sp, #0]
 8001988:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800198c:	2178      	movs	r1, #120	; 0x78
 800198e:	487d      	ldr	r0, [pc, #500]	; (8001b84 <FreqMenu_DrawPresetMenu+0x81c>)
 8001990:	f00b ff2e 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001994:	7b7b      	ldrb	r3, [r7, #13]
 8001996:	b29a      	uxth	r2, r3
 8001998:	2300      	movs	r3, #0
 800199a:	9301      	str	r3, [sp, #4]
 800199c:	2302      	movs	r3, #2
 800199e:	9300      	str	r3, [sp, #0]
 80019a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019a4:	2178      	movs	r1, #120	; 0x78
 80019a6:	4878      	ldr	r0, [pc, #480]	; (8001b88 <FreqMenu_DrawPresetMenu+0x820>)
 80019a8:	f00b ff22 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019ac:	7b3b      	ldrb	r3, [r7, #12]
 80019ae:	b29a      	uxth	r2, r3
 80019b0:	2300      	movs	r3, #0
 80019b2:	9301      	str	r3, [sp, #4]
 80019b4:	2302      	movs	r3, #2
 80019b6:	9300      	str	r3, [sp, #0]
 80019b8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019bc:	2178      	movs	r1, #120	; 0x78
 80019be:	4873      	ldr	r0, [pc, #460]	; (8001b8c <FreqMenu_DrawPresetMenu+0x824>)
 80019c0:	f00b ff16 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019c4:	7afb      	ldrb	r3, [r7, #11]
 80019c6:	b29a      	uxth	r2, r3
 80019c8:	2300      	movs	r3, #0
 80019ca:	9301      	str	r3, [sp, #4]
 80019cc:	2302      	movs	r3, #2
 80019ce:	9300      	str	r3, [sp, #0]
 80019d0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019d4:	2178      	movs	r1, #120	; 0x78
 80019d6:	486e      	ldr	r0, [pc, #440]	; (8001b90 <FreqMenu_DrawPresetMenu+0x828>)
 80019d8:	f00b ff0a 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019dc:	7abb      	ldrb	r3, [r7, #10]
 80019de:	b29a      	uxth	r2, r3
 80019e0:	2300      	movs	r3, #0
 80019e2:	9301      	str	r3, [sp, #4]
 80019e4:	2302      	movs	r3, #2
 80019e6:	9300      	str	r3, [sp, #0]
 80019e8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80019ec:	2178      	movs	r1, #120	; 0x78
 80019ee:	4869      	ldr	r0, [pc, #420]	; (8001b94 <FreqMenu_DrawPresetMenu+0x82c>)
 80019f0:	f00b fefe 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80019f4:	7a7b      	ldrb	r3, [r7, #9]
 80019f6:	b29a      	uxth	r2, r3
 80019f8:	2300      	movs	r3, #0
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	2302      	movs	r3, #2
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a04:	2178      	movs	r1, #120	; 0x78
 8001a06:	4864      	ldr	r0, [pc, #400]	; (8001b98 <FreqMenu_DrawPresetMenu+0x830>)
 8001a08:	f00b fef2 	bl	800d7f0 <ILI9341_Draw_Text>
				break;
 8001a0c:	f000 bf38 	b.w	8002880 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a10:	7bfb      	ldrb	r3, [r7, #15]
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	2300      	movs	r3, #0
 8001a16:	9301      	str	r3, [sp, #4]
 8001a18:	2302      	movs	r3, #2
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a20:	2105      	movs	r1, #5
 8001a22:	4850      	ldr	r0, [pc, #320]	; (8001b64 <FreqMenu_DrawPresetMenu+0x7fc>)
 8001a24:	f00b fee4 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a28:	7bbb      	ldrb	r3, [r7, #14]
 8001a2a:	b29a      	uxth	r2, r3
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	9301      	str	r3, [sp, #4]
 8001a30:	2302      	movs	r3, #2
 8001a32:	9300      	str	r3, [sp, #0]
 8001a34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a38:	2105      	movs	r1, #5
 8001a3a:	484b      	ldr	r0, [pc, #300]	; (8001b68 <FreqMenu_DrawPresetMenu+0x800>)
 8001a3c:	f00b fed8 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a40:	7b7b      	ldrb	r3, [r7, #13]
 8001a42:	b29a      	uxth	r2, r3
 8001a44:	2300      	movs	r3, #0
 8001a46:	9301      	str	r3, [sp, #4]
 8001a48:	2302      	movs	r3, #2
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a50:	2105      	movs	r1, #5
 8001a52:	4846      	ldr	r0, [pc, #280]	; (8001b6c <FreqMenu_DrawPresetMenu+0x804>)
 8001a54:	f00b fecc 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a58:	7b3b      	ldrb	r3, [r7, #12]
 8001a5a:	b29a      	uxth	r2, r3
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	9301      	str	r3, [sp, #4]
 8001a60:	2302      	movs	r3, #2
 8001a62:	9300      	str	r3, [sp, #0]
 8001a64:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a68:	2105      	movs	r1, #5
 8001a6a:	4841      	ldr	r0, [pc, #260]	; (8001b70 <FreqMenu_DrawPresetMenu+0x808>)
 8001a6c:	f00b fec0 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001a70:	7afb      	ldrb	r3, [r7, #11]
 8001a72:	b29a      	uxth	r2, r3
 8001a74:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001a78:	9301      	str	r3, [sp, #4]
 8001a7a:	2302      	movs	r3, #2
 8001a7c:	9300      	str	r3, [sp, #0]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	2105      	movs	r1, #5
 8001a82:	483c      	ldr	r0, [pc, #240]	; (8001b74 <FreqMenu_DrawPresetMenu+0x80c>)
 8001a84:	f00b feb4 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001a88:	7abb      	ldrb	r3, [r7, #10]
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	9301      	str	r3, [sp, #4]
 8001a90:	2302      	movs	r3, #2
 8001a92:	9300      	str	r3, [sp, #0]
 8001a94:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001a98:	2105      	movs	r1, #5
 8001a9a:	4837      	ldr	r0, [pc, #220]	; (8001b78 <FreqMenu_DrawPresetMenu+0x810>)
 8001a9c:	f00b fea8 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001aa0:	7a7b      	ldrb	r3, [r7, #9]
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	9301      	str	r3, [sp, #4]
 8001aa8:	2302      	movs	r3, #2
 8001aaa:	9300      	str	r3, [sp, #0]
 8001aac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ab0:	2105      	movs	r1, #5
 8001ab2:	4832      	ldr	r0, [pc, #200]	; (8001b7c <FreqMenu_DrawPresetMenu+0x814>)
 8001ab4:	f00b fe9c 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ab8:	7bfb      	ldrb	r3, [r7, #15]
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	2300      	movs	r3, #0
 8001abe:	9301      	str	r3, [sp, #4]
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ac8:	2178      	movs	r1, #120	; 0x78
 8001aca:	482d      	ldr	r0, [pc, #180]	; (8001b80 <FreqMenu_DrawPresetMenu+0x818>)
 8001acc:	f00b fe90 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ad0:	7bbb      	ldrb	r3, [r7, #14]
 8001ad2:	b29a      	uxth	r2, r3
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	2302      	movs	r3, #2
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ae0:	2178      	movs	r1, #120	; 0x78
 8001ae2:	4828      	ldr	r0, [pc, #160]	; (8001b84 <FreqMenu_DrawPresetMenu+0x81c>)
 8001ae4:	f00b fe84 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ae8:	7b7b      	ldrb	r3, [r7, #13]
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	2300      	movs	r3, #0
 8001aee:	9301      	str	r3, [sp, #4]
 8001af0:	2302      	movs	r3, #2
 8001af2:	9300      	str	r3, [sp, #0]
 8001af4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001af8:	2178      	movs	r1, #120	; 0x78
 8001afa:	4823      	ldr	r0, [pc, #140]	; (8001b88 <FreqMenu_DrawPresetMenu+0x820>)
 8001afc:	f00b fe78 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b00:	7b3b      	ldrb	r3, [r7, #12]
 8001b02:	b29a      	uxth	r2, r3
 8001b04:	2300      	movs	r3, #0
 8001b06:	9301      	str	r3, [sp, #4]
 8001b08:	2302      	movs	r3, #2
 8001b0a:	9300      	str	r3, [sp, #0]
 8001b0c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b10:	2178      	movs	r1, #120	; 0x78
 8001b12:	481e      	ldr	r0, [pc, #120]	; (8001b8c <FreqMenu_DrawPresetMenu+0x824>)
 8001b14:	f00b fe6c 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b18:	7afb      	ldrb	r3, [r7, #11]
 8001b1a:	b29a      	uxth	r2, r3
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	9301      	str	r3, [sp, #4]
 8001b20:	2302      	movs	r3, #2
 8001b22:	9300      	str	r3, [sp, #0]
 8001b24:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b28:	2178      	movs	r1, #120	; 0x78
 8001b2a:	4819      	ldr	r0, [pc, #100]	; (8001b90 <FreqMenu_DrawPresetMenu+0x828>)
 8001b2c:	f00b fe60 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b30:	7abb      	ldrb	r3, [r7, #10]
 8001b32:	b29a      	uxth	r2, r3
 8001b34:	2300      	movs	r3, #0
 8001b36:	9301      	str	r3, [sp, #4]
 8001b38:	2302      	movs	r3, #2
 8001b3a:	9300      	str	r3, [sp, #0]
 8001b3c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b40:	2178      	movs	r1, #120	; 0x78
 8001b42:	4814      	ldr	r0, [pc, #80]	; (8001b94 <FreqMenu_DrawPresetMenu+0x82c>)
 8001b44:	f00b fe54 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b48:	7a7b      	ldrb	r3, [r7, #9]
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	9301      	str	r3, [sp, #4]
 8001b50:	2302      	movs	r3, #2
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001b58:	2178      	movs	r1, #120	; 0x78
 8001b5a:	480f      	ldr	r0, [pc, #60]	; (8001b98 <FreqMenu_DrawPresetMenu+0x830>)
 8001b5c:	f00b fe48 	bl	800d7f0 <ILI9341_Draw_Text>
				break;
 8001b60:	f000 be8e 	b.w	8002880 <FreqMenu_DrawPresetMenu+0x1518>
 8001b64:	08012078 	.word	0x08012078
 8001b68:	08012080 	.word	0x08012080
 8001b6c:	08012088 	.word	0x08012088
 8001b70:	08012090 	.word	0x08012090
 8001b74:	08012098 	.word	0x08012098
 8001b78:	080120a0 	.word	0x080120a0
 8001b7c:	080120a8 	.word	0x080120a8
 8001b80:	080120b0 	.word	0x080120b0
 8001b84:	080120b8 	.word	0x080120b8
 8001b88:	080120c0 	.word	0x080120c0
 8001b8c:	080120c8 	.word	0x080120c8
 8001b90:	080120d0 	.word	0x080120d0
 8001b94:	080120d8 	.word	0x080120d8
 8001b98:	080120e0 	.word	0x080120e0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001b9c:	7bfb      	ldrb	r3, [r7, #15]
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	9301      	str	r3, [sp, #4]
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	9300      	str	r3, [sp, #0]
 8001ba8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bac:	2105      	movs	r1, #5
 8001bae:	48a5      	ldr	r0, [pc, #660]	; (8001e44 <FreqMenu_DrawPresetMenu+0xadc>)
 8001bb0:	f00b fe1e 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bb4:	7bbb      	ldrb	r3, [r7, #14]
 8001bb6:	b29a      	uxth	r2, r3
 8001bb8:	2300      	movs	r3, #0
 8001bba:	9301      	str	r3, [sp, #4]
 8001bbc:	2302      	movs	r3, #2
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bc4:	2105      	movs	r1, #5
 8001bc6:	48a0      	ldr	r0, [pc, #640]	; (8001e48 <FreqMenu_DrawPresetMenu+0xae0>)
 8001bc8:	f00b fe12 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bcc:	7b7b      	ldrb	r3, [r7, #13]
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	9301      	str	r3, [sp, #4]
 8001bd4:	2302      	movs	r3, #2
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bdc:	2105      	movs	r1, #5
 8001bde:	489b      	ldr	r0, [pc, #620]	; (8001e4c <FreqMenu_DrawPresetMenu+0xae4>)
 8001be0:	f00b fe06 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001be4:	7b3b      	ldrb	r3, [r7, #12]
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	2300      	movs	r3, #0
 8001bea:	9301      	str	r3, [sp, #4]
 8001bec:	2302      	movs	r3, #2
 8001bee:	9300      	str	r3, [sp, #0]
 8001bf0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001bf4:	2105      	movs	r1, #5
 8001bf6:	4896      	ldr	r0, [pc, #600]	; (8001e50 <FreqMenu_DrawPresetMenu+0xae8>)
 8001bf8:	f00b fdfa 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001bfc:	7afb      	ldrb	r3, [r7, #11]
 8001bfe:	b29a      	uxth	r2, r3
 8001c00:	2300      	movs	r3, #0
 8001c02:	9301      	str	r3, [sp, #4]
 8001c04:	2302      	movs	r3, #2
 8001c06:	9300      	str	r3, [sp, #0]
 8001c08:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c0c:	2105      	movs	r1, #5
 8001c0e:	4891      	ldr	r0, [pc, #580]	; (8001e54 <FreqMenu_DrawPresetMenu+0xaec>)
 8001c10:	f00b fdee 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001c14:	7abb      	ldrb	r3, [r7, #10]
 8001c16:	b29a      	uxth	r2, r3
 8001c18:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001c1c:	9301      	str	r3, [sp, #4]
 8001c1e:	2302      	movs	r3, #2
 8001c20:	9300      	str	r3, [sp, #0]
 8001c22:	2300      	movs	r3, #0
 8001c24:	2105      	movs	r1, #5
 8001c26:	488c      	ldr	r0, [pc, #560]	; (8001e58 <FreqMenu_DrawPresetMenu+0xaf0>)
 8001c28:	f00b fde2 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c2c:	7a7b      	ldrb	r3, [r7, #9]
 8001c2e:	b29a      	uxth	r2, r3
 8001c30:	2300      	movs	r3, #0
 8001c32:	9301      	str	r3, [sp, #4]
 8001c34:	2302      	movs	r3, #2
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c3c:	2105      	movs	r1, #5
 8001c3e:	4887      	ldr	r0, [pc, #540]	; (8001e5c <FreqMenu_DrawPresetMenu+0xaf4>)
 8001c40:	f00b fdd6 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	2300      	movs	r3, #0
 8001c4a:	9301      	str	r3, [sp, #4]
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	9300      	str	r3, [sp, #0]
 8001c50:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c54:	2178      	movs	r1, #120	; 0x78
 8001c56:	4882      	ldr	r0, [pc, #520]	; (8001e60 <FreqMenu_DrawPresetMenu+0xaf8>)
 8001c58:	f00b fdca 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c5c:	7bbb      	ldrb	r3, [r7, #14]
 8001c5e:	b29a      	uxth	r2, r3
 8001c60:	2300      	movs	r3, #0
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	2302      	movs	r3, #2
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c6c:	2178      	movs	r1, #120	; 0x78
 8001c6e:	487d      	ldr	r0, [pc, #500]	; (8001e64 <FreqMenu_DrawPresetMenu+0xafc>)
 8001c70:	f00b fdbe 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c74:	7b7b      	ldrb	r3, [r7, #13]
 8001c76:	b29a      	uxth	r2, r3
 8001c78:	2300      	movs	r3, #0
 8001c7a:	9301      	str	r3, [sp, #4]
 8001c7c:	2302      	movs	r3, #2
 8001c7e:	9300      	str	r3, [sp, #0]
 8001c80:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c84:	2178      	movs	r1, #120	; 0x78
 8001c86:	4878      	ldr	r0, [pc, #480]	; (8001e68 <FreqMenu_DrawPresetMenu+0xb00>)
 8001c88:	f00b fdb2 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001c8c:	7b3b      	ldrb	r3, [r7, #12]
 8001c8e:	b29a      	uxth	r2, r3
 8001c90:	2300      	movs	r3, #0
 8001c92:	9301      	str	r3, [sp, #4]
 8001c94:	2302      	movs	r3, #2
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001c9c:	2178      	movs	r1, #120	; 0x78
 8001c9e:	4873      	ldr	r0, [pc, #460]	; (8001e6c <FreqMenu_DrawPresetMenu+0xb04>)
 8001ca0:	f00b fda6 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ca4:	7afb      	ldrb	r3, [r7, #11]
 8001ca6:	b29a      	uxth	r2, r3
 8001ca8:	2300      	movs	r3, #0
 8001caa:	9301      	str	r3, [sp, #4]
 8001cac:	2302      	movs	r3, #2
 8001cae:	9300      	str	r3, [sp, #0]
 8001cb0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001cb4:	2178      	movs	r1, #120	; 0x78
 8001cb6:	486e      	ldr	r0, [pc, #440]	; (8001e70 <FreqMenu_DrawPresetMenu+0xb08>)
 8001cb8:	f00b fd9a 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cbc:	7abb      	ldrb	r3, [r7, #10]
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	9301      	str	r3, [sp, #4]
 8001cc4:	2302      	movs	r3, #2
 8001cc6:	9300      	str	r3, [sp, #0]
 8001cc8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ccc:	2178      	movs	r1, #120	; 0x78
 8001cce:	4869      	ldr	r0, [pc, #420]	; (8001e74 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001cd0:	f00b fd8e 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cd4:	7a7b      	ldrb	r3, [r7, #9]
 8001cd6:	b29a      	uxth	r2, r3
 8001cd8:	2300      	movs	r3, #0
 8001cda:	9301      	str	r3, [sp, #4]
 8001cdc:	2302      	movs	r3, #2
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ce4:	2178      	movs	r1, #120	; 0x78
 8001ce6:	4864      	ldr	r0, [pc, #400]	; (8001e78 <FreqMenu_DrawPresetMenu+0xb10>)
 8001ce8:	f00b fd82 	bl	800d7f0 <ILI9341_Draw_Text>
				break;
 8001cec:	f000 bdc8 	b.w	8002880 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	9301      	str	r3, [sp, #4]
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d00:	2105      	movs	r1, #5
 8001d02:	4850      	ldr	r0, [pc, #320]	; (8001e44 <FreqMenu_DrawPresetMenu+0xadc>)
 8001d04:	f00b fd74 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d08:	7bbb      	ldrb	r3, [r7, #14]
 8001d0a:	b29a      	uxth	r2, r3
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	9301      	str	r3, [sp, #4]
 8001d10:	2302      	movs	r3, #2
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d18:	2105      	movs	r1, #5
 8001d1a:	484b      	ldr	r0, [pc, #300]	; (8001e48 <FreqMenu_DrawPresetMenu+0xae0>)
 8001d1c:	f00b fd68 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d20:	7b7b      	ldrb	r3, [r7, #13]
 8001d22:	b29a      	uxth	r2, r3
 8001d24:	2300      	movs	r3, #0
 8001d26:	9301      	str	r3, [sp, #4]
 8001d28:	2302      	movs	r3, #2
 8001d2a:	9300      	str	r3, [sp, #0]
 8001d2c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d30:	2105      	movs	r1, #5
 8001d32:	4846      	ldr	r0, [pc, #280]	; (8001e4c <FreqMenu_DrawPresetMenu+0xae4>)
 8001d34:	f00b fd5c 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d38:	7b3b      	ldrb	r3, [r7, #12]
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	9301      	str	r3, [sp, #4]
 8001d40:	2302      	movs	r3, #2
 8001d42:	9300      	str	r3, [sp, #0]
 8001d44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d48:	2105      	movs	r1, #5
 8001d4a:	4841      	ldr	r0, [pc, #260]	; (8001e50 <FreqMenu_DrawPresetMenu+0xae8>)
 8001d4c:	f00b fd50 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d50:	7afb      	ldrb	r3, [r7, #11]
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	2300      	movs	r3, #0
 8001d56:	9301      	str	r3, [sp, #4]
 8001d58:	2302      	movs	r3, #2
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d60:	2105      	movs	r1, #5
 8001d62:	483c      	ldr	r0, [pc, #240]	; (8001e54 <FreqMenu_DrawPresetMenu+0xaec>)
 8001d64:	f00b fd44 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d68:	7abb      	ldrb	r3, [r7, #10]
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	9301      	str	r3, [sp, #4]
 8001d70:	2302      	movs	r3, #2
 8001d72:	9300      	str	r3, [sp, #0]
 8001d74:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001d78:	2105      	movs	r1, #5
 8001d7a:	4837      	ldr	r0, [pc, #220]	; (8001e58 <FreqMenu_DrawPresetMenu+0xaf0>)
 8001d7c:	f00b fd38 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001d80:	7a7b      	ldrb	r3, [r7, #9]
 8001d82:	b29a      	uxth	r2, r3
 8001d84:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001d88:	9301      	str	r3, [sp, #4]
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	9300      	str	r3, [sp, #0]
 8001d8e:	2300      	movs	r3, #0
 8001d90:	2105      	movs	r1, #5
 8001d92:	4832      	ldr	r0, [pc, #200]	; (8001e5c <FreqMenu_DrawPresetMenu+0xaf4>)
 8001d94:	f00b fd2c 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001d98:	7bfb      	ldrb	r3, [r7, #15]
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	9301      	str	r3, [sp, #4]
 8001da0:	2302      	movs	r3, #2
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001da8:	2178      	movs	r1, #120	; 0x78
 8001daa:	482d      	ldr	r0, [pc, #180]	; (8001e60 <FreqMenu_DrawPresetMenu+0xaf8>)
 8001dac:	f00b fd20 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001db0:	7bbb      	ldrb	r3, [r7, #14]
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	2300      	movs	r3, #0
 8001db6:	9301      	str	r3, [sp, #4]
 8001db8:	2302      	movs	r3, #2
 8001dba:	9300      	str	r3, [sp, #0]
 8001dbc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dc0:	2178      	movs	r1, #120	; 0x78
 8001dc2:	4828      	ldr	r0, [pc, #160]	; (8001e64 <FreqMenu_DrawPresetMenu+0xafc>)
 8001dc4:	f00b fd14 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001dc8:	7b7b      	ldrb	r3, [r7, #13]
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	2300      	movs	r3, #0
 8001dce:	9301      	str	r3, [sp, #4]
 8001dd0:	2302      	movs	r3, #2
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001dd8:	2178      	movs	r1, #120	; 0x78
 8001dda:	4823      	ldr	r0, [pc, #140]	; (8001e68 <FreqMenu_DrawPresetMenu+0xb00>)
 8001ddc:	f00b fd08 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001de0:	7b3b      	ldrb	r3, [r7, #12]
 8001de2:	b29a      	uxth	r2, r3
 8001de4:	2300      	movs	r3, #0
 8001de6:	9301      	str	r3, [sp, #4]
 8001de8:	2302      	movs	r3, #2
 8001dea:	9300      	str	r3, [sp, #0]
 8001dec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001df0:	2178      	movs	r1, #120	; 0x78
 8001df2:	481e      	ldr	r0, [pc, #120]	; (8001e6c <FreqMenu_DrawPresetMenu+0xb04>)
 8001df4:	f00b fcfc 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001df8:	7afb      	ldrb	r3, [r7, #11]
 8001dfa:	b29a      	uxth	r2, r3
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	9301      	str	r3, [sp, #4]
 8001e00:	2302      	movs	r3, #2
 8001e02:	9300      	str	r3, [sp, #0]
 8001e04:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e08:	2178      	movs	r1, #120	; 0x78
 8001e0a:	4819      	ldr	r0, [pc, #100]	; (8001e70 <FreqMenu_DrawPresetMenu+0xb08>)
 8001e0c:	f00b fcf0 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e10:	7abb      	ldrb	r3, [r7, #10]
 8001e12:	b29a      	uxth	r2, r3
 8001e14:	2300      	movs	r3, #0
 8001e16:	9301      	str	r3, [sp, #4]
 8001e18:	2302      	movs	r3, #2
 8001e1a:	9300      	str	r3, [sp, #0]
 8001e1c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e20:	2178      	movs	r1, #120	; 0x78
 8001e22:	4814      	ldr	r0, [pc, #80]	; (8001e74 <FreqMenu_DrawPresetMenu+0xb0c>)
 8001e24:	f00b fce4 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e28:	7a7b      	ldrb	r3, [r7, #9]
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	9301      	str	r3, [sp, #4]
 8001e30:	2302      	movs	r3, #2
 8001e32:	9300      	str	r3, [sp, #0]
 8001e34:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e38:	2178      	movs	r1, #120	; 0x78
 8001e3a:	480f      	ldr	r0, [pc, #60]	; (8001e78 <FreqMenu_DrawPresetMenu+0xb10>)
 8001e3c:	f00b fcd8 	bl	800d7f0 <ILI9341_Draw_Text>
				break;
 8001e40:	f000 bd1e 	b.w	8002880 <FreqMenu_DrawPresetMenu+0x1518>
 8001e44:	08012078 	.word	0x08012078
 8001e48:	08012080 	.word	0x08012080
 8001e4c:	08012088 	.word	0x08012088
 8001e50:	08012090 	.word	0x08012090
 8001e54:	08012098 	.word	0x08012098
 8001e58:	080120a0 	.word	0x080120a0
 8001e5c:	080120a8 	.word	0x080120a8
 8001e60:	080120b0 	.word	0x080120b0
 8001e64:	080120b8 	.word	0x080120b8
 8001e68:	080120c0 	.word	0x080120c0
 8001e6c:	080120c8 	.word	0x080120c8
 8001e70:	080120d0 	.word	0x080120d0
 8001e74:	080120d8 	.word	0x080120d8
 8001e78:	080120e0 	.word	0x080120e0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e7c:	7bfb      	ldrb	r3, [r7, #15]
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	2300      	movs	r3, #0
 8001e82:	9301      	str	r3, [sp, #4]
 8001e84:	2302      	movs	r3, #2
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001e8c:	2105      	movs	r1, #5
 8001e8e:	48a5      	ldr	r0, [pc, #660]	; (8002124 <FreqMenu_DrawPresetMenu+0xdbc>)
 8001e90:	f00b fcae 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001e94:	7bbb      	ldrb	r3, [r7, #14]
 8001e96:	b29a      	uxth	r2, r3
 8001e98:	2300      	movs	r3, #0
 8001e9a:	9301      	str	r3, [sp, #4]
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	9300      	str	r3, [sp, #0]
 8001ea0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ea4:	2105      	movs	r1, #5
 8001ea6:	48a0      	ldr	r0, [pc, #640]	; (8002128 <FreqMenu_DrawPresetMenu+0xdc0>)
 8001ea8:	f00b fca2 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001eac:	7b7b      	ldrb	r3, [r7, #13]
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	9301      	str	r3, [sp, #4]
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ebc:	2105      	movs	r1, #5
 8001ebe:	489b      	ldr	r0, [pc, #620]	; (800212c <FreqMenu_DrawPresetMenu+0xdc4>)
 8001ec0:	f00b fc96 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ec4:	7b3b      	ldrb	r3, [r7, #12]
 8001ec6:	b29a      	uxth	r2, r3
 8001ec8:	2300      	movs	r3, #0
 8001eca:	9301      	str	r3, [sp, #4]
 8001ecc:	2302      	movs	r3, #2
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ed4:	2105      	movs	r1, #5
 8001ed6:	4896      	ldr	r0, [pc, #600]	; (8002130 <FreqMenu_DrawPresetMenu+0xdc8>)
 8001ed8:	f00b fc8a 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001edc:	7afb      	ldrb	r3, [r7, #11]
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	9301      	str	r3, [sp, #4]
 8001ee4:	2302      	movs	r3, #2
 8001ee6:	9300      	str	r3, [sp, #0]
 8001ee8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001eec:	2105      	movs	r1, #5
 8001eee:	4891      	ldr	r0, [pc, #580]	; (8002134 <FreqMenu_DrawPresetMenu+0xdcc>)
 8001ef0:	f00b fc7e 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001ef4:	7abb      	ldrb	r3, [r7, #10]
 8001ef6:	b29a      	uxth	r2, r3
 8001ef8:	2300      	movs	r3, #0
 8001efa:	9301      	str	r3, [sp, #4]
 8001efc:	2302      	movs	r3, #2
 8001efe:	9300      	str	r3, [sp, #0]
 8001f00:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f04:	2105      	movs	r1, #5
 8001f06:	488c      	ldr	r0, [pc, #560]	; (8002138 <FreqMenu_DrawPresetMenu+0xdd0>)
 8001f08:	f00b fc72 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f0c:	7a7b      	ldrb	r3, [r7, #9]
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	2300      	movs	r3, #0
 8001f12:	9301      	str	r3, [sp, #4]
 8001f14:	2302      	movs	r3, #2
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f1c:	2105      	movs	r1, #5
 8001f1e:	4887      	ldr	r0, [pc, #540]	; (800213c <FreqMenu_DrawPresetMenu+0xdd4>)
 8001f20:	f00b fc66 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8001f2c:	9301      	str	r3, [sp, #4]
 8001f2e:	2302      	movs	r3, #2
 8001f30:	9300      	str	r3, [sp, #0]
 8001f32:	2300      	movs	r3, #0
 8001f34:	2178      	movs	r1, #120	; 0x78
 8001f36:	4882      	ldr	r0, [pc, #520]	; (8002140 <FreqMenu_DrawPresetMenu+0xdd8>)
 8001f38:	f00b fc5a 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f3c:	7bbb      	ldrb	r3, [r7, #14]
 8001f3e:	b29a      	uxth	r2, r3
 8001f40:	2300      	movs	r3, #0
 8001f42:	9301      	str	r3, [sp, #4]
 8001f44:	2302      	movs	r3, #2
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f4c:	2178      	movs	r1, #120	; 0x78
 8001f4e:	487d      	ldr	r0, [pc, #500]	; (8002144 <FreqMenu_DrawPresetMenu+0xddc>)
 8001f50:	f00b fc4e 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f54:	7b7b      	ldrb	r3, [r7, #13]
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	2300      	movs	r3, #0
 8001f5a:	9301      	str	r3, [sp, #4]
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f64:	2178      	movs	r1, #120	; 0x78
 8001f66:	4878      	ldr	r0, [pc, #480]	; (8002148 <FreqMenu_DrawPresetMenu+0xde0>)
 8001f68:	f00b fc42 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f6c:	7b3b      	ldrb	r3, [r7, #12]
 8001f6e:	b29a      	uxth	r2, r3
 8001f70:	2300      	movs	r3, #0
 8001f72:	9301      	str	r3, [sp, #4]
 8001f74:	2302      	movs	r3, #2
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f7c:	2178      	movs	r1, #120	; 0x78
 8001f7e:	4873      	ldr	r0, [pc, #460]	; (800214c <FreqMenu_DrawPresetMenu+0xde4>)
 8001f80:	f00b fc36 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f84:	7afb      	ldrb	r3, [r7, #11]
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	2300      	movs	r3, #0
 8001f8a:	9301      	str	r3, [sp, #4]
 8001f8c:	2302      	movs	r3, #2
 8001f8e:	9300      	str	r3, [sp, #0]
 8001f90:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001f94:	2178      	movs	r1, #120	; 0x78
 8001f96:	486e      	ldr	r0, [pc, #440]	; (8002150 <FreqMenu_DrawPresetMenu+0xde8>)
 8001f98:	f00b fc2a 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001f9c:	7abb      	ldrb	r3, [r7, #10]
 8001f9e:	b29a      	uxth	r2, r3
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	9301      	str	r3, [sp, #4]
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	9300      	str	r3, [sp, #0]
 8001fa8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fac:	2178      	movs	r1, #120	; 0x78
 8001fae:	4869      	ldr	r0, [pc, #420]	; (8002154 <FreqMenu_DrawPresetMenu+0xdec>)
 8001fb0:	f00b fc1e 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fb4:	7a7b      	ldrb	r3, [r7, #9]
 8001fb6:	b29a      	uxth	r2, r3
 8001fb8:	2300      	movs	r3, #0
 8001fba:	9301      	str	r3, [sp, #4]
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	9300      	str	r3, [sp, #0]
 8001fc0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fc4:	2178      	movs	r1, #120	; 0x78
 8001fc6:	4864      	ldr	r0, [pc, #400]	; (8002158 <FreqMenu_DrawPresetMenu+0xdf0>)
 8001fc8:	f00b fc12 	bl	800d7f0 <ILI9341_Draw_Text>
				break;
 8001fcc:	f000 bc58 	b.w	8002880 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
 8001fd2:	b29a      	uxth	r2, r3
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	9301      	str	r3, [sp, #4]
 8001fd8:	2302      	movs	r3, #2
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001fe0:	2105      	movs	r1, #5
 8001fe2:	4850      	ldr	r0, [pc, #320]	; (8002124 <FreqMenu_DrawPresetMenu+0xdbc>)
 8001fe4:	f00b fc04 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8001fe8:	7bbb      	ldrb	r3, [r7, #14]
 8001fea:	b29a      	uxth	r2, r3
 8001fec:	2300      	movs	r3, #0
 8001fee:	9301      	str	r3, [sp, #4]
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	9300      	str	r3, [sp, #0]
 8001ff4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8001ff8:	2105      	movs	r1, #5
 8001ffa:	484b      	ldr	r0, [pc, #300]	; (8002128 <FreqMenu_DrawPresetMenu+0xdc0>)
 8001ffc:	f00b fbf8 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002000:	7b7b      	ldrb	r3, [r7, #13]
 8002002:	b29a      	uxth	r2, r3
 8002004:	2300      	movs	r3, #0
 8002006:	9301      	str	r3, [sp, #4]
 8002008:	2302      	movs	r3, #2
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002010:	2105      	movs	r1, #5
 8002012:	4846      	ldr	r0, [pc, #280]	; (800212c <FreqMenu_DrawPresetMenu+0xdc4>)
 8002014:	f00b fbec 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002018:	7b3b      	ldrb	r3, [r7, #12]
 800201a:	b29a      	uxth	r2, r3
 800201c:	2300      	movs	r3, #0
 800201e:	9301      	str	r3, [sp, #4]
 8002020:	2302      	movs	r3, #2
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002028:	2105      	movs	r1, #5
 800202a:	4841      	ldr	r0, [pc, #260]	; (8002130 <FreqMenu_DrawPresetMenu+0xdc8>)
 800202c:	f00b fbe0 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002030:	7afb      	ldrb	r3, [r7, #11]
 8002032:	b29a      	uxth	r2, r3
 8002034:	2300      	movs	r3, #0
 8002036:	9301      	str	r3, [sp, #4]
 8002038:	2302      	movs	r3, #2
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002040:	2105      	movs	r1, #5
 8002042:	483c      	ldr	r0, [pc, #240]	; (8002134 <FreqMenu_DrawPresetMenu+0xdcc>)
 8002044:	f00b fbd4 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002048:	7abb      	ldrb	r3, [r7, #10]
 800204a:	b29a      	uxth	r2, r3
 800204c:	2300      	movs	r3, #0
 800204e:	9301      	str	r3, [sp, #4]
 8002050:	2302      	movs	r3, #2
 8002052:	9300      	str	r3, [sp, #0]
 8002054:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002058:	2105      	movs	r1, #5
 800205a:	4837      	ldr	r0, [pc, #220]	; (8002138 <FreqMenu_DrawPresetMenu+0xdd0>)
 800205c:	f00b fbc8 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002060:	7a7b      	ldrb	r3, [r7, #9]
 8002062:	b29a      	uxth	r2, r3
 8002064:	2300      	movs	r3, #0
 8002066:	9301      	str	r3, [sp, #4]
 8002068:	2302      	movs	r3, #2
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002070:	2105      	movs	r1, #5
 8002072:	4832      	ldr	r0, [pc, #200]	; (800213c <FreqMenu_DrawPresetMenu+0xdd4>)
 8002074:	f00b fbbc 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002078:	7bfb      	ldrb	r3, [r7, #15]
 800207a:	b29a      	uxth	r2, r3
 800207c:	2300      	movs	r3, #0
 800207e:	9301      	str	r3, [sp, #4]
 8002080:	2302      	movs	r3, #2
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002088:	2178      	movs	r1, #120	; 0x78
 800208a:	482d      	ldr	r0, [pc, #180]	; (8002140 <FreqMenu_DrawPresetMenu+0xdd8>)
 800208c:	f00b fbb0 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002090:	7bbb      	ldrb	r3, [r7, #14]
 8002092:	b29a      	uxth	r2, r3
 8002094:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002098:	9301      	str	r3, [sp, #4]
 800209a:	2302      	movs	r3, #2
 800209c:	9300      	str	r3, [sp, #0]
 800209e:	2300      	movs	r3, #0
 80020a0:	2178      	movs	r1, #120	; 0x78
 80020a2:	4828      	ldr	r0, [pc, #160]	; (8002144 <FreqMenu_DrawPresetMenu+0xddc>)
 80020a4:	f00b fba4 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020a8:	7b7b      	ldrb	r3, [r7, #13]
 80020aa:	b29a      	uxth	r2, r3
 80020ac:	2300      	movs	r3, #0
 80020ae:	9301      	str	r3, [sp, #4]
 80020b0:	2302      	movs	r3, #2
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020b8:	2178      	movs	r1, #120	; 0x78
 80020ba:	4823      	ldr	r0, [pc, #140]	; (8002148 <FreqMenu_DrawPresetMenu+0xde0>)
 80020bc:	f00b fb98 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020c0:	7b3b      	ldrb	r3, [r7, #12]
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	2300      	movs	r3, #0
 80020c6:	9301      	str	r3, [sp, #4]
 80020c8:	2302      	movs	r3, #2
 80020ca:	9300      	str	r3, [sp, #0]
 80020cc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020d0:	2178      	movs	r1, #120	; 0x78
 80020d2:	481e      	ldr	r0, [pc, #120]	; (800214c <FreqMenu_DrawPresetMenu+0xde4>)
 80020d4:	f00b fb8c 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020d8:	7afb      	ldrb	r3, [r7, #11]
 80020da:	b29a      	uxth	r2, r3
 80020dc:	2300      	movs	r3, #0
 80020de:	9301      	str	r3, [sp, #4]
 80020e0:	2302      	movs	r3, #2
 80020e2:	9300      	str	r3, [sp, #0]
 80020e4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80020e8:	2178      	movs	r1, #120	; 0x78
 80020ea:	4819      	ldr	r0, [pc, #100]	; (8002150 <FreqMenu_DrawPresetMenu+0xde8>)
 80020ec:	f00b fb80 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80020f0:	7abb      	ldrb	r3, [r7, #10]
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	2300      	movs	r3, #0
 80020f6:	9301      	str	r3, [sp, #4]
 80020f8:	2302      	movs	r3, #2
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002100:	2178      	movs	r1, #120	; 0x78
 8002102:	4814      	ldr	r0, [pc, #80]	; (8002154 <FreqMenu_DrawPresetMenu+0xdec>)
 8002104:	f00b fb74 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002108:	7a7b      	ldrb	r3, [r7, #9]
 800210a:	b29a      	uxth	r2, r3
 800210c:	2300      	movs	r3, #0
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	2302      	movs	r3, #2
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002118:	2178      	movs	r1, #120	; 0x78
 800211a:	480f      	ldr	r0, [pc, #60]	; (8002158 <FreqMenu_DrawPresetMenu+0xdf0>)
 800211c:	f00b fb68 	bl	800d7f0 <ILI9341_Draw_Text>
				break;
 8002120:	e3ae      	b.n	8002880 <FreqMenu_DrawPresetMenu+0x1518>
 8002122:	bf00      	nop
 8002124:	08012078 	.word	0x08012078
 8002128:	08012080 	.word	0x08012080
 800212c:	08012088 	.word	0x08012088
 8002130:	08012090 	.word	0x08012090
 8002134:	08012098 	.word	0x08012098
 8002138:	080120a0 	.word	0x080120a0
 800213c:	080120a8 	.word	0x080120a8
 8002140:	080120b0 	.word	0x080120b0
 8002144:	080120b8 	.word	0x080120b8
 8002148:	080120c0 	.word	0x080120c0
 800214c:	080120c8 	.word	0x080120c8
 8002150:	080120d0 	.word	0x080120d0
 8002154:	080120d8 	.word	0x080120d8
 8002158:	080120e0 	.word	0x080120e0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800215c:	7bfb      	ldrb	r3, [r7, #15]
 800215e:	b29a      	uxth	r2, r3
 8002160:	2300      	movs	r3, #0
 8002162:	9301      	str	r3, [sp, #4]
 8002164:	2302      	movs	r3, #2
 8002166:	9300      	str	r3, [sp, #0]
 8002168:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800216c:	2105      	movs	r1, #5
 800216e:	48a4      	ldr	r0, [pc, #656]	; (8002400 <FreqMenu_DrawPresetMenu+0x1098>)
 8002170:	f00b fb3e 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002174:	7bbb      	ldrb	r3, [r7, #14]
 8002176:	b29a      	uxth	r2, r3
 8002178:	2300      	movs	r3, #0
 800217a:	9301      	str	r3, [sp, #4]
 800217c:	2302      	movs	r3, #2
 800217e:	9300      	str	r3, [sp, #0]
 8002180:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002184:	2105      	movs	r1, #5
 8002186:	489f      	ldr	r0, [pc, #636]	; (8002404 <FreqMenu_DrawPresetMenu+0x109c>)
 8002188:	f00b fb32 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800218c:	7b7b      	ldrb	r3, [r7, #13]
 800218e:	b29a      	uxth	r2, r3
 8002190:	2300      	movs	r3, #0
 8002192:	9301      	str	r3, [sp, #4]
 8002194:	2302      	movs	r3, #2
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800219c:	2105      	movs	r1, #5
 800219e:	489a      	ldr	r0, [pc, #616]	; (8002408 <FreqMenu_DrawPresetMenu+0x10a0>)
 80021a0:	f00b fb26 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021a4:	7b3b      	ldrb	r3, [r7, #12]
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	2300      	movs	r3, #0
 80021aa:	9301      	str	r3, [sp, #4]
 80021ac:	2302      	movs	r3, #2
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021b4:	2105      	movs	r1, #5
 80021b6:	4895      	ldr	r0, [pc, #596]	; (800240c <FreqMenu_DrawPresetMenu+0x10a4>)
 80021b8:	f00b fb1a 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021bc:	7afb      	ldrb	r3, [r7, #11]
 80021be:	b29a      	uxth	r2, r3
 80021c0:	2300      	movs	r3, #0
 80021c2:	9301      	str	r3, [sp, #4]
 80021c4:	2302      	movs	r3, #2
 80021c6:	9300      	str	r3, [sp, #0]
 80021c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021cc:	2105      	movs	r1, #5
 80021ce:	4890      	ldr	r0, [pc, #576]	; (8002410 <FreqMenu_DrawPresetMenu+0x10a8>)
 80021d0:	f00b fb0e 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021d4:	7abb      	ldrb	r3, [r7, #10]
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	2300      	movs	r3, #0
 80021da:	9301      	str	r3, [sp, #4]
 80021dc:	2302      	movs	r3, #2
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021e4:	2105      	movs	r1, #5
 80021e6:	488b      	ldr	r0, [pc, #556]	; (8002414 <FreqMenu_DrawPresetMenu+0x10ac>)
 80021e8:	f00b fb02 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80021ec:	7a7b      	ldrb	r3, [r7, #9]
 80021ee:	b29a      	uxth	r2, r3
 80021f0:	2300      	movs	r3, #0
 80021f2:	9301      	str	r3, [sp, #4]
 80021f4:	2302      	movs	r3, #2
 80021f6:	9300      	str	r3, [sp, #0]
 80021f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80021fc:	2105      	movs	r1, #5
 80021fe:	4886      	ldr	r0, [pc, #536]	; (8002418 <FreqMenu_DrawPresetMenu+0x10b0>)
 8002200:	f00b faf6 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	b29a      	uxth	r2, r3
 8002208:	2300      	movs	r3, #0
 800220a:	9301      	str	r3, [sp, #4]
 800220c:	2302      	movs	r3, #2
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002214:	2178      	movs	r1, #120	; 0x78
 8002216:	4881      	ldr	r0, [pc, #516]	; (800241c <FreqMenu_DrawPresetMenu+0x10b4>)
 8002218:	f00b faea 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800221c:	7bbb      	ldrb	r3, [r7, #14]
 800221e:	b29a      	uxth	r2, r3
 8002220:	2300      	movs	r3, #0
 8002222:	9301      	str	r3, [sp, #4]
 8002224:	2302      	movs	r3, #2
 8002226:	9300      	str	r3, [sp, #0]
 8002228:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800222c:	2178      	movs	r1, #120	; 0x78
 800222e:	487c      	ldr	r0, [pc, #496]	; (8002420 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002230:	f00b fade 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002234:	7b7b      	ldrb	r3, [r7, #13]
 8002236:	b29a      	uxth	r2, r3
 8002238:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800223c:	9301      	str	r3, [sp, #4]
 800223e:	2302      	movs	r3, #2
 8002240:	9300      	str	r3, [sp, #0]
 8002242:	2300      	movs	r3, #0
 8002244:	2178      	movs	r1, #120	; 0x78
 8002246:	4877      	ldr	r0, [pc, #476]	; (8002424 <FreqMenu_DrawPresetMenu+0x10bc>)
 8002248:	f00b fad2 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800224c:	7b3b      	ldrb	r3, [r7, #12]
 800224e:	b29a      	uxth	r2, r3
 8002250:	2300      	movs	r3, #0
 8002252:	9301      	str	r3, [sp, #4]
 8002254:	2302      	movs	r3, #2
 8002256:	9300      	str	r3, [sp, #0]
 8002258:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800225c:	2178      	movs	r1, #120	; 0x78
 800225e:	4872      	ldr	r0, [pc, #456]	; (8002428 <FreqMenu_DrawPresetMenu+0x10c0>)
 8002260:	f00b fac6 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002264:	7afb      	ldrb	r3, [r7, #11]
 8002266:	b29a      	uxth	r2, r3
 8002268:	2300      	movs	r3, #0
 800226a:	9301      	str	r3, [sp, #4]
 800226c:	2302      	movs	r3, #2
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002274:	2178      	movs	r1, #120	; 0x78
 8002276:	486d      	ldr	r0, [pc, #436]	; (800242c <FreqMenu_DrawPresetMenu+0x10c4>)
 8002278:	f00b faba 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800227c:	7abb      	ldrb	r3, [r7, #10]
 800227e:	b29a      	uxth	r2, r3
 8002280:	2300      	movs	r3, #0
 8002282:	9301      	str	r3, [sp, #4]
 8002284:	2302      	movs	r3, #2
 8002286:	9300      	str	r3, [sp, #0]
 8002288:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800228c:	2178      	movs	r1, #120	; 0x78
 800228e:	4868      	ldr	r0, [pc, #416]	; (8002430 <FreqMenu_DrawPresetMenu+0x10c8>)
 8002290:	f00b faae 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002294:	7a7b      	ldrb	r3, [r7, #9]
 8002296:	b29a      	uxth	r2, r3
 8002298:	2300      	movs	r3, #0
 800229a:	9301      	str	r3, [sp, #4]
 800229c:	2302      	movs	r3, #2
 800229e:	9300      	str	r3, [sp, #0]
 80022a0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022a4:	2178      	movs	r1, #120	; 0x78
 80022a6:	4863      	ldr	r0, [pc, #396]	; (8002434 <FreqMenu_DrawPresetMenu+0x10cc>)
 80022a8:	f00b faa2 	bl	800d7f0 <ILI9341_Draw_Text>
				break;
 80022ac:	e2e8      	b.n	8002880 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
 80022b0:	b29a      	uxth	r2, r3
 80022b2:	2300      	movs	r3, #0
 80022b4:	9301      	str	r3, [sp, #4]
 80022b6:	2302      	movs	r3, #2
 80022b8:	9300      	str	r3, [sp, #0]
 80022ba:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022be:	2105      	movs	r1, #5
 80022c0:	484f      	ldr	r0, [pc, #316]	; (8002400 <FreqMenu_DrawPresetMenu+0x1098>)
 80022c2:	f00b fa95 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022c6:	7bbb      	ldrb	r3, [r7, #14]
 80022c8:	b29a      	uxth	r2, r3
 80022ca:	2300      	movs	r3, #0
 80022cc:	9301      	str	r3, [sp, #4]
 80022ce:	2302      	movs	r3, #2
 80022d0:	9300      	str	r3, [sp, #0]
 80022d2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022d6:	2105      	movs	r1, #5
 80022d8:	484a      	ldr	r0, [pc, #296]	; (8002404 <FreqMenu_DrawPresetMenu+0x109c>)
 80022da:	f00b fa89 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022de:	7b7b      	ldrb	r3, [r7, #13]
 80022e0:	b29a      	uxth	r2, r3
 80022e2:	2300      	movs	r3, #0
 80022e4:	9301      	str	r3, [sp, #4]
 80022e6:	2302      	movs	r3, #2
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80022ee:	2105      	movs	r1, #5
 80022f0:	4845      	ldr	r0, [pc, #276]	; (8002408 <FreqMenu_DrawPresetMenu+0x10a0>)
 80022f2:	f00b fa7d 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80022f6:	7b3b      	ldrb	r3, [r7, #12]
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	2300      	movs	r3, #0
 80022fc:	9301      	str	r3, [sp, #4]
 80022fe:	2302      	movs	r3, #2
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002306:	2105      	movs	r1, #5
 8002308:	4840      	ldr	r0, [pc, #256]	; (800240c <FreqMenu_DrawPresetMenu+0x10a4>)
 800230a:	f00b fa71 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800230e:	7afb      	ldrb	r3, [r7, #11]
 8002310:	b29a      	uxth	r2, r3
 8002312:	2300      	movs	r3, #0
 8002314:	9301      	str	r3, [sp, #4]
 8002316:	2302      	movs	r3, #2
 8002318:	9300      	str	r3, [sp, #0]
 800231a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800231e:	2105      	movs	r1, #5
 8002320:	483b      	ldr	r0, [pc, #236]	; (8002410 <FreqMenu_DrawPresetMenu+0x10a8>)
 8002322:	f00b fa65 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002326:	7abb      	ldrb	r3, [r7, #10]
 8002328:	b29a      	uxth	r2, r3
 800232a:	2300      	movs	r3, #0
 800232c:	9301      	str	r3, [sp, #4]
 800232e:	2302      	movs	r3, #2
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002336:	2105      	movs	r1, #5
 8002338:	4836      	ldr	r0, [pc, #216]	; (8002414 <FreqMenu_DrawPresetMenu+0x10ac>)
 800233a:	f00b fa59 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800233e:	7a7b      	ldrb	r3, [r7, #9]
 8002340:	b29a      	uxth	r2, r3
 8002342:	2300      	movs	r3, #0
 8002344:	9301      	str	r3, [sp, #4]
 8002346:	2302      	movs	r3, #2
 8002348:	9300      	str	r3, [sp, #0]
 800234a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800234e:	2105      	movs	r1, #5
 8002350:	4831      	ldr	r0, [pc, #196]	; (8002418 <FreqMenu_DrawPresetMenu+0x10b0>)
 8002352:	f00b fa4d 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	b29a      	uxth	r2, r3
 800235a:	2300      	movs	r3, #0
 800235c:	9301      	str	r3, [sp, #4]
 800235e:	2302      	movs	r3, #2
 8002360:	9300      	str	r3, [sp, #0]
 8002362:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002366:	2178      	movs	r1, #120	; 0x78
 8002368:	482c      	ldr	r0, [pc, #176]	; (800241c <FreqMenu_DrawPresetMenu+0x10b4>)
 800236a:	f00b fa41 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800236e:	7bbb      	ldrb	r3, [r7, #14]
 8002370:	b29a      	uxth	r2, r3
 8002372:	2300      	movs	r3, #0
 8002374:	9301      	str	r3, [sp, #4]
 8002376:	2302      	movs	r3, #2
 8002378:	9300      	str	r3, [sp, #0]
 800237a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800237e:	2178      	movs	r1, #120	; 0x78
 8002380:	4827      	ldr	r0, [pc, #156]	; (8002420 <FreqMenu_DrawPresetMenu+0x10b8>)
 8002382:	f00b fa35 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002386:	7b7b      	ldrb	r3, [r7, #13]
 8002388:	b29a      	uxth	r2, r3
 800238a:	2300      	movs	r3, #0
 800238c:	9301      	str	r3, [sp, #4]
 800238e:	2302      	movs	r3, #2
 8002390:	9300      	str	r3, [sp, #0]
 8002392:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002396:	2178      	movs	r1, #120	; 0x78
 8002398:	4822      	ldr	r0, [pc, #136]	; (8002424 <FreqMenu_DrawPresetMenu+0x10bc>)
 800239a:	f00b fa29 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800239e:	7b3b      	ldrb	r3, [r7, #12]
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80023a6:	9301      	str	r3, [sp, #4]
 80023a8:	2302      	movs	r3, #2
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	2300      	movs	r3, #0
 80023ae:	2178      	movs	r1, #120	; 0x78
 80023b0:	481d      	ldr	r0, [pc, #116]	; (8002428 <FreqMenu_DrawPresetMenu+0x10c0>)
 80023b2:	f00b fa1d 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023b6:	7afb      	ldrb	r3, [r7, #11]
 80023b8:	b29a      	uxth	r2, r3
 80023ba:	2300      	movs	r3, #0
 80023bc:	9301      	str	r3, [sp, #4]
 80023be:	2302      	movs	r3, #2
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023c6:	2178      	movs	r1, #120	; 0x78
 80023c8:	4818      	ldr	r0, [pc, #96]	; (800242c <FreqMenu_DrawPresetMenu+0x10c4>)
 80023ca:	f00b fa11 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023ce:	7abb      	ldrb	r3, [r7, #10]
 80023d0:	b29a      	uxth	r2, r3
 80023d2:	2300      	movs	r3, #0
 80023d4:	9301      	str	r3, [sp, #4]
 80023d6:	2302      	movs	r3, #2
 80023d8:	9300      	str	r3, [sp, #0]
 80023da:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023de:	2178      	movs	r1, #120	; 0x78
 80023e0:	4813      	ldr	r0, [pc, #76]	; (8002430 <FreqMenu_DrawPresetMenu+0x10c8>)
 80023e2:	f00b fa05 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80023e6:	7a7b      	ldrb	r3, [r7, #9]
 80023e8:	b29a      	uxth	r2, r3
 80023ea:	2300      	movs	r3, #0
 80023ec:	9301      	str	r3, [sp, #4]
 80023ee:	2302      	movs	r3, #2
 80023f0:	9300      	str	r3, [sp, #0]
 80023f2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80023f6:	2178      	movs	r1, #120	; 0x78
 80023f8:	480e      	ldr	r0, [pc, #56]	; (8002434 <FreqMenu_DrawPresetMenu+0x10cc>)
 80023fa:	f00b f9f9 	bl	800d7f0 <ILI9341_Draw_Text>
				break;
 80023fe:	e23f      	b.n	8002880 <FreqMenu_DrawPresetMenu+0x1518>
 8002400:	08012078 	.word	0x08012078
 8002404:	08012080 	.word	0x08012080
 8002408:	08012088 	.word	0x08012088
 800240c:	08012090 	.word	0x08012090
 8002410:	08012098 	.word	0x08012098
 8002414:	080120a0 	.word	0x080120a0
 8002418:	080120a8 	.word	0x080120a8
 800241c:	080120b0 	.word	0x080120b0
 8002420:	080120b8 	.word	0x080120b8
 8002424:	080120c0 	.word	0x080120c0
 8002428:	080120c8 	.word	0x080120c8
 800242c:	080120d0 	.word	0x080120d0
 8002430:	080120d8 	.word	0x080120d8
 8002434:	080120e0 	.word	0x080120e0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	b29a      	uxth	r2, r3
 800243c:	2300      	movs	r3, #0
 800243e:	9301      	str	r3, [sp, #4]
 8002440:	2302      	movs	r3, #2
 8002442:	9300      	str	r3, [sp, #0]
 8002444:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002448:	2105      	movs	r1, #5
 800244a:	48a4      	ldr	r0, [pc, #656]	; (80026dc <FreqMenu_DrawPresetMenu+0x1374>)
 800244c:	f00b f9d0 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002450:	7bbb      	ldrb	r3, [r7, #14]
 8002452:	b29a      	uxth	r2, r3
 8002454:	2300      	movs	r3, #0
 8002456:	9301      	str	r3, [sp, #4]
 8002458:	2302      	movs	r3, #2
 800245a:	9300      	str	r3, [sp, #0]
 800245c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002460:	2105      	movs	r1, #5
 8002462:	489f      	ldr	r0, [pc, #636]	; (80026e0 <FreqMenu_DrawPresetMenu+0x1378>)
 8002464:	f00b f9c4 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002468:	7b7b      	ldrb	r3, [r7, #13]
 800246a:	b29a      	uxth	r2, r3
 800246c:	2300      	movs	r3, #0
 800246e:	9301      	str	r3, [sp, #4]
 8002470:	2302      	movs	r3, #2
 8002472:	9300      	str	r3, [sp, #0]
 8002474:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002478:	2105      	movs	r1, #5
 800247a:	489a      	ldr	r0, [pc, #616]	; (80026e4 <FreqMenu_DrawPresetMenu+0x137c>)
 800247c:	f00b f9b8 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002480:	7b3b      	ldrb	r3, [r7, #12]
 8002482:	b29a      	uxth	r2, r3
 8002484:	2300      	movs	r3, #0
 8002486:	9301      	str	r3, [sp, #4]
 8002488:	2302      	movs	r3, #2
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002490:	2105      	movs	r1, #5
 8002492:	4895      	ldr	r0, [pc, #596]	; (80026e8 <FreqMenu_DrawPresetMenu+0x1380>)
 8002494:	f00b f9ac 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002498:	7afb      	ldrb	r3, [r7, #11]
 800249a:	b29a      	uxth	r2, r3
 800249c:	2300      	movs	r3, #0
 800249e:	9301      	str	r3, [sp, #4]
 80024a0:	2302      	movs	r3, #2
 80024a2:	9300      	str	r3, [sp, #0]
 80024a4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024a8:	2105      	movs	r1, #5
 80024aa:	4890      	ldr	r0, [pc, #576]	; (80026ec <FreqMenu_DrawPresetMenu+0x1384>)
 80024ac:	f00b f9a0 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024b0:	7abb      	ldrb	r3, [r7, #10]
 80024b2:	b29a      	uxth	r2, r3
 80024b4:	2300      	movs	r3, #0
 80024b6:	9301      	str	r3, [sp, #4]
 80024b8:	2302      	movs	r3, #2
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024c0:	2105      	movs	r1, #5
 80024c2:	488b      	ldr	r0, [pc, #556]	; (80026f0 <FreqMenu_DrawPresetMenu+0x1388>)
 80024c4:	f00b f994 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024c8:	7a7b      	ldrb	r3, [r7, #9]
 80024ca:	b29a      	uxth	r2, r3
 80024cc:	2300      	movs	r3, #0
 80024ce:	9301      	str	r3, [sp, #4]
 80024d0:	2302      	movs	r3, #2
 80024d2:	9300      	str	r3, [sp, #0]
 80024d4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024d8:	2105      	movs	r1, #5
 80024da:	4886      	ldr	r0, [pc, #536]	; (80026f4 <FreqMenu_DrawPresetMenu+0x138c>)
 80024dc:	f00b f988 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	2300      	movs	r3, #0
 80024e6:	9301      	str	r3, [sp, #4]
 80024e8:	2302      	movs	r3, #2
 80024ea:	9300      	str	r3, [sp, #0]
 80024ec:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80024f0:	2178      	movs	r1, #120	; 0x78
 80024f2:	4881      	ldr	r0, [pc, #516]	; (80026f8 <FreqMenu_DrawPresetMenu+0x1390>)
 80024f4:	f00b f97c 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80024f8:	7bbb      	ldrb	r3, [r7, #14]
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	2300      	movs	r3, #0
 80024fe:	9301      	str	r3, [sp, #4]
 8002500:	2302      	movs	r3, #2
 8002502:	9300      	str	r3, [sp, #0]
 8002504:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002508:	2178      	movs	r1, #120	; 0x78
 800250a:	487c      	ldr	r0, [pc, #496]	; (80026fc <FreqMenu_DrawPresetMenu+0x1394>)
 800250c:	f00b f970 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002510:	7b7b      	ldrb	r3, [r7, #13]
 8002512:	b29a      	uxth	r2, r3
 8002514:	2300      	movs	r3, #0
 8002516:	9301      	str	r3, [sp, #4]
 8002518:	2302      	movs	r3, #2
 800251a:	9300      	str	r3, [sp, #0]
 800251c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002520:	2178      	movs	r1, #120	; 0x78
 8002522:	4877      	ldr	r0, [pc, #476]	; (8002700 <FreqMenu_DrawPresetMenu+0x1398>)
 8002524:	f00b f964 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002528:	7b3b      	ldrb	r3, [r7, #12]
 800252a:	b29a      	uxth	r2, r3
 800252c:	2300      	movs	r3, #0
 800252e:	9301      	str	r3, [sp, #4]
 8002530:	2302      	movs	r3, #2
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002538:	2178      	movs	r1, #120	; 0x78
 800253a:	4872      	ldr	r0, [pc, #456]	; (8002704 <FreqMenu_DrawPresetMenu+0x139c>)
 800253c:	f00b f958 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002540:	7afb      	ldrb	r3, [r7, #11]
 8002542:	b29a      	uxth	r2, r3
 8002544:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002548:	9301      	str	r3, [sp, #4]
 800254a:	2302      	movs	r3, #2
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	2300      	movs	r3, #0
 8002550:	2178      	movs	r1, #120	; 0x78
 8002552:	486d      	ldr	r0, [pc, #436]	; (8002708 <FreqMenu_DrawPresetMenu+0x13a0>)
 8002554:	f00b f94c 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002558:	7abb      	ldrb	r3, [r7, #10]
 800255a:	b29a      	uxth	r2, r3
 800255c:	2300      	movs	r3, #0
 800255e:	9301      	str	r3, [sp, #4]
 8002560:	2302      	movs	r3, #2
 8002562:	9300      	str	r3, [sp, #0]
 8002564:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002568:	2178      	movs	r1, #120	; 0x78
 800256a:	4868      	ldr	r0, [pc, #416]	; (800270c <FreqMenu_DrawPresetMenu+0x13a4>)
 800256c:	f00b f940 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002570:	7a7b      	ldrb	r3, [r7, #9]
 8002572:	b29a      	uxth	r2, r3
 8002574:	2300      	movs	r3, #0
 8002576:	9301      	str	r3, [sp, #4]
 8002578:	2302      	movs	r3, #2
 800257a:	9300      	str	r3, [sp, #0]
 800257c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002580:	2178      	movs	r1, #120	; 0x78
 8002582:	4863      	ldr	r0, [pc, #396]	; (8002710 <FreqMenu_DrawPresetMenu+0x13a8>)
 8002584:	f00b f934 	bl	800d7f0 <ILI9341_Draw_Text>
			break;
 8002588:	e17a      	b.n	8002880 <FreqMenu_DrawPresetMenu+0x1518>
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	b29a      	uxth	r2, r3
 800258e:	2300      	movs	r3, #0
 8002590:	9301      	str	r3, [sp, #4]
 8002592:	2302      	movs	r3, #2
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800259a:	2105      	movs	r1, #5
 800259c:	484f      	ldr	r0, [pc, #316]	; (80026dc <FreqMenu_DrawPresetMenu+0x1374>)
 800259e:	f00b f927 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025a2:	7bbb      	ldrb	r3, [r7, #14]
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	2300      	movs	r3, #0
 80025a8:	9301      	str	r3, [sp, #4]
 80025aa:	2302      	movs	r3, #2
 80025ac:	9300      	str	r3, [sp, #0]
 80025ae:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025b2:	2105      	movs	r1, #5
 80025b4:	484a      	ldr	r0, [pc, #296]	; (80026e0 <FreqMenu_DrawPresetMenu+0x1378>)
 80025b6:	f00b f91b 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025ba:	7b7b      	ldrb	r3, [r7, #13]
 80025bc:	b29a      	uxth	r2, r3
 80025be:	2300      	movs	r3, #0
 80025c0:	9301      	str	r3, [sp, #4]
 80025c2:	2302      	movs	r3, #2
 80025c4:	9300      	str	r3, [sp, #0]
 80025c6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025ca:	2105      	movs	r1, #5
 80025cc:	4845      	ldr	r0, [pc, #276]	; (80026e4 <FreqMenu_DrawPresetMenu+0x137c>)
 80025ce:	f00b f90f 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025d2:	7b3b      	ldrb	r3, [r7, #12]
 80025d4:	b29a      	uxth	r2, r3
 80025d6:	2300      	movs	r3, #0
 80025d8:	9301      	str	r3, [sp, #4]
 80025da:	2302      	movs	r3, #2
 80025dc:	9300      	str	r3, [sp, #0]
 80025de:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025e2:	2105      	movs	r1, #5
 80025e4:	4840      	ldr	r0, [pc, #256]	; (80026e8 <FreqMenu_DrawPresetMenu+0x1380>)
 80025e6:	f00b f903 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80025ea:	7afb      	ldrb	r3, [r7, #11]
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	2300      	movs	r3, #0
 80025f0:	9301      	str	r3, [sp, #4]
 80025f2:	2302      	movs	r3, #2
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80025fa:	2105      	movs	r1, #5
 80025fc:	483b      	ldr	r0, [pc, #236]	; (80026ec <FreqMenu_DrawPresetMenu+0x1384>)
 80025fe:	f00b f8f7 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002602:	7abb      	ldrb	r3, [r7, #10]
 8002604:	b29a      	uxth	r2, r3
 8002606:	2300      	movs	r3, #0
 8002608:	9301      	str	r3, [sp, #4]
 800260a:	2302      	movs	r3, #2
 800260c:	9300      	str	r3, [sp, #0]
 800260e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002612:	2105      	movs	r1, #5
 8002614:	4836      	ldr	r0, [pc, #216]	; (80026f0 <FreqMenu_DrawPresetMenu+0x1388>)
 8002616:	f00b f8eb 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800261a:	7a7b      	ldrb	r3, [r7, #9]
 800261c:	b29a      	uxth	r2, r3
 800261e:	2300      	movs	r3, #0
 8002620:	9301      	str	r3, [sp, #4]
 8002622:	2302      	movs	r3, #2
 8002624:	9300      	str	r3, [sp, #0]
 8002626:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800262a:	2105      	movs	r1, #5
 800262c:	4831      	ldr	r0, [pc, #196]	; (80026f4 <FreqMenu_DrawPresetMenu+0x138c>)
 800262e:	f00b f8df 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002632:	7bfb      	ldrb	r3, [r7, #15]
 8002634:	b29a      	uxth	r2, r3
 8002636:	2300      	movs	r3, #0
 8002638:	9301      	str	r3, [sp, #4]
 800263a:	2302      	movs	r3, #2
 800263c:	9300      	str	r3, [sp, #0]
 800263e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002642:	2178      	movs	r1, #120	; 0x78
 8002644:	482c      	ldr	r0, [pc, #176]	; (80026f8 <FreqMenu_DrawPresetMenu+0x1390>)
 8002646:	f00b f8d3 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800264a:	7bbb      	ldrb	r3, [r7, #14]
 800264c:	b29a      	uxth	r2, r3
 800264e:	2300      	movs	r3, #0
 8002650:	9301      	str	r3, [sp, #4]
 8002652:	2302      	movs	r3, #2
 8002654:	9300      	str	r3, [sp, #0]
 8002656:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800265a:	2178      	movs	r1, #120	; 0x78
 800265c:	4827      	ldr	r0, [pc, #156]	; (80026fc <FreqMenu_DrawPresetMenu+0x1394>)
 800265e:	f00b f8c7 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002662:	7b7b      	ldrb	r3, [r7, #13]
 8002664:	b29a      	uxth	r2, r3
 8002666:	2300      	movs	r3, #0
 8002668:	9301      	str	r3, [sp, #4]
 800266a:	2302      	movs	r3, #2
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002672:	2178      	movs	r1, #120	; 0x78
 8002674:	4822      	ldr	r0, [pc, #136]	; (8002700 <FreqMenu_DrawPresetMenu+0x1398>)
 8002676:	f00b f8bb 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800267a:	7b3b      	ldrb	r3, [r7, #12]
 800267c:	b29a      	uxth	r2, r3
 800267e:	2300      	movs	r3, #0
 8002680:	9301      	str	r3, [sp, #4]
 8002682:	2302      	movs	r3, #2
 8002684:	9300      	str	r3, [sp, #0]
 8002686:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800268a:	2178      	movs	r1, #120	; 0x78
 800268c:	481d      	ldr	r0, [pc, #116]	; (8002704 <FreqMenu_DrawPresetMenu+0x139c>)
 800268e:	f00b f8af 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002692:	7afb      	ldrb	r3, [r7, #11]
 8002694:	b29a      	uxth	r2, r3
 8002696:	2300      	movs	r3, #0
 8002698:	9301      	str	r3, [sp, #4]
 800269a:	2302      	movs	r3, #2
 800269c:	9300      	str	r3, [sp, #0]
 800269e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026a2:	2178      	movs	r1, #120	; 0x78
 80026a4:	4818      	ldr	r0, [pc, #96]	; (8002708 <FreqMenu_DrawPresetMenu+0x13a0>)
 80026a6:	f00b f8a3 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80026aa:	7abb      	ldrb	r3, [r7, #10]
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80026b2:	9301      	str	r3, [sp, #4]
 80026b4:	2302      	movs	r3, #2
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	2300      	movs	r3, #0
 80026ba:	2178      	movs	r1, #120	; 0x78
 80026bc:	4813      	ldr	r0, [pc, #76]	; (800270c <FreqMenu_DrawPresetMenu+0x13a4>)
 80026be:	f00b f897 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80026c2:	7a7b      	ldrb	r3, [r7, #9]
 80026c4:	b29a      	uxth	r2, r3
 80026c6:	2300      	movs	r3, #0
 80026c8:	9301      	str	r3, [sp, #4]
 80026ca:	2302      	movs	r3, #2
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80026d2:	2178      	movs	r1, #120	; 0x78
 80026d4:	480e      	ldr	r0, [pc, #56]	; (8002710 <FreqMenu_DrawPresetMenu+0x13a8>)
 80026d6:	f00b f88b 	bl	800d7f0 <ILI9341_Draw_Text>
			break;
 80026da:	e0d1      	b.n	8002880 <FreqMenu_DrawPresetMenu+0x1518>
 80026dc:	08012078 	.word	0x08012078
 80026e0:	08012080 	.word	0x08012080
 80026e4:	08012088 	.word	0x08012088
 80026e8:	08012090 	.word	0x08012090
 80026ec:	08012098 	.word	0x08012098
 80026f0:	080120a0 	.word	0x080120a0
 80026f4:	080120a8 	.word	0x080120a8
 80026f8:	080120b0 	.word	0x080120b0
 80026fc:	080120b8 	.word	0x080120b8
 8002700:	080120c0 	.word	0x080120c0
 8002704:	080120c8 	.word	0x080120c8
 8002708:	080120d0 	.word	0x080120d0
 800270c:	080120d8 	.word	0x080120d8
 8002710:	080120e0 	.word	0x080120e0
				ILI9341_Draw_Text("- 1Hz", 		5, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	b29a      	uxth	r2, r3
 8002718:	2300      	movs	r3, #0
 800271a:	9301      	str	r3, [sp, #4]
 800271c:	2302      	movs	r3, #2
 800271e:	9300      	str	r3, [sp, #0]
 8002720:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002724:	2105      	movs	r1, #5
 8002726:	4858      	ldr	r0, [pc, #352]	; (8002888 <FreqMenu_DrawPresetMenu+0x1520>)
 8002728:	f00b f862 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	5, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800272c:	7bbb      	ldrb	r3, [r7, #14]
 800272e:	b29a      	uxth	r2, r3
 8002730:	2300      	movs	r3, #0
 8002732:	9301      	str	r3, [sp, #4]
 8002734:	2302      	movs	r3, #2
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800273c:	2105      	movs	r1, #5
 800273e:	4853      	ldr	r0, [pc, #332]	; (800288c <FreqMenu_DrawPresetMenu+0x1524>)
 8002740:	f00b f856 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	5, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002744:	7b7b      	ldrb	r3, [r7, #13]
 8002746:	b29a      	uxth	r2, r3
 8002748:	2300      	movs	r3, #0
 800274a:	9301      	str	r3, [sp, #4]
 800274c:	2302      	movs	r3, #2
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002754:	2105      	movs	r1, #5
 8002756:	484e      	ldr	r0, [pc, #312]	; (8002890 <FreqMenu_DrawPresetMenu+0x1528>)
 8002758:	f00b f84a 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	5, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800275c:	7b3b      	ldrb	r3, [r7, #12]
 800275e:	b29a      	uxth	r2, r3
 8002760:	2300      	movs	r3, #0
 8002762:	9301      	str	r3, [sp, #4]
 8002764:	2302      	movs	r3, #2
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800276c:	2105      	movs	r1, #5
 800276e:	4849      	ldr	r0, [pc, #292]	; (8002894 <FreqMenu_DrawPresetMenu+0x152c>)
 8002770:	f00b f83e 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	5, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002774:	7afb      	ldrb	r3, [r7, #11]
 8002776:	b29a      	uxth	r2, r3
 8002778:	2300      	movs	r3, #0
 800277a:	9301      	str	r3, [sp, #4]
 800277c:	2302      	movs	r3, #2
 800277e:	9300      	str	r3, [sp, #0]
 8002780:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002784:	2105      	movs	r1, #5
 8002786:	4844      	ldr	r0, [pc, #272]	; (8002898 <FreqMenu_DrawPresetMenu+0x1530>)
 8002788:	f00b f832 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	5, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800278c:	7abb      	ldrb	r3, [r7, #10]
 800278e:	b29a      	uxth	r2, r3
 8002790:	2300      	movs	r3, #0
 8002792:	9301      	str	r3, [sp, #4]
 8002794:	2302      	movs	r3, #2
 8002796:	9300      	str	r3, [sp, #0]
 8002798:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800279c:	2105      	movs	r1, #5
 800279e:	483f      	ldr	r0, [pc, #252]	; (800289c <FreqMenu_DrawPresetMenu+0x1534>)
 80027a0:	f00b f826 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	5, menu_pos_y7, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027a4:	7a7b      	ldrb	r3, [r7, #9]
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	2300      	movs	r3, #0
 80027aa:	9301      	str	r3, [sp, #4]
 80027ac:	2302      	movs	r3, #2
 80027ae:	9300      	str	r3, [sp, #0]
 80027b0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027b4:	2105      	movs	r1, #5
 80027b6:	483a      	ldr	r0, [pc, #232]	; (80028a0 <FreqMenu_DrawPresetMenu+0x1538>)
 80027b8:	f00b f81a 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	b29a      	uxth	r2, r3
 80027c0:	2300      	movs	r3, #0
 80027c2:	9301      	str	r3, [sp, #4]
 80027c4:	2302      	movs	r3, #2
 80027c6:	9300      	str	r3, [sp, #0]
 80027c8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027cc:	2178      	movs	r1, #120	; 0x78
 80027ce:	4835      	ldr	r0, [pc, #212]	; (80028a4 <FreqMenu_DrawPresetMenu+0x153c>)
 80027d0:	f00b f80e 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027d4:	7bbb      	ldrb	r3, [r7, #14]
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	2300      	movs	r3, #0
 80027da:	9301      	str	r3, [sp, #4]
 80027dc:	2302      	movs	r3, #2
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027e4:	2178      	movs	r1, #120	; 0x78
 80027e6:	4830      	ldr	r0, [pc, #192]	; (80028a8 <FreqMenu_DrawPresetMenu+0x1540>)
 80027e8:	f00b f802 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80027ec:	7b7b      	ldrb	r3, [r7, #13]
 80027ee:	b29a      	uxth	r2, r3
 80027f0:	2300      	movs	r3, #0
 80027f2:	9301      	str	r3, [sp, #4]
 80027f4:	2302      	movs	r3, #2
 80027f6:	9300      	str	r3, [sp, #0]
 80027f8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80027fc:	2178      	movs	r1, #120	; 0x78
 80027fe:	482b      	ldr	r0, [pc, #172]	; (80028ac <FreqMenu_DrawPresetMenu+0x1544>)
 8002800:	f00a fff6 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002804:	7b3b      	ldrb	r3, [r7, #12]
 8002806:	b29a      	uxth	r2, r3
 8002808:	2300      	movs	r3, #0
 800280a:	9301      	str	r3, [sp, #4]
 800280c:	2302      	movs	r3, #2
 800280e:	9300      	str	r3, [sp, #0]
 8002810:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002814:	2178      	movs	r1, #120	; 0x78
 8002816:	4826      	ldr	r0, [pc, #152]	; (80028b0 <FreqMenu_DrawPresetMenu+0x1548>)
 8002818:	f00a ffea 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800281c:	7afb      	ldrb	r3, [r7, #11]
 800281e:	b29a      	uxth	r2, r3
 8002820:	2300      	movs	r3, #0
 8002822:	9301      	str	r3, [sp, #4]
 8002824:	2302      	movs	r3, #2
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800282c:	2178      	movs	r1, #120	; 0x78
 800282e:	4821      	ldr	r0, [pc, #132]	; (80028b4 <FreqMenu_DrawPresetMenu+0x154c>)
 8002830:	f00a ffde 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002834:	7abb      	ldrb	r3, [r7, #10]
 8002836:	b29a      	uxth	r2, r3
 8002838:	2300      	movs	r3, #0
 800283a:	9301      	str	r3, [sp, #4]
 800283c:	2302      	movs	r3, #2
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002844:	2178      	movs	r1, #120	; 0x78
 8002846:	481c      	ldr	r0, [pc, #112]	; (80028b8 <FreqMenu_DrawPresetMenu+0x1550>)
 8002848:	f00a ffd2 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800284c:	7a7b      	ldrb	r3, [r7, #9]
 800284e:	b29a      	uxth	r2, r3
 8002850:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002854:	9301      	str	r3, [sp, #4]
 8002856:	2302      	movs	r3, #2
 8002858:	9300      	str	r3, [sp, #0]
 800285a:	2300      	movs	r3, #0
 800285c:	2178      	movs	r1, #120	; 0x78
 800285e:	4817      	ldr	r0, [pc, #92]	; (80028bc <FreqMenu_DrawPresetMenu+0x1554>)
 8002860:	f00a ffc6 	bl	800d7f0 <ILI9341_Draw_Text>
			break;
 8002864:	bf00      	nop
 8002866:	e00b      	b.n	8002880 <FreqMenu_DrawPresetMenu+0x1518>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		5, 180, ERR_FGCOLOUR, 1, ERR_BGCOLOUR);
 8002868:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800286c:	9301      	str	r3, [sp, #4]
 800286e:	2301      	movs	r3, #1
 8002870:	9300      	str	r3, [sp, #0]
 8002872:	2300      	movs	r3, #0
 8002874:	22b4      	movs	r2, #180	; 0xb4
 8002876:	2105      	movs	r1, #5
 8002878:	4811      	ldr	r0, [pc, #68]	; (80028c0 <FreqMenu_DrawPresetMenu+0x1558>)
 800287a:	f00a ffb9 	bl	800d7f0 <ILI9341_Draw_Text>
}
 800287e:	e7ff      	b.n	8002880 <FreqMenu_DrawPresetMenu+0x1518>
 8002880:	bf00      	nop
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	08012078 	.word	0x08012078
 800288c:	08012080 	.word	0x08012080
 8002890:	08012088 	.word	0x08012088
 8002894:	08012090 	.word	0x08012090
 8002898:	08012098 	.word	0x08012098
 800289c:	080120a0 	.word	0x080120a0
 80028a0:	080120a8 	.word	0x080120a8
 80028a4:	080120b0 	.word	0x080120b0
 80028a8:	080120b8 	.word	0x080120b8
 80028ac:	080120c0 	.word	0x080120c0
 80028b0:	080120c8 	.word	0x080120c8
 80028b4:	080120d0 	.word	0x080120d0
 80028b8:	080120d8 	.word	0x080120d8
 80028bc:	080120e0 	.word	0x080120e0
 80028c0:	080120ec 	.word	0x080120ec

080028c4 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->ADJUST", 5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80028ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028ce:	9301      	str	r3, [sp, #4]
 80028d0:	2302      	movs	r3, #2
 80028d2:	9300      	str	r3, [sp, #0]
 80028d4:	2300      	movs	r3, #0
 80028d6:	220a      	movs	r2, #10
 80028d8:	2105      	movs	r1, #5
 80028da:	4804      	ldr	r0, [pc, #16]	; (80028ec <FreqMenu_DrawAdjustMenu+0x28>)
 80028dc:	f00a ff88 	bl	800d7f0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80028e0:	f7fe fb00 	bl	8000ee4 <DM_DisplayFormattedOutput>
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
*/

}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop
 80028ec:	0801211c 	.word	0x0801211c

080028f0 <FreqMenu_DrawSweepMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawSweepMenu()
{
 80028f0:	b5b0      	push	{r4, r5, r7, lr}
 80028f2:	b0a0      	sub	sp, #128	; 0x80
 80028f4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FREQ->SWEEP", 	5, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80028f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028fa:	9301      	str	r3, [sp, #4]
 80028fc:	2302      	movs	r3, #2
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	2300      	movs	r3, #0
 8002902:	220a      	movs	r2, #10
 8002904:	2105      	movs	r1, #5
 8002906:	48a0      	ldr	r0, [pc, #640]	; (8002b88 <FreqMenu_DrawSweepMenu+0x298>)
 8002908:	f00a ff72 	bl	800d7f0 <ILI9341_Draw_Text>


	// draw enabled status


	char enabled_text[20] = "";
 800290c:	2300      	movs	r3, #0
 800290e:	667b      	str	r3, [r7, #100]	; 0x64
 8002910:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002914:	2200      	movs	r2, #0
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	605a      	str	r2, [r3, #4]
 800291a:	609a      	str	r2, [r3, #8]
 800291c:	60da      	str	r2, [r3, #12]
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 800291e:	4b9b      	ldr	r3, [pc, #620]	; (8002b8c <FreqMenu_DrawSweepMenu+0x29c>)
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b01      	cmp	r3, #1
 8002928:	d109      	bne.n	800293e <FreqMenu_DrawSweepMenu+0x4e>
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  RUNNING");
 800292a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800292e:	4a98      	ldr	r2, [pc, #608]	; (8002b90 <FreqMenu_DrawSweepMenu+0x2a0>)
 8002930:	461c      	mov	r4, r3
 8002932:	4615      	mov	r5, r2
 8002934:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002936:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002938:	682b      	ldr	r3, [r5, #0]
 800293a:	7023      	strb	r3, [r4, #0]
 800293c:	e008      	b.n	8002950 <FreqMenu_DrawSweepMenu+0x60>
	}
	else
	{
		snprintf(enabled_text, sizeof(enabled_text), "STATUS:  STOPPED");
 800293e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002942:	4a94      	ldr	r2, [pc, #592]	; (8002b94 <FreqMenu_DrawSweepMenu+0x2a4>)
 8002944:	461c      	mov	r4, r3
 8002946:	4615      	mov	r5, r2
 8002948:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800294a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800294c:	682b      	ldr	r3, [r5, #0]
 800294e:	7023      	strb	r3, [r4, #0]
	}

	ILI9341_Draw_Text(enabled_text, 5, 40, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002950:	f107 0064 	add.w	r0, r7, #100	; 0x64
 8002954:	2300      	movs	r3, #0
 8002956:	9301      	str	r3, [sp, #4]
 8002958:	2302      	movs	r3, #2
 800295a:	9300      	str	r3, [sp, #0]
 800295c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002960:	2228      	movs	r2, #40	; 0x28
 8002962:	2105      	movs	r1, #5
 8002964:	f00a ff44 	bl	800d7f0 <ILI9341_Draw_Text>

	// draw output freq status
	char out_hertz[25] = "";
 8002968:	2300      	movs	r3, #0
 800296a:	64bb      	str	r3, [r7, #72]	; 0x48
 800296c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]
 800297c:	751a      	strb	r2, [r3, #20]
	snprintf(out_hertz, sizeof(out_hertz), "OUTPUT: %7.2f Hz", SM_GetOutputInHertz());
 800297e:	f002 fd39 	bl	80053f4 <SM_GetOutputInHertz>
 8002982:	ee10 3a10 	vmov	r3, s0
 8002986:	4618      	mov	r0, r3
 8002988:	f7fd fe06 	bl	8000598 <__aeabi_f2d>
 800298c:	4603      	mov	r3, r0
 800298e:	460c      	mov	r4, r1
 8002990:	f107 0048 	add.w	r0, r7, #72	; 0x48
 8002994:	e9cd 3400 	strd	r3, r4, [sp]
 8002998:	4a7f      	ldr	r2, [pc, #508]	; (8002b98 <FreqMenu_DrawSweepMenu+0x2a8>)
 800299a:	2119      	movs	r1, #25
 800299c:	f00c faaa 	bl	800eef4 <sniprintf>
	ILI9341_Draw_Text(out_hertz, 5, 60, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029a0:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80029a4:	2300      	movs	r3, #0
 80029a6:	9301      	str	r3, [sp, #4]
 80029a8:	2302      	movs	r3, #2
 80029aa:	9300      	str	r3, [sp, #0]
 80029ac:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029b0:	223c      	movs	r2, #60	; 0x3c
 80029b2:	2105      	movs	r1, #5
 80029b4:	f00a ff1c 	bl	800d7f0 <ILI9341_Draw_Text>
		//snprintf(dir_text, sizeof(dir_text), "DIRECTION:  N/A");
	}
	else
	{
*/
		ILI9341_Draw_Text("SWEEP MODE:", 5, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029b8:	2300      	movs	r3, #0
 80029ba:	9301      	str	r3, [sp, #4]
 80029bc:	2302      	movs	r3, #2
 80029be:	9300      	str	r3, [sp, #0]
 80029c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029c4:	2264      	movs	r2, #100	; 0x64
 80029c6:	2105      	movs	r1, #5
 80029c8:	4874      	ldr	r0, [pc, #464]	; (8002b9c <FreqMenu_DrawSweepMenu+0x2ac>)
 80029ca:	f00a ff11 	bl	800d7f0 <ILI9341_Draw_Text>

		// get direction
		if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 80029ce:	4b6f      	ldr	r3, [pc, #444]	; (8002b8c <FreqMenu_DrawSweepMenu+0x29c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0310 	and.w	r3, r3, #16
 80029d6:	2b10      	cmp	r3, #16
 80029d8:	d116      	bne.n	8002a08 <FreqMenu_DrawSweepMenu+0x118>
		{
			ILI9341_Draw_Text("UP", 170, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80029da:	2300      	movs	r3, #0
 80029dc:	9301      	str	r3, [sp, #4]
 80029de:	2302      	movs	r3, #2
 80029e0:	9300      	str	r3, [sp, #0]
 80029e2:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80029e6:	2264      	movs	r2, #100	; 0x64
 80029e8:	21aa      	movs	r1, #170	; 0xaa
 80029ea:	486d      	ldr	r0, [pc, #436]	; (8002ba0 <FreqMenu_DrawSweepMenu+0x2b0>)
 80029ec:	f00a ff00 	bl	800d7f0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("DOWN", 200, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80029f0:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80029f4:	9301      	str	r3, [sp, #4]
 80029f6:	2302      	movs	r3, #2
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	2300      	movs	r3, #0
 80029fc:	2264      	movs	r2, #100	; 0x64
 80029fe:	21c8      	movs	r1, #200	; 0xc8
 8002a00:	4868      	ldr	r0, [pc, #416]	; (8002ba4 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002a02:	f00a fef5 	bl	800d7f0 <ILI9341_Draw_Text>
 8002a06:	e015      	b.n	8002a34 <FreqMenu_DrawSweepMenu+0x144>
		}
		else
		{
			ILI9341_Draw_Text("DOWN", 200, 100, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a08:	2300      	movs	r3, #0
 8002a0a:	9301      	str	r3, [sp, #4]
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a14:	2264      	movs	r2, #100	; 0x64
 8002a16:	21c8      	movs	r1, #200	; 0xc8
 8002a18:	4862      	ldr	r0, [pc, #392]	; (8002ba4 <FreqMenu_DrawSweepMenu+0x2b4>)
 8002a1a:	f00a fee9 	bl	800d7f0 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("UP", 170, 100, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002a1e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002a22:	9301      	str	r3, [sp, #4]
 8002a24:	2302      	movs	r3, #2
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	2300      	movs	r3, #0
 8002a2a:	2264      	movs	r2, #100	; 0x64
 8002a2c:	21aa      	movs	r1, #170	; 0xaa
 8002a2e:	485c      	ldr	r0, [pc, #368]	; (8002ba0 <FreqMenu_DrawSweepMenu+0x2b0>)
 8002a30:	f00a fede 	bl	800d7f0 <ILI9341_Draw_Text>




	// draw rate status
	if(theCurrentEncoderSweepFunction == ENCODER_SWEEP_SPEED_FUNCTION)
 8002a34:	4b5c      	ldr	r3, [pc, #368]	; (8002ba8 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002a36:	781b      	ldrb	r3, [r3, #0]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10b      	bne.n	8002a54 <FreqMenu_DrawSweepMenu+0x164>
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002a3c:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002a40:	9301      	str	r3, [sp, #4]
 8002a42:	2302      	movs	r3, #2
 8002a44:	9300      	str	r3, [sp, #0]
 8002a46:	2300      	movs	r3, #0
 8002a48:	2278      	movs	r2, #120	; 0x78
 8002a4a:	2105      	movs	r1, #5
 8002a4c:	4857      	ldr	r0, [pc, #348]	; (8002bac <FreqMenu_DrawSweepMenu+0x2bc>)
 8002a4e:	f00a fecf 	bl	800d7f0 <ILI9341_Draw_Text>
 8002a52:	e00a      	b.n	8002a6a <FreqMenu_DrawSweepMenu+0x17a>
	}
	else
	{
		ILI9341_Draw_Text("SWEEP SPEED:", 5, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a54:	2300      	movs	r3, #0
 8002a56:	9301      	str	r3, [sp, #4]
 8002a58:	2302      	movs	r3, #2
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002a60:	2278      	movs	r2, #120	; 0x78
 8002a62:	2105      	movs	r1, #5
 8002a64:	4851      	ldr	r0, [pc, #324]	; (8002bac <FreqMenu_DrawSweepMenu+0x2bc>)
 8002a66:	f00a fec3 	bl	800d7f0 <ILI9341_Draw_Text>
	}
	char arr_text[25] = "";
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002a6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a72:	2200      	movs	r2, #0
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	605a      	str	r2, [r3, #4]
 8002a78:	609a      	str	r2, [r3, #8]
 8002a7a:	60da      	str	r2, [r3, #12]
 8002a7c:	611a      	str	r2, [r3, #16]
 8002a7e:	751a      	strb	r2, [r3, #20]
	snprintf(arr_text, sizeof(arr_text), "%8.3f Hz", calculated_sweep_in_hertz);
 8002a80:	4b4b      	ldr	r3, [pc, #300]	; (8002bb0 <FreqMenu_DrawSweepMenu+0x2c0>)
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fd fd87 	bl	8000598 <__aeabi_f2d>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	460c      	mov	r4, r1
 8002a8e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002a92:	e9cd 3400 	strd	r3, r4, [sp]
 8002a96:	4a47      	ldr	r2, [pc, #284]	; (8002bb4 <FreqMenu_DrawSweepMenu+0x2c4>)
 8002a98:	2119      	movs	r1, #25
 8002a9a:	f00c fa2b 	bl	800eef4 <sniprintf>
	ILI9341_Draw_Text(arr_text, 182, 120, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002a9e:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	9301      	str	r3, [sp, #4]
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002aae:	2278      	movs	r2, #120	; 0x78
 8002ab0:	21b6      	movs	r1, #182	; 0xb6
 8002ab2:	f00a fe9d 	bl	800d7f0 <ILI9341_Draw_Text>


	// draw upper sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_UP) )
 8002ab6:	4b3c      	ldr	r3, [pc, #240]	; (8002ba8 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d10f      	bne.n	8002ade <FreqMenu_DrawSweepMenu+0x1ee>
 8002abe:	4b3e      	ldr	r3, [pc, #248]	; (8002bb8 <FreqMenu_DrawSweepMenu+0x2c8>)
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d10b      	bne.n	8002ade <FreqMenu_DrawSweepMenu+0x1ee>
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);	// highlighted
 8002ac6:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002aca:	9301      	str	r3, [sp, #4]
 8002acc:	2302      	movs	r3, #2
 8002ace:	9300      	str	r3, [sp, #0]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	228c      	movs	r2, #140	; 0x8c
 8002ad4:	2105      	movs	r1, #5
 8002ad6:	4839      	ldr	r0, [pc, #228]	; (8002bbc <FreqMenu_DrawSweepMenu+0x2cc>)
 8002ad8:	f00a fe8a 	bl	800d7f0 <ILI9341_Draw_Text>
 8002adc:	e00a      	b.n	8002af4 <FreqMenu_DrawSweepMenu+0x204>
		//ILI9341_Draw_Arrow(ARROW_UP, 280, 120, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP UPPER:", 5, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ade:	2300      	movs	r3, #0
 8002ae0:	9301      	str	r3, [sp, #4]
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	9300      	str	r3, [sp, #0]
 8002ae6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002aea:	228c      	movs	r2, #140	; 0x8c
 8002aec:	2105      	movs	r1, #5
 8002aee:	4833      	ldr	r0, [pc, #204]	; (8002bbc <FreqMenu_DrawSweepMenu+0x2cc>)
 8002af0:	f00a fe7e 	bl	800d7f0 <ILI9341_Draw_Text>
	}
	char sweep_lower_text[20] = "";
 8002af4:	2300      	movs	r3, #0
 8002af6:	61bb      	str	r3, [r7, #24]
 8002af8:	f107 031c 	add.w	r3, r7, #28
 8002afc:	2200      	movs	r2, #0
 8002afe:	601a      	str	r2, [r3, #0]
 8002b00:	605a      	str	r2, [r3, #4]
 8002b02:	609a      	str	r2, [r3, #8]
 8002b04:	60da      	str	r2, [r3, #12]
	snprintf(sweep_lower_text, sizeof(sweep_lower_text), "%9.2f  Hz", SM_ConvertPeriodToHertz(sweep_lower_bounds_shortest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP);
 8002b06:	4b2e      	ldr	r3, [pc, #184]	; (8002bc0 <FreqMenu_DrawSweepMenu+0x2d0>)
 8002b08:	edd3 7a00 	vldr	s15, [r3]
 8002b0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b10:	4b2c      	ldr	r3, [pc, #176]	; (8002bc4 <FreqMenu_DrawSweepMenu+0x2d4>)
 8002b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b14:	b29b      	uxth	r3, r3
 8002b16:	4619      	mov	r1, r3
 8002b18:	ee17 0a90 	vmov	r0, s15
 8002b1c:	f002 fcae 	bl	800547c <SM_ConvertPeriodToHertz>
 8002b20:	eeb0 7a40 	vmov.f32	s14, s0
 8002b24:	eddf 7a28 	vldr	s15, [pc, #160]	; 8002bc8 <FreqMenu_DrawSweepMenu+0x2d8>
 8002b28:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002b2c:	ee16 0a90 	vmov	r0, s13
 8002b30:	f7fd fd32 	bl	8000598 <__aeabi_f2d>
 8002b34:	4603      	mov	r3, r0
 8002b36:	460c      	mov	r4, r1
 8002b38:	f107 0018 	add.w	r0, r7, #24
 8002b3c:	e9cd 3400 	strd	r3, r4, [sp]
 8002b40:	4a22      	ldr	r2, [pc, #136]	; (8002bcc <FreqMenu_DrawSweepMenu+0x2dc>)
 8002b42:	2114      	movs	r1, #20
 8002b44:	f00c f9d6 	bl	800eef4 <sniprintf>
	ILI9341_Draw_Text(sweep_lower_text, 158, 140, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002b48:	f107 0018 	add.w	r0, r7, #24
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	9301      	str	r3, [sp, #4]
 8002b50:	2302      	movs	r3, #2
 8002b52:	9300      	str	r3, [sp, #0]
 8002b54:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002b58:	228c      	movs	r2, #140	; 0x8c
 8002b5a:	219e      	movs	r1, #158	; 0x9e
 8002b5c:	f00a fe48 	bl	800d7f0 <ILI9341_Draw_Text>


	// draw lower sweep bounds
	if( (theCurrentEncoderSweepFunction == ENCODER_SWEEP_LIMIT_FUNCTION) && (active_sweep_mode == SWEEP_MODE_DOWN) )
 8002b60:	4b11      	ldr	r3, [pc, #68]	; (8002ba8 <FreqMenu_DrawSweepMenu+0x2b8>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d135      	bne.n	8002bd4 <FreqMenu_DrawSweepMenu+0x2e4>
 8002b68:	4b13      	ldr	r3, [pc, #76]	; (8002bb8 <FreqMenu_DrawSweepMenu+0x2c8>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d131      	bne.n	8002bd4 <FreqMenu_DrawSweepMenu+0x2e4>
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR); 	// highlighted
 8002b70:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002b74:	9301      	str	r3, [sp, #4]
 8002b76:	2302      	movs	r3, #2
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	22a0      	movs	r2, #160	; 0xa0
 8002b7e:	2105      	movs	r1, #5
 8002b80:	4813      	ldr	r0, [pc, #76]	; (8002bd0 <FreqMenu_DrawSweepMenu+0x2e0>)
 8002b82:	f00a fe35 	bl	800d7f0 <ILI9341_Draw_Text>
 8002b86:	e030      	b.n	8002bea <FreqMenu_DrawSweepMenu+0x2fa>
 8002b88:	08012130 	.word	0x08012130
 8002b8c:	40000c00 	.word	0x40000c00
 8002b90:	08012144 	.word	0x08012144
 8002b94:	08012158 	.word	0x08012158
 8002b98:	0801216c 	.word	0x0801216c
 8002b9c:	08012180 	.word	0x08012180
 8002ba0:	0801218c 	.word	0x0801218c
 8002ba4:	08012190 	.word	0x08012190
 8002ba8:	20001a15 	.word	0x20001a15
 8002bac:	08012198 	.word	0x08012198
 8002bb0:	20001a30 	.word	0x20001a30
 8002bb4:	080121a8 	.word	0x080121a8
 8002bb8:	20001a14 	.word	0x20001a14
 8002bbc:	080121b4 	.word	0x080121b4
 8002bc0:	20000000 	.word	0x20000000
 8002bc4:	40013400 	.word	0x40013400
 8002bc8:	42f00000 	.word	0x42f00000
 8002bcc:	080121c4 	.word	0x080121c4
 8002bd0:	080121d0 	.word	0x080121d0
		//ILI9341_Draw_Arrow(ARROW_DOWN, 280, 130, 10, BLACK);
	}
	else
	{
		ILI9341_Draw_Text("SWEEP LOWER:", 5, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	9301      	str	r3, [sp, #4]
 8002bd8:	2302      	movs	r3, #2
 8002bda:	9300      	str	r3, [sp, #0]
 8002bdc:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002be0:	22a0      	movs	r2, #160	; 0xa0
 8002be2:	2105      	movs	r1, #5
 8002be4:	484d      	ldr	r0, [pc, #308]	; (8002d1c <FreqMenu_DrawSweepMenu+0x42c>)
 8002be6:	f00a fe03 	bl	800d7f0 <ILI9341_Draw_Text>
	}
	char sweep_upper_text[20] = "";
 8002bea:	2300      	movs	r3, #0
 8002bec:	607b      	str	r3, [r7, #4]
 8002bee:	f107 0308 	add.w	r3, r7, #8
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	605a      	str	r2, [r3, #4]
 8002bf8:	609a      	str	r2, [r3, #8]
 8002bfa:	60da      	str	r2, [r3, #12]
	snprintf(sweep_upper_text, sizeof(sweep_upper_text), "%8.2f  Hz", SM_ConvertPeriodToHertz(sweep_upper_bounds_longest_output_arr, OUTPUT_TIMER->PSC) /SM_FSAMP );
 8002bfc:	4b48      	ldr	r3, [pc, #288]	; (8002d20 <FreqMenu_DrawSweepMenu+0x430>)
 8002bfe:	edd3 7a00 	vldr	s15, [r3]
 8002c02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c06:	4b47      	ldr	r3, [pc, #284]	; (8002d24 <FreqMenu_DrawSweepMenu+0x434>)
 8002c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c0a:	b29b      	uxth	r3, r3
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	ee17 0a90 	vmov	r0, s15
 8002c12:	f002 fc33 	bl	800547c <SM_ConvertPeriodToHertz>
 8002c16:	eeb0 7a40 	vmov.f32	s14, s0
 8002c1a:	eddf 7a43 	vldr	s15, [pc, #268]	; 8002d28 <FreqMenu_DrawSweepMenu+0x438>
 8002c1e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002c22:	ee16 0a90 	vmov	r0, s13
 8002c26:	f7fd fcb7 	bl	8000598 <__aeabi_f2d>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	460c      	mov	r4, r1
 8002c2e:	1d38      	adds	r0, r7, #4
 8002c30:	e9cd 3400 	strd	r3, r4, [sp]
 8002c34:	4a3d      	ldr	r2, [pc, #244]	; (8002d2c <FreqMenu_DrawSweepMenu+0x43c>)
 8002c36:	2114      	movs	r1, #20
 8002c38:	f00c f95c 	bl	800eef4 <sniprintf>
	ILI9341_Draw_Text(sweep_upper_text, 170, 160, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002c3c:	1d38      	adds	r0, r7, #4
 8002c3e:	2300      	movs	r3, #0
 8002c40:	9301      	str	r3, [sp, #4]
 8002c42:	2302      	movs	r3, #2
 8002c44:	9300      	str	r3, [sp, #0]
 8002c46:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002c4a:	22a0      	movs	r2, #160	; 0xa0
 8002c4c:	21aa      	movs	r1, #170	; 0xaa
 8002c4e:	f00a fdcf 	bl	800d7f0 <ILI9341_Draw_Text>


	// draw bottom menu button text
	if((SWEEP_TIMER->CR1 & TIM_CR1_CEN) == TIM_CR1_CEN)
 8002c52:	4b37      	ldr	r3, [pc, #220]	; (8002d30 <FreqMenu_DrawSweepMenu+0x440>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 0301 	and.w	r3, r3, #1
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d10b      	bne.n	8002c76 <FreqMenu_DrawSweepMenu+0x386>
		ILI9341_Draw_Text("PAUSE ", 6, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002c5e:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002c62:	9301      	str	r3, [sp, #4]
 8002c64:	2302      	movs	r3, #2
 8002c66:	9300      	str	r3, [sp, #0]
 8002c68:	2300      	movs	r3, #0
 8002c6a:	22d5      	movs	r2, #213	; 0xd5
 8002c6c:	2106      	movs	r1, #6
 8002c6e:	4831      	ldr	r0, [pc, #196]	; (8002d34 <FreqMenu_DrawSweepMenu+0x444>)
 8002c70:	f00a fdbe 	bl	800d7f0 <ILI9341_Draw_Text>
 8002c74:	e00a      	b.n	8002c8c <FreqMenu_DrawSweepMenu+0x39c>
	else
		ILI9341_Draw_Text("RESUME", 5, 213, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002c76:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002c7a:	9301      	str	r3, [sp, #4]
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	9300      	str	r3, [sp, #0]
 8002c80:	2300      	movs	r3, #0
 8002c82:	22d5      	movs	r2, #213	; 0xd5
 8002c84:	2105      	movs	r1, #5
 8002c86:	482c      	ldr	r0, [pc, #176]	; (8002d38 <FreqMenu_DrawSweepMenu+0x448>)
 8002c88:	f00a fdb2 	bl	800d7f0 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	105,	204, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002c8c:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002c90:	9301      	str	r3, [sp, #4]
 8002c92:	2302      	movs	r3, #2
 8002c94:	9300      	str	r3, [sp, #0]
 8002c96:	2300      	movs	r3, #0
 8002c98:	22cc      	movs	r2, #204	; 0xcc
 8002c9a:	2169      	movs	r1, #105	; 0x69
 8002c9c:	4827      	ldr	r0, [pc, #156]	; (8002d3c <FreqMenu_DrawSweepMenu+0x44c>)
 8002c9e:	f00a fda7 	bl	800d7f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("MODE",	98, 	222, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002ca2:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002ca6:	9301      	str	r3, [sp, #4]
 8002ca8:	2302      	movs	r3, #2
 8002caa:	9300      	str	r3, [sp, #0]
 8002cac:	2300      	movs	r3, #0
 8002cae:	22de      	movs	r2, #222	; 0xde
 8002cb0:	2162      	movs	r1, #98	; 0x62
 8002cb2:	4823      	ldr	r0, [pc, #140]	; (8002d40 <FreqMenu_DrawSweepMenu+0x450>)
 8002cb4:	f00a fd9c 	bl	800d7f0 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	183,	204, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002cb8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002cbc:	9301      	str	r3, [sp, #4]
 8002cbe:	2302      	movs	r3, #2
 8002cc0:	9300      	str	r3, [sp, #0]
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	22cc      	movs	r2, #204	; 0xcc
 8002cc6:	21b7      	movs	r1, #183	; 0xb7
 8002cc8:	481c      	ldr	r0, [pc, #112]	; (8002d3c <FreqMenu_DrawSweepMenu+0x44c>)
 8002cca:	f00a fd91 	bl	800d7f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SPEED",	173, 	222, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002cce:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002cd2:	9301      	str	r3, [sp, #4]
 8002cd4:	2302      	movs	r3, #2
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	2300      	movs	r3, #0
 8002cda:	22de      	movs	r2, #222	; 0xde
 8002cdc:	21ad      	movs	r1, #173	; 0xad
 8002cde:	4819      	ldr	r0, [pc, #100]	; (8002d44 <FreqMenu_DrawSweepMenu+0x454>)
 8002ce0:	f00a fd86 	bl	800d7f0 <ILI9341_Draw_Text>

	ILI9341_Draw_Text("SET", 	263, 	204, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002ce4:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002ce8:	9301      	str	r3, [sp, #4]
 8002cea:	2302      	movs	r3, #2
 8002cec:	9300      	str	r3, [sp, #0]
 8002cee:	2300      	movs	r3, #0
 8002cf0:	22cc      	movs	r2, #204	; 0xcc
 8002cf2:	f240 1107 	movw	r1, #263	; 0x107
 8002cf6:	4811      	ldr	r0, [pc, #68]	; (8002d3c <FreqMenu_DrawSweepMenu+0x44c>)
 8002cf8:	f00a fd7a 	bl	800d7f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("LIMIT", 	252, 	222, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002cfc:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002d00:	9301      	str	r3, [sp, #4]
 8002d02:	2302      	movs	r3, #2
 8002d04:	9300      	str	r3, [sp, #0]
 8002d06:	2300      	movs	r3, #0
 8002d08:	22de      	movs	r2, #222	; 0xde
 8002d0a:	21fc      	movs	r1, #252	; 0xfc
 8002d0c:	480e      	ldr	r0, [pc, #56]	; (8002d48 <FreqMenu_DrawSweepMenu+0x458>)
 8002d0e:	f00a fd6f 	bl	800d7f0 <ILI9341_Draw_Text>
}
 8002d12:	bf00      	nop
 8002d14:	3778      	adds	r7, #120	; 0x78
 8002d16:	46bd      	mov	sp, r7
 8002d18:	bdb0      	pop	{r4, r5, r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	080121d0 	.word	0x080121d0
 8002d20:	20000004 	.word	0x20000004
 8002d24:	40013400 	.word	0x40013400
 8002d28:	42f00000 	.word	0x42f00000
 8002d2c:	080121e0 	.word	0x080121e0
 8002d30:	40000c00 	.word	0x40000c00
 8002d34:	080121ec 	.word	0x080121ec
 8002d38:	080121f4 	.word	0x080121f4
 8002d3c:	080121fc 	.word	0x080121fc
 8002d40:	08012200 	.word	0x08012200
 8002d44:	08012208 	.word	0x08012208
 8002d48:	08012210 	.word	0x08012210

08002d4c <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d007      	beq.n	8002d6c <FuncMenu_DrawMenu+0x20>
 8002d5c:	2b03      	cmp	r3, #3
 8002d5e:	d009      	beq.n	8002d74 <FuncMenu_DrawMenu+0x28>
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d000      	beq.n	8002d66 <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_SYNC_MENU:
			FuncMenu_DrawOutputMenu(SYNC_CHANNEL);
			break;

		default:
			break;
 8002d64:	e00a      	b.n	8002d7c <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawMainMenu();
 8002d66:	f000 f80d 	bl	8002d84 <FuncMenu_DrawMainMenu>
			break;
 8002d6a:	e007      	b.n	8002d7c <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SIGNAL_CHANNEL);
 8002d6c:	2000      	movs	r0, #0
 8002d6e:	f000 f851 	bl	8002e14 <FuncMenu_DrawOutputMenu>
			break;
 8002d72:	e003      	b.n	8002d7c <FuncMenu_DrawMenu+0x30>
			FuncMenu_DrawOutputMenu(SYNC_CHANNEL);
 8002d74:	2001      	movs	r0, #1
 8002d76:	f000 f84d 	bl	8002e14 <FuncMenu_DrawOutputMenu>
			break;
 8002d7a:	bf00      	nop

	}
}
 8002d7c:	bf00      	nop
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->FUNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002d8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d8e:	9301      	str	r3, [sp, #4]
 8002d90:	2302      	movs	r3, #2
 8002d92:	9300      	str	r3, [sp, #0]
 8002d94:	2300      	movs	r3, #0
 8002d96:	220a      	movs	r2, #10
 8002d98:	210a      	movs	r1, #10
 8002d9a:	481a      	ldr	r0, [pc, #104]	; (8002e04 <FuncMenu_DrawMainMenu+0x80>)
 8002d9c:	f00a fd28 	bl	800d7f0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8002da0:	f7fe f8a0 	bl	8000ee4 <DM_DisplayFormattedOutput>

 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5,   210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8002da4:	f240 23fd 	movw	r3, #765	; 0x2fd
 8002da8:	9301      	str	r3, [sp, #4]
 8002daa:	2302      	movs	r3, #2
 8002dac:	9300      	str	r3, [sp, #0]
 8002dae:	2300      	movs	r3, #0
 8002db0:	22d2      	movs	r2, #210	; 0xd2
 8002db2:	2105      	movs	r1, #5
 8002db4:	4814      	ldr	r0, [pc, #80]	; (8002e08 <FuncMenu_DrawMainMenu+0x84>)
 8002db6:	f00a fd1b 	bl	800d7f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC", 	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8002dba:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8002dbe:	9301      	str	r3, [sp, #4]
 8002dc0:	2302      	movs	r3, #2
 8002dc2:	9300      	str	r3, [sp, #0]
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	22d2      	movs	r2, #210	; 0xd2
 8002dc8:	2161      	movs	r1, #97	; 0x61
 8002dca:	4810      	ldr	r0, [pc, #64]	; (8002e0c <FuncMenu_DrawMainMenu+0x88>)
 8002dcc:	f00a fd10 	bl	800d7f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8002dd0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002dd4:	9301      	str	r3, [sp, #4]
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	9300      	str	r3, [sp, #0]
 8002dda:	2300      	movs	r3, #0
 8002ddc:	22d2      	movs	r2, #210	; 0xd2
 8002dde:	21af      	movs	r1, #175	; 0xaf
 8002de0:	480b      	ldr	r0, [pc, #44]	; (8002e10 <FuncMenu_DrawMainMenu+0x8c>)
 8002de2:	f00a fd05 	bl	800d7f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 8002de6:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8002dea:	9301      	str	r3, [sp, #4]
 8002dec:	2302      	movs	r3, #2
 8002dee:	9300      	str	r3, [sp, #0]
 8002df0:	2300      	movs	r3, #0
 8002df2:	22d2      	movs	r2, #210	; 0xd2
 8002df4:	f44f 7182 	mov.w	r1, #260	; 0x104
 8002df8:	4805      	ldr	r0, [pc, #20]	; (8002e10 <FuncMenu_DrawMainMenu+0x8c>)
 8002dfa:	f00a fcf9 	bl	800d7f0 <ILI9341_Draw_Text>
}
 8002dfe:	bf00      	nop
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	08012218 	.word	0x08012218
 8002e08:	08012224 	.word	0x08012224
 8002e0c:	0801222c 	.word	0x0801222c
 8002e10:	08012234 	.word	0x08012234

08002e14 <FuncMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawOutputMenu(eOutputChannel_t pOutChan)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af02      	add	r7, sp, #8
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	71fb      	strb	r3, [r7, #7]
	if(SYNC_CHANNEL)
		ILI9341_Draw_Text("OUT->FUNC->SYNC", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8002e1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e22:	9301      	str	r3, [sp, #4]
 8002e24:	2302      	movs	r3, #2
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	2300      	movs	r3, #0
 8002e2a:	220a      	movs	r2, #10
 8002e2c:	210a      	movs	r1, #10
 8002e2e:	48b9      	ldr	r0, [pc, #740]	; (8003114 <FuncMenu_DrawOutputMenu+0x300>)
 8002e30:	f00a fcde 	bl	800d7f0 <ILI9341_Draw_Text>
	else
		ILI9341_Draw_Text("OUT->FUNC->SIG", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(pOutChan)->func_profile;
 8002e34:	79fb      	ldrb	r3, [r7, #7]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f002 faaa 	bl	8005390 <SM_GetOutputChannel>
 8002e3c:	4603      	mov	r3, r0
 8002e3e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8002e42:	60fb      	str	r3, [r7, #12]
	if(func_profileTmp)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f000 81b5 	beq.w	80031b6 <FuncMenu_DrawOutputMenu+0x3a2>
	{
		switch(func_profileTmp->func)
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b05      	cmp	r3, #5
 8002e52:	f200 81b0 	bhi.w	80031b6 <FuncMenu_DrawOutputMenu+0x3a2>
 8002e56:	a201      	add	r2, pc, #4	; (adr r2, 8002e5c <FuncMenu_DrawOutputMenu+0x48>)
 8002e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5c:	08002e75 	.word	0x08002e75
 8002e60:	08002efb 	.word	0x08002efb
 8002e64:	08002f81 	.word	0x08002f81
 8002e68:	08003007 	.word	0x08003007
 8002e6c:	0800308d 	.word	0x0800308d
 8002e70:	08003131 	.word	0x08003131
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002e74:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002e78:	9301      	str	r3, [sp, #4]
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	9300      	str	r3, [sp, #0]
 8002e7e:	2300      	movs	r3, #0
 8002e80:	2232      	movs	r2, #50	; 0x32
 8002e82:	210a      	movs	r1, #10
 8002e84:	48a4      	ldr	r0, [pc, #656]	; (8003118 <FuncMenu_DrawOutputMenu+0x304>)
 8002e86:	f00a fcb3 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	9301      	str	r3, [sp, #4]
 8002e8e:	2302      	movs	r3, #2
 8002e90:	9300      	str	r3, [sp, #0]
 8002e92:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002e96:	2246      	movs	r2, #70	; 0x46
 8002e98:	210a      	movs	r1, #10
 8002e9a:	48a0      	ldr	r0, [pc, #640]	; (800311c <FuncMenu_DrawOutputMenu+0x308>)
 8002e9c:	f00a fca8 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	9301      	str	r3, [sp, #4]
 8002ea4:	2302      	movs	r3, #2
 8002ea6:	9300      	str	r3, [sp, #0]
 8002ea8:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002eac:	225a      	movs	r2, #90	; 0x5a
 8002eae:	210a      	movs	r1, #10
 8002eb0:	489b      	ldr	r0, [pc, #620]	; (8003120 <FuncMenu_DrawOutputMenu+0x30c>)
 8002eb2:	f00a fc9d 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	9301      	str	r3, [sp, #4]
 8002eba:	2302      	movs	r3, #2
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ec2:	226e      	movs	r2, #110	; 0x6e
 8002ec4:	210a      	movs	r1, #10
 8002ec6:	4897      	ldr	r0, [pc, #604]	; (8003124 <FuncMenu_DrawOutputMenu+0x310>)
 8002ec8:	f00a fc92 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ecc:	2300      	movs	r3, #0
 8002ece:	9301      	str	r3, [sp, #4]
 8002ed0:	2302      	movs	r3, #2
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ed8:	2282      	movs	r2, #130	; 0x82
 8002eda:	210a      	movs	r1, #10
 8002edc:	4892      	ldr	r0, [pc, #584]	; (8003128 <FuncMenu_DrawOutputMenu+0x314>)
 8002ede:	f00a fc87 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	9301      	str	r3, [sp, #4]
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002eee:	2296      	movs	r2, #150	; 0x96
 8002ef0:	210a      	movs	r1, #10
 8002ef2:	488e      	ldr	r0, [pc, #568]	; (800312c <FuncMenu_DrawOutputMenu+0x318>)
 8002ef4:	f00a fc7c 	bl	800d7f0 <ILI9341_Draw_Text>
				break;
 8002ef8:	e15d      	b.n	80031b6 <FuncMenu_DrawOutputMenu+0x3a2>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002efa:	2300      	movs	r3, #0
 8002efc:	9301      	str	r3, [sp, #4]
 8002efe:	2302      	movs	r3, #2
 8002f00:	9300      	str	r3, [sp, #0]
 8002f02:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f06:	2232      	movs	r2, #50	; 0x32
 8002f08:	210a      	movs	r1, #10
 8002f0a:	4883      	ldr	r0, [pc, #524]	; (8003118 <FuncMenu_DrawOutputMenu+0x304>)
 8002f0c:	f00a fc70 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002f10:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002f14:	9301      	str	r3, [sp, #4]
 8002f16:	2302      	movs	r3, #2
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	2246      	movs	r2, #70	; 0x46
 8002f1e:	210a      	movs	r1, #10
 8002f20:	487e      	ldr	r0, [pc, #504]	; (800311c <FuncMenu_DrawOutputMenu+0x308>)
 8002f22:	f00a fc65 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f26:	2300      	movs	r3, #0
 8002f28:	9301      	str	r3, [sp, #4]
 8002f2a:	2302      	movs	r3, #2
 8002f2c:	9300      	str	r3, [sp, #0]
 8002f2e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f32:	225a      	movs	r2, #90	; 0x5a
 8002f34:	210a      	movs	r1, #10
 8002f36:	487a      	ldr	r0, [pc, #488]	; (8003120 <FuncMenu_DrawOutputMenu+0x30c>)
 8002f38:	f00a fc5a 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	9301      	str	r3, [sp, #4]
 8002f40:	2302      	movs	r3, #2
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f48:	226e      	movs	r2, #110	; 0x6e
 8002f4a:	210a      	movs	r1, #10
 8002f4c:	4875      	ldr	r0, [pc, #468]	; (8003124 <FuncMenu_DrawOutputMenu+0x310>)
 8002f4e:	f00a fc4f 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f52:	2300      	movs	r3, #0
 8002f54:	9301      	str	r3, [sp, #4]
 8002f56:	2302      	movs	r3, #2
 8002f58:	9300      	str	r3, [sp, #0]
 8002f5a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f5e:	2282      	movs	r2, #130	; 0x82
 8002f60:	210a      	movs	r1, #10
 8002f62:	4871      	ldr	r0, [pc, #452]	; (8003128 <FuncMenu_DrawOutputMenu+0x314>)
 8002f64:	f00a fc44 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f68:	2300      	movs	r3, #0
 8002f6a:	9301      	str	r3, [sp, #4]
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	9300      	str	r3, [sp, #0]
 8002f70:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f74:	2296      	movs	r2, #150	; 0x96
 8002f76:	210a      	movs	r1, #10
 8002f78:	486c      	ldr	r0, [pc, #432]	; (800312c <FuncMenu_DrawOutputMenu+0x318>)
 8002f7a:	f00a fc39 	bl	800d7f0 <ILI9341_Draw_Text>
				break;
 8002f7e:	e11a      	b.n	80031b6 <FuncMenu_DrawOutputMenu+0x3a2>
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f80:	2300      	movs	r3, #0
 8002f82:	9301      	str	r3, [sp, #4]
 8002f84:	2302      	movs	r3, #2
 8002f86:	9300      	str	r3, [sp, #0]
 8002f88:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002f8c:	2232      	movs	r2, #50	; 0x32
 8002f8e:	210a      	movs	r1, #10
 8002f90:	4861      	ldr	r0, [pc, #388]	; (8003118 <FuncMenu_DrawOutputMenu+0x304>)
 8002f92:	f00a fc2d 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002f96:	2300      	movs	r3, #0
 8002f98:	9301      	str	r3, [sp, #4]
 8002f9a:	2302      	movs	r3, #2
 8002f9c:	9300      	str	r3, [sp, #0]
 8002f9e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002fa2:	2246      	movs	r2, #70	; 0x46
 8002fa4:	210a      	movs	r1, #10
 8002fa6:	485d      	ldr	r0, [pc, #372]	; (800311c <FuncMenu_DrawOutputMenu+0x308>)
 8002fa8:	f00a fc22 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8002fac:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 8002fb0:	9301      	str	r3, [sp, #4]
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	9300      	str	r3, [sp, #0]
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	225a      	movs	r2, #90	; 0x5a
 8002fba:	210a      	movs	r1, #10
 8002fbc:	4858      	ldr	r0, [pc, #352]	; (8003120 <FuncMenu_DrawOutputMenu+0x30c>)
 8002fbe:	f00a fc17 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	9301      	str	r3, [sp, #4]
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	9300      	str	r3, [sp, #0]
 8002fca:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002fce:	226e      	movs	r2, #110	; 0x6e
 8002fd0:	210a      	movs	r1, #10
 8002fd2:	4854      	ldr	r0, [pc, #336]	; (8003124 <FuncMenu_DrawOutputMenu+0x310>)
 8002fd4:	f00a fc0c 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002fd8:	2300      	movs	r3, #0
 8002fda:	9301      	str	r3, [sp, #4]
 8002fdc:	2302      	movs	r3, #2
 8002fde:	9300      	str	r3, [sp, #0]
 8002fe0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002fe4:	2282      	movs	r2, #130	; 0x82
 8002fe6:	210a      	movs	r1, #10
 8002fe8:	484f      	ldr	r0, [pc, #316]	; (8003128 <FuncMenu_DrawOutputMenu+0x314>)
 8002fea:	f00a fc01 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8002fee:	2300      	movs	r3, #0
 8002ff0:	9301      	str	r3, [sp, #4]
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	9300      	str	r3, [sp, #0]
 8002ff6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8002ffa:	2296      	movs	r2, #150	; 0x96
 8002ffc:	210a      	movs	r1, #10
 8002ffe:	484b      	ldr	r0, [pc, #300]	; (800312c <FuncMenu_DrawOutputMenu+0x318>)
 8003000:	f00a fbf6 	bl	800d7f0 <ILI9341_Draw_Text>
				break;
 8003004:	e0d7      	b.n	80031b6 <FuncMenu_DrawOutputMenu+0x3a2>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003006:	2300      	movs	r3, #0
 8003008:	9301      	str	r3, [sp, #4]
 800300a:	2302      	movs	r3, #2
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003012:	2232      	movs	r2, #50	; 0x32
 8003014:	210a      	movs	r1, #10
 8003016:	4840      	ldr	r0, [pc, #256]	; (8003118 <FuncMenu_DrawOutputMenu+0x304>)
 8003018:	f00a fbea 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800301c:	2300      	movs	r3, #0
 800301e:	9301      	str	r3, [sp, #4]
 8003020:	2302      	movs	r3, #2
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003028:	2246      	movs	r2, #70	; 0x46
 800302a:	210a      	movs	r1, #10
 800302c:	483b      	ldr	r0, [pc, #236]	; (800311c <FuncMenu_DrawOutputMenu+0x308>)
 800302e:	f00a fbdf 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003032:	2300      	movs	r3, #0
 8003034:	9301      	str	r3, [sp, #4]
 8003036:	2302      	movs	r3, #2
 8003038:	9300      	str	r3, [sp, #0]
 800303a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800303e:	225a      	movs	r2, #90	; 0x5a
 8003040:	210a      	movs	r1, #10
 8003042:	4837      	ldr	r0, [pc, #220]	; (8003120 <FuncMenu_DrawOutputMenu+0x30c>)
 8003044:	f00a fbd4 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 8003048:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 800304c:	9301      	str	r3, [sp, #4]
 800304e:	2302      	movs	r3, #2
 8003050:	9300      	str	r3, [sp, #0]
 8003052:	2300      	movs	r3, #0
 8003054:	226e      	movs	r2, #110	; 0x6e
 8003056:	210a      	movs	r1, #10
 8003058:	4832      	ldr	r0, [pc, #200]	; (8003124 <FuncMenu_DrawOutputMenu+0x310>)
 800305a:	f00a fbc9 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800305e:	2300      	movs	r3, #0
 8003060:	9301      	str	r3, [sp, #4]
 8003062:	2302      	movs	r3, #2
 8003064:	9300      	str	r3, [sp, #0]
 8003066:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800306a:	2282      	movs	r2, #130	; 0x82
 800306c:	210a      	movs	r1, #10
 800306e:	482e      	ldr	r0, [pc, #184]	; (8003128 <FuncMenu_DrawOutputMenu+0x314>)
 8003070:	f00a fbbe 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003074:	2300      	movs	r3, #0
 8003076:	9301      	str	r3, [sp, #4]
 8003078:	2302      	movs	r3, #2
 800307a:	9300      	str	r3, [sp, #0]
 800307c:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003080:	2296      	movs	r2, #150	; 0x96
 8003082:	210a      	movs	r1, #10
 8003084:	4829      	ldr	r0, [pc, #164]	; (800312c <FuncMenu_DrawOutputMenu+0x318>)
 8003086:	f00a fbb3 	bl	800d7f0 <ILI9341_Draw_Text>
				break;
 800308a:	e094      	b.n	80031b6 <FuncMenu_DrawOutputMenu+0x3a2>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800308c:	2300      	movs	r3, #0
 800308e:	9301      	str	r3, [sp, #4]
 8003090:	2302      	movs	r3, #2
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003098:	2232      	movs	r2, #50	; 0x32
 800309a:	210a      	movs	r1, #10
 800309c:	481e      	ldr	r0, [pc, #120]	; (8003118 <FuncMenu_DrawOutputMenu+0x304>)
 800309e:	f00a fba7 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80030a2:	2300      	movs	r3, #0
 80030a4:	9301      	str	r3, [sp, #4]
 80030a6:	2302      	movs	r3, #2
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80030ae:	2246      	movs	r2, #70	; 0x46
 80030b0:	210a      	movs	r1, #10
 80030b2:	481a      	ldr	r0, [pc, #104]	; (800311c <FuncMenu_DrawOutputMenu+0x308>)
 80030b4:	f00a fb9c 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80030b8:	2300      	movs	r3, #0
 80030ba:	9301      	str	r3, [sp, #4]
 80030bc:	2302      	movs	r3, #2
 80030be:	9300      	str	r3, [sp, #0]
 80030c0:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80030c4:	225a      	movs	r2, #90	; 0x5a
 80030c6:	210a      	movs	r1, #10
 80030c8:	4815      	ldr	r0, [pc, #84]	; (8003120 <FuncMenu_DrawOutputMenu+0x30c>)
 80030ca:	f00a fb91 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80030ce:	2300      	movs	r3, #0
 80030d0:	9301      	str	r3, [sp, #4]
 80030d2:	2302      	movs	r3, #2
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 80030da:	226e      	movs	r2, #110	; 0x6e
 80030dc:	210a      	movs	r1, #10
 80030de:	4811      	ldr	r0, [pc, #68]	; (8003124 <FuncMenu_DrawOutputMenu+0x310>)
 80030e0:	f00a fb86 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 80030e4:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80030e8:	9301      	str	r3, [sp, #4]
 80030ea:	2302      	movs	r3, #2
 80030ec:	9300      	str	r3, [sp, #0]
 80030ee:	2300      	movs	r3, #0
 80030f0:	2282      	movs	r2, #130	; 0x82
 80030f2:	210a      	movs	r1, #10
 80030f4:	480c      	ldr	r0, [pc, #48]	; (8003128 <FuncMenu_DrawOutputMenu+0x314>)
 80030f6:	f00a fb7b 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 80030fa:	2300      	movs	r3, #0
 80030fc:	9301      	str	r3, [sp, #4]
 80030fe:	2302      	movs	r3, #2
 8003100:	9300      	str	r3, [sp, #0]
 8003102:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003106:	2296      	movs	r2, #150	; 0x96
 8003108:	210a      	movs	r1, #10
 800310a:	4808      	ldr	r0, [pc, #32]	; (800312c <FuncMenu_DrawOutputMenu+0x318>)
 800310c:	f00a fb70 	bl	800d7f0 <ILI9341_Draw_Text>
				break;
 8003110:	e051      	b.n	80031b6 <FuncMenu_DrawOutputMenu+0x3a2>
 8003112:	bf00      	nop
 8003114:	0801223c 	.word	0x0801223c
 8003118:	0801224c 	.word	0x0801224c
 800311c:	08012254 	.word	0x08012254
 8003120:	08012260 	.word	0x08012260
 8003124:	08012268 	.word	0x08012268
 8003128:	08012274 	.word	0x08012274
 800312c:	08012280 	.word	0x08012280
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003130:	2300      	movs	r3, #0
 8003132:	9301      	str	r3, [sp, #4]
 8003134:	2302      	movs	r3, #2
 8003136:	9300      	str	r3, [sp, #0]
 8003138:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800313c:	2232      	movs	r2, #50	; 0x32
 800313e:	210a      	movs	r1, #10
 8003140:	481f      	ldr	r0, [pc, #124]	; (80031c0 <FuncMenu_DrawOutputMenu+0x3ac>)
 8003142:	f00a fb55 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003146:	2300      	movs	r3, #0
 8003148:	9301      	str	r3, [sp, #4]
 800314a:	2302      	movs	r3, #2
 800314c:	9300      	str	r3, [sp, #0]
 800314e:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003152:	2246      	movs	r2, #70	; 0x46
 8003154:	210a      	movs	r1, #10
 8003156:	481b      	ldr	r0, [pc, #108]	; (80031c4 <FuncMenu_DrawOutputMenu+0x3b0>)
 8003158:	f00a fb4a 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90,  NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 800315c:	2300      	movs	r3, #0
 800315e:	9301      	str	r3, [sp, #4]
 8003160:	2302      	movs	r3, #2
 8003162:	9300      	str	r3, [sp, #0]
 8003164:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003168:	225a      	movs	r2, #90	; 0x5a
 800316a:	210a      	movs	r1, #10
 800316c:	4816      	ldr	r0, [pc, #88]	; (80031c8 <FuncMenu_DrawOutputMenu+0x3b4>)
 800316e:	f00a fb3f 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003172:	2300      	movs	r3, #0
 8003174:	9301      	str	r3, [sp, #4]
 8003176:	2302      	movs	r3, #2
 8003178:	9300      	str	r3, [sp, #0]
 800317a:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 800317e:	226e      	movs	r2, #110	; 0x6e
 8003180:	210a      	movs	r1, #10
 8003182:	4812      	ldr	r0, [pc, #72]	; (80031cc <FuncMenu_DrawOutputMenu+0x3b8>)
 8003184:	f00a fb34 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, NORMAL_TEXT_FGCOLOUR, 2, NORMAL_TEXT_BGCOLOUR);
 8003188:	2300      	movs	r3, #0
 800318a:	9301      	str	r3, [sp, #4]
 800318c:	2302      	movs	r3, #2
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	f24b 53d0 	movw	r3, #46544	; 0xb5d0
 8003194:	2282      	movs	r2, #130	; 0x82
 8003196:	210a      	movs	r1, #10
 8003198:	480d      	ldr	r0, [pc, #52]	; (80031d0 <FuncMenu_DrawOutputMenu+0x3bc>)
 800319a:	f00a fb29 	bl	800d7f0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, HIGHLIGHT_TEXT_FGCOLOUR, 2, HIGHLIGHT_TEXT_BGCOLOUR);
 800319e:	f644 43f6 	movw	r3, #19702	; 0x4cf6
 80031a2:	9301      	str	r3, [sp, #4]
 80031a4:	2302      	movs	r3, #2
 80031a6:	9300      	str	r3, [sp, #0]
 80031a8:	2300      	movs	r3, #0
 80031aa:	2296      	movs	r2, #150	; 0x96
 80031ac:	210a      	movs	r1, #10
 80031ae:	4809      	ldr	r0, [pc, #36]	; (80031d4 <FuncMenu_DrawOutputMenu+0x3c0>)
 80031b0:	f00a fb1e 	bl	800d7f0 <ILI9341_Draw_Text>
				break;
 80031b4:	bf00      	nop
		}
	}
}
 80031b6:	bf00      	nop
 80031b8:	3710      	adds	r7, #16
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	0801224c 	.word	0x0801224c
 80031c4:	08012254 	.word	0x08012254
 80031c8:	08012260 	.word	0x08012260
 80031cc:	08012268 	.word	0x08012268
 80031d0:	08012274 	.word	0x08012274
 80031d4:	08012280 	.word	0x08012280

080031d8 <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	4603      	mov	r3, r0
 80031e0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	2b02      	cmp	r3, #2
 80031e6:	d007      	beq.n	80031f8 <GainMenu_DrawMenu+0x20>
 80031e8:	2b03      	cmp	r3, #3
 80031ea:	d008      	beq.n	80031fe <GainMenu_DrawMenu+0x26>
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d000      	beq.n	80031f2 <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_SYNC_MENU:
			GainMenu_DrawSyncMenu();
			break;

		default:
			break;
 80031f0:	e008      	b.n	8003204 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 80031f2:	f000 f80b 	bl	800320c <GainMenu_DrawMainMenu>
			break;
 80031f6:	e005      	b.n	8003204 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 80031f8:	f000 f850 	bl	800329c <GainMenu_DrawSignalMenu>
			break;
 80031fc:	e002      	b.n	8003204 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSyncMenu();
 80031fe:	f000 f863 	bl	80032c8 <GainMenu_DrawSyncMenu>
			break;
 8003202:	bf00      	nop

	}
}
 8003204:	bf00      	nop
 8003206:	3708      	adds	r7, #8
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("OUT->GAIN", 	10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003212:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003216:	9301      	str	r3, [sp, #4]
 8003218:	2302      	movs	r3, #2
 800321a:	9300      	str	r3, [sp, #0]
 800321c:	2300      	movs	r3, #0
 800321e:	220a      	movs	r2, #10
 8003220:	210a      	movs	r1, #10
 8003222:	481a      	ldr	r0, [pc, #104]	; (800328c <GainMenu_DrawMainMenu+0x80>)
 8003224:	f00a fae4 	bl	800d7f0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003228:	f7fd fe5c 	bl	8000ee4 <DM_DisplayFormattedOutput>

	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 5, 	 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 800322c:	f240 23fd 	movw	r3, #765	; 0x2fd
 8003230:	9301      	str	r3, [sp, #4]
 8003232:	2302      	movs	r3, #2
 8003234:	9300      	str	r3, [sp, #0]
 8003236:	2300      	movs	r3, #0
 8003238:	22d2      	movs	r2, #210	; 0xd2
 800323a:	2105      	movs	r1, #5
 800323c:	4814      	ldr	r0, [pc, #80]	; (8003290 <GainMenu_DrawMainMenu+0x84>)
 800323e:	f00a fad7 	bl	800d7f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC",	97,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 8003242:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003246:	9301      	str	r3, [sp, #4]
 8003248:	2302      	movs	r3, #2
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	2300      	movs	r3, #0
 800324e:	22d2      	movs	r2, #210	; 0xd2
 8003250:	2161      	movs	r1, #97	; 0x61
 8003252:	4810      	ldr	r0, [pc, #64]	; (8003294 <GainMenu_DrawMainMenu+0x88>)
 8003254:	f00a facc 	bl	800d7f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003258:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800325c:	9301      	str	r3, [sp, #4]
 800325e:	2302      	movs	r3, #2
 8003260:	9300      	str	r3, [sp, #0]
 8003262:	2300      	movs	r3, #0
 8003264:	22d2      	movs	r2, #210	; 0xd2
 8003266:	21af      	movs	r1, #175	; 0xaf
 8003268:	480b      	ldr	r0, [pc, #44]	; (8003298 <GainMenu_DrawMainMenu+0x8c>)
 800326a:	f00a fac1 	bl	800d7f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 	260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800326e:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 8003272:	9301      	str	r3, [sp, #4]
 8003274:	2302      	movs	r3, #2
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	2300      	movs	r3, #0
 800327a:	22d2      	movs	r2, #210	; 0xd2
 800327c:	f44f 7182 	mov.w	r1, #260	; 0x104
 8003280:	4805      	ldr	r0, [pc, #20]	; (8003298 <GainMenu_DrawMainMenu+0x8c>)
 8003282:	f00a fab5 	bl	800d7f0 <ILI9341_Draw_Text>
}
 8003286:	bf00      	nop
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}
 800328c:	08012288 	.word	0x08012288
 8003290:	08012294 	.word	0x08012294
 8003294:	0801229c 	.word	0x0801229c
 8003298:	080122a4 	.word	0x080122a4

0800329c <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b082      	sub	sp, #8
 80032a0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SIG", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80032a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032a6:	9301      	str	r3, [sp, #4]
 80032a8:	2302      	movs	r3, #2
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	2300      	movs	r3, #0
 80032ae:	220a      	movs	r2, #10
 80032b0:	210a      	movs	r1, #10
 80032b2:	4804      	ldr	r0, [pc, #16]	; (80032c4 <GainMenu_DrawSignalMenu+0x28>)
 80032b4:	f00a fa9c 	bl	800d7f0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80032b8:	f7fd fe14 	bl	8000ee4 <DM_DisplayFormattedOutput>
}
 80032bc:	bf00      	nop
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	080122ac 	.word	0x080122ac

080032c8 <GainMenu_DrawSyncMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSyncMenu()
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b082      	sub	sp, #8
 80032cc:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->GAIN->SYNC", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80032ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032d2:	9301      	str	r3, [sp, #4]
 80032d4:	2302      	movs	r3, #2
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	2300      	movs	r3, #0
 80032da:	220a      	movs	r2, #10
 80032dc:	210a      	movs	r1, #10
 80032de:	4804      	ldr	r0, [pc, #16]	; (80032f0 <GainMenu_DrawSyncMenu+0x28>)
 80032e0:	f00a fa86 	bl	800d7f0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80032e4:	f7fd fdfe 	bl	8000ee4 <DM_DisplayFormattedOutput>
}
 80032e8:	bf00      	nop
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	080122bc 	.word	0x080122bc

080032f4 <ToplevelMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMenu(eToplevelMenu_Status pMenu)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 80032fe:	79fb      	ldrb	r3, [r7, #7]
 8003300:	2b02      	cmp	r3, #2
 8003302:	d007      	beq.n	8003314 <ToplevelMenu_DrawMenu+0x20>
 8003304:	2b03      	cmp	r3, #3
 8003306:	d008      	beq.n	800331a <ToplevelMenu_DrawMenu+0x26>
 8003308:	2b01      	cmp	r3, #1
 800330a:	d000      	beq.n	800330e <ToplevelMenu_DrawMenu+0x1a>
		case ENABLE_TOPLEVEL_INPUT_MENU:
			ToplevelMenu_DrawInputMenu();
			break;

		default:
			break;
 800330c:	e008      	b.n	8003320 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawMainMenu();
 800330e:	f000 f80b 	bl	8003328 <ToplevelMenu_DrawMainMenu>
			break;
 8003312:	e005      	b.n	8003320 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawOutputMenu();
 8003314:	f000 f848 	bl	80033a8 <ToplevelMenu_DrawOutputMenu>
			break;
 8003318:	e002      	b.n	8003320 <ToplevelMenu_DrawMenu+0x2c>
			ToplevelMenu_DrawInputMenu();
 800331a:	f000 f88f 	bl	800343c <ToplevelMenu_DrawInputMenu>
			break;
 800331e:	bf00      	nop

	}
}
 8003320:	bf00      	nop
 8003322:	3708      	adds	r7, #8
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}

08003328 <ToplevelMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawMainMenu()
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af02      	add	r7, sp, #8
	// Top Level screen
	#ifdef SWV_DEBUG_ENABLED
		  printf("Drawing Main screen\n");
 800332e:	481a      	ldr	r0, [pc, #104]	; (8003398 <ToplevelMenu_DrawMainMenu+0x70>)
 8003330:	f00b fdd8 	bl	800eee4 <puts>
	#endif

	// Main screen
	//ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 2, BLACK);

	DM_DisplayFormattedOutput();
 8003334:	f7fd fdd6 	bl	8000ee4 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("OUTPUT", 6, 210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 8003338:	f240 23fd 	movw	r3, #765	; 0x2fd
 800333c:	9301      	str	r3, [sp, #4]
 800333e:	2302      	movs	r3, #2
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	2300      	movs	r3, #0
 8003344:	22d2      	movs	r2, #210	; 0xd2
 8003346:	2106      	movs	r1, #6
 8003348:	4814      	ldr	r0, [pc, #80]	; (800339c <ToplevelMenu_DrawMainMenu+0x74>)
 800334a:	f00a fa51 	bl	800d7f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("INPUT", 93, 210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 800334e:	f241 43a2 	movw	r3, #5282	; 0x14a2
 8003352:	9301      	str	r3, [sp, #4]
 8003354:	2302      	movs	r3, #2
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	2300      	movs	r3, #0
 800335a:	22d2      	movs	r2, #210	; 0xd2
 800335c:	215d      	movs	r1, #93	; 0x5d
 800335e:	4810      	ldr	r0, [pc, #64]	; (80033a0 <ToplevelMenu_DrawMainMenu+0x78>)
 8003360:	f00a fa46 	bl	800d7f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 8003364:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003368:	9301      	str	r3, [sp, #4]
 800336a:	2302      	movs	r3, #2
 800336c:	9300      	str	r3, [sp, #0]
 800336e:	2300      	movs	r3, #0
 8003370:	22d2      	movs	r2, #210	; 0xd2
 8003372:	21af      	movs	r1, #175	; 0xaf
 8003374:	480b      	ldr	r0, [pc, #44]	; (80033a4 <ToplevelMenu_DrawMainMenu+0x7c>)
 8003376:	f00a fa3b 	bl	800d7f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800337a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800337e:	9301      	str	r3, [sp, #4]
 8003380:	2302      	movs	r3, #2
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	2300      	movs	r3, #0
 8003386:	22d2      	movs	r2, #210	; 0xd2
 8003388:	f44f 7182 	mov.w	r1, #260	; 0x104
 800338c:	4805      	ldr	r0, [pc, #20]	; (80033a4 <ToplevelMenu_DrawMainMenu+0x7c>)
 800338e:	f00a fa2f 	bl	800d7f0 <ILI9341_Draw_Text>


}
 8003392:	bf00      	nop
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	080122cc 	.word	0x080122cc
 800339c:	080122e0 	.word	0x080122e0
 80033a0:	080122e8 	.word	0x080122e8
 80033a4:	080122f0 	.word	0x080122f0

080033a8 <ToplevelMenu_DrawOutputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawOutputMenu()
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b082      	sub	sp, #8
 80033ac:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("OUT->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 80033ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033b2:	9301      	str	r3, [sp, #4]
 80033b4:	2302      	movs	r3, #2
 80033b6:	9300      	str	r3, [sp, #0]
 80033b8:	2300      	movs	r3, #0
 80033ba:	220a      	movs	r2, #10
 80033bc:	210a      	movs	r1, #10
 80033be:	481a      	ldr	r0, [pc, #104]	; (8003428 <ToplevelMenu_DrawOutputMenu+0x80>)
 80033c0:	f00a fa16 	bl	800d7f0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 80033c4:	f7fd fd8e 	bl	8000ee4 <DM_DisplayFormattedOutput>

	ILI9341_Draw_Text("FUNC", 13,  210, BTN1_TEXT_FGCOLOUR, 2, BTN1_TEXT_BGCOLOUR);
 80033c8:	f240 23fd 	movw	r3, #765	; 0x2fd
 80033cc:	9301      	str	r3, [sp, #4]
 80033ce:	2302      	movs	r3, #2
 80033d0:	9300      	str	r3, [sp, #0]
 80033d2:	2300      	movs	r3, #0
 80033d4:	22d2      	movs	r2, #210	; 0xd2
 80033d6:	210d      	movs	r1, #13
 80033d8:	4814      	ldr	r0, [pc, #80]	; (800342c <ToplevelMenu_DrawOutputMenu+0x84>)
 80033da:	f00a fa09 	bl	800d7f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 99,  210, BTN2_TEXT_FGCOLOUR, 2, BTN2_TEXT_BGCOLOUR);
 80033de:	f241 43a2 	movw	r3, #5282	; 0x14a2
 80033e2:	9301      	str	r3, [sp, #4]
 80033e4:	2302      	movs	r3, #2
 80033e6:	9300      	str	r3, [sp, #0]
 80033e8:	2300      	movs	r3, #0
 80033ea:	22d2      	movs	r2, #210	; 0xd2
 80033ec:	2163      	movs	r1, #99	; 0x63
 80033ee:	4810      	ldr	r0, [pc, #64]	; (8003430 <ToplevelMenu_DrawOutputMenu+0x88>)
 80033f0:	f00a f9fe 	bl	800d7f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("GAIN", 176, 210, BTN3_TEXT_FGCOLOUR, 2, BTN3_TEXT_BGCOLOUR);
 80033f4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80033f8:	9301      	str	r3, [sp, #4]
 80033fa:	2302      	movs	r3, #2
 80033fc:	9300      	str	r3, [sp, #0]
 80033fe:	2300      	movs	r3, #0
 8003400:	22d2      	movs	r2, #210	; 0xd2
 8003402:	21b0      	movs	r1, #176	; 0xb0
 8003404:	480b      	ldr	r0, [pc, #44]	; (8003434 <ToplevelMenu_DrawOutputMenu+0x8c>)
 8003406:	f00a f9f3 	bl	800d7f0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("OFFSET", 245, 210, BTN4_TEXT_FGCOLOUR, 2, BTN4_TEXT_BGCOLOUR);
 800340a:	f64d 03c3 	movw	r3, #55491	; 0xd8c3
 800340e:	9301      	str	r3, [sp, #4]
 8003410:	2302      	movs	r3, #2
 8003412:	9300      	str	r3, [sp, #0]
 8003414:	2300      	movs	r3, #0
 8003416:	22d2      	movs	r2, #210	; 0xd2
 8003418:	21f5      	movs	r1, #245	; 0xf5
 800341a:	4807      	ldr	r0, [pc, #28]	; (8003438 <ToplevelMenu_DrawOutputMenu+0x90>)
 800341c:	f00a f9e8 	bl	800d7f0 <ILI9341_Draw_Text>
}
 8003420:	bf00      	nop
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	080122f8 	.word	0x080122f8
 800342c:	08012300 	.word	0x08012300
 8003430:	08012308 	.word	0x08012308
 8003434:	08012310 	.word	0x08012310
 8003438:	08012318 	.word	0x08012318

0800343c <ToplevelMenu_DrawInputMenu>:
 *	@param None
 *	@retval None
 *
 */
void ToplevelMenu_DrawInputMenu()
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("IN->", 10, 10, BREADTRAIL_FGCOLOUR, 2, BREADTRAIL_BGCOLOUR);
 8003442:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003446:	9301      	str	r3, [sp, #4]
 8003448:	2302      	movs	r3, #2
 800344a:	9300      	str	r3, [sp, #0]
 800344c:	2300      	movs	r3, #0
 800344e:	220a      	movs	r2, #10
 8003450:	210a      	movs	r1, #10
 8003452:	4804      	ldr	r0, [pc, #16]	; (8003464 <ToplevelMenu_DrawInputMenu+0x28>)
 8003454:	f00a f9cc 	bl	800d7f0 <ILI9341_Draw_Text>

	DM_DisplayFormattedOutput();
 8003458:	f7fd fd44 	bl	8000ee4 <DM_DisplayFormattedOutput>
}
 800345c:	bf00      	nop
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	08012320 	.word	0x08012320

08003468 <BiasMenu_getStatus>:
#include <stdio.h>

eBiasMenu_Status eNextBiasMenuStatus =	DISABLE_BIAS_MENU;

eBiasMenu_Status BiasMenu_getStatus()
{
 8003468:	b480      	push	{r7}
 800346a:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 800346c:	4b03      	ldr	r3, [pc, #12]	; (800347c <BiasMenu_getStatus+0x14>)
 800346e:	781b      	ldrb	r3, [r3, #0]
}
 8003470:	4618      	mov	r0, r3
 8003472:	46bd      	mov	sp, r7
 8003474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003478:	4770      	bx	lr
 800347a:	bf00      	nop
 800347c:	20001a11 	.word	0x20001a11

08003480 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 8003480:	b580      	push	{r7, lr}
 8003482:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuEntryHandler Event captured\n");
 8003484:	480b      	ldr	r0, [pc, #44]	; (80034b4 <BiasMenuEntryHandler+0x34>)
 8003486:	f00b fd2d 	bl	800eee4 <puts>
#endif

	DM_RefreshScreen();
 800348a:	f7fd feb3 	bl	80011f4 <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 800348e:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <BiasMenuEntryHandler+0x38>)
 8003490:	2201      	movs	r2, #1
 8003492:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 8003494:	4b09      	ldr	r3, [pc, #36]	; (80034bc <BiasMenuEntryHandler+0x3c>)
 8003496:	f44f 7248 	mov.w	r2, #800	; 0x320
 800349a:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 800349c:	f001 f9ee 	bl	800487c <BO_GetDcBiasEncoderValue>
 80034a0:	4603      	mov	r3, r0
 80034a2:	461a      	mov	r2, r3
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <BiasMenuEntryHandler+0x3c>)
 80034a6:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 80034a8:	4b05      	ldr	r3, [pc, #20]	; (80034c0 <BiasMenuEntryHandler+0x40>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 80034ae:	230e      	movs	r3, #14
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	08012328 	.word	0x08012328
 80034b8:	20001a11 	.word	0x20001a11
 80034bc:	40012c00 	.word	0x40012c00
 80034c0:	20001a13 	.word	0x20001a13

080034c4 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler()
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuInputHandler Event captured\n");
 80034c8:	4807      	ldr	r0, [pc, #28]	; (80034e8 <BiasMenuInputHandler+0x24>)
 80034ca:	f00b fd0b 	bl	800eee4 <puts>
#endif

	BO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80034ce:	2001      	movs	r0, #1
 80034d0:	f001 ff74 	bl	80053bc <SM_GetEncoderValue>
 80034d4:	4603      	mov	r3, r0
 80034d6:	4618      	mov	r0, r3
 80034d8:	f001 f9dc 	bl	8004894 <BO_ModifyOutput>

	eNewEvent = evIdle;
 80034dc:	4b03      	ldr	r3, [pc, #12]	; (80034ec <BiasMenuInputHandler+0x28>)
 80034de:	2200      	movs	r2, #0
 80034e0:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 80034e2:	230e      	movs	r3, #14
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	bd80      	pop	{r7, pc}
 80034e8:	0801234c 	.word	0x0801234c
 80034ec:	20001a13 	.word	0x20001a13

080034f0 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("BiasMenuExitHandler Event captured\n");
 80034f4:	4808      	ldr	r0, [pc, #32]	; (8003518 <BiasMenuExitHandler+0x28>)
 80034f6:	f00b fcf5 	bl	800eee4 <puts>
#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 80034fa:	4b08      	ldr	r3, [pc, #32]	; (800351c <BiasMenuExitHandler+0x2c>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003500:	f7fd fe78 	bl	80011f4 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 8003504:	4806      	ldr	r0, [pc, #24]	; (8003520 <BiasMenuExitHandler+0x30>)
 8003506:	f00b fced 	bl	800eee4 <puts>
#endif

	eNewEvent = evIdle;
 800350a:	4b06      	ldr	r3, [pc, #24]	; (8003524 <BiasMenuExitHandler+0x34>)
 800350c:	2200      	movs	r2, #0
 800350e:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8003510:	2301      	movs	r3, #1
}
 8003512:	4618      	mov	r0, r3
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	08012370 	.word	0x08012370
 800351c:	20001a11 	.word	0x20001a11
 8003520:	08012394 	.word	0x08012394
 8003524:	20001a13 	.word	0x20001a13

08003528 <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 8003528:	b580      	push	{r7, lr}
 800352a:	af00      	add	r7, sp, #0

	switch(eNextState)
 800352c:	4bb8      	ldr	r3, [pc, #736]	; (8003810 <EM_ProcessEvent+0x2e8>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b0e      	cmp	r3, #14
 8003532:	f200 8216 	bhi.w	8003962 <EM_ProcessEvent+0x43a>
 8003536:	a201      	add	r2, pc, #4	; (adr r2, 800353c <EM_ProcessEvent+0x14>)
 8003538:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800353c:	08003579 	.word	0x08003579
 8003540:	080035ab 	.word	0x080035ab
 8003544:	08003631 	.word	0x08003631
 8003548:	0800364f 	.word	0x0800364f
 800354c:	0800369b 	.word	0x0800369b
 8003550:	080036cd 	.word	0x080036cd
 8003554:	080036ff 	.word	0x080036ff
 8003558:	0800374b 	.word	0x0800374b
 800355c:	0800377d 	.word	0x0800377d
 8003560:	08003963 	.word	0x08003963
 8003564:	080037af 	.word	0x080037af
 8003568:	08003841 	.word	0x08003841
 800356c:	08003873 	.word	0x08003873
 8003570:	080038a3 	.word	0x080038a3
 8003574:	0800392d 	.word	0x0800392d
// MAIN MENU
		case Idle_State:


			#ifdef SWV_DEBUG_ENABLED
			  printf("Idle_State\n");
 8003578:	48a6      	ldr	r0, [pc, #664]	; (8003814 <EM_ProcessEvent+0x2ec>)
 800357a:	f00b fcb3 	bl	800eee4 <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 800357e:	4ba6      	ldr	r3, [pc, #664]	; (8003818 <EM_ProcessEvent+0x2f0>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b01      	cmp	r3, #1
 8003584:	d105      	bne.n	8003592 <EM_ProcessEvent+0x6a>
			{
				eNextState = ToplevelOutputMenuEntryHandler();
 8003586:	f000 ffb9 	bl	80044fc <ToplevelOutputMenuEntryHandler>
 800358a:	4603      	mov	r3, r0
 800358c:	461a      	mov	r2, r3
 800358e:	4ba0      	ldr	r3, [pc, #640]	; (8003810 <EM_ProcessEvent+0x2e8>)
 8003590:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003592:	4ba1      	ldr	r3, [pc, #644]	; (8003818 <EM_ProcessEvent+0x2f0>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	2b02      	cmp	r3, #2
 8003598:	f040 81e5 	bne.w	8003966 <EM_ProcessEvent+0x43e>
			{
				eNextState = ToplevelInputMenuEntryHandler();
 800359c:	f000 ffda 	bl	8004554 <ToplevelInputMenuEntryHandler>
 80035a0:	4603      	mov	r3, r0
 80035a2:	461a      	mov	r2, r3
 80035a4:	4b9a      	ldr	r3, [pc, #616]	; (8003810 <EM_ProcessEvent+0x2e8>)
 80035a6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 80035a8:	e1dd      	b.n	8003966 <EM_ProcessEvent+0x43e>

		case Toplevel_Output_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Output_Menu_State\n");
 80035aa:	489c      	ldr	r0, [pc, #624]	; (800381c <EM_ProcessEvent+0x2f4>)
 80035ac:	f00b fc9a 	bl	800eee4 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 80035b0:	4b99      	ldr	r3, [pc, #612]	; (8003818 <EM_ProcessEvent+0x2f0>)
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b06      	cmp	r3, #6
 80035b6:	d105      	bne.n	80035c4 <EM_ProcessEvent+0x9c>
			{
				eNextState = ToplevelOutputMenuExitHandler();
 80035b8:	f000 ffb6 	bl	8004528 <ToplevelOutputMenuExitHandler>
 80035bc:	4603      	mov	r3, r0
 80035be:	461a      	mov	r2, r3
 80035c0:	4b93      	ldr	r3, [pc, #588]	; (8003810 <EM_ProcessEvent+0x2e8>)
 80035c2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 80035c4:	4b94      	ldr	r3, [pc, #592]	; (8003818 <EM_ProcessEvent+0x2f0>)
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d108      	bne.n	80035de <EM_ProcessEvent+0xb6>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 80035cc:	2000      	movs	r0, #0
 80035ce:	f000 ff85 	bl	80044dc <ToplevelMenu_setStatus>
				eNextState = FuncMainMenuEntryHandler();
 80035d2:	f000 fd83 	bl	80040dc <FuncMainMenuEntryHandler>
 80035d6:	4603      	mov	r3, r0
 80035d8:	461a      	mov	r2, r3
 80035da:	4b8d      	ldr	r3, [pc, #564]	; (8003810 <EM_ProcessEvent+0x2e8>)
 80035dc:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80035de:	4b8e      	ldr	r3, [pc, #568]	; (8003818 <EM_ProcessEvent+0x2f0>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d108      	bne.n	80035f8 <EM_ProcessEvent+0xd0>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 80035e6:	2000      	movs	r0, #0
 80035e8:	f000 ff78 	bl	80044dc <ToplevelMenu_setStatus>
				eNextState = FreqMainMenuEntryHandler();
 80035ec:	f000 fb5c 	bl	8003ca8 <FreqMainMenuEntryHandler>
 80035f0:	4603      	mov	r3, r0
 80035f2:	461a      	mov	r2, r3
 80035f4:	4b86      	ldr	r3, [pc, #536]	; (8003810 <EM_ProcessEvent+0x2e8>)
 80035f6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 80035f8:	4b87      	ldr	r3, [pc, #540]	; (8003818 <EM_ProcessEvent+0x2f0>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b03      	cmp	r3, #3
 80035fe:	d108      	bne.n	8003612 <EM_ProcessEvent+0xea>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 8003600:	2000      	movs	r0, #0
 8003602:	f000 ff6b 	bl	80044dc <ToplevelMenu_setStatus>
				eNextState = GainMainMenuEntryHandler();
 8003606:	f000 fe6b 	bl	80042e0 <GainMainMenuEntryHandler>
 800360a:	4603      	mov	r3, r0
 800360c:	461a      	mov	r2, r3
 800360e:	4b80      	ldr	r3, [pc, #512]	; (8003810 <EM_ProcessEvent+0x2e8>)
 8003610:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8003612:	4b81      	ldr	r3, [pc, #516]	; (8003818 <EM_ProcessEvent+0x2f0>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b04      	cmp	r3, #4
 8003618:	f040 81a7 	bne.w	800396a <EM_ProcessEvent+0x442>
			{
				ToplevelMenu_setStatus(DISABLE_TOPLEVEL_MENU);
 800361c:	2000      	movs	r0, #0
 800361e:	f000 ff5d 	bl	80044dc <ToplevelMenu_setStatus>
				eNextState = BiasMenuEntryHandler();
 8003622:	f7ff ff2d 	bl	8003480 <BiasMenuEntryHandler>
 8003626:	4603      	mov	r3, r0
 8003628:	461a      	mov	r2, r3
 800362a:	4b79      	ldr	r3, [pc, #484]	; (8003810 <EM_ProcessEvent+0x2e8>)
 800362c:	701a      	strb	r2, [r3, #0]
			}
			break;
 800362e:	e19c      	b.n	800396a <EM_ProcessEvent+0x442>

		case Toplevel_Input_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
			  printf("Toplevel_Input_Menu_State\n");
 8003630:	487b      	ldr	r0, [pc, #492]	; (8003820 <EM_ProcessEvent+0x2f8>)
 8003632:	f00b fc57 	bl	800eee4 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 8003636:	4b78      	ldr	r3, [pc, #480]	; (8003818 <EM_ProcessEvent+0x2f0>)
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	2b06      	cmp	r3, #6
 800363c:	f040 8197 	bne.w	800396e <EM_ProcessEvent+0x446>
			{
				eNextState = ToplevelInputMenuExitHandler();
 8003640:	f000 ff9e 	bl	8004580 <ToplevelInputMenuExitHandler>
 8003644:	4603      	mov	r3, r0
 8003646:	461a      	mov	r2, r3
 8003648:	4b71      	ldr	r3, [pc, #452]	; (8003810 <EM_ProcessEvent+0x2e8>)
 800364a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
			{
				// no menu action
			}
			break;
 800364c:	e18f      	b.n	800396e <EM_ProcessEvent+0x446>
// FUNC MENUS

		case Func_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Main_Menu_State\n");
 800364e:	4875      	ldr	r0, [pc, #468]	; (8003824 <EM_ProcessEvent+0x2fc>)
 8003650:	f00b fc48 	bl	800eee4 <puts>

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003654:	4b70      	ldr	r3, [pc, #448]	; (8003818 <EM_ProcessEvent+0x2f0>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b06      	cmp	r3, #6
 800365a:	d108      	bne.n	800366e <EM_ProcessEvent+0x146>
			{
				eNextState = FuncMainMenuExitHandler();
 800365c:	f000 fd54 	bl	8004108 <FuncMainMenuExitHandler>
 8003660:	4603      	mov	r3, r0
 8003662:	461a      	mov	r2, r3
 8003664:	4b6a      	ldr	r3, [pc, #424]	; (8003810 <EM_ProcessEvent+0x2e8>)
 8003666:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003668:	2002      	movs	r0, #2
 800366a:	f000 ff37 	bl	80044dc <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 800366e:	4b6a      	ldr	r3, [pc, #424]	; (8003818 <EM_ProcessEvent+0x2f0>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d105      	bne.n	8003682 <EM_ProcessEvent+0x15a>
			{
				eNextState = FuncSignalMenuEntryHandler();
 8003676:	f000 fd63 	bl	8004140 <FuncSignalMenuEntryHandler>
 800367a:	4603      	mov	r3, r0
 800367c:	461a      	mov	r2, r3
 800367e:	4b64      	ldr	r3, [pc, #400]	; (8003810 <EM_ProcessEvent+0x2e8>)
 8003680:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003682:	4b65      	ldr	r3, [pc, #404]	; (8003818 <EM_ProcessEvent+0x2f0>)
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	2b02      	cmp	r3, #2
 8003688:	f040 8173 	bne.w	8003972 <EM_ProcessEvent+0x44a>
			{
				eNextState = FuncSyncMenuEntryHandler();
 800368c:	f000 fdba 	bl	8004204 <FuncSyncMenuEntryHandler>
 8003690:	4603      	mov	r3, r0
 8003692:	461a      	mov	r2, r3
 8003694:	4b5e      	ldr	r3, [pc, #376]	; (8003810 <EM_ProcessEvent+0x2e8>)
 8003696:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003698:	e16b      	b.n	8003972 <EM_ProcessEvent+0x44a>

		case Func_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Signal_Menu_State\n");
 800369a:	4863      	ldr	r0, [pc, #396]	; (8003828 <EM_ProcessEvent+0x300>)
 800369c:	f00b fc22 	bl	800eee4 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 80036a0:	4b5d      	ldr	r3, [pc, #372]	; (8003818 <EM_ProcessEvent+0x2f0>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	2b05      	cmp	r3, #5
 80036a6:	d105      	bne.n	80036b4 <EM_ProcessEvent+0x18c>
			{
				eNextState = FuncSignalMenuInputHandler();
 80036a8:	f000 fd80 	bl	80041ac <FuncSignalMenuInputHandler>
 80036ac:	4603      	mov	r3, r0
 80036ae:	461a      	mov	r2, r3
 80036b0:	4b57      	ldr	r3, [pc, #348]	; (8003810 <EM_ProcessEvent+0x2e8>)
 80036b2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80036b4:	4b58      	ldr	r3, [pc, #352]	; (8003818 <EM_ProcessEvent+0x2f0>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b06      	cmp	r3, #6
 80036ba:	f040 815c 	bne.w	8003976 <EM_ProcessEvent+0x44e>
			{
				eNextState = FuncSignalMenuExitHandler();
 80036be:	f000 fd8b 	bl	80041d8 <FuncSignalMenuExitHandler>
 80036c2:	4603      	mov	r3, r0
 80036c4:	461a      	mov	r2, r3
 80036c6:	4b52      	ldr	r3, [pc, #328]	; (8003810 <EM_ProcessEvent+0x2e8>)
 80036c8:	701a      	strb	r2, [r3, #0]

			}

			break;
 80036ca:	e154      	b.n	8003976 <EM_ProcessEvent+0x44e>

		case Func_Sync_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Func_Sync_Menu_State\n");
 80036cc:	4857      	ldr	r0, [pc, #348]	; (800382c <EM_ProcessEvent+0x304>)
 80036ce:	f00b fc09 	bl	800eee4 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 80036d2:	4b51      	ldr	r3, [pc, #324]	; (8003818 <EM_ProcessEvent+0x2f0>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b05      	cmp	r3, #5
 80036d8:	d105      	bne.n	80036e6 <EM_ProcessEvent+0x1be>
			{
				eNextState = FuncSyncMenuInputHandler();
 80036da:	f000 fdc9 	bl	8004270 <FuncSyncMenuInputHandler>
 80036de:	4603      	mov	r3, r0
 80036e0:	461a      	mov	r2, r3
 80036e2:	4b4b      	ldr	r3, [pc, #300]	; (8003810 <EM_ProcessEvent+0x2e8>)
 80036e4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80036e6:	4b4c      	ldr	r3, [pc, #304]	; (8003818 <EM_ProcessEvent+0x2f0>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b06      	cmp	r3, #6
 80036ec:	f040 8145 	bne.w	800397a <EM_ProcessEvent+0x452>
			{
				eNextState = FuncSyncMenuExitHandler();
 80036f0:	f000 fdd4 	bl	800429c <FuncSyncMenuExitHandler>
 80036f4:	4603      	mov	r3, r0
 80036f6:	461a      	mov	r2, r3
 80036f8:	4b45      	ldr	r3, [pc, #276]	; (8003810 <EM_ProcessEvent+0x2e8>)
 80036fa:	701a      	strb	r2, [r3, #0]
			}

			break;
 80036fc:	e13d      	b.n	800397a <EM_ProcessEvent+0x452>
// GAIN MENUS

		case Gain_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Main_Menu_State\n");
 80036fe:	484c      	ldr	r0, [pc, #304]	; (8003830 <EM_ProcessEvent+0x308>)
 8003700:	f00b fbf0 	bl	800eee4 <puts>
			#endif
			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003704:	4b44      	ldr	r3, [pc, #272]	; (8003818 <EM_ProcessEvent+0x2f0>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	2b06      	cmp	r3, #6
 800370a:	d108      	bne.n	800371e <EM_ProcessEvent+0x1f6>
			{
				eNextState = GainMainMenuExitHandler();
 800370c:	f000 fdfe 	bl	800430c <GainMainMenuExitHandler>
 8003710:	4603      	mov	r3, r0
 8003712:	461a      	mov	r2, r3
 8003714:	4b3e      	ldr	r3, [pc, #248]	; (8003810 <EM_ProcessEvent+0x2e8>)
 8003716:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 8003718:	2002      	movs	r0, #2
 800371a:	f000 fedf 	bl	80044dc <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 800371e:	4b3e      	ldr	r3, [pc, #248]	; (8003818 <EM_ProcessEvent+0x2f0>)
 8003720:	781b      	ldrb	r3, [r3, #0]
 8003722:	2b01      	cmp	r3, #1
 8003724:	d105      	bne.n	8003732 <EM_ProcessEvent+0x20a>
			{
				eNextState = GainSignalMenuEntryHandler();
 8003726:	f000 fe0d 	bl	8004344 <GainSignalMenuEntryHandler>
 800372a:	4603      	mov	r3, r0
 800372c:	461a      	mov	r2, r3
 800372e:	4b38      	ldr	r3, [pc, #224]	; (8003810 <EM_ProcessEvent+0x2e8>)
 8003730:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003732:	4b39      	ldr	r3, [pc, #228]	; (8003818 <EM_ProcessEvent+0x2f0>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b02      	cmp	r3, #2
 8003738:	f040 8121 	bne.w	800397e <EM_ProcessEvent+0x456>
			{
				eNextState = GainSyncMenuEntryHandler();
 800373c:	f000 fe62 	bl	8004404 <GainSyncMenuEntryHandler>
 8003740:	4603      	mov	r3, r0
 8003742:	461a      	mov	r2, r3
 8003744:	4b32      	ldr	r3, [pc, #200]	; (8003810 <EM_ProcessEvent+0x2e8>)
 8003746:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003748:	e119      	b.n	800397e <EM_ProcessEvent+0x456>

		case Gain_Signal_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Signal_Menu_State\n");
 800374a:	483a      	ldr	r0, [pc, #232]	; (8003834 <EM_ProcessEvent+0x30c>)
 800374c:	f00b fbca 	bl	800eee4 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003750:	4b31      	ldr	r3, [pc, #196]	; (8003818 <EM_ProcessEvent+0x2f0>)
 8003752:	781b      	ldrb	r3, [r3, #0]
 8003754:	2b05      	cmp	r3, #5
 8003756:	d105      	bne.n	8003764 <EM_ProcessEvent+0x23c>
			{
				eNextState = GainSignalMenuInputHandler();
 8003758:	f000 fe28 	bl	80043ac <GainSignalMenuInputHandler>
 800375c:	4603      	mov	r3, r0
 800375e:	461a      	mov	r2, r3
 8003760:	4b2b      	ldr	r3, [pc, #172]	; (8003810 <EM_ProcessEvent+0x2e8>)
 8003762:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003764:	4b2c      	ldr	r3, [pc, #176]	; (8003818 <EM_ProcessEvent+0x2f0>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b06      	cmp	r3, #6
 800376a:	f040 810a 	bne.w	8003982 <EM_ProcessEvent+0x45a>
			{
				eNextState = GainSignalMenuExitHandler();
 800376e:	f000 fe33 	bl	80043d8 <GainSignalMenuExitHandler>
 8003772:	4603      	mov	r3, r0
 8003774:	461a      	mov	r2, r3
 8003776:	4b26      	ldr	r3, [pc, #152]	; (8003810 <EM_ProcessEvent+0x2e8>)
 8003778:	701a      	strb	r2, [r3, #0]
			}

			break;
 800377a:	e102      	b.n	8003982 <EM_ProcessEvent+0x45a>

		case Gain_Sync_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Gain_Sync_Menu_State\n");
 800377c:	482e      	ldr	r0, [pc, #184]	; (8003838 <EM_ProcessEvent+0x310>)
 800377e:	f00b fbb1 	bl	800eee4 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003782:	4b25      	ldr	r3, [pc, #148]	; (8003818 <EM_ProcessEvent+0x2f0>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b05      	cmp	r3, #5
 8003788:	d105      	bne.n	8003796 <EM_ProcessEvent+0x26e>
			{
				eNextState = GainSyncMenuInputHandler();
 800378a:	f000 fe6f 	bl	800446c <GainSyncMenuInputHandler>
 800378e:	4603      	mov	r3, r0
 8003790:	461a      	mov	r2, r3
 8003792:	4b1f      	ldr	r3, [pc, #124]	; (8003810 <EM_ProcessEvent+0x2e8>)
 8003794:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003796:	4b20      	ldr	r3, [pc, #128]	; (8003818 <EM_ProcessEvent+0x2f0>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	2b06      	cmp	r3, #6
 800379c:	f040 80f3 	bne.w	8003986 <EM_ProcessEvent+0x45e>
			{
				eNextState = GainSyncMenuExitHandler();
 80037a0:	f000 fe7a 	bl	8004498 <GainSyncMenuExitHandler>
 80037a4:	4603      	mov	r3, r0
 80037a6:	461a      	mov	r2, r3
 80037a8:	4b19      	ldr	r3, [pc, #100]	; (8003810 <EM_ProcessEvent+0x2e8>)
 80037aa:	701a      	strb	r2, [r3, #0]
			}

			break;
 80037ac:	e0eb      	b.n	8003986 <EM_ProcessEvent+0x45e>
// FREQ MENUS

		case Freq_Main_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Main_Menu_State\n");
 80037ae:	4823      	ldr	r0, [pc, #140]	; (800383c <EM_ProcessEvent+0x314>)
 80037b0:	f00b fb98 	bl	800eee4 <puts>
			#endif

			if(eNewEvent == evEncoderPush)
 80037b4:	4b18      	ldr	r3, [pc, #96]	; (8003818 <EM_ProcessEvent+0x2f0>)
 80037b6:	781b      	ldrb	r3, [r3, #0]
 80037b8:	2b06      	cmp	r3, #6
 80037ba:	d108      	bne.n	80037ce <EM_ProcessEvent+0x2a6>
			{
				eNextState = FreqMainMenuExitHandler();
 80037bc:	f000 fa8a 	bl	8003cd4 <FreqMainMenuExitHandler>
 80037c0:	4603      	mov	r3, r0
 80037c2:	461a      	mov	r2, r3
 80037c4:	4b12      	ldr	r3, [pc, #72]	; (8003810 <EM_ProcessEvent+0x2e8>)
 80037c6:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 80037c8:	2002      	movs	r0, #2
 80037ca:	f000 fe87 	bl	80044dc <ToplevelMenu_setStatus>
			}
			if(eNewEvent == evBlueBtn)
 80037ce:	4b12      	ldr	r3, [pc, #72]	; (8003818 <EM_ProcessEvent+0x2f0>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d105      	bne.n	80037e2 <EM_ProcessEvent+0x2ba>
			{
				eNextState = FreqPresetMenuEntryHandler();
 80037d6:	f000 fa9f 	bl	8003d18 <FreqPresetMenuEntryHandler>
 80037da:	4603      	mov	r3, r0
 80037dc:	461a      	mov	r2, r3
 80037de:	4b0c      	ldr	r3, [pc, #48]	; (8003810 <EM_ProcessEvent+0x2e8>)
 80037e0:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80037e2:	4b0d      	ldr	r3, [pc, #52]	; (8003818 <EM_ProcessEvent+0x2f0>)
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d105      	bne.n	80037f6 <EM_ProcessEvent+0x2ce>
			{
				eNextState = FreqAdjustMenuEntryHandler();
 80037ea:	f000 faf3 	bl	8003dd4 <FreqAdjustMenuEntryHandler>
 80037ee:	4603      	mov	r3, r0
 80037f0:	461a      	mov	r2, r3
 80037f2:	4b07      	ldr	r3, [pc, #28]	; (8003810 <EM_ProcessEvent+0x2e8>)
 80037f4:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 80037f6:	4b08      	ldr	r3, [pc, #32]	; (8003818 <EM_ProcessEvent+0x2f0>)
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	2b03      	cmp	r3, #3
 80037fc:	f040 80c5 	bne.w	800398a <EM_ProcessEvent+0x462>
			{
				eNextState = FreqSweepMenuEntryHandler();
 8003800:	f000 f8ea 	bl	80039d8 <FreqSweepMenuEntryHandler>
 8003804:	4603      	mov	r3, r0
 8003806:	461a      	mov	r2, r3
 8003808:	4b01      	ldr	r3, [pc, #4]	; (8003810 <EM_ProcessEvent+0x2e8>)
 800380a:	701a      	strb	r2, [r3, #0]
			}

			break;
 800380c:	e0bd      	b.n	800398a <EM_ProcessEvent+0x462>
 800380e:	bf00      	nop
 8003810:	20001a12 	.word	0x20001a12
 8003814:	080123ac 	.word	0x080123ac
 8003818:	20001a13 	.word	0x20001a13
 800381c:	080123b8 	.word	0x080123b8
 8003820:	080123d4 	.word	0x080123d4
 8003824:	080123f0 	.word	0x080123f0
 8003828:	08012408 	.word	0x08012408
 800382c:	08012420 	.word	0x08012420
 8003830:	08012438 	.word	0x08012438
 8003834:	08012450 	.word	0x08012450
 8003838:	08012468 	.word	0x08012468
 800383c:	08012480 	.word	0x08012480

		case Freq_Preset_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Preset_Menu_State\n");
 8003840:	4857      	ldr	r0, [pc, #348]	; (80039a0 <EM_ProcessEvent+0x478>)
 8003842:	f00b fb4f 	bl	800eee4 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003846:	4b57      	ldr	r3, [pc, #348]	; (80039a4 <EM_ProcessEvent+0x47c>)
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	2b05      	cmp	r3, #5
 800384c:	d105      	bne.n	800385a <EM_ProcessEvent+0x332>
			{
				eNextState = FreqPresetMenuInputHandler();
 800384e:	f000 fa95 	bl	8003d7c <FreqPresetMenuInputHandler>
 8003852:	4603      	mov	r3, r0
 8003854:	461a      	mov	r2, r3
 8003856:	4b54      	ldr	r3, [pc, #336]	; (80039a8 <EM_ProcessEvent+0x480>)
 8003858:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800385a:	4b52      	ldr	r3, [pc, #328]	; (80039a4 <EM_ProcessEvent+0x47c>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	2b06      	cmp	r3, #6
 8003860:	f040 8095 	bne.w	800398e <EM_ProcessEvent+0x466>
			{
				eNextState = FreqPresetMenuExitHandler();
 8003864:	f000 faa0 	bl	8003da8 <FreqPresetMenuExitHandler>
 8003868:	4603      	mov	r3, r0
 800386a:	461a      	mov	r2, r3
 800386c:	4b4e      	ldr	r3, [pc, #312]	; (80039a8 <EM_ProcessEvent+0x480>)
 800386e:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003870:	e08d      	b.n	800398e <EM_ProcessEvent+0x466>

		case Freq_Adjust_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Adjust_Menu_State\n");
 8003872:	484e      	ldr	r0, [pc, #312]	; (80039ac <EM_ProcessEvent+0x484>)
 8003874:	f00b fb36 	bl	800eee4 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003878:	4b4a      	ldr	r3, [pc, #296]	; (80039a4 <EM_ProcessEvent+0x47c>)
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b05      	cmp	r3, #5
 800387e:	d105      	bne.n	800388c <EM_ProcessEvent+0x364>
			{
				eNextState = FreqAdjustMenuInputHandler();
 8003880:	f000 faca 	bl	8003e18 <FreqAdjustMenuInputHandler>
 8003884:	4603      	mov	r3, r0
 8003886:	461a      	mov	r2, r3
 8003888:	4b47      	ldr	r3, [pc, #284]	; (80039a8 <EM_ProcessEvent+0x480>)
 800388a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800388c:	4b45      	ldr	r3, [pc, #276]	; (80039a4 <EM_ProcessEvent+0x47c>)
 800388e:	781b      	ldrb	r3, [r3, #0]
 8003890:	2b06      	cmp	r3, #6
 8003892:	d17e      	bne.n	8003992 <EM_ProcessEvent+0x46a>
			{
				eNextState = FreqAdjustMenuExitHandler();
 8003894:	f000 fad2 	bl	8003e3c <FreqAdjustMenuExitHandler>
 8003898:	4603      	mov	r3, r0
 800389a:	461a      	mov	r2, r3
 800389c:	4b42      	ldr	r3, [pc, #264]	; (80039a8 <EM_ProcessEvent+0x480>)
 800389e:	701a      	strb	r2, [r3, #0]
			}
			break;
 80038a0:	e077      	b.n	8003992 <EM_ProcessEvent+0x46a>

		case Freq_Sweep_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Freq_Sweep_Menu_State\n");
 80038a2:	4843      	ldr	r0, [pc, #268]	; (80039b0 <EM_ProcessEvent+0x488>)
 80038a4:	f00b fb1e 	bl	800eee4 <puts>
			#endif

			if(eNewEvent == evBlueBtn)
 80038a8:	4b3e      	ldr	r3, [pc, #248]	; (80039a4 <EM_ProcessEvent+0x47c>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d106      	bne.n	80038be <EM_ProcessEvent+0x396>
			{
				// enable
				eNextState = FreqSweepMenuInputHandler(evSweepEnableBtn);
 80038b0:	2007      	movs	r0, #7
 80038b2:	f000 f8ed 	bl	8003a90 <FreqSweepMenuInputHandler>
 80038b6:	4603      	mov	r3, r0
 80038b8:	461a      	mov	r2, r3
 80038ba:	4b3b      	ldr	r3, [pc, #236]	; (80039a8 <EM_ProcessEvent+0x480>)
 80038bc:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80038be:	4b39      	ldr	r3, [pc, #228]	; (80039a4 <EM_ProcessEvent+0x47c>)
 80038c0:	781b      	ldrb	r3, [r3, #0]
 80038c2:	2b02      	cmp	r3, #2
 80038c4:	d106      	bne.n	80038d4 <EM_ProcessEvent+0x3ac>
			{
				// direction
				eNextState = FreqSweepMenuInputHandler(evSweepModeBtn);
 80038c6:	2008      	movs	r0, #8
 80038c8:	f000 f8e2 	bl	8003a90 <FreqSweepMenuInputHandler>
 80038cc:	4603      	mov	r3, r0
 80038ce:	461a      	mov	r2, r3
 80038d0:	4b35      	ldr	r3, [pc, #212]	; (80039a8 <EM_ProcessEvent+0x480>)
 80038d2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 80038d4:	4b33      	ldr	r3, [pc, #204]	; (80039a4 <EM_ProcessEvent+0x47c>)
 80038d6:	781b      	ldrb	r3, [r3, #0]
 80038d8:	2b03      	cmp	r3, #3
 80038da:	d106      	bne.n	80038ea <EM_ProcessEvent+0x3c2>
			{
				// set sweep speed
				eNextState = FreqSweepMenuInputHandler(evSweepSpeedBtn);
 80038dc:	2009      	movs	r0, #9
 80038de:	f000 f8d7 	bl	8003a90 <FreqSweepMenuInputHandler>
 80038e2:	4603      	mov	r3, r0
 80038e4:	461a      	mov	r2, r3
 80038e6:	4b30      	ldr	r3, [pc, #192]	; (80039a8 <EM_ProcessEvent+0x480>)
 80038e8:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 80038ea:	4b2e      	ldr	r3, [pc, #184]	; (80039a4 <EM_ProcessEvent+0x47c>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d106      	bne.n	8003900 <EM_ProcessEvent+0x3d8>
			{
				// set lower/upper sweep limit
				eNextState = FreqSweepMenuInputHandler(evSweepLimitBtn);
 80038f2:	200a      	movs	r0, #10
 80038f4:	f000 f8cc 	bl	8003a90 <FreqSweepMenuInputHandler>
 80038f8:	4603      	mov	r3, r0
 80038fa:	461a      	mov	r2, r3
 80038fc:	4b2a      	ldr	r3, [pc, #168]	; (80039a8 <EM_ProcessEvent+0x480>)
 80038fe:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderSet)
 8003900:	4b28      	ldr	r3, [pc, #160]	; (80039a4 <EM_ProcessEvent+0x47c>)
 8003902:	781b      	ldrb	r3, [r3, #0]
 8003904:	2b05      	cmp	r3, #5
 8003906:	d106      	bne.n	8003916 <EM_ProcessEvent+0x3ee>
			{
				eNextState = FreqSweepMenuInputHandler(evEncoderSweep);
 8003908:	200b      	movs	r0, #11
 800390a:	f000 f8c1 	bl	8003a90 <FreqSweepMenuInputHandler>
 800390e:	4603      	mov	r3, r0
 8003910:	461a      	mov	r2, r3
 8003912:	4b25      	ldr	r3, [pc, #148]	; (80039a8 <EM_ProcessEvent+0x480>)
 8003914:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003916:	4b23      	ldr	r3, [pc, #140]	; (80039a4 <EM_ProcessEvent+0x47c>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	2b06      	cmp	r3, #6
 800391c:	d13b      	bne.n	8003996 <EM_ProcessEvent+0x46e>
			{
				eNextState = FreqSweepMenuExitHandler();
 800391e:	f000 f99f 	bl	8003c60 <FreqSweepMenuExitHandler>
 8003922:	4603      	mov	r3, r0
 8003924:	461a      	mov	r2, r3
 8003926:	4b20      	ldr	r3, [pc, #128]	; (80039a8 <EM_ProcessEvent+0x480>)
 8003928:	701a      	strb	r2, [r3, #0]
			}

			break;
 800392a:	e034      	b.n	8003996 <EM_ProcessEvent+0x46e>
// BIAS MENUS

		case Bias_Menu_State:

			#ifdef SWV_DEBUG_ENABLED
				  printf("Bias_Menu_State\n");
 800392c:	4821      	ldr	r0, [pc, #132]	; (80039b4 <EM_ProcessEvent+0x48c>)
 800392e:	f00b fad9 	bl	800eee4 <puts>
			#endif

			if(eNewEvent == evEncoderSet)
 8003932:	4b1c      	ldr	r3, [pc, #112]	; (80039a4 <EM_ProcessEvent+0x47c>)
 8003934:	781b      	ldrb	r3, [r3, #0]
 8003936:	2b05      	cmp	r3, #5
 8003938:	d105      	bne.n	8003946 <EM_ProcessEvent+0x41e>
			{
				eNextState = BiasMenuInputHandler();
 800393a:	f7ff fdc3 	bl	80034c4 <BiasMenuInputHandler>
 800393e:	4603      	mov	r3, r0
 8003940:	461a      	mov	r2, r3
 8003942:	4b19      	ldr	r3, [pc, #100]	; (80039a8 <EM_ProcessEvent+0x480>)
 8003944:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003946:	4b17      	ldr	r3, [pc, #92]	; (80039a4 <EM_ProcessEvent+0x47c>)
 8003948:	781b      	ldrb	r3, [r3, #0]
 800394a:	2b06      	cmp	r3, #6
 800394c:	d125      	bne.n	800399a <EM_ProcessEvent+0x472>
			{
				eNextState = BiasMenuExitHandler();
 800394e:	f7ff fdcf 	bl	80034f0 <BiasMenuExitHandler>
 8003952:	4603      	mov	r3, r0
 8003954:	461a      	mov	r2, r3
 8003956:	4b14      	ldr	r3, [pc, #80]	; (80039a8 <EM_ProcessEvent+0x480>)
 8003958:	701a      	strb	r2, [r3, #0]
				ToplevelMenu_setStatus(ENABLE_TOPLEVEL_OUTPUT_MENU);
 800395a:	2002      	movs	r0, #2
 800395c:	f000 fdbe 	bl	80044dc <ToplevelMenu_setStatus>
			}

			break;
 8003960:	e01b      	b.n	800399a <EM_ProcessEvent+0x472>

		default:
			break;
 8003962:	bf00      	nop
 8003964:	e01a      	b.n	800399c <EM_ProcessEvent+0x474>
			break;
 8003966:	bf00      	nop
 8003968:	e018      	b.n	800399c <EM_ProcessEvent+0x474>
			break;
 800396a:	bf00      	nop
 800396c:	e016      	b.n	800399c <EM_ProcessEvent+0x474>
			break;
 800396e:	bf00      	nop
 8003970:	e014      	b.n	800399c <EM_ProcessEvent+0x474>
			break;
 8003972:	bf00      	nop
 8003974:	e012      	b.n	800399c <EM_ProcessEvent+0x474>
			break;
 8003976:	bf00      	nop
 8003978:	e010      	b.n	800399c <EM_ProcessEvent+0x474>
			break;
 800397a:	bf00      	nop
 800397c:	e00e      	b.n	800399c <EM_ProcessEvent+0x474>
			break;
 800397e:	bf00      	nop
 8003980:	e00c      	b.n	800399c <EM_ProcessEvent+0x474>
			break;
 8003982:	bf00      	nop
 8003984:	e00a      	b.n	800399c <EM_ProcessEvent+0x474>
			break;
 8003986:	bf00      	nop
 8003988:	e008      	b.n	800399c <EM_ProcessEvent+0x474>
			break;
 800398a:	bf00      	nop
 800398c:	e006      	b.n	800399c <EM_ProcessEvent+0x474>
			break;
 800398e:	bf00      	nop
 8003990:	e004      	b.n	800399c <EM_ProcessEvent+0x474>
			break;
 8003992:	bf00      	nop
 8003994:	e002      	b.n	800399c <EM_ProcessEvent+0x474>
			break;
 8003996:	bf00      	nop
 8003998:	e000      	b.n	800399c <EM_ProcessEvent+0x474>
			break;
 800399a:	bf00      	nop
	}

}
 800399c:	bf00      	nop
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	08012498 	.word	0x08012498
 80039a4:	20001a13 	.word	0x20001a13
 80039a8:	20001a12 	.word	0x20001a12
 80039ac:	080124b0 	.word	0x080124b0
 80039b0:	080124c8 	.word	0x080124c8
 80039b4:	080124e0 	.word	0x080124e0

080039b8 <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	4603      	mov	r3, r0
 80039c0:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 80039c2:	4a04      	ldr	r2, [pc, #16]	; (80039d4 <EM_SetNewEvent+0x1c>)
 80039c4:	79fb      	ldrb	r3, [r7, #7]
 80039c6:	7013      	strb	r3, [r2, #0]
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr
 80039d4:	20001a13 	.word	0x20001a13

080039d8 <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuEntryHandler captured\n");
 80039dc:	4825      	ldr	r0, [pc, #148]	; (8003a74 <FreqSweepMenuEntryHandler+0x9c>)
 80039de:	f00b fa81 	bl	800eee4 <puts>
	#endif

	DM_RefreshScreen();
 80039e2:	f7fd fc07 	bl	80011f4 <DM_RefreshScreen>

	if( sweep_upper_bounds_longest_output_arr != OUTPUT_TIMER->ARR)
 80039e6:	4b24      	ldr	r3, [pc, #144]	; (8003a78 <FreqSweepMenuEntryHandler+0xa0>)
 80039e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ea:	ee07 3a90 	vmov	s15, r3
 80039ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80039f2:	4b22      	ldr	r3, [pc, #136]	; (8003a7c <FreqSweepMenuEntryHandler+0xa4>)
 80039f4:	edd3 7a00 	vldr	s15, [r3]
 80039f8:	eeb4 7a67 	vcmp.f32	s14, s15
 80039fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a00:	d008      	beq.n	8003a14 <FreqSweepMenuEntryHandler+0x3c>
		sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8003a02:	4b1d      	ldr	r3, [pc, #116]	; (8003a78 <FreqSweepMenuEntryHandler+0xa0>)
 8003a04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a06:	ee07 3a90 	vmov	s15, r3
 8003a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a0e:	4b1b      	ldr	r3, [pc, #108]	; (8003a7c <FreqSweepMenuEntryHandler+0xa4>)
 8003a10:	edc3 7a00 	vstr	s15, [r3]

	if( sweep_upper_bounds_longest_output_arr == MIN_OUTPUT_ARR)
 8003a14:	4b19      	ldr	r3, [pc, #100]	; (8003a7c <FreqSweepMenuEntryHandler+0xa4>)
 8003a16:	edd3 7a00 	vldr	s15, [r3]
 8003a1a:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8003a1e:	eef4 7a47 	vcmp.f32	s15, s14
 8003a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a26:	d101      	bne.n	8003a2c <FreqSweepMenuEntryHandler+0x54>
	{
		_setSweepModeDown();
 8003a28:	f000 fa1e 	bl	8003e68 <_setSweepModeDown>
	}

	_setEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8003a2c:	2000      	movs	r0, #0
 8003a2e:	f000 fa75 	bl	8003f1c <_setEncoderControlMode>
	_setSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8003a32:	2000      	movs	r0, #0
 8003a34:	f000 fad0 	bl	8003fd8 <_setSweepTimerAutoReloadForEncoderControl>
	calculated_sweep_in_hertz = _getCalculatedSweepFrequencyInHertz();
 8003a38:	f000 fb0a 	bl	8004050 <_getCalculatedSweepFrequencyInHertz>
 8003a3c:	eef0 7a40 	vmov.f32	s15, s0
 8003a40:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <FreqSweepMenuEntryHandler+0xa8>)
 8003a42:	edc3 7a00 	vstr	s15, [r3]

	// reset sweep start value
	SWEEP_TIMER->CNT = 0;
 8003a46:	4b0f      	ldr	r3, [pc, #60]	; (8003a84 <FreqSweepMenuEntryHandler+0xac>)
 8003a48:	2200      	movs	r2, #0
 8003a4a:	625a      	str	r2, [r3, #36]	; 0x24

	// set default mode to sweep speed control
	FreqSweepMenuInputHandler(evSweepSpeedBtn);
 8003a4c:	2009      	movs	r0, #9
 8003a4e:	f000 f81f 	bl	8003a90 <FreqSweepMenuInputHandler>

	// sweep start speed
	SWEEP_TIMER->ARR = MIN_SWEEP_ARR;
 8003a52:	4b0c      	ldr	r3, [pc, #48]	; (8003a84 <FreqSweepMenuEntryHandler+0xac>)
 8003a54:	f244 12a0 	movw	r2, #16800	; 0x41a0
 8003a58:	62da      	str	r2, [r3, #44]	; 0x2c
	SWEEP_TIMER->PSC = 0;
 8003a5a:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <FreqSweepMenuEntryHandler+0xac>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	629a      	str	r2, [r3, #40]	; 0x28



	// get ready to load menu
	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 8003a60:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <FreqSweepMenuEntryHandler+0xb0>)
 8003a62:	2204      	movs	r2, #4
 8003a64:	701a      	strb	r2, [r3, #0]


	// stay in this state
	eNewEvent = evIdle;
 8003a66:	4b09      	ldr	r3, [pc, #36]	; (8003a8c <FreqSweepMenuEntryHandler+0xb4>)
 8003a68:	2200      	movs	r2, #0
 8003a6a:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8003a6c:	230d      	movs	r3, #13
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	bd80      	pop	{r7, pc}
 8003a72:	bf00      	nop
 8003a74:	080124f0 	.word	0x080124f0
 8003a78:	40013400 	.word	0x40013400
 8003a7c:	20000004 	.word	0x20000004
 8003a80:	20001a30 	.word	0x20001a30
 8003a84:	40000c00 	.word	0x40000c00
 8003a88:	20001a16 	.word	0x20001a16
 8003a8c:	20001a13 	.word	0x20001a13

08003a90 <FreqSweepMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuInputHandler(eSystemEvent pEvent)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	4603      	mov	r3, r0
 8003a98:	71fb      	strb	r3, [r7, #7]
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 8003a9a:	4865      	ldr	r0, [pc, #404]	; (8003c30 <FreqSweepMenuInputHandler+0x1a0>)
 8003a9c:	f00b fa22 	bl	800eee4 <puts>
	#endif



	switch(pEvent)
 8003aa0:	79fb      	ldrb	r3, [r7, #7]
 8003aa2:	3b07      	subs	r3, #7
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	f200 80ba 	bhi.w	8003c1e <FreqSweepMenuInputHandler+0x18e>
 8003aaa:	a201      	add	r2, pc, #4	; (adr r2, 8003ab0 <FreqSweepMenuInputHandler+0x20>)
 8003aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ab0:	08003ac5 	.word	0x08003ac5
 8003ab4:	08003ae5 	.word	0x08003ae5
 8003ab8:	08003c0f 	.word	0x08003c0f
 8003abc:	08003c17 	.word	0x08003c17
 8003ac0:	08003b25 	.word	0x08003b25
	{
		case evSweepEnableBtn:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepEnable captured\n");
 8003ac4:	485b      	ldr	r0, [pc, #364]	; (8003c34 <FreqSweepMenuInputHandler+0x1a4>)
 8003ac6:	f00b fa0d 	bl	800eee4 <puts>
			#endif

			// toggle enable/disable
			SWEEP_TIMER->DIER 	^= TIM_DIER_UIE;
 8003aca:	4b5b      	ldr	r3, [pc, #364]	; (8003c38 <FreqSweepMenuInputHandler+0x1a8>)
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	4a5a      	ldr	r2, [pc, #360]	; (8003c38 <FreqSweepMenuInputHandler+0x1a8>)
 8003ad0:	f083 0301 	eor.w	r3, r3, #1
 8003ad4:	60d3      	str	r3, [r2, #12]
			SWEEP_TIMER->CR1	^= TIM_CR1_CEN;
 8003ad6:	4b58      	ldr	r3, [pc, #352]	; (8003c38 <FreqSweepMenuInputHandler+0x1a8>)
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4a57      	ldr	r2, [pc, #348]	; (8003c38 <FreqSweepMenuInputHandler+0x1a8>)
 8003adc:	f083 0301 	eor.w	r3, r3, #1
 8003ae0:	6013      	str	r3, [r2, #0]
			break;
 8003ae2:	e09d      	b.n	8003c20 <FreqSweepMenuInputHandler+0x190>

		case evSweepModeBtn:

			#ifdef SWV_DEBUG_ENABLED
				printf("evSweepMode captured\n");
 8003ae4:	4855      	ldr	r0, [pc, #340]	; (8003c3c <FreqSweepMenuInputHandler+0x1ac>)
 8003ae6:	f00b f9fd 	bl	800eee4 <puts>
			#endif

			// flip between 0:Upcounter and 1:Downcounter
			active_sweep_mode ^= 1U;
 8003aea:	4b55      	ldr	r3, [pc, #340]	; (8003c40 <FreqSweepMenuInputHandler+0x1b0>)
 8003aec:	781b      	ldrb	r3, [r3, #0]
 8003aee:	f083 0301 	eor.w	r3, r3, #1
 8003af2:	b2da      	uxtb	r2, r3
 8003af4:	4b52      	ldr	r3, [pc, #328]	; (8003c40 <FreqSweepMenuInputHandler+0x1b0>)
 8003af6:	701a      	strb	r2, [r3, #0]

			switch(active_sweep_mode)
 8003af8:	4b51      	ldr	r3, [pc, #324]	; (8003c40 <FreqSweepMenuInputHandler+0x1b0>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d004      	beq.n	8003b0a <FreqSweepMenuInputHandler+0x7a>
 8003b00:	2b02      	cmp	r3, #2
 8003b02:	d008      	beq.n	8003b16 <FreqSweepMenuInputHandler+0x86>
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <FreqSweepMenuInputHandler+0x80>
 8003b08:	e006      	b.n	8003b18 <FreqSweepMenuInputHandler+0x88>
			{
				case SWEEP_MODE_DOWN:
					_setSweepModeDown();
 8003b0a:	f000 f9ad 	bl	8003e68 <_setSweepModeDown>
					break;
 8003b0e:	e003      	b.n	8003b18 <FreqSweepMenuInputHandler+0x88>

				case SWEEP_MODE_UP:
					_setSweepModeUp();
 8003b10:	f000 f9da 	bl	8003ec8 <_setSweepModeUp>
					break;
 8003b14:	e000      	b.n	8003b18 <FreqSweepMenuInputHandler+0x88>

				case SWEEP_MODE_BIDIR:	// not used
					//SWEEP_TIMER->CR1 |= (TIM_CR1_CMS_0);
					break;
 8003b16:	bf00      	nop
			}
			// switch(active_sweep_mode)
			// TODO
			_setEncoderControlMode(theCurrentEncoderSweepFunction);
 8003b18:	4b4a      	ldr	r3, [pc, #296]	; (8003c44 <FreqSweepMenuInputHandler+0x1b4>)
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	4618      	mov	r0, r3
 8003b1e:	f000 f9fd 	bl	8003f1c <_setEncoderControlMode>

			break;
 8003b22:	e07d      	b.n	8003c20 <FreqSweepMenuInputHandler+0x190>

		// rotary encoder is turned
		case evEncoderSweep:

			#ifdef SWV_DEBUG_ENABLED
				printf("evEncoderSweep captured\n");
 8003b24:	4848      	ldr	r0, [pc, #288]	; (8003c48 <FreqSweepMenuInputHandler+0x1b8>)
 8003b26:	f00b f9dd 	bl	800eee4 <puts>
			#endif

			switch(theCurrentEncoderSweepFunction)
 8003b2a:	4b46      	ldr	r3, [pc, #280]	; (8003c44 <FreqSweepMenuInputHandler+0x1b4>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d002      	beq.n	8003b38 <FreqSweepMenuInputHandler+0xa8>
 8003b32:	2b01      	cmp	r3, #1
 8003b34:	d00b      	beq.n	8003b4e <FreqSweepMenuInputHandler+0xbe>
					break;

			}
			// switch(theCurrentEncoderSweepFunction)

			break;
 8003b36:	e073      	b.n	8003c20 <FreqSweepMenuInputHandler+0x190>
					_setSweepTimerAutoReloadForEncoderControl(ENCODER_SWEEP_SPEED_FUNCTION);
 8003b38:	2000      	movs	r0, #0
 8003b3a:	f000 fa4d 	bl	8003fd8 <_setSweepTimerAutoReloadForEncoderControl>
					calculated_sweep_in_hertz = _getCalculatedSweepFrequencyInHertz();
 8003b3e:	f000 fa87 	bl	8004050 <_getCalculatedSweepFrequencyInHertz>
 8003b42:	eef0 7a40 	vmov.f32	s15, s0
 8003b46:	4b41      	ldr	r3, [pc, #260]	; (8003c4c <FreqSweepMenuInputHandler+0x1bc>)
 8003b48:	edc3 7a00 	vstr	s15, [r3]
					break;
 8003b4c:	e05e      	b.n	8003c0c <FreqSweepMenuInputHandler+0x17c>
					switch(active_sweep_mode)
 8003b4e:	4b3c      	ldr	r3, [pc, #240]	; (8003c40 <FreqSweepMenuInputHandler+0x1b0>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d002      	beq.n	8003b5c <FreqSweepMenuInputHandler+0xcc>
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d02a      	beq.n	8003bb0 <FreqSweepMenuInputHandler+0x120>
							break;
 8003b5a:	e056      	b.n	8003c0a <FreqSweepMenuInputHandler+0x17a>
							if(ENCODER_TIMER->CNT < MIN_OUTPUT_ARR)
 8003b5c:	4b3c      	ldr	r3, [pc, #240]	; (8003c50 <FreqSweepMenuInputHandler+0x1c0>)
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	2b0c      	cmp	r3, #12
 8003b62:	d803      	bhi.n	8003b6c <FreqSweepMenuInputHandler+0xdc>
								ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8003b64:	4b3a      	ldr	r3, [pc, #232]	; (8003c50 <FreqSweepMenuInputHandler+0x1c0>)
 8003b66:	220d      	movs	r2, #13
 8003b68:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8003b6a:	e04e      	b.n	8003c0a <FreqSweepMenuInputHandler+0x17a>
							else if (ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8003b6c:	4b38      	ldr	r3, [pc, #224]	; (8003c50 <FreqSweepMenuInputHandler+0x1c0>)
 8003b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b70:	ee07 3a90 	vmov	s15, r3
 8003b74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003b78:	4b36      	ldr	r3, [pc, #216]	; (8003c54 <FreqSweepMenuInputHandler+0x1c4>)
 8003b7a:	edd3 7a00 	vldr	s15, [r3]
 8003b7e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b86:	dd09      	ble.n	8003b9c <FreqSweepMenuInputHandler+0x10c>
								ENCODER_TIMER->CNT = sweep_upper_bounds_longest_output_arr;
 8003b88:	4b32      	ldr	r3, [pc, #200]	; (8003c54 <FreqSweepMenuInputHandler+0x1c4>)
 8003b8a:	edd3 7a00 	vldr	s15, [r3]
 8003b8e:	4b30      	ldr	r3, [pc, #192]	; (8003c50 <FreqSweepMenuInputHandler+0x1c0>)
 8003b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b94:	ee17 2a90 	vmov	r2, s15
 8003b98:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8003b9a:	e036      	b.n	8003c0a <FreqSweepMenuInputHandler+0x17a>
								sweep_lower_bounds_shortest_output_arr = ENCODER_TIMER->CNT;
 8003b9c:	4b2c      	ldr	r3, [pc, #176]	; (8003c50 <FreqSweepMenuInputHandler+0x1c0>)
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	ee07 3a90 	vmov	s15, r3
 8003ba4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ba8:	4b2b      	ldr	r3, [pc, #172]	; (8003c58 <FreqSweepMenuInputHandler+0x1c8>)
 8003baa:	edc3 7a00 	vstr	s15, [r3]
							break;
 8003bae:	e02c      	b.n	8003c0a <FreqSweepMenuInputHandler+0x17a>
							if(ENCODER_TIMER->CNT >= MAX_OUTPUT_ARR)
 8003bb0:	4b27      	ldr	r3, [pc, #156]	; (8003c50 <FreqSweepMenuInputHandler+0x1c0>)
 8003bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bb4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d904      	bls.n	8003bc6 <FreqSweepMenuInputHandler+0x136>
								ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8003bbc:	4b24      	ldr	r3, [pc, #144]	; (8003c50 <FreqSweepMenuInputHandler+0x1c0>)
 8003bbe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bc2:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8003bc4:	e020      	b.n	8003c08 <FreqSweepMenuInputHandler+0x178>
							else if (ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8003bc6:	4b22      	ldr	r3, [pc, #136]	; (8003c50 <FreqSweepMenuInputHandler+0x1c0>)
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	ee07 3a90 	vmov	s15, r3
 8003bce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003bd2:	4b21      	ldr	r3, [pc, #132]	; (8003c58 <FreqSweepMenuInputHandler+0x1c8>)
 8003bd4:	edd3 7a00 	vldr	s15, [r3]
 8003bd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be0:	d509      	bpl.n	8003bf6 <FreqSweepMenuInputHandler+0x166>
								ENCODER_TIMER->CNT = sweep_lower_bounds_shortest_output_arr;
 8003be2:	4b1d      	ldr	r3, [pc, #116]	; (8003c58 <FreqSweepMenuInputHandler+0x1c8>)
 8003be4:	edd3 7a00 	vldr	s15, [r3]
 8003be8:	4b19      	ldr	r3, [pc, #100]	; (8003c50 <FreqSweepMenuInputHandler+0x1c0>)
 8003bea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bee:	ee17 2a90 	vmov	r2, s15
 8003bf2:	625a      	str	r2, [r3, #36]	; 0x24
							break;
 8003bf4:	e008      	b.n	8003c08 <FreqSweepMenuInputHandler+0x178>
								sweep_upper_bounds_longest_output_arr = ENCODER_TIMER->CNT;
 8003bf6:	4b16      	ldr	r3, [pc, #88]	; (8003c50 <FreqSweepMenuInputHandler+0x1c0>)
 8003bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfa:	ee07 3a90 	vmov	s15, r3
 8003bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c02:	4b14      	ldr	r3, [pc, #80]	; (8003c54 <FreqSweepMenuInputHandler+0x1c4>)
 8003c04:	edc3 7a00 	vstr	s15, [r3]
							break;
 8003c08:	bf00      	nop
					break;
 8003c0a:	bf00      	nop
			break;
 8003c0c:	e008      	b.n	8003c20 <FreqSweepMenuInputHandler+0x190>

		// set sweep speed button
		case evSweepSpeedBtn:
			_setEncoderControlMode(ENCODER_SWEEP_SPEED_FUNCTION);
 8003c0e:	2000      	movs	r0, #0
 8003c10:	f000 f984 	bl	8003f1c <_setEncoderControlMode>

			break;
 8003c14:	e004      	b.n	8003c20 <FreqSweepMenuInputHandler+0x190>

		// set sweep limit button
		case evSweepLimitBtn:
			_setEncoderControlMode(ENCODER_SWEEP_LIMIT_FUNCTION);
 8003c16:	2001      	movs	r0, #1
 8003c18:	f000 f980 	bl	8003f1c <_setEncoderControlMode>
					break;
			}
			*/
			// switch(active_sweep_mode)

			break;
 8003c1c:	e000      	b.n	8003c20 <FreqSweepMenuInputHandler+0x190>

		default:
			break;
 8003c1e:	bf00      	nop
	}
	// switch(pEvent)


	// stay in this state
	eNewEvent = evIdle;
 8003c20:	4b0e      	ldr	r3, [pc, #56]	; (8003c5c <FreqSweepMenuInputHandler+0x1cc>)
 8003c22:	2200      	movs	r2, #0
 8003c24:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 8003c26:	230d      	movs	r3, #13
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3708      	adds	r7, #8
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}
 8003c30:	08012514 	.word	0x08012514
 8003c34:	08012540 	.word	0x08012540
 8003c38:	40000c00 	.word	0x40000c00
 8003c3c:	08012558 	.word	0x08012558
 8003c40:	20001a14 	.word	0x20001a14
 8003c44:	20001a15 	.word	0x20001a15
 8003c48:	08012570 	.word	0x08012570
 8003c4c:	20001a30 	.word	0x20001a30
 8003c50:	40012c00 	.word	0x40012c00
 8003c54:	20000004 	.word	0x20000004
 8003c58:	20000000 	.word	0x20000000
 8003c5c:	20001a13 	.word	0x20001a13

08003c60 <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 8003c60:	b580      	push	{r7, lr}
 8003c62:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqSweepMenuExitHandler Event captured\n");
 8003c64:	480c      	ldr	r0, [pc, #48]	; (8003c98 <FreqSweepMenuExitHandler+0x38>)
 8003c66:	f00b f93d 	bl	800eee4 <puts>
	#endif

	DM_RefreshScreen();
 8003c6a:	f7fd fac3 	bl	80011f4 <DM_RefreshScreen>

	// disable sweep timer and interrupts
	SWEEP_TIMER->DIER 	&= ~(TIM_DIER_UIE);
 8003c6e:	4b0b      	ldr	r3, [pc, #44]	; (8003c9c <FreqSweepMenuExitHandler+0x3c>)
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	4a0a      	ldr	r2, [pc, #40]	; (8003c9c <FreqSweepMenuExitHandler+0x3c>)
 8003c74:	f023 0301 	bic.w	r3, r3, #1
 8003c78:	60d3      	str	r3, [r2, #12]
	SWEEP_TIMER->CR1 	&= ~(TIM_CR1_CEN);
 8003c7a:	4b08      	ldr	r3, [pc, #32]	; (8003c9c <FreqSweepMenuExitHandler+0x3c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a07      	ldr	r2, [pc, #28]	; (8003c9c <FreqSweepMenuExitHandler+0x3c>)
 8003c80:	f023 0301 	bic.w	r3, r3, #1
 8003c84:	6013      	str	r3, [r2, #0]



	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8003c86:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <FreqSweepMenuExitHandler+0x40>)
 8003c88:	2201      	movs	r2, #1
 8003c8a:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8003c8c:	4b05      	ldr	r3, [pc, #20]	; (8003ca4 <FreqSweepMenuExitHandler+0x44>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8003c92:	230a      	movs	r3, #10
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	bd80      	pop	{r7, pc}
 8003c98:	08012588 	.word	0x08012588
 8003c9c:	40000c00 	.word	0x40000c00
 8003ca0:	20001a16 	.word	0x20001a16
 8003ca4:	20001a13 	.word	0x20001a13

08003ca8 <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuEntryHandler Event captured\n");
 8003cac:	4806      	ldr	r0, [pc, #24]	; (8003cc8 <FreqMainMenuEntryHandler+0x20>)
 8003cae:	f00b f919 	bl	800eee4 <puts>
	#endif

	DM_RefreshScreen();
 8003cb2:	f7fd fa9f 	bl	80011f4 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8003cb6:	4b05      	ldr	r3, [pc, #20]	; (8003ccc <FreqMainMenuEntryHandler+0x24>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 8003cbc:	4b04      	ldr	r3, [pc, #16]	; (8003cd0 <FreqMainMenuEntryHandler+0x28>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8003cc2:	230a      	movs	r3, #10
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	080125b0 	.word	0x080125b0
 8003ccc:	20001a16 	.word	0x20001a16
 8003cd0:	20001a13 	.word	0x20001a13

08003cd4 <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqMainMenuExitHandler Event captured\n");
 8003cd8:	480a      	ldr	r0, [pc, #40]	; (8003d04 <FreqMainMenuExitHandler+0x30>)
 8003cda:	f00b f903 	bl	800eee4 <puts>
	#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 8003cde:	4b0a      	ldr	r3, [pc, #40]	; (8003d08 <FreqMainMenuExitHandler+0x34>)
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8003ce4:	4b09      	ldr	r3, [pc, #36]	; (8003d0c <FreqMainMenuExitHandler+0x38>)
 8003ce6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cea:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 8003cec:	f7fd fa82 	bl	80011f4 <DM_RefreshScreen>

	#ifdef SWV_DEBUG_ENABLED
		  printf("returning to Idle State\n");
 8003cf0:	4807      	ldr	r0, [pc, #28]	; (8003d10 <FreqMainMenuExitHandler+0x3c>)
 8003cf2:	f00b f8f7 	bl	800eee4 <puts>
	#endif

	eNewEvent = evIdle;
 8003cf6:	4b07      	ldr	r3, [pc, #28]	; (8003d14 <FreqMainMenuExitHandler+0x40>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8003cfc:	2301      	movs	r3, #1
}
 8003cfe:	4618      	mov	r0, r3
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	08012600 	.word	0x08012600
 8003d08:	20001a16 	.word	0x20001a16
 8003d0c:	40012c00 	.word	0x40012c00
 8003d10:	08012628 	.word	0x08012628
 8003d14:	20001a13 	.word	0x20001a13

08003d18 <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b082      	sub	sp, #8
 8003d1c:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuEntryHandler Event captured\n");
 8003d1e:	4812      	ldr	r0, [pc, #72]	; (8003d68 <FreqPresetMenuEntryHandler+0x50>)
 8003d20:	f00b f8e0 	bl	800eee4 <puts>
	#endif

	DM_RefreshScreen();
 8003d24:	f7fd fa66 	bl	80011f4 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 8003d28:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <FreqPresetMenuEntryHandler+0x54>)
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	701a      	strb	r2, [r3, #0]

	FreqProfile_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 8003d2e:	f000 ffaf 	bl	8004c90 <FreqO_GetFPresetObject>
 8003d32:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00a      	beq.n	8003d50 <FreqPresetMenuEntryHandler+0x38>
	{
		ENCODER_TIMER->CNT = pFreqPresetTmp->epos;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	791a      	ldrb	r2, [r3, #4]
 8003d3e:	4b0c      	ldr	r3, [pc, #48]	; (8003d70 <FreqPresetMenuEntryHandler+0x58>)
 8003d40:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FreqO_GetFreqPresetEncoderRange();
 8003d42:	f000 ffd7 	bl	8004cf4 <FreqO_GetFreqPresetEncoderRange>
 8003d46:	4603      	mov	r3, r0
 8003d48:	461a      	mov	r2, r3
 8003d4a:	4b09      	ldr	r3, [pc, #36]	; (8003d70 <FreqPresetMenuEntryHandler+0x58>)
 8003d4c:	62da      	str	r2, [r3, #44]	; 0x2c
 8003d4e:	e002      	b.n	8003d56 <FreqPresetMenuEntryHandler+0x3e>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 8003d50:	4808      	ldr	r0, [pc, #32]	; (8003d74 <FreqPresetMenuEntryHandler+0x5c>)
 8003d52:	f7fd fa95 	bl	8001280 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 8003d56:	4b08      	ldr	r3, [pc, #32]	; (8003d78 <FreqPresetMenuEntryHandler+0x60>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8003d5c:	230b      	movs	r3, #11
}
 8003d5e:	4618      	mov	r0, r3
 8003d60:	3708      	adds	r7, #8
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	08012640 	.word	0x08012640
 8003d6c:	20001a16 	.word	0x20001a16
 8003d70:	40012c00 	.word	0x40012c00
 8003d74:	0801266c 	.word	0x0801266c
 8003d78:	20001a13 	.word	0x20001a13

08003d7c <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuInputHandler Event captured\n");
 8003d80:	4807      	ldr	r0, [pc, #28]	; (8003da0 <FreqPresetMenuInputHandler+0x24>)
 8003d82:	f00b f8af 	bl	800eee4 <puts>
	#endif

	FreqO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003d86:	2001      	movs	r0, #1
 8003d88:	f001 fb18 	bl	80053bc <SM_GetEncoderValue>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f000 fe8c 	bl	8004aac <FreqO_ModifyOutput>

	// stay in this state
	eNewEvent = evIdle;
 8003d94:	4b03      	ldr	r3, [pc, #12]	; (8003da4 <FreqPresetMenuInputHandler+0x28>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 8003d9a:	230b      	movs	r3, #11
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	080126a8 	.word	0x080126a8
 8003da4:	20001a13 	.word	0x20001a13

08003da8 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqPresetMenuExitHandler Event captured\n");
 8003dac:	4806      	ldr	r0, [pc, #24]	; (8003dc8 <FreqPresetMenuExitHandler+0x20>)
 8003dae:	f00b f899 	bl	800eee4 <puts>
	#endif

	DM_RefreshScreen();
 8003db2:	f7fd fa1f 	bl	80011f4 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8003db6:	4b05      	ldr	r3, [pc, #20]	; (8003dcc <FreqPresetMenuExitHandler+0x24>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8003dbc:	4b04      	ldr	r3, [pc, #16]	; (8003dd0 <FreqPresetMenuExitHandler+0x28>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8003dc2:	230a      	movs	r3, #10
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	080126d4 	.word	0x080126d4
 8003dcc:	20001a16 	.word	0x20001a16
 8003dd0:	20001a13 	.word	0x20001a13

08003dd4 <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuEntryHandler Event captured\n");
 8003dd8:	480a      	ldr	r0, [pc, #40]	; (8003e04 <FreqAdjustMenuEntryHandler+0x30>)
 8003dda:	f00b f883 	bl	800eee4 <puts>
	#endif

	DM_RefreshScreen();
 8003dde:	f7fd fa09 	bl	80011f4 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 8003de2:	4b09      	ldr	r3, [pc, #36]	; (8003e08 <FreqAdjustMenuEntryHandler+0x34>)
 8003de4:	2203      	movs	r2, #3
 8003de6:	701a      	strb	r2, [r3, #0]

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8003de8:	4b08      	ldr	r3, [pc, #32]	; (8003e0c <FreqAdjustMenuEntryHandler+0x38>)
 8003dea:	4a09      	ldr	r2, [pc, #36]	; (8003e10 <FreqAdjustMenuEntryHandler+0x3c>)
 8003dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dee:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 8003df0:	4b07      	ldr	r3, [pc, #28]	; (8003e10 <FreqAdjustMenuEntryHandler+0x3c>)
 8003df2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003df6:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8003df8:	4b06      	ldr	r3, [pc, #24]	; (8003e14 <FreqAdjustMenuEntryHandler+0x40>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8003dfe:	230c      	movs	r3, #12
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	bd80      	pop	{r7, pc}
 8003e04:	08012700 	.word	0x08012700
 8003e08:	20001a16 	.word	0x20001a16
 8003e0c:	40013400 	.word	0x40013400
 8003e10:	40012c00 	.word	0x40012c00
 8003e14:	20001a13 	.word	0x20001a13

08003e18 <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuInputHandler Event captured\n");
 8003e1c:	4805      	ldr	r0, [pc, #20]	; (8003e34 <FreqAdjustMenuInputHandler+0x1c>)
 8003e1e:	f00b f861 	bl	800eee4 <puts>
	#endif

	FreqO_AdjustFreq();
 8003e22:	f000 fe35 	bl	8004a90 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 8003e26:	4b04      	ldr	r3, [pc, #16]	; (8003e38 <FreqAdjustMenuInputHandler+0x20>)
 8003e28:	2200      	movs	r2, #0
 8003e2a:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8003e2c:	230c      	movs	r3, #12
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	08012514 	.word	0x08012514
 8003e38:	20001a13 	.word	0x20001a13

08003e3c <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("FreqAdjustMenuExitHandler Event captured\n");
 8003e40:	4806      	ldr	r0, [pc, #24]	; (8003e5c <FreqAdjustMenuExitHandler+0x20>)
 8003e42:	f00b f84f 	bl	800eee4 <puts>
	#endif

	DM_RefreshScreen();
 8003e46:	f7fd f9d5 	bl	80011f4 <DM_RefreshScreen>

	// disable the menu
	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 8003e4a:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <FreqAdjustMenuExitHandler+0x24>)
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8003e50:	4b04      	ldr	r3, [pc, #16]	; (8003e64 <FreqAdjustMenuExitHandler+0x28>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 8003e56:	230a      	movs	r3, #10
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	0801272c 	.word	0x0801272c
 8003e60:	20001a16 	.word	0x20001a16
 8003e64:	20001a13 	.word	0x20001a13

08003e68 <_setSweepModeDown>:
 *	@param None
 *	@retval None
 *
 */
void _setSweepModeDown()
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8003e6c:	4b10      	ldr	r3, [pc, #64]	; (8003eb0 <_setSweepModeDown+0x48>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a0f      	ldr	r2, [pc, #60]	; (8003eb0 <_setSweepModeDown+0x48>)
 8003e72:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003e76:	6013      	str	r3, [r2, #0]

	// 0: Counter used as upcounter
	SWEEP_TIMER->CR1 |= (TIM_CR1_DIR);
 8003e78:	4b0d      	ldr	r3, [pc, #52]	; (8003eb0 <_setSweepModeDown+0x48>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a0c      	ldr	r2, [pc, #48]	; (8003eb0 <_setSweepModeDown+0x48>)
 8003e7e:	f043 0310 	orr.w	r3, r3, #16
 8003e82:	6013      	str	r3, [r2, #0]

	sweep_lower_bounds_shortest_output_arr  = OUTPUT_TIMER->ARR;
 8003e84:	4b0b      	ldr	r3, [pc, #44]	; (8003eb4 <_setSweepModeDown+0x4c>)
 8003e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e88:	ee07 3a90 	vmov	s15, r3
 8003e8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e90:	4b09      	ldr	r3, [pc, #36]	; (8003eb8 <_setSweepModeDown+0x50>)
 8003e92:	edc3 7a00 	vstr	s15, [r3]
	sweep_upper_bounds_longest_output_arr  = MAX_OUTPUT_ARR;
 8003e96:	4b09      	ldr	r3, [pc, #36]	; (8003ebc <_setSweepModeDown+0x54>)
 8003e98:	4a09      	ldr	r2, [pc, #36]	; (8003ec0 <_setSweepModeDown+0x58>)
 8003e9a:	601a      	str	r2, [r3, #0]
	ENCODER_TIMER->CNT = MAX_OUTPUT_ARR;
 8003e9c:	4b09      	ldr	r3, [pc, #36]	; (8003ec4 <_setSweepModeDown+0x5c>)
 8003e9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ea2:	625a      	str	r2, [r3, #36]	; 0x24

}
 8003ea4:	bf00      	nop
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
 8003eae:	bf00      	nop
 8003eb0:	40000c00 	.word	0x40000c00
 8003eb4:	40013400 	.word	0x40013400
 8003eb8:	20000000 	.word	0x20000000
 8003ebc:	20000004 	.word	0x20000004
 8003ec0:	477fff00 	.word	0x477fff00
 8003ec4:	40012c00 	.word	0x40012c00

08003ec8 <_setSweepModeUp>:
 *	@param None
 *	@retval None
 *
 */
void _setSweepModeUp()
{
 8003ec8:	b480      	push	{r7}
 8003eca:	af00      	add	r7, sp, #0

	// "Center-aligned" mode sets direction register to readonly,
	// so disable "Center-aligned" mode first
	SWEEP_TIMER->CR1 &= ~((TIM_CR1_CMS_0) | (TIM_CR1_CMS_1));
 8003ecc:	4b0e      	ldr	r3, [pc, #56]	; (8003f08 <_setSweepModeUp+0x40>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a0d      	ldr	r2, [pc, #52]	; (8003f08 <_setSweepModeUp+0x40>)
 8003ed2:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8003ed6:	6013      	str	r3, [r2, #0]

	// 1: Counter used as downcounter
	SWEEP_TIMER->CR1 &= ~(TIM_CR1_DIR);
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <_setSweepModeUp+0x40>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a0a      	ldr	r2, [pc, #40]	; (8003f08 <_setSweepModeUp+0x40>)
 8003ede:	f023 0310 	bic.w	r3, r3, #16
 8003ee2:	6013      	str	r3, [r2, #0]

	sweep_upper_bounds_longest_output_arr  = OUTPUT_TIMER->ARR;
 8003ee4:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <_setSweepModeUp+0x44>)
 8003ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ee8:	ee07 3a90 	vmov	s15, r3
 8003eec:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ef0:	4b07      	ldr	r3, [pc, #28]	; (8003f10 <_setSweepModeUp+0x48>)
 8003ef2:	edc3 7a00 	vstr	s15, [r3]
	sweep_lower_bounds_shortest_output_arr  = MIN_OUTPUT_ARR;
 8003ef6:	4b07      	ldr	r3, [pc, #28]	; (8003f14 <_setSweepModeUp+0x4c>)
 8003ef8:	4a07      	ldr	r2, [pc, #28]	; (8003f18 <_setSweepModeUp+0x50>)
 8003efa:	601a      	str	r2, [r3, #0]


}
 8003efc:	bf00      	nop
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	40000c00 	.word	0x40000c00
 8003f0c:	40013400 	.word	0x40013400
 8003f10:	20000004 	.word	0x20000004
 8003f14:	20000000 	.word	0x20000000
 8003f18:	41500000 	.word	0x41500000

08003f1c <_setEncoderControlMode>:

void _setEncoderControlMode(eEncoderSweepFunctions pFunction)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	4603      	mov	r3, r0
 8003f24:	71fb      	strb	r3, [r7, #7]
	if(pFunction)
 8003f26:	79fb      	ldrb	r3, [r7, #7]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d038      	beq.n	8003f9e <_setEncoderControlMode+0x82>
	{
		//	ENCODER_SWEEP_LIMIT_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8003f2c:	4a24      	ldr	r2, [pc, #144]	; (8003fc0 <_setEncoderControlMode+0xa4>)
 8003f2e:	79fb      	ldrb	r3, [r7, #7]
 8003f30:	7013      	strb	r3, [r2, #0]
		ENCODER_TIMER->CNT = MIN_OUTPUT_ARR;
 8003f32:	4b24      	ldr	r3, [pc, #144]	; (8003fc4 <_setEncoderControlMode+0xa8>)
 8003f34:	220d      	movs	r2, #13
 8003f36:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_OUTPUT_ARR;
 8003f38:	4b22      	ldr	r3, [pc, #136]	; (8003fc4 <_setEncoderControlMode+0xa8>)
 8003f3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003f3e:	62da      	str	r2, [r3, #44]	; 0x2c

		switch(active_sweep_mode)
 8003f40:	4b21      	ldr	r3, [pc, #132]	; (8003fc8 <_setEncoderControlMode+0xac>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <_setEncoderControlMode+0x32>
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d014      	beq.n	8003f76 <_setEncoderControlMode+0x5a>
					// if encoder position is below the lower bounds set it above it
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
				break;
			default:
				break;
 8003f4c:	e031      	b.n	8003fb2 <_setEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT > sweep_upper_bounds_longest_output_arr)
 8003f4e:	4b1d      	ldr	r3, [pc, #116]	; (8003fc4 <_setEncoderControlMode+0xa8>)
 8003f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f52:	ee07 3a90 	vmov	s15, r3
 8003f56:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f5a:	4b1c      	ldr	r3, [pc, #112]	; (8003fcc <_setEncoderControlMode+0xb0>)
 8003f5c:	edd3 7a00 	vldr	s15, [r3]
 8003f60:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f68:	dc00      	bgt.n	8003f6c <_setEncoderControlMode+0x50>
				break;
 8003f6a:	e022      	b.n	8003fb2 <_setEncoderControlMode+0x96>
						 ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8003f6c:	4b18      	ldr	r3, [pc, #96]	; (8003fd0 <_setEncoderControlMode+0xb4>)
 8003f6e:	4a15      	ldr	r2, [pc, #84]	; (8003fc4 <_setEncoderControlMode+0xa8>)
 8003f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f72:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8003f74:	e01d      	b.n	8003fb2 <_setEncoderControlMode+0x96>
					if(ENCODER_TIMER->CNT < sweep_lower_bounds_shortest_output_arr)
 8003f76:	4b13      	ldr	r3, [pc, #76]	; (8003fc4 <_setEncoderControlMode+0xa8>)
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	ee07 3a90 	vmov	s15, r3
 8003f7e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003f82:	4b14      	ldr	r3, [pc, #80]	; (8003fd4 <_setEncoderControlMode+0xb8>)
 8003f84:	edd3 7a00 	vldr	s15, [r3]
 8003f88:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f90:	d400      	bmi.n	8003f94 <_setEncoderControlMode+0x78>
				break;
 8003f92:	e00e      	b.n	8003fb2 <_setEncoderControlMode+0x96>
						ENCODER_TIMER->CNT = OUTPUT_TIMER->ARR;
 8003f94:	4b0e      	ldr	r3, [pc, #56]	; (8003fd0 <_setEncoderControlMode+0xb4>)
 8003f96:	4a0b      	ldr	r2, [pc, #44]	; (8003fc4 <_setEncoderControlMode+0xa8>)
 8003f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9a:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 8003f9c:	e009      	b.n	8003fb2 <_setEncoderControlMode+0x96>
		// switch(active_sweep_mode)
	}
	else
	{
		// ENCODER_SWEEP_SPEED_FUNCTION
		theCurrentEncoderSweepFunction = pFunction;
 8003f9e:	4a08      	ldr	r2, [pc, #32]	; (8003fc0 <_setEncoderControlMode+0xa4>)
 8003fa0:	79fb      	ldrb	r3, [r7, #7]
 8003fa2:	7013      	strb	r3, [r2, #0]
		// encoder start value
		ENCODER_TIMER->CNT = 1;
 8003fa4:	4b07      	ldr	r3, [pc, #28]	; (8003fc4 <_setEncoderControlMode+0xa8>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	625a      	str	r2, [r3, #36]	; 0x24
		// encoder limit for default (set speed)
		ENCODER_TIMER->ARR = 1600;
 8003faa:	4b06      	ldr	r3, [pc, #24]	; (8003fc4 <_setEncoderControlMode+0xa8>)
 8003fac:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8003fb0:	62da      	str	r2, [r3, #44]	; 0x2c
	}



}
 8003fb2:	bf00      	nop
 8003fb4:	370c      	adds	r7, #12
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	20001a15 	.word	0x20001a15
 8003fc4:	40012c00 	.word	0x40012c00
 8003fc8:	20001a14 	.word	0x20001a14
 8003fcc:	20000004 	.word	0x20000004
 8003fd0:	40013400 	.word	0x40013400
 8003fd4:	20000000 	.word	0x20000000

08003fd8 <_setSweepTimerAutoReloadForEncoderControl>:


void _setSweepTimerAutoReloadForEncoderControl(eEncoderSweepFunctions pFunction)
{
 8003fd8:	b590      	push	{r4, r7, lr}
 8003fda:	b085      	sub	sp, #20
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	4603      	mov	r3, r0
 8003fe0:	71fb      	strb	r3, [r7, #7]
	uint32_t next_sweep_tim_arr;

	if(pFunction)
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d122      	bne.n	800402e <_setSweepTimerAutoReloadForEncoderControl+0x56>

	}
	else
	{
		// get logarithmic curve to speed up turns at low end
		next_sweep_tim_arr = MIN_SWEEP_ARR + (pow(ENCODER_TIMER->CNT, 3));
 8003fe8:	4b17      	ldr	r3, [pc, #92]	; (8004048 <_setSweepTimerAutoReloadForEncoderControl+0x70>)
 8003fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fec:	4618      	mov	r0, r3
 8003fee:	f7fc fab1 	bl	8000554 <__aeabi_ui2d>
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	460c      	mov	r4, r1
 8003ff6:	ed9f 1b10 	vldr	d1, [pc, #64]	; 8004038 <_setSweepTimerAutoReloadForEncoderControl+0x60>
 8003ffa:	ec44 3b10 	vmov	d0, r3, r4
 8003ffe:	f00c fecb 	bl	8010d98 <pow>
 8004002:	ec51 0b10 	vmov	r0, r1, d0
 8004006:	a30e      	add	r3, pc, #56	; (adr r3, 8004040 <_setSweepTimerAutoReloadForEncoderControl+0x68>)
 8004008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800400c:	f7fc f966 	bl	80002dc <__adddf3>
 8004010:	4603      	mov	r3, r0
 8004012:	460c      	mov	r4, r1
 8004014:	4618      	mov	r0, r3
 8004016:	4621      	mov	r1, r4
 8004018:	f7fc fdee 	bl	8000bf8 <__aeabi_d2uiz>
 800401c:	4603      	mov	r3, r0
 800401e:	60fb      	str	r3, [r7, #12]

		if(next_sweep_tim_arr < 0xFFFFFFFF)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004026:	d002      	beq.n	800402e <_setSweepTimerAutoReloadForEncoderControl+0x56>
		{
			SWEEP_TIMER->ARR = next_sweep_tim_arr;
 8004028:	4a08      	ldr	r2, [pc, #32]	; (800404c <_setSweepTimerAutoReloadForEncoderControl+0x74>)
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	62d3      	str	r3, [r2, #44]	; 0x2c

		}
	}
}
 800402e:	bf00      	nop
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	bd90      	pop	{r4, r7, pc}
 8004036:	bf00      	nop
 8004038:	00000000 	.word	0x00000000
 800403c:	40080000 	.word	0x40080000
 8004040:	00000000 	.word	0x00000000
 8004044:	40d06800 	.word	0x40d06800
 8004048:	40012c00 	.word	0x40012c00
 800404c:	40000c00 	.word	0x40000c00

08004050 <_getCalculatedSweepFrequencyInHertz>:

float _getCalculatedSweepFrequencyInHertz()
{
 8004050:	b480      	push	{r7}
 8004052:	af00      	add	r7, sp, #0
	if(SWEEP_TIMER->PSC == 0)
 8004054:	4b13      	ldr	r3, [pc, #76]	; (80040a4 <_getCalculatedSweepFrequencyInHertz+0x54>)
 8004056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004058:	2b00      	cmp	r3, #0
 800405a:	d10a      	bne.n	8004072 <_getCalculatedSweepFrequencyInHertz+0x22>
	{
		return (float)SM_MCLK / ((float)1 * (float)SWEEP_TIMER->ARR);
 800405c:	4b11      	ldr	r3, [pc, #68]	; (80040a4 <_getCalculatedSweepFrequencyInHertz+0x54>)
 800405e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004060:	ee07 3a90 	vmov	s15, r3
 8004064:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004068:	eddf 6a0f 	vldr	s13, [pc, #60]	; 80040a8 <_getCalculatedSweepFrequencyInHertz+0x58>
 800406c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004070:	e011      	b.n	8004096 <_getCalculatedSweepFrequencyInHertz+0x46>
	}
	else
	{
		return (float)SM_MCLK / ((float)SWEEP_TIMER->PSC * (float)SWEEP_TIMER->ARR);
 8004072:	4b0c      	ldr	r3, [pc, #48]	; (80040a4 <_getCalculatedSweepFrequencyInHertz+0x54>)
 8004074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004076:	ee07 3a90 	vmov	s15, r3
 800407a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800407e:	4b09      	ldr	r3, [pc, #36]	; (80040a4 <_getCalculatedSweepFrequencyInHertz+0x54>)
 8004080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004082:	ee07 3a90 	vmov	s15, r3
 8004086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800408a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800408e:	eddf 6a06 	vldr	s13, [pc, #24]	; 80040a8 <_getCalculatedSweepFrequencyInHertz+0x58>
 8004092:	eec6 7a87 	vdiv.f32	s15, s13, s14
	}

}
 8004096:	eeb0 0a67 	vmov.f32	s0, s15
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40000c00 	.word	0x40000c00
 80040a8:	4d2037a0 	.word	0x4d2037a0

080040ac <FreqMenu_getStatus>:
 *	@param None
 *	@retval None
 *
 */
eFreqMenu_Status FreqMenu_getStatus()
{
 80040ac:	b480      	push	{r7}
 80040ae:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 80040b0:	4b03      	ldr	r3, [pc, #12]	; (80040c0 <FreqMenu_getStatus+0x14>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr
 80040be:	bf00      	nop
 80040c0:	20001a16 	.word	0x20001a16

080040c4 <FuncMenu_getStatus>:
#include <stdio.h>

eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;

eFuncMenu_Status FuncMenu_getStatus()
{
 80040c4:	b480      	push	{r7}
 80040c6:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 80040c8:	4b03      	ldr	r3, [pc, #12]	; (80040d8 <FuncMenu_getStatus+0x14>)
 80040ca:	781b      	ldrb	r3, [r3, #0]
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	46bd      	mov	sp, r7
 80040d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d4:	4770      	bx	lr
 80040d6:	bf00      	nop
 80040d8:	20001a17 	.word	0x20001a17

080040dc <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncMainMenuEntryHandler Event captured\n");
 80040e0:	4806      	ldr	r0, [pc, #24]	; (80040fc <FuncMainMenuEntryHandler+0x20>)
 80040e2:	f00a feff 	bl	800eee4 <puts>
#endif

	DM_RefreshScreen();
 80040e6:	f7fd f885 	bl	80011f4 <DM_RefreshScreen>


	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 80040ea:	4b05      	ldr	r3, [pc, #20]	; (8004100 <FuncMainMenuEntryHandler+0x24>)
 80040ec:	2201      	movs	r2, #1
 80040ee:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/
	eNewEvent = evIdle;
 80040f0:	4b04      	ldr	r3, [pc, #16]	; (8004104 <FuncMainMenuEntryHandler+0x28>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 80040f6:	2303      	movs	r3, #3
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	08012758 	.word	0x08012758
 8004100:	20001a17 	.word	0x20001a17
 8004104:	20001a13 	.word	0x20001a13

08004108 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncMainMenuExitHandler Event captured\n");
 800410c:	4808      	ldr	r0, [pc, #32]	; (8004130 <FuncMainMenuExitHandler+0x28>)
 800410e:	f00a fee9 	bl	800eee4 <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 8004112:	4b08      	ldr	r3, [pc, #32]	; (8004134 <FuncMainMenuExitHandler+0x2c>)
 8004114:	2200      	movs	r2, #0
 8004116:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8004118:	f7fd f86c 	bl	80011f4 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 800411c:	4806      	ldr	r0, [pc, #24]	; (8004138 <FuncMainMenuExitHandler+0x30>)
 800411e:	f00a fee1 	bl	800eee4 <puts>
#endif

	eNewEvent = evIdle;
 8004122:	4b06      	ldr	r3, [pc, #24]	; (800413c <FuncMainMenuExitHandler+0x34>)
 8004124:	2200      	movs	r2, #0
 8004126:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004128:	2301      	movs	r3, #1
}
 800412a:	4618      	mov	r0, r3
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	080127a8 	.word	0x080127a8
 8004134:	20001a17 	.word	0x20001a17
 8004138:	080127d0 	.word	0x080127d0
 800413c:	20001a13 	.word	0x20001a13

08004140 <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b082      	sub	sp, #8
 8004144:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuEntryHandler Event captured\n");
 8004146:	4814      	ldr	r0, [pc, #80]	; (8004198 <FuncSignalMenuEntryHandler+0x58>)
 8004148:	f00a fecc 	bl	800eee4 <puts>
#endif

	DM_RefreshScreen();
 800414c:	f7fd f852 	bl	80011f4 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 8004150:	4b12      	ldr	r3, [pc, #72]	; (800419c <FuncSignalMenuEntryHandler+0x5c>)
 8004152:	2202      	movs	r2, #2
 8004154:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 8004156:	2000      	movs	r0, #0
 8004158:	f001 f91a 	bl	8005390 <SM_GetOutputChannel>
 800415c:	4603      	mov	r3, r0
 800415e:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004162:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00a      	beq.n	8004180 <FuncSignalMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	785a      	ldrb	r2, [r3, #1]
 800416e:	4b0c      	ldr	r3, [pc, #48]	; (80041a0 <FuncSignalMenuEntryHandler+0x60>)
 8004170:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 8004172:	f000 ff3d 	bl	8004ff0 <FuncO_GetFuncPresetEncoderRange>
 8004176:	4603      	mov	r3, r0
 8004178:	461a      	mov	r2, r3
 800417a:	4b09      	ldr	r3, [pc, #36]	; (80041a0 <FuncSignalMenuEntryHandler+0x60>)
 800417c:	62da      	str	r2, [r3, #44]	; 0x2c
 800417e:	e002      	b.n	8004186 <FuncSignalMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 8004180:	4808      	ldr	r0, [pc, #32]	; (80041a4 <FuncSignalMenuEntryHandler+0x64>)
 8004182:	f7fd f87d 	bl	8001280 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004186:	4b08      	ldr	r3, [pc, #32]	; (80041a8 <FuncSignalMenuEntryHandler+0x68>)
 8004188:	2200      	movs	r2, #0
 800418a:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 800418c:	2304      	movs	r3, #4
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	080127e8 	.word	0x080127e8
 800419c:	20001a17 	.word	0x20001a17
 80041a0:	40012c00 	.word	0x40012c00
 80041a4:	08012814 	.word	0x08012814
 80041a8:	20001a13 	.word	0x20001a13

080041ac <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuInputHandler Event captured\n");
 80041b0:	4807      	ldr	r0, [pc, #28]	; (80041d0 <FuncSignalMenuInputHandler+0x24>)
 80041b2:	f00a fe97 	bl	800eee4 <puts>
#endif


	FuncO_ModifySignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80041b6:	2001      	movs	r0, #1
 80041b8:	f001 f900 	bl	80053bc <SM_GetEncoderValue>
 80041bc:	4603      	mov	r3, r0
 80041be:	4618      	mov	r0, r3
 80041c0:	f000 fdac 	bl	8004d1c <FuncO_ModifySignalOutput>
	eNewEvent = evBlueBtn;
 80041c4:	4b03      	ldr	r3, [pc, #12]	; (80041d4 <FuncSignalMenuInputHandler+0x28>)
 80041c6:	2201      	movs	r2, #1
 80041c8:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 80041ca:	2304      	movs	r3, #4
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	08012848 	.word	0x08012848
 80041d4:	20001a13 	.word	0x20001a13

080041d8 <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSignalMenuExitHandler Event captured\n");
 80041dc:	4806      	ldr	r0, [pc, #24]	; (80041f8 <FuncSignalMenuExitHandler+0x20>)
 80041de:	f00a fe81 	bl	800eee4 <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 80041e2:	4b06      	ldr	r3, [pc, #24]	; (80041fc <FuncSignalMenuExitHandler+0x24>)
 80041e4:	2201      	movs	r2, #1
 80041e6:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 80041e8:	f7fd f804 	bl	80011f4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 80041ec:	4b04      	ldr	r3, [pc, #16]	; (8004200 <FuncSignalMenuExitHandler+0x28>)
 80041ee:	2200      	movs	r2, #0
 80041f0:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 80041f2:	2303      	movs	r3, #3
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	bd80      	pop	{r7, pc}
 80041f8:	08012874 	.word	0x08012874
 80041fc:	20001a17 	.word	0x20001a17
 8004200:	20001a13 	.word	0x20001a13

08004204 <FuncSyncMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuEntryHandler(void)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuEntryHandler Event captured\n");
 800420a:	4814      	ldr	r0, [pc, #80]	; (800425c <FuncSyncMenuEntryHandler+0x58>)
 800420c:	f00a fe6a 	bl	800eee4 <puts>
#endif

	DM_RefreshScreen();
 8004210:	f7fc fff0 	bl	80011f4 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SYNC_MENU;
 8004214:	4b12      	ldr	r3, [pc, #72]	; (8004260 <FuncSyncMenuEntryHandler+0x5c>)
 8004216:	2203      	movs	r2, #3
 8004218:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSyncFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile;
 800421a:	2001      	movs	r0, #1
 800421c:	f001 f8b8 	bl	8005390 <SM_GetOutputChannel>
 8004220:	4603      	mov	r3, r0
 8004222:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8004226:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <FuncSyncMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	785a      	ldrb	r2, [r3, #1]
 8004232:	4b0c      	ldr	r3, [pc, #48]	; (8004264 <FuncSyncMenuEntryHandler+0x60>)
 8004234:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 8004236:	f000 fedb 	bl	8004ff0 <FuncO_GetFuncPresetEncoderRange>
 800423a:	4603      	mov	r3, r0
 800423c:	461a      	mov	r2, r3
 800423e:	4b09      	ldr	r3, [pc, #36]	; (8004264 <FuncSyncMenuEntryHandler+0x60>)
 8004240:	62da      	str	r2, [r3, #44]	; 0x2c
 8004242:	e002      	b.n	800424a <FuncSyncMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 8004244:	4808      	ldr	r0, [pc, #32]	; (8004268 <FuncSyncMenuEntryHandler+0x64>)
 8004246:	f7fd f81b 	bl	8001280 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 800424a:	4b08      	ldr	r3, [pc, #32]	; (800426c <FuncSyncMenuEntryHandler+0x68>)
 800424c:	2200      	movs	r2, #0
 800424e:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 8004250:	2305      	movs	r3, #5
}
 8004252:	4618      	mov	r0, r3
 8004254:	3708      	adds	r7, #8
 8004256:	46bd      	mov	sp, r7
 8004258:	bd80      	pop	{r7, pc}
 800425a:	bf00      	nop
 800425c:	080128a0 	.word	0x080128a0
 8004260:	20001a17 	.word	0x20001a17
 8004264:	40012c00 	.word	0x40012c00
 8004268:	08012814 	.word	0x08012814
 800426c:	20001a13 	.word	0x20001a13

08004270 <FuncSyncMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuInputHandler(void)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuInputHandler Event captured\n");
 8004274:	4807      	ldr	r0, [pc, #28]	; (8004294 <FuncSyncMenuInputHandler+0x24>)
 8004276:	f00a fe35 	bl	800eee4 <puts>
#endif


	FuncO_ModifySyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800427a:	2001      	movs	r0, #1
 800427c:	f001 f89e 	bl	80053bc <SM_GetEncoderValue>
 8004280:	4603      	mov	r3, r0
 8004282:	4618      	mov	r0, r3
 8004284:	f000 fda2 	bl	8004dcc <FuncO_ModifySyncOutput>
	eNewEvent = evBlueBtn;
 8004288:	4b03      	ldr	r3, [pc, #12]	; (8004298 <FuncSyncMenuInputHandler+0x28>)
 800428a:	2201      	movs	r2, #1
 800428c:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 800428e:	2305      	movs	r3, #5
}
 8004290:	4618      	mov	r0, r3
 8004292:	bd80      	pop	{r7, pc}
 8004294:	080128c8 	.word	0x080128c8
 8004298:	20001a13 	.word	0x20001a13

0800429c <FuncSyncMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuExitHandler()
{
 800429c:	b580      	push	{r7, lr}
 800429e:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("FuncSyncMenuExitHandler Event captured\n");
 80042a0:	4806      	ldr	r0, [pc, #24]	; (80042bc <FuncSyncMenuExitHandler+0x20>)
 80042a2:	f00a fe1f 	bl	800eee4 <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 80042a6:	4b06      	ldr	r3, [pc, #24]	; (80042c0 <FuncSyncMenuExitHandler+0x24>)
 80042a8:	2201      	movs	r2, #1
 80042aa:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 80042ac:	f7fc ffa2 	bl	80011f4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 80042b0:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <FuncSyncMenuExitHandler+0x28>)
 80042b2:	2200      	movs	r2, #0
 80042b4:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 80042b6:	2303      	movs	r3, #3
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	080128f0 	.word	0x080128f0
 80042c0:	20001a17 	.word	0x20001a17
 80042c4:	20001a13 	.word	0x20001a13

080042c8 <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 80042c8:	b480      	push	{r7}
 80042ca:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 80042cc:	4b03      	ldr	r3, [pc, #12]	; (80042dc <GainMenu_getStatus+0x14>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
 80042da:	bf00      	nop
 80042dc:	20001a18 	.word	0x20001a18

080042e0 <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainMainMenuEntryHandler Event captured\n");
 80042e4:	4806      	ldr	r0, [pc, #24]	; (8004300 <GainMainMenuEntryHandler+0x20>)
 80042e6:	f00a fdfd 	bl	800eee4 <puts>
#endif

	DM_RefreshScreen();
 80042ea:	f7fc ff83 	bl	80011f4 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 80042ee:	4b05      	ldr	r3, [pc, #20]	; (8004304 <GainMainMenuEntryHandler+0x24>)
 80042f0:	2201      	movs	r2, #1
 80042f2:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 80042f4:	4b04      	ldr	r3, [pc, #16]	; (8004308 <GainMainMenuEntryHandler+0x28>)
 80042f6:	2200      	movs	r2, #0
 80042f8:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 80042fa:	2306      	movs	r3, #6
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	bd80      	pop	{r7, pc}
 8004300:	08012918 	.word	0x08012918
 8004304:	20001a18 	.word	0x20001a18
 8004308:	20001a13 	.word	0x20001a13

0800430c <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 800430c:	b580      	push	{r7, lr}
 800430e:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainMainMenuExitHandler Event captured\n");
 8004310:	4808      	ldr	r0, [pc, #32]	; (8004334 <GainMainMenuExitHandler+0x28>)
 8004312:	f00a fde7 	bl	800eee4 <puts>
#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 8004316:	4b08      	ldr	r3, [pc, #32]	; (8004338 <GainMainMenuExitHandler+0x2c>)
 8004318:	2200      	movs	r2, #0
 800431a:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 800431c:	f7fc ff6a 	bl	80011f4 <DM_RefreshScreen>

#ifdef SWV_DEBUG_ENABLED
	  printf("returning to Idle State\n");
 8004320:	4806      	ldr	r0, [pc, #24]	; (800433c <GainMainMenuExitHandler+0x30>)
 8004322:	f00a fddf 	bl	800eee4 <puts>
#endif

	eNewEvent = evIdle;
 8004326:	4b06      	ldr	r3, [pc, #24]	; (8004340 <GainMainMenuExitHandler+0x34>)
 8004328:	2200      	movs	r2, #0
 800432a:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 800432c:	2301      	movs	r3, #1
}
 800432e:	4618      	mov	r0, r3
 8004330:	bd80      	pop	{r7, pc}
 8004332:	bf00      	nop
 8004334:	08012968 	.word	0x08012968
 8004338:	20001a18 	.word	0x20001a18
 800433c:	08012990 	.word	0x08012990
 8004340:	20001a13 	.word	0x20001a13

08004344 <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b082      	sub	sp, #8
 8004348:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuEntryHandler Event captured\n");
 800434a:	4813      	ldr	r0, [pc, #76]	; (8004398 <GainSignalMenuEntryHandler+0x54>)
 800434c:	f00a fdca 	bl	800eee4 <puts>
#endif

	DM_RefreshScreen();
 8004350:	f7fc ff50 	bl	80011f4 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 8004354:	4b11      	ldr	r3, [pc, #68]	; (800439c <GainSignalMenuEntryHandler+0x58>)
 8004356:	2202      	movs	r2, #2
 8004358:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 800435a:	2000      	movs	r0, #0
 800435c:	f001 f818 	bl	8005390 <SM_GetOutputChannel>
 8004360:	4603      	mov	r3, r0
 8004362:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004366:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d008      	beq.n	8004380 <GainSignalMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	8b1a      	ldrh	r2, [r3, #24]
 8004372:	4b0b      	ldr	r3, [pc, #44]	; (80043a0 <GainSignalMenuEntryHandler+0x5c>)
 8004374:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 8004376:	4b0a      	ldr	r3, [pc, #40]	; (80043a0 <GainSignalMenuEntryHandler+0x5c>)
 8004378:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 800437c:	62da      	str	r2, [r3, #44]	; 0x2c
 800437e:	e002      	b.n	8004386 <GainSignalMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004380:	4808      	ldr	r0, [pc, #32]	; (80043a4 <GainSignalMenuEntryHandler+0x60>)
 8004382:	f7fc ff7d 	bl	8001280 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004386:	4b08      	ldr	r3, [pc, #32]	; (80043a8 <GainSignalMenuEntryHandler+0x64>)
 8004388:	2200      	movs	r2, #0
 800438a:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 800438c:	2307      	movs	r3, #7
}
 800438e:	4618      	mov	r0, r3
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}
 8004396:	bf00      	nop
 8004398:	080129a8 	.word	0x080129a8
 800439c:	20001a18 	.word	0x20001a18
 80043a0:	40012c00 	.word	0x40012c00
 80043a4:	080129d4 	.word	0x080129d4
 80043a8:	20001a13 	.word	0x20001a13

080043ac <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler()
{
 80043ac:	b580      	push	{r7, lr}
 80043ae:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuInputHandler Event captured\n");
 80043b0:	4807      	ldr	r0, [pc, #28]	; (80043d0 <GainSignalMenuInputHandler+0x24>)
 80043b2:	f00a fd97 	bl	800eee4 <puts>
#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_ModifySignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80043b6:	2001      	movs	r0, #1
 80043b8:	f001 f800 	bl	80053bc <SM_GetEncoderValue>
 80043bc:	4603      	mov	r3, r0
 80043be:	4618      	mov	r0, r3
 80043c0:	f001 f9da 	bl	8005778 <VPP_ModifySignalOutput>

	eNewEvent = evYellowBtn;
 80043c4:	4b03      	ldr	r3, [pc, #12]	; (80043d4 <GainSignalMenuInputHandler+0x28>)
 80043c6:	2203      	movs	r2, #3
 80043c8:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 80043ca:	2307      	movs	r3, #7
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	08012a0c 	.word	0x08012a0c
 80043d4:	20001a13 	.word	0x20001a13

080043d8 <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSignalMenuExitHandler Event captured\n");
 80043dc:	4806      	ldr	r0, [pc, #24]	; (80043f8 <GainSignalMenuExitHandler+0x20>)
 80043de:	f00a fd81 	bl	800eee4 <puts>
#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 80043e2:	4b06      	ldr	r3, [pc, #24]	; (80043fc <GainSignalMenuExitHandler+0x24>)
 80043e4:	2201      	movs	r2, #1
 80043e6:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 80043e8:	f7fc ff04 	bl	80011f4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 80043ec:	4b04      	ldr	r3, [pc, #16]	; (8004400 <GainSignalMenuExitHandler+0x28>)
 80043ee:	2200      	movs	r2, #0
 80043f0:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 80043f2:	2306      	movs	r3, #6
}
 80043f4:	4618      	mov	r0, r3
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	08012a38 	.word	0x08012a38
 80043fc:	20001a18 	.word	0x20001a18
 8004400:	20001a13 	.word	0x20001a13

08004404 <GainSyncMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuEntryHandler()
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuEntryHandler Event captured\n");
 800440a:	4813      	ldr	r0, [pc, #76]	; (8004458 <GainSyncMenuEntryHandler+0x54>)
 800440c:	f00a fd6a 	bl	800eee4 <puts>
#endif

	DM_RefreshScreen();
 8004410:	f7fc fef0 	bl	80011f4 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_SYNC_MENU;
 8004414:	4b11      	ldr	r3, [pc, #68]	; (800445c <GainSyncMenuEntryHandler+0x58>)
 8004416:	2203      	movs	r2, #3
 8004418:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile;
 800441a:	2001      	movs	r0, #1
 800441c:	f000 ffb8 	bl	8005390 <SM_GetOutputChannel>
 8004420:	4603      	mov	r3, r0
 8004422:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004426:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d008      	beq.n	8004440 <GainSyncMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	8b1a      	ldrh	r2, [r3, #24]
 8004432:	4b0b      	ldr	r3, [pc, #44]	; (8004460 <GainSyncMenuEntryHandler+0x5c>)
 8004434:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 8004436:	4b0a      	ldr	r3, [pc, #40]	; (8004460 <GainSyncMenuEntryHandler+0x5c>)
 8004438:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 800443c:	62da      	str	r2, [r3, #44]	; 0x2c
 800443e:	e002      	b.n	8004446 <GainSyncMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8004440:	4808      	ldr	r0, [pc, #32]	; (8004464 <GainSyncMenuEntryHandler+0x60>)
 8004442:	f7fc ff1d 	bl	8001280 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8004446:	4b08      	ldr	r3, [pc, #32]	; (8004468 <GainSyncMenuEntryHandler+0x64>)
 8004448:	2200      	movs	r2, #0
 800444a:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 800444c:	2308      	movs	r3, #8
}
 800444e:	4618      	mov	r0, r3
 8004450:	3708      	adds	r7, #8
 8004452:	46bd      	mov	sp, r7
 8004454:	bd80      	pop	{r7, pc}
 8004456:	bf00      	nop
 8004458:	08012a64 	.word	0x08012a64
 800445c:	20001a18 	.word	0x20001a18
 8004460:	40012c00 	.word	0x40012c00
 8004464:	080129d4 	.word	0x080129d4
 8004468:	20001a13 	.word	0x20001a13

0800446c <GainSyncMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuInputHandler()
{
 800446c:	b580      	push	{r7, lr}
 800446e:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuInputHandler Event captured\n");
 8004470:	4807      	ldr	r0, [pc, #28]	; (8004490 <GainSyncMenuInputHandler+0x24>)
 8004472:	f00a fd37 	bl	800eee4 <puts>
#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_ModifySyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8004476:	2001      	movs	r0, #1
 8004478:	f000 ffa0 	bl	80053bc <SM_GetEncoderValue>
 800447c:	4603      	mov	r3, r0
 800447e:	4618      	mov	r0, r3
 8004480:	f001 fe24 	bl	80060cc <VPP_ModifySyncOutput>

	eNewEvent = evYellowBtn;
 8004484:	4b03      	ldr	r3, [pc, #12]	; (8004494 <GainSyncMenuInputHandler+0x28>)
 8004486:	2203      	movs	r2, #3
 8004488:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 800448a:	2308      	movs	r3, #8
}
 800448c:	4618      	mov	r0, r3
 800448e:	bd80      	pop	{r7, pc}
 8004490:	08012a8c 	.word	0x08012a8c
 8004494:	20001a13 	.word	0x20001a13

08004498 <GainSyncMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuExitHandler()
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
#ifdef SWV_DEBUG_ENABLED
	printf("GainSyncMenuExitHandler Event captured\n");
 800449c:	4806      	ldr	r0, [pc, #24]	; (80044b8 <GainSyncMenuExitHandler+0x20>)
 800449e:	f00a fd21 	bl	800eee4 <puts>
#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 80044a2:	4b06      	ldr	r3, [pc, #24]	; (80044bc <GainSyncMenuExitHandler+0x24>)
 80044a4:	2201      	movs	r2, #1
 80044a6:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 80044a8:	f7fc fea4 	bl	80011f4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 80044ac:	4b04      	ldr	r3, [pc, #16]	; (80044c0 <GainSyncMenuExitHandler+0x28>)
 80044ae:	2200      	movs	r2, #0
 80044b0:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 80044b2:	2306      	movs	r3, #6
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	08012ab4 	.word	0x08012ab4
 80044bc:	20001a18 	.word	0x20001a18
 80044c0:	20001a13 	.word	0x20001a13

080044c4 <ToplevelMenu_getStatus>:
eToplevelMenu_Status eNextToplevelMenuStatus = 	ENABLE_TOPLEVEL_MAIN_MENU;



eToplevelMenu_Status ToplevelMenu_getStatus()
{
 80044c4:	b480      	push	{r7}
 80044c6:	af00      	add	r7, sp, #0
	return eNextToplevelMenuStatus;
 80044c8:	4b03      	ldr	r3, [pc, #12]	; (80044d8 <ToplevelMenu_getStatus+0x14>)
 80044ca:	781b      	ldrb	r3, [r3, #0]
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	20000008 	.word	0x20000008

080044dc <ToplevelMenu_setStatus>:

void ToplevelMenu_setStatus(eToplevelMenu_Status pStatus)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	4603      	mov	r3, r0
 80044e4:	71fb      	strb	r3, [r7, #7]
	eNextToplevelMenuStatus = pStatus;
 80044e6:	4a04      	ldr	r2, [pc, #16]	; (80044f8 <ToplevelMenu_setStatus+0x1c>)
 80044e8:	79fb      	ldrb	r3, [r7, #7]
 80044ea:	7013      	strb	r3, [r2, #0]
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	20000008 	.word	0x20000008

080044fc <ToplevelOutputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuEntryHandler()
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuEntryHandler Event captured\n");
 8004500:	4806      	ldr	r0, [pc, #24]	; (800451c <ToplevelOutputMenuEntryHandler+0x20>)
 8004502:	f00a fcef 	bl	800eee4 <puts>
	#endif

	DM_RefreshScreen();
 8004506:	f7fc fe75 	bl	80011f4 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_OUTPUT_MENU;
 800450a:	4b05      	ldr	r3, [pc, #20]	; (8004520 <ToplevelOutputMenuEntryHandler+0x24>)
 800450c:	2202      	movs	r2, #2
 800450e:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004510:	4b04      	ldr	r3, [pc, #16]	; (8004524 <ToplevelOutputMenuEntryHandler+0x28>)
 8004512:	2200      	movs	r2, #0
 8004514:	701a      	strb	r2, [r3, #0]
	return Toplevel_Output_Menu_State;
 8004516:	2301      	movs	r3, #1
}
 8004518:	4618      	mov	r0, r3
 800451a:	bd80      	pop	{r7, pc}
 800451c:	08012b78 	.word	0x08012b78
 8004520:	20000008 	.word	0x20000008
 8004524:	20001a13 	.word	0x20001a13

08004528 <ToplevelOutputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelOutputMenuExitHandler()
{
 8004528:	b580      	push	{r7, lr}
 800452a:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelOutputMenuExitHandler Event captured\n");
 800452c:	4806      	ldr	r0, [pc, #24]	; (8004548 <ToplevelOutputMenuExitHandler+0x20>)
 800452e:	f00a fcd9 	bl	800eee4 <puts>
	#endif

	DM_RefreshScreen();
 8004532:	f7fc fe5f 	bl	80011f4 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 8004536:	4b05      	ldr	r3, [pc, #20]	; (800454c <ToplevelOutputMenuExitHandler+0x24>)
 8004538:	2201      	movs	r2, #1
 800453a:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 800453c:	4b04      	ldr	r3, [pc, #16]	; (8004550 <ToplevelOutputMenuExitHandler+0x28>)
 800453e:	2200      	movs	r2, #0
 8004540:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	bd80      	pop	{r7, pc}
 8004548:	08012bd8 	.word	0x08012bd8
 800454c:	20000008 	.word	0x20000008
 8004550:	20001a13 	.word	0x20001a13

08004554 <ToplevelInputMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuEntryHandler()
{
 8004554:	b580      	push	{r7, lr}
 8004556:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuEntryHandler Event captured\n");
 8004558:	4806      	ldr	r0, [pc, #24]	; (8004574 <ToplevelInputMenuEntryHandler+0x20>)
 800455a:	f00a fcc3 	bl	800eee4 <puts>
	#endif

	DM_RefreshScreen();
 800455e:	f7fc fe49 	bl	80011f4 <DM_RefreshScreen>

	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_INPUT_MENU;
 8004562:	4b05      	ldr	r3, [pc, #20]	; (8004578 <ToplevelInputMenuEntryHandler+0x24>)
 8004564:	2203      	movs	r2, #3
 8004566:	701a      	strb	r2, [r3, #0]




	// stay in this state
	eNewEvent = evIdle;
 8004568:	4b04      	ldr	r3, [pc, #16]	; (800457c <ToplevelInputMenuEntryHandler+0x28>)
 800456a:	2200      	movs	r2, #0
 800456c:	701a      	strb	r2, [r3, #0]
	return Toplevel_Input_Menu_State;
 800456e:	2302      	movs	r3, #2
}
 8004570:	4618      	mov	r0, r3
 8004572:	bd80      	pop	{r7, pc}
 8004574:	08012c08 	.word	0x08012c08
 8004578:	20000008 	.word	0x20000008
 800457c:	20001a13 	.word	0x20001a13

08004580 <ToplevelInputMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState ToplevelInputMenuExitHandler()
{
 8004580:	b580      	push	{r7, lr}
 8004582:	af00      	add	r7, sp, #0
	#ifdef SWV_DEBUG_ENABLED
		printf("ToplevelInputMenuExitHandler Event captured\n");
 8004584:	4806      	ldr	r0, [pc, #24]	; (80045a0 <ToplevelInputMenuExitHandler+0x20>)
 8004586:	f00a fcad 	bl	800eee4 <puts>
	#endif

	DM_RefreshScreen();
 800458a:	f7fc fe33 	bl	80011f4 <DM_RefreshScreen>

	// disable the menu
	eNextToplevelMenuStatus = ENABLE_TOPLEVEL_MAIN_MENU;
 800458e:	4b05      	ldr	r3, [pc, #20]	; (80045a4 <ToplevelInputMenuExitHandler+0x24>)
 8004590:	2201      	movs	r2, #1
 8004592:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evIdle;
 8004594:	4b04      	ldr	r3, [pc, #16]	; (80045a8 <ToplevelInputMenuExitHandler+0x28>)
 8004596:	2200      	movs	r2, #0
 8004598:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	bd80      	pop	{r7, pc}
 80045a0:	08012c68 	.word	0x08012c68
 80045a4:	20000008 	.word	0x20000008
 80045a8:	20001a13 	.word	0x20001a13

080045ac <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 80045ac:	b480      	push	{r7}
 80045ae:	b083      	sub	sp, #12
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 80045b4:	4b07      	ldr	r3, [pc, #28]	; (80045d4 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 80045b6:	695a      	ldr	r2, [r3, #20]
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	4013      	ands	r3, r2
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	429a      	cmp	r2, r3
 80045c0:	d101      	bne.n	80045c6 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 80045c2:	2301      	movs	r3, #1
 80045c4:	e000      	b.n	80045c8 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 80045c6:	2300      	movs	r3, #0
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr
 80045d4:	40010400 	.word	0x40010400

080045d8 <IM_Init>:
uint16_t btn4_last_interrupt_time = 0;
uint16_t encbtn_last_interrupt_time = 0;


void IM_Init()
{
 80045d8:	b480      	push	{r7}
 80045da:	af00      	add	r7, sp, #0
	  // debounce timer
	  DEBOUNCE_TIMER->CR1 |= TIM_CR1_CEN;
 80045dc:	4b05      	ldr	r3, [pc, #20]	; (80045f4 <IM_Init+0x1c>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a04      	ldr	r2, [pc, #16]	; (80045f4 <IM_Init+0x1c>)
 80045e2:	f043 0301 	orr.w	r3, r3, #1
 80045e6:	6013      	str	r3, [r2, #0]
}
 80045e8:	bf00      	nop
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
 80045f2:	bf00      	nop
 80045f4:	40014400 	.word	0x40014400

080045f8 <IM_SWEEP_UPDATE_TIM_IRQHandler>:
 *	@param None
 *	@retval None
 *
 */
void IM_SWEEP_UPDATE_TIM_IRQHandler()
{
 80045f8:	b480      	push	{r7}
 80045fa:	af00      	add	r7, sp, #0
	// upcounter (decreasing freq)
	if((SWEEP_TIMER->CR1 & TIM_CR1_DIR) == TIM_CR1_DIR)
 80045fc:	4b26      	ldr	r3, [pc, #152]	; (8004698 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa0>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0310 	and.w	r3, r3, #16
 8004604:	2b10      	cmp	r3, #16
 8004606:	d11c      	bne.n	8004642 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x4a>
	{
		// if we reach lower freq limit for sweep, reset to highest freq limit
		if(OUTPUT_TIMER->ARR >= sweep_upper_bounds_longest_output_arr)
 8004608:	4b24      	ldr	r3, [pc, #144]	; (800469c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	ee07 3a90 	vmov	s15, r3
 8004610:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004614:	4b22      	ldr	r3, [pc, #136]	; (80046a0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 8004616:	edd3 7a00 	vldr	s15, [r3]
 800461a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800461e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004622:	db09      	blt.n	8004638 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x40>
		{
			OUTPUT_TIMER->ARR = sweep_lower_bounds_shortest_output_arr;
 8004624:	4b1f      	ldr	r3, [pc, #124]	; (80046a4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 8004626:	edd3 7a00 	vldr	s15, [r3]
 800462a:	4b1c      	ldr	r3, [pc, #112]	; (800469c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800462c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004630:	ee17 2a90 	vmov	r2, s15
 8004634:	62da      	str	r2, [r3, #44]	; 0x2c
			}
		}
	}

	//SWEEP_TIMER->ARR--;
}
 8004636:	e029      	b.n	800468c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			OUTPUT_TIMER->ARR++;
 8004638:	4b18      	ldr	r3, [pc, #96]	; (800469c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800463a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800463c:	3201      	adds	r2, #1
 800463e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004640:	e024      	b.n	800468c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
		if(OUTPUT_TIMER->ARR == 0x1U)
 8004642:	4b16      	ldr	r3, [pc, #88]	; (800469c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004644:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004646:	2b01      	cmp	r3, #1
 8004648:	d104      	bne.n	8004654 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x5c>
			OUTPUT_TIMER->ARR = MAX_OUTPUT_ARR;
 800464a:	4b14      	ldr	r3, [pc, #80]	; (800469c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 800464c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004650:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004652:	e01b      	b.n	800468c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
			if(OUTPUT_TIMER->ARR <= sweep_lower_bounds_shortest_output_arr)
 8004654:	4b11      	ldr	r3, [pc, #68]	; (800469c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004658:	ee07 3a90 	vmov	s15, r3
 800465c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004660:	4b10      	ldr	r3, [pc, #64]	; (80046a4 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xac>)
 8004662:	edd3 7a00 	vldr	s15, [r3]
 8004666:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800466a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800466e:	d809      	bhi.n	8004684 <IM_SWEEP_UPDATE_TIM_IRQHandler+0x8c>
				OUTPUT_TIMER->ARR = sweep_upper_bounds_longest_output_arr;
 8004670:	4b0b      	ldr	r3, [pc, #44]	; (80046a0 <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa8>)
 8004672:	edd3 7a00 	vldr	s15, [r3]
 8004676:	4b09      	ldr	r3, [pc, #36]	; (800469c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004678:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800467c:	ee17 2a90 	vmov	r2, s15
 8004680:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004682:	e003      	b.n	800468c <IM_SWEEP_UPDATE_TIM_IRQHandler+0x94>
				OUTPUT_TIMER->ARR--;
 8004684:	4b05      	ldr	r3, [pc, #20]	; (800469c <IM_SWEEP_UPDATE_TIM_IRQHandler+0xa4>)
 8004686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004688:	3a01      	subs	r2, #1
 800468a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800468c:	bf00      	nop
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	40000c00 	.word	0x40000c00
 800469c:	40013400 	.word	0x40013400
 80046a0:	20000004 	.word	0x20000004
 80046a4:	20000000 	.word	0x20000000

080046a8 <IM_BTN1_EXTI14_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN1_EXTI14_Handler()
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80046ae:	4b0f      	ldr	r3, [pc, #60]	; (80046ec <IM_BTN1_EXTI14_Handler+0x44>)
 80046b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b2:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn1_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80046b4:	88fb      	ldrh	r3, [r7, #6]
 80046b6:	4a0e      	ldr	r2, [pc, #56]	; (80046f0 <IM_BTN1_EXTI14_Handler+0x48>)
 80046b8:	8812      	ldrh	r2, [r2, #0]
 80046ba:	1a9b      	subs	r3, r3, r2
 80046bc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80046c0:	dd0c      	ble.n	80046dc <IM_BTN1_EXTI14_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 80046c2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80046c6:	f7ff ff71 	bl	80045ac <LL_EXTI_IsActiveFlag_0_31>
 80046ca:	4603      	mov	r3, r0
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d005      	beq.n	80046dc <IM_BTN1_EXTI14_Handler+0x34>
		{

			EM_SetNewEvent(evBlueBtn);
 80046d0:	2001      	movs	r0, #1
 80046d2:	f7ff f971 	bl	80039b8 <EM_SetNewEvent>
			printf("'Blue' BTN1_EXTI14_Pin\n");
 80046d6:	4807      	ldr	r0, [pc, #28]	; (80046f4 <IM_BTN1_EXTI14_Handler+0x4c>)
 80046d8:	f00a fc04 	bl	800eee4 <puts>
		}
	}
	btn1_last_interrupt_time = interrupt_time;
 80046dc:	4a04      	ldr	r2, [pc, #16]	; (80046f0 <IM_BTN1_EXTI14_Handler+0x48>)
 80046de:	88fb      	ldrh	r3, [r7, #6]
 80046e0:	8013      	strh	r3, [r2, #0]


}
 80046e2:	bf00      	nop
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
 80046ea:	bf00      	nop
 80046ec:	40014400 	.word	0x40014400
 80046f0:	20001a1a 	.word	0x20001a1a
 80046f4:	08012c94 	.word	0x08012c94

080046f8 <IM_BTN2_EXTI15_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN2_EXTI15_Handler()
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b082      	sub	sp, #8
 80046fc:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80046fe:	4b0f      	ldr	r3, [pc, #60]	; (800473c <IM_BTN2_EXTI15_Handler+0x44>)
 8004700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004702:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn2_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004704:	88fb      	ldrh	r3, [r7, #6]
 8004706:	4a0e      	ldr	r2, [pc, #56]	; (8004740 <IM_BTN2_EXTI15_Handler+0x48>)
 8004708:	8812      	ldrh	r2, [r2, #0]
 800470a:	1a9b      	subs	r3, r3, r2
 800470c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004710:	dd0c      	ble.n	800472c <IM_BTN2_EXTI15_Handler+0x34>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 8004712:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004716:	f7ff ff49 	bl	80045ac <LL_EXTI_IsActiveFlag_0_31>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d005      	beq.n	800472c <IM_BTN2_EXTI15_Handler+0x34>
		{
			EM_SetNewEvent(evYellowBtn);
 8004720:	2003      	movs	r0, #3
 8004722:	f7ff f949 	bl	80039b8 <EM_SetNewEvent>
			printf("'Yellow' BTN2_EXTI15_Pin\n");
 8004726:	4807      	ldr	r0, [pc, #28]	; (8004744 <IM_BTN2_EXTI15_Handler+0x4c>)
 8004728:	f00a fbdc 	bl	800eee4 <puts>
		}
	}
	btn2_last_interrupt_time = interrupt_time;
 800472c:	4a04      	ldr	r2, [pc, #16]	; (8004740 <IM_BTN2_EXTI15_Handler+0x48>)
 800472e:	88fb      	ldrh	r3, [r7, #6]
 8004730:	8013      	strh	r3, [r2, #0]


}
 8004732:	bf00      	nop
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}
 800473a:	bf00      	nop
 800473c:	40014400 	.word	0x40014400
 8004740:	20001a1c 	.word	0x20001a1c
 8004744:	08012cac 	.word	0x08012cac

08004748 <IM_BTN3_EXTI0_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN3_EXTI0_Handler()
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800474e:	4b0e      	ldr	r3, [pc, #56]	; (8004788 <IM_BTN3_EXTI0_Handler+0x40>)
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn3_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 8004754:	88fb      	ldrh	r3, [r7, #6]
 8004756:	4a0d      	ldr	r2, [pc, #52]	; (800478c <IM_BTN3_EXTI0_Handler+0x44>)
 8004758:	8812      	ldrh	r2, [r2, #0]
 800475a:	1a9b      	subs	r3, r3, r2
 800475c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004760:	dd0b      	ble.n	800477a <IM_BTN3_EXTI0_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 8004762:	2001      	movs	r0, #1
 8004764:	f7ff ff22 	bl	80045ac <LL_EXTI_IsActiveFlag_0_31>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d005      	beq.n	800477a <IM_BTN3_EXTI0_Handler+0x32>
		{
			EM_SetNewEvent(evRedBtn);
 800476e:	2004      	movs	r0, #4
 8004770:	f7ff f922 	bl	80039b8 <EM_SetNewEvent>
			printf("'Red' BTN3_EXTI0_Pin\n");
 8004774:	4806      	ldr	r0, [pc, #24]	; (8004790 <IM_BTN3_EXTI0_Handler+0x48>)
 8004776:	f00a fbb5 	bl	800eee4 <puts>
		}
	}
	btn3_last_interrupt_time = interrupt_time;
 800477a:	4a04      	ldr	r2, [pc, #16]	; (800478c <IM_BTN3_EXTI0_Handler+0x44>)
 800477c:	88fb      	ldrh	r3, [r7, #6]
 800477e:	8013      	strh	r3, [r2, #0]


}
 8004780:	bf00      	nop
 8004782:	3708      	adds	r7, #8
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	40014400 	.word	0x40014400
 800478c:	20001a1e 	.word	0x20001a1e
 8004790:	08012cc8 	.word	0x08012cc8

08004794 <IM_BTN4_EXTI1_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_BTN4_EXTI1_Handler()
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 800479a:	4b0e      	ldr	r3, [pc, #56]	; (80047d4 <IM_BTN4_EXTI1_Handler+0x40>)
 800479c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479e:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - btn4_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80047a0:	88fb      	ldrh	r3, [r7, #6]
 80047a2:	4a0d      	ldr	r2, [pc, #52]	; (80047d8 <IM_BTN4_EXTI1_Handler+0x44>)
 80047a4:	8812      	ldrh	r2, [r2, #0]
 80047a6:	1a9b      	subs	r3, r3, r2
 80047a8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047ac:	dd0b      	ble.n	80047c6 <IM_BTN4_EXTI1_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 80047ae:	2002      	movs	r0, #2
 80047b0:	f7ff fefc 	bl	80045ac <LL_EXTI_IsActiveFlag_0_31>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d005      	beq.n	80047c6 <IM_BTN4_EXTI1_Handler+0x32>
		{
			EM_SetNewEvent(evGreenBtn);
 80047ba:	2002      	movs	r0, #2
 80047bc:	f7ff f8fc 	bl	80039b8 <EM_SetNewEvent>
			printf("'Green' BTN4_EXTI1_Pin\n");
 80047c0:	4806      	ldr	r0, [pc, #24]	; (80047dc <IM_BTN4_EXTI1_Handler+0x48>)
 80047c2:	f00a fb8f 	bl	800eee4 <puts>
		}
	}
	btn4_last_interrupt_time = interrupt_time;
 80047c6:	4a04      	ldr	r2, [pc, #16]	; (80047d8 <IM_BTN4_EXTI1_Handler+0x44>)
 80047c8:	88fb      	ldrh	r3, [r7, #6]
 80047ca:	8013      	strh	r3, [r2, #0]


}
 80047cc:	bf00      	nop
 80047ce:	3708      	adds	r7, #8
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	40014400 	.word	0x40014400
 80047d8:	20001a20 	.word	0x20001a20
 80047dc:	08012ce0 	.word	0x08012ce0

080047e0 <IM_ENC_EXTI2_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_EXTI2_Handler()
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
	uint16_t interrupt_time = DEBOUNCE_TIMER->CNT;
 80047e6:	4b0e      	ldr	r3, [pc, #56]	; (8004820 <IM_ENC_EXTI2_Handler+0x40>)
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	80fb      	strh	r3, [r7, #6]
	if ((interrupt_time - encbtn_last_interrupt_time) > MAX_DEBOUNCE_DELAY)
 80047ec:	88fb      	ldrh	r3, [r7, #6]
 80047ee:	4a0d      	ldr	r2, [pc, #52]	; (8004824 <IM_ENC_EXTI2_Handler+0x44>)
 80047f0:	8812      	ldrh	r2, [r2, #0]
 80047f2:	1a9b      	subs	r3, r3, r2
 80047f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047f8:	dd0b      	ble.n	8004812 <IM_ENC_EXTI2_Handler+0x32>
	{
		if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 80047fa:	2004      	movs	r0, #4
 80047fc:	f7ff fed6 	bl	80045ac <LL_EXTI_IsActiveFlag_0_31>
 8004800:	4603      	mov	r3, r0
 8004802:	2b00      	cmp	r3, #0
 8004804:	d005      	beq.n	8004812 <IM_ENC_EXTI2_Handler+0x32>
		{
			EM_SetNewEvent(evEncoderPush);
 8004806:	2006      	movs	r0, #6
 8004808:	f7ff f8d6 	bl	80039b8 <EM_SetNewEvent>
			printf("'EncoderPush' ENC_EXTI2_Pin\n");
 800480c:	4806      	ldr	r0, [pc, #24]	; (8004828 <IM_ENC_EXTI2_Handler+0x48>)
 800480e:	f00a fb69 	bl	800eee4 <puts>
		}
	}
	encbtn_last_interrupt_time = interrupt_time;
 8004812:	4a04      	ldr	r2, [pc, #16]	; (8004824 <IM_ENC_EXTI2_Handler+0x44>)
 8004814:	88fb      	ldrh	r3, [r7, #6]
 8004816:	8013      	strh	r3, [r2, #0]


}
 8004818:	bf00      	nop
 800481a:	3708      	adds	r7, #8
 800481c:	46bd      	mov	sp, r7
 800481e:	bd80      	pop	{r7, pc}
 8004820:	40014400 	.word	0x40014400
 8004824:	20001a22 	.word	0x20001a22
 8004828:	08012cf8 	.word	0x08012cf8

0800482c <IM_ENC_DIRF_Handler>:
 *	@param None
 *	@retval None
 *
 */
void IM_ENC_DIRF_Handler()
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0

	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 8004830:	4b0a      	ldr	r3, [pc, #40]	; (800485c <IM_ENC_DIRF_Handler+0x30>)
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004838:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800483c:	d10b      	bne.n	8004856 <IM_ENC_DIRF_Handler+0x2a>
	{
		EM_SetNewEvent(evEncoderSet);
 800483e:	2005      	movs	r0, #5
 8004840:	f7ff f8ba 	bl	80039b8 <EM_SetNewEvent>
		printf("Encoder new direction\n");
 8004844:	4806      	ldr	r0, [pc, #24]	; (8004860 <IM_ENC_DIRF_Handler+0x34>)
 8004846:	f00a fb4d 	bl	800eee4 <puts>
		TIM1->SR &= ~(TIM_SR_DIRF);
 800484a:	4b04      	ldr	r3, [pc, #16]	; (800485c <IM_ENC_DIRF_Handler+0x30>)
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	4a03      	ldr	r2, [pc, #12]	; (800485c <IM_ENC_DIRF_Handler+0x30>)
 8004850:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004854:	6113      	str	r3, [r2, #16]

	}
}
 8004856:	bf00      	nop
 8004858:	bd80      	pop	{r7, pc}
 800485a:	bf00      	nop
 800485c:	40012c00 	.word	0x40012c00
 8004860:	08012d14 	.word	0x08012d14

08004864 <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 8004864:	b480      	push	{r7}
 8004866:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8004868:	4b03      	ldr	r3, [pc, #12]	; (8004878 <BO_GetBiasPolarity+0x14>)
 800486a:	781b      	ldrb	r3, [r3, #0]
}
 800486c:	4618      	mov	r0, r3
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr
 8004876:	bf00      	nop
 8004878:	20000009 	.word	0x20000009

0800487c <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 8004880:	4b03      	ldr	r3, [pc, #12]	; (8004890 <BO_GetDcBiasEncoderValue+0x14>)
 8004882:	881b      	ldrh	r3, [r3, #0]
}
 8004884:	4618      	mov	r0, r3
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	2000000a 	.word	0x2000000a

08004894 <BO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_ModifyOutput(uint16_t pEncoderValue)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	4603      	mov	r3, r0
 800489c:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_FORWARD);
 800489e:	2000      	movs	r0, #0
 80048a0:	f000 fd8c 	bl	80053bc <SM_GetEncoderValue>
 80048a4:	4603      	mov	r3, r0
 80048a6:	461a      	mov	r2, r3
 80048a8:	4b1b      	ldr	r3, [pc, #108]	; (8004918 <BO_ModifyOutput+0x84>)
 80048aa:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 80048ac:	88fb      	ldrh	r3, [r7, #6]
 80048ae:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80048b2:	d214      	bcs.n	80048de <BO_ModifyOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 80048b4:	4b19      	ldr	r3, [pc, #100]	; (800491c <BO_ModifyOutput+0x88>)
 80048b6:	2200      	movs	r2, #0
 80048b8:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 80048ba:	88fb      	ldrh	r3, [r7, #6]
 80048bc:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 80048c0:	4613      	mov	r3, r2
 80048c2:	009b      	lsls	r3, r3, #2
 80048c4:	4413      	add	r3, r2
 80048c6:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 80048c8:	2200      	movs	r2, #0
 80048ca:	2110      	movs	r1, #16
 80048cc:	4814      	ldr	r0, [pc, #80]	; (8004920 <BO_ModifyOutput+0x8c>)
 80048ce:	f005 fbeb 	bl	800a0a8 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 80048d2:	2201      	movs	r2, #1
 80048d4:	2108      	movs	r1, #8
 80048d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80048da:	f006 fac5 	bl	800ae68 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 80048de:	88fb      	ldrh	r3, [r7, #6]
 80048e0:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80048e4:	d314      	bcc.n	8004910 <BO_ModifyOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 80048e6:	4b0d      	ldr	r3, [pc, #52]	; (800491c <BO_ModifyOutput+0x88>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 80048ec:	88fb      	ldrh	r3, [r7, #6]
 80048ee:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 80048f2:	4613      	mov	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4413      	add	r3, r2
 80048f8:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 80048fa:	2200      	movs	r2, #0
 80048fc:	2110      	movs	r1, #16
 80048fe:	4808      	ldr	r0, [pc, #32]	; (8004920 <BO_ModifyOutput+0x8c>)
 8004900:	f005 fbd2 	bl	800a0a8 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8004904:	2200      	movs	r2, #0
 8004906:	2108      	movs	r1, #8
 8004908:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800490c:	f006 faac 	bl	800ae68 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 8004910:	bf00      	nop
 8004912:	3708      	adds	r7, #8
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}
 8004918:	2000000a 	.word	0x2000000a
 800491c:	20000009 	.word	0x20000009
 8004920:	20002110 	.word	0x20002110

08004924 <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 8004924:	b580      	push	{r7, lr}
 8004926:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8004928:	2110      	movs	r1, #16
 800492a:	4803      	ldr	r0, [pc, #12]	; (8004938 <BO_GetOutputBias+0x14>)
 800492c:	f005 fc02 	bl	800a134 <HAL_DAC_GetValue>
 8004930:	4603      	mov	r3, r0
}
 8004932:	4618      	mov	r0, r3
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	20002110 	.word	0x20002110

0800493c <DT_InitRegister>:
 *	@param None
 *	@retval None
 *
 */
void DT_InitRegister()
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004942:	2300      	movs	r3, #0
 8004944:	607b      	str	r3, [r7, #4]
 8004946:	e06b      	b.n	8004a20 <DT_InitRegister+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(DacTimerReg[i].psc == 0)
 8004948:	493a      	ldr	r1, [pc, #232]	; (8004a34 <DT_InitRegister+0xf8>)
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	440b      	add	r3, r1
 8004956:	3308      	adds	r3, #8
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d129      	bne.n	80049b2 <DT_InitRegister+0x76>
			DacTimerReg[i].arr = ((SM_MCLK / DacTimerReg[i].hertz) / SM_FSAMP) * DacTimerReg[i].error;
 800495e:	4935      	ldr	r1, [pc, #212]	; (8004a34 <DT_InitRegister+0xf8>)
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	4613      	mov	r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	440b      	add	r3, r1
 800496c:	3304      	adds	r3, #4
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a31      	ldr	r2, [pc, #196]	; (8004a38 <DT_InitRegister+0xfc>)
 8004972:	fbb2 f3f3 	udiv	r3, r2, r3
 8004976:	ee07 3a90 	vmov	s15, r3
 800497a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800497e:	492d      	ldr	r1, [pc, #180]	; (8004a34 <DT_InitRegister+0xf8>)
 8004980:	687a      	ldr	r2, [r7, #4]
 8004982:	4613      	mov	r3, r2
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	4413      	add	r3, r2
 8004988:	009b      	lsls	r3, r3, #2
 800498a:	440b      	add	r3, r1
 800498c:	3310      	adds	r3, #16
 800498e:	edd3 7a00 	vldr	s15, [r3]
 8004992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004996:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800499a:	ee17 0a90 	vmov	r0, s15
 800499e:	4925      	ldr	r1, [pc, #148]	; (8004a34 <DT_InitRegister+0xf8>)
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	4613      	mov	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	440b      	add	r3, r1
 80049ac:	330c      	adds	r3, #12
 80049ae:	6018      	str	r0, [r3, #0]
 80049b0:	e033      	b.n	8004a1a <DT_InitRegister+0xde>
		else
			DacTimerReg[i].arr = (((SM_MCLK / DacTimerReg[i].hertz) / DacTimerReg[i].psc) / SM_FSAMP) * DacTimerReg[i].error;
 80049b2:	4920      	ldr	r1, [pc, #128]	; (8004a34 <DT_InitRegister+0xf8>)
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	4613      	mov	r3, r2
 80049b8:	009b      	lsls	r3, r3, #2
 80049ba:	4413      	add	r3, r2
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	440b      	add	r3, r1
 80049c0:	3304      	adds	r3, #4
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a1c      	ldr	r2, [pc, #112]	; (8004a38 <DT_InitRegister+0xfc>)
 80049c6:	fbb2 f1f3 	udiv	r1, r2, r3
 80049ca:	481a      	ldr	r0, [pc, #104]	; (8004a34 <DT_InitRegister+0xf8>)
 80049cc:	687a      	ldr	r2, [r7, #4]
 80049ce:	4613      	mov	r3, r2
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4403      	add	r3, r0
 80049d8:	3308      	adds	r3, #8
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80049e0:	ee07 3a90 	vmov	s15, r3
 80049e4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049e8:	4912      	ldr	r1, [pc, #72]	; (8004a34 <DT_InitRegister+0xf8>)
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	4613      	mov	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	440b      	add	r3, r1
 80049f6:	3310      	adds	r3, #16
 80049f8:	edd3 7a00 	vldr	s15, [r3]
 80049fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a04:	ee17 0a90 	vmov	r0, s15
 8004a08:	490a      	ldr	r1, [pc, #40]	; (8004a34 <DT_InitRegister+0xf8>)
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	4613      	mov	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	4413      	add	r3, r2
 8004a12:	009b      	lsls	r3, r3, #2
 8004a14:	440b      	add	r3, r1
 8004a16:	330c      	adds	r3, #12
 8004a18:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	607b      	str	r3, [r7, #4]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2b0d      	cmp	r3, #13
 8004a24:	dd90      	ble.n	8004948 <DT_InitRegister+0xc>
	}
}
 8004a26:	bf00      	nop
 8004a28:	370c      	adds	r7, #12
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
 8004a32:	bf00      	nop
 8004a34:	2000000c 	.word	0x2000000c
 8004a38:	00155cc0 	.word	0x00155cc0

08004a3c <DT_GetRegisterByEnum>:
 *	@param pEnum Enummeration (eFreqSettings_t) search criteria. Not an index
 *	@retval Pointer to the found DacTimeReg_t struct. Null if no result!
 *
 */
DacTimeReg_t* DT_GetRegisterByEnum(eFreqSettings_t pEnum)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004a44:	2300      	movs	r3, #0
 8004a46:	60fb      	str	r3, [r7, #12]
 8004a48:	e016      	b.n	8004a78 <DT_GetRegisterByEnum+0x3c>
		if(DacTimerReg[i].hertz == pEnum)
 8004a4a:	4910      	ldr	r1, [pc, #64]	; (8004a8c <DT_GetRegisterByEnum+0x50>)
 8004a4c:	68fa      	ldr	r2, [r7, #12]
 8004a4e:	4613      	mov	r3, r2
 8004a50:	009b      	lsls	r3, r3, #2
 8004a52:	4413      	add	r3, r2
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	440b      	add	r3, r1
 8004a58:	3304      	adds	r3, #4
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	687a      	ldr	r2, [r7, #4]
 8004a5e:	429a      	cmp	r2, r3
 8004a60:	d107      	bne.n	8004a72 <DT_GetRegisterByEnum+0x36>
			return &DacTimerReg[i];
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	4613      	mov	r3, r2
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	009b      	lsls	r3, r3, #2
 8004a6c:	4a07      	ldr	r2, [pc, #28]	; (8004a8c <DT_GetRegisterByEnum+0x50>)
 8004a6e:	4413      	add	r3, r2
 8004a70:	e006      	b.n	8004a80 <DT_GetRegisterByEnum+0x44>
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	3301      	adds	r3, #1
 8004a76:	60fb      	str	r3, [r7, #12]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2b0d      	cmp	r3, #13
 8004a7c:	dde5      	ble.n	8004a4a <DT_GetRegisterByEnum+0xe>

	return 0;
 8004a7e:	2300      	movs	r3, #0
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	2000000c 	.word	0x2000000c

08004a90 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	af00      	add	r7, sp, #0
		//OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_HIFREQ_MAG;
		OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 8004a94:	2000      	movs	r0, #0
 8004a96:	f000 fc91 	bl	80053bc <SM_GetEncoderValue>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	4b02      	ldr	r3, [pc, #8]	; (8004aa8 <FreqO_AdjustFreq+0x18>)
 8004aa0:	62da      	str	r2, [r3, #44]	; 0x2c
		//OUTPUT_TIMER->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_LOFREQ_MAG;
}
 8004aa2:	bf00      	nop
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40013400 	.word	0x40013400

08004aac <FreqO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ModifyOutput(uint16_t pEncValue)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b082      	sub	sp, #8
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	80fb      	strh	r3, [r7, #6]

	switch(pEncValue)
 8004ab6:	88fb      	ldrh	r3, [r7, #6]
 8004ab8:	2b38      	cmp	r3, #56	; 0x38
 8004aba:	f200 80b4 	bhi.w	8004c26 <FreqO_ModifyOutput+0x17a>
 8004abe:	a201      	add	r2, pc, #4	; (adr r2, 8004ac4 <FreqO_ModifyOutput+0x18>)
 8004ac0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ac4:	08004ba9 	.word	0x08004ba9
 8004ac8:	08004ba9 	.word	0x08004ba9
 8004acc:	08004ba9 	.word	0x08004ba9
 8004ad0:	08004ba9 	.word	0x08004ba9
 8004ad4:	08004bb1 	.word	0x08004bb1
 8004ad8:	08004bb1 	.word	0x08004bb1
 8004adc:	08004bb1 	.word	0x08004bb1
 8004ae0:	08004bb1 	.word	0x08004bb1
 8004ae4:	08004bb9 	.word	0x08004bb9
 8004ae8:	08004bb9 	.word	0x08004bb9
 8004aec:	08004bb9 	.word	0x08004bb9
 8004af0:	08004bb9 	.word	0x08004bb9
 8004af4:	08004bc1 	.word	0x08004bc1
 8004af8:	08004bc1 	.word	0x08004bc1
 8004afc:	08004bc1 	.word	0x08004bc1
 8004b00:	08004bc1 	.word	0x08004bc1
 8004b04:	08004bc9 	.word	0x08004bc9
 8004b08:	08004bc9 	.word	0x08004bc9
 8004b0c:	08004bc9 	.word	0x08004bc9
 8004b10:	08004bc9 	.word	0x08004bc9
 8004b14:	08004bd1 	.word	0x08004bd1
 8004b18:	08004bd1 	.word	0x08004bd1
 8004b1c:	08004bd1 	.word	0x08004bd1
 8004b20:	08004bd1 	.word	0x08004bd1
 8004b24:	08004bdb 	.word	0x08004bdb
 8004b28:	08004bdb 	.word	0x08004bdb
 8004b2c:	08004bdb 	.word	0x08004bdb
 8004b30:	08004bdb 	.word	0x08004bdb
 8004b34:	08004be5 	.word	0x08004be5
 8004b38:	08004be5 	.word	0x08004be5
 8004b3c:	08004be5 	.word	0x08004be5
 8004b40:	08004c27 	.word	0x08004c27
 8004b44:	08004be5 	.word	0x08004be5
 8004b48:	08004bef 	.word	0x08004bef
 8004b4c:	08004bef 	.word	0x08004bef
 8004b50:	08004bef 	.word	0x08004bef
 8004b54:	08004bef 	.word	0x08004bef
 8004b58:	08004bf9 	.word	0x08004bf9
 8004b5c:	08004bf9 	.word	0x08004bf9
 8004b60:	08004bf9 	.word	0x08004bf9
 8004b64:	08004bf9 	.word	0x08004bf9
 8004b68:	08004c03 	.word	0x08004c03
 8004b6c:	08004c03 	.word	0x08004c03
 8004b70:	08004c03 	.word	0x08004c03
 8004b74:	08004c03 	.word	0x08004c03
 8004b78:	08004c0d 	.word	0x08004c0d
 8004b7c:	08004c0d 	.word	0x08004c0d
 8004b80:	08004c0d 	.word	0x08004c0d
 8004b84:	08004c0d 	.word	0x08004c0d
 8004b88:	08004c17 	.word	0x08004c17
 8004b8c:	08004c17 	.word	0x08004c17
 8004b90:	08004c17 	.word	0x08004c17
 8004b94:	08004c17 	.word	0x08004c17
 8004b98:	08004c1f 	.word	0x08004c1f
 8004b9c:	08004c1f 	.word	0x08004c1f
 8004ba0:	08004c1f 	.word	0x08004c1f
 8004ba4:	08004c1f 	.word	0x08004c1f
	{
		case 0:
		case 1:
		case 2:
		case 3:
			FreqO_ApplyPreset(FPRESET_1HZ);
 8004ba8:	2001      	movs	r0, #1
 8004baa:	f000 f845 	bl	8004c38 <FreqO_ApplyPreset>
			break;
 8004bae:	e03a      	b.n	8004c26 <FreqO_ModifyOutput+0x17a>
		case 4:
		case 5:
		case 6:
		case 7:
			FreqO_ApplyPreset(FPRESET_10HZ);
 8004bb0:	200a      	movs	r0, #10
 8004bb2:	f000 f841 	bl	8004c38 <FreqO_ApplyPreset>
			break;
 8004bb6:	e036      	b.n	8004c26 <FreqO_ModifyOutput+0x17a>
		case 8:
		case 9:
		case 10:
		case 11:
			FreqO_ApplyPreset(FPRESET_50HZ);
 8004bb8:	2032      	movs	r0, #50	; 0x32
 8004bba:	f000 f83d 	bl	8004c38 <FreqO_ApplyPreset>
			break;
 8004bbe:	e032      	b.n	8004c26 <FreqO_ModifyOutput+0x17a>
		case 12:
		case 13:
		case 14:
		case 15:
			FreqO_ApplyPreset(FPRESET_100HZ);
 8004bc0:	2064      	movs	r0, #100	; 0x64
 8004bc2:	f000 f839 	bl	8004c38 <FreqO_ApplyPreset>
			break;
 8004bc6:	e02e      	b.n	8004c26 <FreqO_ModifyOutput+0x17a>
		case 16:
		case 17:
		case 18:
		case 19:
			FreqO_ApplyPreset(FPRESET_250HZ);
 8004bc8:	20fa      	movs	r0, #250	; 0xfa
 8004bca:	f000 f835 	bl	8004c38 <FreqO_ApplyPreset>
			break;
 8004bce:	e02a      	b.n	8004c26 <FreqO_ModifyOutput+0x17a>
		case 20:
		case 21:
		case 22:
		case 23:
			FreqO_ApplyPreset(FPRESET_500HZ);
 8004bd0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004bd4:	f000 f830 	bl	8004c38 <FreqO_ApplyPreset>
			break;
 8004bd8:	e025      	b.n	8004c26 <FreqO_ModifyOutput+0x17a>
		case 24:
		case 25:
		case 26:
		case 27:
			FreqO_ApplyPreset(FPRESET_750HZ);
 8004bda:	f240 20ee 	movw	r0, #750	; 0x2ee
 8004bde:	f000 f82b 	bl	8004c38 <FreqO_ApplyPreset>
			break;
 8004be2:	e020      	b.n	8004c26 <FreqO_ModifyOutput+0x17a>
		case 28:
		case 29:
		case 30:
		case 32:
			FreqO_ApplyPreset(FPRESET_1KHZ);
 8004be4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004be8:	f000 f826 	bl	8004c38 <FreqO_ApplyPreset>
			break;
 8004bec:	e01b      	b.n	8004c26 <FreqO_ModifyOutput+0x17a>
		case 33:
		case 34:
		case 35:
		case 36:
			FreqO_ApplyPreset(FPRESET_5KHZ);
 8004bee:	f241 3088 	movw	r0, #5000	; 0x1388
 8004bf2:	f000 f821 	bl	8004c38 <FreqO_ApplyPreset>
			break;
 8004bf6:	e016      	b.n	8004c26 <FreqO_ModifyOutput+0x17a>
		case 37:
		case 38:
		case 39:
		case 40:
			FreqO_ApplyPreset(FPRESET_10KHZ);
 8004bf8:	f242 7010 	movw	r0, #10000	; 0x2710
 8004bfc:	f000 f81c 	bl	8004c38 <FreqO_ApplyPreset>
			break;
 8004c00:	e011      	b.n	8004c26 <FreqO_ModifyOutput+0x17a>
		case 41:
		case 42:
		case 43:
		case 44:
			FreqO_ApplyPreset(FPRESET_25KHZ);
 8004c02:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8004c06:	f000 f817 	bl	8004c38 <FreqO_ApplyPreset>
			break;
 8004c0a:	e00c      	b.n	8004c26 <FreqO_ModifyOutput+0x17a>
		case 45:
		case 46:
		case 47:
		case 48:
			FreqO_ApplyPreset(FPRESET_50KHZ);
 8004c0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004c10:	f000 f812 	bl	8004c38 <FreqO_ApplyPreset>
			break;
 8004c14:	e007      	b.n	8004c26 <FreqO_ModifyOutput+0x17a>
		case 49:
		case 50:
		case 51:
		case 52:
			FreqO_ApplyPreset(FPRESET_75KHZ);
 8004c16:	4806      	ldr	r0, [pc, #24]	; (8004c30 <FreqO_ModifyOutput+0x184>)
 8004c18:	f000 f80e 	bl	8004c38 <FreqO_ApplyPreset>
			break;
 8004c1c:	e003      	b.n	8004c26 <FreqO_ModifyOutput+0x17a>
		case 53:
		case 54:
		case 55:
		case 56:
			FreqO_ApplyPreset(FPRESET_100KHZ);
 8004c1e:	4805      	ldr	r0, [pc, #20]	; (8004c34 <FreqO_ModifyOutput+0x188>)
 8004c20:	f000 f80a 	bl	8004c38 <FreqO_ApplyPreset>
			break;
 8004c24:	bf00      	nop
	}

}
 8004c26:	bf00      	nop
 8004c28:	3708      	adds	r7, #8
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}
 8004c2e:	bf00      	nop
 8004c30:	000124f8 	.word	0x000124f8
 8004c34:	000186a0 	.word	0x000186a0

08004c38 <FreqO_ApplyPreset>:

 *	@retval None
 *
 */
void FreqO_ApplyPreset(eFreqSettings_t pPresetEnum)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
	DacTimeReg_t* tmp = DT_GetRegisterByEnum(pPresetEnum);
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	f7ff fefb 	bl	8004a3c <DT_GetRegisterByEnum>
 8004c46:	60f8      	str	r0, [r7, #12]
	if(tmp)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d015      	beq.n	8004c7a <FreqO_ApplyPreset+0x42>
	{
		OUTPUT_TIMER->PSC = tmp->psc;
 8004c4e:	4a0d      	ldr	r2, [pc, #52]	; (8004c84 <FreqO_ApplyPreset+0x4c>)
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	6293      	str	r3, [r2, #40]	; 0x28
		OUTPUT_TIMER->ARR = tmp->arr;
 8004c56:	4a0b      	ldr	r2, [pc, #44]	; (8004c84 <FreqO_ApplyPreset+0x4c>)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	62d3      	str	r3, [r2, #44]	; 0x2c


		//eNewFreqPreset = pPresetEnum;
		FreqProfile_t * tmp = FreqO_FindFPresetObject(pPresetEnum);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 f822 	bl	8004ca8 <FreqO_FindFPresetObject>
 8004c64:	60b8      	str	r0, [r7, #8]
		if(tmp)
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <FreqO_ApplyPreset+0x3c>
		{
			freq_profile = tmp;
 8004c6c:	4a06      	ldr	r2, [pc, #24]	; (8004c88 <FreqO_ApplyPreset+0x50>)
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	6013      	str	r3, [r2, #0]
		{
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
		}

	}
}
 8004c72:	e002      	b.n	8004c7a <FreqO_ApplyPreset+0x42>
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
 8004c74:	4805      	ldr	r0, [pc, #20]	; (8004c8c <FreqO_ApplyPreset+0x54>)
 8004c76:	f7fc fb03 	bl	8001280 <DM_SetErrorDebugMsg>
}
 8004c7a:	bf00      	nop
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	40013400 	.word	0x40013400
 8004c88:	20000198 	.word	0x20000198
 8004c8c:	08012d2c 	.word	0x08012d2c

08004c90 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_GetFPresetObject()
{
 8004c90:	b480      	push	{r7}
 8004c92:	af00      	add	r7, sp, #0
	return freq_profile;
 8004c94:	4b03      	ldr	r3, [pc, #12]	; (8004ca4 <FreqO_GetFPresetObject+0x14>)
 8004c96:	681b      	ldr	r3, [r3, #0]
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca0:	4770      	bx	lr
 8004ca2:	bf00      	nop
 8004ca4:	20000198 	.word	0x20000198

08004ca8 <FreqO_FindFPresetObject>:

 *	@retval pointer to FreqProfile_t struct
 *
 */
FreqProfile_t * FreqO_FindFPresetObject(eFreqSettings_t pEnum)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	60fb      	str	r3, [r7, #12]
 8004cb4:	e00e      	b.n	8004cd4 <FreqO_FindFPresetObject+0x2c>
	{
		if(theFreqProfiles[i].hertz == pEnum)
 8004cb6:	4a0d      	ldr	r2, [pc, #52]	; (8004cec <FreqO_FindFPresetObject+0x44>)
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004cbe:	687a      	ldr	r2, [r7, #4]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d104      	bne.n	8004cce <FreqO_FindFPresetObject+0x26>
		{
			return &theFreqProfiles[i];
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	00db      	lsls	r3, r3, #3
 8004cc8:	4a08      	ldr	r2, [pc, #32]	; (8004cec <FreqO_FindFPresetObject+0x44>)
 8004cca:	4413      	add	r3, r2
 8004ccc:	e009      	b.n	8004ce2 <FreqO_FindFPresetObject+0x3a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	60fb      	str	r3, [r7, #12]
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2b0d      	cmp	r3, #13
 8004cd8:	dded      	ble.n	8004cb6 <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 8004cda:	4805      	ldr	r0, [pc, #20]	; (8004cf0 <FreqO_FindFPresetObject+0x48>)
 8004cdc:	f7fc fad0 	bl	8001280 <DM_SetErrorDebugMsg>
	return 0;
 8004ce0:	2300      	movs	r3, #0
}
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	3710      	adds	r7, #16
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	bd80      	pop	{r7, pc}
 8004cea:	bf00      	nop
 8004cec:	20000128 	.word	0x20000128
 8004cf0:	08012d54 	.word	0x08012d54

08004cf4 <FreqO_GetFreqPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FreqO_GetFreqPresetEncoderRange()
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	af00      	add	r7, sp, #0
	return FreqPresetEncoderRange;
 8004cf8:	4b03      	ldr	r3, [pc, #12]	; (8004d08 <FreqO_GetFreqPresetEncoderRange+0x14>)
 8004cfa:	781b      	ldrb	r3, [r3, #0]
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	20000124 	.word	0x20000124

08004d0c <FuncO_Init>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_Init()
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	af00      	add	r7, sp, #0
		aProcessedSignalDataTable[i] = sine_data_table_3600[i];

	for(int i = 0; i < SINE_DATA_SIZE; i++)
		aProcessedSyncDataTable[i] = sine_data_table_3600[i];
		*/
}
 8004d10:	bf00      	nop
 8004d12:	46bd      	mov	sp, r7
 8004d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d18:	4770      	bx	lr
	...

08004d1c <FuncO_ModifySignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_ModifySignalOutput(uint16_t pEncoderValue)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b082      	sub	sp, #8
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	4603      	mov	r3, r0
 8004d24:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 8004d26:	88fb      	ldrh	r3, [r7, #6]
 8004d28:	2b17      	cmp	r3, #23
 8004d2a:	d84b      	bhi.n	8004dc4 <FuncO_ModifySignalOutput+0xa8>
 8004d2c:	a201      	add	r2, pc, #4	; (adr r2, 8004d34 <FuncO_ModifySignalOutput+0x18>)
 8004d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d32:	bf00      	nop
 8004d34:	08004d95 	.word	0x08004d95
 8004d38:	08004d95 	.word	0x08004d95
 8004d3c:	08004d95 	.word	0x08004d95
 8004d40:	08004d9d 	.word	0x08004d9d
 8004d44:	08004d9d 	.word	0x08004d9d
 8004d48:	08004d9d 	.word	0x08004d9d
 8004d4c:	08004d9d 	.word	0x08004d9d
 8004d50:	08004da5 	.word	0x08004da5
 8004d54:	08004da5 	.word	0x08004da5
 8004d58:	08004da5 	.word	0x08004da5
 8004d5c:	08004da5 	.word	0x08004da5
 8004d60:	08004dad 	.word	0x08004dad
 8004d64:	08004dad 	.word	0x08004dad
 8004d68:	08004dad 	.word	0x08004dad
 8004d6c:	08004dad 	.word	0x08004dad
 8004d70:	08004db5 	.word	0x08004db5
 8004d74:	08004db5 	.word	0x08004db5
 8004d78:	08004db5 	.word	0x08004db5
 8004d7c:	08004db5 	.word	0x08004db5
 8004d80:	08004dbd 	.word	0x08004dbd
 8004d84:	08004dbd 	.word	0x08004dbd
 8004d88:	08004dbd 	.word	0x08004dbd
 8004d8c:	08004dbd 	.word	0x08004dbd
 8004d90:	08004dbd 	.word	0x08004dbd
	{
		case 0: case 1: case 2:
			FuncO_ApplyPresetToSignal(SINE_FUNC_MODE);
 8004d94:	2000      	movs	r0, #0
 8004d96:	f000 f871 	bl	8004e7c <FuncO_ApplyPresetToSignal>
			break;
 8004d9a:	e013      	b.n	8004dc4 <FuncO_ModifySignalOutput+0xa8>

		case 3: case 4: case 5: case 6:
			FuncO_ApplyPresetToSignal(SQUARE_FUNC_MODE);
 8004d9c:	2001      	movs	r0, #1
 8004d9e:	f000 f86d 	bl	8004e7c <FuncO_ApplyPresetToSignal>
			break;
 8004da2:	e00f      	b.n	8004dc4 <FuncO_ModifySignalOutput+0xa8>

		case 7: case 8: case 9: case 10:
			FuncO_ApplyPresetToSignal(SAW_FUNC_MODE);
 8004da4:	2002      	movs	r0, #2
 8004da6:	f000 f869 	bl	8004e7c <FuncO_ApplyPresetToSignal>
			break;
 8004daa:	e00b      	b.n	8004dc4 <FuncO_ModifySignalOutput+0xa8>

		case 11: case 12: case 13: case 14:
			FuncO_ApplyPresetToSignal(REV_SAW_FUNC_MODE);
 8004dac:	2003      	movs	r0, #3
 8004dae:	f000 f865 	bl	8004e7c <FuncO_ApplyPresetToSignal>
			break;
 8004db2:	e007      	b.n	8004dc4 <FuncO_ModifySignalOutput+0xa8>

		case 15: case 16: case 17: case 18:
			FuncO_ApplyPresetToSignal(TRIANGLE_FUNC_MODE);
 8004db4:	2004      	movs	r0, #4
 8004db6:	f000 f861 	bl	8004e7c <FuncO_ApplyPresetToSignal>
			break;
 8004dba:	e003      	b.n	8004dc4 <FuncO_ModifySignalOutput+0xa8>

		case 19: case 20: case 21: case 22: case 23:
			FuncO_ApplyPresetToSignal(IMPULSE_FUNC_MODE);
 8004dbc:	2005      	movs	r0, #5
 8004dbe:	f000 f85d 	bl	8004e7c <FuncO_ApplyPresetToSignal>
			break;
 8004dc2:	bf00      	nop

	}
}
 8004dc4:	bf00      	nop
 8004dc6:	3708      	adds	r7, #8
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <FuncO_ModifySyncOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_ModifySyncOutput(uint16_t pEncoderValue)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	4603      	mov	r3, r0
 8004dd4:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 8004dd6:	88fb      	ldrh	r3, [r7, #6]
 8004dd8:	2b17      	cmp	r3, #23
 8004dda:	d84b      	bhi.n	8004e74 <FuncO_ModifySyncOutput+0xa8>
 8004ddc:	a201      	add	r2, pc, #4	; (adr r2, 8004de4 <FuncO_ModifySyncOutput+0x18>)
 8004dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de2:	bf00      	nop
 8004de4:	08004e45 	.word	0x08004e45
 8004de8:	08004e45 	.word	0x08004e45
 8004dec:	08004e45 	.word	0x08004e45
 8004df0:	08004e4d 	.word	0x08004e4d
 8004df4:	08004e4d 	.word	0x08004e4d
 8004df8:	08004e4d 	.word	0x08004e4d
 8004dfc:	08004e4d 	.word	0x08004e4d
 8004e00:	08004e55 	.word	0x08004e55
 8004e04:	08004e55 	.word	0x08004e55
 8004e08:	08004e55 	.word	0x08004e55
 8004e0c:	08004e55 	.word	0x08004e55
 8004e10:	08004e5d 	.word	0x08004e5d
 8004e14:	08004e5d 	.word	0x08004e5d
 8004e18:	08004e5d 	.word	0x08004e5d
 8004e1c:	08004e5d 	.word	0x08004e5d
 8004e20:	08004e65 	.word	0x08004e65
 8004e24:	08004e65 	.word	0x08004e65
 8004e28:	08004e65 	.word	0x08004e65
 8004e2c:	08004e65 	.word	0x08004e65
 8004e30:	08004e6d 	.word	0x08004e6d
 8004e34:	08004e6d 	.word	0x08004e6d
 8004e38:	08004e6d 	.word	0x08004e6d
 8004e3c:	08004e6d 	.word	0x08004e6d
 8004e40:	08004e6d 	.word	0x08004e6d
	{
		case 0: case 1: case 2:
			FuncO_ApplyPresetToSync(SINE_FUNC_MODE);
 8004e44:	2000      	movs	r0, #0
 8004e46:	f000 f873 	bl	8004f30 <FuncO_ApplyPresetToSync>
			break;
 8004e4a:	e013      	b.n	8004e74 <FuncO_ModifySyncOutput+0xa8>

		case 3: case 4: case 5: case 6:
			FuncO_ApplyPresetToSync(SQUARE_FUNC_MODE);
 8004e4c:	2001      	movs	r0, #1
 8004e4e:	f000 f86f 	bl	8004f30 <FuncO_ApplyPresetToSync>
			break;
 8004e52:	e00f      	b.n	8004e74 <FuncO_ModifySyncOutput+0xa8>

		case 7: case 8: case 9: case 10:
			FuncO_ApplyPresetToSync(SAW_FUNC_MODE);
 8004e54:	2002      	movs	r0, #2
 8004e56:	f000 f86b 	bl	8004f30 <FuncO_ApplyPresetToSync>
			break;
 8004e5a:	e00b      	b.n	8004e74 <FuncO_ModifySyncOutput+0xa8>

		case 11: case 12: case 13: case 14:
			FuncO_ApplyPresetToSync(REV_SAW_FUNC_MODE);
 8004e5c:	2003      	movs	r0, #3
 8004e5e:	f000 f867 	bl	8004f30 <FuncO_ApplyPresetToSync>
			break;
 8004e62:	e007      	b.n	8004e74 <FuncO_ModifySyncOutput+0xa8>

		case 15: case 16: case 17: case 18:
			FuncO_ApplyPresetToSync(TRIANGLE_FUNC_MODE);
 8004e64:	2004      	movs	r0, #4
 8004e66:	f000 f863 	bl	8004f30 <FuncO_ApplyPresetToSync>
			break;
 8004e6a:	e003      	b.n	8004e74 <FuncO_ModifySyncOutput+0xa8>

		case 19: case 20: case 21: case 22: case 23:
			FuncO_ApplyPresetToSync(IMPULSE_FUNC_MODE);
 8004e6c:	2005      	movs	r0, #5
 8004e6e:	f000 f85f 	bl	8004f30 <FuncO_ApplyPresetToSync>
			break;
 8004e72:	bf00      	nop

	}
}
 8004e74:	bf00      	nop
 8004e76:	3708      	adds	r7, #8
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	bd80      	pop	{r7, pc}

08004e7c <FuncO_ApplyPresetToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSignal(eOutput_mode pPresetEnum)
{
 8004e7c:	b590      	push	{r4, r7, lr}
 8004e7e:	b087      	sub	sp, #28
 8004e80:	af02      	add	r7, sp, #8
 8004e82:	4603      	mov	r3, r0
 8004e84:	71fb      	strb	r3, [r7, #7]

	// copy the lookup table for the next output function in to SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8004e86:	79fc      	ldrb	r4, [r7, #7]
 8004e88:	2000      	movs	r0, #0
 8004e8a:	f000 fa81 	bl	8005390 <SM_GetOutputChannel>
 8004e8e:	4601      	mov	r1, r0
 8004e90:	4a23      	ldr	r2, [pc, #140]	; (8004f20 <FuncO_ApplyPresetToSignal+0xa4>)
 8004e92:	00e3      	lsls	r3, r4, #3
 8004e94:	4413      	add	r3, r2
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	604b      	str	r3, [r1, #4]

	// set preset for PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->amp_setting;
 8004e9a:	2000      	movs	r0, #0
 8004e9c:	f000 fa78 	bl	8005390 <SM_GetOutputChannel>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyPresetToSignal(eTmpVppPreset);
 8004eaa:	7bfb      	ldrb	r3, [r7, #15]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 fb0b 	bl	80054c8 <VPP_ApplyPresetToSignal>

	// set the next function output
	SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8004eb2:	79fc      	ldrb	r4, [r7, #7]
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	f000 fa6b 	bl	8005390 <SM_GetOutputChannel>
 8004eba:	4601      	mov	r1, r0
 8004ebc:	00e3      	lsls	r3, r4, #3
 8004ebe:	4a18      	ldr	r2, [pc, #96]	; (8004f20 <FuncO_ApplyPresetToSignal+0xa4>)
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	// pause timer to resync both outputs
	//OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
	HAL_TIM_Base_Stop(&htim8);
 8004ec6:	4817      	ldr	r0, [pc, #92]	; (8004f24 <FuncO_ApplyPresetToSignal+0xa8>)
 8004ec8:	f007 f8f6 	bl	800c0b8 <HAL_TIM_Base_Stop>

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8004ecc:	2100      	movs	r1, #0
 8004ece:	4816      	ldr	r0, [pc, #88]	; (8004f28 <FuncO_ApplyPresetToSignal+0xac>)
 8004ed0:	f005 f894 	bl	8009ffc <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	f000 fa5b 	bl	8005390 <SM_GetOutputChannel>
 8004eda:	4603      	mov	r3, r0
 8004edc:	f103 0208 	add.w	r2, r3, #8
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	9300      	str	r3, [sp, #0]
 8004ee4:	2378      	movs	r3, #120	; 0x78
 8004ee6:	2100      	movs	r1, #0
 8004ee8:	480f      	ldr	r0, [pc, #60]	; (8004f28 <FuncO_ApplyPresetToSignal+0xac>)
 8004eea:	f004 ffc5 	bl	8009e78 <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8004eee:	2100      	movs	r1, #0
 8004ef0:	480e      	ldr	r0, [pc, #56]	; (8004f2c <FuncO_ApplyPresetToSignal+0xb0>)
 8004ef2:	f005 f883 	bl	8009ffc <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8004ef6:	2001      	movs	r0, #1
 8004ef8:	f000 fa4a 	bl	8005390 <SM_GetOutputChannel>
 8004efc:	4603      	mov	r3, r0
 8004efe:	f103 0208 	add.w	r2, r3, #8
 8004f02:	2300      	movs	r3, #0
 8004f04:	9300      	str	r3, [sp, #0]
 8004f06:	2378      	movs	r3, #120	; 0x78
 8004f08:	2100      	movs	r1, #0
 8004f0a:	4808      	ldr	r0, [pc, #32]	; (8004f2c <FuncO_ApplyPresetToSignal+0xb0>)
 8004f0c:	f004 ffb4 	bl	8009e78 <HAL_DAC_Start_DMA>

	// resume timer to resync both outputs
	HAL_TIM_Base_Start(&htim8);
 8004f10:	4804      	ldr	r0, [pc, #16]	; (8004f24 <FuncO_ApplyPresetToSignal+0xa8>)
 8004f12:	f007 f8a3 	bl	800c05c <HAL_TIM_Base_Start>
	//OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
}
 8004f16:	bf00      	nop
 8004f18:	3714      	adds	r7, #20
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd90      	pop	{r4, r7, pc}
 8004f1e:	bf00      	nop
 8004f20:	200001a0 	.word	0x200001a0
 8004f24:	20002248 	.word	0x20002248
 8004f28:	20002110 	.word	0x20002110
 8004f2c:	200020fc 	.word	0x200020fc

08004f30 <FuncO_ApplyPresetToSync>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSync(eOutput_mode pPresetEnum)
{
 8004f30:	b590      	push	{r4, r7, lr}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af02      	add	r7, sp, #8
 8004f36:	4603      	mov	r3, r0
 8004f38:	71fb      	strb	r3, [r7, #7]
	// copy the lookup table for the next output function in to SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data = theFuncProfiles[pPresetEnum].lookup_table_data;
 8004f3a:	79fc      	ldrb	r4, [r7, #7]
 8004f3c:	2001      	movs	r0, #1
 8004f3e:	f000 fa27 	bl	8005390 <SM_GetOutputChannel>
 8004f42:	4601      	mov	r1, r0
 8004f44:	4a26      	ldr	r2, [pc, #152]	; (8004fe0 <FuncO_ApplyPresetToSync+0xb0>)
 8004f46:	00e3      	lsls	r3, r4, #3
 8004f48:	4413      	add	r3, r2
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	604b      	str	r3, [r1, #4]

	// set preset PGA gain and dsp amplitude adjustment
	eAmpSettings_t eTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile->amp_setting;
 8004f4e:	2001      	movs	r0, #1
 8004f50:	f000 fa1e 	bl	8005390 <SM_GetOutputChannel>
 8004f54:	4603      	mov	r3, r0
 8004f56:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004f5a:	781b      	ldrb	r3, [r3, #0]
 8004f5c:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyPresetToSync(eTmpVppPreset);
 8004f5e:	7bfb      	ldrb	r3, [r7, #15]
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 fadf 	bl	8005524 <VPP_ApplyPresetToSync>

	// set the next output function
	SM_GetOutputChannel(SYNC_CHANNEL)->func_profile = &theFuncProfiles[pPresetEnum];
 8004f66:	79fc      	ldrb	r4, [r7, #7]
 8004f68:	2001      	movs	r0, #1
 8004f6a:	f000 fa11 	bl	8005390 <SM_GetOutputChannel>
 8004f6e:	4601      	mov	r1, r0
 8004f70:	00e3      	lsls	r3, r4, #3
 8004f72:	4a1b      	ldr	r2, [pc, #108]	; (8004fe0 <FuncO_ApplyPresetToSync+0xb0>)
 8004f74:	4413      	add	r3, r2
 8004f76:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	// pause timer to resync both outputs
	//HAL_TIM_Base_Stop(&htim8);
	OUTPUT_TIMER->CR1 &= ~(TIM_CR1_CEN);
 8004f7a:	4b1a      	ldr	r3, [pc, #104]	; (8004fe4 <FuncO_ApplyPresetToSync+0xb4>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a19      	ldr	r2, [pc, #100]	; (8004fe4 <FuncO_ApplyPresetToSync+0xb4>)
 8004f80:	f023 0301 	bic.w	r3, r3, #1
 8004f84:	6013      	str	r3, [r2, #0]

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 8004f86:	2100      	movs	r1, #0
 8004f88:	4817      	ldr	r0, [pc, #92]	; (8004fe8 <FuncO_ApplyPresetToSync+0xb8>)
 8004f8a:	f005 f837 	bl	8009ffc <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8004f8e:	2001      	movs	r0, #1
 8004f90:	f000 f9fe 	bl	8005390 <SM_GetOutputChannel>
 8004f94:	4603      	mov	r3, r0
 8004f96:	f103 0208 	add.w	r2, r3, #8
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	2378      	movs	r3, #120	; 0x78
 8004fa0:	2100      	movs	r1, #0
 8004fa2:	4811      	ldr	r0, [pc, #68]	; (8004fe8 <FuncO_ApplyPresetToSync+0xb8>)
 8004fa4:	f004 ff68 	bl	8009e78 <HAL_DAC_Start_DMA>

	// restart the the other DAC
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8004fa8:	2100      	movs	r1, #0
 8004faa:	4810      	ldr	r0, [pc, #64]	; (8004fec <FuncO_ApplyPresetToSync+0xbc>)
 8004fac:	f005 f826 	bl	8009ffc <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8004fb0:	2000      	movs	r0, #0
 8004fb2:	f000 f9ed 	bl	8005390 <SM_GetOutputChannel>
 8004fb6:	4603      	mov	r3, r0
 8004fb8:	f103 0208 	add.w	r2, r3, #8
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	9300      	str	r3, [sp, #0]
 8004fc0:	2378      	movs	r3, #120	; 0x78
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	4809      	ldr	r0, [pc, #36]	; (8004fec <FuncO_ApplyPresetToSync+0xbc>)
 8004fc6:	f004 ff57 	bl	8009e78 <HAL_DAC_Start_DMA>

	// resume timer to resync both outputs
	//HAL_TIM_Base_Start(&htim8);
	OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 8004fca:	4b06      	ldr	r3, [pc, #24]	; (8004fe4 <FuncO_ApplyPresetToSync+0xb4>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a05      	ldr	r2, [pc, #20]	; (8004fe4 <FuncO_ApplyPresetToSync+0xb4>)
 8004fd0:	f043 0301 	orr.w	r3, r3, #1
 8004fd4:	6013      	str	r3, [r2, #0]
}
 8004fd6:	bf00      	nop
 8004fd8:	3714      	adds	r7, #20
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd90      	pop	{r4, r7, pc}
 8004fde:	bf00      	nop
 8004fe0:	200001a0 	.word	0x200001a0
 8004fe4:	40013400 	.word	0x40013400
 8004fe8:	200020fc 	.word	0x200020fc
 8004fec:	20002110 	.word	0x20002110

08004ff0 <FuncO_GetFuncPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FuncO_GetFuncPresetEncoderRange()
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	af00      	add	r7, sp, #0
	return FuncPresetEncoderRange;
 8004ff4:	4b03      	ldr	r3, [pc, #12]	; (8005004 <FuncO_GetFuncPresetEncoderRange+0x14>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
}
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
 8005002:	bf00      	nop
 8005004:	2000019c 	.word	0x2000019c

08005008 <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eGainSettings_t pPresetEnum)
{
 8005008:	b590      	push	{r4, r7, lr}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	4603      	mov	r3, r0
 8005010:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 8005012:	79fc      	ldrb	r4, [r7, #7]
 8005014:	2000      	movs	r0, #0
 8005016:	f000 f9bb 	bl	8005390 <SM_GetOutputChannel>
 800501a:	4601      	mov	r1, r0
 800501c:	4623      	mov	r3, r4
 800501e:	005b      	lsls	r3, r3, #1
 8005020:	4423      	add	r3, r4
 8005022:	4a4f      	ldr	r2, [pc, #316]	; (8005160 <GO_ApplyPresetToSignal+0x158>)
 8005024:	4413      	add	r3, r2
 8005026:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 800502a:	79fb      	ldrb	r3, [r7, #7]
 800502c:	2b07      	cmp	r3, #7
 800502e:	f200 8093 	bhi.w	8005158 <GO_ApplyPresetToSignal+0x150>
 8005032:	a201      	add	r2, pc, #4	; (adr r2, 8005038 <GO_ApplyPresetToSignal+0x30>)
 8005034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005038:	08005059 	.word	0x08005059
 800503c:	08005079 	.word	0x08005079
 8005040:	08005099 	.word	0x08005099
 8005044:	080050b9 	.word	0x080050b9
 8005048:	080050d9 	.word	0x080050d9
 800504c:	080050f9 	.word	0x080050f9
 8005050:	08005119 	.word	0x08005119
 8005054:	08005139 	.word	0x08005139
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005058:	2200      	movs	r2, #0
 800505a:	2101      	movs	r1, #1
 800505c:	4841      	ldr	r0, [pc, #260]	; (8005164 <GO_ApplyPresetToSignal+0x15c>)
 800505e:	f005 ff03 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005062:	2200      	movs	r2, #0
 8005064:	2120      	movs	r1, #32
 8005066:	4840      	ldr	r0, [pc, #256]	; (8005168 <GO_ApplyPresetToSignal+0x160>)
 8005068:	f005 fefe 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 800506c:	2200      	movs	r2, #0
 800506e:	2110      	movs	r1, #16
 8005070:	483d      	ldr	r0, [pc, #244]	; (8005168 <GO_ApplyPresetToSignal+0x160>)
 8005072:	f005 fef9 	bl	800ae68 <HAL_GPIO_WritePin>
			break;
 8005076:	e06f      	b.n	8005158 <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005078:	2201      	movs	r2, #1
 800507a:	2101      	movs	r1, #1
 800507c:	4839      	ldr	r0, [pc, #228]	; (8005164 <GO_ApplyPresetToSignal+0x15c>)
 800507e:	f005 fef3 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005082:	2200      	movs	r2, #0
 8005084:	2120      	movs	r1, #32
 8005086:	4838      	ldr	r0, [pc, #224]	; (8005168 <GO_ApplyPresetToSignal+0x160>)
 8005088:	f005 feee 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 800508c:	2200      	movs	r2, #0
 800508e:	2110      	movs	r1, #16
 8005090:	4835      	ldr	r0, [pc, #212]	; (8005168 <GO_ApplyPresetToSignal+0x160>)
 8005092:	f005 fee9 	bl	800ae68 <HAL_GPIO_WritePin>
			break;
 8005096:	e05f      	b.n	8005158 <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005098:	2200      	movs	r2, #0
 800509a:	2101      	movs	r1, #1
 800509c:	4831      	ldr	r0, [pc, #196]	; (8005164 <GO_ApplyPresetToSignal+0x15c>)
 800509e:	f005 fee3 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80050a2:	2201      	movs	r2, #1
 80050a4:	2120      	movs	r1, #32
 80050a6:	4830      	ldr	r0, [pc, #192]	; (8005168 <GO_ApplyPresetToSignal+0x160>)
 80050a8:	f005 fede 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80050ac:	2200      	movs	r2, #0
 80050ae:	2110      	movs	r1, #16
 80050b0:	482d      	ldr	r0, [pc, #180]	; (8005168 <GO_ApplyPresetToSignal+0x160>)
 80050b2:	f005 fed9 	bl	800ae68 <HAL_GPIO_WritePin>
			break;
 80050b6:	e04f      	b.n	8005158 <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80050b8:	2201      	movs	r2, #1
 80050ba:	2101      	movs	r1, #1
 80050bc:	4829      	ldr	r0, [pc, #164]	; (8005164 <GO_ApplyPresetToSignal+0x15c>)
 80050be:	f005 fed3 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80050c2:	2201      	movs	r2, #1
 80050c4:	2120      	movs	r1, #32
 80050c6:	4828      	ldr	r0, [pc, #160]	; (8005168 <GO_ApplyPresetToSignal+0x160>)
 80050c8:	f005 fece 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80050cc:	2200      	movs	r2, #0
 80050ce:	2110      	movs	r1, #16
 80050d0:	4825      	ldr	r0, [pc, #148]	; (8005168 <GO_ApplyPresetToSignal+0x160>)
 80050d2:	f005 fec9 	bl	800ae68 <HAL_GPIO_WritePin>
			break;
 80050d6:	e03f      	b.n	8005158 <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80050d8:	2200      	movs	r2, #0
 80050da:	2101      	movs	r1, #1
 80050dc:	4821      	ldr	r0, [pc, #132]	; (8005164 <GO_ApplyPresetToSignal+0x15c>)
 80050de:	f005 fec3 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80050e2:	2200      	movs	r2, #0
 80050e4:	2120      	movs	r1, #32
 80050e6:	4820      	ldr	r0, [pc, #128]	; (8005168 <GO_ApplyPresetToSignal+0x160>)
 80050e8:	f005 febe 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80050ec:	2201      	movs	r2, #1
 80050ee:	2110      	movs	r1, #16
 80050f0:	481d      	ldr	r0, [pc, #116]	; (8005168 <GO_ApplyPresetToSignal+0x160>)
 80050f2:	f005 feb9 	bl	800ae68 <HAL_GPIO_WritePin>
			break;
 80050f6:	e02f      	b.n	8005158 <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80050f8:	2201      	movs	r2, #1
 80050fa:	2101      	movs	r1, #1
 80050fc:	4819      	ldr	r0, [pc, #100]	; (8005164 <GO_ApplyPresetToSignal+0x15c>)
 80050fe:	f005 feb3 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005102:	2200      	movs	r2, #0
 8005104:	2120      	movs	r1, #32
 8005106:	4818      	ldr	r0, [pc, #96]	; (8005168 <GO_ApplyPresetToSignal+0x160>)
 8005108:	f005 feae 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800510c:	2201      	movs	r2, #1
 800510e:	2110      	movs	r1, #16
 8005110:	4815      	ldr	r0, [pc, #84]	; (8005168 <GO_ApplyPresetToSignal+0x160>)
 8005112:	f005 fea9 	bl	800ae68 <HAL_GPIO_WritePin>
			break;
 8005116:	e01f      	b.n	8005158 <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8005118:	2200      	movs	r2, #0
 800511a:	2101      	movs	r1, #1
 800511c:	4811      	ldr	r0, [pc, #68]	; (8005164 <GO_ApplyPresetToSignal+0x15c>)
 800511e:	f005 fea3 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005122:	2201      	movs	r2, #1
 8005124:	2120      	movs	r1, #32
 8005126:	4810      	ldr	r0, [pc, #64]	; (8005168 <GO_ApplyPresetToSignal+0x160>)
 8005128:	f005 fe9e 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800512c:	2201      	movs	r2, #1
 800512e:	2110      	movs	r1, #16
 8005130:	480d      	ldr	r0, [pc, #52]	; (8005168 <GO_ApplyPresetToSignal+0x160>)
 8005132:	f005 fe99 	bl	800ae68 <HAL_GPIO_WritePin>
			break;
 8005136:	e00f      	b.n	8005158 <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8005138:	2201      	movs	r2, #1
 800513a:	2101      	movs	r1, #1
 800513c:	4809      	ldr	r0, [pc, #36]	; (8005164 <GO_ApplyPresetToSignal+0x15c>)
 800513e:	f005 fe93 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005142:	2201      	movs	r2, #1
 8005144:	2120      	movs	r1, #32
 8005146:	4808      	ldr	r0, [pc, #32]	; (8005168 <GO_ApplyPresetToSignal+0x160>)
 8005148:	f005 fe8e 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 800514c:	2201      	movs	r2, #1
 800514e:	2110      	movs	r1, #16
 8005150:	4805      	ldr	r0, [pc, #20]	; (8005168 <GO_ApplyPresetToSignal+0x160>)
 8005152:	f005 fe89 	bl	800ae68 <HAL_GPIO_WritePin>
			break;
 8005156:	bf00      	nop
	}
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	bd90      	pop	{r4, r7, pc}
 8005160:	200001d0 	.word	0x200001d0
 8005164:	48000400 	.word	0x48000400
 8005168:	48000800 	.word	0x48000800

0800516c <GO_ApplyPresetToSync>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSync(eGainSettings_t pPresetEnum)
{
 800516c:	b590      	push	{r4, r7, lr}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	4603      	mov	r3, r0
 8005174:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SYNC_CHANNEL)->gain_profile = &theGainProfiles[pPresetEnum];
 8005176:	79fc      	ldrb	r4, [r7, #7]
 8005178:	2001      	movs	r0, #1
 800517a:	f000 f909 	bl	8005390 <SM_GetOutputChannel>
 800517e:	4601      	mov	r1, r0
 8005180:	4623      	mov	r3, r4
 8005182:	005b      	lsls	r3, r3, #1
 8005184:	4423      	add	r3, r4
 8005186:	4a4f      	ldr	r2, [pc, #316]	; (80052c4 <GO_ApplyPresetToSync+0x158>)
 8005188:	4413      	add	r3, r2
 800518a:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 800518e:	79fb      	ldrb	r3, [r7, #7]
 8005190:	2b07      	cmp	r3, #7
 8005192:	f200 8093 	bhi.w	80052bc <GO_ApplyPresetToSync+0x150>
 8005196:	a201      	add	r2, pc, #4	; (adr r2, 800519c <GO_ApplyPresetToSync+0x30>)
 8005198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519c:	080051bd 	.word	0x080051bd
 80051a0:	080051dd 	.word	0x080051dd
 80051a4:	080051fd 	.word	0x080051fd
 80051a8:	0800521d 	.word	0x0800521d
 80051ac:	0800523d 	.word	0x0800523d
 80051b0:	0800525d 	.word	0x0800525d
 80051b4:	0800527d 	.word	0x0800527d
 80051b8:	0800529d 	.word	0x0800529d
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80051bc:	2200      	movs	r2, #0
 80051be:	2101      	movs	r1, #1
 80051c0:	4841      	ldr	r0, [pc, #260]	; (80052c8 <GO_ApplyPresetToSync+0x15c>)
 80051c2:	f005 fe51 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80051c6:	2200      	movs	r2, #0
 80051c8:	2120      	movs	r1, #32
 80051ca:	4840      	ldr	r0, [pc, #256]	; (80052cc <GO_ApplyPresetToSync+0x160>)
 80051cc:	f005 fe4c 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80051d0:	2200      	movs	r2, #0
 80051d2:	2110      	movs	r1, #16
 80051d4:	483d      	ldr	r0, [pc, #244]	; (80052cc <GO_ApplyPresetToSync+0x160>)
 80051d6:	f005 fe47 	bl	800ae68 <HAL_GPIO_WritePin>
			break;
 80051da:	e06f      	b.n	80052bc <GO_ApplyPresetToSync+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80051dc:	2201      	movs	r2, #1
 80051de:	2101      	movs	r1, #1
 80051e0:	4839      	ldr	r0, [pc, #228]	; (80052c8 <GO_ApplyPresetToSync+0x15c>)
 80051e2:	f005 fe41 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80051e6:	2200      	movs	r2, #0
 80051e8:	2120      	movs	r1, #32
 80051ea:	4838      	ldr	r0, [pc, #224]	; (80052cc <GO_ApplyPresetToSync+0x160>)
 80051ec:	f005 fe3c 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80051f0:	2200      	movs	r2, #0
 80051f2:	2110      	movs	r1, #16
 80051f4:	4835      	ldr	r0, [pc, #212]	; (80052cc <GO_ApplyPresetToSync+0x160>)
 80051f6:	f005 fe37 	bl	800ae68 <HAL_GPIO_WritePin>
			break;
 80051fa:	e05f      	b.n	80052bc <GO_ApplyPresetToSync+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80051fc:	2200      	movs	r2, #0
 80051fe:	2101      	movs	r1, #1
 8005200:	4831      	ldr	r0, [pc, #196]	; (80052c8 <GO_ApplyPresetToSync+0x15c>)
 8005202:	f005 fe31 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005206:	2201      	movs	r2, #1
 8005208:	2120      	movs	r1, #32
 800520a:	4830      	ldr	r0, [pc, #192]	; (80052cc <GO_ApplyPresetToSync+0x160>)
 800520c:	f005 fe2c 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005210:	2200      	movs	r2, #0
 8005212:	2110      	movs	r1, #16
 8005214:	482d      	ldr	r0, [pc, #180]	; (80052cc <GO_ApplyPresetToSync+0x160>)
 8005216:	f005 fe27 	bl	800ae68 <HAL_GPIO_WritePin>
			break;
 800521a:	e04f      	b.n	80052bc <GO_ApplyPresetToSync+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800521c:	2201      	movs	r2, #1
 800521e:	2101      	movs	r1, #1
 8005220:	4829      	ldr	r0, [pc, #164]	; (80052c8 <GO_ApplyPresetToSync+0x15c>)
 8005222:	f005 fe21 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005226:	2201      	movs	r2, #1
 8005228:	2120      	movs	r1, #32
 800522a:	4828      	ldr	r0, [pc, #160]	; (80052cc <GO_ApplyPresetToSync+0x160>)
 800522c:	f005 fe1c 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8005230:	2200      	movs	r2, #0
 8005232:	2110      	movs	r1, #16
 8005234:	4825      	ldr	r0, [pc, #148]	; (80052cc <GO_ApplyPresetToSync+0x160>)
 8005236:	f005 fe17 	bl	800ae68 <HAL_GPIO_WritePin>
			break;
 800523a:	e03f      	b.n	80052bc <GO_ApplyPresetToSync+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 800523c:	2200      	movs	r2, #0
 800523e:	2101      	movs	r1, #1
 8005240:	4821      	ldr	r0, [pc, #132]	; (80052c8 <GO_ApplyPresetToSync+0x15c>)
 8005242:	f005 fe11 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005246:	2200      	movs	r2, #0
 8005248:	2120      	movs	r1, #32
 800524a:	4820      	ldr	r0, [pc, #128]	; (80052cc <GO_ApplyPresetToSync+0x160>)
 800524c:	f005 fe0c 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005250:	2201      	movs	r2, #1
 8005252:	2110      	movs	r1, #16
 8005254:	481d      	ldr	r0, [pc, #116]	; (80052cc <GO_ApplyPresetToSync+0x160>)
 8005256:	f005 fe07 	bl	800ae68 <HAL_GPIO_WritePin>
			break;
 800525a:	e02f      	b.n	80052bc <GO_ApplyPresetToSync+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800525c:	2201      	movs	r2, #1
 800525e:	2101      	movs	r1, #1
 8005260:	4819      	ldr	r0, [pc, #100]	; (80052c8 <GO_ApplyPresetToSync+0x15c>)
 8005262:	f005 fe01 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8005266:	2200      	movs	r2, #0
 8005268:	2120      	movs	r1, #32
 800526a:	4818      	ldr	r0, [pc, #96]	; (80052cc <GO_ApplyPresetToSync+0x160>)
 800526c:	f005 fdfc 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005270:	2201      	movs	r2, #1
 8005272:	2110      	movs	r1, #16
 8005274:	4815      	ldr	r0, [pc, #84]	; (80052cc <GO_ApplyPresetToSync+0x160>)
 8005276:	f005 fdf7 	bl	800ae68 <HAL_GPIO_WritePin>
			break;
 800527a:	e01f      	b.n	80052bc <GO_ApplyPresetToSync+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 800527c:	2200      	movs	r2, #0
 800527e:	2101      	movs	r1, #1
 8005280:	4811      	ldr	r0, [pc, #68]	; (80052c8 <GO_ApplyPresetToSync+0x15c>)
 8005282:	f005 fdf1 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8005286:	2201      	movs	r2, #1
 8005288:	2120      	movs	r1, #32
 800528a:	4810      	ldr	r0, [pc, #64]	; (80052cc <GO_ApplyPresetToSync+0x160>)
 800528c:	f005 fdec 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8005290:	2201      	movs	r2, #1
 8005292:	2110      	movs	r1, #16
 8005294:	480d      	ldr	r0, [pc, #52]	; (80052cc <GO_ApplyPresetToSync+0x160>)
 8005296:	f005 fde7 	bl	800ae68 <HAL_GPIO_WritePin>
			break;
 800529a:	e00f      	b.n	80052bc <GO_ApplyPresetToSync+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800529c:	2201      	movs	r2, #1
 800529e:	2101      	movs	r1, #1
 80052a0:	4809      	ldr	r0, [pc, #36]	; (80052c8 <GO_ApplyPresetToSync+0x15c>)
 80052a2:	f005 fde1 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80052a6:	2201      	movs	r2, #1
 80052a8:	2120      	movs	r1, #32
 80052aa:	4808      	ldr	r0, [pc, #32]	; (80052cc <GO_ApplyPresetToSync+0x160>)
 80052ac:	f005 fddc 	bl	800ae68 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80052b0:	2201      	movs	r2, #1
 80052b2:	2110      	movs	r1, #16
 80052b4:	4805      	ldr	r0, [pc, #20]	; (80052cc <GO_ApplyPresetToSync+0x160>)
 80052b6:	f005 fdd7 	bl	800ae68 <HAL_GPIO_WritePin>
			break;
 80052ba:	bf00      	nop
	}
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd90      	pop	{r4, r7, pc}
 80052c4:	200001d0 	.word	0x200001d0
 80052c8:	48000400 	.word	0x48000400
 80052cc:	48000800 	.word	0x48000800

080052d0 <SM_Init>:
sOutputChannel_t SyncChannel;



void SM_Init()
{
 80052d0:	b480      	push	{r7}
 80052d2:	b083      	sub	sp, #12
 80052d4:	af00      	add	r7, sp, #0

	// initialise the SIGNAL output channel
	SignalChannel.channel = SIGNAL_CHANNEL;
 80052d6:	4b28      	ldr	r3, [pc, #160]	; (8005378 <SM_Init+0xa8>)
 80052d8:	2200      	movs	r2, #0
 80052da:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 80052dc:	4b27      	ldr	r3, [pc, #156]	; (800537c <SM_Init+0xac>)
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	4a25      	ldr	r2, [pc, #148]	; (8005378 <SM_Init+0xa8>)
 80052e2:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 80052e4:	4b24      	ldr	r3, [pc, #144]	; (8005378 <SM_Init+0xa8>)
 80052e6:	4a25      	ldr	r2, [pc, #148]	; (800537c <SM_Init+0xac>)
 80052e8:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80052ec:	2300      	movs	r3, #0
 80052ee:	607b      	str	r3, [r7, #4]
 80052f0:	e00b      	b.n	800530a <SM_Init+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 80052f2:	4a23      	ldr	r2, [pc, #140]	; (8005380 <SM_Init+0xb0>)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80052fa:	491f      	ldr	r1, [pc, #124]	; (8005378 <SM_Init+0xa8>)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	3302      	adds	r3, #2
 8005300:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	3301      	adds	r3, #1
 8005308:	607b      	str	r3, [r7, #4]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b77      	cmp	r3, #119	; 0x77
 800530e:	ddf0      	ble.n	80052f2 <SM_Init+0x22>

	SignalChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 8005310:	4b19      	ldr	r3, [pc, #100]	; (8005378 <SM_Init+0xa8>)
 8005312:	4a1c      	ldr	r2, [pc, #112]	; (8005384 <SM_Init+0xb4>)
 8005314:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8005318:	4b17      	ldr	r3, [pc, #92]	; (8005378 <SM_Init+0xa8>)
 800531a:	4a1b      	ldr	r2, [pc, #108]	; (8005388 <SM_Init+0xb8>)
 800531c:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	// initialise the SYNC output channel
	SyncChannel.channel = SYNC_CHANNEL;
 8005320:	4b1a      	ldr	r3, [pc, #104]	; (800538c <SM_Init+0xbc>)
 8005322:	2201      	movs	r2, #1
 8005324:	701a      	strb	r2, [r3, #0]
	SyncChannel.ref_lut_data = theFuncProfiles[SINE_FUNC_MODE].lookup_table_data;
 8005326:	4b15      	ldr	r3, [pc, #84]	; (800537c <SM_Init+0xac>)
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	4a18      	ldr	r2, [pc, #96]	; (800538c <SM_Init+0xbc>)
 800532c:	6053      	str	r3, [r2, #4]
	SyncChannel.func_profile = &theFuncProfiles[eDefaultFuncPreset];
 800532e:	4b17      	ldr	r3, [pc, #92]	; (800538c <SM_Init+0xbc>)
 8005330:	4a12      	ldr	r2, [pc, #72]	; (800537c <SM_Init+0xac>)
 8005332:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8

	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005336:	2300      	movs	r3, #0
 8005338:	603b      	str	r3, [r7, #0]
 800533a:	e00b      	b.n	8005354 <SM_Init+0x84>
		SyncChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 800533c:	4a10      	ldr	r2, [pc, #64]	; (8005380 <SM_Init+0xb0>)
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005344:	4911      	ldr	r1, [pc, #68]	; (800538c <SM_Init+0xbc>)
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	3302      	adds	r3, #2
 800534a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	3301      	adds	r3, #1
 8005352:	603b      	str	r3, [r7, #0]
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	2b77      	cmp	r3, #119	; 0x77
 8005358:	ddf0      	ble.n	800533c <SM_Init+0x6c>

	SyncChannel.amp_profile = &theAmpProfiles[eDefaultVppPreset];
 800535a:	4b0c      	ldr	r3, [pc, #48]	; (800538c <SM_Init+0xbc>)
 800535c:	4a09      	ldr	r2, [pc, #36]	; (8005384 <SM_Init+0xb4>)
 800535e:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SyncChannel.gain_profile = &theGainProfiles[eDefaultGainPreset];
 8005362:	4b0a      	ldr	r3, [pc, #40]	; (800538c <SM_Init+0xbc>)
 8005364:	4a08      	ldr	r2, [pc, #32]	; (8005388 <SM_Init+0xb8>)
 8005366:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 800536a:	bf00      	nop
 800536c:	370c      	adds	r7, #12
 800536e:	46bd      	mov	sp, r7
 8005370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005374:	4770      	bx	lr
 8005376:	bf00      	nop
 8005378:	20001c38 	.word	0x20001c38
 800537c:	200001a0 	.word	0x200001a0
 8005380:	20001074 	.word	0x20001074
 8005384:	20000ba4 	.word	0x20000ba4
 8005388:	200001d3 	.word	0x200001d3
 800538c:	20001a44 	.word	0x20001a44

08005390 <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	4603      	mov	r3, r0
 8005398:	71fb      	strb	r3, [r7, #7]
	if(!pChannel)
 800539a:	79fb      	ldrb	r3, [r7, #7]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 80053a0:	4b04      	ldr	r3, [pc, #16]	; (80053b4 <SM_GetOutputChannel+0x24>)
 80053a2:	e000      	b.n	80053a6 <SM_GetOutputChannel+0x16>
	else
		return &SyncChannel;
 80053a4:	4b04      	ldr	r3, [pc, #16]	; (80053b8 <SM_GetOutputChannel+0x28>)
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	370c      	adds	r7, #12
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr
 80053b2:	bf00      	nop
 80053b4:	20001c38 	.word	0x20001c38
 80053b8:	20001a44 	.word	0x20001a44

080053bc <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	4603      	mov	r3, r0
 80053c4:	71fb      	strb	r3, [r7, #7]
	if(direction)
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d008      	beq.n	80053de <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 80053cc:	4b08      	ldr	r3, [pc, #32]	; (80053f0 <SM_GetEncoderValue+0x34>)
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	4b07      	ldr	r3, [pc, #28]	; (80053f0 <SM_GetEncoderValue+0x34>)
 80053d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d6:	b29b      	uxth	r3, r3
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	b29b      	uxth	r3, r3
 80053dc:	e002      	b.n	80053e4 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 80053de:	4b04      	ldr	r3, [pc, #16]	; (80053f0 <SM_GetEncoderValue+0x34>)
 80053e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e2:	b29b      	uxth	r3, r3
	}
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr
 80053f0:	40012c00 	.word	0x40012c00

080053f4 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 80053f4:	b480      	push	{r7}
 80053f6:	b085      	sub	sp, #20
 80053f8:	af00      	add	r7, sp, #0
	volatile float output_tm_psc;
	volatile float output_tm_arr;

	// safe-guard against divide by zero
	(OUTPUT_TIMER->PSC == 0) ? (output_tm_psc = 1) : (output_tm_psc = OUTPUT_TIMER->PSC);
 80053fa:	4b1d      	ldr	r3, [pc, #116]	; (8005470 <SM_GetOutputInHertz+0x7c>)
 80053fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d103      	bne.n	800540a <SM_GetOutputInHertz+0x16>
 8005402:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005406:	60bb      	str	r3, [r7, #8]
 8005408:	e007      	b.n	800541a <SM_GetOutputInHertz+0x26>
 800540a:	4b19      	ldr	r3, [pc, #100]	; (8005470 <SM_GetOutputInHertz+0x7c>)
 800540c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800540e:	ee07 3a90 	vmov	s15, r3
 8005412:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005416:	edc7 7a02 	vstr	s15, [r7, #8]
	(OUTPUT_TIMER->ARR == 0) ? (output_tm_arr = 1) : (output_tm_arr = OUTPUT_TIMER->ARR);
 800541a:	4b15      	ldr	r3, [pc, #84]	; (8005470 <SM_GetOutputInHertz+0x7c>)
 800541c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800541e:	2b00      	cmp	r3, #0
 8005420:	d103      	bne.n	800542a <SM_GetOutputInHertz+0x36>
 8005422:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8005426:	607b      	str	r3, [r7, #4]
 8005428:	e007      	b.n	800543a <SM_GetOutputInHertz+0x46>
 800542a:	4b11      	ldr	r3, [pc, #68]	; (8005470 <SM_GetOutputInHertz+0x7c>)
 800542c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800542e:	ee07 3a90 	vmov	s15, r3
 8005432:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005436:	edc7 7a01 	vstr	s15, [r7, #4]

	float output_tm_freq = SM_MCLK / (output_tm_psc * output_tm_arr);
 800543a:	ed97 7a02 	vldr	s14, [r7, #8]
 800543e:	edd7 7a01 	vldr	s15, [r7, #4]
 8005442:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005446:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8005474 <SM_GetOutputInHertz+0x80>
 800544a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800544e:	edc7 7a03 	vstr	s15, [r7, #12]


	return output_tm_freq / SM_FSAMP;
 8005452:	edd7 7a03 	vldr	s15, [r7, #12]
 8005456:	ed9f 7a08 	vldr	s14, [pc, #32]	; 8005478 <SM_GetOutputInHertz+0x84>
 800545a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800545e:	eef0 7a66 	vmov.f32	s15, s13
}
 8005462:	eeb0 0a67 	vmov.f32	s0, s15
 8005466:	3714      	adds	r7, #20
 8005468:	46bd      	mov	sp, r7
 800546a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546e:	4770      	bx	lr
 8005470:	40013400 	.word	0x40013400
 8005474:	4d2037a0 	.word	0x4d2037a0
 8005478:	42f00000 	.word	0x42f00000

0800547c <SM_ConvertPeriodToHertz>:


float SM_ConvertPeriodToHertz(uint32_t period, uint16_t psc)
{
 800547c:	b480      	push	{r7}
 800547e:	b083      	sub	sp, #12
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	460b      	mov	r3, r1
 8005486:	807b      	strh	r3, [r7, #2]
	(psc == 0) ? (psc = 1) : psc;
 8005488:	887b      	ldrh	r3, [r7, #2]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <SM_ConvertPeriodToHertz+0x16>
 800548e:	2301      	movs	r3, #1
 8005490:	807b      	strh	r3, [r7, #2]

	return (float)SM_MCLK / ( (float)psc * (float)period );
 8005492:	887b      	ldrh	r3, [r7, #2]
 8005494:	ee07 3a90 	vmov	s15, r3
 8005498:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	ee07 3a90 	vmov	s15, r3
 80054a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80054a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80054aa:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80054c4 <SM_ConvertPeriodToHertz+0x48>
 80054ae:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80054b2:	eef0 7a66 	vmov.f32	s15, s13
}
 80054b6:	eeb0 0a67 	vmov.f32	s0, s15
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	4d2037a0 	.word	0x4d2037a0

080054c8 <VPP_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyPresetToSignal(eAmpSettings_t pPresetEnum)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b084      	sub	sp, #16
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	4603      	mov	r3, r0
 80054d0:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 80054d2:	79fa      	ldrb	r2, [r7, #7]
 80054d4:	4613      	mov	r3, r2
 80054d6:	00db      	lsls	r3, r3, #3
 80054d8:	1a9b      	subs	r3, r3, r2
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	4a10      	ldr	r2, [pc, #64]	; (8005520 <VPP_ApplyPresetToSignal+0x58>)
 80054de:	4413      	add	r3, r2
 80054e0:	60fb      	str	r3, [r7, #12]

	// Set the new  amp profile to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 80054e2:	2000      	movs	r0, #0
 80054e4:	f7ff ff54 	bl	8005390 <SM_GetOutputChannel>
 80054e8:	4602      	mov	r2, r0
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	7a1b      	ldrb	r3, [r3, #8]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff fd87 	bl	8005008 <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	edd3 7a04 	vldr	s15, [r3, #16]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	ed93 7a05 	vldr	s14, [r3, #20]
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	8b1b      	ldrh	r3, [r3, #24]
 800550a:	4618      	mov	r0, r3
 800550c:	eef0 0a47 	vmov.f32	s1, s14
 8005510:	eeb0 0a67 	vmov.f32	s0, s15
 8005514:	f000 f834 	bl	8005580 <_ProcessSignalDataTable>


}
 8005518:	bf00      	nop
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	200001e8 	.word	0x200001e8

08005524 <VPP_ApplyPresetToSync>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyPresetToSync(eAmpSettings_t pPresetEnum)
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b084      	sub	sp, #16
 8005528:	af00      	add	r7, sp, #0
 800552a:	4603      	mov	r3, r0
 800552c:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &theAmpProfiles[pPresetEnum];
 800552e:	79fa      	ldrb	r2, [r7, #7]
 8005530:	4613      	mov	r3, r2
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	1a9b      	subs	r3, r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4a10      	ldr	r2, [pc, #64]	; (800557c <VPP_ApplyPresetToSync+0x58>)
 800553a:	4413      	add	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile = pNextEncPreset;
 800553e:	2001      	movs	r0, #1
 8005540:	f7ff ff26 	bl	8005390 <SM_GetOutputChannel>
 8005544:	4602      	mov	r2, r0
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	GO_ApplyPresetToSync(pNextEncPreset->gain_preset);
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	7a1b      	ldrb	r3, [r3, #8]
 8005550:	4618      	mov	r0, r3
 8005552:	f7ff fe0b 	bl	800516c <GO_ApplyPresetToSync>

	// Apply the next amplitude setting to the SyncChannel object
	_ProcessSyncDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->amp_offset , pNextEncPreset->epos);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	edd3 7a04 	vldr	s15, [r3, #16]
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	ed93 7a05 	vldr	s14, [r3, #20]
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8b1b      	ldrh	r3, [r3, #24]
 8005566:	4618      	mov	r0, r3
 8005568:	eef0 0a47 	vmov.f32	s1, s14
 800556c:	eeb0 0a67 	vmov.f32	s0, s15
 8005570:	f000 f884 	bl	800567c <_ProcessSyncDataTable>



}
 8005574:	bf00      	nop
 8005576:	3710      	adds	r7, #16
 8005578:	46bd      	mov	sp, r7
 800557a:	bd80      	pop	{r7, pc}
 800557c:	200001e8 	.word	0x200001e8

08005580 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b088      	sub	sp, #32
 8005584:	af00      	add	r7, sp, #0
 8005586:	ed87 0a03 	vstr	s0, [r7, #12]
 800558a:	edc7 0a02 	vstr	s1, [r7, #8]
 800558e:	4603      	mov	r3, r0
 8005590:	80fb      	strh	r3, [r7, #6]
	// copy refer lookup datat table from SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005592:	2300      	movs	r3, #0
 8005594:	61fb      	str	r3, [r7, #28]
 8005596:	e00f      	b.n	80055b8 <_ProcessSignalDataTable+0x38>
	{
		tmpDataTable[i] = SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data[i];
 8005598:	2000      	movs	r0, #0
 800559a:	f7ff fef9 	bl	8005390 <SM_GetOutputChannel>
 800559e:	4603      	mov	r3, r0
 80055a0:	685a      	ldr	r2, [r3, #4]
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	009b      	lsls	r3, r3, #2
 80055a6:	4413      	add	r3, r2
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	4933      	ldr	r1, [pc, #204]	; (8005678 <_ProcessSignalDataTable+0xf8>)
 80055ac:	69fb      	ldr	r3, [r7, #28]
 80055ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80055b2:	69fb      	ldr	r3, [r7, #28]
 80055b4:	3301      	adds	r3, #1
 80055b6:	61fb      	str	r3, [r7, #28]
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	2b77      	cmp	r3, #119	; 0x77
 80055bc:	ddec      	ble.n	8005598 <_ProcessSignalDataTable+0x18>
	}

	// calculate positive offset coefficient from encoder position
	float pos_offset_coeff = 1;
 80055be:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80055c2:	61bb      	str	r3, [r7, #24]
	if(_encoder_value)
 80055c4:	88fb      	ldrh	r3, [r7, #6]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d008      	beq.n	80055dc <_ProcessSignalDataTable+0x5c>
	{
		pos_offset_coeff = (_encoder_value/4);
 80055ca:	88fb      	ldrh	r3, [r7, #6]
 80055cc:	089b      	lsrs	r3, r3, #2
 80055ce:	b29b      	uxth	r3, r3
 80055d0:	ee07 3a90 	vmov	s15, r3
 80055d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055d8:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	// adjust amplitude and offset of lookup table copy
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80055dc:	2300      	movs	r3, #0
 80055de:	617b      	str	r3, [r7, #20]
 80055e0:	e02e      	b.n	8005640 <_ProcessSignalDataTable+0xc0>
	{
		tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 80055e2:	4a25      	ldr	r2, [pc, #148]	; (8005678 <_ProcessSignalDataTable+0xf8>)
 80055e4:	697b      	ldr	r3, [r7, #20]
 80055e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ea:	ee07 3a90 	vmov	s15, r3
 80055ee:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80055f2:	edd7 7a03 	vldr	s15, [r7, #12]
 80055f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80055fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80055fe:	ee17 1a90 	vmov	r1, s15
 8005602:	4a1d      	ldr	r2, [pc, #116]	; (8005678 <_ProcessSignalDataTable+0xf8>)
 8005604:	697b      	ldr	r3, [r7, #20]
 8005606:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 800560a:	4a1b      	ldr	r2, [pc, #108]	; (8005678 <_ProcessSignalDataTable+0xf8>)
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005612:	ee07 3a90 	vmov	s15, r3
 8005616:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800561a:	edd7 7a06 	vldr	s15, [r7, #24]
 800561e:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8005622:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005626:	ee77 7a27 	vadd.f32	s15, s14, s15
 800562a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800562e:	ee17 1a90 	vmov	r1, s15
 8005632:	4a11      	ldr	r2, [pc, #68]	; (8005678 <_ProcessSignalDataTable+0xf8>)
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	3301      	adds	r3, #1
 800563e:	617b      	str	r3, [r7, #20]
 8005640:	697b      	ldr	r3, [r7, #20]
 8005642:	2b77      	cmp	r3, #119	; 0x77
 8005644:	ddcd      	ble.n	80055e2 <_ProcessSignalDataTable+0x62>
	}

	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005646:	2300      	movs	r3, #0
 8005648:	613b      	str	r3, [r7, #16]
 800564a:	e00e      	b.n	800566a <_ProcessSignalDataTable+0xea>
	{
		SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 800564c:	2000      	movs	r0, #0
 800564e:	f7ff fe9f 	bl	8005390 <SM_GetOutputChannel>
 8005652:	4601      	mov	r1, r0
 8005654:	4a08      	ldr	r2, [pc, #32]	; (8005678 <_ProcessSignalDataTable+0xf8>)
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	3302      	adds	r3, #2
 8005660:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	3301      	adds	r3, #1
 8005668:	613b      	str	r3, [r7, #16]
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	2b77      	cmp	r3, #119	; 0x77
 800566e:	dded      	ble.n	800564c <_ProcessSignalDataTable+0xcc>
	}
}
 8005670:	bf00      	nop
 8005672:	3720      	adds	r7, #32
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}
 8005678:	20001e2c 	.word	0x20001e2c

0800567c <_ProcessSyncDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSyncDataTable(float _neg_gain_coeff, float amp_offset, uint16_t _encoder_value)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b088      	sub	sp, #32
 8005680:	af00      	add	r7, sp, #0
 8005682:	ed87 0a03 	vstr	s0, [r7, #12]
 8005686:	edc7 0a02 	vstr	s1, [r7, #8]
 800568a:	4603      	mov	r3, r0
 800568c:	80fb      	strh	r3, [r7, #6]
	// copy refer lookup datat table from SyncChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800568e:	2300      	movs	r3, #0
 8005690:	61fb      	str	r3, [r7, #28]
 8005692:	e00f      	b.n	80056b4 <_ProcessSyncDataTable+0x38>
	{
		tmpDataTable[i] = SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data[i];
 8005694:	2001      	movs	r0, #1
 8005696:	f7ff fe7b 	bl	8005390 <SM_GetOutputChannel>
 800569a:	4603      	mov	r3, r0
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	4413      	add	r3, r2
 80056a4:	681a      	ldr	r2, [r3, #0]
 80056a6:	4933      	ldr	r1, [pc, #204]	; (8005774 <_ProcessSyncDataTable+0xf8>)
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	3301      	adds	r3, #1
 80056b2:	61fb      	str	r3, [r7, #28]
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	2b77      	cmp	r3, #119	; 0x77
 80056b8:	ddec      	ble.n	8005694 <_ProcessSyncDataTable+0x18>
	}

	// calculate positive offset coefficient from encoder position
	float pos_offset_coeff = 1;
 80056ba:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80056be:	61bb      	str	r3, [r7, #24]
	if(_encoder_value)
 80056c0:	88fb      	ldrh	r3, [r7, #6]
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d008      	beq.n	80056d8 <_ProcessSyncDataTable+0x5c>
	{
		pos_offset_coeff = (_encoder_value/4);
 80056c6:	88fb      	ldrh	r3, [r7, #6]
 80056c8:	089b      	lsrs	r3, r3, #2
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	ee07 3a90 	vmov	s15, r3
 80056d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056d4:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	// adjust amplitude and offset of lookup table copy
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80056d8:	2300      	movs	r3, #0
 80056da:	617b      	str	r3, [r7, #20]
 80056dc:	e02e      	b.n	800573c <_ProcessSyncDataTable+0xc0>
	{

		tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 80056de:	4a25      	ldr	r2, [pc, #148]	; (8005774 <_ProcessSyncDataTable+0xf8>)
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056e6:	ee07 3a90 	vmov	s15, r3
 80056ea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80056ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80056f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80056f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80056fa:	ee17 1a90 	vmov	r1, s15
 80056fe:	4a1d      	ldr	r2, [pc, #116]	; (8005774 <_ProcessSyncDataTable+0xf8>)
 8005700:	697b      	ldr	r3, [r7, #20]
 8005702:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		tmpDataTable[i] = tmpDataTable[i] + (AMP_OFFSET * pos_offset_coeff);
 8005706:	4a1b      	ldr	r2, [pc, #108]	; (8005774 <_ProcessSyncDataTable+0xf8>)
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800570e:	ee07 3a90 	vmov	s15, r3
 8005712:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005716:	edd7 7a06 	vldr	s15, [r7, #24]
 800571a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 800571e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005722:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005726:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800572a:	ee17 1a90 	vmov	r1, s15
 800572e:	4a11      	ldr	r2, [pc, #68]	; (8005774 <_ProcessSyncDataTable+0xf8>)
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	3301      	adds	r3, #1
 800573a:	617b      	str	r3, [r7, #20]
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	2b77      	cmp	r3, #119	; 0x77
 8005740:	ddcd      	ble.n	80056de <_ProcessSyncDataTable+0x62>
	}

	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005742:	2300      	movs	r3, #0
 8005744:	613b      	str	r3, [r7, #16]
 8005746:	e00e      	b.n	8005766 <_ProcessSyncDataTable+0xea>
	{
		SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8005748:	2001      	movs	r0, #1
 800574a:	f7ff fe21 	bl	8005390 <SM_GetOutputChannel>
 800574e:	4601      	mov	r1, r0
 8005750:	4a08      	ldr	r2, [pc, #32]	; (8005774 <_ProcessSyncDataTable+0xf8>)
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005758:	693b      	ldr	r3, [r7, #16]
 800575a:	3302      	adds	r3, #2
 800575c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	3301      	adds	r3, #1
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	2b77      	cmp	r3, #119	; 0x77
 800576a:	dded      	ble.n	8005748 <_ProcessSyncDataTable+0xcc>
	}
}
 800576c:	bf00      	nop
 800576e:	3720      	adds	r7, #32
 8005770:	46bd      	mov	sp, r7
 8005772:	bd80      	pop	{r7, pc}
 8005774:	20001e2c 	.word	0x20001e2c

08005778 <VPP_ModifySignalOutput>:

 *	@retval None
 *
 */
void VPP_ModifySignalOutput(uint16_t pEncoderValue)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	4603      	mov	r3, r0
 8005780:	80fb      	strh	r3, [r7, #6]
	switch(pEncoderValue)
 8005782:	88fb      	ldrh	r3, [r7, #6]
 8005784:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8005788:	f200 849a 	bhi.w	80060c0 <VPP_ModifySignalOutput+0x948>
 800578c:	a201      	add	r2, pc, #4	; (adr r2, 8005794 <VPP_ModifySignalOutput+0x1c>)
 800578e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005792:	bf00      	nop
 8005794:	08005db1 	.word	0x08005db1
 8005798:	08005db1 	.word	0x08005db1
 800579c:	08005db1 	.word	0x08005db1
 80057a0:	08005db9 	.word	0x08005db9
 80057a4:	08005db9 	.word	0x08005db9
 80057a8:	08005db9 	.word	0x08005db9
 80057ac:	08005db9 	.word	0x08005db9
 80057b0:	08005dc1 	.word	0x08005dc1
 80057b4:	08005dc1 	.word	0x08005dc1
 80057b8:	08005dc1 	.word	0x08005dc1
 80057bc:	08005dc1 	.word	0x08005dc1
 80057c0:	08005dc9 	.word	0x08005dc9
 80057c4:	08005dc9 	.word	0x08005dc9
 80057c8:	08005dc9 	.word	0x08005dc9
 80057cc:	08005dc9 	.word	0x08005dc9
 80057d0:	08005dd1 	.word	0x08005dd1
 80057d4:	08005dd1 	.word	0x08005dd1
 80057d8:	08005dd1 	.word	0x08005dd1
 80057dc:	08005dd1 	.word	0x08005dd1
 80057e0:	08005dd9 	.word	0x08005dd9
 80057e4:	08005dd9 	.word	0x08005dd9
 80057e8:	08005dd9 	.word	0x08005dd9
 80057ec:	08005dd9 	.word	0x08005dd9
 80057f0:	08005de1 	.word	0x08005de1
 80057f4:	08005de1 	.word	0x08005de1
 80057f8:	08005de1 	.word	0x08005de1
 80057fc:	08005de1 	.word	0x08005de1
 8005800:	08005de9 	.word	0x08005de9
 8005804:	08005de9 	.word	0x08005de9
 8005808:	08005de9 	.word	0x08005de9
 800580c:	08005de9 	.word	0x08005de9
 8005810:	08005df1 	.word	0x08005df1
 8005814:	08005df1 	.word	0x08005df1
 8005818:	08005df1 	.word	0x08005df1
 800581c:	08005df1 	.word	0x08005df1
 8005820:	08005df9 	.word	0x08005df9
 8005824:	08005df9 	.word	0x08005df9
 8005828:	08005df9 	.word	0x08005df9
 800582c:	08005df9 	.word	0x08005df9
 8005830:	08005e01 	.word	0x08005e01
 8005834:	08005e01 	.word	0x08005e01
 8005838:	08005e01 	.word	0x08005e01
 800583c:	08005e01 	.word	0x08005e01
 8005840:	08005e09 	.word	0x08005e09
 8005844:	08005e09 	.word	0x08005e09
 8005848:	08005e09 	.word	0x08005e09
 800584c:	08005e09 	.word	0x08005e09
 8005850:	08005e11 	.word	0x08005e11
 8005854:	08005e11 	.word	0x08005e11
 8005858:	08005e11 	.word	0x08005e11
 800585c:	08005e11 	.word	0x08005e11
 8005860:	08005e19 	.word	0x08005e19
 8005864:	08005e19 	.word	0x08005e19
 8005868:	08005e19 	.word	0x08005e19
 800586c:	08005e19 	.word	0x08005e19
 8005870:	08005e21 	.word	0x08005e21
 8005874:	08005e21 	.word	0x08005e21
 8005878:	08005e21 	.word	0x08005e21
 800587c:	08005e21 	.word	0x08005e21
 8005880:	08005e29 	.word	0x08005e29
 8005884:	08005e29 	.word	0x08005e29
 8005888:	08005e29 	.word	0x08005e29
 800588c:	08005e29 	.word	0x08005e29
 8005890:	08005e31 	.word	0x08005e31
 8005894:	08005e31 	.word	0x08005e31
 8005898:	08005e31 	.word	0x08005e31
 800589c:	08005e31 	.word	0x08005e31
 80058a0:	08005e39 	.word	0x08005e39
 80058a4:	08005e39 	.word	0x08005e39
 80058a8:	08005e39 	.word	0x08005e39
 80058ac:	08005e39 	.word	0x08005e39
 80058b0:	08005e41 	.word	0x08005e41
 80058b4:	08005e41 	.word	0x08005e41
 80058b8:	08005e41 	.word	0x08005e41
 80058bc:	08005e41 	.word	0x08005e41
 80058c0:	08005e49 	.word	0x08005e49
 80058c4:	08005e49 	.word	0x08005e49
 80058c8:	08005e49 	.word	0x08005e49
 80058cc:	08005e49 	.word	0x08005e49
 80058d0:	08005e51 	.word	0x08005e51
 80058d4:	08005e51 	.word	0x08005e51
 80058d8:	08005e51 	.word	0x08005e51
 80058dc:	08005e51 	.word	0x08005e51
 80058e0:	08005e59 	.word	0x08005e59
 80058e4:	08005e59 	.word	0x08005e59
 80058e8:	08005e59 	.word	0x08005e59
 80058ec:	08005e59 	.word	0x08005e59
 80058f0:	08005e61 	.word	0x08005e61
 80058f4:	08005e61 	.word	0x08005e61
 80058f8:	08005e61 	.word	0x08005e61
 80058fc:	08005e61 	.word	0x08005e61
 8005900:	08005e69 	.word	0x08005e69
 8005904:	08005e69 	.word	0x08005e69
 8005908:	08005e69 	.word	0x08005e69
 800590c:	08005e69 	.word	0x08005e69
 8005910:	08005e71 	.word	0x08005e71
 8005914:	08005e71 	.word	0x08005e71
 8005918:	08005e71 	.word	0x08005e71
 800591c:	08005e71 	.word	0x08005e71
 8005920:	08005e79 	.word	0x08005e79
 8005924:	08005e79 	.word	0x08005e79
 8005928:	08005e79 	.word	0x08005e79
 800592c:	08005e79 	.word	0x08005e79
 8005930:	08005e81 	.word	0x08005e81
 8005934:	08005e81 	.word	0x08005e81
 8005938:	08005e81 	.word	0x08005e81
 800593c:	08005e81 	.word	0x08005e81
 8005940:	08005e89 	.word	0x08005e89
 8005944:	08005e89 	.word	0x08005e89
 8005948:	08005e89 	.word	0x08005e89
 800594c:	08005e89 	.word	0x08005e89
 8005950:	08005e91 	.word	0x08005e91
 8005954:	08005e91 	.word	0x08005e91
 8005958:	08005e91 	.word	0x08005e91
 800595c:	08005e91 	.word	0x08005e91
 8005960:	08005e99 	.word	0x08005e99
 8005964:	08005e99 	.word	0x08005e99
 8005968:	08005e99 	.word	0x08005e99
 800596c:	08005e99 	.word	0x08005e99
 8005970:	08005ea1 	.word	0x08005ea1
 8005974:	08005ea1 	.word	0x08005ea1
 8005978:	08005ea1 	.word	0x08005ea1
 800597c:	08005ea1 	.word	0x08005ea1
 8005980:	08005ea9 	.word	0x08005ea9
 8005984:	08005ea9 	.word	0x08005ea9
 8005988:	08005ea9 	.word	0x08005ea9
 800598c:	08005ea9 	.word	0x08005ea9
 8005990:	08005eb1 	.word	0x08005eb1
 8005994:	08005eb1 	.word	0x08005eb1
 8005998:	08005eb1 	.word	0x08005eb1
 800599c:	08005eb1 	.word	0x08005eb1
 80059a0:	08005eb9 	.word	0x08005eb9
 80059a4:	08005eb9 	.word	0x08005eb9
 80059a8:	08005eb9 	.word	0x08005eb9
 80059ac:	08005eb9 	.word	0x08005eb9
 80059b0:	08005ec1 	.word	0x08005ec1
 80059b4:	08005ec1 	.word	0x08005ec1
 80059b8:	08005ec1 	.word	0x08005ec1
 80059bc:	08005ec1 	.word	0x08005ec1
 80059c0:	08005ec9 	.word	0x08005ec9
 80059c4:	08005ec9 	.word	0x08005ec9
 80059c8:	08005ec9 	.word	0x08005ec9
 80059cc:	08005ec9 	.word	0x08005ec9
 80059d0:	08005ed1 	.word	0x08005ed1
 80059d4:	08005ed1 	.word	0x08005ed1
 80059d8:	08005ed1 	.word	0x08005ed1
 80059dc:	08005ed1 	.word	0x08005ed1
 80059e0:	08005ed9 	.word	0x08005ed9
 80059e4:	08005ed9 	.word	0x08005ed9
 80059e8:	08005ed9 	.word	0x08005ed9
 80059ec:	08005ed9 	.word	0x08005ed9
 80059f0:	08005ee1 	.word	0x08005ee1
 80059f4:	08005ee1 	.word	0x08005ee1
 80059f8:	08005ee1 	.word	0x08005ee1
 80059fc:	08005ee1 	.word	0x08005ee1
 8005a00:	08005ee9 	.word	0x08005ee9
 8005a04:	08005ee9 	.word	0x08005ee9
 8005a08:	08005ee9 	.word	0x08005ee9
 8005a0c:	08005ee9 	.word	0x08005ee9
 8005a10:	08005ef1 	.word	0x08005ef1
 8005a14:	08005ef1 	.word	0x08005ef1
 8005a18:	08005ef1 	.word	0x08005ef1
 8005a1c:	08005ef1 	.word	0x08005ef1
 8005a20:	08005ef9 	.word	0x08005ef9
 8005a24:	08005ef9 	.word	0x08005ef9
 8005a28:	08005ef9 	.word	0x08005ef9
 8005a2c:	08005ef9 	.word	0x08005ef9
 8005a30:	08005f01 	.word	0x08005f01
 8005a34:	08005f01 	.word	0x08005f01
 8005a38:	08005f01 	.word	0x08005f01
 8005a3c:	08005f01 	.word	0x08005f01
 8005a40:	08005f09 	.word	0x08005f09
 8005a44:	08005f09 	.word	0x08005f09
 8005a48:	08005f09 	.word	0x08005f09
 8005a4c:	08005f09 	.word	0x08005f09
 8005a50:	08005f11 	.word	0x08005f11
 8005a54:	08005f11 	.word	0x08005f11
 8005a58:	08005f11 	.word	0x08005f11
 8005a5c:	08005f11 	.word	0x08005f11
 8005a60:	08005f19 	.word	0x08005f19
 8005a64:	08005f19 	.word	0x08005f19
 8005a68:	08005f19 	.word	0x08005f19
 8005a6c:	08005f19 	.word	0x08005f19
 8005a70:	08005f21 	.word	0x08005f21
 8005a74:	08005f21 	.word	0x08005f21
 8005a78:	08005f21 	.word	0x08005f21
 8005a7c:	08005f21 	.word	0x08005f21
 8005a80:	08005f29 	.word	0x08005f29
 8005a84:	08005f29 	.word	0x08005f29
 8005a88:	08005f29 	.word	0x08005f29
 8005a8c:	08005f29 	.word	0x08005f29
 8005a90:	08005f31 	.word	0x08005f31
 8005a94:	08005f31 	.word	0x08005f31
 8005a98:	08005f31 	.word	0x08005f31
 8005a9c:	08005f31 	.word	0x08005f31
 8005aa0:	08005f39 	.word	0x08005f39
 8005aa4:	08005f39 	.word	0x08005f39
 8005aa8:	08005f39 	.word	0x08005f39
 8005aac:	08005f39 	.word	0x08005f39
 8005ab0:	08005f41 	.word	0x08005f41
 8005ab4:	08005f41 	.word	0x08005f41
 8005ab8:	08005f41 	.word	0x08005f41
 8005abc:	08005f41 	.word	0x08005f41
 8005ac0:	08005f49 	.word	0x08005f49
 8005ac4:	08005f49 	.word	0x08005f49
 8005ac8:	08005f49 	.word	0x08005f49
 8005acc:	08005f49 	.word	0x08005f49
 8005ad0:	08005f51 	.word	0x08005f51
 8005ad4:	08005f51 	.word	0x08005f51
 8005ad8:	08005f51 	.word	0x08005f51
 8005adc:	08005f51 	.word	0x08005f51
 8005ae0:	08005f59 	.word	0x08005f59
 8005ae4:	08005f59 	.word	0x08005f59
 8005ae8:	08005f59 	.word	0x08005f59
 8005aec:	08005f59 	.word	0x08005f59
 8005af0:	08005f61 	.word	0x08005f61
 8005af4:	08005f61 	.word	0x08005f61
 8005af8:	08005f61 	.word	0x08005f61
 8005afc:	08005f61 	.word	0x08005f61
 8005b00:	08005f69 	.word	0x08005f69
 8005b04:	08005f69 	.word	0x08005f69
 8005b08:	08005f69 	.word	0x08005f69
 8005b0c:	08005f69 	.word	0x08005f69
 8005b10:	08005f71 	.word	0x08005f71
 8005b14:	08005f71 	.word	0x08005f71
 8005b18:	08005f71 	.word	0x08005f71
 8005b1c:	08005f71 	.word	0x08005f71
 8005b20:	08005f79 	.word	0x08005f79
 8005b24:	08005f79 	.word	0x08005f79
 8005b28:	08005f79 	.word	0x08005f79
 8005b2c:	08005f79 	.word	0x08005f79
 8005b30:	08005f81 	.word	0x08005f81
 8005b34:	08005f81 	.word	0x08005f81
 8005b38:	08005f81 	.word	0x08005f81
 8005b3c:	08005f81 	.word	0x08005f81
 8005b40:	08005f89 	.word	0x08005f89
 8005b44:	08005f89 	.word	0x08005f89
 8005b48:	08005f89 	.word	0x08005f89
 8005b4c:	08005f89 	.word	0x08005f89
 8005b50:	08005f91 	.word	0x08005f91
 8005b54:	08005f91 	.word	0x08005f91
 8005b58:	08005f91 	.word	0x08005f91
 8005b5c:	08005f91 	.word	0x08005f91
 8005b60:	08005f99 	.word	0x08005f99
 8005b64:	08005f99 	.word	0x08005f99
 8005b68:	08005f99 	.word	0x08005f99
 8005b6c:	08005f99 	.word	0x08005f99
 8005b70:	08005fa1 	.word	0x08005fa1
 8005b74:	08005fa1 	.word	0x08005fa1
 8005b78:	08005fa1 	.word	0x08005fa1
 8005b7c:	08005fa1 	.word	0x08005fa1
 8005b80:	08005fa9 	.word	0x08005fa9
 8005b84:	08005fa9 	.word	0x08005fa9
 8005b88:	08005fa9 	.word	0x08005fa9
 8005b8c:	08005fa9 	.word	0x08005fa9
 8005b90:	08005fb1 	.word	0x08005fb1
 8005b94:	08005fb1 	.word	0x08005fb1
 8005b98:	08005fb1 	.word	0x08005fb1
 8005b9c:	08005fb1 	.word	0x08005fb1
 8005ba0:	08005fb9 	.word	0x08005fb9
 8005ba4:	08005fb9 	.word	0x08005fb9
 8005ba8:	08005fb9 	.word	0x08005fb9
 8005bac:	08005fb9 	.word	0x08005fb9
 8005bb0:	08005fc1 	.word	0x08005fc1
 8005bb4:	08005fc1 	.word	0x08005fc1
 8005bb8:	08005fc1 	.word	0x08005fc1
 8005bbc:	08005fc1 	.word	0x08005fc1
 8005bc0:	08005fc9 	.word	0x08005fc9
 8005bc4:	08005fc9 	.word	0x08005fc9
 8005bc8:	08005fc9 	.word	0x08005fc9
 8005bcc:	08005fc9 	.word	0x08005fc9
 8005bd0:	08005fd1 	.word	0x08005fd1
 8005bd4:	08005fd1 	.word	0x08005fd1
 8005bd8:	08005fd1 	.word	0x08005fd1
 8005bdc:	08005fd1 	.word	0x08005fd1
 8005be0:	08005fd9 	.word	0x08005fd9
 8005be4:	08005fd9 	.word	0x08005fd9
 8005be8:	08005fd9 	.word	0x08005fd9
 8005bec:	08005fd9 	.word	0x08005fd9
 8005bf0:	08005fe1 	.word	0x08005fe1
 8005bf4:	08005fe1 	.word	0x08005fe1
 8005bf8:	08005fe1 	.word	0x08005fe1
 8005bfc:	08005fe1 	.word	0x08005fe1
 8005c00:	08005fe9 	.word	0x08005fe9
 8005c04:	08005fe9 	.word	0x08005fe9
 8005c08:	08005fe9 	.word	0x08005fe9
 8005c0c:	08005fe9 	.word	0x08005fe9
 8005c10:	08005ff1 	.word	0x08005ff1
 8005c14:	08005ff1 	.word	0x08005ff1
 8005c18:	08005ff1 	.word	0x08005ff1
 8005c1c:	08005ff1 	.word	0x08005ff1
 8005c20:	08005ff9 	.word	0x08005ff9
 8005c24:	08005ff9 	.word	0x08005ff9
 8005c28:	08005ff9 	.word	0x08005ff9
 8005c2c:	08005ff9 	.word	0x08005ff9
 8005c30:	08006001 	.word	0x08006001
 8005c34:	08006001 	.word	0x08006001
 8005c38:	08006001 	.word	0x08006001
 8005c3c:	08006001 	.word	0x08006001
 8005c40:	08006009 	.word	0x08006009
 8005c44:	08006009 	.word	0x08006009
 8005c48:	08006009 	.word	0x08006009
 8005c4c:	08006009 	.word	0x08006009
 8005c50:	08006011 	.word	0x08006011
 8005c54:	08006011 	.word	0x08006011
 8005c58:	08006011 	.word	0x08006011
 8005c5c:	08006011 	.word	0x08006011
 8005c60:	08006019 	.word	0x08006019
 8005c64:	08006019 	.word	0x08006019
 8005c68:	08006019 	.word	0x08006019
 8005c6c:	08006019 	.word	0x08006019
 8005c70:	08006021 	.word	0x08006021
 8005c74:	08006021 	.word	0x08006021
 8005c78:	08006021 	.word	0x08006021
 8005c7c:	08006021 	.word	0x08006021
 8005c80:	08006029 	.word	0x08006029
 8005c84:	08006029 	.word	0x08006029
 8005c88:	08006029 	.word	0x08006029
 8005c8c:	08006029 	.word	0x08006029
 8005c90:	08006031 	.word	0x08006031
 8005c94:	08006031 	.word	0x08006031
 8005c98:	08006031 	.word	0x08006031
 8005c9c:	08006031 	.word	0x08006031
 8005ca0:	08006039 	.word	0x08006039
 8005ca4:	08006039 	.word	0x08006039
 8005ca8:	08006039 	.word	0x08006039
 8005cac:	08006039 	.word	0x08006039
 8005cb0:	08006041 	.word	0x08006041
 8005cb4:	08006041 	.word	0x08006041
 8005cb8:	08006041 	.word	0x08006041
 8005cbc:	08006041 	.word	0x08006041
 8005cc0:	08006049 	.word	0x08006049
 8005cc4:	08006049 	.word	0x08006049
 8005cc8:	08006049 	.word	0x08006049
 8005ccc:	08006049 	.word	0x08006049
 8005cd0:	08006051 	.word	0x08006051
 8005cd4:	08006051 	.word	0x08006051
 8005cd8:	08006051 	.word	0x08006051
 8005cdc:	08006051 	.word	0x08006051
 8005ce0:	08006059 	.word	0x08006059
 8005ce4:	08006059 	.word	0x08006059
 8005ce8:	08006059 	.word	0x08006059
 8005cec:	08006059 	.word	0x08006059
 8005cf0:	08006061 	.word	0x08006061
 8005cf4:	08006061 	.word	0x08006061
 8005cf8:	08006061 	.word	0x08006061
 8005cfc:	08006061 	.word	0x08006061
 8005d00:	08006069 	.word	0x08006069
 8005d04:	08006069 	.word	0x08006069
 8005d08:	08006069 	.word	0x08006069
 8005d0c:	08006069 	.word	0x08006069
 8005d10:	08006071 	.word	0x08006071
 8005d14:	08006071 	.word	0x08006071
 8005d18:	08006071 	.word	0x08006071
 8005d1c:	08006071 	.word	0x08006071
 8005d20:	08006079 	.word	0x08006079
 8005d24:	08006079 	.word	0x08006079
 8005d28:	08006079 	.word	0x08006079
 8005d2c:	08006079 	.word	0x08006079
 8005d30:	08006081 	.word	0x08006081
 8005d34:	08006081 	.word	0x08006081
 8005d38:	08006081 	.word	0x08006081
 8005d3c:	08006081 	.word	0x08006081
 8005d40:	08006089 	.word	0x08006089
 8005d44:	08006089 	.word	0x08006089
 8005d48:	08006089 	.word	0x08006089
 8005d4c:	08006089 	.word	0x08006089
 8005d50:	08006091 	.word	0x08006091
 8005d54:	08006091 	.word	0x08006091
 8005d58:	08006091 	.word	0x08006091
 8005d5c:	08006091 	.word	0x08006091
 8005d60:	08006099 	.word	0x08006099
 8005d64:	08006099 	.word	0x08006099
 8005d68:	08006099 	.word	0x08006099
 8005d6c:	08006099 	.word	0x08006099
 8005d70:	080060a1 	.word	0x080060a1
 8005d74:	080060a1 	.word	0x080060a1
 8005d78:	080060a1 	.word	0x080060a1
 8005d7c:	080060a1 	.word	0x080060a1
 8005d80:	080060a9 	.word	0x080060a9
 8005d84:	080060a9 	.word	0x080060a9
 8005d88:	080060a9 	.word	0x080060a9
 8005d8c:	080060a9 	.word	0x080060a9
 8005d90:	080060b1 	.word	0x080060b1
 8005d94:	080060b1 	.word	0x080060b1
 8005d98:	080060b1 	.word	0x080060b1
 8005d9c:	080060b1 	.word	0x080060b1
 8005da0:	080060b9 	.word	0x080060b9
 8005da4:	080060b9 	.word	0x080060b9
 8005da8:	080060b9 	.word	0x080060b9
 8005dac:	080060b9 	.word	0x080060b9
	{
		case 0	:
		case 1	:
		case 2	:
			VPP_ApplyPresetToSignal( VPP01 );
 8005db0:	2000      	movs	r0, #0
 8005db2:	f7ff fb89 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005db6:	e184      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 3	:
		case 4	:
		case 5	:
		case 6	:
			VPP_ApplyPresetToSignal( VPP02	);
 8005db8:	2001      	movs	r0, #1
 8005dba:	f7ff fb85 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005dbe:	e180      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 7	:
		case 8	:
		case 9	:
		case 10	:
			VPP_ApplyPresetToSignal( VPP03	);
 8005dc0:	2002      	movs	r0, #2
 8005dc2:	f7ff fb81 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005dc6:	e17c      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 11	:
		case 12	:
		case 13	:
		case 14	:
			VPP_ApplyPresetToSignal( VPP04	);
 8005dc8:	2003      	movs	r0, #3
 8005dca:	f7ff fb7d 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005dce:	e178      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 15	:
		case 16	:
		case 17	:
		case 18	:
			VPP_ApplyPresetToSignal( VPP05	);
 8005dd0:	2004      	movs	r0, #4
 8005dd2:	f7ff fb79 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005dd6:	e174      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 19	:
		case 20	:
		case 21	:
		case 22	:
			VPP_ApplyPresetToSignal( VPP06	);
 8005dd8:	2005      	movs	r0, #5
 8005dda:	f7ff fb75 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005dde:	e170      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 23	:
		case 24	:
		case 25	:
		case 26	:
			VPP_ApplyPresetToSignal( VPP07	);
 8005de0:	2006      	movs	r0, #6
 8005de2:	f7ff fb71 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005de6:	e16c      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 27	:
		case 28	:
		case 29	:
		case 30	:
			VPP_ApplyPresetToSignal( VPP08	);
 8005de8:	2007      	movs	r0, #7
 8005dea:	f7ff fb6d 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005dee:	e168      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 31	:
		case 32	:
		case 33	:
		case 34	:
			VPP_ApplyPresetToSignal( VPP09	);
 8005df0:	2008      	movs	r0, #8
 8005df2:	f7ff fb69 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005df6:	e164      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 35	:
		case 36	:
		case 37	:
		case 38	:
			VPP_ApplyPresetToSignal( VPP10	);
 8005df8:	2009      	movs	r0, #9
 8005dfa:	f7ff fb65 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005dfe:	e160      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 39	:
		case 40	:
		case 41	:
		case 42	:
			VPP_ApplyPresetToSignal( VPP11	);
 8005e00:	200a      	movs	r0, #10
 8005e02:	f7ff fb61 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005e06:	e15c      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 43	:
		case 44	:
		case 45	:
		case 46	:
			VPP_ApplyPresetToSignal( VPP12	);
 8005e08:	200b      	movs	r0, #11
 8005e0a:	f7ff fb5d 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005e0e:	e158      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 47	:
		case 48	:
		case 49	:
		case 50	:
			VPP_ApplyPresetToSignal( VPP13	);
 8005e10:	200c      	movs	r0, #12
 8005e12:	f7ff fb59 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005e16:	e154      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 51	:
		case 52	:
		case 53	:
		case 54	:
			VPP_ApplyPresetToSignal( VPP14	);
 8005e18:	200d      	movs	r0, #13
 8005e1a:	f7ff fb55 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005e1e:	e150      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 55	:
		case 56	:
		case 57	:
		case 58	:
			VPP_ApplyPresetToSignal( VPP15	);
 8005e20:	200e      	movs	r0, #14
 8005e22:	f7ff fb51 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005e26:	e14c      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 59	:
		case 60	:
		case 61	:
		case 62	:
			VPP_ApplyPresetToSignal( VPP16	);
 8005e28:	200f      	movs	r0, #15
 8005e2a:	f7ff fb4d 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005e2e:	e148      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 63	:
		case 64	:
		case 65	:
		case 66	:
			VPP_ApplyPresetToSignal( VPP17	);
 8005e30:	2010      	movs	r0, #16
 8005e32:	f7ff fb49 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005e36:	e144      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 67	:
		case 68	:
		case 69	:
		case 70	:
			VPP_ApplyPresetToSignal( VPP18	);
 8005e38:	2011      	movs	r0, #17
 8005e3a:	f7ff fb45 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005e3e:	e140      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 71	:
		case 72	:
		case 73	:
		case 74	:
			VPP_ApplyPresetToSignal( VPP19	);
 8005e40:	2012      	movs	r0, #18
 8005e42:	f7ff fb41 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005e46:	e13c      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 75	:
		case 76	:
		case 77	:
		case 78	:
			VPP_ApplyPresetToSignal( VPP20	);
 8005e48:	2013      	movs	r0, #19
 8005e4a:	f7ff fb3d 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005e4e:	e138      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 79	:
		case 80	:
		case 81	:
		case 82	:
			VPP_ApplyPresetToSignal( VPP21	);
 8005e50:	2014      	movs	r0, #20
 8005e52:	f7ff fb39 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005e56:	e134      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 83	:
		case 84	:
		case 85	:
		case 86	:
			VPP_ApplyPresetToSignal( VPP22	);
 8005e58:	2015      	movs	r0, #21
 8005e5a:	f7ff fb35 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005e5e:	e130      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 87	:
		case 88	:
		case 89	:
		case 90	:
			VPP_ApplyPresetToSignal( VPP23	);
 8005e60:	2016      	movs	r0, #22
 8005e62:	f7ff fb31 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005e66:	e12c      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 91	:
		case 92	:
		case 93	:
		case 94	:
			VPP_ApplyPresetToSignal( VPP24	);
 8005e68:	2017      	movs	r0, #23
 8005e6a:	f7ff fb2d 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005e6e:	e128      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 95	:
		case 96	:
		case 97	:
		case 98	:
			VPP_ApplyPresetToSignal( VPP25	);
 8005e70:	2018      	movs	r0, #24
 8005e72:	f7ff fb29 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005e76:	e124      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 99		:
		case 100	:
		case 101	:
		case 102	:
			VPP_ApplyPresetToSignal( VPP26	);
 8005e78:	2019      	movs	r0, #25
 8005e7a:	f7ff fb25 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005e7e:	e120      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 103	:
		case 104	:
		case 105	:
		case 106	:
			VPP_ApplyPresetToSignal( VPP27	);
 8005e80:	201a      	movs	r0, #26
 8005e82:	f7ff fb21 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005e86:	e11c      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 107	:
		case 108	:
		case 109	:
		case 110	:
			VPP_ApplyPresetToSignal( VPP28	);
 8005e88:	201b      	movs	r0, #27
 8005e8a:	f7ff fb1d 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005e8e:	e118      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 111	:
		case 112	:
		case 113	:
		case 114	:
			VPP_ApplyPresetToSignal( VPP29	);
 8005e90:	201c      	movs	r0, #28
 8005e92:	f7ff fb19 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005e96:	e114      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 115	:
		case 116	:
		case 117	:
		case 118	:
			VPP_ApplyPresetToSignal( VPP30	);
 8005e98:	201d      	movs	r0, #29
 8005e9a:	f7ff fb15 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005e9e:	e110      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 119	:
		case 120	:
		case 121	:
		case 122	:
			VPP_ApplyPresetToSignal( VPP31	);
 8005ea0:	201e      	movs	r0, #30
 8005ea2:	f7ff fb11 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005ea6:	e10c      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 123	:
		case 124	:
		case 125	:
		case 126	:
			VPP_ApplyPresetToSignal( VPP32	);
 8005ea8:	201f      	movs	r0, #31
 8005eaa:	f7ff fb0d 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005eae:	e108      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 127	:
		case 128	:
		case 129	:
		case 130	:
			VPP_ApplyPresetToSignal( VPP33	);
 8005eb0:	2020      	movs	r0, #32
 8005eb2:	f7ff fb09 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005eb6:	e104      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 131	:
		case 132	:
		case 133	:
		case 134	:
			VPP_ApplyPresetToSignal( VPP34	);
 8005eb8:	2021      	movs	r0, #33	; 0x21
 8005eba:	f7ff fb05 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005ebe:	e100      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 135	:
		case 136	:
		case 137	:
		case 138	:
			VPP_ApplyPresetToSignal( VPP35	);
 8005ec0:	2022      	movs	r0, #34	; 0x22
 8005ec2:	f7ff fb01 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005ec6:	e0fc      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 139	:
		case 140	:
		case 141	:
		case 142	:
			VPP_ApplyPresetToSignal( VPP36	);
 8005ec8:	2023      	movs	r0, #35	; 0x23
 8005eca:	f7ff fafd 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005ece:	e0f8      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 143	:
		case 144	:
		case 145	:
		case 146	:
			VPP_ApplyPresetToSignal( VPP37	);
 8005ed0:	2024      	movs	r0, #36	; 0x24
 8005ed2:	f7ff faf9 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005ed6:	e0f4      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 147	:
		case 148	:
		case 149	:
		case 150	:
			VPP_ApplyPresetToSignal( VPP38	);
 8005ed8:	2025      	movs	r0, #37	; 0x25
 8005eda:	f7ff faf5 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005ede:	e0f0      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 151	:
		case 152	:
		case 153	:
		case 154	:
			VPP_ApplyPresetToSignal( VPP39	);
 8005ee0:	2026      	movs	r0, #38	; 0x26
 8005ee2:	f7ff faf1 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005ee6:	e0ec      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 155	:
		case 156	:
		case 157	:
		case 158	:
			VPP_ApplyPresetToSignal( VPP40	);
 8005ee8:	2027      	movs	r0, #39	; 0x27
 8005eea:	f7ff faed 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005eee:	e0e8      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 159	:
		case 160	:
		case 161	:
		case 162	:
			VPP_ApplyPresetToSignal( VPP41	);
 8005ef0:	2028      	movs	r0, #40	; 0x28
 8005ef2:	f7ff fae9 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005ef6:	e0e4      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 163	:
		case 164	:
		case 165	:
		case 166	:
			VPP_ApplyPresetToSignal( VPP42	);
 8005ef8:	2029      	movs	r0, #41	; 0x29
 8005efa:	f7ff fae5 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005efe:	e0e0      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 167	:
		case 168	:
		case 169	:
		case 170	:
			VPP_ApplyPresetToSignal( VPP43	);
 8005f00:	202a      	movs	r0, #42	; 0x2a
 8005f02:	f7ff fae1 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005f06:	e0dc      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 171	:
		case 172	:
		case 173	:
		case 174	:
			VPP_ApplyPresetToSignal( VPP44	);
 8005f08:	202b      	movs	r0, #43	; 0x2b
 8005f0a:	f7ff fadd 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005f0e:	e0d8      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 175	:
		case 176	:
		case 177	:
		case 178	:
			VPP_ApplyPresetToSignal( VPP45	);
 8005f10:	202c      	movs	r0, #44	; 0x2c
 8005f12:	f7ff fad9 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005f16:	e0d4      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 179	:
		case 180	:
		case 181	:
		case 182	:
			VPP_ApplyPresetToSignal( VPP46	);
 8005f18:	202d      	movs	r0, #45	; 0x2d
 8005f1a:	f7ff fad5 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005f1e:	e0d0      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 183	:
		case 184	:
		case 185	:
		case 186	:
			VPP_ApplyPresetToSignal( VPP47	);
 8005f20:	202e      	movs	r0, #46	; 0x2e
 8005f22:	f7ff fad1 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005f26:	e0cc      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 187	:
		case 188	:
		case 189	:
		case 190	:
			VPP_ApplyPresetToSignal( VPP48	);
 8005f28:	202f      	movs	r0, #47	; 0x2f
 8005f2a:	f7ff facd 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005f2e:	e0c8      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 191	:
		case 192	:
		case 193	:
		case 194	:
			VPP_ApplyPresetToSignal( VPP49	);
 8005f30:	2030      	movs	r0, #48	; 0x30
 8005f32:	f7ff fac9 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005f36:	e0c4      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 195	:
		case 196	:
		case 197	:
		case 198	:
			VPP_ApplyPresetToSignal( VPP50	);
 8005f38:	2031      	movs	r0, #49	; 0x31
 8005f3a:	f7ff fac5 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005f3e:	e0c0      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 199	:
		case 200	:
		case 201	:
		case 202	:
			VPP_ApplyPresetToSignal( VPP51	);
 8005f40:	2032      	movs	r0, #50	; 0x32
 8005f42:	f7ff fac1 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005f46:	e0bc      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 203	:
		case 204	:
		case 205	:
		case 206	:
			VPP_ApplyPresetToSignal( VPP52	);
 8005f48:	2033      	movs	r0, #51	; 0x33
 8005f4a:	f7ff fabd 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005f4e:	e0b8      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 207	:
		case 208	:
		case 209	:
		case 210	:
			VPP_ApplyPresetToSignal( VPP53	);
 8005f50:	2034      	movs	r0, #52	; 0x34
 8005f52:	f7ff fab9 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005f56:	e0b4      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 211	:
		case 212	:
		case 213	:
		case 214	:
			VPP_ApplyPresetToSignal( VPP54	);
 8005f58:	2035      	movs	r0, #53	; 0x35
 8005f5a:	f7ff fab5 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005f5e:	e0b0      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 215	:
		case 216	:
		case 217	:
		case 218	:
			VPP_ApplyPresetToSignal( VPP55	);
 8005f60:	2036      	movs	r0, #54	; 0x36
 8005f62:	f7ff fab1 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005f66:	e0ac      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 219	:
		case 220	:
		case 221	:
		case 222	:
			VPP_ApplyPresetToSignal( VPP56	);
 8005f68:	2037      	movs	r0, #55	; 0x37
 8005f6a:	f7ff faad 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005f6e:	e0a8      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 223	:
		case 224	:
		case 225	:
		case 226	:
			VPP_ApplyPresetToSignal( VPP57	);
 8005f70:	2038      	movs	r0, #56	; 0x38
 8005f72:	f7ff faa9 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005f76:	e0a4      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 227	:
		case 228	:
		case 229	:
		case 230	:
			VPP_ApplyPresetToSignal( VPP58	);
 8005f78:	2039      	movs	r0, #57	; 0x39
 8005f7a:	f7ff faa5 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005f7e:	e0a0      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 231	:
		case 232	:
		case 233	:
		case 234	:
			VPP_ApplyPresetToSignal( VPP59	);
 8005f80:	203a      	movs	r0, #58	; 0x3a
 8005f82:	f7ff faa1 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005f86:	e09c      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 235	:
		case 236	:
		case 237	:
		case 238	:
			VPP_ApplyPresetToSignal( VPP60	);
 8005f88:	203b      	movs	r0, #59	; 0x3b
 8005f8a:	f7ff fa9d 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005f8e:	e098      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 239	:
		case 240	:
		case 241	:
		case 242	:
			VPP_ApplyPresetToSignal( VPP61	);
 8005f90:	203c      	movs	r0, #60	; 0x3c
 8005f92:	f7ff fa99 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005f96:	e094      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 243	:
		case 244	:
		case 245	:
		case 246	:
			VPP_ApplyPresetToSignal( VPP62	);
 8005f98:	203d      	movs	r0, #61	; 0x3d
 8005f9a:	f7ff fa95 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005f9e:	e090      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 247	:
		case 248	:
		case 249	:
		case 250	:
			VPP_ApplyPresetToSignal( VPP63	);
 8005fa0:	203e      	movs	r0, #62	; 0x3e
 8005fa2:	f7ff fa91 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005fa6:	e08c      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 251	:
		case 252	:
		case 253	:
		case 254	:
			VPP_ApplyPresetToSignal( VPP64	);
 8005fa8:	203f      	movs	r0, #63	; 0x3f
 8005faa:	f7ff fa8d 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005fae:	e088      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 255	:
		case 256	:
		case 257	:
		case 258	:
			VPP_ApplyPresetToSignal( VPP65	);
 8005fb0:	2040      	movs	r0, #64	; 0x40
 8005fb2:	f7ff fa89 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005fb6:	e084      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 259	:
		case 260	:
		case 261	:
		case 262	:
			VPP_ApplyPresetToSignal( VPP66	);
 8005fb8:	2041      	movs	r0, #65	; 0x41
 8005fba:	f7ff fa85 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005fbe:	e080      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 263	:
		case 264	:
		case 265	:
		case 266	:
			VPP_ApplyPresetToSignal( VPP67	);
 8005fc0:	2042      	movs	r0, #66	; 0x42
 8005fc2:	f7ff fa81 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005fc6:	e07c      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 267	:
		case 268	:
		case 269	:
		case 270	:
			VPP_ApplyPresetToSignal( VPP68	);
 8005fc8:	2043      	movs	r0, #67	; 0x43
 8005fca:	f7ff fa7d 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005fce:	e078      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 271	:
		case 272	:
		case 273	:
		case 274	:
			VPP_ApplyPresetToSignal( VPP69	);
 8005fd0:	2044      	movs	r0, #68	; 0x44
 8005fd2:	f7ff fa79 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005fd6:	e074      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 275	:
		case 276	:
		case 277	:
		case 278	:
			VPP_ApplyPresetToSignal( VPP70	);
 8005fd8:	2045      	movs	r0, #69	; 0x45
 8005fda:	f7ff fa75 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005fde:	e070      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 279	:
		case 280	:
		case 281	:
		case 282	:
			VPP_ApplyPresetToSignal( VPP71	);
 8005fe0:	2046      	movs	r0, #70	; 0x46
 8005fe2:	f7ff fa71 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005fe6:	e06c      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 283	:
		case 284	:
		case 285	:
		case 286	:
			VPP_ApplyPresetToSignal( VPP72	);
 8005fe8:	2047      	movs	r0, #71	; 0x47
 8005fea:	f7ff fa6d 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005fee:	e068      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 287	:
		case 288	:
		case 289	:
		case 290	:
			VPP_ApplyPresetToSignal( VPP73	);
 8005ff0:	2048      	movs	r0, #72	; 0x48
 8005ff2:	f7ff fa69 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005ff6:	e064      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 291	:
		case 292	:
		case 293	:
		case 294	:
			VPP_ApplyPresetToSignal( VPP74	);
 8005ff8:	2049      	movs	r0, #73	; 0x49
 8005ffa:	f7ff fa65 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8005ffe:	e060      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 295	:
		case 296	:
		case 297	:
		case 298	:
			VPP_ApplyPresetToSignal( VPP75	);
 8006000:	204a      	movs	r0, #74	; 0x4a
 8006002:	f7ff fa61 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8006006:	e05c      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 299	:
		case 300	:
		case 301	:
		case 302	:
			VPP_ApplyPresetToSignal( VPP76	);
 8006008:	204b      	movs	r0, #75	; 0x4b
 800600a:	f7ff fa5d 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 800600e:	e058      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 303	:
		case 304	:
		case 305	:
		case 306	:
			VPP_ApplyPresetToSignal( VPP77	);
 8006010:	204c      	movs	r0, #76	; 0x4c
 8006012:	f7ff fa59 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8006016:	e054      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 307	:
		case 308	:
		case 309	:
		case 310	:
			VPP_ApplyPresetToSignal( VPP78	);
 8006018:	204d      	movs	r0, #77	; 0x4d
 800601a:	f7ff fa55 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 800601e:	e050      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 311	:
		case 312	:
		case 313	:
		case 314	:
			VPP_ApplyPresetToSignal( VPP79	);
 8006020:	204e      	movs	r0, #78	; 0x4e
 8006022:	f7ff fa51 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8006026:	e04c      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 315	:
		case 316	:
		case 317	:
		case 318	:
			VPP_ApplyPresetToSignal( VPP80	);
 8006028:	204f      	movs	r0, #79	; 0x4f
 800602a:	f7ff fa4d 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 800602e:	e048      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 319	:
		case 320	:
		case 321	:
		case 322	:
			VPP_ApplyPresetToSignal( VPP81	);
 8006030:	2050      	movs	r0, #80	; 0x50
 8006032:	f7ff fa49 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8006036:	e044      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 323	:
		case 324	:
		case 325	:
		case 326	:
			VPP_ApplyPresetToSignal( VPP82	);
 8006038:	2051      	movs	r0, #81	; 0x51
 800603a:	f7ff fa45 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 800603e:	e040      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 327	:
		case 328	:
		case 329	:
		case 330	:
			VPP_ApplyPresetToSignal( VPP83	);
 8006040:	2052      	movs	r0, #82	; 0x52
 8006042:	f7ff fa41 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8006046:	e03c      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 331	:
		case 332	:
		case 333	:
		case 334	:
			VPP_ApplyPresetToSignal( VPP84	);
 8006048:	2053      	movs	r0, #83	; 0x53
 800604a:	f7ff fa3d 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 800604e:	e038      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 335	:
		case 336	:
		case 337	:
		case 338	:
			VPP_ApplyPresetToSignal( VPP85	);
 8006050:	2054      	movs	r0, #84	; 0x54
 8006052:	f7ff fa39 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8006056:	e034      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 339	:
		case 340	:
		case 341	:
		case 342	:
			VPP_ApplyPresetToSignal( VPP86	);
 8006058:	2055      	movs	r0, #85	; 0x55
 800605a:	f7ff fa35 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 800605e:	e030      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 343	:
		case 344	:
		case 345	:
		case 346	:
			VPP_ApplyPresetToSignal( VPP87	);
 8006060:	2056      	movs	r0, #86	; 0x56
 8006062:	f7ff fa31 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8006066:	e02c      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 347	:
		case 348	:
		case 349	:
		case 350	:
			VPP_ApplyPresetToSignal( VPP88	);
 8006068:	2057      	movs	r0, #87	; 0x57
 800606a:	f7ff fa2d 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 800606e:	e028      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 351	:
		case 352	:
		case 353	:
		case 354	:
			VPP_ApplyPresetToSignal( VPP89	);
 8006070:	2058      	movs	r0, #88	; 0x58
 8006072:	f7ff fa29 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8006076:	e024      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 355	:
		case 356	:
		case 357	:
		case 358	:
			VPP_ApplyPresetToSignal( VPP90	);
 8006078:	2059      	movs	r0, #89	; 0x59
 800607a:	f7ff fa25 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 800607e:	e020      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 359	:
		case 360	:
		case 361	:
		case 362	:
			VPP_ApplyPresetToSignal( VPP91	);
 8006080:	205a      	movs	r0, #90	; 0x5a
 8006082:	f7ff fa21 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8006086:	e01c      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 363	:
		case 364	:
		case 365	:
		case 366	:
			VPP_ApplyPresetToSignal( VPP92	);
 8006088:	205b      	movs	r0, #91	; 0x5b
 800608a:	f7ff fa1d 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 800608e:	e018      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 367	:
		case 368	:
		case 369	:
		case 370	:
			VPP_ApplyPresetToSignal( VPP93	);
 8006090:	205c      	movs	r0, #92	; 0x5c
 8006092:	f7ff fa19 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 8006096:	e014      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 371	:
		case 372	:
		case 373	:
		case 374	:
			VPP_ApplyPresetToSignal( VPP94	);
 8006098:	205d      	movs	r0, #93	; 0x5d
 800609a:	f7ff fa15 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 800609e:	e010      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 375	:
		case 376	:
		case 377	:
		case 378	:
			VPP_ApplyPresetToSignal( VPP95	);
 80060a0:	205e      	movs	r0, #94	; 0x5e
 80060a2:	f7ff fa11 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 80060a6:	e00c      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 379	:
		case 380	:
		case 381	:
		case 382	:
			VPP_ApplyPresetToSignal( VPP96	);
 80060a8:	205f      	movs	r0, #95	; 0x5f
 80060aa:	f7ff fa0d 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 80060ae:	e008      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 383	:
		case 384	:
		case 385	:
		case 386	:
			VPP_ApplyPresetToSignal( VPP97	);
 80060b0:	2060      	movs	r0, #96	; 0x60
 80060b2:	f7ff fa09 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 80060b6:	e004      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>
		case 387	:
		case 388	:
		case 389	:
		case 390	:
			VPP_ApplyPresetToSignal( VPP98	);
 80060b8:	2061      	movs	r0, #97	; 0x61
 80060ba:	f7ff fa05 	bl	80054c8 <VPP_ApplyPresetToSignal>
			break;
 80060be:	e000      	b.n	80060c2 <VPP_ModifySignalOutput+0x94a>

		default:
			break;
 80060c0:	bf00      	nop
	}
}
 80060c2:	bf00      	nop
 80060c4:	3708      	adds	r7, #8
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
 80060ca:	bf00      	nop

080060cc <VPP_ModifySyncOutput>:

 *	@retval None
 *
 */
void VPP_ModifySyncOutput(uint16_t pEncoderValue)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b082      	sub	sp, #8
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	4603      	mov	r3, r0
 80060d4:	80fb      	strh	r3, [r7, #6]
	switch(pEncoderValue)
 80060d6:	88fb      	ldrh	r3, [r7, #6]
 80060d8:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 80060dc:	f200 849a 	bhi.w	8006a14 <VPP_ModifySyncOutput+0x948>
 80060e0:	a201      	add	r2, pc, #4	; (adr r2, 80060e8 <VPP_ModifySyncOutput+0x1c>)
 80060e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e6:	bf00      	nop
 80060e8:	08006705 	.word	0x08006705
 80060ec:	08006705 	.word	0x08006705
 80060f0:	08006705 	.word	0x08006705
 80060f4:	0800670d 	.word	0x0800670d
 80060f8:	0800670d 	.word	0x0800670d
 80060fc:	0800670d 	.word	0x0800670d
 8006100:	0800670d 	.word	0x0800670d
 8006104:	08006715 	.word	0x08006715
 8006108:	08006715 	.word	0x08006715
 800610c:	08006715 	.word	0x08006715
 8006110:	08006715 	.word	0x08006715
 8006114:	0800671d 	.word	0x0800671d
 8006118:	0800671d 	.word	0x0800671d
 800611c:	0800671d 	.word	0x0800671d
 8006120:	0800671d 	.word	0x0800671d
 8006124:	08006725 	.word	0x08006725
 8006128:	08006725 	.word	0x08006725
 800612c:	08006725 	.word	0x08006725
 8006130:	08006725 	.word	0x08006725
 8006134:	0800672d 	.word	0x0800672d
 8006138:	0800672d 	.word	0x0800672d
 800613c:	0800672d 	.word	0x0800672d
 8006140:	0800672d 	.word	0x0800672d
 8006144:	08006735 	.word	0x08006735
 8006148:	08006735 	.word	0x08006735
 800614c:	08006735 	.word	0x08006735
 8006150:	08006735 	.word	0x08006735
 8006154:	0800673d 	.word	0x0800673d
 8006158:	0800673d 	.word	0x0800673d
 800615c:	0800673d 	.word	0x0800673d
 8006160:	0800673d 	.word	0x0800673d
 8006164:	08006745 	.word	0x08006745
 8006168:	08006745 	.word	0x08006745
 800616c:	08006745 	.word	0x08006745
 8006170:	08006745 	.word	0x08006745
 8006174:	0800674d 	.word	0x0800674d
 8006178:	0800674d 	.word	0x0800674d
 800617c:	0800674d 	.word	0x0800674d
 8006180:	0800674d 	.word	0x0800674d
 8006184:	08006755 	.word	0x08006755
 8006188:	08006755 	.word	0x08006755
 800618c:	08006755 	.word	0x08006755
 8006190:	08006755 	.word	0x08006755
 8006194:	0800675d 	.word	0x0800675d
 8006198:	0800675d 	.word	0x0800675d
 800619c:	0800675d 	.word	0x0800675d
 80061a0:	0800675d 	.word	0x0800675d
 80061a4:	08006765 	.word	0x08006765
 80061a8:	08006765 	.word	0x08006765
 80061ac:	08006765 	.word	0x08006765
 80061b0:	08006765 	.word	0x08006765
 80061b4:	0800676d 	.word	0x0800676d
 80061b8:	0800676d 	.word	0x0800676d
 80061bc:	0800676d 	.word	0x0800676d
 80061c0:	0800676d 	.word	0x0800676d
 80061c4:	08006775 	.word	0x08006775
 80061c8:	08006775 	.word	0x08006775
 80061cc:	08006775 	.word	0x08006775
 80061d0:	08006775 	.word	0x08006775
 80061d4:	0800677d 	.word	0x0800677d
 80061d8:	0800677d 	.word	0x0800677d
 80061dc:	0800677d 	.word	0x0800677d
 80061e0:	0800677d 	.word	0x0800677d
 80061e4:	08006785 	.word	0x08006785
 80061e8:	08006785 	.word	0x08006785
 80061ec:	08006785 	.word	0x08006785
 80061f0:	08006785 	.word	0x08006785
 80061f4:	0800678d 	.word	0x0800678d
 80061f8:	0800678d 	.word	0x0800678d
 80061fc:	0800678d 	.word	0x0800678d
 8006200:	0800678d 	.word	0x0800678d
 8006204:	08006795 	.word	0x08006795
 8006208:	08006795 	.word	0x08006795
 800620c:	08006795 	.word	0x08006795
 8006210:	08006795 	.word	0x08006795
 8006214:	0800679d 	.word	0x0800679d
 8006218:	0800679d 	.word	0x0800679d
 800621c:	0800679d 	.word	0x0800679d
 8006220:	0800679d 	.word	0x0800679d
 8006224:	080067a5 	.word	0x080067a5
 8006228:	080067a5 	.word	0x080067a5
 800622c:	080067a5 	.word	0x080067a5
 8006230:	080067a5 	.word	0x080067a5
 8006234:	080067ad 	.word	0x080067ad
 8006238:	080067ad 	.word	0x080067ad
 800623c:	080067ad 	.word	0x080067ad
 8006240:	080067ad 	.word	0x080067ad
 8006244:	080067b5 	.word	0x080067b5
 8006248:	080067b5 	.word	0x080067b5
 800624c:	080067b5 	.word	0x080067b5
 8006250:	080067b5 	.word	0x080067b5
 8006254:	080067bd 	.word	0x080067bd
 8006258:	080067bd 	.word	0x080067bd
 800625c:	080067bd 	.word	0x080067bd
 8006260:	080067bd 	.word	0x080067bd
 8006264:	080067c5 	.word	0x080067c5
 8006268:	080067c5 	.word	0x080067c5
 800626c:	080067c5 	.word	0x080067c5
 8006270:	080067c5 	.word	0x080067c5
 8006274:	080067cd 	.word	0x080067cd
 8006278:	080067cd 	.word	0x080067cd
 800627c:	080067cd 	.word	0x080067cd
 8006280:	080067cd 	.word	0x080067cd
 8006284:	080067d5 	.word	0x080067d5
 8006288:	080067d5 	.word	0x080067d5
 800628c:	080067d5 	.word	0x080067d5
 8006290:	080067d5 	.word	0x080067d5
 8006294:	080067dd 	.word	0x080067dd
 8006298:	080067dd 	.word	0x080067dd
 800629c:	080067dd 	.word	0x080067dd
 80062a0:	080067dd 	.word	0x080067dd
 80062a4:	080067e5 	.word	0x080067e5
 80062a8:	080067e5 	.word	0x080067e5
 80062ac:	080067e5 	.word	0x080067e5
 80062b0:	080067e5 	.word	0x080067e5
 80062b4:	080067ed 	.word	0x080067ed
 80062b8:	080067ed 	.word	0x080067ed
 80062bc:	080067ed 	.word	0x080067ed
 80062c0:	080067ed 	.word	0x080067ed
 80062c4:	080067f5 	.word	0x080067f5
 80062c8:	080067f5 	.word	0x080067f5
 80062cc:	080067f5 	.word	0x080067f5
 80062d0:	080067f5 	.word	0x080067f5
 80062d4:	080067fd 	.word	0x080067fd
 80062d8:	080067fd 	.word	0x080067fd
 80062dc:	080067fd 	.word	0x080067fd
 80062e0:	080067fd 	.word	0x080067fd
 80062e4:	08006805 	.word	0x08006805
 80062e8:	08006805 	.word	0x08006805
 80062ec:	08006805 	.word	0x08006805
 80062f0:	08006805 	.word	0x08006805
 80062f4:	0800680d 	.word	0x0800680d
 80062f8:	0800680d 	.word	0x0800680d
 80062fc:	0800680d 	.word	0x0800680d
 8006300:	0800680d 	.word	0x0800680d
 8006304:	08006815 	.word	0x08006815
 8006308:	08006815 	.word	0x08006815
 800630c:	08006815 	.word	0x08006815
 8006310:	08006815 	.word	0x08006815
 8006314:	0800681d 	.word	0x0800681d
 8006318:	0800681d 	.word	0x0800681d
 800631c:	0800681d 	.word	0x0800681d
 8006320:	0800681d 	.word	0x0800681d
 8006324:	08006825 	.word	0x08006825
 8006328:	08006825 	.word	0x08006825
 800632c:	08006825 	.word	0x08006825
 8006330:	08006825 	.word	0x08006825
 8006334:	0800682d 	.word	0x0800682d
 8006338:	0800682d 	.word	0x0800682d
 800633c:	0800682d 	.word	0x0800682d
 8006340:	0800682d 	.word	0x0800682d
 8006344:	08006835 	.word	0x08006835
 8006348:	08006835 	.word	0x08006835
 800634c:	08006835 	.word	0x08006835
 8006350:	08006835 	.word	0x08006835
 8006354:	0800683d 	.word	0x0800683d
 8006358:	0800683d 	.word	0x0800683d
 800635c:	0800683d 	.word	0x0800683d
 8006360:	0800683d 	.word	0x0800683d
 8006364:	08006845 	.word	0x08006845
 8006368:	08006845 	.word	0x08006845
 800636c:	08006845 	.word	0x08006845
 8006370:	08006845 	.word	0x08006845
 8006374:	0800684d 	.word	0x0800684d
 8006378:	0800684d 	.word	0x0800684d
 800637c:	0800684d 	.word	0x0800684d
 8006380:	0800684d 	.word	0x0800684d
 8006384:	08006855 	.word	0x08006855
 8006388:	08006855 	.word	0x08006855
 800638c:	08006855 	.word	0x08006855
 8006390:	08006855 	.word	0x08006855
 8006394:	0800685d 	.word	0x0800685d
 8006398:	0800685d 	.word	0x0800685d
 800639c:	0800685d 	.word	0x0800685d
 80063a0:	0800685d 	.word	0x0800685d
 80063a4:	08006865 	.word	0x08006865
 80063a8:	08006865 	.word	0x08006865
 80063ac:	08006865 	.word	0x08006865
 80063b0:	08006865 	.word	0x08006865
 80063b4:	0800686d 	.word	0x0800686d
 80063b8:	0800686d 	.word	0x0800686d
 80063bc:	0800686d 	.word	0x0800686d
 80063c0:	0800686d 	.word	0x0800686d
 80063c4:	08006875 	.word	0x08006875
 80063c8:	08006875 	.word	0x08006875
 80063cc:	08006875 	.word	0x08006875
 80063d0:	08006875 	.word	0x08006875
 80063d4:	0800687d 	.word	0x0800687d
 80063d8:	0800687d 	.word	0x0800687d
 80063dc:	0800687d 	.word	0x0800687d
 80063e0:	0800687d 	.word	0x0800687d
 80063e4:	08006885 	.word	0x08006885
 80063e8:	08006885 	.word	0x08006885
 80063ec:	08006885 	.word	0x08006885
 80063f0:	08006885 	.word	0x08006885
 80063f4:	0800688d 	.word	0x0800688d
 80063f8:	0800688d 	.word	0x0800688d
 80063fc:	0800688d 	.word	0x0800688d
 8006400:	0800688d 	.word	0x0800688d
 8006404:	08006895 	.word	0x08006895
 8006408:	08006895 	.word	0x08006895
 800640c:	08006895 	.word	0x08006895
 8006410:	08006895 	.word	0x08006895
 8006414:	0800689d 	.word	0x0800689d
 8006418:	0800689d 	.word	0x0800689d
 800641c:	0800689d 	.word	0x0800689d
 8006420:	0800689d 	.word	0x0800689d
 8006424:	080068a5 	.word	0x080068a5
 8006428:	080068a5 	.word	0x080068a5
 800642c:	080068a5 	.word	0x080068a5
 8006430:	080068a5 	.word	0x080068a5
 8006434:	080068ad 	.word	0x080068ad
 8006438:	080068ad 	.word	0x080068ad
 800643c:	080068ad 	.word	0x080068ad
 8006440:	080068ad 	.word	0x080068ad
 8006444:	080068b5 	.word	0x080068b5
 8006448:	080068b5 	.word	0x080068b5
 800644c:	080068b5 	.word	0x080068b5
 8006450:	080068b5 	.word	0x080068b5
 8006454:	080068bd 	.word	0x080068bd
 8006458:	080068bd 	.word	0x080068bd
 800645c:	080068bd 	.word	0x080068bd
 8006460:	080068bd 	.word	0x080068bd
 8006464:	080068c5 	.word	0x080068c5
 8006468:	080068c5 	.word	0x080068c5
 800646c:	080068c5 	.word	0x080068c5
 8006470:	080068c5 	.word	0x080068c5
 8006474:	080068cd 	.word	0x080068cd
 8006478:	080068cd 	.word	0x080068cd
 800647c:	080068cd 	.word	0x080068cd
 8006480:	080068cd 	.word	0x080068cd
 8006484:	080068d5 	.word	0x080068d5
 8006488:	080068d5 	.word	0x080068d5
 800648c:	080068d5 	.word	0x080068d5
 8006490:	080068d5 	.word	0x080068d5
 8006494:	080068dd 	.word	0x080068dd
 8006498:	080068dd 	.word	0x080068dd
 800649c:	080068dd 	.word	0x080068dd
 80064a0:	080068dd 	.word	0x080068dd
 80064a4:	080068e5 	.word	0x080068e5
 80064a8:	080068e5 	.word	0x080068e5
 80064ac:	080068e5 	.word	0x080068e5
 80064b0:	080068e5 	.word	0x080068e5
 80064b4:	080068ed 	.word	0x080068ed
 80064b8:	080068ed 	.word	0x080068ed
 80064bc:	080068ed 	.word	0x080068ed
 80064c0:	080068ed 	.word	0x080068ed
 80064c4:	080068f5 	.word	0x080068f5
 80064c8:	080068f5 	.word	0x080068f5
 80064cc:	080068f5 	.word	0x080068f5
 80064d0:	080068f5 	.word	0x080068f5
 80064d4:	080068fd 	.word	0x080068fd
 80064d8:	080068fd 	.word	0x080068fd
 80064dc:	080068fd 	.word	0x080068fd
 80064e0:	080068fd 	.word	0x080068fd
 80064e4:	08006905 	.word	0x08006905
 80064e8:	08006905 	.word	0x08006905
 80064ec:	08006905 	.word	0x08006905
 80064f0:	08006905 	.word	0x08006905
 80064f4:	0800690d 	.word	0x0800690d
 80064f8:	0800690d 	.word	0x0800690d
 80064fc:	0800690d 	.word	0x0800690d
 8006500:	0800690d 	.word	0x0800690d
 8006504:	08006915 	.word	0x08006915
 8006508:	08006915 	.word	0x08006915
 800650c:	08006915 	.word	0x08006915
 8006510:	08006915 	.word	0x08006915
 8006514:	0800691d 	.word	0x0800691d
 8006518:	0800691d 	.word	0x0800691d
 800651c:	0800691d 	.word	0x0800691d
 8006520:	0800691d 	.word	0x0800691d
 8006524:	08006925 	.word	0x08006925
 8006528:	08006925 	.word	0x08006925
 800652c:	08006925 	.word	0x08006925
 8006530:	08006925 	.word	0x08006925
 8006534:	0800692d 	.word	0x0800692d
 8006538:	0800692d 	.word	0x0800692d
 800653c:	0800692d 	.word	0x0800692d
 8006540:	0800692d 	.word	0x0800692d
 8006544:	08006935 	.word	0x08006935
 8006548:	08006935 	.word	0x08006935
 800654c:	08006935 	.word	0x08006935
 8006550:	08006935 	.word	0x08006935
 8006554:	0800693d 	.word	0x0800693d
 8006558:	0800693d 	.word	0x0800693d
 800655c:	0800693d 	.word	0x0800693d
 8006560:	0800693d 	.word	0x0800693d
 8006564:	08006945 	.word	0x08006945
 8006568:	08006945 	.word	0x08006945
 800656c:	08006945 	.word	0x08006945
 8006570:	08006945 	.word	0x08006945
 8006574:	0800694d 	.word	0x0800694d
 8006578:	0800694d 	.word	0x0800694d
 800657c:	0800694d 	.word	0x0800694d
 8006580:	0800694d 	.word	0x0800694d
 8006584:	08006955 	.word	0x08006955
 8006588:	08006955 	.word	0x08006955
 800658c:	08006955 	.word	0x08006955
 8006590:	08006955 	.word	0x08006955
 8006594:	0800695d 	.word	0x0800695d
 8006598:	0800695d 	.word	0x0800695d
 800659c:	0800695d 	.word	0x0800695d
 80065a0:	0800695d 	.word	0x0800695d
 80065a4:	08006965 	.word	0x08006965
 80065a8:	08006965 	.word	0x08006965
 80065ac:	08006965 	.word	0x08006965
 80065b0:	08006965 	.word	0x08006965
 80065b4:	0800696d 	.word	0x0800696d
 80065b8:	0800696d 	.word	0x0800696d
 80065bc:	0800696d 	.word	0x0800696d
 80065c0:	0800696d 	.word	0x0800696d
 80065c4:	08006975 	.word	0x08006975
 80065c8:	08006975 	.word	0x08006975
 80065cc:	08006975 	.word	0x08006975
 80065d0:	08006975 	.word	0x08006975
 80065d4:	0800697d 	.word	0x0800697d
 80065d8:	0800697d 	.word	0x0800697d
 80065dc:	0800697d 	.word	0x0800697d
 80065e0:	0800697d 	.word	0x0800697d
 80065e4:	08006985 	.word	0x08006985
 80065e8:	08006985 	.word	0x08006985
 80065ec:	08006985 	.word	0x08006985
 80065f0:	08006985 	.word	0x08006985
 80065f4:	0800698d 	.word	0x0800698d
 80065f8:	0800698d 	.word	0x0800698d
 80065fc:	0800698d 	.word	0x0800698d
 8006600:	0800698d 	.word	0x0800698d
 8006604:	08006995 	.word	0x08006995
 8006608:	08006995 	.word	0x08006995
 800660c:	08006995 	.word	0x08006995
 8006610:	08006995 	.word	0x08006995
 8006614:	0800699d 	.word	0x0800699d
 8006618:	0800699d 	.word	0x0800699d
 800661c:	0800699d 	.word	0x0800699d
 8006620:	0800699d 	.word	0x0800699d
 8006624:	080069a5 	.word	0x080069a5
 8006628:	080069a5 	.word	0x080069a5
 800662c:	080069a5 	.word	0x080069a5
 8006630:	080069a5 	.word	0x080069a5
 8006634:	080069ad 	.word	0x080069ad
 8006638:	080069ad 	.word	0x080069ad
 800663c:	080069ad 	.word	0x080069ad
 8006640:	080069ad 	.word	0x080069ad
 8006644:	080069b5 	.word	0x080069b5
 8006648:	080069b5 	.word	0x080069b5
 800664c:	080069b5 	.word	0x080069b5
 8006650:	080069b5 	.word	0x080069b5
 8006654:	080069bd 	.word	0x080069bd
 8006658:	080069bd 	.word	0x080069bd
 800665c:	080069bd 	.word	0x080069bd
 8006660:	080069bd 	.word	0x080069bd
 8006664:	080069c5 	.word	0x080069c5
 8006668:	080069c5 	.word	0x080069c5
 800666c:	080069c5 	.word	0x080069c5
 8006670:	080069c5 	.word	0x080069c5
 8006674:	080069cd 	.word	0x080069cd
 8006678:	080069cd 	.word	0x080069cd
 800667c:	080069cd 	.word	0x080069cd
 8006680:	080069cd 	.word	0x080069cd
 8006684:	080069d5 	.word	0x080069d5
 8006688:	080069d5 	.word	0x080069d5
 800668c:	080069d5 	.word	0x080069d5
 8006690:	080069d5 	.word	0x080069d5
 8006694:	080069dd 	.word	0x080069dd
 8006698:	080069dd 	.word	0x080069dd
 800669c:	080069dd 	.word	0x080069dd
 80066a0:	080069dd 	.word	0x080069dd
 80066a4:	080069e5 	.word	0x080069e5
 80066a8:	080069e5 	.word	0x080069e5
 80066ac:	080069e5 	.word	0x080069e5
 80066b0:	080069e5 	.word	0x080069e5
 80066b4:	080069ed 	.word	0x080069ed
 80066b8:	080069ed 	.word	0x080069ed
 80066bc:	080069ed 	.word	0x080069ed
 80066c0:	080069ed 	.word	0x080069ed
 80066c4:	080069f5 	.word	0x080069f5
 80066c8:	080069f5 	.word	0x080069f5
 80066cc:	080069f5 	.word	0x080069f5
 80066d0:	080069f5 	.word	0x080069f5
 80066d4:	080069fd 	.word	0x080069fd
 80066d8:	080069fd 	.word	0x080069fd
 80066dc:	080069fd 	.word	0x080069fd
 80066e0:	080069fd 	.word	0x080069fd
 80066e4:	08006a05 	.word	0x08006a05
 80066e8:	08006a05 	.word	0x08006a05
 80066ec:	08006a05 	.word	0x08006a05
 80066f0:	08006a05 	.word	0x08006a05
 80066f4:	08006a0d 	.word	0x08006a0d
 80066f8:	08006a0d 	.word	0x08006a0d
 80066fc:	08006a0d 	.word	0x08006a0d
 8006700:	08006a0d 	.word	0x08006a0d
	{
		case 0	:
		case 1	:
		case 2	:
			VPP_ApplyPresetToSync( VPP01 );
 8006704:	2000      	movs	r0, #0
 8006706:	f7fe ff0d 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800670a:	e184      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 3	:
		case 4	:
		case 5	:
		case 6	:
			VPP_ApplyPresetToSync( VPP02	);
 800670c:	2001      	movs	r0, #1
 800670e:	f7fe ff09 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006712:	e180      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 7	:
		case 8	:
		case 9	:
		case 10	:
			VPP_ApplyPresetToSync( VPP03	);
 8006714:	2002      	movs	r0, #2
 8006716:	f7fe ff05 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800671a:	e17c      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 11	:
		case 12	:
		case 13	:
		case 14	:
			VPP_ApplyPresetToSync( VPP04	);
 800671c:	2003      	movs	r0, #3
 800671e:	f7fe ff01 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006722:	e178      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 15	:
		case 16	:
		case 17	:
		case 18	:
			VPP_ApplyPresetToSync( VPP05	);
 8006724:	2004      	movs	r0, #4
 8006726:	f7fe fefd 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800672a:	e174      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 19	:
		case 20	:
		case 21	:
		case 22	:
			VPP_ApplyPresetToSync( VPP06	);
 800672c:	2005      	movs	r0, #5
 800672e:	f7fe fef9 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006732:	e170      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 23	:
		case 24	:
		case 25	:
		case 26	:
			VPP_ApplyPresetToSync( VPP07	);
 8006734:	2006      	movs	r0, #6
 8006736:	f7fe fef5 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800673a:	e16c      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 27	:
		case 28	:
		case 29	:
		case 30	:
			VPP_ApplyPresetToSync( VPP08	);
 800673c:	2007      	movs	r0, #7
 800673e:	f7fe fef1 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006742:	e168      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 31	:
		case 32	:
		case 33	:
		case 34	:
			VPP_ApplyPresetToSync( VPP09	);
 8006744:	2008      	movs	r0, #8
 8006746:	f7fe feed 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800674a:	e164      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 35	:
		case 36	:
		case 37	:
		case 38	:
			VPP_ApplyPresetToSync( VPP10	);
 800674c:	2009      	movs	r0, #9
 800674e:	f7fe fee9 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006752:	e160      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 39	:
		case 40	:
		case 41	:
		case 42	:
			VPP_ApplyPresetToSync( VPP11	);
 8006754:	200a      	movs	r0, #10
 8006756:	f7fe fee5 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800675a:	e15c      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 43	:
		case 44	:
		case 45	:
		case 46	:
			VPP_ApplyPresetToSync( VPP12	);
 800675c:	200b      	movs	r0, #11
 800675e:	f7fe fee1 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006762:	e158      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 47	:
		case 48	:
		case 49	:
		case 50	:
			VPP_ApplyPresetToSync( VPP13	);
 8006764:	200c      	movs	r0, #12
 8006766:	f7fe fedd 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800676a:	e154      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 51	:
		case 52	:
		case 53	:
		case 54	:
			VPP_ApplyPresetToSync( VPP14	);
 800676c:	200d      	movs	r0, #13
 800676e:	f7fe fed9 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006772:	e150      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 55	:
		case 56	:
		case 57	:
		case 58	:
			VPP_ApplyPresetToSync( VPP15	);
 8006774:	200e      	movs	r0, #14
 8006776:	f7fe fed5 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800677a:	e14c      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 59	:
		case 60	:
		case 61	:
		case 62	:
			VPP_ApplyPresetToSync( VPP16	);
 800677c:	200f      	movs	r0, #15
 800677e:	f7fe fed1 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006782:	e148      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 63	:
		case 64	:
		case 65	:
		case 66	:
			VPP_ApplyPresetToSync( VPP17	);
 8006784:	2010      	movs	r0, #16
 8006786:	f7fe fecd 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800678a:	e144      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 67	:
		case 68	:
		case 69	:
		case 70	:
			VPP_ApplyPresetToSync( VPP18	);
 800678c:	2011      	movs	r0, #17
 800678e:	f7fe fec9 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006792:	e140      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 71	:
		case 72	:
		case 73	:
		case 74	:
			VPP_ApplyPresetToSync( VPP19	);
 8006794:	2012      	movs	r0, #18
 8006796:	f7fe fec5 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800679a:	e13c      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 75	:
		case 76	:
		case 77	:
		case 78	:
			VPP_ApplyPresetToSync( VPP20	);
 800679c:	2013      	movs	r0, #19
 800679e:	f7fe fec1 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80067a2:	e138      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 79	:
		case 80	:
		case 81	:
		case 82	:
			VPP_ApplyPresetToSync( VPP21	);
 80067a4:	2014      	movs	r0, #20
 80067a6:	f7fe febd 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80067aa:	e134      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 83	:
		case 84	:
		case 85	:
		case 86	:
			VPP_ApplyPresetToSync( VPP22	);
 80067ac:	2015      	movs	r0, #21
 80067ae:	f7fe feb9 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80067b2:	e130      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 87	:
		case 88	:
		case 89	:
		case 90	:
			VPP_ApplyPresetToSync( VPP23	);
 80067b4:	2016      	movs	r0, #22
 80067b6:	f7fe feb5 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80067ba:	e12c      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 91	:
		case 92	:
		case 93	:
		case 94	:
			VPP_ApplyPresetToSync( VPP24	);
 80067bc:	2017      	movs	r0, #23
 80067be:	f7fe feb1 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80067c2:	e128      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 95	:
		case 96	:
		case 97	:
		case 98	:
			VPP_ApplyPresetToSync( VPP25	);
 80067c4:	2018      	movs	r0, #24
 80067c6:	f7fe fead 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80067ca:	e124      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 99		:
		case 100	:
		case 101	:
		case 102	:
			VPP_ApplyPresetToSync( VPP26	);
 80067cc:	2019      	movs	r0, #25
 80067ce:	f7fe fea9 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80067d2:	e120      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 103	:
		case 104	:
		case 105	:
		case 106	:
			VPP_ApplyPresetToSync( VPP27	);
 80067d4:	201a      	movs	r0, #26
 80067d6:	f7fe fea5 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80067da:	e11c      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 107	:
		case 108	:
		case 109	:
		case 110	:
			VPP_ApplyPresetToSync( VPP28	);
 80067dc:	201b      	movs	r0, #27
 80067de:	f7fe fea1 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80067e2:	e118      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 111	:
		case 112	:
		case 113	:
		case 114	:
			VPP_ApplyPresetToSync( VPP29	);
 80067e4:	201c      	movs	r0, #28
 80067e6:	f7fe fe9d 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80067ea:	e114      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 115	:
		case 116	:
		case 117	:
		case 118	:
			VPP_ApplyPresetToSync( VPP30	);
 80067ec:	201d      	movs	r0, #29
 80067ee:	f7fe fe99 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80067f2:	e110      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 119	:
		case 120	:
		case 121	:
		case 122	:
			VPP_ApplyPresetToSync( VPP31	);
 80067f4:	201e      	movs	r0, #30
 80067f6:	f7fe fe95 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80067fa:	e10c      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 123	:
		case 124	:
		case 125	:
		case 126	:
			VPP_ApplyPresetToSync( VPP32	);
 80067fc:	201f      	movs	r0, #31
 80067fe:	f7fe fe91 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006802:	e108      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 127	:
		case 128	:
		case 129	:
		case 130	:
			VPP_ApplyPresetToSync( VPP33	);
 8006804:	2020      	movs	r0, #32
 8006806:	f7fe fe8d 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800680a:	e104      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 131	:
		case 132	:
		case 133	:
		case 134	:
			VPP_ApplyPresetToSync( VPP34	);
 800680c:	2021      	movs	r0, #33	; 0x21
 800680e:	f7fe fe89 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006812:	e100      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 135	:
		case 136	:
		case 137	:
		case 138	:
			VPP_ApplyPresetToSync( VPP35	);
 8006814:	2022      	movs	r0, #34	; 0x22
 8006816:	f7fe fe85 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800681a:	e0fc      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 139	:
		case 140	:
		case 141	:
		case 142	:
			VPP_ApplyPresetToSync( VPP36	);
 800681c:	2023      	movs	r0, #35	; 0x23
 800681e:	f7fe fe81 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006822:	e0f8      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 143	:
		case 144	:
		case 145	:
		case 146	:
			VPP_ApplyPresetToSync( VPP37	);
 8006824:	2024      	movs	r0, #36	; 0x24
 8006826:	f7fe fe7d 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800682a:	e0f4      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 147	:
		case 148	:
		case 149	:
		case 150	:
			VPP_ApplyPresetToSync( VPP38	);
 800682c:	2025      	movs	r0, #37	; 0x25
 800682e:	f7fe fe79 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006832:	e0f0      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 151	:
		case 152	:
		case 153	:
		case 154	:
			VPP_ApplyPresetToSync( VPP39	);
 8006834:	2026      	movs	r0, #38	; 0x26
 8006836:	f7fe fe75 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800683a:	e0ec      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 155	:
		case 156	:
		case 157	:
		case 158	:
			VPP_ApplyPresetToSync( VPP40	);
 800683c:	2027      	movs	r0, #39	; 0x27
 800683e:	f7fe fe71 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006842:	e0e8      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 159	:
		case 160	:
		case 161	:
		case 162	:
			VPP_ApplyPresetToSync( VPP41	);
 8006844:	2028      	movs	r0, #40	; 0x28
 8006846:	f7fe fe6d 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800684a:	e0e4      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 163	:
		case 164	:
		case 165	:
		case 166	:
			VPP_ApplyPresetToSync( VPP42	);
 800684c:	2029      	movs	r0, #41	; 0x29
 800684e:	f7fe fe69 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006852:	e0e0      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 167	:
		case 168	:
		case 169	:
		case 170	:
			VPP_ApplyPresetToSync( VPP43	);
 8006854:	202a      	movs	r0, #42	; 0x2a
 8006856:	f7fe fe65 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800685a:	e0dc      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 171	:
		case 172	:
		case 173	:
		case 174	:
			VPP_ApplyPresetToSync( VPP44	);
 800685c:	202b      	movs	r0, #43	; 0x2b
 800685e:	f7fe fe61 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006862:	e0d8      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 175	:
		case 176	:
		case 177	:
		case 178	:
			VPP_ApplyPresetToSync( VPP45	);
 8006864:	202c      	movs	r0, #44	; 0x2c
 8006866:	f7fe fe5d 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800686a:	e0d4      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 179	:
		case 180	:
		case 181	:
		case 182	:
			VPP_ApplyPresetToSync( VPP46	);
 800686c:	202d      	movs	r0, #45	; 0x2d
 800686e:	f7fe fe59 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006872:	e0d0      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 183	:
		case 184	:
		case 185	:
		case 186	:
			VPP_ApplyPresetToSync( VPP47	);
 8006874:	202e      	movs	r0, #46	; 0x2e
 8006876:	f7fe fe55 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800687a:	e0cc      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 187	:
		case 188	:
		case 189	:
		case 190	:
			VPP_ApplyPresetToSync( VPP48	);
 800687c:	202f      	movs	r0, #47	; 0x2f
 800687e:	f7fe fe51 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006882:	e0c8      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 191	:
		case 192	:
		case 193	:
		case 194	:
			VPP_ApplyPresetToSync( VPP49	);
 8006884:	2030      	movs	r0, #48	; 0x30
 8006886:	f7fe fe4d 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800688a:	e0c4      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 195	:
		case 196	:
		case 197	:
		case 198	:
			VPP_ApplyPresetToSync( VPP50	);
 800688c:	2031      	movs	r0, #49	; 0x31
 800688e:	f7fe fe49 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006892:	e0c0      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 199	:
		case 200	:
		case 201	:
		case 202	:
			VPP_ApplyPresetToSync( VPP51	);
 8006894:	2032      	movs	r0, #50	; 0x32
 8006896:	f7fe fe45 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800689a:	e0bc      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 203	:
		case 204	:
		case 205	:
		case 206	:
			VPP_ApplyPresetToSync( VPP52	);
 800689c:	2033      	movs	r0, #51	; 0x33
 800689e:	f7fe fe41 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80068a2:	e0b8      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 207	:
		case 208	:
		case 209	:
		case 210	:
			VPP_ApplyPresetToSync( VPP53	);
 80068a4:	2034      	movs	r0, #52	; 0x34
 80068a6:	f7fe fe3d 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80068aa:	e0b4      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 211	:
		case 212	:
		case 213	:
		case 214	:
			VPP_ApplyPresetToSync( VPP54	);
 80068ac:	2035      	movs	r0, #53	; 0x35
 80068ae:	f7fe fe39 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80068b2:	e0b0      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 215	:
		case 216	:
		case 217	:
		case 218	:
			VPP_ApplyPresetToSync( VPP55	);
 80068b4:	2036      	movs	r0, #54	; 0x36
 80068b6:	f7fe fe35 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80068ba:	e0ac      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 219	:
		case 220	:
		case 221	:
		case 222	:
			VPP_ApplyPresetToSync( VPP56	);
 80068bc:	2037      	movs	r0, #55	; 0x37
 80068be:	f7fe fe31 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80068c2:	e0a8      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 223	:
		case 224	:
		case 225	:
		case 226	:
			VPP_ApplyPresetToSync( VPP57	);
 80068c4:	2038      	movs	r0, #56	; 0x38
 80068c6:	f7fe fe2d 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80068ca:	e0a4      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 227	:
		case 228	:
		case 229	:
		case 230	:
			VPP_ApplyPresetToSync( VPP58	);
 80068cc:	2039      	movs	r0, #57	; 0x39
 80068ce:	f7fe fe29 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80068d2:	e0a0      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 231	:
		case 232	:
		case 233	:
		case 234	:
			VPP_ApplyPresetToSync( VPP59	);
 80068d4:	203a      	movs	r0, #58	; 0x3a
 80068d6:	f7fe fe25 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80068da:	e09c      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 235	:
		case 236	:
		case 237	:
		case 238	:
			VPP_ApplyPresetToSync( VPP60	);
 80068dc:	203b      	movs	r0, #59	; 0x3b
 80068de:	f7fe fe21 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80068e2:	e098      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 239	:
		case 240	:
		case 241	:
		case 242	:
			VPP_ApplyPresetToSync( VPP61	);
 80068e4:	203c      	movs	r0, #60	; 0x3c
 80068e6:	f7fe fe1d 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80068ea:	e094      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 243	:
		case 244	:
		case 245	:
		case 246	:
			VPP_ApplyPresetToSync( VPP62	);
 80068ec:	203d      	movs	r0, #61	; 0x3d
 80068ee:	f7fe fe19 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80068f2:	e090      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 247	:
		case 248	:
		case 249	:
		case 250	:
			VPP_ApplyPresetToSync( VPP63	);
 80068f4:	203e      	movs	r0, #62	; 0x3e
 80068f6:	f7fe fe15 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80068fa:	e08c      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 251	:
		case 252	:
		case 253	:
		case 254	:
			VPP_ApplyPresetToSync( VPP64	);
 80068fc:	203f      	movs	r0, #63	; 0x3f
 80068fe:	f7fe fe11 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006902:	e088      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 255	:
		case 256	:
		case 257	:
		case 258	:
			VPP_ApplyPresetToSync( VPP65	);
 8006904:	2040      	movs	r0, #64	; 0x40
 8006906:	f7fe fe0d 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800690a:	e084      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 259	:
		case 260	:
		case 261	:
		case 262	:
			VPP_ApplyPresetToSync( VPP66	);
 800690c:	2041      	movs	r0, #65	; 0x41
 800690e:	f7fe fe09 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006912:	e080      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 263	:
		case 264	:
		case 265	:
		case 266	:
			VPP_ApplyPresetToSync( VPP67	);
 8006914:	2042      	movs	r0, #66	; 0x42
 8006916:	f7fe fe05 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800691a:	e07c      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 267	:
		case 268	:
		case 269	:
		case 270	:
			VPP_ApplyPresetToSync( VPP68	);
 800691c:	2043      	movs	r0, #67	; 0x43
 800691e:	f7fe fe01 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006922:	e078      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 271	:
		case 272	:
		case 273	:
		case 274	:
			VPP_ApplyPresetToSync( VPP69	);
 8006924:	2044      	movs	r0, #68	; 0x44
 8006926:	f7fe fdfd 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800692a:	e074      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 275	:
		case 276	:
		case 277	:
		case 278	:
			VPP_ApplyPresetToSync( VPP70	);
 800692c:	2045      	movs	r0, #69	; 0x45
 800692e:	f7fe fdf9 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006932:	e070      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 279	:
		case 280	:
		case 281	:
		case 282	:
			VPP_ApplyPresetToSync( VPP71	);
 8006934:	2046      	movs	r0, #70	; 0x46
 8006936:	f7fe fdf5 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800693a:	e06c      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 283	:
		case 284	:
		case 285	:
		case 286	:
			VPP_ApplyPresetToSync( VPP72	);
 800693c:	2047      	movs	r0, #71	; 0x47
 800693e:	f7fe fdf1 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006942:	e068      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 287	:
		case 288	:
		case 289	:
		case 290	:
			VPP_ApplyPresetToSync( VPP73	);
 8006944:	2048      	movs	r0, #72	; 0x48
 8006946:	f7fe fded 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800694a:	e064      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 291	:
		case 292	:
		case 293	:
		case 294	:
			VPP_ApplyPresetToSync( VPP74	);
 800694c:	2049      	movs	r0, #73	; 0x49
 800694e:	f7fe fde9 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006952:	e060      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 295	:
		case 296	:
		case 297	:
		case 298	:
			VPP_ApplyPresetToSync( VPP75	);
 8006954:	204a      	movs	r0, #74	; 0x4a
 8006956:	f7fe fde5 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800695a:	e05c      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 299	:
		case 300	:
		case 301	:
		case 302	:
			VPP_ApplyPresetToSync( VPP76	);
 800695c:	204b      	movs	r0, #75	; 0x4b
 800695e:	f7fe fde1 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006962:	e058      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 303	:
		case 304	:
		case 305	:
		case 306	:
			VPP_ApplyPresetToSync( VPP77	);
 8006964:	204c      	movs	r0, #76	; 0x4c
 8006966:	f7fe fddd 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800696a:	e054      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 307	:
		case 308	:
		case 309	:
		case 310	:
			VPP_ApplyPresetToSync( VPP78	);
 800696c:	204d      	movs	r0, #77	; 0x4d
 800696e:	f7fe fdd9 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006972:	e050      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 311	:
		case 312	:
		case 313	:
		case 314	:
			VPP_ApplyPresetToSync( VPP79	);
 8006974:	204e      	movs	r0, #78	; 0x4e
 8006976:	f7fe fdd5 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800697a:	e04c      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 315	:
		case 316	:
		case 317	:
		case 318	:
			VPP_ApplyPresetToSync( VPP80	);
 800697c:	204f      	movs	r0, #79	; 0x4f
 800697e:	f7fe fdd1 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006982:	e048      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 319	:
		case 320	:
		case 321	:
		case 322	:
			VPP_ApplyPresetToSync( VPP81	);
 8006984:	2050      	movs	r0, #80	; 0x50
 8006986:	f7fe fdcd 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800698a:	e044      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 323	:
		case 324	:
		case 325	:
		case 326	:
			VPP_ApplyPresetToSync( VPP82	);
 800698c:	2051      	movs	r0, #81	; 0x51
 800698e:	f7fe fdc9 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006992:	e040      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 327	:
		case 328	:
		case 329	:
		case 330	:
			VPP_ApplyPresetToSync( VPP83	);
 8006994:	2052      	movs	r0, #82	; 0x52
 8006996:	f7fe fdc5 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 800699a:	e03c      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 331	:
		case 332	:
		case 333	:
		case 334	:
			VPP_ApplyPresetToSync( VPP84	);
 800699c:	2053      	movs	r0, #83	; 0x53
 800699e:	f7fe fdc1 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80069a2:	e038      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 335	:
		case 336	:
		case 337	:
		case 338	:
			VPP_ApplyPresetToSync( VPP85	);
 80069a4:	2054      	movs	r0, #84	; 0x54
 80069a6:	f7fe fdbd 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80069aa:	e034      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 339	:
		case 340	:
		case 341	:
		case 342	:
			VPP_ApplyPresetToSync( VPP86	);
 80069ac:	2055      	movs	r0, #85	; 0x55
 80069ae:	f7fe fdb9 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80069b2:	e030      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 343	:
		case 344	:
		case 345	:
		case 346	:
			VPP_ApplyPresetToSync( VPP87	);
 80069b4:	2056      	movs	r0, #86	; 0x56
 80069b6:	f7fe fdb5 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80069ba:	e02c      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 347	:
		case 348	:
		case 349	:
		case 350	:
			VPP_ApplyPresetToSync( VPP88	);
 80069bc:	2057      	movs	r0, #87	; 0x57
 80069be:	f7fe fdb1 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80069c2:	e028      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 351	:
		case 352	:
		case 353	:
		case 354	:
			VPP_ApplyPresetToSync( VPP89	);
 80069c4:	2058      	movs	r0, #88	; 0x58
 80069c6:	f7fe fdad 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80069ca:	e024      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 355	:
		case 356	:
		case 357	:
		case 358	:
			VPP_ApplyPresetToSync( VPP90	);
 80069cc:	2059      	movs	r0, #89	; 0x59
 80069ce:	f7fe fda9 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80069d2:	e020      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 359	:
		case 360	:
		case 361	:
		case 362	:
			VPP_ApplyPresetToSync( VPP91	);
 80069d4:	205a      	movs	r0, #90	; 0x5a
 80069d6:	f7fe fda5 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80069da:	e01c      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 363	:
		case 364	:
		case 365	:
		case 366	:
			VPP_ApplyPresetToSync( VPP92	);
 80069dc:	205b      	movs	r0, #91	; 0x5b
 80069de:	f7fe fda1 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80069e2:	e018      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 367	:
		case 368	:
		case 369	:
		case 370	:
			VPP_ApplyPresetToSync( VPP93	);
 80069e4:	205c      	movs	r0, #92	; 0x5c
 80069e6:	f7fe fd9d 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80069ea:	e014      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 371	:
		case 372	:
		case 373	:
		case 374	:
			VPP_ApplyPresetToSync( VPP94	);
 80069ec:	205d      	movs	r0, #93	; 0x5d
 80069ee:	f7fe fd99 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80069f2:	e010      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 375	:
		case 376	:
		case 377	:
		case 378	:
			VPP_ApplyPresetToSync( VPP95	);
 80069f4:	205e      	movs	r0, #94	; 0x5e
 80069f6:	f7fe fd95 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 80069fa:	e00c      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 379	:
		case 380	:
		case 381	:
		case 382	:
			VPP_ApplyPresetToSync( VPP96	);
 80069fc:	205f      	movs	r0, #95	; 0x5f
 80069fe:	f7fe fd91 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006a02:	e008      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 383	:
		case 384	:
		case 385	:
		case 386	:
			VPP_ApplyPresetToSync( VPP97	);
 8006a04:	2060      	movs	r0, #96	; 0x60
 8006a06:	f7fe fd8d 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006a0a:	e004      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>
		case 387	:
		case 388	:
		case 389	:
		case 390	:
			VPP_ApplyPresetToSync( VPP98	);
 8006a0c:	2061      	movs	r0, #97	; 0x61
 8006a0e:	f7fe fd89 	bl	8005524 <VPP_ApplyPresetToSync>
			break;
 8006a12:	e000      	b.n	8006a16 <VPP_ModifySyncOutput+0x94a>

		default:
			break;
 8006a14:	bf00      	nop
	}
}
 8006a16:	bf00      	nop
 8006a18:	3708      	adds	r7, #8
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop

08006a20 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b08c      	sub	sp, #48	; 0x30
 8006a24:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8006a26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	601a      	str	r2, [r3, #0]
 8006a2e:	605a      	str	r2, [r3, #4]
 8006a30:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8006a32:	1d3b      	adds	r3, r7, #4
 8006a34:	2220      	movs	r2, #32
 8006a36:	2100      	movs	r1, #0
 8006a38:	4618      	mov	r0, r3
 8006a3a:	f007 fd93 	bl	800e564 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8006a3e:	4b32      	ldr	r3, [pc, #200]	; (8006b08 <MX_ADC1_Init+0xe8>)
 8006a40:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006a44:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8006a46:	4b30      	ldr	r3, [pc, #192]	; (8006b08 <MX_ADC1_Init+0xe8>)
 8006a48:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006a4c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8006a4e:	4b2e      	ldr	r3, [pc, #184]	; (8006b08 <MX_ADC1_Init+0xe8>)
 8006a50:	2200      	movs	r2, #0
 8006a52:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8006a54:	4b2c      	ldr	r3, [pc, #176]	; (8006b08 <MX_ADC1_Init+0xe8>)
 8006a56:	2200      	movs	r2, #0
 8006a58:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8006a5a:	4b2b      	ldr	r3, [pc, #172]	; (8006b08 <MX_ADC1_Init+0xe8>)
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8006a60:	4b29      	ldr	r3, [pc, #164]	; (8006b08 <MX_ADC1_Init+0xe8>)
 8006a62:	2200      	movs	r2, #0
 8006a64:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8006a66:	4b28      	ldr	r3, [pc, #160]	; (8006b08 <MX_ADC1_Init+0xe8>)
 8006a68:	2204      	movs	r2, #4
 8006a6a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8006a6c:	4b26      	ldr	r3, [pc, #152]	; (8006b08 <MX_ADC1_Init+0xe8>)
 8006a6e:	2200      	movs	r2, #0
 8006a70:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8006a72:	4b25      	ldr	r3, [pc, #148]	; (8006b08 <MX_ADC1_Init+0xe8>)
 8006a74:	2201      	movs	r2, #1
 8006a76:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8006a78:	4b23      	ldr	r3, [pc, #140]	; (8006b08 <MX_ADC1_Init+0xe8>)
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8006a7e:	4b22      	ldr	r3, [pc, #136]	; (8006b08 <MX_ADC1_Init+0xe8>)
 8006a80:	2200      	movs	r2, #0
 8006a82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8006a86:	4b20      	ldr	r3, [pc, #128]	; (8006b08 <MX_ADC1_Init+0xe8>)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006a8c:	4b1e      	ldr	r3, [pc, #120]	; (8006b08 <MX_ADC1_Init+0xe8>)
 8006a8e:	2200      	movs	r2, #0
 8006a90:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8006a92:	4b1d      	ldr	r3, [pc, #116]	; (8006b08 <MX_ADC1_Init+0xe8>)
 8006a94:	2201      	movs	r2, #1
 8006a96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8006a9a:	4b1b      	ldr	r3, [pc, #108]	; (8006b08 <MX_ADC1_Init+0xe8>)
 8006a9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006aa0:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8006aa2:	4b19      	ldr	r3, [pc, #100]	; (8006b08 <MX_ADC1_Init+0xe8>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8006aaa:	4817      	ldr	r0, [pc, #92]	; (8006b08 <MX_ADC1_Init+0xe8>)
 8006aac:	f001 fee2 	bl	8008874 <HAL_ADC_Init>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d001      	beq.n	8006aba <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8006ab6:	f000 feaf 	bl	8007818 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8006aba:	2300      	movs	r3, #0
 8006abc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8006abe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ac2:	4619      	mov	r1, r3
 8006ac4:	4810      	ldr	r0, [pc, #64]	; (8006b08 <MX_ADC1_Init+0xe8>)
 8006ac6:	f002 fc6b 	bl	80093a0 <HAL_ADCEx_MultiModeConfigChannel>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d001      	beq.n	8006ad4 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8006ad0:	f000 fea2 	bl	8007818 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8006ad4:	4b0d      	ldr	r3, [pc, #52]	; (8006b0c <MX_ADC1_Init+0xec>)
 8006ad6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8006ad8:	2306      	movs	r3, #6
 8006ada:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8006adc:	2300      	movs	r3, #0
 8006ade:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8006ae0:	237f      	movs	r3, #127	; 0x7f
 8006ae2:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8006ae4:	2304      	movs	r3, #4
 8006ae6:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8006aec:	1d3b      	adds	r3, r7, #4
 8006aee:	4619      	mov	r1, r3
 8006af0:	4805      	ldr	r0, [pc, #20]	; (8006b08 <MX_ADC1_Init+0xe8>)
 8006af2:	f002 f87f 	bl	8008bf4 <HAL_ADC_ConfigChannel>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d001      	beq.n	8006b00 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8006afc:	f000 fe8c 	bl	8007818 <Error_Handler>
  }

}
 8006b00:	bf00      	nop
 8006b02:	3730      	adds	r7, #48	; 0x30
 8006b04:	46bd      	mov	sp, r7
 8006b06:	bd80      	pop	{r7, pc}
 8006b08:	2000200c 	.word	0x2000200c
 8006b0c:	0c900008 	.word	0x0c900008

08006b10 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b08a      	sub	sp, #40	; 0x28
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b18:	f107 0314 	add.w	r3, r7, #20
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	601a      	str	r2, [r3, #0]
 8006b20:	605a      	str	r2, [r3, #4]
 8006b22:	609a      	str	r2, [r3, #8]
 8006b24:	60da      	str	r2, [r3, #12]
 8006b26:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b30:	d14f      	bne.n	8006bd2 <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8006b32:	4b2a      	ldr	r3, [pc, #168]	; (8006bdc <HAL_ADC_MspInit+0xcc>)
 8006b34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b36:	4a29      	ldr	r2, [pc, #164]	; (8006bdc <HAL_ADC_MspInit+0xcc>)
 8006b38:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006b3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b3e:	4b27      	ldr	r3, [pc, #156]	; (8006bdc <HAL_ADC_MspInit+0xcc>)
 8006b40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b42:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006b46:	613b      	str	r3, [r7, #16]
 8006b48:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b4a:	4b24      	ldr	r3, [pc, #144]	; (8006bdc <HAL_ADC_MspInit+0xcc>)
 8006b4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b4e:	4a23      	ldr	r2, [pc, #140]	; (8006bdc <HAL_ADC_MspInit+0xcc>)
 8006b50:	f043 0301 	orr.w	r3, r3, #1
 8006b54:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b56:	4b21      	ldr	r3, [pc, #132]	; (8006bdc <HAL_ADC_MspInit+0xcc>)
 8006b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b5a:	f003 0301 	and.w	r3, r3, #1
 8006b5e:	60fb      	str	r3, [r7, #12]
 8006b60:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8006b62:	2304      	movs	r3, #4
 8006b64:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006b66:	2303      	movs	r3, #3
 8006b68:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b6e:	f107 0314 	add.w	r3, r7, #20
 8006b72:	4619      	mov	r1, r3
 8006b74:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006b78:	f003 fff4 	bl	800ab64 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8006b7c:	4b18      	ldr	r3, [pc, #96]	; (8006be0 <HAL_ADC_MspInit+0xd0>)
 8006b7e:	4a19      	ldr	r2, [pc, #100]	; (8006be4 <HAL_ADC_MspInit+0xd4>)
 8006b80:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8006b82:	4b17      	ldr	r3, [pc, #92]	; (8006be0 <HAL_ADC_MspInit+0xd0>)
 8006b84:	2205      	movs	r2, #5
 8006b86:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006b88:	4b15      	ldr	r3, [pc, #84]	; (8006be0 <HAL_ADC_MspInit+0xd0>)
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006b8e:	4b14      	ldr	r3, [pc, #80]	; (8006be0 <HAL_ADC_MspInit+0xd0>)
 8006b90:	2200      	movs	r2, #0
 8006b92:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006b94:	4b12      	ldr	r3, [pc, #72]	; (8006be0 <HAL_ADC_MspInit+0xd0>)
 8006b96:	2280      	movs	r2, #128	; 0x80
 8006b98:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006b9a:	4b11      	ldr	r3, [pc, #68]	; (8006be0 <HAL_ADC_MspInit+0xd0>)
 8006b9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ba0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006ba2:	4b0f      	ldr	r3, [pc, #60]	; (8006be0 <HAL_ADC_MspInit+0xd0>)
 8006ba4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ba8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8006baa:	4b0d      	ldr	r3, [pc, #52]	; (8006be0 <HAL_ADC_MspInit+0xd0>)
 8006bac:	2220      	movs	r2, #32
 8006bae:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006bb0:	4b0b      	ldr	r3, [pc, #44]	; (8006be0 <HAL_ADC_MspInit+0xd0>)
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8006bb6:	480a      	ldr	r0, [pc, #40]	; (8006be0 <HAL_ADC_MspInit+0xd0>)
 8006bb8:	f003 fd08 	bl	800a5cc <HAL_DMA_Init>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d001      	beq.n	8006bc6 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8006bc2:	f000 fe29 	bl	8007818 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	4a05      	ldr	r2, [pc, #20]	; (8006be0 <HAL_ADC_MspInit+0xd0>)
 8006bca:	655a      	str	r2, [r3, #84]	; 0x54
 8006bcc:	4a04      	ldr	r2, [pc, #16]	; (8006be0 <HAL_ADC_MspInit+0xd0>)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006bd2:	bf00      	nop
 8006bd4:	3728      	adds	r7, #40	; 0x28
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}
 8006bda:	bf00      	nop
 8006bdc:	40021000 	.word	0x40021000
 8006be0:	20002078 	.word	0x20002078
 8006be4:	40020008 	.word	0x40020008

08006be8 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8006bec:	4b0f      	ldr	r3, [pc, #60]	; (8006c2c <MX_COMP1_Init+0x44>)
 8006bee:	4a10      	ldr	r2, [pc, #64]	; (8006c30 <MX_COMP1_Init+0x48>)
 8006bf0:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8006bf2:	4b0e      	ldr	r3, [pc, #56]	; (8006c2c <MX_COMP1_Init+0x44>)
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8006bf8:	4b0c      	ldr	r3, [pc, #48]	; (8006c2c <MX_COMP1_Init+0x44>)
 8006bfa:	4a0e      	ldr	r2, [pc, #56]	; (8006c34 <MX_COMP1_Init+0x4c>)
 8006bfc:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8006bfe:	4b0b      	ldr	r3, [pc, #44]	; (8006c2c <MX_COMP1_Init+0x44>)
 8006c00:	2200      	movs	r2, #0
 8006c02:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8006c04:	4b09      	ldr	r3, [pc, #36]	; (8006c2c <MX_COMP1_Init+0x44>)
 8006c06:	2200      	movs	r2, #0
 8006c08:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8006c0a:	4b08      	ldr	r3, [pc, #32]	; (8006c2c <MX_COMP1_Init+0x44>)
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8006c10:	4b06      	ldr	r3, [pc, #24]	; (8006c2c <MX_COMP1_Init+0x44>)
 8006c12:	2200      	movs	r2, #0
 8006c14:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8006c16:	4805      	ldr	r0, [pc, #20]	; (8006c2c <MX_COMP1_Init+0x44>)
 8006c18:	f002 fe16 	bl	8009848 <HAL_COMP_Init>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d001      	beq.n	8006c26 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8006c22:	f000 fdf9 	bl	8007818 <Error_Handler>
  }

}
 8006c26:	bf00      	nop
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop
 8006c2c:	200020d8 	.word	0x200020d8
 8006c30:	40010200 	.word	0x40010200
 8006c34:	00800030 	.word	0x00800030

08006c38 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b088      	sub	sp, #32
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c40:	f107 030c 	add.w	r3, r7, #12
 8006c44:	2200      	movs	r2, #0
 8006c46:	601a      	str	r2, [r3, #0]
 8006c48:	605a      	str	r2, [r3, #4]
 8006c4a:	609a      	str	r2, [r3, #8]
 8006c4c:	60da      	str	r2, [r3, #12]
 8006c4e:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	4a0f      	ldr	r2, [pc, #60]	; (8006c94 <HAL_COMP_MspInit+0x5c>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d118      	bne.n	8006c8c <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006c5a:	4b0f      	ldr	r3, [pc, #60]	; (8006c98 <HAL_COMP_MspInit+0x60>)
 8006c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c5e:	4a0e      	ldr	r2, [pc, #56]	; (8006c98 <HAL_COMP_MspInit+0x60>)
 8006c60:	f043 0301 	orr.w	r3, r3, #1
 8006c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006c66:	4b0c      	ldr	r3, [pc, #48]	; (8006c98 <HAL_COMP_MspInit+0x60>)
 8006c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006c6a:	f003 0301 	and.w	r3, r3, #1
 8006c6e:	60bb      	str	r3, [r7, #8]
 8006c70:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8006c72:	2302      	movs	r3, #2
 8006c74:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006c76:	2303      	movs	r3, #3
 8006c78:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c7a:	2300      	movs	r3, #0
 8006c7c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c7e:	f107 030c 	add.w	r3, r7, #12
 8006c82:	4619      	mov	r1, r3
 8006c84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006c88:	f003 ff6c 	bl	800ab64 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8006c8c:	bf00      	nop
 8006c8e:	3720      	adds	r7, #32
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	40010200 	.word	0x40010200
 8006c98:	40021000 	.word	0x40021000

08006c9c <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b08c      	sub	sp, #48	; 0x30
 8006ca0:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8006ca2:	463b      	mov	r3, r7
 8006ca4:	2230      	movs	r2, #48	; 0x30
 8006ca6:	2100      	movs	r1, #0
 8006ca8:	4618      	mov	r0, r3
 8006caa:	f007 fc5b 	bl	800e564 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8006cae:	4b1e      	ldr	r3, [pc, #120]	; (8006d28 <MX_DAC1_Init+0x8c>)
 8006cb0:	4a1e      	ldr	r2, [pc, #120]	; (8006d2c <MX_DAC1_Init+0x90>)
 8006cb2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8006cb4:	481c      	ldr	r0, [pc, #112]	; (8006d28 <MX_DAC1_Init+0x8c>)
 8006cb6:	f003 f86a 	bl	8009d8e <HAL_DAC_Init>
 8006cba:	4603      	mov	r3, r0
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d001      	beq.n	8006cc4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8006cc0:	f000 fdaa 	bl	8007818 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006cc4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006cc8:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8006cce:	2300      	movs	r3, #0
 8006cd0:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006cd6:	2306      	movs	r3, #6
 8006cd8:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006cea:	463b      	mov	r3, r7
 8006cec:	2200      	movs	r2, #0
 8006cee:	4619      	mov	r1, r3
 8006cf0:	480d      	ldr	r0, [pc, #52]	; (8006d28 <MX_DAC1_Init+0x8c>)
 8006cf2:	f003 fa35 	bl	800a160 <HAL_DAC_ConfigChannel>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d001      	beq.n	8006d00 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8006cfc:	f000 fd8c 	bl	8007818 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8006d00:	2300      	movs	r3, #0
 8006d02:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006d04:	2301      	movs	r3, #1
 8006d06:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8006d08:	463b      	mov	r3, r7
 8006d0a:	2210      	movs	r2, #16
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	4806      	ldr	r0, [pc, #24]	; (8006d28 <MX_DAC1_Init+0x8c>)
 8006d10:	f003 fa26 	bl	800a160 <HAL_DAC_ConfigChannel>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d001      	beq.n	8006d1e <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8006d1a:	f000 fd7d 	bl	8007818 <Error_Handler>
  }

}
 8006d1e:	bf00      	nop
 8006d20:	3730      	adds	r7, #48	; 0x30
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	20002110 	.word	0x20002110
 8006d2c:	50000800 	.word	0x50000800

08006d30 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b08c      	sub	sp, #48	; 0x30
 8006d34:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8006d36:	463b      	mov	r3, r7
 8006d38:	2230      	movs	r2, #48	; 0x30
 8006d3a:	2100      	movs	r1, #0
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f007 fc11 	bl	800e564 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8006d42:	4b16      	ldr	r3, [pc, #88]	; (8006d9c <MX_DAC2_Init+0x6c>)
 8006d44:	4a16      	ldr	r2, [pc, #88]	; (8006da0 <MX_DAC2_Init+0x70>)
 8006d46:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8006d48:	4814      	ldr	r0, [pc, #80]	; (8006d9c <MX_DAC2_Init+0x6c>)
 8006d4a:	f003 f820 	bl	8009d8e <HAL_DAC_Init>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d001      	beq.n	8006d58 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8006d54:	f000 fd60 	bl	8007818 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006d58:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006d5c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8006d62:	2300      	movs	r3, #0
 8006d64:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8006d66:	2300      	movs	r3, #0
 8006d68:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006d6a:	2306      	movs	r3, #6
 8006d6c:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8006d72:	2300      	movs	r3, #0
 8006d74:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8006d76:	2301      	movs	r3, #1
 8006d78:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006d7e:	463b      	mov	r3, r7
 8006d80:	2200      	movs	r2, #0
 8006d82:	4619      	mov	r1, r3
 8006d84:	4805      	ldr	r0, [pc, #20]	; (8006d9c <MX_DAC2_Init+0x6c>)
 8006d86:	f003 f9eb 	bl	800a160 <HAL_DAC_ConfigChannel>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d001      	beq.n	8006d94 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8006d90:	f000 fd42 	bl	8007818 <Error_Handler>
  }

}
 8006d94:	bf00      	nop
 8006d96:	3730      	adds	r7, #48	; 0x30
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	200020fc 	.word	0x200020fc
 8006da0:	50000c00 	.word	0x50000c00

08006da4 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8006da4:	b580      	push	{r7, lr}
 8006da6:	b08c      	sub	sp, #48	; 0x30
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006dac:	f107 031c 	add.w	r3, r7, #28
 8006db0:	2200      	movs	r2, #0
 8006db2:	601a      	str	r2, [r3, #0]
 8006db4:	605a      	str	r2, [r3, #4]
 8006db6:	609a      	str	r2, [r3, #8]
 8006db8:	60da      	str	r2, [r3, #12]
 8006dba:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	4a56      	ldr	r2, [pc, #344]	; (8006f1c <HAL_DAC_MspInit+0x178>)
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d150      	bne.n	8006e68 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8006dc6:	4b56      	ldr	r3, [pc, #344]	; (8006f20 <HAL_DAC_MspInit+0x17c>)
 8006dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dca:	4a55      	ldr	r2, [pc, #340]	; (8006f20 <HAL_DAC_MspInit+0x17c>)
 8006dcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006dd2:	4b53      	ldr	r3, [pc, #332]	; (8006f20 <HAL_DAC_MspInit+0x17c>)
 8006dd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dda:	61bb      	str	r3, [r7, #24]
 8006ddc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006dde:	4b50      	ldr	r3, [pc, #320]	; (8006f20 <HAL_DAC_MspInit+0x17c>)
 8006de0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006de2:	4a4f      	ldr	r2, [pc, #316]	; (8006f20 <HAL_DAC_MspInit+0x17c>)
 8006de4:	f043 0301 	orr.w	r3, r3, #1
 8006de8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006dea:	4b4d      	ldr	r3, [pc, #308]	; (8006f20 <HAL_DAC_MspInit+0x17c>)
 8006dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dee:	f003 0301 	and.w	r3, r3, #1
 8006df2:	617b      	str	r3, [r7, #20]
 8006df4:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8006df6:	2330      	movs	r3, #48	; 0x30
 8006df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006dfe:	2300      	movs	r3, #0
 8006e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e02:	f107 031c 	add.w	r3, r7, #28
 8006e06:	4619      	mov	r1, r3
 8006e08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e0c:	f003 feaa 	bl	800ab64 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 8006e10:	4b44      	ldr	r3, [pc, #272]	; (8006f24 <HAL_DAC_MspInit+0x180>)
 8006e12:	4a45      	ldr	r2, [pc, #276]	; (8006f28 <HAL_DAC_MspInit+0x184>)
 8006e14:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8006e16:	4b43      	ldr	r3, [pc, #268]	; (8006f24 <HAL_DAC_MspInit+0x180>)
 8006e18:	2206      	movs	r2, #6
 8006e1a:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006e1c:	4b41      	ldr	r3, [pc, #260]	; (8006f24 <HAL_DAC_MspInit+0x180>)
 8006e1e:	2210      	movs	r2, #16
 8006e20:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006e22:	4b40      	ldr	r3, [pc, #256]	; (8006f24 <HAL_DAC_MspInit+0x180>)
 8006e24:	2200      	movs	r2, #0
 8006e26:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006e28:	4b3e      	ldr	r3, [pc, #248]	; (8006f24 <HAL_DAC_MspInit+0x180>)
 8006e2a:	2280      	movs	r2, #128	; 0x80
 8006e2c:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006e2e:	4b3d      	ldr	r3, [pc, #244]	; (8006f24 <HAL_DAC_MspInit+0x180>)
 8006e30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006e34:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006e36:	4b3b      	ldr	r3, [pc, #236]	; (8006f24 <HAL_DAC_MspInit+0x180>)
 8006e38:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e3c:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 8006e3e:	4b39      	ldr	r3, [pc, #228]	; (8006f24 <HAL_DAC_MspInit+0x180>)
 8006e40:	2220      	movs	r2, #32
 8006e42:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006e44:	4b37      	ldr	r3, [pc, #220]	; (8006f24 <HAL_DAC_MspInit+0x180>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8006e4a:	4836      	ldr	r0, [pc, #216]	; (8006f24 <HAL_DAC_MspInit+0x180>)
 8006e4c:	f003 fbbe 	bl	800a5cc <HAL_DMA_Init>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d001      	beq.n	8006e5a <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8006e56:	f000 fcdf 	bl	8007818 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	4a31      	ldr	r2, [pc, #196]	; (8006f24 <HAL_DAC_MspInit+0x180>)
 8006e5e:	609a      	str	r2, [r3, #8]
 8006e60:	4a30      	ldr	r2, [pc, #192]	; (8006f24 <HAL_DAC_MspInit+0x180>)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8006e66:	e054      	b.n	8006f12 <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	4a2f      	ldr	r2, [pc, #188]	; (8006f2c <HAL_DAC_MspInit+0x188>)
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	d14f      	bne.n	8006f12 <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 8006e72:	4b2b      	ldr	r3, [pc, #172]	; (8006f20 <HAL_DAC_MspInit+0x17c>)
 8006e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e76:	4a2a      	ldr	r2, [pc, #168]	; (8006f20 <HAL_DAC_MspInit+0x17c>)
 8006e78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e7e:	4b28      	ldr	r3, [pc, #160]	; (8006f20 <HAL_DAC_MspInit+0x17c>)
 8006e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e86:	613b      	str	r3, [r7, #16]
 8006e88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e8a:	4b25      	ldr	r3, [pc, #148]	; (8006f20 <HAL_DAC_MspInit+0x17c>)
 8006e8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e8e:	4a24      	ldr	r2, [pc, #144]	; (8006f20 <HAL_DAC_MspInit+0x17c>)
 8006e90:	f043 0301 	orr.w	r3, r3, #1
 8006e94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e96:	4b22      	ldr	r3, [pc, #136]	; (8006f20 <HAL_DAC_MspInit+0x17c>)
 8006e98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e9a:	f003 0301 	and.w	r3, r3, #1
 8006e9e:	60fb      	str	r3, [r7, #12]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8006ea2:	2340      	movs	r3, #64	; 0x40
 8006ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006ea6:	2303      	movs	r3, #3
 8006ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006eae:	f107 031c 	add.w	r3, r7, #28
 8006eb2:	4619      	mov	r1, r3
 8006eb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006eb8:	f003 fe54 	bl	800ab64 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8006ebc:	4b1c      	ldr	r3, [pc, #112]	; (8006f30 <HAL_DAC_MspInit+0x18c>)
 8006ebe:	4a1d      	ldr	r2, [pc, #116]	; (8006f34 <HAL_DAC_MspInit+0x190>)
 8006ec0:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 8006ec2:	4b1b      	ldr	r3, [pc, #108]	; (8006f30 <HAL_DAC_MspInit+0x18c>)
 8006ec4:	2229      	movs	r2, #41	; 0x29
 8006ec6:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006ec8:	4b19      	ldr	r3, [pc, #100]	; (8006f30 <HAL_DAC_MspInit+0x18c>)
 8006eca:	2210      	movs	r2, #16
 8006ecc:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006ece:	4b18      	ldr	r3, [pc, #96]	; (8006f30 <HAL_DAC_MspInit+0x18c>)
 8006ed0:	2200      	movs	r2, #0
 8006ed2:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8006ed4:	4b16      	ldr	r3, [pc, #88]	; (8006f30 <HAL_DAC_MspInit+0x18c>)
 8006ed6:	2280      	movs	r2, #128	; 0x80
 8006ed8:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006eda:	4b15      	ldr	r3, [pc, #84]	; (8006f30 <HAL_DAC_MspInit+0x18c>)
 8006edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ee0:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006ee2:	4b13      	ldr	r3, [pc, #76]	; (8006f30 <HAL_DAC_MspInit+0x18c>)
 8006ee4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ee8:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 8006eea:	4b11      	ldr	r3, [pc, #68]	; (8006f30 <HAL_DAC_MspInit+0x18c>)
 8006eec:	2220      	movs	r2, #32
 8006eee:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8006ef0:	4b0f      	ldr	r3, [pc, #60]	; (8006f30 <HAL_DAC_MspInit+0x18c>)
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 8006ef6:	480e      	ldr	r0, [pc, #56]	; (8006f30 <HAL_DAC_MspInit+0x18c>)
 8006ef8:	f003 fb68 	bl	800a5cc <HAL_DMA_Init>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 8006f02:	f000 fc89 	bl	8007818 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	4a09      	ldr	r2, [pc, #36]	; (8006f30 <HAL_DAC_MspInit+0x18c>)
 8006f0a:	609a      	str	r2, [r3, #8]
 8006f0c:	4a08      	ldr	r2, [pc, #32]	; (8006f30 <HAL_DAC_MspInit+0x18c>)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	6293      	str	r3, [r2, #40]	; 0x28
}
 8006f12:	bf00      	nop
 8006f14:	3730      	adds	r7, #48	; 0x30
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
 8006f1a:	bf00      	nop
 8006f1c:	50000800 	.word	0x50000800
 8006f20:	40021000 	.word	0x40021000
 8006f24:	20002124 	.word	0x20002124
 8006f28:	4002001c 	.word	0x4002001c
 8006f2c:	50000c00 	.word	0x50000c00
 8006f30:	20002184 	.word	0x20002184
 8006f34:	40020030 	.word	0x40020030

08006f38 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8006f3e:	4b1a      	ldr	r3, [pc, #104]	; (8006fa8 <MX_DMA_Init+0x70>)
 8006f40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f42:	4a19      	ldr	r2, [pc, #100]	; (8006fa8 <MX_DMA_Init+0x70>)
 8006f44:	f043 0304 	orr.w	r3, r3, #4
 8006f48:	6493      	str	r3, [r2, #72]	; 0x48
 8006f4a:	4b17      	ldr	r3, [pc, #92]	; (8006fa8 <MX_DMA_Init+0x70>)
 8006f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f4e:	f003 0304 	and.w	r3, r3, #4
 8006f52:	607b      	str	r3, [r7, #4]
 8006f54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8006f56:	4b14      	ldr	r3, [pc, #80]	; (8006fa8 <MX_DMA_Init+0x70>)
 8006f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f5a:	4a13      	ldr	r2, [pc, #76]	; (8006fa8 <MX_DMA_Init+0x70>)
 8006f5c:	f043 0301 	orr.w	r3, r3, #1
 8006f60:	6493      	str	r3, [r2, #72]	; 0x48
 8006f62:	4b11      	ldr	r3, [pc, #68]	; (8006fa8 <MX_DMA_Init+0x70>)
 8006f64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	603b      	str	r3, [r7, #0]
 8006f6c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8006f6e:	2200      	movs	r2, #0
 8006f70:	2101      	movs	r1, #1
 8006f72:	200b      	movs	r0, #11
 8006f74:	f002 fed7 	bl	8009d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006f78:	200b      	movs	r0, #11
 8006f7a:	f002 feee 	bl	8009d5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8006f7e:	2200      	movs	r2, #0
 8006f80:	2100      	movs	r1, #0
 8006f82:	200c      	movs	r0, #12
 8006f84:	f002 fecf 	bl	8009d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8006f88:	200c      	movs	r0, #12
 8006f8a:	f002 fee6 	bl	8009d5a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8006f8e:	2200      	movs	r2, #0
 8006f90:	2100      	movs	r1, #0
 8006f92:	200d      	movs	r0, #13
 8006f94:	f002 fec7 	bl	8009d26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8006f98:	200d      	movs	r0, #13
 8006f9a:	f002 fede 	bl	8009d5a <HAL_NVIC_EnableIRQ>

}
 8006f9e:	bf00      	nop
 8006fa0:	3708      	adds	r7, #8
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	40021000 	.word	0x40021000

08006fac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006fac:	b480      	push	{r7}
 8006fae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006fb0:	4b04      	ldr	r3, [pc, #16]	; (8006fc4 <__NVIC_GetPriorityGrouping+0x18>)
 8006fb2:	68db      	ldr	r3, [r3, #12]
 8006fb4:	0a1b      	lsrs	r3, r3, #8
 8006fb6:	f003 0307 	and.w	r3, r3, #7
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc2:	4770      	bx	lr
 8006fc4:	e000ed00 	.word	0xe000ed00

08006fc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	4603      	mov	r3, r0
 8006fd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	db0b      	blt.n	8006ff2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006fda:	79fb      	ldrb	r3, [r7, #7]
 8006fdc:	f003 021f 	and.w	r2, r3, #31
 8006fe0:	4907      	ldr	r1, [pc, #28]	; (8007000 <__NVIC_EnableIRQ+0x38>)
 8006fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006fe6:	095b      	lsrs	r3, r3, #5
 8006fe8:	2001      	movs	r0, #1
 8006fea:	fa00 f202 	lsl.w	r2, r0, r2
 8006fee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006ff2:	bf00      	nop
 8006ff4:	370c      	adds	r7, #12
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	e000e100 	.word	0xe000e100

08007004 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
 800700a:	4603      	mov	r3, r0
 800700c:	6039      	str	r1, [r7, #0]
 800700e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007014:	2b00      	cmp	r3, #0
 8007016:	db0a      	blt.n	800702e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	b2da      	uxtb	r2, r3
 800701c:	490c      	ldr	r1, [pc, #48]	; (8007050 <__NVIC_SetPriority+0x4c>)
 800701e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007022:	0112      	lsls	r2, r2, #4
 8007024:	b2d2      	uxtb	r2, r2
 8007026:	440b      	add	r3, r1
 8007028:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800702c:	e00a      	b.n	8007044 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	b2da      	uxtb	r2, r3
 8007032:	4908      	ldr	r1, [pc, #32]	; (8007054 <__NVIC_SetPriority+0x50>)
 8007034:	79fb      	ldrb	r3, [r7, #7]
 8007036:	f003 030f 	and.w	r3, r3, #15
 800703a:	3b04      	subs	r3, #4
 800703c:	0112      	lsls	r2, r2, #4
 800703e:	b2d2      	uxtb	r2, r2
 8007040:	440b      	add	r3, r1
 8007042:	761a      	strb	r2, [r3, #24]
}
 8007044:	bf00      	nop
 8007046:	370c      	adds	r7, #12
 8007048:	46bd      	mov	sp, r7
 800704a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704e:	4770      	bx	lr
 8007050:	e000e100 	.word	0xe000e100
 8007054:	e000ed00 	.word	0xe000ed00

08007058 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007058:	b480      	push	{r7}
 800705a:	b089      	sub	sp, #36	; 0x24
 800705c:	af00      	add	r7, sp, #0
 800705e:	60f8      	str	r0, [r7, #12]
 8007060:	60b9      	str	r1, [r7, #8]
 8007062:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	f003 0307 	and.w	r3, r3, #7
 800706a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	f1c3 0307 	rsb	r3, r3, #7
 8007072:	2b04      	cmp	r3, #4
 8007074:	bf28      	it	cs
 8007076:	2304      	movcs	r3, #4
 8007078:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	3304      	adds	r3, #4
 800707e:	2b06      	cmp	r3, #6
 8007080:	d902      	bls.n	8007088 <NVIC_EncodePriority+0x30>
 8007082:	69fb      	ldr	r3, [r7, #28]
 8007084:	3b03      	subs	r3, #3
 8007086:	e000      	b.n	800708a <NVIC_EncodePriority+0x32>
 8007088:	2300      	movs	r3, #0
 800708a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800708c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007090:	69bb      	ldr	r3, [r7, #24]
 8007092:	fa02 f303 	lsl.w	r3, r2, r3
 8007096:	43da      	mvns	r2, r3
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	401a      	ands	r2, r3
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070a0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80070a4:	697b      	ldr	r3, [r7, #20]
 80070a6:	fa01 f303 	lsl.w	r3, r1, r3
 80070aa:	43d9      	mvns	r1, r3
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070b0:	4313      	orrs	r3, r2
         );
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3724      	adds	r7, #36	; 0x24
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr
	...

080070c0 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b085      	sub	sp, #20
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 80070ca:	4a14      	ldr	r2, [pc, #80]	; (800711c <LL_SYSCFG_SetEXTISource+0x5c>)
 80070cc:	683b      	ldr	r3, [r7, #0]
 80070ce:	f003 0303 	and.w	r3, r3, #3
 80070d2:	3302      	adds	r3, #2
 80070d4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80070d8:	683b      	ldr	r3, [r7, #0]
 80070da:	0c1b      	lsrs	r3, r3, #16
 80070dc:	43db      	mvns	r3, r3
 80070de:	ea02 0103 	and.w	r1, r2, r3
 80070e2:	683b      	ldr	r3, [r7, #0]
 80070e4:	0c1b      	lsrs	r3, r3, #16
 80070e6:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	fa93 f3a3 	rbit	r3, r3
 80070ee:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	fab3 f383 	clz	r3, r3
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	f003 031f 	and.w	r3, r3, #31
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	409a      	lsls	r2, r3
 8007100:	4806      	ldr	r0, [pc, #24]	; (800711c <LL_SYSCFG_SetEXTISource+0x5c>)
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	f003 0303 	and.w	r3, r3, #3
 8007108:	430a      	orrs	r2, r1
 800710a:	3302      	adds	r3, #2
 800710c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8007110:	bf00      	nop
 8007112:	3714      	adds	r7, #20
 8007114:	46bd      	mov	sp, r7
 8007116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800711a:	4770      	bx	lr
 800711c:	40010000 	.word	0x40010000

08007120 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8007120:	b480      	push	{r7}
 8007122:	b089      	sub	sp, #36	; 0x24
 8007124:	af00      	add	r7, sp, #0
 8007126:	60f8      	str	r0, [r7, #12]
 8007128:	60b9      	str	r1, [r7, #8]
 800712a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	681a      	ldr	r2, [r3, #0]
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007134:	697b      	ldr	r3, [r7, #20]
 8007136:	fa93 f3a3 	rbit	r3, r3
 800713a:	613b      	str	r3, [r7, #16]
  return result;
 800713c:	693b      	ldr	r3, [r7, #16]
 800713e:	fab3 f383 	clz	r3, r3
 8007142:	b2db      	uxtb	r3, r3
 8007144:	005b      	lsls	r3, r3, #1
 8007146:	2103      	movs	r1, #3
 8007148:	fa01 f303 	lsl.w	r3, r1, r3
 800714c:	43db      	mvns	r3, r3
 800714e:	401a      	ands	r2, r3
 8007150:	68bb      	ldr	r3, [r7, #8]
 8007152:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007154:	69fb      	ldr	r3, [r7, #28]
 8007156:	fa93 f3a3 	rbit	r3, r3
 800715a:	61bb      	str	r3, [r7, #24]
  return result;
 800715c:	69bb      	ldr	r3, [r7, #24]
 800715e:	fab3 f383 	clz	r3, r3
 8007162:	b2db      	uxtb	r3, r3
 8007164:	005b      	lsls	r3, r3, #1
 8007166:	6879      	ldr	r1, [r7, #4]
 8007168:	fa01 f303 	lsl.w	r3, r1, r3
 800716c:	431a      	orrs	r2, r3
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	601a      	str	r2, [r3, #0]
}
 8007172:	bf00      	nop
 8007174:	3724      	adds	r7, #36	; 0x24
 8007176:	46bd      	mov	sp, r7
 8007178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717c:	4770      	bx	lr

0800717e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 800717e:	b480      	push	{r7}
 8007180:	b089      	sub	sp, #36	; 0x24
 8007182:	af00      	add	r7, sp, #0
 8007184:	60f8      	str	r0, [r7, #12]
 8007186:	60b9      	str	r1, [r7, #8]
 8007188:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	68da      	ldr	r2, [r3, #12]
 800718e:	68bb      	ldr	r3, [r7, #8]
 8007190:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	fa93 f3a3 	rbit	r3, r3
 8007198:	613b      	str	r3, [r7, #16]
  return result;
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	fab3 f383 	clz	r3, r3
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	005b      	lsls	r3, r3, #1
 80071a4:	2103      	movs	r1, #3
 80071a6:	fa01 f303 	lsl.w	r3, r1, r3
 80071aa:	43db      	mvns	r3, r3
 80071ac:	401a      	ands	r2, r3
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	fa93 f3a3 	rbit	r3, r3
 80071b8:	61bb      	str	r3, [r7, #24]
  return result;
 80071ba:	69bb      	ldr	r3, [r7, #24]
 80071bc:	fab3 f383 	clz	r3, r3
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	005b      	lsls	r3, r3, #1
 80071c4:	6879      	ldr	r1, [r7, #4]
 80071c6:	fa01 f303 	lsl.w	r3, r1, r3
 80071ca:	431a      	orrs	r2, r3
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	60da      	str	r2, [r3, #12]
}
 80071d0:	bf00      	nop
 80071d2:	3724      	adds	r7, #36	; 0x24
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	683a      	ldr	r2, [r7, #0]
 80071ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b085      	sub	sp, #20
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007200:	4b08      	ldr	r3, [pc, #32]	; (8007224 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007202:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007204:	4907      	ldr	r1, [pc, #28]	; (8007224 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4313      	orrs	r3, r2
 800720a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800720c:	4b05      	ldr	r3, [pc, #20]	; (8007224 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800720e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	4013      	ands	r3, r2
 8007214:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007216:	68fb      	ldr	r3, [r7, #12]
}
 8007218:	bf00      	nop
 800721a:	3714      	adds	r7, #20
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	40021000 	.word	0x40021000

08007228 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b08a      	sub	sp, #40	; 0x28
 800722c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800722e:	f107 031c 	add.w	r3, r7, #28
 8007232:	2200      	movs	r2, #0
 8007234:	601a      	str	r2, [r3, #0]
 8007236:	605a      	str	r2, [r3, #4]
 8007238:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800723a:	1d3b      	adds	r3, r7, #4
 800723c:	2200      	movs	r2, #0
 800723e:	601a      	str	r2, [r3, #0]
 8007240:	605a      	str	r2, [r3, #4]
 8007242:	609a      	str	r2, [r3, #8]
 8007244:	60da      	str	r2, [r3, #12]
 8007246:	611a      	str	r2, [r3, #16]
 8007248:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800724a:	2004      	movs	r0, #4
 800724c:	f7ff ffd4 	bl	80071f8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 8007250:	2020      	movs	r0, #32
 8007252:	f7ff ffd1 	bl	80071f8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8007256:	2001      	movs	r0, #1
 8007258:	f7ff ffce 	bl	80071f8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800725c:	2002      	movs	r0, #2
 800725e:	f7ff ffcb 	bl	80071f8 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 8007262:	2108      	movs	r1, #8
 8007264:	48d3      	ldr	r0, [pc, #844]	; (80075b4 <MX_GPIO_Init+0x38c>)
 8007266:	f7ff ffb9 	bl	80071dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 800726a:	2108      	movs	r1, #8
 800726c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007270:	f7ff ffb4 	bl	80071dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8007274:	2110      	movs	r1, #16
 8007276:	48cf      	ldr	r0, [pc, #828]	; (80075b4 <MX_GPIO_Init+0x38c>)
 8007278:	f7ff ffb0 	bl	80071dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 800727c:	2120      	movs	r1, #32
 800727e:	48cd      	ldr	r0, [pc, #820]	; (80075b4 <MX_GPIO_Init+0x38c>)
 8007280:	f7ff ffac 	bl	80071dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8007284:	2101      	movs	r1, #1
 8007286:	48cc      	ldr	r0, [pc, #816]	; (80075b8 <MX_GPIO_Init+0x390>)
 8007288:	f7ff ffa8 	bl	80071dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 800728c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007290:	48c8      	ldr	r0, [pc, #800]	; (80075b4 <MX_GPIO_Init+0x38c>)
 8007292:	f7ff ffa3 	bl	80071dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 8007296:	f44f 7100 	mov.w	r1, #512	; 0x200
 800729a:	48c6      	ldr	r0, [pc, #792]	; (80075b4 <MX_GPIO_Init+0x38c>)
 800729c:	f7ff ff9e 	bl	80071dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 80072a0:	2140      	movs	r1, #64	; 0x40
 80072a2:	48c5      	ldr	r0, [pc, #788]	; (80075b8 <MX_GPIO_Init+0x390>)
 80072a4:	f7ff ff9a 	bl	80071dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 80072a8:	2180      	movs	r1, #128	; 0x80
 80072aa:	48c3      	ldr	r0, [pc, #780]	; (80075b8 <MX_GPIO_Init+0x390>)
 80072ac:	f7ff ff96 	bl	80071dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 80072b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80072b4:	48c0      	ldr	r0, [pc, #768]	; (80075b8 <MX_GPIO_Init+0x390>)
 80072b6:	f7ff ff91 	bl	80071dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 80072ba:	49c0      	ldr	r1, [pc, #768]	; (80075bc <MX_GPIO_Init+0x394>)
 80072bc:	2002      	movs	r0, #2
 80072be:	f7ff feff 	bl	80070c0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 80072c2:	49bf      	ldr	r1, [pc, #764]	; (80075c0 <MX_GPIO_Init+0x398>)
 80072c4:	2002      	movs	r0, #2
 80072c6:	f7ff fefb 	bl	80070c0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 80072ca:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 80072ce:	2005      	movs	r0, #5
 80072d0:	f7ff fef6 	bl	80070c0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 80072d4:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 80072d8:	2005      	movs	r0, #5
 80072da:	f7ff fef1 	bl	80070c0 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 80072de:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 80072e2:	2002      	movs	r0, #2
 80072e4:	f7ff feec 	bl	80070c0 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 80072e8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80072ec:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80072ee:	2301      	movs	r3, #1
 80072f0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80072f4:	2300      	movs	r3, #0
 80072f6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80072fa:	2302      	movs	r3, #2
 80072fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007300:	f107 031c 	add.w	r3, r7, #28
 8007304:	4618      	mov	r0, r3
 8007306:	f005 fead 	bl	800d064 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 800730a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800730e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007310:	2301      	movs	r3, #1
 8007312:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007316:	2300      	movs	r3, #0
 8007318:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800731c:	2302      	movs	r3, #2
 800731e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007322:	f107 031c 	add.w	r3, r7, #28
 8007326:	4618      	mov	r0, r3
 8007328:	f005 fe9c 	bl	800d064 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 800732c:	2301      	movs	r3, #1
 800732e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007330:	2301      	movs	r3, #1
 8007332:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007336:	2300      	movs	r3, #0
 8007338:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800733c:	2302      	movs	r3, #2
 800733e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007342:	f107 031c 	add.w	r3, r7, #28
 8007346:	4618      	mov	r0, r3
 8007348:	f005 fe8c 	bl	800d064 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 800734c:	2302      	movs	r3, #2
 800734e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007350:	2301      	movs	r3, #1
 8007352:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007356:	2300      	movs	r3, #0
 8007358:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800735c:	2302      	movs	r3, #2
 800735e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007362:	f107 031c 	add.w	r3, r7, #28
 8007366:	4618      	mov	r0, r3
 8007368:	f005 fe7c 	bl	800d064 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 800736c:	2304      	movs	r3, #4
 800736e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8007370:	2301      	movs	r3, #1
 8007372:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8007376:	2300      	movs	r3, #0
 8007378:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800737c:	2302      	movs	r3, #2
 800737e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8007382:	f107 031c 	add.w	r3, r7, #28
 8007386:	4618      	mov	r0, r3
 8007388:	f005 fe6c 	bl	800d064 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 800738c:	2201      	movs	r2, #1
 800738e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007392:	4888      	ldr	r0, [pc, #544]	; (80075b4 <MX_GPIO_Init+0x38c>)
 8007394:	f7ff fef3 	bl	800717e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 8007398:	2201      	movs	r2, #1
 800739a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800739e:	4885      	ldr	r0, [pc, #532]	; (80075b4 <MX_GPIO_Init+0x38c>)
 80073a0:	f7ff feed 	bl	800717e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 80073a4:	2201      	movs	r2, #1
 80073a6:	2101      	movs	r1, #1
 80073a8:	4886      	ldr	r0, [pc, #536]	; (80075c4 <MX_GPIO_Init+0x39c>)
 80073aa:	f7ff fee8 	bl	800717e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 80073ae:	2201      	movs	r2, #1
 80073b0:	2102      	movs	r1, #2
 80073b2:	4884      	ldr	r0, [pc, #528]	; (80075c4 <MX_GPIO_Init+0x39c>)
 80073b4:	f7ff fee3 	bl	800717e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 80073b8:	2201      	movs	r2, #1
 80073ba:	2104      	movs	r1, #4
 80073bc:	487d      	ldr	r0, [pc, #500]	; (80075b4 <MX_GPIO_Init+0x38c>)
 80073be:	f7ff fede 	bl	800717e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 80073c2:	2200      	movs	r2, #0
 80073c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80073c8:	487a      	ldr	r0, [pc, #488]	; (80075b4 <MX_GPIO_Init+0x38c>)
 80073ca:	f7ff fea9 	bl	8007120 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 80073ce:	2200      	movs	r2, #0
 80073d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80073d4:	4877      	ldr	r0, [pc, #476]	; (80075b4 <MX_GPIO_Init+0x38c>)
 80073d6:	f7ff fea3 	bl	8007120 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 80073da:	2200      	movs	r2, #0
 80073dc:	2101      	movs	r1, #1
 80073de:	4879      	ldr	r0, [pc, #484]	; (80075c4 <MX_GPIO_Init+0x39c>)
 80073e0:	f7ff fe9e 	bl	8007120 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 80073e4:	2200      	movs	r2, #0
 80073e6:	2102      	movs	r1, #2
 80073e8:	4876      	ldr	r0, [pc, #472]	; (80075c4 <MX_GPIO_Init+0x39c>)
 80073ea:	f7ff fe99 	bl	8007120 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 80073ee:	2200      	movs	r2, #0
 80073f0:	2104      	movs	r1, #4
 80073f2:	4870      	ldr	r0, [pc, #448]	; (80075b4 <MX_GPIO_Init+0x38c>)
 80073f4:	f7ff fe94 	bl	8007120 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 80073f8:	2308      	movs	r3, #8
 80073fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80073fc:	2301      	movs	r3, #1
 80073fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8007400:	2300      	movs	r3, #0
 8007402:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007404:	2300      	movs	r3, #0
 8007406:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8007408:	2302      	movs	r3, #2
 800740a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 800740c:	1d3b      	adds	r3, r7, #4
 800740e:	4619      	mov	r1, r3
 8007410:	4868      	ldr	r0, [pc, #416]	; (80075b4 <MX_GPIO_Init+0x38c>)
 8007412:	f006 f81a 	bl	800d44a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8007416:	2308      	movs	r3, #8
 8007418:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800741a:	2301      	movs	r3, #1
 800741c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800741e:	2300      	movs	r3, #0
 8007420:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007422:	2300      	movs	r3, #0
 8007424:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007426:	2300      	movs	r3, #0
 8007428:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 800742a:	1d3b      	adds	r3, r7, #4
 800742c:	4619      	mov	r1, r3
 800742e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8007432:	f006 f80a 	bl	800d44a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8007436:	2310      	movs	r3, #16
 8007438:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800743a:	2301      	movs	r3, #1
 800743c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800743e:	2300      	movs	r3, #0
 8007440:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007442:	2300      	movs	r3, #0
 8007444:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007446:	2300      	movs	r3, #0
 8007448:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 800744a:	1d3b      	adds	r3, r7, #4
 800744c:	4619      	mov	r1, r3
 800744e:	4859      	ldr	r0, [pc, #356]	; (80075b4 <MX_GPIO_Init+0x38c>)
 8007450:	f005 fffb 	bl	800d44a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 8007454:	2320      	movs	r3, #32
 8007456:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007458:	2301      	movs	r3, #1
 800745a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800745c:	2300      	movs	r3, #0
 800745e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8007460:	2300      	movs	r3, #0
 8007462:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007464:	2300      	movs	r3, #0
 8007466:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 8007468:	1d3b      	adds	r3, r7, #4
 800746a:	4619      	mov	r1, r3
 800746c:	4851      	ldr	r0, [pc, #324]	; (80075b4 <MX_GPIO_Init+0x38c>)
 800746e:	f005 ffec 	bl	800d44a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8007472:	2301      	movs	r3, #1
 8007474:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007476:	2301      	movs	r3, #1
 8007478:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800747a:	2300      	movs	r3, #0
 800747c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800747e:	2300      	movs	r3, #0
 8007480:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8007482:	2300      	movs	r3, #0
 8007484:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 8007486:	1d3b      	adds	r3, r7, #4
 8007488:	4619      	mov	r1, r3
 800748a:	484b      	ldr	r0, [pc, #300]	; (80075b8 <MX_GPIO_Init+0x390>)
 800748c:	f005 ffdd 	bl	800d44a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8007490:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007494:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007496:	2301      	movs	r3, #1
 8007498:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800749a:	2300      	movs	r3, #0
 800749c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800749e:	2300      	movs	r3, #0
 80074a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80074a2:	2300      	movs	r3, #0
 80074a4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 80074a6:	1d3b      	adds	r3, r7, #4
 80074a8:	4619      	mov	r1, r3
 80074aa:	4842      	ldr	r0, [pc, #264]	; (80075b4 <MX_GPIO_Init+0x38c>)
 80074ac:	f005 ffcd 	bl	800d44a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 80074b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80074b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80074b6:	2301      	movs	r3, #1
 80074b8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80074ba:	2300      	movs	r3, #0
 80074bc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80074be:	2300      	movs	r3, #0
 80074c0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80074c2:	2300      	movs	r3, #0
 80074c4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 80074c6:	1d3b      	adds	r3, r7, #4
 80074c8:	4619      	mov	r1, r3
 80074ca:	483a      	ldr	r0, [pc, #232]	; (80075b4 <MX_GPIO_Init+0x38c>)
 80074cc:	f005 ffbd 	bl	800d44a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 80074d0:	2340      	movs	r3, #64	; 0x40
 80074d2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80074d4:	2301      	movs	r3, #1
 80074d6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80074d8:	2303      	movs	r3, #3
 80074da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80074dc:	2300      	movs	r3, #0
 80074de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80074e0:	2300      	movs	r3, #0
 80074e2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 80074e4:	1d3b      	adds	r3, r7, #4
 80074e6:	4619      	mov	r1, r3
 80074e8:	4833      	ldr	r0, [pc, #204]	; (80075b8 <MX_GPIO_Init+0x390>)
 80074ea:	f005 ffae 	bl	800d44a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 80074ee:	2380      	movs	r3, #128	; 0x80
 80074f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80074f2:	2301      	movs	r3, #1
 80074f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80074f6:	2303      	movs	r3, #3
 80074f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80074fa:	2300      	movs	r3, #0
 80074fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80074fe:	2300      	movs	r3, #0
 8007500:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8007502:	1d3b      	adds	r3, r7, #4
 8007504:	4619      	mov	r1, r3
 8007506:	482c      	ldr	r0, [pc, #176]	; (80075b8 <MX_GPIO_Init+0x390>)
 8007508:	f005 ff9f 	bl	800d44a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 800750c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007510:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8007512:	2301      	movs	r3, #1
 8007514:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8007516:	2303      	movs	r3, #3
 8007518:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800751a:	2300      	movs	r3, #0
 800751c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800751e:	2300      	movs	r3, #0
 8007520:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8007522:	1d3b      	adds	r3, r7, #4
 8007524:	4619      	mov	r1, r3
 8007526:	4824      	ldr	r0, [pc, #144]	; (80075b8 <MX_GPIO_Init+0x390>)
 8007528:	f005 ff8f 	bl	800d44a <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800752c:	f7ff fd3e 	bl	8006fac <__NVIC_GetPriorityGrouping>
 8007530:	4603      	mov	r3, r0
 8007532:	2200      	movs	r2, #0
 8007534:	2100      	movs	r1, #0
 8007536:	4618      	mov	r0, r3
 8007538:	f7ff fd8e 	bl	8007058 <NVIC_EncodePriority>
 800753c:	4603      	mov	r3, r0
 800753e:	4619      	mov	r1, r3
 8007540:	2006      	movs	r0, #6
 8007542:	f7ff fd5f 	bl	8007004 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8007546:	2006      	movs	r0, #6
 8007548:	f7ff fd3e 	bl	8006fc8 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800754c:	f7ff fd2e 	bl	8006fac <__NVIC_GetPriorityGrouping>
 8007550:	4603      	mov	r3, r0
 8007552:	2200      	movs	r2, #0
 8007554:	2100      	movs	r1, #0
 8007556:	4618      	mov	r0, r3
 8007558:	f7ff fd7e 	bl	8007058 <NVIC_EncodePriority>
 800755c:	4603      	mov	r3, r0
 800755e:	4619      	mov	r1, r3
 8007560:	2007      	movs	r0, #7
 8007562:	f7ff fd4f 	bl	8007004 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 8007566:	2007      	movs	r0, #7
 8007568:	f7ff fd2e 	bl	8006fc8 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800756c:	f7ff fd1e 	bl	8006fac <__NVIC_GetPriorityGrouping>
 8007570:	4603      	mov	r3, r0
 8007572:	2200      	movs	r2, #0
 8007574:	2100      	movs	r1, #0
 8007576:	4618      	mov	r0, r3
 8007578:	f7ff fd6e 	bl	8007058 <NVIC_EncodePriority>
 800757c:	4603      	mov	r3, r0
 800757e:	4619      	mov	r1, r3
 8007580:	2008      	movs	r0, #8
 8007582:	f7ff fd3f 	bl	8007004 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8007586:	2008      	movs	r0, #8
 8007588:	f7ff fd1e 	bl	8006fc8 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800758c:	f7ff fd0e 	bl	8006fac <__NVIC_GetPriorityGrouping>
 8007590:	4603      	mov	r3, r0
 8007592:	2200      	movs	r2, #0
 8007594:	2100      	movs	r1, #0
 8007596:	4618      	mov	r0, r3
 8007598:	f7ff fd5e 	bl	8007058 <NVIC_EncodePriority>
 800759c:	4603      	mov	r3, r0
 800759e:	4619      	mov	r1, r3
 80075a0:	2028      	movs	r0, #40	; 0x28
 80075a2:	f7ff fd2f 	bl	8007004 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80075a6:	2028      	movs	r0, #40	; 0x28
 80075a8:	f7ff fd0e 	bl	8006fc8 <__NVIC_EnableIRQ>

}
 80075ac:	bf00      	nop
 80075ae:	3728      	adds	r7, #40	; 0x28
 80075b0:	46bd      	mov	sp, r7
 80075b2:	e009      	b.n	80075c8 <MX_GPIO_Init+0x3a0>
 80075b4:	48000800 	.word	0x48000800
 80075b8:	48000400 	.word	0x48000400
 80075bc:	0f000003 	.word	0x0f000003
 80075c0:	f0000003 	.word	0xf0000003
 80075c4:	48001400 	.word	0x48001400
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop

080075cc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80075cc:	b480      	push	{r7}
 80075ce:	b083      	sub	sp, #12
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80075d4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80075d8:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80075dc:	f003 0301 	and.w	r3, r3, #1
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d013      	beq.n	800760c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80075e4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80075e8:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80075ec:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00b      	beq.n	800760c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80075f4:	e000      	b.n	80075f8 <ITM_SendChar+0x2c>
    {
      __NOP();
 80075f6:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80075f8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d0f9      	beq.n	80075f6 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8007602:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	b2d2      	uxtb	r2, r2
 800760a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800760c:	687b      	ldr	r3, [r7, #4]
}
 800760e:	4618      	mov	r0, r3
 8007610:	370c      	adds	r7, #12
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr

0800761a <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// redirect printf to SWV
int _write(int file, char *ptr, int len)
{
 800761a:	b580      	push	{r7, lr}
 800761c:	b086      	sub	sp, #24
 800761e:	af00      	add	r7, sp, #0
 8007620:	60f8      	str	r0, [r7, #12]
 8007622:	60b9      	str	r1, [r7, #8]
 8007624:	607a      	str	r2, [r7, #4]
  int i=0;
 8007626:	2300      	movs	r3, #0
 8007628:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800762a:	2300      	movs	r3, #0
 800762c:	617b      	str	r3, [r7, #20]
 800762e:	e009      	b.n	8007644 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	1c5a      	adds	r2, r3, #1
 8007634:	60ba      	str	r2, [r7, #8]
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	4618      	mov	r0, r3
 800763a:	f7ff ffc7 	bl	80075cc <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	3301      	adds	r3, #1
 8007642:	617b      	str	r3, [r7, #20]
 8007644:	697a      	ldr	r2, [r7, #20]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	429a      	cmp	r2, r3
 800764a:	dbf1      	blt.n	8007630 <_write+0x16>
  return len;
 800764c:	687b      	ldr	r3, [r7, #4]
}
 800764e:	4618      	mov	r0, r3
 8007650:	3718      	adds	r7, #24
 8007652:	46bd      	mov	sp, r7
 8007654:	bd80      	pop	{r7, pc}
	...

08007658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800765c:	f000 feb5 	bl	80083ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007660:	f000 f86c 	bl	800773c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007664:	f7ff fde0 	bl	8007228 <MX_GPIO_Init>
  MX_DMA_Init();
 8007668:	f7ff fc66 	bl	8006f38 <MX_DMA_Init>
  MX_DAC1_Init();
 800766c:	f7ff fb16 	bl	8006c9c <MX_DAC1_Init>
  MX_DAC2_Init();
 8007670:	f7ff fb5e 	bl	8006d30 <MX_DAC2_Init>
  MX_ADC1_Init();
 8007674:	f7ff f9d4 	bl	8006a20 <MX_ADC1_Init>
  MX_COMP1_Init();
 8007678:	f7ff fab6 	bl	8006be8 <MX_COMP1_Init>
  MX_TIM2_Init();
 800767c:	f000 fbaa 	bl	8007dd4 <MX_TIM2_Init>
  MX_SPI3_Init();
 8007680:	f000 f908 	bl	8007894 <MX_SPI3_Init>
  MX_RNG_Init();
 8007684:	f000 f8f8 	bl	8007878 <MX_RNG_Init>
  MX_TIM1_Init();
 8007688:	f000 fb34 	bl	8007cf4 <MX_TIM1_Init>
  MX_TIM8_Init();
 800768c:	f000 fc8a 	bl	8007fa4 <MX_TIM8_Init>
  MX_TIM16_Init();
 8007690:	f000 fd42 	bl	8008118 <MX_TIM16_Init>
  MX_TIM15_Init();
 8007694:	f000 fcee 	bl	8008074 <MX_TIM15_Init>
  MX_TIM5_Init();
 8007698:	f000 fc36 	bl	8007f08 <MX_TIM5_Init>
  MX_TIM3_Init();
 800769c:	f000 fbe6 	bl	8007e6c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  DT_InitRegister();
 80076a0:	f7fd f94c 	bl	800493c <DT_InitRegister>

  // main signal function output (external)
  //DAC_InitDevices()
  SM_Init();
 80076a4:	f7fd fe14 	bl	80052d0 <SM_Init>
  FuncO_Init();
 80076a8:	f7fd fb30 	bl	8004d0c <FuncO_Init>
  FuncO_ApplyPresetToSignal(eDefaultFuncPreset);
 80076ac:	2000      	movs	r0, #0
 80076ae:	f7fd fbe5 	bl	8004e7c <FuncO_ApplyPresetToSignal>
  FuncO_ApplyPresetToSync(eDefaultFuncPreset);
 80076b2:	2000      	movs	r0, #0
 80076b4:	f7fd fc3c 	bl	8004f30 <FuncO_ApplyPresetToSync>

  //TIM8->ARR = sin1_MAX_OUTPUT_ARR;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 80076b8:	2110      	movs	r1, #16
 80076ba:	481b      	ldr	r0, [pc, #108]	; (8007728 <main+0xd0>)
 80076bc:	f002 fb89 	bl	8009dd2 <HAL_DAC_Start>
  // single clock to run all DAC channels. TODO add independent clocks
  //HAL_TIM_Base_Start(&htim8);
  //HAL_TIM_Base_Start(&htim2);

  // TIM2 - DAC TIMER
  OUTPUT_TIMER->CR1 |= (TIM_CR1_CEN);
 80076c0:	4b1a      	ldr	r3, [pc, #104]	; (800772c <main+0xd4>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a19      	ldr	r2, [pc, #100]	; (800772c <main+0xd4>)
 80076c6:	f043 0301 	orr.w	r3, r3, #1
 80076ca:	6013      	str	r3, [r2, #0]
  FreqO_ApplyPreset(eDefaultFreqPreset);
 80076cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80076d0:	f7fd fab2 	bl	8004c38 <FreqO_ApplyPreset>

#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 80076d4:	2201      	movs	r2, #1
 80076d6:	2108      	movs	r1, #8
 80076d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80076dc:	f003 fbc4 	bl	800ae68 <HAL_GPIO_WritePin>

  // PGA gain
  //GO_ApplyPreset_Fast(eDefaultGainPreset);
  VPP_ApplyPresetToSignal(eDefaultVppPreset);
 80076e0:	2059      	movs	r0, #89	; 0x59
 80076e2:	f7fd fef1 	bl	80054c8 <VPP_ApplyPresetToSignal>
  //HAL_TIM_Base_Start_IT(&htim3);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 80076e6:	2200      	movs	r2, #0
 80076e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80076ec:	4810      	ldr	r0, [pc, #64]	; (8007730 <main+0xd8>)
 80076ee:	f003 fbbb 	bl	800ae68 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 80076f2:	2200      	movs	r2, #0
 80076f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80076f8:	480d      	ldr	r0, [pc, #52]	; (8007730 <main+0xd8>)
 80076fa:	f003 fbb5 	bl	800ae68 <HAL_GPIO_WritePin>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 80076fe:	480d      	ldr	r0, [pc, #52]	; (8007734 <main+0xdc>)
 8007700:	f004 fcac 	bl	800c05c <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8007704:	4b0c      	ldr	r3, [pc, #48]	; (8007738 <main+0xe0>)
 8007706:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800770a:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 800770c:	4b0a      	ldr	r3, [pc, #40]	; (8007738 <main+0xe0>)
 800770e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007712:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 8007714:	f7f9 fab6 	bl	8000c84 <DM_Init>
  DM_PostInit();
 8007718:	f7f9 fac2 	bl	8000ca0 <DM_PostInit>

  IM_Init();
 800771c:	f7fc ff5c 	bl	80045d8 <IM_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 8007720:	f7fb ff02 	bl	8003528 <EM_ProcessEvent>
 8007724:	e7fc      	b.n	8007720 <main+0xc8>
 8007726:	bf00      	nop
 8007728:	20002110 	.word	0x20002110
 800772c:	40013400 	.word	0x40013400
 8007730:	48000800 	.word	0x48000800
 8007734:	20002378 	.word	0x20002378
 8007738:	40001000 	.word	0x40001000

0800773c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b0a8      	sub	sp, #160	; 0xa0
 8007740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007742:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8007746:	2238      	movs	r2, #56	; 0x38
 8007748:	2100      	movs	r1, #0
 800774a:	4618      	mov	r0, r3
 800774c:	f006 ff0a 	bl	800e564 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007750:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007754:	2200      	movs	r2, #0
 8007756:	601a      	str	r2, [r3, #0]
 8007758:	605a      	str	r2, [r3, #4]
 800775a:	609a      	str	r2, [r3, #8]
 800775c:	60da      	str	r2, [r3, #12]
 800775e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8007760:	463b      	mov	r3, r7
 8007762:	2254      	movs	r2, #84	; 0x54
 8007764:	2100      	movs	r1, #0
 8007766:	4618      	mov	r0, r3
 8007768:	f006 fefc 	bl	800e564 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800776c:	2000      	movs	r0, #0
 800776e:	f003 fb93 	bl	800ae98 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8007772:	2322      	movs	r3, #34	; 0x22
 8007774:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007776:	f44f 7380 	mov.w	r3, #256	; 0x100
 800777a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800777c:	2340      	movs	r3, #64	; 0x40
 800777e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8007780:	2301      	movs	r3, #1
 8007782:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007786:	2302      	movs	r3, #2
 8007788:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800778c:	2302      	movs	r3, #2
 800778e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8007792:	2302      	movs	r3, #2
 8007794:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8007798:	232a      	movs	r3, #42	; 0x2a
 800779a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV30;
 800779e:	231e      	movs	r3, #30
 80077a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 80077a4:	2304      	movs	r3, #4
 80077a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80077aa:	2302      	movs	r3, #2
 80077ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80077b0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80077b4:	4618      	mov	r0, r3
 80077b6:	f003 fc13 	bl	800afe0 <HAL_RCC_OscConfig>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d001      	beq.n	80077c4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80077c0:	f000 f82a 	bl	8007818 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80077c4:	230f      	movs	r3, #15
 80077c6:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80077c8:	2303      	movs	r3, #3
 80077ca:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80077cc:	2300      	movs	r3, #0
 80077ce:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80077d0:	2300      	movs	r3, #0
 80077d2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80077d4:	2300      	movs	r3, #0
 80077d6:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80077d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80077dc:	2108      	movs	r1, #8
 80077de:	4618      	mov	r0, r3
 80077e0:	f003 ff16 	bl	800b610 <HAL_RCC_ClockConfig>
 80077e4:	4603      	mov	r3, r0
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d001      	beq.n	80077ee <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80077ea:	f000 f815 	bl	8007818 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 80077ee:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80077f2:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 80077f4:	2300      	movs	r3, #0
 80077f6:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 80077f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80077fc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80077fe:	463b      	mov	r3, r7
 8007800:	4618      	mov	r0, r3
 8007802:	f004 f8f5 	bl	800b9f0 <HAL_RCCEx_PeriphCLKConfig>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d001      	beq.n	8007810 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800780c:	f000 f804 	bl	8007818 <Error_Handler>
  }
}
 8007810:	bf00      	nop
 8007812:	37a0      	adds	r7, #160	; 0xa0
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}

08007818 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007818:	b480      	push	{r7}
 800781a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800781c:	bf00      	nop
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr

08007826 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8007826:	b480      	push	{r7}
 8007828:	b083      	sub	sp, #12
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	f043 0204 	orr.w	r2, r3, #4
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	601a      	str	r2, [r3, #0]
}
 800783a:	bf00      	nop
 800783c:	370c      	adds	r7, #12
 800783e:	46bd      	mov	sp, r7
 8007840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007844:	4770      	bx	lr
	...

08007848 <LL_AHB2_GRP1_EnableClock>:
{
 8007848:	b480      	push	{r7}
 800784a:	b085      	sub	sp, #20
 800784c:	af00      	add	r7, sp, #0
 800784e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8007850:	4b08      	ldr	r3, [pc, #32]	; (8007874 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007852:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007854:	4907      	ldr	r1, [pc, #28]	; (8007874 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	4313      	orrs	r3, r2
 800785a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800785c:	4b05      	ldr	r3, [pc, #20]	; (8007874 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800785e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	4013      	ands	r3, r2
 8007864:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8007866:	68fb      	ldr	r3, [r7, #12]
}
 8007868:	bf00      	nop
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr
 8007874:	40021000 	.word	0x40021000

08007878 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 800787c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8007880:	f7ff ffe2 	bl	8007848 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8007884:	4802      	ldr	r0, [pc, #8]	; (8007890 <MX_RNG_Init+0x18>)
 8007886:	f7ff ffce 	bl	8007826 <LL_RNG_Enable>

}
 800788a:	bf00      	nop
 800788c:	bd80      	pop	{r7, pc}
 800788e:	bf00      	nop
 8007890:	50060800 	.word	0x50060800

08007894 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8007898:	4b1b      	ldr	r3, [pc, #108]	; (8007908 <MX_SPI3_Init+0x74>)
 800789a:	4a1c      	ldr	r2, [pc, #112]	; (800790c <MX_SPI3_Init+0x78>)
 800789c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800789e:	4b1a      	ldr	r3, [pc, #104]	; (8007908 <MX_SPI3_Init+0x74>)
 80078a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80078a4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80078a6:	4b18      	ldr	r3, [pc, #96]	; (8007908 <MX_SPI3_Init+0x74>)
 80078a8:	2200      	movs	r2, #0
 80078aa:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80078ac:	4b16      	ldr	r3, [pc, #88]	; (8007908 <MX_SPI3_Init+0x74>)
 80078ae:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80078b2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80078b4:	4b14      	ldr	r3, [pc, #80]	; (8007908 <MX_SPI3_Init+0x74>)
 80078b6:	2200      	movs	r2, #0
 80078b8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80078ba:	4b13      	ldr	r3, [pc, #76]	; (8007908 <MX_SPI3_Init+0x74>)
 80078bc:	2200      	movs	r2, #0
 80078be:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80078c0:	4b11      	ldr	r3, [pc, #68]	; (8007908 <MX_SPI3_Init+0x74>)
 80078c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80078c6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80078c8:	4b0f      	ldr	r3, [pc, #60]	; (8007908 <MX_SPI3_Init+0x74>)
 80078ca:	2210      	movs	r2, #16
 80078cc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80078ce:	4b0e      	ldr	r3, [pc, #56]	; (8007908 <MX_SPI3_Init+0x74>)
 80078d0:	2200      	movs	r2, #0
 80078d2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80078d4:	4b0c      	ldr	r3, [pc, #48]	; (8007908 <MX_SPI3_Init+0x74>)
 80078d6:	2200      	movs	r2, #0
 80078d8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80078da:	4b0b      	ldr	r3, [pc, #44]	; (8007908 <MX_SPI3_Init+0x74>)
 80078dc:	2200      	movs	r2, #0
 80078de:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80078e0:	4b09      	ldr	r3, [pc, #36]	; (8007908 <MX_SPI3_Init+0x74>)
 80078e2:	2207      	movs	r2, #7
 80078e4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80078e6:	4b08      	ldr	r3, [pc, #32]	; (8007908 <MX_SPI3_Init+0x74>)
 80078e8:	2200      	movs	r2, #0
 80078ea:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80078ec:	4b06      	ldr	r3, [pc, #24]	; (8007908 <MX_SPI3_Init+0x74>)
 80078ee:	2208      	movs	r2, #8
 80078f0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80078f2:	4805      	ldr	r0, [pc, #20]	; (8007908 <MX_SPI3_Init+0x74>)
 80078f4:	f004 fac8 	bl	800be88 <HAL_SPI_Init>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d001      	beq.n	8007902 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80078fe:	f7ff ff8b 	bl	8007818 <Error_Handler>
  }

}
 8007902:	bf00      	nop
 8007904:	bd80      	pop	{r7, pc}
 8007906:	bf00      	nop
 8007908:	200021e4 	.word	0x200021e4
 800790c:	40003c00 	.word	0x40003c00

08007910 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b08a      	sub	sp, #40	; 0x28
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007918:	f107 0314 	add.w	r3, r7, #20
 800791c:	2200      	movs	r2, #0
 800791e:	601a      	str	r2, [r3, #0]
 8007920:	605a      	str	r2, [r3, #4]
 8007922:	609a      	str	r2, [r3, #8]
 8007924:	60da      	str	r2, [r3, #12]
 8007926:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a17      	ldr	r2, [pc, #92]	; (800798c <HAL_SPI_MspInit+0x7c>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d128      	bne.n	8007984 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8007932:	4b17      	ldr	r3, [pc, #92]	; (8007990 <HAL_SPI_MspInit+0x80>)
 8007934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007936:	4a16      	ldr	r2, [pc, #88]	; (8007990 <HAL_SPI_MspInit+0x80>)
 8007938:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800793c:	6593      	str	r3, [r2, #88]	; 0x58
 800793e:	4b14      	ldr	r3, [pc, #80]	; (8007990 <HAL_SPI_MspInit+0x80>)
 8007940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007942:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007946:	613b      	str	r3, [r7, #16]
 8007948:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800794a:	4b11      	ldr	r3, [pc, #68]	; (8007990 <HAL_SPI_MspInit+0x80>)
 800794c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800794e:	4a10      	ldr	r2, [pc, #64]	; (8007990 <HAL_SPI_MspInit+0x80>)
 8007950:	f043 0304 	orr.w	r3, r3, #4
 8007954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007956:	4b0e      	ldr	r3, [pc, #56]	; (8007990 <HAL_SPI_MspInit+0x80>)
 8007958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800795a:	f003 0304 	and.w	r3, r3, #4
 800795e:	60fb      	str	r3, [r7, #12]
 8007960:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8007962:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007966:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007968:	2302      	movs	r3, #2
 800796a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800796c:	2300      	movs	r3, #0
 800796e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007970:	2300      	movs	r3, #0
 8007972:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8007974:	2306      	movs	r3, #6
 8007976:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007978:	f107 0314 	add.w	r3, r7, #20
 800797c:	4619      	mov	r1, r3
 800797e:	4805      	ldr	r0, [pc, #20]	; (8007994 <HAL_SPI_MspInit+0x84>)
 8007980:	f003 f8f0 	bl	800ab64 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8007984:	bf00      	nop
 8007986:	3728      	adds	r7, #40	; 0x28
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}
 800798c:	40003c00 	.word	0x40003c00
 8007990:	40021000 	.word	0x40021000
 8007994:	48000800 	.word	0x48000800

08007998 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8007998:	b480      	push	{r7}
 800799a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800799c:	4b05      	ldr	r3, [pc, #20]	; (80079b4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	4a04      	ldr	r2, [pc, #16]	; (80079b4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 80079a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80079a6:	6093      	str	r3, [r2, #8]
}
 80079a8:	bf00      	nop
 80079aa:	46bd      	mov	sp, r7
 80079ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b0:	4770      	bx	lr
 80079b2:	bf00      	nop
 80079b4:	40007000 	.word	0x40007000

080079b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80079be:	4b0f      	ldr	r3, [pc, #60]	; (80079fc <HAL_MspInit+0x44>)
 80079c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079c2:	4a0e      	ldr	r2, [pc, #56]	; (80079fc <HAL_MspInit+0x44>)
 80079c4:	f043 0301 	orr.w	r3, r3, #1
 80079c8:	6613      	str	r3, [r2, #96]	; 0x60
 80079ca:	4b0c      	ldr	r3, [pc, #48]	; (80079fc <HAL_MspInit+0x44>)
 80079cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80079ce:	f003 0301 	and.w	r3, r3, #1
 80079d2:	607b      	str	r3, [r7, #4]
 80079d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80079d6:	4b09      	ldr	r3, [pc, #36]	; (80079fc <HAL_MspInit+0x44>)
 80079d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079da:	4a08      	ldr	r2, [pc, #32]	; (80079fc <HAL_MspInit+0x44>)
 80079dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079e0:	6593      	str	r3, [r2, #88]	; 0x58
 80079e2:	4b06      	ldr	r3, [pc, #24]	; (80079fc <HAL_MspInit+0x44>)
 80079e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079ea:	603b      	str	r3, [r7, #0]
 80079ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 80079ee:	f7ff ffd3 	bl	8007998 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80079f2:	bf00      	nop
 80079f4:	3708      	adds	r7, #8
 80079f6:	46bd      	mov	sp, r7
 80079f8:	bd80      	pop	{r7, pc}
 80079fa:	bf00      	nop
 80079fc:	40021000 	.word	0x40021000

08007a00 <LL_EXTI_IsActiveFlag_0_31>:
{
 8007a00:	b480      	push	{r7}
 8007a02:	b083      	sub	sp, #12
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8007a08:	4b07      	ldr	r3, [pc, #28]	; (8007a28 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8007a0a:	695a      	ldr	r2, [r3, #20]
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	4013      	ands	r3, r2
 8007a10:	687a      	ldr	r2, [r7, #4]
 8007a12:	429a      	cmp	r2, r3
 8007a14:	d101      	bne.n	8007a1a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8007a16:	2301      	movs	r3, #1
 8007a18:	e000      	b.n	8007a1c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8007a1a:	2300      	movs	r3, #0
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	370c      	adds	r7, #12
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	40010400 	.word	0x40010400

08007a2c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8007a34:	4a04      	ldr	r2, [pc, #16]	; (8007a48 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6153      	str	r3, [r2, #20]
}
 8007a3a:	bf00      	nop
 8007a3c:	370c      	adds	r7, #12
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr
 8007a46:	bf00      	nop
 8007a48:	40010400 	.word	0x40010400

08007a4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007a50:	bf00      	nop
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007a5e:	e7fe      	b.n	8007a5e <HardFault_Handler+0x4>

08007a60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007a60:	b480      	push	{r7}
 8007a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007a64:	e7fe      	b.n	8007a64 <MemManage_Handler+0x4>

08007a66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007a66:	b480      	push	{r7}
 8007a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007a6a:	e7fe      	b.n	8007a6a <BusFault_Handler+0x4>

08007a6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007a70:	e7fe      	b.n	8007a70 <UsageFault_Handler+0x4>

08007a72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007a72:	b480      	push	{r7}
 8007a74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007a76:	bf00      	nop
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7e:	4770      	bx	lr

08007a80 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007a80:	b480      	push	{r7}
 8007a82:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007a84:	bf00      	nop
 8007a86:	46bd      	mov	sp, r7
 8007a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8c:	4770      	bx	lr

08007a8e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007a8e:	b480      	push	{r7}
 8007a90:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007a92:	bf00      	nop
 8007a94:	46bd      	mov	sp, r7
 8007a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a9a:	4770      	bx	lr

08007a9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007aa0:	f000 fce6 	bl	8008470 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007aa4:	bf00      	nop
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	IM_BTN3_EXTI0_Handler();
 8007aac:	f7fc fe4c 	bl	8004748 <IM_BTN3_EXTI0_Handler>

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8007ab0:	2001      	movs	r0, #1
 8007ab2:	f7ff ffa5 	bl	8007a00 <LL_EXTI_IsActiveFlag_0_31>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <EXTI0_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8007abc:	2001      	movs	r0, #1
 8007abe:	f7ff ffb5 	bl	8007a2c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8007ac2:	bf00      	nop
 8007ac4:	bd80      	pop	{r7, pc}

08007ac6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8007ac6:	b580      	push	{r7, lr}
 8007ac8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	IM_BTN4_EXTI1_Handler();
 8007aca:	f7fc fe63 	bl	8004794 <IM_BTN4_EXTI1_Handler>

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8007ace:	2002      	movs	r0, #2
 8007ad0:	f7ff ff96 	bl	8007a00 <LL_EXTI_IsActiveFlag_0_31>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d002      	beq.n	8007ae0 <EXTI1_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8007ada:	2002      	movs	r0, #2
 8007adc:	f7ff ffa6 	bl	8007a2c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8007ae0:	bf00      	nop
 8007ae2:	bd80      	pop	{r7, pc}

08007ae4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	IM_ENC_EXTI2_Handler();
 8007ae8:	f7fc fe7a 	bl	80047e0 <IM_ENC_EXTI2_Handler>

  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8007aec:	2004      	movs	r0, #4
 8007aee:	f7ff ff87 	bl	8007a00 <LL_EXTI_IsActiveFlag_0_31>
 8007af2:	4603      	mov	r3, r0
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d002      	beq.n	8007afe <EXTI2_IRQHandler+0x1a>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8007af8:	2004      	movs	r0, #4
 8007afa:	f7ff ff97 	bl	8007a2c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8007afe:	bf00      	nop
 8007b00:	bd80      	pop	{r7, pc}
	...

08007b04 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8007b04:	b580      	push	{r7, lr}
 8007b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007b08:	4802      	ldr	r0, [pc, #8]	; (8007b14 <DMA1_Channel1_IRQHandler+0x10>)
 8007b0a:	f002 fedb 	bl	800a8c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8007b0e:	bf00      	nop
 8007b10:	bd80      	pop	{r7, pc}
 8007b12:	bf00      	nop
 8007b14:	20002078 	.word	0x20002078

08007b18 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8007b1c:	4802      	ldr	r0, [pc, #8]	; (8007b28 <DMA1_Channel2_IRQHandler+0x10>)
 8007b1e:	f002 fed1 	bl	800a8c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8007b22:	bf00      	nop
 8007b24:	bd80      	pop	{r7, pc}
 8007b26:	bf00      	nop
 8007b28:	20002124 	.word	0x20002124

08007b2c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8007b2c:	b580      	push	{r7, lr}
 8007b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8007b30:	4802      	ldr	r0, [pc, #8]	; (8007b3c <DMA1_Channel3_IRQHandler+0x10>)
 8007b32:	f002 fec7 	bl	800a8c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8007b36:	bf00      	nop
 8007b38:	bd80      	pop	{r7, pc}
 8007b3a:	bf00      	nop
 8007b3c:	20002184 	.word	0x20002184

08007b40 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8007b40:	b580      	push	{r7, lr}
 8007b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

	DM_UpdateDisplay();
 8007b44:	f7f9 f8ca 	bl	8000cdc <DM_UpdateDisplay>

	IM_ENC_DIRF_Handler();
 8007b48:	f7fc fe70 	bl	800482c <IM_ENC_DIRF_Handler>

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007b4c:	4803      	ldr	r0, [pc, #12]	; (8007b5c <TIM1_BRK_TIM15_IRQHandler+0x1c>)
 8007b4e:	f004 fbe6 	bl	800c31e <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8007b52:	4803      	ldr	r0, [pc, #12]	; (8007b60 <TIM1_BRK_TIM15_IRQHandler+0x20>)
 8007b54:	f004 fbe3 	bl	800c31e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8007b58:	bf00      	nop
 8007b5a:	bd80      	pop	{r7, pc}
 8007b5c:	20002378 	.word	0x20002378
 8007b60:	20002294 	.word	0x20002294

08007b64 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007b64:	b580      	push	{r7, lr}
 8007b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8007b68:	4802      	ldr	r0, [pc, #8]	; (8007b74 <TIM3_IRQHandler+0x10>)
 8007b6a:	f004 fbd8 	bl	800c31e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8007b6e:	bf00      	nop
 8007b70:	bd80      	pop	{r7, pc}
 8007b72:	bf00      	nop
 8007b74:	2000232c 	.word	0x2000232c

08007b78 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	IM_BTN1_EXTI14_Handler();
 8007b7c:	f7fc fd94 	bl	80046a8 <IM_BTN1_EXTI14_Handler>
	IM_BTN2_EXTI15_Handler();
 8007b80:	f7fc fdba 	bl	80046f8 <IM_BTN2_EXTI15_Handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8007b84:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007b88:	f7ff ff3a 	bl	8007a00 <LL_EXTI_IsActiveFlag_0_31>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d003      	beq.n	8007b9a <EXTI15_10_IRQHandler+0x22>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8007b92:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8007b96:	f7ff ff49 	bl	8007a2c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8007b9a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007b9e:	f7ff ff2f 	bl	8007a00 <LL_EXTI_IsActiveFlag_0_31>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d003      	beq.n	8007bb0 <EXTI15_10_IRQHandler+0x38>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8007ba8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8007bac:	f7ff ff3e 	bl	8007a2c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007bb0:	bf00      	nop
 8007bb2:	bd80      	pop	{r7, pc}

08007bb4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */
	IM_SWEEP_UPDATE_TIM_IRQHandler();
 8007bb8:	f7fc fd1e 	bl	80045f8 <IM_SWEEP_UPDATE_TIM_IRQHandler>
  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8007bbc:	4802      	ldr	r0, [pc, #8]	; (8007bc8 <TIM5_IRQHandler+0x14>)
 8007bbe:	f004 fbae 	bl	800c31e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8007bc2:	bf00      	nop
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	200022e0 	.word	0x200022e0

08007bcc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b086      	sub	sp, #24
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	60f8      	str	r0, [r7, #12]
 8007bd4:	60b9      	str	r1, [r7, #8]
 8007bd6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007bd8:	2300      	movs	r3, #0
 8007bda:	617b      	str	r3, [r7, #20]
 8007bdc:	e00a      	b.n	8007bf4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8007bde:	f3af 8000 	nop.w
 8007be2:	4601      	mov	r1, r0
 8007be4:	68bb      	ldr	r3, [r7, #8]
 8007be6:	1c5a      	adds	r2, r3, #1
 8007be8:	60ba      	str	r2, [r7, #8]
 8007bea:	b2ca      	uxtb	r2, r1
 8007bec:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007bee:	697b      	ldr	r3, [r7, #20]
 8007bf0:	3301      	adds	r3, #1
 8007bf2:	617b      	str	r3, [r7, #20]
 8007bf4:	697a      	ldr	r2, [r7, #20]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	dbf0      	blt.n	8007bde <_read+0x12>
	}

return len;
 8007bfc:	687b      	ldr	r3, [r7, #4]
}
 8007bfe:	4618      	mov	r0, r3
 8007c00:	3718      	adds	r7, #24
 8007c02:	46bd      	mov	sp, r7
 8007c04:	bd80      	pop	{r7, pc}

08007c06 <_close>:
	}
	return len;
}

int _close(int file)
{
 8007c06:	b480      	push	{r7}
 8007c08:	b083      	sub	sp, #12
 8007c0a:	af00      	add	r7, sp, #0
 8007c0c:	6078      	str	r0, [r7, #4]
	return -1;
 8007c0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	370c      	adds	r7, #12
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr

08007c1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8007c1e:	b480      	push	{r7}
 8007c20:	b083      	sub	sp, #12
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	6078      	str	r0, [r7, #4]
 8007c26:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007c2e:	605a      	str	r2, [r3, #4]
	return 0;
 8007c30:	2300      	movs	r3, #0
}
 8007c32:	4618      	mov	r0, r3
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr

08007c3e <_isatty>:

int _isatty(int file)
{
 8007c3e:	b480      	push	{r7}
 8007c40:	b083      	sub	sp, #12
 8007c42:	af00      	add	r7, sp, #0
 8007c44:	6078      	str	r0, [r7, #4]
	return 1;
 8007c46:	2301      	movs	r3, #1
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	370c      	adds	r7, #12
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c52:	4770      	bx	lr

08007c54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b085      	sub	sp, #20
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	607a      	str	r2, [r7, #4]
	return 0;
 8007c60:	2300      	movs	r3, #0
}
 8007c62:	4618      	mov	r0, r3
 8007c64:	3714      	adds	r7, #20
 8007c66:	46bd      	mov	sp, r7
 8007c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6c:	4770      	bx	lr
	...

08007c70 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8007c78:	4b11      	ldr	r3, [pc, #68]	; (8007cc0 <_sbrk+0x50>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d102      	bne.n	8007c86 <_sbrk+0x16>
		heap_end = &end;
 8007c80:	4b0f      	ldr	r3, [pc, #60]	; (8007cc0 <_sbrk+0x50>)
 8007c82:	4a10      	ldr	r2, [pc, #64]	; (8007cc4 <_sbrk+0x54>)
 8007c84:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8007c86:	4b0e      	ldr	r3, [pc, #56]	; (8007cc0 <_sbrk+0x50>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007c8c:	4b0c      	ldr	r3, [pc, #48]	; (8007cc0 <_sbrk+0x50>)
 8007c8e:	681a      	ldr	r2, [r3, #0]
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	4413      	add	r3, r2
 8007c94:	466a      	mov	r2, sp
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d907      	bls.n	8007caa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8007c9a:	f006 fc39 	bl	800e510 <__errno>
 8007c9e:	4602      	mov	r2, r0
 8007ca0:	230c      	movs	r3, #12
 8007ca2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007ca8:	e006      	b.n	8007cb8 <_sbrk+0x48>
	}

	heap_end += incr;
 8007caa:	4b05      	ldr	r3, [pc, #20]	; (8007cc0 <_sbrk+0x50>)
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	4413      	add	r3, r2
 8007cb2:	4a03      	ldr	r2, [pc, #12]	; (8007cc0 <_sbrk+0x50>)
 8007cb4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	20001a24 	.word	0x20001a24
 8007cc4:	20002468 	.word	0x20002468

08007cc8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007ccc:	4b08      	ldr	r3, [pc, #32]	; (8007cf0 <SystemInit+0x28>)
 8007cce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007cd2:	4a07      	ldr	r2, [pc, #28]	; (8007cf0 <SystemInit+0x28>)
 8007cd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007cd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007cdc:	4b04      	ldr	r3, [pc, #16]	; (8007cf0 <SystemInit+0x28>)
 8007cde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007ce2:	609a      	str	r2, [r3, #8]
#endif
}
 8007ce4:	bf00      	nop
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	e000ed00 	.word	0xe000ed00

08007cf4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim15;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007cf4:	b580      	push	{r7, lr}
 8007cf6:	b09a      	sub	sp, #104	; 0x68
 8007cf8:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8007cfa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007cfe:	2224      	movs	r2, #36	; 0x24
 8007d00:	2100      	movs	r1, #0
 8007d02:	4618      	mov	r0, r3
 8007d04:	f006 fc2e 	bl	800e564 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007d08:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	601a      	str	r2, [r3, #0]
 8007d10:	605a      	str	r2, [r3, #4]
 8007d12:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007d14:	1d3b      	adds	r3, r7, #4
 8007d16:	2234      	movs	r2, #52	; 0x34
 8007d18:	2100      	movs	r1, #0
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f006 fc22 	bl	800e564 <memset>

  htim1.Instance = TIM1;
 8007d20:	4b2a      	ldr	r3, [pc, #168]	; (8007dcc <MX_TIM1_Init+0xd8>)
 8007d22:	4a2b      	ldr	r2, [pc, #172]	; (8007dd0 <MX_TIM1_Init+0xdc>)
 8007d24:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8007d26:	4b29      	ldr	r3, [pc, #164]	; (8007dcc <MX_TIM1_Init+0xd8>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8007d2c:	4b27      	ldr	r3, [pc, #156]	; (8007dcc <MX_TIM1_Init+0xd8>)
 8007d2e:	2240      	movs	r2, #64	; 0x40
 8007d30:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 8007d32:	4b26      	ldr	r3, [pc, #152]	; (8007dcc <MX_TIM1_Init+0xd8>)
 8007d34:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007d38:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007d3a:	4b24      	ldr	r3, [pc, #144]	; (8007dcc <MX_TIM1_Init+0xd8>)
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007d40:	4b22      	ldr	r3, [pc, #136]	; (8007dcc <MX_TIM1_Init+0xd8>)
 8007d42:	2200      	movs	r2, #0
 8007d44:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007d46:	4b21      	ldr	r3, [pc, #132]	; (8007dcc <MX_TIM1_Init+0xd8>)
 8007d48:	2280      	movs	r2, #128	; 0x80
 8007d4a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007d4c:	2303      	movs	r3, #3
 8007d4e:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8007d50:	2300      	movs	r3, #0
 8007d52:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007d54:	2301      	movs	r3, #1
 8007d56:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8007d60:	2300      	movs	r3, #0
 8007d62:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8007d64:	2301      	movs	r3, #1
 8007d66:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8007d68:	2300      	movs	r3, #0
 8007d6a:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8007d6c:	2300      	movs	r3, #0
 8007d6e:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8007d70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007d74:	4619      	mov	r1, r3
 8007d76:	4815      	ldr	r0, [pc, #84]	; (8007dcc <MX_TIM1_Init+0xd8>)
 8007d78:	f004 fa2b 	bl	800c1d2 <HAL_TIM_Encoder_Init>
 8007d7c:	4603      	mov	r3, r0
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d001      	beq.n	8007d86 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8007d82:	f7ff fd49 	bl	8007818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007d86:	2320      	movs	r3, #32
 8007d88:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007d8e:	2300      	movs	r3, #0
 8007d90:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8007d92:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007d96:	4619      	mov	r1, r3
 8007d98:	480c      	ldr	r0, [pc, #48]	; (8007dcc <MX_TIM1_Init+0xd8>)
 8007d9a:	f004 fea5 	bl	800cae8 <HAL_TIMEx_MasterConfigSynchronization>
 8007d9e:	4603      	mov	r3, r0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d001      	beq.n	8007da8 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 8007da4:	f7ff fd38 	bl	8007818 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007da8:	2300      	movs	r3, #0
 8007daa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8007dac:	2300      	movs	r3, #0
 8007dae:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8007db0:	1d3b      	adds	r3, r7, #4
 8007db2:	4619      	mov	r1, r3
 8007db4:	4805      	ldr	r0, [pc, #20]	; (8007dcc <MX_TIM1_Init+0xd8>)
 8007db6:	f004 ff2d 	bl	800cc14 <HAL_TIMEx_ConfigBreakDeadTime>
 8007dba:	4603      	mov	r3, r0
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d001      	beq.n	8007dc4 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8007dc0:	f7ff fd2a 	bl	8007818 <Error_Handler>
  }

}
 8007dc4:	bf00      	nop
 8007dc6:	3768      	adds	r7, #104	; 0x68
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}
 8007dcc:	20002378 	.word	0x20002378
 8007dd0:	40012c00 	.word	0x40012c00

08007dd4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b088      	sub	sp, #32
 8007dd8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007dda:	f107 0310 	add.w	r3, r7, #16
 8007dde:	2200      	movs	r2, #0
 8007de0:	601a      	str	r2, [r3, #0]
 8007de2:	605a      	str	r2, [r3, #4]
 8007de4:	609a      	str	r2, [r3, #8]
 8007de6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007de8:	1d3b      	adds	r3, r7, #4
 8007dea:	2200      	movs	r2, #0
 8007dec:	601a      	str	r2, [r3, #0]
 8007dee:	605a      	str	r2, [r3, #4]
 8007df0:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 8007df2:	4b1d      	ldr	r3, [pc, #116]	; (8007e68 <MX_TIM2_Init+0x94>)
 8007df4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007df8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007dfa:	4b1b      	ldr	r3, [pc, #108]	; (8007e68 <MX_TIM2_Init+0x94>)
 8007dfc:	2200      	movs	r2, #0
 8007dfe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007e00:	4b19      	ldr	r3, [pc, #100]	; (8007e68 <MX_TIM2_Init+0x94>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1;
 8007e06:	4b18      	ldr	r3, [pc, #96]	; (8007e68 <MX_TIM2_Init+0x94>)
 8007e08:	2201      	movs	r2, #1
 8007e0a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007e0c:	4b16      	ldr	r3, [pc, #88]	; (8007e68 <MX_TIM2_Init+0x94>)
 8007e0e:	2200      	movs	r2, #0
 8007e10:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007e12:	4b15      	ldr	r3, [pc, #84]	; (8007e68 <MX_TIM2_Init+0x94>)
 8007e14:	2280      	movs	r2, #128	; 0x80
 8007e16:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007e18:	4813      	ldr	r0, [pc, #76]	; (8007e68 <MX_TIM2_Init+0x94>)
 8007e1a:	f004 f8c7 	bl	800bfac <HAL_TIM_Base_Init>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d001      	beq.n	8007e28 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8007e24:	f7ff fcf8 	bl	8007818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007e28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007e2c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007e2e:	f107 0310 	add.w	r3, r7, #16
 8007e32:	4619      	mov	r1, r3
 8007e34:	480c      	ldr	r0, [pc, #48]	; (8007e68 <MX_TIM2_Init+0x94>)
 8007e36:	f004 fbf1 	bl	800c61c <HAL_TIM_ConfigClockSource>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d001      	beq.n	8007e44 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8007e40:	f7ff fcea 	bl	8007818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007e44:	2320      	movs	r3, #32
 8007e46:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007e4c:	1d3b      	adds	r3, r7, #4
 8007e4e:	4619      	mov	r1, r3
 8007e50:	4805      	ldr	r0, [pc, #20]	; (8007e68 <MX_TIM2_Init+0x94>)
 8007e52:	f004 fe49 	bl	800cae8 <HAL_TIMEx_MasterConfigSynchronization>
 8007e56:	4603      	mov	r3, r0
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d001      	beq.n	8007e60 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8007e5c:	f7ff fcdc 	bl	8007818 <Error_Handler>
  }

}
 8007e60:	bf00      	nop
 8007e62:	3720      	adds	r7, #32
 8007e64:	46bd      	mov	sp, r7
 8007e66:	bd80      	pop	{r7, pc}
 8007e68:	200023c4 	.word	0x200023c4

08007e6c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b088      	sub	sp, #32
 8007e70:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007e72:	f107 0310 	add.w	r3, r7, #16
 8007e76:	2200      	movs	r2, #0
 8007e78:	601a      	str	r2, [r3, #0]
 8007e7a:	605a      	str	r2, [r3, #4]
 8007e7c:	609a      	str	r2, [r3, #8]
 8007e7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007e80:	1d3b      	adds	r3, r7, #4
 8007e82:	2200      	movs	r2, #0
 8007e84:	601a      	str	r2, [r3, #0]
 8007e86:	605a      	str	r2, [r3, #4]
 8007e88:	609a      	str	r2, [r3, #8]

  htim3.Instance = TIM3;
 8007e8a:	4b1d      	ldr	r3, [pc, #116]	; (8007f00 <MX_TIM3_Init+0x94>)
 8007e8c:	4a1d      	ldr	r2, [pc, #116]	; (8007f04 <MX_TIM3_Init+0x98>)
 8007e8e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8007e90:	4b1b      	ldr	r3, [pc, #108]	; (8007f00 <MX_TIM3_Init+0x94>)
 8007e92:	2200      	movs	r2, #0
 8007e94:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8007e96:	4b1a      	ldr	r3, [pc, #104]	; (8007f00 <MX_TIM3_Init+0x94>)
 8007e98:	2210      	movs	r2, #16
 8007e9a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1;
 8007e9c:	4b18      	ldr	r3, [pc, #96]	; (8007f00 <MX_TIM3_Init+0x94>)
 8007e9e:	2201      	movs	r2, #1
 8007ea0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8007ea2:	4b17      	ldr	r3, [pc, #92]	; (8007f00 <MX_TIM3_Init+0x94>)
 8007ea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ea8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007eaa:	4b15      	ldr	r3, [pc, #84]	; (8007f00 <MX_TIM3_Init+0x94>)
 8007eac:	2200      	movs	r2, #0
 8007eae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8007eb0:	4813      	ldr	r0, [pc, #76]	; (8007f00 <MX_TIM3_Init+0x94>)
 8007eb2:	f004 f87b 	bl	800bfac <HAL_TIM_Base_Init>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d001      	beq.n	8007ec0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8007ebc:	f7ff fcac 	bl	8007818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007ec0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007ec4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8007ec6:	f107 0310 	add.w	r3, r7, #16
 8007eca:	4619      	mov	r1, r3
 8007ecc:	480c      	ldr	r0, [pc, #48]	; (8007f00 <MX_TIM3_Init+0x94>)
 8007ece:	f004 fba5 	bl	800c61c <HAL_TIM_ConfigClockSource>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d001      	beq.n	8007edc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8007ed8:	f7ff fc9e 	bl	8007818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007edc:	2300      	movs	r3, #0
 8007ede:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8007ee4:	1d3b      	adds	r3, r7, #4
 8007ee6:	4619      	mov	r1, r3
 8007ee8:	4805      	ldr	r0, [pc, #20]	; (8007f00 <MX_TIM3_Init+0x94>)
 8007eea:	f004 fdfd 	bl	800cae8 <HAL_TIMEx_MasterConfigSynchronization>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d001      	beq.n	8007ef8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8007ef4:	f7ff fc90 	bl	8007818 <Error_Handler>
  }

}
 8007ef8:	bf00      	nop
 8007efa:	3720      	adds	r7, #32
 8007efc:	46bd      	mov	sp, r7
 8007efe:	bd80      	pop	{r7, pc}
 8007f00:	2000232c 	.word	0x2000232c
 8007f04:	40000400 	.word	0x40000400

08007f08 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8007f08:	b580      	push	{r7, lr}
 8007f0a:	b088      	sub	sp, #32
 8007f0c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007f0e:	f107 0310 	add.w	r3, r7, #16
 8007f12:	2200      	movs	r2, #0
 8007f14:	601a      	str	r2, [r3, #0]
 8007f16:	605a      	str	r2, [r3, #4]
 8007f18:	609a      	str	r2, [r3, #8]
 8007f1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007f1c:	1d3b      	adds	r3, r7, #4
 8007f1e:	2200      	movs	r2, #0
 8007f20:	601a      	str	r2, [r3, #0]
 8007f22:	605a      	str	r2, [r3, #4]
 8007f24:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8007f26:	4b1d      	ldr	r3, [pc, #116]	; (8007f9c <MX_TIM5_Init+0x94>)
 8007f28:	4a1d      	ldr	r2, [pc, #116]	; (8007fa0 <MX_TIM5_Init+0x98>)
 8007f2a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8007f2c:	4b1b      	ldr	r3, [pc, #108]	; (8007f9c <MX_TIM5_Init+0x94>)
 8007f2e:	2200      	movs	r2, #0
 8007f30:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007f32:	4b1a      	ldr	r3, [pc, #104]	; (8007f9c <MX_TIM5_Init+0x94>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1024;
 8007f38:	4b18      	ldr	r3, [pc, #96]	; (8007f9c <MX_TIM5_Init+0x94>)
 8007f3a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007f3e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007f40:	4b16      	ldr	r3, [pc, #88]	; (8007f9c <MX_TIM5_Init+0x94>)
 8007f42:	2200      	movs	r2, #0
 8007f44:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007f46:	4b15      	ldr	r3, [pc, #84]	; (8007f9c <MX_TIM5_Init+0x94>)
 8007f48:	2280      	movs	r2, #128	; 0x80
 8007f4a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8007f4c:	4813      	ldr	r0, [pc, #76]	; (8007f9c <MX_TIM5_Init+0x94>)
 8007f4e:	f004 f82d 	bl	800bfac <HAL_TIM_Base_Init>
 8007f52:	4603      	mov	r3, r0
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d001      	beq.n	8007f5c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8007f58:	f7ff fc5e 	bl	8007818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f60:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8007f62:	f107 0310 	add.w	r3, r7, #16
 8007f66:	4619      	mov	r1, r3
 8007f68:	480c      	ldr	r0, [pc, #48]	; (8007f9c <MX_TIM5_Init+0x94>)
 8007f6a:	f004 fb57 	bl	800c61c <HAL_TIM_ConfigClockSource>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d001      	beq.n	8007f78 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8007f74:	f7ff fc50 	bl	8007818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8007f80:	1d3b      	adds	r3, r7, #4
 8007f82:	4619      	mov	r1, r3
 8007f84:	4805      	ldr	r0, [pc, #20]	; (8007f9c <MX_TIM5_Init+0x94>)
 8007f86:	f004 fdaf 	bl	800cae8 <HAL_TIMEx_MasterConfigSynchronization>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d001      	beq.n	8007f94 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8007f90:	f7ff fc42 	bl	8007818 <Error_Handler>
  }

}
 8007f94:	bf00      	nop
 8007f96:	3720      	adds	r7, #32
 8007f98:	46bd      	mov	sp, r7
 8007f9a:	bd80      	pop	{r7, pc}
 8007f9c:	200022e0 	.word	0x200022e0
 8007fa0:	40000c00 	.word	0x40000c00

08007fa4 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b094      	sub	sp, #80	; 0x50
 8007fa8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007faa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8007fae:	2200      	movs	r2, #0
 8007fb0:	601a      	str	r2, [r3, #0]
 8007fb2:	605a      	str	r2, [r3, #4]
 8007fb4:	609a      	str	r2, [r3, #8]
 8007fb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007fb8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	601a      	str	r2, [r3, #0]
 8007fc0:	605a      	str	r2, [r3, #4]
 8007fc2:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007fc4:	463b      	mov	r3, r7
 8007fc6:	2234      	movs	r2, #52	; 0x34
 8007fc8:	2100      	movs	r1, #0
 8007fca:	4618      	mov	r0, r3
 8007fcc:	f006 faca 	bl	800e564 <memset>

  htim8.Instance = TIM8;
 8007fd0:	4b26      	ldr	r3, [pc, #152]	; (800806c <MX_TIM8_Init+0xc8>)
 8007fd2:	4a27      	ldr	r2, [pc, #156]	; (8008070 <MX_TIM8_Init+0xcc>)
 8007fd4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8007fd6:	4b25      	ldr	r3, [pc, #148]	; (800806c <MX_TIM8_Init+0xc8>)
 8007fd8:	2200      	movs	r2, #0
 8007fda:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007fdc:	4b23      	ldr	r3, [pc, #140]	; (800806c <MX_TIM8_Init+0xc8>)
 8007fde:	2200      	movs	r2, #0
 8007fe0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 8007fe2:	4b22      	ldr	r3, [pc, #136]	; (800806c <MX_TIM8_Init+0xc8>)
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007fe8:	4b20      	ldr	r3, [pc, #128]	; (800806c <MX_TIM8_Init+0xc8>)
 8007fea:	2200      	movs	r2, #0
 8007fec:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8007fee:	4b1f      	ldr	r3, [pc, #124]	; (800806c <MX_TIM8_Init+0xc8>)
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8007ff4:	4b1d      	ldr	r3, [pc, #116]	; (800806c <MX_TIM8_Init+0xc8>)
 8007ff6:	2280      	movs	r2, #128	; 0x80
 8007ff8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8007ffa:	481c      	ldr	r0, [pc, #112]	; (800806c <MX_TIM8_Init+0xc8>)
 8007ffc:	f003 ffd6 	bl	800bfac <HAL_TIM_Base_Init>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d001      	beq.n	800800a <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8008006:	f7ff fc07 	bl	8007818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800800a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800800e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8008010:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008014:	4619      	mov	r1, r3
 8008016:	4815      	ldr	r0, [pc, #84]	; (800806c <MX_TIM8_Init+0xc8>)
 8008018:	f004 fb00 	bl	800c61c <HAL_TIM_ConfigClockSource>
 800801c:	4603      	mov	r3, r0
 800801e:	2b00      	cmp	r3, #0
 8008020:	d001      	beq.n	8008026 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8008022:	f7ff fbf9 	bl	8007818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8008026:	2320      	movs	r3, #32
 8008028:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800802a:	2300      	movs	r3, #0
 800802c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800802e:	2300      	movs	r3, #0
 8008030:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8008032:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008036:	4619      	mov	r1, r3
 8008038:	480c      	ldr	r0, [pc, #48]	; (800806c <MX_TIM8_Init+0xc8>)
 800803a:	f004 fd55 	bl	800cae8 <HAL_TIMEx_MasterConfigSynchronization>
 800803e:	4603      	mov	r3, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	d001      	beq.n	8008048 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8008044:	f7ff fbe8 	bl	8007818 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8008048:	2300      	movs	r3, #0
 800804a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800804c:	2300      	movs	r3, #0
 800804e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8008050:	463b      	mov	r3, r7
 8008052:	4619      	mov	r1, r3
 8008054:	4805      	ldr	r0, [pc, #20]	; (800806c <MX_TIM8_Init+0xc8>)
 8008056:	f004 fddd 	bl	800cc14 <HAL_TIMEx_ConfigBreakDeadTime>
 800805a:	4603      	mov	r3, r0
 800805c:	2b00      	cmp	r3, #0
 800805e:	d001      	beq.n	8008064 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8008060:	f7ff fbda 	bl	8007818 <Error_Handler>
  }

}
 8008064:	bf00      	nop
 8008066:	3750      	adds	r7, #80	; 0x50
 8008068:	46bd      	mov	sp, r7
 800806a:	bd80      	pop	{r7, pc}
 800806c:	20002248 	.word	0x20002248
 8008070:	40013400 	.word	0x40013400

08008074 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b088      	sub	sp, #32
 8008078:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800807a:	f107 0310 	add.w	r3, r7, #16
 800807e:	2200      	movs	r2, #0
 8008080:	601a      	str	r2, [r3, #0]
 8008082:	605a      	str	r2, [r3, #4]
 8008084:	609a      	str	r2, [r3, #8]
 8008086:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008088:	1d3b      	adds	r3, r7, #4
 800808a:	2200      	movs	r2, #0
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	605a      	str	r2, [r3, #4]
 8008090:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8008092:	4b1f      	ldr	r3, [pc, #124]	; (8008110 <MX_TIM15_Init+0x9c>)
 8008094:	4a1f      	ldr	r2, [pc, #124]	; (8008114 <MX_TIM15_Init+0xa0>)
 8008096:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8008098:	4b1d      	ldr	r3, [pc, #116]	; (8008110 <MX_TIM15_Init+0x9c>)
 800809a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800809e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80080a0:	4b1b      	ldr	r3, [pc, #108]	; (8008110 <MX_TIM15_Init+0x9c>)
 80080a2:	2200      	movs	r2, #0
 80080a4:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 80080a6:	4b1a      	ldr	r3, [pc, #104]	; (8008110 <MX_TIM15_Init+0x9c>)
 80080a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80080ac:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80080ae:	4b18      	ldr	r3, [pc, #96]	; (8008110 <MX_TIM15_Init+0x9c>)
 80080b0:	2200      	movs	r2, #0
 80080b2:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 80080b4:	4b16      	ldr	r3, [pc, #88]	; (8008110 <MX_TIM15_Init+0x9c>)
 80080b6:	2200      	movs	r2, #0
 80080b8:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80080ba:	4b15      	ldr	r3, [pc, #84]	; (8008110 <MX_TIM15_Init+0x9c>)
 80080bc:	2200      	movs	r2, #0
 80080be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80080c0:	4813      	ldr	r0, [pc, #76]	; (8008110 <MX_TIM15_Init+0x9c>)
 80080c2:	f003 ff73 	bl	800bfac <HAL_TIM_Base_Init>
 80080c6:	4603      	mov	r3, r0
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d001      	beq.n	80080d0 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 80080cc:	f7ff fba4 	bl	8007818 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80080d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80080d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80080d6:	f107 0310 	add.w	r3, r7, #16
 80080da:	4619      	mov	r1, r3
 80080dc:	480c      	ldr	r0, [pc, #48]	; (8008110 <MX_TIM15_Init+0x9c>)
 80080de:	f004 fa9d 	bl	800c61c <HAL_TIM_ConfigClockSource>
 80080e2:	4603      	mov	r3, r0
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d001      	beq.n	80080ec <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80080e8:	f7ff fb96 	bl	8007818 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80080ec:	2300      	movs	r3, #0
 80080ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80080f0:	2300      	movs	r3, #0
 80080f2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80080f4:	1d3b      	adds	r3, r7, #4
 80080f6:	4619      	mov	r1, r3
 80080f8:	4805      	ldr	r0, [pc, #20]	; (8008110 <MX_TIM15_Init+0x9c>)
 80080fa:	f004 fcf5 	bl	800cae8 <HAL_TIMEx_MasterConfigSynchronization>
 80080fe:	4603      	mov	r3, r0
 8008100:	2b00      	cmp	r3, #0
 8008102:	d001      	beq.n	8008108 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8008104:	f7ff fb88 	bl	8007818 <Error_Handler>
  }

}
 8008108:	bf00      	nop
 800810a:	3720      	adds	r7, #32
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}
 8008110:	20002294 	.word	0x20002294
 8008114:	40014000 	.word	0x40014000

08008118 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8008118:	b580      	push	{r7, lr}
 800811a:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 800811c:	4b10      	ldr	r3, [pc, #64]	; (8008160 <MX_TIM16_Init+0x48>)
 800811e:	4a11      	ldr	r2, [pc, #68]	; (8008164 <MX_TIM16_Init+0x4c>)
 8008120:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 65535;
 8008122:	4b0f      	ldr	r3, [pc, #60]	; (8008160 <MX_TIM16_Init+0x48>)
 8008124:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008128:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800812a:	4b0d      	ldr	r3, [pc, #52]	; (8008160 <MX_TIM16_Init+0x48>)
 800812c:	2200      	movs	r2, #0
 800812e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8008130:	4b0b      	ldr	r3, [pc, #44]	; (8008160 <MX_TIM16_Init+0x48>)
 8008132:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008136:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008138:	4b09      	ldr	r3, [pc, #36]	; (8008160 <MX_TIM16_Init+0x48>)
 800813a:	2200      	movs	r2, #0
 800813c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800813e:	4b08      	ldr	r3, [pc, #32]	; (8008160 <MX_TIM16_Init+0x48>)
 8008140:	2200      	movs	r2, #0
 8008142:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008144:	4b06      	ldr	r3, [pc, #24]	; (8008160 <MX_TIM16_Init+0x48>)
 8008146:	2200      	movs	r2, #0
 8008148:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800814a:	4805      	ldr	r0, [pc, #20]	; (8008160 <MX_TIM16_Init+0x48>)
 800814c:	f003 ff2e 	bl	800bfac <HAL_TIM_Base_Init>
 8008150:	4603      	mov	r3, r0
 8008152:	2b00      	cmp	r3, #0
 8008154:	d001      	beq.n	800815a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8008156:	f7ff fb5f 	bl	8007818 <Error_Handler>
  }

}
 800815a:	bf00      	nop
 800815c:	bd80      	pop	{r7, pc}
 800815e:	bf00      	nop
 8008160:	20002410 	.word	0x20002410
 8008164:	40014400 	.word	0x40014400

08008168 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b08a      	sub	sp, #40	; 0x28
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008170:	f107 0314 	add.w	r3, r7, #20
 8008174:	2200      	movs	r2, #0
 8008176:	601a      	str	r2, [r3, #0]
 8008178:	605a      	str	r2, [r3, #4]
 800817a:	609a      	str	r2, [r3, #8]
 800817c:	60da      	str	r2, [r3, #12]
 800817e:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	4a1b      	ldr	r2, [pc, #108]	; (80081f4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d12f      	bne.n	80081ea <HAL_TIM_Encoder_MspInit+0x82>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800818a:	4b1b      	ldr	r3, [pc, #108]	; (80081f8 <HAL_TIM_Encoder_MspInit+0x90>)
 800818c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800818e:	4a1a      	ldr	r2, [pc, #104]	; (80081f8 <HAL_TIM_Encoder_MspInit+0x90>)
 8008190:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008194:	6613      	str	r3, [r2, #96]	; 0x60
 8008196:	4b18      	ldr	r3, [pc, #96]	; (80081f8 <HAL_TIM_Encoder_MspInit+0x90>)
 8008198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800819a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800819e:	613b      	str	r3, [r7, #16]
 80081a0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80081a2:	4b15      	ldr	r3, [pc, #84]	; (80081f8 <HAL_TIM_Encoder_MspInit+0x90>)
 80081a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081a6:	4a14      	ldr	r2, [pc, #80]	; (80081f8 <HAL_TIM_Encoder_MspInit+0x90>)
 80081a8:	f043 0304 	orr.w	r3, r3, #4
 80081ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80081ae:	4b12      	ldr	r3, [pc, #72]	; (80081f8 <HAL_TIM_Encoder_MspInit+0x90>)
 80081b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081b2:	f003 0304 	and.w	r3, r3, #4
 80081b6:	60fb      	str	r3, [r7, #12]
 80081b8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80081ba:	2303      	movs	r3, #3
 80081bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80081be:	2302      	movs	r3, #2
 80081c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80081c2:	2300      	movs	r3, #0
 80081c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80081c6:	2300      	movs	r3, #0
 80081c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80081ca:	2302      	movs	r3, #2
 80081cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80081ce:	f107 0314 	add.w	r3, r7, #20
 80081d2:	4619      	mov	r1, r3
 80081d4:	4809      	ldr	r0, [pc, #36]	; (80081fc <HAL_TIM_Encoder_MspInit+0x94>)
 80081d6:	f002 fcc5 	bl	800ab64 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80081da:	2200      	movs	r2, #0
 80081dc:	2100      	movs	r1, #0
 80081de:	2018      	movs	r0, #24
 80081e0:	f001 fda1 	bl	8009d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80081e4:	2018      	movs	r0, #24
 80081e6:	f001 fdb8 	bl	8009d5a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80081ea:	bf00      	nop
 80081ec:	3728      	adds	r7, #40	; 0x28
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bd80      	pop	{r7, pc}
 80081f2:	bf00      	nop
 80081f4:	40012c00 	.word	0x40012c00
 80081f8:	40021000 	.word	0x40021000
 80081fc:	48000800 	.word	0x48000800

08008200 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b08e      	sub	sp, #56	; 0x38
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008208:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800820c:	2200      	movs	r2, #0
 800820e:	601a      	str	r2, [r3, #0]
 8008210:	605a      	str	r2, [r3, #4]
 8008212:	609a      	str	r2, [r3, #8]
 8008214:	60da      	str	r2, [r3, #12]
 8008216:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008220:	d10c      	bne.n	800823c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008222:	4b4f      	ldr	r3, [pc, #316]	; (8008360 <HAL_TIM_Base_MspInit+0x160>)
 8008224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008226:	4a4e      	ldr	r2, [pc, #312]	; (8008360 <HAL_TIM_Base_MspInit+0x160>)
 8008228:	f043 0301 	orr.w	r3, r3, #1
 800822c:	6593      	str	r3, [r2, #88]	; 0x58
 800822e:	4b4c      	ldr	r3, [pc, #304]	; (8008360 <HAL_TIM_Base_MspInit+0x160>)
 8008230:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008232:	f003 0301 	and.w	r3, r3, #1
 8008236:	623b      	str	r3, [r7, #32]
 8008238:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 800823a:	e08d      	b.n	8008358 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM3)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	4a48      	ldr	r2, [pc, #288]	; (8008364 <HAL_TIM_Base_MspInit+0x164>)
 8008242:	4293      	cmp	r3, r2
 8008244:	d114      	bne.n	8008270 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8008246:	4b46      	ldr	r3, [pc, #280]	; (8008360 <HAL_TIM_Base_MspInit+0x160>)
 8008248:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800824a:	4a45      	ldr	r2, [pc, #276]	; (8008360 <HAL_TIM_Base_MspInit+0x160>)
 800824c:	f043 0302 	orr.w	r3, r3, #2
 8008250:	6593      	str	r3, [r2, #88]	; 0x58
 8008252:	4b43      	ldr	r3, [pc, #268]	; (8008360 <HAL_TIM_Base_MspInit+0x160>)
 8008254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008256:	f003 0302 	and.w	r3, r3, #2
 800825a:	61fb      	str	r3, [r7, #28]
 800825c:	69fb      	ldr	r3, [r7, #28]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800825e:	2200      	movs	r2, #0
 8008260:	2100      	movs	r1, #0
 8008262:	201d      	movs	r0, #29
 8008264:	f001 fd5f 	bl	8009d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8008268:	201d      	movs	r0, #29
 800826a:	f001 fd76 	bl	8009d5a <HAL_NVIC_EnableIRQ>
}
 800826e:	e073      	b.n	8008358 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM5)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	4a3c      	ldr	r2, [pc, #240]	; (8008368 <HAL_TIM_Base_MspInit+0x168>)
 8008276:	4293      	cmp	r3, r2
 8008278:	d131      	bne.n	80082de <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800827a:	4b39      	ldr	r3, [pc, #228]	; (8008360 <HAL_TIM_Base_MspInit+0x160>)
 800827c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800827e:	4a38      	ldr	r2, [pc, #224]	; (8008360 <HAL_TIM_Base_MspInit+0x160>)
 8008280:	f043 0308 	orr.w	r3, r3, #8
 8008284:	6593      	str	r3, [r2, #88]	; 0x58
 8008286:	4b36      	ldr	r3, [pc, #216]	; (8008360 <HAL_TIM_Base_MspInit+0x160>)
 8008288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800828a:	f003 0308 	and.w	r3, r3, #8
 800828e:	61bb      	str	r3, [r7, #24]
 8008290:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008292:	4b33      	ldr	r3, [pc, #204]	; (8008360 <HAL_TIM_Base_MspInit+0x160>)
 8008294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008296:	4a32      	ldr	r2, [pc, #200]	; (8008360 <HAL_TIM_Base_MspInit+0x160>)
 8008298:	f043 0301 	orr.w	r3, r3, #1
 800829c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800829e:	4b30      	ldr	r3, [pc, #192]	; (8008360 <HAL_TIM_Base_MspInit+0x160>)
 80082a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	617b      	str	r3, [r7, #20]
 80082a8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80082aa:	2301      	movs	r3, #1
 80082ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80082ae:	2302      	movs	r3, #2
 80082b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80082b2:	2300      	movs	r3, #0
 80082b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80082b6:	2300      	movs	r3, #0
 80082b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80082ba:	2302      	movs	r3, #2
 80082bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80082be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80082c2:	4619      	mov	r1, r3
 80082c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80082c8:	f002 fc4c 	bl	800ab64 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 2, 0);
 80082cc:	2200      	movs	r2, #0
 80082ce:	2102      	movs	r1, #2
 80082d0:	2032      	movs	r0, #50	; 0x32
 80082d2:	f001 fd28 	bl	8009d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80082d6:	2032      	movs	r0, #50	; 0x32
 80082d8:	f001 fd3f 	bl	8009d5a <HAL_NVIC_EnableIRQ>
}
 80082dc:	e03c      	b.n	8008358 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM8)
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	4a22      	ldr	r2, [pc, #136]	; (800836c <HAL_TIM_Base_MspInit+0x16c>)
 80082e4:	4293      	cmp	r3, r2
 80082e6:	d10c      	bne.n	8008302 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80082e8:	4b1d      	ldr	r3, [pc, #116]	; (8008360 <HAL_TIM_Base_MspInit+0x160>)
 80082ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082ec:	4a1c      	ldr	r2, [pc, #112]	; (8008360 <HAL_TIM_Base_MspInit+0x160>)
 80082ee:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80082f2:	6613      	str	r3, [r2, #96]	; 0x60
 80082f4:	4b1a      	ldr	r3, [pc, #104]	; (8008360 <HAL_TIM_Base_MspInit+0x160>)
 80082f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082f8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082fc:	613b      	str	r3, [r7, #16]
 80082fe:	693b      	ldr	r3, [r7, #16]
}
 8008300:	e02a      	b.n	8008358 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM15)
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	4a1a      	ldr	r2, [pc, #104]	; (8008370 <HAL_TIM_Base_MspInit+0x170>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d114      	bne.n	8008336 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800830c:	4b14      	ldr	r3, [pc, #80]	; (8008360 <HAL_TIM_Base_MspInit+0x160>)
 800830e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008310:	4a13      	ldr	r2, [pc, #76]	; (8008360 <HAL_TIM_Base_MspInit+0x160>)
 8008312:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008316:	6613      	str	r3, [r2, #96]	; 0x60
 8008318:	4b11      	ldr	r3, [pc, #68]	; (8008360 <HAL_TIM_Base_MspInit+0x160>)
 800831a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800831c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008320:	60fb      	str	r3, [r7, #12]
 8008322:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8008324:	2200      	movs	r2, #0
 8008326:	2100      	movs	r1, #0
 8008328:	2018      	movs	r0, #24
 800832a:	f001 fcfc 	bl	8009d26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 800832e:	2018      	movs	r0, #24
 8008330:	f001 fd13 	bl	8009d5a <HAL_NVIC_EnableIRQ>
}
 8008334:	e010      	b.n	8008358 <HAL_TIM_Base_MspInit+0x158>
  else if(tim_baseHandle->Instance==TIM16)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a0e      	ldr	r2, [pc, #56]	; (8008374 <HAL_TIM_Base_MspInit+0x174>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d10b      	bne.n	8008358 <HAL_TIM_Base_MspInit+0x158>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8008340:	4b07      	ldr	r3, [pc, #28]	; (8008360 <HAL_TIM_Base_MspInit+0x160>)
 8008342:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008344:	4a06      	ldr	r2, [pc, #24]	; (8008360 <HAL_TIM_Base_MspInit+0x160>)
 8008346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800834a:	6613      	str	r3, [r2, #96]	; 0x60
 800834c:	4b04      	ldr	r3, [pc, #16]	; (8008360 <HAL_TIM_Base_MspInit+0x160>)
 800834e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008354:	60bb      	str	r3, [r7, #8]
 8008356:	68bb      	ldr	r3, [r7, #8]
}
 8008358:	bf00      	nop
 800835a:	3738      	adds	r7, #56	; 0x38
 800835c:	46bd      	mov	sp, r7
 800835e:	bd80      	pop	{r7, pc}
 8008360:	40021000 	.word	0x40021000
 8008364:	40000400 	.word	0x40000400
 8008368:	40000c00 	.word	0x40000c00
 800836c:	40013400 	.word	0x40013400
 8008370:	40014000 	.word	0x40014000
 8008374:	40014400 	.word	0x40014400

08008378 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8008378:	480d      	ldr	r0, [pc, #52]	; (80083b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800837a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800837c:	480d      	ldr	r0, [pc, #52]	; (80083b4 <LoopForever+0x6>)
  ldr r1, =_edata
 800837e:	490e      	ldr	r1, [pc, #56]	; (80083b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008380:	4a0e      	ldr	r2, [pc, #56]	; (80083bc <LoopForever+0xe>)
  movs r3, #0
 8008382:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8008384:	e002      	b.n	800838c <LoopCopyDataInit>

08008386 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008386:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008388:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800838a:	3304      	adds	r3, #4

0800838c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800838c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800838e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008390:	d3f9      	bcc.n	8008386 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008392:	4a0b      	ldr	r2, [pc, #44]	; (80083c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008394:	4c0b      	ldr	r4, [pc, #44]	; (80083c4 <LoopForever+0x16>)
  movs r3, #0
 8008396:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008398:	e001      	b.n	800839e <LoopFillZerobss>

0800839a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800839a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800839c:	3204      	adds	r2, #4

0800839e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800839e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80083a0:	d3fb      	bcc.n	800839a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80083a2:	f7ff fc91 	bl	8007cc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80083a6:	f006 f8b9 	bl	800e51c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80083aa:	f7ff f955 	bl	8007658 <main>

080083ae <LoopForever>:

LoopForever:
    b LoopForever
 80083ae:	e7fe      	b.n	80083ae <LoopForever>
  ldr   r0, =_estack
 80083b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80083b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80083b8:	200019c8 	.word	0x200019c8
  ldr r2, =_sidata
 80083bc:	08013930 	.word	0x08013930
  ldr r2, =_sbss
 80083c0:	200019c8 	.word	0x200019c8
  ldr r4, =_ebss
 80083c4:	20002464 	.word	0x20002464

080083c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80083c8:	e7fe      	b.n	80083c8 <ADC1_2_IRQHandler>

080083ca <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80083ca:	b580      	push	{r7, lr}
 80083cc:	b082      	sub	sp, #8
 80083ce:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80083d0:	2300      	movs	r3, #0
 80083d2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80083d4:	2003      	movs	r0, #3
 80083d6:	f001 fc9b 	bl	8009d10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80083da:	2000      	movs	r0, #0
 80083dc:	f000 f80e 	bl	80083fc <HAL_InitTick>
 80083e0:	4603      	mov	r3, r0
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d002      	beq.n	80083ec <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	71fb      	strb	r3, [r7, #7]
 80083ea:	e001      	b.n	80083f0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80083ec:	f7ff fae4 	bl	80079b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80083f0:	79fb      	ldrb	r3, [r7, #7]

}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3708      	adds	r7, #8
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}
	...

080083fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8008404:	2300      	movs	r3, #0
 8008406:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8008408:	4b16      	ldr	r3, [pc, #88]	; (8008464 <HAL_InitTick+0x68>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d022      	beq.n	8008456 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8008410:	4b15      	ldr	r3, [pc, #84]	; (8008468 <HAL_InitTick+0x6c>)
 8008412:	681a      	ldr	r2, [r3, #0]
 8008414:	4b13      	ldr	r3, [pc, #76]	; (8008464 <HAL_InitTick+0x68>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800841c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008420:	fbb2 f3f3 	udiv	r3, r2, r3
 8008424:	4618      	mov	r0, r3
 8008426:	f001 fca6 	bl	8009d76 <HAL_SYSTICK_Config>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d10f      	bne.n	8008450 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2b0f      	cmp	r3, #15
 8008434:	d809      	bhi.n	800844a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008436:	2200      	movs	r2, #0
 8008438:	6879      	ldr	r1, [r7, #4]
 800843a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800843e:	f001 fc72 	bl	8009d26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8008442:	4a0a      	ldr	r2, [pc, #40]	; (800846c <HAL_InitTick+0x70>)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6013      	str	r3, [r2, #0]
 8008448:	e007      	b.n	800845a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	73fb      	strb	r3, [r7, #15]
 800844e:	e004      	b.n	800845a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8008450:	2301      	movs	r3, #1
 8008452:	73fb      	strb	r3, [r7, #15]
 8008454:	e001      	b.n	800845a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8008456:	2301      	movs	r3, #1
 8008458:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800845a:	7bfb      	ldrb	r3, [r7, #15]
}
 800845c:	4618      	mov	r0, r3
 800845e:	3710      	adds	r7, #16
 8008460:	46bd      	mov	sp, r7
 8008462:	bd80      	pop	{r7, pc}
 8008464:	20000ca8 	.word	0x20000ca8
 8008468:	20000ca0 	.word	0x20000ca0
 800846c:	20000ca4 	.word	0x20000ca4

08008470 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008470:	b480      	push	{r7}
 8008472:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008474:	4b05      	ldr	r3, [pc, #20]	; (800848c <HAL_IncTick+0x1c>)
 8008476:	681a      	ldr	r2, [r3, #0]
 8008478:	4b05      	ldr	r3, [pc, #20]	; (8008490 <HAL_IncTick+0x20>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4413      	add	r3, r2
 800847e:	4a03      	ldr	r2, [pc, #12]	; (800848c <HAL_IncTick+0x1c>)
 8008480:	6013      	str	r3, [r2, #0]
}
 8008482:	bf00      	nop
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr
 800848c:	2000245c 	.word	0x2000245c
 8008490:	20000ca8 	.word	0x20000ca8

08008494 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008494:	b480      	push	{r7}
 8008496:	af00      	add	r7, sp, #0
  return uwTick;
 8008498:	4b03      	ldr	r3, [pc, #12]	; (80084a8 <HAL_GetTick+0x14>)
 800849a:	681b      	ldr	r3, [r3, #0]
}
 800849c:	4618      	mov	r0, r3
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr
 80084a6:	bf00      	nop
 80084a8:	2000245c 	.word	0x2000245c

080084ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80084ac:	b580      	push	{r7, lr}
 80084ae:	b084      	sub	sp, #16
 80084b0:	af00      	add	r7, sp, #0
 80084b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80084b4:	f7ff ffee 	bl	8008494 <HAL_GetTick>
 80084b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80084c4:	d004      	beq.n	80084d0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80084c6:	4b09      	ldr	r3, [pc, #36]	; (80084ec <HAL_Delay+0x40>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68fa      	ldr	r2, [r7, #12]
 80084cc:	4413      	add	r3, r2
 80084ce:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80084d0:	bf00      	nop
 80084d2:	f7ff ffdf 	bl	8008494 <HAL_GetTick>
 80084d6:	4602      	mov	r2, r0
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	1ad3      	subs	r3, r2, r3
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	429a      	cmp	r2, r3
 80084e0:	d8f7      	bhi.n	80084d2 <HAL_Delay+0x26>
  {
  }
}
 80084e2:	bf00      	nop
 80084e4:	3710      	adds	r7, #16
 80084e6:	46bd      	mov	sp, r7
 80084e8:	bd80      	pop	{r7, pc}
 80084ea:	bf00      	nop
 80084ec:	20000ca8 	.word	0x20000ca8

080084f0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b083      	sub	sp, #12
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	431a      	orrs	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	609a      	str	r2, [r3, #8]
}
 800850a:	bf00      	nop
 800850c:	370c      	adds	r7, #12
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr

08008516 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8008516:	b480      	push	{r7}
 8008518:	b083      	sub	sp, #12
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	431a      	orrs	r2, r3
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	609a      	str	r2, [r3, #8]
}
 8008530:	bf00      	nop
 8008532:	370c      	adds	r7, #12
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr

0800853c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	689b      	ldr	r3, [r3, #8]
 8008548:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800854c:	4618      	mov	r0, r3
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8008558:	b490      	push	{r4, r7}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	607a      	str	r2, [r7, #4]
 8008564:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	3360      	adds	r3, #96	; 0x60
 800856a:	461a      	mov	r2, r3
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	009b      	lsls	r3, r3, #2
 8008570:	4413      	add	r3, r2
 8008572:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8008574:	6822      	ldr	r2, [r4, #0]
 8008576:	4b08      	ldr	r3, [pc, #32]	; (8008598 <LL_ADC_SetOffset+0x40>)
 8008578:	4013      	ands	r3, r2
 800857a:	687a      	ldr	r2, [r7, #4]
 800857c:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8008580:	683a      	ldr	r2, [r7, #0]
 8008582:	430a      	orrs	r2, r1
 8008584:	4313      	orrs	r3, r2
 8008586:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800858a:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800858c:	bf00      	nop
 800858e:	3710      	adds	r7, #16
 8008590:	46bd      	mov	sp, r7
 8008592:	bc90      	pop	{r4, r7}
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	03fff000 	.word	0x03fff000

0800859c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800859c:	b490      	push	{r4, r7}
 800859e:	b082      	sub	sp, #8
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
 80085a4:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	3360      	adds	r3, #96	; 0x60
 80085aa:	461a      	mov	r2, r3
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	009b      	lsls	r3, r3, #2
 80085b0:	4413      	add	r3, r2
 80085b2:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80085b4:	6823      	ldr	r3, [r4, #0]
 80085b6:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80085ba:	4618      	mov	r0, r3
 80085bc:	3708      	adds	r7, #8
 80085be:	46bd      	mov	sp, r7
 80085c0:	bc90      	pop	{r4, r7}
 80085c2:	4770      	bx	lr

080085c4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80085c4:	b490      	push	{r4, r7}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	3360      	adds	r3, #96	; 0x60
 80085d4:	461a      	mov	r2, r3
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	009b      	lsls	r3, r3, #2
 80085da:	4413      	add	r3, r2
 80085dc:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80085de:	6823      	ldr	r3, [r4, #0]
 80085e0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80085ea:	bf00      	nop
 80085ec:	3710      	adds	r7, #16
 80085ee:	46bd      	mov	sp, r7
 80085f0:	bc90      	pop	{r4, r7}
 80085f2:	4770      	bx	lr

080085f4 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80085f4:	b490      	push	{r4, r7}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	60f8      	str	r0, [r7, #12]
 80085fc:	60b9      	str	r1, [r7, #8]
 80085fe:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	3360      	adds	r3, #96	; 0x60
 8008604:	461a      	mov	r2, r3
 8008606:	68bb      	ldr	r3, [r7, #8]
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	4413      	add	r3, r2
 800860c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	4313      	orrs	r3, r2
 8008618:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800861a:	bf00      	nop
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bc90      	pop	{r4, r7}
 8008622:	4770      	bx	lr

08008624 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8008624:	b490      	push	{r4, r7}
 8008626:	b084      	sub	sp, #16
 8008628:	af00      	add	r7, sp, #0
 800862a:	60f8      	str	r0, [r7, #12]
 800862c:	60b9      	str	r1, [r7, #8]
 800862e:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	3360      	adds	r3, #96	; 0x60
 8008634:	461a      	mov	r2, r3
 8008636:	68bb      	ldr	r3, [r7, #8]
 8008638:	009b      	lsls	r3, r3, #2
 800863a:	4413      	add	r3, r2
 800863c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800863e:	6823      	ldr	r3, [r4, #0]
 8008640:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	4313      	orrs	r3, r2
 8008648:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 800864a:	bf00      	nop
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bc90      	pop	{r4, r7}
 8008652:	4770      	bx	lr

08008654 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8008654:	b480      	push	{r7}
 8008656:	b083      	sub	sp, #12
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	695b      	ldr	r3, [r3, #20]
 8008662:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8008666:	683b      	ldr	r3, [r7, #0]
 8008668:	431a      	orrs	r2, r3
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	615a      	str	r2, [r3, #20]
}
 800866e:	bf00      	nop
 8008670:	370c      	adds	r7, #12
 8008672:	46bd      	mov	sp, r7
 8008674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008678:	4770      	bx	lr

0800867a <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800867a:	b490      	push	{r4, r7}
 800867c:	b084      	sub	sp, #16
 800867e:	af00      	add	r7, sp, #0
 8008680:	60f8      	str	r0, [r7, #12]
 8008682:	60b9      	str	r1, [r7, #8]
 8008684:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	3330      	adds	r3, #48	; 0x30
 800868a:	461a      	mov	r2, r3
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	0a1b      	lsrs	r3, r3, #8
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	f003 030c 	and.w	r3, r3, #12
 8008696:	4413      	add	r3, r2
 8008698:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 800869a:	6822      	ldr	r2, [r4, #0]
 800869c:	68bb      	ldr	r3, [r7, #8]
 800869e:	f003 031f 	and.w	r3, r3, #31
 80086a2:	211f      	movs	r1, #31
 80086a4:	fa01 f303 	lsl.w	r3, r1, r3
 80086a8:	43db      	mvns	r3, r3
 80086aa:	401a      	ands	r2, r3
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	0e9b      	lsrs	r3, r3, #26
 80086b0:	f003 011f 	and.w	r1, r3, #31
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	f003 031f 	and.w	r3, r3, #31
 80086ba:	fa01 f303 	lsl.w	r3, r1, r3
 80086be:	4313      	orrs	r3, r2
 80086c0:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80086c2:	bf00      	nop
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bc90      	pop	{r4, r7}
 80086ca:	4770      	bx	lr

080086cc <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80086cc:	b490      	push	{r4, r7}
 80086ce:	b084      	sub	sp, #16
 80086d0:	af00      	add	r7, sp, #0
 80086d2:	60f8      	str	r0, [r7, #12]
 80086d4:	60b9      	str	r1, [r7, #8]
 80086d6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	3314      	adds	r3, #20
 80086dc:	461a      	mov	r2, r3
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	0e5b      	lsrs	r3, r3, #25
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	f003 0304 	and.w	r3, r3, #4
 80086e8:	4413      	add	r3, r2
 80086ea:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80086ec:	6822      	ldr	r2, [r4, #0]
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	0d1b      	lsrs	r3, r3, #20
 80086f2:	f003 031f 	and.w	r3, r3, #31
 80086f6:	2107      	movs	r1, #7
 80086f8:	fa01 f303 	lsl.w	r3, r1, r3
 80086fc:	43db      	mvns	r3, r3
 80086fe:	401a      	ands	r2, r3
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	0d1b      	lsrs	r3, r3, #20
 8008704:	f003 031f 	and.w	r3, r3, #31
 8008708:	6879      	ldr	r1, [r7, #4]
 800870a:	fa01 f303 	lsl.w	r3, r1, r3
 800870e:	4313      	orrs	r3, r2
 8008710:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8008712:	bf00      	nop
 8008714:	3710      	adds	r7, #16
 8008716:	46bd      	mov	sp, r7
 8008718:	bc90      	pop	{r4, r7}
 800871a:	4770      	bx	lr

0800871c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800871c:	b480      	push	{r7}
 800871e:	b085      	sub	sp, #20
 8008720:	af00      	add	r7, sp, #0
 8008722:	60f8      	str	r0, [r7, #12]
 8008724:	60b9      	str	r1, [r7, #8]
 8008726:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008734:	43db      	mvns	r3, r3
 8008736:	401a      	ands	r2, r3
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f003 0318 	and.w	r3, r3, #24
 800873e:	4908      	ldr	r1, [pc, #32]	; (8008760 <LL_ADC_SetChannelSingleDiff+0x44>)
 8008740:	40d9      	lsrs	r1, r3
 8008742:	68bb      	ldr	r3, [r7, #8]
 8008744:	400b      	ands	r3, r1
 8008746:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800874a:	431a      	orrs	r2, r3
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8008752:	bf00      	nop
 8008754:	3714      	adds	r7, #20
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr
 800875e:	bf00      	nop
 8008760:	0007ffff 	.word	0x0007ffff

08008764 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	689b      	ldr	r3, [r3, #8]
 8008770:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8008774:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008778:	687a      	ldr	r2, [r7, #4]
 800877a:	6093      	str	r3, [r2, #8]
}
 800877c:	bf00      	nop
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008798:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800879c:	d101      	bne.n	80087a2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800879e:	2301      	movs	r3, #1
 80087a0:	e000      	b.n	80087a4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80087a2:	2300      	movs	r3, #0
}
 80087a4:	4618      	mov	r0, r3
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr

080087b0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80087c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80087c4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80087cc:	bf00      	nop
 80087ce:	370c      	adds	r7, #12
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80087d8:	b480      	push	{r7}
 80087da:	b083      	sub	sp, #12
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	689b      	ldr	r3, [r3, #8]
 80087e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087e8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80087ec:	d101      	bne.n	80087f2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80087ee:	2301      	movs	r3, #1
 80087f0:	e000      	b.n	80087f4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	370c      	adds	r7, #12
 80087f8:	46bd      	mov	sp, r7
 80087fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fe:	4770      	bx	lr

08008800 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8008800:	b480      	push	{r7}
 8008802:	b083      	sub	sp, #12
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	689b      	ldr	r3, [r3, #8]
 800880c:	f003 0301 	and.w	r3, r3, #1
 8008810:	2b01      	cmp	r3, #1
 8008812:	d101      	bne.n	8008818 <LL_ADC_IsEnabled+0x18>
 8008814:	2301      	movs	r3, #1
 8008816:	e000      	b.n	800881a <LL_ADC_IsEnabled+0x1a>
 8008818:	2300      	movs	r3, #0
}
 800881a:	4618      	mov	r0, r3
 800881c:	370c      	adds	r7, #12
 800881e:	46bd      	mov	sp, r7
 8008820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008824:	4770      	bx	lr

08008826 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8008826:	b480      	push	{r7}
 8008828:	b083      	sub	sp, #12
 800882a:	af00      	add	r7, sp, #0
 800882c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	689b      	ldr	r3, [r3, #8]
 8008832:	f003 0304 	and.w	r3, r3, #4
 8008836:	2b04      	cmp	r3, #4
 8008838:	d101      	bne.n	800883e <LL_ADC_REG_IsConversionOngoing+0x18>
 800883a:	2301      	movs	r3, #1
 800883c:	e000      	b.n	8008840 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800883e:	2300      	movs	r3, #0
}
 8008840:	4618      	mov	r0, r3
 8008842:	370c      	adds	r7, #12
 8008844:	46bd      	mov	sp, r7
 8008846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800884a:	4770      	bx	lr

0800884c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800884c:	b480      	push	{r7}
 800884e:	b083      	sub	sp, #12
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	689b      	ldr	r3, [r3, #8]
 8008858:	f003 0308 	and.w	r3, r3, #8
 800885c:	2b08      	cmp	r3, #8
 800885e:	d101      	bne.n	8008864 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8008860:	2301      	movs	r3, #1
 8008862:	e000      	b.n	8008866 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	370c      	adds	r7, #12
 800886a:	46bd      	mov	sp, r7
 800886c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008870:	4770      	bx	lr
	...

08008874 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8008874:	b590      	push	{r4, r7, lr}
 8008876:	b089      	sub	sp, #36	; 0x24
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800887c:	2300      	movs	r3, #0
 800887e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8008880:	2300      	movs	r3, #0
 8008882:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d101      	bne.n	800888e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800888a:	2301      	movs	r3, #1
 800888c:	e1ad      	b.n	8008bea <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	695b      	ldr	r3, [r3, #20]
 8008892:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008898:	2b00      	cmp	r3, #0
 800889a:	d109      	bne.n	80088b0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800889c:	6878      	ldr	r0, [r7, #4]
 800889e:	f7fe f937 	bl	8006b10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7ff ff67 	bl	8008788 <LL_ADC_IsDeepPowerDownEnabled>
 80088ba:	4603      	mov	r3, r0
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d004      	beq.n	80088ca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7ff ff4d 	bl	8008764 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4618      	mov	r0, r3
 80088d0:	f7ff ff82 	bl	80087d8 <LL_ADC_IsInternalRegulatorEnabled>
 80088d4:	4603      	mov	r3, r0
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d113      	bne.n	8008902 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	4618      	mov	r0, r3
 80088e0:	f7ff ff66 	bl	80087b0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80088e4:	4b9e      	ldr	r3, [pc, #632]	; (8008b60 <HAL_ADC_Init+0x2ec>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	099b      	lsrs	r3, r3, #6
 80088ea:	4a9e      	ldr	r2, [pc, #632]	; (8008b64 <HAL_ADC_Init+0x2f0>)
 80088ec:	fba2 2303 	umull	r2, r3, r2, r3
 80088f0:	099b      	lsrs	r3, r3, #6
 80088f2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80088f4:	e002      	b.n	80088fc <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	3b01      	subs	r3, #1
 80088fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d1f9      	bne.n	80088f6 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4618      	mov	r0, r3
 8008908:	f7ff ff66 	bl	80087d8 <LL_ADC_IsInternalRegulatorEnabled>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10d      	bne.n	800892e <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008916:	f043 0210 	orr.w	r2, r3, #16
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008922:	f043 0201 	orr.w	r2, r3, #1
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	4618      	mov	r0, r3
 8008934:	f7ff ff77 	bl	8008826 <LL_ADC_REG_IsConversionOngoing>
 8008938:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800893e:	f003 0310 	and.w	r3, r3, #16
 8008942:	2b00      	cmp	r3, #0
 8008944:	f040 8148 	bne.w	8008bd8 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	2b00      	cmp	r3, #0
 800894c:	f040 8144 	bne.w	8008bd8 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008954:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8008958:	f043 0202 	orr.w	r2, r3, #2
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	4618      	mov	r0, r3
 8008966:	f7ff ff4b 	bl	8008800 <LL_ADC_IsEnabled>
 800896a:	4603      	mov	r3, r0
 800896c:	2b00      	cmp	r3, #0
 800896e:	d141      	bne.n	80089f4 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008978:	d004      	beq.n	8008984 <HAL_ADC_Init+0x110>
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	4a7a      	ldr	r2, [pc, #488]	; (8008b68 <HAL_ADC_Init+0x2f4>)
 8008980:	4293      	cmp	r3, r2
 8008982:	d10f      	bne.n	80089a4 <HAL_ADC_Init+0x130>
 8008984:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008988:	f7ff ff3a 	bl	8008800 <LL_ADC_IsEnabled>
 800898c:	4604      	mov	r4, r0
 800898e:	4876      	ldr	r0, [pc, #472]	; (8008b68 <HAL_ADC_Init+0x2f4>)
 8008990:	f7ff ff36 	bl	8008800 <LL_ADC_IsEnabled>
 8008994:	4603      	mov	r3, r0
 8008996:	4323      	orrs	r3, r4
 8008998:	2b00      	cmp	r3, #0
 800899a:	bf0c      	ite	eq
 800899c:	2301      	moveq	r3, #1
 800899e:	2300      	movne	r3, #0
 80089a0:	b2db      	uxtb	r3, r3
 80089a2:	e012      	b.n	80089ca <HAL_ADC_Init+0x156>
 80089a4:	4871      	ldr	r0, [pc, #452]	; (8008b6c <HAL_ADC_Init+0x2f8>)
 80089a6:	f7ff ff2b 	bl	8008800 <LL_ADC_IsEnabled>
 80089aa:	4604      	mov	r4, r0
 80089ac:	4870      	ldr	r0, [pc, #448]	; (8008b70 <HAL_ADC_Init+0x2fc>)
 80089ae:	f7ff ff27 	bl	8008800 <LL_ADC_IsEnabled>
 80089b2:	4603      	mov	r3, r0
 80089b4:	431c      	orrs	r4, r3
 80089b6:	486f      	ldr	r0, [pc, #444]	; (8008b74 <HAL_ADC_Init+0x300>)
 80089b8:	f7ff ff22 	bl	8008800 <LL_ADC_IsEnabled>
 80089bc:	4603      	mov	r3, r0
 80089be:	4323      	orrs	r3, r4
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	bf0c      	ite	eq
 80089c4:	2301      	moveq	r3, #1
 80089c6:	2300      	movne	r3, #0
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d012      	beq.n	80089f4 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80089d6:	d004      	beq.n	80089e2 <HAL_ADC_Init+0x16e>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	4a62      	ldr	r2, [pc, #392]	; (8008b68 <HAL_ADC_Init+0x2f4>)
 80089de:	4293      	cmp	r3, r2
 80089e0:	d101      	bne.n	80089e6 <HAL_ADC_Init+0x172>
 80089e2:	4a65      	ldr	r2, [pc, #404]	; (8008b78 <HAL_ADC_Init+0x304>)
 80089e4:	e000      	b.n	80089e8 <HAL_ADC_Init+0x174>
 80089e6:	4a65      	ldr	r2, [pc, #404]	; (8008b7c <HAL_ADC_Init+0x308>)
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	4619      	mov	r1, r3
 80089ee:	4610      	mov	r0, r2
 80089f0:	f7ff fd7e 	bl	80084f0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	7f5b      	ldrb	r3, [r3, #29]
 80089f8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80089fe:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8008a04:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8008a0a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a12:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8008a14:	4313      	orrs	r3, r2
 8008a16:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008a1e:	2b01      	cmp	r3, #1
 8008a20:	d106      	bne.n	8008a30 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a26:	3b01      	subs	r3, #1
 8008a28:	045b      	lsls	r3, r3, #17
 8008a2a:	69ba      	ldr	r2, [r7, #24]
 8008a2c:	4313      	orrs	r3, r2
 8008a2e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d009      	beq.n	8008a4c <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3c:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a44:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8008a46:	69ba      	ldr	r2, [r7, #24]
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68da      	ldr	r2, [r3, #12]
 8008a52:	4b4b      	ldr	r3, [pc, #300]	; (8008b80 <HAL_ADC_Init+0x30c>)
 8008a54:	4013      	ands	r3, r2
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	6812      	ldr	r2, [r2, #0]
 8008a5a:	69b9      	ldr	r1, [r7, #24]
 8008a5c:	430b      	orrs	r3, r1
 8008a5e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	691b      	ldr	r3, [r3, #16]
 8008a66:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	430a      	orrs	r2, r1
 8008a74:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4618      	mov	r0, r3
 8008a7c:	f7ff fed3 	bl	8008826 <LL_ADC_REG_IsConversionOngoing>
 8008a80:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	4618      	mov	r0, r3
 8008a88:	f7ff fee0 	bl	800884c <LL_ADC_INJ_IsConversionOngoing>
 8008a8c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008a8e:	693b      	ldr	r3, [r7, #16]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d17f      	bne.n	8008b94 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d17c      	bne.n	8008b94 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008a9e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008aa6:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8008aa8:	4313      	orrs	r3, r2
 8008aaa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68db      	ldr	r3, [r3, #12]
 8008ab2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008ab6:	f023 0302 	bic.w	r3, r3, #2
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	6812      	ldr	r2, [r2, #0]
 8008abe:	69b9      	ldr	r1, [r7, #24]
 8008ac0:	430b      	orrs	r3, r1
 8008ac2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	691b      	ldr	r3, [r3, #16]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d017      	beq.n	8008afc <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	691a      	ldr	r2, [r3, #16]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8008ada:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008ae4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008ae8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	6911      	ldr	r1, [r2, #16]
 8008af0:	687a      	ldr	r2, [r7, #4]
 8008af2:	6812      	ldr	r2, [r2, #0]
 8008af4:	430b      	orrs	r3, r1
 8008af6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8008afa:	e013      	b.n	8008b24 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	691a      	ldr	r2, [r3, #16]
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8008b0a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	6812      	ldr	r2, [r2, #0]
 8008b18:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8008b1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8008b20:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d12a      	bne.n	8008b84 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	691b      	ldr	r3, [r3, #16]
 8008b34:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8008b38:	f023 0304 	bic.w	r3, r3, #4
 8008b3c:	687a      	ldr	r2, [r7, #4]
 8008b3e:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8008b40:	687a      	ldr	r2, [r7, #4]
 8008b42:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008b44:	4311      	orrs	r1, r2
 8008b46:	687a      	ldr	r2, [r7, #4]
 8008b48:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8008b4a:	4311      	orrs	r1, r2
 8008b4c:	687a      	ldr	r2, [r7, #4]
 8008b4e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8008b50:	430a      	orrs	r2, r1
 8008b52:	431a      	orrs	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f042 0201 	orr.w	r2, r2, #1
 8008b5c:	611a      	str	r2, [r3, #16]
 8008b5e:	e019      	b.n	8008b94 <HAL_ADC_Init+0x320>
 8008b60:	20000ca0 	.word	0x20000ca0
 8008b64:	053e2d63 	.word	0x053e2d63
 8008b68:	50000100 	.word	0x50000100
 8008b6c:	50000400 	.word	0x50000400
 8008b70:	50000500 	.word	0x50000500
 8008b74:	50000600 	.word	0x50000600
 8008b78:	50000300 	.word	0x50000300
 8008b7c:	50000700 	.word	0x50000700
 8008b80:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	691a      	ldr	r2, [r3, #16]
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f022 0201 	bic.w	r2, r2, #1
 8008b92:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	695b      	ldr	r3, [r3, #20]
 8008b98:	2b01      	cmp	r3, #1
 8008b9a:	d10c      	bne.n	8008bb6 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba2:	f023 010f 	bic.w	r1, r3, #15
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	6a1b      	ldr	r3, [r3, #32]
 8008baa:	1e5a      	subs	r2, r3, #1
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	430a      	orrs	r2, r1
 8008bb2:	631a      	str	r2, [r3, #48]	; 0x30
 8008bb4:	e007      	b.n	8008bc6 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	f022 020f 	bic.w	r2, r2, #15
 8008bc4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bca:	f023 0303 	bic.w	r3, r3, #3
 8008bce:	f043 0201 	orr.w	r2, r3, #1
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	65da      	str	r2, [r3, #92]	; 0x5c
 8008bd6:	e007      	b.n	8008be8 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bdc:	f043 0210 	orr.w	r2, r3, #16
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008be4:	2301      	movs	r3, #1
 8008be6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008be8:	7ffb      	ldrb	r3, [r7, #31]
}
 8008bea:	4618      	mov	r0, r3
 8008bec:	3724      	adds	r7, #36	; 0x24
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd90      	pop	{r4, r7, pc}
 8008bf2:	bf00      	nop

08008bf4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b0a6      	sub	sp, #152	; 0x98
 8008bf8:	af00      	add	r7, sp, #0
 8008bfa:	6078      	str	r0, [r7, #4]
 8008bfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008c04:	2300      	movs	r3, #0
 8008c06:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008c0e:	2b01      	cmp	r3, #1
 8008c10:	d101      	bne.n	8008c16 <HAL_ADC_ConfigChannel+0x22>
 8008c12:	2302      	movs	r3, #2
 8008c14:	e38e      	b.n	8009334 <HAL_ADC_ConfigChannel+0x740>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	4618      	mov	r0, r3
 8008c24:	f7ff fdff 	bl	8008826 <LL_ADC_REG_IsConversionOngoing>
 8008c28:	4603      	mov	r3, r0
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	f040 836f 	bne.w	800930e <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6818      	ldr	r0, [r3, #0]
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	6859      	ldr	r1, [r3, #4]
 8008c38:	683b      	ldr	r3, [r7, #0]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	461a      	mov	r2, r3
 8008c3e:	f7ff fd1c 	bl	800867a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	4618      	mov	r0, r3
 8008c48:	f7ff fded 	bl	8008826 <LL_ADC_REG_IsConversionOngoing>
 8008c4c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	4618      	mov	r0, r3
 8008c56:	f7ff fdf9 	bl	800884c <LL_ADC_INJ_IsConversionOngoing>
 8008c5a:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8008c5e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	f040 817b 	bne.w	8008f5e <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8008c68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	f040 8176 	bne.w	8008f5e <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c7a:	d10f      	bne.n	8008c9c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6818      	ldr	r0, [r3, #0]
 8008c80:	683b      	ldr	r3, [r7, #0]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	2200      	movs	r2, #0
 8008c86:	4619      	mov	r1, r3
 8008c88:	f7ff fd20 	bl	80086cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8008c94:	4618      	mov	r0, r3
 8008c96:	f7ff fcdd 	bl	8008654 <LL_ADC_SetSamplingTimeCommonConfig>
 8008c9a:	e00e      	b.n	8008cba <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6818      	ldr	r0, [r3, #0]
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	6819      	ldr	r1, [r3, #0]
 8008ca4:	683b      	ldr	r3, [r7, #0]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	461a      	mov	r2, r3
 8008caa:	f7ff fd0f 	bl	80086cc <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	4618      	mov	r0, r3
 8008cb6:	f7ff fccd 	bl	8008654 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008cba:	683b      	ldr	r3, [r7, #0]
 8008cbc:	695a      	ldr	r2, [r3, #20]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	68db      	ldr	r3, [r3, #12]
 8008cc4:	08db      	lsrs	r3, r3, #3
 8008cc6:	f003 0303 	and.w	r3, r3, #3
 8008cca:	005b      	lsls	r3, r3, #1
 8008ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	691b      	ldr	r3, [r3, #16]
 8008cd8:	2b04      	cmp	r3, #4
 8008cda:	d022      	beq.n	8008d22 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	6818      	ldr	r0, [r3, #0]
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	6919      	ldr	r1, [r3, #16]
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008cec:	f7ff fc34 	bl	8008558 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	6818      	ldr	r0, [r3, #0]
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	6919      	ldr	r1, [r3, #16]
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	f7ff fc79 	bl	80085f4 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	6818      	ldr	r0, [r3, #0]
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	6919      	ldr	r1, [r3, #16]
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	7f1b      	ldrb	r3, [r3, #28]
 8008d0e:	2b01      	cmp	r3, #1
 8008d10:	d102      	bne.n	8008d18 <HAL_ADC_ConfigChannel+0x124>
 8008d12:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008d16:	e000      	b.n	8008d1a <HAL_ADC_ConfigChannel+0x126>
 8008d18:	2300      	movs	r3, #0
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	f7ff fc82 	bl	8008624 <LL_ADC_SetOffsetSaturation>
 8008d20:	e11d      	b.n	8008f5e <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008d22:	687b      	ldr	r3, [r7, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	2100      	movs	r1, #0
 8008d28:	4618      	mov	r0, r3
 8008d2a:	f7ff fc37 	bl	800859c <LL_ADC_GetOffsetChannel>
 8008d2e:	4603      	mov	r3, r0
 8008d30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d10a      	bne.n	8008d4e <HAL_ADC_ConfigChannel+0x15a>
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2100      	movs	r1, #0
 8008d3e:	4618      	mov	r0, r3
 8008d40:	f7ff fc2c 	bl	800859c <LL_ADC_GetOffsetChannel>
 8008d44:	4603      	mov	r3, r0
 8008d46:	0e9b      	lsrs	r3, r3, #26
 8008d48:	f003 021f 	and.w	r2, r3, #31
 8008d4c:	e012      	b.n	8008d74 <HAL_ADC_ConfigChannel+0x180>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	2100      	movs	r1, #0
 8008d54:	4618      	mov	r0, r3
 8008d56:	f7ff fc21 	bl	800859c <LL_ADC_GetOffsetChannel>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008d64:	fa93 f3a3 	rbit	r3, r3
 8008d68:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8008d6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008d6c:	fab3 f383 	clz	r3, r3
 8008d70:	b2db      	uxtb	r3, r3
 8008d72:	461a      	mov	r2, r3
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d105      	bne.n	8008d8c <HAL_ADC_ConfigChannel+0x198>
 8008d80:	683b      	ldr	r3, [r7, #0]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	0e9b      	lsrs	r3, r3, #26
 8008d86:	f003 031f 	and.w	r3, r3, #31
 8008d8a:	e00a      	b.n	8008da2 <HAL_ADC_ConfigChannel+0x1ae>
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008d92:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d94:	fa93 f3a3 	rbit	r3, r3
 8008d98:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 8008d9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008d9c:	fab3 f383 	clz	r3, r3
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	429a      	cmp	r2, r3
 8008da4:	d106      	bne.n	8008db4 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2200      	movs	r2, #0
 8008dac:	2100      	movs	r1, #0
 8008dae:	4618      	mov	r0, r3
 8008db0:	f7ff fc08 	bl	80085c4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	2101      	movs	r1, #1
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f7ff fbee 	bl	800859c <LL_ADC_GetOffsetChannel>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d10a      	bne.n	8008de0 <HAL_ADC_ConfigChannel+0x1ec>
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	2101      	movs	r1, #1
 8008dd0:	4618      	mov	r0, r3
 8008dd2:	f7ff fbe3 	bl	800859c <LL_ADC_GetOffsetChannel>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	0e9b      	lsrs	r3, r3, #26
 8008dda:	f003 021f 	and.w	r2, r3, #31
 8008dde:	e010      	b.n	8008e02 <HAL_ADC_ConfigChannel+0x20e>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	2101      	movs	r1, #1
 8008de6:	4618      	mov	r0, r3
 8008de8:	f7ff fbd8 	bl	800859c <LL_ADC_GetOffsetChannel>
 8008dec:	4603      	mov	r3, r0
 8008dee:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008df0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008df2:	fa93 f3a3 	rbit	r3, r3
 8008df6:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008dfa:	fab3 f383 	clz	r3, r3
 8008dfe:	b2db      	uxtb	r3, r3
 8008e00:	461a      	mov	r2, r3
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d105      	bne.n	8008e1a <HAL_ADC_ConfigChannel+0x226>
 8008e0e:	683b      	ldr	r3, [r7, #0]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	0e9b      	lsrs	r3, r3, #26
 8008e14:	f003 031f 	and.w	r3, r3, #31
 8008e18:	e00a      	b.n	8008e30 <HAL_ADC_ConfigChannel+0x23c>
 8008e1a:	683b      	ldr	r3, [r7, #0]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008e22:	fa93 f3a3 	rbit	r3, r3
 8008e26:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008e28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e2a:	fab3 f383 	clz	r3, r3
 8008e2e:	b2db      	uxtb	r3, r3
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d106      	bne.n	8008e42 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	2200      	movs	r2, #0
 8008e3a:	2101      	movs	r1, #1
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f7ff fbc1 	bl	80085c4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2102      	movs	r1, #2
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7ff fba7 	bl	800859c <LL_ADC_GetOffsetChannel>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d10a      	bne.n	8008e6e <HAL_ADC_ConfigChannel+0x27a>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	2102      	movs	r1, #2
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f7ff fb9c 	bl	800859c <LL_ADC_GetOffsetChannel>
 8008e64:	4603      	mov	r3, r0
 8008e66:	0e9b      	lsrs	r3, r3, #26
 8008e68:	f003 021f 	and.w	r2, r3, #31
 8008e6c:	e010      	b.n	8008e90 <HAL_ADC_ConfigChannel+0x29c>
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	2102      	movs	r1, #2
 8008e74:	4618      	mov	r0, r3
 8008e76:	f7ff fb91 	bl	800859c <LL_ADC_GetOffsetChannel>
 8008e7a:	4603      	mov	r3, r0
 8008e7c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008e7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008e80:	fa93 f3a3 	rbit	r3, r3
 8008e84:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 8008e86:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008e88:	fab3 f383 	clz	r3, r3
 8008e8c:	b2db      	uxtb	r3, r3
 8008e8e:	461a      	mov	r2, r3
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d105      	bne.n	8008ea8 <HAL_ADC_ConfigChannel+0x2b4>
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	0e9b      	lsrs	r3, r3, #26
 8008ea2:	f003 031f 	and.w	r3, r3, #31
 8008ea6:	e00a      	b.n	8008ebe <HAL_ADC_ConfigChannel+0x2ca>
 8008ea8:	683b      	ldr	r3, [r7, #0]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008eae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008eb0:	fa93 f3a3 	rbit	r3, r3
 8008eb4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8008eb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008eb8:	fab3 f383 	clz	r3, r3
 8008ebc:	b2db      	uxtb	r3, r3
 8008ebe:	429a      	cmp	r2, r3
 8008ec0:	d106      	bne.n	8008ed0 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	2200      	movs	r2, #0
 8008ec8:	2102      	movs	r1, #2
 8008eca:	4618      	mov	r0, r3
 8008ecc:	f7ff fb7a 	bl	80085c4 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	2103      	movs	r1, #3
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	f7ff fb60 	bl	800859c <LL_ADC_GetOffsetChannel>
 8008edc:	4603      	mov	r3, r0
 8008ede:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10a      	bne.n	8008efc <HAL_ADC_ConfigChannel+0x308>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	2103      	movs	r1, #3
 8008eec:	4618      	mov	r0, r3
 8008eee:	f7ff fb55 	bl	800859c <LL_ADC_GetOffsetChannel>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	0e9b      	lsrs	r3, r3, #26
 8008ef6:	f003 021f 	and.w	r2, r3, #31
 8008efa:	e010      	b.n	8008f1e <HAL_ADC_ConfigChannel+0x32a>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	2103      	movs	r1, #3
 8008f02:	4618      	mov	r0, r3
 8008f04:	f7ff fb4a 	bl	800859c <LL_ADC_GetOffsetChannel>
 8008f08:	4603      	mov	r3, r0
 8008f0a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f0e:	fa93 f3a3 	rbit	r3, r3
 8008f12:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f16:	fab3 f383 	clz	r3, r3
 8008f1a:	b2db      	uxtb	r3, r3
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	683b      	ldr	r3, [r7, #0]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d105      	bne.n	8008f36 <HAL_ADC_ConfigChannel+0x342>
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	0e9b      	lsrs	r3, r3, #26
 8008f30:	f003 031f 	and.w	r3, r3, #31
 8008f34:	e00a      	b.n	8008f4c <HAL_ADC_ConfigChannel+0x358>
 8008f36:	683b      	ldr	r3, [r7, #0]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f3e:	fa93 f3a3 	rbit	r3, r3
 8008f42:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8008f44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f46:	fab3 f383 	clz	r3, r3
 8008f4a:	b2db      	uxtb	r3, r3
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d106      	bne.n	8008f5e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	2200      	movs	r2, #0
 8008f56:	2103      	movs	r1, #3
 8008f58:	4618      	mov	r0, r3
 8008f5a:	f7ff fb33 	bl	80085c4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	4618      	mov	r0, r3
 8008f64:	f7ff fc4c 	bl	8008800 <LL_ADC_IsEnabled>
 8008f68:	4603      	mov	r3, r0
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	f040 810c 	bne.w	8009188 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6818      	ldr	r0, [r3, #0]
 8008f74:	683b      	ldr	r3, [r7, #0]
 8008f76:	6819      	ldr	r1, [r3, #0]
 8008f78:	683b      	ldr	r3, [r7, #0]
 8008f7a:	68db      	ldr	r3, [r3, #12]
 8008f7c:	461a      	mov	r2, r3
 8008f7e:	f7ff fbcd 	bl	800871c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	68db      	ldr	r3, [r3, #12]
 8008f86:	4aaf      	ldr	r2, [pc, #700]	; (8009244 <HAL_ADC_ConfigChannel+0x650>)
 8008f88:	4293      	cmp	r3, r2
 8008f8a:	f040 80fd 	bne.w	8009188 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d10b      	bne.n	8008fb6 <HAL_ADC_ConfigChannel+0x3c2>
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	0e9b      	lsrs	r3, r3, #26
 8008fa4:	3301      	adds	r3, #1
 8008fa6:	f003 031f 	and.w	r3, r3, #31
 8008faa:	2b09      	cmp	r3, #9
 8008fac:	bf94      	ite	ls
 8008fae:	2301      	movls	r3, #1
 8008fb0:	2300      	movhi	r3, #0
 8008fb2:	b2db      	uxtb	r3, r3
 8008fb4:	e012      	b.n	8008fdc <HAL_ADC_ConfigChannel+0x3e8>
 8008fb6:	683b      	ldr	r3, [r7, #0]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fbe:	fa93 f3a3 	rbit	r3, r3
 8008fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8008fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fc6:	fab3 f383 	clz	r3, r3
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	3301      	adds	r3, #1
 8008fce:	f003 031f 	and.w	r3, r3, #31
 8008fd2:	2b09      	cmp	r3, #9
 8008fd4:	bf94      	ite	ls
 8008fd6:	2301      	movls	r3, #1
 8008fd8:	2300      	movhi	r3, #0
 8008fda:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d064      	beq.n	80090aa <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008fe0:	683b      	ldr	r3, [r7, #0]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d107      	bne.n	8008ffc <HAL_ADC_ConfigChannel+0x408>
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	0e9b      	lsrs	r3, r3, #26
 8008ff2:	3301      	adds	r3, #1
 8008ff4:	069b      	lsls	r3, r3, #26
 8008ff6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008ffa:	e00e      	b.n	800901a <HAL_ADC_ConfigChannel+0x426>
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009002:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009004:	fa93 f3a3 	rbit	r3, r3
 8009008:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800900a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800900c:	fab3 f383 	clz	r3, r3
 8009010:	b2db      	uxtb	r3, r3
 8009012:	3301      	adds	r3, #1
 8009014:	069b      	lsls	r3, r3, #26
 8009016:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800901a:	683b      	ldr	r3, [r7, #0]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009022:	2b00      	cmp	r3, #0
 8009024:	d109      	bne.n	800903a <HAL_ADC_ConfigChannel+0x446>
 8009026:	683b      	ldr	r3, [r7, #0]
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	0e9b      	lsrs	r3, r3, #26
 800902c:	3301      	adds	r3, #1
 800902e:	f003 031f 	and.w	r3, r3, #31
 8009032:	2101      	movs	r1, #1
 8009034:	fa01 f303 	lsl.w	r3, r1, r3
 8009038:	e010      	b.n	800905c <HAL_ADC_ConfigChannel+0x468>
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009042:	fa93 f3a3 	rbit	r3, r3
 8009046:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8009048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800904a:	fab3 f383 	clz	r3, r3
 800904e:	b2db      	uxtb	r3, r3
 8009050:	3301      	adds	r3, #1
 8009052:	f003 031f 	and.w	r3, r3, #31
 8009056:	2101      	movs	r1, #1
 8009058:	fa01 f303 	lsl.w	r3, r1, r3
 800905c:	ea42 0103 	orr.w	r1, r2, r3
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009068:	2b00      	cmp	r3, #0
 800906a:	d10a      	bne.n	8009082 <HAL_ADC_ConfigChannel+0x48e>
 800906c:	683b      	ldr	r3, [r7, #0]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	0e9b      	lsrs	r3, r3, #26
 8009072:	3301      	adds	r3, #1
 8009074:	f003 021f 	and.w	r2, r3, #31
 8009078:	4613      	mov	r3, r2
 800907a:	005b      	lsls	r3, r3, #1
 800907c:	4413      	add	r3, r2
 800907e:	051b      	lsls	r3, r3, #20
 8009080:	e011      	b.n	80090a6 <HAL_ADC_ConfigChannel+0x4b2>
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908a:	fa93 f3a3 	rbit	r3, r3
 800908e:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8009090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009092:	fab3 f383 	clz	r3, r3
 8009096:	b2db      	uxtb	r3, r3
 8009098:	3301      	adds	r3, #1
 800909a:	f003 021f 	and.w	r2, r3, #31
 800909e:	4613      	mov	r3, r2
 80090a0:	005b      	lsls	r3, r3, #1
 80090a2:	4413      	add	r3, r2
 80090a4:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80090a6:	430b      	orrs	r3, r1
 80090a8:	e069      	b.n	800917e <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d107      	bne.n	80090c6 <HAL_ADC_ConfigChannel+0x4d2>
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	0e9b      	lsrs	r3, r3, #26
 80090bc:	3301      	adds	r3, #1
 80090be:	069b      	lsls	r3, r3, #26
 80090c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80090c4:	e00e      	b.n	80090e4 <HAL_ADC_ConfigChannel+0x4f0>
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80090cc:	6a3b      	ldr	r3, [r7, #32]
 80090ce:	fa93 f3a3 	rbit	r3, r3
 80090d2:	61fb      	str	r3, [r7, #28]
  return result;
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	fab3 f383 	clz	r3, r3
 80090da:	b2db      	uxtb	r3, r3
 80090dc:	3301      	adds	r3, #1
 80090de:	069b      	lsls	r3, r3, #26
 80090e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d109      	bne.n	8009104 <HAL_ADC_ConfigChannel+0x510>
 80090f0:	683b      	ldr	r3, [r7, #0]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	0e9b      	lsrs	r3, r3, #26
 80090f6:	3301      	adds	r3, #1
 80090f8:	f003 031f 	and.w	r3, r3, #31
 80090fc:	2101      	movs	r1, #1
 80090fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009102:	e010      	b.n	8009126 <HAL_ADC_ConfigChannel+0x532>
 8009104:	683b      	ldr	r3, [r7, #0]
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	fa93 f3a3 	rbit	r3, r3
 8009110:	617b      	str	r3, [r7, #20]
  return result;
 8009112:	697b      	ldr	r3, [r7, #20]
 8009114:	fab3 f383 	clz	r3, r3
 8009118:	b2db      	uxtb	r3, r3
 800911a:	3301      	adds	r3, #1
 800911c:	f003 031f 	and.w	r3, r3, #31
 8009120:	2101      	movs	r1, #1
 8009122:	fa01 f303 	lsl.w	r3, r1, r3
 8009126:	ea42 0103 	orr.w	r1, r2, r3
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009132:	2b00      	cmp	r3, #0
 8009134:	d10d      	bne.n	8009152 <HAL_ADC_ConfigChannel+0x55e>
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	0e9b      	lsrs	r3, r3, #26
 800913c:	3301      	adds	r3, #1
 800913e:	f003 021f 	and.w	r2, r3, #31
 8009142:	4613      	mov	r3, r2
 8009144:	005b      	lsls	r3, r3, #1
 8009146:	4413      	add	r3, r2
 8009148:	3b1e      	subs	r3, #30
 800914a:	051b      	lsls	r3, r3, #20
 800914c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8009150:	e014      	b.n	800917c <HAL_ADC_ConfigChannel+0x588>
 8009152:	683b      	ldr	r3, [r7, #0]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8009158:	693b      	ldr	r3, [r7, #16]
 800915a:	fa93 f3a3 	rbit	r3, r3
 800915e:	60fb      	str	r3, [r7, #12]
  return result;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	fab3 f383 	clz	r3, r3
 8009166:	b2db      	uxtb	r3, r3
 8009168:	3301      	adds	r3, #1
 800916a:	f003 021f 	and.w	r2, r3, #31
 800916e:	4613      	mov	r3, r2
 8009170:	005b      	lsls	r3, r3, #1
 8009172:	4413      	add	r3, r2
 8009174:	3b1e      	subs	r3, #30
 8009176:	051b      	lsls	r3, r3, #20
 8009178:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800917c:	430b      	orrs	r3, r1
 800917e:	683a      	ldr	r2, [r7, #0]
 8009180:	6892      	ldr	r2, [r2, #8]
 8009182:	4619      	mov	r1, r3
 8009184:	f7ff faa2 	bl	80086cc <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8009188:	683b      	ldr	r3, [r7, #0]
 800918a:	681a      	ldr	r2, [r3, #0]
 800918c:	4b2e      	ldr	r3, [pc, #184]	; (8009248 <HAL_ADC_ConfigChannel+0x654>)
 800918e:	4013      	ands	r3, r2
 8009190:	2b00      	cmp	r3, #0
 8009192:	f000 80c9 	beq.w	8009328 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800919e:	d004      	beq.n	80091aa <HAL_ADC_ConfigChannel+0x5b6>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	4a29      	ldr	r2, [pc, #164]	; (800924c <HAL_ADC_ConfigChannel+0x658>)
 80091a6:	4293      	cmp	r3, r2
 80091a8:	d101      	bne.n	80091ae <HAL_ADC_ConfigChannel+0x5ba>
 80091aa:	4b29      	ldr	r3, [pc, #164]	; (8009250 <HAL_ADC_ConfigChannel+0x65c>)
 80091ac:	e000      	b.n	80091b0 <HAL_ADC_ConfigChannel+0x5bc>
 80091ae:	4b29      	ldr	r3, [pc, #164]	; (8009254 <HAL_ADC_ConfigChannel+0x660>)
 80091b0:	4618      	mov	r0, r3
 80091b2:	f7ff f9c3 	bl	800853c <LL_ADC_GetCommonPathInternalCh>
 80091b6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	4a26      	ldr	r2, [pc, #152]	; (8009258 <HAL_ADC_ConfigChannel+0x664>)
 80091c0:	4293      	cmp	r3, r2
 80091c2:	d004      	beq.n	80091ce <HAL_ADC_ConfigChannel+0x5da>
 80091c4:	683b      	ldr	r3, [r7, #0]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a24      	ldr	r2, [pc, #144]	; (800925c <HAL_ADC_ConfigChannel+0x668>)
 80091ca:	4293      	cmp	r3, r2
 80091cc:	d14e      	bne.n	800926c <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80091ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80091d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d148      	bne.n	800926c <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091e2:	d005      	beq.n	80091f0 <HAL_ADC_ConfigChannel+0x5fc>
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	4a1d      	ldr	r2, [pc, #116]	; (8009260 <HAL_ADC_ConfigChannel+0x66c>)
 80091ea:	4293      	cmp	r3, r2
 80091ec:	f040 8099 	bne.w	8009322 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80091f8:	d004      	beq.n	8009204 <HAL_ADC_ConfigChannel+0x610>
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4a13      	ldr	r2, [pc, #76]	; (800924c <HAL_ADC_ConfigChannel+0x658>)
 8009200:	4293      	cmp	r3, r2
 8009202:	d101      	bne.n	8009208 <HAL_ADC_ConfigChannel+0x614>
 8009204:	4a12      	ldr	r2, [pc, #72]	; (8009250 <HAL_ADC_ConfigChannel+0x65c>)
 8009206:	e000      	b.n	800920a <HAL_ADC_ConfigChannel+0x616>
 8009208:	4a12      	ldr	r2, [pc, #72]	; (8009254 <HAL_ADC_ConfigChannel+0x660>)
 800920a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800920e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009212:	4619      	mov	r1, r3
 8009214:	4610      	mov	r0, r2
 8009216:	f7ff f97e 	bl	8008516 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 800921a:	4b12      	ldr	r3, [pc, #72]	; (8009264 <HAL_ADC_ConfigChannel+0x670>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	099b      	lsrs	r3, r3, #6
 8009220:	4a11      	ldr	r2, [pc, #68]	; (8009268 <HAL_ADC_ConfigChannel+0x674>)
 8009222:	fba2 2303 	umull	r2, r3, r2, r3
 8009226:	099a      	lsrs	r2, r3, #6
 8009228:	4613      	mov	r3, r2
 800922a:	005b      	lsls	r3, r3, #1
 800922c:	4413      	add	r3, r2
 800922e:	009b      	lsls	r3, r3, #2
 8009230:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8009232:	e002      	b.n	800923a <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8009234:	68bb      	ldr	r3, [r7, #8]
 8009236:	3b01      	subs	r3, #1
 8009238:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800923a:	68bb      	ldr	r3, [r7, #8]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1f9      	bne.n	8009234 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009240:	e06f      	b.n	8009322 <HAL_ADC_ConfigChannel+0x72e>
 8009242:	bf00      	nop
 8009244:	407f0000 	.word	0x407f0000
 8009248:	80080000 	.word	0x80080000
 800924c:	50000100 	.word	0x50000100
 8009250:	50000300 	.word	0x50000300
 8009254:	50000700 	.word	0x50000700
 8009258:	c3210000 	.word	0xc3210000
 800925c:	90c00010 	.word	0x90c00010
 8009260:	50000600 	.word	0x50000600
 8009264:	20000ca0 	.word	0x20000ca0
 8009268:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800926c:	683b      	ldr	r3, [r7, #0]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a32      	ldr	r2, [pc, #200]	; (800933c <HAL_ADC_ConfigChannel+0x748>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d125      	bne.n	80092c2 <HAL_ADC_ConfigChannel+0x6ce>
 8009276:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800927a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800927e:	2b00      	cmp	r3, #0
 8009280:	d11f      	bne.n	80092c2 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4a2e      	ldr	r2, [pc, #184]	; (8009340 <HAL_ADC_ConfigChannel+0x74c>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d104      	bne.n	8009296 <HAL_ADC_ConfigChannel+0x6a2>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4a2c      	ldr	r2, [pc, #176]	; (8009344 <HAL_ADC_ConfigChannel+0x750>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d047      	beq.n	8009326 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800929e:	d004      	beq.n	80092aa <HAL_ADC_ConfigChannel+0x6b6>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	4a26      	ldr	r2, [pc, #152]	; (8009340 <HAL_ADC_ConfigChannel+0x74c>)
 80092a6:	4293      	cmp	r3, r2
 80092a8:	d101      	bne.n	80092ae <HAL_ADC_ConfigChannel+0x6ba>
 80092aa:	4a27      	ldr	r2, [pc, #156]	; (8009348 <HAL_ADC_ConfigChannel+0x754>)
 80092ac:	e000      	b.n	80092b0 <HAL_ADC_ConfigChannel+0x6bc>
 80092ae:	4a27      	ldr	r2, [pc, #156]	; (800934c <HAL_ADC_ConfigChannel+0x758>)
 80092b0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80092b8:	4619      	mov	r1, r3
 80092ba:	4610      	mov	r0, r2
 80092bc:	f7ff f92b 	bl	8008516 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80092c0:	e031      	b.n	8009326 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80092c2:	683b      	ldr	r3, [r7, #0]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a22      	ldr	r2, [pc, #136]	; (8009350 <HAL_ADC_ConfigChannel+0x75c>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d12d      	bne.n	8009328 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80092cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80092d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d127      	bne.n	8009328 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	4a18      	ldr	r2, [pc, #96]	; (8009340 <HAL_ADC_ConfigChannel+0x74c>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d022      	beq.n	8009328 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80092ea:	d004      	beq.n	80092f6 <HAL_ADC_ConfigChannel+0x702>
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	4a13      	ldr	r2, [pc, #76]	; (8009340 <HAL_ADC_ConfigChannel+0x74c>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d101      	bne.n	80092fa <HAL_ADC_ConfigChannel+0x706>
 80092f6:	4a14      	ldr	r2, [pc, #80]	; (8009348 <HAL_ADC_ConfigChannel+0x754>)
 80092f8:	e000      	b.n	80092fc <HAL_ADC_ConfigChannel+0x708>
 80092fa:	4a14      	ldr	r2, [pc, #80]	; (800934c <HAL_ADC_ConfigChannel+0x758>)
 80092fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009300:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009304:	4619      	mov	r1, r3
 8009306:	4610      	mov	r0, r2
 8009308:	f7ff f905 	bl	8008516 <LL_ADC_SetCommonPathInternalCh>
 800930c:	e00c      	b.n	8009328 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009312:	f043 0220 	orr.w	r2, r3, #32
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800931a:	2301      	movs	r3, #1
 800931c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8009320:	e002      	b.n	8009328 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8009322:	bf00      	nop
 8009324:	e000      	b.n	8009328 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8009326:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009330:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8009334:	4618      	mov	r0, r3
 8009336:	3798      	adds	r7, #152	; 0x98
 8009338:	46bd      	mov	sp, r7
 800933a:	bd80      	pop	{r7, pc}
 800933c:	c7520000 	.word	0xc7520000
 8009340:	50000100 	.word	0x50000100
 8009344:	50000500 	.word	0x50000500
 8009348:	50000300 	.word	0x50000300
 800934c:	50000700 	.word	0x50000700
 8009350:	cb840000 	.word	0xcb840000

08009354 <LL_ADC_IsEnabled>:
{
 8009354:	b480      	push	{r7}
 8009356:	b083      	sub	sp, #12
 8009358:	af00      	add	r7, sp, #0
 800935a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	689b      	ldr	r3, [r3, #8]
 8009360:	f003 0301 	and.w	r3, r3, #1
 8009364:	2b01      	cmp	r3, #1
 8009366:	d101      	bne.n	800936c <LL_ADC_IsEnabled+0x18>
 8009368:	2301      	movs	r3, #1
 800936a:	e000      	b.n	800936e <LL_ADC_IsEnabled+0x1a>
 800936c:	2300      	movs	r3, #0
}
 800936e:	4618      	mov	r0, r3
 8009370:	370c      	adds	r7, #12
 8009372:	46bd      	mov	sp, r7
 8009374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009378:	4770      	bx	lr

0800937a <LL_ADC_REG_IsConversionOngoing>:
{
 800937a:	b480      	push	{r7}
 800937c:	b083      	sub	sp, #12
 800937e:	af00      	add	r7, sp, #0
 8009380:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	f003 0304 	and.w	r3, r3, #4
 800938a:	2b04      	cmp	r3, #4
 800938c:	d101      	bne.n	8009392 <LL_ADC_REG_IsConversionOngoing+0x18>
 800938e:	2301      	movs	r3, #1
 8009390:	e000      	b.n	8009394 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8009392:	2300      	movs	r3, #0
}
 8009394:	4618      	mov	r0, r3
 8009396:	370c      	adds	r7, #12
 8009398:	46bd      	mov	sp, r7
 800939a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939e:	4770      	bx	lr

080093a0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80093a0:	b590      	push	{r4, r7, lr}
 80093a2:	b0a1      	sub	sp, #132	; 0x84
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80093aa:	2300      	movs	r3, #0
 80093ac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d101      	bne.n	80093be <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80093ba:	2302      	movs	r3, #2
 80093bc:	e0e3      	b.n	8009586 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2201      	movs	r2, #1
 80093c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80093ce:	d102      	bne.n	80093d6 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 80093d0:	4b6f      	ldr	r3, [pc, #444]	; (8009590 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80093d2:	60bb      	str	r3, [r7, #8]
 80093d4:	e009      	b.n	80093ea <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	4a6e      	ldr	r2, [pc, #440]	; (8009594 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80093dc:	4293      	cmp	r3, r2
 80093de:	d102      	bne.n	80093e6 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80093e0:	4b6d      	ldr	r3, [pc, #436]	; (8009598 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80093e2:	60bb      	str	r3, [r7, #8]
 80093e4:	e001      	b.n	80093ea <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80093e6:	2300      	movs	r3, #0
 80093e8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80093ea:	68bb      	ldr	r3, [r7, #8]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d10b      	bne.n	8009408 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093f4:	f043 0220 	orr.w	r2, r3, #32
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8009404:	2301      	movs	r3, #1
 8009406:	e0be      	b.n	8009586 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	4618      	mov	r0, r3
 800940c:	f7ff ffb5 	bl	800937a <LL_ADC_REG_IsConversionOngoing>
 8009410:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	681b      	ldr	r3, [r3, #0]
 8009416:	4618      	mov	r0, r3
 8009418:	f7ff ffaf 	bl	800937a <LL_ADC_REG_IsConversionOngoing>
 800941c:	4603      	mov	r3, r0
 800941e:	2b00      	cmp	r3, #0
 8009420:	f040 80a0 	bne.w	8009564 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8009424:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009426:	2b00      	cmp	r3, #0
 8009428:	f040 809c 	bne.w	8009564 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009434:	d004      	beq.n	8009440 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4a55      	ldr	r2, [pc, #340]	; (8009590 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800943c:	4293      	cmp	r3, r2
 800943e:	d101      	bne.n	8009444 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8009440:	4b56      	ldr	r3, [pc, #344]	; (800959c <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8009442:	e000      	b.n	8009446 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8009444:	4b56      	ldr	r3, [pc, #344]	; (80095a0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8009446:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	2b00      	cmp	r3, #0
 800944e:	d04b      	beq.n	80094e8 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8009450:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009452:	689b      	ldr	r3, [r3, #8]
 8009454:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009458:	683b      	ldr	r3, [r7, #0]
 800945a:	6859      	ldr	r1, [r3, #4]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009462:	035b      	lsls	r3, r3, #13
 8009464:	430b      	orrs	r3, r1
 8009466:	431a      	orrs	r2, r3
 8009468:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800946a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009474:	d004      	beq.n	8009480 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a45      	ldr	r2, [pc, #276]	; (8009590 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d10f      	bne.n	80094a0 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8009480:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8009484:	f7ff ff66 	bl	8009354 <LL_ADC_IsEnabled>
 8009488:	4604      	mov	r4, r0
 800948a:	4841      	ldr	r0, [pc, #260]	; (8009590 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800948c:	f7ff ff62 	bl	8009354 <LL_ADC_IsEnabled>
 8009490:	4603      	mov	r3, r0
 8009492:	4323      	orrs	r3, r4
 8009494:	2b00      	cmp	r3, #0
 8009496:	bf0c      	ite	eq
 8009498:	2301      	moveq	r3, #1
 800949a:	2300      	movne	r3, #0
 800949c:	b2db      	uxtb	r3, r3
 800949e:	e012      	b.n	80094c6 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80094a0:	483c      	ldr	r0, [pc, #240]	; (8009594 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80094a2:	f7ff ff57 	bl	8009354 <LL_ADC_IsEnabled>
 80094a6:	4604      	mov	r4, r0
 80094a8:	483b      	ldr	r0, [pc, #236]	; (8009598 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80094aa:	f7ff ff53 	bl	8009354 <LL_ADC_IsEnabled>
 80094ae:	4603      	mov	r3, r0
 80094b0:	431c      	orrs	r4, r3
 80094b2:	483c      	ldr	r0, [pc, #240]	; (80095a4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80094b4:	f7ff ff4e 	bl	8009354 <LL_ADC_IsEnabled>
 80094b8:	4603      	mov	r3, r0
 80094ba:	4323      	orrs	r3, r4
 80094bc:	2b00      	cmp	r3, #0
 80094be:	bf0c      	ite	eq
 80094c0:	2301      	moveq	r3, #1
 80094c2:	2300      	movne	r3, #0
 80094c4:	b2db      	uxtb	r3, r3
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d056      	beq.n	8009578 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80094ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094cc:	689b      	ldr	r3, [r3, #8]
 80094ce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80094d2:	f023 030f 	bic.w	r3, r3, #15
 80094d6:	683a      	ldr	r2, [r7, #0]
 80094d8:	6811      	ldr	r1, [r2, #0]
 80094da:	683a      	ldr	r2, [r7, #0]
 80094dc:	6892      	ldr	r2, [r2, #8]
 80094de:	430a      	orrs	r2, r1
 80094e0:	431a      	orrs	r2, r3
 80094e2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094e4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80094e6:	e047      	b.n	8009578 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80094e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094ea:	689b      	ldr	r3, [r3, #8]
 80094ec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80094f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80094f2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80094fc:	d004      	beq.n	8009508 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4a23      	ldr	r2, [pc, #140]	; (8009590 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009504:	4293      	cmp	r3, r2
 8009506:	d10f      	bne.n	8009528 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8009508:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800950c:	f7ff ff22 	bl	8009354 <LL_ADC_IsEnabled>
 8009510:	4604      	mov	r4, r0
 8009512:	481f      	ldr	r0, [pc, #124]	; (8009590 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8009514:	f7ff ff1e 	bl	8009354 <LL_ADC_IsEnabled>
 8009518:	4603      	mov	r3, r0
 800951a:	4323      	orrs	r3, r4
 800951c:	2b00      	cmp	r3, #0
 800951e:	bf0c      	ite	eq
 8009520:	2301      	moveq	r3, #1
 8009522:	2300      	movne	r3, #0
 8009524:	b2db      	uxtb	r3, r3
 8009526:	e012      	b.n	800954e <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8009528:	481a      	ldr	r0, [pc, #104]	; (8009594 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 800952a:	f7ff ff13 	bl	8009354 <LL_ADC_IsEnabled>
 800952e:	4604      	mov	r4, r0
 8009530:	4819      	ldr	r0, [pc, #100]	; (8009598 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8009532:	f7ff ff0f 	bl	8009354 <LL_ADC_IsEnabled>
 8009536:	4603      	mov	r3, r0
 8009538:	431c      	orrs	r4, r3
 800953a:	481a      	ldr	r0, [pc, #104]	; (80095a4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 800953c:	f7ff ff0a 	bl	8009354 <LL_ADC_IsEnabled>
 8009540:	4603      	mov	r3, r0
 8009542:	4323      	orrs	r3, r4
 8009544:	2b00      	cmp	r3, #0
 8009546:	bf0c      	ite	eq
 8009548:	2301      	moveq	r3, #1
 800954a:	2300      	movne	r3, #0
 800954c:	b2db      	uxtb	r3, r3
 800954e:	2b00      	cmp	r3, #0
 8009550:	d012      	beq.n	8009578 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8009552:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009554:	689b      	ldr	r3, [r3, #8]
 8009556:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800955a:	f023 030f 	bic.w	r3, r3, #15
 800955e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009560:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009562:	e009      	b.n	8009578 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009568:	f043 0220 	orr.w	r2, r3, #32
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8009570:	2301      	movs	r3, #1
 8009572:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8009576:	e000      	b.n	800957a <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8009578:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2200      	movs	r2, #0
 800957e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8009582:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8009586:	4618      	mov	r0, r3
 8009588:	3784      	adds	r7, #132	; 0x84
 800958a:	46bd      	mov	sp, r7
 800958c:	bd90      	pop	{r4, r7, pc}
 800958e:	bf00      	nop
 8009590:	50000100 	.word	0x50000100
 8009594:	50000400 	.word	0x50000400
 8009598:	50000500 	.word	0x50000500
 800959c:	50000300 	.word	0x50000300
 80095a0:	50000700 	.word	0x50000700
 80095a4:	50000600 	.word	0x50000600

080095a8 <LL_EXTI_EnableIT_0_31>:
{
 80095a8:	b480      	push	{r7}
 80095aa:	b083      	sub	sp, #12
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80095b0:	4b05      	ldr	r3, [pc, #20]	; (80095c8 <LL_EXTI_EnableIT_0_31+0x20>)
 80095b2:	681a      	ldr	r2, [r3, #0]
 80095b4:	4904      	ldr	r1, [pc, #16]	; (80095c8 <LL_EXTI_EnableIT_0_31+0x20>)
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	4313      	orrs	r3, r2
 80095ba:	600b      	str	r3, [r1, #0]
}
 80095bc:	bf00      	nop
 80095be:	370c      	adds	r7, #12
 80095c0:	46bd      	mov	sp, r7
 80095c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095c6:	4770      	bx	lr
 80095c8:	40010400 	.word	0x40010400

080095cc <LL_EXTI_EnableIT_32_63>:
{
 80095cc:	b480      	push	{r7}
 80095ce:	b083      	sub	sp, #12
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80095d4:	4b05      	ldr	r3, [pc, #20]	; (80095ec <LL_EXTI_EnableIT_32_63+0x20>)
 80095d6:	6a1a      	ldr	r2, [r3, #32]
 80095d8:	4904      	ldr	r1, [pc, #16]	; (80095ec <LL_EXTI_EnableIT_32_63+0x20>)
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4313      	orrs	r3, r2
 80095de:	620b      	str	r3, [r1, #32]
}
 80095e0:	bf00      	nop
 80095e2:	370c      	adds	r7, #12
 80095e4:	46bd      	mov	sp, r7
 80095e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ea:	4770      	bx	lr
 80095ec:	40010400 	.word	0x40010400

080095f0 <LL_EXTI_DisableIT_0_31>:
{
 80095f0:	b480      	push	{r7}
 80095f2:	b083      	sub	sp, #12
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80095f8:	4b06      	ldr	r3, [pc, #24]	; (8009614 <LL_EXTI_DisableIT_0_31+0x24>)
 80095fa:	681a      	ldr	r2, [r3, #0]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	43db      	mvns	r3, r3
 8009600:	4904      	ldr	r1, [pc, #16]	; (8009614 <LL_EXTI_DisableIT_0_31+0x24>)
 8009602:	4013      	ands	r3, r2
 8009604:	600b      	str	r3, [r1, #0]
}
 8009606:	bf00      	nop
 8009608:	370c      	adds	r7, #12
 800960a:	46bd      	mov	sp, r7
 800960c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009610:	4770      	bx	lr
 8009612:	bf00      	nop
 8009614:	40010400 	.word	0x40010400

08009618 <LL_EXTI_DisableIT_32_63>:
{
 8009618:	b480      	push	{r7}
 800961a:	b083      	sub	sp, #12
 800961c:	af00      	add	r7, sp, #0
 800961e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8009620:	4b06      	ldr	r3, [pc, #24]	; (800963c <LL_EXTI_DisableIT_32_63+0x24>)
 8009622:	6a1a      	ldr	r2, [r3, #32]
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	43db      	mvns	r3, r3
 8009628:	4904      	ldr	r1, [pc, #16]	; (800963c <LL_EXTI_DisableIT_32_63+0x24>)
 800962a:	4013      	ands	r3, r2
 800962c:	620b      	str	r3, [r1, #32]
}
 800962e:	bf00      	nop
 8009630:	370c      	adds	r7, #12
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	40010400 	.word	0x40010400

08009640 <LL_EXTI_EnableEvent_0_31>:
{
 8009640:	b480      	push	{r7}
 8009642:	b083      	sub	sp, #12
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8009648:	4b05      	ldr	r3, [pc, #20]	; (8009660 <LL_EXTI_EnableEvent_0_31+0x20>)
 800964a:	685a      	ldr	r2, [r3, #4]
 800964c:	4904      	ldr	r1, [pc, #16]	; (8009660 <LL_EXTI_EnableEvent_0_31+0x20>)
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	4313      	orrs	r3, r2
 8009652:	604b      	str	r3, [r1, #4]
}
 8009654:	bf00      	nop
 8009656:	370c      	adds	r7, #12
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr
 8009660:	40010400 	.word	0x40010400

08009664 <LL_EXTI_EnableEvent_32_63>:
{
 8009664:	b480      	push	{r7}
 8009666:	b083      	sub	sp, #12
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800966c:	4b05      	ldr	r3, [pc, #20]	; (8009684 <LL_EXTI_EnableEvent_32_63+0x20>)
 800966e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009670:	4904      	ldr	r1, [pc, #16]	; (8009684 <LL_EXTI_EnableEvent_32_63+0x20>)
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4313      	orrs	r3, r2
 8009676:	624b      	str	r3, [r1, #36]	; 0x24
}
 8009678:	bf00      	nop
 800967a:	370c      	adds	r7, #12
 800967c:	46bd      	mov	sp, r7
 800967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009682:	4770      	bx	lr
 8009684:	40010400 	.word	0x40010400

08009688 <LL_EXTI_DisableEvent_0_31>:
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8009690:	4b06      	ldr	r3, [pc, #24]	; (80096ac <LL_EXTI_DisableEvent_0_31+0x24>)
 8009692:	685a      	ldr	r2, [r3, #4]
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	43db      	mvns	r3, r3
 8009698:	4904      	ldr	r1, [pc, #16]	; (80096ac <LL_EXTI_DisableEvent_0_31+0x24>)
 800969a:	4013      	ands	r3, r2
 800969c:	604b      	str	r3, [r1, #4]
}
 800969e:	bf00      	nop
 80096a0:	370c      	adds	r7, #12
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr
 80096aa:	bf00      	nop
 80096ac:	40010400 	.word	0x40010400

080096b0 <LL_EXTI_DisableEvent_32_63>:
{
 80096b0:	b480      	push	{r7}
 80096b2:	b083      	sub	sp, #12
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80096b8:	4b06      	ldr	r3, [pc, #24]	; (80096d4 <LL_EXTI_DisableEvent_32_63+0x24>)
 80096ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	43db      	mvns	r3, r3
 80096c0:	4904      	ldr	r1, [pc, #16]	; (80096d4 <LL_EXTI_DisableEvent_32_63+0x24>)
 80096c2:	4013      	ands	r3, r2
 80096c4:	624b      	str	r3, [r1, #36]	; 0x24
}
 80096c6:	bf00      	nop
 80096c8:	370c      	adds	r7, #12
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	40010400 	.word	0x40010400

080096d8 <LL_EXTI_EnableRisingTrig_0_31>:
{
 80096d8:	b480      	push	{r7}
 80096da:	b083      	sub	sp, #12
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80096e0:	4b05      	ldr	r3, [pc, #20]	; (80096f8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80096e2:	689a      	ldr	r2, [r3, #8]
 80096e4:	4904      	ldr	r1, [pc, #16]	; (80096f8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	4313      	orrs	r3, r2
 80096ea:	608b      	str	r3, [r1, #8]
}
 80096ec:	bf00      	nop
 80096ee:	370c      	adds	r7, #12
 80096f0:	46bd      	mov	sp, r7
 80096f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f6:	4770      	bx	lr
 80096f8:	40010400 	.word	0x40010400

080096fc <LL_EXTI_EnableRisingTrig_32_63>:
{
 80096fc:	b480      	push	{r7}
 80096fe:	b083      	sub	sp, #12
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8009704:	4b05      	ldr	r3, [pc, #20]	; (800971c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8009706:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009708:	4904      	ldr	r1, [pc, #16]	; (800971c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4313      	orrs	r3, r2
 800970e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8009710:	bf00      	nop
 8009712:	370c      	adds	r7, #12
 8009714:	46bd      	mov	sp, r7
 8009716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800971a:	4770      	bx	lr
 800971c:	40010400 	.word	0x40010400

08009720 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8009728:	4b06      	ldr	r3, [pc, #24]	; (8009744 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800972a:	689a      	ldr	r2, [r3, #8]
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	43db      	mvns	r3, r3
 8009730:	4904      	ldr	r1, [pc, #16]	; (8009744 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8009732:	4013      	ands	r3, r2
 8009734:	608b      	str	r3, [r1, #8]
}
 8009736:	bf00      	nop
 8009738:	370c      	adds	r7, #12
 800973a:	46bd      	mov	sp, r7
 800973c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009740:	4770      	bx	lr
 8009742:	bf00      	nop
 8009744:	40010400 	.word	0x40010400

08009748 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8009748:	b480      	push	{r7}
 800974a:	b083      	sub	sp, #12
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8009750:	4b06      	ldr	r3, [pc, #24]	; (800976c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8009752:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	43db      	mvns	r3, r3
 8009758:	4904      	ldr	r1, [pc, #16]	; (800976c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800975a:	4013      	ands	r3, r2
 800975c:	628b      	str	r3, [r1, #40]	; 0x28
}
 800975e:	bf00      	nop
 8009760:	370c      	adds	r7, #12
 8009762:	46bd      	mov	sp, r7
 8009764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009768:	4770      	bx	lr
 800976a:	bf00      	nop
 800976c:	40010400 	.word	0x40010400

08009770 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8009770:	b480      	push	{r7}
 8009772:	b083      	sub	sp, #12
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8009778:	4b05      	ldr	r3, [pc, #20]	; (8009790 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800977a:	68da      	ldr	r2, [r3, #12]
 800977c:	4904      	ldr	r1, [pc, #16]	; (8009790 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	4313      	orrs	r3, r2
 8009782:	60cb      	str	r3, [r1, #12]
}
 8009784:	bf00      	nop
 8009786:	370c      	adds	r7, #12
 8009788:	46bd      	mov	sp, r7
 800978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800978e:	4770      	bx	lr
 8009790:	40010400 	.word	0x40010400

08009794 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8009794:	b480      	push	{r7}
 8009796:	b083      	sub	sp, #12
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800979c:	4b05      	ldr	r3, [pc, #20]	; (80097b4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800979e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097a0:	4904      	ldr	r1, [pc, #16]	; (80097b4 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	4313      	orrs	r3, r2
 80097a6:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80097a8:	bf00      	nop
 80097aa:	370c      	adds	r7, #12
 80097ac:	46bd      	mov	sp, r7
 80097ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b2:	4770      	bx	lr
 80097b4:	40010400 	.word	0x40010400

080097b8 <LL_EXTI_DisableFallingTrig_0_31>:
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80097c0:	4b06      	ldr	r3, [pc, #24]	; (80097dc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80097c2:	68da      	ldr	r2, [r3, #12]
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	43db      	mvns	r3, r3
 80097c8:	4904      	ldr	r1, [pc, #16]	; (80097dc <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80097ca:	4013      	ands	r3, r2
 80097cc:	60cb      	str	r3, [r1, #12]
}
 80097ce:	bf00      	nop
 80097d0:	370c      	adds	r7, #12
 80097d2:	46bd      	mov	sp, r7
 80097d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d8:	4770      	bx	lr
 80097da:	bf00      	nop
 80097dc:	40010400 	.word	0x40010400

080097e0 <LL_EXTI_DisableFallingTrig_32_63>:
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80097e8:	4b06      	ldr	r3, [pc, #24]	; (8009804 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80097ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	43db      	mvns	r3, r3
 80097f0:	4904      	ldr	r1, [pc, #16]	; (8009804 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80097f2:	4013      	ands	r3, r2
 80097f4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80097f6:	bf00      	nop
 80097f8:	370c      	adds	r7, #12
 80097fa:	46bd      	mov	sp, r7
 80097fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009800:	4770      	bx	lr
 8009802:	bf00      	nop
 8009804:	40010400 	.word	0x40010400

08009808 <LL_EXTI_ClearFlag_0_31>:
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8009810:	4a04      	ldr	r2, [pc, #16]	; (8009824 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	6153      	str	r3, [r2, #20]
}
 8009816:	bf00      	nop
 8009818:	370c      	adds	r7, #12
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	40010400 	.word	0x40010400

08009828 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8009828:	b480      	push	{r7}
 800982a:	b083      	sub	sp, #12
 800982c:	af00      	add	r7, sp, #0
 800982e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8009830:	4a04      	ldr	r2, [pc, #16]	; (8009844 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	6353      	str	r3, [r2, #52]	; 0x34
}
 8009836:	bf00      	nop
 8009838:	370c      	adds	r7, #12
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr
 8009842:	bf00      	nop
 8009844:	40010400 	.word	0x40010400

08009848 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b088      	sub	sp, #32
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8009850:	2300      	movs	r3, #0
 8009852:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009854:	2300      	movs	r3, #0
 8009856:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d102      	bne.n	8009864 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 800985e:	2301      	movs	r3, #1
 8009860:	77fb      	strb	r3, [r7, #31]
 8009862:	e180      	b.n	8009b66 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800986e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009872:	d102      	bne.n	800987a <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	77fb      	strb	r3, [r7, #31]
 8009878:	e175      	b.n	8009b66 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	7f5b      	ldrb	r3, [r3, #29]
 800987e:	b2db      	uxtb	r3, r3
 8009880:	2b00      	cmp	r3, #0
 8009882:	d108      	bne.n	8009896 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2200      	movs	r2, #0
 8009888:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	2200      	movs	r2, #0
 800988e:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f7fd f9d1 	bl	8006c38 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098a0:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	695b      	ldr	r3, [r3, #20]
 80098b0:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	68db      	ldr	r3, [r3, #12]
 80098b6:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 80098bc:	4313      	orrs	r3, r2
 80098be:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681a      	ldr	r2, [r3, #0]
 80098c6:	4b98      	ldr	r3, [pc, #608]	; (8009b28 <HAL_COMP_Init+0x2e0>)
 80098c8:	4013      	ands	r3, r2
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	6812      	ldr	r2, [r2, #0]
 80098ce:	6979      	ldr	r1, [r7, #20]
 80098d0:	430b      	orrs	r3, r1
 80098d2:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80098de:	2b00      	cmp	r3, #0
 80098e0:	d015      	beq.n	800990e <HAL_COMP_Init+0xc6>
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	d112      	bne.n	800990e <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80098e8:	4b90      	ldr	r3, [pc, #576]	; (8009b2c <HAL_COMP_Init+0x2e4>)
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	099b      	lsrs	r3, r3, #6
 80098ee:	4a90      	ldr	r2, [pc, #576]	; (8009b30 <HAL_COMP_Init+0x2e8>)
 80098f0:	fba2 2303 	umull	r2, r3, r2, r3
 80098f4:	099a      	lsrs	r2, r3, #6
 80098f6:	4613      	mov	r3, r2
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	4413      	add	r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8009900:	e002      	b.n	8009908 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	3b01      	subs	r3, #1
 8009906:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d1f9      	bne.n	8009902 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4a88      	ldr	r2, [pc, #544]	; (8009b34 <HAL_COMP_Init+0x2ec>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d028      	beq.n	800996a <HAL_COMP_Init+0x122>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	4a86      	ldr	r2, [pc, #536]	; (8009b38 <HAL_COMP_Init+0x2f0>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d020      	beq.n	8009964 <HAL_COMP_Init+0x11c>
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	4a85      	ldr	r2, [pc, #532]	; (8009b3c <HAL_COMP_Init+0x2f4>)
 8009928:	4293      	cmp	r3, r2
 800992a:	d018      	beq.n	800995e <HAL_COMP_Init+0x116>
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4a83      	ldr	r2, [pc, #524]	; (8009b40 <HAL_COMP_Init+0x2f8>)
 8009932:	4293      	cmp	r3, r2
 8009934:	d010      	beq.n	8009958 <HAL_COMP_Init+0x110>
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	4a82      	ldr	r2, [pc, #520]	; (8009b44 <HAL_COMP_Init+0x2fc>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d008      	beq.n	8009952 <HAL_COMP_Init+0x10a>
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4a80      	ldr	r2, [pc, #512]	; (8009b48 <HAL_COMP_Init+0x300>)
 8009946:	4293      	cmp	r3, r2
 8009948:	d101      	bne.n	800994e <HAL_COMP_Init+0x106>
 800994a:	2301      	movs	r3, #1
 800994c:	e00f      	b.n	800996e <HAL_COMP_Init+0x126>
 800994e:	2302      	movs	r3, #2
 8009950:	e00d      	b.n	800996e <HAL_COMP_Init+0x126>
 8009952:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8009956:	e00a      	b.n	800996e <HAL_COMP_Init+0x126>
 8009958:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800995c:	e007      	b.n	800996e <HAL_COMP_Init+0x126>
 800995e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8009962:	e004      	b.n	800996e <HAL_COMP_Init+0x126>
 8009964:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8009968:	e001      	b.n	800996e <HAL_COMP_Init+0x126>
 800996a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800996e:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	699b      	ldr	r3, [r3, #24]
 8009974:	f003 0303 	and.w	r3, r3, #3
 8009978:	2b00      	cmp	r3, #0
 800997a:	f000 80b6 	beq.w	8009aea <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	699b      	ldr	r3, [r3, #24]
 8009982:	f003 0310 	and.w	r3, r3, #16
 8009986:	2b00      	cmp	r3, #0
 8009988:	d011      	beq.n	80099ae <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	4a6e      	ldr	r2, [pc, #440]	; (8009b48 <HAL_COMP_Init+0x300>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d004      	beq.n	800999e <HAL_COMP_Init+0x156>
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	4a6c      	ldr	r2, [pc, #432]	; (8009b4c <HAL_COMP_Init+0x304>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d103      	bne.n	80099a6 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 800999e:	6938      	ldr	r0, [r7, #16]
 80099a0:	f7ff feac 	bl	80096fc <LL_EXTI_EnableRisingTrig_32_63>
 80099a4:	e014      	b.n	80099d0 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 80099a6:	6938      	ldr	r0, [r7, #16]
 80099a8:	f7ff fe96 	bl	80096d8 <LL_EXTI_EnableRisingTrig_0_31>
 80099ac:	e010      	b.n	80099d0 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	4a65      	ldr	r2, [pc, #404]	; (8009b48 <HAL_COMP_Init+0x300>)
 80099b4:	4293      	cmp	r3, r2
 80099b6:	d004      	beq.n	80099c2 <HAL_COMP_Init+0x17a>
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	4a63      	ldr	r2, [pc, #396]	; (8009b4c <HAL_COMP_Init+0x304>)
 80099be:	4293      	cmp	r3, r2
 80099c0:	d103      	bne.n	80099ca <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 80099c2:	6938      	ldr	r0, [r7, #16]
 80099c4:	f7ff fec0 	bl	8009748 <LL_EXTI_DisableRisingTrig_32_63>
 80099c8:	e002      	b.n	80099d0 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 80099ca:	6938      	ldr	r0, [r7, #16]
 80099cc:	f7ff fea8 	bl	8009720 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	699b      	ldr	r3, [r3, #24]
 80099d4:	f003 0320 	and.w	r3, r3, #32
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d011      	beq.n	8009a00 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a59      	ldr	r2, [pc, #356]	; (8009b48 <HAL_COMP_Init+0x300>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d004      	beq.n	80099f0 <HAL_COMP_Init+0x1a8>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a58      	ldr	r2, [pc, #352]	; (8009b4c <HAL_COMP_Init+0x304>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d103      	bne.n	80099f8 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 80099f0:	6938      	ldr	r0, [r7, #16]
 80099f2:	f7ff fecf 	bl	8009794 <LL_EXTI_EnableFallingTrig_32_63>
 80099f6:	e014      	b.n	8009a22 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 80099f8:	6938      	ldr	r0, [r7, #16]
 80099fa:	f7ff feb9 	bl	8009770 <LL_EXTI_EnableFallingTrig_0_31>
 80099fe:	e010      	b.n	8009a22 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a50      	ldr	r2, [pc, #320]	; (8009b48 <HAL_COMP_Init+0x300>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d004      	beq.n	8009a14 <HAL_COMP_Init+0x1cc>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a4f      	ldr	r2, [pc, #316]	; (8009b4c <HAL_COMP_Init+0x304>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d103      	bne.n	8009a1c <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8009a14:	6938      	ldr	r0, [r7, #16]
 8009a16:	f7ff fee3 	bl	80097e0 <LL_EXTI_DisableFallingTrig_32_63>
 8009a1a:	e002      	b.n	8009a22 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8009a1c:	6938      	ldr	r0, [r7, #16]
 8009a1e:	f7ff fecb 	bl	80097b8 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a48      	ldr	r2, [pc, #288]	; (8009b48 <HAL_COMP_Init+0x300>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d004      	beq.n	8009a36 <HAL_COMP_Init+0x1ee>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a46      	ldr	r2, [pc, #280]	; (8009b4c <HAL_COMP_Init+0x304>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d103      	bne.n	8009a3e <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8009a36:	6938      	ldr	r0, [r7, #16]
 8009a38:	f7ff fef6 	bl	8009828 <LL_EXTI_ClearFlag_32_63>
 8009a3c:	e002      	b.n	8009a44 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8009a3e:	6938      	ldr	r0, [r7, #16]
 8009a40:	f7ff fee2 	bl	8009808 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	699b      	ldr	r3, [r3, #24]
 8009a48:	f003 0302 	and.w	r3, r3, #2
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d011      	beq.n	8009a74 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a3c      	ldr	r2, [pc, #240]	; (8009b48 <HAL_COMP_Init+0x300>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d004      	beq.n	8009a64 <HAL_COMP_Init+0x21c>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a3b      	ldr	r2, [pc, #236]	; (8009b4c <HAL_COMP_Init+0x304>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d103      	bne.n	8009a6c <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8009a64:	6938      	ldr	r0, [r7, #16]
 8009a66:	f7ff fdfd 	bl	8009664 <LL_EXTI_EnableEvent_32_63>
 8009a6a:	e014      	b.n	8009a96 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8009a6c:	6938      	ldr	r0, [r7, #16]
 8009a6e:	f7ff fde7 	bl	8009640 <LL_EXTI_EnableEvent_0_31>
 8009a72:	e010      	b.n	8009a96 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a33      	ldr	r2, [pc, #204]	; (8009b48 <HAL_COMP_Init+0x300>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d004      	beq.n	8009a88 <HAL_COMP_Init+0x240>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a32      	ldr	r2, [pc, #200]	; (8009b4c <HAL_COMP_Init+0x304>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d103      	bne.n	8009a90 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8009a88:	6938      	ldr	r0, [r7, #16]
 8009a8a:	f7ff fe11 	bl	80096b0 <LL_EXTI_DisableEvent_32_63>
 8009a8e:	e002      	b.n	8009a96 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8009a90:	6938      	ldr	r0, [r7, #16]
 8009a92:	f7ff fdf9 	bl	8009688 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	699b      	ldr	r3, [r3, #24]
 8009a9a:	f003 0301 	and.w	r3, r3, #1
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d011      	beq.n	8009ac6 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a28      	ldr	r2, [pc, #160]	; (8009b48 <HAL_COMP_Init+0x300>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d004      	beq.n	8009ab6 <HAL_COMP_Init+0x26e>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a26      	ldr	r2, [pc, #152]	; (8009b4c <HAL_COMP_Init+0x304>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d103      	bne.n	8009abe <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8009ab6:	6938      	ldr	r0, [r7, #16]
 8009ab8:	f7ff fd88 	bl	80095cc <LL_EXTI_EnableIT_32_63>
 8009abc:	e04b      	b.n	8009b56 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8009abe:	6938      	ldr	r0, [r7, #16]
 8009ac0:	f7ff fd72 	bl	80095a8 <LL_EXTI_EnableIT_0_31>
 8009ac4:	e047      	b.n	8009b56 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a1f      	ldr	r2, [pc, #124]	; (8009b48 <HAL_COMP_Init+0x300>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d004      	beq.n	8009ada <HAL_COMP_Init+0x292>
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	4a1d      	ldr	r2, [pc, #116]	; (8009b4c <HAL_COMP_Init+0x304>)
 8009ad6:	4293      	cmp	r3, r2
 8009ad8:	d103      	bne.n	8009ae2 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8009ada:	6938      	ldr	r0, [r7, #16]
 8009adc:	f7ff fd9c 	bl	8009618 <LL_EXTI_DisableIT_32_63>
 8009ae0:	e039      	b.n	8009b56 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8009ae2:	6938      	ldr	r0, [r7, #16]
 8009ae4:	f7ff fd84 	bl	80095f0 <LL_EXTI_DisableIT_0_31>
 8009ae8:	e035      	b.n	8009b56 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a16      	ldr	r2, [pc, #88]	; (8009b48 <HAL_COMP_Init+0x300>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d004      	beq.n	8009afe <HAL_COMP_Init+0x2b6>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a14      	ldr	r2, [pc, #80]	; (8009b4c <HAL_COMP_Init+0x304>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d103      	bne.n	8009b06 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8009afe:	6938      	ldr	r0, [r7, #16]
 8009b00:	f7ff fdd6 	bl	80096b0 <LL_EXTI_DisableEvent_32_63>
 8009b04:	e002      	b.n	8009b0c <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8009b06:	6938      	ldr	r0, [r7, #16]
 8009b08:	f7ff fdbe 	bl	8009688 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	4a0d      	ldr	r2, [pc, #52]	; (8009b48 <HAL_COMP_Init+0x300>)
 8009b12:	4293      	cmp	r3, r2
 8009b14:	d004      	beq.n	8009b20 <HAL_COMP_Init+0x2d8>
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	4a0c      	ldr	r2, [pc, #48]	; (8009b4c <HAL_COMP_Init+0x304>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d117      	bne.n	8009b50 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8009b20:	6938      	ldr	r0, [r7, #16]
 8009b22:	f7ff fd79 	bl	8009618 <LL_EXTI_DisableIT_32_63>
 8009b26:	e016      	b.n	8009b56 <HAL_COMP_Init+0x30e>
 8009b28:	ff007e0f 	.word	0xff007e0f
 8009b2c:	20000ca0 	.word	0x20000ca0
 8009b30:	053e2d63 	.word	0x053e2d63
 8009b34:	40010200 	.word	0x40010200
 8009b38:	40010204 	.word	0x40010204
 8009b3c:	40010208 	.word	0x40010208
 8009b40:	4001020c 	.word	0x4001020c
 8009b44:	40010210 	.word	0x40010210
 8009b48:	40010214 	.word	0x40010214
 8009b4c:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8009b50:	6938      	ldr	r0, [r7, #16]
 8009b52:	f7ff fd4d 	bl	80095f0 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	7f5b      	ldrb	r3, [r3, #29]
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d102      	bne.n	8009b66 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	2201      	movs	r2, #1
 8009b64:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8009b66:	7ffb      	ldrb	r3, [r7, #31]
}
 8009b68:	4618      	mov	r0, r3
 8009b6a:	3720      	adds	r7, #32
 8009b6c:	46bd      	mov	sp, r7
 8009b6e:	bd80      	pop	{r7, pc}

08009b70 <__NVIC_SetPriorityGrouping>:
{
 8009b70:	b480      	push	{r7}
 8009b72:	b085      	sub	sp, #20
 8009b74:	af00      	add	r7, sp, #0
 8009b76:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	f003 0307 	and.w	r3, r3, #7
 8009b7e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009b80:	4b0c      	ldr	r3, [pc, #48]	; (8009bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009b86:	68ba      	ldr	r2, [r7, #8]
 8009b88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009b8c:	4013      	ands	r3, r2
 8009b8e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009b98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009b9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ba0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009ba2:	4a04      	ldr	r2, [pc, #16]	; (8009bb4 <__NVIC_SetPriorityGrouping+0x44>)
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	60d3      	str	r3, [r2, #12]
}
 8009ba8:	bf00      	nop
 8009baa:	3714      	adds	r7, #20
 8009bac:	46bd      	mov	sp, r7
 8009bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb2:	4770      	bx	lr
 8009bb4:	e000ed00 	.word	0xe000ed00

08009bb8 <__NVIC_GetPriorityGrouping>:
{
 8009bb8:	b480      	push	{r7}
 8009bba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009bbc:	4b04      	ldr	r3, [pc, #16]	; (8009bd0 <__NVIC_GetPriorityGrouping+0x18>)
 8009bbe:	68db      	ldr	r3, [r3, #12]
 8009bc0:	0a1b      	lsrs	r3, r3, #8
 8009bc2:	f003 0307 	and.w	r3, r3, #7
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bce:	4770      	bx	lr
 8009bd0:	e000ed00 	.word	0xe000ed00

08009bd4 <__NVIC_EnableIRQ>:
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b083      	sub	sp, #12
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	4603      	mov	r3, r0
 8009bdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	db0b      	blt.n	8009bfe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009be6:	79fb      	ldrb	r3, [r7, #7]
 8009be8:	f003 021f 	and.w	r2, r3, #31
 8009bec:	4907      	ldr	r1, [pc, #28]	; (8009c0c <__NVIC_EnableIRQ+0x38>)
 8009bee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009bf2:	095b      	lsrs	r3, r3, #5
 8009bf4:	2001      	movs	r0, #1
 8009bf6:	fa00 f202 	lsl.w	r2, r0, r2
 8009bfa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009bfe:	bf00      	nop
 8009c00:	370c      	adds	r7, #12
 8009c02:	46bd      	mov	sp, r7
 8009c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c08:	4770      	bx	lr
 8009c0a:	bf00      	nop
 8009c0c:	e000e100 	.word	0xe000e100

08009c10 <__NVIC_SetPriority>:
{
 8009c10:	b480      	push	{r7}
 8009c12:	b083      	sub	sp, #12
 8009c14:	af00      	add	r7, sp, #0
 8009c16:	4603      	mov	r3, r0
 8009c18:	6039      	str	r1, [r7, #0]
 8009c1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c20:	2b00      	cmp	r3, #0
 8009c22:	db0a      	blt.n	8009c3a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	b2da      	uxtb	r2, r3
 8009c28:	490c      	ldr	r1, [pc, #48]	; (8009c5c <__NVIC_SetPriority+0x4c>)
 8009c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c2e:	0112      	lsls	r2, r2, #4
 8009c30:	b2d2      	uxtb	r2, r2
 8009c32:	440b      	add	r3, r1
 8009c34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009c38:	e00a      	b.n	8009c50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	b2da      	uxtb	r2, r3
 8009c3e:	4908      	ldr	r1, [pc, #32]	; (8009c60 <__NVIC_SetPriority+0x50>)
 8009c40:	79fb      	ldrb	r3, [r7, #7]
 8009c42:	f003 030f 	and.w	r3, r3, #15
 8009c46:	3b04      	subs	r3, #4
 8009c48:	0112      	lsls	r2, r2, #4
 8009c4a:	b2d2      	uxtb	r2, r2
 8009c4c:	440b      	add	r3, r1
 8009c4e:	761a      	strb	r2, [r3, #24]
}
 8009c50:	bf00      	nop
 8009c52:	370c      	adds	r7, #12
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr
 8009c5c:	e000e100 	.word	0xe000e100
 8009c60:	e000ed00 	.word	0xe000ed00

08009c64 <NVIC_EncodePriority>:
{
 8009c64:	b480      	push	{r7}
 8009c66:	b089      	sub	sp, #36	; 0x24
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	60f8      	str	r0, [r7, #12]
 8009c6c:	60b9      	str	r1, [r7, #8]
 8009c6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	f003 0307 	and.w	r3, r3, #7
 8009c76:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009c78:	69fb      	ldr	r3, [r7, #28]
 8009c7a:	f1c3 0307 	rsb	r3, r3, #7
 8009c7e:	2b04      	cmp	r3, #4
 8009c80:	bf28      	it	cs
 8009c82:	2304      	movcs	r3, #4
 8009c84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009c86:	69fb      	ldr	r3, [r7, #28]
 8009c88:	3304      	adds	r3, #4
 8009c8a:	2b06      	cmp	r3, #6
 8009c8c:	d902      	bls.n	8009c94 <NVIC_EncodePriority+0x30>
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	3b03      	subs	r3, #3
 8009c92:	e000      	b.n	8009c96 <NVIC_EncodePriority+0x32>
 8009c94:	2300      	movs	r3, #0
 8009c96:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009c98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8009ca2:	43da      	mvns	r2, r3
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	401a      	ands	r2, r3
 8009ca8:	697b      	ldr	r3, [r7, #20]
 8009caa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009cac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8009cb6:	43d9      	mvns	r1, r3
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009cbc:	4313      	orrs	r3, r2
}
 8009cbe:	4618      	mov	r0, r3
 8009cc0:	3724      	adds	r7, #36	; 0x24
 8009cc2:	46bd      	mov	sp, r7
 8009cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc8:	4770      	bx	lr
	...

08009ccc <SysTick_Config>:
{
 8009ccc:	b580      	push	{r7, lr}
 8009cce:	b082      	sub	sp, #8
 8009cd0:	af00      	add	r7, sp, #0
 8009cd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	3b01      	subs	r3, #1
 8009cd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009cdc:	d301      	bcc.n	8009ce2 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8009cde:	2301      	movs	r3, #1
 8009ce0:	e00f      	b.n	8009d02 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009ce2:	4a0a      	ldr	r2, [pc, #40]	; (8009d0c <SysTick_Config+0x40>)
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	3b01      	subs	r3, #1
 8009ce8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009cea:	210f      	movs	r1, #15
 8009cec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009cf0:	f7ff ff8e 	bl	8009c10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009cf4:	4b05      	ldr	r3, [pc, #20]	; (8009d0c <SysTick_Config+0x40>)
 8009cf6:	2200      	movs	r2, #0
 8009cf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009cfa:	4b04      	ldr	r3, [pc, #16]	; (8009d0c <SysTick_Config+0x40>)
 8009cfc:	2207      	movs	r2, #7
 8009cfe:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3708      	adds	r7, #8
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	e000e010 	.word	0xe000e010

08009d10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b082      	sub	sp, #8
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f7ff ff29 	bl	8009b70 <__NVIC_SetPriorityGrouping>
}
 8009d1e:	bf00      	nop
 8009d20:	3708      	adds	r7, #8
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009d26:	b580      	push	{r7, lr}
 8009d28:	b086      	sub	sp, #24
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	60b9      	str	r1, [r7, #8]
 8009d30:	607a      	str	r2, [r7, #4]
 8009d32:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009d34:	f7ff ff40 	bl	8009bb8 <__NVIC_GetPriorityGrouping>
 8009d38:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009d3a:	687a      	ldr	r2, [r7, #4]
 8009d3c:	68b9      	ldr	r1, [r7, #8]
 8009d3e:	6978      	ldr	r0, [r7, #20]
 8009d40:	f7ff ff90 	bl	8009c64 <NVIC_EncodePriority>
 8009d44:	4602      	mov	r2, r0
 8009d46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d4a:	4611      	mov	r1, r2
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f7ff ff5f 	bl	8009c10 <__NVIC_SetPriority>
}
 8009d52:	bf00      	nop
 8009d54:	3718      	adds	r7, #24
 8009d56:	46bd      	mov	sp, r7
 8009d58:	bd80      	pop	{r7, pc}

08009d5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009d5a:	b580      	push	{r7, lr}
 8009d5c:	b082      	sub	sp, #8
 8009d5e:	af00      	add	r7, sp, #0
 8009d60:	4603      	mov	r3, r0
 8009d62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009d68:	4618      	mov	r0, r3
 8009d6a:	f7ff ff33 	bl	8009bd4 <__NVIC_EnableIRQ>
}
 8009d6e:	bf00      	nop
 8009d70:	3708      	adds	r7, #8
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b082      	sub	sp, #8
 8009d7a:	af00      	add	r7, sp, #0
 8009d7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009d7e:	6878      	ldr	r0, [r7, #4]
 8009d80:	f7ff ffa4 	bl	8009ccc <SysTick_Config>
 8009d84:	4603      	mov	r3, r0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3708      	adds	r7, #8
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}

08009d8e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8009d8e:	b580      	push	{r7, lr}
 8009d90:	b082      	sub	sp, #8
 8009d92:	af00      	add	r7, sp, #0
 8009d94:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2b00      	cmp	r3, #0
 8009d9a:	d101      	bne.n	8009da0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8009d9c:	2301      	movs	r3, #1
 8009d9e:	e014      	b.n	8009dca <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	791b      	ldrb	r3, [r3, #4]
 8009da4:	b2db      	uxtb	r3, r3
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d105      	bne.n	8009db6 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2200      	movs	r2, #0
 8009dae:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	f7fc fff7 	bl	8006da4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2202      	movs	r2, #2
 8009dba:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2200      	movs	r2, #0
 8009dc0:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009dc8:	2300      	movs	r3, #0
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	3708      	adds	r7, #8
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	bd80      	pop	{r7, pc}

08009dd2 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009dd2:	b580      	push	{r7, lr}
 8009dd4:	b082      	sub	sp, #8
 8009dd6:	af00      	add	r7, sp, #0
 8009dd8:	6078      	str	r0, [r7, #4]
 8009dda:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	795b      	ldrb	r3, [r3, #5]
 8009de0:	2b01      	cmp	r3, #1
 8009de2:	d101      	bne.n	8009de8 <HAL_DAC_Start+0x16>
 8009de4:	2302      	movs	r3, #2
 8009de6:	e043      	b.n	8009e70 <HAL_DAC_Start+0x9e>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2201      	movs	r2, #1
 8009dec:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2202      	movs	r2, #2
 8009df2:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	6819      	ldr	r1, [r3, #0]
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	f003 0310 	and.w	r3, r3, #16
 8009e00:	2201      	movs	r2, #1
 8009e02:	409a      	lsls	r2, r3
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	430a      	orrs	r2, r1
 8009e0a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8009e0c:	2001      	movs	r0, #1
 8009e0e:	f7fe fb4d 	bl	80084ac <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d10f      	bne.n	8009e38 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8009e22:	2b02      	cmp	r3, #2
 8009e24:	d11d      	bne.n	8009e62 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	685a      	ldr	r2, [r3, #4]
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	f042 0201 	orr.w	r2, r2, #1
 8009e34:	605a      	str	r2, [r3, #4]
 8009e36:	e014      	b.n	8009e62 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	f003 0310 	and.w	r3, r3, #16
 8009e48:	2102      	movs	r1, #2
 8009e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d107      	bne.n	8009e62 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	685a      	ldr	r2, [r3, #4]
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	f042 0202 	orr.w	r2, r2, #2
 8009e60:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	2201      	movs	r2, #1
 8009e66:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8009e6e:	2300      	movs	r3, #0
}
 8009e70:	4618      	mov	r0, r3
 8009e72:	3708      	adds	r7, #8
 8009e74:	46bd      	mov	sp, r7
 8009e76:	bd80      	pop	{r7, pc}

08009e78 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8009e78:	b580      	push	{r7, lr}
 8009e7a:	b086      	sub	sp, #24
 8009e7c:	af00      	add	r7, sp, #0
 8009e7e:	60f8      	str	r0, [r7, #12]
 8009e80:	60b9      	str	r1, [r7, #8]
 8009e82:	607a      	str	r2, [r7, #4]
 8009e84:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8009e86:	2300      	movs	r3, #0
 8009e88:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	795b      	ldrb	r3, [r3, #5]
 8009e8e:	2b01      	cmp	r3, #1
 8009e90:	d101      	bne.n	8009e96 <HAL_DAC_Start_DMA+0x1e>
 8009e92:	2302      	movs	r3, #2
 8009e94:	e0a1      	b.n	8009fda <HAL_DAC_Start_DMA+0x162>
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2201      	movs	r2, #1
 8009e9a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	2202      	movs	r2, #2
 8009ea0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d12a      	bne.n	8009efe <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	4a4d      	ldr	r2, [pc, #308]	; (8009fe4 <HAL_DAC_Start_DMA+0x16c>)
 8009eae:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	4a4c      	ldr	r2, [pc, #304]	; (8009fe8 <HAL_DAC_Start_DMA+0x170>)
 8009eb6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	4a4b      	ldr	r2, [pc, #300]	; (8009fec <HAL_DAC_Start_DMA+0x174>)
 8009ebe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	681a      	ldr	r2, [r3, #0]
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009ece:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8009ed0:	6a3b      	ldr	r3, [r7, #32]
 8009ed2:	2b04      	cmp	r3, #4
 8009ed4:	d009      	beq.n	8009eea <HAL_DAC_Start_DMA+0x72>
 8009ed6:	2b08      	cmp	r3, #8
 8009ed8:	d00c      	beq.n	8009ef4 <HAL_DAC_Start_DMA+0x7c>
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	d000      	beq.n	8009ee0 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8009ede:	e039      	b.n	8009f54 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	3308      	adds	r3, #8
 8009ee6:	613b      	str	r3, [r7, #16]
        break;
 8009ee8:	e034      	b.n	8009f54 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	330c      	adds	r3, #12
 8009ef0:	613b      	str	r3, [r7, #16]
        break;
 8009ef2:	e02f      	b.n	8009f54 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	3310      	adds	r3, #16
 8009efa:	613b      	str	r3, [r7, #16]
        break;
 8009efc:	e02a      	b.n	8009f54 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	4a3b      	ldr	r2, [pc, #236]	; (8009ff0 <HAL_DAC_Start_DMA+0x178>)
 8009f04:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009f06:	68fb      	ldr	r3, [r7, #12]
 8009f08:	68db      	ldr	r3, [r3, #12]
 8009f0a:	4a3a      	ldr	r2, [pc, #232]	; (8009ff4 <HAL_DAC_Start_DMA+0x17c>)
 8009f0c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	68db      	ldr	r3, [r3, #12]
 8009f12:	4a39      	ldr	r2, [pc, #228]	; (8009ff8 <HAL_DAC_Start_DMA+0x180>)
 8009f14:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009f24:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8009f26:	6a3b      	ldr	r3, [r7, #32]
 8009f28:	2b04      	cmp	r3, #4
 8009f2a:	d009      	beq.n	8009f40 <HAL_DAC_Start_DMA+0xc8>
 8009f2c:	2b08      	cmp	r3, #8
 8009f2e:	d00c      	beq.n	8009f4a <HAL_DAC_Start_DMA+0xd2>
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d000      	beq.n	8009f36 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8009f34:	e00e      	b.n	8009f54 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	3314      	adds	r3, #20
 8009f3c:	613b      	str	r3, [r7, #16]
        break;
 8009f3e:	e009      	b.n	8009f54 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	3318      	adds	r3, #24
 8009f46:	613b      	str	r3, [r7, #16]
        break;
 8009f48:	e004      	b.n	8009f54 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	331c      	adds	r3, #28
 8009f50:	613b      	str	r3, [r7, #16]
        break;
 8009f52:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d111      	bne.n	8009f7e <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	681a      	ldr	r2, [r3, #0]
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f68:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	6898      	ldr	r0, [r3, #8]
 8009f6e:	6879      	ldr	r1, [r7, #4]
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	693a      	ldr	r2, [r7, #16]
 8009f74:	f000 fbd2 	bl	800a71c <HAL_DMA_Start_IT>
 8009f78:	4603      	mov	r3, r0
 8009f7a:	75fb      	strb	r3, [r7, #23]
 8009f7c:	e010      	b.n	8009fa0 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	681a      	ldr	r2, [r3, #0]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8009f8c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	68d8      	ldr	r0, [r3, #12]
 8009f92:	6879      	ldr	r1, [r7, #4]
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	693a      	ldr	r2, [r7, #16]
 8009f98:	f000 fbc0 	bl	800a71c <HAL_DMA_Start_IT>
 8009f9c:	4603      	mov	r3, r0
 8009f9e:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	2200      	movs	r2, #0
 8009fa4:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8009fa6:	7dfb      	ldrb	r3, [r7, #23]
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d10f      	bne.n	8009fcc <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	6819      	ldr	r1, [r3, #0]
 8009fb2:	68bb      	ldr	r3, [r7, #8]
 8009fb4:	f003 0310 	and.w	r3, r3, #16
 8009fb8:	2201      	movs	r2, #1
 8009fba:	409a      	lsls	r2, r3
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	430a      	orrs	r2, r1
 8009fc2:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8009fc4:	2001      	movs	r0, #1
 8009fc6:	f7fe fa71 	bl	80084ac <HAL_Delay>
 8009fca:	e005      	b.n	8009fd8 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	691b      	ldr	r3, [r3, #16]
 8009fd0:	f043 0204 	orr.w	r2, r3, #4
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8009fd8:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fda:	4618      	mov	r0, r3
 8009fdc:	3718      	adds	r7, #24
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	0800a4b9 	.word	0x0800a4b9
 8009fe8:	0800a4db 	.word	0x0800a4db
 8009fec:	0800a4f7 	.word	0x0800a4f7
 8009ff0:	0800a561 	.word	0x0800a561
 8009ff4:	0800a583 	.word	0x0800a583
 8009ff8:	0800a59f 	.word	0x0800a59f

08009ffc <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b084      	sub	sp, #16
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	6819      	ldr	r1, [r3, #0]
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	f003 0310 	and.w	r3, r3, #16
 800a012:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a016:	fa02 f303 	lsl.w	r3, r2, r3
 800a01a:	43da      	mvns	r2, r3
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	400a      	ands	r2, r1
 800a022:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	6819      	ldr	r1, [r3, #0]
 800a02a:	683b      	ldr	r3, [r7, #0]
 800a02c:	f003 0310 	and.w	r3, r3, #16
 800a030:	2201      	movs	r2, #1
 800a032:	fa02 f303 	lsl.w	r3, r2, r3
 800a036:	43da      	mvns	r2, r3
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	400a      	ands	r2, r1
 800a03e:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800a040:	2001      	movs	r0, #1
 800a042:	f7fe fa33 	bl	80084ac <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d10f      	bne.n	800a06c <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	689b      	ldr	r3, [r3, #8]
 800a050:	4618      	mov	r0, r3
 800a052:	f000 fbde 	bl	800a812 <HAL_DMA_Abort>
 800a056:	4603      	mov	r3, r0
 800a058:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a068:	601a      	str	r2, [r3, #0]
 800a06a:	e00e      	b.n	800a08a <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	68db      	ldr	r3, [r3, #12]
 800a070:	4618      	mov	r0, r3
 800a072:	f000 fbce 	bl	800a812 <HAL_DMA_Abort>
 800a076:	4603      	mov	r3, r0
 800a078:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	681a      	ldr	r2, [r3, #0]
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800a088:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800a08a:	7bfb      	ldrb	r3, [r7, #15]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d003      	beq.n	800a098 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	2204      	movs	r2, #4
 800a094:	711a      	strb	r2, [r3, #4]
 800a096:	e002      	b.n	800a09e <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2201      	movs	r2, #1
 800a09c:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 800a09e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3710      	adds	r7, #16
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	bd80      	pop	{r7, pc}

0800a0a8 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800a0a8:	b480      	push	{r7}
 800a0aa:	b087      	sub	sp, #28
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	60f8      	str	r0, [r7, #12]
 800a0b0:	60b9      	str	r1, [r7, #8]
 800a0b2:	607a      	str	r2, [r7, #4]
 800a0b4:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d105      	bne.n	800a0d8 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800a0cc:	697a      	ldr	r2, [r7, #20]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	4413      	add	r3, r2
 800a0d2:	3308      	adds	r3, #8
 800a0d4:	617b      	str	r3, [r7, #20]
 800a0d6:	e004      	b.n	800a0e2 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800a0d8:	697a      	ldr	r2, [r7, #20]
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4413      	add	r3, r2
 800a0de:	3314      	adds	r3, #20
 800a0e0:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	461a      	mov	r2, r3
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800a0ea:	2300      	movs	r3, #0
}
 800a0ec:	4618      	mov	r0, r3
 800a0ee:	371c      	adds	r7, #28
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f6:	4770      	bx	lr

0800a0f8 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b083      	sub	sp, #12
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800a100:	bf00      	nop
 800a102:	370c      	adds	r7, #12
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b083      	sub	sp, #12
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800a114:	bf00      	nop
 800a116:	370c      	adds	r7, #12
 800a118:	46bd      	mov	sp, r7
 800a11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11e:	4770      	bx	lr

0800a120 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800a120:	b480      	push	{r7}
 800a122:	b083      	sub	sp, #12
 800a124:	af00      	add	r7, sp, #0
 800a126:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800a128:	bf00      	nop
 800a12a:	370c      	adds	r7, #12
 800a12c:	46bd      	mov	sp, r7
 800a12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a132:	4770      	bx	lr

0800a134 <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800a134:	b480      	push	{r7}
 800a136:	b083      	sub	sp, #12
 800a138:	af00      	add	r7, sp, #0
 800a13a:	6078      	str	r0, [r7, #4]
 800a13c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	d103      	bne.n	800a14c <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a14a:	e002      	b.n	800a152 <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 800a152:	4618      	mov	r0, r3
 800a154:	370c      	adds	r7, #12
 800a156:	46bd      	mov	sp, r7
 800a158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a15c:	4770      	bx	lr
	...

0800a160 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b08a      	sub	sp, #40	; 0x28
 800a164:	af00      	add	r7, sp, #0
 800a166:	60f8      	str	r0, [r7, #12]
 800a168:	60b9      	str	r1, [r7, #8]
 800a16a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800a16c:	2300      	movs	r3, #0
 800a16e:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	795b      	ldrb	r3, [r3, #5]
 800a174:	2b01      	cmp	r3, #1
 800a176:	d101      	bne.n	800a17c <HAL_DAC_ConfigChannel+0x1c>
 800a178:	2302      	movs	r3, #2
 800a17a:	e194      	b.n	800a4a6 <HAL_DAC_ConfigChannel+0x346>
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	2201      	movs	r2, #1
 800a180:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	2202      	movs	r2, #2
 800a186:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	689b      	ldr	r3, [r3, #8]
 800a18c:	2b04      	cmp	r3, #4
 800a18e:	d174      	bne.n	800a27a <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d137      	bne.n	800a206 <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800a196:	f7fe f97d 	bl	8008494 <HAL_GetTick>
 800a19a:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a19c:	e011      	b.n	800a1c2 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a19e:	f7fe f979 	bl	8008494 <HAL_GetTick>
 800a1a2:	4602      	mov	r2, r0
 800a1a4:	69fb      	ldr	r3, [r7, #28]
 800a1a6:	1ad3      	subs	r3, r2, r3
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d90a      	bls.n	800a1c2 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	691b      	ldr	r3, [r3, #16]
 800a1b0:	f043 0208 	orr.w	r2, r3, #8
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	2203      	movs	r2, #3
 800a1bc:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a1be:	2303      	movs	r3, #3
 800a1c0:	e171      	b.n	800a4a6 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d1e6      	bne.n	800a19e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 800a1d0:	2001      	movs	r0, #1
 800a1d2:	f7fe f96b 	bl	80084ac <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	68ba      	ldr	r2, [r7, #8]
 800a1dc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a1de:	641a      	str	r2, [r3, #64]	; 0x40
 800a1e0:	e01e      	b.n	800a220 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800a1e2:	f7fe f957 	bl	8008494 <HAL_GetTick>
 800a1e6:	4602      	mov	r2, r0
 800a1e8:	69fb      	ldr	r3, [r7, #28]
 800a1ea:	1ad3      	subs	r3, r2, r3
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d90a      	bls.n	800a206 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	691b      	ldr	r3, [r3, #16]
 800a1f4:	f043 0208 	orr.w	r2, r3, #8
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2203      	movs	r2, #3
 800a200:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800a202:	2303      	movs	r3, #3
 800a204:	e14f      	b.n	800a4a6 <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	dbe8      	blt.n	800a1e2 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 800a210:	2001      	movs	r0, #1
 800a212:	f7fe f94b 	bl	80084ac <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	68ba      	ldr	r2, [r7, #8]
 800a21c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a21e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	f003 0310 	and.w	r3, r3, #16
 800a22c:	f240 31ff 	movw	r1, #1023	; 0x3ff
 800a230:	fa01 f303 	lsl.w	r3, r1, r3
 800a234:	43db      	mvns	r3, r3
 800a236:	ea02 0103 	and.w	r1, r2, r3
 800a23a:	68bb      	ldr	r3, [r7, #8]
 800a23c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	f003 0310 	and.w	r3, r3, #16
 800a244:	409a      	lsls	r2, r3
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	430a      	orrs	r2, r1
 800a24c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	f003 0310 	and.w	r3, r3, #16
 800a25a:	21ff      	movs	r1, #255	; 0xff
 800a25c:	fa01 f303 	lsl.w	r3, r1, r3
 800a260:	43db      	mvns	r3, r3
 800a262:	ea02 0103 	and.w	r1, r2, r3
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	f003 0310 	and.w	r3, r3, #16
 800a270:	409a      	lsls	r2, r3
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	430a      	orrs	r2, r1
 800a278:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	69db      	ldr	r3, [r3, #28]
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d11d      	bne.n	800a2be <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a288:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f003 0310 	and.w	r3, r3, #16
 800a290:	221f      	movs	r2, #31
 800a292:	fa02 f303 	lsl.w	r3, r2, r3
 800a296:	43db      	mvns	r3, r3
 800a298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a29a:	4013      	ands	r3, r2
 800a29c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	6a1b      	ldr	r3, [r3, #32]
 800a2a2:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	f003 0310 	and.w	r3, r3, #16
 800a2aa:	69ba      	ldr	r2, [r7, #24]
 800a2ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a2b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2b2:	4313      	orrs	r3, r2
 800a2b4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2bc:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a2c4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f003 0310 	and.w	r3, r3, #16
 800a2cc:	2207      	movs	r2, #7
 800a2ce:	fa02 f303 	lsl.w	r3, r2, r3
 800a2d2:	43db      	mvns	r3, r3
 800a2d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a2d6:	4013      	ands	r3, r2
 800a2d8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	699b      	ldr	r3, [r3, #24]
 800a2de:	f003 0301 	and.w	r3, r3, #1
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d002      	beq.n	800a2ec <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800a2e6:	2300      	movs	r3, #0
 800a2e8:	623b      	str	r3, [r7, #32]
 800a2ea:	e011      	b.n	800a310 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	699b      	ldr	r3, [r3, #24]
 800a2f0:	f003 0302 	and.w	r3, r3, #2
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d002      	beq.n	800a2fe <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	623b      	str	r3, [r7, #32]
 800a2fc:	e008      	b.n	800a310 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800a2fe:	68bb      	ldr	r3, [r7, #8]
 800a300:	695b      	ldr	r3, [r3, #20]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d102      	bne.n	800a30c <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800a306:	2301      	movs	r3, #1
 800a308:	623b      	str	r3, [r7, #32]
 800a30a:	e001      	b.n	800a310 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800a30c:	2300      	movs	r3, #0
 800a30e:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800a310:	68bb      	ldr	r3, [r7, #8]
 800a312:	689a      	ldr	r2, [r3, #8]
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	695b      	ldr	r3, [r3, #20]
 800a318:	4313      	orrs	r3, r2
 800a31a:	6a3a      	ldr	r2, [r7, #32]
 800a31c:	4313      	orrs	r3, r2
 800a31e:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f003 0310 	and.w	r3, r3, #16
 800a326:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a32a:	fa02 f303 	lsl.w	r3, r2, r3
 800a32e:	43db      	mvns	r3, r3
 800a330:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a332:	4013      	ands	r3, r2
 800a334:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800a336:	68bb      	ldr	r3, [r7, #8]
 800a338:	791b      	ldrb	r3, [r3, #4]
 800a33a:	2b01      	cmp	r3, #1
 800a33c:	d102      	bne.n	800a344 <HAL_DAC_ConfigChannel+0x1e4>
 800a33e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a342:	e000      	b.n	800a346 <HAL_DAC_ConfigChannel+0x1e6>
 800a344:	2300      	movs	r3, #0
 800a346:	69ba      	ldr	r2, [r7, #24]
 800a348:	4313      	orrs	r3, r2
 800a34a:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	f003 0310 	and.w	r3, r3, #16
 800a352:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a356:	fa02 f303 	lsl.w	r3, r2, r3
 800a35a:	43db      	mvns	r3, r3
 800a35c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a35e:	4013      	ands	r3, r2
 800a360:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	795b      	ldrb	r3, [r3, #5]
 800a366:	2b01      	cmp	r3, #1
 800a368:	d102      	bne.n	800a370 <HAL_DAC_ConfigChannel+0x210>
 800a36a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a36e:	e000      	b.n	800a372 <HAL_DAC_ConfigChannel+0x212>
 800a370:	2300      	movs	r3, #0
 800a372:	69ba      	ldr	r2, [r7, #24]
 800a374:	4313      	orrs	r3, r2
 800a376:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 800a378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a37a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800a37e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800a380:	68bb      	ldr	r3, [r7, #8]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	2b02      	cmp	r3, #2
 800a386:	d114      	bne.n	800a3b2 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800a388:	f001 fae0 	bl	800b94c <HAL_RCC_GetHCLKFreq>
 800a38c:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 800a38e:	697b      	ldr	r3, [r7, #20]
 800a390:	4a47      	ldr	r2, [pc, #284]	; (800a4b0 <HAL_DAC_ConfigChannel+0x350>)
 800a392:	4293      	cmp	r3, r2
 800a394:	d904      	bls.n	800a3a0 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800a396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a398:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a39c:	627b      	str	r3, [r7, #36]	; 0x24
 800a39e:	e00d      	b.n	800a3bc <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	4a44      	ldr	r2, [pc, #272]	; (800a4b4 <HAL_DAC_ConfigChannel+0x354>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d909      	bls.n	800a3bc <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800a3a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a3ae:	627b      	str	r3, [r7, #36]	; 0x24
 800a3b0:	e004      	b.n	800a3bc <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	f003 0310 	and.w	r3, r3, #16
 800a3c2:	69ba      	ldr	r2, [r7, #24]
 800a3c4:	fa02 f303 	lsl.w	r3, r2, r3
 800a3c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3ca:	4313      	orrs	r3, r2
 800a3cc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	6819      	ldr	r1, [r3, #0]
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f003 0310 	and.w	r3, r3, #16
 800a3e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800a3e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ea:	43da      	mvns	r2, r3
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	400a      	ands	r2, r1
 800a3f2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	681b      	ldr	r3, [r3, #0]
 800a3f8:	681b      	ldr	r3, [r3, #0]
 800a3fa:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	f003 0310 	and.w	r3, r3, #16
 800a402:	f640 72fe 	movw	r2, #4094	; 0xffe
 800a406:	fa02 f303 	lsl.w	r3, r2, r3
 800a40a:	43db      	mvns	r3, r3
 800a40c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a40e:	4013      	ands	r3, r2
 800a410:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	68db      	ldr	r3, [r3, #12]
 800a416:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	f003 0310 	and.w	r3, r3, #16
 800a41e:	69ba      	ldr	r2, [r7, #24]
 800a420:	fa02 f303 	lsl.w	r3, r2, r3
 800a424:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a426:	4313      	orrs	r3, r2
 800a428:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a430:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	6819      	ldr	r1, [r3, #0]
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f003 0310 	and.w	r3, r3, #16
 800a43e:	22c0      	movs	r2, #192	; 0xc0
 800a440:	fa02 f303 	lsl.w	r3, r2, r3
 800a444:	43da      	mvns	r2, r3
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	400a      	ands	r2, r1
 800a44c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	089b      	lsrs	r3, r3, #2
 800a454:	f003 030f 	and.w	r3, r3, #15
 800a458:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 800a45a:	68bb      	ldr	r3, [r7, #8]
 800a45c:	691b      	ldr	r3, [r3, #16]
 800a45e:	089b      	lsrs	r3, r3, #2
 800a460:	021b      	lsls	r3, r3, #8
 800a462:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a466:	69ba      	ldr	r2, [r7, #24]
 800a468:	4313      	orrs	r3, r2
 800a46a:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	f003 0310 	and.w	r3, r3, #16
 800a478:	f640 710f 	movw	r1, #3855	; 0xf0f
 800a47c:	fa01 f303 	lsl.w	r3, r1, r3
 800a480:	43db      	mvns	r3, r3
 800a482:	ea02 0103 	and.w	r1, r2, r3
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	f003 0310 	and.w	r3, r3, #16
 800a48c:	69ba      	ldr	r2, [r7, #24]
 800a48e:	409a      	lsls	r2, r3
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	430a      	orrs	r2, r1
 800a496:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2201      	movs	r2, #1
 800a49c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800a4a4:	2300      	movs	r3, #0
}
 800a4a6:	4618      	mov	r0, r3
 800a4a8:	3728      	adds	r7, #40	; 0x28
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	bd80      	pop	{r7, pc}
 800a4ae:	bf00      	nop
 800a4b0:	09896800 	.word	0x09896800
 800a4b4:	04c4b400 	.word	0x04c4b400

0800a4b8 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a4b8:	b580      	push	{r7, lr}
 800a4ba:	b084      	sub	sp, #16
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4c4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800a4c6:	68f8      	ldr	r0, [r7, #12]
 800a4c8:	f7ff fe16 	bl	800a0f8 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	2201      	movs	r2, #1
 800a4d0:	711a      	strb	r2, [r3, #4]
}
 800a4d2:	bf00      	nop
 800a4d4:	3710      	adds	r7, #16
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	bd80      	pop	{r7, pc}

0800a4da <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800a4da:	b580      	push	{r7, lr}
 800a4dc:	b084      	sub	sp, #16
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4e6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800a4e8:	68f8      	ldr	r0, [r7, #12]
 800a4ea:	f7ff fe0f 	bl	800a10c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a4ee:	bf00      	nop
 800a4f0:	3710      	adds	r7, #16
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	bd80      	pop	{r7, pc}

0800a4f6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800a4f6:	b580      	push	{r7, lr}
 800a4f8:	b084      	sub	sp, #16
 800a4fa:	af00      	add	r7, sp, #0
 800a4fc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a502:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	691b      	ldr	r3, [r3, #16]
 800a508:	f043 0204 	orr.w	r2, r3, #4
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800a510:	68f8      	ldr	r0, [r7, #12]
 800a512:	f7ff fe05 	bl	800a120 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2201      	movs	r2, #1
 800a51a:	711a      	strb	r2, [r3, #4]
}
 800a51c:	bf00      	nop
 800a51e:	3710      	adds	r7, #16
 800a520:	46bd      	mov	sp, r7
 800a522:	bd80      	pop	{r7, pc}

0800a524 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a524:	b480      	push	{r7}
 800a526:	b083      	sub	sp, #12
 800a528:	af00      	add	r7, sp, #0
 800a52a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800a52c:	bf00      	nop
 800a52e:	370c      	adds	r7, #12
 800a530:	46bd      	mov	sp, r7
 800a532:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a536:	4770      	bx	lr

0800a538 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a538:	b480      	push	{r7}
 800a53a:	b083      	sub	sp, #12
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800a540:	bf00      	nop
 800a542:	370c      	adds	r7, #12
 800a544:	46bd      	mov	sp, r7
 800a546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54a:	4770      	bx	lr

0800a54c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800a54c:	b480      	push	{r7}
 800a54e:	b083      	sub	sp, #12
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800a554:	bf00      	nop
 800a556:	370c      	adds	r7, #12
 800a558:	46bd      	mov	sp, r7
 800a55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55e:	4770      	bx	lr

0800a560 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a560:	b580      	push	{r7, lr}
 800a562:	b084      	sub	sp, #16
 800a564:	af00      	add	r7, sp, #0
 800a566:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a56c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800a56e:	68f8      	ldr	r0, [r7, #12]
 800a570:	f7ff ffd8 	bl	800a524 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2201      	movs	r2, #1
 800a578:	711a      	strb	r2, [r3, #4]
}
 800a57a:	bf00      	nop
 800a57c:	3710      	adds	r7, #16
 800a57e:	46bd      	mov	sp, r7
 800a580:	bd80      	pop	{r7, pc}

0800a582 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800a582:	b580      	push	{r7, lr}
 800a584:	b084      	sub	sp, #16
 800a586:	af00      	add	r7, sp, #0
 800a588:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a58e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800a590:	68f8      	ldr	r0, [r7, #12]
 800a592:	f7ff ffd1 	bl	800a538 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800a596:	bf00      	nop
 800a598:	3710      	adds	r7, #16
 800a59a:	46bd      	mov	sp, r7
 800a59c:	bd80      	pop	{r7, pc}

0800a59e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800a59e:	b580      	push	{r7, lr}
 800a5a0:	b084      	sub	sp, #16
 800a5a2:	af00      	add	r7, sp, #0
 800a5a4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a5aa:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	691b      	ldr	r3, [r3, #16]
 800a5b0:	f043 0204 	orr.w	r2, r3, #4
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800a5b8:	68f8      	ldr	r0, [r7, #12]
 800a5ba:	f7ff ffc7 	bl	800a54c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	2201      	movs	r2, #1
 800a5c2:	711a      	strb	r2, [r3, #4]
}
 800a5c4:	bf00      	nop
 800a5c6:	3710      	adds	r7, #16
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	bd80      	pop	{r7, pc}

0800a5cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b084      	sub	sp, #16
 800a5d0:	af00      	add	r7, sp, #0
 800a5d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d101      	bne.n	800a5de <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800a5da:	2301      	movs	r3, #1
 800a5dc:	e08d      	b.n	800a6fa <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	461a      	mov	r2, r3
 800a5e4:	4b47      	ldr	r3, [pc, #284]	; (800a704 <HAL_DMA_Init+0x138>)
 800a5e6:	429a      	cmp	r2, r3
 800a5e8:	d80f      	bhi.n	800a60a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800a5ea:	687b      	ldr	r3, [r7, #4]
 800a5ec:	681b      	ldr	r3, [r3, #0]
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	4b45      	ldr	r3, [pc, #276]	; (800a708 <HAL_DMA_Init+0x13c>)
 800a5f2:	4413      	add	r3, r2
 800a5f4:	4a45      	ldr	r2, [pc, #276]	; (800a70c <HAL_DMA_Init+0x140>)
 800a5f6:	fba2 2303 	umull	r2, r3, r2, r3
 800a5fa:	091b      	lsrs	r3, r3, #4
 800a5fc:	009a      	lsls	r2, r3, #2
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	4a42      	ldr	r2, [pc, #264]	; (800a710 <HAL_DMA_Init+0x144>)
 800a606:	641a      	str	r2, [r3, #64]	; 0x40
 800a608:	e00e      	b.n	800a628 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	461a      	mov	r2, r3
 800a610:	4b40      	ldr	r3, [pc, #256]	; (800a714 <HAL_DMA_Init+0x148>)
 800a612:	4413      	add	r3, r2
 800a614:	4a3d      	ldr	r2, [pc, #244]	; (800a70c <HAL_DMA_Init+0x140>)
 800a616:	fba2 2303 	umull	r2, r3, r2, r3
 800a61a:	091b      	lsrs	r3, r3, #4
 800a61c:	009a      	lsls	r2, r3, #2
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	4a3c      	ldr	r2, [pc, #240]	; (800a718 <HAL_DMA_Init+0x14c>)
 800a626:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2202      	movs	r2, #2
 800a62c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 800a63e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a642:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800a64c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	691b      	ldr	r3, [r3, #16]
 800a652:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800a658:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	699b      	ldr	r3, [r3, #24]
 800a65e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800a664:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6a1b      	ldr	r3, [r3, #32]
 800a66a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800a66c:	68fa      	ldr	r2, [r7, #12]
 800a66e:	4313      	orrs	r3, r2
 800a670:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	68fa      	ldr	r2, [r7, #12]
 800a678:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f000 fa10 	bl	800aaa0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	689b      	ldr	r3, [r3, #8]
 800a684:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a688:	d102      	bne.n	800a690 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	2200      	movs	r2, #0
 800a68e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	685a      	ldr	r2, [r3, #4]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a698:	b2d2      	uxtb	r2, r2
 800a69a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a6a4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d010      	beq.n	800a6d0 <HAL_DMA_Init+0x104>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	685b      	ldr	r3, [r3, #4]
 800a6b2:	2b04      	cmp	r3, #4
 800a6b4:	d80c      	bhi.n	800a6d0 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 fa30 	bl	800ab1c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a6cc:	605a      	str	r2, [r3, #4]
 800a6ce:	e008      	b.n	800a6e2 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2200      	movs	r2, #0
 800a6d4:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2200      	movs	r2, #0
 800a6f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800a6f8:	2300      	movs	r3, #0
}
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	3710      	adds	r7, #16
 800a6fe:	46bd      	mov	sp, r7
 800a700:	bd80      	pop	{r7, pc}
 800a702:	bf00      	nop
 800a704:	40020407 	.word	0x40020407
 800a708:	bffdfff8 	.word	0xbffdfff8
 800a70c:	cccccccd 	.word	0xcccccccd
 800a710:	40020000 	.word	0x40020000
 800a714:	bffdfbf8 	.word	0xbffdfbf8
 800a718:	40020400 	.word	0x40020400

0800a71c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b086      	sub	sp, #24
 800a720:	af00      	add	r7, sp, #0
 800a722:	60f8      	str	r0, [r7, #12]
 800a724:	60b9      	str	r1, [r7, #8]
 800a726:	607a      	str	r2, [r7, #4]
 800a728:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a72a:	2300      	movs	r3, #0
 800a72c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800a734:	2b01      	cmp	r3, #1
 800a736:	d101      	bne.n	800a73c <HAL_DMA_Start_IT+0x20>
 800a738:	2302      	movs	r3, #2
 800a73a:	e066      	b.n	800a80a <HAL_DMA_Start_IT+0xee>
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2201      	movs	r2, #1
 800a740:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800a744:	68fb      	ldr	r3, [r7, #12]
 800a746:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a74a:	b2db      	uxtb	r3, r3
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d155      	bne.n	800a7fc <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2202      	movs	r2, #2
 800a754:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2200      	movs	r2, #0
 800a75c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	681a      	ldr	r2, [r3, #0]
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f022 0201 	bic.w	r2, r2, #1
 800a76c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	687a      	ldr	r2, [r7, #4]
 800a772:	68b9      	ldr	r1, [r7, #8]
 800a774:	68f8      	ldr	r0, [r7, #12]
 800a776:	f000 f954 	bl	800aa22 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d008      	beq.n	800a794 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	681a      	ldr	r2, [r3, #0]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f042 020e 	orr.w	r2, r2, #14
 800a790:	601a      	str	r2, [r3, #0]
 800a792:	e00f      	b.n	800a7b4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	681a      	ldr	r2, [r3, #0]
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f022 0204 	bic.w	r2, r2, #4
 800a7a2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	681a      	ldr	r2, [r3, #0]
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	f042 020a 	orr.w	r2, r2, #10
 800a7b2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d007      	beq.n	800a7d2 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7c6:	681a      	ldr	r2, [r3, #0]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7d0:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d007      	beq.n	800a7ea <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7de:	681a      	ldr	r2, [r3, #0]
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a7e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7e8:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f042 0201 	orr.w	r2, r2, #1
 800a7f8:	601a      	str	r2, [r3, #0]
 800a7fa:	e005      	b.n	800a808 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2200      	movs	r2, #0
 800a800:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800a804:	2302      	movs	r3, #2
 800a806:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800a808:	7dfb      	ldrb	r3, [r7, #23]
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3718      	adds	r7, #24
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}

0800a812 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a812:	b480      	push	{r7}
 800a814:	b085      	sub	sp, #20
 800a816:	af00      	add	r7, sp, #0
 800a818:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a81a:	2300      	movs	r3, #0
 800a81c:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800a824:	b2db      	uxtb	r3, r3
 800a826:	2b02      	cmp	r3, #2
 800a828:	d005      	beq.n	800a836 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2204      	movs	r2, #4
 800a82e:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800a830:	2301      	movs	r3, #1
 800a832:	73fb      	strb	r3, [r7, #15]
 800a834:	e037      	b.n	800a8a6 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f022 020e 	bic.w	r2, r2, #14
 800a844:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a850:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a854:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	681a      	ldr	r2, [r3, #0]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	f022 0201 	bic.w	r2, r2, #1
 800a864:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a86a:	f003 021f 	and.w	r2, r3, #31
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a872:	2101      	movs	r1, #1
 800a874:	fa01 f202 	lsl.w	r2, r1, r2
 800a878:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a87e:	687a      	ldr	r2, [r7, #4]
 800a880:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800a882:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800a884:	687b      	ldr	r3, [r7, #4]
 800a886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d00c      	beq.n	800a8a6 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a890:	681a      	ldr	r2, [r3, #0]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a896:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a89a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a8a0:	687a      	ldr	r2, [r7, #4]
 800a8a2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800a8a4:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2201      	movs	r2, #1
 800a8aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800a8b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8b8:	4618      	mov	r0, r3
 800a8ba:	3714      	adds	r7, #20
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b084      	sub	sp, #16
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a8e0:	f003 031f 	and.w	r3, r3, #31
 800a8e4:	2204      	movs	r2, #4
 800a8e6:	409a      	lsls	r2, r3
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	4013      	ands	r3, r2
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d026      	beq.n	800a93e <HAL_DMA_IRQHandler+0x7a>
 800a8f0:	68bb      	ldr	r3, [r7, #8]
 800a8f2:	f003 0304 	and.w	r3, r3, #4
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	d021      	beq.n	800a93e <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	f003 0320 	and.w	r3, r3, #32
 800a904:	2b00      	cmp	r3, #0
 800a906:	d107      	bne.n	800a918 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	681a      	ldr	r2, [r3, #0]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	f022 0204 	bic.w	r2, r2, #4
 800a916:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a91c:	f003 021f 	and.w	r2, r3, #31
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a924:	2104      	movs	r1, #4
 800a926:	fa01 f202 	lsl.w	r2, r1, r2
 800a92a:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a930:	2b00      	cmp	r3, #0
 800a932:	d071      	beq.n	800aa18 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800a93c:	e06c      	b.n	800aa18 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a942:	f003 031f 	and.w	r3, r3, #31
 800a946:	2202      	movs	r2, #2
 800a948:	409a      	lsls	r2, r3
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	4013      	ands	r3, r2
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d02e      	beq.n	800a9b0 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 800a952:	68bb      	ldr	r3, [r7, #8]
 800a954:	f003 0302 	and.w	r3, r3, #2
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d029      	beq.n	800a9b0 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	f003 0320 	and.w	r3, r3, #32
 800a966:	2b00      	cmp	r3, #0
 800a968:	d10b      	bne.n	800a982 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	681a      	ldr	r2, [r3, #0]
 800a970:	687b      	ldr	r3, [r7, #4]
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f022 020a 	bic.w	r2, r2, #10
 800a978:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	2201      	movs	r2, #1
 800a97e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a986:	f003 021f 	and.w	r2, r3, #31
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a98e:	2102      	movs	r1, #2
 800a990:	fa01 f202 	lsl.w	r2, r1, r2
 800a994:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	2200      	movs	r2, #0
 800a99a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d038      	beq.n	800aa18 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9aa:	6878      	ldr	r0, [r7, #4]
 800a9ac:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800a9ae:	e033      	b.n	800aa18 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9b4:	f003 031f 	and.w	r3, r3, #31
 800a9b8:	2208      	movs	r2, #8
 800a9ba:	409a      	lsls	r2, r3
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	4013      	ands	r3, r2
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	d02a      	beq.n	800aa1a <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	f003 0308 	and.w	r3, r3, #8
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d025      	beq.n	800aa1a <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	f022 020e 	bic.w	r2, r2, #14
 800a9dc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9e2:	f003 021f 	and.w	r2, r3, #31
 800a9e6:	687b      	ldr	r3, [r7, #4]
 800a9e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ea:	2101      	movs	r1, #1
 800a9ec:	fa01 f202 	lsl.w	r2, r1, r2
 800a9f0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	2201      	movs	r2, #1
 800a9f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2200      	movs	r2, #0
 800aa04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d004      	beq.n	800aa1a <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800aa18:	bf00      	nop
 800aa1a:	bf00      	nop
}
 800aa1c:	3710      	adds	r7, #16
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	bd80      	pop	{r7, pc}

0800aa22 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800aa22:	b480      	push	{r7}
 800aa24:	b085      	sub	sp, #20
 800aa26:	af00      	add	r7, sp, #0
 800aa28:	60f8      	str	r0, [r7, #12]
 800aa2a:	60b9      	str	r1, [r7, #8]
 800aa2c:	607a      	str	r2, [r7, #4]
 800aa2e:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa34:	68fa      	ldr	r2, [r7, #12]
 800aa36:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800aa38:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa3e:	2b00      	cmp	r3, #0
 800aa40:	d004      	beq.n	800aa4c <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa46:	68fa      	ldr	r2, [r7, #12]
 800aa48:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800aa4a:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa50:	f003 021f 	and.w	r2, r3, #31
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa58:	2101      	movs	r1, #1
 800aa5a:	fa01 f202 	lsl.w	r2, r1, r2
 800aa5e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	683a      	ldr	r2, [r7, #0]
 800aa66:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	689b      	ldr	r3, [r3, #8]
 800aa6c:	2b10      	cmp	r3, #16
 800aa6e:	d108      	bne.n	800aa82 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800aa80:	e007      	b.n	800aa92 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	68ba      	ldr	r2, [r7, #8]
 800aa88:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	687a      	ldr	r2, [r7, #4]
 800aa90:	60da      	str	r2, [r3, #12]
}
 800aa92:	bf00      	nop
 800aa94:	3714      	adds	r7, #20
 800aa96:	46bd      	mov	sp, r7
 800aa98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9c:	4770      	bx	lr
	...

0800aaa0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800aaa0:	b480      	push	{r7}
 800aaa2:	b087      	sub	sp, #28
 800aaa4:	af00      	add	r7, sp, #0
 800aaa6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	461a      	mov	r2, r3
 800aaae:	4b16      	ldr	r3, [pc, #88]	; (800ab08 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800aab0:	429a      	cmp	r2, r3
 800aab2:	d802      	bhi.n	800aaba <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800aab4:	4b15      	ldr	r3, [pc, #84]	; (800ab0c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800aab6:	617b      	str	r3, [r7, #20]
 800aab8:	e001      	b.n	800aabe <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800aaba:	4b15      	ldr	r3, [pc, #84]	; (800ab10 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800aabc:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	b2db      	uxtb	r3, r3
 800aac8:	3b08      	subs	r3, #8
 800aaca:	4a12      	ldr	r2, [pc, #72]	; (800ab14 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800aacc:	fba2 2303 	umull	r2, r3, r2, r3
 800aad0:	091b      	lsrs	r3, r3, #4
 800aad2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aad8:	089b      	lsrs	r3, r3, #2
 800aada:	009a      	lsls	r2, r3, #2
 800aadc:	693b      	ldr	r3, [r7, #16]
 800aade:	4413      	add	r3, r2
 800aae0:	461a      	mov	r2, r3
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	4a0b      	ldr	r2, [pc, #44]	; (800ab18 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800aaea:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	f003 031f 	and.w	r3, r3, #31
 800aaf2:	2201      	movs	r2, #1
 800aaf4:	409a      	lsls	r2, r3
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	651a      	str	r2, [r3, #80]	; 0x50
}
 800aafa:	bf00      	nop
 800aafc:	371c      	adds	r7, #28
 800aafe:	46bd      	mov	sp, r7
 800ab00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab04:	4770      	bx	lr
 800ab06:	bf00      	nop
 800ab08:	40020407 	.word	0x40020407
 800ab0c:	40020800 	.word	0x40020800
 800ab10:	40020820 	.word	0x40020820
 800ab14:	cccccccd 	.word	0xcccccccd
 800ab18:	40020880 	.word	0x40020880

0800ab1c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800ab1c:	b480      	push	{r7}
 800ab1e:	b085      	sub	sp, #20
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	4b0b      	ldr	r3, [pc, #44]	; (800ab5c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800ab30:	4413      	add	r3, r2
 800ab32:	009b      	lsls	r3, r3, #2
 800ab34:	461a      	mov	r2, r3
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4a08      	ldr	r2, [pc, #32]	; (800ab60 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800ab3e:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	3b01      	subs	r3, #1
 800ab44:	f003 031f 	and.w	r3, r3, #31
 800ab48:	2201      	movs	r2, #1
 800ab4a:	409a      	lsls	r2, r3
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800ab50:	bf00      	nop
 800ab52:	3714      	adds	r7, #20
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr
 800ab5c:	1000823f 	.word	0x1000823f
 800ab60:	40020940 	.word	0x40020940

0800ab64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ab64:	b480      	push	{r7}
 800ab66:	b087      	sub	sp, #28
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
 800ab6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800ab6e:	2300      	movs	r3, #0
 800ab70:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800ab72:	e15a      	b.n	800ae2a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	681a      	ldr	r2, [r3, #0]
 800ab78:	2101      	movs	r1, #1
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	fa01 f303 	lsl.w	r3, r1, r3
 800ab80:	4013      	ands	r3, r2
 800ab82:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	f000 814c 	beq.w	800ae24 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800ab8c:	683b      	ldr	r3, [r7, #0]
 800ab8e:	685b      	ldr	r3, [r3, #4]
 800ab90:	2b01      	cmp	r3, #1
 800ab92:	d00b      	beq.n	800abac <HAL_GPIO_Init+0x48>
 800ab94:	683b      	ldr	r3, [r7, #0]
 800ab96:	685b      	ldr	r3, [r3, #4]
 800ab98:	2b02      	cmp	r3, #2
 800ab9a:	d007      	beq.n	800abac <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800aba0:	2b11      	cmp	r3, #17
 800aba2:	d003      	beq.n	800abac <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	2b12      	cmp	r3, #18
 800abaa:	d130      	bne.n	800ac0e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800abb2:	697b      	ldr	r3, [r7, #20]
 800abb4:	005b      	lsls	r3, r3, #1
 800abb6:	2203      	movs	r2, #3
 800abb8:	fa02 f303 	lsl.w	r3, r2, r3
 800abbc:	43db      	mvns	r3, r3
 800abbe:	693a      	ldr	r2, [r7, #16]
 800abc0:	4013      	ands	r3, r2
 800abc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800abc4:	683b      	ldr	r3, [r7, #0]
 800abc6:	68da      	ldr	r2, [r3, #12]
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	005b      	lsls	r3, r3, #1
 800abcc:	fa02 f303 	lsl.w	r3, r2, r3
 800abd0:	693a      	ldr	r2, [r7, #16]
 800abd2:	4313      	orrs	r3, r2
 800abd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	693a      	ldr	r2, [r7, #16]
 800abda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	685b      	ldr	r3, [r3, #4]
 800abe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800abe2:	2201      	movs	r2, #1
 800abe4:	697b      	ldr	r3, [r7, #20]
 800abe6:	fa02 f303 	lsl.w	r3, r2, r3
 800abea:	43db      	mvns	r3, r3
 800abec:	693a      	ldr	r2, [r7, #16]
 800abee:	4013      	ands	r3, r2
 800abf0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	091b      	lsrs	r3, r3, #4
 800abf8:	f003 0201 	and.w	r2, r3, #1
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	fa02 f303 	lsl.w	r3, r2, r3
 800ac02:	693a      	ldr	r2, [r7, #16]
 800ac04:	4313      	orrs	r3, r2
 800ac06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	693a      	ldr	r2, [r7, #16]
 800ac0c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	005b      	lsls	r3, r3, #1
 800ac18:	2203      	movs	r2, #3
 800ac1a:	fa02 f303 	lsl.w	r3, r2, r3
 800ac1e:	43db      	mvns	r3, r3
 800ac20:	693a      	ldr	r2, [r7, #16]
 800ac22:	4013      	ands	r3, r2
 800ac24:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800ac26:	683b      	ldr	r3, [r7, #0]
 800ac28:	689a      	ldr	r2, [r3, #8]
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	005b      	lsls	r3, r3, #1
 800ac2e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac32:	693a      	ldr	r2, [r7, #16]
 800ac34:	4313      	orrs	r3, r2
 800ac36:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	693a      	ldr	r2, [r7, #16]
 800ac3c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	2b02      	cmp	r3, #2
 800ac44:	d003      	beq.n	800ac4e <HAL_GPIO_Init+0xea>
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	685b      	ldr	r3, [r3, #4]
 800ac4a:	2b12      	cmp	r3, #18
 800ac4c:	d123      	bne.n	800ac96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ac4e:	697b      	ldr	r3, [r7, #20]
 800ac50:	08da      	lsrs	r2, r3, #3
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	3208      	adds	r2, #8
 800ac56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800ac5c:	697b      	ldr	r3, [r7, #20]
 800ac5e:	f003 0307 	and.w	r3, r3, #7
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	220f      	movs	r2, #15
 800ac66:	fa02 f303 	lsl.w	r3, r2, r3
 800ac6a:	43db      	mvns	r3, r3
 800ac6c:	693a      	ldr	r2, [r7, #16]
 800ac6e:	4013      	ands	r3, r2
 800ac70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	691a      	ldr	r2, [r3, #16]
 800ac76:	697b      	ldr	r3, [r7, #20]
 800ac78:	f003 0307 	and.w	r3, r3, #7
 800ac7c:	009b      	lsls	r3, r3, #2
 800ac7e:	fa02 f303 	lsl.w	r3, r2, r3
 800ac82:	693a      	ldr	r2, [r7, #16]
 800ac84:	4313      	orrs	r3, r2
 800ac86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	08da      	lsrs	r2, r3, #3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	3208      	adds	r2, #8
 800ac90:	6939      	ldr	r1, [r7, #16]
 800ac92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800ac9c:	697b      	ldr	r3, [r7, #20]
 800ac9e:	005b      	lsls	r3, r3, #1
 800aca0:	2203      	movs	r2, #3
 800aca2:	fa02 f303 	lsl.w	r3, r2, r3
 800aca6:	43db      	mvns	r3, r3
 800aca8:	693a      	ldr	r2, [r7, #16]
 800acaa:	4013      	ands	r3, r2
 800acac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800acae:	683b      	ldr	r3, [r7, #0]
 800acb0:	685b      	ldr	r3, [r3, #4]
 800acb2:	f003 0203 	and.w	r2, r3, #3
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	005b      	lsls	r3, r3, #1
 800acba:	fa02 f303 	lsl.w	r3, r2, r3
 800acbe:	693a      	ldr	r2, [r7, #16]
 800acc0:	4313      	orrs	r3, r2
 800acc2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	693a      	ldr	r2, [r7, #16]
 800acc8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800acca:	683b      	ldr	r3, [r7, #0]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	f000 80a6 	beq.w	800ae24 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800acd8:	4b5b      	ldr	r3, [pc, #364]	; (800ae48 <HAL_GPIO_Init+0x2e4>)
 800acda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acdc:	4a5a      	ldr	r2, [pc, #360]	; (800ae48 <HAL_GPIO_Init+0x2e4>)
 800acde:	f043 0301 	orr.w	r3, r3, #1
 800ace2:	6613      	str	r3, [r2, #96]	; 0x60
 800ace4:	4b58      	ldr	r3, [pc, #352]	; (800ae48 <HAL_GPIO_Init+0x2e4>)
 800ace6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ace8:	f003 0301 	and.w	r3, r3, #1
 800acec:	60bb      	str	r3, [r7, #8]
 800acee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800acf0:	4a56      	ldr	r2, [pc, #344]	; (800ae4c <HAL_GPIO_Init+0x2e8>)
 800acf2:	697b      	ldr	r3, [r7, #20]
 800acf4:	089b      	lsrs	r3, r3, #2
 800acf6:	3302      	adds	r3, #2
 800acf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800acfc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800acfe:	697b      	ldr	r3, [r7, #20]
 800ad00:	f003 0303 	and.w	r3, r3, #3
 800ad04:	009b      	lsls	r3, r3, #2
 800ad06:	220f      	movs	r2, #15
 800ad08:	fa02 f303 	lsl.w	r3, r2, r3
 800ad0c:	43db      	mvns	r3, r3
 800ad0e:	693a      	ldr	r2, [r7, #16]
 800ad10:	4013      	ands	r3, r2
 800ad12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800ad1a:	d01f      	beq.n	800ad5c <HAL_GPIO_Init+0x1f8>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	4a4c      	ldr	r2, [pc, #304]	; (800ae50 <HAL_GPIO_Init+0x2ec>)
 800ad20:	4293      	cmp	r3, r2
 800ad22:	d019      	beq.n	800ad58 <HAL_GPIO_Init+0x1f4>
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	4a4b      	ldr	r2, [pc, #300]	; (800ae54 <HAL_GPIO_Init+0x2f0>)
 800ad28:	4293      	cmp	r3, r2
 800ad2a:	d013      	beq.n	800ad54 <HAL_GPIO_Init+0x1f0>
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4a4a      	ldr	r2, [pc, #296]	; (800ae58 <HAL_GPIO_Init+0x2f4>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d00d      	beq.n	800ad50 <HAL_GPIO_Init+0x1ec>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a49      	ldr	r2, [pc, #292]	; (800ae5c <HAL_GPIO_Init+0x2f8>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d007      	beq.n	800ad4c <HAL_GPIO_Init+0x1e8>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4a48      	ldr	r2, [pc, #288]	; (800ae60 <HAL_GPIO_Init+0x2fc>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d101      	bne.n	800ad48 <HAL_GPIO_Init+0x1e4>
 800ad44:	2305      	movs	r3, #5
 800ad46:	e00a      	b.n	800ad5e <HAL_GPIO_Init+0x1fa>
 800ad48:	2306      	movs	r3, #6
 800ad4a:	e008      	b.n	800ad5e <HAL_GPIO_Init+0x1fa>
 800ad4c:	2304      	movs	r3, #4
 800ad4e:	e006      	b.n	800ad5e <HAL_GPIO_Init+0x1fa>
 800ad50:	2303      	movs	r3, #3
 800ad52:	e004      	b.n	800ad5e <HAL_GPIO_Init+0x1fa>
 800ad54:	2302      	movs	r3, #2
 800ad56:	e002      	b.n	800ad5e <HAL_GPIO_Init+0x1fa>
 800ad58:	2301      	movs	r3, #1
 800ad5a:	e000      	b.n	800ad5e <HAL_GPIO_Init+0x1fa>
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	697a      	ldr	r2, [r7, #20]
 800ad60:	f002 0203 	and.w	r2, r2, #3
 800ad64:	0092      	lsls	r2, r2, #2
 800ad66:	4093      	lsls	r3, r2
 800ad68:	693a      	ldr	r2, [r7, #16]
 800ad6a:	4313      	orrs	r3, r2
 800ad6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ad6e:	4937      	ldr	r1, [pc, #220]	; (800ae4c <HAL_GPIO_Init+0x2e8>)
 800ad70:	697b      	ldr	r3, [r7, #20]
 800ad72:	089b      	lsrs	r3, r3, #2
 800ad74:	3302      	adds	r3, #2
 800ad76:	693a      	ldr	r2, [r7, #16]
 800ad78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800ad7c:	4b39      	ldr	r3, [pc, #228]	; (800ae64 <HAL_GPIO_Init+0x300>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	43db      	mvns	r3, r3
 800ad86:	693a      	ldr	r2, [r7, #16]
 800ad88:	4013      	ands	r3, r2
 800ad8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	685b      	ldr	r3, [r3, #4]
 800ad90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d003      	beq.n	800ada0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800ad98:	693a      	ldr	r2, [r7, #16]
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	4313      	orrs	r3, r2
 800ad9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800ada0:	4a30      	ldr	r2, [pc, #192]	; (800ae64 <HAL_GPIO_Init+0x300>)
 800ada2:	693b      	ldr	r3, [r7, #16]
 800ada4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800ada6:	4b2f      	ldr	r3, [pc, #188]	; (800ae64 <HAL_GPIO_Init+0x300>)
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	43db      	mvns	r3, r3
 800adb0:	693a      	ldr	r2, [r7, #16]
 800adb2:	4013      	ands	r3, r2
 800adb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800adb6:	683b      	ldr	r3, [r7, #0]
 800adb8:	685b      	ldr	r3, [r3, #4]
 800adba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d003      	beq.n	800adca <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800adc2:	693a      	ldr	r2, [r7, #16]
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	4313      	orrs	r3, r2
 800adc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800adca:	4a26      	ldr	r2, [pc, #152]	; (800ae64 <HAL_GPIO_Init+0x300>)
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800add0:	4b24      	ldr	r3, [pc, #144]	; (800ae64 <HAL_GPIO_Init+0x300>)
 800add2:	689b      	ldr	r3, [r3, #8]
 800add4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800add6:	68fb      	ldr	r3, [r7, #12]
 800add8:	43db      	mvns	r3, r3
 800adda:	693a      	ldr	r2, [r7, #16]
 800addc:	4013      	ands	r3, r2
 800adde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	685b      	ldr	r3, [r3, #4]
 800ade4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d003      	beq.n	800adf4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800adec:	693a      	ldr	r2, [r7, #16]
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	4313      	orrs	r3, r2
 800adf2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800adf4:	4a1b      	ldr	r2, [pc, #108]	; (800ae64 <HAL_GPIO_Init+0x300>)
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800adfa:	4b1a      	ldr	r3, [pc, #104]	; (800ae64 <HAL_GPIO_Init+0x300>)
 800adfc:	68db      	ldr	r3, [r3, #12]
 800adfe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	43db      	mvns	r3, r3
 800ae04:	693a      	ldr	r2, [r7, #16]
 800ae06:	4013      	ands	r3, r2
 800ae08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	685b      	ldr	r3, [r3, #4]
 800ae0e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ae12:	2b00      	cmp	r3, #0
 800ae14:	d003      	beq.n	800ae1e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800ae16:	693a      	ldr	r2, [r7, #16]
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	4313      	orrs	r3, r2
 800ae1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800ae1e:	4a11      	ldr	r2, [pc, #68]	; (800ae64 <HAL_GPIO_Init+0x300>)
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800ae24:	697b      	ldr	r3, [r7, #20]
 800ae26:	3301      	adds	r3, #1
 800ae28:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	681a      	ldr	r2, [r3, #0]
 800ae2e:	697b      	ldr	r3, [r7, #20]
 800ae30:	fa22 f303 	lsr.w	r3, r2, r3
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	f47f ae9d 	bne.w	800ab74 <HAL_GPIO_Init+0x10>
  }
}
 800ae3a:	bf00      	nop
 800ae3c:	371c      	adds	r7, #28
 800ae3e:	46bd      	mov	sp, r7
 800ae40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae44:	4770      	bx	lr
 800ae46:	bf00      	nop
 800ae48:	40021000 	.word	0x40021000
 800ae4c:	40010000 	.word	0x40010000
 800ae50:	48000400 	.word	0x48000400
 800ae54:	48000800 	.word	0x48000800
 800ae58:	48000c00 	.word	0x48000c00
 800ae5c:	48001000 	.word	0x48001000
 800ae60:	48001400 	.word	0x48001400
 800ae64:	40010400 	.word	0x40010400

0800ae68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b083      	sub	sp, #12
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	460b      	mov	r3, r1
 800ae72:	807b      	strh	r3, [r7, #2]
 800ae74:	4613      	mov	r3, r2
 800ae76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ae78:	787b      	ldrb	r3, [r7, #1]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d003      	beq.n	800ae86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800ae7e:	887a      	ldrh	r2, [r7, #2]
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800ae84:	e002      	b.n	800ae8c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800ae86:	887a      	ldrh	r2, [r7, #2]
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800ae8c:	bf00      	nop
 800ae8e:	370c      	adds	r7, #12
 800ae90:	46bd      	mov	sp, r7
 800ae92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae96:	4770      	bx	lr

0800ae98 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800ae98:	b480      	push	{r7}
 800ae9a:	b085      	sub	sp, #20
 800ae9c:	af00      	add	r7, sp, #0
 800ae9e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d141      	bne.n	800af2a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800aea6:	4b4b      	ldr	r3, [pc, #300]	; (800afd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800aeae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aeb2:	d131      	bne.n	800af18 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800aeb4:	4b47      	ldr	r3, [pc, #284]	; (800afd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aeb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800aeba:	4a46      	ldr	r2, [pc, #280]	; (800afd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aec0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800aec4:	4b43      	ldr	r3, [pc, #268]	; (800afd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800aecc:	4a41      	ldr	r2, [pc, #260]	; (800afd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aece:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800aed2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800aed4:	4b40      	ldr	r3, [pc, #256]	; (800afd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	2232      	movs	r2, #50	; 0x32
 800aeda:	fb02 f303 	mul.w	r3, r2, r3
 800aede:	4a3f      	ldr	r2, [pc, #252]	; (800afdc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800aee0:	fba2 2303 	umull	r2, r3, r2, r3
 800aee4:	0c9b      	lsrs	r3, r3, #18
 800aee6:	3301      	adds	r3, #1
 800aee8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800aeea:	e002      	b.n	800aef2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	3b01      	subs	r3, #1
 800aef0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800aef2:	4b38      	ldr	r3, [pc, #224]	; (800afd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800aef4:	695b      	ldr	r3, [r3, #20]
 800aef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800aefa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800aefe:	d102      	bne.n	800af06 <HAL_PWREx_ControlVoltageScaling+0x6e>
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d1f2      	bne.n	800aeec <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800af06:	4b33      	ldr	r3, [pc, #204]	; (800afd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af08:	695b      	ldr	r3, [r3, #20]
 800af0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af12:	d158      	bne.n	800afc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800af14:	2303      	movs	r3, #3
 800af16:	e057      	b.n	800afc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800af18:	4b2e      	ldr	r3, [pc, #184]	; (800afd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af1e:	4a2d      	ldr	r2, [pc, #180]	; (800afd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af24:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800af28:	e04d      	b.n	800afc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af30:	d141      	bne.n	800afb6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800af32:	4b28      	ldr	r3, [pc, #160]	; (800afd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800af3a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af3e:	d131      	bne.n	800afa4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800af40:	4b24      	ldr	r3, [pc, #144]	; (800afd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800af46:	4a23      	ldr	r2, [pc, #140]	; (800afd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800af4c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800af50:	4b20      	ldr	r3, [pc, #128]	; (800afd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800af58:	4a1e      	ldr	r2, [pc, #120]	; (800afd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800af5e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800af60:	4b1d      	ldr	r3, [pc, #116]	; (800afd8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	2232      	movs	r2, #50	; 0x32
 800af66:	fb02 f303 	mul.w	r3, r2, r3
 800af6a:	4a1c      	ldr	r2, [pc, #112]	; (800afdc <HAL_PWREx_ControlVoltageScaling+0x144>)
 800af6c:	fba2 2303 	umull	r2, r3, r2, r3
 800af70:	0c9b      	lsrs	r3, r3, #18
 800af72:	3301      	adds	r3, #1
 800af74:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800af76:	e002      	b.n	800af7e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	3b01      	subs	r3, #1
 800af7c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800af7e:	4b15      	ldr	r3, [pc, #84]	; (800afd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af80:	695b      	ldr	r3, [r3, #20]
 800af82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af86:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af8a:	d102      	bne.n	800af92 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d1f2      	bne.n	800af78 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800af92:	4b10      	ldr	r3, [pc, #64]	; (800afd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800af94:	695b      	ldr	r3, [r3, #20]
 800af96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af9e:	d112      	bne.n	800afc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800afa0:	2303      	movs	r3, #3
 800afa2:	e011      	b.n	800afc8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800afa4:	4b0b      	ldr	r3, [pc, #44]	; (800afd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afa6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800afaa:	4a0a      	ldr	r2, [pc, #40]	; (800afd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800afb0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800afb4:	e007      	b.n	800afc6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800afb6:	4b07      	ldr	r3, [pc, #28]	; (800afd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800afbe:	4a05      	ldr	r2, [pc, #20]	; (800afd4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800afc0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800afc4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800afc6:	2300      	movs	r3, #0
}
 800afc8:	4618      	mov	r0, r3
 800afca:	3714      	adds	r7, #20
 800afcc:	46bd      	mov	sp, r7
 800afce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd2:	4770      	bx	lr
 800afd4:	40007000 	.word	0x40007000
 800afd8:	20000ca0 	.word	0x20000ca0
 800afdc:	431bde83 	.word	0x431bde83

0800afe0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b088      	sub	sp, #32
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d101      	bne.n	800aff2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800afee:	2301      	movs	r3, #1
 800aff0:	e308      	b.n	800b604 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	f003 0301 	and.w	r3, r3, #1
 800affa:	2b00      	cmp	r3, #0
 800affc:	d075      	beq.n	800b0ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800affe:	4ba3      	ldr	r3, [pc, #652]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b000:	689b      	ldr	r3, [r3, #8]
 800b002:	f003 030c 	and.w	r3, r3, #12
 800b006:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b008:	4ba0      	ldr	r3, [pc, #640]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b00a:	68db      	ldr	r3, [r3, #12]
 800b00c:	f003 0303 	and.w	r3, r3, #3
 800b010:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b012:	69bb      	ldr	r3, [r7, #24]
 800b014:	2b0c      	cmp	r3, #12
 800b016:	d102      	bne.n	800b01e <HAL_RCC_OscConfig+0x3e>
 800b018:	697b      	ldr	r3, [r7, #20]
 800b01a:	2b03      	cmp	r3, #3
 800b01c:	d002      	beq.n	800b024 <HAL_RCC_OscConfig+0x44>
 800b01e:	69bb      	ldr	r3, [r7, #24]
 800b020:	2b08      	cmp	r3, #8
 800b022:	d10b      	bne.n	800b03c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b024:	4b99      	ldr	r3, [pc, #612]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	d05b      	beq.n	800b0e8 <HAL_RCC_OscConfig+0x108>
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	2b00      	cmp	r3, #0
 800b036:	d157      	bne.n	800b0e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b038:	2301      	movs	r3, #1
 800b03a:	e2e3      	b.n	800b604 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b044:	d106      	bne.n	800b054 <HAL_RCC_OscConfig+0x74>
 800b046:	4b91      	ldr	r3, [pc, #580]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b048:	681b      	ldr	r3, [r3, #0]
 800b04a:	4a90      	ldr	r2, [pc, #576]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b04c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b050:	6013      	str	r3, [r2, #0]
 800b052:	e01d      	b.n	800b090 <HAL_RCC_OscConfig+0xb0>
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	685b      	ldr	r3, [r3, #4]
 800b058:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b05c:	d10c      	bne.n	800b078 <HAL_RCC_OscConfig+0x98>
 800b05e:	4b8b      	ldr	r3, [pc, #556]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	4a8a      	ldr	r2, [pc, #552]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b064:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b068:	6013      	str	r3, [r2, #0]
 800b06a:	4b88      	ldr	r3, [pc, #544]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	4a87      	ldr	r2, [pc, #540]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b074:	6013      	str	r3, [r2, #0]
 800b076:	e00b      	b.n	800b090 <HAL_RCC_OscConfig+0xb0>
 800b078:	4b84      	ldr	r3, [pc, #528]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	4a83      	ldr	r2, [pc, #524]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b07e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b082:	6013      	str	r3, [r2, #0]
 800b084:	4b81      	ldr	r3, [pc, #516]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	4a80      	ldr	r2, [pc, #512]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b08a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b08e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	685b      	ldr	r3, [r3, #4]
 800b094:	2b00      	cmp	r3, #0
 800b096:	d013      	beq.n	800b0c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b098:	f7fd f9fc 	bl	8008494 <HAL_GetTick>
 800b09c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b09e:	e008      	b.n	800b0b2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b0a0:	f7fd f9f8 	bl	8008494 <HAL_GetTick>
 800b0a4:	4602      	mov	r2, r0
 800b0a6:	693b      	ldr	r3, [r7, #16]
 800b0a8:	1ad3      	subs	r3, r2, r3
 800b0aa:	2b64      	cmp	r3, #100	; 0x64
 800b0ac:	d901      	bls.n	800b0b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b0ae:	2303      	movs	r3, #3
 800b0b0:	e2a8      	b.n	800b604 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b0b2:	4b76      	ldr	r3, [pc, #472]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d0f0      	beq.n	800b0a0 <HAL_RCC_OscConfig+0xc0>
 800b0be:	e014      	b.n	800b0ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b0c0:	f7fd f9e8 	bl	8008494 <HAL_GetTick>
 800b0c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b0c6:	e008      	b.n	800b0da <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b0c8:	f7fd f9e4 	bl	8008494 <HAL_GetTick>
 800b0cc:	4602      	mov	r2, r0
 800b0ce:	693b      	ldr	r3, [r7, #16]
 800b0d0:	1ad3      	subs	r3, r2, r3
 800b0d2:	2b64      	cmp	r3, #100	; 0x64
 800b0d4:	d901      	bls.n	800b0da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b0d6:	2303      	movs	r3, #3
 800b0d8:	e294      	b.n	800b604 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b0da:	4b6c      	ldr	r3, [pc, #432]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d1f0      	bne.n	800b0c8 <HAL_RCC_OscConfig+0xe8>
 800b0e6:	e000      	b.n	800b0ea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b0e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	f003 0302 	and.w	r3, r3, #2
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d075      	beq.n	800b1e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b0f6:	4b65      	ldr	r3, [pc, #404]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b0f8:	689b      	ldr	r3, [r3, #8]
 800b0fa:	f003 030c 	and.w	r3, r3, #12
 800b0fe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b100:	4b62      	ldr	r3, [pc, #392]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b102:	68db      	ldr	r3, [r3, #12]
 800b104:	f003 0303 	and.w	r3, r3, #3
 800b108:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b10a:	69bb      	ldr	r3, [r7, #24]
 800b10c:	2b0c      	cmp	r3, #12
 800b10e:	d102      	bne.n	800b116 <HAL_RCC_OscConfig+0x136>
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	2b02      	cmp	r3, #2
 800b114:	d002      	beq.n	800b11c <HAL_RCC_OscConfig+0x13c>
 800b116:	69bb      	ldr	r3, [r7, #24]
 800b118:	2b04      	cmp	r3, #4
 800b11a:	d11f      	bne.n	800b15c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b11c:	4b5b      	ldr	r3, [pc, #364]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b124:	2b00      	cmp	r3, #0
 800b126:	d005      	beq.n	800b134 <HAL_RCC_OscConfig+0x154>
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d101      	bne.n	800b134 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b130:	2301      	movs	r3, #1
 800b132:	e267      	b.n	800b604 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b134:	4b55      	ldr	r3, [pc, #340]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b136:	685b      	ldr	r3, [r3, #4]
 800b138:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	691b      	ldr	r3, [r3, #16]
 800b140:	061b      	lsls	r3, r3, #24
 800b142:	4952      	ldr	r1, [pc, #328]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b144:	4313      	orrs	r3, r2
 800b146:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b148:	4b51      	ldr	r3, [pc, #324]	; (800b290 <HAL_RCC_OscConfig+0x2b0>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4618      	mov	r0, r3
 800b14e:	f7fd f955 	bl	80083fc <HAL_InitTick>
 800b152:	4603      	mov	r3, r0
 800b154:	2b00      	cmp	r3, #0
 800b156:	d043      	beq.n	800b1e0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b158:	2301      	movs	r3, #1
 800b15a:	e253      	b.n	800b604 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	68db      	ldr	r3, [r3, #12]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d023      	beq.n	800b1ac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b164:	4b49      	ldr	r3, [pc, #292]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	4a48      	ldr	r2, [pc, #288]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b16a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b16e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b170:	f7fd f990 	bl	8008494 <HAL_GetTick>
 800b174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b176:	e008      	b.n	800b18a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b178:	f7fd f98c 	bl	8008494 <HAL_GetTick>
 800b17c:	4602      	mov	r2, r0
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	1ad3      	subs	r3, r2, r3
 800b182:	2b02      	cmp	r3, #2
 800b184:	d901      	bls.n	800b18a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b186:	2303      	movs	r3, #3
 800b188:	e23c      	b.n	800b604 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b18a:	4b40      	ldr	r3, [pc, #256]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b192:	2b00      	cmp	r3, #0
 800b194:	d0f0      	beq.n	800b178 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b196:	4b3d      	ldr	r3, [pc, #244]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	691b      	ldr	r3, [r3, #16]
 800b1a2:	061b      	lsls	r3, r3, #24
 800b1a4:	4939      	ldr	r1, [pc, #228]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b1a6:	4313      	orrs	r3, r2
 800b1a8:	604b      	str	r3, [r1, #4]
 800b1aa:	e01a      	b.n	800b1e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b1ac:	4b37      	ldr	r3, [pc, #220]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	4a36      	ldr	r2, [pc, #216]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b1b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b1b8:	f7fd f96c 	bl	8008494 <HAL_GetTick>
 800b1bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b1be:	e008      	b.n	800b1d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b1c0:	f7fd f968 	bl	8008494 <HAL_GetTick>
 800b1c4:	4602      	mov	r2, r0
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	1ad3      	subs	r3, r2, r3
 800b1ca:	2b02      	cmp	r3, #2
 800b1cc:	d901      	bls.n	800b1d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b1ce:	2303      	movs	r3, #3
 800b1d0:	e218      	b.n	800b604 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b1d2:	4b2e      	ldr	r3, [pc, #184]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d1f0      	bne.n	800b1c0 <HAL_RCC_OscConfig+0x1e0>
 800b1de:	e000      	b.n	800b1e2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b1e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	f003 0308 	and.w	r3, r3, #8
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	d03c      	beq.n	800b268 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	695b      	ldr	r3, [r3, #20]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d01c      	beq.n	800b230 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b1f6:	4b25      	ldr	r3, [pc, #148]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b1f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b1fc:	4a23      	ldr	r2, [pc, #140]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b1fe:	f043 0301 	orr.w	r3, r3, #1
 800b202:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b206:	f7fd f945 	bl	8008494 <HAL_GetTick>
 800b20a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b20c:	e008      	b.n	800b220 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b20e:	f7fd f941 	bl	8008494 <HAL_GetTick>
 800b212:	4602      	mov	r2, r0
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	1ad3      	subs	r3, r2, r3
 800b218:	2b02      	cmp	r3, #2
 800b21a:	d901      	bls.n	800b220 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b21c:	2303      	movs	r3, #3
 800b21e:	e1f1      	b.n	800b604 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b220:	4b1a      	ldr	r3, [pc, #104]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b222:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b226:	f003 0302 	and.w	r3, r3, #2
 800b22a:	2b00      	cmp	r3, #0
 800b22c:	d0ef      	beq.n	800b20e <HAL_RCC_OscConfig+0x22e>
 800b22e:	e01b      	b.n	800b268 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b230:	4b16      	ldr	r3, [pc, #88]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b232:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b236:	4a15      	ldr	r2, [pc, #84]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b238:	f023 0301 	bic.w	r3, r3, #1
 800b23c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b240:	f7fd f928 	bl	8008494 <HAL_GetTick>
 800b244:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b246:	e008      	b.n	800b25a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b248:	f7fd f924 	bl	8008494 <HAL_GetTick>
 800b24c:	4602      	mov	r2, r0
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	1ad3      	subs	r3, r2, r3
 800b252:	2b02      	cmp	r3, #2
 800b254:	d901      	bls.n	800b25a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800b256:	2303      	movs	r3, #3
 800b258:	e1d4      	b.n	800b604 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b25a:	4b0c      	ldr	r3, [pc, #48]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b25c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b260:	f003 0302 	and.w	r3, r3, #2
 800b264:	2b00      	cmp	r3, #0
 800b266:	d1ef      	bne.n	800b248 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f003 0304 	and.w	r3, r3, #4
 800b270:	2b00      	cmp	r3, #0
 800b272:	f000 80ab 	beq.w	800b3cc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b276:	2300      	movs	r3, #0
 800b278:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b27a:	4b04      	ldr	r3, [pc, #16]	; (800b28c <HAL_RCC_OscConfig+0x2ac>)
 800b27c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b27e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b282:	2b00      	cmp	r3, #0
 800b284:	d106      	bne.n	800b294 <HAL_RCC_OscConfig+0x2b4>
 800b286:	2301      	movs	r3, #1
 800b288:	e005      	b.n	800b296 <HAL_RCC_OscConfig+0x2b6>
 800b28a:	bf00      	nop
 800b28c:	40021000 	.word	0x40021000
 800b290:	20000ca4 	.word	0x20000ca4
 800b294:	2300      	movs	r3, #0
 800b296:	2b00      	cmp	r3, #0
 800b298:	d00d      	beq.n	800b2b6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b29a:	4baf      	ldr	r3, [pc, #700]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b29c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b29e:	4aae      	ldr	r2, [pc, #696]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b2a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2a4:	6593      	str	r3, [r2, #88]	; 0x58
 800b2a6:	4bac      	ldr	r3, [pc, #688]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b2a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b2aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2ae:	60fb      	str	r3, [r7, #12]
 800b2b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b2b2:	2301      	movs	r3, #1
 800b2b4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b2b6:	4ba9      	ldr	r3, [pc, #676]	; (800b55c <HAL_RCC_OscConfig+0x57c>)
 800b2b8:	681b      	ldr	r3, [r3, #0]
 800b2ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d118      	bne.n	800b2f4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b2c2:	4ba6      	ldr	r3, [pc, #664]	; (800b55c <HAL_RCC_OscConfig+0x57c>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	4aa5      	ldr	r2, [pc, #660]	; (800b55c <HAL_RCC_OscConfig+0x57c>)
 800b2c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b2ce:	f7fd f8e1 	bl	8008494 <HAL_GetTick>
 800b2d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b2d4:	e008      	b.n	800b2e8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b2d6:	f7fd f8dd 	bl	8008494 <HAL_GetTick>
 800b2da:	4602      	mov	r2, r0
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	1ad3      	subs	r3, r2, r3
 800b2e0:	2b02      	cmp	r3, #2
 800b2e2:	d901      	bls.n	800b2e8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b2e4:	2303      	movs	r3, #3
 800b2e6:	e18d      	b.n	800b604 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b2e8:	4b9c      	ldr	r3, [pc, #624]	; (800b55c <HAL_RCC_OscConfig+0x57c>)
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d0f0      	beq.n	800b2d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d108      	bne.n	800b30e <HAL_RCC_OscConfig+0x32e>
 800b2fc:	4b96      	ldr	r3, [pc, #600]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b2fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b302:	4a95      	ldr	r2, [pc, #596]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b304:	f043 0301 	orr.w	r3, r3, #1
 800b308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b30c:	e024      	b.n	800b358 <HAL_RCC_OscConfig+0x378>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	689b      	ldr	r3, [r3, #8]
 800b312:	2b05      	cmp	r3, #5
 800b314:	d110      	bne.n	800b338 <HAL_RCC_OscConfig+0x358>
 800b316:	4b90      	ldr	r3, [pc, #576]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b318:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b31c:	4a8e      	ldr	r2, [pc, #568]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b31e:	f043 0304 	orr.w	r3, r3, #4
 800b322:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b326:	4b8c      	ldr	r3, [pc, #560]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b32c:	4a8a      	ldr	r2, [pc, #552]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b32e:	f043 0301 	orr.w	r3, r3, #1
 800b332:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b336:	e00f      	b.n	800b358 <HAL_RCC_OscConfig+0x378>
 800b338:	4b87      	ldr	r3, [pc, #540]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b33a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b33e:	4a86      	ldr	r2, [pc, #536]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b340:	f023 0301 	bic.w	r3, r3, #1
 800b344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800b348:	4b83      	ldr	r3, [pc, #524]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b34a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b34e:	4a82      	ldr	r2, [pc, #520]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b350:	f023 0304 	bic.w	r3, r3, #4
 800b354:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	689b      	ldr	r3, [r3, #8]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d016      	beq.n	800b38e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b360:	f7fd f898 	bl	8008494 <HAL_GetTick>
 800b364:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b366:	e00a      	b.n	800b37e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b368:	f7fd f894 	bl	8008494 <HAL_GetTick>
 800b36c:	4602      	mov	r2, r0
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	1ad3      	subs	r3, r2, r3
 800b372:	f241 3288 	movw	r2, #5000	; 0x1388
 800b376:	4293      	cmp	r3, r2
 800b378:	d901      	bls.n	800b37e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b37a:	2303      	movs	r3, #3
 800b37c:	e142      	b.n	800b604 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b37e:	4b76      	ldr	r3, [pc, #472]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b384:	f003 0302 	and.w	r3, r3, #2
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d0ed      	beq.n	800b368 <HAL_RCC_OscConfig+0x388>
 800b38c:	e015      	b.n	800b3ba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b38e:	f7fd f881 	bl	8008494 <HAL_GetTick>
 800b392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b394:	e00a      	b.n	800b3ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b396:	f7fd f87d 	bl	8008494 <HAL_GetTick>
 800b39a:	4602      	mov	r2, r0
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	1ad3      	subs	r3, r2, r3
 800b3a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3a4:	4293      	cmp	r3, r2
 800b3a6:	d901      	bls.n	800b3ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b3a8:	2303      	movs	r3, #3
 800b3aa:	e12b      	b.n	800b604 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b3ac:	4b6a      	ldr	r3, [pc, #424]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b3ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b3b2:	f003 0302 	and.w	r3, r3, #2
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d1ed      	bne.n	800b396 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b3ba:	7ffb      	ldrb	r3, [r7, #31]
 800b3bc:	2b01      	cmp	r3, #1
 800b3be:	d105      	bne.n	800b3cc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b3c0:	4b65      	ldr	r3, [pc, #404]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b3c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b3c4:	4a64      	ldr	r2, [pc, #400]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b3c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b3ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	f003 0320 	and.w	r3, r3, #32
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d03c      	beq.n	800b452 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	699b      	ldr	r3, [r3, #24]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d01c      	beq.n	800b41a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b3e0:	4b5d      	ldr	r3, [pc, #372]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b3e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b3e6:	4a5c      	ldr	r2, [pc, #368]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b3e8:	f043 0301 	orr.w	r3, r3, #1
 800b3ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b3f0:	f7fd f850 	bl	8008494 <HAL_GetTick>
 800b3f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b3f6:	e008      	b.n	800b40a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b3f8:	f7fd f84c 	bl	8008494 <HAL_GetTick>
 800b3fc:	4602      	mov	r2, r0
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	1ad3      	subs	r3, r2, r3
 800b402:	2b02      	cmp	r3, #2
 800b404:	d901      	bls.n	800b40a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800b406:	2303      	movs	r3, #3
 800b408:	e0fc      	b.n	800b604 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b40a:	4b53      	ldr	r3, [pc, #332]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b40c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b410:	f003 0302 	and.w	r3, r3, #2
 800b414:	2b00      	cmp	r3, #0
 800b416:	d0ef      	beq.n	800b3f8 <HAL_RCC_OscConfig+0x418>
 800b418:	e01b      	b.n	800b452 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800b41a:	4b4f      	ldr	r3, [pc, #316]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b41c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b420:	4a4d      	ldr	r2, [pc, #308]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b422:	f023 0301 	bic.w	r3, r3, #1
 800b426:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b42a:	f7fd f833 	bl	8008494 <HAL_GetTick>
 800b42e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b430:	e008      	b.n	800b444 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b432:	f7fd f82f 	bl	8008494 <HAL_GetTick>
 800b436:	4602      	mov	r2, r0
 800b438:	693b      	ldr	r3, [r7, #16]
 800b43a:	1ad3      	subs	r3, r2, r3
 800b43c:	2b02      	cmp	r3, #2
 800b43e:	d901      	bls.n	800b444 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800b440:	2303      	movs	r3, #3
 800b442:	e0df      	b.n	800b604 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800b444:	4b44      	ldr	r3, [pc, #272]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b446:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800b44a:	f003 0302 	and.w	r3, r3, #2
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d1ef      	bne.n	800b432 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	69db      	ldr	r3, [r3, #28]
 800b456:	2b00      	cmp	r3, #0
 800b458:	f000 80d3 	beq.w	800b602 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b45c:	4b3e      	ldr	r3, [pc, #248]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b45e:	689b      	ldr	r3, [r3, #8]
 800b460:	f003 030c 	and.w	r3, r3, #12
 800b464:	2b0c      	cmp	r3, #12
 800b466:	f000 808d 	beq.w	800b584 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	69db      	ldr	r3, [r3, #28]
 800b46e:	2b02      	cmp	r3, #2
 800b470:	d15a      	bne.n	800b528 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b472:	4b39      	ldr	r3, [pc, #228]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	4a38      	ldr	r2, [pc, #224]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b478:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b47c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b47e:	f7fd f809 	bl	8008494 <HAL_GetTick>
 800b482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b484:	e008      	b.n	800b498 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b486:	f7fd f805 	bl	8008494 <HAL_GetTick>
 800b48a:	4602      	mov	r2, r0
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	1ad3      	subs	r3, r2, r3
 800b490:	2b02      	cmp	r3, #2
 800b492:	d901      	bls.n	800b498 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800b494:	2303      	movs	r3, #3
 800b496:	e0b5      	b.n	800b604 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b498:	4b2f      	ldr	r3, [pc, #188]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d1f0      	bne.n	800b486 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b4a4:	4b2c      	ldr	r3, [pc, #176]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b4a6:	68da      	ldr	r2, [r3, #12]
 800b4a8:	4b2d      	ldr	r3, [pc, #180]	; (800b560 <HAL_RCC_OscConfig+0x580>)
 800b4aa:	4013      	ands	r3, r2
 800b4ac:	687a      	ldr	r2, [r7, #4]
 800b4ae:	6a11      	ldr	r1, [r2, #32]
 800b4b0:	687a      	ldr	r2, [r7, #4]
 800b4b2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b4b4:	3a01      	subs	r2, #1
 800b4b6:	0112      	lsls	r2, r2, #4
 800b4b8:	4311      	orrs	r1, r2
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800b4be:	0212      	lsls	r2, r2, #8
 800b4c0:	4311      	orrs	r1, r2
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800b4c6:	0852      	lsrs	r2, r2, #1
 800b4c8:	3a01      	subs	r2, #1
 800b4ca:	0552      	lsls	r2, r2, #21
 800b4cc:	4311      	orrs	r1, r2
 800b4ce:	687a      	ldr	r2, [r7, #4]
 800b4d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b4d2:	0852      	lsrs	r2, r2, #1
 800b4d4:	3a01      	subs	r2, #1
 800b4d6:	0652      	lsls	r2, r2, #25
 800b4d8:	4311      	orrs	r1, r2
 800b4da:	687a      	ldr	r2, [r7, #4]
 800b4dc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800b4de:	06d2      	lsls	r2, r2, #27
 800b4e0:	430a      	orrs	r2, r1
 800b4e2:	491d      	ldr	r1, [pc, #116]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b4e4:	4313      	orrs	r3, r2
 800b4e6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b4e8:	4b1b      	ldr	r3, [pc, #108]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a1a      	ldr	r2, [pc, #104]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b4ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b4f2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800b4f4:	4b18      	ldr	r3, [pc, #96]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b4f6:	68db      	ldr	r3, [r3, #12]
 800b4f8:	4a17      	ldr	r2, [pc, #92]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b4fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800b4fe:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b500:	f7fc ffc8 	bl	8008494 <HAL_GetTick>
 800b504:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b506:	e008      	b.n	800b51a <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b508:	f7fc ffc4 	bl	8008494 <HAL_GetTick>
 800b50c:	4602      	mov	r2, r0
 800b50e:	693b      	ldr	r3, [r7, #16]
 800b510:	1ad3      	subs	r3, r2, r3
 800b512:	2b02      	cmp	r3, #2
 800b514:	d901      	bls.n	800b51a <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800b516:	2303      	movs	r3, #3
 800b518:	e074      	b.n	800b604 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b51a:	4b0f      	ldr	r3, [pc, #60]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b522:	2b00      	cmp	r3, #0
 800b524:	d0f0      	beq.n	800b508 <HAL_RCC_OscConfig+0x528>
 800b526:	e06c      	b.n	800b602 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b528:	4b0b      	ldr	r3, [pc, #44]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a0a      	ldr	r2, [pc, #40]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b52e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800b532:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800b534:	4b08      	ldr	r3, [pc, #32]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	4a07      	ldr	r2, [pc, #28]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b53a:	f023 0303 	bic.w	r3, r3, #3
 800b53e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800b540:	4b05      	ldr	r3, [pc, #20]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	4a04      	ldr	r2, [pc, #16]	; (800b558 <HAL_RCC_OscConfig+0x578>)
 800b546:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800b54a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b54e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b550:	f7fc ffa0 	bl	8008494 <HAL_GetTick>
 800b554:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b556:	e00e      	b.n	800b576 <HAL_RCC_OscConfig+0x596>
 800b558:	40021000 	.word	0x40021000
 800b55c:	40007000 	.word	0x40007000
 800b560:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b564:	f7fc ff96 	bl	8008494 <HAL_GetTick>
 800b568:	4602      	mov	r2, r0
 800b56a:	693b      	ldr	r3, [r7, #16]
 800b56c:	1ad3      	subs	r3, r2, r3
 800b56e:	2b02      	cmp	r3, #2
 800b570:	d901      	bls.n	800b576 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800b572:	2303      	movs	r3, #3
 800b574:	e046      	b.n	800b604 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800b576:	4b25      	ldr	r3, [pc, #148]	; (800b60c <HAL_RCC_OscConfig+0x62c>)
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d1f0      	bne.n	800b564 <HAL_RCC_OscConfig+0x584>
 800b582:	e03e      	b.n	800b602 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	69db      	ldr	r3, [r3, #28]
 800b588:	2b01      	cmp	r3, #1
 800b58a:	d101      	bne.n	800b590 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800b58c:	2301      	movs	r3, #1
 800b58e:	e039      	b.n	800b604 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800b590:	4b1e      	ldr	r3, [pc, #120]	; (800b60c <HAL_RCC_OscConfig+0x62c>)
 800b592:	68db      	ldr	r3, [r3, #12]
 800b594:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	f003 0203 	and.w	r2, r3, #3
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6a1b      	ldr	r3, [r3, #32]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d12c      	bne.n	800b5fe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b5a4:	697b      	ldr	r3, [r7, #20]
 800b5a6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b5ae:	3b01      	subs	r3, #1
 800b5b0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d123      	bne.n	800b5fe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5c0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d11b      	bne.n	800b5fe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b5c6:	697b      	ldr	r3, [r7, #20]
 800b5c8:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800b5d2:	429a      	cmp	r2, r3
 800b5d4:	d113      	bne.n	800b5fe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5e0:	085b      	lsrs	r3, r3, #1
 800b5e2:	3b01      	subs	r3, #1
 800b5e4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d109      	bne.n	800b5fe <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800b5ea:	697b      	ldr	r3, [r7, #20]
 800b5ec:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5f4:	085b      	lsrs	r3, r3, #1
 800b5f6:	3b01      	subs	r3, #1
 800b5f8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d001      	beq.n	800b602 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800b5fe:	2301      	movs	r3, #1
 800b600:	e000      	b.n	800b604 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800b602:	2300      	movs	r3, #0
}
 800b604:	4618      	mov	r0, r3
 800b606:	3720      	adds	r7, #32
 800b608:	46bd      	mov	sp, r7
 800b60a:	bd80      	pop	{r7, pc}
 800b60c:	40021000 	.word	0x40021000

0800b610 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b610:	b580      	push	{r7, lr}
 800b612:	b086      	sub	sp, #24
 800b614:	af00      	add	r7, sp, #0
 800b616:	6078      	str	r0, [r7, #4]
 800b618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800b61a:	2300      	movs	r3, #0
 800b61c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	2b00      	cmp	r3, #0
 800b622:	d101      	bne.n	800b628 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800b624:	2301      	movs	r3, #1
 800b626:	e11e      	b.n	800b866 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b628:	4b91      	ldr	r3, [pc, #580]	; (800b870 <HAL_RCC_ClockConfig+0x260>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f003 030f 	and.w	r3, r3, #15
 800b630:	683a      	ldr	r2, [r7, #0]
 800b632:	429a      	cmp	r2, r3
 800b634:	d910      	bls.n	800b658 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b636:	4b8e      	ldr	r3, [pc, #568]	; (800b870 <HAL_RCC_ClockConfig+0x260>)
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	f023 020f 	bic.w	r2, r3, #15
 800b63e:	498c      	ldr	r1, [pc, #560]	; (800b870 <HAL_RCC_ClockConfig+0x260>)
 800b640:	683b      	ldr	r3, [r7, #0]
 800b642:	4313      	orrs	r3, r2
 800b644:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b646:	4b8a      	ldr	r3, [pc, #552]	; (800b870 <HAL_RCC_ClockConfig+0x260>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f003 030f 	and.w	r3, r3, #15
 800b64e:	683a      	ldr	r2, [r7, #0]
 800b650:	429a      	cmp	r2, r3
 800b652:	d001      	beq.n	800b658 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800b654:	2301      	movs	r3, #1
 800b656:	e106      	b.n	800b866 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	f003 0301 	and.w	r3, r3, #1
 800b660:	2b00      	cmp	r3, #0
 800b662:	d073      	beq.n	800b74c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	685b      	ldr	r3, [r3, #4]
 800b668:	2b03      	cmp	r3, #3
 800b66a:	d129      	bne.n	800b6c0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800b66c:	4b81      	ldr	r3, [pc, #516]	; (800b874 <HAL_RCC_ClockConfig+0x264>)
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b674:	2b00      	cmp	r3, #0
 800b676:	d101      	bne.n	800b67c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800b678:	2301      	movs	r3, #1
 800b67a:	e0f4      	b.n	800b866 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800b67c:	f000 f972 	bl	800b964 <RCC_GetSysClockFreqFromPLLSource>
 800b680:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	4a7c      	ldr	r2, [pc, #496]	; (800b878 <HAL_RCC_ClockConfig+0x268>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d93f      	bls.n	800b70a <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b68a:	4b7a      	ldr	r3, [pc, #488]	; (800b874 <HAL_RCC_ClockConfig+0x264>)
 800b68c:	689b      	ldr	r3, [r3, #8]
 800b68e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b692:	2b00      	cmp	r3, #0
 800b694:	d009      	beq.n	800b6aa <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d033      	beq.n	800b70a <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d12f      	bne.n	800b70a <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b6aa:	4b72      	ldr	r3, [pc, #456]	; (800b874 <HAL_RCC_ClockConfig+0x264>)
 800b6ac:	689b      	ldr	r3, [r3, #8]
 800b6ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6b2:	4a70      	ldr	r2, [pc, #448]	; (800b874 <HAL_RCC_ClockConfig+0x264>)
 800b6b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b6b8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800b6ba:	2380      	movs	r3, #128	; 0x80
 800b6bc:	617b      	str	r3, [r7, #20]
 800b6be:	e024      	b.n	800b70a <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	2b02      	cmp	r3, #2
 800b6c6:	d107      	bne.n	800b6d8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b6c8:	4b6a      	ldr	r3, [pc, #424]	; (800b874 <HAL_RCC_ClockConfig+0x264>)
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d109      	bne.n	800b6e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b6d4:	2301      	movs	r3, #1
 800b6d6:	e0c6      	b.n	800b866 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b6d8:	4b66      	ldr	r3, [pc, #408]	; (800b874 <HAL_RCC_ClockConfig+0x264>)
 800b6da:	681b      	ldr	r3, [r3, #0]
 800b6dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d101      	bne.n	800b6e8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800b6e4:	2301      	movs	r3, #1
 800b6e6:	e0be      	b.n	800b866 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800b6e8:	f000 f8ce 	bl	800b888 <HAL_RCC_GetSysClockFreq>
 800b6ec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800b6ee:	693b      	ldr	r3, [r7, #16]
 800b6f0:	4a61      	ldr	r2, [pc, #388]	; (800b878 <HAL_RCC_ClockConfig+0x268>)
 800b6f2:	4293      	cmp	r3, r2
 800b6f4:	d909      	bls.n	800b70a <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800b6f6:	4b5f      	ldr	r3, [pc, #380]	; (800b874 <HAL_RCC_ClockConfig+0x264>)
 800b6f8:	689b      	ldr	r3, [r3, #8]
 800b6fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b6fe:	4a5d      	ldr	r2, [pc, #372]	; (800b874 <HAL_RCC_ClockConfig+0x264>)
 800b700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b704:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800b706:	2380      	movs	r3, #128	; 0x80
 800b708:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b70a:	4b5a      	ldr	r3, [pc, #360]	; (800b874 <HAL_RCC_ClockConfig+0x264>)
 800b70c:	689b      	ldr	r3, [r3, #8]
 800b70e:	f023 0203 	bic.w	r2, r3, #3
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	685b      	ldr	r3, [r3, #4]
 800b716:	4957      	ldr	r1, [pc, #348]	; (800b874 <HAL_RCC_ClockConfig+0x264>)
 800b718:	4313      	orrs	r3, r2
 800b71a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b71c:	f7fc feba 	bl	8008494 <HAL_GetTick>
 800b720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b722:	e00a      	b.n	800b73a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b724:	f7fc feb6 	bl	8008494 <HAL_GetTick>
 800b728:	4602      	mov	r2, r0
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	1ad3      	subs	r3, r2, r3
 800b72e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b732:	4293      	cmp	r3, r2
 800b734:	d901      	bls.n	800b73a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800b736:	2303      	movs	r3, #3
 800b738:	e095      	b.n	800b866 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b73a:	4b4e      	ldr	r3, [pc, #312]	; (800b874 <HAL_RCC_ClockConfig+0x264>)
 800b73c:	689b      	ldr	r3, [r3, #8]
 800b73e:	f003 020c 	and.w	r2, r3, #12
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	009b      	lsls	r3, r3, #2
 800b748:	429a      	cmp	r2, r3
 800b74a:	d1eb      	bne.n	800b724 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f003 0302 	and.w	r3, r3, #2
 800b754:	2b00      	cmp	r3, #0
 800b756:	d023      	beq.n	800b7a0 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	681b      	ldr	r3, [r3, #0]
 800b75c:	f003 0304 	and.w	r3, r3, #4
 800b760:	2b00      	cmp	r3, #0
 800b762:	d005      	beq.n	800b770 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b764:	4b43      	ldr	r3, [pc, #268]	; (800b874 <HAL_RCC_ClockConfig+0x264>)
 800b766:	689b      	ldr	r3, [r3, #8]
 800b768:	4a42      	ldr	r2, [pc, #264]	; (800b874 <HAL_RCC_ClockConfig+0x264>)
 800b76a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b76e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f003 0308 	and.w	r3, r3, #8
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d007      	beq.n	800b78c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800b77c:	4b3d      	ldr	r3, [pc, #244]	; (800b874 <HAL_RCC_ClockConfig+0x264>)
 800b77e:	689b      	ldr	r3, [r3, #8]
 800b780:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b784:	4a3b      	ldr	r2, [pc, #236]	; (800b874 <HAL_RCC_ClockConfig+0x264>)
 800b786:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b78a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b78c:	4b39      	ldr	r3, [pc, #228]	; (800b874 <HAL_RCC_ClockConfig+0x264>)
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	689b      	ldr	r3, [r3, #8]
 800b798:	4936      	ldr	r1, [pc, #216]	; (800b874 <HAL_RCC_ClockConfig+0x264>)
 800b79a:	4313      	orrs	r3, r2
 800b79c:	608b      	str	r3, [r1, #8]
 800b79e:	e008      	b.n	800b7b2 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	2b80      	cmp	r3, #128	; 0x80
 800b7a4:	d105      	bne.n	800b7b2 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800b7a6:	4b33      	ldr	r3, [pc, #204]	; (800b874 <HAL_RCC_ClockConfig+0x264>)
 800b7a8:	689b      	ldr	r3, [r3, #8]
 800b7aa:	4a32      	ldr	r2, [pc, #200]	; (800b874 <HAL_RCC_ClockConfig+0x264>)
 800b7ac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b7b0:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b7b2:	4b2f      	ldr	r3, [pc, #188]	; (800b870 <HAL_RCC_ClockConfig+0x260>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f003 030f 	and.w	r3, r3, #15
 800b7ba:	683a      	ldr	r2, [r7, #0]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d21d      	bcs.n	800b7fc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b7c0:	4b2b      	ldr	r3, [pc, #172]	; (800b870 <HAL_RCC_ClockConfig+0x260>)
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f023 020f 	bic.w	r2, r3, #15
 800b7c8:	4929      	ldr	r1, [pc, #164]	; (800b870 <HAL_RCC_ClockConfig+0x260>)
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	4313      	orrs	r3, r2
 800b7ce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800b7d0:	f7fc fe60 	bl	8008494 <HAL_GetTick>
 800b7d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b7d6:	e00a      	b.n	800b7ee <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b7d8:	f7fc fe5c 	bl	8008494 <HAL_GetTick>
 800b7dc:	4602      	mov	r2, r0
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	1ad3      	subs	r3, r2, r3
 800b7e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	d901      	bls.n	800b7ee <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800b7ea:	2303      	movs	r3, #3
 800b7ec:	e03b      	b.n	800b866 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b7ee:	4b20      	ldr	r3, [pc, #128]	; (800b870 <HAL_RCC_ClockConfig+0x260>)
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	f003 030f 	and.w	r3, r3, #15
 800b7f6:	683a      	ldr	r2, [r7, #0]
 800b7f8:	429a      	cmp	r2, r3
 800b7fa:	d1ed      	bne.n	800b7d8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f003 0304 	and.w	r3, r3, #4
 800b804:	2b00      	cmp	r3, #0
 800b806:	d008      	beq.n	800b81a <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b808:	4b1a      	ldr	r3, [pc, #104]	; (800b874 <HAL_RCC_ClockConfig+0x264>)
 800b80a:	689b      	ldr	r3, [r3, #8]
 800b80c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	68db      	ldr	r3, [r3, #12]
 800b814:	4917      	ldr	r1, [pc, #92]	; (800b874 <HAL_RCC_ClockConfig+0x264>)
 800b816:	4313      	orrs	r3, r2
 800b818:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f003 0308 	and.w	r3, r3, #8
 800b822:	2b00      	cmp	r3, #0
 800b824:	d009      	beq.n	800b83a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b826:	4b13      	ldr	r3, [pc, #76]	; (800b874 <HAL_RCC_ClockConfig+0x264>)
 800b828:	689b      	ldr	r3, [r3, #8]
 800b82a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	691b      	ldr	r3, [r3, #16]
 800b832:	00db      	lsls	r3, r3, #3
 800b834:	490f      	ldr	r1, [pc, #60]	; (800b874 <HAL_RCC_ClockConfig+0x264>)
 800b836:	4313      	orrs	r3, r2
 800b838:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800b83a:	f000 f825 	bl	800b888 <HAL_RCC_GetSysClockFreq>
 800b83e:	4601      	mov	r1, r0
 800b840:	4b0c      	ldr	r3, [pc, #48]	; (800b874 <HAL_RCC_ClockConfig+0x264>)
 800b842:	689b      	ldr	r3, [r3, #8]
 800b844:	091b      	lsrs	r3, r3, #4
 800b846:	f003 030f 	and.w	r3, r3, #15
 800b84a:	4a0c      	ldr	r2, [pc, #48]	; (800b87c <HAL_RCC_ClockConfig+0x26c>)
 800b84c:	5cd3      	ldrb	r3, [r2, r3]
 800b84e:	f003 031f 	and.w	r3, r3, #31
 800b852:	fa21 f303 	lsr.w	r3, r1, r3
 800b856:	4a0a      	ldr	r2, [pc, #40]	; (800b880 <HAL_RCC_ClockConfig+0x270>)
 800b858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800b85a:	4b0a      	ldr	r3, [pc, #40]	; (800b884 <HAL_RCC_ClockConfig+0x274>)
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	4618      	mov	r0, r3
 800b860:	f7fc fdcc 	bl	80083fc <HAL_InitTick>
 800b864:	4603      	mov	r3, r0
}
 800b866:	4618      	mov	r0, r3
 800b868:	3718      	adds	r7, #24
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
 800b86e:	bf00      	nop
 800b870:	40022000 	.word	0x40022000
 800b874:	40021000 	.word	0x40021000
 800b878:	04c4b400 	.word	0x04c4b400
 800b87c:	080133d0 	.word	0x080133d0
 800b880:	20000ca0 	.word	0x20000ca0
 800b884:	20000ca4 	.word	0x20000ca4

0800b888 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b888:	b480      	push	{r7}
 800b88a:	b087      	sub	sp, #28
 800b88c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800b88e:	4b2c      	ldr	r3, [pc, #176]	; (800b940 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b890:	689b      	ldr	r3, [r3, #8]
 800b892:	f003 030c 	and.w	r3, r3, #12
 800b896:	2b04      	cmp	r3, #4
 800b898:	d102      	bne.n	800b8a0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800b89a:	4b2a      	ldr	r3, [pc, #168]	; (800b944 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b89c:	613b      	str	r3, [r7, #16]
 800b89e:	e047      	b.n	800b930 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800b8a0:	4b27      	ldr	r3, [pc, #156]	; (800b940 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b8a2:	689b      	ldr	r3, [r3, #8]
 800b8a4:	f003 030c 	and.w	r3, r3, #12
 800b8a8:	2b08      	cmp	r3, #8
 800b8aa:	d102      	bne.n	800b8b2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800b8ac:	4b26      	ldr	r3, [pc, #152]	; (800b948 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b8ae:	613b      	str	r3, [r7, #16]
 800b8b0:	e03e      	b.n	800b930 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800b8b2:	4b23      	ldr	r3, [pc, #140]	; (800b940 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	f003 030c 	and.w	r3, r3, #12
 800b8ba:	2b0c      	cmp	r3, #12
 800b8bc:	d136      	bne.n	800b92c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b8be:	4b20      	ldr	r3, [pc, #128]	; (800b940 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b8c0:	68db      	ldr	r3, [r3, #12]
 800b8c2:	f003 0303 	and.w	r3, r3, #3
 800b8c6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b8c8:	4b1d      	ldr	r3, [pc, #116]	; (800b940 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b8ca:	68db      	ldr	r3, [r3, #12]
 800b8cc:	091b      	lsrs	r3, r3, #4
 800b8ce:	f003 030f 	and.w	r3, r3, #15
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	2b03      	cmp	r3, #3
 800b8da:	d10c      	bne.n	800b8f6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b8dc:	4a1a      	ldr	r2, [pc, #104]	; (800b948 <HAL_RCC_GetSysClockFreq+0xc0>)
 800b8de:	68bb      	ldr	r3, [r7, #8]
 800b8e0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8e4:	4a16      	ldr	r2, [pc, #88]	; (800b940 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b8e6:	68d2      	ldr	r2, [r2, #12]
 800b8e8:	0a12      	lsrs	r2, r2, #8
 800b8ea:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b8ee:	fb02 f303 	mul.w	r3, r2, r3
 800b8f2:	617b      	str	r3, [r7, #20]
      break;
 800b8f4:	e00c      	b.n	800b910 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b8f6:	4a13      	ldr	r2, [pc, #76]	; (800b944 <HAL_RCC_GetSysClockFreq+0xbc>)
 800b8f8:	68bb      	ldr	r3, [r7, #8]
 800b8fa:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8fe:	4a10      	ldr	r2, [pc, #64]	; (800b940 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b900:	68d2      	ldr	r2, [r2, #12]
 800b902:	0a12      	lsrs	r2, r2, #8
 800b904:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b908:	fb02 f303 	mul.w	r3, r2, r3
 800b90c:	617b      	str	r3, [r7, #20]
      break;
 800b90e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b910:	4b0b      	ldr	r3, [pc, #44]	; (800b940 <HAL_RCC_GetSysClockFreq+0xb8>)
 800b912:	68db      	ldr	r3, [r3, #12]
 800b914:	0e5b      	lsrs	r3, r3, #25
 800b916:	f003 0303 	and.w	r3, r3, #3
 800b91a:	3301      	adds	r3, #1
 800b91c:	005b      	lsls	r3, r3, #1
 800b91e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800b920:	697a      	ldr	r2, [r7, #20]
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	fbb2 f3f3 	udiv	r3, r2, r3
 800b928:	613b      	str	r3, [r7, #16]
 800b92a:	e001      	b.n	800b930 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800b92c:	2300      	movs	r3, #0
 800b92e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800b930:	693b      	ldr	r3, [r7, #16]
}
 800b932:	4618      	mov	r0, r3
 800b934:	371c      	adds	r7, #28
 800b936:	46bd      	mov	sp, r7
 800b938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b93c:	4770      	bx	lr
 800b93e:	bf00      	nop
 800b940:	40021000 	.word	0x40021000
 800b944:	00f42400 	.word	0x00f42400
 800b948:	007a1200 	.word	0x007a1200

0800b94c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b94c:	b480      	push	{r7}
 800b94e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b950:	4b03      	ldr	r3, [pc, #12]	; (800b960 <HAL_RCC_GetHCLKFreq+0x14>)
 800b952:	681b      	ldr	r3, [r3, #0]
}
 800b954:	4618      	mov	r0, r3
 800b956:	46bd      	mov	sp, r7
 800b958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b95c:	4770      	bx	lr
 800b95e:	bf00      	nop
 800b960:	20000ca0 	.word	0x20000ca0

0800b964 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800b964:	b480      	push	{r7}
 800b966:	b087      	sub	sp, #28
 800b968:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800b96a:	4b1e      	ldr	r3, [pc, #120]	; (800b9e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b96c:	68db      	ldr	r3, [r3, #12]
 800b96e:	f003 0303 	and.w	r3, r3, #3
 800b972:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800b974:	4b1b      	ldr	r3, [pc, #108]	; (800b9e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b976:	68db      	ldr	r3, [r3, #12]
 800b978:	091b      	lsrs	r3, r3, #4
 800b97a:	f003 030f 	and.w	r3, r3, #15
 800b97e:	3301      	adds	r3, #1
 800b980:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800b982:	693b      	ldr	r3, [r7, #16]
 800b984:	2b03      	cmp	r3, #3
 800b986:	d10c      	bne.n	800b9a2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b988:	4a17      	ldr	r2, [pc, #92]	; (800b9e8 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b990:	4a14      	ldr	r2, [pc, #80]	; (800b9e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b992:	68d2      	ldr	r2, [r2, #12]
 800b994:	0a12      	lsrs	r2, r2, #8
 800b996:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b99a:	fb02 f303 	mul.w	r3, r2, r3
 800b99e:	617b      	str	r3, [r7, #20]
    break;
 800b9a0:	e00c      	b.n	800b9bc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800b9a2:	4a12      	ldr	r2, [pc, #72]	; (800b9ec <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9aa:	4a0e      	ldr	r2, [pc, #56]	; (800b9e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b9ac:	68d2      	ldr	r2, [r2, #12]
 800b9ae:	0a12      	lsrs	r2, r2, #8
 800b9b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b9b4:	fb02 f303 	mul.w	r3, r2, r3
 800b9b8:	617b      	str	r3, [r7, #20]
    break;
 800b9ba:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800b9bc:	4b09      	ldr	r3, [pc, #36]	; (800b9e4 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800b9be:	68db      	ldr	r3, [r3, #12]
 800b9c0:	0e5b      	lsrs	r3, r3, #25
 800b9c2:	f003 0303 	and.w	r3, r3, #3
 800b9c6:	3301      	adds	r3, #1
 800b9c8:	005b      	lsls	r3, r3, #1
 800b9ca:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800b9cc:	697a      	ldr	r2, [r7, #20]
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800b9d4:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800b9d6:	687b      	ldr	r3, [r7, #4]
}
 800b9d8:	4618      	mov	r0, r3
 800b9da:	371c      	adds	r7, #28
 800b9dc:	46bd      	mov	sp, r7
 800b9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9e2:	4770      	bx	lr
 800b9e4:	40021000 	.word	0x40021000
 800b9e8:	007a1200 	.word	0x007a1200
 800b9ec:	00f42400 	.word	0x00f42400

0800b9f0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b086      	sub	sp, #24
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800b9f8:	2300      	movs	r3, #0
 800b9fa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	f000 8098 	beq.w	800bb3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ba0e:	2300      	movs	r3, #0
 800ba10:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ba12:	4b43      	ldr	r3, [pc, #268]	; (800bb20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d10d      	bne.n	800ba3a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ba1e:	4b40      	ldr	r3, [pc, #256]	; (800bb20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba22:	4a3f      	ldr	r2, [pc, #252]	; (800bb20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba28:	6593      	str	r3, [r2, #88]	; 0x58
 800ba2a:	4b3d      	ldr	r3, [pc, #244]	; (800bb20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ba32:	60bb      	str	r3, [r7, #8]
 800ba34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ba36:	2301      	movs	r3, #1
 800ba38:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ba3a:	4b3a      	ldr	r3, [pc, #232]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	4a39      	ldr	r2, [pc, #228]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ba40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ba44:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ba46:	f7fc fd25 	bl	8008494 <HAL_GetTick>
 800ba4a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba4c:	e009      	b.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ba4e:	f7fc fd21 	bl	8008494 <HAL_GetTick>
 800ba52:	4602      	mov	r2, r0
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	1ad3      	subs	r3, r2, r3
 800ba58:	2b02      	cmp	r3, #2
 800ba5a:	d902      	bls.n	800ba62 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800ba5c:	2303      	movs	r3, #3
 800ba5e:	74fb      	strb	r3, [r7, #19]
        break;
 800ba60:	e005      	b.n	800ba6e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ba62:	4b30      	ldr	r3, [pc, #192]	; (800bb24 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d0ef      	beq.n	800ba4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800ba6e:	7cfb      	ldrb	r3, [r7, #19]
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d159      	bne.n	800bb28 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800ba74:	4b2a      	ldr	r3, [pc, #168]	; (800bb20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba7e:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800ba80:	697b      	ldr	r3, [r7, #20]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d01e      	beq.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ba8a:	697a      	ldr	r2, [r7, #20]
 800ba8c:	429a      	cmp	r2, r3
 800ba8e:	d019      	beq.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800ba90:	4b23      	ldr	r3, [pc, #140]	; (800bb20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ba9a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800ba9c:	4b20      	ldr	r3, [pc, #128]	; (800bb20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ba9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baa2:	4a1f      	ldr	r2, [pc, #124]	; (800bb20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800baa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800baa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800baac:	4b1c      	ldr	r3, [pc, #112]	; (800bb20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800baae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bab2:	4a1b      	ldr	r2, [pc, #108]	; (800bb20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bab4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bab8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800babc:	4a18      	ldr	r2, [pc, #96]	; (800bb20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800babe:	697b      	ldr	r3, [r7, #20]
 800bac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	f003 0301 	and.w	r3, r3, #1
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d016      	beq.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bace:	f7fc fce1 	bl	8008494 <HAL_GetTick>
 800bad2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800bad4:	e00b      	b.n	800baee <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bad6:	f7fc fcdd 	bl	8008494 <HAL_GetTick>
 800bada:	4602      	mov	r2, r0
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	1ad3      	subs	r3, r2, r3
 800bae0:	f241 3288 	movw	r2, #5000	; 0x1388
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d902      	bls.n	800baee <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800bae8:	2303      	movs	r3, #3
 800baea:	74fb      	strb	r3, [r7, #19]
            break;
 800baec:	e006      	b.n	800bafc <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800baee:	4b0c      	ldr	r3, [pc, #48]	; (800bb20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800baf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baf4:	f003 0302 	and.w	r3, r3, #2
 800baf8:	2b00      	cmp	r3, #0
 800bafa:	d0ec      	beq.n	800bad6 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800bafc:	7cfb      	ldrb	r3, [r7, #19]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d10b      	bne.n	800bb1a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bb02:	4b07      	ldr	r3, [pc, #28]	; (800bb20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb10:	4903      	ldr	r1, [pc, #12]	; (800bb20 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800bb12:	4313      	orrs	r3, r2
 800bb14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800bb18:	e008      	b.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800bb1a:	7cfb      	ldrb	r3, [r7, #19]
 800bb1c:	74bb      	strb	r3, [r7, #18]
 800bb1e:	e005      	b.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800bb20:	40021000 	.word	0x40021000
 800bb24:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb28:	7cfb      	ldrb	r3, [r7, #19]
 800bb2a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800bb2c:	7c7b      	ldrb	r3, [r7, #17]
 800bb2e:	2b01      	cmp	r3, #1
 800bb30:	d105      	bne.n	800bb3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800bb32:	4baf      	ldr	r3, [pc, #700]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb36:	4aae      	ldr	r2, [pc, #696]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800bb3c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	f003 0301 	and.w	r3, r3, #1
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d00a      	beq.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800bb4a:	4ba9      	ldr	r3, [pc, #676]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb50:	f023 0203 	bic.w	r2, r3, #3
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	49a5      	ldr	r1, [pc, #660]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb5a:	4313      	orrs	r3, r2
 800bb5c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f003 0302 	and.w	r3, r3, #2
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d00a      	beq.n	800bb82 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800bb6c:	4ba0      	ldr	r3, [pc, #640]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb72:	f023 020c 	bic.w	r2, r3, #12
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	689b      	ldr	r3, [r3, #8]
 800bb7a:	499d      	ldr	r1, [pc, #628]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb7c:	4313      	orrs	r3, r2
 800bb7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	f003 0304 	and.w	r3, r3, #4
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	d00a      	beq.n	800bba4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800bb8e:	4b98      	ldr	r3, [pc, #608]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bb94:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	68db      	ldr	r3, [r3, #12]
 800bb9c:	4994      	ldr	r1, [pc, #592]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bb9e:	4313      	orrs	r3, r2
 800bba0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	f003 0308 	and.w	r3, r3, #8
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d00a      	beq.n	800bbc6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800bbb0:	4b8f      	ldr	r3, [pc, #572]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bbb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbb6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	691b      	ldr	r3, [r3, #16]
 800bbbe:	498c      	ldr	r1, [pc, #560]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bbc0:	4313      	orrs	r3, r2
 800bbc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f003 0310 	and.w	r3, r3, #16
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	d00a      	beq.n	800bbe8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800bbd2:	4b87      	ldr	r3, [pc, #540]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bbd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	695b      	ldr	r3, [r3, #20]
 800bbe0:	4983      	ldr	r1, [pc, #524]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bbe2:	4313      	orrs	r3, r2
 800bbe4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	f003 0320 	and.w	r3, r3, #32
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d00a      	beq.n	800bc0a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bbf4:	4b7e      	ldr	r3, [pc, #504]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bbf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bbfa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	699b      	ldr	r3, [r3, #24]
 800bc02:	497b      	ldr	r1, [pc, #492]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc04:	4313      	orrs	r3, r2
 800bc06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	681b      	ldr	r3, [r3, #0]
 800bc0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	d00a      	beq.n	800bc2c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800bc16:	4b76      	ldr	r3, [pc, #472]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc1c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	69db      	ldr	r3, [r3, #28]
 800bc24:	4972      	ldr	r1, [pc, #456]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc26:	4313      	orrs	r3, r2
 800bc28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d00a      	beq.n	800bc4e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800bc38:	4b6d      	ldr	r3, [pc, #436]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc3e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	6a1b      	ldr	r3, [r3, #32]
 800bc46:	496a      	ldr	r1, [pc, #424]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc48:	4313      	orrs	r3, r2
 800bc4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d00a      	beq.n	800bc70 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800bc5a:	4b65      	ldr	r3, [pc, #404]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc68:	4961      	ldr	r1, [pc, #388]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc6a:	4313      	orrs	r3, r2
 800bc6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bc70:	687b      	ldr	r3, [r7, #4]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d00a      	beq.n	800bc92 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bc7c:	4b5c      	ldr	r3, [pc, #368]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bc82:	f023 0203 	bic.w	r2, r3, #3
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc8a:	4959      	ldr	r1, [pc, #356]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bc8c:	4313      	orrs	r3, r2
 800bc8e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d00a      	beq.n	800bcb4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bc9e:	4b54      	ldr	r3, [pc, #336]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bca4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcac:	4950      	ldr	r1, [pc, #320]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bcbc:	2b00      	cmp	r3, #0
 800bcbe:	d015      	beq.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bcc0:	4b4b      	ldr	r3, [pc, #300]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bcc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcc6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcce:	4948      	ldr	r1, [pc, #288]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bcd0:	4313      	orrs	r3, r2
 800bcd2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bcda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcde:	d105      	bne.n	800bcec <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bce0:	4b43      	ldr	r3, [pc, #268]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bce2:	68db      	ldr	r3, [r3, #12]
 800bce4:	4a42      	ldr	r2, [pc, #264]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bce6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bcea:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d015      	beq.n	800bd24 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800bcf8:	4b3d      	ldr	r3, [pc, #244]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bcfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcfe:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd06:	493a      	ldr	r1, [pc, #232]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd08:	4313      	orrs	r3, r2
 800bd0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800bd16:	d105      	bne.n	800bd24 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd18:	4b35      	ldr	r3, [pc, #212]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd1a:	68db      	ldr	r3, [r3, #12]
 800bd1c:	4a34      	ldr	r2, [pc, #208]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd22:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800bd2c:	2b00      	cmp	r3, #0
 800bd2e:	d015      	beq.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bd30:	4b2f      	ldr	r3, [pc, #188]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd36:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd3e:	492c      	ldr	r1, [pc, #176]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd40:	4313      	orrs	r3, r2
 800bd42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bd4a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800bd4e:	d105      	bne.n	800bd5c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd50:	4b27      	ldr	r3, [pc, #156]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd52:	68db      	ldr	r3, [r3, #12]
 800bd54:	4a26      	ldr	r2, [pc, #152]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd56:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd5a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d015      	beq.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bd68:	4b21      	ldr	r3, [pc, #132]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bd6e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd76:	491e      	ldr	r1, [pc, #120]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd78:	4313      	orrs	r3, r2
 800bd7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd82:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bd86:	d105      	bne.n	800bd94 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bd88:	4b19      	ldr	r3, [pc, #100]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd8a:	68db      	ldr	r3, [r3, #12]
 800bd8c:	4a18      	ldr	r2, [pc, #96]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bd8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bd92:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d015      	beq.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800bda0:	4b13      	ldr	r3, [pc, #76]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bda2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bda6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdae:	4910      	ldr	r1, [pc, #64]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdb0:	4313      	orrs	r3, r2
 800bdb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800bdbe:	d105      	bne.n	800bdcc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800bdc0:	4b0b      	ldr	r3, [pc, #44]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdc2:	68db      	ldr	r3, [r3, #12]
 800bdc4:	4a0a      	ldr	r2, [pc, #40]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdc6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bdca:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d018      	beq.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800bdd8:	4b05      	ldr	r3, [pc, #20]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bdda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdde:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bde6:	4902      	ldr	r1, [pc, #8]	; (800bdf0 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800bde8:	4313      	orrs	r3, r2
 800bdea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800bdee:	e001      	b.n	800bdf4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800bdf0:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bdf8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bdfc:	d105      	bne.n	800be0a <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800bdfe:	4b21      	ldr	r3, [pc, #132]	; (800be84 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be00:	68db      	ldr	r3, [r3, #12]
 800be02:	4a20      	ldr	r2, [pc, #128]	; (800be84 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be08:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800be12:	2b00      	cmp	r3, #0
 800be14:	d015      	beq.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800be16:	4b1b      	ldr	r3, [pc, #108]	; (800be84 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800be1c:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be24:	4917      	ldr	r1, [pc, #92]	; (800be84 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be26:	4313      	orrs	r3, r2
 800be28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800be2c:	687b      	ldr	r3, [r7, #4]
 800be2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800be30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be34:	d105      	bne.n	800be42 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800be36:	4b13      	ldr	r3, [pc, #76]	; (800be84 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be38:	68db      	ldr	r3, [r3, #12]
 800be3a:	4a12      	ldr	r2, [pc, #72]	; (800be84 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800be40:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d015      	beq.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800be4e:	4b0d      	ldr	r3, [pc, #52]	; (800be84 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800be54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be5c:	4909      	ldr	r1, [pc, #36]	; (800be84 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be5e:	4313      	orrs	r3, r2
 800be60:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800be6c:	d105      	bne.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800be6e:	4b05      	ldr	r3, [pc, #20]	; (800be84 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be70:	68db      	ldr	r3, [r3, #12]
 800be72:	4a04      	ldr	r2, [pc, #16]	; (800be84 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800be74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be78:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800be7a:	7cbb      	ldrb	r3, [r7, #18]
}
 800be7c:	4618      	mov	r0, r3
 800be7e:	3718      	adds	r7, #24
 800be80:	46bd      	mov	sp, r7
 800be82:	bd80      	pop	{r7, pc}
 800be84:	40021000 	.word	0x40021000

0800be88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800be88:	b580      	push	{r7, lr}
 800be8a:	b084      	sub	sp, #16
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d101      	bne.n	800be9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800be96:	2301      	movs	r3, #1
 800be98:	e084      	b.n	800bfa4 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	2200      	movs	r2, #0
 800be9e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bea6:	b2db      	uxtb	r3, r3
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d106      	bne.n	800beba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2200      	movs	r2, #0
 800beb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800beb4:	6878      	ldr	r0, [r7, #4]
 800beb6:	f7fb fd2b 	bl	8007910 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	2202      	movs	r2, #2
 800bebe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	681a      	ldr	r2, [r3, #0]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bed0:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	68db      	ldr	r3, [r3, #12]
 800bed6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800beda:	d902      	bls.n	800bee2 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800bedc:	2300      	movs	r3, #0
 800bede:	60fb      	str	r3, [r7, #12]
 800bee0:	e002      	b.n	800bee8 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800bee2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bee6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	68db      	ldr	r3, [r3, #12]
 800beec:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800bef0:	d007      	beq.n	800bf02 <HAL_SPI_Init+0x7a>
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	68db      	ldr	r3, [r3, #12]
 800bef6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800befa:	d002      	beq.n	800bf02 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	2200      	movs	r2, #0
 800bf00:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d10b      	bne.n	800bf22 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	68db      	ldr	r3, [r3, #12]
 800bf0e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800bf12:	d903      	bls.n	800bf1c <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2202      	movs	r2, #2
 800bf18:	631a      	str	r2, [r3, #48]	; 0x30
 800bf1a:	e002      	b.n	800bf22 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	2201      	movs	r2, #1
 800bf20:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	685a      	ldr	r2, [r3, #4]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	689b      	ldr	r3, [r3, #8]
 800bf2a:	431a      	orrs	r2, r3
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	691b      	ldr	r3, [r3, #16]
 800bf30:	431a      	orrs	r2, r3
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	695b      	ldr	r3, [r3, #20]
 800bf36:	431a      	orrs	r2, r3
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	699b      	ldr	r3, [r3, #24]
 800bf3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bf40:	431a      	orrs	r2, r3
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	69db      	ldr	r3, [r3, #28]
 800bf46:	431a      	orrs	r2, r3
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	6a1b      	ldr	r3, [r3, #32]
 800bf4c:	ea42 0103 	orr.w	r1, r2, r3
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	430a      	orrs	r2, r1
 800bf5a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	699b      	ldr	r3, [r3, #24]
 800bf60:	0c1b      	lsrs	r3, r3, #16
 800bf62:	f003 0204 	and.w	r2, r3, #4
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf6a:	431a      	orrs	r2, r3
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bf70:	431a      	orrs	r2, r3
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	68db      	ldr	r3, [r3, #12]
 800bf76:	ea42 0103 	orr.w	r1, r2, r3
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	681b      	ldr	r3, [r3, #0]
 800bf7e:	68fa      	ldr	r2, [r7, #12]
 800bf80:	430a      	orrs	r2, r1
 800bf82:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	69da      	ldr	r2, [r3, #28]
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800bf92:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	2200      	movs	r2, #0
 800bf98:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2201      	movs	r2, #1
 800bf9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800bfa2:	2300      	movs	r3, #0
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3710      	adds	r7, #16
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	bd80      	pop	{r7, pc}

0800bfac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bfac:	b580      	push	{r7, lr}
 800bfae:	b082      	sub	sp, #8
 800bfb0:	af00      	add	r7, sp, #0
 800bfb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d101      	bne.n	800bfbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bfba:	2301      	movs	r3, #1
 800bfbc:	e049      	b.n	800c052 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bfc4:	b2db      	uxtb	r3, r3
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d106      	bne.n	800bfd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	2200      	movs	r2, #0
 800bfce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bfd2:	6878      	ldr	r0, [r7, #4]
 800bfd4:	f7fc f914 	bl	8008200 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2202      	movs	r2, #2
 800bfdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	681a      	ldr	r2, [r3, #0]
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	3304      	adds	r3, #4
 800bfe8:	4619      	mov	r1, r3
 800bfea:	4610      	mov	r0, r2
 800bfec:	f000 fc38 	bl	800c860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	2201      	movs	r2, #1
 800bff4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	2201      	movs	r2, #1
 800bffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	2201      	movs	r2, #1
 800c004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2201      	movs	r2, #1
 800c00c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2201      	movs	r2, #1
 800c014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	2201      	movs	r2, #1
 800c01c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	2201      	movs	r2, #1
 800c024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	2201      	movs	r2, #1
 800c02c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	2201      	movs	r2, #1
 800c034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	2201      	movs	r2, #1
 800c03c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	2201      	movs	r2, #1
 800c044:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	2201      	movs	r2, #1
 800c04c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c050:	2300      	movs	r3, #0
}
 800c052:	4618      	mov	r0, r3
 800c054:	3708      	adds	r7, #8
 800c056:	46bd      	mov	sp, r7
 800c058:	bd80      	pop	{r7, pc}
	...

0800c05c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800c05c:	b480      	push	{r7}
 800c05e:	b085      	sub	sp, #20
 800c060:	af00      	add	r7, sp, #0
 800c062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c06a:	b2db      	uxtb	r3, r3
 800c06c:	2b01      	cmp	r3, #1
 800c06e:	d001      	beq.n	800c074 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800c070:	2301      	movs	r3, #1
 800c072:	e019      	b.n	800c0a8 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2202      	movs	r2, #2
 800c078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	689a      	ldr	r2, [r3, #8]
 800c082:	4b0c      	ldr	r3, [pc, #48]	; (800c0b4 <HAL_TIM_Base_Start+0x58>)
 800c084:	4013      	ands	r3, r2
 800c086:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c088:	68fb      	ldr	r3, [r7, #12]
 800c08a:	2b06      	cmp	r3, #6
 800c08c:	d00b      	beq.n	800c0a6 <HAL_TIM_Base_Start+0x4a>
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c094:	d007      	beq.n	800c0a6 <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	681b      	ldr	r3, [r3, #0]
 800c09a:	681a      	ldr	r2, [r3, #0]
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	681b      	ldr	r3, [r3, #0]
 800c0a0:	f042 0201 	orr.w	r2, r2, #1
 800c0a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c0a6:	2300      	movs	r3, #0
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3714      	adds	r7, #20
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b2:	4770      	bx	lr
 800c0b4:	00010007 	.word	0x00010007

0800c0b8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b083      	sub	sp, #12
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	6a1a      	ldr	r2, [r3, #32]
 800c0c6:	f241 1311 	movw	r3, #4369	; 0x1111
 800c0ca:	4013      	ands	r3, r2
 800c0cc:	2b00      	cmp	r3, #0
 800c0ce:	d10f      	bne.n	800c0f0 <HAL_TIM_Base_Stop+0x38>
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	6a1a      	ldr	r2, [r3, #32]
 800c0d6:	f244 4344 	movw	r3, #17476	; 0x4444
 800c0da:	4013      	ands	r3, r2
 800c0dc:	2b00      	cmp	r3, #0
 800c0de:	d107      	bne.n	800c0f0 <HAL_TIM_Base_Stop+0x38>
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	681a      	ldr	r2, [r3, #0]
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	f022 0201 	bic.w	r2, r2, #1
 800c0ee:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c0f0:	687b      	ldr	r3, [r7, #4]
 800c0f2:	2201      	movs	r2, #1
 800c0f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c0f8:	2300      	movs	r3, #0
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	370c      	adds	r7, #12
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr
	...

0800c108 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800c108:	b480      	push	{r7}
 800c10a:	b085      	sub	sp, #20
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c110:	687b      	ldr	r3, [r7, #4]
 800c112:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c116:	b2db      	uxtb	r3, r3
 800c118:	2b01      	cmp	r3, #1
 800c11a:	d001      	beq.n	800c120 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800c11c:	2301      	movs	r3, #1
 800c11e:	e021      	b.n	800c164 <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2202      	movs	r2, #2
 800c124:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	68da      	ldr	r2, [r3, #12]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	681b      	ldr	r3, [r3, #0]
 800c132:	f042 0201 	orr.w	r2, r2, #1
 800c136:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	689a      	ldr	r2, [r3, #8]
 800c13e:	4b0c      	ldr	r3, [pc, #48]	; (800c170 <HAL_TIM_Base_Start_IT+0x68>)
 800c140:	4013      	ands	r3, r2
 800c142:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	2b06      	cmp	r3, #6
 800c148:	d00b      	beq.n	800c162 <HAL_TIM_Base_Start_IT+0x5a>
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c150:	d007      	beq.n	800c162 <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	681a      	ldr	r2, [r3, #0]
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f042 0201 	orr.w	r2, r2, #1
 800c160:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c162:	2300      	movs	r3, #0
}
 800c164:	4618      	mov	r0, r3
 800c166:	3714      	adds	r7, #20
 800c168:	46bd      	mov	sp, r7
 800c16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c16e:	4770      	bx	lr
 800c170:	00010007 	.word	0x00010007

0800c174 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800c174:	b480      	push	{r7}
 800c176:	b083      	sub	sp, #12
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	68da      	ldr	r2, [r3, #12]
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f022 0201 	bic.w	r2, r2, #1
 800c18a:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	6a1a      	ldr	r2, [r3, #32]
 800c192:	f241 1311 	movw	r3, #4369	; 0x1111
 800c196:	4013      	ands	r3, r2
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d10f      	bne.n	800c1bc <HAL_TIM_Base_Stop_IT+0x48>
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	6a1a      	ldr	r2, [r3, #32]
 800c1a2:	f244 4344 	movw	r3, #17476	; 0x4444
 800c1a6:	4013      	ands	r3, r2
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d107      	bne.n	800c1bc <HAL_TIM_Base_Stop_IT+0x48>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	681a      	ldr	r2, [r3, #0]
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	f022 0201 	bic.w	r2, r2, #1
 800c1ba:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2201      	movs	r2, #1
 800c1c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800c1c4:	2300      	movs	r3, #0
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	370c      	adds	r7, #12
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d0:	4770      	bx	lr

0800c1d2 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800c1d2:	b580      	push	{r7, lr}
 800c1d4:	b086      	sub	sp, #24
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	6078      	str	r0, [r7, #4]
 800c1da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d101      	bne.n	800c1e6 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800c1e2:	2301      	movs	r3, #1
 800c1e4:	e097      	b.n	800c316 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c1e6:	687b      	ldr	r3, [r7, #4]
 800c1e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c1ec:	b2db      	uxtb	r3, r3
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d106      	bne.n	800c200 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f7fb ffb4 	bl	8008168 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2202      	movs	r2, #2
 800c204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	689b      	ldr	r3, [r3, #8]
 800c20e:	687a      	ldr	r2, [r7, #4]
 800c210:	6812      	ldr	r2, [r2, #0]
 800c212:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800c216:	f023 0307 	bic.w	r3, r3, #7
 800c21a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	681a      	ldr	r2, [r3, #0]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	3304      	adds	r3, #4
 800c224:	4619      	mov	r1, r3
 800c226:	4610      	mov	r0, r2
 800c228:	f000 fb1a 	bl	800c860 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	681b      	ldr	r3, [r3, #0]
 800c230:	689b      	ldr	r3, [r3, #8]
 800c232:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	699b      	ldr	r3, [r3, #24]
 800c23a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	6a1b      	ldr	r3, [r3, #32]
 800c242:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	681b      	ldr	r3, [r3, #0]
 800c248:	697a      	ldr	r2, [r7, #20]
 800c24a:	4313      	orrs	r3, r2
 800c24c:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800c24e:	693b      	ldr	r3, [r7, #16]
 800c250:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c254:	f023 0303 	bic.w	r3, r3, #3
 800c258:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	689a      	ldr	r2, [r3, #8]
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	699b      	ldr	r3, [r3, #24]
 800c262:	021b      	lsls	r3, r3, #8
 800c264:	4313      	orrs	r3, r2
 800c266:	693a      	ldr	r2, [r7, #16]
 800c268:	4313      	orrs	r3, r2
 800c26a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800c272:	f023 030c 	bic.w	r3, r3, #12
 800c276:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800c278:	693b      	ldr	r3, [r7, #16]
 800c27a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c27e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c282:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	68da      	ldr	r2, [r3, #12]
 800c288:	683b      	ldr	r3, [r7, #0]
 800c28a:	69db      	ldr	r3, [r3, #28]
 800c28c:	021b      	lsls	r3, r3, #8
 800c28e:	4313      	orrs	r3, r2
 800c290:	693a      	ldr	r2, [r7, #16]
 800c292:	4313      	orrs	r3, r2
 800c294:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800c296:	683b      	ldr	r3, [r7, #0]
 800c298:	691b      	ldr	r3, [r3, #16]
 800c29a:	011a      	lsls	r2, r3, #4
 800c29c:	683b      	ldr	r3, [r7, #0]
 800c29e:	6a1b      	ldr	r3, [r3, #32]
 800c2a0:	031b      	lsls	r3, r3, #12
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	693a      	ldr	r2, [r7, #16]
 800c2a6:	4313      	orrs	r3, r2
 800c2a8:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800c2b0:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800c2b8:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800c2ba:	683b      	ldr	r3, [r7, #0]
 800c2bc:	685a      	ldr	r2, [r3, #4]
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	695b      	ldr	r3, [r3, #20]
 800c2c2:	011b      	lsls	r3, r3, #4
 800c2c4:	4313      	orrs	r3, r2
 800c2c6:	68fa      	ldr	r2, [r7, #12]
 800c2c8:	4313      	orrs	r3, r2
 800c2ca:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	697a      	ldr	r2, [r7, #20]
 800c2d2:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	693a      	ldr	r2, [r7, #16]
 800c2da:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	68fa      	ldr	r2, [r7, #12]
 800c2e2:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2201      	movs	r2, #1
 800c2f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	2201      	movs	r2, #1
 800c300:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2201      	movs	r2, #1
 800c308:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	2201      	movs	r2, #1
 800c310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c314:	2300      	movs	r3, #0
}
 800c316:	4618      	mov	r0, r3
 800c318:	3718      	adds	r7, #24
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}

0800c31e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c31e:	b580      	push	{r7, lr}
 800c320:	b082      	sub	sp, #8
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	691b      	ldr	r3, [r3, #16]
 800c32c:	f003 0302 	and.w	r3, r3, #2
 800c330:	2b02      	cmp	r3, #2
 800c332:	d122      	bne.n	800c37a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	68db      	ldr	r3, [r3, #12]
 800c33a:	f003 0302 	and.w	r3, r3, #2
 800c33e:	2b02      	cmp	r3, #2
 800c340:	d11b      	bne.n	800c37a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f06f 0202 	mvn.w	r2, #2
 800c34a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	2201      	movs	r2, #1
 800c350:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	699b      	ldr	r3, [r3, #24]
 800c358:	f003 0303 	and.w	r3, r3, #3
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d003      	beq.n	800c368 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f000 fa5f 	bl	800c824 <HAL_TIM_IC_CaptureCallback>
 800c366:	e005      	b.n	800c374 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c368:	6878      	ldr	r0, [r7, #4]
 800c36a:	f000 fa51 	bl	800c810 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c36e:	6878      	ldr	r0, [r7, #4]
 800c370:	f000 fa62 	bl	800c838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2200      	movs	r2, #0
 800c378:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	691b      	ldr	r3, [r3, #16]
 800c380:	f003 0304 	and.w	r3, r3, #4
 800c384:	2b04      	cmp	r3, #4
 800c386:	d122      	bne.n	800c3ce <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	68db      	ldr	r3, [r3, #12]
 800c38e:	f003 0304 	and.w	r3, r3, #4
 800c392:	2b04      	cmp	r3, #4
 800c394:	d11b      	bne.n	800c3ce <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f06f 0204 	mvn.w	r2, #4
 800c39e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2202      	movs	r2, #2
 800c3a4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	681b      	ldr	r3, [r3, #0]
 800c3aa:	699b      	ldr	r3, [r3, #24]
 800c3ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d003      	beq.n	800c3bc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c3b4:	6878      	ldr	r0, [r7, #4]
 800c3b6:	f000 fa35 	bl	800c824 <HAL_TIM_IC_CaptureCallback>
 800c3ba:	e005      	b.n	800c3c8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f000 fa27 	bl	800c810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c3c2:	6878      	ldr	r0, [r7, #4]
 800c3c4:	f000 fa38 	bl	800c838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c3c8:	687b      	ldr	r3, [r7, #4]
 800c3ca:	2200      	movs	r2, #0
 800c3cc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	691b      	ldr	r3, [r3, #16]
 800c3d4:	f003 0308 	and.w	r3, r3, #8
 800c3d8:	2b08      	cmp	r3, #8
 800c3da:	d122      	bne.n	800c422 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	68db      	ldr	r3, [r3, #12]
 800c3e2:	f003 0308 	and.w	r3, r3, #8
 800c3e6:	2b08      	cmp	r3, #8
 800c3e8:	d11b      	bne.n	800c422 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800c3ea:	687b      	ldr	r3, [r7, #4]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	f06f 0208 	mvn.w	r2, #8
 800c3f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	2204      	movs	r2, #4
 800c3f8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	69db      	ldr	r3, [r3, #28]
 800c400:	f003 0303 	and.w	r3, r3, #3
 800c404:	2b00      	cmp	r3, #0
 800c406:	d003      	beq.n	800c410 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c408:	6878      	ldr	r0, [r7, #4]
 800c40a:	f000 fa0b 	bl	800c824 <HAL_TIM_IC_CaptureCallback>
 800c40e:	e005      	b.n	800c41c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c410:	6878      	ldr	r0, [r7, #4]
 800c412:	f000 f9fd 	bl	800c810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c416:	6878      	ldr	r0, [r7, #4]
 800c418:	f000 fa0e 	bl	800c838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	2200      	movs	r2, #0
 800c420:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	691b      	ldr	r3, [r3, #16]
 800c428:	f003 0310 	and.w	r3, r3, #16
 800c42c:	2b10      	cmp	r3, #16
 800c42e:	d122      	bne.n	800c476 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	681b      	ldr	r3, [r3, #0]
 800c434:	68db      	ldr	r3, [r3, #12]
 800c436:	f003 0310 	and.w	r3, r3, #16
 800c43a:	2b10      	cmp	r3, #16
 800c43c:	d11b      	bne.n	800c476 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	f06f 0210 	mvn.w	r2, #16
 800c446:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2208      	movs	r2, #8
 800c44c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	69db      	ldr	r3, [r3, #28]
 800c454:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d003      	beq.n	800c464 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c45c:	6878      	ldr	r0, [r7, #4]
 800c45e:	f000 f9e1 	bl	800c824 <HAL_TIM_IC_CaptureCallback>
 800c462:	e005      	b.n	800c470 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f000 f9d3 	bl	800c810 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f000 f9e4 	bl	800c838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c470:	687b      	ldr	r3, [r7, #4]
 800c472:	2200      	movs	r2, #0
 800c474:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	691b      	ldr	r3, [r3, #16]
 800c47c:	f003 0301 	and.w	r3, r3, #1
 800c480:	2b01      	cmp	r3, #1
 800c482:	d10e      	bne.n	800c4a2 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	68db      	ldr	r3, [r3, #12]
 800c48a:	f003 0301 	and.w	r3, r3, #1
 800c48e:	2b01      	cmp	r3, #1
 800c490:	d107      	bne.n	800c4a2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	f06f 0201 	mvn.w	r2, #1
 800c49a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c49c:	6878      	ldr	r0, [r7, #4]
 800c49e:	f000 f9ad 	bl	800c7fc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	691b      	ldr	r3, [r3, #16]
 800c4a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4ac:	2b80      	cmp	r3, #128	; 0x80
 800c4ae:	d10e      	bne.n	800c4ce <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	68db      	ldr	r3, [r3, #12]
 800c4b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4ba:	2b80      	cmp	r3, #128	; 0x80
 800c4bc:	d107      	bne.n	800c4ce <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c4c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f000 fc5f 	bl	800cd8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	691b      	ldr	r3, [r3, #16]
 800c4d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4dc:	d10e      	bne.n	800c4fc <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	68db      	ldr	r3, [r3, #12]
 800c4e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4e8:	2b80      	cmp	r3, #128	; 0x80
 800c4ea:	d107      	bne.n	800c4fc <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c4f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f000 fc52 	bl	800cda0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	681b      	ldr	r3, [r3, #0]
 800c500:	691b      	ldr	r3, [r3, #16]
 800c502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c506:	2b40      	cmp	r3, #64	; 0x40
 800c508:	d10e      	bne.n	800c528 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	68db      	ldr	r3, [r3, #12]
 800c510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c514:	2b40      	cmp	r3, #64	; 0x40
 800c516:	d107      	bne.n	800c528 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c520:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c522:	6878      	ldr	r0, [r7, #4]
 800c524:	f000 f992 	bl	800c84c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	691b      	ldr	r3, [r3, #16]
 800c52e:	f003 0320 	and.w	r3, r3, #32
 800c532:	2b20      	cmp	r3, #32
 800c534:	d10e      	bne.n	800c554 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	68db      	ldr	r3, [r3, #12]
 800c53c:	f003 0320 	and.w	r3, r3, #32
 800c540:	2b20      	cmp	r3, #32
 800c542:	d107      	bne.n	800c554 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f06f 0220 	mvn.w	r2, #32
 800c54c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c54e:	6878      	ldr	r0, [r7, #4]
 800c550:	f000 fc12 	bl	800cd78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	691b      	ldr	r3, [r3, #16]
 800c55a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c55e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c562:	d10f      	bne.n	800c584 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	681b      	ldr	r3, [r3, #0]
 800c568:	68db      	ldr	r3, [r3, #12]
 800c56a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800c56e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c572:	d107      	bne.n	800c584 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800c57c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800c57e:	6878      	ldr	r0, [r7, #4]
 800c580:	f000 fc18 	bl	800cdb4 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	691b      	ldr	r3, [r3, #16]
 800c58a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c58e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c592:	d10f      	bne.n	800c5b4 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	68db      	ldr	r3, [r3, #12]
 800c59a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800c59e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c5a2:	d107      	bne.n	800c5b4 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800c5ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 fc0a 	bl	800cdc8 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	691b      	ldr	r3, [r3, #16]
 800c5ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c5be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c5c2:	d10f      	bne.n	800c5e4 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	68db      	ldr	r3, [r3, #12]
 800c5ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c5ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c5d2:	d107      	bne.n	800c5e4 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	681b      	ldr	r3, [r3, #0]
 800c5d8:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800c5dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800c5de:	6878      	ldr	r0, [r7, #4]
 800c5e0:	f000 fbfc 	bl	800cddc <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	691b      	ldr	r3, [r3, #16]
 800c5ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c5ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c5f2:	d10f      	bne.n	800c614 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	68db      	ldr	r3, [r3, #12]
 800c5fa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c5fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c602:	d107      	bne.n	800c614 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800c60c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800c60e:	6878      	ldr	r0, [r7, #4]
 800c610:	f000 fbee 	bl	800cdf0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c614:	bf00      	nop
 800c616:	3708      	adds	r7, #8
 800c618:	46bd      	mov	sp, r7
 800c61a:	bd80      	pop	{r7, pc}

0800c61c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c61c:	b580      	push	{r7, lr}
 800c61e:	b084      	sub	sp, #16
 800c620:	af00      	add	r7, sp, #0
 800c622:	6078      	str	r0, [r7, #4]
 800c624:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c62c:	2b01      	cmp	r3, #1
 800c62e:	d101      	bne.n	800c634 <HAL_TIM_ConfigClockSource+0x18>
 800c630:	2302      	movs	r3, #2
 800c632:	e0d2      	b.n	800c7da <HAL_TIM_ConfigClockSource+0x1be>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2201      	movs	r2, #1
 800c638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2202      	movs	r2, #2
 800c640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	689b      	ldr	r3, [r3, #8]
 800c64a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800c652:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c656:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c65e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	681b      	ldr	r3, [r3, #0]
 800c664:	68fa      	ldr	r2, [r7, #12]
 800c666:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c668:	683b      	ldr	r3, [r7, #0]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c670:	f000 80a9 	beq.w	800c7c6 <HAL_TIM_ConfigClockSource+0x1aa>
 800c674:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c678:	d81a      	bhi.n	800c6b0 <HAL_TIM_ConfigClockSource+0x94>
 800c67a:	2b30      	cmp	r3, #48	; 0x30
 800c67c:	f000 809a 	beq.w	800c7b4 <HAL_TIM_ConfigClockSource+0x198>
 800c680:	2b30      	cmp	r3, #48	; 0x30
 800c682:	d809      	bhi.n	800c698 <HAL_TIM_ConfigClockSource+0x7c>
 800c684:	2b10      	cmp	r3, #16
 800c686:	f000 8095 	beq.w	800c7b4 <HAL_TIM_ConfigClockSource+0x198>
 800c68a:	2b20      	cmp	r3, #32
 800c68c:	f000 8092 	beq.w	800c7b4 <HAL_TIM_ConfigClockSource+0x198>
 800c690:	2b00      	cmp	r3, #0
 800c692:	f000 808f 	beq.w	800c7b4 <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800c696:	e097      	b.n	800c7c8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c698:	2b50      	cmp	r3, #80	; 0x50
 800c69a:	d05b      	beq.n	800c754 <HAL_TIM_ConfigClockSource+0x138>
 800c69c:	2b50      	cmp	r3, #80	; 0x50
 800c69e:	d802      	bhi.n	800c6a6 <HAL_TIM_ConfigClockSource+0x8a>
 800c6a0:	2b40      	cmp	r3, #64	; 0x40
 800c6a2:	d077      	beq.n	800c794 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800c6a4:	e090      	b.n	800c7c8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c6a6:	2b60      	cmp	r3, #96	; 0x60
 800c6a8:	d064      	beq.n	800c774 <HAL_TIM_ConfigClockSource+0x158>
 800c6aa:	2b70      	cmp	r3, #112	; 0x70
 800c6ac:	d028      	beq.n	800c700 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800c6ae:	e08b      	b.n	800c7c8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c6b0:	4a4c      	ldr	r2, [pc, #304]	; (800c7e4 <HAL_TIM_ConfigClockSource+0x1c8>)
 800c6b2:	4293      	cmp	r3, r2
 800c6b4:	d07e      	beq.n	800c7b4 <HAL_TIM_ConfigClockSource+0x198>
 800c6b6:	4a4b      	ldr	r2, [pc, #300]	; (800c7e4 <HAL_TIM_ConfigClockSource+0x1c8>)
 800c6b8:	4293      	cmp	r3, r2
 800c6ba:	d810      	bhi.n	800c6de <HAL_TIM_ConfigClockSource+0xc2>
 800c6bc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6c0:	d078      	beq.n	800c7b4 <HAL_TIM_ConfigClockSource+0x198>
 800c6c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c6c6:	d803      	bhi.n	800c6d0 <HAL_TIM_ConfigClockSource+0xb4>
 800c6c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6cc:	d02f      	beq.n	800c72e <HAL_TIM_ConfigClockSource+0x112>
      break;
 800c6ce:	e07b      	b.n	800c7c8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c6d0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c6d4:	d06e      	beq.n	800c7b4 <HAL_TIM_ConfigClockSource+0x198>
 800c6d6:	4a44      	ldr	r2, [pc, #272]	; (800c7e8 <HAL_TIM_ConfigClockSource+0x1cc>)
 800c6d8:	4293      	cmp	r3, r2
 800c6da:	d06b      	beq.n	800c7b4 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c6dc:	e074      	b.n	800c7c8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c6de:	4a43      	ldr	r2, [pc, #268]	; (800c7ec <HAL_TIM_ConfigClockSource+0x1d0>)
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	d067      	beq.n	800c7b4 <HAL_TIM_ConfigClockSource+0x198>
 800c6e4:	4a41      	ldr	r2, [pc, #260]	; (800c7ec <HAL_TIM_ConfigClockSource+0x1d0>)
 800c6e6:	4293      	cmp	r3, r2
 800c6e8:	d803      	bhi.n	800c6f2 <HAL_TIM_ConfigClockSource+0xd6>
 800c6ea:	4a41      	ldr	r2, [pc, #260]	; (800c7f0 <HAL_TIM_ConfigClockSource+0x1d4>)
 800c6ec:	4293      	cmp	r3, r2
 800c6ee:	d061      	beq.n	800c7b4 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c6f0:	e06a      	b.n	800c7c8 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800c6f2:	4a40      	ldr	r2, [pc, #256]	; (800c7f4 <HAL_TIM_ConfigClockSource+0x1d8>)
 800c6f4:	4293      	cmp	r3, r2
 800c6f6:	d05d      	beq.n	800c7b4 <HAL_TIM_ConfigClockSource+0x198>
 800c6f8:	4a3f      	ldr	r2, [pc, #252]	; (800c7f8 <HAL_TIM_ConfigClockSource+0x1dc>)
 800c6fa:	4293      	cmp	r3, r2
 800c6fc:	d05a      	beq.n	800c7b4 <HAL_TIM_ConfigClockSource+0x198>
      break;
 800c6fe:	e063      	b.n	800c7c8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6818      	ldr	r0, [r3, #0]
 800c704:	683b      	ldr	r3, [r7, #0]
 800c706:	6899      	ldr	r1, [r3, #8]
 800c708:	683b      	ldr	r3, [r7, #0]
 800c70a:	685a      	ldr	r2, [r3, #4]
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	68db      	ldr	r3, [r3, #12]
 800c710:	f000 f9ca 	bl	800caa8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	689b      	ldr	r3, [r3, #8]
 800c71a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c722:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	68fa      	ldr	r2, [r7, #12]
 800c72a:	609a      	str	r2, [r3, #8]
      break;
 800c72c:	e04c      	b.n	800c7c8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6818      	ldr	r0, [r3, #0]
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	6899      	ldr	r1, [r3, #8]
 800c736:	683b      	ldr	r3, [r7, #0]
 800c738:	685a      	ldr	r2, [r3, #4]
 800c73a:	683b      	ldr	r3, [r7, #0]
 800c73c:	68db      	ldr	r3, [r3, #12]
 800c73e:	f000 f9b3 	bl	800caa8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	689a      	ldr	r2, [r3, #8]
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c750:	609a      	str	r2, [r3, #8]
      break;
 800c752:	e039      	b.n	800c7c8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6818      	ldr	r0, [r3, #0]
 800c758:	683b      	ldr	r3, [r7, #0]
 800c75a:	6859      	ldr	r1, [r3, #4]
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	68db      	ldr	r3, [r3, #12]
 800c760:	461a      	mov	r2, r3
 800c762:	f000 f925 	bl	800c9b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	2150      	movs	r1, #80	; 0x50
 800c76c:	4618      	mov	r0, r3
 800c76e:	f000 f97e 	bl	800ca6e <TIM_ITRx_SetConfig>
      break;
 800c772:	e029      	b.n	800c7c8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	6818      	ldr	r0, [r3, #0]
 800c778:	683b      	ldr	r3, [r7, #0]
 800c77a:	6859      	ldr	r1, [r3, #4]
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	68db      	ldr	r3, [r3, #12]
 800c780:	461a      	mov	r2, r3
 800c782:	f000 f944 	bl	800ca0e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	2160      	movs	r1, #96	; 0x60
 800c78c:	4618      	mov	r0, r3
 800c78e:	f000 f96e 	bl	800ca6e <TIM_ITRx_SetConfig>
      break;
 800c792:	e019      	b.n	800c7c8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	6818      	ldr	r0, [r3, #0]
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	6859      	ldr	r1, [r3, #4]
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	68db      	ldr	r3, [r3, #12]
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	f000 f905 	bl	800c9b0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	2140      	movs	r1, #64	; 0x40
 800c7ac:	4618      	mov	r0, r3
 800c7ae:	f000 f95e 	bl	800ca6e <TIM_ITRx_SetConfig>
      break;
 800c7b2:	e009      	b.n	800c7c8 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c7b4:	687b      	ldr	r3, [r7, #4]
 800c7b6:	681a      	ldr	r2, [r3, #0]
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	4619      	mov	r1, r3
 800c7be:	4610      	mov	r0, r2
 800c7c0:	f000 f955 	bl	800ca6e <TIM_ITRx_SetConfig>
      break;
 800c7c4:	e000      	b.n	800c7c8 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800c7c6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2201      	movs	r2, #1
 800c7cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c7d8:	2300      	movs	r3, #0
}
 800c7da:	4618      	mov	r0, r3
 800c7dc:	3710      	adds	r7, #16
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	bd80      	pop	{r7, pc}
 800c7e2:	bf00      	nop
 800c7e4:	00100030 	.word	0x00100030
 800c7e8:	00100020 	.word	0x00100020
 800c7ec:	00100050 	.word	0x00100050
 800c7f0:	00100040 	.word	0x00100040
 800c7f4:	00100060 	.word	0x00100060
 800c7f8:	00100070 	.word	0x00100070

0800c7fc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c7fc:	b480      	push	{r7}
 800c7fe:	b083      	sub	sp, #12
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800c804:	bf00      	nop
 800c806:	370c      	adds	r7, #12
 800c808:	46bd      	mov	sp, r7
 800c80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c80e:	4770      	bx	lr

0800c810 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c810:	b480      	push	{r7}
 800c812:	b083      	sub	sp, #12
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c818:	bf00      	nop
 800c81a:	370c      	adds	r7, #12
 800c81c:	46bd      	mov	sp, r7
 800c81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c822:	4770      	bx	lr

0800c824 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c824:	b480      	push	{r7}
 800c826:	b083      	sub	sp, #12
 800c828:	af00      	add	r7, sp, #0
 800c82a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c82c:	bf00      	nop
 800c82e:	370c      	adds	r7, #12
 800c830:	46bd      	mov	sp, r7
 800c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c836:	4770      	bx	lr

0800c838 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c838:	b480      	push	{r7}
 800c83a:	b083      	sub	sp, #12
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c840:	bf00      	nop
 800c842:	370c      	adds	r7, #12
 800c844:	46bd      	mov	sp, r7
 800c846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c84a:	4770      	bx	lr

0800c84c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c84c:	b480      	push	{r7}
 800c84e:	b083      	sub	sp, #12
 800c850:	af00      	add	r7, sp, #0
 800c852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c854:	bf00      	nop
 800c856:	370c      	adds	r7, #12
 800c858:	46bd      	mov	sp, r7
 800c85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85e:	4770      	bx	lr

0800c860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800c860:	b480      	push	{r7}
 800c862:	b085      	sub	sp, #20
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]
 800c868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	4a46      	ldr	r2, [pc, #280]	; (800c98c <TIM_Base_SetConfig+0x12c>)
 800c874:	4293      	cmp	r3, r2
 800c876:	d017      	beq.n	800c8a8 <TIM_Base_SetConfig+0x48>
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c87e:	d013      	beq.n	800c8a8 <TIM_Base_SetConfig+0x48>
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	4a43      	ldr	r2, [pc, #268]	; (800c990 <TIM_Base_SetConfig+0x130>)
 800c884:	4293      	cmp	r3, r2
 800c886:	d00f      	beq.n	800c8a8 <TIM_Base_SetConfig+0x48>
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	4a42      	ldr	r2, [pc, #264]	; (800c994 <TIM_Base_SetConfig+0x134>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d00b      	beq.n	800c8a8 <TIM_Base_SetConfig+0x48>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	4a41      	ldr	r2, [pc, #260]	; (800c998 <TIM_Base_SetConfig+0x138>)
 800c894:	4293      	cmp	r3, r2
 800c896:	d007      	beq.n	800c8a8 <TIM_Base_SetConfig+0x48>
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	4a40      	ldr	r2, [pc, #256]	; (800c99c <TIM_Base_SetConfig+0x13c>)
 800c89c:	4293      	cmp	r3, r2
 800c89e:	d003      	beq.n	800c8a8 <TIM_Base_SetConfig+0x48>
 800c8a0:	687b      	ldr	r3, [r7, #4]
 800c8a2:	4a3f      	ldr	r2, [pc, #252]	; (800c9a0 <TIM_Base_SetConfig+0x140>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d108      	bne.n	800c8ba <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c8ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	685b      	ldr	r3, [r3, #4]
 800c8b4:	68fa      	ldr	r2, [r7, #12]
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	4a33      	ldr	r2, [pc, #204]	; (800c98c <TIM_Base_SetConfig+0x12c>)
 800c8be:	4293      	cmp	r3, r2
 800c8c0:	d023      	beq.n	800c90a <TIM_Base_SetConfig+0xaa>
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c8c8:	d01f      	beq.n	800c90a <TIM_Base_SetConfig+0xaa>
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	4a30      	ldr	r2, [pc, #192]	; (800c990 <TIM_Base_SetConfig+0x130>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d01b      	beq.n	800c90a <TIM_Base_SetConfig+0xaa>
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	4a2f      	ldr	r2, [pc, #188]	; (800c994 <TIM_Base_SetConfig+0x134>)
 800c8d6:	4293      	cmp	r3, r2
 800c8d8:	d017      	beq.n	800c90a <TIM_Base_SetConfig+0xaa>
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	4a2e      	ldr	r2, [pc, #184]	; (800c998 <TIM_Base_SetConfig+0x138>)
 800c8de:	4293      	cmp	r3, r2
 800c8e0:	d013      	beq.n	800c90a <TIM_Base_SetConfig+0xaa>
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	4a2d      	ldr	r2, [pc, #180]	; (800c99c <TIM_Base_SetConfig+0x13c>)
 800c8e6:	4293      	cmp	r3, r2
 800c8e8:	d00f      	beq.n	800c90a <TIM_Base_SetConfig+0xaa>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	4a2d      	ldr	r2, [pc, #180]	; (800c9a4 <TIM_Base_SetConfig+0x144>)
 800c8ee:	4293      	cmp	r3, r2
 800c8f0:	d00b      	beq.n	800c90a <TIM_Base_SetConfig+0xaa>
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	4a2c      	ldr	r2, [pc, #176]	; (800c9a8 <TIM_Base_SetConfig+0x148>)
 800c8f6:	4293      	cmp	r3, r2
 800c8f8:	d007      	beq.n	800c90a <TIM_Base_SetConfig+0xaa>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	4a2b      	ldr	r2, [pc, #172]	; (800c9ac <TIM_Base_SetConfig+0x14c>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d003      	beq.n	800c90a <TIM_Base_SetConfig+0xaa>
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	4a26      	ldr	r2, [pc, #152]	; (800c9a0 <TIM_Base_SetConfig+0x140>)
 800c906:	4293      	cmp	r3, r2
 800c908:	d108      	bne.n	800c91c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c910:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c912:	683b      	ldr	r3, [r7, #0]
 800c914:	68db      	ldr	r3, [r3, #12]
 800c916:	68fa      	ldr	r2, [r7, #12]
 800c918:	4313      	orrs	r3, r2
 800c91a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c922:	683b      	ldr	r3, [r7, #0]
 800c924:	695b      	ldr	r3, [r3, #20]
 800c926:	4313      	orrs	r3, r2
 800c928:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	68fa      	ldr	r2, [r7, #12]
 800c92e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	689a      	ldr	r2, [r3, #8]
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c938:	683b      	ldr	r3, [r7, #0]
 800c93a:	681a      	ldr	r2, [r3, #0]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	4a12      	ldr	r2, [pc, #72]	; (800c98c <TIM_Base_SetConfig+0x12c>)
 800c944:	4293      	cmp	r3, r2
 800c946:	d013      	beq.n	800c970 <TIM_Base_SetConfig+0x110>
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	4a14      	ldr	r2, [pc, #80]	; (800c99c <TIM_Base_SetConfig+0x13c>)
 800c94c:	4293      	cmp	r3, r2
 800c94e:	d00f      	beq.n	800c970 <TIM_Base_SetConfig+0x110>
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	4a14      	ldr	r2, [pc, #80]	; (800c9a4 <TIM_Base_SetConfig+0x144>)
 800c954:	4293      	cmp	r3, r2
 800c956:	d00b      	beq.n	800c970 <TIM_Base_SetConfig+0x110>
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	4a13      	ldr	r2, [pc, #76]	; (800c9a8 <TIM_Base_SetConfig+0x148>)
 800c95c:	4293      	cmp	r3, r2
 800c95e:	d007      	beq.n	800c970 <TIM_Base_SetConfig+0x110>
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	4a12      	ldr	r2, [pc, #72]	; (800c9ac <TIM_Base_SetConfig+0x14c>)
 800c964:	4293      	cmp	r3, r2
 800c966:	d003      	beq.n	800c970 <TIM_Base_SetConfig+0x110>
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	4a0d      	ldr	r2, [pc, #52]	; (800c9a0 <TIM_Base_SetConfig+0x140>)
 800c96c:	4293      	cmp	r3, r2
 800c96e:	d103      	bne.n	800c978 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c970:	683b      	ldr	r3, [r7, #0]
 800c972:	691a      	ldr	r2, [r3, #16]
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2201      	movs	r2, #1
 800c97c:	615a      	str	r2, [r3, #20]
}
 800c97e:	bf00      	nop
 800c980:	3714      	adds	r7, #20
 800c982:	46bd      	mov	sp, r7
 800c984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c988:	4770      	bx	lr
 800c98a:	bf00      	nop
 800c98c:	40012c00 	.word	0x40012c00
 800c990:	40000400 	.word	0x40000400
 800c994:	40000800 	.word	0x40000800
 800c998:	40000c00 	.word	0x40000c00
 800c99c:	40013400 	.word	0x40013400
 800c9a0:	40015000 	.word	0x40015000
 800c9a4:	40014000 	.word	0x40014000
 800c9a8:	40014400 	.word	0x40014400
 800c9ac:	40014800 	.word	0x40014800

0800c9b0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b087      	sub	sp, #28
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	60f8      	str	r0, [r7, #12]
 800c9b8:	60b9      	str	r1, [r7, #8]
 800c9ba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	6a1b      	ldr	r3, [r3, #32]
 800c9c0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	6a1b      	ldr	r3, [r3, #32]
 800c9c6:	f023 0201 	bic.w	r2, r3, #1
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	699b      	ldr	r3, [r3, #24]
 800c9d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c9d4:	693b      	ldr	r3, [r7, #16]
 800c9d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c9da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	011b      	lsls	r3, r3, #4
 800c9e0:	693a      	ldr	r2, [r7, #16]
 800c9e2:	4313      	orrs	r3, r2
 800c9e4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c9e6:	697b      	ldr	r3, [r7, #20]
 800c9e8:	f023 030a 	bic.w	r3, r3, #10
 800c9ec:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c9ee:	697a      	ldr	r2, [r7, #20]
 800c9f0:	68bb      	ldr	r3, [r7, #8]
 800c9f2:	4313      	orrs	r3, r2
 800c9f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	693a      	ldr	r2, [r7, #16]
 800c9fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	697a      	ldr	r2, [r7, #20]
 800ca00:	621a      	str	r2, [r3, #32]
}
 800ca02:	bf00      	nop
 800ca04:	371c      	adds	r7, #28
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr

0800ca0e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ca0e:	b480      	push	{r7}
 800ca10:	b087      	sub	sp, #28
 800ca12:	af00      	add	r7, sp, #0
 800ca14:	60f8      	str	r0, [r7, #12]
 800ca16:	60b9      	str	r1, [r7, #8]
 800ca18:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	6a1b      	ldr	r3, [r3, #32]
 800ca1e:	f023 0210 	bic.w	r2, r3, #16
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	699b      	ldr	r3, [r3, #24]
 800ca2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	6a1b      	ldr	r3, [r3, #32]
 800ca30:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ca38:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	031b      	lsls	r3, r3, #12
 800ca3e:	697a      	ldr	r2, [r7, #20]
 800ca40:	4313      	orrs	r3, r2
 800ca42:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ca44:	693b      	ldr	r3, [r7, #16]
 800ca46:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ca4a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ca4c:	68bb      	ldr	r3, [r7, #8]
 800ca4e:	011b      	lsls	r3, r3, #4
 800ca50:	693a      	ldr	r2, [r7, #16]
 800ca52:	4313      	orrs	r3, r2
 800ca54:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	697a      	ldr	r2, [r7, #20]
 800ca5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ca5c:	68fb      	ldr	r3, [r7, #12]
 800ca5e:	693a      	ldr	r2, [r7, #16]
 800ca60:	621a      	str	r2, [r3, #32]
}
 800ca62:	bf00      	nop
 800ca64:	371c      	adds	r7, #28
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr

0800ca6e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ca6e:	b480      	push	{r7}
 800ca70:	b085      	sub	sp, #20
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
 800ca76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	689b      	ldr	r3, [r3, #8]
 800ca7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800ca84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ca88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ca8a:	683a      	ldr	r2, [r7, #0]
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	4313      	orrs	r3, r2
 800ca90:	f043 0307 	orr.w	r3, r3, #7
 800ca94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	68fa      	ldr	r2, [r7, #12]
 800ca9a:	609a      	str	r2, [r3, #8]
}
 800ca9c:	bf00      	nop
 800ca9e:	3714      	adds	r7, #20
 800caa0:	46bd      	mov	sp, r7
 800caa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caa6:	4770      	bx	lr

0800caa8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800caa8:	b480      	push	{r7}
 800caaa:	b087      	sub	sp, #28
 800caac:	af00      	add	r7, sp, #0
 800caae:	60f8      	str	r0, [r7, #12]
 800cab0:	60b9      	str	r1, [r7, #8]
 800cab2:	607a      	str	r2, [r7, #4]
 800cab4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800cab6:	68fb      	ldr	r3, [r7, #12]
 800cab8:	689b      	ldr	r3, [r3, #8]
 800caba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cabc:	697b      	ldr	r3, [r7, #20]
 800cabe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800cac2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800cac4:	683b      	ldr	r3, [r7, #0]
 800cac6:	021a      	lsls	r2, r3, #8
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	431a      	orrs	r2, r3
 800cacc:	68bb      	ldr	r3, [r7, #8]
 800cace:	4313      	orrs	r3, r2
 800cad0:	697a      	ldr	r2, [r7, #20]
 800cad2:	4313      	orrs	r3, r2
 800cad4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	697a      	ldr	r2, [r7, #20]
 800cada:	609a      	str	r2, [r3, #8]
}
 800cadc:	bf00      	nop
 800cade:	371c      	adds	r7, #28
 800cae0:	46bd      	mov	sp, r7
 800cae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cae6:	4770      	bx	lr

0800cae8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cae8:	b480      	push	{r7}
 800caea:	b085      	sub	sp, #20
 800caec:	af00      	add	r7, sp, #0
 800caee:	6078      	str	r0, [r7, #4]
 800caf0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800caf8:	2b01      	cmp	r3, #1
 800cafa:	d101      	bne.n	800cb00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cafc:	2302      	movs	r3, #2
 800cafe:	e074      	b.n	800cbea <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2201      	movs	r2, #1
 800cb04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	2202      	movs	r2, #2
 800cb0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	685b      	ldr	r3, [r3, #4]
 800cb16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	689b      	ldr	r3, [r3, #8]
 800cb1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	4a34      	ldr	r2, [pc, #208]	; (800cbf8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d009      	beq.n	800cb3e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cb2a:	687b      	ldr	r3, [r7, #4]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	4a33      	ldr	r2, [pc, #204]	; (800cbfc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d004      	beq.n	800cb3e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	4a31      	ldr	r2, [pc, #196]	; (800cc00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	d108      	bne.n	800cb50 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800cb3e:	68fb      	ldr	r3, [r7, #12]
 800cb40:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800cb44:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800cb46:	683b      	ldr	r3, [r7, #0]
 800cb48:	685b      	ldr	r3, [r3, #4]
 800cb4a:	68fa      	ldr	r2, [r7, #12]
 800cb4c:	4313      	orrs	r3, r2
 800cb4e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800cb56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800cb5a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cb5c:	683b      	ldr	r3, [r7, #0]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	68fa      	ldr	r2, [r7, #12]
 800cb62:	4313      	orrs	r3, r2
 800cb64:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	681b      	ldr	r3, [r3, #0]
 800cb6a:	68fa      	ldr	r2, [r7, #12]
 800cb6c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	681b      	ldr	r3, [r3, #0]
 800cb72:	4a21      	ldr	r2, [pc, #132]	; (800cbf8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800cb74:	4293      	cmp	r3, r2
 800cb76:	d022      	beq.n	800cbbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cb80:	d01d      	beq.n	800cbbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	4a1f      	ldr	r2, [pc, #124]	; (800cc04 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800cb88:	4293      	cmp	r3, r2
 800cb8a:	d018      	beq.n	800cbbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	4a1d      	ldr	r2, [pc, #116]	; (800cc08 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800cb92:	4293      	cmp	r3, r2
 800cb94:	d013      	beq.n	800cbbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	681b      	ldr	r3, [r3, #0]
 800cb9a:	4a1c      	ldr	r2, [pc, #112]	; (800cc0c <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800cb9c:	4293      	cmp	r3, r2
 800cb9e:	d00e      	beq.n	800cbbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	4a15      	ldr	r2, [pc, #84]	; (800cbfc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d009      	beq.n	800cbbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	4a18      	ldr	r2, [pc, #96]	; (800cc10 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800cbb0:	4293      	cmp	r3, r2
 800cbb2:	d004      	beq.n	800cbbe <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	4a11      	ldr	r2, [pc, #68]	; (800cc00 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800cbba:	4293      	cmp	r3, r2
 800cbbc:	d10c      	bne.n	800cbd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800cbbe:	68bb      	ldr	r3, [r7, #8]
 800cbc0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800cbc4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800cbc6:	683b      	ldr	r3, [r7, #0]
 800cbc8:	689b      	ldr	r3, [r3, #8]
 800cbca:	68ba      	ldr	r2, [r7, #8]
 800cbcc:	4313      	orrs	r3, r2
 800cbce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	681b      	ldr	r3, [r3, #0]
 800cbd4:	68ba      	ldr	r2, [r7, #8]
 800cbd6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	2201      	movs	r2, #1
 800cbdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	2200      	movs	r2, #0
 800cbe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cbe8:	2300      	movs	r3, #0
}
 800cbea:	4618      	mov	r0, r3
 800cbec:	3714      	adds	r7, #20
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf4:	4770      	bx	lr
 800cbf6:	bf00      	nop
 800cbf8:	40012c00 	.word	0x40012c00
 800cbfc:	40013400 	.word	0x40013400
 800cc00:	40015000 	.word	0x40015000
 800cc04:	40000400 	.word	0x40000400
 800cc08:	40000800 	.word	0x40000800
 800cc0c:	40000c00 	.word	0x40000c00
 800cc10:	40014000 	.word	0x40014000

0800cc14 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800cc14:	b480      	push	{r7}
 800cc16:	b085      	sub	sp, #20
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
 800cc1c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800cc28:	2b01      	cmp	r3, #1
 800cc2a:	d101      	bne.n	800cc30 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800cc2c:	2302      	movs	r3, #2
 800cc2e:	e096      	b.n	800cd5e <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	2201      	movs	r2, #1
 800cc34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	68db      	ldr	r3, [r3, #12]
 800cc42:	4313      	orrs	r3, r2
 800cc44:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800cc46:	68fb      	ldr	r3, [r7, #12]
 800cc48:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	689b      	ldr	r3, [r3, #8]
 800cc50:	4313      	orrs	r3, r2
 800cc52:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800cc5a:	683b      	ldr	r3, [r7, #0]
 800cc5c:	685b      	ldr	r3, [r3, #4]
 800cc5e:	4313      	orrs	r3, r2
 800cc60:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800cc62:	68fb      	ldr	r3, [r7, #12]
 800cc64:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	4313      	orrs	r3, r2
 800cc6e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	691b      	ldr	r3, [r3, #16]
 800cc7a:	4313      	orrs	r3, r2
 800cc7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800cc84:	683b      	ldr	r3, [r7, #0]
 800cc86:	695b      	ldr	r3, [r3, #20]
 800cc88:	4313      	orrs	r3, r2
 800cc8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800cc8c:	68fb      	ldr	r3, [r7, #12]
 800cc8e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800cc92:	683b      	ldr	r3, [r7, #0]
 800cc94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc96:	4313      	orrs	r3, r2
 800cc98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	699b      	ldr	r3, [r3, #24]
 800cca4:	041b      	lsls	r3, r3, #16
 800cca6:	4313      	orrs	r3, r2
 800cca8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	4a2f      	ldr	r2, [pc, #188]	; (800cd6c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ccb0:	4293      	cmp	r3, r2
 800ccb2:	d009      	beq.n	800ccc8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	4a2d      	ldr	r2, [pc, #180]	; (800cd70 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800ccba:	4293      	cmp	r3, r2
 800ccbc:	d004      	beq.n	800ccc8 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	4a2c      	ldr	r2, [pc, #176]	; (800cd74 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d106      	bne.n	800ccd6 <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800ccc8:	68fb      	ldr	r3, [r7, #12]
 800ccca:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800ccce:	683b      	ldr	r3, [r7, #0]
 800ccd0:	69db      	ldr	r3, [r3, #28]
 800ccd2:	4313      	orrs	r3, r2
 800ccd4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	681b      	ldr	r3, [r3, #0]
 800ccda:	4a24      	ldr	r2, [pc, #144]	; (800cd6c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d009      	beq.n	800ccf4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	4a22      	ldr	r2, [pc, #136]	; (800cd70 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800cce6:	4293      	cmp	r3, r2
 800cce8:	d004      	beq.n	800ccf4 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	4a21      	ldr	r2, [pc, #132]	; (800cd74 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	d12b      	bne.n	800cd4c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800ccf4:	68fb      	ldr	r3, [r7, #12]
 800ccf6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ccfa:	683b      	ldr	r3, [r7, #0]
 800ccfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ccfe:	051b      	lsls	r3, r3, #20
 800cd00:	4313      	orrs	r3, r2
 800cd02:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800cd0a:	683b      	ldr	r3, [r7, #0]
 800cd0c:	6a1b      	ldr	r3, [r3, #32]
 800cd0e:	4313      	orrs	r3, r2
 800cd10:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800cd12:	68fb      	ldr	r3, [r7, #12]
 800cd14:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800cd18:	683b      	ldr	r3, [r7, #0]
 800cd1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd1c:	4313      	orrs	r3, r2
 800cd1e:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	4a11      	ldr	r2, [pc, #68]	; (800cd6c <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d009      	beq.n	800cd3e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	4a10      	ldr	r2, [pc, #64]	; (800cd70 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800cd30:	4293      	cmp	r3, r2
 800cd32:	d004      	beq.n	800cd3e <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	4a0e      	ldr	r2, [pc, #56]	; (800cd74 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800cd3a:	4293      	cmp	r3, r2
 800cd3c:	d106      	bne.n	800cd4c <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	68fa      	ldr	r2, [r7, #12]
 800cd52:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	2200      	movs	r2, #0
 800cd58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800cd5c:	2300      	movs	r3, #0
}
 800cd5e:	4618      	mov	r0, r3
 800cd60:	3714      	adds	r7, #20
 800cd62:	46bd      	mov	sp, r7
 800cd64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd68:	4770      	bx	lr
 800cd6a:	bf00      	nop
 800cd6c:	40012c00 	.word	0x40012c00
 800cd70:	40013400 	.word	0x40013400
 800cd74:	40015000 	.word	0x40015000

0800cd78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b083      	sub	sp, #12
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800cd80:	bf00      	nop
 800cd82:	370c      	adds	r7, #12
 800cd84:	46bd      	mov	sp, r7
 800cd86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd8a:	4770      	bx	lr

0800cd8c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800cd8c:	b480      	push	{r7}
 800cd8e:	b083      	sub	sp, #12
 800cd90:	af00      	add	r7, sp, #0
 800cd92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800cd94:	bf00      	nop
 800cd96:	370c      	adds	r7, #12
 800cd98:	46bd      	mov	sp, r7
 800cd9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd9e:	4770      	bx	lr

0800cda0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b083      	sub	sp, #12
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800cda8:	bf00      	nop
 800cdaa:	370c      	adds	r7, #12
 800cdac:	46bd      	mov	sp, r7
 800cdae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdb2:	4770      	bx	lr

0800cdb4 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b083      	sub	sp, #12
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800cdbc:	bf00      	nop
 800cdbe:	370c      	adds	r7, #12
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr

0800cdc8 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800cdc8:	b480      	push	{r7}
 800cdca:	b083      	sub	sp, #12
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800cdd0:	bf00      	nop
 800cdd2:	370c      	adds	r7, #12
 800cdd4:	46bd      	mov	sp, r7
 800cdd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdda:	4770      	bx	lr

0800cddc <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800cddc:	b480      	push	{r7}
 800cdde:	b083      	sub	sp, #12
 800cde0:	af00      	add	r7, sp, #0
 800cde2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800cde4:	bf00      	nop
 800cde6:	370c      	adds	r7, #12
 800cde8:	46bd      	mov	sp, r7
 800cdea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdee:	4770      	bx	lr

0800cdf0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800cdf0:	b480      	push	{r7}
 800cdf2:	b083      	sub	sp, #12
 800cdf4:	af00      	add	r7, sp, #0
 800cdf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800cdf8:	bf00      	nop
 800cdfa:	370c      	adds	r7, #12
 800cdfc:	46bd      	mov	sp, r7
 800cdfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce02:	4770      	bx	lr

0800ce04 <LL_EXTI_EnableIT_0_31>:
{
 800ce04:	b480      	push	{r7}
 800ce06:	b083      	sub	sp, #12
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800ce0c:	4b05      	ldr	r3, [pc, #20]	; (800ce24 <LL_EXTI_EnableIT_0_31+0x20>)
 800ce0e:	681a      	ldr	r2, [r3, #0]
 800ce10:	4904      	ldr	r1, [pc, #16]	; (800ce24 <LL_EXTI_EnableIT_0_31+0x20>)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	4313      	orrs	r3, r2
 800ce16:	600b      	str	r3, [r1, #0]
}
 800ce18:	bf00      	nop
 800ce1a:	370c      	adds	r7, #12
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce22:	4770      	bx	lr
 800ce24:	40010400 	.word	0x40010400

0800ce28 <LL_EXTI_EnableIT_32_63>:
{
 800ce28:	b480      	push	{r7}
 800ce2a:	b083      	sub	sp, #12
 800ce2c:	af00      	add	r7, sp, #0
 800ce2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800ce30:	4b05      	ldr	r3, [pc, #20]	; (800ce48 <LL_EXTI_EnableIT_32_63+0x20>)
 800ce32:	6a1a      	ldr	r2, [r3, #32]
 800ce34:	4904      	ldr	r1, [pc, #16]	; (800ce48 <LL_EXTI_EnableIT_32_63+0x20>)
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	4313      	orrs	r3, r2
 800ce3a:	620b      	str	r3, [r1, #32]
}
 800ce3c:	bf00      	nop
 800ce3e:	370c      	adds	r7, #12
 800ce40:	46bd      	mov	sp, r7
 800ce42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce46:	4770      	bx	lr
 800ce48:	40010400 	.word	0x40010400

0800ce4c <LL_EXTI_DisableIT_0_31>:
{
 800ce4c:	b480      	push	{r7}
 800ce4e:	b083      	sub	sp, #12
 800ce50:	af00      	add	r7, sp, #0
 800ce52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800ce54:	4b06      	ldr	r3, [pc, #24]	; (800ce70 <LL_EXTI_DisableIT_0_31+0x24>)
 800ce56:	681a      	ldr	r2, [r3, #0]
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	43db      	mvns	r3, r3
 800ce5c:	4904      	ldr	r1, [pc, #16]	; (800ce70 <LL_EXTI_DisableIT_0_31+0x24>)
 800ce5e:	4013      	ands	r3, r2
 800ce60:	600b      	str	r3, [r1, #0]
}
 800ce62:	bf00      	nop
 800ce64:	370c      	adds	r7, #12
 800ce66:	46bd      	mov	sp, r7
 800ce68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce6c:	4770      	bx	lr
 800ce6e:	bf00      	nop
 800ce70:	40010400 	.word	0x40010400

0800ce74 <LL_EXTI_DisableIT_32_63>:
{
 800ce74:	b480      	push	{r7}
 800ce76:	b083      	sub	sp, #12
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800ce7c:	4b06      	ldr	r3, [pc, #24]	; (800ce98 <LL_EXTI_DisableIT_32_63+0x24>)
 800ce7e:	6a1a      	ldr	r2, [r3, #32]
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	43db      	mvns	r3, r3
 800ce84:	4904      	ldr	r1, [pc, #16]	; (800ce98 <LL_EXTI_DisableIT_32_63+0x24>)
 800ce86:	4013      	ands	r3, r2
 800ce88:	620b      	str	r3, [r1, #32]
}
 800ce8a:	bf00      	nop
 800ce8c:	370c      	adds	r7, #12
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce94:	4770      	bx	lr
 800ce96:	bf00      	nop
 800ce98:	40010400 	.word	0x40010400

0800ce9c <LL_EXTI_EnableEvent_0_31>:
{
 800ce9c:	b480      	push	{r7}
 800ce9e:	b083      	sub	sp, #12
 800cea0:	af00      	add	r7, sp, #0
 800cea2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800cea4:	4b05      	ldr	r3, [pc, #20]	; (800cebc <LL_EXTI_EnableEvent_0_31+0x20>)
 800cea6:	685a      	ldr	r2, [r3, #4]
 800cea8:	4904      	ldr	r1, [pc, #16]	; (800cebc <LL_EXTI_EnableEvent_0_31+0x20>)
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	4313      	orrs	r3, r2
 800ceae:	604b      	str	r3, [r1, #4]
}
 800ceb0:	bf00      	nop
 800ceb2:	370c      	adds	r7, #12
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ceba:	4770      	bx	lr
 800cebc:	40010400 	.word	0x40010400

0800cec0 <LL_EXTI_EnableEvent_32_63>:
{
 800cec0:	b480      	push	{r7}
 800cec2:	b083      	sub	sp, #12
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800cec8:	4b05      	ldr	r3, [pc, #20]	; (800cee0 <LL_EXTI_EnableEvent_32_63+0x20>)
 800ceca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cecc:	4904      	ldr	r1, [pc, #16]	; (800cee0 <LL_EXTI_EnableEvent_32_63+0x20>)
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	4313      	orrs	r3, r2
 800ced2:	624b      	str	r3, [r1, #36]	; 0x24
}
 800ced4:	bf00      	nop
 800ced6:	370c      	adds	r7, #12
 800ced8:	46bd      	mov	sp, r7
 800ceda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cede:	4770      	bx	lr
 800cee0:	40010400 	.word	0x40010400

0800cee4 <LL_EXTI_DisableEvent_0_31>:
{
 800cee4:	b480      	push	{r7}
 800cee6:	b083      	sub	sp, #12
 800cee8:	af00      	add	r7, sp, #0
 800ceea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800ceec:	4b06      	ldr	r3, [pc, #24]	; (800cf08 <LL_EXTI_DisableEvent_0_31+0x24>)
 800ceee:	685a      	ldr	r2, [r3, #4]
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	43db      	mvns	r3, r3
 800cef4:	4904      	ldr	r1, [pc, #16]	; (800cf08 <LL_EXTI_DisableEvent_0_31+0x24>)
 800cef6:	4013      	ands	r3, r2
 800cef8:	604b      	str	r3, [r1, #4]
}
 800cefa:	bf00      	nop
 800cefc:	370c      	adds	r7, #12
 800cefe:	46bd      	mov	sp, r7
 800cf00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf04:	4770      	bx	lr
 800cf06:	bf00      	nop
 800cf08:	40010400 	.word	0x40010400

0800cf0c <LL_EXTI_DisableEvent_32_63>:
{
 800cf0c:	b480      	push	{r7}
 800cf0e:	b083      	sub	sp, #12
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800cf14:	4b06      	ldr	r3, [pc, #24]	; (800cf30 <LL_EXTI_DisableEvent_32_63+0x24>)
 800cf16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	43db      	mvns	r3, r3
 800cf1c:	4904      	ldr	r1, [pc, #16]	; (800cf30 <LL_EXTI_DisableEvent_32_63+0x24>)
 800cf1e:	4013      	ands	r3, r2
 800cf20:	624b      	str	r3, [r1, #36]	; 0x24
}
 800cf22:	bf00      	nop
 800cf24:	370c      	adds	r7, #12
 800cf26:	46bd      	mov	sp, r7
 800cf28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf2c:	4770      	bx	lr
 800cf2e:	bf00      	nop
 800cf30:	40010400 	.word	0x40010400

0800cf34 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800cf34:	b480      	push	{r7}
 800cf36:	b083      	sub	sp, #12
 800cf38:	af00      	add	r7, sp, #0
 800cf3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800cf3c:	4b05      	ldr	r3, [pc, #20]	; (800cf54 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800cf3e:	689a      	ldr	r2, [r3, #8]
 800cf40:	4904      	ldr	r1, [pc, #16]	; (800cf54 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	4313      	orrs	r3, r2
 800cf46:	608b      	str	r3, [r1, #8]
}
 800cf48:	bf00      	nop
 800cf4a:	370c      	adds	r7, #12
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf52:	4770      	bx	lr
 800cf54:	40010400 	.word	0x40010400

0800cf58 <LL_EXTI_EnableRisingTrig_32_63>:
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b083      	sub	sp, #12
 800cf5c:	af00      	add	r7, sp, #0
 800cf5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800cf60:	4b05      	ldr	r3, [pc, #20]	; (800cf78 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800cf62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cf64:	4904      	ldr	r1, [pc, #16]	; (800cf78 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	4313      	orrs	r3, r2
 800cf6a:	628b      	str	r3, [r1, #40]	; 0x28
}
 800cf6c:	bf00      	nop
 800cf6e:	370c      	adds	r7, #12
 800cf70:	46bd      	mov	sp, r7
 800cf72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf76:	4770      	bx	lr
 800cf78:	40010400 	.word	0x40010400

0800cf7c <LL_EXTI_DisableRisingTrig_0_31>:
{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b083      	sub	sp, #12
 800cf80:	af00      	add	r7, sp, #0
 800cf82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800cf84:	4b06      	ldr	r3, [pc, #24]	; (800cfa0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800cf86:	689a      	ldr	r2, [r3, #8]
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	43db      	mvns	r3, r3
 800cf8c:	4904      	ldr	r1, [pc, #16]	; (800cfa0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800cf8e:	4013      	ands	r3, r2
 800cf90:	608b      	str	r3, [r1, #8]
}
 800cf92:	bf00      	nop
 800cf94:	370c      	adds	r7, #12
 800cf96:	46bd      	mov	sp, r7
 800cf98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf9c:	4770      	bx	lr
 800cf9e:	bf00      	nop
 800cfa0:	40010400 	.word	0x40010400

0800cfa4 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800cfa4:	b480      	push	{r7}
 800cfa6:	b083      	sub	sp, #12
 800cfa8:	af00      	add	r7, sp, #0
 800cfaa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800cfac:	4b06      	ldr	r3, [pc, #24]	; (800cfc8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800cfae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	43db      	mvns	r3, r3
 800cfb4:	4904      	ldr	r1, [pc, #16]	; (800cfc8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800cfb6:	4013      	ands	r3, r2
 800cfb8:	628b      	str	r3, [r1, #40]	; 0x28
}
 800cfba:	bf00      	nop
 800cfbc:	370c      	adds	r7, #12
 800cfbe:	46bd      	mov	sp, r7
 800cfc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc4:	4770      	bx	lr
 800cfc6:	bf00      	nop
 800cfc8:	40010400 	.word	0x40010400

0800cfcc <LL_EXTI_EnableFallingTrig_0_31>:
{
 800cfcc:	b480      	push	{r7}
 800cfce:	b083      	sub	sp, #12
 800cfd0:	af00      	add	r7, sp, #0
 800cfd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800cfd4:	4b05      	ldr	r3, [pc, #20]	; (800cfec <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800cfd6:	68da      	ldr	r2, [r3, #12]
 800cfd8:	4904      	ldr	r1, [pc, #16]	; (800cfec <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	4313      	orrs	r3, r2
 800cfde:	60cb      	str	r3, [r1, #12]
}
 800cfe0:	bf00      	nop
 800cfe2:	370c      	adds	r7, #12
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfea:	4770      	bx	lr
 800cfec:	40010400 	.word	0x40010400

0800cff0 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800cff0:	b480      	push	{r7}
 800cff2:	b083      	sub	sp, #12
 800cff4:	af00      	add	r7, sp, #0
 800cff6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800cff8:	4b05      	ldr	r3, [pc, #20]	; (800d010 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800cffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cffc:	4904      	ldr	r1, [pc, #16]	; (800d010 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	4313      	orrs	r3, r2
 800d002:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800d004:	bf00      	nop
 800d006:	370c      	adds	r7, #12
 800d008:	46bd      	mov	sp, r7
 800d00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00e:	4770      	bx	lr
 800d010:	40010400 	.word	0x40010400

0800d014 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800d014:	b480      	push	{r7}
 800d016:	b083      	sub	sp, #12
 800d018:	af00      	add	r7, sp, #0
 800d01a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800d01c:	4b06      	ldr	r3, [pc, #24]	; (800d038 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800d01e:	68da      	ldr	r2, [r3, #12]
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	43db      	mvns	r3, r3
 800d024:	4904      	ldr	r1, [pc, #16]	; (800d038 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800d026:	4013      	ands	r3, r2
 800d028:	60cb      	str	r3, [r1, #12]
}
 800d02a:	bf00      	nop
 800d02c:	370c      	adds	r7, #12
 800d02e:	46bd      	mov	sp, r7
 800d030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d034:	4770      	bx	lr
 800d036:	bf00      	nop
 800d038:	40010400 	.word	0x40010400

0800d03c <LL_EXTI_DisableFallingTrig_32_63>:
{
 800d03c:	b480      	push	{r7}
 800d03e:	b083      	sub	sp, #12
 800d040:	af00      	add	r7, sp, #0
 800d042:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800d044:	4b06      	ldr	r3, [pc, #24]	; (800d060 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800d046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	43db      	mvns	r3, r3
 800d04c:	4904      	ldr	r1, [pc, #16]	; (800d060 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800d04e:	4013      	ands	r3, r2
 800d050:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800d052:	bf00      	nop
 800d054:	370c      	adds	r7, #12
 800d056:	46bd      	mov	sp, r7
 800d058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d05c:	4770      	bx	lr
 800d05e:	bf00      	nop
 800d060:	40010400 	.word	0x40010400

0800d064 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800d064:	b580      	push	{r7, lr}
 800d066:	b084      	sub	sp, #16
 800d068:	af00      	add	r7, sp, #0
 800d06a:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800d06c:	2300      	movs	r3, #0
 800d06e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	7a1b      	ldrb	r3, [r3, #8]
 800d074:	2b00      	cmp	r3, #0
 800d076:	f000 80c8 	beq.w	800d20a <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	2b00      	cmp	r3, #0
 800d080:	d05d      	beq.n	800d13e <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	7a5b      	ldrb	r3, [r3, #9]
 800d086:	2b01      	cmp	r3, #1
 800d088:	d00e      	beq.n	800d0a8 <LL_EXTI_Init+0x44>
 800d08a:	2b02      	cmp	r3, #2
 800d08c:	d017      	beq.n	800d0be <LL_EXTI_Init+0x5a>
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d120      	bne.n	800d0d4 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	681b      	ldr	r3, [r3, #0]
 800d096:	4618      	mov	r0, r3
 800d098:	f7ff ff24 	bl	800cee4 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	f7ff feaf 	bl	800ce04 <LL_EXTI_EnableIT_0_31>
          break;
 800d0a6:	e018      	b.n	800d0da <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	4618      	mov	r0, r3
 800d0ae:	f7ff fecd 	bl	800ce4c <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	f7ff fef0 	bl	800ce9c <LL_EXTI_EnableEvent_0_31>
          break;
 800d0bc:	e00d      	b.n	800d0da <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7ff fe9e 	bl	800ce04 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	681b      	ldr	r3, [r3, #0]
 800d0cc:	4618      	mov	r0, r3
 800d0ce:	f7ff fee5 	bl	800ce9c <LL_EXTI_EnableEvent_0_31>
          break;
 800d0d2:	e002      	b.n	800d0da <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800d0d4:	2301      	movs	r3, #1
 800d0d6:	60fb      	str	r3, [r7, #12]
          break;
 800d0d8:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	7a9b      	ldrb	r3, [r3, #10]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d02d      	beq.n	800d13e <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	7a9b      	ldrb	r3, [r3, #10]
 800d0e6:	2b02      	cmp	r3, #2
 800d0e8:	d00e      	beq.n	800d108 <LL_EXTI_Init+0xa4>
 800d0ea:	2b03      	cmp	r3, #3
 800d0ec:	d017      	beq.n	800d11e <LL_EXTI_Init+0xba>
 800d0ee:	2b01      	cmp	r3, #1
 800d0f0:	d120      	bne.n	800d134 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	4618      	mov	r0, r3
 800d0f8:	f7ff ff8c 	bl	800d014 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	4618      	mov	r0, r3
 800d102:	f7ff ff17 	bl	800cf34 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800d106:	e01b      	b.n	800d140 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	4618      	mov	r0, r3
 800d10e:	f7ff ff35 	bl	800cf7c <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	4618      	mov	r0, r3
 800d118:	f7ff ff58 	bl	800cfcc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800d11c:	e010      	b.n	800d140 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	681b      	ldr	r3, [r3, #0]
 800d122:	4618      	mov	r0, r3
 800d124:	f7ff ff06 	bl	800cf34 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	681b      	ldr	r3, [r3, #0]
 800d12c:	4618      	mov	r0, r3
 800d12e:	f7ff ff4d 	bl	800cfcc <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800d132:	e005      	b.n	800d140 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	f043 0302 	orr.w	r3, r3, #2
 800d13a:	60fb      	str	r3, [r7, #12]
            break;
 800d13c:	e000      	b.n	800d140 <LL_EXTI_Init+0xdc>
        }
      }
 800d13e:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	685b      	ldr	r3, [r3, #4]
 800d144:	2b00      	cmp	r3, #0
 800d146:	d075      	beq.n	800d234 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	7a5b      	ldrb	r3, [r3, #9]
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d00e      	beq.n	800d16e <LL_EXTI_Init+0x10a>
 800d150:	2b02      	cmp	r3, #2
 800d152:	d017      	beq.n	800d184 <LL_EXTI_Init+0x120>
 800d154:	2b00      	cmp	r3, #0
 800d156:	d120      	bne.n	800d19a <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	685b      	ldr	r3, [r3, #4]
 800d15c:	4618      	mov	r0, r3
 800d15e:	f7ff fed5 	bl	800cf0c <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d162:	687b      	ldr	r3, [r7, #4]
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	4618      	mov	r0, r3
 800d168:	f7ff fe5e 	bl	800ce28 <LL_EXTI_EnableIT_32_63>
          break;
 800d16c:	e01a      	b.n	800d1a4 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	685b      	ldr	r3, [r3, #4]
 800d172:	4618      	mov	r0, r3
 800d174:	f7ff fe7e 	bl	800ce74 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	685b      	ldr	r3, [r3, #4]
 800d17c:	4618      	mov	r0, r3
 800d17e:	f7ff fe9f 	bl	800cec0 <LL_EXTI_EnableEvent_32_63>
          break;
 800d182:	e00f      	b.n	800d1a4 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d184:	687b      	ldr	r3, [r7, #4]
 800d186:	685b      	ldr	r3, [r3, #4]
 800d188:	4618      	mov	r0, r3
 800d18a:	f7ff fe4d 	bl	800ce28 <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	685b      	ldr	r3, [r3, #4]
 800d192:	4618      	mov	r0, r3
 800d194:	f7ff fe94 	bl	800cec0 <LL_EXTI_EnableEvent_32_63>
          break;
 800d198:	e004      	b.n	800d1a4 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	f043 0304 	orr.w	r3, r3, #4
 800d1a0:	60fb      	str	r3, [r7, #12]
          break;
 800d1a2:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	7a9b      	ldrb	r3, [r3, #10]
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d043      	beq.n	800d234 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	7a9b      	ldrb	r3, [r3, #10]
 800d1b0:	2b02      	cmp	r3, #2
 800d1b2:	d00e      	beq.n	800d1d2 <LL_EXTI_Init+0x16e>
 800d1b4:	2b03      	cmp	r3, #3
 800d1b6:	d017      	beq.n	800d1e8 <LL_EXTI_Init+0x184>
 800d1b8:	2b01      	cmp	r3, #1
 800d1ba:	d120      	bne.n	800d1fe <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	685b      	ldr	r3, [r3, #4]
 800d1c0:	4618      	mov	r0, r3
 800d1c2:	f7ff ff3b 	bl	800d03c <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	685b      	ldr	r3, [r3, #4]
 800d1ca:	4618      	mov	r0, r3
 800d1cc:	f7ff fec4 	bl	800cf58 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800d1d0:	e031      	b.n	800d236 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	685b      	ldr	r3, [r3, #4]
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f7ff fee4 	bl	800cfa4 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d1dc:	687b      	ldr	r3, [r7, #4]
 800d1de:	685b      	ldr	r3, [r3, #4]
 800d1e0:	4618      	mov	r0, r3
 800d1e2:	f7ff ff05 	bl	800cff0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800d1e6:	e026      	b.n	800d236 <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	685b      	ldr	r3, [r3, #4]
 800d1ec:	4618      	mov	r0, r3
 800d1ee:	f7ff feb3 	bl	800cf58 <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	685b      	ldr	r3, [r3, #4]
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f7ff fefa 	bl	800cff0 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800d1fc:	e01b      	b.n	800d236 <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	f043 0305 	orr.w	r3, r3, #5
 800d204:	60fb      	str	r3, [r7, #12]
            break;
 800d206:	bf00      	nop
 800d208:	e015      	b.n	800d236 <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	4618      	mov	r0, r3
 800d210:	f7ff fe1c 	bl	800ce4c <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4618      	mov	r0, r3
 800d21a:	f7ff fe63 	bl	800cee4 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	685b      	ldr	r3, [r3, #4]
 800d222:	4618      	mov	r0, r3
 800d224:	f7ff fe26 	bl	800ce74 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	685b      	ldr	r3, [r3, #4]
 800d22c:	4618      	mov	r0, r3
 800d22e:	f7ff fe6d 	bl	800cf0c <LL_EXTI_DisableEvent_32_63>
 800d232:	e000      	b.n	800d236 <LL_EXTI_Init+0x1d2>
      }
 800d234:	bf00      	nop
  }

  return status;
 800d236:	68fb      	ldr	r3, [r7, #12]
}
 800d238:	4618      	mov	r0, r3
 800d23a:	3710      	adds	r7, #16
 800d23c:	46bd      	mov	sp, r7
 800d23e:	bd80      	pop	{r7, pc}

0800d240 <LL_GPIO_SetPinMode>:
{
 800d240:	b480      	push	{r7}
 800d242:	b089      	sub	sp, #36	; 0x24
 800d244:	af00      	add	r7, sp, #0
 800d246:	60f8      	str	r0, [r7, #12]
 800d248:	60b9      	str	r1, [r7, #8]
 800d24a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	681a      	ldr	r2, [r3, #0]
 800d250:	68bb      	ldr	r3, [r7, #8]
 800d252:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d254:	697b      	ldr	r3, [r7, #20]
 800d256:	fa93 f3a3 	rbit	r3, r3
 800d25a:	613b      	str	r3, [r7, #16]
  return result;
 800d25c:	693b      	ldr	r3, [r7, #16]
 800d25e:	fab3 f383 	clz	r3, r3
 800d262:	b2db      	uxtb	r3, r3
 800d264:	005b      	lsls	r3, r3, #1
 800d266:	2103      	movs	r1, #3
 800d268:	fa01 f303 	lsl.w	r3, r1, r3
 800d26c:	43db      	mvns	r3, r3
 800d26e:	401a      	ands	r2, r3
 800d270:	68bb      	ldr	r3, [r7, #8]
 800d272:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d274:	69fb      	ldr	r3, [r7, #28]
 800d276:	fa93 f3a3 	rbit	r3, r3
 800d27a:	61bb      	str	r3, [r7, #24]
  return result;
 800d27c:	69bb      	ldr	r3, [r7, #24]
 800d27e:	fab3 f383 	clz	r3, r3
 800d282:	b2db      	uxtb	r3, r3
 800d284:	005b      	lsls	r3, r3, #1
 800d286:	6879      	ldr	r1, [r7, #4]
 800d288:	fa01 f303 	lsl.w	r3, r1, r3
 800d28c:	431a      	orrs	r2, r3
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	601a      	str	r2, [r3, #0]
}
 800d292:	bf00      	nop
 800d294:	3724      	adds	r7, #36	; 0x24
 800d296:	46bd      	mov	sp, r7
 800d298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d29c:	4770      	bx	lr

0800d29e <LL_GPIO_SetPinOutputType>:
{
 800d29e:	b480      	push	{r7}
 800d2a0:	b085      	sub	sp, #20
 800d2a2:	af00      	add	r7, sp, #0
 800d2a4:	60f8      	str	r0, [r7, #12]
 800d2a6:	60b9      	str	r1, [r7, #8]
 800d2a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	685a      	ldr	r2, [r3, #4]
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	43db      	mvns	r3, r3
 800d2b2:	401a      	ands	r2, r3
 800d2b4:	68bb      	ldr	r3, [r7, #8]
 800d2b6:	6879      	ldr	r1, [r7, #4]
 800d2b8:	fb01 f303 	mul.w	r3, r1, r3
 800d2bc:	431a      	orrs	r2, r3
 800d2be:	68fb      	ldr	r3, [r7, #12]
 800d2c0:	605a      	str	r2, [r3, #4]
}
 800d2c2:	bf00      	nop
 800d2c4:	3714      	adds	r7, #20
 800d2c6:	46bd      	mov	sp, r7
 800d2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2cc:	4770      	bx	lr

0800d2ce <LL_GPIO_SetPinSpeed>:
{
 800d2ce:	b480      	push	{r7}
 800d2d0:	b089      	sub	sp, #36	; 0x24
 800d2d2:	af00      	add	r7, sp, #0
 800d2d4:	60f8      	str	r0, [r7, #12]
 800d2d6:	60b9      	str	r1, [r7, #8]
 800d2d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800d2da:	68fb      	ldr	r3, [r7, #12]
 800d2dc:	689a      	ldr	r2, [r3, #8]
 800d2de:	68bb      	ldr	r3, [r7, #8]
 800d2e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d2e2:	697b      	ldr	r3, [r7, #20]
 800d2e4:	fa93 f3a3 	rbit	r3, r3
 800d2e8:	613b      	str	r3, [r7, #16]
  return result;
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	fab3 f383 	clz	r3, r3
 800d2f0:	b2db      	uxtb	r3, r3
 800d2f2:	005b      	lsls	r3, r3, #1
 800d2f4:	2103      	movs	r1, #3
 800d2f6:	fa01 f303 	lsl.w	r3, r1, r3
 800d2fa:	43db      	mvns	r3, r3
 800d2fc:	401a      	ands	r2, r3
 800d2fe:	68bb      	ldr	r3, [r7, #8]
 800d300:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d302:	69fb      	ldr	r3, [r7, #28]
 800d304:	fa93 f3a3 	rbit	r3, r3
 800d308:	61bb      	str	r3, [r7, #24]
  return result;
 800d30a:	69bb      	ldr	r3, [r7, #24]
 800d30c:	fab3 f383 	clz	r3, r3
 800d310:	b2db      	uxtb	r3, r3
 800d312:	005b      	lsls	r3, r3, #1
 800d314:	6879      	ldr	r1, [r7, #4]
 800d316:	fa01 f303 	lsl.w	r3, r1, r3
 800d31a:	431a      	orrs	r2, r3
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	609a      	str	r2, [r3, #8]
}
 800d320:	bf00      	nop
 800d322:	3724      	adds	r7, #36	; 0x24
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr

0800d32c <LL_GPIO_SetPinPull>:
{
 800d32c:	b480      	push	{r7}
 800d32e:	b089      	sub	sp, #36	; 0x24
 800d330:	af00      	add	r7, sp, #0
 800d332:	60f8      	str	r0, [r7, #12]
 800d334:	60b9      	str	r1, [r7, #8]
 800d336:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	68da      	ldr	r2, [r3, #12]
 800d33c:	68bb      	ldr	r3, [r7, #8]
 800d33e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d340:	697b      	ldr	r3, [r7, #20]
 800d342:	fa93 f3a3 	rbit	r3, r3
 800d346:	613b      	str	r3, [r7, #16]
  return result;
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	fab3 f383 	clz	r3, r3
 800d34e:	b2db      	uxtb	r3, r3
 800d350:	005b      	lsls	r3, r3, #1
 800d352:	2103      	movs	r1, #3
 800d354:	fa01 f303 	lsl.w	r3, r1, r3
 800d358:	43db      	mvns	r3, r3
 800d35a:	401a      	ands	r2, r3
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d360:	69fb      	ldr	r3, [r7, #28]
 800d362:	fa93 f3a3 	rbit	r3, r3
 800d366:	61bb      	str	r3, [r7, #24]
  return result;
 800d368:	69bb      	ldr	r3, [r7, #24]
 800d36a:	fab3 f383 	clz	r3, r3
 800d36e:	b2db      	uxtb	r3, r3
 800d370:	005b      	lsls	r3, r3, #1
 800d372:	6879      	ldr	r1, [r7, #4]
 800d374:	fa01 f303 	lsl.w	r3, r1, r3
 800d378:	431a      	orrs	r2, r3
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	60da      	str	r2, [r3, #12]
}
 800d37e:	bf00      	nop
 800d380:	3724      	adds	r7, #36	; 0x24
 800d382:	46bd      	mov	sp, r7
 800d384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d388:	4770      	bx	lr

0800d38a <LL_GPIO_SetAFPin_0_7>:
{
 800d38a:	b480      	push	{r7}
 800d38c:	b089      	sub	sp, #36	; 0x24
 800d38e:	af00      	add	r7, sp, #0
 800d390:	60f8      	str	r0, [r7, #12]
 800d392:	60b9      	str	r1, [r7, #8]
 800d394:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800d396:	68fb      	ldr	r3, [r7, #12]
 800d398:	6a1a      	ldr	r2, [r3, #32]
 800d39a:	68bb      	ldr	r3, [r7, #8]
 800d39c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d39e:	697b      	ldr	r3, [r7, #20]
 800d3a0:	fa93 f3a3 	rbit	r3, r3
 800d3a4:	613b      	str	r3, [r7, #16]
  return result;
 800d3a6:	693b      	ldr	r3, [r7, #16]
 800d3a8:	fab3 f383 	clz	r3, r3
 800d3ac:	b2db      	uxtb	r3, r3
 800d3ae:	009b      	lsls	r3, r3, #2
 800d3b0:	210f      	movs	r1, #15
 800d3b2:	fa01 f303 	lsl.w	r3, r1, r3
 800d3b6:	43db      	mvns	r3, r3
 800d3b8:	401a      	ands	r2, r3
 800d3ba:	68bb      	ldr	r3, [r7, #8]
 800d3bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d3be:	69fb      	ldr	r3, [r7, #28]
 800d3c0:	fa93 f3a3 	rbit	r3, r3
 800d3c4:	61bb      	str	r3, [r7, #24]
  return result;
 800d3c6:	69bb      	ldr	r3, [r7, #24]
 800d3c8:	fab3 f383 	clz	r3, r3
 800d3cc:	b2db      	uxtb	r3, r3
 800d3ce:	009b      	lsls	r3, r3, #2
 800d3d0:	6879      	ldr	r1, [r7, #4]
 800d3d2:	fa01 f303 	lsl.w	r3, r1, r3
 800d3d6:	431a      	orrs	r2, r3
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	621a      	str	r2, [r3, #32]
}
 800d3dc:	bf00      	nop
 800d3de:	3724      	adds	r7, #36	; 0x24
 800d3e0:	46bd      	mov	sp, r7
 800d3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3e6:	4770      	bx	lr

0800d3e8 <LL_GPIO_SetAFPin_8_15>:
{
 800d3e8:	b480      	push	{r7}
 800d3ea:	b089      	sub	sp, #36	; 0x24
 800d3ec:	af00      	add	r7, sp, #0
 800d3ee:	60f8      	str	r0, [r7, #12]
 800d3f0:	60b9      	str	r1, [r7, #8]
 800d3f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	0a1b      	lsrs	r3, r3, #8
 800d3fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	fa93 f3a3 	rbit	r3, r3
 800d404:	613b      	str	r3, [r7, #16]
  return result;
 800d406:	693b      	ldr	r3, [r7, #16]
 800d408:	fab3 f383 	clz	r3, r3
 800d40c:	b2db      	uxtb	r3, r3
 800d40e:	009b      	lsls	r3, r3, #2
 800d410:	210f      	movs	r1, #15
 800d412:	fa01 f303 	lsl.w	r3, r1, r3
 800d416:	43db      	mvns	r3, r3
 800d418:	401a      	ands	r2, r3
 800d41a:	68bb      	ldr	r3, [r7, #8]
 800d41c:	0a1b      	lsrs	r3, r3, #8
 800d41e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d420:	69fb      	ldr	r3, [r7, #28]
 800d422:	fa93 f3a3 	rbit	r3, r3
 800d426:	61bb      	str	r3, [r7, #24]
  return result;
 800d428:	69bb      	ldr	r3, [r7, #24]
 800d42a:	fab3 f383 	clz	r3, r3
 800d42e:	b2db      	uxtb	r3, r3
 800d430:	009b      	lsls	r3, r3, #2
 800d432:	6879      	ldr	r1, [r7, #4]
 800d434:	fa01 f303 	lsl.w	r3, r1, r3
 800d438:	431a      	orrs	r2, r3
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800d43e:	bf00      	nop
 800d440:	3724      	adds	r7, #36	; 0x24
 800d442:	46bd      	mov	sp, r7
 800d444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d448:	4770      	bx	lr

0800d44a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800d44a:	b580      	push	{r7, lr}
 800d44c:	b086      	sub	sp, #24
 800d44e:	af00      	add	r7, sp, #0
 800d450:	6078      	str	r0, [r7, #4]
 800d452:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800d454:	683b      	ldr	r3, [r7, #0]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	fa93 f3a3 	rbit	r3, r3
 800d460:	60bb      	str	r3, [r7, #8]
  return result;
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	fab3 f383 	clz	r3, r3
 800d468:	b2db      	uxtb	r3, r3
 800d46a:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800d46c:	e040      	b.n	800d4f0 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800d46e:	683b      	ldr	r3, [r7, #0]
 800d470:	681a      	ldr	r2, [r3, #0]
 800d472:	2101      	movs	r1, #1
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	fa01 f303 	lsl.w	r3, r1, r3
 800d47a:	4013      	ands	r3, r2
 800d47c:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800d47e:	693b      	ldr	r3, [r7, #16]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d032      	beq.n	800d4ea <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800d484:	683b      	ldr	r3, [r7, #0]
 800d486:	685b      	ldr	r3, [r3, #4]
 800d488:	461a      	mov	r2, r3
 800d48a:	6939      	ldr	r1, [r7, #16]
 800d48c:	6878      	ldr	r0, [r7, #4]
 800d48e:	f7ff fed7 	bl	800d240 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800d492:	683b      	ldr	r3, [r7, #0]
 800d494:	685b      	ldr	r3, [r3, #4]
 800d496:	2b01      	cmp	r3, #1
 800d498:	d003      	beq.n	800d4a2 <LL_GPIO_Init+0x58>
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	685b      	ldr	r3, [r3, #4]
 800d49e:	2b02      	cmp	r3, #2
 800d4a0:	d106      	bne.n	800d4b0 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800d4a2:	683b      	ldr	r3, [r7, #0]
 800d4a4:	689b      	ldr	r3, [r3, #8]
 800d4a6:	461a      	mov	r2, r3
 800d4a8:	6939      	ldr	r1, [r7, #16]
 800d4aa:	6878      	ldr	r0, [r7, #4]
 800d4ac:	f7ff ff0f 	bl	800d2ce <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	691b      	ldr	r3, [r3, #16]
 800d4b4:	461a      	mov	r2, r3
 800d4b6:	6939      	ldr	r1, [r7, #16]
 800d4b8:	6878      	ldr	r0, [r7, #4]
 800d4ba:	f7ff ff37 	bl	800d32c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	685b      	ldr	r3, [r3, #4]
 800d4c2:	2b02      	cmp	r3, #2
 800d4c4:	d111      	bne.n	800d4ea <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800d4c6:	693b      	ldr	r3, [r7, #16]
 800d4c8:	2bff      	cmp	r3, #255	; 0xff
 800d4ca:	d807      	bhi.n	800d4dc <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	695b      	ldr	r3, [r3, #20]
 800d4d0:	461a      	mov	r2, r3
 800d4d2:	6939      	ldr	r1, [r7, #16]
 800d4d4:	6878      	ldr	r0, [r7, #4]
 800d4d6:	f7ff ff58 	bl	800d38a <LL_GPIO_SetAFPin_0_7>
 800d4da:	e006      	b.n	800d4ea <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800d4dc:	683b      	ldr	r3, [r7, #0]
 800d4de:	695b      	ldr	r3, [r3, #20]
 800d4e0:	461a      	mov	r2, r3
 800d4e2:	6939      	ldr	r1, [r7, #16]
 800d4e4:	6878      	ldr	r0, [r7, #4]
 800d4e6:	f7ff ff7f 	bl	800d3e8 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	3301      	adds	r3, #1
 800d4ee:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800d4f0:	683b      	ldr	r3, [r7, #0]
 800d4f2:	681a      	ldr	r2, [r3, #0]
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	fa22 f303 	lsr.w	r3, r2, r3
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d1b7      	bne.n	800d46e <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800d4fe:	683b      	ldr	r3, [r7, #0]
 800d500:	685b      	ldr	r3, [r3, #4]
 800d502:	2b01      	cmp	r3, #1
 800d504:	d003      	beq.n	800d50e <LL_GPIO_Init+0xc4>
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	685b      	ldr	r3, [r3, #4]
 800d50a:	2b02      	cmp	r3, #2
 800d50c:	d107      	bne.n	800d51e <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	6819      	ldr	r1, [r3, #0]
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	68db      	ldr	r3, [r3, #12]
 800d516:	461a      	mov	r2, r3
 800d518:	6878      	ldr	r0, [r7, #4]
 800d51a:	f7ff fec0 	bl	800d29e <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800d51e:	2300      	movs	r3, #0
}
 800d520:	4618      	mov	r0, r3
 800d522:	3718      	adds	r7, #24
 800d524:	46bd      	mov	sp, r7
 800d526:	bd80      	pop	{r7, pc}

0800d528 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 *
 */
void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint16_t border_colour)
{
 800d528:	b590      	push	{r4, r7, lr}
 800d52a:	b087      	sub	sp, #28
 800d52c:	af02      	add	r7, sp, #8
 800d52e:	4604      	mov	r4, r0
 800d530:	4608      	mov	r0, r1
 800d532:	4611      	mov	r1, r2
 800d534:	461a      	mov	r2, r3
 800d536:	4623      	mov	r3, r4
 800d538:	80fb      	strh	r3, [r7, #6]
 800d53a:	4603      	mov	r3, r0
 800d53c:	80bb      	strh	r3, [r7, #4]
 800d53e:	460b      	mov	r3, r1
 800d540:	807b      	strh	r3, [r7, #2]
 800d542:	4613      	mov	r3, r2
 800d544:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800d546:	2300      	movs	r3, #0
 800d548:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800d54a:	7bfa      	ldrb	r2, [r7, #15]
 800d54c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d550:	429a      	cmp	r2, r3
 800d552:	d939      	bls.n	800d5c8 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa0>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800d554:	88ba      	ldrh	r2, [r7, #4]
 800d556:	7bfb      	ldrb	r3, [r7, #15]
 800d558:	441a      	add	r2, r3
 800d55a:	88b9      	ldrh	r1, [r7, #4]
 800d55c:	883b      	ldrh	r3, [r7, #0]
 800d55e:	4419      	add	r1, r3
 800d560:	7bfb      	ldrb	r3, [r7, #15]
 800d562:	1acb      	subs	r3, r1, r3
 800d564:	429a      	cmp	r2, r3
 800d566:	f000 8089 	beq.w	800d67c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
 800d56a:	88fa      	ldrh	r2, [r7, #6]
 800d56c:	7bfb      	ldrb	r3, [r7, #15]
 800d56e:	441a      	add	r2, r3
 800d570:	88f9      	ldrh	r1, [r7, #6]
 800d572:	887b      	ldrh	r3, [r7, #2]
 800d574:	4419      	add	r1, r3
 800d576:	7bfb      	ldrb	r3, [r7, #15]
 800d578:	1acb      	subs	r3, r1, r3
 800d57a:	429a      	cmp	r2, r3
 800d57c:	d07e      	beq.n	800d67c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x154>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800d57e:	7bfb      	ldrb	r3, [r7, #15]
 800d580:	b29a      	uxth	r2, r3
 800d582:	88fb      	ldrh	r3, [r7, #6]
 800d584:	4413      	add	r3, r2
 800d586:	b298      	uxth	r0, r3
 800d588:	7bfb      	ldrb	r3, [r7, #15]
 800d58a:	b29a      	uxth	r2, r3
 800d58c:	88bb      	ldrh	r3, [r7, #4]
 800d58e:	4413      	add	r3, r2
 800d590:	b299      	uxth	r1, r3
 800d592:	7bfb      	ldrb	r3, [r7, #15]
 800d594:	b29b      	uxth	r3, r3
 800d596:	005b      	lsls	r3, r3, #1
 800d598:	b29b      	uxth	r3, r3
 800d59a:	887a      	ldrh	r2, [r7, #2]
 800d59c:	1ad3      	subs	r3, r2, r3
 800d59e:	b29b      	uxth	r3, r3
 800d5a0:	3301      	adds	r3, #1
 800d5a2:	b29c      	uxth	r4, r3
 800d5a4:	7bfb      	ldrb	r3, [r7, #15]
 800d5a6:	b29b      	uxth	r3, r3
 800d5a8:	005b      	lsls	r3, r3, #1
 800d5aa:	b29b      	uxth	r3, r3
 800d5ac:	883a      	ldrh	r2, [r7, #0]
 800d5ae:	1ad3      	subs	r3, r2, r3
 800d5b0:	b29b      	uxth	r3, r3
 800d5b2:	3301      	adds	r3, #1
 800d5b4:	b29a      	uxth	r2, r3
 800d5b6:	2304      	movs	r3, #4
 800d5b8:	9301      	str	r3, [sp, #4]
 800d5ba:	8c3b      	ldrh	r3, [r7, #32]
 800d5bc:	9300      	str	r3, [sp, #0]
 800d5be:	4613      	mov	r3, r2
 800d5c0:	4622      	mov	r2, r4
 800d5c2:	f000 fcf7 	bl	800dfb4 <ILI9341_Draw_Rectangle>
				goto finish;
 800d5c6:	e05a      	b.n	800d67e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x156>
			}
		}

		// Horizontal line - Top
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d5c8:	7bfb      	ldrb	r3, [r7, #15]
 800d5ca:	b29a      	uxth	r2, r3
 800d5cc:	88fb      	ldrh	r3, [r7, #6]
 800d5ce:	4413      	add	r3, r2
 800d5d0:	b298      	uxth	r0, r3
 800d5d2:	7bfb      	ldrb	r3, [r7, #15]
 800d5d4:	b29a      	uxth	r2, r3
 800d5d6:	88bb      	ldrh	r3, [r7, #4]
 800d5d8:	4413      	add	r3, r2
 800d5da:	b299      	uxth	r1, r3
										y + b,
										(w - b)+1,
 800d5dc:	7bfb      	ldrb	r3, [r7, #15]
 800d5de:	b29b      	uxth	r3, r3
 800d5e0:	887a      	ldrh	r2, [r7, #2]
 800d5e2:	1ad3      	subs	r3, r2, r3
 800d5e4:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d5e6:	3301      	adds	r3, #1
 800d5e8:	b29a      	uxth	r2, r3
 800d5ea:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d5ec:	f000 fa6c 	bl	800dac8 <ILI9341_Draw_Horizontal_Line>
										border_colour);
		// Horizontal line - Bottom
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d5f0:	7bfb      	ldrb	r3, [r7, #15]
 800d5f2:	b29a      	uxth	r2, r3
 800d5f4:	88fb      	ldrh	r3, [r7, #6]
 800d5f6:	4413      	add	r3, r2
 800d5f8:	b298      	uxth	r0, r3
										(y + h) - b,
 800d5fa:	88ba      	ldrh	r2, [r7, #4]
 800d5fc:	883b      	ldrh	r3, [r7, #0]
 800d5fe:	4413      	add	r3, r2
 800d600:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d602:	7bfb      	ldrb	r3, [r7, #15]
 800d604:	b29b      	uxth	r3, r3
 800d606:	1ad3      	subs	r3, r2, r3
 800d608:	b299      	uxth	r1, r3
										(w - b)+1,
 800d60a:	7bfb      	ldrb	r3, [r7, #15]
 800d60c:	b29b      	uxth	r3, r3
 800d60e:	887a      	ldrh	r2, [r7, #2]
 800d610:	1ad3      	subs	r3, r2, r3
 800d612:	b29b      	uxth	r3, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800d614:	3301      	adds	r3, #1
 800d616:	b29a      	uxth	r2, r3
 800d618:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d61a:	f000 fa55 	bl	800dac8 <ILI9341_Draw_Horizontal_Line>
										border_colour);


		// Vertical line - left
		ILI9341_Draw_Vertical_Line(		x + b,
 800d61e:	7bfb      	ldrb	r3, [r7, #15]
 800d620:	b29a      	uxth	r2, r3
 800d622:	88fb      	ldrh	r3, [r7, #6]
 800d624:	4413      	add	r3, r2
 800d626:	b298      	uxth	r0, r3
 800d628:	7bfb      	ldrb	r3, [r7, #15]
 800d62a:	b29a      	uxth	r2, r3
 800d62c:	88bb      	ldrh	r3, [r7, #4]
 800d62e:	4413      	add	r3, r2
 800d630:	b299      	uxth	r1, r3
 800d632:	7bfb      	ldrb	r3, [r7, #15]
 800d634:	b29b      	uxth	r3, r3
 800d636:	005b      	lsls	r3, r3, #1
 800d638:	b29b      	uxth	r3, r3
 800d63a:	883a      	ldrh	r2, [r7, #0]
 800d63c:	1ad3      	subs	r3, r2, r3
 800d63e:	b29a      	uxth	r2, r3
 800d640:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d642:	f000 faa5 	bl	800db90 <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);
		// Vertical line - right
		ILI9341_Draw_Vertical_Line(		((x + w)) - (b),
 800d646:	88fa      	ldrh	r2, [r7, #6]
 800d648:	887b      	ldrh	r3, [r7, #2]
 800d64a:	4413      	add	r3, r2
 800d64c:	b29a      	uxth	r2, r3
 800d64e:	7bfb      	ldrb	r3, [r7, #15]
 800d650:	b29b      	uxth	r3, r3
 800d652:	1ad3      	subs	r3, r2, r3
 800d654:	b298      	uxth	r0, r3
 800d656:	7bfb      	ldrb	r3, [r7, #15]
 800d658:	b29a      	uxth	r2, r3
 800d65a:	88bb      	ldrh	r3, [r7, #4]
 800d65c:	4413      	add	r3, r2
 800d65e:	b299      	uxth	r1, r3
 800d660:	7bfb      	ldrb	r3, [r7, #15]
 800d662:	b29b      	uxth	r3, r3
 800d664:	005b      	lsls	r3, r3, #1
 800d666:	b29b      	uxth	r3, r3
 800d668:	883a      	ldrh	r2, [r7, #0]
 800d66a:	1ad3      	subs	r3, r2, r3
 800d66c:	b29a      	uxth	r2, r3
 800d66e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d670:	f000 fa8e 	bl	800db90 <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800d674:	7bfb      	ldrb	r3, [r7, #15]
 800d676:	3301      	adds	r3, #1
 800d678:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800d67a:	e766      	b.n	800d54a <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800d67c:	bf00      	nop
	// done
	return;
 800d67e:	bf00      	nop
}
 800d680:	3714      	adds	r7, #20
 800d682:	46bd      	mov	sp, r7
 800d684:	bd90      	pop	{r4, r7, pc}
	...

0800d688 <ILI9341_Draw_Char>:
 *	@retval None
 *
 */

void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800d688:	b590      	push	{r4, r7, lr}
 800d68a:	b089      	sub	sp, #36	; 0x24
 800d68c:	af02      	add	r7, sp, #8
 800d68e:	4604      	mov	r4, r0
 800d690:	4608      	mov	r0, r1
 800d692:	4611      	mov	r1, r2
 800d694:	461a      	mov	r2, r3
 800d696:	4623      	mov	r3, r4
 800d698:	71fb      	strb	r3, [r7, #7]
 800d69a:	4603      	mov	r3, r0
 800d69c:	80bb      	strh	r3, [r7, #4]
 800d69e:	460b      	mov	r3, r1
 800d6a0:	807b      	strh	r3, [r7, #2]
 800d6a2:	4613      	mov	r3, r2
 800d6a4:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800d6a6:	79fb      	ldrb	r3, [r7, #7]
 800d6a8:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800d6aa:	7dfb      	ldrb	r3, [r7, #23]
 800d6ac:	2b1f      	cmp	r3, #31
 800d6ae:	d802      	bhi.n	800d6b6 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	71fb      	strb	r3, [r7, #7]
 800d6b4:	e002      	b.n	800d6bc <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800d6b6:	7dfb      	ldrb	r3, [r7, #23]
 800d6b8:	3b20      	subs	r3, #32
 800d6ba:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800d6bc:	2300      	movs	r3, #0
 800d6be:	753b      	strb	r3, [r7, #20]
 800d6c0:	e012      	b.n	800d6e8 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800d6c2:	7dfa      	ldrb	r2, [r7, #23]
 800d6c4:	7d38      	ldrb	r0, [r7, #20]
 800d6c6:	7d39      	ldrb	r1, [r7, #20]
 800d6c8:	4c48      	ldr	r4, [pc, #288]	; (800d7ec <ILI9341_Draw_Char+0x164>)
 800d6ca:	4613      	mov	r3, r2
 800d6cc:	005b      	lsls	r3, r3, #1
 800d6ce:	4413      	add	r3, r2
 800d6d0:	005b      	lsls	r3, r3, #1
 800d6d2:	4423      	add	r3, r4
 800d6d4:	4403      	add	r3, r0
 800d6d6:	781a      	ldrb	r2, [r3, #0]
 800d6d8:	f107 0318 	add.w	r3, r7, #24
 800d6dc:	440b      	add	r3, r1
 800d6de:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800d6e2:	7d3b      	ldrb	r3, [r7, #20]
 800d6e4:	3301      	adds	r3, #1
 800d6e6:	753b      	strb	r3, [r7, #20]
 800d6e8:	7d3b      	ldrb	r3, [r7, #20]
 800d6ea:	2b05      	cmp	r3, #5
 800d6ec:	d9e9      	bls.n	800d6c2 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800d6ee:	2300      	movs	r3, #0
 800d6f0:	757b      	strb	r3, [r7, #21]
 800d6f2:	e074      	b.n	800d7de <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	75bb      	strb	r3, [r7, #22]
 800d6f8:	e06b      	b.n	800d7d2 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800d6fa:	7d7b      	ldrb	r3, [r7, #21]
 800d6fc:	f107 0218 	add.w	r2, r7, #24
 800d700:	4413      	add	r3, r2
 800d702:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800d706:	461a      	mov	r2, r3
 800d708:	7dbb      	ldrb	r3, [r7, #22]
 800d70a:	fa42 f303 	asr.w	r3, r2, r3
 800d70e:	f003 0301 	and.w	r3, r3, #1
 800d712:	2b00      	cmp	r3, #0
 800d714:	d02d      	beq.n	800d772 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800d716:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d718:	2b01      	cmp	r3, #1
 800d71a:	d10e      	bne.n	800d73a <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800d71c:	7d7b      	ldrb	r3, [r7, #21]
 800d71e:	b29a      	uxth	r2, r3
 800d720:	88bb      	ldrh	r3, [r7, #4]
 800d722:	4413      	add	r3, r2
 800d724:	b298      	uxth	r0, r3
 800d726:	7dbb      	ldrb	r3, [r7, #22]
 800d728:	b29a      	uxth	r2, r3
 800d72a:	887b      	ldrh	r3, [r7, #2]
 800d72c:	4413      	add	r3, r2
 800d72e:	b29b      	uxth	r3, r3
 800d730:	883a      	ldrh	r2, [r7, #0]
 800d732:	4619      	mov	r1, r3
 800d734:	f000 fb06 	bl	800dd44 <ILI9341_Draw_Pixel>
 800d738:	e048      	b.n	800d7cc <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800d73a:	7d7b      	ldrb	r3, [r7, #21]
 800d73c:	b29b      	uxth	r3, r3
 800d73e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d740:	fb12 f303 	smulbb	r3, r2, r3
 800d744:	b29a      	uxth	r2, r3
 800d746:	88bb      	ldrh	r3, [r7, #4]
 800d748:	4413      	add	r3, r2
 800d74a:	b298      	uxth	r0, r3
 800d74c:	7dbb      	ldrb	r3, [r7, #22]
 800d74e:	b29b      	uxth	r3, r3
 800d750:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d752:	fb12 f303 	smulbb	r3, r2, r3
 800d756:	b29a      	uxth	r2, r3
 800d758:	887b      	ldrh	r3, [r7, #2]
 800d75a:	4413      	add	r3, r2
 800d75c:	b299      	uxth	r1, r3
 800d75e:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800d760:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d762:	2301      	movs	r3, #1
 800d764:	9301      	str	r3, [sp, #4]
 800d766:	883b      	ldrh	r3, [r7, #0]
 800d768:	9300      	str	r3, [sp, #0]
 800d76a:	4623      	mov	r3, r4
 800d76c:	f000 fc22 	bl	800dfb4 <ILI9341_Draw_Rectangle>
 800d770:	e02c      	b.n	800d7cc <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800d772:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d774:	2b01      	cmp	r3, #1
 800d776:	d10e      	bne.n	800d796 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800d778:	7d7b      	ldrb	r3, [r7, #21]
 800d77a:	b29a      	uxth	r2, r3
 800d77c:	88bb      	ldrh	r3, [r7, #4]
 800d77e:	4413      	add	r3, r2
 800d780:	b298      	uxth	r0, r3
 800d782:	7dbb      	ldrb	r3, [r7, #22]
 800d784:	b29a      	uxth	r2, r3
 800d786:	887b      	ldrh	r3, [r7, #2]
 800d788:	4413      	add	r3, r2
 800d78a:	b29b      	uxth	r3, r3
 800d78c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800d78e:	4619      	mov	r1, r3
 800d790:	f000 fad8 	bl	800dd44 <ILI9341_Draw_Pixel>
 800d794:	e01a      	b.n	800d7cc <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800d796:	7d7b      	ldrb	r3, [r7, #21]
 800d798:	b29b      	uxth	r3, r3
 800d79a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d79c:	fb12 f303 	smulbb	r3, r2, r3
 800d7a0:	b29a      	uxth	r2, r3
 800d7a2:	88bb      	ldrh	r3, [r7, #4]
 800d7a4:	4413      	add	r3, r2
 800d7a6:	b298      	uxth	r0, r3
 800d7a8:	7dbb      	ldrb	r3, [r7, #22]
 800d7aa:	b29b      	uxth	r3, r3
 800d7ac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d7ae:	fb12 f303 	smulbb	r3, r2, r3
 800d7b2:	b29a      	uxth	r2, r3
 800d7b4:	887b      	ldrh	r3, [r7, #2]
 800d7b6:	4413      	add	r3, r2
 800d7b8:	b299      	uxth	r1, r3
 800d7ba:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800d7bc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800d7be:	2301      	movs	r3, #1
 800d7c0:	9301      	str	r3, [sp, #4]
 800d7c2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800d7c4:	9300      	str	r3, [sp, #0]
 800d7c6:	4623      	mov	r3, r4
 800d7c8:	f000 fbf4 	bl	800dfb4 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800d7cc:	7dbb      	ldrb	r3, [r7, #22]
 800d7ce:	3301      	adds	r3, #1
 800d7d0:	75bb      	strb	r3, [r7, #22]
 800d7d2:	7dbb      	ldrb	r3, [r7, #22]
 800d7d4:	2b07      	cmp	r3, #7
 800d7d6:	d990      	bls.n	800d6fa <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800d7d8:	7d7b      	ldrb	r3, [r7, #21]
 800d7da:	3301      	adds	r3, #1
 800d7dc:	757b      	strb	r3, [r7, #21]
 800d7de:	7d7b      	ldrb	r3, [r7, #21]
 800d7e0:	2b05      	cmp	r3, #5
 800d7e2:	d987      	bls.n	800d6f4 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800d7e4:	bf00      	nop
 800d7e6:	371c      	adds	r7, #28
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd90      	pop	{r4, r7, pc}
 800d7ec:	080133e0 	.word	0x080133e0

0800d7f0 <ILI9341_Draw_Text>:
 *	@param None
 *	@retval None
 *
 */
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800d7f0:	b590      	push	{r4, r7, lr}
 800d7f2:	b087      	sub	sp, #28
 800d7f4:	af02      	add	r7, sp, #8
 800d7f6:	60f8      	str	r0, [r7, #12]
 800d7f8:	4608      	mov	r0, r1
 800d7fa:	4611      	mov	r1, r2
 800d7fc:	461a      	mov	r2, r3
 800d7fe:	4603      	mov	r3, r0
 800d800:	817b      	strh	r3, [r7, #10]
 800d802:	460b      	mov	r3, r1
 800d804:	813b      	strh	r3, [r7, #8]
 800d806:	4613      	mov	r3, r2
 800d808:	80fb      	strh	r3, [r7, #6]
	ILI9341_Draw_Vertical_Line(x-1, y, CHAR_HEIGHT*size, bgcolour);
 800d80a:	897b      	ldrh	r3, [r7, #10]
 800d80c:	3b01      	subs	r3, #1
 800d80e:	b298      	uxth	r0, r3
 800d810:	8c3b      	ldrh	r3, [r7, #32]
 800d812:	00db      	lsls	r3, r3, #3
 800d814:	b29a      	uxth	r2, r3
 800d816:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d818:	8939      	ldrh	r1, [r7, #8]
 800d81a:	f000 f9b9 	bl	800db90 <ILI9341_Draw_Vertical_Line>
    ILI9341_Draw_Vertical_Line(x-2, y, CHAR_HEIGHT*size, bgcolour);
 800d81e:	897b      	ldrh	r3, [r7, #10]
 800d820:	3b02      	subs	r3, #2
 800d822:	b298      	uxth	r0, r3
 800d824:	8c3b      	ldrh	r3, [r7, #32]
 800d826:	00db      	lsls	r3, r3, #3
 800d828:	b29a      	uxth	r2, r3
 800d82a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d82c:	8939      	ldrh	r1, [r7, #8]
 800d82e:	f000 f9af 	bl	800db90 <ILI9341_Draw_Vertical_Line>

    while (*Text) {
 800d832:	e016      	b.n	800d862 <ILI9341_Draw_Text+0x72>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	1c5a      	adds	r2, r3, #1
 800d838:	60fa      	str	r2, [r7, #12]
 800d83a:	7818      	ldrb	r0, [r3, #0]
 800d83c:	88fc      	ldrh	r4, [r7, #6]
 800d83e:	893a      	ldrh	r2, [r7, #8]
 800d840:	8979      	ldrh	r1, [r7, #10]
 800d842:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800d844:	9301      	str	r3, [sp, #4]
 800d846:	8c3b      	ldrh	r3, [r7, #32]
 800d848:	9300      	str	r3, [sp, #0]
 800d84a:	4623      	mov	r3, r4
 800d84c:	f7ff ff1c 	bl	800d688 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800d850:	8c3b      	ldrh	r3, [r7, #32]
 800d852:	461a      	mov	r2, r3
 800d854:	0052      	lsls	r2, r2, #1
 800d856:	4413      	add	r3, r2
 800d858:	005b      	lsls	r3, r3, #1
 800d85a:	b29a      	uxth	r2, r3
 800d85c:	897b      	ldrh	r3, [r7, #10]
 800d85e:	4413      	add	r3, r2
 800d860:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800d862:	68fb      	ldr	r3, [r7, #12]
 800d864:	781b      	ldrb	r3, [r3, #0]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d1e4      	bne.n	800d834 <ILI9341_Draw_Text+0x44>
    }


}
 800d86a:	bf00      	nop
 800d86c:	3714      	adds	r7, #20
 800d86e:	46bd      	mov	sp, r7
 800d870:	bd90      	pop	{r4, r7, pc}

0800d872 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800d872:	b580      	push	{r7, lr}
 800d874:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800d876:	f000 fc81 	bl	800e17c <_LCD_Enable>
	ILI9341_SPI_Init();
 800d87a:	f000 f907 	bl	800da8c <ILI9341_SPI_Init>
	_LCD_Reset();
 800d87e:	f000 fc8d 	bl	800e19c <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800d882:	2001      	movs	r0, #1
 800d884:	f000 fd58 	bl	800e338 <_LCD_SendCommand>
	HAL_Delay(2000);
 800d888:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800d88c:	f7fa fe0e 	bl	80084ac <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800d890:	20cb      	movs	r0, #203	; 0xcb
 800d892:	f000 fd51 	bl	800e338 <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800d896:	2039      	movs	r0, #57	; 0x39
 800d898:	f000 fd80 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x2C);
 800d89c:	202c      	movs	r0, #44	; 0x2c
 800d89e:	f000 fd7d 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x00);
 800d8a2:	2000      	movs	r0, #0
 800d8a4:	f000 fd7a 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x34);
 800d8a8:	2034      	movs	r0, #52	; 0x34
 800d8aa:	f000 fd77 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x02);
 800d8ae:	2002      	movs	r0, #2
 800d8b0:	f000 fd74 	bl	800e39c <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800d8b4:	20cf      	movs	r0, #207	; 0xcf
 800d8b6:	f000 fd3f 	bl	800e338 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800d8ba:	2000      	movs	r0, #0
 800d8bc:	f000 fd6e 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0xC1);
 800d8c0:	20c1      	movs	r0, #193	; 0xc1
 800d8c2:	f000 fd6b 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x30);
 800d8c6:	2030      	movs	r0, #48	; 0x30
 800d8c8:	f000 fd68 	bl	800e39c <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800d8cc:	20e8      	movs	r0, #232	; 0xe8
 800d8ce:	f000 fd33 	bl	800e338 <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800d8d2:	2085      	movs	r0, #133	; 0x85
 800d8d4:	f000 fd62 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x00);
 800d8d8:	2000      	movs	r0, #0
 800d8da:	f000 fd5f 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x78);
 800d8de:	2078      	movs	r0, #120	; 0x78
 800d8e0:	f000 fd5c 	bl	800e39c <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800d8e4:	20ea      	movs	r0, #234	; 0xea
 800d8e6:	f000 fd27 	bl	800e338 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800d8ea:	2000      	movs	r0, #0
 800d8ec:	f000 fd56 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x00);
 800d8f0:	2000      	movs	r0, #0
 800d8f2:	f000 fd53 	bl	800e39c <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800d8f6:	20ed      	movs	r0, #237	; 0xed
 800d8f8:	f000 fd1e 	bl	800e338 <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800d8fc:	2064      	movs	r0, #100	; 0x64
 800d8fe:	f000 fd4d 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x03);
 800d902:	2003      	movs	r0, #3
 800d904:	f000 fd4a 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x12);
 800d908:	2012      	movs	r0, #18
 800d90a:	f000 fd47 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x81);
 800d90e:	2081      	movs	r0, #129	; 0x81
 800d910:	f000 fd44 	bl	800e39c <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800d914:	20f7      	movs	r0, #247	; 0xf7
 800d916:	f000 fd0f 	bl	800e338 <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800d91a:	2020      	movs	r0, #32
 800d91c:	f000 fd3e 	bl	800e39c <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800d920:	20c0      	movs	r0, #192	; 0xc0
 800d922:	f000 fd09 	bl	800e338 <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800d926:	2023      	movs	r0, #35	; 0x23
 800d928:	f000 fd38 	bl	800e39c <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800d92c:	20c1      	movs	r0, #193	; 0xc1
 800d92e:	f000 fd03 	bl	800e338 <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800d932:	2010      	movs	r0, #16
 800d934:	f000 fd32 	bl	800e39c <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800d938:	20c5      	movs	r0, #197	; 0xc5
 800d93a:	f000 fcfd 	bl	800e338 <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800d93e:	203e      	movs	r0, #62	; 0x3e
 800d940:	f000 fd2c 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x28);
 800d944:	2028      	movs	r0, #40	; 0x28
 800d946:	f000 fd29 	bl	800e39c <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800d94a:	20c7      	movs	r0, #199	; 0xc7
 800d94c:	f000 fcf4 	bl	800e338 <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800d950:	2086      	movs	r0, #134	; 0x86
 800d952:	f000 fd23 	bl	800e39c <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800d956:	2036      	movs	r0, #54	; 0x36
 800d958:	f000 fcee 	bl	800e338 <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800d95c:	2048      	movs	r0, #72	; 0x48
 800d95e:	f000 fd1d 	bl	800e39c <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800d962:	203a      	movs	r0, #58	; 0x3a
 800d964:	f000 fce8 	bl	800e338 <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800d968:	2055      	movs	r0, #85	; 0x55
 800d96a:	f000 fd17 	bl	800e39c <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800d96e:	20b1      	movs	r0, #177	; 0xb1
 800d970:	f000 fce2 	bl	800e338 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800d974:	2000      	movs	r0, #0
 800d976:	f000 fd11 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x18);
 800d97a:	2018      	movs	r0, #24
 800d97c:	f000 fd0e 	bl	800e39c <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800d980:	20b6      	movs	r0, #182	; 0xb6
 800d982:	f000 fcd9 	bl	800e338 <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800d986:	2008      	movs	r0, #8
 800d988:	f000 fd08 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x82);
 800d98c:	2082      	movs	r0, #130	; 0x82
 800d98e:	f000 fd05 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x27);
 800d992:	2027      	movs	r0, #39	; 0x27
 800d994:	f000 fd02 	bl	800e39c <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800d998:	20f2      	movs	r0, #242	; 0xf2
 800d99a:	f000 fccd 	bl	800e338 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800d99e:	2000      	movs	r0, #0
 800d9a0:	f000 fcfc 	bl	800e39c <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800d9a4:	2026      	movs	r0, #38	; 0x26
 800d9a6:	f000 fcc7 	bl	800e338 <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800d9aa:	2001      	movs	r0, #1
 800d9ac:	f000 fcf6 	bl	800e39c <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800d9b0:	20e0      	movs	r0, #224	; 0xe0
 800d9b2:	f000 fcc1 	bl	800e338 <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800d9b6:	200f      	movs	r0, #15
 800d9b8:	f000 fcf0 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x31);
 800d9bc:	2031      	movs	r0, #49	; 0x31
 800d9be:	f000 fced 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x2B);
 800d9c2:	202b      	movs	r0, #43	; 0x2b
 800d9c4:	f000 fcea 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x0C);
 800d9c8:	200c      	movs	r0, #12
 800d9ca:	f000 fce7 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x0E);
 800d9ce:	200e      	movs	r0, #14
 800d9d0:	f000 fce4 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x08);
 800d9d4:	2008      	movs	r0, #8
 800d9d6:	f000 fce1 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x4E);
 800d9da:	204e      	movs	r0, #78	; 0x4e
 800d9dc:	f000 fcde 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0xF1);
 800d9e0:	20f1      	movs	r0, #241	; 0xf1
 800d9e2:	f000 fcdb 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x37);
 800d9e6:	2037      	movs	r0, #55	; 0x37
 800d9e8:	f000 fcd8 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x07);
 800d9ec:	2007      	movs	r0, #7
 800d9ee:	f000 fcd5 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x10);
 800d9f2:	2010      	movs	r0, #16
 800d9f4:	f000 fcd2 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x03);
 800d9f8:	2003      	movs	r0, #3
 800d9fa:	f000 fccf 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x0E);
 800d9fe:	200e      	movs	r0, #14
 800da00:	f000 fccc 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x09);
 800da04:	2009      	movs	r0, #9
 800da06:	f000 fcc9 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x00);
 800da0a:	2000      	movs	r0, #0
 800da0c:	f000 fcc6 	bl	800e39c <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800da10:	20e1      	movs	r0, #225	; 0xe1
 800da12:	f000 fc91 	bl	800e338 <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800da16:	2000      	movs	r0, #0
 800da18:	f000 fcc0 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x0E);
 800da1c:	200e      	movs	r0, #14
 800da1e:	f000 fcbd 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x14);
 800da22:	2014      	movs	r0, #20
 800da24:	f000 fcba 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x03);
 800da28:	2003      	movs	r0, #3
 800da2a:	f000 fcb7 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x11);
 800da2e:	2011      	movs	r0, #17
 800da30:	f000 fcb4 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x07);
 800da34:	2007      	movs	r0, #7
 800da36:	f000 fcb1 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x31);
 800da3a:	2031      	movs	r0, #49	; 0x31
 800da3c:	f000 fcae 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0xC1);
 800da40:	20c1      	movs	r0, #193	; 0xc1
 800da42:	f000 fcab 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x48);
 800da46:	2048      	movs	r0, #72	; 0x48
 800da48:	f000 fca8 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x08);
 800da4c:	2008      	movs	r0, #8
 800da4e:	f000 fca5 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x0F);
 800da52:	200f      	movs	r0, #15
 800da54:	f000 fca2 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x0C);
 800da58:	200c      	movs	r0, #12
 800da5a:	f000 fc9f 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x31);
 800da5e:	2031      	movs	r0, #49	; 0x31
 800da60:	f000 fc9c 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x36);
 800da64:	2036      	movs	r0, #54	; 0x36
 800da66:	f000 fc99 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(0x0F);
 800da6a:	200f      	movs	r0, #15
 800da6c:	f000 fc96 	bl	800e39c <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800da70:	2011      	movs	r0, #17
 800da72:	f000 fc61 	bl	800e338 <_LCD_SendCommand>
	HAL_Delay(240);
 800da76:	20f0      	movs	r0, #240	; 0xf0
 800da78:	f7fa fd18 	bl	80084ac <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800da7c:	2029      	movs	r0, #41	; 0x29
 800da7e:	f000 fc5b 	bl	800e338 <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800da82:	2000      	movs	r0, #0
 800da84:	f000 fb2c 	bl	800e0e0 <ILI9341_Set_Rotation>
}
 800da88:	bf00      	nop
 800da8a:	bd80      	pop	{r7, pc}

0800da8c <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800da8c:	b480      	push	{r7}
 800da8e:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800da90:	4b0b      	ldr	r3, [pc, #44]	; (800dac0 <ILI9341_SPI_Init+0x34>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800da98:	2b40      	cmp	r3, #64	; 0x40
 800da9a:	d005      	beq.n	800daa8 <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800da9c:	4b08      	ldr	r3, [pc, #32]	; (800dac0 <ILI9341_SPI_Init+0x34>)
 800da9e:	681b      	ldr	r3, [r3, #0]
 800daa0:	4a07      	ldr	r2, [pc, #28]	; (800dac0 <ILI9341_SPI_Init+0x34>)
 800daa2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800daa6:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800daa8:	4b06      	ldr	r3, [pc, #24]	; (800dac4 <ILI9341_SPI_Init+0x38>)
 800daaa:	695b      	ldr	r3, [r3, #20]
 800daac:	4a05      	ldr	r2, [pc, #20]	; (800dac4 <ILI9341_SPI_Init+0x38>)
 800daae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dab2:	6153      	str	r3, [r2, #20]
}
 800dab4:	bf00      	nop
 800dab6:	46bd      	mov	sp, r7
 800dab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dabc:	4770      	bx	lr
 800dabe:	bf00      	nop
 800dac0:	40003c00 	.word	0x40003c00
 800dac4:	48000400 	.word	0x48000400

0800dac8 <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800dac8:	b590      	push	{r4, r7, lr}
 800daca:	b087      	sub	sp, #28
 800dacc:	af02      	add	r7, sp, #8
 800dace:	4604      	mov	r4, r0
 800dad0:	4608      	mov	r0, r1
 800dad2:	4611      	mov	r1, r2
 800dad4:	461a      	mov	r2, r3
 800dad6:	4623      	mov	r3, r4
 800dad8:	80fb      	strh	r3, [r7, #6]
 800dada:	4603      	mov	r3, r0
 800dadc:	80bb      	strh	r3, [r7, #4]
 800dade:	460b      	mov	r3, r1
 800dae0:	807b      	strh	r3, [r7, #2]
 800dae2:	4613      	mov	r3, r2
 800dae4:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800dae6:	4b28      	ldr	r3, [pc, #160]	; (800db88 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800dae8:	881b      	ldrh	r3, [r3, #0]
 800daea:	b29b      	uxth	r3, r3
 800daec:	88fa      	ldrh	r2, [r7, #6]
 800daee:	429a      	cmp	r2, r3
 800daf0:	d246      	bcs.n	800db80 <ILI9341_Draw_Horizontal_Line+0xb8>
 800daf2:	4b26      	ldr	r3, [pc, #152]	; (800db8c <ILI9341_Draw_Horizontal_Line+0xc4>)
 800daf4:	881b      	ldrh	r3, [r3, #0]
 800daf6:	b29b      	uxth	r3, r3
 800daf8:	88ba      	ldrh	r2, [r7, #4]
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d240      	bcs.n	800db80 <ILI9341_Draw_Horizontal_Line+0xb8>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800dafe:	88fa      	ldrh	r2, [r7, #6]
 800db00:	887b      	ldrh	r3, [r7, #2]
 800db02:	4413      	add	r3, r2
 800db04:	3b01      	subs	r3, #1
 800db06:	4a20      	ldr	r2, [pc, #128]	; (800db88 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800db08:	8812      	ldrh	r2, [r2, #0]
 800db0a:	b292      	uxth	r2, r2
 800db0c:	4293      	cmp	r3, r2
 800db0e:	db05      	blt.n	800db1c <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800db10:	4b1d      	ldr	r3, [pc, #116]	; (800db88 <ILI9341_Draw_Horizontal_Line+0xc0>)
 800db12:	881b      	ldrh	r3, [r3, #0]
 800db14:	b29a      	uxth	r2, r3
 800db16:	88fb      	ldrh	r3, [r7, #6]
 800db18:	1ad3      	subs	r3, r2, r3
 800db1a:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800db1c:	88fa      	ldrh	r2, [r7, #6]
 800db1e:	887b      	ldrh	r3, [r7, #2]
 800db20:	4413      	add	r3, r2
 800db22:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800db24:	3b01      	subs	r3, #1
 800db26:	b29a      	uxth	r2, r3
 800db28:	88bb      	ldrh	r3, [r7, #4]
 800db2a:	88b9      	ldrh	r1, [r7, #4]
 800db2c:	88f8      	ldrh	r0, [r7, #6]
 800db2e:	f000 f893 	bl	800dc58 <ILI9341_Set_Frame>
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.


	uint8_t truncated = 0;
 800db32:	2300      	movs	r3, #0
 800db34:	73fb      	strb	r3, [r7, #15]

	if((width & 1) && (width > 1))		// don't round down to zero!
 800db36:	887b      	ldrh	r3, [r7, #2]
 800db38:	f003 0301 	and.w	r3, r3, #1
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	d009      	beq.n	800db54 <ILI9341_Draw_Horizontal_Line+0x8c>
 800db40:	887b      	ldrh	r3, [r7, #2]
 800db42:	2b01      	cmp	r3, #1
 800db44:	d906      	bls.n	800db54 <ILI9341_Draw_Horizontal_Line+0x8c>
	{
		truncated = 1;
 800db46:	2301      	movs	r3, #1
 800db48:	73fb      	strb	r3, [r7, #15]
		width = ((width >> 1) * 2);
 800db4a:	887b      	ldrh	r3, [r7, #2]
 800db4c:	085b      	lsrs	r3, r3, #1
 800db4e:	b29b      	uxth	r3, r3
 800db50:	005b      	lsls	r3, r3, #1
 800db52:	807b      	strh	r3, [r7, #2]
	}
	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800db54:	887c      	ldrh	r4, [r7, #2]
 800db56:	883a      	ldrh	r2, [r7, #0]
 800db58:	88b9      	ldrh	r1, [r7, #4]
 800db5a:	88f8      	ldrh	r0, [r7, #6]
 800db5c:	2303      	movs	r3, #3
 800db5e:	9300      	str	r3, [sp, #0]
 800db60:	4623      	mov	r3, r4
 800db62:	f000 fb39 	bl	800e1d8 <_LCD_Write_Frame>
	//
//TODO
	// add the truncated pixel now
	if(truncated)
 800db66:	7bfb      	ldrb	r3, [r7, #15]
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d00a      	beq.n	800db82 <ILI9341_Draw_Horizontal_Line+0xba>
	{
		ILI9341_Draw_Pixel(	(xpos + width),
 800db6c:	88fa      	ldrh	r2, [r7, #6]
 800db6e:	887b      	ldrh	r3, [r7, #2]
 800db70:	4413      	add	r3, r2
 800db72:	b29b      	uxth	r3, r3
 800db74:	883a      	ldrh	r2, [r7, #0]
 800db76:	88b9      	ldrh	r1, [r7, #4]
 800db78:	4618      	mov	r0, r3
 800db7a:	f000 f8e3 	bl	800dd44 <ILI9341_Draw_Pixel>
 800db7e:	e000      	b.n	800db82 <ILI9341_Draw_Horizontal_Line+0xba>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800db80:	bf00      	nop
							(ypos),
							colour);
	}


}
 800db82:	3714      	adds	r7, #20
 800db84:	46bd      	mov	sp, r7
 800db86:	bd90      	pop	{r4, r7, pc}
 800db88:	20000cae 	.word	0x20000cae
 800db8c:	20000cac 	.word	0x20000cac

0800db90 <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800db90:	b590      	push	{r4, r7, lr}
 800db92:	b087      	sub	sp, #28
 800db94:	af02      	add	r7, sp, #8
 800db96:	4604      	mov	r4, r0
 800db98:	4608      	mov	r0, r1
 800db9a:	4611      	mov	r1, r2
 800db9c:	461a      	mov	r2, r3
 800db9e:	4623      	mov	r3, r4
 800dba0:	80fb      	strh	r3, [r7, #6]
 800dba2:	4603      	mov	r3, r0
 800dba4:	80bb      	strh	r3, [r7, #4]
 800dba6:	460b      	mov	r3, r1
 800dba8:	807b      	strh	r3, [r7, #2]
 800dbaa:	4613      	mov	r3, r2
 800dbac:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800dbae:	4b28      	ldr	r3, [pc, #160]	; (800dc50 <ILI9341_Draw_Vertical_Line+0xc0>)
 800dbb0:	881b      	ldrh	r3, [r3, #0]
 800dbb2:	b29b      	uxth	r3, r3
 800dbb4:	88fa      	ldrh	r2, [r7, #6]
 800dbb6:	429a      	cmp	r2, r3
 800dbb8:	d246      	bcs.n	800dc48 <ILI9341_Draw_Vertical_Line+0xb8>
 800dbba:	4b26      	ldr	r3, [pc, #152]	; (800dc54 <ILI9341_Draw_Vertical_Line+0xc4>)
 800dbbc:	881b      	ldrh	r3, [r3, #0]
 800dbbe:	b29b      	uxth	r3, r3
 800dbc0:	88ba      	ldrh	r2, [r7, #4]
 800dbc2:	429a      	cmp	r2, r3
 800dbc4:	d240      	bcs.n	800dc48 <ILI9341_Draw_Vertical_Line+0xb8>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800dbc6:	88ba      	ldrh	r2, [r7, #4]
 800dbc8:	887b      	ldrh	r3, [r7, #2]
 800dbca:	4413      	add	r3, r2
 800dbcc:	3b01      	subs	r3, #1
 800dbce:	4a21      	ldr	r2, [pc, #132]	; (800dc54 <ILI9341_Draw_Vertical_Line+0xc4>)
 800dbd0:	8812      	ldrh	r2, [r2, #0]
 800dbd2:	b292      	uxth	r2, r2
 800dbd4:	4293      	cmp	r3, r2
 800dbd6:	db05      	blt.n	800dbe4 <ILI9341_Draw_Vertical_Line+0x54>
	{
		height= LCD_HEIGHT - ypos;
 800dbd8:	4b1e      	ldr	r3, [pc, #120]	; (800dc54 <ILI9341_Draw_Vertical_Line+0xc4>)
 800dbda:	881b      	ldrh	r3, [r3, #0]
 800dbdc:	b29a      	uxth	r2, r3
 800dbde:	88bb      	ldrh	r3, [r7, #4]
 800dbe0:	1ad3      	subs	r3, r2, r3
 800dbe2:	807b      	strh	r3, [r7, #2]
	}

	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800dbe4:	88ba      	ldrh	r2, [r7, #4]
 800dbe6:	887b      	ldrh	r3, [r7, #2]
 800dbe8:	4413      	add	r3, r2
 800dbea:	b29b      	uxth	r3, r3
 800dbec:	3b01      	subs	r3, #1
 800dbee:	b29b      	uxth	r3, r3
 800dbf0:	88fa      	ldrh	r2, [r7, #6]
 800dbf2:	88b9      	ldrh	r1, [r7, #4]
 800dbf4:	88f8      	ldrh	r0, [r7, #6]
 800dbf6:	f000 f82f 	bl	800dc58 <ILI9341_Set_Frame>

	uint8_t truncated = 0;
 800dbfa:	2300      	movs	r3, #0
 800dbfc:	73fb      	strb	r3, [r7, #15]

	if((height & 1) && (height > 1))		// don't round down to zero!
 800dbfe:	887b      	ldrh	r3, [r7, #2]
 800dc00:	f003 0301 	and.w	r3, r3, #1
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d009      	beq.n	800dc1c <ILI9341_Draw_Vertical_Line+0x8c>
 800dc08:	887b      	ldrh	r3, [r7, #2]
 800dc0a:	2b01      	cmp	r3, #1
 800dc0c:	d906      	bls.n	800dc1c <ILI9341_Draw_Vertical_Line+0x8c>
	{
		truncated = 1;
 800dc0e:	2301      	movs	r3, #1
 800dc10:	73fb      	strb	r3, [r7, #15]
		height = ((height >> 1) * 2);
 800dc12:	887b      	ldrh	r3, [r7, #2]
 800dc14:	085b      	lsrs	r3, r3, #1
 800dc16:	b29b      	uxth	r3, r3
 800dc18:	005b      	lsls	r3, r3, #1
 800dc1a:	807b      	strh	r3, [r7, #2]
//TODO


	//

	if(truncated)
 800dc1c:	7bfb      	ldrb	r3, [r7, #15]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d008      	beq.n	800dc34 <ILI9341_Draw_Vertical_Line+0xa4>
	{
		ILI9341_Draw_Pixel(	(xpos),
 800dc22:	88ba      	ldrh	r2, [r7, #4]
 800dc24:	887b      	ldrh	r3, [r7, #2]
 800dc26:	4413      	add	r3, r2
 800dc28:	b299      	uxth	r1, r3
 800dc2a:	883a      	ldrh	r2, [r7, #0]
 800dc2c:	88fb      	ldrh	r3, [r7, #6]
 800dc2e:	4618      	mov	r0, r3
 800dc30:	f000 f888 	bl	800dd44 <ILI9341_Draw_Pixel>
							(ypos + height),
							colour);
	}

	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800dc34:	887c      	ldrh	r4, [r7, #2]
 800dc36:	883a      	ldrh	r2, [r7, #0]
 800dc38:	88b9      	ldrh	r1, [r7, #4]
 800dc3a:	88f8      	ldrh	r0, [r7, #6]
 800dc3c:	2303      	movs	r3, #3
 800dc3e:	9300      	str	r3, [sp, #0]
 800dc40:	4623      	mov	r3, r4
 800dc42:	f000 fac9 	bl	800e1d8 <_LCD_Write_Frame>
 800dc46:	e000      	b.n	800dc4a <ILI9341_Draw_Vertical_Line+0xba>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800dc48:	bf00      	nop
}
 800dc4a:	3714      	adds	r7, #20
 800dc4c:	46bd      	mov	sp, r7
 800dc4e:	bd90      	pop	{r4, r7, pc}
 800dc50:	20000cae 	.word	0x20000cae
 800dc54:	20000cac 	.word	0x20000cac

0800dc58 <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800dc58:	b590      	push	{r4, r7, lr}
 800dc5a:	b083      	sub	sp, #12
 800dc5c:	af00      	add	r7, sp, #0
 800dc5e:	4604      	mov	r4, r0
 800dc60:	4608      	mov	r0, r1
 800dc62:	4611      	mov	r1, r2
 800dc64:	461a      	mov	r2, r3
 800dc66:	4623      	mov	r3, r4
 800dc68:	80fb      	strh	r3, [r7, #6]
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	80bb      	strh	r3, [r7, #4]
 800dc6e:	460b      	mov	r3, r1
 800dc70:	807b      	strh	r3, [r7, #2]
 800dc72:	4613      	mov	r3, r2
 800dc74:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800dc76:	202a      	movs	r0, #42	; 0x2a
 800dc78:	f000 fb5e 	bl	800e338 <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800dc7c:	88fb      	ldrh	r3, [r7, #6]
 800dc7e:	0a1b      	lsrs	r3, r3, #8
 800dc80:	b29b      	uxth	r3, r3
 800dc82:	b2db      	uxtb	r3, r3
 800dc84:	4618      	mov	r0, r3
 800dc86:	f000 fb89 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(sc);
 800dc8a:	88fb      	ldrh	r3, [r7, #6]
 800dc8c:	b2db      	uxtb	r3, r3
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f000 fb84 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800dc94:	887b      	ldrh	r3, [r7, #2]
 800dc96:	0a1b      	lsrs	r3, r3, #8
 800dc98:	b29b      	uxth	r3, r3
 800dc9a:	b2db      	uxtb	r3, r3
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	f000 fb7d 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(ec);
 800dca2:	887b      	ldrh	r3, [r7, #2]
 800dca4:	b2db      	uxtb	r3, r3
 800dca6:	4618      	mov	r0, r3
 800dca8:	f000 fb78 	bl	800e39c <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800dcac:	202b      	movs	r0, #43	; 0x2b
 800dcae:	f000 fb43 	bl	800e338 <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800dcb2:	88bb      	ldrh	r3, [r7, #4]
 800dcb4:	0a1b      	lsrs	r3, r3, #8
 800dcb6:	b29b      	uxth	r3, r3
 800dcb8:	b2db      	uxtb	r3, r3
 800dcba:	4618      	mov	r0, r3
 800dcbc:	f000 fb6e 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(sp);
 800dcc0:	88bb      	ldrh	r3, [r7, #4]
 800dcc2:	b2db      	uxtb	r3, r3
 800dcc4:	4618      	mov	r0, r3
 800dcc6:	f000 fb69 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800dcca:	883b      	ldrh	r3, [r7, #0]
 800dccc:	0a1b      	lsrs	r3, r3, #8
 800dcce:	b29b      	uxth	r3, r3
 800dcd0:	b2db      	uxtb	r3, r3
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f000 fb62 	bl	800e39c <_LCD_SendData>
	_LCD_SendData(ep);
 800dcd8:	883b      	ldrh	r3, [r7, #0]
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f000 fb5d 	bl	800e39c <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800dce2:	202c      	movs	r0, #44	; 0x2c
 800dce4:	f000 fb28 	bl	800e338 <_LCD_SendCommand>
}
 800dce8:	bf00      	nop
 800dcea:	370c      	adds	r7, #12
 800dcec:	46bd      	mov	sp, r7
 800dcee:	bd90      	pop	{r4, r7, pc}

0800dcf0 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800dcf0:	b580      	push	{r7, lr}
 800dcf2:	b084      	sub	sp, #16
 800dcf4:	af02      	add	r7, sp, #8
 800dcf6:	4603      	mov	r3, r0
 800dcf8:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800dcfa:	4b10      	ldr	r3, [pc, #64]	; (800dd3c <ILI9341_Fill_Screen+0x4c>)
 800dcfc:	881b      	ldrh	r3, [r3, #0]
 800dcfe:	b29a      	uxth	r2, r3
 800dd00:	4b0f      	ldr	r3, [pc, #60]	; (800dd40 <ILI9341_Fill_Screen+0x50>)
 800dd02:	881b      	ldrh	r3, [r3, #0]
 800dd04:	b29b      	uxth	r3, r3
 800dd06:	2100      	movs	r1, #0
 800dd08:	2000      	movs	r0, #0
 800dd0a:	f7ff ffa5 	bl	800dc58 <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800dd0e:	4b0b      	ldr	r3, [pc, #44]	; (800dd3c <ILI9341_Fill_Screen+0x4c>)
 800dd10:	881b      	ldrh	r3, [r3, #0]
 800dd12:	b29b      	uxth	r3, r3
 800dd14:	461a      	mov	r2, r3
 800dd16:	4b0a      	ldr	r3, [pc, #40]	; (800dd40 <ILI9341_Fill_Screen+0x50>)
 800dd18:	881b      	ldrh	r3, [r3, #0]
 800dd1a:	b29b      	uxth	r3, r3
 800dd1c:	fb03 f302 	mul.w	r3, r3, r2
 800dd20:	4619      	mov	r1, r3
 800dd22:	88fa      	ldrh	r2, [r7, #6]
 800dd24:	2304      	movs	r3, #4
 800dd26:	9300      	str	r3, [sp, #0]
 800dd28:	460b      	mov	r3, r1
 800dd2a:	2100      	movs	r1, #0
 800dd2c:	2000      	movs	r0, #0
 800dd2e:	f000 fa53 	bl	800e1d8 <_LCD_Write_Frame>
}
 800dd32:	bf00      	nop
 800dd34:	3708      	adds	r7, #8
 800dd36:	46bd      	mov	sp, r7
 800dd38:	bd80      	pop	{r7, pc}
 800dd3a:	bf00      	nop
 800dd3c:	20000cae 	.word	0x20000cae
 800dd40:	20000cac 	.word	0x20000cac

0800dd44 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800dd44:	b580      	push	{r7, lr}
 800dd46:	b08c      	sub	sp, #48	; 0x30
 800dd48:	af00      	add	r7, sp, #0
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	80fb      	strh	r3, [r7, #6]
 800dd4e:	460b      	mov	r3, r1
 800dd50:	80bb      	strh	r3, [r7, #4]
 800dd52:	4613      	mov	r3, r2
 800dd54:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800dd56:	4b94      	ldr	r3, [pc, #592]	; (800dfa8 <ILI9341_Draw_Pixel+0x264>)
 800dd58:	881b      	ldrh	r3, [r3, #0]
 800dd5a:	b29b      	uxth	r3, r3
 800dd5c:	88fa      	ldrh	r2, [r7, #6]
 800dd5e:	429a      	cmp	r2, r3
 800dd60:	f080 811e 	bcs.w	800dfa0 <ILI9341_Draw_Pixel+0x25c>
 800dd64:	4b91      	ldr	r3, [pc, #580]	; (800dfac <ILI9341_Draw_Pixel+0x268>)
 800dd66:	881b      	ldrh	r3, [r3, #0]
 800dd68:	b29b      	uxth	r3, r3
 800dd6a:	88ba      	ldrh	r2, [r7, #4]
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	f080 8117 	bcs.w	800dfa0 <ILI9341_Draw_Pixel+0x25c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800dd72:	4b8f      	ldr	r3, [pc, #572]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800dd74:	695b      	ldr	r3, [r3, #20]
 800dd76:	4a8e      	ldr	r2, [pc, #568]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800dd78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dd7c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800dd7e:	4b8c      	ldr	r3, [pc, #560]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800dd80:	695b      	ldr	r3, [r3, #20]
 800dd82:	4a8b      	ldr	r2, [pc, #556]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800dd84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd88:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2A, 0, 0);
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	2100      	movs	r1, #0
 800dd8e:	202a      	movs	r0, #42	; 0x2a
 800dd90:	f000 fb36 	bl	800e400 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800dd94:	2300      	movs	r3, #0
 800dd96:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dd98:	e008      	b.n	800ddac <ILI9341_Draw_Pixel+0x68>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800dd9a:	4b85      	ldr	r3, [pc, #532]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800dd9c:	695b      	ldr	r3, [r3, #20]
 800dd9e:	4a84      	ldr	r2, [pc, #528]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800dda0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dda4:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800dda6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dda8:	3301      	adds	r3, #1
 800ddaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ddac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ddae:	2b02      	cmp	r3, #2
 800ddb0:	ddf3      	ble.n	800dd9a <ILI9341_Draw_Pixel+0x56>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800ddb2:	4b7f      	ldr	r3, [pc, #508]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800ddb4:	695b      	ldr	r3, [r3, #20]
 800ddb6:	4a7e      	ldr	r2, [pc, #504]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800ddb8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ddbc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800ddbe:	4b7c      	ldr	r3, [pc, #496]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800ddc0:	695b      	ldr	r3, [r3, #20]
 800ddc2:	4a7b      	ldr	r2, [pc, #492]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800ddc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ddc8:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800ddca:	4b79      	ldr	r3, [pc, #484]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800ddcc:	695b      	ldr	r3, [r3, #20]
 800ddce:	4a78      	ldr	r2, [pc, #480]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800ddd0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ddd4:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] =
 800ddd6:	88fb      	ldrh	r3, [r7, #6]
 800ddd8:	0a1b      	lsrs	r3, r3, #8
 800ddda:	b29b      	uxth	r3, r3
 800dddc:	b2db      	uxtb	r3, r3
 800ddde:	753b      	strb	r3, [r7, #20]
 800dde0:	88fb      	ldrh	r3, [r7, #6]
 800dde2:	b2db      	uxtb	r3, r3
 800dde4:	757b      	strb	r3, [r7, #21]
	{
			x >> 8,
			x,
			(x + 1) >> 8,
 800dde6:	88fb      	ldrh	r3, [r7, #6]
 800dde8:	3301      	adds	r3, #1
 800ddea:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer[4] =
 800ddec:	b2db      	uxtb	r3, r3
 800ddee:	75bb      	strb	r3, [r7, #22]
			(x + 1)
 800ddf0:	88fb      	ldrh	r3, [r7, #6]
 800ddf2:	b2db      	uxtb	r3, r3
 800ddf4:	3301      	adds	r3, #1
 800ddf6:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer[4] =
 800ddf8:	75fb      	strb	r3, [r7, #23]
	};

	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800ddfa:	f107 0014 	add.w	r0, r7, #20
 800ddfe:	230a      	movs	r3, #10
 800de00:	2200      	movs	r2, #0
 800de02:	2104      	movs	r1, #4
 800de04:	f000 fb2e 	bl	800e464 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800de08:	2300      	movs	r3, #0
 800de0a:	62bb      	str	r3, [r7, #40]	; 0x28
 800de0c:	e008      	b.n	800de20 <ILI9341_Draw_Pixel+0xdc>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800de0e:	4b68      	ldr	r3, [pc, #416]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800de10:	695b      	ldr	r3, [r3, #20]
 800de12:	4a67      	ldr	r2, [pc, #412]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800de14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de18:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800de1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de1c:	3301      	adds	r3, #1
 800de1e:	62bb      	str	r3, [r7, #40]	; 0x28
 800de20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de22:	2b02      	cmp	r3, #2
 800de24:	ddf3      	ble.n	800de0e <ILI9341_Draw_Pixel+0xca>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800de26:	4b62      	ldr	r3, [pc, #392]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800de28:	695b      	ldr	r3, [r3, #20]
 800de2a:	4a61      	ldr	r2, [pc, #388]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800de2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de30:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800de32:	4b5f      	ldr	r3, [pc, #380]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800de34:	695b      	ldr	r3, [r3, #20]
 800de36:	4a5e      	ldr	r2, [pc, #376]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800de38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800de3c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800de3e:	4b5c      	ldr	r3, [pc, #368]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800de40:	695b      	ldr	r3, [r3, #20]
 800de42:	4a5b      	ldr	r2, [pc, #364]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800de44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de48:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2B, 0, 0);
 800de4a:	2200      	movs	r2, #0
 800de4c:	2100      	movs	r1, #0
 800de4e:	202b      	movs	r0, #43	; 0x2b
 800de50:	f000 fad6 	bl	800e400 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800de54:	2300      	movs	r3, #0
 800de56:	627b      	str	r3, [r7, #36]	; 0x24
 800de58:	e008      	b.n	800de6c <ILI9341_Draw_Pixel+0x128>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800de5a:	4b55      	ldr	r3, [pc, #340]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800de5c:	695b      	ldr	r3, [r3, #20]
 800de5e:	4a54      	ldr	r2, [pc, #336]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800de60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de64:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800de66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de68:	3301      	adds	r3, #1
 800de6a:	627b      	str	r3, [r7, #36]	; 0x24
 800de6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de6e:	2b02      	cmp	r3, #2
 800de70:	ddf3      	ble.n	800de5a <ILI9341_Draw_Pixel+0x116>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800de72:	4b4f      	ldr	r3, [pc, #316]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800de74:	695b      	ldr	r3, [r3, #20]
 800de76:	4a4e      	ldr	r2, [pc, #312]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800de78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800de7c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800de7e:	4b4c      	ldr	r3, [pc, #304]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800de80:	695b      	ldr	r3, [r3, #20]
 800de82:	4a4b      	ldr	r2, [pc, #300]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800de84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800de88:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800de8a:	4b49      	ldr	r3, [pc, #292]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800de8c:	695b      	ldr	r3, [r3, #20]
 800de8e:	4a48      	ldr	r2, [pc, #288]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800de90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800de94:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] =
 800de96:	88bb      	ldrh	r3, [r7, #4]
 800de98:	0a1b      	lsrs	r3, r3, #8
 800de9a:	b29b      	uxth	r3, r3
 800de9c:	b2db      	uxtb	r3, r3
 800de9e:	743b      	strb	r3, [r7, #16]
 800dea0:	88bb      	ldrh	r3, [r7, #4]
 800dea2:	b2db      	uxtb	r3, r3
 800dea4:	747b      	strb	r3, [r7, #17]
	{
			y >> 8,
			y,
			(y + 1) >> 8,
 800dea6:	88bb      	ldrh	r3, [r7, #4]
 800dea8:	3301      	adds	r3, #1
 800deaa:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer1[4] =
 800deac:	b2db      	uxtb	r3, r3
 800deae:	74bb      	strb	r3, [r7, #18]
			(y + 1)
 800deb0:	88bb      	ldrh	r3, [r7, #4]
 800deb2:	b2db      	uxtb	r3, r3
 800deb4:	3301      	adds	r3, #1
 800deb6:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer1[4] =
 800deb8:	74fb      	strb	r3, [r7, #19]
	};

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800deba:	f107 0010 	add.w	r0, r7, #16
 800debe:	230a      	movs	r3, #10
 800dec0:	2200      	movs	r2, #0
 800dec2:	2104      	movs	r1, #4
 800dec4:	f000 face 	bl	800e464 <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800dec8:	2300      	movs	r3, #0
 800deca:	623b      	str	r3, [r7, #32]
 800decc:	e008      	b.n	800dee0 <ILI9341_Draw_Pixel+0x19c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800dece:	4b38      	ldr	r3, [pc, #224]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800ded0:	695b      	ldr	r3, [r3, #20]
 800ded2:	4a37      	ldr	r2, [pc, #220]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800ded4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ded8:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800deda:	6a3b      	ldr	r3, [r7, #32]
 800dedc:	3301      	adds	r3, #1
 800dede:	623b      	str	r3, [r7, #32]
 800dee0:	6a3b      	ldr	r3, [r7, #32]
 800dee2:	2b02      	cmp	r3, #2
 800dee4:	ddf3      	ble.n	800dece <ILI9341_Draw_Pixel+0x18a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800dee6:	4b32      	ldr	r3, [pc, #200]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800dee8:	695b      	ldr	r3, [r3, #20]
 800deea:	4a31      	ldr	r2, [pc, #196]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800deec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800def0:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800def2:	4b2f      	ldr	r3, [pc, #188]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800def4:	695b      	ldr	r3, [r3, #20]
 800def6:	4a2e      	ldr	r2, [pc, #184]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800def8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800defc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800defe:	4b2c      	ldr	r3, [pc, #176]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800df00:	695b      	ldr	r3, [r3, #20]
 800df02:	4a2b      	ldr	r2, [pc, #172]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800df04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df08:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2C, 0, 0);
 800df0a:	2200      	movs	r2, #0
 800df0c:	2100      	movs	r1, #0
 800df0e:	202c      	movs	r0, #44	; 0x2c
 800df10:	f000 fa76 	bl	800e400 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800df14:	2300      	movs	r3, #0
 800df16:	61fb      	str	r3, [r7, #28]
 800df18:	e008      	b.n	800df2c <ILI9341_Draw_Pixel+0x1e8>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800df1a:	4b25      	ldr	r3, [pc, #148]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800df1c:	695b      	ldr	r3, [r3, #20]
 800df1e:	4a24      	ldr	r2, [pc, #144]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800df20:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df24:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800df26:	69fb      	ldr	r3, [r7, #28]
 800df28:	3301      	adds	r3, #1
 800df2a:	61fb      	str	r3, [r7, #28]
 800df2c:	69fb      	ldr	r3, [r7, #28]
 800df2e:	2b02      	cmp	r3, #2
 800df30:	ddf3      	ble.n	800df1a <ILI9341_Draw_Pixel+0x1d6>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800df32:	4b1f      	ldr	r3, [pc, #124]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800df34:	695b      	ldr	r3, [r3, #20]
 800df36:	4a1e      	ldr	r2, [pc, #120]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800df38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df3c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800df3e:	4b1c      	ldr	r3, [pc, #112]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800df40:	695b      	ldr	r3, [r3, #20]
 800df42:	4a1b      	ldr	r2, [pc, #108]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800df44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df48:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800df4a:	4b19      	ldr	r3, [pc, #100]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800df4c:	695b      	ldr	r3, [r3, #20]
 800df4e:	4a18      	ldr	r2, [pc, #96]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800df50:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df54:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800df56:	887b      	ldrh	r3, [r7, #2]
 800df58:	0a1b      	lsrs	r3, r3, #8
 800df5a:	b29b      	uxth	r3, r3
 800df5c:	b2db      	uxtb	r3, r3
 800df5e:	733b      	strb	r3, [r7, #12]
 800df60:	887b      	ldrh	r3, [r7, #2]
 800df62:	b2db      	uxtb	r3, r3
 800df64:	737b      	strb	r3, [r7, #13]

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 4, 0, 10);
 800df66:	f107 000c 	add.w	r0, r7, #12
 800df6a:	230a      	movs	r3, #10
 800df6c:	2200      	movs	r2, #0
 800df6e:	2104      	movs	r1, #4
 800df70:	f000 fa78 	bl	800e464 <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800df74:	2300      	movs	r3, #0
 800df76:	61bb      	str	r3, [r7, #24]
 800df78:	e008      	b.n	800df8c <ILI9341_Draw_Pixel+0x248>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800df7a:	4b0d      	ldr	r3, [pc, #52]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800df7c:	695b      	ldr	r3, [r3, #20]
 800df7e:	4a0c      	ldr	r2, [pc, #48]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800df80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df84:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800df86:	69bb      	ldr	r3, [r7, #24]
 800df88:	3301      	adds	r3, #1
 800df8a:	61bb      	str	r3, [r7, #24]
 800df8c:	69bb      	ldr	r3, [r7, #24]
 800df8e:	2b02      	cmp	r3, #2
 800df90:	ddf3      	ble.n	800df7a <ILI9341_Draw_Pixel+0x236>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800df92:	4b07      	ldr	r3, [pc, #28]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800df94:	695b      	ldr	r3, [r3, #20]
 800df96:	4a06      	ldr	r2, [pc, #24]	; (800dfb0 <ILI9341_Draw_Pixel+0x26c>)
 800df98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df9c:	6153      	str	r3, [r2, #20]
 800df9e:	e000      	b.n	800dfa2 <ILI9341_Draw_Pixel+0x25e>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800dfa0:	bf00      	nop


}
 800dfa2:	3730      	adds	r7, #48	; 0x30
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	bd80      	pop	{r7, pc}
 800dfa8:	20000cae 	.word	0x20000cae
 800dfac:	20000cac 	.word	0x20000cac
 800dfb0:	48000400 	.word	0x48000400

0800dfb4 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800dfb4:	b590      	push	{r4, r7, lr}
 800dfb6:	b087      	sub	sp, #28
 800dfb8:	af02      	add	r7, sp, #8
 800dfba:	4604      	mov	r4, r0
 800dfbc:	4608      	mov	r0, r1
 800dfbe:	4611      	mov	r1, r2
 800dfc0:	461a      	mov	r2, r3
 800dfc2:	4623      	mov	r3, r4
 800dfc4:	80fb      	strh	r3, [r7, #6]
 800dfc6:	4603      	mov	r3, r0
 800dfc8:	80bb      	strh	r3, [r7, #4]
 800dfca:	460b      	mov	r3, r1
 800dfcc:	807b      	strh	r3, [r7, #2]
 800dfce:	4613      	mov	r3, r2
 800dfd0:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800dfd2:	4b41      	ldr	r3, [pc, #260]	; (800e0d8 <ILI9341_Draw_Rectangle+0x124>)
 800dfd4:	881b      	ldrh	r3, [r3, #0]
 800dfd6:	b29b      	uxth	r3, r3
 800dfd8:	88fa      	ldrh	r2, [r7, #6]
 800dfda:	429a      	cmp	r2, r3
 800dfdc:	d278      	bcs.n	800e0d0 <ILI9341_Draw_Rectangle+0x11c>
 800dfde:	4b3f      	ldr	r3, [pc, #252]	; (800e0dc <ILI9341_Draw_Rectangle+0x128>)
 800dfe0:	881b      	ldrh	r3, [r3, #0]
 800dfe2:	b29b      	uxth	r3, r3
 800dfe4:	88ba      	ldrh	r2, [r7, #4]
 800dfe6:	429a      	cmp	r2, r3
 800dfe8:	d272      	bcs.n	800e0d0 <ILI9341_Draw_Rectangle+0x11c>
	if((xpos+width-1)>=LCD_WIDTH)
 800dfea:	88fa      	ldrh	r2, [r7, #6]
 800dfec:	887b      	ldrh	r3, [r7, #2]
 800dfee:	4413      	add	r3, r2
 800dff0:	3b01      	subs	r3, #1
 800dff2:	4a39      	ldr	r2, [pc, #228]	; (800e0d8 <ILI9341_Draw_Rectangle+0x124>)
 800dff4:	8812      	ldrh	r2, [r2, #0]
 800dff6:	b292      	uxth	r2, r2
 800dff8:	4293      	cmp	r3, r2
 800dffa:	db05      	blt.n	800e008 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800dffc:	4b36      	ldr	r3, [pc, #216]	; (800e0d8 <ILI9341_Draw_Rectangle+0x124>)
 800dffe:	881b      	ldrh	r3, [r3, #0]
 800e000:	b29a      	uxth	r2, r3
 800e002:	88fb      	ldrh	r3, [r7, #6]
 800e004:	1ad3      	subs	r3, r2, r3
 800e006:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800e008:	88ba      	ldrh	r2, [r7, #4]
 800e00a:	883b      	ldrh	r3, [r7, #0]
 800e00c:	4413      	add	r3, r2
 800e00e:	3b01      	subs	r3, #1
 800e010:	4a32      	ldr	r2, [pc, #200]	; (800e0dc <ILI9341_Draw_Rectangle+0x128>)
 800e012:	8812      	ldrh	r2, [r2, #0]
 800e014:	b292      	uxth	r2, r2
 800e016:	4293      	cmp	r3, r2
 800e018:	db05      	blt.n	800e026 <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800e01a:	4b30      	ldr	r3, [pc, #192]	; (800e0dc <ILI9341_Draw_Rectangle+0x128>)
 800e01c:	881b      	ldrh	r3, [r3, #0]
 800e01e:	b29a      	uxth	r2, r3
 800e020:	88bb      	ldrh	r3, [r7, #4]
 800e022:	1ad3      	subs	r3, r2, r3
 800e024:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800e026:	88fa      	ldrh	r2, [r7, #6]
 800e028:	887b      	ldrh	r3, [r7, #2]
 800e02a:	4413      	add	r3, r2
 800e02c:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800e02e:	3b01      	subs	r3, #1
 800e030:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800e032:	88ba      	ldrh	r2, [r7, #4]
 800e034:	883b      	ldrh	r3, [r7, #0]
 800e036:	4413      	add	r3, r2
 800e038:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800e03a:	3b01      	subs	r3, #1
 800e03c:	b29b      	uxth	r3, r3
 800e03e:	88b9      	ldrh	r1, [r7, #4]
 800e040:	88f8      	ldrh	r0, [r7, #6]
 800e042:	4622      	mov	r2, r4
 800e044:	f7ff fe08 	bl	800dc58 <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800e048:	883a      	ldrh	r2, [r7, #0]
 800e04a:	887b      	ldrh	r3, [r7, #2]
 800e04c:	fb12 f303 	smulbb	r3, r2, r3
 800e050:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800e052:	2300      	movs	r3, #0
 800e054:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800e056:	89fb      	ldrh	r3, [r7, #14]
 800e058:	f003 0301 	and.w	r3, r3, #1
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d009      	beq.n	800e074 <ILI9341_Draw_Rectangle+0xc0>
 800e060:	89fb      	ldrh	r3, [r7, #14]
 800e062:	2b01      	cmp	r3, #1
 800e064:	d906      	bls.n	800e074 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800e066:	2301      	movs	r3, #1
 800e068:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800e06a:	89fb      	ldrh	r3, [r7, #14]
 800e06c:	085b      	lsrs	r3, r3, #1
 800e06e:	b29b      	uxth	r3, r3
 800e070:	005b      	lsls	r3, r3, #1
 800e072:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800e074:	89fc      	ldrh	r4, [r7, #14]
 800e076:	8c3a      	ldrh	r2, [r7, #32]
 800e078:	88b9      	ldrh	r1, [r7, #4]
 800e07a:	88f8      	ldrh	r0, [r7, #6]
 800e07c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800e080:	9300      	str	r3, [sp, #0]
 800e082:	4623      	mov	r3, r4
 800e084:	f000 f8a8 	bl	800e1d8 <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800e088:	7b7b      	ldrb	r3, [r7, #13]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d021      	beq.n	800e0d2 <ILI9341_Draw_Rectangle+0x11e>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800e08e:	88fa      	ldrh	r2, [r7, #6]
 800e090:	887b      	ldrh	r3, [r7, #2]
 800e092:	4413      	add	r3, r2
 800e094:	b29b      	uxth	r3, r3
 800e096:	3b02      	subs	r3, #2
 800e098:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800e09a:	88ba      	ldrh	r2, [r7, #4]
 800e09c:	883b      	ldrh	r3, [r7, #0]
 800e09e:	4413      	add	r3, r2
 800e0a0:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 2,
 800e0a2:	3b01      	subs	r3, #1
 800e0a4:	b29b      	uxth	r3, r3
 800e0a6:	8c3a      	ldrh	r2, [r7, #32]
 800e0a8:	4619      	mov	r1, r3
 800e0aa:	f7ff fe4b 	bl	800dd44 <ILI9341_Draw_Pixel>
							colour);
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800e0ae:	88fa      	ldrh	r2, [r7, #6]
 800e0b0:	887b      	ldrh	r3, [r7, #2]
 800e0b2:	4413      	add	r3, r2
 800e0b4:	b29b      	uxth	r3, r3
 800e0b6:	3b01      	subs	r3, #1
 800e0b8:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800e0ba:	88ba      	ldrh	r2, [r7, #4]
 800e0bc:	883b      	ldrh	r3, [r7, #0]
 800e0be:	4413      	add	r3, r2
 800e0c0:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800e0c2:	3b01      	subs	r3, #1
 800e0c4:	b29b      	uxth	r3, r3
 800e0c6:	8c3a      	ldrh	r2, [r7, #32]
 800e0c8:	4619      	mov	r1, r3
 800e0ca:	f7ff fe3b 	bl	800dd44 <ILI9341_Draw_Pixel>
 800e0ce:	e000      	b.n	800e0d2 <ILI9341_Draw_Rectangle+0x11e>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800e0d0:	bf00      	nop
							colour);
	}
}
 800e0d2:	3714      	adds	r7, #20
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd90      	pop	{r4, r7, pc}
 800e0d8:	20000cae 	.word	0x20000cae
 800e0dc:	20000cac 	.word	0x20000cac

0800e0e0 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b084      	sub	sp, #16
 800e0e4:	af00      	add	r7, sp, #0
 800e0e6:	4603      	mov	r3, r0
 800e0e8:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800e0ea:	79fb      	ldrb	r3, [r7, #7]
 800e0ec:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800e0ee:	2036      	movs	r0, #54	; 0x36
 800e0f0:	f000 f922 	bl	800e338 <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800e0f4:	7bfb      	ldrb	r3, [r7, #15]
 800e0f6:	2b03      	cmp	r3, #3
 800e0f8:	d836      	bhi.n	800e168 <ILI9341_Set_Rotation+0x88>
 800e0fa:	a201      	add	r2, pc, #4	; (adr r2, 800e100 <ILI9341_Set_Rotation+0x20>)
 800e0fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e100:	0800e111 	.word	0x0800e111
 800e104:	0800e127 	.word	0x0800e127
 800e108:	0800e13d 	.word	0x0800e13d
 800e10c:	0800e153 	.word	0x0800e153
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800e110:	2048      	movs	r0, #72	; 0x48
 800e112:	f000 f943 	bl	800e39c <_LCD_SendData>
			LCD_WIDTH = 240;
 800e116:	4b17      	ldr	r3, [pc, #92]	; (800e174 <ILI9341_Set_Rotation+0x94>)
 800e118:	22f0      	movs	r2, #240	; 0xf0
 800e11a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800e11c:	4b16      	ldr	r3, [pc, #88]	; (800e178 <ILI9341_Set_Rotation+0x98>)
 800e11e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e122:	801a      	strh	r2, [r3, #0]
			break;
 800e124:	e021      	b.n	800e16a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800e126:	2028      	movs	r0, #40	; 0x28
 800e128:	f000 f938 	bl	800e39c <_LCD_SendData>
			LCD_WIDTH  = 320;
 800e12c:	4b11      	ldr	r3, [pc, #68]	; (800e174 <ILI9341_Set_Rotation+0x94>)
 800e12e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e132:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800e134:	4b10      	ldr	r3, [pc, #64]	; (800e178 <ILI9341_Set_Rotation+0x98>)
 800e136:	22f0      	movs	r2, #240	; 0xf0
 800e138:	801a      	strh	r2, [r3, #0]
			break;
 800e13a:	e016      	b.n	800e16a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800e13c:	2088      	movs	r0, #136	; 0x88
 800e13e:	f000 f92d 	bl	800e39c <_LCD_SendData>
			LCD_WIDTH  = 240;
 800e142:	4b0c      	ldr	r3, [pc, #48]	; (800e174 <ILI9341_Set_Rotation+0x94>)
 800e144:	22f0      	movs	r2, #240	; 0xf0
 800e146:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800e148:	4b0b      	ldr	r3, [pc, #44]	; (800e178 <ILI9341_Set_Rotation+0x98>)
 800e14a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e14e:	801a      	strh	r2, [r3, #0]
			break;
 800e150:	e00b      	b.n	800e16a <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800e152:	20e8      	movs	r0, #232	; 0xe8
 800e154:	f000 f922 	bl	800e39c <_LCD_SendData>
			LCD_WIDTH  = 320;
 800e158:	4b06      	ldr	r3, [pc, #24]	; (800e174 <ILI9341_Set_Rotation+0x94>)
 800e15a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800e15e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800e160:	4b05      	ldr	r3, [pc, #20]	; (800e178 <ILI9341_Set_Rotation+0x98>)
 800e162:	22f0      	movs	r2, #240	; 0xf0
 800e164:	801a      	strh	r2, [r3, #0]
			break;
 800e166:	e000      	b.n	800e16a <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800e168:	bf00      	nop
	}
}
 800e16a:	bf00      	nop
 800e16c:	3710      	adds	r7, #16
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}
 800e172:	bf00      	nop
 800e174:	20000cae 	.word	0x20000cae
 800e178:	20000cac 	.word	0x20000cac

0800e17c <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800e17c:	b480      	push	{r7}
 800e17e:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800e180:	4b05      	ldr	r3, [pc, #20]	; (800e198 <_LCD_Enable+0x1c>)
 800e182:	695b      	ldr	r3, [r3, #20]
 800e184:	4a04      	ldr	r2, [pc, #16]	; (800e198 <_LCD_Enable+0x1c>)
 800e186:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e18a:	6153      	str	r3, [r2, #20]
}
 800e18c:	bf00      	nop
 800e18e:	46bd      	mov	sp, r7
 800e190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e194:	4770      	bx	lr
 800e196:	bf00      	nop
 800e198:	48000400 	.word	0x48000400

0800e19c <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800e1a0:	4b0c      	ldr	r3, [pc, #48]	; (800e1d4 <_LCD_Reset+0x38>)
 800e1a2:	695b      	ldr	r3, [r3, #20]
 800e1a4:	4a0b      	ldr	r2, [pc, #44]	; (800e1d4 <_LCD_Reset+0x38>)
 800e1a6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800e1aa:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800e1ac:	20c8      	movs	r0, #200	; 0xc8
 800e1ae:	f7fa f97d 	bl	80084ac <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e1b2:	4b08      	ldr	r3, [pc, #32]	; (800e1d4 <_LCD_Reset+0x38>)
 800e1b4:	695b      	ldr	r3, [r3, #20]
 800e1b6:	4a07      	ldr	r2, [pc, #28]	; (800e1d4 <_LCD_Reset+0x38>)
 800e1b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e1bc:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800e1be:	20c8      	movs	r0, #200	; 0xc8
 800e1c0:	f7fa f974 	bl	80084ac <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800e1c4:	4b03      	ldr	r3, [pc, #12]	; (800e1d4 <_LCD_Reset+0x38>)
 800e1c6:	695b      	ldr	r3, [r3, #20]
 800e1c8:	4a02      	ldr	r2, [pc, #8]	; (800e1d4 <_LCD_Reset+0x38>)
 800e1ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800e1ce:	6153      	str	r3, [r2, #20]
}
 800e1d0:	bf00      	nop
 800e1d2:	bd80      	pop	{r7, pc}
 800e1d4:	48000400 	.word	0x48000400

0800e1d8 <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800e1d8:	b5b0      	push	{r4, r5, r7, lr}
 800e1da:	b08e      	sub	sp, #56	; 0x38
 800e1dc:	af00      	add	r7, sp, #0
 800e1de:	607b      	str	r3, [r7, #4]
 800e1e0:	4603      	mov	r3, r0
 800e1e2:	81fb      	strh	r3, [r7, #14]
 800e1e4:	460b      	mov	r3, r1
 800e1e6:	81bb      	strh	r3, [r7, #12]
 800e1e8:	4613      	mov	r3, r2
 800e1ea:	817b      	strh	r3, [r7, #10]
 800e1ec:	466b      	mov	r3, sp
 800e1ee:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800e1f0:	2300      	movs	r3, #0
 800e1f2:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800e1f4:	687b      	ldr	r3, [r7, #4]
 800e1f6:	005b      	lsls	r3, r3, #1
 800e1f8:	4a4d      	ldr	r2, [pc, #308]	; (800e330 <_LCD_Write_Frame+0x158>)
 800e1fa:	8812      	ldrh	r2, [r2, #0]
 800e1fc:	4293      	cmp	r3, r2
 800e1fe:	d202      	bcs.n	800e206 <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e204:	e002      	b.n	800e20c <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800e206:	4b4a      	ldr	r3, [pc, #296]	; (800e330 <_LCD_Write_Frame+0x158>)
 800e208:	881b      	ldrh	r3, [r3, #0]
 800e20a:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800e20c:	897b      	ldrh	r3, [r7, #10]
 800e20e:	0a1b      	lsrs	r3, r3, #8
 800e210:	b29b      	uxth	r3, r3
 800e212:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800e214:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e216:	4603      	mov	r3, r0
 800e218:	3b01      	subs	r3, #1
 800e21a:	61bb      	str	r3, [r7, #24]
 800e21c:	4601      	mov	r1, r0
 800e21e:	f04f 0200 	mov.w	r2, #0
 800e222:	f04f 0300 	mov.w	r3, #0
 800e226:	f04f 0400 	mov.w	r4, #0
 800e22a:	00d4      	lsls	r4, r2, #3
 800e22c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800e230:	00cb      	lsls	r3, r1, #3
 800e232:	4601      	mov	r1, r0
 800e234:	f04f 0200 	mov.w	r2, #0
 800e238:	f04f 0300 	mov.w	r3, #0
 800e23c:	f04f 0400 	mov.w	r4, #0
 800e240:	00d4      	lsls	r4, r2, #3
 800e242:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800e246:	00cb      	lsls	r3, r1, #3
 800e248:	1dc3      	adds	r3, r0, #7
 800e24a:	08db      	lsrs	r3, r3, #3
 800e24c:	00db      	lsls	r3, r3, #3
 800e24e:	ebad 0d03 	sub.w	sp, sp, r3
 800e252:	466b      	mov	r3, sp
 800e254:	3300      	adds	r3, #0
 800e256:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800e258:	2300      	movs	r3, #0
 800e25a:	633b      	str	r3, [r7, #48]	; 0x30
 800e25c:	e00d      	b.n	800e27a <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800e25e:	697a      	ldr	r2, [r7, #20]
 800e260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e262:	4413      	add	r3, r2
 800e264:	7ffa      	ldrb	r2, [r7, #31]
 800e266:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800e268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e26a:	3301      	adds	r3, #1
 800e26c:	897a      	ldrh	r2, [r7, #10]
 800e26e:	b2d1      	uxtb	r1, r2
 800e270:	697a      	ldr	r2, [r7, #20]
 800e272:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800e274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e276:	3302      	adds	r3, #2
 800e278:	633b      	str	r3, [r7, #48]	; 0x30
 800e27a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e27e:	429a      	cmp	r2, r3
 800e280:	d3ed      	bcc.n	800e25e <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	005b      	lsls	r3, r3, #1
 800e286:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800e288:	2301      	movs	r3, #1
 800e28a:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800e28c:	2300      	movs	r3, #0
 800e28e:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2b00      	cmp	r3, #0
 800e294:	d00d      	beq.n	800e2b2 <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800e296:	693a      	ldr	r2, [r7, #16]
 800e298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e29a:	fbb2 f3f3 	udiv	r3, r2, r3
 800e29e:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800e2a0:	693b      	ldr	r3, [r7, #16]
 800e2a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e2a4:	fbb3 f2f2 	udiv	r2, r3, r2
 800e2a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e2aa:	fb01 f202 	mul.w	r2, r1, r2
 800e2ae:	1a9b      	subs	r3, r3, r2
 800e2b0:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e2b2:	4b20      	ldr	r3, [pc, #128]	; (800e334 <_LCD_Write_Frame+0x15c>)
 800e2b4:	695b      	ldr	r3, [r3, #20]
 800e2b6:	4a1f      	ldr	r2, [pc, #124]	; (800e334 <_LCD_Write_Frame+0x15c>)
 800e2b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2bc:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e2be:	4b1d      	ldr	r3, [pc, #116]	; (800e334 <_LCD_Write_Frame+0x15c>)
 800e2c0:	695b      	ldr	r3, [r3, #20]
 800e2c2:	4a1c      	ldr	r2, [pc, #112]	; (800e334 <_LCD_Write_Frame+0x15c>)
 800e2c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e2c8:	6153      	str	r3, [r2, #20]
//TODO
	if(Sending_in_Block != 0)
 800e2ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2cc:	2b00      	cmp	r3, #0
 800e2ce:	d00f      	beq.n	800e2f0 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800e2d0:	2300      	movs	r3, #0
 800e2d2:	627b      	str	r3, [r7, #36]	; 0x24
 800e2d4:	e008      	b.n	800e2e8 <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800e2d6:	6978      	ldr	r0, [r7, #20]
 800e2d8:	230a      	movs	r3, #10
 800e2da:	2200      	movs	r2, #0
 800e2dc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e2de:	f000 f8c1 	bl	800e464 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800e2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2e4:	3301      	adds	r3, #1
 800e2e6:	627b      	str	r3, [r7, #36]	; 0x24
 800e2e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e2ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e2ec:	429a      	cmp	r2, r3
 800e2ee:	d3f2      	bcc.n	800e2d6 <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 800e2f0:	6978      	ldr	r0, [r7, #20]
 800e2f2:	230a      	movs	r3, #10
 800e2f4:	2200      	movs	r2, #0
 800e2f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e2f8:	f000 f8b4 	bl	800e464 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e2fc:	2300      	movs	r3, #0
 800e2fe:	623b      	str	r3, [r7, #32]
 800e300:	e008      	b.n	800e314 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e302:	4b0c      	ldr	r3, [pc, #48]	; (800e334 <_LCD_Write_Frame+0x15c>)
 800e304:	695b      	ldr	r3, [r3, #20]
 800e306:	4a0b      	ldr	r2, [pc, #44]	; (800e334 <_LCD_Write_Frame+0x15c>)
 800e308:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e30c:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e30e:	6a3b      	ldr	r3, [r7, #32]
 800e310:	3301      	adds	r3, #1
 800e312:	623b      	str	r3, [r7, #32]
 800e314:	6a3b      	ldr	r3, [r7, #32]
 800e316:	2b02      	cmp	r3, #2
 800e318:	ddf3      	ble.n	800e302 <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e31a:	4b06      	ldr	r3, [pc, #24]	; (800e334 <_LCD_Write_Frame+0x15c>)
 800e31c:	695b      	ldr	r3, [r3, #20]
 800e31e:	4a05      	ldr	r2, [pc, #20]	; (800e334 <_LCD_Write_Frame+0x15c>)
 800e320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e324:	6153      	str	r3, [r2, #20]
 800e326:	46ad      	mov	sp, r5

}
 800e328:	bf00      	nop
 800e32a:	3738      	adds	r7, #56	; 0x38
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bdb0      	pop	{r4, r5, r7, pc}
 800e330:	20000cb0 	.word	0x20000cb0
 800e334:	48000400 	.word	0x48000400

0800e338 <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b084      	sub	sp, #16
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	4603      	mov	r3, r0
 800e340:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e342:	4b15      	ldr	r3, [pc, #84]	; (800e398 <_LCD_SendCommand+0x60>)
 800e344:	695b      	ldr	r3, [r3, #20]
 800e346:	4a14      	ldr	r2, [pc, #80]	; (800e398 <_LCD_SendCommand+0x60>)
 800e348:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e34c:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800e34e:	4b12      	ldr	r3, [pc, #72]	; (800e398 <_LCD_SendCommand+0x60>)
 800e350:	695b      	ldr	r3, [r3, #20]
 800e352:	4a11      	ldr	r2, [pc, #68]	; (800e398 <_LCD_SendCommand+0x60>)
 800e354:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e358:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800e35a:	79fb      	ldrb	r3, [r7, #7]
 800e35c:	2200      	movs	r2, #0
 800e35e:	2100      	movs	r1, #0
 800e360:	4618      	mov	r0, r3
 800e362:	f000 f84d 	bl	800e400 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e366:	2300      	movs	r3, #0
 800e368:	60fb      	str	r3, [r7, #12]
 800e36a:	e008      	b.n	800e37e <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e36c:	4b0a      	ldr	r3, [pc, #40]	; (800e398 <_LCD_SendCommand+0x60>)
 800e36e:	695b      	ldr	r3, [r3, #20]
 800e370:	4a09      	ldr	r2, [pc, #36]	; (800e398 <_LCD_SendCommand+0x60>)
 800e372:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e376:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	3301      	adds	r3, #1
 800e37c:	60fb      	str	r3, [r7, #12]
 800e37e:	68fb      	ldr	r3, [r7, #12]
 800e380:	2b02      	cmp	r3, #2
 800e382:	ddf3      	ble.n	800e36c <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800e384:	4b04      	ldr	r3, [pc, #16]	; (800e398 <_LCD_SendCommand+0x60>)
 800e386:	695b      	ldr	r3, [r3, #20]
 800e388:	4a03      	ldr	r2, [pc, #12]	; (800e398 <_LCD_SendCommand+0x60>)
 800e38a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e38e:	6153      	str	r3, [r2, #20]
}
 800e390:	bf00      	nop
 800e392:	3710      	adds	r7, #16
 800e394:	46bd      	mov	sp, r7
 800e396:	bd80      	pop	{r7, pc}
 800e398:	48000400 	.word	0x48000400

0800e39c <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b084      	sub	sp, #16
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	4603      	mov	r3, r0
 800e3a4:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800e3a6:	4b15      	ldr	r3, [pc, #84]	; (800e3fc <_LCD_SendData+0x60>)
 800e3a8:	695b      	ldr	r3, [r3, #20]
 800e3aa:	4a14      	ldr	r2, [pc, #80]	; (800e3fc <_LCD_SendData+0x60>)
 800e3ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e3b0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e3b2:	4b12      	ldr	r3, [pc, #72]	; (800e3fc <_LCD_SendData+0x60>)
 800e3b4:	695b      	ldr	r3, [r3, #20]
 800e3b6:	4a11      	ldr	r2, [pc, #68]	; (800e3fc <_LCD_SendData+0x60>)
 800e3b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e3bc:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800e3be:	79fb      	ldrb	r3, [r7, #7]
 800e3c0:	2200      	movs	r2, #0
 800e3c2:	2100      	movs	r1, #0
 800e3c4:	4618      	mov	r0, r3
 800e3c6:	f000 f81b 	bl	800e400 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	60fb      	str	r3, [r7, #12]
 800e3ce:	e008      	b.n	800e3e2 <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e3d0:	4b0a      	ldr	r3, [pc, #40]	; (800e3fc <_LCD_SendData+0x60>)
 800e3d2:	695b      	ldr	r3, [r3, #20]
 800e3d4:	4a09      	ldr	r2, [pc, #36]	; (800e3fc <_LCD_SendData+0x60>)
 800e3d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e3da:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800e3dc:	68fb      	ldr	r3, [r7, #12]
 800e3de:	3301      	adds	r3, #1
 800e3e0:	60fb      	str	r3, [r7, #12]
 800e3e2:	68fb      	ldr	r3, [r7, #12]
 800e3e4:	2b02      	cmp	r3, #2
 800e3e6:	ddf3      	ble.n	800e3d0 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800e3e8:	4b04      	ldr	r3, [pc, #16]	; (800e3fc <_LCD_SendData+0x60>)
 800e3ea:	695b      	ldr	r3, [r3, #20]
 800e3ec:	4a03      	ldr	r2, [pc, #12]	; (800e3fc <_LCD_SendData+0x60>)
 800e3ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e3f2:	6153      	str	r3, [r2, #20]
}
 800e3f4:	bf00      	nop
 800e3f6:	3710      	adds	r7, #16
 800e3f8:	46bd      	mov	sp, r7
 800e3fa:	bd80      	pop	{r7, pc}
 800e3fc:	48000400 	.word	0x48000400

0800e400 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800e400:	b480      	push	{r7}
 800e402:	b085      	sub	sp, #20
 800e404:	af00      	add	r7, sp, #0
 800e406:	4603      	mov	r3, r0
 800e408:	71fb      	strb	r3, [r7, #7]
 800e40a:	460b      	mov	r3, r1
 800e40c:	71bb      	strb	r3, [r7, #6]
 800e40e:	4613      	mov	r3, r2
 800e410:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e412:	2300      	movs	r3, #0
 800e414:	60fb      	str	r3, [r7, #12]
 800e416:	e003      	b.n	800e420 <_SPI_SendByte+0x20>
   		asm("nop");
 800e418:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	3301      	adds	r3, #1
 800e41e:	60fb      	str	r3, [r7, #12]
 800e420:	79bb      	ldrb	r3, [r7, #6]
 800e422:	68fa      	ldr	r2, [r7, #12]
 800e424:	429a      	cmp	r2, r3
 800e426:	dbf7      	blt.n	800e418 <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800e428:	4b0c      	ldr	r3, [pc, #48]	; (800e45c <_SPI_SendByte+0x5c>)
 800e42a:	689b      	ldr	r3, [r3, #8]
 800e42c:	f003 0302 	and.w	r3, r3, #2
 800e430:	2b02      	cmp	r3, #2
 800e432:	d102      	bne.n	800e43a <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 800e434:	4a0a      	ldr	r2, [pc, #40]	; (800e460 <_SPI_SendByte+0x60>)
 800e436:	79fb      	ldrb	r3, [r7, #7]
 800e438:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800e43a:	2300      	movs	r3, #0
 800e43c:	60bb      	str	r3, [r7, #8]
 800e43e:	e003      	b.n	800e448 <_SPI_SendByte+0x48>
   		asm("nop");
 800e440:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800e442:	68bb      	ldr	r3, [r7, #8]
 800e444:	3301      	adds	r3, #1
 800e446:	60bb      	str	r3, [r7, #8]
 800e448:	797b      	ldrb	r3, [r7, #5]
 800e44a:	68ba      	ldr	r2, [r7, #8]
 800e44c:	429a      	cmp	r2, r3
 800e44e:	dbf7      	blt.n	800e440 <_SPI_SendByte+0x40>

#endif

}
 800e450:	bf00      	nop
 800e452:	3714      	adds	r7, #20
 800e454:	46bd      	mov	sp, r7
 800e456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e45a:	4770      	bx	lr
 800e45c:	40003c00 	.word	0x40003c00
 800e460:	40003c0c 	.word	0x40003c0c

0800e464 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800e464:	b480      	push	{r7}
 800e466:	b089      	sub	sp, #36	; 0x24
 800e468:	af00      	add	r7, sp, #0
 800e46a:	60f8      	str	r0, [r7, #12]
 800e46c:	60b9      	str	r1, [r7, #8]
 800e46e:	4611      	mov	r1, r2
 800e470:	461a      	mov	r2, r3
 800e472:	460b      	mov	r3, r1
 800e474:	71fb      	strb	r3, [r7, #7]
 800e476:	4613      	mov	r3, r2
 800e478:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e47a:	2300      	movs	r3, #0
 800e47c:	61fb      	str	r3, [r7, #28]
 800e47e:	e003      	b.n	800e488 <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 800e480:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800e482:	69fb      	ldr	r3, [r7, #28]
 800e484:	3301      	adds	r3, #1
 800e486:	61fb      	str	r3, [r7, #28]
 800e488:	79fb      	ldrb	r3, [r7, #7]
 800e48a:	69fa      	ldr	r2, [r7, #28]
 800e48c:	429a      	cmp	r2, r3
 800e48e:	dbf7      	blt.n	800e480 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 800e490:	68fb      	ldr	r3, [r7, #12]
 800e492:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 800e494:	e01d      	b.n	800e4d2 <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800e496:	4b1c      	ldr	r3, [pc, #112]	; (800e508 <_SPI_SendByteMultiByte+0xa4>)
 800e498:	689b      	ldr	r3, [r3, #8]
 800e49a:	f003 0302 	and.w	r3, r3, #2
 800e49e:	2b02      	cmp	r3, #2
 800e4a0:	d117      	bne.n	800e4d2 <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	2b01      	cmp	r3, #1
 800e4a6:	d90a      	bls.n	800e4be <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800e4a8:	69bb      	ldr	r3, [r7, #24]
 800e4aa:	881a      	ldrh	r2, [r3, #0]
 800e4ac:	4b16      	ldr	r3, [pc, #88]	; (800e508 <_SPI_SendByteMultiByte+0xa4>)
 800e4ae:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 800e4b0:	69bb      	ldr	r3, [r7, #24]
 800e4b2:	3302      	adds	r3, #2
 800e4b4:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 800e4b6:	68bb      	ldr	r3, [r7, #8]
 800e4b8:	3b02      	subs	r3, #2
 800e4ba:	60bb      	str	r3, [r7, #8]
 800e4bc:	e009      	b.n	800e4d2 <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 800e4be:	4a13      	ldr	r2, [pc, #76]	; (800e50c <_SPI_SendByteMultiByte+0xa8>)
 800e4c0:	69bb      	ldr	r3, [r7, #24]
 800e4c2:	781b      	ldrb	r3, [r3, #0]
 800e4c4:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 800e4c6:	69bb      	ldr	r3, [r7, #24]
 800e4c8:	3301      	adds	r3, #1
 800e4ca:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800e4cc:	68bb      	ldr	r3, [r7, #8]
 800e4ce:	3b01      	subs	r3, #1
 800e4d0:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 800e4d2:	68bb      	ldr	r3, [r7, #8]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d1de      	bne.n	800e496 <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800e4d8:	4b0b      	ldr	r3, [pc, #44]	; (800e508 <_SPI_SendByteMultiByte+0xa4>)
 800e4da:	689b      	ldr	r3, [r3, #8]
 800e4dc:	4a0a      	ldr	r2, [pc, #40]	; (800e508 <_SPI_SendByteMultiByte+0xa4>)
 800e4de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e4e2:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800e4e4:	2300      	movs	r3, #0
 800e4e6:	617b      	str	r3, [r7, #20]
 800e4e8:	e003      	b.n	800e4f2 <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 800e4ea:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800e4ec:	697b      	ldr	r3, [r7, #20]
 800e4ee:	3301      	adds	r3, #1
 800e4f0:	617b      	str	r3, [r7, #20]
 800e4f2:	79bb      	ldrb	r3, [r7, #6]
 800e4f4:	697a      	ldr	r2, [r7, #20]
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	dbf7      	blt.n	800e4ea <_SPI_SendByteMultiByte+0x86>

#endif

}
 800e4fa:	bf00      	nop
 800e4fc:	3724      	adds	r7, #36	; 0x24
 800e4fe:	46bd      	mov	sp, r7
 800e500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e504:	4770      	bx	lr
 800e506:	bf00      	nop
 800e508:	40003c00 	.word	0x40003c00
 800e50c:	40003c0c 	.word	0x40003c0c

0800e510 <__errno>:
 800e510:	4b01      	ldr	r3, [pc, #4]	; (800e518 <__errno+0x8>)
 800e512:	6818      	ldr	r0, [r3, #0]
 800e514:	4770      	bx	lr
 800e516:	bf00      	nop
 800e518:	200017f4 	.word	0x200017f4

0800e51c <__libc_init_array>:
 800e51c:	b570      	push	{r4, r5, r6, lr}
 800e51e:	4e0d      	ldr	r6, [pc, #52]	; (800e554 <__libc_init_array+0x38>)
 800e520:	4c0d      	ldr	r4, [pc, #52]	; (800e558 <__libc_init_array+0x3c>)
 800e522:	1ba4      	subs	r4, r4, r6
 800e524:	10a4      	asrs	r4, r4, #2
 800e526:	2500      	movs	r5, #0
 800e528:	42a5      	cmp	r5, r4
 800e52a:	d109      	bne.n	800e540 <__libc_init_array+0x24>
 800e52c:	4e0b      	ldr	r6, [pc, #44]	; (800e55c <__libc_init_array+0x40>)
 800e52e:	4c0c      	ldr	r4, [pc, #48]	; (800e560 <__libc_init_array+0x44>)
 800e530:	f003 fc88 	bl	8011e44 <_init>
 800e534:	1ba4      	subs	r4, r4, r6
 800e536:	10a4      	asrs	r4, r4, #2
 800e538:	2500      	movs	r5, #0
 800e53a:	42a5      	cmp	r5, r4
 800e53c:	d105      	bne.n	800e54a <__libc_init_array+0x2e>
 800e53e:	bd70      	pop	{r4, r5, r6, pc}
 800e540:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e544:	4798      	blx	r3
 800e546:	3501      	adds	r5, #1
 800e548:	e7ee      	b.n	800e528 <__libc_init_array+0xc>
 800e54a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e54e:	4798      	blx	r3
 800e550:	3501      	adds	r5, #1
 800e552:	e7f2      	b.n	800e53a <__libc_init_array+0x1e>
 800e554:	08013928 	.word	0x08013928
 800e558:	08013928 	.word	0x08013928
 800e55c:	08013928 	.word	0x08013928
 800e560:	0801392c 	.word	0x0801392c

0800e564 <memset>:
 800e564:	4402      	add	r2, r0
 800e566:	4603      	mov	r3, r0
 800e568:	4293      	cmp	r3, r2
 800e56a:	d100      	bne.n	800e56e <memset+0xa>
 800e56c:	4770      	bx	lr
 800e56e:	f803 1b01 	strb.w	r1, [r3], #1
 800e572:	e7f9      	b.n	800e568 <memset+0x4>

0800e574 <__cvt>:
 800e574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e578:	ec55 4b10 	vmov	r4, r5, d0
 800e57c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800e57e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800e582:	2d00      	cmp	r5, #0
 800e584:	460e      	mov	r6, r1
 800e586:	4691      	mov	r9, r2
 800e588:	4619      	mov	r1, r3
 800e58a:	bfb8      	it	lt
 800e58c:	4622      	movlt	r2, r4
 800e58e:	462b      	mov	r3, r5
 800e590:	f027 0720 	bic.w	r7, r7, #32
 800e594:	bfbb      	ittet	lt
 800e596:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800e59a:	461d      	movlt	r5, r3
 800e59c:	2300      	movge	r3, #0
 800e59e:	232d      	movlt	r3, #45	; 0x2d
 800e5a0:	bfb8      	it	lt
 800e5a2:	4614      	movlt	r4, r2
 800e5a4:	2f46      	cmp	r7, #70	; 0x46
 800e5a6:	700b      	strb	r3, [r1, #0]
 800e5a8:	d004      	beq.n	800e5b4 <__cvt+0x40>
 800e5aa:	2f45      	cmp	r7, #69	; 0x45
 800e5ac:	d100      	bne.n	800e5b0 <__cvt+0x3c>
 800e5ae:	3601      	adds	r6, #1
 800e5b0:	2102      	movs	r1, #2
 800e5b2:	e000      	b.n	800e5b6 <__cvt+0x42>
 800e5b4:	2103      	movs	r1, #3
 800e5b6:	ab03      	add	r3, sp, #12
 800e5b8:	9301      	str	r3, [sp, #4]
 800e5ba:	ab02      	add	r3, sp, #8
 800e5bc:	9300      	str	r3, [sp, #0]
 800e5be:	4632      	mov	r2, r6
 800e5c0:	4653      	mov	r3, sl
 800e5c2:	ec45 4b10 	vmov	d0, r4, r5
 800e5c6:	f000 fe27 	bl	800f218 <_dtoa_r>
 800e5ca:	2f47      	cmp	r7, #71	; 0x47
 800e5cc:	4680      	mov	r8, r0
 800e5ce:	d102      	bne.n	800e5d6 <__cvt+0x62>
 800e5d0:	f019 0f01 	tst.w	r9, #1
 800e5d4:	d026      	beq.n	800e624 <__cvt+0xb0>
 800e5d6:	2f46      	cmp	r7, #70	; 0x46
 800e5d8:	eb08 0906 	add.w	r9, r8, r6
 800e5dc:	d111      	bne.n	800e602 <__cvt+0x8e>
 800e5de:	f898 3000 	ldrb.w	r3, [r8]
 800e5e2:	2b30      	cmp	r3, #48	; 0x30
 800e5e4:	d10a      	bne.n	800e5fc <__cvt+0x88>
 800e5e6:	2200      	movs	r2, #0
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	4620      	mov	r0, r4
 800e5ec:	4629      	mov	r1, r5
 800e5ee:	f7f2 fa93 	bl	8000b18 <__aeabi_dcmpeq>
 800e5f2:	b918      	cbnz	r0, 800e5fc <__cvt+0x88>
 800e5f4:	f1c6 0601 	rsb	r6, r6, #1
 800e5f8:	f8ca 6000 	str.w	r6, [sl]
 800e5fc:	f8da 3000 	ldr.w	r3, [sl]
 800e600:	4499      	add	r9, r3
 800e602:	2200      	movs	r2, #0
 800e604:	2300      	movs	r3, #0
 800e606:	4620      	mov	r0, r4
 800e608:	4629      	mov	r1, r5
 800e60a:	f7f2 fa85 	bl	8000b18 <__aeabi_dcmpeq>
 800e60e:	b938      	cbnz	r0, 800e620 <__cvt+0xac>
 800e610:	2230      	movs	r2, #48	; 0x30
 800e612:	9b03      	ldr	r3, [sp, #12]
 800e614:	454b      	cmp	r3, r9
 800e616:	d205      	bcs.n	800e624 <__cvt+0xb0>
 800e618:	1c59      	adds	r1, r3, #1
 800e61a:	9103      	str	r1, [sp, #12]
 800e61c:	701a      	strb	r2, [r3, #0]
 800e61e:	e7f8      	b.n	800e612 <__cvt+0x9e>
 800e620:	f8cd 900c 	str.w	r9, [sp, #12]
 800e624:	9b03      	ldr	r3, [sp, #12]
 800e626:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e628:	eba3 0308 	sub.w	r3, r3, r8
 800e62c:	4640      	mov	r0, r8
 800e62e:	6013      	str	r3, [r2, #0]
 800e630:	b004      	add	sp, #16
 800e632:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800e636 <__exponent>:
 800e636:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e638:	2900      	cmp	r1, #0
 800e63a:	4604      	mov	r4, r0
 800e63c:	bfba      	itte	lt
 800e63e:	4249      	neglt	r1, r1
 800e640:	232d      	movlt	r3, #45	; 0x2d
 800e642:	232b      	movge	r3, #43	; 0x2b
 800e644:	2909      	cmp	r1, #9
 800e646:	f804 2b02 	strb.w	r2, [r4], #2
 800e64a:	7043      	strb	r3, [r0, #1]
 800e64c:	dd20      	ble.n	800e690 <__exponent+0x5a>
 800e64e:	f10d 0307 	add.w	r3, sp, #7
 800e652:	461f      	mov	r7, r3
 800e654:	260a      	movs	r6, #10
 800e656:	fb91 f5f6 	sdiv	r5, r1, r6
 800e65a:	fb06 1115 	mls	r1, r6, r5, r1
 800e65e:	3130      	adds	r1, #48	; 0x30
 800e660:	2d09      	cmp	r5, #9
 800e662:	f803 1c01 	strb.w	r1, [r3, #-1]
 800e666:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800e66a:	4629      	mov	r1, r5
 800e66c:	dc09      	bgt.n	800e682 <__exponent+0x4c>
 800e66e:	3130      	adds	r1, #48	; 0x30
 800e670:	3b02      	subs	r3, #2
 800e672:	f802 1c01 	strb.w	r1, [r2, #-1]
 800e676:	42bb      	cmp	r3, r7
 800e678:	4622      	mov	r2, r4
 800e67a:	d304      	bcc.n	800e686 <__exponent+0x50>
 800e67c:	1a10      	subs	r0, r2, r0
 800e67e:	b003      	add	sp, #12
 800e680:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e682:	4613      	mov	r3, r2
 800e684:	e7e7      	b.n	800e656 <__exponent+0x20>
 800e686:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e68a:	f804 2b01 	strb.w	r2, [r4], #1
 800e68e:	e7f2      	b.n	800e676 <__exponent+0x40>
 800e690:	2330      	movs	r3, #48	; 0x30
 800e692:	4419      	add	r1, r3
 800e694:	7083      	strb	r3, [r0, #2]
 800e696:	1d02      	adds	r2, r0, #4
 800e698:	70c1      	strb	r1, [r0, #3]
 800e69a:	e7ef      	b.n	800e67c <__exponent+0x46>

0800e69c <_printf_float>:
 800e69c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6a0:	b08d      	sub	sp, #52	; 0x34
 800e6a2:	460c      	mov	r4, r1
 800e6a4:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800e6a8:	4616      	mov	r6, r2
 800e6aa:	461f      	mov	r7, r3
 800e6ac:	4605      	mov	r5, r0
 800e6ae:	f001 fce5 	bl	801007c <_localeconv_r>
 800e6b2:	6803      	ldr	r3, [r0, #0]
 800e6b4:	9304      	str	r3, [sp, #16]
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7f1 fdb2 	bl	8000220 <strlen>
 800e6bc:	2300      	movs	r3, #0
 800e6be:	930a      	str	r3, [sp, #40]	; 0x28
 800e6c0:	f8d8 3000 	ldr.w	r3, [r8]
 800e6c4:	9005      	str	r0, [sp, #20]
 800e6c6:	3307      	adds	r3, #7
 800e6c8:	f023 0307 	bic.w	r3, r3, #7
 800e6cc:	f103 0208 	add.w	r2, r3, #8
 800e6d0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800e6d4:	f8d4 b000 	ldr.w	fp, [r4]
 800e6d8:	f8c8 2000 	str.w	r2, [r8]
 800e6dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6e0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800e6e4:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800e6e8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800e6ec:	9307      	str	r3, [sp, #28]
 800e6ee:	f8cd 8018 	str.w	r8, [sp, #24]
 800e6f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e6f6:	4ba7      	ldr	r3, [pc, #668]	; (800e994 <_printf_float+0x2f8>)
 800e6f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e6fc:	f7f2 fa3e 	bl	8000b7c <__aeabi_dcmpun>
 800e700:	bb70      	cbnz	r0, 800e760 <_printf_float+0xc4>
 800e702:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e706:	4ba3      	ldr	r3, [pc, #652]	; (800e994 <_printf_float+0x2f8>)
 800e708:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e70c:	f7f2 fa18 	bl	8000b40 <__aeabi_dcmple>
 800e710:	bb30      	cbnz	r0, 800e760 <_printf_float+0xc4>
 800e712:	2200      	movs	r2, #0
 800e714:	2300      	movs	r3, #0
 800e716:	4640      	mov	r0, r8
 800e718:	4649      	mov	r1, r9
 800e71a:	f7f2 fa07 	bl	8000b2c <__aeabi_dcmplt>
 800e71e:	b110      	cbz	r0, 800e726 <_printf_float+0x8a>
 800e720:	232d      	movs	r3, #45	; 0x2d
 800e722:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e726:	4a9c      	ldr	r2, [pc, #624]	; (800e998 <_printf_float+0x2fc>)
 800e728:	4b9c      	ldr	r3, [pc, #624]	; (800e99c <_printf_float+0x300>)
 800e72a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e72e:	bf8c      	ite	hi
 800e730:	4690      	movhi	r8, r2
 800e732:	4698      	movls	r8, r3
 800e734:	2303      	movs	r3, #3
 800e736:	f02b 0204 	bic.w	r2, fp, #4
 800e73a:	6123      	str	r3, [r4, #16]
 800e73c:	6022      	str	r2, [r4, #0]
 800e73e:	f04f 0900 	mov.w	r9, #0
 800e742:	9700      	str	r7, [sp, #0]
 800e744:	4633      	mov	r3, r6
 800e746:	aa0b      	add	r2, sp, #44	; 0x2c
 800e748:	4621      	mov	r1, r4
 800e74a:	4628      	mov	r0, r5
 800e74c:	f000 f9e6 	bl	800eb1c <_printf_common>
 800e750:	3001      	adds	r0, #1
 800e752:	f040 808d 	bne.w	800e870 <_printf_float+0x1d4>
 800e756:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e75a:	b00d      	add	sp, #52	; 0x34
 800e75c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e760:	4642      	mov	r2, r8
 800e762:	464b      	mov	r3, r9
 800e764:	4640      	mov	r0, r8
 800e766:	4649      	mov	r1, r9
 800e768:	f7f2 fa08 	bl	8000b7c <__aeabi_dcmpun>
 800e76c:	b110      	cbz	r0, 800e774 <_printf_float+0xd8>
 800e76e:	4a8c      	ldr	r2, [pc, #560]	; (800e9a0 <_printf_float+0x304>)
 800e770:	4b8c      	ldr	r3, [pc, #560]	; (800e9a4 <_printf_float+0x308>)
 800e772:	e7da      	b.n	800e72a <_printf_float+0x8e>
 800e774:	6861      	ldr	r1, [r4, #4]
 800e776:	1c4b      	adds	r3, r1, #1
 800e778:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800e77c:	a80a      	add	r0, sp, #40	; 0x28
 800e77e:	d13e      	bne.n	800e7fe <_printf_float+0x162>
 800e780:	2306      	movs	r3, #6
 800e782:	6063      	str	r3, [r4, #4]
 800e784:	2300      	movs	r3, #0
 800e786:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e78a:	ab09      	add	r3, sp, #36	; 0x24
 800e78c:	9300      	str	r3, [sp, #0]
 800e78e:	ec49 8b10 	vmov	d0, r8, r9
 800e792:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e796:	6022      	str	r2, [r4, #0]
 800e798:	f8cd a004 	str.w	sl, [sp, #4]
 800e79c:	6861      	ldr	r1, [r4, #4]
 800e79e:	4628      	mov	r0, r5
 800e7a0:	f7ff fee8 	bl	800e574 <__cvt>
 800e7a4:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800e7a8:	2b47      	cmp	r3, #71	; 0x47
 800e7aa:	4680      	mov	r8, r0
 800e7ac:	d109      	bne.n	800e7c2 <_printf_float+0x126>
 800e7ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e7b0:	1cd8      	adds	r0, r3, #3
 800e7b2:	db02      	blt.n	800e7ba <_printf_float+0x11e>
 800e7b4:	6862      	ldr	r2, [r4, #4]
 800e7b6:	4293      	cmp	r3, r2
 800e7b8:	dd47      	ble.n	800e84a <_printf_float+0x1ae>
 800e7ba:	f1aa 0a02 	sub.w	sl, sl, #2
 800e7be:	fa5f fa8a 	uxtb.w	sl, sl
 800e7c2:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e7c6:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e7c8:	d824      	bhi.n	800e814 <_printf_float+0x178>
 800e7ca:	3901      	subs	r1, #1
 800e7cc:	4652      	mov	r2, sl
 800e7ce:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800e7d2:	9109      	str	r1, [sp, #36]	; 0x24
 800e7d4:	f7ff ff2f 	bl	800e636 <__exponent>
 800e7d8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e7da:	1813      	adds	r3, r2, r0
 800e7dc:	2a01      	cmp	r2, #1
 800e7de:	4681      	mov	r9, r0
 800e7e0:	6123      	str	r3, [r4, #16]
 800e7e2:	dc02      	bgt.n	800e7ea <_printf_float+0x14e>
 800e7e4:	6822      	ldr	r2, [r4, #0]
 800e7e6:	07d1      	lsls	r1, r2, #31
 800e7e8:	d501      	bpl.n	800e7ee <_printf_float+0x152>
 800e7ea:	3301      	adds	r3, #1
 800e7ec:	6123      	str	r3, [r4, #16]
 800e7ee:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800e7f2:	2b00      	cmp	r3, #0
 800e7f4:	d0a5      	beq.n	800e742 <_printf_float+0xa6>
 800e7f6:	232d      	movs	r3, #45	; 0x2d
 800e7f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7fc:	e7a1      	b.n	800e742 <_printf_float+0xa6>
 800e7fe:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800e802:	f000 8177 	beq.w	800eaf4 <_printf_float+0x458>
 800e806:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800e80a:	d1bb      	bne.n	800e784 <_printf_float+0xe8>
 800e80c:	2900      	cmp	r1, #0
 800e80e:	d1b9      	bne.n	800e784 <_printf_float+0xe8>
 800e810:	2301      	movs	r3, #1
 800e812:	e7b6      	b.n	800e782 <_printf_float+0xe6>
 800e814:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800e818:	d119      	bne.n	800e84e <_printf_float+0x1b2>
 800e81a:	2900      	cmp	r1, #0
 800e81c:	6863      	ldr	r3, [r4, #4]
 800e81e:	dd0c      	ble.n	800e83a <_printf_float+0x19e>
 800e820:	6121      	str	r1, [r4, #16]
 800e822:	b913      	cbnz	r3, 800e82a <_printf_float+0x18e>
 800e824:	6822      	ldr	r2, [r4, #0]
 800e826:	07d2      	lsls	r2, r2, #31
 800e828:	d502      	bpl.n	800e830 <_printf_float+0x194>
 800e82a:	3301      	adds	r3, #1
 800e82c:	440b      	add	r3, r1
 800e82e:	6123      	str	r3, [r4, #16]
 800e830:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e832:	65a3      	str	r3, [r4, #88]	; 0x58
 800e834:	f04f 0900 	mov.w	r9, #0
 800e838:	e7d9      	b.n	800e7ee <_printf_float+0x152>
 800e83a:	b913      	cbnz	r3, 800e842 <_printf_float+0x1a6>
 800e83c:	6822      	ldr	r2, [r4, #0]
 800e83e:	07d0      	lsls	r0, r2, #31
 800e840:	d501      	bpl.n	800e846 <_printf_float+0x1aa>
 800e842:	3302      	adds	r3, #2
 800e844:	e7f3      	b.n	800e82e <_printf_float+0x192>
 800e846:	2301      	movs	r3, #1
 800e848:	e7f1      	b.n	800e82e <_printf_float+0x192>
 800e84a:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800e84e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800e852:	4293      	cmp	r3, r2
 800e854:	db05      	blt.n	800e862 <_printf_float+0x1c6>
 800e856:	6822      	ldr	r2, [r4, #0]
 800e858:	6123      	str	r3, [r4, #16]
 800e85a:	07d1      	lsls	r1, r2, #31
 800e85c:	d5e8      	bpl.n	800e830 <_printf_float+0x194>
 800e85e:	3301      	adds	r3, #1
 800e860:	e7e5      	b.n	800e82e <_printf_float+0x192>
 800e862:	2b00      	cmp	r3, #0
 800e864:	bfd4      	ite	le
 800e866:	f1c3 0302 	rsble	r3, r3, #2
 800e86a:	2301      	movgt	r3, #1
 800e86c:	4413      	add	r3, r2
 800e86e:	e7de      	b.n	800e82e <_printf_float+0x192>
 800e870:	6823      	ldr	r3, [r4, #0]
 800e872:	055a      	lsls	r2, r3, #21
 800e874:	d407      	bmi.n	800e886 <_printf_float+0x1ea>
 800e876:	6923      	ldr	r3, [r4, #16]
 800e878:	4642      	mov	r2, r8
 800e87a:	4631      	mov	r1, r6
 800e87c:	4628      	mov	r0, r5
 800e87e:	47b8      	blx	r7
 800e880:	3001      	adds	r0, #1
 800e882:	d12b      	bne.n	800e8dc <_printf_float+0x240>
 800e884:	e767      	b.n	800e756 <_printf_float+0xba>
 800e886:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800e88a:	f240 80dc 	bls.w	800ea46 <_printf_float+0x3aa>
 800e88e:	2200      	movs	r2, #0
 800e890:	2300      	movs	r3, #0
 800e892:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e896:	f7f2 f93f 	bl	8000b18 <__aeabi_dcmpeq>
 800e89a:	2800      	cmp	r0, #0
 800e89c:	d033      	beq.n	800e906 <_printf_float+0x26a>
 800e89e:	2301      	movs	r3, #1
 800e8a0:	4a41      	ldr	r2, [pc, #260]	; (800e9a8 <_printf_float+0x30c>)
 800e8a2:	4631      	mov	r1, r6
 800e8a4:	4628      	mov	r0, r5
 800e8a6:	47b8      	blx	r7
 800e8a8:	3001      	adds	r0, #1
 800e8aa:	f43f af54 	beq.w	800e756 <_printf_float+0xba>
 800e8ae:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	db02      	blt.n	800e8bc <_printf_float+0x220>
 800e8b6:	6823      	ldr	r3, [r4, #0]
 800e8b8:	07d8      	lsls	r0, r3, #31
 800e8ba:	d50f      	bpl.n	800e8dc <_printf_float+0x240>
 800e8bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e8c0:	4631      	mov	r1, r6
 800e8c2:	4628      	mov	r0, r5
 800e8c4:	47b8      	blx	r7
 800e8c6:	3001      	adds	r0, #1
 800e8c8:	f43f af45 	beq.w	800e756 <_printf_float+0xba>
 800e8cc:	f04f 0800 	mov.w	r8, #0
 800e8d0:	f104 091a 	add.w	r9, r4, #26
 800e8d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e8d6:	3b01      	subs	r3, #1
 800e8d8:	4543      	cmp	r3, r8
 800e8da:	dc09      	bgt.n	800e8f0 <_printf_float+0x254>
 800e8dc:	6823      	ldr	r3, [r4, #0]
 800e8de:	079b      	lsls	r3, r3, #30
 800e8e0:	f100 8103 	bmi.w	800eaea <_printf_float+0x44e>
 800e8e4:	68e0      	ldr	r0, [r4, #12]
 800e8e6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e8e8:	4298      	cmp	r0, r3
 800e8ea:	bfb8      	it	lt
 800e8ec:	4618      	movlt	r0, r3
 800e8ee:	e734      	b.n	800e75a <_printf_float+0xbe>
 800e8f0:	2301      	movs	r3, #1
 800e8f2:	464a      	mov	r2, r9
 800e8f4:	4631      	mov	r1, r6
 800e8f6:	4628      	mov	r0, r5
 800e8f8:	47b8      	blx	r7
 800e8fa:	3001      	adds	r0, #1
 800e8fc:	f43f af2b 	beq.w	800e756 <_printf_float+0xba>
 800e900:	f108 0801 	add.w	r8, r8, #1
 800e904:	e7e6      	b.n	800e8d4 <_printf_float+0x238>
 800e906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e908:	2b00      	cmp	r3, #0
 800e90a:	dc2b      	bgt.n	800e964 <_printf_float+0x2c8>
 800e90c:	2301      	movs	r3, #1
 800e90e:	4a26      	ldr	r2, [pc, #152]	; (800e9a8 <_printf_float+0x30c>)
 800e910:	4631      	mov	r1, r6
 800e912:	4628      	mov	r0, r5
 800e914:	47b8      	blx	r7
 800e916:	3001      	adds	r0, #1
 800e918:	f43f af1d 	beq.w	800e756 <_printf_float+0xba>
 800e91c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e91e:	b923      	cbnz	r3, 800e92a <_printf_float+0x28e>
 800e920:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e922:	b913      	cbnz	r3, 800e92a <_printf_float+0x28e>
 800e924:	6823      	ldr	r3, [r4, #0]
 800e926:	07d9      	lsls	r1, r3, #31
 800e928:	d5d8      	bpl.n	800e8dc <_printf_float+0x240>
 800e92a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e92e:	4631      	mov	r1, r6
 800e930:	4628      	mov	r0, r5
 800e932:	47b8      	blx	r7
 800e934:	3001      	adds	r0, #1
 800e936:	f43f af0e 	beq.w	800e756 <_printf_float+0xba>
 800e93a:	f04f 0900 	mov.w	r9, #0
 800e93e:	f104 0a1a 	add.w	sl, r4, #26
 800e942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e944:	425b      	negs	r3, r3
 800e946:	454b      	cmp	r3, r9
 800e948:	dc01      	bgt.n	800e94e <_printf_float+0x2b2>
 800e94a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e94c:	e794      	b.n	800e878 <_printf_float+0x1dc>
 800e94e:	2301      	movs	r3, #1
 800e950:	4652      	mov	r2, sl
 800e952:	4631      	mov	r1, r6
 800e954:	4628      	mov	r0, r5
 800e956:	47b8      	blx	r7
 800e958:	3001      	adds	r0, #1
 800e95a:	f43f aefc 	beq.w	800e756 <_printf_float+0xba>
 800e95e:	f109 0901 	add.w	r9, r9, #1
 800e962:	e7ee      	b.n	800e942 <_printf_float+0x2a6>
 800e964:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e966:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800e968:	429a      	cmp	r2, r3
 800e96a:	bfa8      	it	ge
 800e96c:	461a      	movge	r2, r3
 800e96e:	2a00      	cmp	r2, #0
 800e970:	4691      	mov	r9, r2
 800e972:	dd07      	ble.n	800e984 <_printf_float+0x2e8>
 800e974:	4613      	mov	r3, r2
 800e976:	4631      	mov	r1, r6
 800e978:	4642      	mov	r2, r8
 800e97a:	4628      	mov	r0, r5
 800e97c:	47b8      	blx	r7
 800e97e:	3001      	adds	r0, #1
 800e980:	f43f aee9 	beq.w	800e756 <_printf_float+0xba>
 800e984:	f104 031a 	add.w	r3, r4, #26
 800e988:	f04f 0b00 	mov.w	fp, #0
 800e98c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800e990:	9306      	str	r3, [sp, #24]
 800e992:	e015      	b.n	800e9c0 <_printf_float+0x324>
 800e994:	7fefffff 	.word	0x7fefffff
 800e998:	08013628 	.word	0x08013628
 800e99c:	08013624 	.word	0x08013624
 800e9a0:	08013630 	.word	0x08013630
 800e9a4:	0801362c 	.word	0x0801362c
 800e9a8:	08013634 	.word	0x08013634
 800e9ac:	2301      	movs	r3, #1
 800e9ae:	9a06      	ldr	r2, [sp, #24]
 800e9b0:	4631      	mov	r1, r6
 800e9b2:	4628      	mov	r0, r5
 800e9b4:	47b8      	blx	r7
 800e9b6:	3001      	adds	r0, #1
 800e9b8:	f43f aecd 	beq.w	800e756 <_printf_float+0xba>
 800e9bc:	f10b 0b01 	add.w	fp, fp, #1
 800e9c0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800e9c4:	ebaa 0309 	sub.w	r3, sl, r9
 800e9c8:	455b      	cmp	r3, fp
 800e9ca:	dcef      	bgt.n	800e9ac <_printf_float+0x310>
 800e9cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800e9d0:	429a      	cmp	r2, r3
 800e9d2:	44d0      	add	r8, sl
 800e9d4:	db15      	blt.n	800ea02 <_printf_float+0x366>
 800e9d6:	6823      	ldr	r3, [r4, #0]
 800e9d8:	07da      	lsls	r2, r3, #31
 800e9da:	d412      	bmi.n	800ea02 <_printf_float+0x366>
 800e9dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e9de:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e9e0:	eba3 020a 	sub.w	r2, r3, sl
 800e9e4:	eba3 0a01 	sub.w	sl, r3, r1
 800e9e8:	4592      	cmp	sl, r2
 800e9ea:	bfa8      	it	ge
 800e9ec:	4692      	movge	sl, r2
 800e9ee:	f1ba 0f00 	cmp.w	sl, #0
 800e9f2:	dc0e      	bgt.n	800ea12 <_printf_float+0x376>
 800e9f4:	f04f 0800 	mov.w	r8, #0
 800e9f8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e9fc:	f104 091a 	add.w	r9, r4, #26
 800ea00:	e019      	b.n	800ea36 <_printf_float+0x39a>
 800ea02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea06:	4631      	mov	r1, r6
 800ea08:	4628      	mov	r0, r5
 800ea0a:	47b8      	blx	r7
 800ea0c:	3001      	adds	r0, #1
 800ea0e:	d1e5      	bne.n	800e9dc <_printf_float+0x340>
 800ea10:	e6a1      	b.n	800e756 <_printf_float+0xba>
 800ea12:	4653      	mov	r3, sl
 800ea14:	4642      	mov	r2, r8
 800ea16:	4631      	mov	r1, r6
 800ea18:	4628      	mov	r0, r5
 800ea1a:	47b8      	blx	r7
 800ea1c:	3001      	adds	r0, #1
 800ea1e:	d1e9      	bne.n	800e9f4 <_printf_float+0x358>
 800ea20:	e699      	b.n	800e756 <_printf_float+0xba>
 800ea22:	2301      	movs	r3, #1
 800ea24:	464a      	mov	r2, r9
 800ea26:	4631      	mov	r1, r6
 800ea28:	4628      	mov	r0, r5
 800ea2a:	47b8      	blx	r7
 800ea2c:	3001      	adds	r0, #1
 800ea2e:	f43f ae92 	beq.w	800e756 <_printf_float+0xba>
 800ea32:	f108 0801 	add.w	r8, r8, #1
 800ea36:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ea3a:	1a9b      	subs	r3, r3, r2
 800ea3c:	eba3 030a 	sub.w	r3, r3, sl
 800ea40:	4543      	cmp	r3, r8
 800ea42:	dcee      	bgt.n	800ea22 <_printf_float+0x386>
 800ea44:	e74a      	b.n	800e8dc <_printf_float+0x240>
 800ea46:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ea48:	2a01      	cmp	r2, #1
 800ea4a:	dc01      	bgt.n	800ea50 <_printf_float+0x3b4>
 800ea4c:	07db      	lsls	r3, r3, #31
 800ea4e:	d53a      	bpl.n	800eac6 <_printf_float+0x42a>
 800ea50:	2301      	movs	r3, #1
 800ea52:	4642      	mov	r2, r8
 800ea54:	4631      	mov	r1, r6
 800ea56:	4628      	mov	r0, r5
 800ea58:	47b8      	blx	r7
 800ea5a:	3001      	adds	r0, #1
 800ea5c:	f43f ae7b 	beq.w	800e756 <_printf_float+0xba>
 800ea60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ea64:	4631      	mov	r1, r6
 800ea66:	4628      	mov	r0, r5
 800ea68:	47b8      	blx	r7
 800ea6a:	3001      	adds	r0, #1
 800ea6c:	f108 0801 	add.w	r8, r8, #1
 800ea70:	f43f ae71 	beq.w	800e756 <_printf_float+0xba>
 800ea74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea76:	2200      	movs	r2, #0
 800ea78:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800ea7c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800ea80:	2300      	movs	r3, #0
 800ea82:	f7f2 f849 	bl	8000b18 <__aeabi_dcmpeq>
 800ea86:	b9c8      	cbnz	r0, 800eabc <_printf_float+0x420>
 800ea88:	4653      	mov	r3, sl
 800ea8a:	4642      	mov	r2, r8
 800ea8c:	4631      	mov	r1, r6
 800ea8e:	4628      	mov	r0, r5
 800ea90:	47b8      	blx	r7
 800ea92:	3001      	adds	r0, #1
 800ea94:	d10e      	bne.n	800eab4 <_printf_float+0x418>
 800ea96:	e65e      	b.n	800e756 <_printf_float+0xba>
 800ea98:	2301      	movs	r3, #1
 800ea9a:	4652      	mov	r2, sl
 800ea9c:	4631      	mov	r1, r6
 800ea9e:	4628      	mov	r0, r5
 800eaa0:	47b8      	blx	r7
 800eaa2:	3001      	adds	r0, #1
 800eaa4:	f43f ae57 	beq.w	800e756 <_printf_float+0xba>
 800eaa8:	f108 0801 	add.w	r8, r8, #1
 800eaac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eaae:	3b01      	subs	r3, #1
 800eab0:	4543      	cmp	r3, r8
 800eab2:	dcf1      	bgt.n	800ea98 <_printf_float+0x3fc>
 800eab4:	464b      	mov	r3, r9
 800eab6:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800eaba:	e6de      	b.n	800e87a <_printf_float+0x1de>
 800eabc:	f04f 0800 	mov.w	r8, #0
 800eac0:	f104 0a1a 	add.w	sl, r4, #26
 800eac4:	e7f2      	b.n	800eaac <_printf_float+0x410>
 800eac6:	2301      	movs	r3, #1
 800eac8:	e7df      	b.n	800ea8a <_printf_float+0x3ee>
 800eaca:	2301      	movs	r3, #1
 800eacc:	464a      	mov	r2, r9
 800eace:	4631      	mov	r1, r6
 800ead0:	4628      	mov	r0, r5
 800ead2:	47b8      	blx	r7
 800ead4:	3001      	adds	r0, #1
 800ead6:	f43f ae3e 	beq.w	800e756 <_printf_float+0xba>
 800eada:	f108 0801 	add.w	r8, r8, #1
 800eade:	68e3      	ldr	r3, [r4, #12]
 800eae0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800eae2:	1a9b      	subs	r3, r3, r2
 800eae4:	4543      	cmp	r3, r8
 800eae6:	dcf0      	bgt.n	800eaca <_printf_float+0x42e>
 800eae8:	e6fc      	b.n	800e8e4 <_printf_float+0x248>
 800eaea:	f04f 0800 	mov.w	r8, #0
 800eaee:	f104 0919 	add.w	r9, r4, #25
 800eaf2:	e7f4      	b.n	800eade <_printf_float+0x442>
 800eaf4:	2900      	cmp	r1, #0
 800eaf6:	f43f ae8b 	beq.w	800e810 <_printf_float+0x174>
 800eafa:	2300      	movs	r3, #0
 800eafc:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800eb00:	ab09      	add	r3, sp, #36	; 0x24
 800eb02:	9300      	str	r3, [sp, #0]
 800eb04:	ec49 8b10 	vmov	d0, r8, r9
 800eb08:	6022      	str	r2, [r4, #0]
 800eb0a:	f8cd a004 	str.w	sl, [sp, #4]
 800eb0e:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800eb12:	4628      	mov	r0, r5
 800eb14:	f7ff fd2e 	bl	800e574 <__cvt>
 800eb18:	4680      	mov	r8, r0
 800eb1a:	e648      	b.n	800e7ae <_printf_float+0x112>

0800eb1c <_printf_common>:
 800eb1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eb20:	4691      	mov	r9, r2
 800eb22:	461f      	mov	r7, r3
 800eb24:	688a      	ldr	r2, [r1, #8]
 800eb26:	690b      	ldr	r3, [r1, #16]
 800eb28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800eb2c:	4293      	cmp	r3, r2
 800eb2e:	bfb8      	it	lt
 800eb30:	4613      	movlt	r3, r2
 800eb32:	f8c9 3000 	str.w	r3, [r9]
 800eb36:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800eb3a:	4606      	mov	r6, r0
 800eb3c:	460c      	mov	r4, r1
 800eb3e:	b112      	cbz	r2, 800eb46 <_printf_common+0x2a>
 800eb40:	3301      	adds	r3, #1
 800eb42:	f8c9 3000 	str.w	r3, [r9]
 800eb46:	6823      	ldr	r3, [r4, #0]
 800eb48:	0699      	lsls	r1, r3, #26
 800eb4a:	bf42      	ittt	mi
 800eb4c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800eb50:	3302      	addmi	r3, #2
 800eb52:	f8c9 3000 	strmi.w	r3, [r9]
 800eb56:	6825      	ldr	r5, [r4, #0]
 800eb58:	f015 0506 	ands.w	r5, r5, #6
 800eb5c:	d107      	bne.n	800eb6e <_printf_common+0x52>
 800eb5e:	f104 0a19 	add.w	sl, r4, #25
 800eb62:	68e3      	ldr	r3, [r4, #12]
 800eb64:	f8d9 2000 	ldr.w	r2, [r9]
 800eb68:	1a9b      	subs	r3, r3, r2
 800eb6a:	42ab      	cmp	r3, r5
 800eb6c:	dc28      	bgt.n	800ebc0 <_printf_common+0xa4>
 800eb6e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800eb72:	6822      	ldr	r2, [r4, #0]
 800eb74:	3300      	adds	r3, #0
 800eb76:	bf18      	it	ne
 800eb78:	2301      	movne	r3, #1
 800eb7a:	0692      	lsls	r2, r2, #26
 800eb7c:	d42d      	bmi.n	800ebda <_printf_common+0xbe>
 800eb7e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800eb82:	4639      	mov	r1, r7
 800eb84:	4630      	mov	r0, r6
 800eb86:	47c0      	blx	r8
 800eb88:	3001      	adds	r0, #1
 800eb8a:	d020      	beq.n	800ebce <_printf_common+0xb2>
 800eb8c:	6823      	ldr	r3, [r4, #0]
 800eb8e:	68e5      	ldr	r5, [r4, #12]
 800eb90:	f8d9 2000 	ldr.w	r2, [r9]
 800eb94:	f003 0306 	and.w	r3, r3, #6
 800eb98:	2b04      	cmp	r3, #4
 800eb9a:	bf08      	it	eq
 800eb9c:	1aad      	subeq	r5, r5, r2
 800eb9e:	68a3      	ldr	r3, [r4, #8]
 800eba0:	6922      	ldr	r2, [r4, #16]
 800eba2:	bf0c      	ite	eq
 800eba4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800eba8:	2500      	movne	r5, #0
 800ebaa:	4293      	cmp	r3, r2
 800ebac:	bfc4      	itt	gt
 800ebae:	1a9b      	subgt	r3, r3, r2
 800ebb0:	18ed      	addgt	r5, r5, r3
 800ebb2:	f04f 0900 	mov.w	r9, #0
 800ebb6:	341a      	adds	r4, #26
 800ebb8:	454d      	cmp	r5, r9
 800ebba:	d11a      	bne.n	800ebf2 <_printf_common+0xd6>
 800ebbc:	2000      	movs	r0, #0
 800ebbe:	e008      	b.n	800ebd2 <_printf_common+0xb6>
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	4652      	mov	r2, sl
 800ebc4:	4639      	mov	r1, r7
 800ebc6:	4630      	mov	r0, r6
 800ebc8:	47c0      	blx	r8
 800ebca:	3001      	adds	r0, #1
 800ebcc:	d103      	bne.n	800ebd6 <_printf_common+0xba>
 800ebce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ebd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ebd6:	3501      	adds	r5, #1
 800ebd8:	e7c3      	b.n	800eb62 <_printf_common+0x46>
 800ebda:	18e1      	adds	r1, r4, r3
 800ebdc:	1c5a      	adds	r2, r3, #1
 800ebde:	2030      	movs	r0, #48	; 0x30
 800ebe0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ebe4:	4422      	add	r2, r4
 800ebe6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ebea:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ebee:	3302      	adds	r3, #2
 800ebf0:	e7c5      	b.n	800eb7e <_printf_common+0x62>
 800ebf2:	2301      	movs	r3, #1
 800ebf4:	4622      	mov	r2, r4
 800ebf6:	4639      	mov	r1, r7
 800ebf8:	4630      	mov	r0, r6
 800ebfa:	47c0      	blx	r8
 800ebfc:	3001      	adds	r0, #1
 800ebfe:	d0e6      	beq.n	800ebce <_printf_common+0xb2>
 800ec00:	f109 0901 	add.w	r9, r9, #1
 800ec04:	e7d8      	b.n	800ebb8 <_printf_common+0x9c>
	...

0800ec08 <_printf_i>:
 800ec08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ec0c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800ec10:	460c      	mov	r4, r1
 800ec12:	7e09      	ldrb	r1, [r1, #24]
 800ec14:	b085      	sub	sp, #20
 800ec16:	296e      	cmp	r1, #110	; 0x6e
 800ec18:	4617      	mov	r7, r2
 800ec1a:	4606      	mov	r6, r0
 800ec1c:	4698      	mov	r8, r3
 800ec1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ec20:	f000 80b3 	beq.w	800ed8a <_printf_i+0x182>
 800ec24:	d822      	bhi.n	800ec6c <_printf_i+0x64>
 800ec26:	2963      	cmp	r1, #99	; 0x63
 800ec28:	d036      	beq.n	800ec98 <_printf_i+0x90>
 800ec2a:	d80a      	bhi.n	800ec42 <_printf_i+0x3a>
 800ec2c:	2900      	cmp	r1, #0
 800ec2e:	f000 80b9 	beq.w	800eda4 <_printf_i+0x19c>
 800ec32:	2958      	cmp	r1, #88	; 0x58
 800ec34:	f000 8083 	beq.w	800ed3e <_printf_i+0x136>
 800ec38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ec3c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800ec40:	e032      	b.n	800eca8 <_printf_i+0xa0>
 800ec42:	2964      	cmp	r1, #100	; 0x64
 800ec44:	d001      	beq.n	800ec4a <_printf_i+0x42>
 800ec46:	2969      	cmp	r1, #105	; 0x69
 800ec48:	d1f6      	bne.n	800ec38 <_printf_i+0x30>
 800ec4a:	6820      	ldr	r0, [r4, #0]
 800ec4c:	6813      	ldr	r3, [r2, #0]
 800ec4e:	0605      	lsls	r5, r0, #24
 800ec50:	f103 0104 	add.w	r1, r3, #4
 800ec54:	d52a      	bpl.n	800ecac <_printf_i+0xa4>
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	6011      	str	r1, [r2, #0]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	da03      	bge.n	800ec66 <_printf_i+0x5e>
 800ec5e:	222d      	movs	r2, #45	; 0x2d
 800ec60:	425b      	negs	r3, r3
 800ec62:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800ec66:	486f      	ldr	r0, [pc, #444]	; (800ee24 <_printf_i+0x21c>)
 800ec68:	220a      	movs	r2, #10
 800ec6a:	e039      	b.n	800ece0 <_printf_i+0xd8>
 800ec6c:	2973      	cmp	r1, #115	; 0x73
 800ec6e:	f000 809d 	beq.w	800edac <_printf_i+0x1a4>
 800ec72:	d808      	bhi.n	800ec86 <_printf_i+0x7e>
 800ec74:	296f      	cmp	r1, #111	; 0x6f
 800ec76:	d020      	beq.n	800ecba <_printf_i+0xb2>
 800ec78:	2970      	cmp	r1, #112	; 0x70
 800ec7a:	d1dd      	bne.n	800ec38 <_printf_i+0x30>
 800ec7c:	6823      	ldr	r3, [r4, #0]
 800ec7e:	f043 0320 	orr.w	r3, r3, #32
 800ec82:	6023      	str	r3, [r4, #0]
 800ec84:	e003      	b.n	800ec8e <_printf_i+0x86>
 800ec86:	2975      	cmp	r1, #117	; 0x75
 800ec88:	d017      	beq.n	800ecba <_printf_i+0xb2>
 800ec8a:	2978      	cmp	r1, #120	; 0x78
 800ec8c:	d1d4      	bne.n	800ec38 <_printf_i+0x30>
 800ec8e:	2378      	movs	r3, #120	; 0x78
 800ec90:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ec94:	4864      	ldr	r0, [pc, #400]	; (800ee28 <_printf_i+0x220>)
 800ec96:	e055      	b.n	800ed44 <_printf_i+0x13c>
 800ec98:	6813      	ldr	r3, [r2, #0]
 800ec9a:	1d19      	adds	r1, r3, #4
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	6011      	str	r1, [r2, #0]
 800eca0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eca4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800eca8:	2301      	movs	r3, #1
 800ecaa:	e08c      	b.n	800edc6 <_printf_i+0x1be>
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	6011      	str	r1, [r2, #0]
 800ecb0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ecb4:	bf18      	it	ne
 800ecb6:	b21b      	sxthne	r3, r3
 800ecb8:	e7cf      	b.n	800ec5a <_printf_i+0x52>
 800ecba:	6813      	ldr	r3, [r2, #0]
 800ecbc:	6825      	ldr	r5, [r4, #0]
 800ecbe:	1d18      	adds	r0, r3, #4
 800ecc0:	6010      	str	r0, [r2, #0]
 800ecc2:	0628      	lsls	r0, r5, #24
 800ecc4:	d501      	bpl.n	800ecca <_printf_i+0xc2>
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	e002      	b.n	800ecd0 <_printf_i+0xc8>
 800ecca:	0668      	lsls	r0, r5, #25
 800eccc:	d5fb      	bpl.n	800ecc6 <_printf_i+0xbe>
 800ecce:	881b      	ldrh	r3, [r3, #0]
 800ecd0:	4854      	ldr	r0, [pc, #336]	; (800ee24 <_printf_i+0x21c>)
 800ecd2:	296f      	cmp	r1, #111	; 0x6f
 800ecd4:	bf14      	ite	ne
 800ecd6:	220a      	movne	r2, #10
 800ecd8:	2208      	moveq	r2, #8
 800ecda:	2100      	movs	r1, #0
 800ecdc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ece0:	6865      	ldr	r5, [r4, #4]
 800ece2:	60a5      	str	r5, [r4, #8]
 800ece4:	2d00      	cmp	r5, #0
 800ece6:	f2c0 8095 	blt.w	800ee14 <_printf_i+0x20c>
 800ecea:	6821      	ldr	r1, [r4, #0]
 800ecec:	f021 0104 	bic.w	r1, r1, #4
 800ecf0:	6021      	str	r1, [r4, #0]
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d13d      	bne.n	800ed72 <_printf_i+0x16a>
 800ecf6:	2d00      	cmp	r5, #0
 800ecf8:	f040 808e 	bne.w	800ee18 <_printf_i+0x210>
 800ecfc:	4665      	mov	r5, ip
 800ecfe:	2a08      	cmp	r2, #8
 800ed00:	d10b      	bne.n	800ed1a <_printf_i+0x112>
 800ed02:	6823      	ldr	r3, [r4, #0]
 800ed04:	07db      	lsls	r3, r3, #31
 800ed06:	d508      	bpl.n	800ed1a <_printf_i+0x112>
 800ed08:	6923      	ldr	r3, [r4, #16]
 800ed0a:	6862      	ldr	r2, [r4, #4]
 800ed0c:	429a      	cmp	r2, r3
 800ed0e:	bfde      	ittt	le
 800ed10:	2330      	movle	r3, #48	; 0x30
 800ed12:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ed16:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800ed1a:	ebac 0305 	sub.w	r3, ip, r5
 800ed1e:	6123      	str	r3, [r4, #16]
 800ed20:	f8cd 8000 	str.w	r8, [sp]
 800ed24:	463b      	mov	r3, r7
 800ed26:	aa03      	add	r2, sp, #12
 800ed28:	4621      	mov	r1, r4
 800ed2a:	4630      	mov	r0, r6
 800ed2c:	f7ff fef6 	bl	800eb1c <_printf_common>
 800ed30:	3001      	adds	r0, #1
 800ed32:	d14d      	bne.n	800edd0 <_printf_i+0x1c8>
 800ed34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ed38:	b005      	add	sp, #20
 800ed3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ed3e:	4839      	ldr	r0, [pc, #228]	; (800ee24 <_printf_i+0x21c>)
 800ed40:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ed44:	6813      	ldr	r3, [r2, #0]
 800ed46:	6821      	ldr	r1, [r4, #0]
 800ed48:	1d1d      	adds	r5, r3, #4
 800ed4a:	681b      	ldr	r3, [r3, #0]
 800ed4c:	6015      	str	r5, [r2, #0]
 800ed4e:	060a      	lsls	r2, r1, #24
 800ed50:	d50b      	bpl.n	800ed6a <_printf_i+0x162>
 800ed52:	07ca      	lsls	r2, r1, #31
 800ed54:	bf44      	itt	mi
 800ed56:	f041 0120 	orrmi.w	r1, r1, #32
 800ed5a:	6021      	strmi	r1, [r4, #0]
 800ed5c:	b91b      	cbnz	r3, 800ed66 <_printf_i+0x15e>
 800ed5e:	6822      	ldr	r2, [r4, #0]
 800ed60:	f022 0220 	bic.w	r2, r2, #32
 800ed64:	6022      	str	r2, [r4, #0]
 800ed66:	2210      	movs	r2, #16
 800ed68:	e7b7      	b.n	800ecda <_printf_i+0xd2>
 800ed6a:	064d      	lsls	r5, r1, #25
 800ed6c:	bf48      	it	mi
 800ed6e:	b29b      	uxthmi	r3, r3
 800ed70:	e7ef      	b.n	800ed52 <_printf_i+0x14a>
 800ed72:	4665      	mov	r5, ip
 800ed74:	fbb3 f1f2 	udiv	r1, r3, r2
 800ed78:	fb02 3311 	mls	r3, r2, r1, r3
 800ed7c:	5cc3      	ldrb	r3, [r0, r3]
 800ed7e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ed82:	460b      	mov	r3, r1
 800ed84:	2900      	cmp	r1, #0
 800ed86:	d1f5      	bne.n	800ed74 <_printf_i+0x16c>
 800ed88:	e7b9      	b.n	800ecfe <_printf_i+0xf6>
 800ed8a:	6813      	ldr	r3, [r2, #0]
 800ed8c:	6825      	ldr	r5, [r4, #0]
 800ed8e:	6961      	ldr	r1, [r4, #20]
 800ed90:	1d18      	adds	r0, r3, #4
 800ed92:	6010      	str	r0, [r2, #0]
 800ed94:	0628      	lsls	r0, r5, #24
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	d501      	bpl.n	800ed9e <_printf_i+0x196>
 800ed9a:	6019      	str	r1, [r3, #0]
 800ed9c:	e002      	b.n	800eda4 <_printf_i+0x19c>
 800ed9e:	066a      	lsls	r2, r5, #25
 800eda0:	d5fb      	bpl.n	800ed9a <_printf_i+0x192>
 800eda2:	8019      	strh	r1, [r3, #0]
 800eda4:	2300      	movs	r3, #0
 800eda6:	6123      	str	r3, [r4, #16]
 800eda8:	4665      	mov	r5, ip
 800edaa:	e7b9      	b.n	800ed20 <_printf_i+0x118>
 800edac:	6813      	ldr	r3, [r2, #0]
 800edae:	1d19      	adds	r1, r3, #4
 800edb0:	6011      	str	r1, [r2, #0]
 800edb2:	681d      	ldr	r5, [r3, #0]
 800edb4:	6862      	ldr	r2, [r4, #4]
 800edb6:	2100      	movs	r1, #0
 800edb8:	4628      	mov	r0, r5
 800edba:	f7f1 fa39 	bl	8000230 <memchr>
 800edbe:	b108      	cbz	r0, 800edc4 <_printf_i+0x1bc>
 800edc0:	1b40      	subs	r0, r0, r5
 800edc2:	6060      	str	r0, [r4, #4]
 800edc4:	6863      	ldr	r3, [r4, #4]
 800edc6:	6123      	str	r3, [r4, #16]
 800edc8:	2300      	movs	r3, #0
 800edca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800edce:	e7a7      	b.n	800ed20 <_printf_i+0x118>
 800edd0:	6923      	ldr	r3, [r4, #16]
 800edd2:	462a      	mov	r2, r5
 800edd4:	4639      	mov	r1, r7
 800edd6:	4630      	mov	r0, r6
 800edd8:	47c0      	blx	r8
 800edda:	3001      	adds	r0, #1
 800eddc:	d0aa      	beq.n	800ed34 <_printf_i+0x12c>
 800edde:	6823      	ldr	r3, [r4, #0]
 800ede0:	079b      	lsls	r3, r3, #30
 800ede2:	d413      	bmi.n	800ee0c <_printf_i+0x204>
 800ede4:	68e0      	ldr	r0, [r4, #12]
 800ede6:	9b03      	ldr	r3, [sp, #12]
 800ede8:	4298      	cmp	r0, r3
 800edea:	bfb8      	it	lt
 800edec:	4618      	movlt	r0, r3
 800edee:	e7a3      	b.n	800ed38 <_printf_i+0x130>
 800edf0:	2301      	movs	r3, #1
 800edf2:	464a      	mov	r2, r9
 800edf4:	4639      	mov	r1, r7
 800edf6:	4630      	mov	r0, r6
 800edf8:	47c0      	blx	r8
 800edfa:	3001      	adds	r0, #1
 800edfc:	d09a      	beq.n	800ed34 <_printf_i+0x12c>
 800edfe:	3501      	adds	r5, #1
 800ee00:	68e3      	ldr	r3, [r4, #12]
 800ee02:	9a03      	ldr	r2, [sp, #12]
 800ee04:	1a9b      	subs	r3, r3, r2
 800ee06:	42ab      	cmp	r3, r5
 800ee08:	dcf2      	bgt.n	800edf0 <_printf_i+0x1e8>
 800ee0a:	e7eb      	b.n	800ede4 <_printf_i+0x1dc>
 800ee0c:	2500      	movs	r5, #0
 800ee0e:	f104 0919 	add.w	r9, r4, #25
 800ee12:	e7f5      	b.n	800ee00 <_printf_i+0x1f8>
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d1ac      	bne.n	800ed72 <_printf_i+0x16a>
 800ee18:	7803      	ldrb	r3, [r0, #0]
 800ee1a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ee1e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ee22:	e76c      	b.n	800ecfe <_printf_i+0xf6>
 800ee24:	08013636 	.word	0x08013636
 800ee28:	08013647 	.word	0x08013647

0800ee2c <_puts_r>:
 800ee2c:	b570      	push	{r4, r5, r6, lr}
 800ee2e:	460e      	mov	r6, r1
 800ee30:	4605      	mov	r5, r0
 800ee32:	b118      	cbz	r0, 800ee3c <_puts_r+0x10>
 800ee34:	6983      	ldr	r3, [r0, #24]
 800ee36:	b90b      	cbnz	r3, 800ee3c <_puts_r+0x10>
 800ee38:	f001 f896 	bl	800ff68 <__sinit>
 800ee3c:	69ab      	ldr	r3, [r5, #24]
 800ee3e:	68ac      	ldr	r4, [r5, #8]
 800ee40:	b913      	cbnz	r3, 800ee48 <_puts_r+0x1c>
 800ee42:	4628      	mov	r0, r5
 800ee44:	f001 f890 	bl	800ff68 <__sinit>
 800ee48:	4b23      	ldr	r3, [pc, #140]	; (800eed8 <_puts_r+0xac>)
 800ee4a:	429c      	cmp	r4, r3
 800ee4c:	d117      	bne.n	800ee7e <_puts_r+0x52>
 800ee4e:	686c      	ldr	r4, [r5, #4]
 800ee50:	89a3      	ldrh	r3, [r4, #12]
 800ee52:	071b      	lsls	r3, r3, #28
 800ee54:	d51d      	bpl.n	800ee92 <_puts_r+0x66>
 800ee56:	6923      	ldr	r3, [r4, #16]
 800ee58:	b1db      	cbz	r3, 800ee92 <_puts_r+0x66>
 800ee5a:	3e01      	subs	r6, #1
 800ee5c:	68a3      	ldr	r3, [r4, #8]
 800ee5e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ee62:	3b01      	subs	r3, #1
 800ee64:	60a3      	str	r3, [r4, #8]
 800ee66:	b9e9      	cbnz	r1, 800eea4 <_puts_r+0x78>
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	da2e      	bge.n	800eeca <_puts_r+0x9e>
 800ee6c:	4622      	mov	r2, r4
 800ee6e:	210a      	movs	r1, #10
 800ee70:	4628      	mov	r0, r5
 800ee72:	f000 f883 	bl	800ef7c <__swbuf_r>
 800ee76:	3001      	adds	r0, #1
 800ee78:	d011      	beq.n	800ee9e <_puts_r+0x72>
 800ee7a:	200a      	movs	r0, #10
 800ee7c:	e011      	b.n	800eea2 <_puts_r+0x76>
 800ee7e:	4b17      	ldr	r3, [pc, #92]	; (800eedc <_puts_r+0xb0>)
 800ee80:	429c      	cmp	r4, r3
 800ee82:	d101      	bne.n	800ee88 <_puts_r+0x5c>
 800ee84:	68ac      	ldr	r4, [r5, #8]
 800ee86:	e7e3      	b.n	800ee50 <_puts_r+0x24>
 800ee88:	4b15      	ldr	r3, [pc, #84]	; (800eee0 <_puts_r+0xb4>)
 800ee8a:	429c      	cmp	r4, r3
 800ee8c:	bf08      	it	eq
 800ee8e:	68ec      	ldreq	r4, [r5, #12]
 800ee90:	e7de      	b.n	800ee50 <_puts_r+0x24>
 800ee92:	4621      	mov	r1, r4
 800ee94:	4628      	mov	r0, r5
 800ee96:	f000 f8c3 	bl	800f020 <__swsetup_r>
 800ee9a:	2800      	cmp	r0, #0
 800ee9c:	d0dd      	beq.n	800ee5a <_puts_r+0x2e>
 800ee9e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800eea2:	bd70      	pop	{r4, r5, r6, pc}
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	da04      	bge.n	800eeb2 <_puts_r+0x86>
 800eea8:	69a2      	ldr	r2, [r4, #24]
 800eeaa:	429a      	cmp	r2, r3
 800eeac:	dc06      	bgt.n	800eebc <_puts_r+0x90>
 800eeae:	290a      	cmp	r1, #10
 800eeb0:	d004      	beq.n	800eebc <_puts_r+0x90>
 800eeb2:	6823      	ldr	r3, [r4, #0]
 800eeb4:	1c5a      	adds	r2, r3, #1
 800eeb6:	6022      	str	r2, [r4, #0]
 800eeb8:	7019      	strb	r1, [r3, #0]
 800eeba:	e7cf      	b.n	800ee5c <_puts_r+0x30>
 800eebc:	4622      	mov	r2, r4
 800eebe:	4628      	mov	r0, r5
 800eec0:	f000 f85c 	bl	800ef7c <__swbuf_r>
 800eec4:	3001      	adds	r0, #1
 800eec6:	d1c9      	bne.n	800ee5c <_puts_r+0x30>
 800eec8:	e7e9      	b.n	800ee9e <_puts_r+0x72>
 800eeca:	6823      	ldr	r3, [r4, #0]
 800eecc:	200a      	movs	r0, #10
 800eece:	1c5a      	adds	r2, r3, #1
 800eed0:	6022      	str	r2, [r4, #0]
 800eed2:	7018      	strb	r0, [r3, #0]
 800eed4:	e7e5      	b.n	800eea2 <_puts_r+0x76>
 800eed6:	bf00      	nop
 800eed8:	08013688 	.word	0x08013688
 800eedc:	080136a8 	.word	0x080136a8
 800eee0:	08013668 	.word	0x08013668

0800eee4 <puts>:
 800eee4:	4b02      	ldr	r3, [pc, #8]	; (800eef0 <puts+0xc>)
 800eee6:	4601      	mov	r1, r0
 800eee8:	6818      	ldr	r0, [r3, #0]
 800eeea:	f7ff bf9f 	b.w	800ee2c <_puts_r>
 800eeee:	bf00      	nop
 800eef0:	200017f4 	.word	0x200017f4

0800eef4 <sniprintf>:
 800eef4:	b40c      	push	{r2, r3}
 800eef6:	b530      	push	{r4, r5, lr}
 800eef8:	4b17      	ldr	r3, [pc, #92]	; (800ef58 <sniprintf+0x64>)
 800eefa:	1e0c      	subs	r4, r1, #0
 800eefc:	b09d      	sub	sp, #116	; 0x74
 800eefe:	681d      	ldr	r5, [r3, #0]
 800ef00:	da08      	bge.n	800ef14 <sniprintf+0x20>
 800ef02:	238b      	movs	r3, #139	; 0x8b
 800ef04:	602b      	str	r3, [r5, #0]
 800ef06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ef0a:	b01d      	add	sp, #116	; 0x74
 800ef0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ef10:	b002      	add	sp, #8
 800ef12:	4770      	bx	lr
 800ef14:	f44f 7302 	mov.w	r3, #520	; 0x208
 800ef18:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ef1c:	bf14      	ite	ne
 800ef1e:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800ef22:	4623      	moveq	r3, r4
 800ef24:	9304      	str	r3, [sp, #16]
 800ef26:	9307      	str	r3, [sp, #28]
 800ef28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ef2c:	9002      	str	r0, [sp, #8]
 800ef2e:	9006      	str	r0, [sp, #24]
 800ef30:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ef34:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ef36:	ab21      	add	r3, sp, #132	; 0x84
 800ef38:	a902      	add	r1, sp, #8
 800ef3a:	4628      	mov	r0, r5
 800ef3c:	9301      	str	r3, [sp, #4]
 800ef3e:	f001 fd0d 	bl	801095c <_svfiprintf_r>
 800ef42:	1c43      	adds	r3, r0, #1
 800ef44:	bfbc      	itt	lt
 800ef46:	238b      	movlt	r3, #139	; 0x8b
 800ef48:	602b      	strlt	r3, [r5, #0]
 800ef4a:	2c00      	cmp	r4, #0
 800ef4c:	d0dd      	beq.n	800ef0a <sniprintf+0x16>
 800ef4e:	9b02      	ldr	r3, [sp, #8]
 800ef50:	2200      	movs	r2, #0
 800ef52:	701a      	strb	r2, [r3, #0]
 800ef54:	e7d9      	b.n	800ef0a <sniprintf+0x16>
 800ef56:	bf00      	nop
 800ef58:	200017f4 	.word	0x200017f4

0800ef5c <strcat>:
 800ef5c:	b510      	push	{r4, lr}
 800ef5e:	4603      	mov	r3, r0
 800ef60:	781a      	ldrb	r2, [r3, #0]
 800ef62:	1c5c      	adds	r4, r3, #1
 800ef64:	b93a      	cbnz	r2, 800ef76 <strcat+0x1a>
 800ef66:	3b01      	subs	r3, #1
 800ef68:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ef6c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ef70:	2a00      	cmp	r2, #0
 800ef72:	d1f9      	bne.n	800ef68 <strcat+0xc>
 800ef74:	bd10      	pop	{r4, pc}
 800ef76:	4623      	mov	r3, r4
 800ef78:	e7f2      	b.n	800ef60 <strcat+0x4>
	...

0800ef7c <__swbuf_r>:
 800ef7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ef7e:	460e      	mov	r6, r1
 800ef80:	4614      	mov	r4, r2
 800ef82:	4605      	mov	r5, r0
 800ef84:	b118      	cbz	r0, 800ef8e <__swbuf_r+0x12>
 800ef86:	6983      	ldr	r3, [r0, #24]
 800ef88:	b90b      	cbnz	r3, 800ef8e <__swbuf_r+0x12>
 800ef8a:	f000 ffed 	bl	800ff68 <__sinit>
 800ef8e:	4b21      	ldr	r3, [pc, #132]	; (800f014 <__swbuf_r+0x98>)
 800ef90:	429c      	cmp	r4, r3
 800ef92:	d12a      	bne.n	800efea <__swbuf_r+0x6e>
 800ef94:	686c      	ldr	r4, [r5, #4]
 800ef96:	69a3      	ldr	r3, [r4, #24]
 800ef98:	60a3      	str	r3, [r4, #8]
 800ef9a:	89a3      	ldrh	r3, [r4, #12]
 800ef9c:	071a      	lsls	r2, r3, #28
 800ef9e:	d52e      	bpl.n	800effe <__swbuf_r+0x82>
 800efa0:	6923      	ldr	r3, [r4, #16]
 800efa2:	b363      	cbz	r3, 800effe <__swbuf_r+0x82>
 800efa4:	6923      	ldr	r3, [r4, #16]
 800efa6:	6820      	ldr	r0, [r4, #0]
 800efa8:	1ac0      	subs	r0, r0, r3
 800efaa:	6963      	ldr	r3, [r4, #20]
 800efac:	b2f6      	uxtb	r6, r6
 800efae:	4283      	cmp	r3, r0
 800efb0:	4637      	mov	r7, r6
 800efb2:	dc04      	bgt.n	800efbe <__swbuf_r+0x42>
 800efb4:	4621      	mov	r1, r4
 800efb6:	4628      	mov	r0, r5
 800efb8:	f000 ff6c 	bl	800fe94 <_fflush_r>
 800efbc:	bb28      	cbnz	r0, 800f00a <__swbuf_r+0x8e>
 800efbe:	68a3      	ldr	r3, [r4, #8]
 800efc0:	3b01      	subs	r3, #1
 800efc2:	60a3      	str	r3, [r4, #8]
 800efc4:	6823      	ldr	r3, [r4, #0]
 800efc6:	1c5a      	adds	r2, r3, #1
 800efc8:	6022      	str	r2, [r4, #0]
 800efca:	701e      	strb	r6, [r3, #0]
 800efcc:	6963      	ldr	r3, [r4, #20]
 800efce:	3001      	adds	r0, #1
 800efd0:	4283      	cmp	r3, r0
 800efd2:	d004      	beq.n	800efde <__swbuf_r+0x62>
 800efd4:	89a3      	ldrh	r3, [r4, #12]
 800efd6:	07db      	lsls	r3, r3, #31
 800efd8:	d519      	bpl.n	800f00e <__swbuf_r+0x92>
 800efda:	2e0a      	cmp	r6, #10
 800efdc:	d117      	bne.n	800f00e <__swbuf_r+0x92>
 800efde:	4621      	mov	r1, r4
 800efe0:	4628      	mov	r0, r5
 800efe2:	f000 ff57 	bl	800fe94 <_fflush_r>
 800efe6:	b190      	cbz	r0, 800f00e <__swbuf_r+0x92>
 800efe8:	e00f      	b.n	800f00a <__swbuf_r+0x8e>
 800efea:	4b0b      	ldr	r3, [pc, #44]	; (800f018 <__swbuf_r+0x9c>)
 800efec:	429c      	cmp	r4, r3
 800efee:	d101      	bne.n	800eff4 <__swbuf_r+0x78>
 800eff0:	68ac      	ldr	r4, [r5, #8]
 800eff2:	e7d0      	b.n	800ef96 <__swbuf_r+0x1a>
 800eff4:	4b09      	ldr	r3, [pc, #36]	; (800f01c <__swbuf_r+0xa0>)
 800eff6:	429c      	cmp	r4, r3
 800eff8:	bf08      	it	eq
 800effa:	68ec      	ldreq	r4, [r5, #12]
 800effc:	e7cb      	b.n	800ef96 <__swbuf_r+0x1a>
 800effe:	4621      	mov	r1, r4
 800f000:	4628      	mov	r0, r5
 800f002:	f000 f80d 	bl	800f020 <__swsetup_r>
 800f006:	2800      	cmp	r0, #0
 800f008:	d0cc      	beq.n	800efa4 <__swbuf_r+0x28>
 800f00a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f00e:	4638      	mov	r0, r7
 800f010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f012:	bf00      	nop
 800f014:	08013688 	.word	0x08013688
 800f018:	080136a8 	.word	0x080136a8
 800f01c:	08013668 	.word	0x08013668

0800f020 <__swsetup_r>:
 800f020:	4b32      	ldr	r3, [pc, #200]	; (800f0ec <__swsetup_r+0xcc>)
 800f022:	b570      	push	{r4, r5, r6, lr}
 800f024:	681d      	ldr	r5, [r3, #0]
 800f026:	4606      	mov	r6, r0
 800f028:	460c      	mov	r4, r1
 800f02a:	b125      	cbz	r5, 800f036 <__swsetup_r+0x16>
 800f02c:	69ab      	ldr	r3, [r5, #24]
 800f02e:	b913      	cbnz	r3, 800f036 <__swsetup_r+0x16>
 800f030:	4628      	mov	r0, r5
 800f032:	f000 ff99 	bl	800ff68 <__sinit>
 800f036:	4b2e      	ldr	r3, [pc, #184]	; (800f0f0 <__swsetup_r+0xd0>)
 800f038:	429c      	cmp	r4, r3
 800f03a:	d10f      	bne.n	800f05c <__swsetup_r+0x3c>
 800f03c:	686c      	ldr	r4, [r5, #4]
 800f03e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f042:	b29a      	uxth	r2, r3
 800f044:	0715      	lsls	r5, r2, #28
 800f046:	d42c      	bmi.n	800f0a2 <__swsetup_r+0x82>
 800f048:	06d0      	lsls	r0, r2, #27
 800f04a:	d411      	bmi.n	800f070 <__swsetup_r+0x50>
 800f04c:	2209      	movs	r2, #9
 800f04e:	6032      	str	r2, [r6, #0]
 800f050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f054:	81a3      	strh	r3, [r4, #12]
 800f056:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f05a:	e03e      	b.n	800f0da <__swsetup_r+0xba>
 800f05c:	4b25      	ldr	r3, [pc, #148]	; (800f0f4 <__swsetup_r+0xd4>)
 800f05e:	429c      	cmp	r4, r3
 800f060:	d101      	bne.n	800f066 <__swsetup_r+0x46>
 800f062:	68ac      	ldr	r4, [r5, #8]
 800f064:	e7eb      	b.n	800f03e <__swsetup_r+0x1e>
 800f066:	4b24      	ldr	r3, [pc, #144]	; (800f0f8 <__swsetup_r+0xd8>)
 800f068:	429c      	cmp	r4, r3
 800f06a:	bf08      	it	eq
 800f06c:	68ec      	ldreq	r4, [r5, #12]
 800f06e:	e7e6      	b.n	800f03e <__swsetup_r+0x1e>
 800f070:	0751      	lsls	r1, r2, #29
 800f072:	d512      	bpl.n	800f09a <__swsetup_r+0x7a>
 800f074:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f076:	b141      	cbz	r1, 800f08a <__swsetup_r+0x6a>
 800f078:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f07c:	4299      	cmp	r1, r3
 800f07e:	d002      	beq.n	800f086 <__swsetup_r+0x66>
 800f080:	4630      	mov	r0, r6
 800f082:	f001 fb69 	bl	8010758 <_free_r>
 800f086:	2300      	movs	r3, #0
 800f088:	6363      	str	r3, [r4, #52]	; 0x34
 800f08a:	89a3      	ldrh	r3, [r4, #12]
 800f08c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f090:	81a3      	strh	r3, [r4, #12]
 800f092:	2300      	movs	r3, #0
 800f094:	6063      	str	r3, [r4, #4]
 800f096:	6923      	ldr	r3, [r4, #16]
 800f098:	6023      	str	r3, [r4, #0]
 800f09a:	89a3      	ldrh	r3, [r4, #12]
 800f09c:	f043 0308 	orr.w	r3, r3, #8
 800f0a0:	81a3      	strh	r3, [r4, #12]
 800f0a2:	6923      	ldr	r3, [r4, #16]
 800f0a4:	b94b      	cbnz	r3, 800f0ba <__swsetup_r+0x9a>
 800f0a6:	89a3      	ldrh	r3, [r4, #12]
 800f0a8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f0ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f0b0:	d003      	beq.n	800f0ba <__swsetup_r+0x9a>
 800f0b2:	4621      	mov	r1, r4
 800f0b4:	4630      	mov	r0, r6
 800f0b6:	f001 f813 	bl	80100e0 <__smakebuf_r>
 800f0ba:	89a2      	ldrh	r2, [r4, #12]
 800f0bc:	f012 0301 	ands.w	r3, r2, #1
 800f0c0:	d00c      	beq.n	800f0dc <__swsetup_r+0xbc>
 800f0c2:	2300      	movs	r3, #0
 800f0c4:	60a3      	str	r3, [r4, #8]
 800f0c6:	6963      	ldr	r3, [r4, #20]
 800f0c8:	425b      	negs	r3, r3
 800f0ca:	61a3      	str	r3, [r4, #24]
 800f0cc:	6923      	ldr	r3, [r4, #16]
 800f0ce:	b953      	cbnz	r3, 800f0e6 <__swsetup_r+0xc6>
 800f0d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0d4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800f0d8:	d1ba      	bne.n	800f050 <__swsetup_r+0x30>
 800f0da:	bd70      	pop	{r4, r5, r6, pc}
 800f0dc:	0792      	lsls	r2, r2, #30
 800f0de:	bf58      	it	pl
 800f0e0:	6963      	ldrpl	r3, [r4, #20]
 800f0e2:	60a3      	str	r3, [r4, #8]
 800f0e4:	e7f2      	b.n	800f0cc <__swsetup_r+0xac>
 800f0e6:	2000      	movs	r0, #0
 800f0e8:	e7f7      	b.n	800f0da <__swsetup_r+0xba>
 800f0ea:	bf00      	nop
 800f0ec:	200017f4 	.word	0x200017f4
 800f0f0:	08013688 	.word	0x08013688
 800f0f4:	080136a8 	.word	0x080136a8
 800f0f8:	08013668 	.word	0x08013668

0800f0fc <quorem>:
 800f0fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f100:	6903      	ldr	r3, [r0, #16]
 800f102:	690c      	ldr	r4, [r1, #16]
 800f104:	42a3      	cmp	r3, r4
 800f106:	4680      	mov	r8, r0
 800f108:	f2c0 8082 	blt.w	800f210 <quorem+0x114>
 800f10c:	3c01      	subs	r4, #1
 800f10e:	f101 0714 	add.w	r7, r1, #20
 800f112:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800f116:	f100 0614 	add.w	r6, r0, #20
 800f11a:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800f11e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800f122:	eb06 030c 	add.w	r3, r6, ip
 800f126:	3501      	adds	r5, #1
 800f128:	eb07 090c 	add.w	r9, r7, ip
 800f12c:	9301      	str	r3, [sp, #4]
 800f12e:	fbb0 f5f5 	udiv	r5, r0, r5
 800f132:	b395      	cbz	r5, 800f19a <quorem+0x9e>
 800f134:	f04f 0a00 	mov.w	sl, #0
 800f138:	4638      	mov	r0, r7
 800f13a:	46b6      	mov	lr, r6
 800f13c:	46d3      	mov	fp, sl
 800f13e:	f850 2b04 	ldr.w	r2, [r0], #4
 800f142:	b293      	uxth	r3, r2
 800f144:	fb05 a303 	mla	r3, r5, r3, sl
 800f148:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800f14c:	b29b      	uxth	r3, r3
 800f14e:	ebab 0303 	sub.w	r3, fp, r3
 800f152:	0c12      	lsrs	r2, r2, #16
 800f154:	f8de b000 	ldr.w	fp, [lr]
 800f158:	fb05 a202 	mla	r2, r5, r2, sl
 800f15c:	fa13 f38b 	uxtah	r3, r3, fp
 800f160:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800f164:	fa1f fb82 	uxth.w	fp, r2
 800f168:	f8de 2000 	ldr.w	r2, [lr]
 800f16c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800f170:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f174:	b29b      	uxth	r3, r3
 800f176:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f17a:	4581      	cmp	r9, r0
 800f17c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800f180:	f84e 3b04 	str.w	r3, [lr], #4
 800f184:	d2db      	bcs.n	800f13e <quorem+0x42>
 800f186:	f856 300c 	ldr.w	r3, [r6, ip]
 800f18a:	b933      	cbnz	r3, 800f19a <quorem+0x9e>
 800f18c:	9b01      	ldr	r3, [sp, #4]
 800f18e:	3b04      	subs	r3, #4
 800f190:	429e      	cmp	r6, r3
 800f192:	461a      	mov	r2, r3
 800f194:	d330      	bcc.n	800f1f8 <quorem+0xfc>
 800f196:	f8c8 4010 	str.w	r4, [r8, #16]
 800f19a:	4640      	mov	r0, r8
 800f19c:	f001 fa08 	bl	80105b0 <__mcmp>
 800f1a0:	2800      	cmp	r0, #0
 800f1a2:	db25      	blt.n	800f1f0 <quorem+0xf4>
 800f1a4:	3501      	adds	r5, #1
 800f1a6:	4630      	mov	r0, r6
 800f1a8:	f04f 0c00 	mov.w	ip, #0
 800f1ac:	f857 2b04 	ldr.w	r2, [r7], #4
 800f1b0:	f8d0 e000 	ldr.w	lr, [r0]
 800f1b4:	b293      	uxth	r3, r2
 800f1b6:	ebac 0303 	sub.w	r3, ip, r3
 800f1ba:	0c12      	lsrs	r2, r2, #16
 800f1bc:	fa13 f38e 	uxtah	r3, r3, lr
 800f1c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800f1c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800f1c8:	b29b      	uxth	r3, r3
 800f1ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800f1ce:	45b9      	cmp	r9, r7
 800f1d0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800f1d4:	f840 3b04 	str.w	r3, [r0], #4
 800f1d8:	d2e8      	bcs.n	800f1ac <quorem+0xb0>
 800f1da:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800f1de:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800f1e2:	b92a      	cbnz	r2, 800f1f0 <quorem+0xf4>
 800f1e4:	3b04      	subs	r3, #4
 800f1e6:	429e      	cmp	r6, r3
 800f1e8:	461a      	mov	r2, r3
 800f1ea:	d30b      	bcc.n	800f204 <quorem+0x108>
 800f1ec:	f8c8 4010 	str.w	r4, [r8, #16]
 800f1f0:	4628      	mov	r0, r5
 800f1f2:	b003      	add	sp, #12
 800f1f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f1f8:	6812      	ldr	r2, [r2, #0]
 800f1fa:	3b04      	subs	r3, #4
 800f1fc:	2a00      	cmp	r2, #0
 800f1fe:	d1ca      	bne.n	800f196 <quorem+0x9a>
 800f200:	3c01      	subs	r4, #1
 800f202:	e7c5      	b.n	800f190 <quorem+0x94>
 800f204:	6812      	ldr	r2, [r2, #0]
 800f206:	3b04      	subs	r3, #4
 800f208:	2a00      	cmp	r2, #0
 800f20a:	d1ef      	bne.n	800f1ec <quorem+0xf0>
 800f20c:	3c01      	subs	r4, #1
 800f20e:	e7ea      	b.n	800f1e6 <quorem+0xea>
 800f210:	2000      	movs	r0, #0
 800f212:	e7ee      	b.n	800f1f2 <quorem+0xf6>
 800f214:	0000      	movs	r0, r0
	...

0800f218 <_dtoa_r>:
 800f218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f21c:	ec57 6b10 	vmov	r6, r7, d0
 800f220:	b097      	sub	sp, #92	; 0x5c
 800f222:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f224:	9106      	str	r1, [sp, #24]
 800f226:	4604      	mov	r4, r0
 800f228:	920b      	str	r2, [sp, #44]	; 0x2c
 800f22a:	9312      	str	r3, [sp, #72]	; 0x48
 800f22c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800f230:	e9cd 6700 	strd	r6, r7, [sp]
 800f234:	b93d      	cbnz	r5, 800f246 <_dtoa_r+0x2e>
 800f236:	2010      	movs	r0, #16
 800f238:	f000 ff92 	bl	8010160 <malloc>
 800f23c:	6260      	str	r0, [r4, #36]	; 0x24
 800f23e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f242:	6005      	str	r5, [r0, #0]
 800f244:	60c5      	str	r5, [r0, #12]
 800f246:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f248:	6819      	ldr	r1, [r3, #0]
 800f24a:	b151      	cbz	r1, 800f262 <_dtoa_r+0x4a>
 800f24c:	685a      	ldr	r2, [r3, #4]
 800f24e:	604a      	str	r2, [r1, #4]
 800f250:	2301      	movs	r3, #1
 800f252:	4093      	lsls	r3, r2
 800f254:	608b      	str	r3, [r1, #8]
 800f256:	4620      	mov	r0, r4
 800f258:	f000 ffc9 	bl	80101ee <_Bfree>
 800f25c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f25e:	2200      	movs	r2, #0
 800f260:	601a      	str	r2, [r3, #0]
 800f262:	1e3b      	subs	r3, r7, #0
 800f264:	bfbb      	ittet	lt
 800f266:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800f26a:	9301      	strlt	r3, [sp, #4]
 800f26c:	2300      	movge	r3, #0
 800f26e:	2201      	movlt	r2, #1
 800f270:	bfac      	ite	ge
 800f272:	f8c8 3000 	strge.w	r3, [r8]
 800f276:	f8c8 2000 	strlt.w	r2, [r8]
 800f27a:	4baf      	ldr	r3, [pc, #700]	; (800f538 <_dtoa_r+0x320>)
 800f27c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f280:	ea33 0308 	bics.w	r3, r3, r8
 800f284:	d114      	bne.n	800f2b0 <_dtoa_r+0x98>
 800f286:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f288:	f242 730f 	movw	r3, #9999	; 0x270f
 800f28c:	6013      	str	r3, [r2, #0]
 800f28e:	9b00      	ldr	r3, [sp, #0]
 800f290:	b923      	cbnz	r3, 800f29c <_dtoa_r+0x84>
 800f292:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800f296:	2800      	cmp	r0, #0
 800f298:	f000 8542 	beq.w	800fd20 <_dtoa_r+0xb08>
 800f29c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f29e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800f54c <_dtoa_r+0x334>
 800f2a2:	2b00      	cmp	r3, #0
 800f2a4:	f000 8544 	beq.w	800fd30 <_dtoa_r+0xb18>
 800f2a8:	f10b 0303 	add.w	r3, fp, #3
 800f2ac:	f000 bd3e 	b.w	800fd2c <_dtoa_r+0xb14>
 800f2b0:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f2b4:	2200      	movs	r2, #0
 800f2b6:	2300      	movs	r3, #0
 800f2b8:	4630      	mov	r0, r6
 800f2ba:	4639      	mov	r1, r7
 800f2bc:	f7f1 fc2c 	bl	8000b18 <__aeabi_dcmpeq>
 800f2c0:	4681      	mov	r9, r0
 800f2c2:	b168      	cbz	r0, 800f2e0 <_dtoa_r+0xc8>
 800f2c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f2c6:	2301      	movs	r3, #1
 800f2c8:	6013      	str	r3, [r2, #0]
 800f2ca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	f000 8524 	beq.w	800fd1a <_dtoa_r+0xb02>
 800f2d2:	4b9a      	ldr	r3, [pc, #616]	; (800f53c <_dtoa_r+0x324>)
 800f2d4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f2d6:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800f2da:	6013      	str	r3, [r2, #0]
 800f2dc:	f000 bd28 	b.w	800fd30 <_dtoa_r+0xb18>
 800f2e0:	aa14      	add	r2, sp, #80	; 0x50
 800f2e2:	a915      	add	r1, sp, #84	; 0x54
 800f2e4:	ec47 6b10 	vmov	d0, r6, r7
 800f2e8:	4620      	mov	r0, r4
 800f2ea:	f001 f9d8 	bl	801069e <__d2b>
 800f2ee:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800f2f2:	9004      	str	r0, [sp, #16]
 800f2f4:	2d00      	cmp	r5, #0
 800f2f6:	d07c      	beq.n	800f3f2 <_dtoa_r+0x1da>
 800f2f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f2fc:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800f300:	46b2      	mov	sl, r6
 800f302:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800f306:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800f30a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800f30e:	2200      	movs	r2, #0
 800f310:	4b8b      	ldr	r3, [pc, #556]	; (800f540 <_dtoa_r+0x328>)
 800f312:	4650      	mov	r0, sl
 800f314:	4659      	mov	r1, fp
 800f316:	f7f0 ffdf 	bl	80002d8 <__aeabi_dsub>
 800f31a:	a381      	add	r3, pc, #516	; (adr r3, 800f520 <_dtoa_r+0x308>)
 800f31c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f320:	f7f1 f992 	bl	8000648 <__aeabi_dmul>
 800f324:	a380      	add	r3, pc, #512	; (adr r3, 800f528 <_dtoa_r+0x310>)
 800f326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f32a:	f7f0 ffd7 	bl	80002dc <__adddf3>
 800f32e:	4606      	mov	r6, r0
 800f330:	4628      	mov	r0, r5
 800f332:	460f      	mov	r7, r1
 800f334:	f7f1 f91e 	bl	8000574 <__aeabi_i2d>
 800f338:	a37d      	add	r3, pc, #500	; (adr r3, 800f530 <_dtoa_r+0x318>)
 800f33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f33e:	f7f1 f983 	bl	8000648 <__aeabi_dmul>
 800f342:	4602      	mov	r2, r0
 800f344:	460b      	mov	r3, r1
 800f346:	4630      	mov	r0, r6
 800f348:	4639      	mov	r1, r7
 800f34a:	f7f0 ffc7 	bl	80002dc <__adddf3>
 800f34e:	4606      	mov	r6, r0
 800f350:	460f      	mov	r7, r1
 800f352:	f7f1 fc29 	bl	8000ba8 <__aeabi_d2iz>
 800f356:	2200      	movs	r2, #0
 800f358:	4682      	mov	sl, r0
 800f35a:	2300      	movs	r3, #0
 800f35c:	4630      	mov	r0, r6
 800f35e:	4639      	mov	r1, r7
 800f360:	f7f1 fbe4 	bl	8000b2c <__aeabi_dcmplt>
 800f364:	b148      	cbz	r0, 800f37a <_dtoa_r+0x162>
 800f366:	4650      	mov	r0, sl
 800f368:	f7f1 f904 	bl	8000574 <__aeabi_i2d>
 800f36c:	4632      	mov	r2, r6
 800f36e:	463b      	mov	r3, r7
 800f370:	f7f1 fbd2 	bl	8000b18 <__aeabi_dcmpeq>
 800f374:	b908      	cbnz	r0, 800f37a <_dtoa_r+0x162>
 800f376:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f37a:	f1ba 0f16 	cmp.w	sl, #22
 800f37e:	d859      	bhi.n	800f434 <_dtoa_r+0x21c>
 800f380:	4970      	ldr	r1, [pc, #448]	; (800f544 <_dtoa_r+0x32c>)
 800f382:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800f386:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f38a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f38e:	f7f1 fbeb 	bl	8000b68 <__aeabi_dcmpgt>
 800f392:	2800      	cmp	r0, #0
 800f394:	d050      	beq.n	800f438 <_dtoa_r+0x220>
 800f396:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f39a:	2300      	movs	r3, #0
 800f39c:	930f      	str	r3, [sp, #60]	; 0x3c
 800f39e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f3a0:	1b5d      	subs	r5, r3, r5
 800f3a2:	f1b5 0801 	subs.w	r8, r5, #1
 800f3a6:	bf49      	itett	mi
 800f3a8:	f1c5 0301 	rsbmi	r3, r5, #1
 800f3ac:	2300      	movpl	r3, #0
 800f3ae:	9305      	strmi	r3, [sp, #20]
 800f3b0:	f04f 0800 	movmi.w	r8, #0
 800f3b4:	bf58      	it	pl
 800f3b6:	9305      	strpl	r3, [sp, #20]
 800f3b8:	f1ba 0f00 	cmp.w	sl, #0
 800f3bc:	db3e      	blt.n	800f43c <_dtoa_r+0x224>
 800f3be:	2300      	movs	r3, #0
 800f3c0:	44d0      	add	r8, sl
 800f3c2:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800f3c6:	9307      	str	r3, [sp, #28]
 800f3c8:	9b06      	ldr	r3, [sp, #24]
 800f3ca:	2b09      	cmp	r3, #9
 800f3cc:	f200 8090 	bhi.w	800f4f0 <_dtoa_r+0x2d8>
 800f3d0:	2b05      	cmp	r3, #5
 800f3d2:	bfc4      	itt	gt
 800f3d4:	3b04      	subgt	r3, #4
 800f3d6:	9306      	strgt	r3, [sp, #24]
 800f3d8:	9b06      	ldr	r3, [sp, #24]
 800f3da:	f1a3 0302 	sub.w	r3, r3, #2
 800f3de:	bfcc      	ite	gt
 800f3e0:	2500      	movgt	r5, #0
 800f3e2:	2501      	movle	r5, #1
 800f3e4:	2b03      	cmp	r3, #3
 800f3e6:	f200 808f 	bhi.w	800f508 <_dtoa_r+0x2f0>
 800f3ea:	e8df f003 	tbb	[pc, r3]
 800f3ee:	7f7d      	.short	0x7f7d
 800f3f0:	7131      	.short	0x7131
 800f3f2:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800f3f6:	441d      	add	r5, r3
 800f3f8:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800f3fc:	2820      	cmp	r0, #32
 800f3fe:	dd13      	ble.n	800f428 <_dtoa_r+0x210>
 800f400:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800f404:	9b00      	ldr	r3, [sp, #0]
 800f406:	fa08 f800 	lsl.w	r8, r8, r0
 800f40a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800f40e:	fa23 f000 	lsr.w	r0, r3, r0
 800f412:	ea48 0000 	orr.w	r0, r8, r0
 800f416:	f7f1 f89d 	bl	8000554 <__aeabi_ui2d>
 800f41a:	2301      	movs	r3, #1
 800f41c:	4682      	mov	sl, r0
 800f41e:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800f422:	3d01      	subs	r5, #1
 800f424:	9313      	str	r3, [sp, #76]	; 0x4c
 800f426:	e772      	b.n	800f30e <_dtoa_r+0xf6>
 800f428:	9b00      	ldr	r3, [sp, #0]
 800f42a:	f1c0 0020 	rsb	r0, r0, #32
 800f42e:	fa03 f000 	lsl.w	r0, r3, r0
 800f432:	e7f0      	b.n	800f416 <_dtoa_r+0x1fe>
 800f434:	2301      	movs	r3, #1
 800f436:	e7b1      	b.n	800f39c <_dtoa_r+0x184>
 800f438:	900f      	str	r0, [sp, #60]	; 0x3c
 800f43a:	e7b0      	b.n	800f39e <_dtoa_r+0x186>
 800f43c:	9b05      	ldr	r3, [sp, #20]
 800f43e:	eba3 030a 	sub.w	r3, r3, sl
 800f442:	9305      	str	r3, [sp, #20]
 800f444:	f1ca 0300 	rsb	r3, sl, #0
 800f448:	9307      	str	r3, [sp, #28]
 800f44a:	2300      	movs	r3, #0
 800f44c:	930e      	str	r3, [sp, #56]	; 0x38
 800f44e:	e7bb      	b.n	800f3c8 <_dtoa_r+0x1b0>
 800f450:	2301      	movs	r3, #1
 800f452:	930a      	str	r3, [sp, #40]	; 0x28
 800f454:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f456:	2b00      	cmp	r3, #0
 800f458:	dd59      	ble.n	800f50e <_dtoa_r+0x2f6>
 800f45a:	9302      	str	r3, [sp, #8]
 800f45c:	4699      	mov	r9, r3
 800f45e:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f460:	2200      	movs	r2, #0
 800f462:	6072      	str	r2, [r6, #4]
 800f464:	2204      	movs	r2, #4
 800f466:	f102 0014 	add.w	r0, r2, #20
 800f46a:	4298      	cmp	r0, r3
 800f46c:	6871      	ldr	r1, [r6, #4]
 800f46e:	d953      	bls.n	800f518 <_dtoa_r+0x300>
 800f470:	4620      	mov	r0, r4
 800f472:	f000 fe88 	bl	8010186 <_Balloc>
 800f476:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f478:	6030      	str	r0, [r6, #0]
 800f47a:	f1b9 0f0e 	cmp.w	r9, #14
 800f47e:	f8d3 b000 	ldr.w	fp, [r3]
 800f482:	f200 80e6 	bhi.w	800f652 <_dtoa_r+0x43a>
 800f486:	2d00      	cmp	r5, #0
 800f488:	f000 80e3 	beq.w	800f652 <_dtoa_r+0x43a>
 800f48c:	ed9d 7b00 	vldr	d7, [sp]
 800f490:	f1ba 0f00 	cmp.w	sl, #0
 800f494:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800f498:	dd74      	ble.n	800f584 <_dtoa_r+0x36c>
 800f49a:	4a2a      	ldr	r2, [pc, #168]	; (800f544 <_dtoa_r+0x32c>)
 800f49c:	f00a 030f 	and.w	r3, sl, #15
 800f4a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800f4a4:	ed93 7b00 	vldr	d7, [r3]
 800f4a8:	ea4f 162a 	mov.w	r6, sl, asr #4
 800f4ac:	06f0      	lsls	r0, r6, #27
 800f4ae:	ed8d 7b08 	vstr	d7, [sp, #32]
 800f4b2:	d565      	bpl.n	800f580 <_dtoa_r+0x368>
 800f4b4:	4b24      	ldr	r3, [pc, #144]	; (800f548 <_dtoa_r+0x330>)
 800f4b6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f4ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800f4be:	f7f1 f9ed 	bl	800089c <__aeabi_ddiv>
 800f4c2:	e9cd 0100 	strd	r0, r1, [sp]
 800f4c6:	f006 060f 	and.w	r6, r6, #15
 800f4ca:	2503      	movs	r5, #3
 800f4cc:	4f1e      	ldr	r7, [pc, #120]	; (800f548 <_dtoa_r+0x330>)
 800f4ce:	e04c      	b.n	800f56a <_dtoa_r+0x352>
 800f4d0:	2301      	movs	r3, #1
 800f4d2:	930a      	str	r3, [sp, #40]	; 0x28
 800f4d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f4d6:	4453      	add	r3, sl
 800f4d8:	f103 0901 	add.w	r9, r3, #1
 800f4dc:	9302      	str	r3, [sp, #8]
 800f4de:	464b      	mov	r3, r9
 800f4e0:	2b01      	cmp	r3, #1
 800f4e2:	bfb8      	it	lt
 800f4e4:	2301      	movlt	r3, #1
 800f4e6:	e7ba      	b.n	800f45e <_dtoa_r+0x246>
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	e7b2      	b.n	800f452 <_dtoa_r+0x23a>
 800f4ec:	2300      	movs	r3, #0
 800f4ee:	e7f0      	b.n	800f4d2 <_dtoa_r+0x2ba>
 800f4f0:	2501      	movs	r5, #1
 800f4f2:	2300      	movs	r3, #0
 800f4f4:	9306      	str	r3, [sp, #24]
 800f4f6:	950a      	str	r5, [sp, #40]	; 0x28
 800f4f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800f4fc:	9302      	str	r3, [sp, #8]
 800f4fe:	4699      	mov	r9, r3
 800f500:	2200      	movs	r2, #0
 800f502:	2312      	movs	r3, #18
 800f504:	920b      	str	r2, [sp, #44]	; 0x2c
 800f506:	e7aa      	b.n	800f45e <_dtoa_r+0x246>
 800f508:	2301      	movs	r3, #1
 800f50a:	930a      	str	r3, [sp, #40]	; 0x28
 800f50c:	e7f4      	b.n	800f4f8 <_dtoa_r+0x2e0>
 800f50e:	2301      	movs	r3, #1
 800f510:	9302      	str	r3, [sp, #8]
 800f512:	4699      	mov	r9, r3
 800f514:	461a      	mov	r2, r3
 800f516:	e7f5      	b.n	800f504 <_dtoa_r+0x2ec>
 800f518:	3101      	adds	r1, #1
 800f51a:	6071      	str	r1, [r6, #4]
 800f51c:	0052      	lsls	r2, r2, #1
 800f51e:	e7a2      	b.n	800f466 <_dtoa_r+0x24e>
 800f520:	636f4361 	.word	0x636f4361
 800f524:	3fd287a7 	.word	0x3fd287a7
 800f528:	8b60c8b3 	.word	0x8b60c8b3
 800f52c:	3fc68a28 	.word	0x3fc68a28
 800f530:	509f79fb 	.word	0x509f79fb
 800f534:	3fd34413 	.word	0x3fd34413
 800f538:	7ff00000 	.word	0x7ff00000
 800f53c:	08013635 	.word	0x08013635
 800f540:	3ff80000 	.word	0x3ff80000
 800f544:	080136f0 	.word	0x080136f0
 800f548:	080136c8 	.word	0x080136c8
 800f54c:	08013661 	.word	0x08013661
 800f550:	07f1      	lsls	r1, r6, #31
 800f552:	d508      	bpl.n	800f566 <_dtoa_r+0x34e>
 800f554:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f558:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f55c:	f7f1 f874 	bl	8000648 <__aeabi_dmul>
 800f560:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f564:	3501      	adds	r5, #1
 800f566:	1076      	asrs	r6, r6, #1
 800f568:	3708      	adds	r7, #8
 800f56a:	2e00      	cmp	r6, #0
 800f56c:	d1f0      	bne.n	800f550 <_dtoa_r+0x338>
 800f56e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f572:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f576:	f7f1 f991 	bl	800089c <__aeabi_ddiv>
 800f57a:	e9cd 0100 	strd	r0, r1, [sp]
 800f57e:	e01a      	b.n	800f5b6 <_dtoa_r+0x39e>
 800f580:	2502      	movs	r5, #2
 800f582:	e7a3      	b.n	800f4cc <_dtoa_r+0x2b4>
 800f584:	f000 80a0 	beq.w	800f6c8 <_dtoa_r+0x4b0>
 800f588:	f1ca 0600 	rsb	r6, sl, #0
 800f58c:	4b9f      	ldr	r3, [pc, #636]	; (800f80c <_dtoa_r+0x5f4>)
 800f58e:	4fa0      	ldr	r7, [pc, #640]	; (800f810 <_dtoa_r+0x5f8>)
 800f590:	f006 020f 	and.w	r2, r6, #15
 800f594:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800f598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f59c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800f5a0:	f7f1 f852 	bl	8000648 <__aeabi_dmul>
 800f5a4:	e9cd 0100 	strd	r0, r1, [sp]
 800f5a8:	1136      	asrs	r6, r6, #4
 800f5aa:	2300      	movs	r3, #0
 800f5ac:	2502      	movs	r5, #2
 800f5ae:	2e00      	cmp	r6, #0
 800f5b0:	d17f      	bne.n	800f6b2 <_dtoa_r+0x49a>
 800f5b2:	2b00      	cmp	r3, #0
 800f5b4:	d1e1      	bne.n	800f57a <_dtoa_r+0x362>
 800f5b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	f000 8087 	beq.w	800f6cc <_dtoa_r+0x4b4>
 800f5be:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f5c2:	2200      	movs	r2, #0
 800f5c4:	4b93      	ldr	r3, [pc, #588]	; (800f814 <_dtoa_r+0x5fc>)
 800f5c6:	4630      	mov	r0, r6
 800f5c8:	4639      	mov	r1, r7
 800f5ca:	f7f1 faaf 	bl	8000b2c <__aeabi_dcmplt>
 800f5ce:	2800      	cmp	r0, #0
 800f5d0:	d07c      	beq.n	800f6cc <_dtoa_r+0x4b4>
 800f5d2:	f1b9 0f00 	cmp.w	r9, #0
 800f5d6:	d079      	beq.n	800f6cc <_dtoa_r+0x4b4>
 800f5d8:	9b02      	ldr	r3, [sp, #8]
 800f5da:	2b00      	cmp	r3, #0
 800f5dc:	dd35      	ble.n	800f64a <_dtoa_r+0x432>
 800f5de:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800f5e2:	9308      	str	r3, [sp, #32]
 800f5e4:	4639      	mov	r1, r7
 800f5e6:	2200      	movs	r2, #0
 800f5e8:	4b8b      	ldr	r3, [pc, #556]	; (800f818 <_dtoa_r+0x600>)
 800f5ea:	4630      	mov	r0, r6
 800f5ec:	f7f1 f82c 	bl	8000648 <__aeabi_dmul>
 800f5f0:	e9cd 0100 	strd	r0, r1, [sp]
 800f5f4:	9f02      	ldr	r7, [sp, #8]
 800f5f6:	3501      	adds	r5, #1
 800f5f8:	4628      	mov	r0, r5
 800f5fa:	f7f0 ffbb 	bl	8000574 <__aeabi_i2d>
 800f5fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f602:	f7f1 f821 	bl	8000648 <__aeabi_dmul>
 800f606:	2200      	movs	r2, #0
 800f608:	4b84      	ldr	r3, [pc, #528]	; (800f81c <_dtoa_r+0x604>)
 800f60a:	f7f0 fe67 	bl	80002dc <__adddf3>
 800f60e:	4605      	mov	r5, r0
 800f610:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800f614:	2f00      	cmp	r7, #0
 800f616:	d15d      	bne.n	800f6d4 <_dtoa_r+0x4bc>
 800f618:	2200      	movs	r2, #0
 800f61a:	4b81      	ldr	r3, [pc, #516]	; (800f820 <_dtoa_r+0x608>)
 800f61c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f620:	f7f0 fe5a 	bl	80002d8 <__aeabi_dsub>
 800f624:	462a      	mov	r2, r5
 800f626:	4633      	mov	r3, r6
 800f628:	e9cd 0100 	strd	r0, r1, [sp]
 800f62c:	f7f1 fa9c 	bl	8000b68 <__aeabi_dcmpgt>
 800f630:	2800      	cmp	r0, #0
 800f632:	f040 8288 	bne.w	800fb46 <_dtoa_r+0x92e>
 800f636:	462a      	mov	r2, r5
 800f638:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800f63c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f640:	f7f1 fa74 	bl	8000b2c <__aeabi_dcmplt>
 800f644:	2800      	cmp	r0, #0
 800f646:	f040 827c 	bne.w	800fb42 <_dtoa_r+0x92a>
 800f64a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800f64e:	e9cd 2300 	strd	r2, r3, [sp]
 800f652:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f654:	2b00      	cmp	r3, #0
 800f656:	f2c0 8150 	blt.w	800f8fa <_dtoa_r+0x6e2>
 800f65a:	f1ba 0f0e 	cmp.w	sl, #14
 800f65e:	f300 814c 	bgt.w	800f8fa <_dtoa_r+0x6e2>
 800f662:	4b6a      	ldr	r3, [pc, #424]	; (800f80c <_dtoa_r+0x5f4>)
 800f664:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f668:	ed93 7b00 	vldr	d7, [r3]
 800f66c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f66e:	2b00      	cmp	r3, #0
 800f670:	ed8d 7b02 	vstr	d7, [sp, #8]
 800f674:	f280 80d8 	bge.w	800f828 <_dtoa_r+0x610>
 800f678:	f1b9 0f00 	cmp.w	r9, #0
 800f67c:	f300 80d4 	bgt.w	800f828 <_dtoa_r+0x610>
 800f680:	f040 825e 	bne.w	800fb40 <_dtoa_r+0x928>
 800f684:	2200      	movs	r2, #0
 800f686:	4b66      	ldr	r3, [pc, #408]	; (800f820 <_dtoa_r+0x608>)
 800f688:	ec51 0b17 	vmov	r0, r1, d7
 800f68c:	f7f0 ffdc 	bl	8000648 <__aeabi_dmul>
 800f690:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f694:	f7f1 fa5e 	bl	8000b54 <__aeabi_dcmpge>
 800f698:	464f      	mov	r7, r9
 800f69a:	464e      	mov	r6, r9
 800f69c:	2800      	cmp	r0, #0
 800f69e:	f040 8234 	bne.w	800fb0a <_dtoa_r+0x8f2>
 800f6a2:	2331      	movs	r3, #49	; 0x31
 800f6a4:	f10b 0501 	add.w	r5, fp, #1
 800f6a8:	f88b 3000 	strb.w	r3, [fp]
 800f6ac:	f10a 0a01 	add.w	sl, sl, #1
 800f6b0:	e22f      	b.n	800fb12 <_dtoa_r+0x8fa>
 800f6b2:	07f2      	lsls	r2, r6, #31
 800f6b4:	d505      	bpl.n	800f6c2 <_dtoa_r+0x4aa>
 800f6b6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800f6ba:	f7f0 ffc5 	bl	8000648 <__aeabi_dmul>
 800f6be:	3501      	adds	r5, #1
 800f6c0:	2301      	movs	r3, #1
 800f6c2:	1076      	asrs	r6, r6, #1
 800f6c4:	3708      	adds	r7, #8
 800f6c6:	e772      	b.n	800f5ae <_dtoa_r+0x396>
 800f6c8:	2502      	movs	r5, #2
 800f6ca:	e774      	b.n	800f5b6 <_dtoa_r+0x39e>
 800f6cc:	f8cd a020 	str.w	sl, [sp, #32]
 800f6d0:	464f      	mov	r7, r9
 800f6d2:	e791      	b.n	800f5f8 <_dtoa_r+0x3e0>
 800f6d4:	4b4d      	ldr	r3, [pc, #308]	; (800f80c <_dtoa_r+0x5f4>)
 800f6d6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800f6da:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800f6de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d047      	beq.n	800f774 <_dtoa_r+0x55c>
 800f6e4:	4602      	mov	r2, r0
 800f6e6:	460b      	mov	r3, r1
 800f6e8:	2000      	movs	r0, #0
 800f6ea:	494e      	ldr	r1, [pc, #312]	; (800f824 <_dtoa_r+0x60c>)
 800f6ec:	f7f1 f8d6 	bl	800089c <__aeabi_ddiv>
 800f6f0:	462a      	mov	r2, r5
 800f6f2:	4633      	mov	r3, r6
 800f6f4:	f7f0 fdf0 	bl	80002d8 <__aeabi_dsub>
 800f6f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f6fc:	465d      	mov	r5, fp
 800f6fe:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f702:	f7f1 fa51 	bl	8000ba8 <__aeabi_d2iz>
 800f706:	4606      	mov	r6, r0
 800f708:	f7f0 ff34 	bl	8000574 <__aeabi_i2d>
 800f70c:	4602      	mov	r2, r0
 800f70e:	460b      	mov	r3, r1
 800f710:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f714:	f7f0 fde0 	bl	80002d8 <__aeabi_dsub>
 800f718:	3630      	adds	r6, #48	; 0x30
 800f71a:	f805 6b01 	strb.w	r6, [r5], #1
 800f71e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f722:	e9cd 0100 	strd	r0, r1, [sp]
 800f726:	f7f1 fa01 	bl	8000b2c <__aeabi_dcmplt>
 800f72a:	2800      	cmp	r0, #0
 800f72c:	d163      	bne.n	800f7f6 <_dtoa_r+0x5de>
 800f72e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f732:	2000      	movs	r0, #0
 800f734:	4937      	ldr	r1, [pc, #220]	; (800f814 <_dtoa_r+0x5fc>)
 800f736:	f7f0 fdcf 	bl	80002d8 <__aeabi_dsub>
 800f73a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f73e:	f7f1 f9f5 	bl	8000b2c <__aeabi_dcmplt>
 800f742:	2800      	cmp	r0, #0
 800f744:	f040 80b7 	bne.w	800f8b6 <_dtoa_r+0x69e>
 800f748:	eba5 030b 	sub.w	r3, r5, fp
 800f74c:	429f      	cmp	r7, r3
 800f74e:	f77f af7c 	ble.w	800f64a <_dtoa_r+0x432>
 800f752:	2200      	movs	r2, #0
 800f754:	4b30      	ldr	r3, [pc, #192]	; (800f818 <_dtoa_r+0x600>)
 800f756:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f75a:	f7f0 ff75 	bl	8000648 <__aeabi_dmul>
 800f75e:	2200      	movs	r2, #0
 800f760:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f764:	4b2c      	ldr	r3, [pc, #176]	; (800f818 <_dtoa_r+0x600>)
 800f766:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f76a:	f7f0 ff6d 	bl	8000648 <__aeabi_dmul>
 800f76e:	e9cd 0100 	strd	r0, r1, [sp]
 800f772:	e7c4      	b.n	800f6fe <_dtoa_r+0x4e6>
 800f774:	462a      	mov	r2, r5
 800f776:	4633      	mov	r3, r6
 800f778:	f7f0 ff66 	bl	8000648 <__aeabi_dmul>
 800f77c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800f780:	eb0b 0507 	add.w	r5, fp, r7
 800f784:	465e      	mov	r6, fp
 800f786:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f78a:	f7f1 fa0d 	bl	8000ba8 <__aeabi_d2iz>
 800f78e:	4607      	mov	r7, r0
 800f790:	f7f0 fef0 	bl	8000574 <__aeabi_i2d>
 800f794:	3730      	adds	r7, #48	; 0x30
 800f796:	4602      	mov	r2, r0
 800f798:	460b      	mov	r3, r1
 800f79a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f79e:	f7f0 fd9b 	bl	80002d8 <__aeabi_dsub>
 800f7a2:	f806 7b01 	strb.w	r7, [r6], #1
 800f7a6:	42ae      	cmp	r6, r5
 800f7a8:	e9cd 0100 	strd	r0, r1, [sp]
 800f7ac:	f04f 0200 	mov.w	r2, #0
 800f7b0:	d126      	bne.n	800f800 <_dtoa_r+0x5e8>
 800f7b2:	4b1c      	ldr	r3, [pc, #112]	; (800f824 <_dtoa_r+0x60c>)
 800f7b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800f7b8:	f7f0 fd90 	bl	80002dc <__adddf3>
 800f7bc:	4602      	mov	r2, r0
 800f7be:	460b      	mov	r3, r1
 800f7c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f7c4:	f7f1 f9d0 	bl	8000b68 <__aeabi_dcmpgt>
 800f7c8:	2800      	cmp	r0, #0
 800f7ca:	d174      	bne.n	800f8b6 <_dtoa_r+0x69e>
 800f7cc:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800f7d0:	2000      	movs	r0, #0
 800f7d2:	4914      	ldr	r1, [pc, #80]	; (800f824 <_dtoa_r+0x60c>)
 800f7d4:	f7f0 fd80 	bl	80002d8 <__aeabi_dsub>
 800f7d8:	4602      	mov	r2, r0
 800f7da:	460b      	mov	r3, r1
 800f7dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f7e0:	f7f1 f9a4 	bl	8000b2c <__aeabi_dcmplt>
 800f7e4:	2800      	cmp	r0, #0
 800f7e6:	f43f af30 	beq.w	800f64a <_dtoa_r+0x432>
 800f7ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f7ee:	2b30      	cmp	r3, #48	; 0x30
 800f7f0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800f7f4:	d002      	beq.n	800f7fc <_dtoa_r+0x5e4>
 800f7f6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f7fa:	e04a      	b.n	800f892 <_dtoa_r+0x67a>
 800f7fc:	4615      	mov	r5, r2
 800f7fe:	e7f4      	b.n	800f7ea <_dtoa_r+0x5d2>
 800f800:	4b05      	ldr	r3, [pc, #20]	; (800f818 <_dtoa_r+0x600>)
 800f802:	f7f0 ff21 	bl	8000648 <__aeabi_dmul>
 800f806:	e9cd 0100 	strd	r0, r1, [sp]
 800f80a:	e7bc      	b.n	800f786 <_dtoa_r+0x56e>
 800f80c:	080136f0 	.word	0x080136f0
 800f810:	080136c8 	.word	0x080136c8
 800f814:	3ff00000 	.word	0x3ff00000
 800f818:	40240000 	.word	0x40240000
 800f81c:	401c0000 	.word	0x401c0000
 800f820:	40140000 	.word	0x40140000
 800f824:	3fe00000 	.word	0x3fe00000
 800f828:	e9dd 6700 	ldrd	r6, r7, [sp]
 800f82c:	465d      	mov	r5, fp
 800f82e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f832:	4630      	mov	r0, r6
 800f834:	4639      	mov	r1, r7
 800f836:	f7f1 f831 	bl	800089c <__aeabi_ddiv>
 800f83a:	f7f1 f9b5 	bl	8000ba8 <__aeabi_d2iz>
 800f83e:	4680      	mov	r8, r0
 800f840:	f7f0 fe98 	bl	8000574 <__aeabi_i2d>
 800f844:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f848:	f7f0 fefe 	bl	8000648 <__aeabi_dmul>
 800f84c:	4602      	mov	r2, r0
 800f84e:	460b      	mov	r3, r1
 800f850:	4630      	mov	r0, r6
 800f852:	4639      	mov	r1, r7
 800f854:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800f858:	f7f0 fd3e 	bl	80002d8 <__aeabi_dsub>
 800f85c:	f805 6b01 	strb.w	r6, [r5], #1
 800f860:	eba5 060b 	sub.w	r6, r5, fp
 800f864:	45b1      	cmp	r9, r6
 800f866:	4602      	mov	r2, r0
 800f868:	460b      	mov	r3, r1
 800f86a:	d139      	bne.n	800f8e0 <_dtoa_r+0x6c8>
 800f86c:	f7f0 fd36 	bl	80002dc <__adddf3>
 800f870:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f874:	4606      	mov	r6, r0
 800f876:	460f      	mov	r7, r1
 800f878:	f7f1 f976 	bl	8000b68 <__aeabi_dcmpgt>
 800f87c:	b9c8      	cbnz	r0, 800f8b2 <_dtoa_r+0x69a>
 800f87e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f882:	4630      	mov	r0, r6
 800f884:	4639      	mov	r1, r7
 800f886:	f7f1 f947 	bl	8000b18 <__aeabi_dcmpeq>
 800f88a:	b110      	cbz	r0, 800f892 <_dtoa_r+0x67a>
 800f88c:	f018 0f01 	tst.w	r8, #1
 800f890:	d10f      	bne.n	800f8b2 <_dtoa_r+0x69a>
 800f892:	9904      	ldr	r1, [sp, #16]
 800f894:	4620      	mov	r0, r4
 800f896:	f000 fcaa 	bl	80101ee <_Bfree>
 800f89a:	2300      	movs	r3, #0
 800f89c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800f89e:	702b      	strb	r3, [r5, #0]
 800f8a0:	f10a 0301 	add.w	r3, sl, #1
 800f8a4:	6013      	str	r3, [r2, #0]
 800f8a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f8a8:	2b00      	cmp	r3, #0
 800f8aa:	f000 8241 	beq.w	800fd30 <_dtoa_r+0xb18>
 800f8ae:	601d      	str	r5, [r3, #0]
 800f8b0:	e23e      	b.n	800fd30 <_dtoa_r+0xb18>
 800f8b2:	f8cd a020 	str.w	sl, [sp, #32]
 800f8b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f8ba:	2a39      	cmp	r2, #57	; 0x39
 800f8bc:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800f8c0:	d108      	bne.n	800f8d4 <_dtoa_r+0x6bc>
 800f8c2:	459b      	cmp	fp, r3
 800f8c4:	d10a      	bne.n	800f8dc <_dtoa_r+0x6c4>
 800f8c6:	9b08      	ldr	r3, [sp, #32]
 800f8c8:	3301      	adds	r3, #1
 800f8ca:	9308      	str	r3, [sp, #32]
 800f8cc:	2330      	movs	r3, #48	; 0x30
 800f8ce:	f88b 3000 	strb.w	r3, [fp]
 800f8d2:	465b      	mov	r3, fp
 800f8d4:	781a      	ldrb	r2, [r3, #0]
 800f8d6:	3201      	adds	r2, #1
 800f8d8:	701a      	strb	r2, [r3, #0]
 800f8da:	e78c      	b.n	800f7f6 <_dtoa_r+0x5de>
 800f8dc:	461d      	mov	r5, r3
 800f8de:	e7ea      	b.n	800f8b6 <_dtoa_r+0x69e>
 800f8e0:	2200      	movs	r2, #0
 800f8e2:	4b9b      	ldr	r3, [pc, #620]	; (800fb50 <_dtoa_r+0x938>)
 800f8e4:	f7f0 feb0 	bl	8000648 <__aeabi_dmul>
 800f8e8:	2200      	movs	r2, #0
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	4606      	mov	r6, r0
 800f8ee:	460f      	mov	r7, r1
 800f8f0:	f7f1 f912 	bl	8000b18 <__aeabi_dcmpeq>
 800f8f4:	2800      	cmp	r0, #0
 800f8f6:	d09a      	beq.n	800f82e <_dtoa_r+0x616>
 800f8f8:	e7cb      	b.n	800f892 <_dtoa_r+0x67a>
 800f8fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f8fc:	2a00      	cmp	r2, #0
 800f8fe:	f000 808b 	beq.w	800fa18 <_dtoa_r+0x800>
 800f902:	9a06      	ldr	r2, [sp, #24]
 800f904:	2a01      	cmp	r2, #1
 800f906:	dc6e      	bgt.n	800f9e6 <_dtoa_r+0x7ce>
 800f908:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800f90a:	2a00      	cmp	r2, #0
 800f90c:	d067      	beq.n	800f9de <_dtoa_r+0x7c6>
 800f90e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800f912:	9f07      	ldr	r7, [sp, #28]
 800f914:	9d05      	ldr	r5, [sp, #20]
 800f916:	9a05      	ldr	r2, [sp, #20]
 800f918:	2101      	movs	r1, #1
 800f91a:	441a      	add	r2, r3
 800f91c:	4620      	mov	r0, r4
 800f91e:	9205      	str	r2, [sp, #20]
 800f920:	4498      	add	r8, r3
 800f922:	f000 fd04 	bl	801032e <__i2b>
 800f926:	4606      	mov	r6, r0
 800f928:	2d00      	cmp	r5, #0
 800f92a:	dd0c      	ble.n	800f946 <_dtoa_r+0x72e>
 800f92c:	f1b8 0f00 	cmp.w	r8, #0
 800f930:	dd09      	ble.n	800f946 <_dtoa_r+0x72e>
 800f932:	4545      	cmp	r5, r8
 800f934:	9a05      	ldr	r2, [sp, #20]
 800f936:	462b      	mov	r3, r5
 800f938:	bfa8      	it	ge
 800f93a:	4643      	movge	r3, r8
 800f93c:	1ad2      	subs	r2, r2, r3
 800f93e:	9205      	str	r2, [sp, #20]
 800f940:	1aed      	subs	r5, r5, r3
 800f942:	eba8 0803 	sub.w	r8, r8, r3
 800f946:	9b07      	ldr	r3, [sp, #28]
 800f948:	b1eb      	cbz	r3, 800f986 <_dtoa_r+0x76e>
 800f94a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d067      	beq.n	800fa20 <_dtoa_r+0x808>
 800f950:	b18f      	cbz	r7, 800f976 <_dtoa_r+0x75e>
 800f952:	4631      	mov	r1, r6
 800f954:	463a      	mov	r2, r7
 800f956:	4620      	mov	r0, r4
 800f958:	f000 fd88 	bl	801046c <__pow5mult>
 800f95c:	9a04      	ldr	r2, [sp, #16]
 800f95e:	4601      	mov	r1, r0
 800f960:	4606      	mov	r6, r0
 800f962:	4620      	mov	r0, r4
 800f964:	f000 fcec 	bl	8010340 <__multiply>
 800f968:	9904      	ldr	r1, [sp, #16]
 800f96a:	9008      	str	r0, [sp, #32]
 800f96c:	4620      	mov	r0, r4
 800f96e:	f000 fc3e 	bl	80101ee <_Bfree>
 800f972:	9b08      	ldr	r3, [sp, #32]
 800f974:	9304      	str	r3, [sp, #16]
 800f976:	9b07      	ldr	r3, [sp, #28]
 800f978:	1bda      	subs	r2, r3, r7
 800f97a:	d004      	beq.n	800f986 <_dtoa_r+0x76e>
 800f97c:	9904      	ldr	r1, [sp, #16]
 800f97e:	4620      	mov	r0, r4
 800f980:	f000 fd74 	bl	801046c <__pow5mult>
 800f984:	9004      	str	r0, [sp, #16]
 800f986:	2101      	movs	r1, #1
 800f988:	4620      	mov	r0, r4
 800f98a:	f000 fcd0 	bl	801032e <__i2b>
 800f98e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f990:	4607      	mov	r7, r0
 800f992:	2b00      	cmp	r3, #0
 800f994:	f000 81d0 	beq.w	800fd38 <_dtoa_r+0xb20>
 800f998:	461a      	mov	r2, r3
 800f99a:	4601      	mov	r1, r0
 800f99c:	4620      	mov	r0, r4
 800f99e:	f000 fd65 	bl	801046c <__pow5mult>
 800f9a2:	9b06      	ldr	r3, [sp, #24]
 800f9a4:	2b01      	cmp	r3, #1
 800f9a6:	4607      	mov	r7, r0
 800f9a8:	dc40      	bgt.n	800fa2c <_dtoa_r+0x814>
 800f9aa:	9b00      	ldr	r3, [sp, #0]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d139      	bne.n	800fa24 <_dtoa_r+0x80c>
 800f9b0:	9b01      	ldr	r3, [sp, #4]
 800f9b2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	d136      	bne.n	800fa28 <_dtoa_r+0x810>
 800f9ba:	9b01      	ldr	r3, [sp, #4]
 800f9bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800f9c0:	0d1b      	lsrs	r3, r3, #20
 800f9c2:	051b      	lsls	r3, r3, #20
 800f9c4:	b12b      	cbz	r3, 800f9d2 <_dtoa_r+0x7ba>
 800f9c6:	9b05      	ldr	r3, [sp, #20]
 800f9c8:	3301      	adds	r3, #1
 800f9ca:	9305      	str	r3, [sp, #20]
 800f9cc:	f108 0801 	add.w	r8, r8, #1
 800f9d0:	2301      	movs	r3, #1
 800f9d2:	9307      	str	r3, [sp, #28]
 800f9d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f9d6:	2b00      	cmp	r3, #0
 800f9d8:	d12a      	bne.n	800fa30 <_dtoa_r+0x818>
 800f9da:	2001      	movs	r0, #1
 800f9dc:	e030      	b.n	800fa40 <_dtoa_r+0x828>
 800f9de:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f9e0:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800f9e4:	e795      	b.n	800f912 <_dtoa_r+0x6fa>
 800f9e6:	9b07      	ldr	r3, [sp, #28]
 800f9e8:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800f9ec:	42bb      	cmp	r3, r7
 800f9ee:	bfbf      	itttt	lt
 800f9f0:	9b07      	ldrlt	r3, [sp, #28]
 800f9f2:	9707      	strlt	r7, [sp, #28]
 800f9f4:	1afa      	sublt	r2, r7, r3
 800f9f6:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800f9f8:	bfbb      	ittet	lt
 800f9fa:	189b      	addlt	r3, r3, r2
 800f9fc:	930e      	strlt	r3, [sp, #56]	; 0x38
 800f9fe:	1bdf      	subge	r7, r3, r7
 800fa00:	2700      	movlt	r7, #0
 800fa02:	f1b9 0f00 	cmp.w	r9, #0
 800fa06:	bfb5      	itete	lt
 800fa08:	9b05      	ldrlt	r3, [sp, #20]
 800fa0a:	9d05      	ldrge	r5, [sp, #20]
 800fa0c:	eba3 0509 	sublt.w	r5, r3, r9
 800fa10:	464b      	movge	r3, r9
 800fa12:	bfb8      	it	lt
 800fa14:	2300      	movlt	r3, #0
 800fa16:	e77e      	b.n	800f916 <_dtoa_r+0x6fe>
 800fa18:	9f07      	ldr	r7, [sp, #28]
 800fa1a:	9d05      	ldr	r5, [sp, #20]
 800fa1c:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800fa1e:	e783      	b.n	800f928 <_dtoa_r+0x710>
 800fa20:	9a07      	ldr	r2, [sp, #28]
 800fa22:	e7ab      	b.n	800f97c <_dtoa_r+0x764>
 800fa24:	2300      	movs	r3, #0
 800fa26:	e7d4      	b.n	800f9d2 <_dtoa_r+0x7ba>
 800fa28:	9b00      	ldr	r3, [sp, #0]
 800fa2a:	e7d2      	b.n	800f9d2 <_dtoa_r+0x7ba>
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	9307      	str	r3, [sp, #28]
 800fa30:	693b      	ldr	r3, [r7, #16]
 800fa32:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800fa36:	6918      	ldr	r0, [r3, #16]
 800fa38:	f000 fc2b 	bl	8010292 <__hi0bits>
 800fa3c:	f1c0 0020 	rsb	r0, r0, #32
 800fa40:	4440      	add	r0, r8
 800fa42:	f010 001f 	ands.w	r0, r0, #31
 800fa46:	d047      	beq.n	800fad8 <_dtoa_r+0x8c0>
 800fa48:	f1c0 0320 	rsb	r3, r0, #32
 800fa4c:	2b04      	cmp	r3, #4
 800fa4e:	dd3b      	ble.n	800fac8 <_dtoa_r+0x8b0>
 800fa50:	9b05      	ldr	r3, [sp, #20]
 800fa52:	f1c0 001c 	rsb	r0, r0, #28
 800fa56:	4403      	add	r3, r0
 800fa58:	9305      	str	r3, [sp, #20]
 800fa5a:	4405      	add	r5, r0
 800fa5c:	4480      	add	r8, r0
 800fa5e:	9b05      	ldr	r3, [sp, #20]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	dd05      	ble.n	800fa70 <_dtoa_r+0x858>
 800fa64:	461a      	mov	r2, r3
 800fa66:	9904      	ldr	r1, [sp, #16]
 800fa68:	4620      	mov	r0, r4
 800fa6a:	f000 fd4d 	bl	8010508 <__lshift>
 800fa6e:	9004      	str	r0, [sp, #16]
 800fa70:	f1b8 0f00 	cmp.w	r8, #0
 800fa74:	dd05      	ble.n	800fa82 <_dtoa_r+0x86a>
 800fa76:	4639      	mov	r1, r7
 800fa78:	4642      	mov	r2, r8
 800fa7a:	4620      	mov	r0, r4
 800fa7c:	f000 fd44 	bl	8010508 <__lshift>
 800fa80:	4607      	mov	r7, r0
 800fa82:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800fa84:	b353      	cbz	r3, 800fadc <_dtoa_r+0x8c4>
 800fa86:	4639      	mov	r1, r7
 800fa88:	9804      	ldr	r0, [sp, #16]
 800fa8a:	f000 fd91 	bl	80105b0 <__mcmp>
 800fa8e:	2800      	cmp	r0, #0
 800fa90:	da24      	bge.n	800fadc <_dtoa_r+0x8c4>
 800fa92:	2300      	movs	r3, #0
 800fa94:	220a      	movs	r2, #10
 800fa96:	9904      	ldr	r1, [sp, #16]
 800fa98:	4620      	mov	r0, r4
 800fa9a:	f000 fbbf 	bl	801021c <__multadd>
 800fa9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800faa0:	9004      	str	r0, [sp, #16]
 800faa2:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	f000 814d 	beq.w	800fd46 <_dtoa_r+0xb2e>
 800faac:	2300      	movs	r3, #0
 800faae:	4631      	mov	r1, r6
 800fab0:	220a      	movs	r2, #10
 800fab2:	4620      	mov	r0, r4
 800fab4:	f000 fbb2 	bl	801021c <__multadd>
 800fab8:	9b02      	ldr	r3, [sp, #8]
 800faba:	2b00      	cmp	r3, #0
 800fabc:	4606      	mov	r6, r0
 800fabe:	dc4f      	bgt.n	800fb60 <_dtoa_r+0x948>
 800fac0:	9b06      	ldr	r3, [sp, #24]
 800fac2:	2b02      	cmp	r3, #2
 800fac4:	dd4c      	ble.n	800fb60 <_dtoa_r+0x948>
 800fac6:	e011      	b.n	800faec <_dtoa_r+0x8d4>
 800fac8:	d0c9      	beq.n	800fa5e <_dtoa_r+0x846>
 800faca:	9a05      	ldr	r2, [sp, #20]
 800facc:	331c      	adds	r3, #28
 800face:	441a      	add	r2, r3
 800fad0:	9205      	str	r2, [sp, #20]
 800fad2:	441d      	add	r5, r3
 800fad4:	4498      	add	r8, r3
 800fad6:	e7c2      	b.n	800fa5e <_dtoa_r+0x846>
 800fad8:	4603      	mov	r3, r0
 800fada:	e7f6      	b.n	800faca <_dtoa_r+0x8b2>
 800fadc:	f1b9 0f00 	cmp.w	r9, #0
 800fae0:	dc38      	bgt.n	800fb54 <_dtoa_r+0x93c>
 800fae2:	9b06      	ldr	r3, [sp, #24]
 800fae4:	2b02      	cmp	r3, #2
 800fae6:	dd35      	ble.n	800fb54 <_dtoa_r+0x93c>
 800fae8:	f8cd 9008 	str.w	r9, [sp, #8]
 800faec:	9b02      	ldr	r3, [sp, #8]
 800faee:	b963      	cbnz	r3, 800fb0a <_dtoa_r+0x8f2>
 800faf0:	4639      	mov	r1, r7
 800faf2:	2205      	movs	r2, #5
 800faf4:	4620      	mov	r0, r4
 800faf6:	f000 fb91 	bl	801021c <__multadd>
 800fafa:	4601      	mov	r1, r0
 800fafc:	4607      	mov	r7, r0
 800fafe:	9804      	ldr	r0, [sp, #16]
 800fb00:	f000 fd56 	bl	80105b0 <__mcmp>
 800fb04:	2800      	cmp	r0, #0
 800fb06:	f73f adcc 	bgt.w	800f6a2 <_dtoa_r+0x48a>
 800fb0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fb0c:	465d      	mov	r5, fp
 800fb0e:	ea6f 0a03 	mvn.w	sl, r3
 800fb12:	f04f 0900 	mov.w	r9, #0
 800fb16:	4639      	mov	r1, r7
 800fb18:	4620      	mov	r0, r4
 800fb1a:	f000 fb68 	bl	80101ee <_Bfree>
 800fb1e:	2e00      	cmp	r6, #0
 800fb20:	f43f aeb7 	beq.w	800f892 <_dtoa_r+0x67a>
 800fb24:	f1b9 0f00 	cmp.w	r9, #0
 800fb28:	d005      	beq.n	800fb36 <_dtoa_r+0x91e>
 800fb2a:	45b1      	cmp	r9, r6
 800fb2c:	d003      	beq.n	800fb36 <_dtoa_r+0x91e>
 800fb2e:	4649      	mov	r1, r9
 800fb30:	4620      	mov	r0, r4
 800fb32:	f000 fb5c 	bl	80101ee <_Bfree>
 800fb36:	4631      	mov	r1, r6
 800fb38:	4620      	mov	r0, r4
 800fb3a:	f000 fb58 	bl	80101ee <_Bfree>
 800fb3e:	e6a8      	b.n	800f892 <_dtoa_r+0x67a>
 800fb40:	2700      	movs	r7, #0
 800fb42:	463e      	mov	r6, r7
 800fb44:	e7e1      	b.n	800fb0a <_dtoa_r+0x8f2>
 800fb46:	f8dd a020 	ldr.w	sl, [sp, #32]
 800fb4a:	463e      	mov	r6, r7
 800fb4c:	e5a9      	b.n	800f6a2 <_dtoa_r+0x48a>
 800fb4e:	bf00      	nop
 800fb50:	40240000 	.word	0x40240000
 800fb54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fb56:	f8cd 9008 	str.w	r9, [sp, #8]
 800fb5a:	2b00      	cmp	r3, #0
 800fb5c:	f000 80fa 	beq.w	800fd54 <_dtoa_r+0xb3c>
 800fb60:	2d00      	cmp	r5, #0
 800fb62:	dd05      	ble.n	800fb70 <_dtoa_r+0x958>
 800fb64:	4631      	mov	r1, r6
 800fb66:	462a      	mov	r2, r5
 800fb68:	4620      	mov	r0, r4
 800fb6a:	f000 fccd 	bl	8010508 <__lshift>
 800fb6e:	4606      	mov	r6, r0
 800fb70:	9b07      	ldr	r3, [sp, #28]
 800fb72:	2b00      	cmp	r3, #0
 800fb74:	d04c      	beq.n	800fc10 <_dtoa_r+0x9f8>
 800fb76:	6871      	ldr	r1, [r6, #4]
 800fb78:	4620      	mov	r0, r4
 800fb7a:	f000 fb04 	bl	8010186 <_Balloc>
 800fb7e:	6932      	ldr	r2, [r6, #16]
 800fb80:	3202      	adds	r2, #2
 800fb82:	4605      	mov	r5, r0
 800fb84:	0092      	lsls	r2, r2, #2
 800fb86:	f106 010c 	add.w	r1, r6, #12
 800fb8a:	300c      	adds	r0, #12
 800fb8c:	f000 faf0 	bl	8010170 <memcpy>
 800fb90:	2201      	movs	r2, #1
 800fb92:	4629      	mov	r1, r5
 800fb94:	4620      	mov	r0, r4
 800fb96:	f000 fcb7 	bl	8010508 <__lshift>
 800fb9a:	9b00      	ldr	r3, [sp, #0]
 800fb9c:	f8cd b014 	str.w	fp, [sp, #20]
 800fba0:	f003 0301 	and.w	r3, r3, #1
 800fba4:	46b1      	mov	r9, r6
 800fba6:	9307      	str	r3, [sp, #28]
 800fba8:	4606      	mov	r6, r0
 800fbaa:	4639      	mov	r1, r7
 800fbac:	9804      	ldr	r0, [sp, #16]
 800fbae:	f7ff faa5 	bl	800f0fc <quorem>
 800fbb2:	4649      	mov	r1, r9
 800fbb4:	4605      	mov	r5, r0
 800fbb6:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800fbba:	9804      	ldr	r0, [sp, #16]
 800fbbc:	f000 fcf8 	bl	80105b0 <__mcmp>
 800fbc0:	4632      	mov	r2, r6
 800fbc2:	9000      	str	r0, [sp, #0]
 800fbc4:	4639      	mov	r1, r7
 800fbc6:	4620      	mov	r0, r4
 800fbc8:	f000 fd0c 	bl	80105e4 <__mdiff>
 800fbcc:	68c3      	ldr	r3, [r0, #12]
 800fbce:	4602      	mov	r2, r0
 800fbd0:	bb03      	cbnz	r3, 800fc14 <_dtoa_r+0x9fc>
 800fbd2:	4601      	mov	r1, r0
 800fbd4:	9008      	str	r0, [sp, #32]
 800fbd6:	9804      	ldr	r0, [sp, #16]
 800fbd8:	f000 fcea 	bl	80105b0 <__mcmp>
 800fbdc:	9a08      	ldr	r2, [sp, #32]
 800fbde:	4603      	mov	r3, r0
 800fbe0:	4611      	mov	r1, r2
 800fbe2:	4620      	mov	r0, r4
 800fbe4:	9308      	str	r3, [sp, #32]
 800fbe6:	f000 fb02 	bl	80101ee <_Bfree>
 800fbea:	9b08      	ldr	r3, [sp, #32]
 800fbec:	b9a3      	cbnz	r3, 800fc18 <_dtoa_r+0xa00>
 800fbee:	9a06      	ldr	r2, [sp, #24]
 800fbf0:	b992      	cbnz	r2, 800fc18 <_dtoa_r+0xa00>
 800fbf2:	9a07      	ldr	r2, [sp, #28]
 800fbf4:	b982      	cbnz	r2, 800fc18 <_dtoa_r+0xa00>
 800fbf6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fbfa:	d029      	beq.n	800fc50 <_dtoa_r+0xa38>
 800fbfc:	9b00      	ldr	r3, [sp, #0]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	dd01      	ble.n	800fc06 <_dtoa_r+0x9ee>
 800fc02:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800fc06:	9b05      	ldr	r3, [sp, #20]
 800fc08:	1c5d      	adds	r5, r3, #1
 800fc0a:	f883 8000 	strb.w	r8, [r3]
 800fc0e:	e782      	b.n	800fb16 <_dtoa_r+0x8fe>
 800fc10:	4630      	mov	r0, r6
 800fc12:	e7c2      	b.n	800fb9a <_dtoa_r+0x982>
 800fc14:	2301      	movs	r3, #1
 800fc16:	e7e3      	b.n	800fbe0 <_dtoa_r+0x9c8>
 800fc18:	9a00      	ldr	r2, [sp, #0]
 800fc1a:	2a00      	cmp	r2, #0
 800fc1c:	db04      	blt.n	800fc28 <_dtoa_r+0xa10>
 800fc1e:	d125      	bne.n	800fc6c <_dtoa_r+0xa54>
 800fc20:	9a06      	ldr	r2, [sp, #24]
 800fc22:	bb1a      	cbnz	r2, 800fc6c <_dtoa_r+0xa54>
 800fc24:	9a07      	ldr	r2, [sp, #28]
 800fc26:	bb0a      	cbnz	r2, 800fc6c <_dtoa_r+0xa54>
 800fc28:	2b00      	cmp	r3, #0
 800fc2a:	ddec      	ble.n	800fc06 <_dtoa_r+0x9ee>
 800fc2c:	2201      	movs	r2, #1
 800fc2e:	9904      	ldr	r1, [sp, #16]
 800fc30:	4620      	mov	r0, r4
 800fc32:	f000 fc69 	bl	8010508 <__lshift>
 800fc36:	4639      	mov	r1, r7
 800fc38:	9004      	str	r0, [sp, #16]
 800fc3a:	f000 fcb9 	bl	80105b0 <__mcmp>
 800fc3e:	2800      	cmp	r0, #0
 800fc40:	dc03      	bgt.n	800fc4a <_dtoa_r+0xa32>
 800fc42:	d1e0      	bne.n	800fc06 <_dtoa_r+0x9ee>
 800fc44:	f018 0f01 	tst.w	r8, #1
 800fc48:	d0dd      	beq.n	800fc06 <_dtoa_r+0x9ee>
 800fc4a:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fc4e:	d1d8      	bne.n	800fc02 <_dtoa_r+0x9ea>
 800fc50:	9b05      	ldr	r3, [sp, #20]
 800fc52:	9a05      	ldr	r2, [sp, #20]
 800fc54:	1c5d      	adds	r5, r3, #1
 800fc56:	2339      	movs	r3, #57	; 0x39
 800fc58:	7013      	strb	r3, [r2, #0]
 800fc5a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fc5e:	2b39      	cmp	r3, #57	; 0x39
 800fc60:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800fc64:	d04f      	beq.n	800fd06 <_dtoa_r+0xaee>
 800fc66:	3301      	adds	r3, #1
 800fc68:	7013      	strb	r3, [r2, #0]
 800fc6a:	e754      	b.n	800fb16 <_dtoa_r+0x8fe>
 800fc6c:	9a05      	ldr	r2, [sp, #20]
 800fc6e:	2b00      	cmp	r3, #0
 800fc70:	f102 0501 	add.w	r5, r2, #1
 800fc74:	dd06      	ble.n	800fc84 <_dtoa_r+0xa6c>
 800fc76:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800fc7a:	d0e9      	beq.n	800fc50 <_dtoa_r+0xa38>
 800fc7c:	f108 0801 	add.w	r8, r8, #1
 800fc80:	9b05      	ldr	r3, [sp, #20]
 800fc82:	e7c2      	b.n	800fc0a <_dtoa_r+0x9f2>
 800fc84:	9a02      	ldr	r2, [sp, #8]
 800fc86:	f805 8c01 	strb.w	r8, [r5, #-1]
 800fc8a:	eba5 030b 	sub.w	r3, r5, fp
 800fc8e:	4293      	cmp	r3, r2
 800fc90:	d021      	beq.n	800fcd6 <_dtoa_r+0xabe>
 800fc92:	2300      	movs	r3, #0
 800fc94:	220a      	movs	r2, #10
 800fc96:	9904      	ldr	r1, [sp, #16]
 800fc98:	4620      	mov	r0, r4
 800fc9a:	f000 fabf 	bl	801021c <__multadd>
 800fc9e:	45b1      	cmp	r9, r6
 800fca0:	9004      	str	r0, [sp, #16]
 800fca2:	f04f 0300 	mov.w	r3, #0
 800fca6:	f04f 020a 	mov.w	r2, #10
 800fcaa:	4649      	mov	r1, r9
 800fcac:	4620      	mov	r0, r4
 800fcae:	d105      	bne.n	800fcbc <_dtoa_r+0xaa4>
 800fcb0:	f000 fab4 	bl	801021c <__multadd>
 800fcb4:	4681      	mov	r9, r0
 800fcb6:	4606      	mov	r6, r0
 800fcb8:	9505      	str	r5, [sp, #20]
 800fcba:	e776      	b.n	800fbaa <_dtoa_r+0x992>
 800fcbc:	f000 faae 	bl	801021c <__multadd>
 800fcc0:	4631      	mov	r1, r6
 800fcc2:	4681      	mov	r9, r0
 800fcc4:	2300      	movs	r3, #0
 800fcc6:	220a      	movs	r2, #10
 800fcc8:	4620      	mov	r0, r4
 800fcca:	f000 faa7 	bl	801021c <__multadd>
 800fcce:	4606      	mov	r6, r0
 800fcd0:	e7f2      	b.n	800fcb8 <_dtoa_r+0xaa0>
 800fcd2:	f04f 0900 	mov.w	r9, #0
 800fcd6:	2201      	movs	r2, #1
 800fcd8:	9904      	ldr	r1, [sp, #16]
 800fcda:	4620      	mov	r0, r4
 800fcdc:	f000 fc14 	bl	8010508 <__lshift>
 800fce0:	4639      	mov	r1, r7
 800fce2:	9004      	str	r0, [sp, #16]
 800fce4:	f000 fc64 	bl	80105b0 <__mcmp>
 800fce8:	2800      	cmp	r0, #0
 800fcea:	dcb6      	bgt.n	800fc5a <_dtoa_r+0xa42>
 800fcec:	d102      	bne.n	800fcf4 <_dtoa_r+0xadc>
 800fcee:	f018 0f01 	tst.w	r8, #1
 800fcf2:	d1b2      	bne.n	800fc5a <_dtoa_r+0xa42>
 800fcf4:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800fcf8:	2b30      	cmp	r3, #48	; 0x30
 800fcfa:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800fcfe:	f47f af0a 	bne.w	800fb16 <_dtoa_r+0x8fe>
 800fd02:	4615      	mov	r5, r2
 800fd04:	e7f6      	b.n	800fcf4 <_dtoa_r+0xadc>
 800fd06:	4593      	cmp	fp, r2
 800fd08:	d105      	bne.n	800fd16 <_dtoa_r+0xafe>
 800fd0a:	2331      	movs	r3, #49	; 0x31
 800fd0c:	f10a 0a01 	add.w	sl, sl, #1
 800fd10:	f88b 3000 	strb.w	r3, [fp]
 800fd14:	e6ff      	b.n	800fb16 <_dtoa_r+0x8fe>
 800fd16:	4615      	mov	r5, r2
 800fd18:	e79f      	b.n	800fc5a <_dtoa_r+0xa42>
 800fd1a:	f8df b064 	ldr.w	fp, [pc, #100]	; 800fd80 <_dtoa_r+0xb68>
 800fd1e:	e007      	b.n	800fd30 <_dtoa_r+0xb18>
 800fd20:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800fd22:	f8df b060 	ldr.w	fp, [pc, #96]	; 800fd84 <_dtoa_r+0xb6c>
 800fd26:	b11b      	cbz	r3, 800fd30 <_dtoa_r+0xb18>
 800fd28:	f10b 0308 	add.w	r3, fp, #8
 800fd2c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800fd2e:	6013      	str	r3, [r2, #0]
 800fd30:	4658      	mov	r0, fp
 800fd32:	b017      	add	sp, #92	; 0x5c
 800fd34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fd38:	9b06      	ldr	r3, [sp, #24]
 800fd3a:	2b01      	cmp	r3, #1
 800fd3c:	f77f ae35 	ble.w	800f9aa <_dtoa_r+0x792>
 800fd40:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800fd42:	9307      	str	r3, [sp, #28]
 800fd44:	e649      	b.n	800f9da <_dtoa_r+0x7c2>
 800fd46:	9b02      	ldr	r3, [sp, #8]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	dc03      	bgt.n	800fd54 <_dtoa_r+0xb3c>
 800fd4c:	9b06      	ldr	r3, [sp, #24]
 800fd4e:	2b02      	cmp	r3, #2
 800fd50:	f73f aecc 	bgt.w	800faec <_dtoa_r+0x8d4>
 800fd54:	465d      	mov	r5, fp
 800fd56:	4639      	mov	r1, r7
 800fd58:	9804      	ldr	r0, [sp, #16]
 800fd5a:	f7ff f9cf 	bl	800f0fc <quorem>
 800fd5e:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800fd62:	f805 8b01 	strb.w	r8, [r5], #1
 800fd66:	9a02      	ldr	r2, [sp, #8]
 800fd68:	eba5 030b 	sub.w	r3, r5, fp
 800fd6c:	429a      	cmp	r2, r3
 800fd6e:	ddb0      	ble.n	800fcd2 <_dtoa_r+0xaba>
 800fd70:	2300      	movs	r3, #0
 800fd72:	220a      	movs	r2, #10
 800fd74:	9904      	ldr	r1, [sp, #16]
 800fd76:	4620      	mov	r0, r4
 800fd78:	f000 fa50 	bl	801021c <__multadd>
 800fd7c:	9004      	str	r0, [sp, #16]
 800fd7e:	e7ea      	b.n	800fd56 <_dtoa_r+0xb3e>
 800fd80:	08013634 	.word	0x08013634
 800fd84:	08013658 	.word	0x08013658

0800fd88 <__sflush_r>:
 800fd88:	898a      	ldrh	r2, [r1, #12]
 800fd8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd8e:	4605      	mov	r5, r0
 800fd90:	0710      	lsls	r0, r2, #28
 800fd92:	460c      	mov	r4, r1
 800fd94:	d458      	bmi.n	800fe48 <__sflush_r+0xc0>
 800fd96:	684b      	ldr	r3, [r1, #4]
 800fd98:	2b00      	cmp	r3, #0
 800fd9a:	dc05      	bgt.n	800fda8 <__sflush_r+0x20>
 800fd9c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800fd9e:	2b00      	cmp	r3, #0
 800fda0:	dc02      	bgt.n	800fda8 <__sflush_r+0x20>
 800fda2:	2000      	movs	r0, #0
 800fda4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fda8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fdaa:	2e00      	cmp	r6, #0
 800fdac:	d0f9      	beq.n	800fda2 <__sflush_r+0x1a>
 800fdae:	2300      	movs	r3, #0
 800fdb0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800fdb4:	682f      	ldr	r7, [r5, #0]
 800fdb6:	6a21      	ldr	r1, [r4, #32]
 800fdb8:	602b      	str	r3, [r5, #0]
 800fdba:	d032      	beq.n	800fe22 <__sflush_r+0x9a>
 800fdbc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800fdbe:	89a3      	ldrh	r3, [r4, #12]
 800fdc0:	075a      	lsls	r2, r3, #29
 800fdc2:	d505      	bpl.n	800fdd0 <__sflush_r+0x48>
 800fdc4:	6863      	ldr	r3, [r4, #4]
 800fdc6:	1ac0      	subs	r0, r0, r3
 800fdc8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800fdca:	b10b      	cbz	r3, 800fdd0 <__sflush_r+0x48>
 800fdcc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800fdce:	1ac0      	subs	r0, r0, r3
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	4602      	mov	r2, r0
 800fdd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800fdd6:	6a21      	ldr	r1, [r4, #32]
 800fdd8:	4628      	mov	r0, r5
 800fdda:	47b0      	blx	r6
 800fddc:	1c43      	adds	r3, r0, #1
 800fdde:	89a3      	ldrh	r3, [r4, #12]
 800fde0:	d106      	bne.n	800fdf0 <__sflush_r+0x68>
 800fde2:	6829      	ldr	r1, [r5, #0]
 800fde4:	291d      	cmp	r1, #29
 800fde6:	d848      	bhi.n	800fe7a <__sflush_r+0xf2>
 800fde8:	4a29      	ldr	r2, [pc, #164]	; (800fe90 <__sflush_r+0x108>)
 800fdea:	40ca      	lsrs	r2, r1
 800fdec:	07d6      	lsls	r6, r2, #31
 800fdee:	d544      	bpl.n	800fe7a <__sflush_r+0xf2>
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	6062      	str	r2, [r4, #4]
 800fdf4:	04d9      	lsls	r1, r3, #19
 800fdf6:	6922      	ldr	r2, [r4, #16]
 800fdf8:	6022      	str	r2, [r4, #0]
 800fdfa:	d504      	bpl.n	800fe06 <__sflush_r+0x7e>
 800fdfc:	1c42      	adds	r2, r0, #1
 800fdfe:	d101      	bne.n	800fe04 <__sflush_r+0x7c>
 800fe00:	682b      	ldr	r3, [r5, #0]
 800fe02:	b903      	cbnz	r3, 800fe06 <__sflush_r+0x7e>
 800fe04:	6560      	str	r0, [r4, #84]	; 0x54
 800fe06:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fe08:	602f      	str	r7, [r5, #0]
 800fe0a:	2900      	cmp	r1, #0
 800fe0c:	d0c9      	beq.n	800fda2 <__sflush_r+0x1a>
 800fe0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fe12:	4299      	cmp	r1, r3
 800fe14:	d002      	beq.n	800fe1c <__sflush_r+0x94>
 800fe16:	4628      	mov	r0, r5
 800fe18:	f000 fc9e 	bl	8010758 <_free_r>
 800fe1c:	2000      	movs	r0, #0
 800fe1e:	6360      	str	r0, [r4, #52]	; 0x34
 800fe20:	e7c0      	b.n	800fda4 <__sflush_r+0x1c>
 800fe22:	2301      	movs	r3, #1
 800fe24:	4628      	mov	r0, r5
 800fe26:	47b0      	blx	r6
 800fe28:	1c41      	adds	r1, r0, #1
 800fe2a:	d1c8      	bne.n	800fdbe <__sflush_r+0x36>
 800fe2c:	682b      	ldr	r3, [r5, #0]
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d0c5      	beq.n	800fdbe <__sflush_r+0x36>
 800fe32:	2b1d      	cmp	r3, #29
 800fe34:	d001      	beq.n	800fe3a <__sflush_r+0xb2>
 800fe36:	2b16      	cmp	r3, #22
 800fe38:	d101      	bne.n	800fe3e <__sflush_r+0xb6>
 800fe3a:	602f      	str	r7, [r5, #0]
 800fe3c:	e7b1      	b.n	800fda2 <__sflush_r+0x1a>
 800fe3e:	89a3      	ldrh	r3, [r4, #12]
 800fe40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe44:	81a3      	strh	r3, [r4, #12]
 800fe46:	e7ad      	b.n	800fda4 <__sflush_r+0x1c>
 800fe48:	690f      	ldr	r7, [r1, #16]
 800fe4a:	2f00      	cmp	r7, #0
 800fe4c:	d0a9      	beq.n	800fda2 <__sflush_r+0x1a>
 800fe4e:	0793      	lsls	r3, r2, #30
 800fe50:	680e      	ldr	r6, [r1, #0]
 800fe52:	bf08      	it	eq
 800fe54:	694b      	ldreq	r3, [r1, #20]
 800fe56:	600f      	str	r7, [r1, #0]
 800fe58:	bf18      	it	ne
 800fe5a:	2300      	movne	r3, #0
 800fe5c:	eba6 0807 	sub.w	r8, r6, r7
 800fe60:	608b      	str	r3, [r1, #8]
 800fe62:	f1b8 0f00 	cmp.w	r8, #0
 800fe66:	dd9c      	ble.n	800fda2 <__sflush_r+0x1a>
 800fe68:	4643      	mov	r3, r8
 800fe6a:	463a      	mov	r2, r7
 800fe6c:	6a21      	ldr	r1, [r4, #32]
 800fe6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800fe70:	4628      	mov	r0, r5
 800fe72:	47b0      	blx	r6
 800fe74:	2800      	cmp	r0, #0
 800fe76:	dc06      	bgt.n	800fe86 <__sflush_r+0xfe>
 800fe78:	89a3      	ldrh	r3, [r4, #12]
 800fe7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe7e:	81a3      	strh	r3, [r4, #12]
 800fe80:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe84:	e78e      	b.n	800fda4 <__sflush_r+0x1c>
 800fe86:	4407      	add	r7, r0
 800fe88:	eba8 0800 	sub.w	r8, r8, r0
 800fe8c:	e7e9      	b.n	800fe62 <__sflush_r+0xda>
 800fe8e:	bf00      	nop
 800fe90:	20400001 	.word	0x20400001

0800fe94 <_fflush_r>:
 800fe94:	b538      	push	{r3, r4, r5, lr}
 800fe96:	690b      	ldr	r3, [r1, #16]
 800fe98:	4605      	mov	r5, r0
 800fe9a:	460c      	mov	r4, r1
 800fe9c:	b1db      	cbz	r3, 800fed6 <_fflush_r+0x42>
 800fe9e:	b118      	cbz	r0, 800fea8 <_fflush_r+0x14>
 800fea0:	6983      	ldr	r3, [r0, #24]
 800fea2:	b90b      	cbnz	r3, 800fea8 <_fflush_r+0x14>
 800fea4:	f000 f860 	bl	800ff68 <__sinit>
 800fea8:	4b0c      	ldr	r3, [pc, #48]	; (800fedc <_fflush_r+0x48>)
 800feaa:	429c      	cmp	r4, r3
 800feac:	d109      	bne.n	800fec2 <_fflush_r+0x2e>
 800feae:	686c      	ldr	r4, [r5, #4]
 800feb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800feb4:	b17b      	cbz	r3, 800fed6 <_fflush_r+0x42>
 800feb6:	4621      	mov	r1, r4
 800feb8:	4628      	mov	r0, r5
 800feba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800febe:	f7ff bf63 	b.w	800fd88 <__sflush_r>
 800fec2:	4b07      	ldr	r3, [pc, #28]	; (800fee0 <_fflush_r+0x4c>)
 800fec4:	429c      	cmp	r4, r3
 800fec6:	d101      	bne.n	800fecc <_fflush_r+0x38>
 800fec8:	68ac      	ldr	r4, [r5, #8]
 800feca:	e7f1      	b.n	800feb0 <_fflush_r+0x1c>
 800fecc:	4b05      	ldr	r3, [pc, #20]	; (800fee4 <_fflush_r+0x50>)
 800fece:	429c      	cmp	r4, r3
 800fed0:	bf08      	it	eq
 800fed2:	68ec      	ldreq	r4, [r5, #12]
 800fed4:	e7ec      	b.n	800feb0 <_fflush_r+0x1c>
 800fed6:	2000      	movs	r0, #0
 800fed8:	bd38      	pop	{r3, r4, r5, pc}
 800feda:	bf00      	nop
 800fedc:	08013688 	.word	0x08013688
 800fee0:	080136a8 	.word	0x080136a8
 800fee4:	08013668 	.word	0x08013668

0800fee8 <std>:
 800fee8:	2300      	movs	r3, #0
 800feea:	b510      	push	{r4, lr}
 800feec:	4604      	mov	r4, r0
 800feee:	e9c0 3300 	strd	r3, r3, [r0]
 800fef2:	6083      	str	r3, [r0, #8]
 800fef4:	8181      	strh	r1, [r0, #12]
 800fef6:	6643      	str	r3, [r0, #100]	; 0x64
 800fef8:	81c2      	strh	r2, [r0, #14]
 800fefa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800fefe:	6183      	str	r3, [r0, #24]
 800ff00:	4619      	mov	r1, r3
 800ff02:	2208      	movs	r2, #8
 800ff04:	305c      	adds	r0, #92	; 0x5c
 800ff06:	f7fe fb2d 	bl	800e564 <memset>
 800ff0a:	4b05      	ldr	r3, [pc, #20]	; (800ff20 <std+0x38>)
 800ff0c:	6263      	str	r3, [r4, #36]	; 0x24
 800ff0e:	4b05      	ldr	r3, [pc, #20]	; (800ff24 <std+0x3c>)
 800ff10:	62a3      	str	r3, [r4, #40]	; 0x28
 800ff12:	4b05      	ldr	r3, [pc, #20]	; (800ff28 <std+0x40>)
 800ff14:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ff16:	4b05      	ldr	r3, [pc, #20]	; (800ff2c <std+0x44>)
 800ff18:	6224      	str	r4, [r4, #32]
 800ff1a:	6323      	str	r3, [r4, #48]	; 0x30
 800ff1c:	bd10      	pop	{r4, pc}
 800ff1e:	bf00      	nop
 800ff20:	08010b6d 	.word	0x08010b6d
 800ff24:	08010b8f 	.word	0x08010b8f
 800ff28:	08010bc7 	.word	0x08010bc7
 800ff2c:	08010beb 	.word	0x08010beb

0800ff30 <_cleanup_r>:
 800ff30:	4901      	ldr	r1, [pc, #4]	; (800ff38 <_cleanup_r+0x8>)
 800ff32:	f000 b885 	b.w	8010040 <_fwalk_reent>
 800ff36:	bf00      	nop
 800ff38:	0800fe95 	.word	0x0800fe95

0800ff3c <__sfmoreglue>:
 800ff3c:	b570      	push	{r4, r5, r6, lr}
 800ff3e:	1e4a      	subs	r2, r1, #1
 800ff40:	2568      	movs	r5, #104	; 0x68
 800ff42:	4355      	muls	r5, r2
 800ff44:	460e      	mov	r6, r1
 800ff46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ff4a:	f000 fc53 	bl	80107f4 <_malloc_r>
 800ff4e:	4604      	mov	r4, r0
 800ff50:	b140      	cbz	r0, 800ff64 <__sfmoreglue+0x28>
 800ff52:	2100      	movs	r1, #0
 800ff54:	e9c0 1600 	strd	r1, r6, [r0]
 800ff58:	300c      	adds	r0, #12
 800ff5a:	60a0      	str	r0, [r4, #8]
 800ff5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ff60:	f7fe fb00 	bl	800e564 <memset>
 800ff64:	4620      	mov	r0, r4
 800ff66:	bd70      	pop	{r4, r5, r6, pc}

0800ff68 <__sinit>:
 800ff68:	6983      	ldr	r3, [r0, #24]
 800ff6a:	b510      	push	{r4, lr}
 800ff6c:	4604      	mov	r4, r0
 800ff6e:	bb33      	cbnz	r3, 800ffbe <__sinit+0x56>
 800ff70:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800ff74:	6503      	str	r3, [r0, #80]	; 0x50
 800ff76:	4b12      	ldr	r3, [pc, #72]	; (800ffc0 <__sinit+0x58>)
 800ff78:	4a12      	ldr	r2, [pc, #72]	; (800ffc4 <__sinit+0x5c>)
 800ff7a:	681b      	ldr	r3, [r3, #0]
 800ff7c:	6282      	str	r2, [r0, #40]	; 0x28
 800ff7e:	4298      	cmp	r0, r3
 800ff80:	bf04      	itt	eq
 800ff82:	2301      	moveq	r3, #1
 800ff84:	6183      	streq	r3, [r0, #24]
 800ff86:	f000 f81f 	bl	800ffc8 <__sfp>
 800ff8a:	6060      	str	r0, [r4, #4]
 800ff8c:	4620      	mov	r0, r4
 800ff8e:	f000 f81b 	bl	800ffc8 <__sfp>
 800ff92:	60a0      	str	r0, [r4, #8]
 800ff94:	4620      	mov	r0, r4
 800ff96:	f000 f817 	bl	800ffc8 <__sfp>
 800ff9a:	2200      	movs	r2, #0
 800ff9c:	60e0      	str	r0, [r4, #12]
 800ff9e:	2104      	movs	r1, #4
 800ffa0:	6860      	ldr	r0, [r4, #4]
 800ffa2:	f7ff ffa1 	bl	800fee8 <std>
 800ffa6:	2201      	movs	r2, #1
 800ffa8:	2109      	movs	r1, #9
 800ffaa:	68a0      	ldr	r0, [r4, #8]
 800ffac:	f7ff ff9c 	bl	800fee8 <std>
 800ffb0:	2202      	movs	r2, #2
 800ffb2:	2112      	movs	r1, #18
 800ffb4:	68e0      	ldr	r0, [r4, #12]
 800ffb6:	f7ff ff97 	bl	800fee8 <std>
 800ffba:	2301      	movs	r3, #1
 800ffbc:	61a3      	str	r3, [r4, #24]
 800ffbe:	bd10      	pop	{r4, pc}
 800ffc0:	08013620 	.word	0x08013620
 800ffc4:	0800ff31 	.word	0x0800ff31

0800ffc8 <__sfp>:
 800ffc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ffca:	4b1b      	ldr	r3, [pc, #108]	; (8010038 <__sfp+0x70>)
 800ffcc:	681e      	ldr	r6, [r3, #0]
 800ffce:	69b3      	ldr	r3, [r6, #24]
 800ffd0:	4607      	mov	r7, r0
 800ffd2:	b913      	cbnz	r3, 800ffda <__sfp+0x12>
 800ffd4:	4630      	mov	r0, r6
 800ffd6:	f7ff ffc7 	bl	800ff68 <__sinit>
 800ffda:	3648      	adds	r6, #72	; 0x48
 800ffdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800ffe0:	3b01      	subs	r3, #1
 800ffe2:	d503      	bpl.n	800ffec <__sfp+0x24>
 800ffe4:	6833      	ldr	r3, [r6, #0]
 800ffe6:	b133      	cbz	r3, 800fff6 <__sfp+0x2e>
 800ffe8:	6836      	ldr	r6, [r6, #0]
 800ffea:	e7f7      	b.n	800ffdc <__sfp+0x14>
 800ffec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800fff0:	b16d      	cbz	r5, 801000e <__sfp+0x46>
 800fff2:	3468      	adds	r4, #104	; 0x68
 800fff4:	e7f4      	b.n	800ffe0 <__sfp+0x18>
 800fff6:	2104      	movs	r1, #4
 800fff8:	4638      	mov	r0, r7
 800fffa:	f7ff ff9f 	bl	800ff3c <__sfmoreglue>
 800fffe:	6030      	str	r0, [r6, #0]
 8010000:	2800      	cmp	r0, #0
 8010002:	d1f1      	bne.n	800ffe8 <__sfp+0x20>
 8010004:	230c      	movs	r3, #12
 8010006:	603b      	str	r3, [r7, #0]
 8010008:	4604      	mov	r4, r0
 801000a:	4620      	mov	r0, r4
 801000c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801000e:	4b0b      	ldr	r3, [pc, #44]	; (801003c <__sfp+0x74>)
 8010010:	6665      	str	r5, [r4, #100]	; 0x64
 8010012:	e9c4 5500 	strd	r5, r5, [r4]
 8010016:	60a5      	str	r5, [r4, #8]
 8010018:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801001c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8010020:	2208      	movs	r2, #8
 8010022:	4629      	mov	r1, r5
 8010024:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010028:	f7fe fa9c 	bl	800e564 <memset>
 801002c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010030:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010034:	e7e9      	b.n	801000a <__sfp+0x42>
 8010036:	bf00      	nop
 8010038:	08013620 	.word	0x08013620
 801003c:	ffff0001 	.word	0xffff0001

08010040 <_fwalk_reent>:
 8010040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010044:	4680      	mov	r8, r0
 8010046:	4689      	mov	r9, r1
 8010048:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801004c:	2600      	movs	r6, #0
 801004e:	b914      	cbnz	r4, 8010056 <_fwalk_reent+0x16>
 8010050:	4630      	mov	r0, r6
 8010052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010056:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 801005a:	3f01      	subs	r7, #1
 801005c:	d501      	bpl.n	8010062 <_fwalk_reent+0x22>
 801005e:	6824      	ldr	r4, [r4, #0]
 8010060:	e7f5      	b.n	801004e <_fwalk_reent+0xe>
 8010062:	89ab      	ldrh	r3, [r5, #12]
 8010064:	2b01      	cmp	r3, #1
 8010066:	d907      	bls.n	8010078 <_fwalk_reent+0x38>
 8010068:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801006c:	3301      	adds	r3, #1
 801006e:	d003      	beq.n	8010078 <_fwalk_reent+0x38>
 8010070:	4629      	mov	r1, r5
 8010072:	4640      	mov	r0, r8
 8010074:	47c8      	blx	r9
 8010076:	4306      	orrs	r6, r0
 8010078:	3568      	adds	r5, #104	; 0x68
 801007a:	e7ee      	b.n	801005a <_fwalk_reent+0x1a>

0801007c <_localeconv_r>:
 801007c:	4b04      	ldr	r3, [pc, #16]	; (8010090 <_localeconv_r+0x14>)
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	6a18      	ldr	r0, [r3, #32]
 8010082:	4b04      	ldr	r3, [pc, #16]	; (8010094 <_localeconv_r+0x18>)
 8010084:	2800      	cmp	r0, #0
 8010086:	bf08      	it	eq
 8010088:	4618      	moveq	r0, r3
 801008a:	30f0      	adds	r0, #240	; 0xf0
 801008c:	4770      	bx	lr
 801008e:	bf00      	nop
 8010090:	200017f4 	.word	0x200017f4
 8010094:	20001858 	.word	0x20001858

08010098 <__swhatbuf_r>:
 8010098:	b570      	push	{r4, r5, r6, lr}
 801009a:	460e      	mov	r6, r1
 801009c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80100a0:	2900      	cmp	r1, #0
 80100a2:	b096      	sub	sp, #88	; 0x58
 80100a4:	4614      	mov	r4, r2
 80100a6:	461d      	mov	r5, r3
 80100a8:	da07      	bge.n	80100ba <__swhatbuf_r+0x22>
 80100aa:	2300      	movs	r3, #0
 80100ac:	602b      	str	r3, [r5, #0]
 80100ae:	89b3      	ldrh	r3, [r6, #12]
 80100b0:	061a      	lsls	r2, r3, #24
 80100b2:	d410      	bmi.n	80100d6 <__swhatbuf_r+0x3e>
 80100b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80100b8:	e00e      	b.n	80100d8 <__swhatbuf_r+0x40>
 80100ba:	466a      	mov	r2, sp
 80100bc:	f000 fdbc 	bl	8010c38 <_fstat_r>
 80100c0:	2800      	cmp	r0, #0
 80100c2:	dbf2      	blt.n	80100aa <__swhatbuf_r+0x12>
 80100c4:	9a01      	ldr	r2, [sp, #4]
 80100c6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80100ca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80100ce:	425a      	negs	r2, r3
 80100d0:	415a      	adcs	r2, r3
 80100d2:	602a      	str	r2, [r5, #0]
 80100d4:	e7ee      	b.n	80100b4 <__swhatbuf_r+0x1c>
 80100d6:	2340      	movs	r3, #64	; 0x40
 80100d8:	2000      	movs	r0, #0
 80100da:	6023      	str	r3, [r4, #0]
 80100dc:	b016      	add	sp, #88	; 0x58
 80100de:	bd70      	pop	{r4, r5, r6, pc}

080100e0 <__smakebuf_r>:
 80100e0:	898b      	ldrh	r3, [r1, #12]
 80100e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80100e4:	079d      	lsls	r5, r3, #30
 80100e6:	4606      	mov	r6, r0
 80100e8:	460c      	mov	r4, r1
 80100ea:	d507      	bpl.n	80100fc <__smakebuf_r+0x1c>
 80100ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80100f0:	6023      	str	r3, [r4, #0]
 80100f2:	6123      	str	r3, [r4, #16]
 80100f4:	2301      	movs	r3, #1
 80100f6:	6163      	str	r3, [r4, #20]
 80100f8:	b002      	add	sp, #8
 80100fa:	bd70      	pop	{r4, r5, r6, pc}
 80100fc:	ab01      	add	r3, sp, #4
 80100fe:	466a      	mov	r2, sp
 8010100:	f7ff ffca 	bl	8010098 <__swhatbuf_r>
 8010104:	9900      	ldr	r1, [sp, #0]
 8010106:	4605      	mov	r5, r0
 8010108:	4630      	mov	r0, r6
 801010a:	f000 fb73 	bl	80107f4 <_malloc_r>
 801010e:	b948      	cbnz	r0, 8010124 <__smakebuf_r+0x44>
 8010110:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010114:	059a      	lsls	r2, r3, #22
 8010116:	d4ef      	bmi.n	80100f8 <__smakebuf_r+0x18>
 8010118:	f023 0303 	bic.w	r3, r3, #3
 801011c:	f043 0302 	orr.w	r3, r3, #2
 8010120:	81a3      	strh	r3, [r4, #12]
 8010122:	e7e3      	b.n	80100ec <__smakebuf_r+0xc>
 8010124:	4b0d      	ldr	r3, [pc, #52]	; (801015c <__smakebuf_r+0x7c>)
 8010126:	62b3      	str	r3, [r6, #40]	; 0x28
 8010128:	89a3      	ldrh	r3, [r4, #12]
 801012a:	6020      	str	r0, [r4, #0]
 801012c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010130:	81a3      	strh	r3, [r4, #12]
 8010132:	9b00      	ldr	r3, [sp, #0]
 8010134:	6163      	str	r3, [r4, #20]
 8010136:	9b01      	ldr	r3, [sp, #4]
 8010138:	6120      	str	r0, [r4, #16]
 801013a:	b15b      	cbz	r3, 8010154 <__smakebuf_r+0x74>
 801013c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010140:	4630      	mov	r0, r6
 8010142:	f000 fd8b 	bl	8010c5c <_isatty_r>
 8010146:	b128      	cbz	r0, 8010154 <__smakebuf_r+0x74>
 8010148:	89a3      	ldrh	r3, [r4, #12]
 801014a:	f023 0303 	bic.w	r3, r3, #3
 801014e:	f043 0301 	orr.w	r3, r3, #1
 8010152:	81a3      	strh	r3, [r4, #12]
 8010154:	89a3      	ldrh	r3, [r4, #12]
 8010156:	431d      	orrs	r5, r3
 8010158:	81a5      	strh	r5, [r4, #12]
 801015a:	e7cd      	b.n	80100f8 <__smakebuf_r+0x18>
 801015c:	0800ff31 	.word	0x0800ff31

08010160 <malloc>:
 8010160:	4b02      	ldr	r3, [pc, #8]	; (801016c <malloc+0xc>)
 8010162:	4601      	mov	r1, r0
 8010164:	6818      	ldr	r0, [r3, #0]
 8010166:	f000 bb45 	b.w	80107f4 <_malloc_r>
 801016a:	bf00      	nop
 801016c:	200017f4 	.word	0x200017f4

08010170 <memcpy>:
 8010170:	b510      	push	{r4, lr}
 8010172:	1e43      	subs	r3, r0, #1
 8010174:	440a      	add	r2, r1
 8010176:	4291      	cmp	r1, r2
 8010178:	d100      	bne.n	801017c <memcpy+0xc>
 801017a:	bd10      	pop	{r4, pc}
 801017c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010180:	f803 4f01 	strb.w	r4, [r3, #1]!
 8010184:	e7f7      	b.n	8010176 <memcpy+0x6>

08010186 <_Balloc>:
 8010186:	b570      	push	{r4, r5, r6, lr}
 8010188:	6a45      	ldr	r5, [r0, #36]	; 0x24
 801018a:	4604      	mov	r4, r0
 801018c:	460e      	mov	r6, r1
 801018e:	b93d      	cbnz	r5, 80101a0 <_Balloc+0x1a>
 8010190:	2010      	movs	r0, #16
 8010192:	f7ff ffe5 	bl	8010160 <malloc>
 8010196:	6260      	str	r0, [r4, #36]	; 0x24
 8010198:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801019c:	6005      	str	r5, [r0, #0]
 801019e:	60c5      	str	r5, [r0, #12]
 80101a0:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80101a2:	68eb      	ldr	r3, [r5, #12]
 80101a4:	b183      	cbz	r3, 80101c8 <_Balloc+0x42>
 80101a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101a8:	68db      	ldr	r3, [r3, #12]
 80101aa:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80101ae:	b9b8      	cbnz	r0, 80101e0 <_Balloc+0x5a>
 80101b0:	2101      	movs	r1, #1
 80101b2:	fa01 f506 	lsl.w	r5, r1, r6
 80101b6:	1d6a      	adds	r2, r5, #5
 80101b8:	0092      	lsls	r2, r2, #2
 80101ba:	4620      	mov	r0, r4
 80101bc:	f000 fabe 	bl	801073c <_calloc_r>
 80101c0:	b160      	cbz	r0, 80101dc <_Balloc+0x56>
 80101c2:	e9c0 6501 	strd	r6, r5, [r0, #4]
 80101c6:	e00e      	b.n	80101e6 <_Balloc+0x60>
 80101c8:	2221      	movs	r2, #33	; 0x21
 80101ca:	2104      	movs	r1, #4
 80101cc:	4620      	mov	r0, r4
 80101ce:	f000 fab5 	bl	801073c <_calloc_r>
 80101d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101d4:	60e8      	str	r0, [r5, #12]
 80101d6:	68db      	ldr	r3, [r3, #12]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d1e4      	bne.n	80101a6 <_Balloc+0x20>
 80101dc:	2000      	movs	r0, #0
 80101de:	bd70      	pop	{r4, r5, r6, pc}
 80101e0:	6802      	ldr	r2, [r0, #0]
 80101e2:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 80101e6:	2300      	movs	r3, #0
 80101e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80101ec:	e7f7      	b.n	80101de <_Balloc+0x58>

080101ee <_Bfree>:
 80101ee:	b570      	push	{r4, r5, r6, lr}
 80101f0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 80101f2:	4606      	mov	r6, r0
 80101f4:	460d      	mov	r5, r1
 80101f6:	b93c      	cbnz	r4, 8010208 <_Bfree+0x1a>
 80101f8:	2010      	movs	r0, #16
 80101fa:	f7ff ffb1 	bl	8010160 <malloc>
 80101fe:	6270      	str	r0, [r6, #36]	; 0x24
 8010200:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010204:	6004      	str	r4, [r0, #0]
 8010206:	60c4      	str	r4, [r0, #12]
 8010208:	b13d      	cbz	r5, 801021a <_Bfree+0x2c>
 801020a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 801020c:	686a      	ldr	r2, [r5, #4]
 801020e:	68db      	ldr	r3, [r3, #12]
 8010210:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010214:	6029      	str	r1, [r5, #0]
 8010216:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 801021a:	bd70      	pop	{r4, r5, r6, pc}

0801021c <__multadd>:
 801021c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010220:	690d      	ldr	r5, [r1, #16]
 8010222:	461f      	mov	r7, r3
 8010224:	4606      	mov	r6, r0
 8010226:	460c      	mov	r4, r1
 8010228:	f101 0c14 	add.w	ip, r1, #20
 801022c:	2300      	movs	r3, #0
 801022e:	f8dc 0000 	ldr.w	r0, [ip]
 8010232:	b281      	uxth	r1, r0
 8010234:	fb02 7101 	mla	r1, r2, r1, r7
 8010238:	0c0f      	lsrs	r7, r1, #16
 801023a:	0c00      	lsrs	r0, r0, #16
 801023c:	fb02 7000 	mla	r0, r2, r0, r7
 8010240:	b289      	uxth	r1, r1
 8010242:	3301      	adds	r3, #1
 8010244:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8010248:	429d      	cmp	r5, r3
 801024a:	ea4f 4710 	mov.w	r7, r0, lsr #16
 801024e:	f84c 1b04 	str.w	r1, [ip], #4
 8010252:	dcec      	bgt.n	801022e <__multadd+0x12>
 8010254:	b1d7      	cbz	r7, 801028c <__multadd+0x70>
 8010256:	68a3      	ldr	r3, [r4, #8]
 8010258:	42ab      	cmp	r3, r5
 801025a:	dc12      	bgt.n	8010282 <__multadd+0x66>
 801025c:	6861      	ldr	r1, [r4, #4]
 801025e:	4630      	mov	r0, r6
 8010260:	3101      	adds	r1, #1
 8010262:	f7ff ff90 	bl	8010186 <_Balloc>
 8010266:	6922      	ldr	r2, [r4, #16]
 8010268:	3202      	adds	r2, #2
 801026a:	f104 010c 	add.w	r1, r4, #12
 801026e:	4680      	mov	r8, r0
 8010270:	0092      	lsls	r2, r2, #2
 8010272:	300c      	adds	r0, #12
 8010274:	f7ff ff7c 	bl	8010170 <memcpy>
 8010278:	4621      	mov	r1, r4
 801027a:	4630      	mov	r0, r6
 801027c:	f7ff ffb7 	bl	80101ee <_Bfree>
 8010280:	4644      	mov	r4, r8
 8010282:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010286:	3501      	adds	r5, #1
 8010288:	615f      	str	r7, [r3, #20]
 801028a:	6125      	str	r5, [r4, #16]
 801028c:	4620      	mov	r0, r4
 801028e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010292 <__hi0bits>:
 8010292:	0c02      	lsrs	r2, r0, #16
 8010294:	0412      	lsls	r2, r2, #16
 8010296:	4603      	mov	r3, r0
 8010298:	b9b2      	cbnz	r2, 80102c8 <__hi0bits+0x36>
 801029a:	0403      	lsls	r3, r0, #16
 801029c:	2010      	movs	r0, #16
 801029e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 80102a2:	bf04      	itt	eq
 80102a4:	021b      	lsleq	r3, r3, #8
 80102a6:	3008      	addeq	r0, #8
 80102a8:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 80102ac:	bf04      	itt	eq
 80102ae:	011b      	lsleq	r3, r3, #4
 80102b0:	3004      	addeq	r0, #4
 80102b2:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 80102b6:	bf04      	itt	eq
 80102b8:	009b      	lsleq	r3, r3, #2
 80102ba:	3002      	addeq	r0, #2
 80102bc:	2b00      	cmp	r3, #0
 80102be:	db06      	blt.n	80102ce <__hi0bits+0x3c>
 80102c0:	005b      	lsls	r3, r3, #1
 80102c2:	d503      	bpl.n	80102cc <__hi0bits+0x3a>
 80102c4:	3001      	adds	r0, #1
 80102c6:	4770      	bx	lr
 80102c8:	2000      	movs	r0, #0
 80102ca:	e7e8      	b.n	801029e <__hi0bits+0xc>
 80102cc:	2020      	movs	r0, #32
 80102ce:	4770      	bx	lr

080102d0 <__lo0bits>:
 80102d0:	6803      	ldr	r3, [r0, #0]
 80102d2:	f013 0207 	ands.w	r2, r3, #7
 80102d6:	4601      	mov	r1, r0
 80102d8:	d00b      	beq.n	80102f2 <__lo0bits+0x22>
 80102da:	07da      	lsls	r2, r3, #31
 80102dc:	d423      	bmi.n	8010326 <__lo0bits+0x56>
 80102de:	0798      	lsls	r0, r3, #30
 80102e0:	bf49      	itett	mi
 80102e2:	085b      	lsrmi	r3, r3, #1
 80102e4:	089b      	lsrpl	r3, r3, #2
 80102e6:	2001      	movmi	r0, #1
 80102e8:	600b      	strmi	r3, [r1, #0]
 80102ea:	bf5c      	itt	pl
 80102ec:	600b      	strpl	r3, [r1, #0]
 80102ee:	2002      	movpl	r0, #2
 80102f0:	4770      	bx	lr
 80102f2:	b298      	uxth	r0, r3
 80102f4:	b9a8      	cbnz	r0, 8010322 <__lo0bits+0x52>
 80102f6:	0c1b      	lsrs	r3, r3, #16
 80102f8:	2010      	movs	r0, #16
 80102fa:	f013 0fff 	tst.w	r3, #255	; 0xff
 80102fe:	bf04      	itt	eq
 8010300:	0a1b      	lsreq	r3, r3, #8
 8010302:	3008      	addeq	r0, #8
 8010304:	071a      	lsls	r2, r3, #28
 8010306:	bf04      	itt	eq
 8010308:	091b      	lsreq	r3, r3, #4
 801030a:	3004      	addeq	r0, #4
 801030c:	079a      	lsls	r2, r3, #30
 801030e:	bf04      	itt	eq
 8010310:	089b      	lsreq	r3, r3, #2
 8010312:	3002      	addeq	r0, #2
 8010314:	07da      	lsls	r2, r3, #31
 8010316:	d402      	bmi.n	801031e <__lo0bits+0x4e>
 8010318:	085b      	lsrs	r3, r3, #1
 801031a:	d006      	beq.n	801032a <__lo0bits+0x5a>
 801031c:	3001      	adds	r0, #1
 801031e:	600b      	str	r3, [r1, #0]
 8010320:	4770      	bx	lr
 8010322:	4610      	mov	r0, r2
 8010324:	e7e9      	b.n	80102fa <__lo0bits+0x2a>
 8010326:	2000      	movs	r0, #0
 8010328:	4770      	bx	lr
 801032a:	2020      	movs	r0, #32
 801032c:	4770      	bx	lr

0801032e <__i2b>:
 801032e:	b510      	push	{r4, lr}
 8010330:	460c      	mov	r4, r1
 8010332:	2101      	movs	r1, #1
 8010334:	f7ff ff27 	bl	8010186 <_Balloc>
 8010338:	2201      	movs	r2, #1
 801033a:	6144      	str	r4, [r0, #20]
 801033c:	6102      	str	r2, [r0, #16]
 801033e:	bd10      	pop	{r4, pc}

08010340 <__multiply>:
 8010340:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010344:	4614      	mov	r4, r2
 8010346:	690a      	ldr	r2, [r1, #16]
 8010348:	6923      	ldr	r3, [r4, #16]
 801034a:	429a      	cmp	r2, r3
 801034c:	bfb8      	it	lt
 801034e:	460b      	movlt	r3, r1
 8010350:	4688      	mov	r8, r1
 8010352:	bfbc      	itt	lt
 8010354:	46a0      	movlt	r8, r4
 8010356:	461c      	movlt	r4, r3
 8010358:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801035c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010360:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010364:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010368:	eb07 0609 	add.w	r6, r7, r9
 801036c:	42b3      	cmp	r3, r6
 801036e:	bfb8      	it	lt
 8010370:	3101      	addlt	r1, #1
 8010372:	f7ff ff08 	bl	8010186 <_Balloc>
 8010376:	f100 0514 	add.w	r5, r0, #20
 801037a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 801037e:	462b      	mov	r3, r5
 8010380:	2200      	movs	r2, #0
 8010382:	4573      	cmp	r3, lr
 8010384:	d316      	bcc.n	80103b4 <__multiply+0x74>
 8010386:	f104 0214 	add.w	r2, r4, #20
 801038a:	f108 0114 	add.w	r1, r8, #20
 801038e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8010392:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8010396:	9300      	str	r3, [sp, #0]
 8010398:	9b00      	ldr	r3, [sp, #0]
 801039a:	9201      	str	r2, [sp, #4]
 801039c:	4293      	cmp	r3, r2
 801039e:	d80c      	bhi.n	80103ba <__multiply+0x7a>
 80103a0:	2e00      	cmp	r6, #0
 80103a2:	dd03      	ble.n	80103ac <__multiply+0x6c>
 80103a4:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d05d      	beq.n	8010468 <__multiply+0x128>
 80103ac:	6106      	str	r6, [r0, #16]
 80103ae:	b003      	add	sp, #12
 80103b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80103b4:	f843 2b04 	str.w	r2, [r3], #4
 80103b8:	e7e3      	b.n	8010382 <__multiply+0x42>
 80103ba:	f8b2 b000 	ldrh.w	fp, [r2]
 80103be:	f1bb 0f00 	cmp.w	fp, #0
 80103c2:	d023      	beq.n	801040c <__multiply+0xcc>
 80103c4:	4689      	mov	r9, r1
 80103c6:	46ac      	mov	ip, r5
 80103c8:	f04f 0800 	mov.w	r8, #0
 80103cc:	f859 4b04 	ldr.w	r4, [r9], #4
 80103d0:	f8dc a000 	ldr.w	sl, [ip]
 80103d4:	b2a3      	uxth	r3, r4
 80103d6:	fa1f fa8a 	uxth.w	sl, sl
 80103da:	fb0b a303 	mla	r3, fp, r3, sl
 80103de:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80103e2:	f8dc 4000 	ldr.w	r4, [ip]
 80103e6:	4443      	add	r3, r8
 80103e8:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80103ec:	fb0b 840a 	mla	r4, fp, sl, r8
 80103f0:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80103f4:	46e2      	mov	sl, ip
 80103f6:	b29b      	uxth	r3, r3
 80103f8:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80103fc:	454f      	cmp	r7, r9
 80103fe:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010402:	f84a 3b04 	str.w	r3, [sl], #4
 8010406:	d82b      	bhi.n	8010460 <__multiply+0x120>
 8010408:	f8cc 8004 	str.w	r8, [ip, #4]
 801040c:	9b01      	ldr	r3, [sp, #4]
 801040e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8010412:	3204      	adds	r2, #4
 8010414:	f1ba 0f00 	cmp.w	sl, #0
 8010418:	d020      	beq.n	801045c <__multiply+0x11c>
 801041a:	682b      	ldr	r3, [r5, #0]
 801041c:	4689      	mov	r9, r1
 801041e:	46a8      	mov	r8, r5
 8010420:	f04f 0b00 	mov.w	fp, #0
 8010424:	f8b9 c000 	ldrh.w	ip, [r9]
 8010428:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 801042c:	fb0a 440c 	mla	r4, sl, ip, r4
 8010430:	445c      	add	r4, fp
 8010432:	46c4      	mov	ip, r8
 8010434:	b29b      	uxth	r3, r3
 8010436:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801043a:	f84c 3b04 	str.w	r3, [ip], #4
 801043e:	f859 3b04 	ldr.w	r3, [r9], #4
 8010442:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8010446:	0c1b      	lsrs	r3, r3, #16
 8010448:	fb0a b303 	mla	r3, sl, r3, fp
 801044c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8010450:	454f      	cmp	r7, r9
 8010452:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8010456:	d805      	bhi.n	8010464 <__multiply+0x124>
 8010458:	f8c8 3004 	str.w	r3, [r8, #4]
 801045c:	3504      	adds	r5, #4
 801045e:	e79b      	b.n	8010398 <__multiply+0x58>
 8010460:	46d4      	mov	ip, sl
 8010462:	e7b3      	b.n	80103cc <__multiply+0x8c>
 8010464:	46e0      	mov	r8, ip
 8010466:	e7dd      	b.n	8010424 <__multiply+0xe4>
 8010468:	3e01      	subs	r6, #1
 801046a:	e799      	b.n	80103a0 <__multiply+0x60>

0801046c <__pow5mult>:
 801046c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010470:	4615      	mov	r5, r2
 8010472:	f012 0203 	ands.w	r2, r2, #3
 8010476:	4606      	mov	r6, r0
 8010478:	460f      	mov	r7, r1
 801047a:	d007      	beq.n	801048c <__pow5mult+0x20>
 801047c:	3a01      	subs	r2, #1
 801047e:	4c21      	ldr	r4, [pc, #132]	; (8010504 <__pow5mult+0x98>)
 8010480:	2300      	movs	r3, #0
 8010482:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010486:	f7ff fec9 	bl	801021c <__multadd>
 801048a:	4607      	mov	r7, r0
 801048c:	10ad      	asrs	r5, r5, #2
 801048e:	d035      	beq.n	80104fc <__pow5mult+0x90>
 8010490:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010492:	b93c      	cbnz	r4, 80104a4 <__pow5mult+0x38>
 8010494:	2010      	movs	r0, #16
 8010496:	f7ff fe63 	bl	8010160 <malloc>
 801049a:	6270      	str	r0, [r6, #36]	; 0x24
 801049c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80104a0:	6004      	str	r4, [r0, #0]
 80104a2:	60c4      	str	r4, [r0, #12]
 80104a4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80104a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80104ac:	b94c      	cbnz	r4, 80104c2 <__pow5mult+0x56>
 80104ae:	f240 2171 	movw	r1, #625	; 0x271
 80104b2:	4630      	mov	r0, r6
 80104b4:	f7ff ff3b 	bl	801032e <__i2b>
 80104b8:	2300      	movs	r3, #0
 80104ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80104be:	4604      	mov	r4, r0
 80104c0:	6003      	str	r3, [r0, #0]
 80104c2:	f04f 0800 	mov.w	r8, #0
 80104c6:	07eb      	lsls	r3, r5, #31
 80104c8:	d50a      	bpl.n	80104e0 <__pow5mult+0x74>
 80104ca:	4639      	mov	r1, r7
 80104cc:	4622      	mov	r2, r4
 80104ce:	4630      	mov	r0, r6
 80104d0:	f7ff ff36 	bl	8010340 <__multiply>
 80104d4:	4639      	mov	r1, r7
 80104d6:	4681      	mov	r9, r0
 80104d8:	4630      	mov	r0, r6
 80104da:	f7ff fe88 	bl	80101ee <_Bfree>
 80104de:	464f      	mov	r7, r9
 80104e0:	106d      	asrs	r5, r5, #1
 80104e2:	d00b      	beq.n	80104fc <__pow5mult+0x90>
 80104e4:	6820      	ldr	r0, [r4, #0]
 80104e6:	b938      	cbnz	r0, 80104f8 <__pow5mult+0x8c>
 80104e8:	4622      	mov	r2, r4
 80104ea:	4621      	mov	r1, r4
 80104ec:	4630      	mov	r0, r6
 80104ee:	f7ff ff27 	bl	8010340 <__multiply>
 80104f2:	6020      	str	r0, [r4, #0]
 80104f4:	f8c0 8000 	str.w	r8, [r0]
 80104f8:	4604      	mov	r4, r0
 80104fa:	e7e4      	b.n	80104c6 <__pow5mult+0x5a>
 80104fc:	4638      	mov	r0, r7
 80104fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010502:	bf00      	nop
 8010504:	080137b8 	.word	0x080137b8

08010508 <__lshift>:
 8010508:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801050c:	460c      	mov	r4, r1
 801050e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010512:	6923      	ldr	r3, [r4, #16]
 8010514:	6849      	ldr	r1, [r1, #4]
 8010516:	eb0a 0903 	add.w	r9, sl, r3
 801051a:	68a3      	ldr	r3, [r4, #8]
 801051c:	4607      	mov	r7, r0
 801051e:	4616      	mov	r6, r2
 8010520:	f109 0501 	add.w	r5, r9, #1
 8010524:	42ab      	cmp	r3, r5
 8010526:	db32      	blt.n	801058e <__lshift+0x86>
 8010528:	4638      	mov	r0, r7
 801052a:	f7ff fe2c 	bl	8010186 <_Balloc>
 801052e:	2300      	movs	r3, #0
 8010530:	4680      	mov	r8, r0
 8010532:	f100 0114 	add.w	r1, r0, #20
 8010536:	461a      	mov	r2, r3
 8010538:	4553      	cmp	r3, sl
 801053a:	db2b      	blt.n	8010594 <__lshift+0x8c>
 801053c:	6920      	ldr	r0, [r4, #16]
 801053e:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010542:	f104 0314 	add.w	r3, r4, #20
 8010546:	f016 021f 	ands.w	r2, r6, #31
 801054a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801054e:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010552:	d025      	beq.n	80105a0 <__lshift+0x98>
 8010554:	f1c2 0e20 	rsb	lr, r2, #32
 8010558:	2000      	movs	r0, #0
 801055a:	681e      	ldr	r6, [r3, #0]
 801055c:	468a      	mov	sl, r1
 801055e:	4096      	lsls	r6, r2
 8010560:	4330      	orrs	r0, r6
 8010562:	f84a 0b04 	str.w	r0, [sl], #4
 8010566:	f853 0b04 	ldr.w	r0, [r3], #4
 801056a:	459c      	cmp	ip, r3
 801056c:	fa20 f00e 	lsr.w	r0, r0, lr
 8010570:	d814      	bhi.n	801059c <__lshift+0x94>
 8010572:	6048      	str	r0, [r1, #4]
 8010574:	b108      	cbz	r0, 801057a <__lshift+0x72>
 8010576:	f109 0502 	add.w	r5, r9, #2
 801057a:	3d01      	subs	r5, #1
 801057c:	4638      	mov	r0, r7
 801057e:	f8c8 5010 	str.w	r5, [r8, #16]
 8010582:	4621      	mov	r1, r4
 8010584:	f7ff fe33 	bl	80101ee <_Bfree>
 8010588:	4640      	mov	r0, r8
 801058a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801058e:	3101      	adds	r1, #1
 8010590:	005b      	lsls	r3, r3, #1
 8010592:	e7c7      	b.n	8010524 <__lshift+0x1c>
 8010594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8010598:	3301      	adds	r3, #1
 801059a:	e7cd      	b.n	8010538 <__lshift+0x30>
 801059c:	4651      	mov	r1, sl
 801059e:	e7dc      	b.n	801055a <__lshift+0x52>
 80105a0:	3904      	subs	r1, #4
 80105a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80105a6:	f841 2f04 	str.w	r2, [r1, #4]!
 80105aa:	459c      	cmp	ip, r3
 80105ac:	d8f9      	bhi.n	80105a2 <__lshift+0x9a>
 80105ae:	e7e4      	b.n	801057a <__lshift+0x72>

080105b0 <__mcmp>:
 80105b0:	6903      	ldr	r3, [r0, #16]
 80105b2:	690a      	ldr	r2, [r1, #16]
 80105b4:	1a9b      	subs	r3, r3, r2
 80105b6:	b530      	push	{r4, r5, lr}
 80105b8:	d10c      	bne.n	80105d4 <__mcmp+0x24>
 80105ba:	0092      	lsls	r2, r2, #2
 80105bc:	3014      	adds	r0, #20
 80105be:	3114      	adds	r1, #20
 80105c0:	1884      	adds	r4, r0, r2
 80105c2:	4411      	add	r1, r2
 80105c4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80105c8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80105cc:	4295      	cmp	r5, r2
 80105ce:	d003      	beq.n	80105d8 <__mcmp+0x28>
 80105d0:	d305      	bcc.n	80105de <__mcmp+0x2e>
 80105d2:	2301      	movs	r3, #1
 80105d4:	4618      	mov	r0, r3
 80105d6:	bd30      	pop	{r4, r5, pc}
 80105d8:	42a0      	cmp	r0, r4
 80105da:	d3f3      	bcc.n	80105c4 <__mcmp+0x14>
 80105dc:	e7fa      	b.n	80105d4 <__mcmp+0x24>
 80105de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80105e2:	e7f7      	b.n	80105d4 <__mcmp+0x24>

080105e4 <__mdiff>:
 80105e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80105e8:	460d      	mov	r5, r1
 80105ea:	4607      	mov	r7, r0
 80105ec:	4611      	mov	r1, r2
 80105ee:	4628      	mov	r0, r5
 80105f0:	4614      	mov	r4, r2
 80105f2:	f7ff ffdd 	bl	80105b0 <__mcmp>
 80105f6:	1e06      	subs	r6, r0, #0
 80105f8:	d108      	bne.n	801060c <__mdiff+0x28>
 80105fa:	4631      	mov	r1, r6
 80105fc:	4638      	mov	r0, r7
 80105fe:	f7ff fdc2 	bl	8010186 <_Balloc>
 8010602:	2301      	movs	r3, #1
 8010604:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8010608:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801060c:	bfa4      	itt	ge
 801060e:	4623      	movge	r3, r4
 8010610:	462c      	movge	r4, r5
 8010612:	4638      	mov	r0, r7
 8010614:	6861      	ldr	r1, [r4, #4]
 8010616:	bfa6      	itte	ge
 8010618:	461d      	movge	r5, r3
 801061a:	2600      	movge	r6, #0
 801061c:	2601      	movlt	r6, #1
 801061e:	f7ff fdb2 	bl	8010186 <_Balloc>
 8010622:	692b      	ldr	r3, [r5, #16]
 8010624:	60c6      	str	r6, [r0, #12]
 8010626:	6926      	ldr	r6, [r4, #16]
 8010628:	f105 0914 	add.w	r9, r5, #20
 801062c:	f104 0214 	add.w	r2, r4, #20
 8010630:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8010634:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 8010638:	f100 0514 	add.w	r5, r0, #20
 801063c:	f04f 0e00 	mov.w	lr, #0
 8010640:	f852 ab04 	ldr.w	sl, [r2], #4
 8010644:	f859 4b04 	ldr.w	r4, [r9], #4
 8010648:	fa1e f18a 	uxtah	r1, lr, sl
 801064c:	b2a3      	uxth	r3, r4
 801064e:	1ac9      	subs	r1, r1, r3
 8010650:	0c23      	lsrs	r3, r4, #16
 8010652:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 8010656:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801065a:	b289      	uxth	r1, r1
 801065c:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8010660:	45c8      	cmp	r8, r9
 8010662:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8010666:	4694      	mov	ip, r2
 8010668:	f845 3b04 	str.w	r3, [r5], #4
 801066c:	d8e8      	bhi.n	8010640 <__mdiff+0x5c>
 801066e:	45bc      	cmp	ip, r7
 8010670:	d304      	bcc.n	801067c <__mdiff+0x98>
 8010672:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 8010676:	b183      	cbz	r3, 801069a <__mdiff+0xb6>
 8010678:	6106      	str	r6, [r0, #16]
 801067a:	e7c5      	b.n	8010608 <__mdiff+0x24>
 801067c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8010680:	fa1e f381 	uxtah	r3, lr, r1
 8010684:	141a      	asrs	r2, r3, #16
 8010686:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801068a:	b29b      	uxth	r3, r3
 801068c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010690:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8010694:	f845 3b04 	str.w	r3, [r5], #4
 8010698:	e7e9      	b.n	801066e <__mdiff+0x8a>
 801069a:	3e01      	subs	r6, #1
 801069c:	e7e9      	b.n	8010672 <__mdiff+0x8e>

0801069e <__d2b>:
 801069e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80106a2:	460e      	mov	r6, r1
 80106a4:	2101      	movs	r1, #1
 80106a6:	ec59 8b10 	vmov	r8, r9, d0
 80106aa:	4615      	mov	r5, r2
 80106ac:	f7ff fd6b 	bl	8010186 <_Balloc>
 80106b0:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80106b4:	4607      	mov	r7, r0
 80106b6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80106ba:	bb34      	cbnz	r4, 801070a <__d2b+0x6c>
 80106bc:	9301      	str	r3, [sp, #4]
 80106be:	f1b8 0300 	subs.w	r3, r8, #0
 80106c2:	d027      	beq.n	8010714 <__d2b+0x76>
 80106c4:	a802      	add	r0, sp, #8
 80106c6:	f840 3d08 	str.w	r3, [r0, #-8]!
 80106ca:	f7ff fe01 	bl	80102d0 <__lo0bits>
 80106ce:	9900      	ldr	r1, [sp, #0]
 80106d0:	b1f0      	cbz	r0, 8010710 <__d2b+0x72>
 80106d2:	9a01      	ldr	r2, [sp, #4]
 80106d4:	f1c0 0320 	rsb	r3, r0, #32
 80106d8:	fa02 f303 	lsl.w	r3, r2, r3
 80106dc:	430b      	orrs	r3, r1
 80106de:	40c2      	lsrs	r2, r0
 80106e0:	617b      	str	r3, [r7, #20]
 80106e2:	9201      	str	r2, [sp, #4]
 80106e4:	9b01      	ldr	r3, [sp, #4]
 80106e6:	61bb      	str	r3, [r7, #24]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	bf14      	ite	ne
 80106ec:	2102      	movne	r1, #2
 80106ee:	2101      	moveq	r1, #1
 80106f0:	6139      	str	r1, [r7, #16]
 80106f2:	b1c4      	cbz	r4, 8010726 <__d2b+0x88>
 80106f4:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80106f8:	4404      	add	r4, r0
 80106fa:	6034      	str	r4, [r6, #0]
 80106fc:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8010700:	6028      	str	r0, [r5, #0]
 8010702:	4638      	mov	r0, r7
 8010704:	b003      	add	sp, #12
 8010706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801070a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801070e:	e7d5      	b.n	80106bc <__d2b+0x1e>
 8010710:	6179      	str	r1, [r7, #20]
 8010712:	e7e7      	b.n	80106e4 <__d2b+0x46>
 8010714:	a801      	add	r0, sp, #4
 8010716:	f7ff fddb 	bl	80102d0 <__lo0bits>
 801071a:	9b01      	ldr	r3, [sp, #4]
 801071c:	617b      	str	r3, [r7, #20]
 801071e:	2101      	movs	r1, #1
 8010720:	6139      	str	r1, [r7, #16]
 8010722:	3020      	adds	r0, #32
 8010724:	e7e5      	b.n	80106f2 <__d2b+0x54>
 8010726:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 801072a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801072e:	6030      	str	r0, [r6, #0]
 8010730:	6918      	ldr	r0, [r3, #16]
 8010732:	f7ff fdae 	bl	8010292 <__hi0bits>
 8010736:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 801073a:	e7e1      	b.n	8010700 <__d2b+0x62>

0801073c <_calloc_r>:
 801073c:	b538      	push	{r3, r4, r5, lr}
 801073e:	fb02 f401 	mul.w	r4, r2, r1
 8010742:	4621      	mov	r1, r4
 8010744:	f000 f856 	bl	80107f4 <_malloc_r>
 8010748:	4605      	mov	r5, r0
 801074a:	b118      	cbz	r0, 8010754 <_calloc_r+0x18>
 801074c:	4622      	mov	r2, r4
 801074e:	2100      	movs	r1, #0
 8010750:	f7fd ff08 	bl	800e564 <memset>
 8010754:	4628      	mov	r0, r5
 8010756:	bd38      	pop	{r3, r4, r5, pc}

08010758 <_free_r>:
 8010758:	b538      	push	{r3, r4, r5, lr}
 801075a:	4605      	mov	r5, r0
 801075c:	2900      	cmp	r1, #0
 801075e:	d045      	beq.n	80107ec <_free_r+0x94>
 8010760:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010764:	1f0c      	subs	r4, r1, #4
 8010766:	2b00      	cmp	r3, #0
 8010768:	bfb8      	it	lt
 801076a:	18e4      	addlt	r4, r4, r3
 801076c:	f000 fac3 	bl	8010cf6 <__malloc_lock>
 8010770:	4a1f      	ldr	r2, [pc, #124]	; (80107f0 <_free_r+0x98>)
 8010772:	6813      	ldr	r3, [r2, #0]
 8010774:	4610      	mov	r0, r2
 8010776:	b933      	cbnz	r3, 8010786 <_free_r+0x2e>
 8010778:	6063      	str	r3, [r4, #4]
 801077a:	6014      	str	r4, [r2, #0]
 801077c:	4628      	mov	r0, r5
 801077e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010782:	f000 bab9 	b.w	8010cf8 <__malloc_unlock>
 8010786:	42a3      	cmp	r3, r4
 8010788:	d90c      	bls.n	80107a4 <_free_r+0x4c>
 801078a:	6821      	ldr	r1, [r4, #0]
 801078c:	1862      	adds	r2, r4, r1
 801078e:	4293      	cmp	r3, r2
 8010790:	bf04      	itt	eq
 8010792:	681a      	ldreq	r2, [r3, #0]
 8010794:	685b      	ldreq	r3, [r3, #4]
 8010796:	6063      	str	r3, [r4, #4]
 8010798:	bf04      	itt	eq
 801079a:	1852      	addeq	r2, r2, r1
 801079c:	6022      	streq	r2, [r4, #0]
 801079e:	6004      	str	r4, [r0, #0]
 80107a0:	e7ec      	b.n	801077c <_free_r+0x24>
 80107a2:	4613      	mov	r3, r2
 80107a4:	685a      	ldr	r2, [r3, #4]
 80107a6:	b10a      	cbz	r2, 80107ac <_free_r+0x54>
 80107a8:	42a2      	cmp	r2, r4
 80107aa:	d9fa      	bls.n	80107a2 <_free_r+0x4a>
 80107ac:	6819      	ldr	r1, [r3, #0]
 80107ae:	1858      	adds	r0, r3, r1
 80107b0:	42a0      	cmp	r0, r4
 80107b2:	d10b      	bne.n	80107cc <_free_r+0x74>
 80107b4:	6820      	ldr	r0, [r4, #0]
 80107b6:	4401      	add	r1, r0
 80107b8:	1858      	adds	r0, r3, r1
 80107ba:	4282      	cmp	r2, r0
 80107bc:	6019      	str	r1, [r3, #0]
 80107be:	d1dd      	bne.n	801077c <_free_r+0x24>
 80107c0:	6810      	ldr	r0, [r2, #0]
 80107c2:	6852      	ldr	r2, [r2, #4]
 80107c4:	605a      	str	r2, [r3, #4]
 80107c6:	4401      	add	r1, r0
 80107c8:	6019      	str	r1, [r3, #0]
 80107ca:	e7d7      	b.n	801077c <_free_r+0x24>
 80107cc:	d902      	bls.n	80107d4 <_free_r+0x7c>
 80107ce:	230c      	movs	r3, #12
 80107d0:	602b      	str	r3, [r5, #0]
 80107d2:	e7d3      	b.n	801077c <_free_r+0x24>
 80107d4:	6820      	ldr	r0, [r4, #0]
 80107d6:	1821      	adds	r1, r4, r0
 80107d8:	428a      	cmp	r2, r1
 80107da:	bf04      	itt	eq
 80107dc:	6811      	ldreq	r1, [r2, #0]
 80107de:	6852      	ldreq	r2, [r2, #4]
 80107e0:	6062      	str	r2, [r4, #4]
 80107e2:	bf04      	itt	eq
 80107e4:	1809      	addeq	r1, r1, r0
 80107e6:	6021      	streq	r1, [r4, #0]
 80107e8:	605c      	str	r4, [r3, #4]
 80107ea:	e7c7      	b.n	801077c <_free_r+0x24>
 80107ec:	bd38      	pop	{r3, r4, r5, pc}
 80107ee:	bf00      	nop
 80107f0:	20001a28 	.word	0x20001a28

080107f4 <_malloc_r>:
 80107f4:	b570      	push	{r4, r5, r6, lr}
 80107f6:	1ccd      	adds	r5, r1, #3
 80107f8:	f025 0503 	bic.w	r5, r5, #3
 80107fc:	3508      	adds	r5, #8
 80107fe:	2d0c      	cmp	r5, #12
 8010800:	bf38      	it	cc
 8010802:	250c      	movcc	r5, #12
 8010804:	2d00      	cmp	r5, #0
 8010806:	4606      	mov	r6, r0
 8010808:	db01      	blt.n	801080e <_malloc_r+0x1a>
 801080a:	42a9      	cmp	r1, r5
 801080c:	d903      	bls.n	8010816 <_malloc_r+0x22>
 801080e:	230c      	movs	r3, #12
 8010810:	6033      	str	r3, [r6, #0]
 8010812:	2000      	movs	r0, #0
 8010814:	bd70      	pop	{r4, r5, r6, pc}
 8010816:	f000 fa6e 	bl	8010cf6 <__malloc_lock>
 801081a:	4a21      	ldr	r2, [pc, #132]	; (80108a0 <_malloc_r+0xac>)
 801081c:	6814      	ldr	r4, [r2, #0]
 801081e:	4621      	mov	r1, r4
 8010820:	b991      	cbnz	r1, 8010848 <_malloc_r+0x54>
 8010822:	4c20      	ldr	r4, [pc, #128]	; (80108a4 <_malloc_r+0xb0>)
 8010824:	6823      	ldr	r3, [r4, #0]
 8010826:	b91b      	cbnz	r3, 8010830 <_malloc_r+0x3c>
 8010828:	4630      	mov	r0, r6
 801082a:	f000 f98f 	bl	8010b4c <_sbrk_r>
 801082e:	6020      	str	r0, [r4, #0]
 8010830:	4629      	mov	r1, r5
 8010832:	4630      	mov	r0, r6
 8010834:	f000 f98a 	bl	8010b4c <_sbrk_r>
 8010838:	1c43      	adds	r3, r0, #1
 801083a:	d124      	bne.n	8010886 <_malloc_r+0x92>
 801083c:	230c      	movs	r3, #12
 801083e:	6033      	str	r3, [r6, #0]
 8010840:	4630      	mov	r0, r6
 8010842:	f000 fa59 	bl	8010cf8 <__malloc_unlock>
 8010846:	e7e4      	b.n	8010812 <_malloc_r+0x1e>
 8010848:	680b      	ldr	r3, [r1, #0]
 801084a:	1b5b      	subs	r3, r3, r5
 801084c:	d418      	bmi.n	8010880 <_malloc_r+0x8c>
 801084e:	2b0b      	cmp	r3, #11
 8010850:	d90f      	bls.n	8010872 <_malloc_r+0x7e>
 8010852:	600b      	str	r3, [r1, #0]
 8010854:	50cd      	str	r5, [r1, r3]
 8010856:	18cc      	adds	r4, r1, r3
 8010858:	4630      	mov	r0, r6
 801085a:	f000 fa4d 	bl	8010cf8 <__malloc_unlock>
 801085e:	f104 000b 	add.w	r0, r4, #11
 8010862:	1d23      	adds	r3, r4, #4
 8010864:	f020 0007 	bic.w	r0, r0, #7
 8010868:	1ac3      	subs	r3, r0, r3
 801086a:	d0d3      	beq.n	8010814 <_malloc_r+0x20>
 801086c:	425a      	negs	r2, r3
 801086e:	50e2      	str	r2, [r4, r3]
 8010870:	e7d0      	b.n	8010814 <_malloc_r+0x20>
 8010872:	428c      	cmp	r4, r1
 8010874:	684b      	ldr	r3, [r1, #4]
 8010876:	bf16      	itet	ne
 8010878:	6063      	strne	r3, [r4, #4]
 801087a:	6013      	streq	r3, [r2, #0]
 801087c:	460c      	movne	r4, r1
 801087e:	e7eb      	b.n	8010858 <_malloc_r+0x64>
 8010880:	460c      	mov	r4, r1
 8010882:	6849      	ldr	r1, [r1, #4]
 8010884:	e7cc      	b.n	8010820 <_malloc_r+0x2c>
 8010886:	1cc4      	adds	r4, r0, #3
 8010888:	f024 0403 	bic.w	r4, r4, #3
 801088c:	42a0      	cmp	r0, r4
 801088e:	d005      	beq.n	801089c <_malloc_r+0xa8>
 8010890:	1a21      	subs	r1, r4, r0
 8010892:	4630      	mov	r0, r6
 8010894:	f000 f95a 	bl	8010b4c <_sbrk_r>
 8010898:	3001      	adds	r0, #1
 801089a:	d0cf      	beq.n	801083c <_malloc_r+0x48>
 801089c:	6025      	str	r5, [r4, #0]
 801089e:	e7db      	b.n	8010858 <_malloc_r+0x64>
 80108a0:	20001a28 	.word	0x20001a28
 80108a4:	20001a2c 	.word	0x20001a2c

080108a8 <__ssputs_r>:
 80108a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80108ac:	688e      	ldr	r6, [r1, #8]
 80108ae:	429e      	cmp	r6, r3
 80108b0:	4682      	mov	sl, r0
 80108b2:	460c      	mov	r4, r1
 80108b4:	4690      	mov	r8, r2
 80108b6:	4699      	mov	r9, r3
 80108b8:	d837      	bhi.n	801092a <__ssputs_r+0x82>
 80108ba:	898a      	ldrh	r2, [r1, #12]
 80108bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80108c0:	d031      	beq.n	8010926 <__ssputs_r+0x7e>
 80108c2:	6825      	ldr	r5, [r4, #0]
 80108c4:	6909      	ldr	r1, [r1, #16]
 80108c6:	1a6f      	subs	r7, r5, r1
 80108c8:	6965      	ldr	r5, [r4, #20]
 80108ca:	2302      	movs	r3, #2
 80108cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80108d0:	fb95 f5f3 	sdiv	r5, r5, r3
 80108d4:	f109 0301 	add.w	r3, r9, #1
 80108d8:	443b      	add	r3, r7
 80108da:	429d      	cmp	r5, r3
 80108dc:	bf38      	it	cc
 80108de:	461d      	movcc	r5, r3
 80108e0:	0553      	lsls	r3, r2, #21
 80108e2:	d530      	bpl.n	8010946 <__ssputs_r+0x9e>
 80108e4:	4629      	mov	r1, r5
 80108e6:	f7ff ff85 	bl	80107f4 <_malloc_r>
 80108ea:	4606      	mov	r6, r0
 80108ec:	b950      	cbnz	r0, 8010904 <__ssputs_r+0x5c>
 80108ee:	230c      	movs	r3, #12
 80108f0:	f8ca 3000 	str.w	r3, [sl]
 80108f4:	89a3      	ldrh	r3, [r4, #12]
 80108f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80108fa:	81a3      	strh	r3, [r4, #12]
 80108fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010900:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010904:	463a      	mov	r2, r7
 8010906:	6921      	ldr	r1, [r4, #16]
 8010908:	f7ff fc32 	bl	8010170 <memcpy>
 801090c:	89a3      	ldrh	r3, [r4, #12]
 801090e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010912:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010916:	81a3      	strh	r3, [r4, #12]
 8010918:	6126      	str	r6, [r4, #16]
 801091a:	6165      	str	r5, [r4, #20]
 801091c:	443e      	add	r6, r7
 801091e:	1bed      	subs	r5, r5, r7
 8010920:	6026      	str	r6, [r4, #0]
 8010922:	60a5      	str	r5, [r4, #8]
 8010924:	464e      	mov	r6, r9
 8010926:	454e      	cmp	r6, r9
 8010928:	d900      	bls.n	801092c <__ssputs_r+0x84>
 801092a:	464e      	mov	r6, r9
 801092c:	4632      	mov	r2, r6
 801092e:	4641      	mov	r1, r8
 8010930:	6820      	ldr	r0, [r4, #0]
 8010932:	f000 f9c7 	bl	8010cc4 <memmove>
 8010936:	68a3      	ldr	r3, [r4, #8]
 8010938:	1b9b      	subs	r3, r3, r6
 801093a:	60a3      	str	r3, [r4, #8]
 801093c:	6823      	ldr	r3, [r4, #0]
 801093e:	441e      	add	r6, r3
 8010940:	6026      	str	r6, [r4, #0]
 8010942:	2000      	movs	r0, #0
 8010944:	e7dc      	b.n	8010900 <__ssputs_r+0x58>
 8010946:	462a      	mov	r2, r5
 8010948:	f000 f9d7 	bl	8010cfa <_realloc_r>
 801094c:	4606      	mov	r6, r0
 801094e:	2800      	cmp	r0, #0
 8010950:	d1e2      	bne.n	8010918 <__ssputs_r+0x70>
 8010952:	6921      	ldr	r1, [r4, #16]
 8010954:	4650      	mov	r0, sl
 8010956:	f7ff feff 	bl	8010758 <_free_r>
 801095a:	e7c8      	b.n	80108ee <__ssputs_r+0x46>

0801095c <_svfiprintf_r>:
 801095c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010960:	461d      	mov	r5, r3
 8010962:	898b      	ldrh	r3, [r1, #12]
 8010964:	061f      	lsls	r7, r3, #24
 8010966:	b09d      	sub	sp, #116	; 0x74
 8010968:	4680      	mov	r8, r0
 801096a:	460c      	mov	r4, r1
 801096c:	4616      	mov	r6, r2
 801096e:	d50f      	bpl.n	8010990 <_svfiprintf_r+0x34>
 8010970:	690b      	ldr	r3, [r1, #16]
 8010972:	b96b      	cbnz	r3, 8010990 <_svfiprintf_r+0x34>
 8010974:	2140      	movs	r1, #64	; 0x40
 8010976:	f7ff ff3d 	bl	80107f4 <_malloc_r>
 801097a:	6020      	str	r0, [r4, #0]
 801097c:	6120      	str	r0, [r4, #16]
 801097e:	b928      	cbnz	r0, 801098c <_svfiprintf_r+0x30>
 8010980:	230c      	movs	r3, #12
 8010982:	f8c8 3000 	str.w	r3, [r8]
 8010986:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801098a:	e0c8      	b.n	8010b1e <_svfiprintf_r+0x1c2>
 801098c:	2340      	movs	r3, #64	; 0x40
 801098e:	6163      	str	r3, [r4, #20]
 8010990:	2300      	movs	r3, #0
 8010992:	9309      	str	r3, [sp, #36]	; 0x24
 8010994:	2320      	movs	r3, #32
 8010996:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801099a:	2330      	movs	r3, #48	; 0x30
 801099c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80109a0:	9503      	str	r5, [sp, #12]
 80109a2:	f04f 0b01 	mov.w	fp, #1
 80109a6:	4637      	mov	r7, r6
 80109a8:	463d      	mov	r5, r7
 80109aa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80109ae:	b10b      	cbz	r3, 80109b4 <_svfiprintf_r+0x58>
 80109b0:	2b25      	cmp	r3, #37	; 0x25
 80109b2:	d13e      	bne.n	8010a32 <_svfiprintf_r+0xd6>
 80109b4:	ebb7 0a06 	subs.w	sl, r7, r6
 80109b8:	d00b      	beq.n	80109d2 <_svfiprintf_r+0x76>
 80109ba:	4653      	mov	r3, sl
 80109bc:	4632      	mov	r2, r6
 80109be:	4621      	mov	r1, r4
 80109c0:	4640      	mov	r0, r8
 80109c2:	f7ff ff71 	bl	80108a8 <__ssputs_r>
 80109c6:	3001      	adds	r0, #1
 80109c8:	f000 80a4 	beq.w	8010b14 <_svfiprintf_r+0x1b8>
 80109cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80109ce:	4453      	add	r3, sl
 80109d0:	9309      	str	r3, [sp, #36]	; 0x24
 80109d2:	783b      	ldrb	r3, [r7, #0]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	f000 809d 	beq.w	8010b14 <_svfiprintf_r+0x1b8>
 80109da:	2300      	movs	r3, #0
 80109dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80109e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80109e4:	9304      	str	r3, [sp, #16]
 80109e6:	9307      	str	r3, [sp, #28]
 80109e8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80109ec:	931a      	str	r3, [sp, #104]	; 0x68
 80109ee:	462f      	mov	r7, r5
 80109f0:	2205      	movs	r2, #5
 80109f2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80109f6:	4850      	ldr	r0, [pc, #320]	; (8010b38 <_svfiprintf_r+0x1dc>)
 80109f8:	f7ef fc1a 	bl	8000230 <memchr>
 80109fc:	9b04      	ldr	r3, [sp, #16]
 80109fe:	b9d0      	cbnz	r0, 8010a36 <_svfiprintf_r+0xda>
 8010a00:	06d9      	lsls	r1, r3, #27
 8010a02:	bf44      	itt	mi
 8010a04:	2220      	movmi	r2, #32
 8010a06:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010a0a:	071a      	lsls	r2, r3, #28
 8010a0c:	bf44      	itt	mi
 8010a0e:	222b      	movmi	r2, #43	; 0x2b
 8010a10:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8010a14:	782a      	ldrb	r2, [r5, #0]
 8010a16:	2a2a      	cmp	r2, #42	; 0x2a
 8010a18:	d015      	beq.n	8010a46 <_svfiprintf_r+0xea>
 8010a1a:	9a07      	ldr	r2, [sp, #28]
 8010a1c:	462f      	mov	r7, r5
 8010a1e:	2000      	movs	r0, #0
 8010a20:	250a      	movs	r5, #10
 8010a22:	4639      	mov	r1, r7
 8010a24:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010a28:	3b30      	subs	r3, #48	; 0x30
 8010a2a:	2b09      	cmp	r3, #9
 8010a2c:	d94d      	bls.n	8010aca <_svfiprintf_r+0x16e>
 8010a2e:	b1b8      	cbz	r0, 8010a60 <_svfiprintf_r+0x104>
 8010a30:	e00f      	b.n	8010a52 <_svfiprintf_r+0xf6>
 8010a32:	462f      	mov	r7, r5
 8010a34:	e7b8      	b.n	80109a8 <_svfiprintf_r+0x4c>
 8010a36:	4a40      	ldr	r2, [pc, #256]	; (8010b38 <_svfiprintf_r+0x1dc>)
 8010a38:	1a80      	subs	r0, r0, r2
 8010a3a:	fa0b f000 	lsl.w	r0, fp, r0
 8010a3e:	4318      	orrs	r0, r3
 8010a40:	9004      	str	r0, [sp, #16]
 8010a42:	463d      	mov	r5, r7
 8010a44:	e7d3      	b.n	80109ee <_svfiprintf_r+0x92>
 8010a46:	9a03      	ldr	r2, [sp, #12]
 8010a48:	1d11      	adds	r1, r2, #4
 8010a4a:	6812      	ldr	r2, [r2, #0]
 8010a4c:	9103      	str	r1, [sp, #12]
 8010a4e:	2a00      	cmp	r2, #0
 8010a50:	db01      	blt.n	8010a56 <_svfiprintf_r+0xfa>
 8010a52:	9207      	str	r2, [sp, #28]
 8010a54:	e004      	b.n	8010a60 <_svfiprintf_r+0x104>
 8010a56:	4252      	negs	r2, r2
 8010a58:	f043 0302 	orr.w	r3, r3, #2
 8010a5c:	9207      	str	r2, [sp, #28]
 8010a5e:	9304      	str	r3, [sp, #16]
 8010a60:	783b      	ldrb	r3, [r7, #0]
 8010a62:	2b2e      	cmp	r3, #46	; 0x2e
 8010a64:	d10c      	bne.n	8010a80 <_svfiprintf_r+0x124>
 8010a66:	787b      	ldrb	r3, [r7, #1]
 8010a68:	2b2a      	cmp	r3, #42	; 0x2a
 8010a6a:	d133      	bne.n	8010ad4 <_svfiprintf_r+0x178>
 8010a6c:	9b03      	ldr	r3, [sp, #12]
 8010a6e:	1d1a      	adds	r2, r3, #4
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	9203      	str	r2, [sp, #12]
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	bfb8      	it	lt
 8010a78:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010a7c:	3702      	adds	r7, #2
 8010a7e:	9305      	str	r3, [sp, #20]
 8010a80:	4d2e      	ldr	r5, [pc, #184]	; (8010b3c <_svfiprintf_r+0x1e0>)
 8010a82:	7839      	ldrb	r1, [r7, #0]
 8010a84:	2203      	movs	r2, #3
 8010a86:	4628      	mov	r0, r5
 8010a88:	f7ef fbd2 	bl	8000230 <memchr>
 8010a8c:	b138      	cbz	r0, 8010a9e <_svfiprintf_r+0x142>
 8010a8e:	2340      	movs	r3, #64	; 0x40
 8010a90:	1b40      	subs	r0, r0, r5
 8010a92:	fa03 f000 	lsl.w	r0, r3, r0
 8010a96:	9b04      	ldr	r3, [sp, #16]
 8010a98:	4303      	orrs	r3, r0
 8010a9a:	3701      	adds	r7, #1
 8010a9c:	9304      	str	r3, [sp, #16]
 8010a9e:	7839      	ldrb	r1, [r7, #0]
 8010aa0:	4827      	ldr	r0, [pc, #156]	; (8010b40 <_svfiprintf_r+0x1e4>)
 8010aa2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010aa6:	2206      	movs	r2, #6
 8010aa8:	1c7e      	adds	r6, r7, #1
 8010aaa:	f7ef fbc1 	bl	8000230 <memchr>
 8010aae:	2800      	cmp	r0, #0
 8010ab0:	d038      	beq.n	8010b24 <_svfiprintf_r+0x1c8>
 8010ab2:	4b24      	ldr	r3, [pc, #144]	; (8010b44 <_svfiprintf_r+0x1e8>)
 8010ab4:	bb13      	cbnz	r3, 8010afc <_svfiprintf_r+0x1a0>
 8010ab6:	9b03      	ldr	r3, [sp, #12]
 8010ab8:	3307      	adds	r3, #7
 8010aba:	f023 0307 	bic.w	r3, r3, #7
 8010abe:	3308      	adds	r3, #8
 8010ac0:	9303      	str	r3, [sp, #12]
 8010ac2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010ac4:	444b      	add	r3, r9
 8010ac6:	9309      	str	r3, [sp, #36]	; 0x24
 8010ac8:	e76d      	b.n	80109a6 <_svfiprintf_r+0x4a>
 8010aca:	fb05 3202 	mla	r2, r5, r2, r3
 8010ace:	2001      	movs	r0, #1
 8010ad0:	460f      	mov	r7, r1
 8010ad2:	e7a6      	b.n	8010a22 <_svfiprintf_r+0xc6>
 8010ad4:	2300      	movs	r3, #0
 8010ad6:	3701      	adds	r7, #1
 8010ad8:	9305      	str	r3, [sp, #20]
 8010ada:	4619      	mov	r1, r3
 8010adc:	250a      	movs	r5, #10
 8010ade:	4638      	mov	r0, r7
 8010ae0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ae4:	3a30      	subs	r2, #48	; 0x30
 8010ae6:	2a09      	cmp	r2, #9
 8010ae8:	d903      	bls.n	8010af2 <_svfiprintf_r+0x196>
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d0c8      	beq.n	8010a80 <_svfiprintf_r+0x124>
 8010aee:	9105      	str	r1, [sp, #20]
 8010af0:	e7c6      	b.n	8010a80 <_svfiprintf_r+0x124>
 8010af2:	fb05 2101 	mla	r1, r5, r1, r2
 8010af6:	2301      	movs	r3, #1
 8010af8:	4607      	mov	r7, r0
 8010afa:	e7f0      	b.n	8010ade <_svfiprintf_r+0x182>
 8010afc:	ab03      	add	r3, sp, #12
 8010afe:	9300      	str	r3, [sp, #0]
 8010b00:	4622      	mov	r2, r4
 8010b02:	4b11      	ldr	r3, [pc, #68]	; (8010b48 <_svfiprintf_r+0x1ec>)
 8010b04:	a904      	add	r1, sp, #16
 8010b06:	4640      	mov	r0, r8
 8010b08:	f7fd fdc8 	bl	800e69c <_printf_float>
 8010b0c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8010b10:	4681      	mov	r9, r0
 8010b12:	d1d6      	bne.n	8010ac2 <_svfiprintf_r+0x166>
 8010b14:	89a3      	ldrh	r3, [r4, #12]
 8010b16:	065b      	lsls	r3, r3, #25
 8010b18:	f53f af35 	bmi.w	8010986 <_svfiprintf_r+0x2a>
 8010b1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010b1e:	b01d      	add	sp, #116	; 0x74
 8010b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b24:	ab03      	add	r3, sp, #12
 8010b26:	9300      	str	r3, [sp, #0]
 8010b28:	4622      	mov	r2, r4
 8010b2a:	4b07      	ldr	r3, [pc, #28]	; (8010b48 <_svfiprintf_r+0x1ec>)
 8010b2c:	a904      	add	r1, sp, #16
 8010b2e:	4640      	mov	r0, r8
 8010b30:	f7fe f86a 	bl	800ec08 <_printf_i>
 8010b34:	e7ea      	b.n	8010b0c <_svfiprintf_r+0x1b0>
 8010b36:	bf00      	nop
 8010b38:	080137c4 	.word	0x080137c4
 8010b3c:	080137ca 	.word	0x080137ca
 8010b40:	080137ce 	.word	0x080137ce
 8010b44:	0800e69d 	.word	0x0800e69d
 8010b48:	080108a9 	.word	0x080108a9

08010b4c <_sbrk_r>:
 8010b4c:	b538      	push	{r3, r4, r5, lr}
 8010b4e:	4c06      	ldr	r4, [pc, #24]	; (8010b68 <_sbrk_r+0x1c>)
 8010b50:	2300      	movs	r3, #0
 8010b52:	4605      	mov	r5, r0
 8010b54:	4608      	mov	r0, r1
 8010b56:	6023      	str	r3, [r4, #0]
 8010b58:	f7f7 f88a 	bl	8007c70 <_sbrk>
 8010b5c:	1c43      	adds	r3, r0, #1
 8010b5e:	d102      	bne.n	8010b66 <_sbrk_r+0x1a>
 8010b60:	6823      	ldr	r3, [r4, #0]
 8010b62:	b103      	cbz	r3, 8010b66 <_sbrk_r+0x1a>
 8010b64:	602b      	str	r3, [r5, #0]
 8010b66:	bd38      	pop	{r3, r4, r5, pc}
 8010b68:	20002460 	.word	0x20002460

08010b6c <__sread>:
 8010b6c:	b510      	push	{r4, lr}
 8010b6e:	460c      	mov	r4, r1
 8010b70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010b74:	f000 f8e8 	bl	8010d48 <_read_r>
 8010b78:	2800      	cmp	r0, #0
 8010b7a:	bfab      	itete	ge
 8010b7c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010b7e:	89a3      	ldrhlt	r3, [r4, #12]
 8010b80:	181b      	addge	r3, r3, r0
 8010b82:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010b86:	bfac      	ite	ge
 8010b88:	6563      	strge	r3, [r4, #84]	; 0x54
 8010b8a:	81a3      	strhlt	r3, [r4, #12]
 8010b8c:	bd10      	pop	{r4, pc}

08010b8e <__swrite>:
 8010b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b92:	461f      	mov	r7, r3
 8010b94:	898b      	ldrh	r3, [r1, #12]
 8010b96:	05db      	lsls	r3, r3, #23
 8010b98:	4605      	mov	r5, r0
 8010b9a:	460c      	mov	r4, r1
 8010b9c:	4616      	mov	r6, r2
 8010b9e:	d505      	bpl.n	8010bac <__swrite+0x1e>
 8010ba0:	2302      	movs	r3, #2
 8010ba2:	2200      	movs	r2, #0
 8010ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010ba8:	f000 f868 	bl	8010c7c <_lseek_r>
 8010bac:	89a3      	ldrh	r3, [r4, #12]
 8010bae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010bb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010bb6:	81a3      	strh	r3, [r4, #12]
 8010bb8:	4632      	mov	r2, r6
 8010bba:	463b      	mov	r3, r7
 8010bbc:	4628      	mov	r0, r5
 8010bbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010bc2:	f000 b817 	b.w	8010bf4 <_write_r>

08010bc6 <__sseek>:
 8010bc6:	b510      	push	{r4, lr}
 8010bc8:	460c      	mov	r4, r1
 8010bca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bce:	f000 f855 	bl	8010c7c <_lseek_r>
 8010bd2:	1c43      	adds	r3, r0, #1
 8010bd4:	89a3      	ldrh	r3, [r4, #12]
 8010bd6:	bf15      	itete	ne
 8010bd8:	6560      	strne	r0, [r4, #84]	; 0x54
 8010bda:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010bde:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010be2:	81a3      	strheq	r3, [r4, #12]
 8010be4:	bf18      	it	ne
 8010be6:	81a3      	strhne	r3, [r4, #12]
 8010be8:	bd10      	pop	{r4, pc}

08010bea <__sclose>:
 8010bea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010bee:	f000 b813 	b.w	8010c18 <_close_r>
	...

08010bf4 <_write_r>:
 8010bf4:	b538      	push	{r3, r4, r5, lr}
 8010bf6:	4c07      	ldr	r4, [pc, #28]	; (8010c14 <_write_r+0x20>)
 8010bf8:	4605      	mov	r5, r0
 8010bfa:	4608      	mov	r0, r1
 8010bfc:	4611      	mov	r1, r2
 8010bfe:	2200      	movs	r2, #0
 8010c00:	6022      	str	r2, [r4, #0]
 8010c02:	461a      	mov	r2, r3
 8010c04:	f7f6 fd09 	bl	800761a <_write>
 8010c08:	1c43      	adds	r3, r0, #1
 8010c0a:	d102      	bne.n	8010c12 <_write_r+0x1e>
 8010c0c:	6823      	ldr	r3, [r4, #0]
 8010c0e:	b103      	cbz	r3, 8010c12 <_write_r+0x1e>
 8010c10:	602b      	str	r3, [r5, #0]
 8010c12:	bd38      	pop	{r3, r4, r5, pc}
 8010c14:	20002460 	.word	0x20002460

08010c18 <_close_r>:
 8010c18:	b538      	push	{r3, r4, r5, lr}
 8010c1a:	4c06      	ldr	r4, [pc, #24]	; (8010c34 <_close_r+0x1c>)
 8010c1c:	2300      	movs	r3, #0
 8010c1e:	4605      	mov	r5, r0
 8010c20:	4608      	mov	r0, r1
 8010c22:	6023      	str	r3, [r4, #0]
 8010c24:	f7f6 ffef 	bl	8007c06 <_close>
 8010c28:	1c43      	adds	r3, r0, #1
 8010c2a:	d102      	bne.n	8010c32 <_close_r+0x1a>
 8010c2c:	6823      	ldr	r3, [r4, #0]
 8010c2e:	b103      	cbz	r3, 8010c32 <_close_r+0x1a>
 8010c30:	602b      	str	r3, [r5, #0]
 8010c32:	bd38      	pop	{r3, r4, r5, pc}
 8010c34:	20002460 	.word	0x20002460

08010c38 <_fstat_r>:
 8010c38:	b538      	push	{r3, r4, r5, lr}
 8010c3a:	4c07      	ldr	r4, [pc, #28]	; (8010c58 <_fstat_r+0x20>)
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	4605      	mov	r5, r0
 8010c40:	4608      	mov	r0, r1
 8010c42:	4611      	mov	r1, r2
 8010c44:	6023      	str	r3, [r4, #0]
 8010c46:	f7f6 ffea 	bl	8007c1e <_fstat>
 8010c4a:	1c43      	adds	r3, r0, #1
 8010c4c:	d102      	bne.n	8010c54 <_fstat_r+0x1c>
 8010c4e:	6823      	ldr	r3, [r4, #0]
 8010c50:	b103      	cbz	r3, 8010c54 <_fstat_r+0x1c>
 8010c52:	602b      	str	r3, [r5, #0]
 8010c54:	bd38      	pop	{r3, r4, r5, pc}
 8010c56:	bf00      	nop
 8010c58:	20002460 	.word	0x20002460

08010c5c <_isatty_r>:
 8010c5c:	b538      	push	{r3, r4, r5, lr}
 8010c5e:	4c06      	ldr	r4, [pc, #24]	; (8010c78 <_isatty_r+0x1c>)
 8010c60:	2300      	movs	r3, #0
 8010c62:	4605      	mov	r5, r0
 8010c64:	4608      	mov	r0, r1
 8010c66:	6023      	str	r3, [r4, #0]
 8010c68:	f7f6 ffe9 	bl	8007c3e <_isatty>
 8010c6c:	1c43      	adds	r3, r0, #1
 8010c6e:	d102      	bne.n	8010c76 <_isatty_r+0x1a>
 8010c70:	6823      	ldr	r3, [r4, #0]
 8010c72:	b103      	cbz	r3, 8010c76 <_isatty_r+0x1a>
 8010c74:	602b      	str	r3, [r5, #0]
 8010c76:	bd38      	pop	{r3, r4, r5, pc}
 8010c78:	20002460 	.word	0x20002460

08010c7c <_lseek_r>:
 8010c7c:	b538      	push	{r3, r4, r5, lr}
 8010c7e:	4c07      	ldr	r4, [pc, #28]	; (8010c9c <_lseek_r+0x20>)
 8010c80:	4605      	mov	r5, r0
 8010c82:	4608      	mov	r0, r1
 8010c84:	4611      	mov	r1, r2
 8010c86:	2200      	movs	r2, #0
 8010c88:	6022      	str	r2, [r4, #0]
 8010c8a:	461a      	mov	r2, r3
 8010c8c:	f7f6 ffe2 	bl	8007c54 <_lseek>
 8010c90:	1c43      	adds	r3, r0, #1
 8010c92:	d102      	bne.n	8010c9a <_lseek_r+0x1e>
 8010c94:	6823      	ldr	r3, [r4, #0]
 8010c96:	b103      	cbz	r3, 8010c9a <_lseek_r+0x1e>
 8010c98:	602b      	str	r3, [r5, #0]
 8010c9a:	bd38      	pop	{r3, r4, r5, pc}
 8010c9c:	20002460 	.word	0x20002460

08010ca0 <__ascii_mbtowc>:
 8010ca0:	b082      	sub	sp, #8
 8010ca2:	b901      	cbnz	r1, 8010ca6 <__ascii_mbtowc+0x6>
 8010ca4:	a901      	add	r1, sp, #4
 8010ca6:	b142      	cbz	r2, 8010cba <__ascii_mbtowc+0x1a>
 8010ca8:	b14b      	cbz	r3, 8010cbe <__ascii_mbtowc+0x1e>
 8010caa:	7813      	ldrb	r3, [r2, #0]
 8010cac:	600b      	str	r3, [r1, #0]
 8010cae:	7812      	ldrb	r2, [r2, #0]
 8010cb0:	1c10      	adds	r0, r2, #0
 8010cb2:	bf18      	it	ne
 8010cb4:	2001      	movne	r0, #1
 8010cb6:	b002      	add	sp, #8
 8010cb8:	4770      	bx	lr
 8010cba:	4610      	mov	r0, r2
 8010cbc:	e7fb      	b.n	8010cb6 <__ascii_mbtowc+0x16>
 8010cbe:	f06f 0001 	mvn.w	r0, #1
 8010cc2:	e7f8      	b.n	8010cb6 <__ascii_mbtowc+0x16>

08010cc4 <memmove>:
 8010cc4:	4288      	cmp	r0, r1
 8010cc6:	b510      	push	{r4, lr}
 8010cc8:	eb01 0302 	add.w	r3, r1, r2
 8010ccc:	d807      	bhi.n	8010cde <memmove+0x1a>
 8010cce:	1e42      	subs	r2, r0, #1
 8010cd0:	4299      	cmp	r1, r3
 8010cd2:	d00a      	beq.n	8010cea <memmove+0x26>
 8010cd4:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010cd8:	f802 4f01 	strb.w	r4, [r2, #1]!
 8010cdc:	e7f8      	b.n	8010cd0 <memmove+0xc>
 8010cde:	4283      	cmp	r3, r0
 8010ce0:	d9f5      	bls.n	8010cce <memmove+0xa>
 8010ce2:	1881      	adds	r1, r0, r2
 8010ce4:	1ad2      	subs	r2, r2, r3
 8010ce6:	42d3      	cmn	r3, r2
 8010ce8:	d100      	bne.n	8010cec <memmove+0x28>
 8010cea:	bd10      	pop	{r4, pc}
 8010cec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010cf0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010cf4:	e7f7      	b.n	8010ce6 <memmove+0x22>

08010cf6 <__malloc_lock>:
 8010cf6:	4770      	bx	lr

08010cf8 <__malloc_unlock>:
 8010cf8:	4770      	bx	lr

08010cfa <_realloc_r>:
 8010cfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010cfc:	4607      	mov	r7, r0
 8010cfe:	4614      	mov	r4, r2
 8010d00:	460e      	mov	r6, r1
 8010d02:	b921      	cbnz	r1, 8010d0e <_realloc_r+0x14>
 8010d04:	4611      	mov	r1, r2
 8010d06:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8010d0a:	f7ff bd73 	b.w	80107f4 <_malloc_r>
 8010d0e:	b922      	cbnz	r2, 8010d1a <_realloc_r+0x20>
 8010d10:	f7ff fd22 	bl	8010758 <_free_r>
 8010d14:	4625      	mov	r5, r4
 8010d16:	4628      	mov	r0, r5
 8010d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010d1a:	f000 f834 	bl	8010d86 <_malloc_usable_size_r>
 8010d1e:	42a0      	cmp	r0, r4
 8010d20:	d20f      	bcs.n	8010d42 <_realloc_r+0x48>
 8010d22:	4621      	mov	r1, r4
 8010d24:	4638      	mov	r0, r7
 8010d26:	f7ff fd65 	bl	80107f4 <_malloc_r>
 8010d2a:	4605      	mov	r5, r0
 8010d2c:	2800      	cmp	r0, #0
 8010d2e:	d0f2      	beq.n	8010d16 <_realloc_r+0x1c>
 8010d30:	4631      	mov	r1, r6
 8010d32:	4622      	mov	r2, r4
 8010d34:	f7ff fa1c 	bl	8010170 <memcpy>
 8010d38:	4631      	mov	r1, r6
 8010d3a:	4638      	mov	r0, r7
 8010d3c:	f7ff fd0c 	bl	8010758 <_free_r>
 8010d40:	e7e9      	b.n	8010d16 <_realloc_r+0x1c>
 8010d42:	4635      	mov	r5, r6
 8010d44:	e7e7      	b.n	8010d16 <_realloc_r+0x1c>
	...

08010d48 <_read_r>:
 8010d48:	b538      	push	{r3, r4, r5, lr}
 8010d4a:	4c07      	ldr	r4, [pc, #28]	; (8010d68 <_read_r+0x20>)
 8010d4c:	4605      	mov	r5, r0
 8010d4e:	4608      	mov	r0, r1
 8010d50:	4611      	mov	r1, r2
 8010d52:	2200      	movs	r2, #0
 8010d54:	6022      	str	r2, [r4, #0]
 8010d56:	461a      	mov	r2, r3
 8010d58:	f7f6 ff38 	bl	8007bcc <_read>
 8010d5c:	1c43      	adds	r3, r0, #1
 8010d5e:	d102      	bne.n	8010d66 <_read_r+0x1e>
 8010d60:	6823      	ldr	r3, [r4, #0]
 8010d62:	b103      	cbz	r3, 8010d66 <_read_r+0x1e>
 8010d64:	602b      	str	r3, [r5, #0]
 8010d66:	bd38      	pop	{r3, r4, r5, pc}
 8010d68:	20002460 	.word	0x20002460

08010d6c <__ascii_wctomb>:
 8010d6c:	b149      	cbz	r1, 8010d82 <__ascii_wctomb+0x16>
 8010d6e:	2aff      	cmp	r2, #255	; 0xff
 8010d70:	bf85      	ittet	hi
 8010d72:	238a      	movhi	r3, #138	; 0x8a
 8010d74:	6003      	strhi	r3, [r0, #0]
 8010d76:	700a      	strbls	r2, [r1, #0]
 8010d78:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8010d7c:	bf98      	it	ls
 8010d7e:	2001      	movls	r0, #1
 8010d80:	4770      	bx	lr
 8010d82:	4608      	mov	r0, r1
 8010d84:	4770      	bx	lr

08010d86 <_malloc_usable_size_r>:
 8010d86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d8a:	1f18      	subs	r0, r3, #4
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	bfbc      	itt	lt
 8010d90:	580b      	ldrlt	r3, [r1, r0]
 8010d92:	18c0      	addlt	r0, r0, r3
 8010d94:	4770      	bx	lr
	...

08010d98 <pow>:
 8010d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d9c:	ed2d 8b04 	vpush	{d8-d9}
 8010da0:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8011074 <pow+0x2dc>
 8010da4:	b08d      	sub	sp, #52	; 0x34
 8010da6:	ec57 6b10 	vmov	r6, r7, d0
 8010daa:	ec55 4b11 	vmov	r4, r5, d1
 8010dae:	f000 f963 	bl	8011078 <__ieee754_pow>
 8010db2:	f999 3000 	ldrsb.w	r3, [r9]
 8010db6:	9300      	str	r3, [sp, #0]
 8010db8:	3301      	adds	r3, #1
 8010dba:	eeb0 8a40 	vmov.f32	s16, s0
 8010dbe:	eef0 8a60 	vmov.f32	s17, s1
 8010dc2:	46c8      	mov	r8, r9
 8010dc4:	d05f      	beq.n	8010e86 <pow+0xee>
 8010dc6:	4622      	mov	r2, r4
 8010dc8:	462b      	mov	r3, r5
 8010dca:	4620      	mov	r0, r4
 8010dcc:	4629      	mov	r1, r5
 8010dce:	f7ef fed5 	bl	8000b7c <__aeabi_dcmpun>
 8010dd2:	4683      	mov	fp, r0
 8010dd4:	2800      	cmp	r0, #0
 8010dd6:	d156      	bne.n	8010e86 <pow+0xee>
 8010dd8:	4632      	mov	r2, r6
 8010dda:	463b      	mov	r3, r7
 8010ddc:	4630      	mov	r0, r6
 8010dde:	4639      	mov	r1, r7
 8010de0:	f7ef fecc 	bl	8000b7c <__aeabi_dcmpun>
 8010de4:	9001      	str	r0, [sp, #4]
 8010de6:	b1e8      	cbz	r0, 8010e24 <pow+0x8c>
 8010de8:	2200      	movs	r2, #0
 8010dea:	2300      	movs	r3, #0
 8010dec:	4620      	mov	r0, r4
 8010dee:	4629      	mov	r1, r5
 8010df0:	f7ef fe92 	bl	8000b18 <__aeabi_dcmpeq>
 8010df4:	2800      	cmp	r0, #0
 8010df6:	d046      	beq.n	8010e86 <pow+0xee>
 8010df8:	2301      	movs	r3, #1
 8010dfa:	9302      	str	r3, [sp, #8]
 8010dfc:	4b96      	ldr	r3, [pc, #600]	; (8011058 <pow+0x2c0>)
 8010dfe:	9303      	str	r3, [sp, #12]
 8010e00:	4b96      	ldr	r3, [pc, #600]	; (801105c <pow+0x2c4>)
 8010e02:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8010e06:	2200      	movs	r2, #0
 8010e08:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010e0c:	9b00      	ldr	r3, [sp, #0]
 8010e0e:	2b02      	cmp	r3, #2
 8010e10:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010e14:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010e18:	d033      	beq.n	8010e82 <pow+0xea>
 8010e1a:	a802      	add	r0, sp, #8
 8010e1c:	f000 fefb 	bl	8011c16 <matherr>
 8010e20:	bb48      	cbnz	r0, 8010e76 <pow+0xde>
 8010e22:	e05d      	b.n	8010ee0 <pow+0x148>
 8010e24:	f04f 0a00 	mov.w	sl, #0
 8010e28:	f04f 0b00 	mov.w	fp, #0
 8010e2c:	4652      	mov	r2, sl
 8010e2e:	465b      	mov	r3, fp
 8010e30:	4630      	mov	r0, r6
 8010e32:	4639      	mov	r1, r7
 8010e34:	f7ef fe70 	bl	8000b18 <__aeabi_dcmpeq>
 8010e38:	ec4b ab19 	vmov	d9, sl, fp
 8010e3c:	2800      	cmp	r0, #0
 8010e3e:	d054      	beq.n	8010eea <pow+0x152>
 8010e40:	4652      	mov	r2, sl
 8010e42:	465b      	mov	r3, fp
 8010e44:	4620      	mov	r0, r4
 8010e46:	4629      	mov	r1, r5
 8010e48:	f7ef fe66 	bl	8000b18 <__aeabi_dcmpeq>
 8010e4c:	4680      	mov	r8, r0
 8010e4e:	b318      	cbz	r0, 8010e98 <pow+0x100>
 8010e50:	2301      	movs	r3, #1
 8010e52:	9302      	str	r3, [sp, #8]
 8010e54:	4b80      	ldr	r3, [pc, #512]	; (8011058 <pow+0x2c0>)
 8010e56:	9303      	str	r3, [sp, #12]
 8010e58:	9b01      	ldr	r3, [sp, #4]
 8010e5a:	930a      	str	r3, [sp, #40]	; 0x28
 8010e5c:	9b00      	ldr	r3, [sp, #0]
 8010e5e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010e62:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010e66:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d0d5      	beq.n	8010e1a <pow+0x82>
 8010e6e:	4b7b      	ldr	r3, [pc, #492]	; (801105c <pow+0x2c4>)
 8010e70:	2200      	movs	r2, #0
 8010e72:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010e76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e78:	b11b      	cbz	r3, 8010e82 <pow+0xea>
 8010e7a:	f7fd fb49 	bl	800e510 <__errno>
 8010e7e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010e80:	6003      	str	r3, [r0, #0]
 8010e82:	ed9d 8b08 	vldr	d8, [sp, #32]
 8010e86:	eeb0 0a48 	vmov.f32	s0, s16
 8010e8a:	eef0 0a68 	vmov.f32	s1, s17
 8010e8e:	b00d      	add	sp, #52	; 0x34
 8010e90:	ecbd 8b04 	vpop	{d8-d9}
 8010e94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e98:	ec45 4b10 	vmov	d0, r4, r5
 8010e9c:	f000 feb3 	bl	8011c06 <finite>
 8010ea0:	2800      	cmp	r0, #0
 8010ea2:	d0f0      	beq.n	8010e86 <pow+0xee>
 8010ea4:	4652      	mov	r2, sl
 8010ea6:	465b      	mov	r3, fp
 8010ea8:	4620      	mov	r0, r4
 8010eaa:	4629      	mov	r1, r5
 8010eac:	f7ef fe3e 	bl	8000b2c <__aeabi_dcmplt>
 8010eb0:	2800      	cmp	r0, #0
 8010eb2:	d0e8      	beq.n	8010e86 <pow+0xee>
 8010eb4:	2301      	movs	r3, #1
 8010eb6:	9302      	str	r3, [sp, #8]
 8010eb8:	4b67      	ldr	r3, [pc, #412]	; (8011058 <pow+0x2c0>)
 8010eba:	9303      	str	r3, [sp, #12]
 8010ebc:	f999 3000 	ldrsb.w	r3, [r9]
 8010ec0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8010ec4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010ec8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010ecc:	b913      	cbnz	r3, 8010ed4 <pow+0x13c>
 8010ece:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8010ed2:	e7a2      	b.n	8010e1a <pow+0x82>
 8010ed4:	4962      	ldr	r1, [pc, #392]	; (8011060 <pow+0x2c8>)
 8010ed6:	2000      	movs	r0, #0
 8010ed8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010edc:	2b02      	cmp	r3, #2
 8010ede:	d19c      	bne.n	8010e1a <pow+0x82>
 8010ee0:	f7fd fb16 	bl	800e510 <__errno>
 8010ee4:	2321      	movs	r3, #33	; 0x21
 8010ee6:	6003      	str	r3, [r0, #0]
 8010ee8:	e7c5      	b.n	8010e76 <pow+0xde>
 8010eea:	eeb0 0a48 	vmov.f32	s0, s16
 8010eee:	eef0 0a68 	vmov.f32	s1, s17
 8010ef2:	f000 fe88 	bl	8011c06 <finite>
 8010ef6:	9000      	str	r0, [sp, #0]
 8010ef8:	2800      	cmp	r0, #0
 8010efa:	f040 8081 	bne.w	8011000 <pow+0x268>
 8010efe:	ec47 6b10 	vmov	d0, r6, r7
 8010f02:	f000 fe80 	bl	8011c06 <finite>
 8010f06:	2800      	cmp	r0, #0
 8010f08:	d07a      	beq.n	8011000 <pow+0x268>
 8010f0a:	ec45 4b10 	vmov	d0, r4, r5
 8010f0e:	f000 fe7a 	bl	8011c06 <finite>
 8010f12:	2800      	cmp	r0, #0
 8010f14:	d074      	beq.n	8011000 <pow+0x268>
 8010f16:	ec53 2b18 	vmov	r2, r3, d8
 8010f1a:	ee18 0a10 	vmov	r0, s16
 8010f1e:	4619      	mov	r1, r3
 8010f20:	f7ef fe2c 	bl	8000b7c <__aeabi_dcmpun>
 8010f24:	f999 9000 	ldrsb.w	r9, [r9]
 8010f28:	4b4b      	ldr	r3, [pc, #300]	; (8011058 <pow+0x2c0>)
 8010f2a:	b1b0      	cbz	r0, 8010f5a <pow+0x1c2>
 8010f2c:	2201      	movs	r2, #1
 8010f2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010f32:	9b00      	ldr	r3, [sp, #0]
 8010f34:	930a      	str	r3, [sp, #40]	; 0x28
 8010f36:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010f3a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010f3e:	f1b9 0f00 	cmp.w	r9, #0
 8010f42:	d0c4      	beq.n	8010ece <pow+0x136>
 8010f44:	4652      	mov	r2, sl
 8010f46:	465b      	mov	r3, fp
 8010f48:	4650      	mov	r0, sl
 8010f4a:	4659      	mov	r1, fp
 8010f4c:	f7ef fca6 	bl	800089c <__aeabi_ddiv>
 8010f50:	f1b9 0f02 	cmp.w	r9, #2
 8010f54:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8010f58:	e7c1      	b.n	8010ede <pow+0x146>
 8010f5a:	2203      	movs	r2, #3
 8010f5c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8010f60:	900a      	str	r0, [sp, #40]	; 0x28
 8010f62:	4629      	mov	r1, r5
 8010f64:	4620      	mov	r0, r4
 8010f66:	2200      	movs	r2, #0
 8010f68:	4b3e      	ldr	r3, [pc, #248]	; (8011064 <pow+0x2cc>)
 8010f6a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8010f6e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8010f72:	f7ef fb69 	bl	8000648 <__aeabi_dmul>
 8010f76:	4604      	mov	r4, r0
 8010f78:	460d      	mov	r5, r1
 8010f7a:	f1b9 0f00 	cmp.w	r9, #0
 8010f7e:	d124      	bne.n	8010fca <pow+0x232>
 8010f80:	4b39      	ldr	r3, [pc, #228]	; (8011068 <pow+0x2d0>)
 8010f82:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8010f86:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010f8a:	4630      	mov	r0, r6
 8010f8c:	4652      	mov	r2, sl
 8010f8e:	465b      	mov	r3, fp
 8010f90:	4639      	mov	r1, r7
 8010f92:	f7ef fdcb 	bl	8000b2c <__aeabi_dcmplt>
 8010f96:	2800      	cmp	r0, #0
 8010f98:	d056      	beq.n	8011048 <pow+0x2b0>
 8010f9a:	ec45 4b10 	vmov	d0, r4, r5
 8010f9e:	f000 fe47 	bl	8011c30 <rint>
 8010fa2:	4622      	mov	r2, r4
 8010fa4:	462b      	mov	r3, r5
 8010fa6:	ec51 0b10 	vmov	r0, r1, d0
 8010faa:	f7ef fdb5 	bl	8000b18 <__aeabi_dcmpeq>
 8010fae:	b920      	cbnz	r0, 8010fba <pow+0x222>
 8010fb0:	4b2e      	ldr	r3, [pc, #184]	; (801106c <pow+0x2d4>)
 8010fb2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8010fb6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010fba:	f998 3000 	ldrsb.w	r3, [r8]
 8010fbe:	2b02      	cmp	r3, #2
 8010fc0:	d142      	bne.n	8011048 <pow+0x2b0>
 8010fc2:	f7fd faa5 	bl	800e510 <__errno>
 8010fc6:	2322      	movs	r3, #34	; 0x22
 8010fc8:	e78d      	b.n	8010ee6 <pow+0x14e>
 8010fca:	4b29      	ldr	r3, [pc, #164]	; (8011070 <pow+0x2d8>)
 8010fcc:	2200      	movs	r2, #0
 8010fce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8010fd2:	4630      	mov	r0, r6
 8010fd4:	4652      	mov	r2, sl
 8010fd6:	465b      	mov	r3, fp
 8010fd8:	4639      	mov	r1, r7
 8010fda:	f7ef fda7 	bl	8000b2c <__aeabi_dcmplt>
 8010fde:	2800      	cmp	r0, #0
 8010fe0:	d0eb      	beq.n	8010fba <pow+0x222>
 8010fe2:	ec45 4b10 	vmov	d0, r4, r5
 8010fe6:	f000 fe23 	bl	8011c30 <rint>
 8010fea:	4622      	mov	r2, r4
 8010fec:	462b      	mov	r3, r5
 8010fee:	ec51 0b10 	vmov	r0, r1, d0
 8010ff2:	f7ef fd91 	bl	8000b18 <__aeabi_dcmpeq>
 8010ff6:	2800      	cmp	r0, #0
 8010ff8:	d1df      	bne.n	8010fba <pow+0x222>
 8010ffa:	2200      	movs	r2, #0
 8010ffc:	4b18      	ldr	r3, [pc, #96]	; (8011060 <pow+0x2c8>)
 8010ffe:	e7da      	b.n	8010fb6 <pow+0x21e>
 8011000:	2200      	movs	r2, #0
 8011002:	2300      	movs	r3, #0
 8011004:	ec51 0b18 	vmov	r0, r1, d8
 8011008:	f7ef fd86 	bl	8000b18 <__aeabi_dcmpeq>
 801100c:	2800      	cmp	r0, #0
 801100e:	f43f af3a 	beq.w	8010e86 <pow+0xee>
 8011012:	ec47 6b10 	vmov	d0, r6, r7
 8011016:	f000 fdf6 	bl	8011c06 <finite>
 801101a:	2800      	cmp	r0, #0
 801101c:	f43f af33 	beq.w	8010e86 <pow+0xee>
 8011020:	ec45 4b10 	vmov	d0, r4, r5
 8011024:	f000 fdef 	bl	8011c06 <finite>
 8011028:	2800      	cmp	r0, #0
 801102a:	f43f af2c 	beq.w	8010e86 <pow+0xee>
 801102e:	2304      	movs	r3, #4
 8011030:	9302      	str	r3, [sp, #8]
 8011032:	4b09      	ldr	r3, [pc, #36]	; (8011058 <pow+0x2c0>)
 8011034:	9303      	str	r3, [sp, #12]
 8011036:	2300      	movs	r3, #0
 8011038:	930a      	str	r3, [sp, #40]	; 0x28
 801103a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 801103e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8011042:	ed8d 9b08 	vstr	d9, [sp, #32]
 8011046:	e7b8      	b.n	8010fba <pow+0x222>
 8011048:	a802      	add	r0, sp, #8
 801104a:	f000 fde4 	bl	8011c16 <matherr>
 801104e:	2800      	cmp	r0, #0
 8011050:	f47f af11 	bne.w	8010e76 <pow+0xde>
 8011054:	e7b5      	b.n	8010fc2 <pow+0x22a>
 8011056:	bf00      	nop
 8011058:	080138e0 	.word	0x080138e0
 801105c:	3ff00000 	.word	0x3ff00000
 8011060:	fff00000 	.word	0xfff00000
 8011064:	3fe00000 	.word	0x3fe00000
 8011068:	47efffff 	.word	0x47efffff
 801106c:	c7efffff 	.word	0xc7efffff
 8011070:	7ff00000 	.word	0x7ff00000
 8011074:	200019c4 	.word	0x200019c4

08011078 <__ieee754_pow>:
 8011078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801107c:	b091      	sub	sp, #68	; 0x44
 801107e:	ed8d 1b00 	vstr	d1, [sp]
 8011082:	e9dd 2900 	ldrd	r2, r9, [sp]
 8011086:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801108a:	ea58 0302 	orrs.w	r3, r8, r2
 801108e:	ec57 6b10 	vmov	r6, r7, d0
 8011092:	f000 84be 	beq.w	8011a12 <__ieee754_pow+0x99a>
 8011096:	4b7a      	ldr	r3, [pc, #488]	; (8011280 <__ieee754_pow+0x208>)
 8011098:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801109c:	429c      	cmp	r4, r3
 801109e:	463d      	mov	r5, r7
 80110a0:	ee10 aa10 	vmov	sl, s0
 80110a4:	dc09      	bgt.n	80110ba <__ieee754_pow+0x42>
 80110a6:	d103      	bne.n	80110b0 <__ieee754_pow+0x38>
 80110a8:	b93e      	cbnz	r6, 80110ba <__ieee754_pow+0x42>
 80110aa:	45a0      	cmp	r8, r4
 80110ac:	dc0d      	bgt.n	80110ca <__ieee754_pow+0x52>
 80110ae:	e001      	b.n	80110b4 <__ieee754_pow+0x3c>
 80110b0:	4598      	cmp	r8, r3
 80110b2:	dc02      	bgt.n	80110ba <__ieee754_pow+0x42>
 80110b4:	4598      	cmp	r8, r3
 80110b6:	d10e      	bne.n	80110d6 <__ieee754_pow+0x5e>
 80110b8:	b16a      	cbz	r2, 80110d6 <__ieee754_pow+0x5e>
 80110ba:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80110be:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80110c2:	ea54 030a 	orrs.w	r3, r4, sl
 80110c6:	f000 84a4 	beq.w	8011a12 <__ieee754_pow+0x99a>
 80110ca:	486e      	ldr	r0, [pc, #440]	; (8011284 <__ieee754_pow+0x20c>)
 80110cc:	b011      	add	sp, #68	; 0x44
 80110ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80110d2:	f000 bda5 	b.w	8011c20 <nan>
 80110d6:	2d00      	cmp	r5, #0
 80110d8:	da53      	bge.n	8011182 <__ieee754_pow+0x10a>
 80110da:	4b6b      	ldr	r3, [pc, #428]	; (8011288 <__ieee754_pow+0x210>)
 80110dc:	4598      	cmp	r8, r3
 80110de:	dc4d      	bgt.n	801117c <__ieee754_pow+0x104>
 80110e0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80110e4:	4598      	cmp	r8, r3
 80110e6:	dd4c      	ble.n	8011182 <__ieee754_pow+0x10a>
 80110e8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80110ec:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80110f0:	2b14      	cmp	r3, #20
 80110f2:	dd26      	ble.n	8011142 <__ieee754_pow+0xca>
 80110f4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80110f8:	fa22 f103 	lsr.w	r1, r2, r3
 80110fc:	fa01 f303 	lsl.w	r3, r1, r3
 8011100:	4293      	cmp	r3, r2
 8011102:	d13e      	bne.n	8011182 <__ieee754_pow+0x10a>
 8011104:	f001 0101 	and.w	r1, r1, #1
 8011108:	f1c1 0b02 	rsb	fp, r1, #2
 801110c:	2a00      	cmp	r2, #0
 801110e:	d15b      	bne.n	80111c8 <__ieee754_pow+0x150>
 8011110:	4b5b      	ldr	r3, [pc, #364]	; (8011280 <__ieee754_pow+0x208>)
 8011112:	4598      	cmp	r8, r3
 8011114:	d124      	bne.n	8011160 <__ieee754_pow+0xe8>
 8011116:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801111a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 801111e:	ea53 030a 	orrs.w	r3, r3, sl
 8011122:	f000 8476 	beq.w	8011a12 <__ieee754_pow+0x99a>
 8011126:	4b59      	ldr	r3, [pc, #356]	; (801128c <__ieee754_pow+0x214>)
 8011128:	429c      	cmp	r4, r3
 801112a:	dd2d      	ble.n	8011188 <__ieee754_pow+0x110>
 801112c:	f1b9 0f00 	cmp.w	r9, #0
 8011130:	f280 8473 	bge.w	8011a1a <__ieee754_pow+0x9a2>
 8011134:	2000      	movs	r0, #0
 8011136:	2100      	movs	r1, #0
 8011138:	ec41 0b10 	vmov	d0, r0, r1
 801113c:	b011      	add	sp, #68	; 0x44
 801113e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011142:	2a00      	cmp	r2, #0
 8011144:	d13e      	bne.n	80111c4 <__ieee754_pow+0x14c>
 8011146:	f1c3 0314 	rsb	r3, r3, #20
 801114a:	fa48 f103 	asr.w	r1, r8, r3
 801114e:	fa01 f303 	lsl.w	r3, r1, r3
 8011152:	4543      	cmp	r3, r8
 8011154:	f040 8469 	bne.w	8011a2a <__ieee754_pow+0x9b2>
 8011158:	f001 0101 	and.w	r1, r1, #1
 801115c:	f1c1 0b02 	rsb	fp, r1, #2
 8011160:	4b4b      	ldr	r3, [pc, #300]	; (8011290 <__ieee754_pow+0x218>)
 8011162:	4598      	cmp	r8, r3
 8011164:	d118      	bne.n	8011198 <__ieee754_pow+0x120>
 8011166:	f1b9 0f00 	cmp.w	r9, #0
 801116a:	f280 845a 	bge.w	8011a22 <__ieee754_pow+0x9aa>
 801116e:	4948      	ldr	r1, [pc, #288]	; (8011290 <__ieee754_pow+0x218>)
 8011170:	4632      	mov	r2, r6
 8011172:	463b      	mov	r3, r7
 8011174:	2000      	movs	r0, #0
 8011176:	f7ef fb91 	bl	800089c <__aeabi_ddiv>
 801117a:	e7dd      	b.n	8011138 <__ieee754_pow+0xc0>
 801117c:	f04f 0b02 	mov.w	fp, #2
 8011180:	e7c4      	b.n	801110c <__ieee754_pow+0x94>
 8011182:	f04f 0b00 	mov.w	fp, #0
 8011186:	e7c1      	b.n	801110c <__ieee754_pow+0x94>
 8011188:	f1b9 0f00 	cmp.w	r9, #0
 801118c:	dad2      	bge.n	8011134 <__ieee754_pow+0xbc>
 801118e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8011192:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011196:	e7cf      	b.n	8011138 <__ieee754_pow+0xc0>
 8011198:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 801119c:	d106      	bne.n	80111ac <__ieee754_pow+0x134>
 801119e:	4632      	mov	r2, r6
 80111a0:	463b      	mov	r3, r7
 80111a2:	4610      	mov	r0, r2
 80111a4:	4619      	mov	r1, r3
 80111a6:	f7ef fa4f 	bl	8000648 <__aeabi_dmul>
 80111aa:	e7c5      	b.n	8011138 <__ieee754_pow+0xc0>
 80111ac:	4b39      	ldr	r3, [pc, #228]	; (8011294 <__ieee754_pow+0x21c>)
 80111ae:	4599      	cmp	r9, r3
 80111b0:	d10a      	bne.n	80111c8 <__ieee754_pow+0x150>
 80111b2:	2d00      	cmp	r5, #0
 80111b4:	db08      	blt.n	80111c8 <__ieee754_pow+0x150>
 80111b6:	ec47 6b10 	vmov	d0, r6, r7
 80111ba:	b011      	add	sp, #68	; 0x44
 80111bc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111c0:	f000 bc68 	b.w	8011a94 <__ieee754_sqrt>
 80111c4:	f04f 0b00 	mov.w	fp, #0
 80111c8:	ec47 6b10 	vmov	d0, r6, r7
 80111cc:	f000 fd12 	bl	8011bf4 <fabs>
 80111d0:	ec51 0b10 	vmov	r0, r1, d0
 80111d4:	f1ba 0f00 	cmp.w	sl, #0
 80111d8:	d127      	bne.n	801122a <__ieee754_pow+0x1b2>
 80111da:	b124      	cbz	r4, 80111e6 <__ieee754_pow+0x16e>
 80111dc:	4b2c      	ldr	r3, [pc, #176]	; (8011290 <__ieee754_pow+0x218>)
 80111de:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80111e2:	429a      	cmp	r2, r3
 80111e4:	d121      	bne.n	801122a <__ieee754_pow+0x1b2>
 80111e6:	f1b9 0f00 	cmp.w	r9, #0
 80111ea:	da05      	bge.n	80111f8 <__ieee754_pow+0x180>
 80111ec:	4602      	mov	r2, r0
 80111ee:	460b      	mov	r3, r1
 80111f0:	2000      	movs	r0, #0
 80111f2:	4927      	ldr	r1, [pc, #156]	; (8011290 <__ieee754_pow+0x218>)
 80111f4:	f7ef fb52 	bl	800089c <__aeabi_ddiv>
 80111f8:	2d00      	cmp	r5, #0
 80111fa:	da9d      	bge.n	8011138 <__ieee754_pow+0xc0>
 80111fc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8011200:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011204:	ea54 030b 	orrs.w	r3, r4, fp
 8011208:	d108      	bne.n	801121c <__ieee754_pow+0x1a4>
 801120a:	4602      	mov	r2, r0
 801120c:	460b      	mov	r3, r1
 801120e:	4610      	mov	r0, r2
 8011210:	4619      	mov	r1, r3
 8011212:	f7ef f861 	bl	80002d8 <__aeabi_dsub>
 8011216:	4602      	mov	r2, r0
 8011218:	460b      	mov	r3, r1
 801121a:	e7ac      	b.n	8011176 <__ieee754_pow+0xfe>
 801121c:	f1bb 0f01 	cmp.w	fp, #1
 8011220:	d18a      	bne.n	8011138 <__ieee754_pow+0xc0>
 8011222:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011226:	4619      	mov	r1, r3
 8011228:	e786      	b.n	8011138 <__ieee754_pow+0xc0>
 801122a:	0fed      	lsrs	r5, r5, #31
 801122c:	1e6b      	subs	r3, r5, #1
 801122e:	930d      	str	r3, [sp, #52]	; 0x34
 8011230:	ea5b 0303 	orrs.w	r3, fp, r3
 8011234:	d102      	bne.n	801123c <__ieee754_pow+0x1c4>
 8011236:	4632      	mov	r2, r6
 8011238:	463b      	mov	r3, r7
 801123a:	e7e8      	b.n	801120e <__ieee754_pow+0x196>
 801123c:	4b16      	ldr	r3, [pc, #88]	; (8011298 <__ieee754_pow+0x220>)
 801123e:	4598      	cmp	r8, r3
 8011240:	f340 80fe 	ble.w	8011440 <__ieee754_pow+0x3c8>
 8011244:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8011248:	4598      	cmp	r8, r3
 801124a:	dd0a      	ble.n	8011262 <__ieee754_pow+0x1ea>
 801124c:	4b0f      	ldr	r3, [pc, #60]	; (801128c <__ieee754_pow+0x214>)
 801124e:	429c      	cmp	r4, r3
 8011250:	dc0d      	bgt.n	801126e <__ieee754_pow+0x1f6>
 8011252:	f1b9 0f00 	cmp.w	r9, #0
 8011256:	f6bf af6d 	bge.w	8011134 <__ieee754_pow+0xbc>
 801125a:	a307      	add	r3, pc, #28	; (adr r3, 8011278 <__ieee754_pow+0x200>)
 801125c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011260:	e79f      	b.n	80111a2 <__ieee754_pow+0x12a>
 8011262:	4b0e      	ldr	r3, [pc, #56]	; (801129c <__ieee754_pow+0x224>)
 8011264:	429c      	cmp	r4, r3
 8011266:	ddf4      	ble.n	8011252 <__ieee754_pow+0x1da>
 8011268:	4b09      	ldr	r3, [pc, #36]	; (8011290 <__ieee754_pow+0x218>)
 801126a:	429c      	cmp	r4, r3
 801126c:	dd18      	ble.n	80112a0 <__ieee754_pow+0x228>
 801126e:	f1b9 0f00 	cmp.w	r9, #0
 8011272:	dcf2      	bgt.n	801125a <__ieee754_pow+0x1e2>
 8011274:	e75e      	b.n	8011134 <__ieee754_pow+0xbc>
 8011276:	bf00      	nop
 8011278:	8800759c 	.word	0x8800759c
 801127c:	7e37e43c 	.word	0x7e37e43c
 8011280:	7ff00000 	.word	0x7ff00000
 8011284:	080137c9 	.word	0x080137c9
 8011288:	433fffff 	.word	0x433fffff
 801128c:	3fefffff 	.word	0x3fefffff
 8011290:	3ff00000 	.word	0x3ff00000
 8011294:	3fe00000 	.word	0x3fe00000
 8011298:	41e00000 	.word	0x41e00000
 801129c:	3feffffe 	.word	0x3feffffe
 80112a0:	2200      	movs	r2, #0
 80112a2:	4b63      	ldr	r3, [pc, #396]	; (8011430 <__ieee754_pow+0x3b8>)
 80112a4:	f7ef f818 	bl	80002d8 <__aeabi_dsub>
 80112a8:	a355      	add	r3, pc, #340	; (adr r3, 8011400 <__ieee754_pow+0x388>)
 80112aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ae:	4604      	mov	r4, r0
 80112b0:	460d      	mov	r5, r1
 80112b2:	f7ef f9c9 	bl	8000648 <__aeabi_dmul>
 80112b6:	a354      	add	r3, pc, #336	; (adr r3, 8011408 <__ieee754_pow+0x390>)
 80112b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112bc:	4606      	mov	r6, r0
 80112be:	460f      	mov	r7, r1
 80112c0:	4620      	mov	r0, r4
 80112c2:	4629      	mov	r1, r5
 80112c4:	f7ef f9c0 	bl	8000648 <__aeabi_dmul>
 80112c8:	2200      	movs	r2, #0
 80112ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80112ce:	4b59      	ldr	r3, [pc, #356]	; (8011434 <__ieee754_pow+0x3bc>)
 80112d0:	4620      	mov	r0, r4
 80112d2:	4629      	mov	r1, r5
 80112d4:	f7ef f9b8 	bl	8000648 <__aeabi_dmul>
 80112d8:	4602      	mov	r2, r0
 80112da:	460b      	mov	r3, r1
 80112dc:	a14c      	add	r1, pc, #304	; (adr r1, 8011410 <__ieee754_pow+0x398>)
 80112de:	e9d1 0100 	ldrd	r0, r1, [r1]
 80112e2:	f7ee fff9 	bl	80002d8 <__aeabi_dsub>
 80112e6:	4622      	mov	r2, r4
 80112e8:	462b      	mov	r3, r5
 80112ea:	f7ef f9ad 	bl	8000648 <__aeabi_dmul>
 80112ee:	4602      	mov	r2, r0
 80112f0:	460b      	mov	r3, r1
 80112f2:	2000      	movs	r0, #0
 80112f4:	4950      	ldr	r1, [pc, #320]	; (8011438 <__ieee754_pow+0x3c0>)
 80112f6:	f7ee ffef 	bl	80002d8 <__aeabi_dsub>
 80112fa:	4622      	mov	r2, r4
 80112fc:	462b      	mov	r3, r5
 80112fe:	4680      	mov	r8, r0
 8011300:	4689      	mov	r9, r1
 8011302:	4620      	mov	r0, r4
 8011304:	4629      	mov	r1, r5
 8011306:	f7ef f99f 	bl	8000648 <__aeabi_dmul>
 801130a:	4602      	mov	r2, r0
 801130c:	460b      	mov	r3, r1
 801130e:	4640      	mov	r0, r8
 8011310:	4649      	mov	r1, r9
 8011312:	f7ef f999 	bl	8000648 <__aeabi_dmul>
 8011316:	a340      	add	r3, pc, #256	; (adr r3, 8011418 <__ieee754_pow+0x3a0>)
 8011318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801131c:	f7ef f994 	bl	8000648 <__aeabi_dmul>
 8011320:	4602      	mov	r2, r0
 8011322:	460b      	mov	r3, r1
 8011324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8011328:	f7ee ffd6 	bl	80002d8 <__aeabi_dsub>
 801132c:	4602      	mov	r2, r0
 801132e:	460b      	mov	r3, r1
 8011330:	4604      	mov	r4, r0
 8011332:	460d      	mov	r5, r1
 8011334:	4630      	mov	r0, r6
 8011336:	4639      	mov	r1, r7
 8011338:	f7ee ffd0 	bl	80002dc <__adddf3>
 801133c:	2000      	movs	r0, #0
 801133e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011342:	4632      	mov	r2, r6
 8011344:	463b      	mov	r3, r7
 8011346:	f7ee ffc7 	bl	80002d8 <__aeabi_dsub>
 801134a:	4602      	mov	r2, r0
 801134c:	460b      	mov	r3, r1
 801134e:	4620      	mov	r0, r4
 8011350:	4629      	mov	r1, r5
 8011352:	f7ee ffc1 	bl	80002d8 <__aeabi_dsub>
 8011356:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011358:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 801135c:	4313      	orrs	r3, r2
 801135e:	4606      	mov	r6, r0
 8011360:	460f      	mov	r7, r1
 8011362:	f040 81eb 	bne.w	801173c <__ieee754_pow+0x6c4>
 8011366:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8011420 <__ieee754_pow+0x3a8>
 801136a:	e9dd 4500 	ldrd	r4, r5, [sp]
 801136e:	2400      	movs	r4, #0
 8011370:	4622      	mov	r2, r4
 8011372:	462b      	mov	r3, r5
 8011374:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011378:	ed8d 7b02 	vstr	d7, [sp, #8]
 801137c:	f7ee ffac 	bl	80002d8 <__aeabi_dsub>
 8011380:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011384:	f7ef f960 	bl	8000648 <__aeabi_dmul>
 8011388:	e9dd 2300 	ldrd	r2, r3, [sp]
 801138c:	4680      	mov	r8, r0
 801138e:	4689      	mov	r9, r1
 8011390:	4630      	mov	r0, r6
 8011392:	4639      	mov	r1, r7
 8011394:	f7ef f958 	bl	8000648 <__aeabi_dmul>
 8011398:	4602      	mov	r2, r0
 801139a:	460b      	mov	r3, r1
 801139c:	4640      	mov	r0, r8
 801139e:	4649      	mov	r1, r9
 80113a0:	f7ee ff9c 	bl	80002dc <__adddf3>
 80113a4:	4622      	mov	r2, r4
 80113a6:	462b      	mov	r3, r5
 80113a8:	4680      	mov	r8, r0
 80113aa:	4689      	mov	r9, r1
 80113ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80113b0:	f7ef f94a 	bl	8000648 <__aeabi_dmul>
 80113b4:	460b      	mov	r3, r1
 80113b6:	4604      	mov	r4, r0
 80113b8:	460d      	mov	r5, r1
 80113ba:	4602      	mov	r2, r0
 80113bc:	4649      	mov	r1, r9
 80113be:	4640      	mov	r0, r8
 80113c0:	e9cd 4500 	strd	r4, r5, [sp]
 80113c4:	f7ee ff8a 	bl	80002dc <__adddf3>
 80113c8:	4b1c      	ldr	r3, [pc, #112]	; (801143c <__ieee754_pow+0x3c4>)
 80113ca:	4299      	cmp	r1, r3
 80113cc:	4606      	mov	r6, r0
 80113ce:	460f      	mov	r7, r1
 80113d0:	468b      	mov	fp, r1
 80113d2:	f340 82f7 	ble.w	80119c4 <__ieee754_pow+0x94c>
 80113d6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80113da:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80113de:	4303      	orrs	r3, r0
 80113e0:	f000 81ea 	beq.w	80117b8 <__ieee754_pow+0x740>
 80113e4:	a310      	add	r3, pc, #64	; (adr r3, 8011428 <__ieee754_pow+0x3b0>)
 80113e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80113ee:	f7ef f92b 	bl	8000648 <__aeabi_dmul>
 80113f2:	a30d      	add	r3, pc, #52	; (adr r3, 8011428 <__ieee754_pow+0x3b0>)
 80113f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113f8:	e6d5      	b.n	80111a6 <__ieee754_pow+0x12e>
 80113fa:	bf00      	nop
 80113fc:	f3af 8000 	nop.w
 8011400:	60000000 	.word	0x60000000
 8011404:	3ff71547 	.word	0x3ff71547
 8011408:	f85ddf44 	.word	0xf85ddf44
 801140c:	3e54ae0b 	.word	0x3e54ae0b
 8011410:	55555555 	.word	0x55555555
 8011414:	3fd55555 	.word	0x3fd55555
 8011418:	652b82fe 	.word	0x652b82fe
 801141c:	3ff71547 	.word	0x3ff71547
 8011420:	00000000 	.word	0x00000000
 8011424:	bff00000 	.word	0xbff00000
 8011428:	8800759c 	.word	0x8800759c
 801142c:	7e37e43c 	.word	0x7e37e43c
 8011430:	3ff00000 	.word	0x3ff00000
 8011434:	3fd00000 	.word	0x3fd00000
 8011438:	3fe00000 	.word	0x3fe00000
 801143c:	408fffff 	.word	0x408fffff
 8011440:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8011444:	f04f 0200 	mov.w	r2, #0
 8011448:	da05      	bge.n	8011456 <__ieee754_pow+0x3de>
 801144a:	4bd3      	ldr	r3, [pc, #844]	; (8011798 <__ieee754_pow+0x720>)
 801144c:	f7ef f8fc 	bl	8000648 <__aeabi_dmul>
 8011450:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8011454:	460c      	mov	r4, r1
 8011456:	1523      	asrs	r3, r4, #20
 8011458:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801145c:	4413      	add	r3, r2
 801145e:	9309      	str	r3, [sp, #36]	; 0x24
 8011460:	4bce      	ldr	r3, [pc, #824]	; (801179c <__ieee754_pow+0x724>)
 8011462:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8011466:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 801146a:	429c      	cmp	r4, r3
 801146c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8011470:	dd08      	ble.n	8011484 <__ieee754_pow+0x40c>
 8011472:	4bcb      	ldr	r3, [pc, #812]	; (80117a0 <__ieee754_pow+0x728>)
 8011474:	429c      	cmp	r4, r3
 8011476:	f340 815e 	ble.w	8011736 <__ieee754_pow+0x6be>
 801147a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801147c:	3301      	adds	r3, #1
 801147e:	9309      	str	r3, [sp, #36]	; 0x24
 8011480:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8011484:	f04f 0a00 	mov.w	sl, #0
 8011488:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 801148c:	930c      	str	r3, [sp, #48]	; 0x30
 801148e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8011490:	4bc4      	ldr	r3, [pc, #784]	; (80117a4 <__ieee754_pow+0x72c>)
 8011492:	4413      	add	r3, r2
 8011494:	ed93 7b00 	vldr	d7, [r3]
 8011498:	4629      	mov	r1, r5
 801149a:	ec53 2b17 	vmov	r2, r3, d7
 801149e:	ed8d 7b06 	vstr	d7, [sp, #24]
 80114a2:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80114a6:	f7ee ff17 	bl	80002d8 <__aeabi_dsub>
 80114aa:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80114ae:	4606      	mov	r6, r0
 80114b0:	460f      	mov	r7, r1
 80114b2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80114b6:	f7ee ff11 	bl	80002dc <__adddf3>
 80114ba:	4602      	mov	r2, r0
 80114bc:	460b      	mov	r3, r1
 80114be:	2000      	movs	r0, #0
 80114c0:	49b9      	ldr	r1, [pc, #740]	; (80117a8 <__ieee754_pow+0x730>)
 80114c2:	f7ef f9eb 	bl	800089c <__aeabi_ddiv>
 80114c6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80114ca:	4602      	mov	r2, r0
 80114cc:	460b      	mov	r3, r1
 80114ce:	4630      	mov	r0, r6
 80114d0:	4639      	mov	r1, r7
 80114d2:	f7ef f8b9 	bl	8000648 <__aeabi_dmul>
 80114d6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80114da:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80114de:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80114e2:	2300      	movs	r3, #0
 80114e4:	9302      	str	r3, [sp, #8]
 80114e6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80114ea:	106d      	asrs	r5, r5, #1
 80114ec:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80114f0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80114f4:	2200      	movs	r2, #0
 80114f6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80114fa:	4640      	mov	r0, r8
 80114fc:	4649      	mov	r1, r9
 80114fe:	4614      	mov	r4, r2
 8011500:	461d      	mov	r5, r3
 8011502:	f7ef f8a1 	bl	8000648 <__aeabi_dmul>
 8011506:	4602      	mov	r2, r0
 8011508:	460b      	mov	r3, r1
 801150a:	4630      	mov	r0, r6
 801150c:	4639      	mov	r1, r7
 801150e:	f7ee fee3 	bl	80002d8 <__aeabi_dsub>
 8011512:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011516:	4606      	mov	r6, r0
 8011518:	460f      	mov	r7, r1
 801151a:	4620      	mov	r0, r4
 801151c:	4629      	mov	r1, r5
 801151e:	f7ee fedb 	bl	80002d8 <__aeabi_dsub>
 8011522:	4602      	mov	r2, r0
 8011524:	460b      	mov	r3, r1
 8011526:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 801152a:	f7ee fed5 	bl	80002d8 <__aeabi_dsub>
 801152e:	4642      	mov	r2, r8
 8011530:	464b      	mov	r3, r9
 8011532:	f7ef f889 	bl	8000648 <__aeabi_dmul>
 8011536:	4602      	mov	r2, r0
 8011538:	460b      	mov	r3, r1
 801153a:	4630      	mov	r0, r6
 801153c:	4639      	mov	r1, r7
 801153e:	f7ee fecb 	bl	80002d8 <__aeabi_dsub>
 8011542:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8011546:	f7ef f87f 	bl	8000648 <__aeabi_dmul>
 801154a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801154e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011552:	4610      	mov	r0, r2
 8011554:	4619      	mov	r1, r3
 8011556:	f7ef f877 	bl	8000648 <__aeabi_dmul>
 801155a:	a37b      	add	r3, pc, #492	; (adr r3, 8011748 <__ieee754_pow+0x6d0>)
 801155c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011560:	4604      	mov	r4, r0
 8011562:	460d      	mov	r5, r1
 8011564:	f7ef f870 	bl	8000648 <__aeabi_dmul>
 8011568:	a379      	add	r3, pc, #484	; (adr r3, 8011750 <__ieee754_pow+0x6d8>)
 801156a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801156e:	f7ee feb5 	bl	80002dc <__adddf3>
 8011572:	4622      	mov	r2, r4
 8011574:	462b      	mov	r3, r5
 8011576:	f7ef f867 	bl	8000648 <__aeabi_dmul>
 801157a:	a377      	add	r3, pc, #476	; (adr r3, 8011758 <__ieee754_pow+0x6e0>)
 801157c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011580:	f7ee feac 	bl	80002dc <__adddf3>
 8011584:	4622      	mov	r2, r4
 8011586:	462b      	mov	r3, r5
 8011588:	f7ef f85e 	bl	8000648 <__aeabi_dmul>
 801158c:	a374      	add	r3, pc, #464	; (adr r3, 8011760 <__ieee754_pow+0x6e8>)
 801158e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011592:	f7ee fea3 	bl	80002dc <__adddf3>
 8011596:	4622      	mov	r2, r4
 8011598:	462b      	mov	r3, r5
 801159a:	f7ef f855 	bl	8000648 <__aeabi_dmul>
 801159e:	a372      	add	r3, pc, #456	; (adr r3, 8011768 <__ieee754_pow+0x6f0>)
 80115a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115a4:	f7ee fe9a 	bl	80002dc <__adddf3>
 80115a8:	4622      	mov	r2, r4
 80115aa:	462b      	mov	r3, r5
 80115ac:	f7ef f84c 	bl	8000648 <__aeabi_dmul>
 80115b0:	a36f      	add	r3, pc, #444	; (adr r3, 8011770 <__ieee754_pow+0x6f8>)
 80115b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115b6:	f7ee fe91 	bl	80002dc <__adddf3>
 80115ba:	4622      	mov	r2, r4
 80115bc:	4606      	mov	r6, r0
 80115be:	460f      	mov	r7, r1
 80115c0:	462b      	mov	r3, r5
 80115c2:	4620      	mov	r0, r4
 80115c4:	4629      	mov	r1, r5
 80115c6:	f7ef f83f 	bl	8000648 <__aeabi_dmul>
 80115ca:	4602      	mov	r2, r0
 80115cc:	460b      	mov	r3, r1
 80115ce:	4630      	mov	r0, r6
 80115d0:	4639      	mov	r1, r7
 80115d2:	f7ef f839 	bl	8000648 <__aeabi_dmul>
 80115d6:	4642      	mov	r2, r8
 80115d8:	4604      	mov	r4, r0
 80115da:	460d      	mov	r5, r1
 80115dc:	464b      	mov	r3, r9
 80115de:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80115e2:	f7ee fe7b 	bl	80002dc <__adddf3>
 80115e6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80115ea:	f7ef f82d 	bl	8000648 <__aeabi_dmul>
 80115ee:	4622      	mov	r2, r4
 80115f0:	462b      	mov	r3, r5
 80115f2:	f7ee fe73 	bl	80002dc <__adddf3>
 80115f6:	4642      	mov	r2, r8
 80115f8:	4606      	mov	r6, r0
 80115fa:	460f      	mov	r7, r1
 80115fc:	464b      	mov	r3, r9
 80115fe:	4640      	mov	r0, r8
 8011600:	4649      	mov	r1, r9
 8011602:	f7ef f821 	bl	8000648 <__aeabi_dmul>
 8011606:	2200      	movs	r2, #0
 8011608:	4b68      	ldr	r3, [pc, #416]	; (80117ac <__ieee754_pow+0x734>)
 801160a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801160e:	f7ee fe65 	bl	80002dc <__adddf3>
 8011612:	4632      	mov	r2, r6
 8011614:	463b      	mov	r3, r7
 8011616:	f7ee fe61 	bl	80002dc <__adddf3>
 801161a:	9802      	ldr	r0, [sp, #8]
 801161c:	460d      	mov	r5, r1
 801161e:	4604      	mov	r4, r0
 8011620:	4602      	mov	r2, r0
 8011622:	460b      	mov	r3, r1
 8011624:	4640      	mov	r0, r8
 8011626:	4649      	mov	r1, r9
 8011628:	f7ef f80e 	bl	8000648 <__aeabi_dmul>
 801162c:	2200      	movs	r2, #0
 801162e:	4680      	mov	r8, r0
 8011630:	4689      	mov	r9, r1
 8011632:	4b5e      	ldr	r3, [pc, #376]	; (80117ac <__ieee754_pow+0x734>)
 8011634:	4620      	mov	r0, r4
 8011636:	4629      	mov	r1, r5
 8011638:	f7ee fe4e 	bl	80002d8 <__aeabi_dsub>
 801163c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8011640:	f7ee fe4a 	bl	80002d8 <__aeabi_dsub>
 8011644:	4602      	mov	r2, r0
 8011646:	460b      	mov	r3, r1
 8011648:	4630      	mov	r0, r6
 801164a:	4639      	mov	r1, r7
 801164c:	f7ee fe44 	bl	80002d8 <__aeabi_dsub>
 8011650:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8011654:	f7ee fff8 	bl	8000648 <__aeabi_dmul>
 8011658:	4622      	mov	r2, r4
 801165a:	4606      	mov	r6, r0
 801165c:	460f      	mov	r7, r1
 801165e:	462b      	mov	r3, r5
 8011660:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011664:	f7ee fff0 	bl	8000648 <__aeabi_dmul>
 8011668:	4602      	mov	r2, r0
 801166a:	460b      	mov	r3, r1
 801166c:	4630      	mov	r0, r6
 801166e:	4639      	mov	r1, r7
 8011670:	f7ee fe34 	bl	80002dc <__adddf3>
 8011674:	4606      	mov	r6, r0
 8011676:	460f      	mov	r7, r1
 8011678:	4602      	mov	r2, r0
 801167a:	460b      	mov	r3, r1
 801167c:	4640      	mov	r0, r8
 801167e:	4649      	mov	r1, r9
 8011680:	f7ee fe2c 	bl	80002dc <__adddf3>
 8011684:	9802      	ldr	r0, [sp, #8]
 8011686:	a33c      	add	r3, pc, #240	; (adr r3, 8011778 <__ieee754_pow+0x700>)
 8011688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801168c:	4604      	mov	r4, r0
 801168e:	460d      	mov	r5, r1
 8011690:	f7ee ffda 	bl	8000648 <__aeabi_dmul>
 8011694:	4642      	mov	r2, r8
 8011696:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801169a:	464b      	mov	r3, r9
 801169c:	4620      	mov	r0, r4
 801169e:	4629      	mov	r1, r5
 80116a0:	f7ee fe1a 	bl	80002d8 <__aeabi_dsub>
 80116a4:	4602      	mov	r2, r0
 80116a6:	460b      	mov	r3, r1
 80116a8:	4630      	mov	r0, r6
 80116aa:	4639      	mov	r1, r7
 80116ac:	f7ee fe14 	bl	80002d8 <__aeabi_dsub>
 80116b0:	a333      	add	r3, pc, #204	; (adr r3, 8011780 <__ieee754_pow+0x708>)
 80116b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116b6:	f7ee ffc7 	bl	8000648 <__aeabi_dmul>
 80116ba:	a333      	add	r3, pc, #204	; (adr r3, 8011788 <__ieee754_pow+0x710>)
 80116bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116c0:	4606      	mov	r6, r0
 80116c2:	460f      	mov	r7, r1
 80116c4:	4620      	mov	r0, r4
 80116c6:	4629      	mov	r1, r5
 80116c8:	f7ee ffbe 	bl	8000648 <__aeabi_dmul>
 80116cc:	4602      	mov	r2, r0
 80116ce:	460b      	mov	r3, r1
 80116d0:	4630      	mov	r0, r6
 80116d2:	4639      	mov	r1, r7
 80116d4:	f7ee fe02 	bl	80002dc <__adddf3>
 80116d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80116da:	4b35      	ldr	r3, [pc, #212]	; (80117b0 <__ieee754_pow+0x738>)
 80116dc:	4413      	add	r3, r2
 80116de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116e2:	f7ee fdfb 	bl	80002dc <__adddf3>
 80116e6:	4604      	mov	r4, r0
 80116e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80116ea:	460d      	mov	r5, r1
 80116ec:	f7ee ff42 	bl	8000574 <__aeabi_i2d>
 80116f0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80116f2:	4b30      	ldr	r3, [pc, #192]	; (80117b4 <__ieee754_pow+0x73c>)
 80116f4:	4413      	add	r3, r2
 80116f6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80116fa:	4606      	mov	r6, r0
 80116fc:	460f      	mov	r7, r1
 80116fe:	4622      	mov	r2, r4
 8011700:	462b      	mov	r3, r5
 8011702:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011706:	f7ee fde9 	bl	80002dc <__adddf3>
 801170a:	4642      	mov	r2, r8
 801170c:	464b      	mov	r3, r9
 801170e:	f7ee fde5 	bl	80002dc <__adddf3>
 8011712:	4632      	mov	r2, r6
 8011714:	463b      	mov	r3, r7
 8011716:	f7ee fde1 	bl	80002dc <__adddf3>
 801171a:	9802      	ldr	r0, [sp, #8]
 801171c:	4632      	mov	r2, r6
 801171e:	463b      	mov	r3, r7
 8011720:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011724:	f7ee fdd8 	bl	80002d8 <__aeabi_dsub>
 8011728:	4642      	mov	r2, r8
 801172a:	464b      	mov	r3, r9
 801172c:	f7ee fdd4 	bl	80002d8 <__aeabi_dsub>
 8011730:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8011734:	e607      	b.n	8011346 <__ieee754_pow+0x2ce>
 8011736:	f04f 0a01 	mov.w	sl, #1
 801173a:	e6a5      	b.n	8011488 <__ieee754_pow+0x410>
 801173c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8011790 <__ieee754_pow+0x718>
 8011740:	e613      	b.n	801136a <__ieee754_pow+0x2f2>
 8011742:	bf00      	nop
 8011744:	f3af 8000 	nop.w
 8011748:	4a454eef 	.word	0x4a454eef
 801174c:	3fca7e28 	.word	0x3fca7e28
 8011750:	93c9db65 	.word	0x93c9db65
 8011754:	3fcd864a 	.word	0x3fcd864a
 8011758:	a91d4101 	.word	0xa91d4101
 801175c:	3fd17460 	.word	0x3fd17460
 8011760:	518f264d 	.word	0x518f264d
 8011764:	3fd55555 	.word	0x3fd55555
 8011768:	db6fabff 	.word	0xdb6fabff
 801176c:	3fdb6db6 	.word	0x3fdb6db6
 8011770:	33333303 	.word	0x33333303
 8011774:	3fe33333 	.word	0x3fe33333
 8011778:	e0000000 	.word	0xe0000000
 801177c:	3feec709 	.word	0x3feec709
 8011780:	dc3a03fd 	.word	0xdc3a03fd
 8011784:	3feec709 	.word	0x3feec709
 8011788:	145b01f5 	.word	0x145b01f5
 801178c:	be3e2fe0 	.word	0xbe3e2fe0
 8011790:	00000000 	.word	0x00000000
 8011794:	3ff00000 	.word	0x3ff00000
 8011798:	43400000 	.word	0x43400000
 801179c:	0003988e 	.word	0x0003988e
 80117a0:	000bb679 	.word	0x000bb679
 80117a4:	080138e8 	.word	0x080138e8
 80117a8:	3ff00000 	.word	0x3ff00000
 80117ac:	40080000 	.word	0x40080000
 80117b0:	08013908 	.word	0x08013908
 80117b4:	080138f8 	.word	0x080138f8
 80117b8:	a3b4      	add	r3, pc, #720	; (adr r3, 8011a8c <__ieee754_pow+0xa14>)
 80117ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117be:	4640      	mov	r0, r8
 80117c0:	4649      	mov	r1, r9
 80117c2:	f7ee fd8b 	bl	80002dc <__adddf3>
 80117c6:	4622      	mov	r2, r4
 80117c8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80117cc:	462b      	mov	r3, r5
 80117ce:	4630      	mov	r0, r6
 80117d0:	4639      	mov	r1, r7
 80117d2:	f7ee fd81 	bl	80002d8 <__aeabi_dsub>
 80117d6:	4602      	mov	r2, r0
 80117d8:	460b      	mov	r3, r1
 80117da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80117de:	f7ef f9c3 	bl	8000b68 <__aeabi_dcmpgt>
 80117e2:	2800      	cmp	r0, #0
 80117e4:	f47f adfe 	bne.w	80113e4 <__ieee754_pow+0x36c>
 80117e8:	4aa3      	ldr	r2, [pc, #652]	; (8011a78 <__ieee754_pow+0xa00>)
 80117ea:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80117ee:	4293      	cmp	r3, r2
 80117f0:	f340 810a 	ble.w	8011a08 <__ieee754_pow+0x990>
 80117f4:	151b      	asrs	r3, r3, #20
 80117f6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80117fa:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80117fe:	fa4a f303 	asr.w	r3, sl, r3
 8011802:	445b      	add	r3, fp
 8011804:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8011808:	4e9c      	ldr	r6, [pc, #624]	; (8011a7c <__ieee754_pow+0xa04>)
 801180a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801180e:	4116      	asrs	r6, r2
 8011810:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011814:	2000      	movs	r0, #0
 8011816:	ea23 0106 	bic.w	r1, r3, r6
 801181a:	f1c2 0214 	rsb	r2, r2, #20
 801181e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011822:	fa4a fa02 	asr.w	sl, sl, r2
 8011826:	f1bb 0f00 	cmp.w	fp, #0
 801182a:	4602      	mov	r2, r0
 801182c:	460b      	mov	r3, r1
 801182e:	4620      	mov	r0, r4
 8011830:	4629      	mov	r1, r5
 8011832:	bfb8      	it	lt
 8011834:	f1ca 0a00 	rsblt	sl, sl, #0
 8011838:	f7ee fd4e 	bl	80002d8 <__aeabi_dsub>
 801183c:	e9cd 0100 	strd	r0, r1, [sp]
 8011840:	4642      	mov	r2, r8
 8011842:	464b      	mov	r3, r9
 8011844:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011848:	f7ee fd48 	bl	80002dc <__adddf3>
 801184c:	2000      	movs	r0, #0
 801184e:	a378      	add	r3, pc, #480	; (adr r3, 8011a30 <__ieee754_pow+0x9b8>)
 8011850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011854:	4604      	mov	r4, r0
 8011856:	460d      	mov	r5, r1
 8011858:	f7ee fef6 	bl	8000648 <__aeabi_dmul>
 801185c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011860:	4606      	mov	r6, r0
 8011862:	460f      	mov	r7, r1
 8011864:	4620      	mov	r0, r4
 8011866:	4629      	mov	r1, r5
 8011868:	f7ee fd36 	bl	80002d8 <__aeabi_dsub>
 801186c:	4602      	mov	r2, r0
 801186e:	460b      	mov	r3, r1
 8011870:	4640      	mov	r0, r8
 8011872:	4649      	mov	r1, r9
 8011874:	f7ee fd30 	bl	80002d8 <__aeabi_dsub>
 8011878:	a36f      	add	r3, pc, #444	; (adr r3, 8011a38 <__ieee754_pow+0x9c0>)
 801187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801187e:	f7ee fee3 	bl	8000648 <__aeabi_dmul>
 8011882:	a36f      	add	r3, pc, #444	; (adr r3, 8011a40 <__ieee754_pow+0x9c8>)
 8011884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011888:	4680      	mov	r8, r0
 801188a:	4689      	mov	r9, r1
 801188c:	4620      	mov	r0, r4
 801188e:	4629      	mov	r1, r5
 8011890:	f7ee feda 	bl	8000648 <__aeabi_dmul>
 8011894:	4602      	mov	r2, r0
 8011896:	460b      	mov	r3, r1
 8011898:	4640      	mov	r0, r8
 801189a:	4649      	mov	r1, r9
 801189c:	f7ee fd1e 	bl	80002dc <__adddf3>
 80118a0:	4604      	mov	r4, r0
 80118a2:	460d      	mov	r5, r1
 80118a4:	4602      	mov	r2, r0
 80118a6:	460b      	mov	r3, r1
 80118a8:	4630      	mov	r0, r6
 80118aa:	4639      	mov	r1, r7
 80118ac:	f7ee fd16 	bl	80002dc <__adddf3>
 80118b0:	4632      	mov	r2, r6
 80118b2:	463b      	mov	r3, r7
 80118b4:	4680      	mov	r8, r0
 80118b6:	4689      	mov	r9, r1
 80118b8:	f7ee fd0e 	bl	80002d8 <__aeabi_dsub>
 80118bc:	4602      	mov	r2, r0
 80118be:	460b      	mov	r3, r1
 80118c0:	4620      	mov	r0, r4
 80118c2:	4629      	mov	r1, r5
 80118c4:	f7ee fd08 	bl	80002d8 <__aeabi_dsub>
 80118c8:	4642      	mov	r2, r8
 80118ca:	4606      	mov	r6, r0
 80118cc:	460f      	mov	r7, r1
 80118ce:	464b      	mov	r3, r9
 80118d0:	4640      	mov	r0, r8
 80118d2:	4649      	mov	r1, r9
 80118d4:	f7ee feb8 	bl	8000648 <__aeabi_dmul>
 80118d8:	a35b      	add	r3, pc, #364	; (adr r3, 8011a48 <__ieee754_pow+0x9d0>)
 80118da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118de:	4604      	mov	r4, r0
 80118e0:	460d      	mov	r5, r1
 80118e2:	f7ee feb1 	bl	8000648 <__aeabi_dmul>
 80118e6:	a35a      	add	r3, pc, #360	; (adr r3, 8011a50 <__ieee754_pow+0x9d8>)
 80118e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118ec:	f7ee fcf4 	bl	80002d8 <__aeabi_dsub>
 80118f0:	4622      	mov	r2, r4
 80118f2:	462b      	mov	r3, r5
 80118f4:	f7ee fea8 	bl	8000648 <__aeabi_dmul>
 80118f8:	a357      	add	r3, pc, #348	; (adr r3, 8011a58 <__ieee754_pow+0x9e0>)
 80118fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118fe:	f7ee fced 	bl	80002dc <__adddf3>
 8011902:	4622      	mov	r2, r4
 8011904:	462b      	mov	r3, r5
 8011906:	f7ee fe9f 	bl	8000648 <__aeabi_dmul>
 801190a:	a355      	add	r3, pc, #340	; (adr r3, 8011a60 <__ieee754_pow+0x9e8>)
 801190c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011910:	f7ee fce2 	bl	80002d8 <__aeabi_dsub>
 8011914:	4622      	mov	r2, r4
 8011916:	462b      	mov	r3, r5
 8011918:	f7ee fe96 	bl	8000648 <__aeabi_dmul>
 801191c:	a352      	add	r3, pc, #328	; (adr r3, 8011a68 <__ieee754_pow+0x9f0>)
 801191e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011922:	f7ee fcdb 	bl	80002dc <__adddf3>
 8011926:	4622      	mov	r2, r4
 8011928:	462b      	mov	r3, r5
 801192a:	f7ee fe8d 	bl	8000648 <__aeabi_dmul>
 801192e:	4602      	mov	r2, r0
 8011930:	460b      	mov	r3, r1
 8011932:	4640      	mov	r0, r8
 8011934:	4649      	mov	r1, r9
 8011936:	f7ee fccf 	bl	80002d8 <__aeabi_dsub>
 801193a:	4604      	mov	r4, r0
 801193c:	460d      	mov	r5, r1
 801193e:	4602      	mov	r2, r0
 8011940:	460b      	mov	r3, r1
 8011942:	4640      	mov	r0, r8
 8011944:	4649      	mov	r1, r9
 8011946:	f7ee fe7f 	bl	8000648 <__aeabi_dmul>
 801194a:	2200      	movs	r2, #0
 801194c:	e9cd 0100 	strd	r0, r1, [sp]
 8011950:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8011954:	4620      	mov	r0, r4
 8011956:	4629      	mov	r1, r5
 8011958:	f7ee fcbe 	bl	80002d8 <__aeabi_dsub>
 801195c:	4602      	mov	r2, r0
 801195e:	460b      	mov	r3, r1
 8011960:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011964:	f7ee ff9a 	bl	800089c <__aeabi_ddiv>
 8011968:	4632      	mov	r2, r6
 801196a:	4604      	mov	r4, r0
 801196c:	460d      	mov	r5, r1
 801196e:	463b      	mov	r3, r7
 8011970:	4640      	mov	r0, r8
 8011972:	4649      	mov	r1, r9
 8011974:	f7ee fe68 	bl	8000648 <__aeabi_dmul>
 8011978:	4632      	mov	r2, r6
 801197a:	463b      	mov	r3, r7
 801197c:	f7ee fcae 	bl	80002dc <__adddf3>
 8011980:	4602      	mov	r2, r0
 8011982:	460b      	mov	r3, r1
 8011984:	4620      	mov	r0, r4
 8011986:	4629      	mov	r1, r5
 8011988:	f7ee fca6 	bl	80002d8 <__aeabi_dsub>
 801198c:	4642      	mov	r2, r8
 801198e:	464b      	mov	r3, r9
 8011990:	f7ee fca2 	bl	80002d8 <__aeabi_dsub>
 8011994:	4602      	mov	r2, r0
 8011996:	460b      	mov	r3, r1
 8011998:	2000      	movs	r0, #0
 801199a:	4939      	ldr	r1, [pc, #228]	; (8011a80 <__ieee754_pow+0xa08>)
 801199c:	f7ee fc9c 	bl	80002d8 <__aeabi_dsub>
 80119a0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80119a4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80119a8:	4602      	mov	r2, r0
 80119aa:	460b      	mov	r3, r1
 80119ac:	da2f      	bge.n	8011a0e <__ieee754_pow+0x996>
 80119ae:	4650      	mov	r0, sl
 80119b0:	ec43 2b10 	vmov	d0, r2, r3
 80119b4:	f000 f9c0 	bl	8011d38 <scalbn>
 80119b8:	ec51 0b10 	vmov	r0, r1, d0
 80119bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80119c0:	f7ff bbf1 	b.w	80111a6 <__ieee754_pow+0x12e>
 80119c4:	4b2f      	ldr	r3, [pc, #188]	; (8011a84 <__ieee754_pow+0xa0c>)
 80119c6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80119ca:	429e      	cmp	r6, r3
 80119cc:	f77f af0c 	ble.w	80117e8 <__ieee754_pow+0x770>
 80119d0:	4b2d      	ldr	r3, [pc, #180]	; (8011a88 <__ieee754_pow+0xa10>)
 80119d2:	440b      	add	r3, r1
 80119d4:	4303      	orrs	r3, r0
 80119d6:	d00b      	beq.n	80119f0 <__ieee754_pow+0x978>
 80119d8:	a325      	add	r3, pc, #148	; (adr r3, 8011a70 <__ieee754_pow+0x9f8>)
 80119da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80119e2:	f7ee fe31 	bl	8000648 <__aeabi_dmul>
 80119e6:	a322      	add	r3, pc, #136	; (adr r3, 8011a70 <__ieee754_pow+0x9f8>)
 80119e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ec:	f7ff bbdb 	b.w	80111a6 <__ieee754_pow+0x12e>
 80119f0:	4622      	mov	r2, r4
 80119f2:	462b      	mov	r3, r5
 80119f4:	f7ee fc70 	bl	80002d8 <__aeabi_dsub>
 80119f8:	4642      	mov	r2, r8
 80119fa:	464b      	mov	r3, r9
 80119fc:	f7ef f8aa 	bl	8000b54 <__aeabi_dcmpge>
 8011a00:	2800      	cmp	r0, #0
 8011a02:	f43f aef1 	beq.w	80117e8 <__ieee754_pow+0x770>
 8011a06:	e7e7      	b.n	80119d8 <__ieee754_pow+0x960>
 8011a08:	f04f 0a00 	mov.w	sl, #0
 8011a0c:	e718      	b.n	8011840 <__ieee754_pow+0x7c8>
 8011a0e:	4621      	mov	r1, r4
 8011a10:	e7d4      	b.n	80119bc <__ieee754_pow+0x944>
 8011a12:	2000      	movs	r0, #0
 8011a14:	491a      	ldr	r1, [pc, #104]	; (8011a80 <__ieee754_pow+0xa08>)
 8011a16:	f7ff bb8f 	b.w	8011138 <__ieee754_pow+0xc0>
 8011a1a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011a1e:	f7ff bb8b 	b.w	8011138 <__ieee754_pow+0xc0>
 8011a22:	4630      	mov	r0, r6
 8011a24:	4639      	mov	r1, r7
 8011a26:	f7ff bb87 	b.w	8011138 <__ieee754_pow+0xc0>
 8011a2a:	4693      	mov	fp, r2
 8011a2c:	f7ff bb98 	b.w	8011160 <__ieee754_pow+0xe8>
 8011a30:	00000000 	.word	0x00000000
 8011a34:	3fe62e43 	.word	0x3fe62e43
 8011a38:	fefa39ef 	.word	0xfefa39ef
 8011a3c:	3fe62e42 	.word	0x3fe62e42
 8011a40:	0ca86c39 	.word	0x0ca86c39
 8011a44:	be205c61 	.word	0xbe205c61
 8011a48:	72bea4d0 	.word	0x72bea4d0
 8011a4c:	3e663769 	.word	0x3e663769
 8011a50:	c5d26bf1 	.word	0xc5d26bf1
 8011a54:	3ebbbd41 	.word	0x3ebbbd41
 8011a58:	af25de2c 	.word	0xaf25de2c
 8011a5c:	3f11566a 	.word	0x3f11566a
 8011a60:	16bebd93 	.word	0x16bebd93
 8011a64:	3f66c16c 	.word	0x3f66c16c
 8011a68:	5555553e 	.word	0x5555553e
 8011a6c:	3fc55555 	.word	0x3fc55555
 8011a70:	c2f8f359 	.word	0xc2f8f359
 8011a74:	01a56e1f 	.word	0x01a56e1f
 8011a78:	3fe00000 	.word	0x3fe00000
 8011a7c:	000fffff 	.word	0x000fffff
 8011a80:	3ff00000 	.word	0x3ff00000
 8011a84:	4090cbff 	.word	0x4090cbff
 8011a88:	3f6f3400 	.word	0x3f6f3400
 8011a8c:	652b82fe 	.word	0x652b82fe
 8011a90:	3c971547 	.word	0x3c971547

08011a94 <__ieee754_sqrt>:
 8011a94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a98:	4955      	ldr	r1, [pc, #340]	; (8011bf0 <__ieee754_sqrt+0x15c>)
 8011a9a:	ec55 4b10 	vmov	r4, r5, d0
 8011a9e:	43a9      	bics	r1, r5
 8011aa0:	462b      	mov	r3, r5
 8011aa2:	462a      	mov	r2, r5
 8011aa4:	d112      	bne.n	8011acc <__ieee754_sqrt+0x38>
 8011aa6:	ee10 2a10 	vmov	r2, s0
 8011aaa:	ee10 0a10 	vmov	r0, s0
 8011aae:	4629      	mov	r1, r5
 8011ab0:	f7ee fdca 	bl	8000648 <__aeabi_dmul>
 8011ab4:	4602      	mov	r2, r0
 8011ab6:	460b      	mov	r3, r1
 8011ab8:	4620      	mov	r0, r4
 8011aba:	4629      	mov	r1, r5
 8011abc:	f7ee fc0e 	bl	80002dc <__adddf3>
 8011ac0:	4604      	mov	r4, r0
 8011ac2:	460d      	mov	r5, r1
 8011ac4:	ec45 4b10 	vmov	d0, r4, r5
 8011ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011acc:	2d00      	cmp	r5, #0
 8011ace:	ee10 0a10 	vmov	r0, s0
 8011ad2:	4621      	mov	r1, r4
 8011ad4:	dc0f      	bgt.n	8011af6 <__ieee754_sqrt+0x62>
 8011ad6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011ada:	4330      	orrs	r0, r6
 8011adc:	d0f2      	beq.n	8011ac4 <__ieee754_sqrt+0x30>
 8011ade:	b155      	cbz	r5, 8011af6 <__ieee754_sqrt+0x62>
 8011ae0:	ee10 2a10 	vmov	r2, s0
 8011ae4:	4620      	mov	r0, r4
 8011ae6:	4629      	mov	r1, r5
 8011ae8:	f7ee fbf6 	bl	80002d8 <__aeabi_dsub>
 8011aec:	4602      	mov	r2, r0
 8011aee:	460b      	mov	r3, r1
 8011af0:	f7ee fed4 	bl	800089c <__aeabi_ddiv>
 8011af4:	e7e4      	b.n	8011ac0 <__ieee754_sqrt+0x2c>
 8011af6:	151b      	asrs	r3, r3, #20
 8011af8:	d073      	beq.n	8011be2 <__ieee754_sqrt+0x14e>
 8011afa:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8011afe:	07dd      	lsls	r5, r3, #31
 8011b00:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8011b04:	bf48      	it	mi
 8011b06:	0fc8      	lsrmi	r0, r1, #31
 8011b08:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8011b0c:	bf44      	itt	mi
 8011b0e:	0049      	lslmi	r1, r1, #1
 8011b10:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8011b14:	2500      	movs	r5, #0
 8011b16:	1058      	asrs	r0, r3, #1
 8011b18:	0fcb      	lsrs	r3, r1, #31
 8011b1a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8011b1e:	0049      	lsls	r1, r1, #1
 8011b20:	2316      	movs	r3, #22
 8011b22:	462c      	mov	r4, r5
 8011b24:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8011b28:	19a7      	adds	r7, r4, r6
 8011b2a:	4297      	cmp	r7, r2
 8011b2c:	bfde      	ittt	le
 8011b2e:	19bc      	addle	r4, r7, r6
 8011b30:	1bd2      	suble	r2, r2, r7
 8011b32:	19ad      	addle	r5, r5, r6
 8011b34:	0fcf      	lsrs	r7, r1, #31
 8011b36:	3b01      	subs	r3, #1
 8011b38:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8011b3c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011b40:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011b44:	d1f0      	bne.n	8011b28 <__ieee754_sqrt+0x94>
 8011b46:	f04f 0c20 	mov.w	ip, #32
 8011b4a:	469e      	mov	lr, r3
 8011b4c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011b50:	42a2      	cmp	r2, r4
 8011b52:	eb06 070e 	add.w	r7, r6, lr
 8011b56:	dc02      	bgt.n	8011b5e <__ieee754_sqrt+0xca>
 8011b58:	d112      	bne.n	8011b80 <__ieee754_sqrt+0xec>
 8011b5a:	428f      	cmp	r7, r1
 8011b5c:	d810      	bhi.n	8011b80 <__ieee754_sqrt+0xec>
 8011b5e:	2f00      	cmp	r7, #0
 8011b60:	eb07 0e06 	add.w	lr, r7, r6
 8011b64:	da42      	bge.n	8011bec <__ieee754_sqrt+0x158>
 8011b66:	f1be 0f00 	cmp.w	lr, #0
 8011b6a:	db3f      	blt.n	8011bec <__ieee754_sqrt+0x158>
 8011b6c:	f104 0801 	add.w	r8, r4, #1
 8011b70:	1b12      	subs	r2, r2, r4
 8011b72:	428f      	cmp	r7, r1
 8011b74:	bf88      	it	hi
 8011b76:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8011b7a:	1bc9      	subs	r1, r1, r7
 8011b7c:	4433      	add	r3, r6
 8011b7e:	4644      	mov	r4, r8
 8011b80:	0052      	lsls	r2, r2, #1
 8011b82:	f1bc 0c01 	subs.w	ip, ip, #1
 8011b86:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8011b8a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011b8e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8011b92:	d1dd      	bne.n	8011b50 <__ieee754_sqrt+0xbc>
 8011b94:	430a      	orrs	r2, r1
 8011b96:	d006      	beq.n	8011ba6 <__ieee754_sqrt+0x112>
 8011b98:	1c5c      	adds	r4, r3, #1
 8011b9a:	bf13      	iteet	ne
 8011b9c:	3301      	addne	r3, #1
 8011b9e:	3501      	addeq	r5, #1
 8011ba0:	4663      	moveq	r3, ip
 8011ba2:	f023 0301 	bicne.w	r3, r3, #1
 8011ba6:	106a      	asrs	r2, r5, #1
 8011ba8:	085b      	lsrs	r3, r3, #1
 8011baa:	07e9      	lsls	r1, r5, #31
 8011bac:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8011bb0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8011bb4:	bf48      	it	mi
 8011bb6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8011bba:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8011bbe:	461c      	mov	r4, r3
 8011bc0:	e780      	b.n	8011ac4 <__ieee754_sqrt+0x30>
 8011bc2:	0aca      	lsrs	r2, r1, #11
 8011bc4:	3815      	subs	r0, #21
 8011bc6:	0549      	lsls	r1, r1, #21
 8011bc8:	2a00      	cmp	r2, #0
 8011bca:	d0fa      	beq.n	8011bc2 <__ieee754_sqrt+0x12e>
 8011bcc:	02d6      	lsls	r6, r2, #11
 8011bce:	d50a      	bpl.n	8011be6 <__ieee754_sqrt+0x152>
 8011bd0:	f1c3 0420 	rsb	r4, r3, #32
 8011bd4:	fa21 f404 	lsr.w	r4, r1, r4
 8011bd8:	1e5d      	subs	r5, r3, #1
 8011bda:	4099      	lsls	r1, r3
 8011bdc:	4322      	orrs	r2, r4
 8011bde:	1b43      	subs	r3, r0, r5
 8011be0:	e78b      	b.n	8011afa <__ieee754_sqrt+0x66>
 8011be2:	4618      	mov	r0, r3
 8011be4:	e7f0      	b.n	8011bc8 <__ieee754_sqrt+0x134>
 8011be6:	0052      	lsls	r2, r2, #1
 8011be8:	3301      	adds	r3, #1
 8011bea:	e7ef      	b.n	8011bcc <__ieee754_sqrt+0x138>
 8011bec:	46a0      	mov	r8, r4
 8011bee:	e7bf      	b.n	8011b70 <__ieee754_sqrt+0xdc>
 8011bf0:	7ff00000 	.word	0x7ff00000

08011bf4 <fabs>:
 8011bf4:	ec51 0b10 	vmov	r0, r1, d0
 8011bf8:	ee10 2a10 	vmov	r2, s0
 8011bfc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011c00:	ec43 2b10 	vmov	d0, r2, r3
 8011c04:	4770      	bx	lr

08011c06 <finite>:
 8011c06:	ee10 3a90 	vmov	r3, s1
 8011c0a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8011c0e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011c12:	0fc0      	lsrs	r0, r0, #31
 8011c14:	4770      	bx	lr

08011c16 <matherr>:
 8011c16:	2000      	movs	r0, #0
 8011c18:	4770      	bx	lr
 8011c1a:	0000      	movs	r0, r0
 8011c1c:	0000      	movs	r0, r0
	...

08011c20 <nan>:
 8011c20:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8011c28 <nan+0x8>
 8011c24:	4770      	bx	lr
 8011c26:	bf00      	nop
 8011c28:	00000000 	.word	0x00000000
 8011c2c:	7ff80000 	.word	0x7ff80000

08011c30 <rint>:
 8011c30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011c32:	ec51 0b10 	vmov	r0, r1, d0
 8011c36:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011c3a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8011c3e:	2e13      	cmp	r6, #19
 8011c40:	460b      	mov	r3, r1
 8011c42:	ee10 4a10 	vmov	r4, s0
 8011c46:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8011c4a:	dc56      	bgt.n	8011cfa <rint+0xca>
 8011c4c:	2e00      	cmp	r6, #0
 8011c4e:	da2b      	bge.n	8011ca8 <rint+0x78>
 8011c50:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8011c54:	4302      	orrs	r2, r0
 8011c56:	d023      	beq.n	8011ca0 <rint+0x70>
 8011c58:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8011c5c:	4302      	orrs	r2, r0
 8011c5e:	4254      	negs	r4, r2
 8011c60:	4314      	orrs	r4, r2
 8011c62:	0c4b      	lsrs	r3, r1, #17
 8011c64:	0b24      	lsrs	r4, r4, #12
 8011c66:	045b      	lsls	r3, r3, #17
 8011c68:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8011c6c:	ea44 0103 	orr.w	r1, r4, r3
 8011c70:	460b      	mov	r3, r1
 8011c72:	492f      	ldr	r1, [pc, #188]	; (8011d30 <rint+0x100>)
 8011c74:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8011c78:	e9d1 6700 	ldrd	r6, r7, [r1]
 8011c7c:	4602      	mov	r2, r0
 8011c7e:	4639      	mov	r1, r7
 8011c80:	4630      	mov	r0, r6
 8011c82:	f7ee fb2b 	bl	80002dc <__adddf3>
 8011c86:	e9cd 0100 	strd	r0, r1, [sp]
 8011c8a:	463b      	mov	r3, r7
 8011c8c:	4632      	mov	r2, r6
 8011c8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011c92:	f7ee fb21 	bl	80002d8 <__aeabi_dsub>
 8011c96:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8011c9a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8011c9e:	4639      	mov	r1, r7
 8011ca0:	ec41 0b10 	vmov	d0, r0, r1
 8011ca4:	b003      	add	sp, #12
 8011ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011ca8:	4a22      	ldr	r2, [pc, #136]	; (8011d34 <rint+0x104>)
 8011caa:	4132      	asrs	r2, r6
 8011cac:	ea01 0702 	and.w	r7, r1, r2
 8011cb0:	4307      	orrs	r7, r0
 8011cb2:	d0f5      	beq.n	8011ca0 <rint+0x70>
 8011cb4:	0852      	lsrs	r2, r2, #1
 8011cb6:	4011      	ands	r1, r2
 8011cb8:	430c      	orrs	r4, r1
 8011cba:	d00b      	beq.n	8011cd4 <rint+0xa4>
 8011cbc:	ea23 0202 	bic.w	r2, r3, r2
 8011cc0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8011cc4:	2e13      	cmp	r6, #19
 8011cc6:	fa43 f306 	asr.w	r3, r3, r6
 8011cca:	bf0c      	ite	eq
 8011ccc:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8011cd0:	2400      	movne	r4, #0
 8011cd2:	4313      	orrs	r3, r2
 8011cd4:	4916      	ldr	r1, [pc, #88]	; (8011d30 <rint+0x100>)
 8011cd6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8011cda:	4622      	mov	r2, r4
 8011cdc:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011ce0:	4620      	mov	r0, r4
 8011ce2:	4629      	mov	r1, r5
 8011ce4:	f7ee fafa 	bl	80002dc <__adddf3>
 8011ce8:	e9cd 0100 	strd	r0, r1, [sp]
 8011cec:	4622      	mov	r2, r4
 8011cee:	462b      	mov	r3, r5
 8011cf0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8011cf4:	f7ee faf0 	bl	80002d8 <__aeabi_dsub>
 8011cf8:	e7d2      	b.n	8011ca0 <rint+0x70>
 8011cfa:	2e33      	cmp	r6, #51	; 0x33
 8011cfc:	dd07      	ble.n	8011d0e <rint+0xde>
 8011cfe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8011d02:	d1cd      	bne.n	8011ca0 <rint+0x70>
 8011d04:	ee10 2a10 	vmov	r2, s0
 8011d08:	f7ee fae8 	bl	80002dc <__adddf3>
 8011d0c:	e7c8      	b.n	8011ca0 <rint+0x70>
 8011d0e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8011d12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011d16:	40f2      	lsrs	r2, r6
 8011d18:	4210      	tst	r0, r2
 8011d1a:	d0c1      	beq.n	8011ca0 <rint+0x70>
 8011d1c:	0852      	lsrs	r2, r2, #1
 8011d1e:	4210      	tst	r0, r2
 8011d20:	bf1f      	itttt	ne
 8011d22:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8011d26:	ea20 0202 	bicne.w	r2, r0, r2
 8011d2a:	4134      	asrne	r4, r6
 8011d2c:	4314      	orrne	r4, r2
 8011d2e:	e7d1      	b.n	8011cd4 <rint+0xa4>
 8011d30:	08013918 	.word	0x08013918
 8011d34:	000fffff 	.word	0x000fffff

08011d38 <scalbn>:
 8011d38:	b570      	push	{r4, r5, r6, lr}
 8011d3a:	ec55 4b10 	vmov	r4, r5, d0
 8011d3e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8011d42:	4606      	mov	r6, r0
 8011d44:	462b      	mov	r3, r5
 8011d46:	b9aa      	cbnz	r2, 8011d74 <scalbn+0x3c>
 8011d48:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011d4c:	4323      	orrs	r3, r4
 8011d4e:	d03b      	beq.n	8011dc8 <scalbn+0x90>
 8011d50:	4b31      	ldr	r3, [pc, #196]	; (8011e18 <scalbn+0xe0>)
 8011d52:	4629      	mov	r1, r5
 8011d54:	2200      	movs	r2, #0
 8011d56:	ee10 0a10 	vmov	r0, s0
 8011d5a:	f7ee fc75 	bl	8000648 <__aeabi_dmul>
 8011d5e:	4b2f      	ldr	r3, [pc, #188]	; (8011e1c <scalbn+0xe4>)
 8011d60:	429e      	cmp	r6, r3
 8011d62:	4604      	mov	r4, r0
 8011d64:	460d      	mov	r5, r1
 8011d66:	da12      	bge.n	8011d8e <scalbn+0x56>
 8011d68:	a327      	add	r3, pc, #156	; (adr r3, 8011e08 <scalbn+0xd0>)
 8011d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d6e:	f7ee fc6b 	bl	8000648 <__aeabi_dmul>
 8011d72:	e009      	b.n	8011d88 <scalbn+0x50>
 8011d74:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8011d78:	428a      	cmp	r2, r1
 8011d7a:	d10c      	bne.n	8011d96 <scalbn+0x5e>
 8011d7c:	ee10 2a10 	vmov	r2, s0
 8011d80:	4620      	mov	r0, r4
 8011d82:	4629      	mov	r1, r5
 8011d84:	f7ee faaa 	bl	80002dc <__adddf3>
 8011d88:	4604      	mov	r4, r0
 8011d8a:	460d      	mov	r5, r1
 8011d8c:	e01c      	b.n	8011dc8 <scalbn+0x90>
 8011d8e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8011d92:	460b      	mov	r3, r1
 8011d94:	3a36      	subs	r2, #54	; 0x36
 8011d96:	4432      	add	r2, r6
 8011d98:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8011d9c:	428a      	cmp	r2, r1
 8011d9e:	dd0b      	ble.n	8011db8 <scalbn+0x80>
 8011da0:	ec45 4b11 	vmov	d1, r4, r5
 8011da4:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8011e10 <scalbn+0xd8>
 8011da8:	f000 f83c 	bl	8011e24 <copysign>
 8011dac:	a318      	add	r3, pc, #96	; (adr r3, 8011e10 <scalbn+0xd8>)
 8011dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011db2:	ec51 0b10 	vmov	r0, r1, d0
 8011db6:	e7da      	b.n	8011d6e <scalbn+0x36>
 8011db8:	2a00      	cmp	r2, #0
 8011dba:	dd08      	ble.n	8011dce <scalbn+0x96>
 8011dbc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011dc0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011dc4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011dc8:	ec45 4b10 	vmov	d0, r4, r5
 8011dcc:	bd70      	pop	{r4, r5, r6, pc}
 8011dce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8011dd2:	da0d      	bge.n	8011df0 <scalbn+0xb8>
 8011dd4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8011dd8:	429e      	cmp	r6, r3
 8011dda:	ec45 4b11 	vmov	d1, r4, r5
 8011dde:	dce1      	bgt.n	8011da4 <scalbn+0x6c>
 8011de0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8011e08 <scalbn+0xd0>
 8011de4:	f000 f81e 	bl	8011e24 <copysign>
 8011de8:	a307      	add	r3, pc, #28	; (adr r3, 8011e08 <scalbn+0xd0>)
 8011dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011dee:	e7e0      	b.n	8011db2 <scalbn+0x7a>
 8011df0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8011df4:	3236      	adds	r2, #54	; 0x36
 8011df6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8011dfa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8011dfe:	4620      	mov	r0, r4
 8011e00:	4629      	mov	r1, r5
 8011e02:	2200      	movs	r2, #0
 8011e04:	4b06      	ldr	r3, [pc, #24]	; (8011e20 <scalbn+0xe8>)
 8011e06:	e7b2      	b.n	8011d6e <scalbn+0x36>
 8011e08:	c2f8f359 	.word	0xc2f8f359
 8011e0c:	01a56e1f 	.word	0x01a56e1f
 8011e10:	8800759c 	.word	0x8800759c
 8011e14:	7e37e43c 	.word	0x7e37e43c
 8011e18:	43500000 	.word	0x43500000
 8011e1c:	ffff3cb0 	.word	0xffff3cb0
 8011e20:	3c900000 	.word	0x3c900000

08011e24 <copysign>:
 8011e24:	ec51 0b10 	vmov	r0, r1, d0
 8011e28:	ee11 0a90 	vmov	r0, s3
 8011e2c:	ee10 2a10 	vmov	r2, s0
 8011e30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8011e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8011e38:	ea41 0300 	orr.w	r3, r1, r0
 8011e3c:	ec43 2b10 	vmov	d0, r2, r3
 8011e40:	4770      	bx	lr
	...

08011e44 <_init>:
 8011e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e46:	bf00      	nop
 8011e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e4a:	bc08      	pop	{r3}
 8011e4c:	469e      	mov	lr, r3
 8011e4e:	4770      	bx	lr

08011e50 <_fini>:
 8011e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011e52:	bf00      	nop
 8011e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011e56:	bc08      	pop	{r3}
 8011e58:	469e      	mov	lr, r3
 8011e5a:	4770      	bx	lr
