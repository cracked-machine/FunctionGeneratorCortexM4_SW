
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010160  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010a0  08010340  08010340  00020340  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080113e0  080113e0  00031ec8  2**0
                  CONTENTS
  4 .ARM          00000000  080113e0  080113e0  00031ec8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080113e0  080113e0  00031ec8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080113e0  080113e0  000213e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080113e4  080113e4  000213e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001ec8  20000000  080113e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a84  20001ec8  080132b0  00031ec8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000294c  080132b0  0003294c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00031ec8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00039bf1  00000000  00000000  00031ef8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00006c22  00000000  00000000  0006bae9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002040  00000000  00000000  00072710  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c78  00000000  00000000  00074750  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00032f7f  00000000  00000000  000763c8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0002980a  00000000  00000000  000a9347  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00125626  00000000  00000000  000d2b51  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001f8177  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008d3c  00000000  00000000  001f81f4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001ec8 	.word	0x20001ec8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08010328 	.word	0x08010328

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001ecc 	.word	0x20001ecc
 800021c:	08010328 	.word	0x08010328

08000220 <strlen>:
 8000220:	4603      	mov	r3, r0
 8000222:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000226:	2a00      	cmp	r2, #0
 8000228:	d1fb      	bne.n	8000222 <strlen+0x2>
 800022a:	1a18      	subs	r0, r3, r0
 800022c:	3801      	subs	r0, #1
 800022e:	4770      	bx	lr

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800040e:	f1a4 0401 	sub.w	r4, r4, #1
 8000412:	d1e9      	bne.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <BiasMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMenu(eBiasMenu_Status pMenu)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d000      	beq.n	8000c0a <BiasMenu_DrawMenu+0x12>
		case ENABLE_BIAS_MENU:
			BiasMenu_DrawMainMenu();
			break;

		default:
			break;
 8000c08:	e002      	b.n	8000c10 <BiasMenu_DrawMenu+0x18>
			BiasMenu_DrawMainMenu();
 8000c0a:	f000 f805 	bl	8000c18 <BiasMenu_DrawMainMenu>
			break;
 8000c0e:	bf00      	nop

	}
}
 8000c10:	bf00      	nop
 8000c12:	3708      	adds	r7, #8
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}

08000c18 <BiasMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void BiasMenu_DrawMainMenu()
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("ADJUST DC BIAS", 	30, 10, WHITE, 3, BLACK);
 8000c1e:	2300      	movs	r3, #0
 8000c20:	9301      	str	r3, [sp, #4]
 8000c22:	2303      	movs	r3, #3
 8000c24:	9300      	str	r3, [sp, #0]
 8000c26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c2a:	220a      	movs	r2, #10
 8000c2c:	211e      	movs	r1, #30
 8000c2e:	4803      	ldr	r0, [pc, #12]	; (8000c3c <BiasMenu_DrawMainMenu+0x24>)
 8000c30:	f00c f8de 	bl	800cdf0 <ILI9341_Draw_Text>

}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	08010340 	.word	0x08010340

08000c40 <DM_Init>:
 *	@param None
 *	@retval None
 *
 */
void DM_Init()
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 8000c44:	f00c f926 	bl	800ce94 <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8000c48:	2003      	movs	r0, #3
 8000c4a:	f00c fd13 	bl	800d674 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 8000c4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000c52:	f00c fb27 	bl	800d2a4 <ILI9341_Fill_Screen>

}
 8000c56:	bf00      	nop
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <DM_PostInit>:
 *	@param None
 *	@retval None
 *
 */
void DM_PostInit()
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 8000c62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c66:	9301      	str	r3, [sp, #4]
 8000c68:	2301      	movs	r3, #1
 8000c6a:	9300      	str	r3, [sp, #0]
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	220a      	movs	r2, #10
 8000c70:	210a      	movs	r1, #10
 8000c72:	4807      	ldr	r0, [pc, #28]	; (8000c90 <DM_PostInit+0x34>)
 8000c74:	f00c f8bc 	bl	800cdf0 <ILI9341_Draw_Text>
	  HAL_Delay(500);
 8000c78:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000c7c:	f006 fe44 	bl	8007908 <HAL_Delay>

	  DM_RefreshScreen();
 8000c80:	f000 fa38 	bl	80010f4 <DM_RefreshScreen>
	  printf("Init Completed\n");
 8000c84:	4803      	ldr	r0, [pc, #12]	; (8000c94 <DM_PostInit+0x38>)
 8000c86:	f00d fbf7 	bl	800e478 <puts>
}
 8000c8a:	bf00      	nop
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	08010350 	.word	0x08010350
 8000c94:	08010360 	.word	0x08010360

08000c98 <_DisplayFormattedOutput>:
 *	@param None
 *	@retval None
 *
 */
void _DisplayFormattedOutput()
{
 8000c98:	b590      	push	{r4, r7, lr}
 8000c9a:	b099      	sub	sp, #100	; 0x64
 8000c9c:	af02      	add	r7, sp, #8
	char out_hertz[13] = "";
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	633b      	str	r3, [r7, #48]	; 0x30
 8000ca2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	721a      	strb	r2, [r3, #8]
	uint8_t out_hertz_x = 70;
 8000cae:	2346      	movs	r3, #70	; 0x46
 8000cb0:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
	uint8_t out_hertz_y = 40;
 8000cb4:	2328      	movs	r3, #40	; 0x28
 8000cb6:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52

	char out_vpp[16] = "";
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
 8000cbe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
	uint8_t out_vpp_x = 70;
 8000cca:	2346      	movs	r3, #70	; 0x46
 8000ccc:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
	uint8_t out_vpp_y = 70;
 8000cd0:	2346      	movs	r3, #70	; 0x46
 8000cd2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50

	char out_decibels[11] = "";
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	f107 0318 	add.w	r3, r7, #24
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	f8c3 2003 	str.w	r2, [r3, #3]
	uint8_t out_decibels_x = 70;
 8000ce6:	2346      	movs	r3, #70	; 0x46
 8000ce8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	uint8_t out_decibels_y = 100;
 8000cec:	2364      	movs	r3, #100	; 0x64
 8000cee:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e


	float volts_per_thou = 0.00075;
 8000cf2:	4b66      	ldr	r3, [pc, #408]	; (8000e8c <_DisplayFormattedOutput+0x1f4>)
 8000cf4:	64bb      	str	r3, [r7, #72]	; 0x48
	char out_dcvolts[10] = "";
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	60bb      	str	r3, [r7, #8]
 8000cfa:	f107 030c 	add.w	r3, r7, #12
 8000cfe:	2200      	movs	r2, #0
 8000d00:	601a      	str	r2, [r3, #0]
 8000d02:	809a      	strh	r2, [r3, #4]
	uint8_t out_dcvolts_x = 70;
 8000d04:	2346      	movs	r3, #70	; 0x46
 8000d06:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t out_dcvolts_y = 130;
 8000d0a:	2382      	movs	r3, #130	; 0x82
 8000d0c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	// display output in hertz
	snprintf(out_hertz, sizeof(out_hertz), "%4.2f Hz", SM_GetOutputInHertz());
 8000d10:	f003 fcf2 	bl	80046f8 <SM_GetOutputInHertz>
 8000d14:	ee10 3a10 	vmov	r3, s0
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fc3d 	bl	8000598 <__aeabi_f2d>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	460c      	mov	r4, r1
 8000d22:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000d26:	e9cd 3400 	strd	r3, r4, [sp]
 8000d2a:	4a59      	ldr	r2, [pc, #356]	; (8000e90 <_DisplayFormattedOutput+0x1f8>)
 8000d2c:	210d      	movs	r1, #13
 8000d2e:	f00d fbab 	bl	800e488 <sniprintf>
	ILI9341_Draw_Text(out_hertz, out_hertz_x, out_hertz_y, BLACK, 3, WHITE);
 8000d32:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8000d36:	b299      	uxth	r1, r3
 8000d38:	f897 3052 	ldrb.w	r3, [r7, #82]	; 0x52
 8000d3c:	b29a      	uxth	r2, r3
 8000d3e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8000d42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d46:	9301      	str	r3, [sp, #4]
 8000d48:	2303      	movs	r3, #3
 8000d4a:	9300      	str	r3, [sp, #0]
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	f00c f84f 	bl	800cdf0 <ILI9341_Draw_Text>

	// display output in volts peak-to-peak and decibels
	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8000d52:	2000      	movs	r0, #0
 8000d54:	f003 fc9e 	bl	8004694 <SM_GetOutputChannel>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8000d5e:	643b      	str	r3, [r7, #64]	; 0x40

	if(pTmpVppPreset)
 8000d60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d016      	beq.n	8000d94 <_DisplayFormattedOutput+0xfc>
	{
		snprintf(out_vpp, sizeof(out_vpp), "%2.2f Vpp", pTmpVppPreset->Vpp_target);
 8000d66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d68:	685b      	ldr	r3, [r3, #4]
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fc14 	bl	8000598 <__aeabi_f2d>
 8000d70:	4603      	mov	r3, r0
 8000d72:	460c      	mov	r4, r1
 8000d74:	f107 0020 	add.w	r0, r7, #32
 8000d78:	e9cd 3400 	strd	r3, r4, [sp]
 8000d7c:	4a45      	ldr	r2, [pc, #276]	; (8000e94 <_DisplayFormattedOutput+0x1fc>)
 8000d7e:	2110      	movs	r1, #16
 8000d80:	f00d fb82 	bl	800e488 <sniprintf>
		snprintf(out_decibels, sizeof(out_decibels), "%s", pTmpVppPreset->gain_decibels);
 8000d84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d86:	68db      	ldr	r3, [r3, #12]
 8000d88:	f107 0014 	add.w	r0, r7, #20
 8000d8c:	4a42      	ldr	r2, [pc, #264]	; (8000e98 <_DisplayFormattedOutput+0x200>)
 8000d8e:	210b      	movs	r1, #11
 8000d90:	f00d fb7a 	bl	800e488 <sniprintf>
	}
	ILI9341_Draw_Text(out_vpp, out_vpp_x, out_vpp_y, BLACK, 3, WHITE);
 8000d94:	f897 3051 	ldrb.w	r3, [r7, #81]	; 0x51
 8000d98:	b299      	uxth	r1, r3
 8000d9a:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8000d9e:	b29a      	uxth	r2, r3
 8000da0:	f107 0020 	add.w	r0, r7, #32
 8000da4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000da8:	9301      	str	r3, [sp, #4]
 8000daa:	2303      	movs	r3, #3
 8000dac:	9300      	str	r3, [sp, #0]
 8000dae:	2300      	movs	r3, #0
 8000db0:	f00c f81e 	bl	800cdf0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text(out_decibels, out_decibels_x, out_decibels_y, BLACK, 3, WHITE);
 8000db4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8000db8:	b299      	uxth	r1, r3
 8000dba:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8000dbe:	b29a      	uxth	r2, r3
 8000dc0:	f107 0014 	add.w	r0, r7, #20
 8000dc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dc8:	9301      	str	r3, [sp, #4]
 8000dca:	2303      	movs	r3, #3
 8000dcc:	9300      	str	r3, [sp, #0]
 8000dce:	2300      	movs	r3, #0
 8000dd0:	f00c f80e 	bl	800cdf0 <ILI9341_Draw_Text>



	// display output bias in +/- Volts
	float dc_volts;
	(BO_GetOutputBias() == 0) ? (dc_volts = 0) : (dc_volts = volts_per_thou * (float)BO_GetOutputBias());
 8000dd4:	f002 ff5a 	bl	8003c8c <BO_GetOutputBias>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d103      	bne.n	8000de6 <_DisplayFormattedOutput+0x14e>
 8000dde:	f04f 0300 	mov.w	r3, #0
 8000de2:	657b      	str	r3, [r7, #84]	; 0x54
 8000de4:	e00b      	b.n	8000dfe <_DisplayFormattedOutput+0x166>
 8000de6:	f002 ff51 	bl	8003c8c <BO_GetOutputBias>
 8000dea:	ee07 0a90 	vmov	s15, r0
 8000dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000df2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 8000df6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dfa:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

	snprintf(out_dcvolts, sizeof(out_dcvolts), "%1.4f v", dc_volts);
 8000dfe:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8000e00:	f7ff fbca 	bl	8000598 <__aeabi_f2d>
 8000e04:	4603      	mov	r3, r0
 8000e06:	460c      	mov	r4, r1
 8000e08:	f107 0008 	add.w	r0, r7, #8
 8000e0c:	e9cd 3400 	strd	r3, r4, [sp]
 8000e10:	4a22      	ldr	r2, [pc, #136]	; (8000e9c <_DisplayFormattedOutput+0x204>)
 8000e12:	210a      	movs	r1, #10
 8000e14:	f00d fb38 	bl	800e488 <sniprintf>
	if(BO_GetBiasPolarity())
 8000e18:	f002 fed8 	bl	8003bcc <BO_GetBiasPolarity>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d018      	beq.n	8000e54 <_DisplayFormattedOutput+0x1bc>
	{
		char symbol[2] = "+\0";
 8000e22:	4b1f      	ldr	r3, [pc, #124]	; (8000ea0 <_DisplayFormattedOutput+0x208>)
 8000e24:	881b      	ldrh	r3, [r3, #0]
 8000e26:	80bb      	strh	r3, [r7, #4]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
 8000e28:	f107 0208 	add.w	r2, r7, #8
 8000e2c:	1d3b      	adds	r3, r7, #4
 8000e2e:	4611      	mov	r1, r2
 8000e30:	4618      	mov	r0, r3
 8000e32:	f00d fb5d 	bl	800e4f0 <strcat>
 8000e36:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000e3a:	b299      	uxth	r1, r3
 8000e3c:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000e40:	b29a      	uxth	r2, r3
 8000e42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e46:	9301      	str	r3, [sp, #4]
 8000e48:	2303      	movs	r3, #3
 8000e4a:	9300      	str	r3, [sp, #0]
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	f00b ffcf 	bl	800cdf0 <ILI9341_Draw_Text>
	{
		char symbol[2] = "-\0";
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
	}

}
 8000e52:	e017      	b.n	8000e84 <_DisplayFormattedOutput+0x1ec>
		char symbol[2] = "-\0";
 8000e54:	4b13      	ldr	r3, [pc, #76]	; (8000ea4 <_DisplayFormattedOutput+0x20c>)
 8000e56:	881b      	ldrh	r3, [r3, #0]
 8000e58:	803b      	strh	r3, [r7, #0]
		ILI9341_Draw_Text(strcat(symbol, out_dcvolts), out_dcvolts_x, out_dcvolts_y, BLACK, 3, WHITE);
 8000e5a:	f107 0208 	add.w	r2, r7, #8
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4611      	mov	r1, r2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f00d fb44 	bl	800e4f0 <strcat>
 8000e68:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8000e6c:	b299      	uxth	r1, r3
 8000e6e:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e78:	9301      	str	r3, [sp, #4]
 8000e7a:	2303      	movs	r3, #3
 8000e7c:	9300      	str	r3, [sp, #0]
 8000e7e:	2300      	movs	r3, #0
 8000e80:	f00b ffb6 	bl	800cdf0 <ILI9341_Draw_Text>
}
 8000e84:	bf00      	nop
 8000e86:	375c      	adds	r7, #92	; 0x5c
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd90      	pop	{r4, r7, pc}
 8000e8c:	3a449ba6 	.word	0x3a449ba6
 8000e90:	08010370 	.word	0x08010370
 8000e94:	0801037c 	.word	0x0801037c
 8000e98:	08010388 	.word	0x08010388
 8000e9c:	0801038c 	.word	0x0801038c
 8000ea0:	08010394 	.word	0x08010394
 8000ea4:	08010398 	.word	0x08010398

08000ea8 <DM_UpdateDisplay>:
 *	@param None
 *	@retval None
 *
 */
void DM_UpdateDisplay()
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af02      	add	r7, sp, #8

	// Function menus
	if(FuncMenu_getStatus())		//  != DISABLE_FUNC_MENU
 8000eae:	f002 fc99 	bl	80037e4 <FuncMenu_getStatus>
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d017      	beq.n	8000ee8 <DM_UpdateDisplay+0x40>
	{
		switch(FuncMenu_getStatus())
 8000eb8:	f002 fc94 	bl	80037e4 <FuncMenu_getStatus>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b02      	cmp	r3, #2
 8000ec0:	d00a      	beq.n	8000ed8 <DM_UpdateDisplay+0x30>
 8000ec2:	2b03      	cmp	r3, #3
 8000ec4:	d00c      	beq.n	8000ee0 <DM_UpdateDisplay+0x38>
 8000ec6:	2b01      	cmp	r3, #1
 8000ec8:	d000      	beq.n	8000ecc <DM_UpdateDisplay+0x24>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);

				break;

			default:
				break;
 8000eca:	e0aa      	b.n	8001022 <DM_UpdateDisplay+0x17a>
				_DisplayFormattedOutput();
 8000ecc:	f7ff fee4 	bl	8000c98 <_DisplayFormattedOutput>
				FuncMenu_DrawMenu(ENABLE_FUNC_MAIN_MENU);
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f001 fce9 	bl	80028a8 <FuncMenu_DrawMenu>
				break;
 8000ed6:	e0a4      	b.n	8001022 <DM_UpdateDisplay+0x17a>
				FuncMenu_DrawMenu(ENABLE_FUNC_SIGNAL_MENU);
 8000ed8:	2002      	movs	r0, #2
 8000eda:	f001 fce5 	bl	80028a8 <FuncMenu_DrawMenu>
				break;
 8000ede:	e0a0      	b.n	8001022 <DM_UpdateDisplay+0x17a>
				FuncMenu_DrawMenu(ENABLE_FUNC_SYNC_MENU);
 8000ee0:	2003      	movs	r0, #3
 8000ee2:	f001 fce1 	bl	80028a8 <FuncMenu_DrawMenu>
				break;
 8000ee6:	e09c      	b.n	8001022 <DM_UpdateDisplay+0x17a>
		}

	}
	// Gain menus
	else if(GainMenu_getStatus())		//  != DISABLE_GAIN_MENU
 8000ee8:	f002 fd78 	bl	80039dc <GainMenu_getStatus>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d01b      	beq.n	8000f2a <DM_UpdateDisplay+0x82>
	{

		switch(GainMenu_getStatus())
 8000ef2:	f002 fd73 	bl	80039dc <GainMenu_getStatus>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d00a      	beq.n	8000f12 <DM_UpdateDisplay+0x6a>
 8000efc:	2b03      	cmp	r3, #3
 8000efe:	d00e      	beq.n	8000f1e <DM_UpdateDisplay+0x76>
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d000      	beq.n	8000f06 <DM_UpdateDisplay+0x5e>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);

				break;

			default:
				break;
 8000f04:	e08d      	b.n	8001022 <DM_UpdateDisplay+0x17a>
				_DisplayFormattedOutput();
 8000f06:	f7ff fec7 	bl	8000c98 <_DisplayFormattedOutput>
				GainMenu_DrawMenu(ENABLE_GAIN_MAIN_MENU);
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	f002 f8ec 	bl	80030e8 <GainMenu_DrawMenu>
				break;
 8000f10:	e087      	b.n	8001022 <DM_UpdateDisplay+0x17a>
				_DisplayFormattedOutput();
 8000f12:	f7ff fec1 	bl	8000c98 <_DisplayFormattedOutput>
				GainMenu_DrawMenu(ENABLE_GAIN_SIGNAL_MENU);
 8000f16:	2002      	movs	r0, #2
 8000f18:	f002 f8e6 	bl	80030e8 <GainMenu_DrawMenu>
				break;
 8000f1c:	e081      	b.n	8001022 <DM_UpdateDisplay+0x17a>
				_DisplayFormattedOutput();
 8000f1e:	f7ff febb 	bl	8000c98 <_DisplayFormattedOutput>
				GainMenu_DrawMenu(ENABLE_GAIN_SYNC_MENU);
 8000f22:	2003      	movs	r0, #3
 8000f24:	f002 f8e0 	bl	80030e8 <GainMenu_DrawMenu>
				break;
 8000f28:	e07b      	b.n	8001022 <DM_UpdateDisplay+0x17a>
		}

	}

	// Frequency menus
	else if(FreqMenu_getStatus())		//  != DISABLE_FREQ_MENU
 8000f2a:	f002 fb47 	bl	80035bc <FreqMenu_getStatus>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d02f      	beq.n	8000f94 <DM_UpdateDisplay+0xec>
	{

		ILI9341_Draw_Text("FREQUENCY MENU", 	30, 10, WHITE, 3, BLACK);
 8000f34:	2300      	movs	r3, #0
 8000f36:	9301      	str	r3, [sp, #4]
 8000f38:	2303      	movs	r3, #3
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f40:	220a      	movs	r2, #10
 8000f42:	211e      	movs	r1, #30
 8000f44:	484e      	ldr	r0, [pc, #312]	; (8001080 <DM_UpdateDisplay+0x1d8>)
 8000f46:	f00b ff53 	bl	800cdf0 <ILI9341_Draw_Text>

		switch(FreqMenu_getStatus())
 8000f4a:	f002 fb37 	bl	80035bc <FreqMenu_getStatus>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	3b01      	subs	r3, #1
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d864      	bhi.n	8001020 <DM_UpdateDisplay+0x178>
 8000f56:	a201      	add	r2, pc, #4	; (adr r2, 8000f5c <DM_UpdateDisplay+0xb4>)
 8000f58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f5c:	08000f6d 	.word	0x08000f6d
 8000f60:	08000f79 	.word	0x08000f79
 8000f64:	08000f81 	.word	0x08000f81
 8000f68:	08000f8d 	.word	0x08000f8d
		{
			case ENABLE_FREQ_MAIN_MENU:

				_DisplayFormattedOutput();
 8000f6c:	f7ff fe94 	bl	8000c98 <_DisplayFormattedOutput>
				FreqMenu_DrawMenu(ENABLE_FREQ_MAIN_MENU);
 8000f70:	2001      	movs	r0, #1
 8000f72:	f000 f98f 	bl	8001294 <FreqMenu_DrawMenu>

				break;
 8000f76:	e054      	b.n	8001022 <DM_UpdateDisplay+0x17a>

			case ENABLE_FREQ_PRESET_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_PRESET_MENU);
 8000f78:	2002      	movs	r0, #2
 8000f7a:	f000 f98b 	bl	8001294 <FreqMenu_DrawMenu>
				break;
 8000f7e:	e050      	b.n	8001022 <DM_UpdateDisplay+0x17a>

			case ENABLE_FREQ_ADJUST_MENU:

				_DisplayFormattedOutput();
 8000f80:	f7ff fe8a 	bl	8000c98 <_DisplayFormattedOutput>
				FreqMenu_DrawMenu(ENABLE_FREQ_ADJUST_MENU);
 8000f84:	2003      	movs	r0, #3
 8000f86:	f000 f985 	bl	8001294 <FreqMenu_DrawMenu>

				break;
 8000f8a:	e04a      	b.n	8001022 <DM_UpdateDisplay+0x17a>

			case ENABLE_FREQ_SWEEP_MENU:

				FreqMenu_DrawMenu(ENABLE_FREQ_SWEEP_MENU);
 8000f8c:	2004      	movs	r0, #4
 8000f8e:	f000 f981 	bl	8001294 <FreqMenu_DrawMenu>
				break;
 8000f92:	e046      	b.n	8001022 <DM_UpdateDisplay+0x17a>
		}

	}

	// Bias menu
	else if(BiasMenu_getStatus())		//  != DISABLE_BIAS_MENU
 8000f94:	f002 f930 	bl	80031f8 <BiasMenu_getStatus>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d005      	beq.n	8000faa <DM_UpdateDisplay+0x102>
	{

		_DisplayFormattedOutput();
 8000f9e:	f7ff fe7b 	bl	8000c98 <_DisplayFormattedOutput>
		BiasMenu_DrawMenu(ENABLE_BIAS_MENU);
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	f7ff fe28 	bl	8000bf8 <BiasMenu_DrawMenu>
 8000fa8:	e03b      	b.n	8001022 <DM_UpdateDisplay+0x17a>
	}
	else
	{
		// Main screen
		ILI9341_Draw_Text("SIGNAL GENERATOR", 	10, 10, WHITE, 3, BLACK);
 8000faa:	2300      	movs	r3, #0
 8000fac:	9301      	str	r3, [sp, #4]
 8000fae:	2303      	movs	r3, #3
 8000fb0:	9300      	str	r3, [sp, #0]
 8000fb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fb6:	220a      	movs	r2, #10
 8000fb8:	210a      	movs	r1, #10
 8000fba:	4832      	ldr	r0, [pc, #200]	; (8001084 <DM_UpdateDisplay+0x1dc>)
 8000fbc:	f00b ff18 	bl	800cdf0 <ILI9341_Draw_Text>
		_DisplayFormattedOutput();
 8000fc0:	f7ff fe6a 	bl	8000c98 <_DisplayFormattedOutput>

		ILI9341_Draw_Text("FUNC", 10, 210, BLACK, 2, DARKCYAN);
 8000fc4:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000fc8:	9301      	str	r3, [sp, #4]
 8000fca:	2302      	movs	r3, #2
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	2300      	movs	r3, #0
 8000fd0:	22d2      	movs	r2, #210	; 0xd2
 8000fd2:	210a      	movs	r1, #10
 8000fd4:	482c      	ldr	r0, [pc, #176]	; (8001088 <DM_UpdateDisplay+0x1e0>)
 8000fd6:	f00b ff0b 	bl	800cdf0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("FREQ", 100, 210, BLACK, 2, DARKGREEN);
 8000fda:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000fde:	9301      	str	r3, [sp, #4]
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	9300      	str	r3, [sp, #0]
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	22d2      	movs	r2, #210	; 0xd2
 8000fe8:	2164      	movs	r1, #100	; 0x64
 8000fea:	4828      	ldr	r0, [pc, #160]	; (800108c <DM_UpdateDisplay+0x1e4>)
 8000fec:	f00b ff00 	bl	800cdf0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("GAIN", 175, 210, BLACK, 2, YELLOW);
 8000ff0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	22d2      	movs	r2, #210	; 0xd2
 8000ffe:	21af      	movs	r1, #175	; 0xaf
 8001000:	4823      	ldr	r0, [pc, #140]	; (8001090 <DM_UpdateDisplay+0x1e8>)
 8001002:	f00b fef5 	bl	800cdf0 <ILI9341_Draw_Text>
		ILI9341_Draw_Text("BIAS", 260, 210, BLACK, 2, RED);
 8001006:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	2302      	movs	r3, #2
 800100e:	9300      	str	r3, [sp, #0]
 8001010:	2300      	movs	r3, #0
 8001012:	22d2      	movs	r2, #210	; 0xd2
 8001014:	f44f 7182 	mov.w	r1, #260	; 0x104
 8001018:	481e      	ldr	r0, [pc, #120]	; (8001094 <DM_UpdateDisplay+0x1ec>)
 800101a:	f00b fee9 	bl	800cdf0 <ILI9341_Draw_Text>
 800101e:	e000      	b.n	8001022 <DM_UpdateDisplay+0x17a>
				break;
 8001020:	bf00      	nop
	}

#ifdef ENCODER_DEBUG
	char encoder_value[5] = "";
 8001022:	2300      	movs	r3, #0
 8001024:	603b      	str	r3, [r7, #0]
 8001026:	2300      	movs	r3, #0
 8001028:	713b      	strb	r3, [r7, #4]
	//snprintf(tim1tmp, sizeof(tim1tmp), "%lu", ENCODER_TIMER->CNT);
	if(DM_AddDigitPadding(ENCODER_TIMER->CNT, encoder_value, sizeof(encoder_value)) == 0)
 800102a:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <DM_UpdateDisplay+0x1f0>)
 800102c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102e:	b29b      	uxth	r3, r3
 8001030:	4639      	mov	r1, r7
 8001032:	2205      	movs	r2, #5
 8001034:	4618      	mov	r0, r3
 8001036:	f000 f8a7 	bl	8001188 <DM_AddDigitPadding>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d10b      	bne.n	8001058 <DM_UpdateDisplay+0x1b0>
		ILI9341_Draw_Text(encoder_value, 280, 190, BLACK, 1, RED);
 8001040:	4638      	mov	r0, r7
 8001042:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001046:	9301      	str	r3, [sp, #4]
 8001048:	2301      	movs	r3, #1
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	2300      	movs	r3, #0
 800104e:	22be      	movs	r2, #190	; 0xbe
 8001050:	f44f 718c 	mov.w	r1, #280	; 0x118
 8001054:	f00b fecc 	bl	800cdf0 <ILI9341_Draw_Text>
#endif //ENCODER_DEBUG

	if(*ErrorDebugMsg)
 8001058:	4b10      	ldr	r3, [pc, #64]	; (800109c <DM_UpdateDisplay+0x1f4>)
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d00a      	beq.n	8001076 <DM_UpdateDisplay+0x1ce>
		ILI9341_Draw_Text(ErrorDebugMsg, 10, 190, BLACK, 1, RED);
 8001060:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001064:	9301      	str	r3, [sp, #4]
 8001066:	2301      	movs	r3, #1
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2300      	movs	r3, #0
 800106c:	22be      	movs	r2, #190	; 0xbe
 800106e:	210a      	movs	r1, #10
 8001070:	480a      	ldr	r0, [pc, #40]	; (800109c <DM_UpdateDisplay+0x1f4>)
 8001072:	f00b febd 	bl	800cdf0 <ILI9341_Draw_Text>

}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	0801039c 	.word	0x0801039c
 8001084:	080103ac 	.word	0x080103ac
 8001088:	080103c0 	.word	0x080103c0
 800108c:	080103c8 	.word	0x080103c8
 8001090:	080103d0 	.word	0x080103d0
 8001094:	080103d8 	.word	0x080103d8
 8001098:	40012c00 	.word	0x40012c00
 800109c:	20001ee4 	.word	0x20001ee4

080010a0 <DM_DigitCount>:
 *	@param None
 *	@retval None
 *
 */
int DM_DigitCount(int num)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
	if(num < 10)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b09      	cmp	r3, #9
 80010ac:	dc01      	bgt.n	80010b2 <DM_DigitCount+0x12>
		return 1;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e018      	b.n	80010e4 <DM_DigitCount+0x44>
	if(num < 100)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b63      	cmp	r3, #99	; 0x63
 80010b6:	dc01      	bgt.n	80010bc <DM_DigitCount+0x1c>
		return 2;
 80010b8:	2302      	movs	r3, #2
 80010ba:	e013      	b.n	80010e4 <DM_DigitCount+0x44>
	if(num < 1000)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80010c2:	da01      	bge.n	80010c8 <DM_DigitCount+0x28>
		return 3;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e00d      	b.n	80010e4 <DM_DigitCount+0x44>
	if(num < 10000)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f242 720f 	movw	r2, #9999	; 0x270f
 80010ce:	4293      	cmp	r3, r2
 80010d0:	dc01      	bgt.n	80010d6 <DM_DigitCount+0x36>
		return 4;
 80010d2:	2304      	movs	r3, #4
 80010d4:	e006      	b.n	80010e4 <DM_DigitCount+0x44>
	if(num < 100000)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <DM_DigitCount+0x50>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	dc01      	bgt.n	80010e2 <DM_DigitCount+0x42>
		return 5;
 80010de:	2305      	movs	r3, #5
 80010e0:	e000      	b.n	80010e4 <DM_DigitCount+0x44>
	else
		return 0;
 80010e2:	2300      	movs	r3, #0
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	370c      	adds	r7, #12
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	0001869f 	.word	0x0001869f

080010f4 <DM_RefreshScreen>:
 *	@param None
 *	@retval None
 *
 */
void DM_RefreshScreen()
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af04      	add	r7, sp, #16
	// pause display interrupts
	HAL_TIM_Base_Stop_IT(&htim15);
 80010fa:	4821      	ldr	r0, [pc, #132]	; (8001180 <DM_RefreshScreen+0x8c>)
 80010fc:	f00a fa36 	bl	800b56c <HAL_TIM_Base_Stop_IT>


	//ILI9341_Fill_Screen(WHITE);
	ILI9341_FillScreenGradient();
 8001100:	f00b fea4 	bl	800ce4c <ILI9341_FillScreenGradient>

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 8001104:	4b1f      	ldr	r3, [pc, #124]	; (8001184 <DM_RefreshScreen+0x90>)
 8001106:	8818      	ldrh	r0, [r3, #0]
 8001108:	2300      	movs	r3, #0
 800110a:	9302      	str	r3, [sp, #8]
 800110c:	2302      	movs	r3, #2
 800110e:	9301      	str	r3, [sp, #4]
 8001110:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8001114:	9300      	str	r3, [sp, #0]
 8001116:	2332      	movs	r3, #50	; 0x32
 8001118:	2250      	movs	r2, #80	; 0x50
 800111a:	21c8      	movs	r1, #200	; 0xc8
 800111c:	f00b fcfe 	bl	800cb1c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 8001120:	4b18      	ldr	r3, [pc, #96]	; (8001184 <DM_RefreshScreen+0x90>)
 8001122:	8858      	ldrh	r0, [r3, #2]
 8001124:	2300      	movs	r3, #0
 8001126:	9302      	str	r3, [sp, #8]
 8001128:	2302      	movs	r3, #2
 800112a:	9301      	str	r3, [sp, #4]
 800112c:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8001130:	9300      	str	r3, [sp, #0]
 8001132:	2332      	movs	r3, #50	; 0x32
 8001134:	2250      	movs	r2, #80	; 0x50
 8001136:	21c8      	movs	r1, #200	; 0xc8
 8001138:	f00b fcf0 	bl	800cb1c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 800113c:	4b11      	ldr	r3, [pc, #68]	; (8001184 <DM_RefreshScreen+0x90>)
 800113e:	8898      	ldrh	r0, [r3, #4]
 8001140:	2300      	movs	r3, #0
 8001142:	9302      	str	r3, [sp, #8]
 8001144:	2302      	movs	r3, #2
 8001146:	9301      	str	r3, [sp, #4]
 8001148:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800114c:	9300      	str	r3, [sp, #0]
 800114e:	2332      	movs	r3, #50	; 0x32
 8001150:	2250      	movs	r2, #80	; 0x50
 8001152:	21c8      	movs	r1, #200	; 0xc8
 8001154:	f00b fce2 	bl	800cb1c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <DM_RefreshScreen+0x90>)
 800115a:	88d8      	ldrh	r0, [r3, #6]
 800115c:	2300      	movs	r3, #0
 800115e:	9302      	str	r3, [sp, #8]
 8001160:	2302      	movs	r3, #2
 8001162:	9301      	str	r3, [sp, #4]
 8001164:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2332      	movs	r3, #50	; 0x32
 800116c:	2250      	movs	r2, #80	; 0x50
 800116e:	21c8      	movs	r1, #200	; 0xc8
 8001170:	f00b fcd4 	bl	800cb1c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
	// resume diaplay interrupts
	HAL_TIM_Base_Start_IT(&htim15);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <DM_RefreshScreen+0x8c>)
 8001176:	f00a f9c3 	bl	800b500 <HAL_TIM_Base_Start_IT>
}
 800117a:	bf00      	nop
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	2000277c 	.word	0x2000277c
 8001184:	20000000 	.word	0x20000000

08001188 <DM_AddDigitPadding>:
 *			1 if buflen is invalid size
 *			2 unknown error
 *
 */
int DM_AddDigitPadding(uint16_t num, char *buffer, uint16_t buflen)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	6039      	str	r1, [r7, #0]
 8001192:	80fb      	strh	r3, [r7, #6]
 8001194:	4613      	mov	r3, r2
 8001196:	80bb      	strh	r3, [r7, #4]
	if((buflen < 1) || (buflen > 6))
 8001198:	88bb      	ldrh	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d002      	beq.n	80011a4 <DM_AddDigitPadding+0x1c>
 800119e:	88bb      	ldrh	r3, [r7, #4]
 80011a0:	2b06      	cmp	r3, #6
 80011a2:	d904      	bls.n	80011ae <DM_AddDigitPadding+0x26>
	{
		DM_SetErrorDebugMsg("DM_AddDigitPadding: invalid input string size");
 80011a4:	482a      	ldr	r0, [pc, #168]	; (8001250 <DM_AddDigitPadding+0xc8>)
 80011a6:	f000 f863 	bl	8001270 <DM_SetErrorDebugMsg>
		return 1;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e04c      	b.n	8001248 <DM_AddDigitPadding+0xc0>
	}

	//char* tmpbuf = malloc(sizeof(buffer) * buflen);

	uint16_t tmpcnt = num;
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	81fb      	strh	r3, [r7, #14]
	switch(DM_DigitCount(tmpcnt))
 80011b2:	89fb      	ldrh	r3, [r7, #14]
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff73 	bl	80010a0 <DM_DigitCount>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b05      	cmp	r3, #5
 80011be:	d83f      	bhi.n	8001240 <DM_AddDigitPadding+0xb8>
 80011c0:	a201      	add	r2, pc, #4	; (adr r2, 80011c8 <DM_AddDigitPadding+0x40>)
 80011c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011c6:	bf00      	nop
 80011c8:	080011e1 	.word	0x080011e1
 80011cc:	080011f1 	.word	0x080011f1
 80011d0:	08001201 	.word	0x08001201
 80011d4:	08001211 	.word	0x08001211
 80011d8:	08001221 	.word	0x08001221
 80011dc:	08001231 	.word	0x08001231
	{

		case 0:
			snprintf(buffer,buflen, "     ");
 80011e0:	88bb      	ldrh	r3, [r7, #4]
 80011e2:	4a1c      	ldr	r2, [pc, #112]	; (8001254 <DM_AddDigitPadding+0xcc>)
 80011e4:	4619      	mov	r1, r3
 80011e6:	6838      	ldr	r0, [r7, #0]
 80011e8:	f00d f94e 	bl	800e488 <sniprintf>
			return 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	e02b      	b.n	8001248 <DM_AddDigitPadding+0xc0>
		case 1:
			snprintf(buffer, buflen, "%u    ", tmpcnt);
 80011f0:	88b9      	ldrh	r1, [r7, #4]
 80011f2:	89fb      	ldrh	r3, [r7, #14]
 80011f4:	4a18      	ldr	r2, [pc, #96]	; (8001258 <DM_AddDigitPadding+0xd0>)
 80011f6:	6838      	ldr	r0, [r7, #0]
 80011f8:	f00d f946 	bl	800e488 <sniprintf>
			return 0;
 80011fc:	2300      	movs	r3, #0
 80011fe:	e023      	b.n	8001248 <DM_AddDigitPadding+0xc0>
		case 2:
			snprintf(buffer, buflen, "%u   ", tmpcnt);
 8001200:	88b9      	ldrh	r1, [r7, #4]
 8001202:	89fb      	ldrh	r3, [r7, #14]
 8001204:	4a15      	ldr	r2, [pc, #84]	; (800125c <DM_AddDigitPadding+0xd4>)
 8001206:	6838      	ldr	r0, [r7, #0]
 8001208:	f00d f93e 	bl	800e488 <sniprintf>
			return 0;
 800120c:	2300      	movs	r3, #0
 800120e:	e01b      	b.n	8001248 <DM_AddDigitPadding+0xc0>
		case 3:
			snprintf(buffer, buflen, "%u  ", tmpcnt);
 8001210:	88b9      	ldrh	r1, [r7, #4]
 8001212:	89fb      	ldrh	r3, [r7, #14]
 8001214:	4a12      	ldr	r2, [pc, #72]	; (8001260 <DM_AddDigitPadding+0xd8>)
 8001216:	6838      	ldr	r0, [r7, #0]
 8001218:	f00d f936 	bl	800e488 <sniprintf>
			return 0;
 800121c:	2300      	movs	r3, #0
 800121e:	e013      	b.n	8001248 <DM_AddDigitPadding+0xc0>
		case 4:
			snprintf(buffer, buflen, "%u ", tmpcnt);
 8001220:	88b9      	ldrh	r1, [r7, #4]
 8001222:	89fb      	ldrh	r3, [r7, #14]
 8001224:	4a0f      	ldr	r2, [pc, #60]	; (8001264 <DM_AddDigitPadding+0xdc>)
 8001226:	6838      	ldr	r0, [r7, #0]
 8001228:	f00d f92e 	bl	800e488 <sniprintf>
			return 0;
 800122c:	2300      	movs	r3, #0
 800122e:	e00b      	b.n	8001248 <DM_AddDigitPadding+0xc0>
		case 5:
			snprintf(buffer, buflen, "%u", tmpcnt);
 8001230:	88b9      	ldrh	r1, [r7, #4]
 8001232:	89fb      	ldrh	r3, [r7, #14]
 8001234:	4a0c      	ldr	r2, [pc, #48]	; (8001268 <DM_AddDigitPadding+0xe0>)
 8001236:	6838      	ldr	r0, [r7, #0]
 8001238:	f00d f926 	bl	800e488 <sniprintf>
			return 0;
 800123c:	2300      	movs	r3, #0
 800123e:	e003      	b.n	8001248 <DM_AddDigitPadding+0xc0>

	}
	DM_SetErrorDebugMsg("DM_AddDigitPadding: unknown error");
 8001240:	480a      	ldr	r0, [pc, #40]	; (800126c <DM_AddDigitPadding+0xe4>)
 8001242:	f000 f815 	bl	8001270 <DM_SetErrorDebugMsg>
	return 2;
 8001246:	2302      	movs	r3, #2


}
 8001248:	4618      	mov	r0, r3
 800124a:	3710      	adds	r7, #16
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	080103e0 	.word	0x080103e0
 8001254:	08010410 	.word	0x08010410
 8001258:	08010418 	.word	0x08010418
 800125c:	08010420 	.word	0x08010420
 8001260:	08010428 	.word	0x08010428
 8001264:	08010430 	.word	0x08010430
 8001268:	08010434 	.word	0x08010434
 800126c:	08010438 	.word	0x08010438

08001270 <DM_SetErrorDebugMsg>:
	ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
	*/
}

void DM_SetErrorDebugMsg(char* msg)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	snprintf(ErrorDebugMsg, sizeof(ErrorDebugMsg), "%s", msg);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a04      	ldr	r2, [pc, #16]	; (800128c <DM_SetErrorDebugMsg+0x1c>)
 800127c:	212d      	movs	r1, #45	; 0x2d
 800127e:	4804      	ldr	r0, [pc, #16]	; (8001290 <DM_SetErrorDebugMsg+0x20>)
 8001280:	f00d f902 	bl	800e488 <sniprintf>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}
 800128c:	08010388 	.word	0x08010388
 8001290:	20001ee4 	.word	0x20001ee4

08001294 <FreqMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMenu(eFreqMenu_Status pMenu)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 800129e:	79fb      	ldrb	r3, [r7, #7]
 80012a0:	2b02      	cmp	r3, #2
 80012a2:	d007      	beq.n	80012b4 <FreqMenu_DrawMenu+0x20>
 80012a4:	2b03      	cmp	r3, #3
 80012a6:	d008      	beq.n	80012ba <FreqMenu_DrawMenu+0x26>
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d000      	beq.n	80012ae <FreqMenu_DrawMenu+0x1a>
		case ENABLE_FREQ_ADJUST_MENU:
			FreqMenu_DrawAdjustMenu();
			break;

		default:
			break;
 80012ac:	e008      	b.n	80012c0 <FreqMenu_DrawMenu+0x2c>
			FreqMenu_DrawMainMenu();
 80012ae:	f000 f80b 	bl	80012c8 <FreqMenu_DrawMainMenu>
			break;
 80012b2:	e005      	b.n	80012c0 <FreqMenu_DrawMenu+0x2c>
			FreqMenu_DrawPresetMenu();
 80012b4:	f000 f842 	bl	800133c <FreqMenu_DrawPresetMenu>
			break;
 80012b8:	e002      	b.n	80012c0 <FreqMenu_DrawMenu+0x2c>
			FreqMenu_DrawAdjustMenu();
 80012ba:	f001 fac5 	bl	8002848 <FreqMenu_DrawAdjustMenu>
			break;
 80012be:	bf00      	nop

	}
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <FreqMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawMainMenu()
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af02      	add	r7, sp, #8
	// main
	ILI9341_Draw_Text("Select an option below", 	30, 165, BLACK, 2, WHITE);
 80012ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012d2:	9301      	str	r3, [sp, #4]
 80012d4:	2302      	movs	r3, #2
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	2300      	movs	r3, #0
 80012da:	22a5      	movs	r2, #165	; 0xa5
 80012dc:	211e      	movs	r1, #30
 80012de:	4813      	ldr	r0, [pc, #76]	; (800132c <FreqMenu_DrawMainMenu+0x64>)
 80012e0:	f00b fd86 	bl	800cdf0 <ILI9341_Draw_Text>

	// buttons
	ILI9341_Draw_Text("PRESET", 5, 210, BLACK, 2, DARKCYAN);
 80012e4:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	2302      	movs	r3, #2
 80012ec:	9300      	str	r3, [sp, #0]
 80012ee:	2300      	movs	r3, #0
 80012f0:	22d2      	movs	r2, #210	; 0xd2
 80012f2:	2105      	movs	r1, #5
 80012f4:	480e      	ldr	r0, [pc, #56]	; (8001330 <FreqMenu_DrawMainMenu+0x68>)
 80012f6:	f00b fd7b 	bl	800cdf0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("ADJUST", 87, 210, BLACK, 2, DARKGREEN);
 80012fa:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 80012fe:	9301      	str	r3, [sp, #4]
 8001300:	2302      	movs	r3, #2
 8001302:	9300      	str	r3, [sp, #0]
 8001304:	2300      	movs	r3, #0
 8001306:	22d2      	movs	r2, #210	; 0xd2
 8001308:	2157      	movs	r1, #87	; 0x57
 800130a:	480a      	ldr	r0, [pc, #40]	; (8001334 <FreqMenu_DrawMainMenu+0x6c>)
 800130c:	f00b fd70 	bl	800cdf0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SWEEP", 174, 210, BLACK, 2, YELLOW);
 8001310:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	2302      	movs	r3, #2
 8001318:	9300      	str	r3, [sp, #0]
 800131a:	2300      	movs	r3, #0
 800131c:	22d2      	movs	r2, #210	; 0xd2
 800131e:	21ae      	movs	r1, #174	; 0xae
 8001320:	4805      	ldr	r0, [pc, #20]	; (8001338 <FreqMenu_DrawMainMenu+0x70>)
 8001322:	f00b fd65 	bl	800cdf0 <ILI9341_Draw_Text>
	//ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
}
 8001326:	bf00      	nop
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}
 800132c:	0801045c 	.word	0x0801045c
 8001330:	08010474 	.word	0x08010474
 8001334:	0801047c 	.word	0x0801047c
 8001338:	08010484 	.word	0x08010484

0800133c <FreqMenu_DrawPresetMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawPresetMenu()
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af02      	add	r7, sp, #8

	uint8_t menu_pos_y1 = 50;
 8001342:	2332      	movs	r3, #50	; 0x32
 8001344:	73fb      	strb	r3, [r7, #15]
	uint8_t menu_pos_y2 = 70;
 8001346:	2346      	movs	r3, #70	; 0x46
 8001348:	73bb      	strb	r3, [r7, #14]
	uint8_t menu_pos_y3 = 90;
 800134a:	235a      	movs	r3, #90	; 0x5a
 800134c:	737b      	strb	r3, [r7, #13]
	uint8_t menu_pos_y4 = 110;
 800134e:	236e      	movs	r3, #110	; 0x6e
 8001350:	733b      	strb	r3, [r7, #12]
	uint8_t menu_pos_y5 = 130;
 8001352:	2382      	movs	r3, #130	; 0x82
 8001354:	72fb      	strb	r3, [r7, #11]
	uint8_t menu_pos_y6 = 150;
 8001356:	2396      	movs	r3, #150	; 0x96
 8001358:	72bb      	strb	r3, [r7, #10]
	uint8_t menu_pos_y7 = 170;
 800135a:	23aa      	movs	r3, #170	; 0xaa
 800135c:	727b      	strb	r3, [r7, #9]
	Freq_Preset_Encoder_Pos_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 800135e:	f002 fe4b 	bl	8003ff8 <FreqO_GetFPresetObject>
 8001362:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2b00      	cmp	r3, #0
 8001368:	f001 823f 	beq.w	80027ea <FreqMenu_DrawPresetMenu+0x14ae>
	{
		switch(pFreqPresetTmp->hertz)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f240 22ee 	movw	r2, #750	; 0x2ee
 8001374:	4293      	cmp	r3, r2
 8001376:	f000 8499 	beq.w	8001cac <FreqMenu_DrawPresetMenu+0x970>
 800137a:	f240 22ee 	movw	r2, #750	; 0x2ee
 800137e:	4293      	cmp	r3, r2
 8001380:	d817      	bhi.n	80013b2 <FreqMenu_DrawPresetMenu+0x76>
 8001382:	2b32      	cmp	r3, #50	; 0x32
 8001384:	f000 81b2 	beq.w	80016ec <FreqMenu_DrawPresetMenu+0x3b0>
 8001388:	2b32      	cmp	r3, #50	; 0x32
 800138a:	d806      	bhi.n	800139a <FreqMenu_DrawPresetMenu+0x5e>
 800138c:	2b01      	cmp	r3, #1
 800138e:	d038      	beq.n	8001402 <FreqMenu_DrawPresetMenu+0xc6>
 8001390:	2b0a      	cmp	r3, #10
 8001392:	f000 80e0 	beq.w	8001556 <FreqMenu_DrawPresetMenu+0x21a>
	else
	{
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		10, 180, RED, 1, BLACK);
	}

}
 8001396:	f001 ba34 	b.w	8002802 <FreqMenu_DrawPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 800139a:	2bfa      	cmp	r3, #250	; 0xfa
 800139c:	f000 8316 	beq.w	80019cc <FreqMenu_DrawPresetMenu+0x690>
 80013a0:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80013a4:	f000 83bc 	beq.w	8001b20 <FreqMenu_DrawPresetMenu+0x7e4>
 80013a8:	2b64      	cmp	r3, #100	; 0x64
 80013aa:	f000 8249 	beq.w	8001840 <FreqMenu_DrawPresetMenu+0x504>
}
 80013ae:	f001 ba28 	b.w	8002802 <FreqMenu_DrawPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 80013b2:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80013b6:	4293      	cmp	r3, r2
 80013b8:	f000 8756 	beq.w	8002268 <FreqMenu_DrawPresetMenu+0xf2c>
 80013bc:	f246 12a8 	movw	r2, #25000	; 0x61a8
 80013c0:	4293      	cmp	r3, r2
 80013c2:	d80f      	bhi.n	80013e4 <FreqMenu_DrawPresetMenu+0xa8>
 80013c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80013c8:	4293      	cmp	r3, r2
 80013ca:	f000 85df 	beq.w	8001f8c <FreqMenu_DrawPresetMenu+0xc50>
 80013ce:	f242 7210 	movw	r2, #10000	; 0x2710
 80013d2:	4293      	cmp	r3, r2
 80013d4:	f000 8683 	beq.w	80020de <FreqMenu_DrawPresetMenu+0xda2>
 80013d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013dc:	f000 8510 	beq.w	8001e00 <FreqMenu_DrawPresetMenu+0xac4>
}
 80013e0:	f001 ba0f 	b.w	8002802 <FreqMenu_DrawPresetMenu+0x14c6>
		switch(pFreqPresetTmp->hertz)
 80013e4:	4ab1      	ldr	r2, [pc, #708]	; (80016ac <FreqMenu_DrawPresetMenu+0x370>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	f001 80ac 	beq.w	8002544 <FreqMenu_DrawPresetMenu+0x1208>
 80013ec:	4ab0      	ldr	r2, [pc, #704]	; (80016b0 <FreqMenu_DrawPresetMenu+0x374>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	f001 8151 	beq.w	8002696 <FreqMenu_DrawPresetMenu+0x135a>
 80013f4:	f24c 3250 	movw	r2, #50000	; 0xc350
 80013f8:	4293      	cmp	r3, r2
 80013fa:	f000 87de 	beq.w	80023ba <FreqMenu_DrawPresetMenu+0x107e>
}
 80013fe:	f001 ba00 	b.w	8002802 <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, WHITE, 2, BLACK);
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	b29a      	uxth	r2, r3
 8001406:	2300      	movs	r3, #0
 8001408:	9301      	str	r3, [sp, #4]
 800140a:	2302      	movs	r3, #2
 800140c:	9300      	str	r3, [sp, #0]
 800140e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001412:	210a      	movs	r1, #10
 8001414:	48a7      	ldr	r0, [pc, #668]	; (80016b4 <FreqMenu_DrawPresetMenu+0x378>)
 8001416:	f00b fceb 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 800141a:	7bbb      	ldrb	r3, [r7, #14]
 800141c:	b29a      	uxth	r2, r3
 800141e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	2302      	movs	r3, #2
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	2300      	movs	r3, #0
 800142a:	210a      	movs	r1, #10
 800142c:	48a2      	ldr	r0, [pc, #648]	; (80016b8 <FreqMenu_DrawPresetMenu+0x37c>)
 800142e:	f00b fcdf 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001432:	7b7b      	ldrb	r3, [r7, #13]
 8001434:	b29a      	uxth	r2, r3
 8001436:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800143a:	9301      	str	r3, [sp, #4]
 800143c:	2302      	movs	r3, #2
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	2300      	movs	r3, #0
 8001442:	210a      	movs	r1, #10
 8001444:	489d      	ldr	r0, [pc, #628]	; (80016bc <FreqMenu_DrawPresetMenu+0x380>)
 8001446:	f00b fcd3 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800144a:	7b3b      	ldrb	r3, [r7, #12]
 800144c:	b29a      	uxth	r2, r3
 800144e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001452:	9301      	str	r3, [sp, #4]
 8001454:	2302      	movs	r3, #2
 8001456:	9300      	str	r3, [sp, #0]
 8001458:	2300      	movs	r3, #0
 800145a:	210a      	movs	r1, #10
 800145c:	4898      	ldr	r0, [pc, #608]	; (80016c0 <FreqMenu_DrawPresetMenu+0x384>)
 800145e:	f00b fcc7 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001462:	7afb      	ldrb	r3, [r7, #11]
 8001464:	b29a      	uxth	r2, r3
 8001466:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800146a:	9301      	str	r3, [sp, #4]
 800146c:	2302      	movs	r3, #2
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	2300      	movs	r3, #0
 8001472:	210a      	movs	r1, #10
 8001474:	4893      	ldr	r0, [pc, #588]	; (80016c4 <FreqMenu_DrawPresetMenu+0x388>)
 8001476:	f00b fcbb 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800147a:	7abb      	ldrb	r3, [r7, #10]
 800147c:	b29a      	uxth	r2, r3
 800147e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	2302      	movs	r3, #2
 8001486:	9300      	str	r3, [sp, #0]
 8001488:	2300      	movs	r3, #0
 800148a:	210a      	movs	r1, #10
 800148c:	488e      	ldr	r0, [pc, #568]	; (80016c8 <FreqMenu_DrawPresetMenu+0x38c>)
 800148e:	f00b fcaf 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001492:	7a7b      	ldrb	r3, [r7, #9]
 8001494:	b29a      	uxth	r2, r3
 8001496:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800149a:	9301      	str	r3, [sp, #4]
 800149c:	2302      	movs	r3, #2
 800149e:	9300      	str	r3, [sp, #0]
 80014a0:	2300      	movs	r3, #0
 80014a2:	210a      	movs	r1, #10
 80014a4:	4889      	ldr	r0, [pc, #548]	; (80016cc <FreqMenu_DrawPresetMenu+0x390>)
 80014a6:	f00b fca3 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80014aa:	7bfb      	ldrb	r3, [r7, #15]
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014b2:	9301      	str	r3, [sp, #4]
 80014b4:	2302      	movs	r3, #2
 80014b6:	9300      	str	r3, [sp, #0]
 80014b8:	2300      	movs	r3, #0
 80014ba:	2178      	movs	r1, #120	; 0x78
 80014bc:	4884      	ldr	r0, [pc, #528]	; (80016d0 <FreqMenu_DrawPresetMenu+0x394>)
 80014be:	f00b fc97 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80014c2:	7bbb      	ldrb	r3, [r7, #14]
 80014c4:	b29a      	uxth	r2, r3
 80014c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014ca:	9301      	str	r3, [sp, #4]
 80014cc:	2302      	movs	r3, #2
 80014ce:	9300      	str	r3, [sp, #0]
 80014d0:	2300      	movs	r3, #0
 80014d2:	2178      	movs	r1, #120	; 0x78
 80014d4:	487f      	ldr	r0, [pc, #508]	; (80016d4 <FreqMenu_DrawPresetMenu+0x398>)
 80014d6:	f00b fc8b 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80014da:	7b7b      	ldrb	r3, [r7, #13]
 80014dc:	b29a      	uxth	r2, r3
 80014de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014e2:	9301      	str	r3, [sp, #4]
 80014e4:	2302      	movs	r3, #2
 80014e6:	9300      	str	r3, [sp, #0]
 80014e8:	2300      	movs	r3, #0
 80014ea:	2178      	movs	r1, #120	; 0x78
 80014ec:	487a      	ldr	r0, [pc, #488]	; (80016d8 <FreqMenu_DrawPresetMenu+0x39c>)
 80014ee:	f00b fc7f 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80014f2:	7b3b      	ldrb	r3, [r7, #12]
 80014f4:	b29a      	uxth	r2, r3
 80014f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014fa:	9301      	str	r3, [sp, #4]
 80014fc:	2302      	movs	r3, #2
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	2300      	movs	r3, #0
 8001502:	2178      	movs	r1, #120	; 0x78
 8001504:	4875      	ldr	r0, [pc, #468]	; (80016dc <FreqMenu_DrawPresetMenu+0x3a0>)
 8001506:	f00b fc73 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 800150a:	7afb      	ldrb	r3, [r7, #11]
 800150c:	b29a      	uxth	r2, r3
 800150e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001512:	9301      	str	r3, [sp, #4]
 8001514:	2302      	movs	r3, #2
 8001516:	9300      	str	r3, [sp, #0]
 8001518:	2300      	movs	r3, #0
 800151a:	2178      	movs	r1, #120	; 0x78
 800151c:	4870      	ldr	r0, [pc, #448]	; (80016e0 <FreqMenu_DrawPresetMenu+0x3a4>)
 800151e:	f00b fc67 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001522:	7abb      	ldrb	r3, [r7, #10]
 8001524:	b29a      	uxth	r2, r3
 8001526:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800152a:	9301      	str	r3, [sp, #4]
 800152c:	2302      	movs	r3, #2
 800152e:	9300      	str	r3, [sp, #0]
 8001530:	2300      	movs	r3, #0
 8001532:	2178      	movs	r1, #120	; 0x78
 8001534:	486b      	ldr	r0, [pc, #428]	; (80016e4 <FreqMenu_DrawPresetMenu+0x3a8>)
 8001536:	f00b fc5b 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 800153a:	7a7b      	ldrb	r3, [r7, #9]
 800153c:	b29a      	uxth	r2, r3
 800153e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001542:	9301      	str	r3, [sp, #4]
 8001544:	2302      	movs	r3, #2
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	2300      	movs	r3, #0
 800154a:	2178      	movs	r1, #120	; 0x78
 800154c:	4866      	ldr	r0, [pc, #408]	; (80016e8 <FreqMenu_DrawPresetMenu+0x3ac>)
 800154e:	f00b fc4f 	bl	800cdf0 <ILI9341_Draw_Text>
				break;
 8001552:	f001 b956 	b.w	8002802 <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	b29a      	uxth	r2, r3
 800155a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800155e:	9301      	str	r3, [sp, #4]
 8001560:	2302      	movs	r3, #2
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	2300      	movs	r3, #0
 8001566:	210a      	movs	r1, #10
 8001568:	4852      	ldr	r0, [pc, #328]	; (80016b4 <FreqMenu_DrawPresetMenu+0x378>)
 800156a:	f00b fc41 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, WHITE, 2, BLACK);
 800156e:	7bbb      	ldrb	r3, [r7, #14]
 8001570:	b29a      	uxth	r2, r3
 8001572:	2300      	movs	r3, #0
 8001574:	9301      	str	r3, [sp, #4]
 8001576:	2302      	movs	r3, #2
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800157e:	210a      	movs	r1, #10
 8001580:	484d      	ldr	r0, [pc, #308]	; (80016b8 <FreqMenu_DrawPresetMenu+0x37c>)
 8001582:	f00b fc35 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001586:	7b7b      	ldrb	r3, [r7, #13]
 8001588:	b29a      	uxth	r2, r3
 800158a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800158e:	9301      	str	r3, [sp, #4]
 8001590:	2302      	movs	r3, #2
 8001592:	9300      	str	r3, [sp, #0]
 8001594:	2300      	movs	r3, #0
 8001596:	210a      	movs	r1, #10
 8001598:	4848      	ldr	r0, [pc, #288]	; (80016bc <FreqMenu_DrawPresetMenu+0x380>)
 800159a:	f00b fc29 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800159e:	7b3b      	ldrb	r3, [r7, #12]
 80015a0:	b29a      	uxth	r2, r3
 80015a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015a6:	9301      	str	r3, [sp, #4]
 80015a8:	2302      	movs	r3, #2
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	2300      	movs	r3, #0
 80015ae:	210a      	movs	r1, #10
 80015b0:	4843      	ldr	r0, [pc, #268]	; (80016c0 <FreqMenu_DrawPresetMenu+0x384>)
 80015b2:	f00b fc1d 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80015b6:	7afb      	ldrb	r3, [r7, #11]
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015be:	9301      	str	r3, [sp, #4]
 80015c0:	2302      	movs	r3, #2
 80015c2:	9300      	str	r3, [sp, #0]
 80015c4:	2300      	movs	r3, #0
 80015c6:	210a      	movs	r1, #10
 80015c8:	483e      	ldr	r0, [pc, #248]	; (80016c4 <FreqMenu_DrawPresetMenu+0x388>)
 80015ca:	f00b fc11 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80015ce:	7abb      	ldrb	r3, [r7, #10]
 80015d0:	b29a      	uxth	r2, r3
 80015d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015d6:	9301      	str	r3, [sp, #4]
 80015d8:	2302      	movs	r3, #2
 80015da:	9300      	str	r3, [sp, #0]
 80015dc:	2300      	movs	r3, #0
 80015de:	210a      	movs	r1, #10
 80015e0:	4839      	ldr	r0, [pc, #228]	; (80016c8 <FreqMenu_DrawPresetMenu+0x38c>)
 80015e2:	f00b fc05 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80015e6:	7a7b      	ldrb	r3, [r7, #9]
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015ee:	9301      	str	r3, [sp, #4]
 80015f0:	2302      	movs	r3, #2
 80015f2:	9300      	str	r3, [sp, #0]
 80015f4:	2300      	movs	r3, #0
 80015f6:	210a      	movs	r1, #10
 80015f8:	4834      	ldr	r0, [pc, #208]	; (80016cc <FreqMenu_DrawPresetMenu+0x390>)
 80015fa:	f00b fbf9 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80015fe:	7bfb      	ldrb	r3, [r7, #15]
 8001600:	b29a      	uxth	r2, r3
 8001602:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001606:	9301      	str	r3, [sp, #4]
 8001608:	2302      	movs	r3, #2
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2300      	movs	r3, #0
 800160e:	2178      	movs	r1, #120	; 0x78
 8001610:	482f      	ldr	r0, [pc, #188]	; (80016d0 <FreqMenu_DrawPresetMenu+0x394>)
 8001612:	f00b fbed 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001616:	7bbb      	ldrb	r3, [r7, #14]
 8001618:	b29a      	uxth	r2, r3
 800161a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800161e:	9301      	str	r3, [sp, #4]
 8001620:	2302      	movs	r3, #2
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	2300      	movs	r3, #0
 8001626:	2178      	movs	r1, #120	; 0x78
 8001628:	482a      	ldr	r0, [pc, #168]	; (80016d4 <FreqMenu_DrawPresetMenu+0x398>)
 800162a:	f00b fbe1 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 800162e:	7b7b      	ldrb	r3, [r7, #13]
 8001630:	b29a      	uxth	r2, r3
 8001632:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001636:	9301      	str	r3, [sp, #4]
 8001638:	2302      	movs	r3, #2
 800163a:	9300      	str	r3, [sp, #0]
 800163c:	2300      	movs	r3, #0
 800163e:	2178      	movs	r1, #120	; 0x78
 8001640:	4825      	ldr	r0, [pc, #148]	; (80016d8 <FreqMenu_DrawPresetMenu+0x39c>)
 8001642:	f00b fbd5 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001646:	7b3b      	ldrb	r3, [r7, #12]
 8001648:	b29a      	uxth	r2, r3
 800164a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800164e:	9301      	str	r3, [sp, #4]
 8001650:	2302      	movs	r3, #2
 8001652:	9300      	str	r3, [sp, #0]
 8001654:	2300      	movs	r3, #0
 8001656:	2178      	movs	r1, #120	; 0x78
 8001658:	4820      	ldr	r0, [pc, #128]	; (80016dc <FreqMenu_DrawPresetMenu+0x3a0>)
 800165a:	f00b fbc9 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 800165e:	7afb      	ldrb	r3, [r7, #11]
 8001660:	b29a      	uxth	r2, r3
 8001662:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001666:	9301      	str	r3, [sp, #4]
 8001668:	2302      	movs	r3, #2
 800166a:	9300      	str	r3, [sp, #0]
 800166c:	2300      	movs	r3, #0
 800166e:	2178      	movs	r1, #120	; 0x78
 8001670:	481b      	ldr	r0, [pc, #108]	; (80016e0 <FreqMenu_DrawPresetMenu+0x3a4>)
 8001672:	f00b fbbd 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001676:	7abb      	ldrb	r3, [r7, #10]
 8001678:	b29a      	uxth	r2, r3
 800167a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800167e:	9301      	str	r3, [sp, #4]
 8001680:	2302      	movs	r3, #2
 8001682:	9300      	str	r3, [sp, #0]
 8001684:	2300      	movs	r3, #0
 8001686:	2178      	movs	r1, #120	; 0x78
 8001688:	4816      	ldr	r0, [pc, #88]	; (80016e4 <FreqMenu_DrawPresetMenu+0x3a8>)
 800168a:	f00b fbb1 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 800168e:	7a7b      	ldrb	r3, [r7, #9]
 8001690:	b29a      	uxth	r2, r3
 8001692:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001696:	9301      	str	r3, [sp, #4]
 8001698:	2302      	movs	r3, #2
 800169a:	9300      	str	r3, [sp, #0]
 800169c:	2300      	movs	r3, #0
 800169e:	2178      	movs	r1, #120	; 0x78
 80016a0:	4811      	ldr	r0, [pc, #68]	; (80016e8 <FreqMenu_DrawPresetMenu+0x3ac>)
 80016a2:	f00b fba5 	bl	800cdf0 <ILI9341_Draw_Text>
				break;
 80016a6:	f001 b8ac 	b.w	8002802 <FreqMenu_DrawPresetMenu+0x14c6>
 80016aa:	bf00      	nop
 80016ac:	000124f8 	.word	0x000124f8
 80016b0:	000186a0 	.word	0x000186a0
 80016b4:	0801048c 	.word	0x0801048c
 80016b8:	08010494 	.word	0x08010494
 80016bc:	0801049c 	.word	0x0801049c
 80016c0:	080104a4 	.word	0x080104a4
 80016c4:	080104ac 	.word	0x080104ac
 80016c8:	080104b4 	.word	0x080104b4
 80016cc:	080104bc 	.word	0x080104bc
 80016d0:	080104c4 	.word	0x080104c4
 80016d4:	080104cc 	.word	0x080104cc
 80016d8:	080104d4 	.word	0x080104d4
 80016dc:	080104dc 	.word	0x080104dc
 80016e0:	080104e4 	.word	0x080104e4
 80016e4:	080104ec 	.word	0x080104ec
 80016e8:	080104f4 	.word	0x080104f4
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80016ec:	7bfb      	ldrb	r3, [r7, #15]
 80016ee:	b29a      	uxth	r2, r3
 80016f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016f4:	9301      	str	r3, [sp, #4]
 80016f6:	2302      	movs	r3, #2
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	2300      	movs	r3, #0
 80016fc:	210a      	movs	r1, #10
 80016fe:	48a5      	ldr	r0, [pc, #660]	; (8001994 <FreqMenu_DrawPresetMenu+0x658>)
 8001700:	f00b fb76 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001704:	7bbb      	ldrb	r3, [r7, #14]
 8001706:	b29a      	uxth	r2, r3
 8001708:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800170c:	9301      	str	r3, [sp, #4]
 800170e:	2302      	movs	r3, #2
 8001710:	9300      	str	r3, [sp, #0]
 8001712:	2300      	movs	r3, #0
 8001714:	210a      	movs	r1, #10
 8001716:	48a0      	ldr	r0, [pc, #640]	; (8001998 <FreqMenu_DrawPresetMenu+0x65c>)
 8001718:	f00b fb6a 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, WHITE, 2, BLACK);
 800171c:	7b7b      	ldrb	r3, [r7, #13]
 800171e:	b29a      	uxth	r2, r3
 8001720:	2300      	movs	r3, #0
 8001722:	9301      	str	r3, [sp, #4]
 8001724:	2302      	movs	r3, #2
 8001726:	9300      	str	r3, [sp, #0]
 8001728:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800172c:	210a      	movs	r1, #10
 800172e:	489b      	ldr	r0, [pc, #620]	; (800199c <FreqMenu_DrawPresetMenu+0x660>)
 8001730:	f00b fb5e 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001734:	7b3b      	ldrb	r3, [r7, #12]
 8001736:	b29a      	uxth	r2, r3
 8001738:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800173c:	9301      	str	r3, [sp, #4]
 800173e:	2302      	movs	r3, #2
 8001740:	9300      	str	r3, [sp, #0]
 8001742:	2300      	movs	r3, #0
 8001744:	210a      	movs	r1, #10
 8001746:	4896      	ldr	r0, [pc, #600]	; (80019a0 <FreqMenu_DrawPresetMenu+0x664>)
 8001748:	f00b fb52 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 800174c:	7afb      	ldrb	r3, [r7, #11]
 800174e:	b29a      	uxth	r2, r3
 8001750:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001754:	9301      	str	r3, [sp, #4]
 8001756:	2302      	movs	r3, #2
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	2300      	movs	r3, #0
 800175c:	210a      	movs	r1, #10
 800175e:	4891      	ldr	r0, [pc, #580]	; (80019a4 <FreqMenu_DrawPresetMenu+0x668>)
 8001760:	f00b fb46 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001764:	7abb      	ldrb	r3, [r7, #10]
 8001766:	b29a      	uxth	r2, r3
 8001768:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800176c:	9301      	str	r3, [sp, #4]
 800176e:	2302      	movs	r3, #2
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	2300      	movs	r3, #0
 8001774:	210a      	movs	r1, #10
 8001776:	488c      	ldr	r0, [pc, #560]	; (80019a8 <FreqMenu_DrawPresetMenu+0x66c>)
 8001778:	f00b fb3a 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 800177c:	7a7b      	ldrb	r3, [r7, #9]
 800177e:	b29a      	uxth	r2, r3
 8001780:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001784:	9301      	str	r3, [sp, #4]
 8001786:	2302      	movs	r3, #2
 8001788:	9300      	str	r3, [sp, #0]
 800178a:	2300      	movs	r3, #0
 800178c:	210a      	movs	r1, #10
 800178e:	4887      	ldr	r0, [pc, #540]	; (80019ac <FreqMenu_DrawPresetMenu+0x670>)
 8001790:	f00b fb2e 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001794:	7bfb      	ldrb	r3, [r7, #15]
 8001796:	b29a      	uxth	r2, r3
 8001798:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800179c:	9301      	str	r3, [sp, #4]
 800179e:	2302      	movs	r3, #2
 80017a0:	9300      	str	r3, [sp, #0]
 80017a2:	2300      	movs	r3, #0
 80017a4:	2178      	movs	r1, #120	; 0x78
 80017a6:	4882      	ldr	r0, [pc, #520]	; (80019b0 <FreqMenu_DrawPresetMenu+0x674>)
 80017a8:	f00b fb22 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 80017ac:	7bbb      	ldrb	r3, [r7, #14]
 80017ae:	b29a      	uxth	r2, r3
 80017b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017b4:	9301      	str	r3, [sp, #4]
 80017b6:	2302      	movs	r3, #2
 80017b8:	9300      	str	r3, [sp, #0]
 80017ba:	2300      	movs	r3, #0
 80017bc:	2178      	movs	r1, #120	; 0x78
 80017be:	487d      	ldr	r0, [pc, #500]	; (80019b4 <FreqMenu_DrawPresetMenu+0x678>)
 80017c0:	f00b fb16 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 80017c4:	7b7b      	ldrb	r3, [r7, #13]
 80017c6:	b29a      	uxth	r2, r3
 80017c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017cc:	9301      	str	r3, [sp, #4]
 80017ce:	2302      	movs	r3, #2
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	2300      	movs	r3, #0
 80017d4:	2178      	movs	r1, #120	; 0x78
 80017d6:	4878      	ldr	r0, [pc, #480]	; (80019b8 <FreqMenu_DrawPresetMenu+0x67c>)
 80017d8:	f00b fb0a 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80017dc:	7b3b      	ldrb	r3, [r7, #12]
 80017de:	b29a      	uxth	r2, r3
 80017e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017e4:	9301      	str	r3, [sp, #4]
 80017e6:	2302      	movs	r3, #2
 80017e8:	9300      	str	r3, [sp, #0]
 80017ea:	2300      	movs	r3, #0
 80017ec:	2178      	movs	r1, #120	; 0x78
 80017ee:	4873      	ldr	r0, [pc, #460]	; (80019bc <FreqMenu_DrawPresetMenu+0x680>)
 80017f0:	f00b fafe 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80017f4:	7afb      	ldrb	r3, [r7, #11]
 80017f6:	b29a      	uxth	r2, r3
 80017f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017fc:	9301      	str	r3, [sp, #4]
 80017fe:	2302      	movs	r3, #2
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	2300      	movs	r3, #0
 8001804:	2178      	movs	r1, #120	; 0x78
 8001806:	486e      	ldr	r0, [pc, #440]	; (80019c0 <FreqMenu_DrawPresetMenu+0x684>)
 8001808:	f00b faf2 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 800180c:	7abb      	ldrb	r3, [r7, #10]
 800180e:	b29a      	uxth	r2, r3
 8001810:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001814:	9301      	str	r3, [sp, #4]
 8001816:	2302      	movs	r3, #2
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	2300      	movs	r3, #0
 800181c:	2178      	movs	r1, #120	; 0x78
 800181e:	4869      	ldr	r0, [pc, #420]	; (80019c4 <FreqMenu_DrawPresetMenu+0x688>)
 8001820:	f00b fae6 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001824:	7a7b      	ldrb	r3, [r7, #9]
 8001826:	b29a      	uxth	r2, r3
 8001828:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800182c:	9301      	str	r3, [sp, #4]
 800182e:	2302      	movs	r3, #2
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	2300      	movs	r3, #0
 8001834:	2178      	movs	r1, #120	; 0x78
 8001836:	4864      	ldr	r0, [pc, #400]	; (80019c8 <FreqMenu_DrawPresetMenu+0x68c>)
 8001838:	f00b fada 	bl	800cdf0 <ILI9341_Draw_Text>
				break;
 800183c:	f000 bfe1 	b.w	8002802 <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001840:	7bfb      	ldrb	r3, [r7, #15]
 8001842:	b29a      	uxth	r2, r3
 8001844:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001848:	9301      	str	r3, [sp, #4]
 800184a:	2302      	movs	r3, #2
 800184c:	9300      	str	r3, [sp, #0]
 800184e:	2300      	movs	r3, #0
 8001850:	210a      	movs	r1, #10
 8001852:	4850      	ldr	r0, [pc, #320]	; (8001994 <FreqMenu_DrawPresetMenu+0x658>)
 8001854:	f00b facc 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001858:	7bbb      	ldrb	r3, [r7, #14]
 800185a:	b29a      	uxth	r2, r3
 800185c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001860:	9301      	str	r3, [sp, #4]
 8001862:	2302      	movs	r3, #2
 8001864:	9300      	str	r3, [sp, #0]
 8001866:	2300      	movs	r3, #0
 8001868:	210a      	movs	r1, #10
 800186a:	484b      	ldr	r0, [pc, #300]	; (8001998 <FreqMenu_DrawPresetMenu+0x65c>)
 800186c:	f00b fac0 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001870:	7b7b      	ldrb	r3, [r7, #13]
 8001872:	b29a      	uxth	r2, r3
 8001874:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001878:	9301      	str	r3, [sp, #4]
 800187a:	2302      	movs	r3, #2
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	2300      	movs	r3, #0
 8001880:	210a      	movs	r1, #10
 8001882:	4846      	ldr	r0, [pc, #280]	; (800199c <FreqMenu_DrawPresetMenu+0x660>)
 8001884:	f00b fab4 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, WHITE, 2, BLACK);
 8001888:	7b3b      	ldrb	r3, [r7, #12]
 800188a:	b29a      	uxth	r2, r3
 800188c:	2300      	movs	r3, #0
 800188e:	9301      	str	r3, [sp, #4]
 8001890:	2302      	movs	r3, #2
 8001892:	9300      	str	r3, [sp, #0]
 8001894:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001898:	210a      	movs	r1, #10
 800189a:	4841      	ldr	r0, [pc, #260]	; (80019a0 <FreqMenu_DrawPresetMenu+0x664>)
 800189c:	f00b faa8 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80018a0:	7afb      	ldrb	r3, [r7, #11]
 80018a2:	b29a      	uxth	r2, r3
 80018a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018a8:	9301      	str	r3, [sp, #4]
 80018aa:	2302      	movs	r3, #2
 80018ac:	9300      	str	r3, [sp, #0]
 80018ae:	2300      	movs	r3, #0
 80018b0:	210a      	movs	r1, #10
 80018b2:	483c      	ldr	r0, [pc, #240]	; (80019a4 <FreqMenu_DrawPresetMenu+0x668>)
 80018b4:	f00b fa9c 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80018b8:	7abb      	ldrb	r3, [r7, #10]
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018c0:	9301      	str	r3, [sp, #4]
 80018c2:	2302      	movs	r3, #2
 80018c4:	9300      	str	r3, [sp, #0]
 80018c6:	2300      	movs	r3, #0
 80018c8:	210a      	movs	r1, #10
 80018ca:	4837      	ldr	r0, [pc, #220]	; (80019a8 <FreqMenu_DrawPresetMenu+0x66c>)
 80018cc:	f00b fa90 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80018d0:	7a7b      	ldrb	r3, [r7, #9]
 80018d2:	b29a      	uxth	r2, r3
 80018d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018d8:	9301      	str	r3, [sp, #4]
 80018da:	2302      	movs	r3, #2
 80018dc:	9300      	str	r3, [sp, #0]
 80018de:	2300      	movs	r3, #0
 80018e0:	210a      	movs	r1, #10
 80018e2:	4832      	ldr	r0, [pc, #200]	; (80019ac <FreqMenu_DrawPresetMenu+0x670>)
 80018e4:	f00b fa84 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80018e8:	7bfb      	ldrb	r3, [r7, #15]
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80018f0:	9301      	str	r3, [sp, #4]
 80018f2:	2302      	movs	r3, #2
 80018f4:	9300      	str	r3, [sp, #0]
 80018f6:	2300      	movs	r3, #0
 80018f8:	2178      	movs	r1, #120	; 0x78
 80018fa:	482d      	ldr	r0, [pc, #180]	; (80019b0 <FreqMenu_DrawPresetMenu+0x674>)
 80018fc:	f00b fa78 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001900:	7bbb      	ldrb	r3, [r7, #14]
 8001902:	b29a      	uxth	r2, r3
 8001904:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001908:	9301      	str	r3, [sp, #4]
 800190a:	2302      	movs	r3, #2
 800190c:	9300      	str	r3, [sp, #0]
 800190e:	2300      	movs	r3, #0
 8001910:	2178      	movs	r1, #120	; 0x78
 8001912:	4828      	ldr	r0, [pc, #160]	; (80019b4 <FreqMenu_DrawPresetMenu+0x678>)
 8001914:	f00b fa6c 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001918:	7b7b      	ldrb	r3, [r7, #13]
 800191a:	b29a      	uxth	r2, r3
 800191c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001920:	9301      	str	r3, [sp, #4]
 8001922:	2302      	movs	r3, #2
 8001924:	9300      	str	r3, [sp, #0]
 8001926:	2300      	movs	r3, #0
 8001928:	2178      	movs	r1, #120	; 0x78
 800192a:	4823      	ldr	r0, [pc, #140]	; (80019b8 <FreqMenu_DrawPresetMenu+0x67c>)
 800192c:	f00b fa60 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001930:	7b3b      	ldrb	r3, [r7, #12]
 8001932:	b29a      	uxth	r2, r3
 8001934:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001938:	9301      	str	r3, [sp, #4]
 800193a:	2302      	movs	r3, #2
 800193c:	9300      	str	r3, [sp, #0]
 800193e:	2300      	movs	r3, #0
 8001940:	2178      	movs	r1, #120	; 0x78
 8001942:	481e      	ldr	r0, [pc, #120]	; (80019bc <FreqMenu_DrawPresetMenu+0x680>)
 8001944:	f00b fa54 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001948:	7afb      	ldrb	r3, [r7, #11]
 800194a:	b29a      	uxth	r2, r3
 800194c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001950:	9301      	str	r3, [sp, #4]
 8001952:	2302      	movs	r3, #2
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2300      	movs	r3, #0
 8001958:	2178      	movs	r1, #120	; 0x78
 800195a:	4819      	ldr	r0, [pc, #100]	; (80019c0 <FreqMenu_DrawPresetMenu+0x684>)
 800195c:	f00b fa48 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001960:	7abb      	ldrb	r3, [r7, #10]
 8001962:	b29a      	uxth	r2, r3
 8001964:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001968:	9301      	str	r3, [sp, #4]
 800196a:	2302      	movs	r3, #2
 800196c:	9300      	str	r3, [sp, #0]
 800196e:	2300      	movs	r3, #0
 8001970:	2178      	movs	r1, #120	; 0x78
 8001972:	4814      	ldr	r0, [pc, #80]	; (80019c4 <FreqMenu_DrawPresetMenu+0x688>)
 8001974:	f00b fa3c 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001978:	7a7b      	ldrb	r3, [r7, #9]
 800197a:	b29a      	uxth	r2, r3
 800197c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001980:	9301      	str	r3, [sp, #4]
 8001982:	2302      	movs	r3, #2
 8001984:	9300      	str	r3, [sp, #0]
 8001986:	2300      	movs	r3, #0
 8001988:	2178      	movs	r1, #120	; 0x78
 800198a:	480f      	ldr	r0, [pc, #60]	; (80019c8 <FreqMenu_DrawPresetMenu+0x68c>)
 800198c:	f00b fa30 	bl	800cdf0 <ILI9341_Draw_Text>
				break;
 8001990:	f000 bf37 	b.w	8002802 <FreqMenu_DrawPresetMenu+0x14c6>
 8001994:	0801048c 	.word	0x0801048c
 8001998:	08010494 	.word	0x08010494
 800199c:	0801049c 	.word	0x0801049c
 80019a0:	080104a4 	.word	0x080104a4
 80019a4:	080104ac 	.word	0x080104ac
 80019a8:	080104b4 	.word	0x080104b4
 80019ac:	080104bc 	.word	0x080104bc
 80019b0:	080104c4 	.word	0x080104c4
 80019b4:	080104cc 	.word	0x080104cc
 80019b8:	080104d4 	.word	0x080104d4
 80019bc:	080104dc 	.word	0x080104dc
 80019c0:	080104e4 	.word	0x080104e4
 80019c4:	080104ec 	.word	0x080104ec
 80019c8:	080104f4 	.word	0x080104f4
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80019cc:	7bfb      	ldrb	r3, [r7, #15]
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019d4:	9301      	str	r3, [sp, #4]
 80019d6:	2302      	movs	r3, #2
 80019d8:	9300      	str	r3, [sp, #0]
 80019da:	2300      	movs	r3, #0
 80019dc:	210a      	movs	r1, #10
 80019de:	48a5      	ldr	r0, [pc, #660]	; (8001c74 <FreqMenu_DrawPresetMenu+0x938>)
 80019e0:	f00b fa06 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80019e4:	7bbb      	ldrb	r3, [r7, #14]
 80019e6:	b29a      	uxth	r2, r3
 80019e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80019ec:	9301      	str	r3, [sp, #4]
 80019ee:	2302      	movs	r3, #2
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	2300      	movs	r3, #0
 80019f4:	210a      	movs	r1, #10
 80019f6:	48a0      	ldr	r0, [pc, #640]	; (8001c78 <FreqMenu_DrawPresetMenu+0x93c>)
 80019f8:	f00b f9fa 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80019fc:	7b7b      	ldrb	r3, [r7, #13]
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a04:	9301      	str	r3, [sp, #4]
 8001a06:	2302      	movs	r3, #2
 8001a08:	9300      	str	r3, [sp, #0]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	210a      	movs	r1, #10
 8001a0e:	489b      	ldr	r0, [pc, #620]	; (8001c7c <FreqMenu_DrawPresetMenu+0x940>)
 8001a10:	f00b f9ee 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001a14:	7b3b      	ldrb	r3, [r7, #12]
 8001a16:	b29a      	uxth	r2, r3
 8001a18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a1c:	9301      	str	r3, [sp, #4]
 8001a1e:	2302      	movs	r3, #2
 8001a20:	9300      	str	r3, [sp, #0]
 8001a22:	2300      	movs	r3, #0
 8001a24:	210a      	movs	r1, #10
 8001a26:	4896      	ldr	r0, [pc, #600]	; (8001c80 <FreqMenu_DrawPresetMenu+0x944>)
 8001a28:	f00b f9e2 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, WHITE, 2, BLACK);
 8001a2c:	7afb      	ldrb	r3, [r7, #11]
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	2300      	movs	r3, #0
 8001a32:	9301      	str	r3, [sp, #4]
 8001a34:	2302      	movs	r3, #2
 8001a36:	9300      	str	r3, [sp, #0]
 8001a38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a3c:	210a      	movs	r1, #10
 8001a3e:	4891      	ldr	r0, [pc, #580]	; (8001c84 <FreqMenu_DrawPresetMenu+0x948>)
 8001a40:	f00b f9d6 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001a44:	7abb      	ldrb	r3, [r7, #10]
 8001a46:	b29a      	uxth	r2, r3
 8001a48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a4c:	9301      	str	r3, [sp, #4]
 8001a4e:	2302      	movs	r3, #2
 8001a50:	9300      	str	r3, [sp, #0]
 8001a52:	2300      	movs	r3, #0
 8001a54:	210a      	movs	r1, #10
 8001a56:	488c      	ldr	r0, [pc, #560]	; (8001c88 <FreqMenu_DrawPresetMenu+0x94c>)
 8001a58:	f00b f9ca 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001a5c:	7a7b      	ldrb	r3, [r7, #9]
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a64:	9301      	str	r3, [sp, #4]
 8001a66:	2302      	movs	r3, #2
 8001a68:	9300      	str	r3, [sp, #0]
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	210a      	movs	r1, #10
 8001a6e:	4887      	ldr	r0, [pc, #540]	; (8001c8c <FreqMenu_DrawPresetMenu+0x950>)
 8001a70:	f00b f9be 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a7c:	9301      	str	r3, [sp, #4]
 8001a7e:	2302      	movs	r3, #2
 8001a80:	9300      	str	r3, [sp, #0]
 8001a82:	2300      	movs	r3, #0
 8001a84:	2178      	movs	r1, #120	; 0x78
 8001a86:	4882      	ldr	r0, [pc, #520]	; (8001c90 <FreqMenu_DrawPresetMenu+0x954>)
 8001a88:	f00b f9b2 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001a8c:	7bbb      	ldrb	r3, [r7, #14]
 8001a8e:	b29a      	uxth	r2, r3
 8001a90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001a94:	9301      	str	r3, [sp, #4]
 8001a96:	2302      	movs	r3, #2
 8001a98:	9300      	str	r3, [sp, #0]
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	2178      	movs	r1, #120	; 0x78
 8001a9e:	487d      	ldr	r0, [pc, #500]	; (8001c94 <FreqMenu_DrawPresetMenu+0x958>)
 8001aa0:	f00b f9a6 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001aa4:	7b7b      	ldrb	r3, [r7, #13]
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001aac:	9301      	str	r3, [sp, #4]
 8001aae:	2302      	movs	r3, #2
 8001ab0:	9300      	str	r3, [sp, #0]
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2178      	movs	r1, #120	; 0x78
 8001ab6:	4878      	ldr	r0, [pc, #480]	; (8001c98 <FreqMenu_DrawPresetMenu+0x95c>)
 8001ab8:	f00b f99a 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001abc:	7b3b      	ldrb	r3, [r7, #12]
 8001abe:	b29a      	uxth	r2, r3
 8001ac0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ac4:	9301      	str	r3, [sp, #4]
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2300      	movs	r3, #0
 8001acc:	2178      	movs	r1, #120	; 0x78
 8001ace:	4873      	ldr	r0, [pc, #460]	; (8001c9c <FreqMenu_DrawPresetMenu+0x960>)
 8001ad0:	f00b f98e 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001ad4:	7afb      	ldrb	r3, [r7, #11]
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	2302      	movs	r3, #2
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	2178      	movs	r1, #120	; 0x78
 8001ae6:	486e      	ldr	r0, [pc, #440]	; (8001ca0 <FreqMenu_DrawPresetMenu+0x964>)
 8001ae8:	f00b f982 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001aec:	7abb      	ldrb	r3, [r7, #10]
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001af4:	9301      	str	r3, [sp, #4]
 8001af6:	2302      	movs	r3, #2
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	2300      	movs	r3, #0
 8001afc:	2178      	movs	r1, #120	; 0x78
 8001afe:	4869      	ldr	r0, [pc, #420]	; (8001ca4 <FreqMenu_DrawPresetMenu+0x968>)
 8001b00:	f00b f976 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001b04:	7a7b      	ldrb	r3, [r7, #9]
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b0c:	9301      	str	r3, [sp, #4]
 8001b0e:	2302      	movs	r3, #2
 8001b10:	9300      	str	r3, [sp, #0]
 8001b12:	2300      	movs	r3, #0
 8001b14:	2178      	movs	r1, #120	; 0x78
 8001b16:	4864      	ldr	r0, [pc, #400]	; (8001ca8 <FreqMenu_DrawPresetMenu+0x96c>)
 8001b18:	f00b f96a 	bl	800cdf0 <ILI9341_Draw_Text>
				break;
 8001b1c:	f000 be71 	b.w	8002802 <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001b20:	7bfb      	ldrb	r3, [r7, #15]
 8001b22:	b29a      	uxth	r2, r3
 8001b24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b28:	9301      	str	r3, [sp, #4]
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	9300      	str	r3, [sp, #0]
 8001b2e:	2300      	movs	r3, #0
 8001b30:	210a      	movs	r1, #10
 8001b32:	4850      	ldr	r0, [pc, #320]	; (8001c74 <FreqMenu_DrawPresetMenu+0x938>)
 8001b34:	f00b f95c 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001b38:	7bbb      	ldrb	r3, [r7, #14]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b40:	9301      	str	r3, [sp, #4]
 8001b42:	2302      	movs	r3, #2
 8001b44:	9300      	str	r3, [sp, #0]
 8001b46:	2300      	movs	r3, #0
 8001b48:	210a      	movs	r1, #10
 8001b4a:	484b      	ldr	r0, [pc, #300]	; (8001c78 <FreqMenu_DrawPresetMenu+0x93c>)
 8001b4c:	f00b f950 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001b50:	7b7b      	ldrb	r3, [r7, #13]
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b58:	9301      	str	r3, [sp, #4]
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	210a      	movs	r1, #10
 8001b62:	4846      	ldr	r0, [pc, #280]	; (8001c7c <FreqMenu_DrawPresetMenu+0x940>)
 8001b64:	f00b f944 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001b68:	7b3b      	ldrb	r3, [r7, #12]
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b70:	9301      	str	r3, [sp, #4]
 8001b72:	2302      	movs	r3, #2
 8001b74:	9300      	str	r3, [sp, #0]
 8001b76:	2300      	movs	r3, #0
 8001b78:	210a      	movs	r1, #10
 8001b7a:	4841      	ldr	r0, [pc, #260]	; (8001c80 <FreqMenu_DrawPresetMenu+0x944>)
 8001b7c:	f00b f938 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001b80:	7afb      	ldrb	r3, [r7, #11]
 8001b82:	b29a      	uxth	r2, r3
 8001b84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b88:	9301      	str	r3, [sp, #4]
 8001b8a:	2302      	movs	r3, #2
 8001b8c:	9300      	str	r3, [sp, #0]
 8001b8e:	2300      	movs	r3, #0
 8001b90:	210a      	movs	r1, #10
 8001b92:	483c      	ldr	r0, [pc, #240]	; (8001c84 <FreqMenu_DrawPresetMenu+0x948>)
 8001b94:	f00b f92c 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, WHITE, 2, BLACK);
 8001b98:	7abb      	ldrb	r3, [r7, #10]
 8001b9a:	b29a      	uxth	r2, r3
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9301      	str	r3, [sp, #4]
 8001ba0:	2302      	movs	r3, #2
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ba8:	210a      	movs	r1, #10
 8001baa:	4837      	ldr	r0, [pc, #220]	; (8001c88 <FreqMenu_DrawPresetMenu+0x94c>)
 8001bac:	f00b f920 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001bb0:	7a7b      	ldrb	r3, [r7, #9]
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bb8:	9301      	str	r3, [sp, #4]
 8001bba:	2302      	movs	r3, #2
 8001bbc:	9300      	str	r3, [sp, #0]
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	210a      	movs	r1, #10
 8001bc2:	4832      	ldr	r0, [pc, #200]	; (8001c8c <FreqMenu_DrawPresetMenu+0x950>)
 8001bc4:	f00b f914 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001bc8:	7bfb      	ldrb	r3, [r7, #15]
 8001bca:	b29a      	uxth	r2, r3
 8001bcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001bd0:	9301      	str	r3, [sp, #4]
 8001bd2:	2302      	movs	r3, #2
 8001bd4:	9300      	str	r3, [sp, #0]
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	2178      	movs	r1, #120	; 0x78
 8001bda:	482d      	ldr	r0, [pc, #180]	; (8001c90 <FreqMenu_DrawPresetMenu+0x954>)
 8001bdc:	f00b f908 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001be0:	7bbb      	ldrb	r3, [r7, #14]
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001be8:	9301      	str	r3, [sp, #4]
 8001bea:	2302      	movs	r3, #2
 8001bec:	9300      	str	r3, [sp, #0]
 8001bee:	2300      	movs	r3, #0
 8001bf0:	2178      	movs	r1, #120	; 0x78
 8001bf2:	4828      	ldr	r0, [pc, #160]	; (8001c94 <FreqMenu_DrawPresetMenu+0x958>)
 8001bf4:	f00b f8fc 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001bf8:	7b7b      	ldrb	r3, [r7, #13]
 8001bfa:	b29a      	uxth	r2, r3
 8001bfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c00:	9301      	str	r3, [sp, #4]
 8001c02:	2302      	movs	r3, #2
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	2300      	movs	r3, #0
 8001c08:	2178      	movs	r1, #120	; 0x78
 8001c0a:	4823      	ldr	r0, [pc, #140]	; (8001c98 <FreqMenu_DrawPresetMenu+0x95c>)
 8001c0c:	f00b f8f0 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001c10:	7b3b      	ldrb	r3, [r7, #12]
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c18:	9301      	str	r3, [sp, #4]
 8001c1a:	2302      	movs	r3, #2
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	2178      	movs	r1, #120	; 0x78
 8001c22:	481e      	ldr	r0, [pc, #120]	; (8001c9c <FreqMenu_DrawPresetMenu+0x960>)
 8001c24:	f00b f8e4 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001c28:	7afb      	ldrb	r3, [r7, #11]
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c30:	9301      	str	r3, [sp, #4]
 8001c32:	2302      	movs	r3, #2
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	2300      	movs	r3, #0
 8001c38:	2178      	movs	r1, #120	; 0x78
 8001c3a:	4819      	ldr	r0, [pc, #100]	; (8001ca0 <FreqMenu_DrawPresetMenu+0x964>)
 8001c3c:	f00b f8d8 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001c40:	7abb      	ldrb	r3, [r7, #10]
 8001c42:	b29a      	uxth	r2, r3
 8001c44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c48:	9301      	str	r3, [sp, #4]
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	9300      	str	r3, [sp, #0]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	2178      	movs	r1, #120	; 0x78
 8001c52:	4814      	ldr	r0, [pc, #80]	; (8001ca4 <FreqMenu_DrawPresetMenu+0x968>)
 8001c54:	f00b f8cc 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001c58:	7a7b      	ldrb	r3, [r7, #9]
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	2302      	movs	r3, #2
 8001c64:	9300      	str	r3, [sp, #0]
 8001c66:	2300      	movs	r3, #0
 8001c68:	2178      	movs	r1, #120	; 0x78
 8001c6a:	480f      	ldr	r0, [pc, #60]	; (8001ca8 <FreqMenu_DrawPresetMenu+0x96c>)
 8001c6c:	f00b f8c0 	bl	800cdf0 <ILI9341_Draw_Text>
				break;
 8001c70:	f000 bdc7 	b.w	8002802 <FreqMenu_DrawPresetMenu+0x14c6>
 8001c74:	0801048c 	.word	0x0801048c
 8001c78:	08010494 	.word	0x08010494
 8001c7c:	0801049c 	.word	0x0801049c
 8001c80:	080104a4 	.word	0x080104a4
 8001c84:	080104ac 	.word	0x080104ac
 8001c88:	080104b4 	.word	0x080104b4
 8001c8c:	080104bc 	.word	0x080104bc
 8001c90:	080104c4 	.word	0x080104c4
 8001c94:	080104cc 	.word	0x080104cc
 8001c98:	080104d4 	.word	0x080104d4
 8001c9c:	080104dc 	.word	0x080104dc
 8001ca0:	080104e4 	.word	0x080104e4
 8001ca4:	080104ec 	.word	0x080104ec
 8001ca8:	080104f4 	.word	0x080104f4
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	b29a      	uxth	r2, r3
 8001cb0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cb4:	9301      	str	r3, [sp, #4]
 8001cb6:	2302      	movs	r3, #2
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	210a      	movs	r1, #10
 8001cbe:	48a5      	ldr	r0, [pc, #660]	; (8001f54 <FreqMenu_DrawPresetMenu+0xc18>)
 8001cc0:	f00b f896 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001cc4:	7bbb      	ldrb	r3, [r7, #14]
 8001cc6:	b29a      	uxth	r2, r3
 8001cc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ccc:	9301      	str	r3, [sp, #4]
 8001cce:	2302      	movs	r3, #2
 8001cd0:	9300      	str	r3, [sp, #0]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	210a      	movs	r1, #10
 8001cd6:	48a0      	ldr	r0, [pc, #640]	; (8001f58 <FreqMenu_DrawPresetMenu+0xc1c>)
 8001cd8:	f00b f88a 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001cdc:	7b7b      	ldrb	r3, [r7, #13]
 8001cde:	b29a      	uxth	r2, r3
 8001ce0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ce4:	9301      	str	r3, [sp, #4]
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	9300      	str	r3, [sp, #0]
 8001cea:	2300      	movs	r3, #0
 8001cec:	210a      	movs	r1, #10
 8001cee:	489b      	ldr	r0, [pc, #620]	; (8001f5c <FreqMenu_DrawPresetMenu+0xc20>)
 8001cf0:	f00b f87e 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001cf4:	7b3b      	ldrb	r3, [r7, #12]
 8001cf6:	b29a      	uxth	r2, r3
 8001cf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001cfc:	9301      	str	r3, [sp, #4]
 8001cfe:	2302      	movs	r3, #2
 8001d00:	9300      	str	r3, [sp, #0]
 8001d02:	2300      	movs	r3, #0
 8001d04:	210a      	movs	r1, #10
 8001d06:	4896      	ldr	r0, [pc, #600]	; (8001f60 <FreqMenu_DrawPresetMenu+0xc24>)
 8001d08:	f00b f872 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001d0c:	7afb      	ldrb	r3, [r7, #11]
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d14:	9301      	str	r3, [sp, #4]
 8001d16:	2302      	movs	r3, #2
 8001d18:	9300      	str	r3, [sp, #0]
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	210a      	movs	r1, #10
 8001d1e:	4891      	ldr	r0, [pc, #580]	; (8001f64 <FreqMenu_DrawPresetMenu+0xc28>)
 8001d20:	f00b f866 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001d24:	7abb      	ldrb	r3, [r7, #10]
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d2c:	9301      	str	r3, [sp, #4]
 8001d2e:	2302      	movs	r3, #2
 8001d30:	9300      	str	r3, [sp, #0]
 8001d32:	2300      	movs	r3, #0
 8001d34:	210a      	movs	r1, #10
 8001d36:	488c      	ldr	r0, [pc, #560]	; (8001f68 <FreqMenu_DrawPresetMenu+0xc2c>)
 8001d38:	f00b f85a 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, WHITE, 2, BLACK);
 8001d3c:	7a7b      	ldrb	r3, [r7, #9]
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	2300      	movs	r3, #0
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	2302      	movs	r3, #2
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d4c:	210a      	movs	r1, #10
 8001d4e:	4887      	ldr	r0, [pc, #540]	; (8001f6c <FreqMenu_DrawPresetMenu+0xc30>)
 8001d50:	f00b f84e 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d5c:	9301      	str	r3, [sp, #4]
 8001d5e:	2302      	movs	r3, #2
 8001d60:	9300      	str	r3, [sp, #0]
 8001d62:	2300      	movs	r3, #0
 8001d64:	2178      	movs	r1, #120	; 0x78
 8001d66:	4882      	ldr	r0, [pc, #520]	; (8001f70 <FreqMenu_DrawPresetMenu+0xc34>)
 8001d68:	f00b f842 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001d6c:	7bbb      	ldrb	r3, [r7, #14]
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d74:	9301      	str	r3, [sp, #4]
 8001d76:	2302      	movs	r3, #2
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	2178      	movs	r1, #120	; 0x78
 8001d7e:	487d      	ldr	r0, [pc, #500]	; (8001f74 <FreqMenu_DrawPresetMenu+0xc38>)
 8001d80:	f00b f836 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001d84:	7b7b      	ldrb	r3, [r7, #13]
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001d8c:	9301      	str	r3, [sp, #4]
 8001d8e:	2302      	movs	r3, #2
 8001d90:	9300      	str	r3, [sp, #0]
 8001d92:	2300      	movs	r3, #0
 8001d94:	2178      	movs	r1, #120	; 0x78
 8001d96:	4878      	ldr	r0, [pc, #480]	; (8001f78 <FreqMenu_DrawPresetMenu+0xc3c>)
 8001d98:	f00b f82a 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001d9c:	7b3b      	ldrb	r3, [r7, #12]
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001da4:	9301      	str	r3, [sp, #4]
 8001da6:	2302      	movs	r3, #2
 8001da8:	9300      	str	r3, [sp, #0]
 8001daa:	2300      	movs	r3, #0
 8001dac:	2178      	movs	r1, #120	; 0x78
 8001dae:	4873      	ldr	r0, [pc, #460]	; (8001f7c <FreqMenu_DrawPresetMenu+0xc40>)
 8001db0:	f00b f81e 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001db4:	7afb      	ldrb	r3, [r7, #11]
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dbc:	9301      	str	r3, [sp, #4]
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	9300      	str	r3, [sp, #0]
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	2178      	movs	r1, #120	; 0x78
 8001dc6:	486e      	ldr	r0, [pc, #440]	; (8001f80 <FreqMenu_DrawPresetMenu+0xc44>)
 8001dc8:	f00b f812 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001dcc:	7abb      	ldrb	r3, [r7, #10]
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dd4:	9301      	str	r3, [sp, #4]
 8001dd6:	2302      	movs	r3, #2
 8001dd8:	9300      	str	r3, [sp, #0]
 8001dda:	2300      	movs	r3, #0
 8001ddc:	2178      	movs	r1, #120	; 0x78
 8001dde:	4869      	ldr	r0, [pc, #420]	; (8001f84 <FreqMenu_DrawPresetMenu+0xc48>)
 8001de0:	f00b f806 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001de4:	7a7b      	ldrb	r3, [r7, #9]
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001dec:	9301      	str	r3, [sp, #4]
 8001dee:	2302      	movs	r3, #2
 8001df0:	9300      	str	r3, [sp, #0]
 8001df2:	2300      	movs	r3, #0
 8001df4:	2178      	movs	r1, #120	; 0x78
 8001df6:	4864      	ldr	r0, [pc, #400]	; (8001f88 <FreqMenu_DrawPresetMenu+0xc4c>)
 8001df8:	f00a fffa 	bl	800cdf0 <ILI9341_Draw_Text>
				break;
 8001dfc:	f000 bd01 	b.w	8002802 <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001e00:	7bfb      	ldrb	r3, [r7, #15]
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e08:	9301      	str	r3, [sp, #4]
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	2300      	movs	r3, #0
 8001e10:	210a      	movs	r1, #10
 8001e12:	4850      	ldr	r0, [pc, #320]	; (8001f54 <FreqMenu_DrawPresetMenu+0xc18>)
 8001e14:	f00a ffec 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001e18:	7bbb      	ldrb	r3, [r7, #14]
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e20:	9301      	str	r3, [sp, #4]
 8001e22:	2302      	movs	r3, #2
 8001e24:	9300      	str	r3, [sp, #0]
 8001e26:	2300      	movs	r3, #0
 8001e28:	210a      	movs	r1, #10
 8001e2a:	484b      	ldr	r0, [pc, #300]	; (8001f58 <FreqMenu_DrawPresetMenu+0xc1c>)
 8001e2c:	f00a ffe0 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001e30:	7b7b      	ldrb	r3, [r7, #13]
 8001e32:	b29a      	uxth	r2, r3
 8001e34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e38:	9301      	str	r3, [sp, #4]
 8001e3a:	2302      	movs	r3, #2
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	2300      	movs	r3, #0
 8001e40:	210a      	movs	r1, #10
 8001e42:	4846      	ldr	r0, [pc, #280]	; (8001f5c <FreqMenu_DrawPresetMenu+0xc20>)
 8001e44:	f00a ffd4 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001e48:	7b3b      	ldrb	r3, [r7, #12]
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e50:	9301      	str	r3, [sp, #4]
 8001e52:	2302      	movs	r3, #2
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	2300      	movs	r3, #0
 8001e58:	210a      	movs	r1, #10
 8001e5a:	4841      	ldr	r0, [pc, #260]	; (8001f60 <FreqMenu_DrawPresetMenu+0xc24>)
 8001e5c:	f00a ffc8 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001e60:	7afb      	ldrb	r3, [r7, #11]
 8001e62:	b29a      	uxth	r2, r3
 8001e64:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e68:	9301      	str	r3, [sp, #4]
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	9300      	str	r3, [sp, #0]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	210a      	movs	r1, #10
 8001e72:	483c      	ldr	r0, [pc, #240]	; (8001f64 <FreqMenu_DrawPresetMenu+0xc28>)
 8001e74:	f00a ffbc 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8001e78:	7abb      	ldrb	r3, [r7, #10]
 8001e7a:	b29a      	uxth	r2, r3
 8001e7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e80:	9301      	str	r3, [sp, #4]
 8001e82:	2302      	movs	r3, #2
 8001e84:	9300      	str	r3, [sp, #0]
 8001e86:	2300      	movs	r3, #0
 8001e88:	210a      	movs	r1, #10
 8001e8a:	4837      	ldr	r0, [pc, #220]	; (8001f68 <FreqMenu_DrawPresetMenu+0xc2c>)
 8001e8c:	f00a ffb0 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8001e90:	7a7b      	ldrb	r3, [r7, #9]
 8001e92:	b29a      	uxth	r2, r3
 8001e94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001e98:	9301      	str	r3, [sp, #4]
 8001e9a:	2302      	movs	r3, #2
 8001e9c:	9300      	str	r3, [sp, #0]
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	210a      	movs	r1, #10
 8001ea2:	4832      	ldr	r0, [pc, #200]	; (8001f6c <FreqMenu_DrawPresetMenu+0xc30>)
 8001ea4:	f00a ffa4 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, WHITE, 2, BLACK);
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	2300      	movs	r3, #0
 8001eae:	9301      	str	r3, [sp, #4]
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001eb8:	2178      	movs	r1, #120	; 0x78
 8001eba:	482d      	ldr	r0, [pc, #180]	; (8001f70 <FreqMenu_DrawPresetMenu+0xc34>)
 8001ebc:	f00a ff98 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8001ec0:	7bbb      	ldrb	r3, [r7, #14]
 8001ec2:	b29a      	uxth	r2, r3
 8001ec4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ec8:	9301      	str	r3, [sp, #4]
 8001eca:	2302      	movs	r3, #2
 8001ecc:	9300      	str	r3, [sp, #0]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	2178      	movs	r1, #120	; 0x78
 8001ed2:	4828      	ldr	r0, [pc, #160]	; (8001f74 <FreqMenu_DrawPresetMenu+0xc38>)
 8001ed4:	f00a ff8c 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8001ed8:	7b7b      	ldrb	r3, [r7, #13]
 8001eda:	b29a      	uxth	r2, r3
 8001edc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ee0:	9301      	str	r3, [sp, #4]
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	2178      	movs	r1, #120	; 0x78
 8001eea:	4823      	ldr	r0, [pc, #140]	; (8001f78 <FreqMenu_DrawPresetMenu+0xc3c>)
 8001eec:	f00a ff80 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8001ef0:	7b3b      	ldrb	r3, [r7, #12]
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ef8:	9301      	str	r3, [sp, #4]
 8001efa:	2302      	movs	r3, #2
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	2300      	movs	r3, #0
 8001f00:	2178      	movs	r1, #120	; 0x78
 8001f02:	481e      	ldr	r0, [pc, #120]	; (8001f7c <FreqMenu_DrawPresetMenu+0xc40>)
 8001f04:	f00a ff74 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8001f08:	7afb      	ldrb	r3, [r7, #11]
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f10:	9301      	str	r3, [sp, #4]
 8001f12:	2302      	movs	r3, #2
 8001f14:	9300      	str	r3, [sp, #0]
 8001f16:	2300      	movs	r3, #0
 8001f18:	2178      	movs	r1, #120	; 0x78
 8001f1a:	4819      	ldr	r0, [pc, #100]	; (8001f80 <FreqMenu_DrawPresetMenu+0xc44>)
 8001f1c:	f00a ff68 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8001f20:	7abb      	ldrb	r3, [r7, #10]
 8001f22:	b29a      	uxth	r2, r3
 8001f24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f28:	9301      	str	r3, [sp, #4]
 8001f2a:	2302      	movs	r3, #2
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	2300      	movs	r3, #0
 8001f30:	2178      	movs	r1, #120	; 0x78
 8001f32:	4814      	ldr	r0, [pc, #80]	; (8001f84 <FreqMenu_DrawPresetMenu+0xc48>)
 8001f34:	f00a ff5c 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8001f38:	7a7b      	ldrb	r3, [r7, #9]
 8001f3a:	b29a      	uxth	r2, r3
 8001f3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f40:	9301      	str	r3, [sp, #4]
 8001f42:	2302      	movs	r3, #2
 8001f44:	9300      	str	r3, [sp, #0]
 8001f46:	2300      	movs	r3, #0
 8001f48:	2178      	movs	r1, #120	; 0x78
 8001f4a:	480f      	ldr	r0, [pc, #60]	; (8001f88 <FreqMenu_DrawPresetMenu+0xc4c>)
 8001f4c:	f00a ff50 	bl	800cdf0 <ILI9341_Draw_Text>
				break;
 8001f50:	f000 bc57 	b.w	8002802 <FreqMenu_DrawPresetMenu+0x14c6>
 8001f54:	0801048c 	.word	0x0801048c
 8001f58:	08010494 	.word	0x08010494
 8001f5c:	0801049c 	.word	0x0801049c
 8001f60:	080104a4 	.word	0x080104a4
 8001f64:	080104ac 	.word	0x080104ac
 8001f68:	080104b4 	.word	0x080104b4
 8001f6c:	080104bc 	.word	0x080104bc
 8001f70:	080104c4 	.word	0x080104c4
 8001f74:	080104cc 	.word	0x080104cc
 8001f78:	080104d4 	.word	0x080104d4
 8001f7c:	080104dc 	.word	0x080104dc
 8001f80:	080104e4 	.word	0x080104e4
 8001f84:	080104ec 	.word	0x080104ec
 8001f88:	080104f4 	.word	0x080104f4
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8001f8c:	7bfb      	ldrb	r3, [r7, #15]
 8001f8e:	b29a      	uxth	r2, r3
 8001f90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001f94:	9301      	str	r3, [sp, #4]
 8001f96:	2302      	movs	r3, #2
 8001f98:	9300      	str	r3, [sp, #0]
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	210a      	movs	r1, #10
 8001f9e:	48a4      	ldr	r0, [pc, #656]	; (8002230 <FreqMenu_DrawPresetMenu+0xef4>)
 8001fa0:	f00a ff26 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8001fa4:	7bbb      	ldrb	r3, [r7, #14]
 8001fa6:	b29a      	uxth	r2, r3
 8001fa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fac:	9301      	str	r3, [sp, #4]
 8001fae:	2302      	movs	r3, #2
 8001fb0:	9300      	str	r3, [sp, #0]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	210a      	movs	r1, #10
 8001fb6:	489f      	ldr	r0, [pc, #636]	; (8002234 <FreqMenu_DrawPresetMenu+0xef8>)
 8001fb8:	f00a ff1a 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8001fbc:	7b7b      	ldrb	r3, [r7, #13]
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fc4:	9301      	str	r3, [sp, #4]
 8001fc6:	2302      	movs	r3, #2
 8001fc8:	9300      	str	r3, [sp, #0]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	210a      	movs	r1, #10
 8001fce:	489a      	ldr	r0, [pc, #616]	; (8002238 <FreqMenu_DrawPresetMenu+0xefc>)
 8001fd0:	f00a ff0e 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8001fd4:	7b3b      	ldrb	r3, [r7, #12]
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001fdc:	9301      	str	r3, [sp, #4]
 8001fde:	2302      	movs	r3, #2
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	210a      	movs	r1, #10
 8001fe6:	4895      	ldr	r0, [pc, #596]	; (800223c <FreqMenu_DrawPresetMenu+0xf00>)
 8001fe8:	f00a ff02 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 8001fec:	7afb      	ldrb	r3, [r7, #11]
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001ff4:	9301      	str	r3, [sp, #4]
 8001ff6:	2302      	movs	r3, #2
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	210a      	movs	r1, #10
 8001ffe:	4890      	ldr	r0, [pc, #576]	; (8002240 <FreqMenu_DrawPresetMenu+0xf04>)
 8002000:	f00a fef6 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002004:	7abb      	ldrb	r3, [r7, #10]
 8002006:	b29a      	uxth	r2, r3
 8002008:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800200c:	9301      	str	r3, [sp, #4]
 800200e:	2302      	movs	r3, #2
 8002010:	9300      	str	r3, [sp, #0]
 8002012:	2300      	movs	r3, #0
 8002014:	210a      	movs	r1, #10
 8002016:	488b      	ldr	r0, [pc, #556]	; (8002244 <FreqMenu_DrawPresetMenu+0xf08>)
 8002018:	f00a feea 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 800201c:	7a7b      	ldrb	r3, [r7, #9]
 800201e:	b29a      	uxth	r2, r3
 8002020:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002024:	9301      	str	r3, [sp, #4]
 8002026:	2302      	movs	r3, #2
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	2300      	movs	r3, #0
 800202c:	210a      	movs	r1, #10
 800202e:	4886      	ldr	r0, [pc, #536]	; (8002248 <FreqMenu_DrawPresetMenu+0xf0c>)
 8002030:	f00a fede 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002034:	7bfb      	ldrb	r3, [r7, #15]
 8002036:	b29a      	uxth	r2, r3
 8002038:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800203c:	9301      	str	r3, [sp, #4]
 800203e:	2302      	movs	r3, #2
 8002040:	9300      	str	r3, [sp, #0]
 8002042:	2300      	movs	r3, #0
 8002044:	2178      	movs	r1, #120	; 0x78
 8002046:	4881      	ldr	r0, [pc, #516]	; (800224c <FreqMenu_DrawPresetMenu+0xf10>)
 8002048:	f00a fed2 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, WHITE, 2, BLACK);
 800204c:	7bbb      	ldrb	r3, [r7, #14]
 800204e:	b29a      	uxth	r2, r3
 8002050:	2300      	movs	r3, #0
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	2302      	movs	r3, #2
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800205c:	2178      	movs	r1, #120	; 0x78
 800205e:	487c      	ldr	r0, [pc, #496]	; (8002250 <FreqMenu_DrawPresetMenu+0xf14>)
 8002060:	f00a fec6 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002064:	7b7b      	ldrb	r3, [r7, #13]
 8002066:	b29a      	uxth	r2, r3
 8002068:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800206c:	9301      	str	r3, [sp, #4]
 800206e:	2302      	movs	r3, #2
 8002070:	9300      	str	r3, [sp, #0]
 8002072:	2300      	movs	r3, #0
 8002074:	2178      	movs	r1, #120	; 0x78
 8002076:	4877      	ldr	r0, [pc, #476]	; (8002254 <FreqMenu_DrawPresetMenu+0xf18>)
 8002078:	f00a feba 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 800207c:	7b3b      	ldrb	r3, [r7, #12]
 800207e:	b29a      	uxth	r2, r3
 8002080:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002084:	9301      	str	r3, [sp, #4]
 8002086:	2302      	movs	r3, #2
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2300      	movs	r3, #0
 800208c:	2178      	movs	r1, #120	; 0x78
 800208e:	4872      	ldr	r0, [pc, #456]	; (8002258 <FreqMenu_DrawPresetMenu+0xf1c>)
 8002090:	f00a feae 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002094:	7afb      	ldrb	r3, [r7, #11]
 8002096:	b29a      	uxth	r2, r3
 8002098:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800209c:	9301      	str	r3, [sp, #4]
 800209e:	2302      	movs	r3, #2
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	2300      	movs	r3, #0
 80020a4:	2178      	movs	r1, #120	; 0x78
 80020a6:	486d      	ldr	r0, [pc, #436]	; (800225c <FreqMenu_DrawPresetMenu+0xf20>)
 80020a8:	f00a fea2 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80020ac:	7abb      	ldrb	r3, [r7, #10]
 80020ae:	b29a      	uxth	r2, r3
 80020b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020b4:	9301      	str	r3, [sp, #4]
 80020b6:	2302      	movs	r3, #2
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	2300      	movs	r3, #0
 80020bc:	2178      	movs	r1, #120	; 0x78
 80020be:	4868      	ldr	r0, [pc, #416]	; (8002260 <FreqMenu_DrawPresetMenu+0xf24>)
 80020c0:	f00a fe96 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80020c4:	7a7b      	ldrb	r3, [r7, #9]
 80020c6:	b29a      	uxth	r2, r3
 80020c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020cc:	9301      	str	r3, [sp, #4]
 80020ce:	2302      	movs	r3, #2
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	2300      	movs	r3, #0
 80020d4:	2178      	movs	r1, #120	; 0x78
 80020d6:	4863      	ldr	r0, [pc, #396]	; (8002264 <FreqMenu_DrawPresetMenu+0xf28>)
 80020d8:	f00a fe8a 	bl	800cdf0 <ILI9341_Draw_Text>
				break;
 80020dc:	e391      	b.n	8002802 <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80020de:	7bfb      	ldrb	r3, [r7, #15]
 80020e0:	b29a      	uxth	r2, r3
 80020e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020e6:	9301      	str	r3, [sp, #4]
 80020e8:	2302      	movs	r3, #2
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	2300      	movs	r3, #0
 80020ee:	210a      	movs	r1, #10
 80020f0:	484f      	ldr	r0, [pc, #316]	; (8002230 <FreqMenu_DrawPresetMenu+0xef4>)
 80020f2:	f00a fe7d 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80020f6:	7bbb      	ldrb	r3, [r7, #14]
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80020fe:	9301      	str	r3, [sp, #4]
 8002100:	2302      	movs	r3, #2
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	2300      	movs	r3, #0
 8002106:	210a      	movs	r1, #10
 8002108:	484a      	ldr	r0, [pc, #296]	; (8002234 <FreqMenu_DrawPresetMenu+0xef8>)
 800210a:	f00a fe71 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 800210e:	7b7b      	ldrb	r3, [r7, #13]
 8002110:	b29a      	uxth	r2, r3
 8002112:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002116:	9301      	str	r3, [sp, #4]
 8002118:	2302      	movs	r3, #2
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	2300      	movs	r3, #0
 800211e:	210a      	movs	r1, #10
 8002120:	4845      	ldr	r0, [pc, #276]	; (8002238 <FreqMenu_DrawPresetMenu+0xefc>)
 8002122:	f00a fe65 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002126:	7b3b      	ldrb	r3, [r7, #12]
 8002128:	b29a      	uxth	r2, r3
 800212a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800212e:	9301      	str	r3, [sp, #4]
 8002130:	2302      	movs	r3, #2
 8002132:	9300      	str	r3, [sp, #0]
 8002134:	2300      	movs	r3, #0
 8002136:	210a      	movs	r1, #10
 8002138:	4840      	ldr	r0, [pc, #256]	; (800223c <FreqMenu_DrawPresetMenu+0xf00>)
 800213a:	f00a fe59 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 800213e:	7afb      	ldrb	r3, [r7, #11]
 8002140:	b29a      	uxth	r2, r3
 8002142:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002146:	9301      	str	r3, [sp, #4]
 8002148:	2302      	movs	r3, #2
 800214a:	9300      	str	r3, [sp, #0]
 800214c:	2300      	movs	r3, #0
 800214e:	210a      	movs	r1, #10
 8002150:	483b      	ldr	r0, [pc, #236]	; (8002240 <FreqMenu_DrawPresetMenu+0xf04>)
 8002152:	f00a fe4d 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002156:	7abb      	ldrb	r3, [r7, #10]
 8002158:	b29a      	uxth	r2, r3
 800215a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800215e:	9301      	str	r3, [sp, #4]
 8002160:	2302      	movs	r3, #2
 8002162:	9300      	str	r3, [sp, #0]
 8002164:	2300      	movs	r3, #0
 8002166:	210a      	movs	r1, #10
 8002168:	4836      	ldr	r0, [pc, #216]	; (8002244 <FreqMenu_DrawPresetMenu+0xf08>)
 800216a:	f00a fe41 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 800216e:	7a7b      	ldrb	r3, [r7, #9]
 8002170:	b29a      	uxth	r2, r3
 8002172:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002176:	9301      	str	r3, [sp, #4]
 8002178:	2302      	movs	r3, #2
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	2300      	movs	r3, #0
 800217e:	210a      	movs	r1, #10
 8002180:	4831      	ldr	r0, [pc, #196]	; (8002248 <FreqMenu_DrawPresetMenu+0xf0c>)
 8002182:	f00a fe35 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002186:	7bfb      	ldrb	r3, [r7, #15]
 8002188:	b29a      	uxth	r2, r3
 800218a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800218e:	9301      	str	r3, [sp, #4]
 8002190:	2302      	movs	r3, #2
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	2300      	movs	r3, #0
 8002196:	2178      	movs	r1, #120	; 0x78
 8002198:	482c      	ldr	r0, [pc, #176]	; (800224c <FreqMenu_DrawPresetMenu+0xf10>)
 800219a:	f00a fe29 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800219e:	7bbb      	ldrb	r3, [r7, #14]
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021a6:	9301      	str	r3, [sp, #4]
 80021a8:	2302      	movs	r3, #2
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2300      	movs	r3, #0
 80021ae:	2178      	movs	r1, #120	; 0x78
 80021b0:	4827      	ldr	r0, [pc, #156]	; (8002250 <FreqMenu_DrawPresetMenu+0xf14>)
 80021b2:	f00a fe1d 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, WHITE, 2, BLACK);
 80021b6:	7b7b      	ldrb	r3, [r7, #13]
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	2300      	movs	r3, #0
 80021bc:	9301      	str	r3, [sp, #4]
 80021be:	2302      	movs	r3, #2
 80021c0:	9300      	str	r3, [sp, #0]
 80021c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021c6:	2178      	movs	r1, #120	; 0x78
 80021c8:	4822      	ldr	r0, [pc, #136]	; (8002254 <FreqMenu_DrawPresetMenu+0xf18>)
 80021ca:	f00a fe11 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80021ce:	7b3b      	ldrb	r3, [r7, #12]
 80021d0:	b29a      	uxth	r2, r3
 80021d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021d6:	9301      	str	r3, [sp, #4]
 80021d8:	2302      	movs	r3, #2
 80021da:	9300      	str	r3, [sp, #0]
 80021dc:	2300      	movs	r3, #0
 80021de:	2178      	movs	r1, #120	; 0x78
 80021e0:	481d      	ldr	r0, [pc, #116]	; (8002258 <FreqMenu_DrawPresetMenu+0xf1c>)
 80021e2:	f00a fe05 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 80021e6:	7afb      	ldrb	r3, [r7, #11]
 80021e8:	b29a      	uxth	r2, r3
 80021ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021ee:	9301      	str	r3, [sp, #4]
 80021f0:	2302      	movs	r3, #2
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	2300      	movs	r3, #0
 80021f6:	2178      	movs	r1, #120	; 0x78
 80021f8:	4818      	ldr	r0, [pc, #96]	; (800225c <FreqMenu_DrawPresetMenu+0xf20>)
 80021fa:	f00a fdf9 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80021fe:	7abb      	ldrb	r3, [r7, #10]
 8002200:	b29a      	uxth	r2, r3
 8002202:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002206:	9301      	str	r3, [sp, #4]
 8002208:	2302      	movs	r3, #2
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2300      	movs	r3, #0
 800220e:	2178      	movs	r1, #120	; 0x78
 8002210:	4813      	ldr	r0, [pc, #76]	; (8002260 <FreqMenu_DrawPresetMenu+0xf24>)
 8002212:	f00a fded 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 8002216:	7a7b      	ldrb	r3, [r7, #9]
 8002218:	b29a      	uxth	r2, r3
 800221a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800221e:	9301      	str	r3, [sp, #4]
 8002220:	2302      	movs	r3, #2
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	2300      	movs	r3, #0
 8002226:	2178      	movs	r1, #120	; 0x78
 8002228:	480e      	ldr	r0, [pc, #56]	; (8002264 <FreqMenu_DrawPresetMenu+0xf28>)
 800222a:	f00a fde1 	bl	800cdf0 <ILI9341_Draw_Text>
				break;
 800222e:	e2e8      	b.n	8002802 <FreqMenu_DrawPresetMenu+0x14c6>
 8002230:	0801048c 	.word	0x0801048c
 8002234:	08010494 	.word	0x08010494
 8002238:	0801049c 	.word	0x0801049c
 800223c:	080104a4 	.word	0x080104a4
 8002240:	080104ac 	.word	0x080104ac
 8002244:	080104b4 	.word	0x080104b4
 8002248:	080104bc 	.word	0x080104bc
 800224c:	080104c4 	.word	0x080104c4
 8002250:	080104cc 	.word	0x080104cc
 8002254:	080104d4 	.word	0x080104d4
 8002258:	080104dc 	.word	0x080104dc
 800225c:	080104e4 	.word	0x080104e4
 8002260:	080104ec 	.word	0x080104ec
 8002264:	080104f4 	.word	0x080104f4
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	b29a      	uxth	r2, r3
 800226c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002270:	9301      	str	r3, [sp, #4]
 8002272:	2302      	movs	r3, #2
 8002274:	9300      	str	r3, [sp, #0]
 8002276:	2300      	movs	r3, #0
 8002278:	210a      	movs	r1, #10
 800227a:	48a4      	ldr	r0, [pc, #656]	; (800250c <FreqMenu_DrawPresetMenu+0x11d0>)
 800227c:	f00a fdb8 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 8002280:	7bbb      	ldrb	r3, [r7, #14]
 8002282:	b29a      	uxth	r2, r3
 8002284:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002288:	9301      	str	r3, [sp, #4]
 800228a:	2302      	movs	r3, #2
 800228c:	9300      	str	r3, [sp, #0]
 800228e:	2300      	movs	r3, #0
 8002290:	210a      	movs	r1, #10
 8002292:	489f      	ldr	r0, [pc, #636]	; (8002510 <FreqMenu_DrawPresetMenu+0x11d4>)
 8002294:	f00a fdac 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002298:	7b7b      	ldrb	r3, [r7, #13]
 800229a:	b29a      	uxth	r2, r3
 800229c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022a0:	9301      	str	r3, [sp, #4]
 80022a2:	2302      	movs	r3, #2
 80022a4:	9300      	str	r3, [sp, #0]
 80022a6:	2300      	movs	r3, #0
 80022a8:	210a      	movs	r1, #10
 80022aa:	489a      	ldr	r0, [pc, #616]	; (8002514 <FreqMenu_DrawPresetMenu+0x11d8>)
 80022ac:	f00a fda0 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80022b0:	7b3b      	ldrb	r3, [r7, #12]
 80022b2:	b29a      	uxth	r2, r3
 80022b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022b8:	9301      	str	r3, [sp, #4]
 80022ba:	2302      	movs	r3, #2
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	2300      	movs	r3, #0
 80022c0:	210a      	movs	r1, #10
 80022c2:	4895      	ldr	r0, [pc, #596]	; (8002518 <FreqMenu_DrawPresetMenu+0x11dc>)
 80022c4:	f00a fd94 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80022c8:	7afb      	ldrb	r3, [r7, #11]
 80022ca:	b29a      	uxth	r2, r3
 80022cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022d0:	9301      	str	r3, [sp, #4]
 80022d2:	2302      	movs	r3, #2
 80022d4:	9300      	str	r3, [sp, #0]
 80022d6:	2300      	movs	r3, #0
 80022d8:	210a      	movs	r1, #10
 80022da:	4890      	ldr	r0, [pc, #576]	; (800251c <FreqMenu_DrawPresetMenu+0x11e0>)
 80022dc:	f00a fd88 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80022e0:	7abb      	ldrb	r3, [r7, #10]
 80022e2:	b29a      	uxth	r2, r3
 80022e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80022e8:	9301      	str	r3, [sp, #4]
 80022ea:	2302      	movs	r3, #2
 80022ec:	9300      	str	r3, [sp, #0]
 80022ee:	2300      	movs	r3, #0
 80022f0:	210a      	movs	r1, #10
 80022f2:	488b      	ldr	r0, [pc, #556]	; (8002520 <FreqMenu_DrawPresetMenu+0x11e4>)
 80022f4:	f00a fd7c 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80022f8:	7a7b      	ldrb	r3, [r7, #9]
 80022fa:	b29a      	uxth	r2, r3
 80022fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002300:	9301      	str	r3, [sp, #4]
 8002302:	2302      	movs	r3, #2
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	2300      	movs	r3, #0
 8002308:	210a      	movs	r1, #10
 800230a:	4886      	ldr	r0, [pc, #536]	; (8002524 <FreqMenu_DrawPresetMenu+0x11e8>)
 800230c:	f00a fd70 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002310:	7bfb      	ldrb	r3, [r7, #15]
 8002312:	b29a      	uxth	r2, r3
 8002314:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002318:	9301      	str	r3, [sp, #4]
 800231a:	2302      	movs	r3, #2
 800231c:	9300      	str	r3, [sp, #0]
 800231e:	2300      	movs	r3, #0
 8002320:	2178      	movs	r1, #120	; 0x78
 8002322:	4881      	ldr	r0, [pc, #516]	; (8002528 <FreqMenu_DrawPresetMenu+0x11ec>)
 8002324:	f00a fd64 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002328:	7bbb      	ldrb	r3, [r7, #14]
 800232a:	b29a      	uxth	r2, r3
 800232c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002330:	9301      	str	r3, [sp, #4]
 8002332:	2302      	movs	r3, #2
 8002334:	9300      	str	r3, [sp, #0]
 8002336:	2300      	movs	r3, #0
 8002338:	2178      	movs	r1, #120	; 0x78
 800233a:	487c      	ldr	r0, [pc, #496]	; (800252c <FreqMenu_DrawPresetMenu+0x11f0>)
 800233c:	f00a fd58 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002340:	7b7b      	ldrb	r3, [r7, #13]
 8002342:	b29a      	uxth	r2, r3
 8002344:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002348:	9301      	str	r3, [sp, #4]
 800234a:	2302      	movs	r3, #2
 800234c:	9300      	str	r3, [sp, #0]
 800234e:	2300      	movs	r3, #0
 8002350:	2178      	movs	r1, #120	; 0x78
 8002352:	4877      	ldr	r0, [pc, #476]	; (8002530 <FreqMenu_DrawPresetMenu+0x11f4>)
 8002354:	f00a fd4c 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, WHITE, 2, BLACK);
 8002358:	7b3b      	ldrb	r3, [r7, #12]
 800235a:	b29a      	uxth	r2, r3
 800235c:	2300      	movs	r3, #0
 800235e:	9301      	str	r3, [sp, #4]
 8002360:	2302      	movs	r3, #2
 8002362:	9300      	str	r3, [sp, #0]
 8002364:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002368:	2178      	movs	r1, #120	; 0x78
 800236a:	4872      	ldr	r0, [pc, #456]	; (8002534 <FreqMenu_DrawPresetMenu+0x11f8>)
 800236c:	f00a fd40 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 8002370:	7afb      	ldrb	r3, [r7, #11]
 8002372:	b29a      	uxth	r2, r3
 8002374:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002378:	9301      	str	r3, [sp, #4]
 800237a:	2302      	movs	r3, #2
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	2300      	movs	r3, #0
 8002380:	2178      	movs	r1, #120	; 0x78
 8002382:	486d      	ldr	r0, [pc, #436]	; (8002538 <FreqMenu_DrawPresetMenu+0x11fc>)
 8002384:	f00a fd34 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 8002388:	7abb      	ldrb	r3, [r7, #10]
 800238a:	b29a      	uxth	r2, r3
 800238c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002390:	9301      	str	r3, [sp, #4]
 8002392:	2302      	movs	r3, #2
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	2300      	movs	r3, #0
 8002398:	2178      	movs	r1, #120	; 0x78
 800239a:	4868      	ldr	r0, [pc, #416]	; (800253c <FreqMenu_DrawPresetMenu+0x1200>)
 800239c:	f00a fd28 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80023a0:	7a7b      	ldrb	r3, [r7, #9]
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023a8:	9301      	str	r3, [sp, #4]
 80023aa:	2302      	movs	r3, #2
 80023ac:	9300      	str	r3, [sp, #0]
 80023ae:	2300      	movs	r3, #0
 80023b0:	2178      	movs	r1, #120	; 0x78
 80023b2:	4863      	ldr	r0, [pc, #396]	; (8002540 <FreqMenu_DrawPresetMenu+0x1204>)
 80023b4:	f00a fd1c 	bl	800cdf0 <ILI9341_Draw_Text>
				break;
 80023b8:	e223      	b.n	8002802 <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 80023ba:	7bfb      	ldrb	r3, [r7, #15]
 80023bc:	b29a      	uxth	r2, r3
 80023be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023c2:	9301      	str	r3, [sp, #4]
 80023c4:	2302      	movs	r3, #2
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	2300      	movs	r3, #0
 80023ca:	210a      	movs	r1, #10
 80023cc:	484f      	ldr	r0, [pc, #316]	; (800250c <FreqMenu_DrawPresetMenu+0x11d0>)
 80023ce:	f00a fd0f 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80023d2:	7bbb      	ldrb	r3, [r7, #14]
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023da:	9301      	str	r3, [sp, #4]
 80023dc:	2302      	movs	r3, #2
 80023de:	9300      	str	r3, [sp, #0]
 80023e0:	2300      	movs	r3, #0
 80023e2:	210a      	movs	r1, #10
 80023e4:	484a      	ldr	r0, [pc, #296]	; (8002510 <FreqMenu_DrawPresetMenu+0x11d4>)
 80023e6:	f00a fd03 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80023ea:	7b7b      	ldrb	r3, [r7, #13]
 80023ec:	b29a      	uxth	r2, r3
 80023ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023f2:	9301      	str	r3, [sp, #4]
 80023f4:	2302      	movs	r3, #2
 80023f6:	9300      	str	r3, [sp, #0]
 80023f8:	2300      	movs	r3, #0
 80023fa:	210a      	movs	r1, #10
 80023fc:	4845      	ldr	r0, [pc, #276]	; (8002514 <FreqMenu_DrawPresetMenu+0x11d8>)
 80023fe:	f00a fcf7 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 8002402:	7b3b      	ldrb	r3, [r7, #12]
 8002404:	b29a      	uxth	r2, r3
 8002406:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800240a:	9301      	str	r3, [sp, #4]
 800240c:	2302      	movs	r3, #2
 800240e:	9300      	str	r3, [sp, #0]
 8002410:	2300      	movs	r3, #0
 8002412:	210a      	movs	r1, #10
 8002414:	4840      	ldr	r0, [pc, #256]	; (8002518 <FreqMenu_DrawPresetMenu+0x11dc>)
 8002416:	f00a fceb 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 800241a:	7afb      	ldrb	r3, [r7, #11]
 800241c:	b29a      	uxth	r2, r3
 800241e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002422:	9301      	str	r3, [sp, #4]
 8002424:	2302      	movs	r3, #2
 8002426:	9300      	str	r3, [sp, #0]
 8002428:	2300      	movs	r3, #0
 800242a:	210a      	movs	r1, #10
 800242c:	483b      	ldr	r0, [pc, #236]	; (800251c <FreqMenu_DrawPresetMenu+0x11e0>)
 800242e:	f00a fcdf 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 8002432:	7abb      	ldrb	r3, [r7, #10]
 8002434:	b29a      	uxth	r2, r3
 8002436:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800243a:	9301      	str	r3, [sp, #4]
 800243c:	2302      	movs	r3, #2
 800243e:	9300      	str	r3, [sp, #0]
 8002440:	2300      	movs	r3, #0
 8002442:	210a      	movs	r1, #10
 8002444:	4836      	ldr	r0, [pc, #216]	; (8002520 <FreqMenu_DrawPresetMenu+0x11e4>)
 8002446:	f00a fcd3 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 800244a:	7a7b      	ldrb	r3, [r7, #9]
 800244c:	b29a      	uxth	r2, r3
 800244e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002452:	9301      	str	r3, [sp, #4]
 8002454:	2302      	movs	r3, #2
 8002456:	9300      	str	r3, [sp, #0]
 8002458:	2300      	movs	r3, #0
 800245a:	210a      	movs	r1, #10
 800245c:	4831      	ldr	r0, [pc, #196]	; (8002524 <FreqMenu_DrawPresetMenu+0x11e8>)
 800245e:	f00a fcc7 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	b29a      	uxth	r2, r3
 8002466:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800246a:	9301      	str	r3, [sp, #4]
 800246c:	2302      	movs	r3, #2
 800246e:	9300      	str	r3, [sp, #0]
 8002470:	2300      	movs	r3, #0
 8002472:	2178      	movs	r1, #120	; 0x78
 8002474:	482c      	ldr	r0, [pc, #176]	; (8002528 <FreqMenu_DrawPresetMenu+0x11ec>)
 8002476:	f00a fcbb 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 800247a:	7bbb      	ldrb	r3, [r7, #14]
 800247c:	b29a      	uxth	r2, r3
 800247e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002482:	9301      	str	r3, [sp, #4]
 8002484:	2302      	movs	r3, #2
 8002486:	9300      	str	r3, [sp, #0]
 8002488:	2300      	movs	r3, #0
 800248a:	2178      	movs	r1, #120	; 0x78
 800248c:	4827      	ldr	r0, [pc, #156]	; (800252c <FreqMenu_DrawPresetMenu+0x11f0>)
 800248e:	f00a fcaf 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 8002492:	7b7b      	ldrb	r3, [r7, #13]
 8002494:	b29a      	uxth	r2, r3
 8002496:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800249a:	9301      	str	r3, [sp, #4]
 800249c:	2302      	movs	r3, #2
 800249e:	9300      	str	r3, [sp, #0]
 80024a0:	2300      	movs	r3, #0
 80024a2:	2178      	movs	r1, #120	; 0x78
 80024a4:	4822      	ldr	r0, [pc, #136]	; (8002530 <FreqMenu_DrawPresetMenu+0x11f4>)
 80024a6:	f00a fca3 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 80024aa:	7b3b      	ldrb	r3, [r7, #12]
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	2302      	movs	r3, #2
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	2300      	movs	r3, #0
 80024ba:	2178      	movs	r1, #120	; 0x78
 80024bc:	481d      	ldr	r0, [pc, #116]	; (8002534 <FreqMenu_DrawPresetMenu+0x11f8>)
 80024be:	f00a fc97 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, WHITE, 2, BLACK);
 80024c2:	7afb      	ldrb	r3, [r7, #11]
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	2300      	movs	r3, #0
 80024c8:	9301      	str	r3, [sp, #4]
 80024ca:	2302      	movs	r3, #2
 80024cc:	9300      	str	r3, [sp, #0]
 80024ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024d2:	2178      	movs	r1, #120	; 0x78
 80024d4:	4818      	ldr	r0, [pc, #96]	; (8002538 <FreqMenu_DrawPresetMenu+0x11fc>)
 80024d6:	f00a fc8b 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80024da:	7abb      	ldrb	r3, [r7, #10]
 80024dc:	b29a      	uxth	r2, r3
 80024de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024e2:	9301      	str	r3, [sp, #4]
 80024e4:	2302      	movs	r3, #2
 80024e6:	9300      	str	r3, [sp, #0]
 80024e8:	2300      	movs	r3, #0
 80024ea:	2178      	movs	r1, #120	; 0x78
 80024ec:	4813      	ldr	r0, [pc, #76]	; (800253c <FreqMenu_DrawPresetMenu+0x1200>)
 80024ee:	f00a fc7f 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 80024f2:	7a7b      	ldrb	r3, [r7, #9]
 80024f4:	b29a      	uxth	r2, r3
 80024f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80024fa:	9301      	str	r3, [sp, #4]
 80024fc:	2302      	movs	r3, #2
 80024fe:	9300      	str	r3, [sp, #0]
 8002500:	2300      	movs	r3, #0
 8002502:	2178      	movs	r1, #120	; 0x78
 8002504:	480e      	ldr	r0, [pc, #56]	; (8002540 <FreqMenu_DrawPresetMenu+0x1204>)
 8002506:	f00a fc73 	bl	800cdf0 <ILI9341_Draw_Text>
			break;
 800250a:	e17a      	b.n	8002802 <FreqMenu_DrawPresetMenu+0x14c6>
 800250c:	0801048c 	.word	0x0801048c
 8002510:	08010494 	.word	0x08010494
 8002514:	0801049c 	.word	0x0801049c
 8002518:	080104a4 	.word	0x080104a4
 800251c:	080104ac 	.word	0x080104ac
 8002520:	080104b4 	.word	0x080104b4
 8002524:	080104bc 	.word	0x080104bc
 8002528:	080104c4 	.word	0x080104c4
 800252c:	080104cc 	.word	0x080104cc
 8002530:	080104d4 	.word	0x080104d4
 8002534:	080104dc 	.word	0x080104dc
 8002538:	080104e4 	.word	0x080104e4
 800253c:	080104ec 	.word	0x080104ec
 8002540:	080104f4 	.word	0x080104f4
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	b29a      	uxth	r2, r3
 8002548:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800254c:	9301      	str	r3, [sp, #4]
 800254e:	2302      	movs	r3, #2
 8002550:	9300      	str	r3, [sp, #0]
 8002552:	2300      	movs	r3, #0
 8002554:	210a      	movs	r1, #10
 8002556:	48ad      	ldr	r0, [pc, #692]	; (800280c <FreqMenu_DrawPresetMenu+0x14d0>)
 8002558:	f00a fc4a 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 800255c:	7bbb      	ldrb	r3, [r7, #14]
 800255e:	b29a      	uxth	r2, r3
 8002560:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002564:	9301      	str	r3, [sp, #4]
 8002566:	2302      	movs	r3, #2
 8002568:	9300      	str	r3, [sp, #0]
 800256a:	2300      	movs	r3, #0
 800256c:	210a      	movs	r1, #10
 800256e:	48a8      	ldr	r0, [pc, #672]	; (8002810 <FreqMenu_DrawPresetMenu+0x14d4>)
 8002570:	f00a fc3e 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 8002574:	7b7b      	ldrb	r3, [r7, #13]
 8002576:	b29a      	uxth	r2, r3
 8002578:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800257c:	9301      	str	r3, [sp, #4]
 800257e:	2302      	movs	r3, #2
 8002580:	9300      	str	r3, [sp, #0]
 8002582:	2300      	movs	r3, #0
 8002584:	210a      	movs	r1, #10
 8002586:	48a3      	ldr	r0, [pc, #652]	; (8002814 <FreqMenu_DrawPresetMenu+0x14d8>)
 8002588:	f00a fc32 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 800258c:	7b3b      	ldrb	r3, [r7, #12]
 800258e:	b29a      	uxth	r2, r3
 8002590:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002594:	9301      	str	r3, [sp, #4]
 8002596:	2302      	movs	r3, #2
 8002598:	9300      	str	r3, [sp, #0]
 800259a:	2300      	movs	r3, #0
 800259c:	210a      	movs	r1, #10
 800259e:	489e      	ldr	r0, [pc, #632]	; (8002818 <FreqMenu_DrawPresetMenu+0x14dc>)
 80025a0:	f00a fc26 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80025a4:	7afb      	ldrb	r3, [r7, #11]
 80025a6:	b29a      	uxth	r2, r3
 80025a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025ac:	9301      	str	r3, [sp, #4]
 80025ae:	2302      	movs	r3, #2
 80025b0:	9300      	str	r3, [sp, #0]
 80025b2:	2300      	movs	r3, #0
 80025b4:	210a      	movs	r1, #10
 80025b6:	4899      	ldr	r0, [pc, #612]	; (800281c <FreqMenu_DrawPresetMenu+0x14e0>)
 80025b8:	f00a fc1a 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 80025bc:	7abb      	ldrb	r3, [r7, #10]
 80025be:	b29a      	uxth	r2, r3
 80025c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025c4:	9301      	str	r3, [sp, #4]
 80025c6:	2302      	movs	r3, #2
 80025c8:	9300      	str	r3, [sp, #0]
 80025ca:	2300      	movs	r3, #0
 80025cc:	210a      	movs	r1, #10
 80025ce:	4894      	ldr	r0, [pc, #592]	; (8002820 <FreqMenu_DrawPresetMenu+0x14e4>)
 80025d0:	f00a fc0e 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 80025d4:	7a7b      	ldrb	r3, [r7, #9]
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025dc:	9301      	str	r3, [sp, #4]
 80025de:	2302      	movs	r3, #2
 80025e0:	9300      	str	r3, [sp, #0]
 80025e2:	2300      	movs	r3, #0
 80025e4:	210a      	movs	r1, #10
 80025e6:	488f      	ldr	r0, [pc, #572]	; (8002824 <FreqMenu_DrawPresetMenu+0x14e8>)
 80025e8:	f00a fc02 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 80025ec:	7bfb      	ldrb	r3, [r7, #15]
 80025ee:	b29a      	uxth	r2, r3
 80025f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80025f4:	9301      	str	r3, [sp, #4]
 80025f6:	2302      	movs	r3, #2
 80025f8:	9300      	str	r3, [sp, #0]
 80025fa:	2300      	movs	r3, #0
 80025fc:	2178      	movs	r1, #120	; 0x78
 80025fe:	488a      	ldr	r0, [pc, #552]	; (8002828 <FreqMenu_DrawPresetMenu+0x14ec>)
 8002600:	f00a fbf6 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002604:	7bbb      	ldrb	r3, [r7, #14]
 8002606:	b29a      	uxth	r2, r3
 8002608:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800260c:	9301      	str	r3, [sp, #4]
 800260e:	2302      	movs	r3, #2
 8002610:	9300      	str	r3, [sp, #0]
 8002612:	2300      	movs	r3, #0
 8002614:	2178      	movs	r1, #120	; 0x78
 8002616:	4885      	ldr	r0, [pc, #532]	; (800282c <FreqMenu_DrawPresetMenu+0x14f0>)
 8002618:	f00a fbea 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 800261c:	7b7b      	ldrb	r3, [r7, #13]
 800261e:	b29a      	uxth	r2, r3
 8002620:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002624:	9301      	str	r3, [sp, #4]
 8002626:	2302      	movs	r3, #2
 8002628:	9300      	str	r3, [sp, #0]
 800262a:	2300      	movs	r3, #0
 800262c:	2178      	movs	r1, #120	; 0x78
 800262e:	4880      	ldr	r0, [pc, #512]	; (8002830 <FreqMenu_DrawPresetMenu+0x14f4>)
 8002630:	f00a fbde 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002634:	7b3b      	ldrb	r3, [r7, #12]
 8002636:	b29a      	uxth	r2, r3
 8002638:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800263c:	9301      	str	r3, [sp, #4]
 800263e:	2302      	movs	r3, #2
 8002640:	9300      	str	r3, [sp, #0]
 8002642:	2300      	movs	r3, #0
 8002644:	2178      	movs	r1, #120	; 0x78
 8002646:	487b      	ldr	r0, [pc, #492]	; (8002834 <FreqMenu_DrawPresetMenu+0x14f8>)
 8002648:	f00a fbd2 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 800264c:	7afb      	ldrb	r3, [r7, #11]
 800264e:	b29a      	uxth	r2, r3
 8002650:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002654:	9301      	str	r3, [sp, #4]
 8002656:	2302      	movs	r3, #2
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	2300      	movs	r3, #0
 800265c:	2178      	movs	r1, #120	; 0x78
 800265e:	4876      	ldr	r0, [pc, #472]	; (8002838 <FreqMenu_DrawPresetMenu+0x14fc>)
 8002660:	f00a fbc6 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, WHITE, 2, BLACK);
 8002664:	7abb      	ldrb	r3, [r7, #10]
 8002666:	b29a      	uxth	r2, r3
 8002668:	2300      	movs	r3, #0
 800266a:	9301      	str	r3, [sp, #4]
 800266c:	2302      	movs	r3, #2
 800266e:	9300      	str	r3, [sp, #0]
 8002670:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002674:	2178      	movs	r1, #120	; 0x78
 8002676:	4871      	ldr	r0, [pc, #452]	; (800283c <FreqMenu_DrawPresetMenu+0x1500>)
 8002678:	f00a fbba 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, BLACK, 2, WHITE);
 800267c:	7a7b      	ldrb	r3, [r7, #9]
 800267e:	b29a      	uxth	r2, r3
 8002680:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002684:	9301      	str	r3, [sp, #4]
 8002686:	2302      	movs	r3, #2
 8002688:	9300      	str	r3, [sp, #0]
 800268a:	2300      	movs	r3, #0
 800268c:	2178      	movs	r1, #120	; 0x78
 800268e:	486c      	ldr	r0, [pc, #432]	; (8002840 <FreqMenu_DrawPresetMenu+0x1504>)
 8002690:	f00a fbae 	bl	800cdf0 <ILI9341_Draw_Text>
			break;
 8002694:	e0b5      	b.n	8002802 <FreqMenu_DrawPresetMenu+0x14c6>
				ILI9341_Draw_Text("- 1Hz", 		10, menu_pos_y1, BLACK, 2, WHITE);
 8002696:	7bfb      	ldrb	r3, [r7, #15]
 8002698:	b29a      	uxth	r2, r3
 800269a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800269e:	9301      	str	r3, [sp, #4]
 80026a0:	2302      	movs	r3, #2
 80026a2:	9300      	str	r3, [sp, #0]
 80026a4:	2300      	movs	r3, #0
 80026a6:	210a      	movs	r1, #10
 80026a8:	4858      	ldr	r0, [pc, #352]	; (800280c <FreqMenu_DrawPresetMenu+0x14d0>)
 80026aa:	f00a fba1 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10Hz", 	10, menu_pos_y2, BLACK, 2, WHITE);
 80026ae:	7bbb      	ldrb	r3, [r7, #14]
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026b6:	9301      	str	r3, [sp, #4]
 80026b8:	2302      	movs	r3, #2
 80026ba:	9300      	str	r3, [sp, #0]
 80026bc:	2300      	movs	r3, #0
 80026be:	210a      	movs	r1, #10
 80026c0:	4853      	ldr	r0, [pc, #332]	; (8002810 <FreqMenu_DrawPresetMenu+0x14d4>)
 80026c2:	f00a fb95 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50Hz", 	10, menu_pos_y3, BLACK, 2, WHITE);
 80026c6:	7b7b      	ldrb	r3, [r7, #13]
 80026c8:	b29a      	uxth	r2, r3
 80026ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026ce:	9301      	str	r3, [sp, #4]
 80026d0:	2302      	movs	r3, #2
 80026d2:	9300      	str	r3, [sp, #0]
 80026d4:	2300      	movs	r3, #0
 80026d6:	210a      	movs	r1, #10
 80026d8:	484e      	ldr	r0, [pc, #312]	; (8002814 <FreqMenu_DrawPresetMenu+0x14d8>)
 80026da:	f00a fb89 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100Hz", 	10, menu_pos_y4, BLACK, 2, WHITE);
 80026de:	7b3b      	ldrb	r3, [r7, #12]
 80026e0:	b29a      	uxth	r2, r3
 80026e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026e6:	9301      	str	r3, [sp, #4]
 80026e8:	2302      	movs	r3, #2
 80026ea:	9300      	str	r3, [sp, #0]
 80026ec:	2300      	movs	r3, #0
 80026ee:	210a      	movs	r1, #10
 80026f0:	4849      	ldr	r0, [pc, #292]	; (8002818 <FreqMenu_DrawPresetMenu+0x14dc>)
 80026f2:	f00a fb7d 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 250Hz", 	10, menu_pos_y5, BLACK, 2, WHITE);
 80026f6:	7afb      	ldrb	r3, [r7, #11]
 80026f8:	b29a      	uxth	r2, r3
 80026fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80026fe:	9301      	str	r3, [sp, #4]
 8002700:	2302      	movs	r3, #2
 8002702:	9300      	str	r3, [sp, #0]
 8002704:	2300      	movs	r3, #0
 8002706:	210a      	movs	r1, #10
 8002708:	4844      	ldr	r0, [pc, #272]	; (800281c <FreqMenu_DrawPresetMenu+0x14e0>)
 800270a:	f00a fb71 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 500Hz",	10, menu_pos_y6, BLACK, 2, WHITE);
 800270e:	7abb      	ldrb	r3, [r7, #10]
 8002710:	b29a      	uxth	r2, r3
 8002712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002716:	9301      	str	r3, [sp, #4]
 8002718:	2302      	movs	r3, #2
 800271a:	9300      	str	r3, [sp, #0]
 800271c:	2300      	movs	r3, #0
 800271e:	210a      	movs	r1, #10
 8002720:	483f      	ldr	r0, [pc, #252]	; (8002820 <FreqMenu_DrawPresetMenu+0x14e4>)
 8002722:	f00a fb65 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 750Hz", 	10, menu_pos_y7, BLACK, 2, WHITE);
 8002726:	7a7b      	ldrb	r3, [r7, #9]
 8002728:	b29a      	uxth	r2, r3
 800272a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800272e:	9301      	str	r3, [sp, #4]
 8002730:	2302      	movs	r3, #2
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	2300      	movs	r3, #0
 8002736:	210a      	movs	r1, #10
 8002738:	483a      	ldr	r0, [pc, #232]	; (8002824 <FreqMenu_DrawPresetMenu+0x14e8>)
 800273a:	f00a fb59 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 1KHz", 	120, menu_pos_y1, BLACK, 2, WHITE);
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	b29a      	uxth	r2, r3
 8002742:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002746:	9301      	str	r3, [sp, #4]
 8002748:	2302      	movs	r3, #2
 800274a:	9300      	str	r3, [sp, #0]
 800274c:	2300      	movs	r3, #0
 800274e:	2178      	movs	r1, #120	; 0x78
 8002750:	4835      	ldr	r0, [pc, #212]	; (8002828 <FreqMenu_DrawPresetMenu+0x14ec>)
 8002752:	f00a fb4d 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 5KHz", 	120, menu_pos_y2, BLACK, 2, WHITE);
 8002756:	7bbb      	ldrb	r3, [r7, #14]
 8002758:	b29a      	uxth	r2, r3
 800275a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800275e:	9301      	str	r3, [sp, #4]
 8002760:	2302      	movs	r3, #2
 8002762:	9300      	str	r3, [sp, #0]
 8002764:	2300      	movs	r3, #0
 8002766:	2178      	movs	r1, #120	; 0x78
 8002768:	4830      	ldr	r0, [pc, #192]	; (800282c <FreqMenu_DrawPresetMenu+0x14f0>)
 800276a:	f00a fb41 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 10KHz", 	120, menu_pos_y3, BLACK, 2, WHITE);
 800276e:	7b7b      	ldrb	r3, [r7, #13]
 8002770:	b29a      	uxth	r2, r3
 8002772:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002776:	9301      	str	r3, [sp, #4]
 8002778:	2302      	movs	r3, #2
 800277a:	9300      	str	r3, [sp, #0]
 800277c:	2300      	movs	r3, #0
 800277e:	2178      	movs	r1, #120	; 0x78
 8002780:	482b      	ldr	r0, [pc, #172]	; (8002830 <FreqMenu_DrawPresetMenu+0x14f4>)
 8002782:	f00a fb35 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 25KHz", 	120, menu_pos_y4, BLACK, 2, WHITE);
 8002786:	7b3b      	ldrb	r3, [r7, #12]
 8002788:	b29a      	uxth	r2, r3
 800278a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800278e:	9301      	str	r3, [sp, #4]
 8002790:	2302      	movs	r3, #2
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	2300      	movs	r3, #0
 8002796:	2178      	movs	r1, #120	; 0x78
 8002798:	4826      	ldr	r0, [pc, #152]	; (8002834 <FreqMenu_DrawPresetMenu+0x14f8>)
 800279a:	f00a fb29 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 50KHz", 	120, menu_pos_y5, BLACK, 2, WHITE);
 800279e:	7afb      	ldrb	r3, [r7, #11]
 80027a0:	b29a      	uxth	r2, r3
 80027a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027a6:	9301      	str	r3, [sp, #4]
 80027a8:	2302      	movs	r3, #2
 80027aa:	9300      	str	r3, [sp, #0]
 80027ac:	2300      	movs	r3, #0
 80027ae:	2178      	movs	r1, #120	; 0x78
 80027b0:	4821      	ldr	r0, [pc, #132]	; (8002838 <FreqMenu_DrawPresetMenu+0x14fc>)
 80027b2:	f00a fb1d 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 75KHz",	120, menu_pos_y6, BLACK, 2, WHITE);
 80027b6:	7abb      	ldrb	r3, [r7, #10]
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027be:	9301      	str	r3, [sp, #4]
 80027c0:	2302      	movs	r3, #2
 80027c2:	9300      	str	r3, [sp, #0]
 80027c4:	2300      	movs	r3, #0
 80027c6:	2178      	movs	r1, #120	; 0x78
 80027c8:	481c      	ldr	r0, [pc, #112]	; (800283c <FreqMenu_DrawPresetMenu+0x1500>)
 80027ca:	f00a fb11 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- 100KHz", 	120, menu_pos_y7, WHITE, 2, BLACK);
 80027ce:	7a7b      	ldrb	r3, [r7, #9]
 80027d0:	b29a      	uxth	r2, r3
 80027d2:	2300      	movs	r3, #0
 80027d4:	9301      	str	r3, [sp, #4]
 80027d6:	2302      	movs	r3, #2
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80027de:	2178      	movs	r1, #120	; 0x78
 80027e0:	4817      	ldr	r0, [pc, #92]	; (8002840 <FreqMenu_DrawPresetMenu+0x1504>)
 80027e2:	f00a fb05 	bl	800cdf0 <ILI9341_Draw_Text>
			break;
 80027e6:	bf00      	nop
 80027e8:	e00b      	b.n	8002802 <FreqMenu_DrawPresetMenu+0x14c6>
		ILI9341_Draw_Text("FreqMenus::FreqMenu_DrawFreqPresetMenu() Error", 		10, 180, RED, 1, BLACK);
 80027ea:	2300      	movs	r3, #0
 80027ec:	9301      	str	r3, [sp, #4]
 80027ee:	2301      	movs	r3, #1
 80027f0:	9300      	str	r3, [sp, #0]
 80027f2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80027f6:	22b4      	movs	r2, #180	; 0xb4
 80027f8:	210a      	movs	r1, #10
 80027fa:	4812      	ldr	r0, [pc, #72]	; (8002844 <FreqMenu_DrawPresetMenu+0x1508>)
 80027fc:	f00a faf8 	bl	800cdf0 <ILI9341_Draw_Text>
}
 8002800:	e7ff      	b.n	8002802 <FreqMenu_DrawPresetMenu+0x14c6>
 8002802:	bf00      	nop
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	0801048c 	.word	0x0801048c
 8002810:	08010494 	.word	0x08010494
 8002814:	0801049c 	.word	0x0801049c
 8002818:	080104a4 	.word	0x080104a4
 800281c:	080104ac 	.word	0x080104ac
 8002820:	080104b4 	.word	0x080104b4
 8002824:	080104bc 	.word	0x080104bc
 8002828:	080104c4 	.word	0x080104c4
 800282c:	080104cc 	.word	0x080104cc
 8002830:	080104d4 	.word	0x080104d4
 8002834:	080104dc 	.word	0x080104dc
 8002838:	080104e4 	.word	0x080104e4
 800283c:	080104ec 	.word	0x080104ec
 8002840:	080104f4 	.word	0x080104f4
 8002844:	08010500 	.word	0x08010500

08002848 <FreqMenu_DrawAdjustMenu>:
 *	@param None
 *	@retval None
 *
 */
void FreqMenu_DrawAdjustMenu()
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b084      	sub	sp, #16
 800284c:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Output Signal Freq: ", 	10, 150, BLACK, 1, WHITE);
 800284e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002852:	9301      	str	r3, [sp, #4]
 8002854:	2301      	movs	r3, #1
 8002856:	9300      	str	r3, [sp, #0]
 8002858:	2300      	movs	r3, #0
 800285a:	2296      	movs	r2, #150	; 0x96
 800285c:	210a      	movs	r1, #10
 800285e:	4811      	ldr	r0, [pc, #68]	; (80028a4 <FreqMenu_DrawAdjustMenu+0x5c>)
 8002860:	f00a fac6 	bl	800cdf0 <ILI9341_Draw_Text>

	char freq[6] = "";
 8002864:	2300      	movs	r3, #0
 8002866:	603b      	str	r3, [r7, #0]
 8002868:	2300      	movs	r3, #0
 800286a:	80bb      	strh	r3, [r7, #4]
	//snprintf(freq, sizeof(freq), "%u", (uint8_t)FreqO_GetOutputFreq());
	if(DM_AddDigitPadding((uint16_t)FreqO_GetOutputFreq(), freq, sizeof(freq)) == 0)
 800286c:	f001 fc02 	bl	8004074 <FreqO_GetOutputFreq>
 8002870:	4603      	mov	r3, r0
 8002872:	b29b      	uxth	r3, r3
 8002874:	4639      	mov	r1, r7
 8002876:	2206      	movs	r2, #6
 8002878:	4618      	mov	r0, r3
 800287a:	f7fe fc85 	bl	8001188 <DM_AddDigitPadding>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10a      	bne.n	800289a <FreqMenu_DrawAdjustMenu+0x52>
		ILI9341_Draw_Text(freq, 250, 150, WHITE, 1, BLACK);
 8002884:	4638      	mov	r0, r7
 8002886:	2300      	movs	r3, #0
 8002888:	9301      	str	r3, [sp, #4]
 800288a:	2301      	movs	r3, #1
 800288c:	9300      	str	r3, [sp, #0]
 800288e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002892:	2296      	movs	r2, #150	; 0x96
 8002894:	21fa      	movs	r1, #250	; 0xfa
 8002896:	f00a faab 	bl	800cdf0 <ILI9341_Draw_Text>


}
 800289a:	bf00      	nop
 800289c:	3708      	adds	r7, #8
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	08010530 	.word	0x08010530

080028a8 <FuncMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMenu(eFuncMenu_Status pMenu)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 80028b2:	79fb      	ldrb	r3, [r7, #7]
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d007      	beq.n	80028c8 <FuncMenu_DrawMenu+0x20>
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d008      	beq.n	80028ce <FuncMenu_DrawMenu+0x26>
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d000      	beq.n	80028c2 <FuncMenu_DrawMenu+0x1a>
		case ENABLE_FUNC_SYNC_MENU:
			FuncMenu_DrawSyncMenu();
			break;

		default:
			break;
 80028c0:	e008      	b.n	80028d4 <FuncMenu_DrawMenu+0x2c>
			FuncMenu_DrawMainMenu();
 80028c2:	f000 f80b 	bl	80028dc <FuncMenu_DrawMainMenu>
			break;
 80028c6:	e005      	b.n	80028d4 <FuncMenu_DrawMenu+0x2c>
			FuncMenu_DrawSignalMenu();
 80028c8:	f000 f84e 	bl	8002968 <FuncMenu_DrawSignalMenu>
			break;
 80028cc:	e002      	b.n	80028d4 <FuncMenu_DrawMenu+0x2c>
			FuncMenu_DrawSyncMenu();
 80028ce:	f000 fa2b 	bl	8002d28 <FuncMenu_DrawSyncMenu>
			break;
 80028d2:	bf00      	nop

	}
}
 80028d4:	bf00      	nop
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <FuncMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawMainMenu()
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b082      	sub	sp, #8
 80028e0:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("FUNCTION MAIN MENU", 	10, 10, WHITE, 3, BLACK);
 80028e2:	2300      	movs	r3, #0
 80028e4:	9301      	str	r3, [sp, #4]
 80028e6:	2303      	movs	r3, #3
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80028ee:	220a      	movs	r2, #10
 80028f0:	210a      	movs	r1, #10
 80028f2:	4819      	ldr	r0, [pc, #100]	; (8002958 <FuncMenu_DrawMainMenu+0x7c>)
 80028f4:	f00a fa7c 	bl	800cdf0 <ILI9341_Draw_Text>
 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 10, 210, BLACK, 2, DARKCYAN);
 80028f8:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80028fc:	9301      	str	r3, [sp, #4]
 80028fe:	2302      	movs	r3, #2
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	2300      	movs	r3, #0
 8002904:	22d2      	movs	r2, #210	; 0xd2
 8002906:	210a      	movs	r1, #10
 8002908:	4814      	ldr	r0, [pc, #80]	; (800295c <FuncMenu_DrawMainMenu+0x80>)
 800290a:	f00a fa71 	bl	800cdf0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC", 100, 210, BLACK, 2, DARKGREEN);
 800290e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8002912:	9301      	str	r3, [sp, #4]
 8002914:	2302      	movs	r3, #2
 8002916:	9300      	str	r3, [sp, #0]
 8002918:	2300      	movs	r3, #0
 800291a:	22d2      	movs	r2, #210	; 0xd2
 800291c:	2164      	movs	r1, #100	; 0x64
 800291e:	4810      	ldr	r0, [pc, #64]	; (8002960 <FuncMenu_DrawMainMenu+0x84>)
 8002920:	f00a fa66 	bl	800cdf0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
 8002924:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002928:	9301      	str	r3, [sp, #4]
 800292a:	2302      	movs	r3, #2
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	2300      	movs	r3, #0
 8002930:	22d2      	movs	r2, #210	; 0xd2
 8002932:	21af      	movs	r1, #175	; 0xaf
 8002934:	480b      	ldr	r0, [pc, #44]	; (8002964 <FuncMenu_DrawMainMenu+0x88>)
 8002936:	f00a fa5b 	bl	800cdf0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
 800293a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800293e:	9301      	str	r3, [sp, #4]
 8002940:	2302      	movs	r3, #2
 8002942:	9300      	str	r3, [sp, #0]
 8002944:	2300      	movs	r3, #0
 8002946:	22d2      	movs	r2, #210	; 0xd2
 8002948:	f44f 7182 	mov.w	r1, #260	; 0x104
 800294c:	4805      	ldr	r0, [pc, #20]	; (8002964 <FuncMenu_DrawMainMenu+0x88>)
 800294e:	f00a fa4f 	bl	800cdf0 <ILI9341_Draw_Text>
}
 8002952:	bf00      	nop
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	08010560 	.word	0x08010560
 800295c:	08010574 	.word	0x08010574
 8002960:	0801057c 	.word	0x0801057c
 8002964:	08010584 	.word	0x08010584

08002968 <FuncMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawSignalMenu()
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("SELECT SIGNAL FUNCTION", 	10, 10, WHITE, 3, BLACK);
 800296e:	2300      	movs	r3, #0
 8002970:	9301      	str	r3, [sp, #4]
 8002972:	2303      	movs	r3, #3
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800297a:	220a      	movs	r2, #10
 800297c:	210a      	movs	r1, #10
 800297e:	48b9      	ldr	r0, [pc, #740]	; (8002c64 <FuncMenu_DrawSignalMenu+0x2fc>)
 8002980:	f00a fa36 	bl	800cdf0 <ILI9341_Draw_Text>

	//FunctionProfile_t *func_profileTmp = FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 8002984:	2000      	movs	r0, #0
 8002986:	f001 fe85 	bl	8004694 <SM_GetOutputChannel>
 800298a:	4603      	mov	r3, r0
 800298c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8002990:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2b00      	cmp	r3, #0
 8002996:	f000 81b6 	beq.w	8002d06 <FuncMenu_DrawSignalMenu+0x39e>
	{
		switch(func_profileTmp->func)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	2b05      	cmp	r3, #5
 80029a0:	f200 81b1 	bhi.w	8002d06 <FuncMenu_DrawSignalMenu+0x39e>
 80029a4:	a201      	add	r2, pc, #4	; (adr r2, 80029ac <FuncMenu_DrawSignalMenu+0x44>)
 80029a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029aa:	bf00      	nop
 80029ac:	080029c5 	.word	0x080029c5
 80029b0:	08002a4b 	.word	0x08002a4b
 80029b4:	08002ad1 	.word	0x08002ad1
 80029b8:	08002b57 	.word	0x08002b57
 80029bc:	08002bdd 	.word	0x08002bdd
 80029c0:	08002c81 	.word	0x08002c81
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, WHITE, 2, BLACK);
 80029c4:	2300      	movs	r3, #0
 80029c6:	9301      	str	r3, [sp, #4]
 80029c8:	2302      	movs	r3, #2
 80029ca:	9300      	str	r3, [sp, #0]
 80029cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029d0:	2232      	movs	r2, #50	; 0x32
 80029d2:	210a      	movs	r1, #10
 80029d4:	48a4      	ldr	r0, [pc, #656]	; (8002c68 <FuncMenu_DrawSignalMenu+0x300>)
 80029d6:	f00a fa0b 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 80029da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029de:	9301      	str	r3, [sp, #4]
 80029e0:	2302      	movs	r3, #2
 80029e2:	9300      	str	r3, [sp, #0]
 80029e4:	2300      	movs	r3, #0
 80029e6:	2246      	movs	r2, #70	; 0x46
 80029e8:	210a      	movs	r1, #10
 80029ea:	48a0      	ldr	r0, [pc, #640]	; (8002c6c <FuncMenu_DrawSignalMenu+0x304>)
 80029ec:	f00a fa00 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 80029f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029f4:	9301      	str	r3, [sp, #4]
 80029f6:	2302      	movs	r3, #2
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	2300      	movs	r3, #0
 80029fc:	225a      	movs	r2, #90	; 0x5a
 80029fe:	210a      	movs	r1, #10
 8002a00:	489b      	ldr	r0, [pc, #620]	; (8002c70 <FuncMenu_DrawSignalMenu+0x308>)
 8002a02:	f00a f9f5 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002a06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a0a:	9301      	str	r3, [sp, #4]
 8002a0c:	2302      	movs	r3, #2
 8002a0e:	9300      	str	r3, [sp, #0]
 8002a10:	2300      	movs	r3, #0
 8002a12:	226e      	movs	r2, #110	; 0x6e
 8002a14:	210a      	movs	r1, #10
 8002a16:	4897      	ldr	r0, [pc, #604]	; (8002c74 <FuncMenu_DrawSignalMenu+0x30c>)
 8002a18:	f00a f9ea 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002a1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a20:	9301      	str	r3, [sp, #4]
 8002a22:	2302      	movs	r3, #2
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	2300      	movs	r3, #0
 8002a28:	2282      	movs	r2, #130	; 0x82
 8002a2a:	210a      	movs	r1, #10
 8002a2c:	4892      	ldr	r0, [pc, #584]	; (8002c78 <FuncMenu_DrawSignalMenu+0x310>)
 8002a2e:	f00a f9df 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002a32:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a36:	9301      	str	r3, [sp, #4]
 8002a38:	2302      	movs	r3, #2
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	2296      	movs	r2, #150	; 0x96
 8002a40:	210a      	movs	r1, #10
 8002a42:	488e      	ldr	r0, [pc, #568]	; (8002c7c <FuncMenu_DrawSignalMenu+0x314>)
 8002a44:	f00a f9d4 	bl	800cdf0 <ILI9341_Draw_Text>
				break;
 8002a48:	e15d      	b.n	8002d06 <FuncMenu_DrawSignalMenu+0x39e>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002a4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a4e:	9301      	str	r3, [sp, #4]
 8002a50:	2302      	movs	r3, #2
 8002a52:	9300      	str	r3, [sp, #0]
 8002a54:	2300      	movs	r3, #0
 8002a56:	2232      	movs	r2, #50	; 0x32
 8002a58:	210a      	movs	r1, #10
 8002a5a:	4883      	ldr	r0, [pc, #524]	; (8002c68 <FuncMenu_DrawSignalMenu+0x300>)
 8002a5c:	f00a f9c8 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, WHITE, 2, BLACK);
 8002a60:	2300      	movs	r3, #0
 8002a62:	9301      	str	r3, [sp, #4]
 8002a64:	2302      	movs	r3, #2
 8002a66:	9300      	str	r3, [sp, #0]
 8002a68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a6c:	2246      	movs	r2, #70	; 0x46
 8002a6e:	210a      	movs	r1, #10
 8002a70:	487e      	ldr	r0, [pc, #504]	; (8002c6c <FuncMenu_DrawSignalMenu+0x304>)
 8002a72:	f00a f9bd 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002a76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a7a:	9301      	str	r3, [sp, #4]
 8002a7c:	2302      	movs	r3, #2
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	2300      	movs	r3, #0
 8002a82:	225a      	movs	r2, #90	; 0x5a
 8002a84:	210a      	movs	r1, #10
 8002a86:	487a      	ldr	r0, [pc, #488]	; (8002c70 <FuncMenu_DrawSignalMenu+0x308>)
 8002a88:	f00a f9b2 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002a8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a90:	9301      	str	r3, [sp, #4]
 8002a92:	2302      	movs	r3, #2
 8002a94:	9300      	str	r3, [sp, #0]
 8002a96:	2300      	movs	r3, #0
 8002a98:	226e      	movs	r2, #110	; 0x6e
 8002a9a:	210a      	movs	r1, #10
 8002a9c:	4875      	ldr	r0, [pc, #468]	; (8002c74 <FuncMenu_DrawSignalMenu+0x30c>)
 8002a9e:	f00a f9a7 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002aa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aa6:	9301      	str	r3, [sp, #4]
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	9300      	str	r3, [sp, #0]
 8002aac:	2300      	movs	r3, #0
 8002aae:	2282      	movs	r2, #130	; 0x82
 8002ab0:	210a      	movs	r1, #10
 8002ab2:	4871      	ldr	r0, [pc, #452]	; (8002c78 <FuncMenu_DrawSignalMenu+0x310>)
 8002ab4:	f00a f99c 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002ab8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002abc:	9301      	str	r3, [sp, #4]
 8002abe:	2302      	movs	r3, #2
 8002ac0:	9300      	str	r3, [sp, #0]
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	2296      	movs	r2, #150	; 0x96
 8002ac6:	210a      	movs	r1, #10
 8002ac8:	486c      	ldr	r0, [pc, #432]	; (8002c7c <FuncMenu_DrawSignalMenu+0x314>)
 8002aca:	f00a f991 	bl	800cdf0 <ILI9341_Draw_Text>
				break;
 8002ace:	e11a      	b.n	8002d06 <FuncMenu_DrawSignalMenu+0x39e>
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002ad0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ad4:	9301      	str	r3, [sp, #4]
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	2300      	movs	r3, #0
 8002adc:	2232      	movs	r2, #50	; 0x32
 8002ade:	210a      	movs	r1, #10
 8002ae0:	4861      	ldr	r0, [pc, #388]	; (8002c68 <FuncMenu_DrawSignalMenu+0x300>)
 8002ae2:	f00a f985 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002ae6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002aea:	9301      	str	r3, [sp, #4]
 8002aec:	2302      	movs	r3, #2
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	2300      	movs	r3, #0
 8002af2:	2246      	movs	r2, #70	; 0x46
 8002af4:	210a      	movs	r1, #10
 8002af6:	485d      	ldr	r0, [pc, #372]	; (8002c6c <FuncMenu_DrawSignalMenu+0x304>)
 8002af8:	f00a f97a 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, WHITE, 2, BLACK);
 8002afc:	2300      	movs	r3, #0
 8002afe:	9301      	str	r3, [sp, #4]
 8002b00:	2302      	movs	r3, #2
 8002b02:	9300      	str	r3, [sp, #0]
 8002b04:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b08:	225a      	movs	r2, #90	; 0x5a
 8002b0a:	210a      	movs	r1, #10
 8002b0c:	4858      	ldr	r0, [pc, #352]	; (8002c70 <FuncMenu_DrawSignalMenu+0x308>)
 8002b0e:	f00a f96f 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002b12:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b16:	9301      	str	r3, [sp, #4]
 8002b18:	2302      	movs	r3, #2
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	226e      	movs	r2, #110	; 0x6e
 8002b20:	210a      	movs	r1, #10
 8002b22:	4854      	ldr	r0, [pc, #336]	; (8002c74 <FuncMenu_DrawSignalMenu+0x30c>)
 8002b24:	f00a f964 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002b28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b2c:	9301      	str	r3, [sp, #4]
 8002b2e:	2302      	movs	r3, #2
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	2300      	movs	r3, #0
 8002b34:	2282      	movs	r2, #130	; 0x82
 8002b36:	210a      	movs	r1, #10
 8002b38:	484f      	ldr	r0, [pc, #316]	; (8002c78 <FuncMenu_DrawSignalMenu+0x310>)
 8002b3a:	f00a f959 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002b3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b42:	9301      	str	r3, [sp, #4]
 8002b44:	2302      	movs	r3, #2
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	2300      	movs	r3, #0
 8002b4a:	2296      	movs	r2, #150	; 0x96
 8002b4c:	210a      	movs	r1, #10
 8002b4e:	484b      	ldr	r0, [pc, #300]	; (8002c7c <FuncMenu_DrawSignalMenu+0x314>)
 8002b50:	f00a f94e 	bl	800cdf0 <ILI9341_Draw_Text>
				break;
 8002b54:	e0d7      	b.n	8002d06 <FuncMenu_DrawSignalMenu+0x39e>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002b56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b5a:	9301      	str	r3, [sp, #4]
 8002b5c:	2302      	movs	r3, #2
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	2300      	movs	r3, #0
 8002b62:	2232      	movs	r2, #50	; 0x32
 8002b64:	210a      	movs	r1, #10
 8002b66:	4840      	ldr	r0, [pc, #256]	; (8002c68 <FuncMenu_DrawSignalMenu+0x300>)
 8002b68:	f00a f942 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002b6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b70:	9301      	str	r3, [sp, #4]
 8002b72:	2302      	movs	r3, #2
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	2300      	movs	r3, #0
 8002b78:	2246      	movs	r2, #70	; 0x46
 8002b7a:	210a      	movs	r1, #10
 8002b7c:	483b      	ldr	r0, [pc, #236]	; (8002c6c <FuncMenu_DrawSignalMenu+0x304>)
 8002b7e:	f00a f937 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002b82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002b86:	9301      	str	r3, [sp, #4]
 8002b88:	2302      	movs	r3, #2
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	225a      	movs	r2, #90	; 0x5a
 8002b90:	210a      	movs	r1, #10
 8002b92:	4837      	ldr	r0, [pc, #220]	; (8002c70 <FuncMenu_DrawSignalMenu+0x308>)
 8002b94:	f00a f92c 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, WHITE, 2, BLACK);
 8002b98:	2300      	movs	r3, #0
 8002b9a:	9301      	str	r3, [sp, #4]
 8002b9c:	2302      	movs	r3, #2
 8002b9e:	9300      	str	r3, [sp, #0]
 8002ba0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ba4:	226e      	movs	r2, #110	; 0x6e
 8002ba6:	210a      	movs	r1, #10
 8002ba8:	4832      	ldr	r0, [pc, #200]	; (8002c74 <FuncMenu_DrawSignalMenu+0x30c>)
 8002baa:	f00a f921 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002bae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bb2:	9301      	str	r3, [sp, #4]
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	2300      	movs	r3, #0
 8002bba:	2282      	movs	r2, #130	; 0x82
 8002bbc:	210a      	movs	r1, #10
 8002bbe:	482e      	ldr	r0, [pc, #184]	; (8002c78 <FuncMenu_DrawSignalMenu+0x310>)
 8002bc0:	f00a f916 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002bc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bc8:	9301      	str	r3, [sp, #4]
 8002bca:	2302      	movs	r3, #2
 8002bcc:	9300      	str	r3, [sp, #0]
 8002bce:	2300      	movs	r3, #0
 8002bd0:	2296      	movs	r2, #150	; 0x96
 8002bd2:	210a      	movs	r1, #10
 8002bd4:	4829      	ldr	r0, [pc, #164]	; (8002c7c <FuncMenu_DrawSignalMenu+0x314>)
 8002bd6:	f00a f90b 	bl	800cdf0 <ILI9341_Draw_Text>
				break;
 8002bda:	e094      	b.n	8002d06 <FuncMenu_DrawSignalMenu+0x39e>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002bdc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002be0:	9301      	str	r3, [sp, #4]
 8002be2:	2302      	movs	r3, #2
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	2300      	movs	r3, #0
 8002be8:	2232      	movs	r2, #50	; 0x32
 8002bea:	210a      	movs	r1, #10
 8002bec:	481e      	ldr	r0, [pc, #120]	; (8002c68 <FuncMenu_DrawSignalMenu+0x300>)
 8002bee:	f00a f8ff 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002bf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bf6:	9301      	str	r3, [sp, #4]
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	9300      	str	r3, [sp, #0]
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	2246      	movs	r2, #70	; 0x46
 8002c00:	210a      	movs	r1, #10
 8002c02:	481a      	ldr	r0, [pc, #104]	; (8002c6c <FuncMenu_DrawSignalMenu+0x304>)
 8002c04:	f00a f8f4 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002c08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c0c:	9301      	str	r3, [sp, #4]
 8002c0e:	2302      	movs	r3, #2
 8002c10:	9300      	str	r3, [sp, #0]
 8002c12:	2300      	movs	r3, #0
 8002c14:	225a      	movs	r2, #90	; 0x5a
 8002c16:	210a      	movs	r1, #10
 8002c18:	4815      	ldr	r0, [pc, #84]	; (8002c70 <FuncMenu_DrawSignalMenu+0x308>)
 8002c1a:	f00a f8e9 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002c1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c22:	9301      	str	r3, [sp, #4]
 8002c24:	2302      	movs	r3, #2
 8002c26:	9300      	str	r3, [sp, #0]
 8002c28:	2300      	movs	r3, #0
 8002c2a:	226e      	movs	r2, #110	; 0x6e
 8002c2c:	210a      	movs	r1, #10
 8002c2e:	4811      	ldr	r0, [pc, #68]	; (8002c74 <FuncMenu_DrawSignalMenu+0x30c>)
 8002c30:	f00a f8de 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, WHITE, 2, BLACK);
 8002c34:	2300      	movs	r3, #0
 8002c36:	9301      	str	r3, [sp, #4]
 8002c38:	2302      	movs	r3, #2
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c40:	2282      	movs	r2, #130	; 0x82
 8002c42:	210a      	movs	r1, #10
 8002c44:	480c      	ldr	r0, [pc, #48]	; (8002c78 <FuncMenu_DrawSignalMenu+0x310>)
 8002c46:	f00a f8d3 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002c4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c4e:	9301      	str	r3, [sp, #4]
 8002c50:	2302      	movs	r3, #2
 8002c52:	9300      	str	r3, [sp, #0]
 8002c54:	2300      	movs	r3, #0
 8002c56:	2296      	movs	r2, #150	; 0x96
 8002c58:	210a      	movs	r1, #10
 8002c5a:	4808      	ldr	r0, [pc, #32]	; (8002c7c <FuncMenu_DrawSignalMenu+0x314>)
 8002c5c:	f00a f8c8 	bl	800cdf0 <ILI9341_Draw_Text>
				break;
 8002c60:	e051      	b.n	8002d06 <FuncMenu_DrawSignalMenu+0x39e>
 8002c62:	bf00      	nop
 8002c64:	0801058c 	.word	0x0801058c
 8002c68:	080105a4 	.word	0x080105a4
 8002c6c:	080105ac 	.word	0x080105ac
 8002c70:	080105b8 	.word	0x080105b8
 8002c74:	080105c0 	.word	0x080105c0
 8002c78:	080105cc 	.word	0x080105cc
 8002c7c:	080105d8 	.word	0x080105d8
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002c80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c84:	9301      	str	r3, [sp, #4]
 8002c86:	2302      	movs	r3, #2
 8002c88:	9300      	str	r3, [sp, #0]
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	2232      	movs	r2, #50	; 0x32
 8002c8e:	210a      	movs	r1, #10
 8002c90:	481f      	ldr	r0, [pc, #124]	; (8002d10 <FuncMenu_DrawSignalMenu+0x3a8>)
 8002c92:	f00a f8ad 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002c96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002c9a:	9301      	str	r3, [sp, #4]
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	9300      	str	r3, [sp, #0]
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	2246      	movs	r2, #70	; 0x46
 8002ca4:	210a      	movs	r1, #10
 8002ca6:	481b      	ldr	r0, [pc, #108]	; (8002d14 <FuncMenu_DrawSignalMenu+0x3ac>)
 8002ca8:	f00a f8a2 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002cac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cb0:	9301      	str	r3, [sp, #4]
 8002cb2:	2302      	movs	r3, #2
 8002cb4:	9300      	str	r3, [sp, #0]
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	225a      	movs	r2, #90	; 0x5a
 8002cba:	210a      	movs	r1, #10
 8002cbc:	4816      	ldr	r0, [pc, #88]	; (8002d18 <FuncMenu_DrawSignalMenu+0x3b0>)
 8002cbe:	f00a f897 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002cc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cc6:	9301      	str	r3, [sp, #4]
 8002cc8:	2302      	movs	r3, #2
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	2300      	movs	r3, #0
 8002cce:	226e      	movs	r2, #110	; 0x6e
 8002cd0:	210a      	movs	r1, #10
 8002cd2:	4812      	ldr	r0, [pc, #72]	; (8002d1c <FuncMenu_DrawSignalMenu+0x3b4>)
 8002cd4:	f00a f88c 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002cd8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cdc:	9301      	str	r3, [sp, #4]
 8002cde:	2302      	movs	r3, #2
 8002ce0:	9300      	str	r3, [sp, #0]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	2282      	movs	r2, #130	; 0x82
 8002ce6:	210a      	movs	r1, #10
 8002ce8:	480d      	ldr	r0, [pc, #52]	; (8002d20 <FuncMenu_DrawSignalMenu+0x3b8>)
 8002cea:	f00a f881 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, WHITE, 2, BLACK);
 8002cee:	2300      	movs	r3, #0
 8002cf0:	9301      	str	r3, [sp, #4]
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	9300      	str	r3, [sp, #0]
 8002cf6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002cfa:	2296      	movs	r2, #150	; 0x96
 8002cfc:	210a      	movs	r1, #10
 8002cfe:	4809      	ldr	r0, [pc, #36]	; (8002d24 <FuncMenu_DrawSignalMenu+0x3bc>)
 8002d00:	f00a f876 	bl	800cdf0 <ILI9341_Draw_Text>
				break;
 8002d04:	bf00      	nop

		}
	}


}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	080105a4 	.word	0x080105a4
 8002d14:	080105ac 	.word	0x080105ac
 8002d18:	080105b8 	.word	0x080105b8
 8002d1c:	080105c0 	.word	0x080105c0
 8002d20:	080105cc 	.word	0x080105cc
 8002d24:	080105d8 	.word	0x080105d8

08002d28 <FuncMenu_DrawSyncMenu>:
 *	@param None
 *	@retval None
 *
 */
void FuncMenu_DrawSyncMenu()
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b084      	sub	sp, #16
 8002d2c:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("SELECT SYNC FUNCTION", 	10, 10, WHITE, 3, BLACK);
 8002d2e:	2300      	movs	r3, #0
 8002d30:	9301      	str	r3, [sp, #4]
 8002d32:	2303      	movs	r3, #3
 8002d34:	9300      	str	r3, [sp, #0]
 8002d36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d3a:	220a      	movs	r2, #10
 8002d3c:	210a      	movs	r1, #10
 8002d3e:	48b9      	ldr	r0, [pc, #740]	; (8003024 <FuncMenu_DrawSyncMenu+0x2fc>)
 8002d40:	f00a f856 	bl	800cdf0 <ILI9341_Draw_Text>
	//FunctionProfile_t *func_profileTmp = FuncO_GetSyncFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile;
 8002d44:	2001      	movs	r0, #1
 8002d46:	f001 fca5 	bl	8004694 <SM_GetOutputChannel>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8002d50:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 81b6 	beq.w	80030c6 <FuncMenu_DrawSyncMenu+0x39e>
	{
		switch(func_profileTmp->func)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b05      	cmp	r3, #5
 8002d60:	f200 81b1 	bhi.w	80030c6 <FuncMenu_DrawSyncMenu+0x39e>
 8002d64:	a201      	add	r2, pc, #4	; (adr r2, 8002d6c <FuncMenu_DrawSyncMenu+0x44>)
 8002d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6a:	bf00      	nop
 8002d6c:	08002d85 	.word	0x08002d85
 8002d70:	08002e0b 	.word	0x08002e0b
 8002d74:	08002e91 	.word	0x08002e91
 8002d78:	08002f17 	.word	0x08002f17
 8002d7c:	08002f9d 	.word	0x08002f9d
 8002d80:	08003041 	.word	0x08003041
		{
			case SINE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, WHITE, 2, BLACK);
 8002d84:	2300      	movs	r3, #0
 8002d86:	9301      	str	r3, [sp, #4]
 8002d88:	2302      	movs	r3, #2
 8002d8a:	9300      	str	r3, [sp, #0]
 8002d8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d90:	2232      	movs	r2, #50	; 0x32
 8002d92:	210a      	movs	r1, #10
 8002d94:	48a4      	ldr	r0, [pc, #656]	; (8003028 <FuncMenu_DrawSyncMenu+0x300>)
 8002d96:	f00a f82b 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002d9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d9e:	9301      	str	r3, [sp, #4]
 8002da0:	2302      	movs	r3, #2
 8002da2:	9300      	str	r3, [sp, #0]
 8002da4:	2300      	movs	r3, #0
 8002da6:	2246      	movs	r2, #70	; 0x46
 8002da8:	210a      	movs	r1, #10
 8002daa:	48a0      	ldr	r0, [pc, #640]	; (800302c <FuncMenu_DrawSyncMenu+0x304>)
 8002dac:	f00a f820 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002db0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002db4:	9301      	str	r3, [sp, #4]
 8002db6:	2302      	movs	r3, #2
 8002db8:	9300      	str	r3, [sp, #0]
 8002dba:	2300      	movs	r3, #0
 8002dbc:	225a      	movs	r2, #90	; 0x5a
 8002dbe:	210a      	movs	r1, #10
 8002dc0:	489b      	ldr	r0, [pc, #620]	; (8003030 <FuncMenu_DrawSyncMenu+0x308>)
 8002dc2:	f00a f815 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002dc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dca:	9301      	str	r3, [sp, #4]
 8002dcc:	2302      	movs	r3, #2
 8002dce:	9300      	str	r3, [sp, #0]
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	226e      	movs	r2, #110	; 0x6e
 8002dd4:	210a      	movs	r1, #10
 8002dd6:	4897      	ldr	r0, [pc, #604]	; (8003034 <FuncMenu_DrawSyncMenu+0x30c>)
 8002dd8:	f00a f80a 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002ddc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002de0:	9301      	str	r3, [sp, #4]
 8002de2:	2302      	movs	r3, #2
 8002de4:	9300      	str	r3, [sp, #0]
 8002de6:	2300      	movs	r3, #0
 8002de8:	2282      	movs	r2, #130	; 0x82
 8002dea:	210a      	movs	r1, #10
 8002dec:	4892      	ldr	r0, [pc, #584]	; (8003038 <FuncMenu_DrawSyncMenu+0x310>)
 8002dee:	f009 ffff 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002df2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002df6:	9301      	str	r3, [sp, #4]
 8002df8:	2302      	movs	r3, #2
 8002dfa:	9300      	str	r3, [sp, #0]
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	2296      	movs	r2, #150	; 0x96
 8002e00:	210a      	movs	r1, #10
 8002e02:	488e      	ldr	r0, [pc, #568]	; (800303c <FuncMenu_DrawSyncMenu+0x314>)
 8002e04:	f009 fff4 	bl	800cdf0 <ILI9341_Draw_Text>
				break;
 8002e08:	e15d      	b.n	80030c6 <FuncMenu_DrawSyncMenu+0x39e>
			case SQUARE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002e0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e0e:	9301      	str	r3, [sp, #4]
 8002e10:	2302      	movs	r3, #2
 8002e12:	9300      	str	r3, [sp, #0]
 8002e14:	2300      	movs	r3, #0
 8002e16:	2232      	movs	r2, #50	; 0x32
 8002e18:	210a      	movs	r1, #10
 8002e1a:	4883      	ldr	r0, [pc, #524]	; (8003028 <FuncMenu_DrawSyncMenu+0x300>)
 8002e1c:	f009 ffe8 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, WHITE, 2, BLACK);
 8002e20:	2300      	movs	r3, #0
 8002e22:	9301      	str	r3, [sp, #4]
 8002e24:	2302      	movs	r3, #2
 8002e26:	9300      	str	r3, [sp, #0]
 8002e28:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e2c:	2246      	movs	r2, #70	; 0x46
 8002e2e:	210a      	movs	r1, #10
 8002e30:	487e      	ldr	r0, [pc, #504]	; (800302c <FuncMenu_DrawSyncMenu+0x304>)
 8002e32:	f009 ffdd 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002e36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e3a:	9301      	str	r3, [sp, #4]
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	2300      	movs	r3, #0
 8002e42:	225a      	movs	r2, #90	; 0x5a
 8002e44:	210a      	movs	r1, #10
 8002e46:	487a      	ldr	r0, [pc, #488]	; (8003030 <FuncMenu_DrawSyncMenu+0x308>)
 8002e48:	f009 ffd2 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002e4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e50:	9301      	str	r3, [sp, #4]
 8002e52:	2302      	movs	r3, #2
 8002e54:	9300      	str	r3, [sp, #0]
 8002e56:	2300      	movs	r3, #0
 8002e58:	226e      	movs	r2, #110	; 0x6e
 8002e5a:	210a      	movs	r1, #10
 8002e5c:	4875      	ldr	r0, [pc, #468]	; (8003034 <FuncMenu_DrawSyncMenu+0x30c>)
 8002e5e:	f009 ffc7 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002e62:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e66:	9301      	str	r3, [sp, #4]
 8002e68:	2302      	movs	r3, #2
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	2282      	movs	r2, #130	; 0x82
 8002e70:	210a      	movs	r1, #10
 8002e72:	4871      	ldr	r0, [pc, #452]	; (8003038 <FuncMenu_DrawSyncMenu+0x310>)
 8002e74:	f009 ffbc 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002e78:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e7c:	9301      	str	r3, [sp, #4]
 8002e7e:	2302      	movs	r3, #2
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	2300      	movs	r3, #0
 8002e84:	2296      	movs	r2, #150	; 0x96
 8002e86:	210a      	movs	r1, #10
 8002e88:	486c      	ldr	r0, [pc, #432]	; (800303c <FuncMenu_DrawSyncMenu+0x314>)
 8002e8a:	f009 ffb1 	bl	800cdf0 <ILI9341_Draw_Text>
				break;
 8002e8e:	e11a      	b.n	80030c6 <FuncMenu_DrawSyncMenu+0x39e>
			case SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002e90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002e94:	9301      	str	r3, [sp, #4]
 8002e96:	2302      	movs	r3, #2
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	2300      	movs	r3, #0
 8002e9c:	2232      	movs	r2, #50	; 0x32
 8002e9e:	210a      	movs	r1, #10
 8002ea0:	4861      	ldr	r0, [pc, #388]	; (8003028 <FuncMenu_DrawSyncMenu+0x300>)
 8002ea2:	f009 ffa5 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002ea6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eaa:	9301      	str	r3, [sp, #4]
 8002eac:	2302      	movs	r3, #2
 8002eae:	9300      	str	r3, [sp, #0]
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	2246      	movs	r2, #70	; 0x46
 8002eb4:	210a      	movs	r1, #10
 8002eb6:	485d      	ldr	r0, [pc, #372]	; (800302c <FuncMenu_DrawSyncMenu+0x304>)
 8002eb8:	f009 ff9a 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, WHITE, 2, BLACK);
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	9301      	str	r3, [sp, #4]
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	9300      	str	r3, [sp, #0]
 8002ec4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ec8:	225a      	movs	r2, #90	; 0x5a
 8002eca:	210a      	movs	r1, #10
 8002ecc:	4858      	ldr	r0, [pc, #352]	; (8003030 <FuncMenu_DrawSyncMenu+0x308>)
 8002ece:	f009 ff8f 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002ed2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ed6:	9301      	str	r3, [sp, #4]
 8002ed8:	2302      	movs	r3, #2
 8002eda:	9300      	str	r3, [sp, #0]
 8002edc:	2300      	movs	r3, #0
 8002ede:	226e      	movs	r2, #110	; 0x6e
 8002ee0:	210a      	movs	r1, #10
 8002ee2:	4854      	ldr	r0, [pc, #336]	; (8003034 <FuncMenu_DrawSyncMenu+0x30c>)
 8002ee4:	f009 ff84 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002ee8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eec:	9301      	str	r3, [sp, #4]
 8002eee:	2302      	movs	r3, #2
 8002ef0:	9300      	str	r3, [sp, #0]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	2282      	movs	r2, #130	; 0x82
 8002ef6:	210a      	movs	r1, #10
 8002ef8:	484f      	ldr	r0, [pc, #316]	; (8003038 <FuncMenu_DrawSyncMenu+0x310>)
 8002efa:	f009 ff79 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002efe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f02:	9301      	str	r3, [sp, #4]
 8002f04:	2302      	movs	r3, #2
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	2300      	movs	r3, #0
 8002f0a:	2296      	movs	r2, #150	; 0x96
 8002f0c:	210a      	movs	r1, #10
 8002f0e:	484b      	ldr	r0, [pc, #300]	; (800303c <FuncMenu_DrawSyncMenu+0x314>)
 8002f10:	f009 ff6e 	bl	800cdf0 <ILI9341_Draw_Text>
				break;
 8002f14:	e0d7      	b.n	80030c6 <FuncMenu_DrawSyncMenu+0x39e>
			case REV_SAW_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002f16:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f1a:	9301      	str	r3, [sp, #4]
 8002f1c:	2302      	movs	r3, #2
 8002f1e:	9300      	str	r3, [sp, #0]
 8002f20:	2300      	movs	r3, #0
 8002f22:	2232      	movs	r2, #50	; 0x32
 8002f24:	210a      	movs	r1, #10
 8002f26:	4840      	ldr	r0, [pc, #256]	; (8003028 <FuncMenu_DrawSyncMenu+0x300>)
 8002f28:	f009 ff62 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002f2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f30:	9301      	str	r3, [sp, #4]
 8002f32:	2302      	movs	r3, #2
 8002f34:	9300      	str	r3, [sp, #0]
 8002f36:	2300      	movs	r3, #0
 8002f38:	2246      	movs	r2, #70	; 0x46
 8002f3a:	210a      	movs	r1, #10
 8002f3c:	483b      	ldr	r0, [pc, #236]	; (800302c <FuncMenu_DrawSyncMenu+0x304>)
 8002f3e:	f009 ff57 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002f42:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f46:	9301      	str	r3, [sp, #4]
 8002f48:	2302      	movs	r3, #2
 8002f4a:	9300      	str	r3, [sp, #0]
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	225a      	movs	r2, #90	; 0x5a
 8002f50:	210a      	movs	r1, #10
 8002f52:	4837      	ldr	r0, [pc, #220]	; (8003030 <FuncMenu_DrawSyncMenu+0x308>)
 8002f54:	f009 ff4c 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, WHITE, 2, BLACK);
 8002f58:	2300      	movs	r3, #0
 8002f5a:	9301      	str	r3, [sp, #4]
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f64:	226e      	movs	r2, #110	; 0x6e
 8002f66:	210a      	movs	r1, #10
 8002f68:	4832      	ldr	r0, [pc, #200]	; (8003034 <FuncMenu_DrawSyncMenu+0x30c>)
 8002f6a:	f009 ff41 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8002f6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f72:	9301      	str	r3, [sp, #4]
 8002f74:	2302      	movs	r3, #2
 8002f76:	9300      	str	r3, [sp, #0]
 8002f78:	2300      	movs	r3, #0
 8002f7a:	2282      	movs	r2, #130	; 0x82
 8002f7c:	210a      	movs	r1, #10
 8002f7e:	482e      	ldr	r0, [pc, #184]	; (8003038 <FuncMenu_DrawSyncMenu+0x310>)
 8002f80:	f009 ff36 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 8002f84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f88:	9301      	str	r3, [sp, #4]
 8002f8a:	2302      	movs	r3, #2
 8002f8c:	9300      	str	r3, [sp, #0]
 8002f8e:	2300      	movs	r3, #0
 8002f90:	2296      	movs	r2, #150	; 0x96
 8002f92:	210a      	movs	r1, #10
 8002f94:	4829      	ldr	r0, [pc, #164]	; (800303c <FuncMenu_DrawSyncMenu+0x314>)
 8002f96:	f009 ff2b 	bl	800cdf0 <ILI9341_Draw_Text>
				break;
 8002f9a:	e094      	b.n	80030c6 <FuncMenu_DrawSyncMenu+0x39e>
			case TRIANGLE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8002f9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fa0:	9301      	str	r3, [sp, #4]
 8002fa2:	2302      	movs	r3, #2
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	2232      	movs	r2, #50	; 0x32
 8002faa:	210a      	movs	r1, #10
 8002fac:	481e      	ldr	r0, [pc, #120]	; (8003028 <FuncMenu_DrawSyncMenu+0x300>)
 8002fae:	f009 ff1f 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8002fb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fb6:	9301      	str	r3, [sp, #4]
 8002fb8:	2302      	movs	r3, #2
 8002fba:	9300      	str	r3, [sp, #0]
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	2246      	movs	r2, #70	; 0x46
 8002fc0:	210a      	movs	r1, #10
 8002fc2:	481a      	ldr	r0, [pc, #104]	; (800302c <FuncMenu_DrawSyncMenu+0x304>)
 8002fc4:	f009 ff14 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 8002fc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fcc:	9301      	str	r3, [sp, #4]
 8002fce:	2302      	movs	r3, #2
 8002fd0:	9300      	str	r3, [sp, #0]
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	225a      	movs	r2, #90	; 0x5a
 8002fd6:	210a      	movs	r1, #10
 8002fd8:	4815      	ldr	r0, [pc, #84]	; (8003030 <FuncMenu_DrawSyncMenu+0x308>)
 8002fda:	f009 ff09 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8002fde:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fe2:	9301      	str	r3, [sp, #4]
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	9300      	str	r3, [sp, #0]
 8002fe8:	2300      	movs	r3, #0
 8002fea:	226e      	movs	r2, #110	; 0x6e
 8002fec:	210a      	movs	r1, #10
 8002fee:	4811      	ldr	r0, [pc, #68]	; (8003034 <FuncMenu_DrawSyncMenu+0x30c>)
 8002ff0:	f009 fefe 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, WHITE, 2, BLACK);
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	9301      	str	r3, [sp, #4]
 8002ff8:	2302      	movs	r3, #2
 8002ffa:	9300      	str	r3, [sp, #0]
 8002ffc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003000:	2282      	movs	r2, #130	; 0x82
 8003002:	210a      	movs	r1, #10
 8003004:	480c      	ldr	r0, [pc, #48]	; (8003038 <FuncMenu_DrawSyncMenu+0x310>)
 8003006:	f009 fef3 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, BLACK, 2, WHITE);
 800300a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800300e:	9301      	str	r3, [sp, #4]
 8003010:	2302      	movs	r3, #2
 8003012:	9300      	str	r3, [sp, #0]
 8003014:	2300      	movs	r3, #0
 8003016:	2296      	movs	r2, #150	; 0x96
 8003018:	210a      	movs	r1, #10
 800301a:	4808      	ldr	r0, [pc, #32]	; (800303c <FuncMenu_DrawSyncMenu+0x314>)
 800301c:	f009 fee8 	bl	800cdf0 <ILI9341_Draw_Text>
				break;
 8003020:	e051      	b.n	80030c6 <FuncMenu_DrawSyncMenu+0x39e>
 8003022:	bf00      	nop
 8003024:	080105e0 	.word	0x080105e0
 8003028:	080105a4 	.word	0x080105a4
 800302c:	080105ac 	.word	0x080105ac
 8003030:	080105b8 	.word	0x080105b8
 8003034:	080105c0 	.word	0x080105c0
 8003038:	080105cc 	.word	0x080105cc
 800303c:	080105d8 	.word	0x080105d8
			case IMPULSE_FUNC_MODE:
				ILI9341_Draw_Text("- SINE", 	10, 50, BLACK, 2, WHITE);
 8003040:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003044:	9301      	str	r3, [sp, #4]
 8003046:	2302      	movs	r3, #2
 8003048:	9300      	str	r3, [sp, #0]
 800304a:	2300      	movs	r3, #0
 800304c:	2232      	movs	r2, #50	; 0x32
 800304e:	210a      	movs	r1, #10
 8003050:	481f      	ldr	r0, [pc, #124]	; (80030d0 <FuncMenu_DrawSyncMenu+0x3a8>)
 8003052:	f009 fecd 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SQUARE", 	10, 70, BLACK, 2, WHITE);
 8003056:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800305a:	9301      	str	r3, [sp, #4]
 800305c:	2302      	movs	r3, #2
 800305e:	9300      	str	r3, [sp, #0]
 8003060:	2300      	movs	r3, #0
 8003062:	2246      	movs	r2, #70	; 0x46
 8003064:	210a      	movs	r1, #10
 8003066:	481b      	ldr	r0, [pc, #108]	; (80030d4 <FuncMenu_DrawSyncMenu+0x3ac>)
 8003068:	f009 fec2 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- SAW", 		10, 90, BLACK, 2, WHITE);
 800306c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003070:	9301      	str	r3, [sp, #4]
 8003072:	2302      	movs	r3, #2
 8003074:	9300      	str	r3, [sp, #0]
 8003076:	2300      	movs	r3, #0
 8003078:	225a      	movs	r2, #90	; 0x5a
 800307a:	210a      	movs	r1, #10
 800307c:	4816      	ldr	r0, [pc, #88]	; (80030d8 <FuncMenu_DrawSyncMenu+0x3b0>)
 800307e:	f009 feb7 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- REV SAW", 	10, 110, BLACK, 2, WHITE);
 8003082:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003086:	9301      	str	r3, [sp, #4]
 8003088:	2302      	movs	r3, #2
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	2300      	movs	r3, #0
 800308e:	226e      	movs	r2, #110	; 0x6e
 8003090:	210a      	movs	r1, #10
 8003092:	4812      	ldr	r0, [pc, #72]	; (80030dc <FuncMenu_DrawSyncMenu+0x3b4>)
 8003094:	f009 feac 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- TRIANGLE",	10, 130, BLACK, 2, WHITE);
 8003098:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800309c:	9301      	str	r3, [sp, #4]
 800309e:	2302      	movs	r3, #2
 80030a0:	9300      	str	r3, [sp, #0]
 80030a2:	2300      	movs	r3, #0
 80030a4:	2282      	movs	r2, #130	; 0x82
 80030a6:	210a      	movs	r1, #10
 80030a8:	480d      	ldr	r0, [pc, #52]	; (80030e0 <FuncMenu_DrawSyncMenu+0x3b8>)
 80030aa:	f009 fea1 	bl	800cdf0 <ILI9341_Draw_Text>
				ILI9341_Draw_Text("- UNIT", 	10, 150, WHITE, 2, BLACK);
 80030ae:	2300      	movs	r3, #0
 80030b0:	9301      	str	r3, [sp, #4]
 80030b2:	2302      	movs	r3, #2
 80030b4:	9300      	str	r3, [sp, #0]
 80030b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030ba:	2296      	movs	r2, #150	; 0x96
 80030bc:	210a      	movs	r1, #10
 80030be:	4809      	ldr	r0, [pc, #36]	; (80030e4 <FuncMenu_DrawSyncMenu+0x3bc>)
 80030c0:	f009 fe96 	bl	800cdf0 <ILI9341_Draw_Text>
				break;
 80030c4:	bf00      	nop

		}
	}

}
 80030c6:	bf00      	nop
 80030c8:	3708      	adds	r7, #8
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd80      	pop	{r7, pc}
 80030ce:	bf00      	nop
 80030d0:	080105a4 	.word	0x080105a4
 80030d4:	080105ac 	.word	0x080105ac
 80030d8:	080105b8 	.word	0x080105b8
 80030dc:	080105c0 	.word	0x080105c0
 80030e0:	080105cc 	.word	0x080105cc
 80030e4:	080105d8 	.word	0x080105d8

080030e8 <GainMenu_DrawMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMenu(eGainMenu_Status pMenu)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	71fb      	strb	r3, [r7, #7]
	switch(pMenu)
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	d007      	beq.n	8003108 <GainMenu_DrawMenu+0x20>
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	d008      	beq.n	800310e <GainMenu_DrawMenu+0x26>
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d000      	beq.n	8003102 <GainMenu_DrawMenu+0x1a>
		case ENABLE_GAIN_SYNC_MENU:
			GainMenu_DrawSyncMenu();
			break;

		default:
			break;
 8003100:	e008      	b.n	8003114 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawMainMenu();
 8003102:	f000 f80b 	bl	800311c <GainMenu_DrawMainMenu>
			break;
 8003106:	e005      	b.n	8003114 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSignalMenu();
 8003108:	f000 f84e 	bl	80031a8 <GainMenu_DrawSignalMenu>
			break;
 800310c:	e002      	b.n	8003114 <GainMenu_DrawMenu+0x2c>
			GainMenu_DrawSyncMenu();
 800310e:	f000 f85f 	bl	80031d0 <GainMenu_DrawSyncMenu>
			break;
 8003112:	bf00      	nop

	}
}
 8003114:	bf00      	nop
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}

0800311c <GainMenu_DrawMainMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawMainMenu()
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("GAIN MAIN MENU", 	10, 10, WHITE, 3, BLACK);
 8003122:	2300      	movs	r3, #0
 8003124:	9301      	str	r3, [sp, #4]
 8003126:	2303      	movs	r3, #3
 8003128:	9300      	str	r3, [sp, #0]
 800312a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800312e:	220a      	movs	r2, #10
 8003130:	210a      	movs	r1, #10
 8003132:	4819      	ldr	r0, [pc, #100]	; (8003198 <GainMenu_DrawMainMenu+0x7c>)
 8003134:	f009 fe5c 	bl	800cdf0 <ILI9341_Draw_Text>
 	// coloured menu btn labels
	ILI9341_Draw_Text("SIGNAL", 10, 210, BLACK, 2, DARKCYAN);
 8003138:	f240 33ef 	movw	r3, #1007	; 0x3ef
 800313c:	9301      	str	r3, [sp, #4]
 800313e:	2302      	movs	r3, #2
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	2300      	movs	r3, #0
 8003144:	22d2      	movs	r2, #210	; 0xd2
 8003146:	210a      	movs	r1, #10
 8003148:	4814      	ldr	r0, [pc, #80]	; (800319c <GainMenu_DrawMainMenu+0x80>)
 800314a:	f009 fe51 	bl	800cdf0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("SYNC", 100, 210, BLACK, 2, DARKGREEN);
 800314e:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8003152:	9301      	str	r3, [sp, #4]
 8003154:	2302      	movs	r3, #2
 8003156:	9300      	str	r3, [sp, #0]
 8003158:	2300      	movs	r3, #0
 800315a:	22d2      	movs	r2, #210	; 0xd2
 800315c:	2164      	movs	r1, #100	; 0x64
 800315e:	4810      	ldr	r0, [pc, #64]	; (80031a0 <GainMenu_DrawMainMenu+0x84>)
 8003160:	f009 fe46 	bl	800cdf0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 175, 210, BLACK, 2, YELLOW);
 8003164:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003168:	9301      	str	r3, [sp, #4]
 800316a:	2302      	movs	r3, #2
 800316c:	9300      	str	r3, [sp, #0]
 800316e:	2300      	movs	r3, #0
 8003170:	22d2      	movs	r2, #210	; 0xd2
 8003172:	21af      	movs	r1, #175	; 0xaf
 8003174:	480b      	ldr	r0, [pc, #44]	; (80031a4 <GainMenu_DrawMainMenu+0x88>)
 8003176:	f009 fe3b 	bl	800cdf0 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("    ", 260, 210, BLACK, 2, RED);
 800317a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800317e:	9301      	str	r3, [sp, #4]
 8003180:	2302      	movs	r3, #2
 8003182:	9300      	str	r3, [sp, #0]
 8003184:	2300      	movs	r3, #0
 8003186:	22d2      	movs	r2, #210	; 0xd2
 8003188:	f44f 7182 	mov.w	r1, #260	; 0x104
 800318c:	4805      	ldr	r0, [pc, #20]	; (80031a4 <GainMenu_DrawMainMenu+0x88>)
 800318e:	f009 fe2f 	bl	800cdf0 <ILI9341_Draw_Text>
}
 8003192:	bf00      	nop
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	080105f8 	.word	0x080105f8
 800319c:	08010608 	.word	0x08010608
 80031a0:	08010610 	.word	0x08010610
 80031a4:	08010618 	.word	0x08010618

080031a8 <GainMenu_DrawSignalMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSignalMenu()
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("SELECT SIGNAL GAIN", 10, 10, WHITE, 3, BLACK);
 80031ae:	2300      	movs	r3, #0
 80031b0:	9301      	str	r3, [sp, #4]
 80031b2:	2303      	movs	r3, #3
 80031b4:	9300      	str	r3, [sp, #0]
 80031b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031ba:	220a      	movs	r2, #10
 80031bc:	210a      	movs	r1, #10
 80031be:	4803      	ldr	r0, [pc, #12]	; (80031cc <GainMenu_DrawSignalMenu+0x24>)
 80031c0:	f009 fe16 	bl	800cdf0 <ILI9341_Draw_Text>
}
 80031c4:	bf00      	nop
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	08010620 	.word	0x08010620

080031d0 <GainMenu_DrawSyncMenu>:
 *	@param None
 *	@retval None
 *
 */
void GainMenu_DrawSyncMenu()
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af02      	add	r7, sp, #8
	ILI9341_Draw_Text("SELECT SYNC GAIN", 10, 10, WHITE, 3, BLACK);
 80031d6:	2300      	movs	r3, #0
 80031d8:	9301      	str	r3, [sp, #4]
 80031da:	2303      	movs	r3, #3
 80031dc:	9300      	str	r3, [sp, #0]
 80031de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031e2:	220a      	movs	r2, #10
 80031e4:	210a      	movs	r1, #10
 80031e6:	4803      	ldr	r0, [pc, #12]	; (80031f4 <GainMenu_DrawSyncMenu+0x24>)
 80031e8:	f009 fe02 	bl	800cdf0 <ILI9341_Draw_Text>
}
 80031ec:	bf00      	nop
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	08010634 	.word	0x08010634

080031f8 <BiasMenu_getStatus>:
#include <stdio.h>

eBiasMenu_Status eNextBiasMenuStatus =	DISABLE_BIAS_MENU;

eBiasMenu_Status BiasMenu_getStatus()
{
 80031f8:	b480      	push	{r7}
 80031fa:	af00      	add	r7, sp, #0
	return eNextBiasMenuStatus;
 80031fc:	4b03      	ldr	r3, [pc, #12]	; (800320c <BiasMenu_getStatus+0x14>)
 80031fe:	781b      	ldrb	r3, [r3, #0]
}
 8003200:	4618      	mov	r0, r3
 8003202:	46bd      	mov	sp, r7
 8003204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003208:	4770      	bx	lr
 800320a:	bf00      	nop
 800320c:	20001f11 	.word	0x20001f11

08003210 <BiasMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuEntryHandler()
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasMenu Event captured\n");
 8003214:	480b      	ldr	r0, [pc, #44]	; (8003244 <BiasMenuEntryHandler+0x34>)
 8003216:	f00b f92f 	bl	800e478 <puts>
#endif

	DM_RefreshScreen();
 800321a:	f7fd ff6b 	bl	80010f4 <DM_RefreshScreen>

	eNextBiasMenuStatus = ENABLE_BIAS_MENU;
 800321e:	4b0a      	ldr	r3, [pc, #40]	; (8003248 <BiasMenuEntryHandler+0x38>)
 8003220:	2201      	movs	r2, #1
 8003222:	701a      	strb	r2, [r3, #0]

	ENCODER_TIMER->ARR = BIAS_MAX;
 8003224:	4b09      	ldr	r3, [pc, #36]	; (800324c <BiasMenuEntryHandler+0x3c>)
 8003226:	f44f 7248 	mov.w	r2, #800	; 0x320
 800322a:	62da      	str	r2, [r3, #44]	; 0x2c
	ENCODER_TIMER->CNT = BO_GetDcBiasEncoderValue();
 800322c:	f000 fcda 	bl	8003be4 <BO_GetDcBiasEncoderValue>
 8003230:	4603      	mov	r3, r0
 8003232:	461a      	mov	r2, r3
 8003234:	4b05      	ldr	r3, [pc, #20]	; (800324c <BiasMenuEntryHandler+0x3c>)
 8003236:	625a      	str	r2, [r3, #36]	; 0x24

	eNewEvent = evIdle;
 8003238:	4b05      	ldr	r3, [pc, #20]	; (8003250 <BiasMenuEntryHandler+0x40>)
 800323a:	2200      	movs	r2, #0
 800323c:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 800323e:	230c      	movs	r3, #12
}
 8003240:	4618      	mov	r0, r3
 8003242:	bd80      	pop	{r7, pc}
 8003244:	08010648 	.word	0x08010648
 8003248:	20001f11 	.word	0x20001f11
 800324c:	40012c00 	.word	0x40012c00
 8003250:	20001f13 	.word	0x20001f13

08003254 <BiasMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuInputHandler()
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasSet Event captured\n");
 8003258:	4807      	ldr	r0, [pc, #28]	; (8003278 <BiasMenuInputHandler+0x24>)
 800325a:	f00b f90d 	bl	800e478 <puts>
#endif

	BO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800325e:	2001      	movs	r0, #1
 8003260:	f001 fa2e 	bl	80046c0 <SM_GetEncoderValue>
 8003264:	4603      	mov	r3, r0
 8003266:	4618      	mov	r0, r3
 8003268:	f000 fcc8 	bl	8003bfc <BO_ModifyOutput>

	eNewEvent = evIdle;
 800326c:	4b03      	ldr	r3, [pc, #12]	; (800327c <BiasMenuInputHandler+0x28>)
 800326e:	2200      	movs	r2, #0
 8003270:	701a      	strb	r2, [r3, #0]
	return Bias_Menu_State;
 8003272:	230c      	movs	r3, #12
}
 8003274:	4618      	mov	r0, r3
 8003276:	bd80      	pop	{r7, pc}
 8003278:	08010660 	.word	0x08010660
 800327c:	20001f13 	.word	0x20001f13

08003280 <BiasMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState BiasMenuExitHandler()
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitBiasMenu Event captured\n");
 8003284:	4806      	ldr	r0, [pc, #24]	; (80032a0 <BiasMenuExitHandler+0x20>)
 8003286:	f00b f8f7 	bl	800e478 <puts>
#endif


	// disable the menu
	eNextBiasMenuStatus = DISABLE_BIAS_MENU;
 800328a:	4b06      	ldr	r3, [pc, #24]	; (80032a4 <BiasMenuExitHandler+0x24>)
 800328c:	2200      	movs	r2, #0
 800328e:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003290:	f7fd ff30 	bl	80010f4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8003294:	4b04      	ldr	r3, [pc, #16]	; (80032a8 <BiasMenuExitHandler+0x28>)
 8003296:	2200      	movs	r2, #0
 8003298:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	bd80      	pop	{r7, pc}
 80032a0:	08010678 	.word	0x08010678
 80032a4:	20001f11 	.word	0x20001f11
 80032a8:	20001f13 	.word	0x20001f13

080032ac <EM_ProcessEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_ProcessEvent()
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0

	switch(eNextState)
 80032b0:	4bb8      	ldr	r3, [pc, #736]	; (8003594 <EM_ProcessEvent+0x2e8>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b0c      	cmp	r3, #12
 80032b6:	f200 8152 	bhi.w	800355e <EM_ProcessEvent+0x2b2>
 80032ba:	a201      	add	r2, pc, #4	; (adr r2, 80032c0 <EM_ProcessEvent+0x14>)
 80032bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c0:	080032f5 	.word	0x080032f5
 80032c4:	08003349 	.word	0x08003349
 80032c8:	08003389 	.word	0x08003389
 80032cc:	080033b5 	.word	0x080033b5
 80032d0:	080033e1 	.word	0x080033e1
 80032d4:	08003421 	.word	0x08003421
 80032d8:	0800344d 	.word	0x0800344d
 80032dc:	0800355f 	.word	0x0800355f
 80032e0:	08003479 	.word	0x08003479
 80032e4:	080034cb 	.word	0x080034cb
 80032e8:	080034f5 	.word	0x080034f5
 80032ec:	0800351f 	.word	0x0800351f
 80032f0:	08003535 	.word	0x08003535

		case Idle_State:

//			TIM1->ARR = 12;

			if(eNewEvent == evBlueBtn)
 80032f4:	4ba8      	ldr	r3, [pc, #672]	; (8003598 <EM_ProcessEvent+0x2ec>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d105      	bne.n	8003308 <EM_ProcessEvent+0x5c>
			{
				eNextState = FuncMainMenuEntryHandler();
 80032fc:	f000 fa7e 	bl	80037fc <FuncMainMenuEntryHandler>
 8003300:	4603      	mov	r3, r0
 8003302:	461a      	mov	r2, r3
 8003304:	4ba3      	ldr	r3, [pc, #652]	; (8003594 <EM_ProcessEvent+0x2e8>)
 8003306:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003308:	4ba3      	ldr	r3, [pc, #652]	; (8003598 <EM_ProcessEvent+0x2ec>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b02      	cmp	r3, #2
 800330e:	d105      	bne.n	800331c <EM_ProcessEvent+0x70>
			{
				eNextState = FreqMainMenuEntryHandler();
 8003310:	f000 f960 	bl	80035d4 <FreqMainMenuEntryHandler>
 8003314:	4603      	mov	r3, r0
 8003316:	461a      	mov	r2, r3
 8003318:	4b9e      	ldr	r3, [pc, #632]	; (8003594 <EM_ProcessEvent+0x2e8>)
 800331a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 800331c:	4b9e      	ldr	r3, [pc, #632]	; (8003598 <EM_ProcessEvent+0x2ec>)
 800331e:	781b      	ldrb	r3, [r3, #0]
 8003320:	2b03      	cmp	r3, #3
 8003322:	d105      	bne.n	8003330 <EM_ProcessEvent+0x84>
			{
				eNextState = GainMainMenuEntryHandler();
 8003324:	f000 fb66 	bl	80039f4 <GainMainMenuEntryHandler>
 8003328:	4603      	mov	r3, r0
 800332a:	461a      	mov	r2, r3
 800332c:	4b99      	ldr	r3, [pc, #612]	; (8003594 <EM_ProcessEvent+0x2e8>)
 800332e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evRedBtn)
 8003330:	4b99      	ldr	r3, [pc, #612]	; (8003598 <EM_ProcessEvent+0x2ec>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b04      	cmp	r3, #4
 8003336:	f040 8114 	bne.w	8003562 <EM_ProcessEvent+0x2b6>
			{
				eNextState = BiasMenuEntryHandler();
 800333a:	f7ff ff69 	bl	8003210 <BiasMenuEntryHandler>
 800333e:	4603      	mov	r3, r0
 8003340:	461a      	mov	r2, r3
 8003342:	4b94      	ldr	r3, [pc, #592]	; (8003594 <EM_ProcessEvent+0x2e8>)
 8003344:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003346:	e10c      	b.n	8003562 <EM_ProcessEvent+0x2b6>

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 8003348:	4b93      	ldr	r3, [pc, #588]	; (8003598 <EM_ProcessEvent+0x2ec>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b06      	cmp	r3, #6
 800334e:	d105      	bne.n	800335c <EM_ProcessEvent+0xb0>
			{
				eNextState = FuncMainMenuExitHandler();
 8003350:	f000 fa6a 	bl	8003828 <FuncMainMenuExitHandler>
 8003354:	4603      	mov	r3, r0
 8003356:	461a      	mov	r2, r3
 8003358:	4b8e      	ldr	r3, [pc, #568]	; (8003594 <EM_ProcessEvent+0x2e8>)
 800335a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 800335c:	4b8e      	ldr	r3, [pc, #568]	; (8003598 <EM_ProcessEvent+0x2ec>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d105      	bne.n	8003370 <EM_ProcessEvent+0xc4>
			{
				eNextState = FuncSignalMenuEntryHandler();
 8003364:	f000 fa76 	bl	8003854 <FuncSignalMenuEntryHandler>
 8003368:	4603      	mov	r3, r0
 800336a:	461a      	mov	r2, r3
 800336c:	4b89      	ldr	r3, [pc, #548]	; (8003594 <EM_ProcessEvent+0x2e8>)
 800336e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003370:	4b89      	ldr	r3, [pc, #548]	; (8003598 <EM_ProcessEvent+0x2ec>)
 8003372:	781b      	ldrb	r3, [r3, #0]
 8003374:	2b02      	cmp	r3, #2
 8003376:	f040 80f6 	bne.w	8003566 <EM_ProcessEvent+0x2ba>
			{
				eNextState = FuncSyncMenuEntryHandler();
 800337a:	f000 facd 	bl	8003918 <FuncSyncMenuEntryHandler>
 800337e:	4603      	mov	r3, r0
 8003380:	461a      	mov	r2, r3
 8003382:	4b84      	ldr	r3, [pc, #528]	; (8003594 <EM_ProcessEvent+0x2e8>)
 8003384:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003386:	e0ee      	b.n	8003566 <EM_ProcessEvent+0x2ba>

		case Func_Signal_Menu_State:

			if(eNewEvent == evEncoderSet)
 8003388:	4b83      	ldr	r3, [pc, #524]	; (8003598 <EM_ProcessEvent+0x2ec>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	2b05      	cmp	r3, #5
 800338e:	d105      	bne.n	800339c <EM_ProcessEvent+0xf0>
			{
				eNextState = FuncSignalMenuInputHandler();
 8003390:	f000 fa96 	bl	80038c0 <FuncSignalMenuInputHandler>
 8003394:	4603      	mov	r3, r0
 8003396:	461a      	mov	r2, r3
 8003398:	4b7e      	ldr	r3, [pc, #504]	; (8003594 <EM_ProcessEvent+0x2e8>)
 800339a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 800339c:	4b7e      	ldr	r3, [pc, #504]	; (8003598 <EM_ProcessEvent+0x2ec>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b06      	cmp	r3, #6
 80033a2:	f040 80e2 	bne.w	800356a <EM_ProcessEvent+0x2be>
			{
				eNextState = FuncSignalMenuExitHandler();
 80033a6:	f000 faa1 	bl	80038ec <FuncSignalMenuExitHandler>
 80033aa:	4603      	mov	r3, r0
 80033ac:	461a      	mov	r2, r3
 80033ae:	4b79      	ldr	r3, [pc, #484]	; (8003594 <EM_ProcessEvent+0x2e8>)
 80033b0:	701a      	strb	r2, [r3, #0]
			}

			break;
 80033b2:	e0da      	b.n	800356a <EM_ProcessEvent+0x2be>

		case Func_Sync_Menu_State:

			if(eNewEvent == evEncoderSet)
 80033b4:	4b78      	ldr	r3, [pc, #480]	; (8003598 <EM_ProcessEvent+0x2ec>)
 80033b6:	781b      	ldrb	r3, [r3, #0]
 80033b8:	2b05      	cmp	r3, #5
 80033ba:	d105      	bne.n	80033c8 <EM_ProcessEvent+0x11c>
			{
				eNextState = FuncSyncMenuInputHandler();
 80033bc:	f000 fae2 	bl	8003984 <FuncSyncMenuInputHandler>
 80033c0:	4603      	mov	r3, r0
 80033c2:	461a      	mov	r2, r3
 80033c4:	4b73      	ldr	r3, [pc, #460]	; (8003594 <EM_ProcessEvent+0x2e8>)
 80033c6:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80033c8:	4b73      	ldr	r3, [pc, #460]	; (8003598 <EM_ProcessEvent+0x2ec>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	2b06      	cmp	r3, #6
 80033ce:	f040 80ce 	bne.w	800356e <EM_ProcessEvent+0x2c2>
			{
				eNextState = FuncSyncMenuExitHandler();
 80033d2:	f000 faed 	bl	80039b0 <FuncSyncMenuExitHandler>
 80033d6:	4603      	mov	r3, r0
 80033d8:	461a      	mov	r2, r3
 80033da:	4b6e      	ldr	r3, [pc, #440]	; (8003594 <EM_ProcessEvent+0x2e8>)
 80033dc:	701a      	strb	r2, [r3, #0]
			}

			break;
 80033de:	e0c6      	b.n	800356e <EM_ProcessEvent+0x2c2>

			if(eNewEvent == evEncoderSet)
			{
				// No menu action
			}
			if(eNewEvent == evEncoderPush)
 80033e0:	4b6d      	ldr	r3, [pc, #436]	; (8003598 <EM_ProcessEvent+0x2ec>)
 80033e2:	781b      	ldrb	r3, [r3, #0]
 80033e4:	2b06      	cmp	r3, #6
 80033e6:	d105      	bne.n	80033f4 <EM_ProcessEvent+0x148>
			{
				eNextState = GainMainMenuExitHandler();
 80033e8:	f000 fb1a 	bl	8003a20 <GainMainMenuExitHandler>
 80033ec:	4603      	mov	r3, r0
 80033ee:	461a      	mov	r2, r3
 80033f0:	4b68      	ldr	r3, [pc, #416]	; (8003594 <EM_ProcessEvent+0x2e8>)
 80033f2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 80033f4:	4b68      	ldr	r3, [pc, #416]	; (8003598 <EM_ProcessEvent+0x2ec>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d105      	bne.n	8003408 <EM_ProcessEvent+0x15c>
			{
				eNextState = GainSignalMenuEntryHandler();
 80033fc:	f000 fb26 	bl	8003a4c <GainSignalMenuEntryHandler>
 8003400:	4603      	mov	r3, r0
 8003402:	461a      	mov	r2, r3
 8003404:	4b63      	ldr	r3, [pc, #396]	; (8003594 <EM_ProcessEvent+0x2e8>)
 8003406:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 8003408:	4b63      	ldr	r3, [pc, #396]	; (8003598 <EM_ProcessEvent+0x2ec>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b02      	cmp	r3, #2
 800340e:	f040 80b0 	bne.w	8003572 <EM_ProcessEvent+0x2c6>
			{
				eNextState = GainSyncMenuEntryHandler();
 8003412:	f000 fb7b 	bl	8003b0c <GainSyncMenuEntryHandler>
 8003416:	4603      	mov	r3, r0
 8003418:	461a      	mov	r2, r3
 800341a:	4b5e      	ldr	r3, [pc, #376]	; (8003594 <EM_ProcessEvent+0x2e8>)
 800341c:	701a      	strb	r2, [r3, #0]
			}

			break;
 800341e:	e0a8      	b.n	8003572 <EM_ProcessEvent+0x2c6>

		case Gain_Signal_Menu_State:

			if(eNewEvent == evEncoderSet)
 8003420:	4b5d      	ldr	r3, [pc, #372]	; (8003598 <EM_ProcessEvent+0x2ec>)
 8003422:	781b      	ldrb	r3, [r3, #0]
 8003424:	2b05      	cmp	r3, #5
 8003426:	d105      	bne.n	8003434 <EM_ProcessEvent+0x188>
			{
				eNextState = GainSignalMenuInputHandler();
 8003428:	f000 fb44 	bl	8003ab4 <GainSignalMenuInputHandler>
 800342c:	4603      	mov	r3, r0
 800342e:	461a      	mov	r2, r3
 8003430:	4b58      	ldr	r3, [pc, #352]	; (8003594 <EM_ProcessEvent+0x2e8>)
 8003432:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003434:	4b58      	ldr	r3, [pc, #352]	; (8003598 <EM_ProcessEvent+0x2ec>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b06      	cmp	r3, #6
 800343a:	f040 809c 	bne.w	8003576 <EM_ProcessEvent+0x2ca>
			{
				eNextState = GainSignalMenuExitHandler();
 800343e:	f000 fb4f 	bl	8003ae0 <GainSignalMenuExitHandler>
 8003442:	4603      	mov	r3, r0
 8003444:	461a      	mov	r2, r3
 8003446:	4b53      	ldr	r3, [pc, #332]	; (8003594 <EM_ProcessEvent+0x2e8>)
 8003448:	701a      	strb	r2, [r3, #0]
			}

			break;
 800344a:	e094      	b.n	8003576 <EM_ProcessEvent+0x2ca>

		case Gain_Sync_Menu_State:

			if(eNewEvent == evEncoderSet)
 800344c:	4b52      	ldr	r3, [pc, #328]	; (8003598 <EM_ProcessEvent+0x2ec>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	2b05      	cmp	r3, #5
 8003452:	d105      	bne.n	8003460 <EM_ProcessEvent+0x1b4>
			{
				eNextState = GainSyncMenuInputHandler();
 8003454:	f000 fb8e 	bl	8003b74 <GainSyncMenuInputHandler>
 8003458:	4603      	mov	r3, r0
 800345a:	461a      	mov	r2, r3
 800345c:	4b4d      	ldr	r3, [pc, #308]	; (8003594 <EM_ProcessEvent+0x2e8>)
 800345e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003460:	4b4d      	ldr	r3, [pc, #308]	; (8003598 <EM_ProcessEvent+0x2ec>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b06      	cmp	r3, #6
 8003466:	f040 8088 	bne.w	800357a <EM_ProcessEvent+0x2ce>
			{
				eNextState = GainSyncMenuExitHandler();
 800346a:	f000 fb99 	bl	8003ba0 <GainSyncMenuExitHandler>
 800346e:	4603      	mov	r3, r0
 8003470:	461a      	mov	r2, r3
 8003472:	4b48      	ldr	r3, [pc, #288]	; (8003594 <EM_ProcessEvent+0x2e8>)
 8003474:	701a      	strb	r2, [r3, #0]
			}

			break;
 8003476:	e080      	b.n	800357a <EM_ProcessEvent+0x2ce>

// FREQ MENUS

		case Freq_Main_Menu_State:

			if(eNewEvent == evEncoderPush)
 8003478:	4b47      	ldr	r3, [pc, #284]	; (8003598 <EM_ProcessEvent+0x2ec>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b06      	cmp	r3, #6
 800347e:	d105      	bne.n	800348c <EM_ProcessEvent+0x1e0>
			{
				eNextState = FreqMainMenuExitHandler();
 8003480:	f000 f8be 	bl	8003600 <FreqMainMenuExitHandler>
 8003484:	4603      	mov	r3, r0
 8003486:	461a      	mov	r2, r3
 8003488:	4b42      	ldr	r3, [pc, #264]	; (8003594 <EM_ProcessEvent+0x2e8>)
 800348a:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evBlueBtn)
 800348c:	4b42      	ldr	r3, [pc, #264]	; (8003598 <EM_ProcessEvent+0x2ec>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d105      	bne.n	80034a0 <EM_ProcessEvent+0x1f4>
			{
				eNextState = FreqPresetMenuEntryHandler();
 8003494:	f000 f8d0 	bl	8003638 <FreqPresetMenuEntryHandler>
 8003498:	4603      	mov	r3, r0
 800349a:	461a      	mov	r2, r3
 800349c:	4b3d      	ldr	r3, [pc, #244]	; (8003594 <EM_ProcessEvent+0x2e8>)
 800349e:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evGreenBtn)
 80034a0:	4b3d      	ldr	r3, [pc, #244]	; (8003598 <EM_ProcessEvent+0x2ec>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d105      	bne.n	80034b4 <EM_ProcessEvent+0x208>
			{
				eNextState = FreqAdjustMenuEntryHandler();
 80034a8:	f000 f922 	bl	80036f0 <FreqAdjustMenuEntryHandler>
 80034ac:	4603      	mov	r3, r0
 80034ae:	461a      	mov	r2, r3
 80034b0:	4b38      	ldr	r3, [pc, #224]	; (8003594 <EM_ProcessEvent+0x2e8>)
 80034b2:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evYellowBtn)
 80034b4:	4b38      	ldr	r3, [pc, #224]	; (8003598 <EM_ProcessEvent+0x2ec>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b03      	cmp	r3, #3
 80034ba:	d160      	bne.n	800357e <EM_ProcessEvent+0x2d2>
			{
				eNextState = FreqSweepMenuEntryHandler();
 80034bc:	f000 f960 	bl	8003780 <FreqSweepMenuEntryHandler>
 80034c0:	4603      	mov	r3, r0
 80034c2:	461a      	mov	r2, r3
 80034c4:	4b33      	ldr	r3, [pc, #204]	; (8003594 <EM_ProcessEvent+0x2e8>)
 80034c6:	701a      	strb	r2, [r3, #0]
			}

			break;
 80034c8:	e059      	b.n	800357e <EM_ProcessEvent+0x2d2>

		case Freq_Preset_Menu_State:
			if(eNewEvent == evEncoderSet)
 80034ca:	4b33      	ldr	r3, [pc, #204]	; (8003598 <EM_ProcessEvent+0x2ec>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b05      	cmp	r3, #5
 80034d0:	d105      	bne.n	80034de <EM_ProcessEvent+0x232>
			{
				eNextState = FreqPresetMenuInputHandler();
 80034d2:	f000 f8e3 	bl	800369c <FreqPresetMenuInputHandler>
 80034d6:	4603      	mov	r3, r0
 80034d8:	461a      	mov	r2, r3
 80034da:	4b2e      	ldr	r3, [pc, #184]	; (8003594 <EM_ProcessEvent+0x2e8>)
 80034dc:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 80034de:	4b2e      	ldr	r3, [pc, #184]	; (8003598 <EM_ProcessEvent+0x2ec>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b06      	cmp	r3, #6
 80034e4:	d14d      	bne.n	8003582 <EM_ProcessEvent+0x2d6>
			{
				eNextState = FreqPresetMenuExitHandler();
 80034e6:	f000 f8ef 	bl	80036c8 <FreqPresetMenuExitHandler>
 80034ea:	4603      	mov	r3, r0
 80034ec:	461a      	mov	r2, r3
 80034ee:	4b29      	ldr	r3, [pc, #164]	; (8003594 <EM_ProcessEvent+0x2e8>)
 80034f0:	701a      	strb	r2, [r3, #0]
			}
			break;
 80034f2:	e046      	b.n	8003582 <EM_ProcessEvent+0x2d6>

		case Freq_Adjust_Menu_State:
			if(eNewEvent == evEncoderSet)
 80034f4:	4b28      	ldr	r3, [pc, #160]	; (8003598 <EM_ProcessEvent+0x2ec>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2b05      	cmp	r3, #5
 80034fa:	d105      	bne.n	8003508 <EM_ProcessEvent+0x25c>
			{
				eNextState = FreqAdjustMenuInputHandler();
 80034fc:	f000 f91a 	bl	8003734 <FreqAdjustMenuInputHandler>
 8003500:	4603      	mov	r3, r0
 8003502:	461a      	mov	r2, r3
 8003504:	4b23      	ldr	r3, [pc, #140]	; (8003594 <EM_ProcessEvent+0x2e8>)
 8003506:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003508:	4b23      	ldr	r3, [pc, #140]	; (8003598 <EM_ProcessEvent+0x2ec>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b06      	cmp	r3, #6
 800350e:	d13a      	bne.n	8003586 <EM_ProcessEvent+0x2da>
			{
				eNextState = FreqAdjustMenuExitHandler();
 8003510:	f000 f922 	bl	8003758 <FreqAdjustMenuExitHandler>
 8003514:	4603      	mov	r3, r0
 8003516:	461a      	mov	r2, r3
 8003518:	4b1e      	ldr	r3, [pc, #120]	; (8003594 <EM_ProcessEvent+0x2e8>)
 800351a:	701a      	strb	r2, [r3, #0]
			}
			break;
 800351c:	e033      	b.n	8003586 <EM_ProcessEvent+0x2da>

		case Freq_Sweep_Menu_State:

			if(eNewEvent == evEncoderPush)
 800351e:	4b1e      	ldr	r3, [pc, #120]	; (8003598 <EM_ProcessEvent+0x2ec>)
 8003520:	781b      	ldrb	r3, [r3, #0]
 8003522:	2b06      	cmp	r3, #6
 8003524:	d131      	bne.n	800358a <EM_ProcessEvent+0x2de>
			{
				eNextState = FreqSweepMenuExitHandler();
 8003526:	f000 f949 	bl	80037bc <FreqSweepMenuExitHandler>
 800352a:	4603      	mov	r3, r0
 800352c:	461a      	mov	r2, r3
 800352e:	4b19      	ldr	r3, [pc, #100]	; (8003594 <EM_ProcessEvent+0x2e8>)
 8003530:	701a      	strb	r2, [r3, #0]
			}
			break;
 8003532:	e02a      	b.n	800358a <EM_ProcessEvent+0x2de>

// BIAS MENUS

		case Bias_Menu_State:
			if(eNewEvent == evEncoderSet)
 8003534:	4b18      	ldr	r3, [pc, #96]	; (8003598 <EM_ProcessEvent+0x2ec>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	2b05      	cmp	r3, #5
 800353a:	d105      	bne.n	8003548 <EM_ProcessEvent+0x29c>
			{
				eNextState = BiasMenuInputHandler();
 800353c:	f7ff fe8a 	bl	8003254 <BiasMenuInputHandler>
 8003540:	4603      	mov	r3, r0
 8003542:	461a      	mov	r2, r3
 8003544:	4b13      	ldr	r3, [pc, #76]	; (8003594 <EM_ProcessEvent+0x2e8>)
 8003546:	701a      	strb	r2, [r3, #0]
			}
			if(eNewEvent == evEncoderPush)
 8003548:	4b13      	ldr	r3, [pc, #76]	; (8003598 <EM_ProcessEvent+0x2ec>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b06      	cmp	r3, #6
 800354e:	d11e      	bne.n	800358e <EM_ProcessEvent+0x2e2>
			{
				eNextState = BiasMenuExitHandler();
 8003550:	f7ff fe96 	bl	8003280 <BiasMenuExitHandler>
 8003554:	4603      	mov	r3, r0
 8003556:	461a      	mov	r2, r3
 8003558:	4b0e      	ldr	r3, [pc, #56]	; (8003594 <EM_ProcessEvent+0x2e8>)
 800355a:	701a      	strb	r2, [r3, #0]
			}

			break;
 800355c:	e017      	b.n	800358e <EM_ProcessEvent+0x2e2>

		default:
			break;
 800355e:	bf00      	nop
 8003560:	e016      	b.n	8003590 <EM_ProcessEvent+0x2e4>
			break;
 8003562:	bf00      	nop
 8003564:	e014      	b.n	8003590 <EM_ProcessEvent+0x2e4>
			break;
 8003566:	bf00      	nop
 8003568:	e012      	b.n	8003590 <EM_ProcessEvent+0x2e4>
			break;
 800356a:	bf00      	nop
 800356c:	e010      	b.n	8003590 <EM_ProcessEvent+0x2e4>
			break;
 800356e:	bf00      	nop
 8003570:	e00e      	b.n	8003590 <EM_ProcessEvent+0x2e4>
			break;
 8003572:	bf00      	nop
 8003574:	e00c      	b.n	8003590 <EM_ProcessEvent+0x2e4>
			break;
 8003576:	bf00      	nop
 8003578:	e00a      	b.n	8003590 <EM_ProcessEvent+0x2e4>
			break;
 800357a:	bf00      	nop
 800357c:	e008      	b.n	8003590 <EM_ProcessEvent+0x2e4>
			break;
 800357e:	bf00      	nop
 8003580:	e006      	b.n	8003590 <EM_ProcessEvent+0x2e4>
			break;
 8003582:	bf00      	nop
 8003584:	e004      	b.n	8003590 <EM_ProcessEvent+0x2e4>
			break;
 8003586:	bf00      	nop
 8003588:	e002      	b.n	8003590 <EM_ProcessEvent+0x2e4>
			break;
 800358a:	bf00      	nop
 800358c:	e000      	b.n	8003590 <EM_ProcessEvent+0x2e4>
			break;
 800358e:	bf00      	nop
	}

}
 8003590:	bf00      	nop
 8003592:	bd80      	pop	{r7, pc}
 8003594:	20001f12 	.word	0x20001f12
 8003598:	20001f13 	.word	0x20001f13

0800359c <EM_SetNewEvent>:
 *	@param None
 *	@retval None
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 800359c:	b480      	push	{r7}
 800359e:	b083      	sub	sp, #12
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	4603      	mov	r3, r0
 80035a4:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 80035a6:	4a04      	ldr	r2, [pc, #16]	; (80035b8 <EM_SetNewEvent+0x1c>)
 80035a8:	79fb      	ldrb	r3, [r7, #7]
 80035aa:	7013      	strb	r3, [r2, #0]
}
 80035ac:	bf00      	nop
 80035ae:	370c      	adds	r7, #12
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr
 80035b8:	20001f13 	.word	0x20001f13

080035bc <FreqMenu_getStatus>:
#include <stdio.h>

eFreqMenu_Status eNextFreqMenuStatus = 	DISABLE_FREQ_MENU;

eFreqMenu_Status FreqMenu_getStatus()
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
	return eNextFreqMenuStatus;
 80035c0:	4b03      	ldr	r3, [pc, #12]	; (80035d0 <FreqMenu_getStatus+0x14>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
}
 80035c4:	4618      	mov	r0, r3
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr
 80035ce:	bf00      	nop
 80035d0:	20001f14 	.word	0x20001f14

080035d4 <FreqMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuEntryHandler()
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqMenu Event captured\n");
 80035d8:	4806      	ldr	r0, [pc, #24]	; (80035f4 <FreqMainMenuEntryHandler+0x20>)
 80035da:	f00a ff4d 	bl	800e478 <puts>
#endif

	DM_RefreshScreen();
 80035de:	f7fd fd89 	bl	80010f4 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_MAIN_MENU;
 80035e2:	4b05      	ldr	r3, [pc, #20]	; (80035f8 <FreqMainMenuEntryHandler+0x24>)
 80035e4:	2201      	movs	r2, #1
 80035e6:	701a      	strb	r2, [r3, #0]

	// stay in this state
	eNewEvent = evIdle;
 80035e8:	4b04      	ldr	r3, [pc, #16]	; (80035fc <FreqMainMenuEntryHandler+0x28>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	701a      	strb	r2, [r3, #0]
	return Freq_Main_Menu_State;
 80035ee:	2308      	movs	r3, #8
}
 80035f0:	4618      	mov	r0, r3
 80035f2:	bd80      	pop	{r7, pc}
 80035f4:	08010694 	.word	0x08010694
 80035f8:	20001f14 	.word	0x20001f14
 80035fc:	20001f13 	.word	0x20001f13

08003600 <FreqMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqMainMenuExitHandler()
{
 8003600:	b580      	push	{r7, lr}
 8003602:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Main Menu Event captured\n");
 8003604:	4808      	ldr	r0, [pc, #32]	; (8003628 <FreqMainMenuExitHandler+0x28>)
 8003606:	f00a ff37 	bl	800e478 <puts>
#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 800360a:	4b08      	ldr	r3, [pc, #32]	; (800362c <FreqMainMenuExitHandler+0x2c>)
 800360c:	2200      	movs	r2, #0
 800360e:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	ENCODER_TIMER->ARR = 1024;
 8003610:	4b07      	ldr	r3, [pc, #28]	; (8003630 <FreqMainMenuExitHandler+0x30>)
 8003612:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003616:	62da      	str	r2, [r3, #44]	; 0x2c

	DM_RefreshScreen();
 8003618:	f7fd fd6c 	bl	80010f4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 800361c:	4b05      	ldr	r3, [pc, #20]	; (8003634 <FreqMainMenuExitHandler+0x34>)
 800361e:	2200      	movs	r2, #0
 8003620:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8003622:	2300      	movs	r3, #0
}
 8003624:	4618      	mov	r0, r3
 8003626:	bd80      	pop	{r7, pc}
 8003628:	080106c4 	.word	0x080106c4
 800362c:	20001f14 	.word	0x20001f14
 8003630:	40012c00 	.word	0x40012c00
 8003634:	20001f13 	.word	0x20001f13

08003638 <FreqPresetMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuEntryHandler()
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b082      	sub	sp, #8
 800363c:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Preset Menu Entry Event captured\n");
 800363e:	4812      	ldr	r0, [pc, #72]	; (8003688 <FreqPresetMenuEntryHandler+0x50>)
 8003640:	f00a ff1a 	bl	800e478 <puts>
#endif

	DM_RefreshScreen();
 8003644:	f7fd fd56 	bl	80010f4 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_PRESET_MENU;
 8003648:	4b10      	ldr	r3, [pc, #64]	; (800368c <FreqPresetMenuEntryHandler+0x54>)
 800364a:	2202      	movs	r2, #2
 800364c:	701a      	strb	r2, [r3, #0]

	Freq_Preset_Encoder_Pos_t *pFreqPresetTmp =  FreqO_GetFPresetObject();
 800364e:	f000 fcd3 	bl	8003ff8 <FreqO_GetFPresetObject>
 8003652:	6078      	str	r0, [r7, #4]
	if(pFreqPresetTmp)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00a      	beq.n	8003670 <FreqPresetMenuEntryHandler+0x38>
	{
		ENCODER_TIMER->CNT = pFreqPresetTmp->epos;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	791a      	ldrb	r2, [r3, #4]
 800365e:	4b0c      	ldr	r3, [pc, #48]	; (8003690 <FreqPresetMenuEntryHandler+0x58>)
 8003660:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FreqO_GetFreqPresetEncoderRange();
 8003662:	f000 fcfb 	bl	800405c <FreqO_GetFreqPresetEncoderRange>
 8003666:	4603      	mov	r3, r0
 8003668:	461a      	mov	r2, r3
 800366a:	4b09      	ldr	r3, [pc, #36]	; (8003690 <FreqPresetMenuEntryHandler+0x58>)
 800366c:	62da      	str	r2, [r3, #44]	; 0x2c
 800366e:	e002      	b.n	8003676 <FreqPresetMenuEntryHandler+0x3e>
	}
	else
	{
		DM_SetErrorDebugMsg("_FreqPresetMenuEntryHandler: pFreqPresetTmp null pointer");
 8003670:	4808      	ldr	r0, [pc, #32]	; (8003694 <FreqPresetMenuEntryHandler+0x5c>)
 8003672:	f7fd fdfd 	bl	8001270 <DM_SetErrorDebugMsg>
	}


	// stay in this state
	eNewEvent = evIdle;
 8003676:	4b08      	ldr	r3, [pc, #32]	; (8003698 <FreqPresetMenuEntryHandler+0x60>)
 8003678:	2200      	movs	r2, #0
 800367a:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 800367c:	2309      	movs	r3, #9
}
 800367e:	4618      	mov	r0, r3
 8003680:	3708      	adds	r7, #8
 8003682:	46bd      	mov	sp, r7
 8003684:	bd80      	pop	{r7, pc}
 8003686:	bf00      	nop
 8003688:	080106e8 	.word	0x080106e8
 800368c:	20001f14 	.word	0x20001f14
 8003690:	40012c00 	.word	0x40012c00
 8003694:	08010710 	.word	0x08010710
 8003698:	20001f13 	.word	0x20001f13

0800369c <FreqPresetMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuInputHandler()
{
 800369c:	b580      	push	{r7, lr}
 800369e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 80036a0:	4807      	ldr	r0, [pc, #28]	; (80036c0 <FreqPresetMenuInputHandler+0x24>)
 80036a2:	f00a fee9 	bl	800e478 <puts>
#endif

	FreqO_ModifyOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80036a6:	2001      	movs	r0, #1
 80036a8:	f001 f80a 	bl	80046c0 <SM_GetEncoderValue>
 80036ac:	4603      	mov	r3, r0
 80036ae:	4618      	mov	r0, r3
 80036b0:	f000 fbb0 	bl	8003e14 <FreqO_ModifyOutput>

	// stay in this state
	eNewEvent = evIdle;
 80036b4:	4b03      	ldr	r3, [pc, #12]	; (80036c4 <FreqPresetMenuInputHandler+0x28>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	701a      	strb	r2, [r3, #0]
	return Freq_Preset_Menu_State;
 80036ba:	2309      	movs	r3, #9
}
 80036bc:	4618      	mov	r0, r3
 80036be:	bd80      	pop	{r7, pc}
 80036c0:	080106ac 	.word	0x080106ac
 80036c4:	20001f13 	.word	0x20001f13

080036c8 <FreqPresetMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqPresetMenuExitHandler()
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Menu Event captured\n");
 80036cc:	4805      	ldr	r0, [pc, #20]	; (80036e4 <FreqPresetMenuExitHandler+0x1c>)
 80036ce:	f00a fed3 	bl	800e478 <puts>
#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 80036d2:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <FreqPresetMenuExitHandler+0x20>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evGreenBtn;
 80036d8:	4b04      	ldr	r3, [pc, #16]	; (80036ec <FreqPresetMenuExitHandler+0x24>)
 80036da:	2202      	movs	r2, #2
 80036dc:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80036de:	2300      	movs	r3, #0
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	0801074c 	.word	0x0801074c
 80036e8:	20001f14 	.word	0x20001f14
 80036ec:	20001f13 	.word	0x20001f13

080036f0 <FreqAdjustMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuEntryHandler()
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Adjust Menu Event captured\n");
 80036f4:	480a      	ldr	r0, [pc, #40]	; (8003720 <FreqAdjustMenuEntryHandler+0x30>)
 80036f6:	f00a febf 	bl	800e478 <puts>
#endif

	DM_RefreshScreen();
 80036fa:	f7fd fcfb 	bl	80010f4 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_ADJUST_MENU;
 80036fe:	4b09      	ldr	r3, [pc, #36]	; (8003724 <FreqAdjustMenuEntryHandler+0x34>)
 8003700:	2203      	movs	r2, #3
 8003702:	701a      	strb	r2, [r3, #0]

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = TIM8->ARR;
 8003704:	4b08      	ldr	r3, [pc, #32]	; (8003728 <FreqAdjustMenuEntryHandler+0x38>)
 8003706:	4a09      	ldr	r2, [pc, #36]	; (800372c <FreqAdjustMenuEntryHandler+0x3c>)
 8003708:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800370a:	6253      	str	r3, [r2, #36]	; 0x24
	ENCODER_TIMER->ARR = 65535;
 800370c:	4b07      	ldr	r3, [pc, #28]	; (800372c <FreqAdjustMenuEntryHandler+0x3c>)
 800370e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003712:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 8003714:	4b06      	ldr	r3, [pc, #24]	; (8003730 <FreqAdjustMenuEntryHandler+0x40>)
 8003716:	2200      	movs	r2, #0
 8003718:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 800371a:	230a      	movs	r3, #10
}
 800371c:	4618      	mov	r0, r3
 800371e:	bd80      	pop	{r7, pc}
 8003720:	0801076c 	.word	0x0801076c
 8003724:	20001f14 	.word	0x20001f14
 8003728:	40013400 	.word	0x40013400
 800372c:	40012c00 	.word	0x40012c00
 8003730:	20001f13 	.word	0x20001f13

08003734 <FreqAdjustMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuInputHandler()
{
 8003734:	b580      	push	{r7, lr}
 8003736:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqSet Event captured\n");
 8003738:	4805      	ldr	r0, [pc, #20]	; (8003750 <FreqAdjustMenuInputHandler+0x1c>)
 800373a:	f00a fe9d 	bl	800e478 <puts>
#endif

	FreqO_AdjustFreq();
 800373e:	f000 fb5b 	bl	8003df8 <FreqO_AdjustFreq>

	// stay in this state
	eNewEvent = evIdle;
 8003742:	4b04      	ldr	r3, [pc, #16]	; (8003754 <FreqAdjustMenuInputHandler+0x20>)
 8003744:	2200      	movs	r2, #0
 8003746:	701a      	strb	r2, [r3, #0]
	return Freq_Adjust_Menu_State;
 8003748:	230a      	movs	r3, #10
}
 800374a:	4618      	mov	r0, r3
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	080106ac 	.word	0x080106ac
 8003754:	20001f13 	.word	0x20001f13

08003758 <FreqAdjustMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqAdjustMenuExitHandler()
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Adjust Menu Exit Event captured\n");
 800375c:	4805      	ldr	r0, [pc, #20]	; (8003774 <FreqAdjustMenuExitHandler+0x1c>)
 800375e:	f00a fe8b 	bl	800e478 <puts>
#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 8003762:	4b05      	ldr	r3, [pc, #20]	; (8003778 <FreqAdjustMenuExitHandler+0x20>)
 8003764:	2200      	movs	r2, #0
 8003766:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evGreenBtn;
 8003768:	4b04      	ldr	r3, [pc, #16]	; (800377c <FreqAdjustMenuExitHandler+0x24>)
 800376a:	2202      	movs	r2, #2
 800376c:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 800376e:	2300      	movs	r3, #0
}
 8003770:	4618      	mov	r0, r3
 8003772:	bd80      	pop	{r7, pc}
 8003774:	0801078c 	.word	0x0801078c
 8003778:	20001f14 	.word	0x20001f14
 800377c:	20001f13 	.word	0x20001f13

08003780 <FreqSweepMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuEntryHandler()
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Freq Sweep Menu Event captured\n");
 8003784:	4809      	ldr	r0, [pc, #36]	; (80037ac <FreqSweepMenuEntryHandler+0x2c>)
 8003786:	f00a fe77 	bl	800e478 <puts>
#endif

	DM_RefreshScreen();
 800378a:	f7fd fcb3 	bl	80010f4 <DM_RefreshScreen>

	eNextFreqMenuStatus = ENABLE_FREQ_SWEEP_MENU;
 800378e:	4b08      	ldr	r3, [pc, #32]	; (80037b0 <FreqSweepMenuEntryHandler+0x30>)
 8003790:	2204      	movs	r2, #4
 8003792:	701a      	strb	r2, [r3, #0]

	// set the rotary encoder limits to 0-? for this menu
	ENCODER_TIMER->CNT = 0;
 8003794:	4b07      	ldr	r3, [pc, #28]	; (80037b4 <FreqSweepMenuEntryHandler+0x34>)
 8003796:	2200      	movs	r2, #0
 8003798:	625a      	str	r2, [r3, #36]	; 0x24
	ENCODER_TIMER->ARR = 56;
 800379a:	4b06      	ldr	r3, [pc, #24]	; (80037b4 <FreqSweepMenuEntryHandler+0x34>)
 800379c:	2238      	movs	r2, #56	; 0x38
 800379e:	62da      	str	r2, [r3, #44]	; 0x2c

	// stay in this state
	eNewEvent = evIdle;
 80037a0:	4b05      	ldr	r3, [pc, #20]	; (80037b8 <FreqSweepMenuEntryHandler+0x38>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	701a      	strb	r2, [r3, #0]
	return Freq_Sweep_Menu_State;
 80037a6:	230b      	movs	r3, #11
}
 80037a8:	4618      	mov	r0, r3
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	080107b8 	.word	0x080107b8
 80037b0:	20001f14 	.word	0x20001f14
 80037b4:	40012c00 	.word	0x40012c00
 80037b8:	20001f13 	.word	0x20001f13

080037bc <FreqSweepMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState FreqSweepMenuExitHandler()
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("Exit Freq Sweep Menu Exit Event captured\n");
 80037c0:	4805      	ldr	r0, [pc, #20]	; (80037d8 <FreqSweepMenuExitHandler+0x1c>)
 80037c2:	f00a fe59 	bl	800e478 <puts>
#endif


	// disable the menu
	eNextFreqMenuStatus = DISABLE_FREQ_MENU;
 80037c6:	4b05      	ldr	r3, [pc, #20]	; (80037dc <FreqSweepMenuExitHandler+0x20>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	701a      	strb	r2, [r3, #0]

	// back to main freq menu
	eNewEvent = evGreenBtn;
 80037cc:	4b04      	ldr	r3, [pc, #16]	; (80037e0 <FreqSweepMenuExitHandler+0x24>)
 80037ce:	2202      	movs	r2, #2
 80037d0:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	bd80      	pop	{r7, pc}
 80037d8:	080107d8 	.word	0x080107d8
 80037dc:	20001f14 	.word	0x20001f14
 80037e0:	20001f13 	.word	0x20001f13

080037e4 <FuncMenu_getStatus>:
#include <stdio.h>

eFuncMenu_Status eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;

eFuncMenu_Status FuncMenu_getStatus()
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
	return eNextFuncMenuStatus;
 80037e8:	4b03      	ldr	r3, [pc, #12]	; (80037f8 <FuncMenu_getStatus+0x14>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	20001f15 	.word	0x20001f15

080037fc <FuncMainMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuEntryHandler(void)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionMenu Event captured\n");
 8003800:	4806      	ldr	r0, [pc, #24]	; (800381c <FuncMainMenuEntryHandler+0x20>)
 8003802:	f00a fe39 	bl	800e478 <puts>
#endif

	DM_RefreshScreen();
 8003806:	f7fd fc75 	bl	80010f4 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 800380a:	4b05      	ldr	r3, [pc, #20]	; (8003820 <FuncMainMenuEntryHandler+0x24>)
 800380c:	2201      	movs	r2, #1
 800380e:	701a      	strb	r2, [r3, #0]
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
	}
*/
	eNewEvent = evIdle;
 8003810:	4b04      	ldr	r3, [pc, #16]	; (8003824 <FuncMainMenuEntryHandler+0x28>)
 8003812:	2200      	movs	r2, #0
 8003814:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8003816:	2301      	movs	r3, #1
}
 8003818:	4618      	mov	r0, r3
 800381a:	bd80      	pop	{r7, pc}
 800381c:	08010804 	.word	0x08010804
 8003820:	20001f15 	.word	0x20001f15
 8003824:	20001f13 	.word	0x20001f13

08003828 <FuncMainMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncMainMenuExitHandler()
{
 8003828:	b580      	push	{r7, lr}
 800382a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFuncMenu Event captured\n");
 800382c:	4806      	ldr	r0, [pc, #24]	; (8003848 <FuncMainMenuExitHandler+0x20>)
 800382e:	f00a fe23 	bl	800e478 <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	DISABLE_FUNC_MENU;
 8003832:	4b06      	ldr	r3, [pc, #24]	; (800384c <FuncMainMenuExitHandler+0x24>)
 8003834:	2200      	movs	r2, #0
 8003836:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 8003838:	f7fd fc5c 	bl	80010f4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 800383c:	4b04      	ldr	r3, [pc, #16]	; (8003850 <FuncMainMenuExitHandler+0x28>)
 800383e:	2200      	movs	r2, #0
 8003840:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	bd80      	pop	{r7, pc}
 8003848:	08010840 	.word	0x08010840
 800384c:	20001f15 	.word	0x20001f15
 8003850:	20001f13 	.word	0x20001f13

08003854 <FuncSignalMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuEntryHandler(void)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionMenu Event captured\n");
 800385a:	4814      	ldr	r0, [pc, #80]	; (80038ac <FuncSignalMenuEntryHandler+0x58>)
 800385c:	f00a fe0c 	bl	800e478 <puts>
#endif

	DM_RefreshScreen();
 8003860:	f7fd fc48 	bl	80010f4 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SIGNAL_MENU;
 8003864:	4b12      	ldr	r3, [pc, #72]	; (80038b0 <FuncSignalMenuEntryHandler+0x5c>)
 8003866:	2202      	movs	r2, #2
 8003868:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSignalFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile;
 800386a:	2000      	movs	r0, #0
 800386c:	f000 ff12 	bl	8004694 <SM_GetOutputChannel>
 8003870:	4603      	mov	r3, r0
 8003872:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 8003876:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d00a      	beq.n	8003894 <FuncSignalMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	785a      	ldrb	r2, [r3, #1]
 8003882:	4b0c      	ldr	r3, [pc, #48]	; (80038b4 <FuncSignalMenuEntryHandler+0x60>)
 8003884:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 8003886:	f000 fd35 	bl	80042f4 <FuncO_GetFuncPresetEncoderRange>
 800388a:	4603      	mov	r3, r0
 800388c:	461a      	mov	r2, r3
 800388e:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <FuncSignalMenuEntryHandler+0x60>)
 8003890:	62da      	str	r2, [r3, #44]	; 0x2c
 8003892:	e002      	b.n	800389a <FuncSignalMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 8003894:	4808      	ldr	r0, [pc, #32]	; (80038b8 <FuncSignalMenuEntryHandler+0x64>)
 8003896:	f7fd fceb 	bl	8001270 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 800389a:	4b08      	ldr	r3, [pc, #32]	; (80038bc <FuncSignalMenuEntryHandler+0x68>)
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 80038a0:	2302      	movs	r3, #2
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3708      	adds	r7, #8
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	08010804 	.word	0x08010804
 80038b0:	20001f15 	.word	0x20001f15
 80038b4:	40012c00 	.word	0x40012c00
 80038b8:	0801085c 	.word	0x0801085c
 80038bc:	20001f13 	.word	0x20001f13

080038c0 <FuncSignalMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuInputHandler(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionAdjust Event captured\n");
 80038c4:	4807      	ldr	r0, [pc, #28]	; (80038e4 <FuncSignalMenuInputHandler+0x24>)
 80038c6:	f00a fdd7 	bl	800e478 <puts>
#endif


	FuncO_ModifySignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 80038ca:	2001      	movs	r0, #1
 80038cc:	f000 fef8 	bl	80046c0 <SM_GetEncoderValue>
 80038d0:	4603      	mov	r3, r0
 80038d2:	4618      	mov	r0, r3
 80038d4:	f000 fbe2 	bl	800409c <FuncO_ModifySignalOutput>
	eNewEvent = evBlueBtn;
 80038d8:	4b03      	ldr	r3, [pc, #12]	; (80038e8 <FuncSignalMenuInputHandler+0x28>)
 80038da:	2201      	movs	r2, #1
 80038dc:	701a      	strb	r2, [r3, #0]
	return Func_Signal_Menu_State;
 80038de:	2302      	movs	r3, #2
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	08010820 	.word	0x08010820
 80038e8:	20001f13 	.word	0x20001f13

080038ec <FuncSignalMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSignalMenuExitHandler()
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFuncMenu Event captured\n");
 80038f0:	4806      	ldr	r0, [pc, #24]	; (800390c <FuncSignalMenuExitHandler+0x20>)
 80038f2:	f00a fdc1 	bl	800e478 <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 80038f6:	4b06      	ldr	r3, [pc, #24]	; (8003910 <FuncSignalMenuExitHandler+0x24>)
 80038f8:	2201      	movs	r2, #1
 80038fa:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

//	ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 80038fc:	f7fd fbfa 	bl	80010f4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8003900:	4b04      	ldr	r3, [pc, #16]	; (8003914 <FuncSignalMenuExitHandler+0x28>)
 8003902:	2200      	movs	r2, #0
 8003904:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 8003906:	2301      	movs	r3, #1
}
 8003908:	4618      	mov	r0, r3
 800390a:	bd80      	pop	{r7, pc}
 800390c:	08010840 	.word	0x08010840
 8003910:	20001f15 	.word	0x20001f15
 8003914:	20001f13 	.word	0x20001f13

08003918 <FuncSyncMenuEntryHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuEntryHandler(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b082      	sub	sp, #8
 800391c:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionMenu Event captured\n");
 800391e:	4814      	ldr	r0, [pc, #80]	; (8003970 <FuncSyncMenuEntryHandler+0x58>)
 8003920:	f00a fdaa 	bl	800e478 <puts>
#endif

	DM_RefreshScreen();
 8003924:	f7fd fbe6 	bl	80010f4 <DM_RefreshScreen>

	eNextFuncMenuStatus = 	ENABLE_FUNC_SYNC_MENU;
 8003928:	4b12      	ldr	r3, [pc, #72]	; (8003974 <FuncSyncMenuEntryHandler+0x5c>)
 800392a:	2203      	movs	r2, #3
 800392c:	701a      	strb	r2, [r3, #0]

	//FunctionProfile_t *func_profileTmp =  FuncO_GetSyncFPresetObject();
	FunctionProfile_t *func_profileTmp = SM_GetOutputChannel(SYNC_CHANNEL)->func_profile;
 800392e:	2001      	movs	r0, #1
 8003930:	f000 feb0 	bl	8004694 <SM_GetOutputChannel>
 8003934:	4603      	mov	r3, r0
 8003936:	f8d3 31e8 	ldr.w	r3, [r3, #488]	; 0x1e8
 800393a:	607b      	str	r3, [r7, #4]
	if(func_profileTmp)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00a      	beq.n	8003958 <FuncSyncMenuEntryHandler+0x40>
	{
		ENCODER_TIMER->CNT = func_profileTmp->epos;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	785a      	ldrb	r2, [r3, #1]
 8003946:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <FuncSyncMenuEntryHandler+0x60>)
 8003948:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = FuncO_GetFuncPresetEncoderRange();
 800394a:	f000 fcd3 	bl	80042f4 <FuncO_GetFuncPresetEncoderRange>
 800394e:	4603      	mov	r3, r0
 8003950:	461a      	mov	r2, r3
 8003952:	4b09      	ldr	r3, [pc, #36]	; (8003978 <FuncSyncMenuEntryHandler+0x60>)
 8003954:	62da      	str	r2, [r3, #44]	; 0x2c
 8003956:	e002      	b.n	800395e <FuncSyncMenuEntryHandler+0x46>
	}
	else
	{
		DM_SetErrorDebugMsg("_FuncMenuEntryHandler: func_profileTmp null pointer");
 8003958:	4808      	ldr	r0, [pc, #32]	; (800397c <FuncSyncMenuEntryHandler+0x64>)
 800395a:	f7fd fc89 	bl	8001270 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 800395e:	4b08      	ldr	r3, [pc, #32]	; (8003980 <FuncSyncMenuEntryHandler+0x68>)
 8003960:	2200      	movs	r2, #0
 8003962:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 8003964:	2303      	movs	r3, #3
}
 8003966:	4618      	mov	r0, r3
 8003968:	3708      	adds	r7, #8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	08010804 	.word	0x08010804
 8003974:	20001f15 	.word	0x20001f15
 8003978:	40012c00 	.word	0x40012c00
 800397c:	0801085c 	.word	0x0801085c
 8003980:	20001f13 	.word	0x20001f13

08003984 <FuncSyncMenuInputHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuInputHandler(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionAdjust Event captured\n");
 8003988:	4807      	ldr	r0, [pc, #28]	; (80039a8 <FuncSyncMenuInputHandler+0x24>)
 800398a:	f00a fd75 	bl	800e478 <puts>
#endif


	FuncO_ModifySyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 800398e:	2001      	movs	r0, #1
 8003990:	f000 fe96 	bl	80046c0 <SM_GetEncoderValue>
 8003994:	4603      	mov	r3, r0
 8003996:	4618      	mov	r0, r3
 8003998:	f000 fbd8 	bl	800414c <FuncO_ModifySyncOutput>
	eNewEvent = evBlueBtn;
 800399c:	4b03      	ldr	r3, [pc, #12]	; (80039ac <FuncSyncMenuInputHandler+0x28>)
 800399e:	2201      	movs	r2, #1
 80039a0:	701a      	strb	r2, [r3, #0]
	return Func_Sync_Menu_State;
 80039a2:	2303      	movs	r3, #3
}
 80039a4:	4618      	mov	r0, r3
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	08010820 	.word	0x08010820
 80039ac:	20001f13 	.word	0x20001f13

080039b0 <FuncSyncMenuExitHandler>:
 *	@param None
 *	@retval eSystemState enum for next system state
 *
 */
eSystemState FuncSyncMenuExitHandler()
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFuncMenu Event captured\n");
 80039b4:	4806      	ldr	r0, [pc, #24]	; (80039d0 <FuncSyncMenuExitHandler+0x20>)
 80039b6:	f00a fd5f 	bl	800e478 <puts>
#endif

	// disable the menu

	eNextFuncMenuStatus = 	ENABLE_FUNC_MAIN_MENU;
 80039ba:	4b06      	ldr	r3, [pc, #24]	; (80039d4 <FuncSyncMenuExitHandler+0x24>)
 80039bc:	2201      	movs	r2, #1
 80039be:	701a      	strb	r2, [r3, #0]

	// reset the encoder range

	//ENCODER_TIMER->ARR = 1024;

	DM_RefreshScreen();
 80039c0:	f7fd fb98 	bl	80010f4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 80039c4:	4b04      	ldr	r3, [pc, #16]	; (80039d8 <FuncSyncMenuExitHandler+0x28>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	701a      	strb	r2, [r3, #0]
	return Func_Main_Menu_State;
 80039ca:	2301      	movs	r3, #1
}
 80039cc:	4618      	mov	r0, r3
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	08010840 	.word	0x08010840
 80039d4:	20001f15 	.word	0x20001f15
 80039d8:	20001f13 	.word	0x20001f13

080039dc <GainMenu_getStatus>:
#include <stdio.h>

eGainMenu_Status eNextGainMenuStatus = 	DISABLE_GAIN_MENU;

eGainMenu_Status GainMenu_getStatus()
{
 80039dc:	b480      	push	{r7}
 80039de:	af00      	add	r7, sp, #0
	return eNextGainMenuStatus;
 80039e0:	4b03      	ldr	r3, [pc, #12]	; (80039f0 <GainMenu_getStatus+0x14>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
 80039ee:	bf00      	nop
 80039f0:	20001f16 	.word	0x20001f16

080039f4 <GainMainMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuEntryHandler()
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainMenu Event captured\n");
 80039f8:	4806      	ldr	r0, [pc, #24]	; (8003a14 <GainMainMenuEntryHandler+0x20>)
 80039fa:	f00a fd3d 	bl	800e478 <puts>
#endif

	DM_RefreshScreen();
 80039fe:	f7fd fb79 	bl	80010f4 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8003a02:	4b05      	ldr	r3, [pc, #20]	; (8003a18 <GainMainMenuEntryHandler+0x24>)
 8003a04:	2201      	movs	r2, #1
 8003a06:	701a      	strb	r2, [r3, #0]

	eNewEvent = evIdle;
 8003a08:	4b04      	ldr	r3, [pc, #16]	; (8003a1c <GainMainMenuEntryHandler+0x28>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8003a0e:	2304      	movs	r3, #4
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	bd80      	pop	{r7, pc}
 8003a14:	08010890 	.word	0x08010890
 8003a18:	20001f16 	.word	0x20001f16
 8003a1c:	20001f13 	.word	0x20001f13

08003a20 <GainMainMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainMainMenuExitHandler()
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitGainMenu Event captured\n");
 8003a24:	4806      	ldr	r0, [pc, #24]	; (8003a40 <GainMainMenuExitHandler+0x20>)
 8003a26:	f00a fd27 	bl	800e478 <puts>
#endif

	eNextGainMenuStatus = DISABLE_GAIN_MENU;
 8003a2a:	4b06      	ldr	r3, [pc, #24]	; (8003a44 <GainMainMenuExitHandler+0x24>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8003a30:	f7fd fb60 	bl	80010f4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8003a34:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <GainMainMenuExitHandler+0x28>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	080108c0 	.word	0x080108c0
 8003a44:	20001f16 	.word	0x20001f16
 8003a48:	20001f13 	.word	0x20001f13

08003a4c <GainSignalMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuEntryHandler()
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b082      	sub	sp, #8
 8003a50:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainMenu Event captured\n");
 8003a52:	4813      	ldr	r0, [pc, #76]	; (8003aa0 <GainSignalMenuEntryHandler+0x54>)
 8003a54:	f00a fd10 	bl	800e478 <puts>
#endif

	DM_RefreshScreen();
 8003a58:	f7fd fb4c 	bl	80010f4 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_SIGNAL_MENU;
 8003a5c:	4b11      	ldr	r3, [pc, #68]	; (8003aa4 <GainSignalMenuEntryHandler+0x58>)
 8003a5e:	2202      	movs	r2, #2
 8003a60:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile;
 8003a62:	2000      	movs	r0, #0
 8003a64:	f000 fe16 	bl	8004694 <SM_GetOutputChannel>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8003a6e:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d008      	beq.n	8003a88 <GainSignalMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	8b1a      	ldrh	r2, [r3, #24]
 8003a7a:	4b0b      	ldr	r3, [pc, #44]	; (8003aa8 <GainSignalMenuEntryHandler+0x5c>)
 8003a7c:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 8003a7e:	4b0a      	ldr	r3, [pc, #40]	; (8003aa8 <GainSignalMenuEntryHandler+0x5c>)
 8003a80:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8003a84:	62da      	str	r2, [r3, #44]	; 0x2c
 8003a86:	e002      	b.n	8003a8e <GainSignalMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8003a88:	4808      	ldr	r0, [pc, #32]	; (8003aac <GainSignalMenuEntryHandler+0x60>)
 8003a8a:	f7fd fbf1 	bl	8001270 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8003a8e:	4b08      	ldr	r3, [pc, #32]	; (8003ab0 <GainSignalMenuEntryHandler+0x64>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8003a94:	2305      	movs	r3, #5
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3708      	adds	r7, #8
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	08010890 	.word	0x08010890
 8003aa4:	20001f16 	.word	0x20001f16
 8003aa8:	40012c00 	.word	0x40012c00
 8003aac:	080108dc 	.word	0x080108dc
 8003ab0:	20001f13 	.word	0x20001f13

08003ab4 <GainSignalMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuInputHandler()
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainSet Event captured\n");
 8003ab8:	4807      	ldr	r0, [pc, #28]	; (8003ad8 <GainSignalMenuInputHandler+0x24>)
 8003aba:	f00a fcdd 	bl	800e478 <puts>
#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_ModifySignalOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003abe:	2001      	movs	r0, #1
 8003ac0:	f000 fdfe 	bl	80046c0 <SM_GetEncoderValue>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f000 ffb2 	bl	8004a30 <VPP_ModifySignalOutput>

	eNewEvent = evYellowBtn;
 8003acc:	4b03      	ldr	r3, [pc, #12]	; (8003adc <GainSignalMenuInputHandler+0x28>)
 8003ace:	2203      	movs	r2, #3
 8003ad0:	701a      	strb	r2, [r3, #0]
	return Gain_Signal_Menu_State;
 8003ad2:	2305      	movs	r3, #5
}
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	bd80      	pop	{r7, pc}
 8003ad8:	080108a8 	.word	0x080108a8
 8003adc:	20001f13 	.word	0x20001f13

08003ae0 <GainSignalMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSignalMenuExitHandler()
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitGainMenu Event captured\n");
 8003ae4:	4806      	ldr	r0, [pc, #24]	; (8003b00 <GainSignalMenuExitHandler+0x20>)
 8003ae6:	f00a fcc7 	bl	800e478 <puts>
#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8003aea:	4b06      	ldr	r3, [pc, #24]	; (8003b04 <GainSignalMenuExitHandler+0x24>)
 8003aec:	2201      	movs	r2, #1
 8003aee:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8003af0:	f7fd fb00 	bl	80010f4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8003af4:	4b04      	ldr	r3, [pc, #16]	; (8003b08 <GainSignalMenuExitHandler+0x28>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8003afa:	2304      	movs	r3, #4
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	080108c0 	.word	0x080108c0
 8003b04:	20001f16 	.word	0x20001f16
 8003b08:	20001f13 	.word	0x20001f13

08003b0c <GainSyncMenuEntryHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuEntryHandler()
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainMenu Event captured\n");
 8003b12:	4813      	ldr	r0, [pc, #76]	; (8003b60 <GainSyncMenuEntryHandler+0x54>)
 8003b14:	f00a fcb0 	bl	800e478 <puts>
#endif

	DM_RefreshScreen();
 8003b18:	f7fd faec 	bl	80010f4 <DM_RefreshScreen>

	eNextGainMenuStatus = ENABLE_GAIN_SYNC_MENU;
 8003b1c:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <GainSyncMenuEntryHandler+0x58>)
 8003b1e:	2203      	movs	r2, #3
 8003b20:	701a      	strb	r2, [r3, #0]

	AmplitudeProfile_t* pTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile;
 8003b22:	2001      	movs	r0, #1
 8003b24:	f000 fdb6 	bl	8004694 <SM_GetOutputChannel>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8003b2e:	607b      	str	r3, [r7, #4]

	if(pTmpVppPreset)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d008      	beq.n	8003b48 <GainSyncMenuEntryHandler+0x3c>
	{
		ENCODER_TIMER->CNT = pTmpVppPreset->epos;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	8b1a      	ldrh	r2, [r3, #24]
 8003b3a:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <GainSyncMenuEntryHandler+0x5c>)
 8003b3c:	625a      	str	r2, [r3, #36]	; 0x24
		ENCODER_TIMER->ARR = MAX_VPP_ENCODER_RANGE;
 8003b3e:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <GainSyncMenuEntryHandler+0x5c>)
 8003b40:	f44f 72c7 	mov.w	r2, #398	; 0x18e
 8003b44:	62da      	str	r2, [r3, #44]	; 0x2c
 8003b46:	e002      	b.n	8003b4e <GainSyncMenuEntryHandler+0x42>
	}
	else
	{
		DM_SetErrorDebugMsg("GainMainMenuEntryHandler: pVppPresetTmp null pointer");
 8003b48:	4808      	ldr	r0, [pc, #32]	; (8003b6c <GainSyncMenuEntryHandler+0x60>)
 8003b4a:	f7fd fb91 	bl	8001270 <DM_SetErrorDebugMsg>
	}

	eNewEvent = evIdle;
 8003b4e:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <GainSyncMenuEntryHandler+0x64>)
 8003b50:	2200      	movs	r2, #0
 8003b52:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 8003b54:	2306      	movs	r3, #6
}
 8003b56:	4618      	mov	r0, r3
 8003b58:	3708      	adds	r7, #8
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	bd80      	pop	{r7, pc}
 8003b5e:	bf00      	nop
 8003b60:	08010890 	.word	0x08010890
 8003b64:	20001f16 	.word	0x20001f16
 8003b68:	40012c00 	.word	0x40012c00
 8003b6c:	080108dc 	.word	0x080108dc
 8003b70:	20001f13 	.word	0x20001f13

08003b74 <GainSyncMenuInputHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuInputHandler()
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainSet Event captured\n");
 8003b78:	4807      	ldr	r0, [pc, #28]	; (8003b98 <GainSyncMenuInputHandler+0x24>)
 8003b7a:	f00a fc7d 	bl	800e478 <puts>
#endif

	//GO_ModifyOutput(SMGetEncoderValue(ENCODER_REVERSE));
	VPP_ModifySyncOutput(SM_GetEncoderValue(ENCODER_REVERSE));
 8003b7e:	2001      	movs	r0, #1
 8003b80:	f000 fd9e 	bl	80046c0 <SM_GetEncoderValue>
 8003b84:	4603      	mov	r3, r0
 8003b86:	4618      	mov	r0, r3
 8003b88:	f001 fbfc 	bl	8005384 <VPP_ModifySyncOutput>

	eNewEvent = evYellowBtn;
 8003b8c:	4b03      	ldr	r3, [pc, #12]	; (8003b9c <GainSyncMenuInputHandler+0x28>)
 8003b8e:	2203      	movs	r2, #3
 8003b90:	701a      	strb	r2, [r3, #0]
	return Gain_Sync_Menu_State;
 8003b92:	2306      	movs	r3, #6
}
 8003b94:	4618      	mov	r0, r3
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	080108a8 	.word	0x080108a8
 8003b9c:	20001f13 	.word	0x20001f13

08003ba0 <GainSyncMenuExitHandler>:
 *	@param None
 *	@retval None
 *
 */
eSystemState GainSyncMenuExitHandler()
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitGainMenu Event captured\n");
 8003ba4:	4806      	ldr	r0, [pc, #24]	; (8003bc0 <GainSyncMenuExitHandler+0x20>)
 8003ba6:	f00a fc67 	bl	800e478 <puts>
#endif

	eNextGainMenuStatus = ENABLE_GAIN_MAIN_MENU;
 8003baa:	4b06      	ldr	r3, [pc, #24]	; (8003bc4 <GainSyncMenuExitHandler+0x24>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	701a      	strb	r2, [r3, #0]

	DM_RefreshScreen();
 8003bb0:	f7fd faa0 	bl	80010f4 <DM_RefreshScreen>

	eNewEvent = evIdle;
 8003bb4:	4b04      	ldr	r3, [pc, #16]	; (8003bc8 <GainSyncMenuExitHandler+0x28>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	701a      	strb	r2, [r3, #0]
	return Gain_Main_Menu_State;
 8003bba:	2304      	movs	r3, #4
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	080108c0 	.word	0x080108c0
 8003bc4:	20001f16 	.word	0x20001f16
 8003bc8:	20001f13 	.word	0x20001f13

08003bcc <BO_GetBiasPolarity>:
 *	@param None
 *	@retval None
 *
 */
eBias_Polarity BO_GetBiasPolarity()
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
	return eBiasPolarity;
 8003bd0:	4b03      	ldr	r3, [pc, #12]	; (8003be0 <BO_GetBiasPolarity+0x14>)
 8003bd2:	781b      	ldrb	r3, [r3, #0]
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	20000008 	.word	0x20000008

08003be4 <BO_GetDcBiasEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t BO_GetDcBiasEncoderValue()
{
 8003be4:	b480      	push	{r7}
 8003be6:	af00      	add	r7, sp, #0
	return dc_bias_encoder_value;
 8003be8:	4b03      	ldr	r3, [pc, #12]	; (8003bf8 <BO_GetDcBiasEncoderValue+0x14>)
 8003bea:	881b      	ldrh	r3, [r3, #0]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	2000000a 	.word	0x2000000a

08003bfc <BO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void BO_ModifyOutput(uint16_t pEncoderValue)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	80fb      	strh	r3, [r7, #6]
	// pEncoderValue is reversed for correct rotary encoder operation.
	// However, we want to retain the forward direction value to prevent polarity flip!
	dc_bias_encoder_value = SM_GetEncoderValue(ENCODER_FORWARD);
 8003c06:	2000      	movs	r0, #0
 8003c08:	f000 fd5a 	bl	80046c0 <SM_GetEncoderValue>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	461a      	mov	r2, r3
 8003c10:	4b1b      	ldr	r3, [pc, #108]	; (8003c80 <BO_ModifyOutput+0x84>)
 8003c12:	801a      	strh	r2, [r3, #0]

	// apply negative dc bias
	if(pEncoderValue < BIAS_CENTER) {
 8003c14:	88fb      	ldrh	r3, [r7, #6]
 8003c16:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003c1a:	d214      	bcs.n	8003c46 <BO_ModifyOutput+0x4a>

		eBiasPolarity = INVERSEBIAS;
 8003c1c:	4b19      	ldr	r3, [pc, #100]	; (8003c84 <BO_ModifyOutput+0x88>)
 8003c1e:	2200      	movs	r2, #0
 8003c20:	701a      	strb	r2, [r3, #0]


		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((BIAS_CENTER - pEncoderValue) * BIAS_MAG));
 8003c22:	88fb      	ldrh	r3, [r7, #6]
 8003c24:	f5c3 72c8 	rsb	r2, r3, #400	; 0x190
 8003c28:	4613      	mov	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	4413      	add	r3, r2
 8003c2e:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8003c30:	2200      	movs	r2, #0
 8003c32:	2110      	movs	r1, #16
 8003c34:	4814      	ldr	r0, [pc, #80]	; (8003c88 <BO_ModifyOutput+0x8c>)
 8003c36:	f005 fc65 	bl	8009504 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	2108      	movs	r1, #8
 8003c3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c42:	f006 fb35 	bl	800a2b0 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_SET);
	}
	// apply positive dc bias
	if(pEncoderValue >= BIAS_CENTER) {
 8003c46:	88fb      	ldrh	r3, [r7, #6]
 8003c48:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8003c4c:	d314      	bcc.n	8003c78 <BO_ModifyOutput+0x7c>

		eBiasPolarity = NORMALBIAS;
 8003c4e:	4b0d      	ldr	r3, [pc, #52]	; (8003c84 <BO_ModifyOutput+0x88>)
 8003c50:	2201      	movs	r2, #1
 8003c52:	701a      	strb	r2, [r3, #0]
		//TIM1->CNT = pEncoderValue;

		HAL_DAC_SetValue(	&hdac1,
							DAC1_CHANNEL_2,
							DAC_ALIGN_12B_R,
							((pEncoderValue - BIAS_CENTER) * BIAS_MAG));
 8003c54:	88fb      	ldrh	r3, [r7, #6]
 8003c56:	f5a3 72c8 	sub.w	r2, r3, #400	; 0x190
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	009b      	lsls	r3, r3, #2
 8003c5e:	4413      	add	r3, r2
 8003c60:	005b      	lsls	r3, r3, #1
		HAL_DAC_SetValue(	&hdac1,
 8003c62:	2200      	movs	r2, #0
 8003c64:	2110      	movs	r1, #16
 8003c66:	4808      	ldr	r0, [pc, #32]	; (8003c88 <BO_ModifyOutput+0x8c>)
 8003c68:	f005 fc4c 	bl	8009504 <HAL_DAC_SetValue>

		HAL_GPIO_WritePin(	DCBIAS_INVERT_GPIO_Port,
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	2108      	movs	r1, #8
 8003c70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c74:	f006 fb1c 	bl	800a2b0 <HAL_GPIO_WritePin>
							DCBIAS_INVERT_Pin,
							GPIO_PIN_RESET);
	}
}
 8003c78:	bf00      	nop
 8003c7a:	3708      	adds	r7, #8
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	2000000a 	.word	0x2000000a
 8003c84:	20000008 	.word	0x20000008
 8003c88:	200025f8 	.word	0x200025f8

08003c8c <BO_GetOutputBias>:
 *	@param None
 *	@retval None
 *
 */
uint32_t BO_GetOutputBias()
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
	return HAL_DAC_GetValue(&hdac1, DAC1_CHANNEL_2);
 8003c90:	2110      	movs	r1, #16
 8003c92:	4803      	ldr	r0, [pc, #12]	; (8003ca0 <BO_GetOutputBias+0x14>)
 8003c94:	f005 fc72 	bl	800957c <HAL_DAC_GetValue>
 8003c98:	4603      	mov	r3, r0
}
 8003c9a:	4618      	mov	r0, r3
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	200025f8 	.word	0x200025f8

08003ca4 <DT_InitRegister>:
 *	@param None
 *	@retval None
 *
 */
void DT_InitRegister()
{
 8003ca4:	b480      	push	{r7}
 8003ca6:	b083      	sub	sp, #12
 8003ca8:	af00      	add	r7, sp, #0
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8003caa:	2300      	movs	r3, #0
 8003cac:	607b      	str	r3, [r7, #4]
 8003cae:	e06b      	b.n	8003d88 <DT_InitRegister+0xe4>
	{
		// prevent divide by zero (prescaler)
		if(DacTimerReg[i].psc == 0)
 8003cb0:	493a      	ldr	r1, [pc, #232]	; (8003d9c <DT_InitRegister+0xf8>)
 8003cb2:	687a      	ldr	r2, [r7, #4]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	009b      	lsls	r3, r3, #2
 8003cb8:	4413      	add	r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	440b      	add	r3, r1
 8003cbe:	3308      	adds	r3, #8
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d129      	bne.n	8003d1a <DT_InitRegister+0x76>
			DacTimerReg[i].arr = ((SM_MCLK / DacTimerReg[i].hertz) / SM_FSAMP) * DacTimerReg[i].error;
 8003cc6:	4935      	ldr	r1, [pc, #212]	; (8003d9c <DT_InitRegister+0xf8>)
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	4413      	add	r3, r2
 8003cd0:	009b      	lsls	r3, r3, #2
 8003cd2:	440b      	add	r3, r1
 8003cd4:	3304      	adds	r3, #4
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a31      	ldr	r2, [pc, #196]	; (8003da0 <DT_InitRegister+0xfc>)
 8003cda:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cde:	ee07 3a90 	vmov	s15, r3
 8003ce2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003ce6:	492d      	ldr	r1, [pc, #180]	; (8003d9c <DT_InitRegister+0xf8>)
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	009b      	lsls	r3, r3, #2
 8003cee:	4413      	add	r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	3310      	adds	r3, #16
 8003cf6:	edd3 7a00 	vldr	s15, [r3]
 8003cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cfe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d02:	ee17 0a90 	vmov	r0, s15
 8003d06:	4925      	ldr	r1, [pc, #148]	; (8003d9c <DT_InitRegister+0xf8>)
 8003d08:	687a      	ldr	r2, [r7, #4]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4413      	add	r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	440b      	add	r3, r1
 8003d14:	330c      	adds	r3, #12
 8003d16:	6018      	str	r0, [r3, #0]
 8003d18:	e033      	b.n	8003d82 <DT_InitRegister+0xde>
		else
			DacTimerReg[i].arr = (((SM_MCLK / DacTimerReg[i].hertz) / DacTimerReg[i].psc) / SM_FSAMP) * DacTimerReg[i].error;
 8003d1a:	4920      	ldr	r1, [pc, #128]	; (8003d9c <DT_InitRegister+0xf8>)
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	4613      	mov	r3, r2
 8003d20:	009b      	lsls	r3, r3, #2
 8003d22:	4413      	add	r3, r2
 8003d24:	009b      	lsls	r3, r3, #2
 8003d26:	440b      	add	r3, r1
 8003d28:	3304      	adds	r3, #4
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a1c      	ldr	r2, [pc, #112]	; (8003da0 <DT_InitRegister+0xfc>)
 8003d2e:	fbb2 f1f3 	udiv	r1, r2, r3
 8003d32:	481a      	ldr	r0, [pc, #104]	; (8003d9c <DT_InitRegister+0xf8>)
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4403      	add	r3, r0
 8003d40:	3308      	adds	r3, #8
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d48:	ee07 3a90 	vmov	s15, r3
 8003d4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003d50:	4912      	ldr	r1, [pc, #72]	; (8003d9c <DT_InitRegister+0xf8>)
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	4613      	mov	r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	4413      	add	r3, r2
 8003d5a:	009b      	lsls	r3, r3, #2
 8003d5c:	440b      	add	r3, r1
 8003d5e:	3310      	adds	r3, #16
 8003d60:	edd3 7a00 	vldr	s15, [r3]
 8003d64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d6c:	ee17 0a90 	vmov	r0, s15
 8003d70:	490a      	ldr	r1, [pc, #40]	; (8003d9c <DT_InitRegister+0xf8>)
 8003d72:	687a      	ldr	r2, [r7, #4]
 8003d74:	4613      	mov	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	009b      	lsls	r3, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	330c      	adds	r3, #12
 8003d80:	6018      	str	r0, [r3, #0]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	3301      	adds	r3, #1
 8003d86:	607b      	str	r3, [r7, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b0d      	cmp	r3, #13
 8003d8c:	dd90      	ble.n	8003cb0 <DT_InitRegister+0xc>
	}
}
 8003d8e:	bf00      	nop
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	2000000c 	.word	0x2000000c
 8003da0:	00155cc0 	.word	0x00155cc0

08003da4 <DT_GetRegisterByEnum>:
 *	@param pEnum Enummeration (eFreq_Preset) search criteria. Not an index
 *	@retval Pointer to the found DacTimeReg_t struct. Null if no result!
 *
 */
DacTimeReg_t* DT_GetRegisterByEnum(eFreq_Preset pEnum)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8003dac:	2300      	movs	r3, #0
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	e016      	b.n	8003de0 <DT_GetRegisterByEnum+0x3c>
		if(DacTimerReg[i].hertz == pEnum)
 8003db2:	4910      	ldr	r1, [pc, #64]	; (8003df4 <DT_GetRegisterByEnum+0x50>)
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	4613      	mov	r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	4413      	add	r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	440b      	add	r3, r1
 8003dc0:	3304      	adds	r3, #4
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d107      	bne.n	8003dda <DT_GetRegisterByEnum+0x36>
			return &DacTimerReg[i];
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4413      	add	r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	4a07      	ldr	r2, [pc, #28]	; (8003df4 <DT_GetRegisterByEnum+0x50>)
 8003dd6:	4413      	add	r3, r2
 8003dd8:	e006      	b.n	8003de8 <DT_GetRegisterByEnum+0x44>
	for(int i = 0; i < MAX_DAC_TIMER_SETTINGS; i++)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	3301      	adds	r3, #1
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2b0d      	cmp	r3, #13
 8003de4:	dde5      	ble.n	8003db2 <DT_GetRegisterByEnum+0xe>

	return 0;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3714      	adds	r7, #20
 8003dec:	46bd      	mov	sp, r7
 8003dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df2:	4770      	bx	lr
 8003df4:	2000000c 	.word	0x2000000c

08003df8 <FreqO_AdjustFreq>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_AdjustFreq()
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	af00      	add	r7, sp, #0
		//TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_HIFREQ_MAG;
		TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD); //* FREQ_ENCODER_MIDFREQ_MAG;
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	f000 fc5f 	bl	80046c0 <SM_GetEncoderValue>
 8003e02:	4603      	mov	r3, r0
 8003e04:	461a      	mov	r2, r3
 8003e06:	4b02      	ldr	r3, [pc, #8]	; (8003e10 <FreqO_AdjustFreq+0x18>)
 8003e08:	62da      	str	r2, [r3, #44]	; 0x2c
		//TIM8->ARR = SM_GetEncoderValue(ENCODER_FORWARD) * FREQ_ENCODER_LOFREQ_MAG;
}
 8003e0a:	bf00      	nop
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	40013400 	.word	0x40013400

08003e14 <FreqO_ModifyOutput>:
 *	@param None
 *	@retval None
 *
 */
void FreqO_ModifyOutput(uint16_t pEncValue)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	80fb      	strh	r3, [r7, #6]

	switch(pEncValue)
 8003e1e:	88fb      	ldrh	r3, [r7, #6]
 8003e20:	2b38      	cmp	r3, #56	; 0x38
 8003e22:	f200 80b4 	bhi.w	8003f8e <FreqO_ModifyOutput+0x17a>
 8003e26:	a201      	add	r2, pc, #4	; (adr r2, 8003e2c <FreqO_ModifyOutput+0x18>)
 8003e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e2c:	08003f11 	.word	0x08003f11
 8003e30:	08003f11 	.word	0x08003f11
 8003e34:	08003f11 	.word	0x08003f11
 8003e38:	08003f11 	.word	0x08003f11
 8003e3c:	08003f19 	.word	0x08003f19
 8003e40:	08003f19 	.word	0x08003f19
 8003e44:	08003f19 	.word	0x08003f19
 8003e48:	08003f19 	.word	0x08003f19
 8003e4c:	08003f21 	.word	0x08003f21
 8003e50:	08003f21 	.word	0x08003f21
 8003e54:	08003f21 	.word	0x08003f21
 8003e58:	08003f21 	.word	0x08003f21
 8003e5c:	08003f29 	.word	0x08003f29
 8003e60:	08003f29 	.word	0x08003f29
 8003e64:	08003f29 	.word	0x08003f29
 8003e68:	08003f29 	.word	0x08003f29
 8003e6c:	08003f31 	.word	0x08003f31
 8003e70:	08003f31 	.word	0x08003f31
 8003e74:	08003f31 	.word	0x08003f31
 8003e78:	08003f31 	.word	0x08003f31
 8003e7c:	08003f39 	.word	0x08003f39
 8003e80:	08003f39 	.word	0x08003f39
 8003e84:	08003f39 	.word	0x08003f39
 8003e88:	08003f39 	.word	0x08003f39
 8003e8c:	08003f43 	.word	0x08003f43
 8003e90:	08003f43 	.word	0x08003f43
 8003e94:	08003f43 	.word	0x08003f43
 8003e98:	08003f43 	.word	0x08003f43
 8003e9c:	08003f4d 	.word	0x08003f4d
 8003ea0:	08003f4d 	.word	0x08003f4d
 8003ea4:	08003f4d 	.word	0x08003f4d
 8003ea8:	08003f8f 	.word	0x08003f8f
 8003eac:	08003f4d 	.word	0x08003f4d
 8003eb0:	08003f57 	.word	0x08003f57
 8003eb4:	08003f57 	.word	0x08003f57
 8003eb8:	08003f57 	.word	0x08003f57
 8003ebc:	08003f57 	.word	0x08003f57
 8003ec0:	08003f61 	.word	0x08003f61
 8003ec4:	08003f61 	.word	0x08003f61
 8003ec8:	08003f61 	.word	0x08003f61
 8003ecc:	08003f61 	.word	0x08003f61
 8003ed0:	08003f6b 	.word	0x08003f6b
 8003ed4:	08003f6b 	.word	0x08003f6b
 8003ed8:	08003f6b 	.word	0x08003f6b
 8003edc:	08003f6b 	.word	0x08003f6b
 8003ee0:	08003f75 	.word	0x08003f75
 8003ee4:	08003f75 	.word	0x08003f75
 8003ee8:	08003f75 	.word	0x08003f75
 8003eec:	08003f75 	.word	0x08003f75
 8003ef0:	08003f7f 	.word	0x08003f7f
 8003ef4:	08003f7f 	.word	0x08003f7f
 8003ef8:	08003f7f 	.word	0x08003f7f
 8003efc:	08003f7f 	.word	0x08003f7f
 8003f00:	08003f87 	.word	0x08003f87
 8003f04:	08003f87 	.word	0x08003f87
 8003f08:	08003f87 	.word	0x08003f87
 8003f0c:	08003f87 	.word	0x08003f87
	{
		case 0:
		case 1:
		case 2:
		case 3:
			FreqO_ApplyPreset(FPRESET_1HZ);
 8003f10:	2001      	movs	r0, #1
 8003f12:	f000 f845 	bl	8003fa0 <FreqO_ApplyPreset>
			break;
 8003f16:	e03a      	b.n	8003f8e <FreqO_ModifyOutput+0x17a>
		case 4:
		case 5:
		case 6:
		case 7:
			FreqO_ApplyPreset(FPRESET_10HZ);
 8003f18:	200a      	movs	r0, #10
 8003f1a:	f000 f841 	bl	8003fa0 <FreqO_ApplyPreset>
			break;
 8003f1e:	e036      	b.n	8003f8e <FreqO_ModifyOutput+0x17a>
		case 8:
		case 9:
		case 10:
		case 11:
			FreqO_ApplyPreset(FPRESET_50HZ);
 8003f20:	2032      	movs	r0, #50	; 0x32
 8003f22:	f000 f83d 	bl	8003fa0 <FreqO_ApplyPreset>
			break;
 8003f26:	e032      	b.n	8003f8e <FreqO_ModifyOutput+0x17a>
		case 12:
		case 13:
		case 14:
		case 15:
			FreqO_ApplyPreset(FPRESET_100HZ);
 8003f28:	2064      	movs	r0, #100	; 0x64
 8003f2a:	f000 f839 	bl	8003fa0 <FreqO_ApplyPreset>
			break;
 8003f2e:	e02e      	b.n	8003f8e <FreqO_ModifyOutput+0x17a>
		case 16:
		case 17:
		case 18:
		case 19:
			FreqO_ApplyPreset(FPRESET_250HZ);
 8003f30:	20fa      	movs	r0, #250	; 0xfa
 8003f32:	f000 f835 	bl	8003fa0 <FreqO_ApplyPreset>
			break;
 8003f36:	e02a      	b.n	8003f8e <FreqO_ModifyOutput+0x17a>
		case 20:
		case 21:
		case 22:
		case 23:
			FreqO_ApplyPreset(FPRESET_500HZ);
 8003f38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003f3c:	f000 f830 	bl	8003fa0 <FreqO_ApplyPreset>
			break;
 8003f40:	e025      	b.n	8003f8e <FreqO_ModifyOutput+0x17a>
		case 24:
		case 25:
		case 26:
		case 27:
			FreqO_ApplyPreset(FPRESET_750HZ);
 8003f42:	f240 20ee 	movw	r0, #750	; 0x2ee
 8003f46:	f000 f82b 	bl	8003fa0 <FreqO_ApplyPreset>
			break;
 8003f4a:	e020      	b.n	8003f8e <FreqO_ModifyOutput+0x17a>
		case 28:
		case 29:
		case 30:
		case 32:
			FreqO_ApplyPreset(FPRESET_1KHZ);
 8003f4c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003f50:	f000 f826 	bl	8003fa0 <FreqO_ApplyPreset>
			break;
 8003f54:	e01b      	b.n	8003f8e <FreqO_ModifyOutput+0x17a>
		case 33:
		case 34:
		case 35:
		case 36:
			FreqO_ApplyPreset(FPRESET_5KHZ);
 8003f56:	f241 3088 	movw	r0, #5000	; 0x1388
 8003f5a:	f000 f821 	bl	8003fa0 <FreqO_ApplyPreset>
			break;
 8003f5e:	e016      	b.n	8003f8e <FreqO_ModifyOutput+0x17a>
		case 37:
		case 38:
		case 39:
		case 40:
			FreqO_ApplyPreset(FPRESET_10KHZ);
 8003f60:	f242 7010 	movw	r0, #10000	; 0x2710
 8003f64:	f000 f81c 	bl	8003fa0 <FreqO_ApplyPreset>
			break;
 8003f68:	e011      	b.n	8003f8e <FreqO_ModifyOutput+0x17a>
		case 41:
		case 42:
		case 43:
		case 44:
			FreqO_ApplyPreset(FPRESET_25KHZ);
 8003f6a:	f246 10a8 	movw	r0, #25000	; 0x61a8
 8003f6e:	f000 f817 	bl	8003fa0 <FreqO_ApplyPreset>
			break;
 8003f72:	e00c      	b.n	8003f8e <FreqO_ModifyOutput+0x17a>
		case 45:
		case 46:
		case 47:
		case 48:
			FreqO_ApplyPreset(FPRESET_50KHZ);
 8003f74:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003f78:	f000 f812 	bl	8003fa0 <FreqO_ApplyPreset>
			break;
 8003f7c:	e007      	b.n	8003f8e <FreqO_ModifyOutput+0x17a>
		case 49:
		case 50:
		case 51:
		case 52:
			FreqO_ApplyPreset(FPRESET_75KHZ);
 8003f7e:	4806      	ldr	r0, [pc, #24]	; (8003f98 <FreqO_ModifyOutput+0x184>)
 8003f80:	f000 f80e 	bl	8003fa0 <FreqO_ApplyPreset>
			break;
 8003f84:	e003      	b.n	8003f8e <FreqO_ModifyOutput+0x17a>
		case 53:
		case 54:
		case 55:
		case 56:
			FreqO_ApplyPreset(FPRESET_100KHZ);
 8003f86:	4805      	ldr	r0, [pc, #20]	; (8003f9c <FreqO_ModifyOutput+0x188>)
 8003f88:	f000 f80a 	bl	8003fa0 <FreqO_ApplyPreset>
			break;
 8003f8c:	bf00      	nop
	}

}
 8003f8e:	bf00      	nop
 8003f90:	3708      	adds	r7, #8
 8003f92:	46bd      	mov	sp, r7
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	bf00      	nop
 8003f98:	000124f8 	.word	0x000124f8
 8003f9c:	000186a0 	.word	0x000186a0

08003fa0 <FreqO_ApplyPreset>:

 *	@retval None
 *
 */
void FreqO_ApplyPreset(eFreq_Preset pPresetEnum)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
	DacTimeReg_t* tmp = DT_GetRegisterByEnum(pPresetEnum);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7ff fefb 	bl	8003da4 <DT_GetRegisterByEnum>
 8003fae:	60f8      	str	r0, [r7, #12]
	if(tmp)
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d015      	beq.n	8003fe2 <FreqO_ApplyPreset+0x42>
	{
		TIM8->PSC = tmp->psc;
 8003fb6:	4a0d      	ldr	r2, [pc, #52]	; (8003fec <FreqO_ApplyPreset+0x4c>)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	6293      	str	r3, [r2, #40]	; 0x28
		TIM8->ARR = tmp->arr;
 8003fbe:	4a0b      	ldr	r2, [pc, #44]	; (8003fec <FreqO_ApplyPreset+0x4c>)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	62d3      	str	r3, [r2, #44]	; 0x2c
		//eNewFreqPreset = pPresetEnum;
		Freq_Preset_Encoder_Pos_t * tmp = FreqO_FindFPresetObject(pPresetEnum);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f822 	bl	8004010 <FreqO_FindFPresetObject>
 8003fcc:	60b8      	str	r0, [r7, #8]
		if(tmp)
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d003      	beq.n	8003fdc <FreqO_ApplyPreset+0x3c>
		{
			pNewFreqPresetEncoderPos = tmp;
 8003fd4:	4a06      	ldr	r2, [pc, #24]	; (8003ff0 <FreqO_ApplyPreset+0x50>)
 8003fd6:	68bb      	ldr	r3, [r7, #8]
 8003fd8:	6013      	str	r3, [r2, #0]
		{
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
		}

	}
}
 8003fda:	e002      	b.n	8003fe2 <FreqO_ApplyPreset+0x42>
			DM_SetErrorDebugMsg("FreqO_ApplyPreset() null pointer error");
 8003fdc:	4805      	ldr	r0, [pc, #20]	; (8003ff4 <FreqO_ApplyPreset+0x54>)
 8003fde:	f7fd f947 	bl	8001270 <DM_SetErrorDebugMsg>
}
 8003fe2:	bf00      	nop
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	40013400 	.word	0x40013400
 8003ff0:	20000198 	.word	0x20000198
 8003ff4:	08010914 	.word	0x08010914

08003ff8 <FreqO_GetFPresetObject>:
 *	@param None
 *	@retval pointer to Freq_Preset_Encoder_Pos_t struct
 *
 */
Freq_Preset_Encoder_Pos_t * FreqO_GetFPresetObject()
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	af00      	add	r7, sp, #0
	return pNewFreqPresetEncoderPos;
 8003ffc:	4b03      	ldr	r3, [pc, #12]	; (800400c <FreqO_GetFPresetObject+0x14>)
 8003ffe:	681b      	ldr	r3, [r3, #0]
}
 8004000:	4618      	mov	r0, r3
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	20000198 	.word	0x20000198

08004010 <FreqO_FindFPresetObject>:

 *	@retval pointer to Freq_Preset_Encoder_Pos_t struct
 *
 */
Freq_Preset_Encoder_Pos_t * FreqO_FindFPresetObject(eFreq_Preset pEnum)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8004018:	2300      	movs	r3, #0
 800401a:	60fb      	str	r3, [r7, #12]
 800401c:	e00e      	b.n	800403c <FreqO_FindFPresetObject+0x2c>
	{
		if(aFreqPresetEncoderPos[i].hertz == pEnum)
 800401e:	4a0d      	ldr	r2, [pc, #52]	; (8004054 <FreqO_FindFPresetObject+0x44>)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004026:	687a      	ldr	r2, [r7, #4]
 8004028:	429a      	cmp	r2, r3
 800402a:	d104      	bne.n	8004036 <FreqO_FindFPresetObject+0x26>
		{
			return &aFreqPresetEncoderPos[i];
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	00db      	lsls	r3, r3, #3
 8004030:	4a08      	ldr	r2, [pc, #32]	; (8004054 <FreqO_FindFPresetObject+0x44>)
 8004032:	4413      	add	r3, r2
 8004034:	e009      	b.n	800404a <FreqO_FindFPresetObject+0x3a>
	for(int i = 0; i < MAX_NUM_FREQ_PRESETS; i++ )
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	3301      	adds	r3, #1
 800403a:	60fb      	str	r3, [r7, #12]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2b0d      	cmp	r3, #13
 8004040:	dded      	ble.n	800401e <FreqO_FindFPresetObject+0xe>
		}
	}
	// error!
	DM_SetErrorDebugMsg("FreqO_FindFPresetObject(): no FPreset obj found");
 8004042:	4805      	ldr	r0, [pc, #20]	; (8004058 <FreqO_FindFPresetObject+0x48>)
 8004044:	f7fd f914 	bl	8001270 <DM_SetErrorDebugMsg>
	return 0;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	20000128 	.word	0x20000128
 8004058:	0801093c 	.word	0x0801093c

0800405c <FreqO_GetFreqPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FreqO_GetFreqPresetEncoderRange()
{
 800405c:	b480      	push	{r7}
 800405e:	af00      	add	r7, sp, #0
	return FreqPresetEncoderRange;
 8004060:	4b03      	ldr	r3, [pc, #12]	; (8004070 <FreqO_GetFreqPresetEncoderRange+0x14>)
 8004062:	781b      	ldrb	r3, [r3, #0]
}
 8004064:	4618      	mov	r0, r3
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr
 800406e:	bf00      	nop
 8004070:	20000124 	.word	0x20000124

08004074 <FreqO_GetOutputFreq>:
 *	@param None
 *	@retval uint32_t
 *
 */
uint32_t FreqO_GetOutputFreq()
{
 8004074:	b480      	push	{r7}
 8004076:	af00      	add	r7, sp, #0
	return TIM8->ARR;
 8004078:	4b03      	ldr	r3, [pc, #12]	; (8004088 <FreqO_GetOutputFreq+0x14>)
 800407a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
}
 800407c:	4618      	mov	r0, r3
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	40013400 	.word	0x40013400

0800408c <FuncO_Init>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_Init()
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
		aProcessedSignalDataTable[i] = sine_data_table_3600[i];

	for(int i = 0; i < SINE_DATA_SIZE; i++)
		aProcessedSyncDataTable[i] = sine_data_table_3600[i];
		*/
}
 8004090:	bf00      	nop
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
	...

0800409c <FuncO_ModifySignalOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_ModifySignalOutput(uint16_t pEncoderValue)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	4603      	mov	r3, r0
 80040a4:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 80040a6:	88fb      	ldrh	r3, [r7, #6]
 80040a8:	2b17      	cmp	r3, #23
 80040aa:	d84b      	bhi.n	8004144 <FuncO_ModifySignalOutput+0xa8>
 80040ac:	a201      	add	r2, pc, #4	; (adr r2, 80040b4 <FuncO_ModifySignalOutput+0x18>)
 80040ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b2:	bf00      	nop
 80040b4:	08004115 	.word	0x08004115
 80040b8:	08004115 	.word	0x08004115
 80040bc:	08004115 	.word	0x08004115
 80040c0:	0800411d 	.word	0x0800411d
 80040c4:	0800411d 	.word	0x0800411d
 80040c8:	0800411d 	.word	0x0800411d
 80040cc:	0800411d 	.word	0x0800411d
 80040d0:	08004125 	.word	0x08004125
 80040d4:	08004125 	.word	0x08004125
 80040d8:	08004125 	.word	0x08004125
 80040dc:	08004125 	.word	0x08004125
 80040e0:	0800412d 	.word	0x0800412d
 80040e4:	0800412d 	.word	0x0800412d
 80040e8:	0800412d 	.word	0x0800412d
 80040ec:	0800412d 	.word	0x0800412d
 80040f0:	08004135 	.word	0x08004135
 80040f4:	08004135 	.word	0x08004135
 80040f8:	08004135 	.word	0x08004135
 80040fc:	08004135 	.word	0x08004135
 8004100:	0800413d 	.word	0x0800413d
 8004104:	0800413d 	.word	0x0800413d
 8004108:	0800413d 	.word	0x0800413d
 800410c:	0800413d 	.word	0x0800413d
 8004110:	0800413d 	.word	0x0800413d
	{
		case 0: case 1: case 2:
			FuncO_ApplyPresetToSignal(SINE_FUNC_MODE);
 8004114:	2000      	movs	r0, #0
 8004116:	f000 f871 	bl	80041fc <FuncO_ApplyPresetToSignal>
			break;
 800411a:	e013      	b.n	8004144 <FuncO_ModifySignalOutput+0xa8>

		case 3: case 4: case 5: case 6:
			FuncO_ApplyPresetToSignal(SQUARE_FUNC_MODE);
 800411c:	2001      	movs	r0, #1
 800411e:	f000 f86d 	bl	80041fc <FuncO_ApplyPresetToSignal>
			break;
 8004122:	e00f      	b.n	8004144 <FuncO_ModifySignalOutput+0xa8>

		case 7: case 8: case 9: case 10:
			FuncO_ApplyPresetToSignal(SAW_FUNC_MODE);
 8004124:	2002      	movs	r0, #2
 8004126:	f000 f869 	bl	80041fc <FuncO_ApplyPresetToSignal>
			break;
 800412a:	e00b      	b.n	8004144 <FuncO_ModifySignalOutput+0xa8>

		case 11: case 12: case 13: case 14:
			FuncO_ApplyPresetToSignal(REV_SAW_FUNC_MODE);
 800412c:	2003      	movs	r0, #3
 800412e:	f000 f865 	bl	80041fc <FuncO_ApplyPresetToSignal>
			break;
 8004132:	e007      	b.n	8004144 <FuncO_ModifySignalOutput+0xa8>

		case 15: case 16: case 17: case 18:
			FuncO_ApplyPresetToSignal(TRIANGLE_FUNC_MODE);
 8004134:	2004      	movs	r0, #4
 8004136:	f000 f861 	bl	80041fc <FuncO_ApplyPresetToSignal>
			break;
 800413a:	e003      	b.n	8004144 <FuncO_ModifySignalOutput+0xa8>

		case 19: case 20: case 21: case 22: case 23:
			FuncO_ApplyPresetToSignal(IMPULSE_FUNC_MODE);
 800413c:	2005      	movs	r0, #5
 800413e:	f000 f85d 	bl	80041fc <FuncO_ApplyPresetToSignal>
			break;
 8004142:	bf00      	nop

	}
}
 8004144:	bf00      	nop
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <FuncO_ModifySyncOutput>:
 *	@param pEncoderValue rotary encoder value
 *	@retval None
 *
 */
void FuncO_ModifySyncOutput(uint16_t pEncoderValue)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	4603      	mov	r3, r0
 8004154:	80fb      	strh	r3, [r7, #6]


	switch(pEncoderValue)
 8004156:	88fb      	ldrh	r3, [r7, #6]
 8004158:	2b17      	cmp	r3, #23
 800415a:	d84b      	bhi.n	80041f4 <FuncO_ModifySyncOutput+0xa8>
 800415c:	a201      	add	r2, pc, #4	; (adr r2, 8004164 <FuncO_ModifySyncOutput+0x18>)
 800415e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004162:	bf00      	nop
 8004164:	080041c5 	.word	0x080041c5
 8004168:	080041c5 	.word	0x080041c5
 800416c:	080041c5 	.word	0x080041c5
 8004170:	080041cd 	.word	0x080041cd
 8004174:	080041cd 	.word	0x080041cd
 8004178:	080041cd 	.word	0x080041cd
 800417c:	080041cd 	.word	0x080041cd
 8004180:	080041d5 	.word	0x080041d5
 8004184:	080041d5 	.word	0x080041d5
 8004188:	080041d5 	.word	0x080041d5
 800418c:	080041d5 	.word	0x080041d5
 8004190:	080041dd 	.word	0x080041dd
 8004194:	080041dd 	.word	0x080041dd
 8004198:	080041dd 	.word	0x080041dd
 800419c:	080041dd 	.word	0x080041dd
 80041a0:	080041e5 	.word	0x080041e5
 80041a4:	080041e5 	.word	0x080041e5
 80041a8:	080041e5 	.word	0x080041e5
 80041ac:	080041e5 	.word	0x080041e5
 80041b0:	080041ed 	.word	0x080041ed
 80041b4:	080041ed 	.word	0x080041ed
 80041b8:	080041ed 	.word	0x080041ed
 80041bc:	080041ed 	.word	0x080041ed
 80041c0:	080041ed 	.word	0x080041ed
	{
		case 0: case 1: case 2:
			FuncO_ApplyPresetToSync(SINE_FUNC_MODE);
 80041c4:	2000      	movs	r0, #0
 80041c6:	f000 f857 	bl	8004278 <FuncO_ApplyPresetToSync>
			break;
 80041ca:	e013      	b.n	80041f4 <FuncO_ModifySyncOutput+0xa8>

		case 3: case 4: case 5: case 6:
			FuncO_ApplyPresetToSync(SQUARE_FUNC_MODE);
 80041cc:	2001      	movs	r0, #1
 80041ce:	f000 f853 	bl	8004278 <FuncO_ApplyPresetToSync>
			break;
 80041d2:	e00f      	b.n	80041f4 <FuncO_ModifySyncOutput+0xa8>

		case 7: case 8: case 9: case 10:
			FuncO_ApplyPresetToSync(SAW_FUNC_MODE);
 80041d4:	2002      	movs	r0, #2
 80041d6:	f000 f84f 	bl	8004278 <FuncO_ApplyPresetToSync>
			break;
 80041da:	e00b      	b.n	80041f4 <FuncO_ModifySyncOutput+0xa8>

		case 11: case 12: case 13: case 14:
			FuncO_ApplyPresetToSync(REV_SAW_FUNC_MODE);
 80041dc:	2003      	movs	r0, #3
 80041de:	f000 f84b 	bl	8004278 <FuncO_ApplyPresetToSync>
			break;
 80041e2:	e007      	b.n	80041f4 <FuncO_ModifySyncOutput+0xa8>

		case 15: case 16: case 17: case 18:
			FuncO_ApplyPresetToSync(TRIANGLE_FUNC_MODE);
 80041e4:	2004      	movs	r0, #4
 80041e6:	f000 f847 	bl	8004278 <FuncO_ApplyPresetToSync>
			break;
 80041ea:	e003      	b.n	80041f4 <FuncO_ModifySyncOutput+0xa8>

		case 19: case 20: case 21: case 22: case 23:
			FuncO_ApplyPresetToSync(IMPULSE_FUNC_MODE);
 80041ec:	2005      	movs	r0, #5
 80041ee:	f000 f843 	bl	8004278 <FuncO_ApplyPresetToSync>
			break;
 80041f2:	bf00      	nop

	}
}
 80041f4:	bf00      	nop
 80041f6:	3708      	adds	r7, #8
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}

080041fc <FuncO_ApplyPresetToSignal>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSignal(eOutput_mode pPresetEnum)
{
 80041fc:	b590      	push	{r4, r7, lr}
 80041fe:	b087      	sub	sp, #28
 8004200:	af02      	add	r7, sp, #8
 8004202:	4603      	mov	r3, r0
 8004204:	71fb      	strb	r3, [r7, #7]

	// copy the lookup table for the next output function in to SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data = aFuncPresetEncoderPos[pPresetEnum].lookup_table_data;
 8004206:	79fc      	ldrb	r4, [r7, #7]
 8004208:	2000      	movs	r0, #0
 800420a:	f000 fa43 	bl	8004694 <SM_GetOutputChannel>
 800420e:	4601      	mov	r1, r0
 8004210:	4a17      	ldr	r2, [pc, #92]	; (8004270 <FuncO_ApplyPresetToSignal+0x74>)
 8004212:	00e3      	lsls	r3, r4, #3
 8004214:	4413      	add	r3, r2
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	604b      	str	r3, [r1, #4]

	// set preset for PGA gain and dsp amplitude adjustment
	eVppPreset_t eTmpVppPreset = SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile->Vpp_literal;
 800421a:	2000      	movs	r0, #0
 800421c:	f000 fa3a 	bl	8004694 <SM_GetOutputChannel>
 8004220:	4603      	mov	r3, r0
 8004222:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyPresetToSignal(eTmpVppPreset);
 800422a:	7bfb      	ldrb	r3, [r7, #15]
 800422c:	4618      	mov	r0, r3
 800422e:	f000 faa7 	bl	8004780 <VPP_ApplyPresetToSignal>

	// set the next function output
	SM_GetOutputChannel(SIGNAL_CHANNEL)->func_profile = &aFuncPresetEncoderPos[pPresetEnum];
 8004232:	79fc      	ldrb	r4, [r7, #7]
 8004234:	2000      	movs	r0, #0
 8004236:	f000 fa2d 	bl	8004694 <SM_GetOutputChannel>
 800423a:	4601      	mov	r1, r0
 800423c:	00e3      	lsls	r3, r4, #3
 800423e:	4a0c      	ldr	r2, [pc, #48]	; (8004270 <FuncO_ApplyPresetToSignal+0x74>)
 8004240:	4413      	add	r3, r2
 8004242:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8004246:	2100      	movs	r1, #0
 8004248:	480a      	ldr	r0, [pc, #40]	; (8004274 <FuncO_ApplyPresetToSignal+0x78>)
 800424a:	f005 f905 	bl	8009458 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 800424e:	2000      	movs	r0, #0
 8004250:	f000 fa20 	bl	8004694 <SM_GetOutputChannel>
 8004254:	4603      	mov	r3, r0
 8004256:	f103 0208 	add.w	r2, r3, #8
 800425a:	2300      	movs	r3, #0
 800425c:	9300      	str	r3, [sp, #0]
 800425e:	2378      	movs	r3, #120	; 0x78
 8004260:	2100      	movs	r1, #0
 8004262:	4804      	ldr	r0, [pc, #16]	; (8004274 <FuncO_ApplyPresetToSignal+0x78>)
 8004264:	f005 f836 	bl	80092d4 <HAL_DAC_Start_DMA>



}
 8004268:	bf00      	nop
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	bd90      	pop	{r4, r7, pc}
 8004270:	200001a0 	.word	0x200001a0
 8004274:	200025f8 	.word	0x200025f8

08004278 <FuncO_ApplyPresetToSync>:

 *	@retval None
 *
 */
void FuncO_ApplyPresetToSync(eOutput_mode pPresetEnum)
{
 8004278:	b590      	push	{r4, r7, lr}
 800427a:	b087      	sub	sp, #28
 800427c:	af02      	add	r7, sp, #8
 800427e:	4603      	mov	r3, r0
 8004280:	71fb      	strb	r3, [r7, #7]
	// copy the lookup table for the next output function in to SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data = aFuncPresetEncoderPos[pPresetEnum].lookup_table_data;
 8004282:	79fc      	ldrb	r4, [r7, #7]
 8004284:	2001      	movs	r0, #1
 8004286:	f000 fa05 	bl	8004694 <SM_GetOutputChannel>
 800428a:	4601      	mov	r1, r0
 800428c:	4a17      	ldr	r2, [pc, #92]	; (80042ec <FuncO_ApplyPresetToSync+0x74>)
 800428e:	00e3      	lsls	r3, r4, #3
 8004290:	4413      	add	r3, r2
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	604b      	str	r3, [r1, #4]

	// set preset PGA gain and dsp amplitude adjustment
	eVppPreset_t eTmpVppPreset = SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile->Vpp_literal;
 8004296:	2001      	movs	r0, #1
 8004298:	f000 f9fc 	bl	8004694 <SM_GetOutputChannel>
 800429c:	4603      	mov	r3, r0
 800429e:	f8d3 31ec 	ldr.w	r3, [r3, #492]	; 0x1ec
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	73fb      	strb	r3, [r7, #15]
	VPP_ApplyPresetToSync(eTmpVppPreset);
 80042a6:	7bfb      	ldrb	r3, [r7, #15]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 fa97 	bl	80047dc <VPP_ApplyPresetToSync>

	// set the next output function
	SM_GetOutputChannel(SYNC_CHANNEL)->func_profile = &aFuncPresetEncoderPos[pPresetEnum];
 80042ae:	79fc      	ldrb	r4, [r7, #7]
 80042b0:	2001      	movs	r0, #1
 80042b2:	f000 f9ef 	bl	8004694 <SM_GetOutputChannel>
 80042b6:	4601      	mov	r1, r0
 80042b8:	00e3      	lsls	r3, r4, #3
 80042ba:	4a0c      	ldr	r2, [pc, #48]	; (80042ec <FuncO_ApplyPresetToSync+0x74>)
 80042bc:	4413      	add	r3, r2
 80042be:	f8c1 31e8 	str.w	r3, [r1, #488]	; 0x1e8

	// restart the DAC with the new data
	HAL_DAC_Stop_DMA(&hdac2, DAC1_CHANNEL_1);
 80042c2:	2100      	movs	r1, #0
 80042c4:	480a      	ldr	r0, [pc, #40]	; (80042f0 <FuncO_ApplyPresetToSync+0x78>)
 80042c6:	f005 f8c7 	bl	8009458 <HAL_DAC_Stop_DMA>
	HAL_DAC_Start_DMA(&hdac2, DAC1_CHANNEL_1, (uint32_t*)SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80042ca:	2001      	movs	r0, #1
 80042cc:	f000 f9e2 	bl	8004694 <SM_GetOutputChannel>
 80042d0:	4603      	mov	r3, r0
 80042d2:	f103 0208 	add.w	r2, r3, #8
 80042d6:	2300      	movs	r3, #0
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	2378      	movs	r3, #120	; 0x78
 80042dc:	2100      	movs	r1, #0
 80042de:	4804      	ldr	r0, [pc, #16]	; (80042f0 <FuncO_ApplyPresetToSync+0x78>)
 80042e0:	f004 fff8 	bl	80092d4 <HAL_DAC_Start_DMA>


}
 80042e4:	bf00      	nop
 80042e6:	3714      	adds	r7, #20
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd90      	pop	{r4, r7, pc}
 80042ec:	200001a0 	.word	0x200001a0
 80042f0:	200025e4 	.word	0x200025e4

080042f4 <FuncO_GetFuncPresetEncoderRange>:
 *	@param None
 *	@retval uint8_t
 *
 */
uint8_t FuncO_GetFuncPresetEncoderRange()
{
 80042f4:	b480      	push	{r7}
 80042f6:	af00      	add	r7, sp, #0
	return FuncPresetEncoderRange;
 80042f8:	4b03      	ldr	r3, [pc, #12]	; (8004308 <FuncO_GetFuncPresetEncoderRange+0x14>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop
 8004308:	2000019c 	.word	0x2000019c

0800430c <GO_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSignal(eOutput_gain pPresetEnum)
{
 800430c:	b590      	push	{r4, r7, lr}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	4603      	mov	r3, r0
 8004314:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SIGNAL_CHANNEL)->gain_profile = &aGainPresetEncoderPos[pPresetEnum];
 8004316:	79fc      	ldrb	r4, [r7, #7]
 8004318:	2000      	movs	r0, #0
 800431a:	f000 f9bb 	bl	8004694 <SM_GetOutputChannel>
 800431e:	4601      	mov	r1, r0
 8004320:	4623      	mov	r3, r4
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	4423      	add	r3, r4
 8004326:	4a4f      	ldr	r2, [pc, #316]	; (8004464 <GO_ApplyPresetToSignal+0x158>)
 8004328:	4413      	add	r3, r2
 800432a:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 800432e:	79fb      	ldrb	r3, [r7, #7]
 8004330:	2b07      	cmp	r3, #7
 8004332:	f200 8093 	bhi.w	800445c <GO_ApplyPresetToSignal+0x150>
 8004336:	a201      	add	r2, pc, #4	; (adr r2, 800433c <GO_ApplyPresetToSignal+0x30>)
 8004338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800433c:	0800435d 	.word	0x0800435d
 8004340:	0800437d 	.word	0x0800437d
 8004344:	0800439d 	.word	0x0800439d
 8004348:	080043bd 	.word	0x080043bd
 800434c:	080043dd 	.word	0x080043dd
 8004350:	080043fd 	.word	0x080043fd
 8004354:	0800441d 	.word	0x0800441d
 8004358:	0800443d 	.word	0x0800443d
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 800435c:	2200      	movs	r2, #0
 800435e:	2101      	movs	r1, #1
 8004360:	4841      	ldr	r0, [pc, #260]	; (8004468 <GO_ApplyPresetToSignal+0x15c>)
 8004362:	f005 ffa5 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8004366:	2200      	movs	r2, #0
 8004368:	2120      	movs	r1, #32
 800436a:	4840      	ldr	r0, [pc, #256]	; (800446c <GO_ApplyPresetToSignal+0x160>)
 800436c:	f005 ffa0 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8004370:	2200      	movs	r2, #0
 8004372:	2110      	movs	r1, #16
 8004374:	483d      	ldr	r0, [pc, #244]	; (800446c <GO_ApplyPresetToSignal+0x160>)
 8004376:	f005 ff9b 	bl	800a2b0 <HAL_GPIO_WritePin>
			break;
 800437a:	e06f      	b.n	800445c <GO_ApplyPresetToSignal+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800437c:	2201      	movs	r2, #1
 800437e:	2101      	movs	r1, #1
 8004380:	4839      	ldr	r0, [pc, #228]	; (8004468 <GO_ApplyPresetToSignal+0x15c>)
 8004382:	f005 ff95 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8004386:	2200      	movs	r2, #0
 8004388:	2120      	movs	r1, #32
 800438a:	4838      	ldr	r0, [pc, #224]	; (800446c <GO_ApplyPresetToSignal+0x160>)
 800438c:	f005 ff90 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8004390:	2200      	movs	r2, #0
 8004392:	2110      	movs	r1, #16
 8004394:	4835      	ldr	r0, [pc, #212]	; (800446c <GO_ApplyPresetToSignal+0x160>)
 8004396:	f005 ff8b 	bl	800a2b0 <HAL_GPIO_WritePin>
			break;
 800439a:	e05f      	b.n	800445c <GO_ApplyPresetToSignal+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 800439c:	2200      	movs	r2, #0
 800439e:	2101      	movs	r1, #1
 80043a0:	4831      	ldr	r0, [pc, #196]	; (8004468 <GO_ApplyPresetToSignal+0x15c>)
 80043a2:	f005 ff85 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80043a6:	2201      	movs	r2, #1
 80043a8:	2120      	movs	r1, #32
 80043aa:	4830      	ldr	r0, [pc, #192]	; (800446c <GO_ApplyPresetToSignal+0x160>)
 80043ac:	f005 ff80 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80043b0:	2200      	movs	r2, #0
 80043b2:	2110      	movs	r1, #16
 80043b4:	482d      	ldr	r0, [pc, #180]	; (800446c <GO_ApplyPresetToSignal+0x160>)
 80043b6:	f005 ff7b 	bl	800a2b0 <HAL_GPIO_WritePin>
			break;
 80043ba:	e04f      	b.n	800445c <GO_ApplyPresetToSignal+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80043bc:	2201      	movs	r2, #1
 80043be:	2101      	movs	r1, #1
 80043c0:	4829      	ldr	r0, [pc, #164]	; (8004468 <GO_ApplyPresetToSignal+0x15c>)
 80043c2:	f005 ff75 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80043c6:	2201      	movs	r2, #1
 80043c8:	2120      	movs	r1, #32
 80043ca:	4828      	ldr	r0, [pc, #160]	; (800446c <GO_ApplyPresetToSignal+0x160>)
 80043cc:	f005 ff70 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80043d0:	2200      	movs	r2, #0
 80043d2:	2110      	movs	r1, #16
 80043d4:	4825      	ldr	r0, [pc, #148]	; (800446c <GO_ApplyPresetToSignal+0x160>)
 80043d6:	f005 ff6b 	bl	800a2b0 <HAL_GPIO_WritePin>
			break;
 80043da:	e03f      	b.n	800445c <GO_ApplyPresetToSignal+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80043dc:	2200      	movs	r2, #0
 80043de:	2101      	movs	r1, #1
 80043e0:	4821      	ldr	r0, [pc, #132]	; (8004468 <GO_ApplyPresetToSignal+0x15c>)
 80043e2:	f005 ff65 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80043e6:	2200      	movs	r2, #0
 80043e8:	2120      	movs	r1, #32
 80043ea:	4820      	ldr	r0, [pc, #128]	; (800446c <GO_ApplyPresetToSignal+0x160>)
 80043ec:	f005 ff60 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80043f0:	2201      	movs	r2, #1
 80043f2:	2110      	movs	r1, #16
 80043f4:	481d      	ldr	r0, [pc, #116]	; (800446c <GO_ApplyPresetToSignal+0x160>)
 80043f6:	f005 ff5b 	bl	800a2b0 <HAL_GPIO_WritePin>
			break;
 80043fa:	e02f      	b.n	800445c <GO_ApplyPresetToSignal+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80043fc:	2201      	movs	r2, #1
 80043fe:	2101      	movs	r1, #1
 8004400:	4819      	ldr	r0, [pc, #100]	; (8004468 <GO_ApplyPresetToSignal+0x15c>)
 8004402:	f005 ff55 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8004406:	2200      	movs	r2, #0
 8004408:	2120      	movs	r1, #32
 800440a:	4818      	ldr	r0, [pc, #96]	; (800446c <GO_ApplyPresetToSignal+0x160>)
 800440c:	f005 ff50 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004410:	2201      	movs	r2, #1
 8004412:	2110      	movs	r1, #16
 8004414:	4815      	ldr	r0, [pc, #84]	; (800446c <GO_ApplyPresetToSignal+0x160>)
 8004416:	f005 ff4b 	bl	800a2b0 <HAL_GPIO_WritePin>
			break;
 800441a:	e01f      	b.n	800445c <GO_ApplyPresetToSignal+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 800441c:	2200      	movs	r2, #0
 800441e:	2101      	movs	r1, #1
 8004420:	4811      	ldr	r0, [pc, #68]	; (8004468 <GO_ApplyPresetToSignal+0x15c>)
 8004422:	f005 ff45 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8004426:	2201      	movs	r2, #1
 8004428:	2120      	movs	r1, #32
 800442a:	4810      	ldr	r0, [pc, #64]	; (800446c <GO_ApplyPresetToSignal+0x160>)
 800442c:	f005 ff40 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004430:	2201      	movs	r2, #1
 8004432:	2110      	movs	r1, #16
 8004434:	480d      	ldr	r0, [pc, #52]	; (800446c <GO_ApplyPresetToSignal+0x160>)
 8004436:	f005 ff3b 	bl	800a2b0 <HAL_GPIO_WritePin>
			break;
 800443a:	e00f      	b.n	800445c <GO_ApplyPresetToSignal+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 800443c:	2201      	movs	r2, #1
 800443e:	2101      	movs	r1, #1
 8004440:	4809      	ldr	r0, [pc, #36]	; (8004468 <GO_ApplyPresetToSignal+0x15c>)
 8004442:	f005 ff35 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8004446:	2201      	movs	r2, #1
 8004448:	2120      	movs	r1, #32
 800444a:	4808      	ldr	r0, [pc, #32]	; (800446c <GO_ApplyPresetToSignal+0x160>)
 800444c:	f005 ff30 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004450:	2201      	movs	r2, #1
 8004452:	2110      	movs	r1, #16
 8004454:	4805      	ldr	r0, [pc, #20]	; (800446c <GO_ApplyPresetToSignal+0x160>)
 8004456:	f005 ff2b 	bl	800a2b0 <HAL_GPIO_WritePin>
			break;
 800445a:	bf00      	nop
	}
}
 800445c:	bf00      	nop
 800445e:	370c      	adds	r7, #12
 8004460:	46bd      	mov	sp, r7
 8004462:	bd90      	pop	{r4, r7, pc}
 8004464:	200001d0 	.word	0x200001d0
 8004468:	48000400 	.word	0x48000400
 800446c:	48000800 	.word	0x48000800

08004470 <GO_ApplyPresetToSync>:
 *	@param None
 *	@retval None
 *
 */
void GO_ApplyPresetToSync(eOutput_gain pPresetEnum)
{
 8004470:	b590      	push	{r4, r7, lr}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	4603      	mov	r3, r0
 8004478:	71fb      	strb	r3, [r7, #7]
	SM_GetOutputChannel(SYNC_CHANNEL)->gain_profile = &aGainPresetEncoderPos[pPresetEnum];
 800447a:	79fc      	ldrb	r4, [r7, #7]
 800447c:	2001      	movs	r0, #1
 800447e:	f000 f909 	bl	8004694 <SM_GetOutputChannel>
 8004482:	4601      	mov	r1, r0
 8004484:	4623      	mov	r3, r4
 8004486:	005b      	lsls	r3, r3, #1
 8004488:	4423      	add	r3, r4
 800448a:	4a4f      	ldr	r2, [pc, #316]	; (80045c8 <GO_ApplyPresetToSync+0x158>)
 800448c:	4413      	add	r3, r2
 800448e:	f8c1 31f0 	str.w	r3, [r1, #496]	; 0x1f0

	switch(pPresetEnum)
 8004492:	79fb      	ldrb	r3, [r7, #7]
 8004494:	2b07      	cmp	r3, #7
 8004496:	f200 8093 	bhi.w	80045c0 <GO_ApplyPresetToSync+0x150>
 800449a:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <GO_ApplyPresetToSync+0x30>)
 800449c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a0:	080044c1 	.word	0x080044c1
 80044a4:	080044e1 	.word	0x080044e1
 80044a8:	08004501 	.word	0x08004501
 80044ac:	08004521 	.word	0x08004521
 80044b0:	08004541 	.word	0x08004541
 80044b4:	08004561 	.word	0x08004561
 80044b8:	08004581 	.word	0x08004581
 80044bc:	080045a1 	.word	0x080045a1
	{
		case ZERO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 80044c0:	2200      	movs	r2, #0
 80044c2:	2101      	movs	r1, #1
 80044c4:	4841      	ldr	r0, [pc, #260]	; (80045cc <GO_ApplyPresetToSync+0x15c>)
 80044c6:	f005 fef3 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80044ca:	2200      	movs	r2, #0
 80044cc:	2120      	movs	r1, #32
 80044ce:	4840      	ldr	r0, [pc, #256]	; (80045d0 <GO_ApplyPresetToSync+0x160>)
 80044d0:	f005 feee 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80044d4:	2200      	movs	r2, #0
 80044d6:	2110      	movs	r1, #16
 80044d8:	483d      	ldr	r0, [pc, #244]	; (80045d0 <GO_ApplyPresetToSync+0x160>)
 80044da:	f005 fee9 	bl	800a2b0 <HAL_GPIO_WritePin>
			break;
 80044de:	e06f      	b.n	80045c0 <GO_ApplyPresetToSync+0x150>

		case ONE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80044e0:	2201      	movs	r2, #1
 80044e2:	2101      	movs	r1, #1
 80044e4:	4839      	ldr	r0, [pc, #228]	; (80045cc <GO_ApplyPresetToSync+0x15c>)
 80044e6:	f005 fee3 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 80044ea:	2200      	movs	r2, #0
 80044ec:	2120      	movs	r1, #32
 80044ee:	4838      	ldr	r0, [pc, #224]	; (80045d0 <GO_ApplyPresetToSync+0x160>)
 80044f0:	f005 fede 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 80044f4:	2200      	movs	r2, #0
 80044f6:	2110      	movs	r1, #16
 80044f8:	4835      	ldr	r0, [pc, #212]	; (80045d0 <GO_ApplyPresetToSync+0x160>)
 80044fa:	f005 fed9 	bl	800a2b0 <HAL_GPIO_WritePin>
			break;
 80044fe:	e05f      	b.n	80045c0 <GO_ApplyPresetToSync+0x150>

		case TWO_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8004500:	2200      	movs	r2, #0
 8004502:	2101      	movs	r1, #1
 8004504:	4831      	ldr	r0, [pc, #196]	; (80045cc <GO_ApplyPresetToSync+0x15c>)
 8004506:	f005 fed3 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800450a:	2201      	movs	r2, #1
 800450c:	2120      	movs	r1, #32
 800450e:	4830      	ldr	r0, [pc, #192]	; (80045d0 <GO_ApplyPresetToSync+0x160>)
 8004510:	f005 fece 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8004514:	2200      	movs	r2, #0
 8004516:	2110      	movs	r1, #16
 8004518:	482d      	ldr	r0, [pc, #180]	; (80045d0 <GO_ApplyPresetToSync+0x160>)
 800451a:	f005 fec9 	bl	800a2b0 <HAL_GPIO_WritePin>
			break;
 800451e:	e04f      	b.n	80045c0 <GO_ApplyPresetToSync+0x150>

		case THREE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8004520:	2201      	movs	r2, #1
 8004522:	2101      	movs	r1, #1
 8004524:	4829      	ldr	r0, [pc, #164]	; (80045cc <GO_ApplyPresetToSync+0x15c>)
 8004526:	f005 fec3 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800452a:	2201      	movs	r2, #1
 800452c:	2120      	movs	r1, #32
 800452e:	4828      	ldr	r0, [pc, #160]	; (80045d0 <GO_ApplyPresetToSync+0x160>)
 8004530:	f005 febe 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8004534:	2200      	movs	r2, #0
 8004536:	2110      	movs	r1, #16
 8004538:	4825      	ldr	r0, [pc, #148]	; (80045d0 <GO_ApplyPresetToSync+0x160>)
 800453a:	f005 feb9 	bl	800a2b0 <HAL_GPIO_WritePin>
			break;
 800453e:	e03f      	b.n	80045c0 <GO_ApplyPresetToSync+0x150>

		case FOUR_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8004540:	2200      	movs	r2, #0
 8004542:	2101      	movs	r1, #1
 8004544:	4821      	ldr	r0, [pc, #132]	; (80045cc <GO_ApplyPresetToSync+0x15c>)
 8004546:	f005 feb3 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800454a:	2200      	movs	r2, #0
 800454c:	2120      	movs	r1, #32
 800454e:	4820      	ldr	r0, [pc, #128]	; (80045d0 <GO_ApplyPresetToSync+0x160>)
 8004550:	f005 feae 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004554:	2201      	movs	r2, #1
 8004556:	2110      	movs	r1, #16
 8004558:	481d      	ldr	r0, [pc, #116]	; (80045d0 <GO_ApplyPresetToSync+0x160>)
 800455a:	f005 fea9 	bl	800a2b0 <HAL_GPIO_WritePin>
			break;
 800455e:	e02f      	b.n	80045c0 <GO_ApplyPresetToSync+0x150>

		case FIVE_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8004560:	2201      	movs	r2, #1
 8004562:	2101      	movs	r1, #1
 8004564:	4819      	ldr	r0, [pc, #100]	; (80045cc <GO_ApplyPresetToSync+0x15c>)
 8004566:	f005 fea3 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 800456a:	2200      	movs	r2, #0
 800456c:	2120      	movs	r1, #32
 800456e:	4818      	ldr	r0, [pc, #96]	; (80045d0 <GO_ApplyPresetToSync+0x160>)
 8004570:	f005 fe9e 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004574:	2201      	movs	r2, #1
 8004576:	2110      	movs	r1, #16
 8004578:	4815      	ldr	r0, [pc, #84]	; (80045d0 <GO_ApplyPresetToSync+0x160>)
 800457a:	f005 fe99 	bl	800a2b0 <HAL_GPIO_WritePin>
			break;
 800457e:	e01f      	b.n	80045c0 <GO_ApplyPresetToSync+0x150>

		case SIX_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8004580:	2200      	movs	r2, #0
 8004582:	2101      	movs	r1, #1
 8004584:	4811      	ldr	r0, [pc, #68]	; (80045cc <GO_ApplyPresetToSync+0x15c>)
 8004586:	f005 fe93 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 800458a:	2201      	movs	r2, #1
 800458c:	2120      	movs	r1, #32
 800458e:	4810      	ldr	r0, [pc, #64]	; (80045d0 <GO_ApplyPresetToSync+0x160>)
 8004590:	f005 fe8e 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8004594:	2201      	movs	r2, #1
 8004596:	2110      	movs	r1, #16
 8004598:	480d      	ldr	r0, [pc, #52]	; (80045d0 <GO_ApplyPresetToSync+0x160>)
 800459a:	f005 fe89 	bl	800a2b0 <HAL_GPIO_WritePin>
			break;
 800459e:	e00f      	b.n	80045c0 <GO_ApplyPresetToSync+0x150>

		case SEVEN_GAIN:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 80045a0:	2201      	movs	r2, #1
 80045a2:	2101      	movs	r1, #1
 80045a4:	4809      	ldr	r0, [pc, #36]	; (80045cc <GO_ApplyPresetToSync+0x15c>)
 80045a6:	f005 fe83 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 80045aa:	2201      	movs	r2, #1
 80045ac:	2120      	movs	r1, #32
 80045ae:	4808      	ldr	r0, [pc, #32]	; (80045d0 <GO_ApplyPresetToSync+0x160>)
 80045b0:	f005 fe7e 	bl	800a2b0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 80045b4:	2201      	movs	r2, #1
 80045b6:	2110      	movs	r1, #16
 80045b8:	4805      	ldr	r0, [pc, #20]	; (80045d0 <GO_ApplyPresetToSync+0x160>)
 80045ba:	f005 fe79 	bl	800a2b0 <HAL_GPIO_WritePin>
			break;
 80045be:	bf00      	nop
	}
}
 80045c0:	bf00      	nop
 80045c2:	370c      	adds	r7, #12
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd90      	pop	{r4, r7, pc}
 80045c8:	200001d0 	.word	0x200001d0
 80045cc:	48000400 	.word	0x48000400
 80045d0:	48000800 	.word	0x48000800

080045d4 <SM_Init>:
sOutputChannel_t SignalChannel;
sOutputChannel_t SyncChannel;


void SM_Init()
{
 80045d4:	b480      	push	{r7}
 80045d6:	b083      	sub	sp, #12
 80045d8:	af00      	add	r7, sp, #0

	// initialise the output channels
	SignalChannel.channel = SIGNAL_CHANNEL;
 80045da:	4b28      	ldr	r3, [pc, #160]	; (800467c <SM_Init+0xa8>)
 80045dc:	2200      	movs	r2, #0
 80045de:	701a      	strb	r2, [r3, #0]
	SignalChannel.ref_lut_data = aFuncPresetEncoderPos[SINE_FUNC_MODE].lookup_table_data;
 80045e0:	4b27      	ldr	r3, [pc, #156]	; (8004680 <SM_Init+0xac>)
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	4a25      	ldr	r2, [pc, #148]	; (800467c <SM_Init+0xa8>)
 80045e6:	6053      	str	r3, [r2, #4]
	SignalChannel.func_profile = &aFuncPresetEncoderPos[eDefaultFuncPreset];
 80045e8:	4b24      	ldr	r3, [pc, #144]	; (800467c <SM_Init+0xa8>)
 80045ea:	4a25      	ldr	r2, [pc, #148]	; (8004680 <SM_Init+0xac>)
 80045ec:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80045f0:	2300      	movs	r3, #0
 80045f2:	607b      	str	r3, [r7, #4]
 80045f4:	e00b      	b.n	800460e <SM_Init+0x3a>
		SignalChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 80045f6:	4a23      	ldr	r2, [pc, #140]	; (8004684 <SM_Init+0xb0>)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80045fe:	491f      	ldr	r1, [pc, #124]	; (800467c <SM_Init+0xa8>)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	3302      	adds	r3, #2
 8004604:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	3301      	adds	r3, #1
 800460c:	607b      	str	r3, [r7, #4]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2b77      	cmp	r3, #119	; 0x77
 8004612:	ddf0      	ble.n	80045f6 <SM_Init+0x22>
	SignalChannel.amp_profile = &aVppEncoderPresets[eDefaultVppPreset];
 8004614:	4b19      	ldr	r3, [pc, #100]	; (800467c <SM_Init+0xa8>)
 8004616:	4a1c      	ldr	r2, [pc, #112]	; (8004688 <SM_Init+0xb4>)
 8004618:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SignalChannel.gain_profile = &aGainPresetEncoderPos[eDefaultGainPreset];
 800461c:	4b17      	ldr	r3, [pc, #92]	; (800467c <SM_Init+0xa8>)
 800461e:	4a1b      	ldr	r2, [pc, #108]	; (800468c <SM_Init+0xb8>)
 8004620:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0

	SyncChannel.channel = SYNC_CHANNEL;
 8004624:	4b1a      	ldr	r3, [pc, #104]	; (8004690 <SM_Init+0xbc>)
 8004626:	2201      	movs	r2, #1
 8004628:	701a      	strb	r2, [r3, #0]
	SyncChannel.ref_lut_data = aFuncPresetEncoderPos[SINE_FUNC_MODE].lookup_table_data;
 800462a:	4b15      	ldr	r3, [pc, #84]	; (8004680 <SM_Init+0xac>)
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	4a18      	ldr	r2, [pc, #96]	; (8004690 <SM_Init+0xbc>)
 8004630:	6053      	str	r3, [r2, #4]
	SyncChannel.func_profile = &aFuncPresetEncoderPos[eDefaultFuncPreset];
 8004632:	4b17      	ldr	r3, [pc, #92]	; (8004690 <SM_Init+0xbc>)
 8004634:	4a12      	ldr	r2, [pc, #72]	; (8004680 <SM_Init+0xac>)
 8004636:	f8c3 21e8 	str.w	r2, [r3, #488]	; 0x1e8
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800463a:	2300      	movs	r3, #0
 800463c:	603b      	str	r3, [r7, #0]
 800463e:	e00b      	b.n	8004658 <SM_Init+0x84>
		SyncChannel.dsp_lut_data[i] = sine_data_table_3600[i];
 8004640:	4a10      	ldr	r2, [pc, #64]	; (8004684 <SM_Init+0xb0>)
 8004642:	683b      	ldr	r3, [r7, #0]
 8004644:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004648:	4911      	ldr	r1, [pc, #68]	; (8004690 <SM_Init+0xbc>)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	3302      	adds	r3, #2
 800464e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	3301      	adds	r3, #1
 8004656:	603b      	str	r3, [r7, #0]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2b77      	cmp	r3, #119	; 0x77
 800465c:	ddf0      	ble.n	8004640 <SM_Init+0x6c>
	SyncChannel.amp_profile = &aVppEncoderPresets[eDefaultVppPreset];
 800465e:	4b0c      	ldr	r3, [pc, #48]	; (8004690 <SM_Init+0xbc>)
 8004660:	4a09      	ldr	r2, [pc, #36]	; (8004688 <SM_Init+0xb4>)
 8004662:	f8c3 21ec 	str.w	r2, [r3, #492]	; 0x1ec
	SyncChannel.gain_profile = &aGainPresetEncoderPos[eDefaultGainPreset];
 8004666:	4b0a      	ldr	r3, [pc, #40]	; (8004690 <SM_Init+0xbc>)
 8004668:	4a08      	ldr	r2, [pc, #32]	; (800468c <SM_Init+0xb8>)
 800466a:	f8c3 21f0 	str.w	r2, [r3, #496]	; 0x1f0
}
 800466e:	bf00      	nop
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr
 800467a:	bf00      	nop
 800467c:	20002120 	.word	0x20002120
 8004680:	200001a0 	.word	0x200001a0
 8004684:	20001578 	.word	0x20001578
 8004688:	20000ba4 	.word	0x20000ba4
 800468c:	200001d3 	.word	0x200001d3
 8004690:	20001f2c 	.word	0x20001f2c

08004694 <SM_GetOutputChannel>:

sOutputChannel_t * SM_GetOutputChannel(eOutputChannel_t pChannel)
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	4603      	mov	r3, r0
 800469c:	71fb      	strb	r3, [r7, #7]
	if(!pChannel)
 800469e:	79fb      	ldrb	r3, [r7, #7]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <SM_GetOutputChannel+0x14>
		return &SignalChannel;
 80046a4:	4b04      	ldr	r3, [pc, #16]	; (80046b8 <SM_GetOutputChannel+0x24>)
 80046a6:	e000      	b.n	80046aa <SM_GetOutputChannel+0x16>
	else
		return &SyncChannel;
 80046a8:	4b04      	ldr	r3, [pc, #16]	; (80046bc <SM_GetOutputChannel+0x28>)
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	20002120 	.word	0x20002120
 80046bc:	20001f2c 	.word	0x20001f2c

080046c0 <SM_GetEncoderValue>:
 *	@param None
 *	@retval None
 *
 */
uint16_t SM_GetEncoderValue(eEncoder_Direction direction)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	4603      	mov	r3, r0
 80046c8:	71fb      	strb	r3, [r7, #7]
	if(direction)
 80046ca:	79fb      	ldrb	r3, [r7, #7]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d008      	beq.n	80046e2 <SM_GetEncoderValue+0x22>
	{
		return ENCODER_TIMER->ARR - ENCODER_TIMER->CNT;
 80046d0:	4b08      	ldr	r3, [pc, #32]	; (80046f4 <SM_GetEncoderValue+0x34>)
 80046d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d4:	b29a      	uxth	r2, r3
 80046d6:	4b07      	ldr	r3, [pc, #28]	; (80046f4 <SM_GetEncoderValue+0x34>)
 80046d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046da:	b29b      	uxth	r3, r3
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	b29b      	uxth	r3, r3
 80046e0:	e002      	b.n	80046e8 <SM_GetEncoderValue+0x28>
	}
	else
	{
		return ENCODER_TIMER->CNT;
 80046e2:	4b04      	ldr	r3, [pc, #16]	; (80046f4 <SM_GetEncoderValue+0x34>)
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	b29b      	uxth	r3, r3
	}
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	370c      	adds	r7, #12
 80046ec:	46bd      	mov	sp, r7
 80046ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f2:	4770      	bx	lr
 80046f4:	40012c00 	.word	0x40012c00

080046f8 <SM_GetOutputInHertz>:
 *	@param None
 *	@retval None
 *
 */
float SM_GetOutputInHertz()
{
 80046f8:	b480      	push	{r7}
 80046fa:	b085      	sub	sp, #20
 80046fc:	af00      	add	r7, sp, #0
	volatile float tim8_psc;
	volatile float tim8_arr;

	// safe-guard against divide by zero
	(TIM8->PSC == 0) ? (tim8_psc = 1) : (tim8_psc = TIM8->PSC);
 80046fe:	4b1d      	ldr	r3, [pc, #116]	; (8004774 <SM_GetOutputInHertz+0x7c>)
 8004700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004702:	2b00      	cmp	r3, #0
 8004704:	d103      	bne.n	800470e <SM_GetOutputInHertz+0x16>
 8004706:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800470a:	60bb      	str	r3, [r7, #8]
 800470c:	e007      	b.n	800471e <SM_GetOutputInHertz+0x26>
 800470e:	4b19      	ldr	r3, [pc, #100]	; (8004774 <SM_GetOutputInHertz+0x7c>)
 8004710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004712:	ee07 3a90 	vmov	s15, r3
 8004716:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800471a:	edc7 7a02 	vstr	s15, [r7, #8]
	(TIM8->ARR == 0) ? (tim8_arr = 1) : (tim8_arr = TIM8->ARR);
 800471e:	4b15      	ldr	r3, [pc, #84]	; (8004774 <SM_GetOutputInHertz+0x7c>)
 8004720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004722:	2b00      	cmp	r3, #0
 8004724:	d103      	bne.n	800472e <SM_GetOutputInHertz+0x36>
 8004726:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800472a:	607b      	str	r3, [r7, #4]
 800472c:	e007      	b.n	800473e <SM_GetOutputInHertz+0x46>
 800472e:	4b11      	ldr	r3, [pc, #68]	; (8004774 <SM_GetOutputInHertz+0x7c>)
 8004730:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004732:	ee07 3a90 	vmov	s15, r3
 8004736:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800473a:	edc7 7a01 	vstr	s15, [r7, #4]

	float tim8_freq = SM_MCLK / (tim8_psc * tim8_arr);
 800473e:	ed97 7a02 	vldr	s14, [r7, #8]
 8004742:	edd7 7a01 	vldr	s15, [r7, #4]
 8004746:	ee27 7a27 	vmul.f32	s14, s14, s15
 800474a:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8004778 <SM_GetOutputInHertz+0x80>
 800474e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004752:	edc7 7a03 	vstr	s15, [r7, #12]


	return tim8_freq / SM_FSAMP;
 8004756:	edd7 7a03 	vldr	s15, [r7, #12]
 800475a:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800477c <SM_GetOutputInHertz+0x84>
 800475e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004762:	eef0 7a66 	vmov.f32	s15, s13
}
 8004766:	eeb0 0a67 	vmov.f32	s0, s15
 800476a:	3714      	adds	r7, #20
 800476c:	46bd      	mov	sp, r7
 800476e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004772:	4770      	bx	lr
 8004774:	40013400 	.word	0x40013400
 8004778:	4d2037a0 	.word	0x4d2037a0
 800477c:	42f00000 	.word	0x42f00000

08004780 <VPP_ApplyPresetToSignal>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyPresetToSignal(eVppPreset_t pPresetEnum)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b084      	sub	sp, #16
 8004784:	af00      	add	r7, sp, #0
 8004786:	4603      	mov	r3, r0
 8004788:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &aVppEncoderPresets[pPresetEnum];
 800478a:	79fa      	ldrb	r2, [r7, #7]
 800478c:	4613      	mov	r3, r2
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	1a9b      	subs	r3, r3, r2
 8004792:	009b      	lsls	r3, r3, #2
 8004794:	4a10      	ldr	r2, [pc, #64]	; (80047d8 <VPP_ApplyPresetToSignal+0x58>)
 8004796:	4413      	add	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the SignalChannel object
	SM_GetOutputChannel(SIGNAL_CHANNEL)->amp_profile = pNextEncPreset;
 800479a:	2000      	movs	r0, #0
 800479c:	f7ff ff7a 	bl	8004694 <SM_GetOutputChannel>
 80047a0:	4602      	mov	r2, r0
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

    // set the gain preset
	GO_ApplyPresetToSignal(pNextEncPreset->gain_preset);
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	7a1b      	ldrb	r3, [r3, #8]
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7ff fdad 	bl	800430c <GO_ApplyPresetToSignal>

    // Apply the next amplitude setting to the SignalChannel object
    _ProcessSignalDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->vpp_offset , pNextEncPreset->epos);
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	edd3 7a04 	vldr	s15, [r3, #16]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	ed93 7a05 	vldr	s14, [r3, #20]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	8b1b      	ldrh	r3, [r3, #24]
 80047c2:	4618      	mov	r0, r3
 80047c4:	eef0 0a47 	vmov.f32	s1, s14
 80047c8:	eeb0 0a67 	vmov.f32	s0, s15
 80047cc:	f000 f834 	bl	8004838 <_ProcessSignalDataTable>


}
 80047d0:	bf00      	nop
 80047d2:	3710      	adds	r7, #16
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	200001e8 	.word	0x200001e8

080047dc <VPP_ApplyPresetToSync>:
 *	@param None
 *	@retval None
 *
 */
void VPP_ApplyPresetToSync(eVppPreset_t pPresetEnum)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	4603      	mov	r3, r0
 80047e4:	71fb      	strb	r3, [r7, #7]
	// retrieve the next preset
	AmplitudeProfile_t* pNextEncPreset = &aVppEncoderPresets[pPresetEnum];
 80047e6:	79fa      	ldrb	r2, [r7, #7]
 80047e8:	4613      	mov	r3, r2
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	1a9b      	subs	r3, r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	4a10      	ldr	r2, [pc, #64]	; (8004834 <VPP_ApplyPresetToSync+0x58>)
 80047f2:	4413      	add	r3, r2
 80047f4:	60fb      	str	r3, [r7, #12]

	// Set the new VPP Preset to the SyncChannel object
	SM_GetOutputChannel(SYNC_CHANNEL)->amp_profile = pNextEncPreset;
 80047f6:	2001      	movs	r0, #1
 80047f8:	f7ff ff4c 	bl	8004694 <SM_GetOutputChannel>
 80047fc:	4602      	mov	r2, r0
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f8c2 31ec 	str.w	r3, [r2, #492]	; 0x1ec

	 // set the gain preset
	GO_ApplyPresetToSync(pNextEncPreset->gain_preset);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	7a1b      	ldrb	r3, [r3, #8]
 8004808:	4618      	mov	r0, r3
 800480a:	f7ff fe31 	bl	8004470 <GO_ApplyPresetToSync>

	// Apply the next amplitude setting to the SyncChannel object
	_ProcessSyncDataTable(pNextEncPreset->neg_gain_coeff, pNextEncPreset->vpp_offset , pNextEncPreset->epos);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	edd3 7a04 	vldr	s15, [r3, #16]
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	ed93 7a05 	vldr	s14, [r3, #20]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	8b1b      	ldrh	r3, [r3, #24]
 800481e:	4618      	mov	r0, r3
 8004820:	eef0 0a47 	vmov.f32	s1, s14
 8004824:	eeb0 0a67 	vmov.f32	s0, s15
 8004828:	f000 f884 	bl	8004934 <_ProcessSyncDataTable>



}
 800482c:	bf00      	nop
 800482e:	3710      	adds	r7, #16
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	200001e8 	.word	0x200001e8

08004838 <_ProcessSignalDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSignalDataTable(float _neg_gain_coeff, float vpp_offset, uint16_t _encoder_value)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b088      	sub	sp, #32
 800483c:	af00      	add	r7, sp, #0
 800483e:	ed87 0a03 	vstr	s0, [r7, #12]
 8004842:	edc7 0a02 	vstr	s1, [r7, #8]
 8004846:	4603      	mov	r3, r0
 8004848:	80fb      	strh	r3, [r7, #6]
	// copy refer lookup datat table from SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800484a:	2300      	movs	r3, #0
 800484c:	61fb      	str	r3, [r7, #28]
 800484e:	e00f      	b.n	8004870 <_ProcessSignalDataTable+0x38>
	{
		tmpDataTable[i] = SM_GetOutputChannel(SIGNAL_CHANNEL)->ref_lut_data[i];
 8004850:	2000      	movs	r0, #0
 8004852:	f7ff ff1f 	bl	8004694 <SM_GetOutputChannel>
 8004856:	4603      	mov	r3, r0
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	4933      	ldr	r1, [pc, #204]	; (8004930 <_ProcessSignalDataTable+0xf8>)
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800486a:	69fb      	ldr	r3, [r7, #28]
 800486c:	3301      	adds	r3, #1
 800486e:	61fb      	str	r3, [r7, #28]
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	2b77      	cmp	r3, #119	; 0x77
 8004874:	ddec      	ble.n	8004850 <_ProcessSignalDataTable+0x18>
	}

	// calculate positive offset coefficient from encoder position
	float pos_offset_coeff = 1;
 8004876:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800487a:	61bb      	str	r3, [r7, #24]
	if(_encoder_value)
 800487c:	88fb      	ldrh	r3, [r7, #6]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d008      	beq.n	8004894 <_ProcessSignalDataTable+0x5c>
	{
		pos_offset_coeff = (_encoder_value/4);
 8004882:	88fb      	ldrh	r3, [r7, #6]
 8004884:	089b      	lsrs	r3, r3, #2
 8004886:	b29b      	uxth	r3, r3
 8004888:	ee07 3a90 	vmov	s15, r3
 800488c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004890:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	// adjust amplitude and offset of lookup table copy
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004894:	2300      	movs	r3, #0
 8004896:	617b      	str	r3, [r7, #20]
 8004898:	e02e      	b.n	80048f8 <_ProcessSignalDataTable+0xc0>
	{
		tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 800489a:	4a25      	ldr	r2, [pc, #148]	; (8004930 <_ProcessSignalDataTable+0xf8>)
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048a2:	ee07 3a90 	vmov	s15, r3
 80048a6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80048ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80048b2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048b6:	ee17 1a90 	vmov	r1, s15
 80048ba:	4a1d      	ldr	r2, [pc, #116]	; (8004930 <_ProcessSignalDataTable+0xf8>)
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		tmpDataTable[i] = tmpDataTable[i] + (vpp_offset * pos_offset_coeff);
 80048c2:	4a1b      	ldr	r2, [pc, #108]	; (8004930 <_ProcessSignalDataTable+0xf8>)
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ca:	ee07 3a90 	vmov	s15, r3
 80048ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80048d2:	edd7 6a02 	vldr	s13, [r7, #8]
 80048d6:	edd7 7a06 	vldr	s15, [r7, #24]
 80048da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80048de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80048e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048e6:	ee17 1a90 	vmov	r1, s15
 80048ea:	4a11      	ldr	r2, [pc, #68]	; (8004930 <_ProcessSignalDataTable+0xf8>)
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	3301      	adds	r3, #1
 80048f6:	617b      	str	r3, [r7, #20]
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	2b77      	cmp	r3, #119	; 0x77
 80048fc:	ddcd      	ble.n	800489a <_ProcessSignalDataTable+0x62>
	}

	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80048fe:	2300      	movs	r3, #0
 8004900:	613b      	str	r3, [r7, #16]
 8004902:	e00e      	b.n	8004922 <_ProcessSignalDataTable+0xea>
	{
		SM_GetOutputChannel(SIGNAL_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8004904:	2000      	movs	r0, #0
 8004906:	f7ff fec5 	bl	8004694 <SM_GetOutputChannel>
 800490a:	4601      	mov	r1, r0
 800490c:	4a08      	ldr	r2, [pc, #32]	; (8004930 <_ProcessSignalDataTable+0xf8>)
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	3302      	adds	r3, #2
 8004918:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 800491c:	693b      	ldr	r3, [r7, #16]
 800491e:	3301      	adds	r3, #1
 8004920:	613b      	str	r3, [r7, #16]
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	2b77      	cmp	r3, #119	; 0x77
 8004926:	dded      	ble.n	8004904 <_ProcessSignalDataTable+0xcc>
	}
}
 8004928:	bf00      	nop
 800492a:	3720      	adds	r7, #32
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}
 8004930:	20002314 	.word	0x20002314

08004934 <_ProcessSyncDataTable>:
 *	@param None
 *	@retval None
 *
 */
void _ProcessSyncDataTable(float _neg_gain_coeff, float vpp_offset, uint16_t _encoder_value)
{
 8004934:	b580      	push	{r7, lr}
 8004936:	b088      	sub	sp, #32
 8004938:	af00      	add	r7, sp, #0
 800493a:	ed87 0a03 	vstr	s0, [r7, #12]
 800493e:	edc7 0a02 	vstr	s1, [r7, #8]
 8004942:	4603      	mov	r3, r0
 8004944:	80fb      	strh	r3, [r7, #6]
	// copy refer lookup datat table from SyncChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004946:	2300      	movs	r3, #0
 8004948:	61fb      	str	r3, [r7, #28]
 800494a:	e00f      	b.n	800496c <_ProcessSyncDataTable+0x38>
	{
		tmpDataTable[i] = SM_GetOutputChannel(SYNC_CHANNEL)->ref_lut_data[i];
 800494c:	2001      	movs	r0, #1
 800494e:	f7ff fea1 	bl	8004694 <SM_GetOutputChannel>
 8004952:	4603      	mov	r3, r0
 8004954:	685a      	ldr	r2, [r3, #4]
 8004956:	69fb      	ldr	r3, [r7, #28]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4413      	add	r3, r2
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	4933      	ldr	r1, [pc, #204]	; (8004a2c <_ProcessSyncDataTable+0xf8>)
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004966:	69fb      	ldr	r3, [r7, #28]
 8004968:	3301      	adds	r3, #1
 800496a:	61fb      	str	r3, [r7, #28]
 800496c:	69fb      	ldr	r3, [r7, #28]
 800496e:	2b77      	cmp	r3, #119	; 0x77
 8004970:	ddec      	ble.n	800494c <_ProcessSyncDataTable+0x18>
	}

	// calculate positive offset coefficient from encoder position
	float pos_offset_coeff = 1;
 8004972:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8004976:	61bb      	str	r3, [r7, #24]
	if(_encoder_value)
 8004978:	88fb      	ldrh	r3, [r7, #6]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d008      	beq.n	8004990 <_ProcessSyncDataTable+0x5c>
	{
		pos_offset_coeff = (_encoder_value/4);
 800497e:	88fb      	ldrh	r3, [r7, #6]
 8004980:	089b      	lsrs	r3, r3, #2
 8004982:	b29b      	uxth	r3, r3
 8004984:	ee07 3a90 	vmov	s15, r3
 8004988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800498c:	edc7 7a06 	vstr	s15, [r7, #24]
	}

	// adjust amplitude and offset of lookup table copy
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004990:	2300      	movs	r3, #0
 8004992:	617b      	str	r3, [r7, #20]
 8004994:	e02e      	b.n	80049f4 <_ProcessSyncDataTable+0xc0>
	{

		tmpDataTable[i] = tmpDataTable[i] * (_neg_gain_coeff);
 8004996:	4a25      	ldr	r2, [pc, #148]	; (8004a2c <_ProcessSyncDataTable+0xf8>)
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800499e:	ee07 3a90 	vmov	s15, r3
 80049a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049a6:	edd7 7a03 	vldr	s15, [r7, #12]
 80049aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049b2:	ee17 1a90 	vmov	r1, s15
 80049b6:	4a1d      	ldr	r2, [pc, #116]	; (8004a2c <_ProcessSyncDataTable+0xf8>)
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		tmpDataTable[i] = tmpDataTable[i] + (vpp_offset * pos_offset_coeff);
 80049be:	4a1b      	ldr	r2, [pc, #108]	; (8004a2c <_ProcessSyncDataTable+0xf8>)
 80049c0:	697b      	ldr	r3, [r7, #20]
 80049c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049c6:	ee07 3a90 	vmov	s15, r3
 80049ca:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80049ce:	edd7 6a02 	vldr	s13, [r7, #8]
 80049d2:	edd7 7a06 	vldr	s15, [r7, #24]
 80049d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80049da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80049de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049e2:	ee17 1a90 	vmov	r1, s15
 80049e6:	4a11      	ldr	r2, [pc, #68]	; (8004a2c <_ProcessSyncDataTable+0xf8>)
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80049ee:	697b      	ldr	r3, [r7, #20]
 80049f0:	3301      	adds	r3, #1
 80049f2:	617b      	str	r3, [r7, #20]
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	2b77      	cmp	r3, #119	; 0x77
 80049f8:	ddcd      	ble.n	8004996 <_ProcessSyncDataTable+0x62>
	}

	// restore lookup table copy to active lookup table in SignalChannel object
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 80049fa:	2300      	movs	r3, #0
 80049fc:	613b      	str	r3, [r7, #16]
 80049fe:	e00e      	b.n	8004a1e <_ProcessSyncDataTable+0xea>
	{
		SM_GetOutputChannel(SYNC_CHANNEL)->dsp_lut_data[i] = tmpDataTable[i];
 8004a00:	2001      	movs	r0, #1
 8004a02:	f7ff fe47 	bl	8004694 <SM_GetOutputChannel>
 8004a06:	4601      	mov	r1, r0
 8004a08:	4a08      	ldr	r2, [pc, #32]	; (8004a2c <_ProcessSyncDataTable+0xf8>)
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004a10:	693b      	ldr	r3, [r7, #16]
 8004a12:	3302      	adds	r3, #2
 8004a14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i < SINE_DATA_SIZE; i++)
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	3301      	adds	r3, #1
 8004a1c:	613b      	str	r3, [r7, #16]
 8004a1e:	693b      	ldr	r3, [r7, #16]
 8004a20:	2b77      	cmp	r3, #119	; 0x77
 8004a22:	dded      	ble.n	8004a00 <_ProcessSyncDataTable+0xcc>
	}
}
 8004a24:	bf00      	nop
 8004a26:	3720      	adds	r7, #32
 8004a28:	46bd      	mov	sp, r7
 8004a2a:	bd80      	pop	{r7, pc}
 8004a2c:	20002314 	.word	0x20002314

08004a30 <VPP_ModifySignalOutput>:

 *	@retval None
 *
 */
void VPP_ModifySignalOutput(uint16_t pEncoderValue)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	4603      	mov	r3, r0
 8004a38:	80fb      	strh	r3, [r7, #6]
	switch(pEncoderValue)
 8004a3a:	88fb      	ldrh	r3, [r7, #6]
 8004a3c:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8004a40:	f200 849a 	bhi.w	8005378 <VPP_ModifySignalOutput+0x948>
 8004a44:	a201      	add	r2, pc, #4	; (adr r2, 8004a4c <VPP_ModifySignalOutput+0x1c>)
 8004a46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4a:	bf00      	nop
 8004a4c:	08005069 	.word	0x08005069
 8004a50:	08005069 	.word	0x08005069
 8004a54:	08005069 	.word	0x08005069
 8004a58:	08005071 	.word	0x08005071
 8004a5c:	08005071 	.word	0x08005071
 8004a60:	08005071 	.word	0x08005071
 8004a64:	08005071 	.word	0x08005071
 8004a68:	08005079 	.word	0x08005079
 8004a6c:	08005079 	.word	0x08005079
 8004a70:	08005079 	.word	0x08005079
 8004a74:	08005079 	.word	0x08005079
 8004a78:	08005081 	.word	0x08005081
 8004a7c:	08005081 	.word	0x08005081
 8004a80:	08005081 	.word	0x08005081
 8004a84:	08005081 	.word	0x08005081
 8004a88:	08005089 	.word	0x08005089
 8004a8c:	08005089 	.word	0x08005089
 8004a90:	08005089 	.word	0x08005089
 8004a94:	08005089 	.word	0x08005089
 8004a98:	08005091 	.word	0x08005091
 8004a9c:	08005091 	.word	0x08005091
 8004aa0:	08005091 	.word	0x08005091
 8004aa4:	08005091 	.word	0x08005091
 8004aa8:	08005099 	.word	0x08005099
 8004aac:	08005099 	.word	0x08005099
 8004ab0:	08005099 	.word	0x08005099
 8004ab4:	08005099 	.word	0x08005099
 8004ab8:	080050a1 	.word	0x080050a1
 8004abc:	080050a1 	.word	0x080050a1
 8004ac0:	080050a1 	.word	0x080050a1
 8004ac4:	080050a1 	.word	0x080050a1
 8004ac8:	080050a9 	.word	0x080050a9
 8004acc:	080050a9 	.word	0x080050a9
 8004ad0:	080050a9 	.word	0x080050a9
 8004ad4:	080050a9 	.word	0x080050a9
 8004ad8:	080050b1 	.word	0x080050b1
 8004adc:	080050b1 	.word	0x080050b1
 8004ae0:	080050b1 	.word	0x080050b1
 8004ae4:	080050b1 	.word	0x080050b1
 8004ae8:	080050b9 	.word	0x080050b9
 8004aec:	080050b9 	.word	0x080050b9
 8004af0:	080050b9 	.word	0x080050b9
 8004af4:	080050b9 	.word	0x080050b9
 8004af8:	080050c1 	.word	0x080050c1
 8004afc:	080050c1 	.word	0x080050c1
 8004b00:	080050c1 	.word	0x080050c1
 8004b04:	080050c1 	.word	0x080050c1
 8004b08:	080050c9 	.word	0x080050c9
 8004b0c:	080050c9 	.word	0x080050c9
 8004b10:	080050c9 	.word	0x080050c9
 8004b14:	080050c9 	.word	0x080050c9
 8004b18:	080050d1 	.word	0x080050d1
 8004b1c:	080050d1 	.word	0x080050d1
 8004b20:	080050d1 	.word	0x080050d1
 8004b24:	080050d1 	.word	0x080050d1
 8004b28:	080050d9 	.word	0x080050d9
 8004b2c:	080050d9 	.word	0x080050d9
 8004b30:	080050d9 	.word	0x080050d9
 8004b34:	080050d9 	.word	0x080050d9
 8004b38:	080050e1 	.word	0x080050e1
 8004b3c:	080050e1 	.word	0x080050e1
 8004b40:	080050e1 	.word	0x080050e1
 8004b44:	080050e1 	.word	0x080050e1
 8004b48:	080050e9 	.word	0x080050e9
 8004b4c:	080050e9 	.word	0x080050e9
 8004b50:	080050e9 	.word	0x080050e9
 8004b54:	080050e9 	.word	0x080050e9
 8004b58:	080050f1 	.word	0x080050f1
 8004b5c:	080050f1 	.word	0x080050f1
 8004b60:	080050f1 	.word	0x080050f1
 8004b64:	080050f1 	.word	0x080050f1
 8004b68:	080050f9 	.word	0x080050f9
 8004b6c:	080050f9 	.word	0x080050f9
 8004b70:	080050f9 	.word	0x080050f9
 8004b74:	080050f9 	.word	0x080050f9
 8004b78:	08005101 	.word	0x08005101
 8004b7c:	08005101 	.word	0x08005101
 8004b80:	08005101 	.word	0x08005101
 8004b84:	08005101 	.word	0x08005101
 8004b88:	08005109 	.word	0x08005109
 8004b8c:	08005109 	.word	0x08005109
 8004b90:	08005109 	.word	0x08005109
 8004b94:	08005109 	.word	0x08005109
 8004b98:	08005111 	.word	0x08005111
 8004b9c:	08005111 	.word	0x08005111
 8004ba0:	08005111 	.word	0x08005111
 8004ba4:	08005111 	.word	0x08005111
 8004ba8:	08005119 	.word	0x08005119
 8004bac:	08005119 	.word	0x08005119
 8004bb0:	08005119 	.word	0x08005119
 8004bb4:	08005119 	.word	0x08005119
 8004bb8:	08005121 	.word	0x08005121
 8004bbc:	08005121 	.word	0x08005121
 8004bc0:	08005121 	.word	0x08005121
 8004bc4:	08005121 	.word	0x08005121
 8004bc8:	08005129 	.word	0x08005129
 8004bcc:	08005129 	.word	0x08005129
 8004bd0:	08005129 	.word	0x08005129
 8004bd4:	08005129 	.word	0x08005129
 8004bd8:	08005131 	.word	0x08005131
 8004bdc:	08005131 	.word	0x08005131
 8004be0:	08005131 	.word	0x08005131
 8004be4:	08005131 	.word	0x08005131
 8004be8:	08005139 	.word	0x08005139
 8004bec:	08005139 	.word	0x08005139
 8004bf0:	08005139 	.word	0x08005139
 8004bf4:	08005139 	.word	0x08005139
 8004bf8:	08005141 	.word	0x08005141
 8004bfc:	08005141 	.word	0x08005141
 8004c00:	08005141 	.word	0x08005141
 8004c04:	08005141 	.word	0x08005141
 8004c08:	08005149 	.word	0x08005149
 8004c0c:	08005149 	.word	0x08005149
 8004c10:	08005149 	.word	0x08005149
 8004c14:	08005149 	.word	0x08005149
 8004c18:	08005151 	.word	0x08005151
 8004c1c:	08005151 	.word	0x08005151
 8004c20:	08005151 	.word	0x08005151
 8004c24:	08005151 	.word	0x08005151
 8004c28:	08005159 	.word	0x08005159
 8004c2c:	08005159 	.word	0x08005159
 8004c30:	08005159 	.word	0x08005159
 8004c34:	08005159 	.word	0x08005159
 8004c38:	08005161 	.word	0x08005161
 8004c3c:	08005161 	.word	0x08005161
 8004c40:	08005161 	.word	0x08005161
 8004c44:	08005161 	.word	0x08005161
 8004c48:	08005169 	.word	0x08005169
 8004c4c:	08005169 	.word	0x08005169
 8004c50:	08005169 	.word	0x08005169
 8004c54:	08005169 	.word	0x08005169
 8004c58:	08005171 	.word	0x08005171
 8004c5c:	08005171 	.word	0x08005171
 8004c60:	08005171 	.word	0x08005171
 8004c64:	08005171 	.word	0x08005171
 8004c68:	08005179 	.word	0x08005179
 8004c6c:	08005179 	.word	0x08005179
 8004c70:	08005179 	.word	0x08005179
 8004c74:	08005179 	.word	0x08005179
 8004c78:	08005181 	.word	0x08005181
 8004c7c:	08005181 	.word	0x08005181
 8004c80:	08005181 	.word	0x08005181
 8004c84:	08005181 	.word	0x08005181
 8004c88:	08005189 	.word	0x08005189
 8004c8c:	08005189 	.word	0x08005189
 8004c90:	08005189 	.word	0x08005189
 8004c94:	08005189 	.word	0x08005189
 8004c98:	08005191 	.word	0x08005191
 8004c9c:	08005191 	.word	0x08005191
 8004ca0:	08005191 	.word	0x08005191
 8004ca4:	08005191 	.word	0x08005191
 8004ca8:	08005199 	.word	0x08005199
 8004cac:	08005199 	.word	0x08005199
 8004cb0:	08005199 	.word	0x08005199
 8004cb4:	08005199 	.word	0x08005199
 8004cb8:	080051a1 	.word	0x080051a1
 8004cbc:	080051a1 	.word	0x080051a1
 8004cc0:	080051a1 	.word	0x080051a1
 8004cc4:	080051a1 	.word	0x080051a1
 8004cc8:	080051a9 	.word	0x080051a9
 8004ccc:	080051a9 	.word	0x080051a9
 8004cd0:	080051a9 	.word	0x080051a9
 8004cd4:	080051a9 	.word	0x080051a9
 8004cd8:	080051b1 	.word	0x080051b1
 8004cdc:	080051b1 	.word	0x080051b1
 8004ce0:	080051b1 	.word	0x080051b1
 8004ce4:	080051b1 	.word	0x080051b1
 8004ce8:	080051b9 	.word	0x080051b9
 8004cec:	080051b9 	.word	0x080051b9
 8004cf0:	080051b9 	.word	0x080051b9
 8004cf4:	080051b9 	.word	0x080051b9
 8004cf8:	080051c1 	.word	0x080051c1
 8004cfc:	080051c1 	.word	0x080051c1
 8004d00:	080051c1 	.word	0x080051c1
 8004d04:	080051c1 	.word	0x080051c1
 8004d08:	080051c9 	.word	0x080051c9
 8004d0c:	080051c9 	.word	0x080051c9
 8004d10:	080051c9 	.word	0x080051c9
 8004d14:	080051c9 	.word	0x080051c9
 8004d18:	080051d1 	.word	0x080051d1
 8004d1c:	080051d1 	.word	0x080051d1
 8004d20:	080051d1 	.word	0x080051d1
 8004d24:	080051d1 	.word	0x080051d1
 8004d28:	080051d9 	.word	0x080051d9
 8004d2c:	080051d9 	.word	0x080051d9
 8004d30:	080051d9 	.word	0x080051d9
 8004d34:	080051d9 	.word	0x080051d9
 8004d38:	080051e1 	.word	0x080051e1
 8004d3c:	080051e1 	.word	0x080051e1
 8004d40:	080051e1 	.word	0x080051e1
 8004d44:	080051e1 	.word	0x080051e1
 8004d48:	080051e9 	.word	0x080051e9
 8004d4c:	080051e9 	.word	0x080051e9
 8004d50:	080051e9 	.word	0x080051e9
 8004d54:	080051e9 	.word	0x080051e9
 8004d58:	080051f1 	.word	0x080051f1
 8004d5c:	080051f1 	.word	0x080051f1
 8004d60:	080051f1 	.word	0x080051f1
 8004d64:	080051f1 	.word	0x080051f1
 8004d68:	080051f9 	.word	0x080051f9
 8004d6c:	080051f9 	.word	0x080051f9
 8004d70:	080051f9 	.word	0x080051f9
 8004d74:	080051f9 	.word	0x080051f9
 8004d78:	08005201 	.word	0x08005201
 8004d7c:	08005201 	.word	0x08005201
 8004d80:	08005201 	.word	0x08005201
 8004d84:	08005201 	.word	0x08005201
 8004d88:	08005209 	.word	0x08005209
 8004d8c:	08005209 	.word	0x08005209
 8004d90:	08005209 	.word	0x08005209
 8004d94:	08005209 	.word	0x08005209
 8004d98:	08005211 	.word	0x08005211
 8004d9c:	08005211 	.word	0x08005211
 8004da0:	08005211 	.word	0x08005211
 8004da4:	08005211 	.word	0x08005211
 8004da8:	08005219 	.word	0x08005219
 8004dac:	08005219 	.word	0x08005219
 8004db0:	08005219 	.word	0x08005219
 8004db4:	08005219 	.word	0x08005219
 8004db8:	08005221 	.word	0x08005221
 8004dbc:	08005221 	.word	0x08005221
 8004dc0:	08005221 	.word	0x08005221
 8004dc4:	08005221 	.word	0x08005221
 8004dc8:	08005229 	.word	0x08005229
 8004dcc:	08005229 	.word	0x08005229
 8004dd0:	08005229 	.word	0x08005229
 8004dd4:	08005229 	.word	0x08005229
 8004dd8:	08005231 	.word	0x08005231
 8004ddc:	08005231 	.word	0x08005231
 8004de0:	08005231 	.word	0x08005231
 8004de4:	08005231 	.word	0x08005231
 8004de8:	08005239 	.word	0x08005239
 8004dec:	08005239 	.word	0x08005239
 8004df0:	08005239 	.word	0x08005239
 8004df4:	08005239 	.word	0x08005239
 8004df8:	08005241 	.word	0x08005241
 8004dfc:	08005241 	.word	0x08005241
 8004e00:	08005241 	.word	0x08005241
 8004e04:	08005241 	.word	0x08005241
 8004e08:	08005249 	.word	0x08005249
 8004e0c:	08005249 	.word	0x08005249
 8004e10:	08005249 	.word	0x08005249
 8004e14:	08005249 	.word	0x08005249
 8004e18:	08005251 	.word	0x08005251
 8004e1c:	08005251 	.word	0x08005251
 8004e20:	08005251 	.word	0x08005251
 8004e24:	08005251 	.word	0x08005251
 8004e28:	08005259 	.word	0x08005259
 8004e2c:	08005259 	.word	0x08005259
 8004e30:	08005259 	.word	0x08005259
 8004e34:	08005259 	.word	0x08005259
 8004e38:	08005261 	.word	0x08005261
 8004e3c:	08005261 	.word	0x08005261
 8004e40:	08005261 	.word	0x08005261
 8004e44:	08005261 	.word	0x08005261
 8004e48:	08005269 	.word	0x08005269
 8004e4c:	08005269 	.word	0x08005269
 8004e50:	08005269 	.word	0x08005269
 8004e54:	08005269 	.word	0x08005269
 8004e58:	08005271 	.word	0x08005271
 8004e5c:	08005271 	.word	0x08005271
 8004e60:	08005271 	.word	0x08005271
 8004e64:	08005271 	.word	0x08005271
 8004e68:	08005279 	.word	0x08005279
 8004e6c:	08005279 	.word	0x08005279
 8004e70:	08005279 	.word	0x08005279
 8004e74:	08005279 	.word	0x08005279
 8004e78:	08005281 	.word	0x08005281
 8004e7c:	08005281 	.word	0x08005281
 8004e80:	08005281 	.word	0x08005281
 8004e84:	08005281 	.word	0x08005281
 8004e88:	08005289 	.word	0x08005289
 8004e8c:	08005289 	.word	0x08005289
 8004e90:	08005289 	.word	0x08005289
 8004e94:	08005289 	.word	0x08005289
 8004e98:	08005291 	.word	0x08005291
 8004e9c:	08005291 	.word	0x08005291
 8004ea0:	08005291 	.word	0x08005291
 8004ea4:	08005291 	.word	0x08005291
 8004ea8:	08005299 	.word	0x08005299
 8004eac:	08005299 	.word	0x08005299
 8004eb0:	08005299 	.word	0x08005299
 8004eb4:	08005299 	.word	0x08005299
 8004eb8:	080052a1 	.word	0x080052a1
 8004ebc:	080052a1 	.word	0x080052a1
 8004ec0:	080052a1 	.word	0x080052a1
 8004ec4:	080052a1 	.word	0x080052a1
 8004ec8:	080052a9 	.word	0x080052a9
 8004ecc:	080052a9 	.word	0x080052a9
 8004ed0:	080052a9 	.word	0x080052a9
 8004ed4:	080052a9 	.word	0x080052a9
 8004ed8:	080052b1 	.word	0x080052b1
 8004edc:	080052b1 	.word	0x080052b1
 8004ee0:	080052b1 	.word	0x080052b1
 8004ee4:	080052b1 	.word	0x080052b1
 8004ee8:	080052b9 	.word	0x080052b9
 8004eec:	080052b9 	.word	0x080052b9
 8004ef0:	080052b9 	.word	0x080052b9
 8004ef4:	080052b9 	.word	0x080052b9
 8004ef8:	080052c1 	.word	0x080052c1
 8004efc:	080052c1 	.word	0x080052c1
 8004f00:	080052c1 	.word	0x080052c1
 8004f04:	080052c1 	.word	0x080052c1
 8004f08:	080052c9 	.word	0x080052c9
 8004f0c:	080052c9 	.word	0x080052c9
 8004f10:	080052c9 	.word	0x080052c9
 8004f14:	080052c9 	.word	0x080052c9
 8004f18:	080052d1 	.word	0x080052d1
 8004f1c:	080052d1 	.word	0x080052d1
 8004f20:	080052d1 	.word	0x080052d1
 8004f24:	080052d1 	.word	0x080052d1
 8004f28:	080052d9 	.word	0x080052d9
 8004f2c:	080052d9 	.word	0x080052d9
 8004f30:	080052d9 	.word	0x080052d9
 8004f34:	080052d9 	.word	0x080052d9
 8004f38:	080052e1 	.word	0x080052e1
 8004f3c:	080052e1 	.word	0x080052e1
 8004f40:	080052e1 	.word	0x080052e1
 8004f44:	080052e1 	.word	0x080052e1
 8004f48:	080052e9 	.word	0x080052e9
 8004f4c:	080052e9 	.word	0x080052e9
 8004f50:	080052e9 	.word	0x080052e9
 8004f54:	080052e9 	.word	0x080052e9
 8004f58:	080052f1 	.word	0x080052f1
 8004f5c:	080052f1 	.word	0x080052f1
 8004f60:	080052f1 	.word	0x080052f1
 8004f64:	080052f1 	.word	0x080052f1
 8004f68:	080052f9 	.word	0x080052f9
 8004f6c:	080052f9 	.word	0x080052f9
 8004f70:	080052f9 	.word	0x080052f9
 8004f74:	080052f9 	.word	0x080052f9
 8004f78:	08005301 	.word	0x08005301
 8004f7c:	08005301 	.word	0x08005301
 8004f80:	08005301 	.word	0x08005301
 8004f84:	08005301 	.word	0x08005301
 8004f88:	08005309 	.word	0x08005309
 8004f8c:	08005309 	.word	0x08005309
 8004f90:	08005309 	.word	0x08005309
 8004f94:	08005309 	.word	0x08005309
 8004f98:	08005311 	.word	0x08005311
 8004f9c:	08005311 	.word	0x08005311
 8004fa0:	08005311 	.word	0x08005311
 8004fa4:	08005311 	.word	0x08005311
 8004fa8:	08005319 	.word	0x08005319
 8004fac:	08005319 	.word	0x08005319
 8004fb0:	08005319 	.word	0x08005319
 8004fb4:	08005319 	.word	0x08005319
 8004fb8:	08005321 	.word	0x08005321
 8004fbc:	08005321 	.word	0x08005321
 8004fc0:	08005321 	.word	0x08005321
 8004fc4:	08005321 	.word	0x08005321
 8004fc8:	08005329 	.word	0x08005329
 8004fcc:	08005329 	.word	0x08005329
 8004fd0:	08005329 	.word	0x08005329
 8004fd4:	08005329 	.word	0x08005329
 8004fd8:	08005331 	.word	0x08005331
 8004fdc:	08005331 	.word	0x08005331
 8004fe0:	08005331 	.word	0x08005331
 8004fe4:	08005331 	.word	0x08005331
 8004fe8:	08005339 	.word	0x08005339
 8004fec:	08005339 	.word	0x08005339
 8004ff0:	08005339 	.word	0x08005339
 8004ff4:	08005339 	.word	0x08005339
 8004ff8:	08005341 	.word	0x08005341
 8004ffc:	08005341 	.word	0x08005341
 8005000:	08005341 	.word	0x08005341
 8005004:	08005341 	.word	0x08005341
 8005008:	08005349 	.word	0x08005349
 800500c:	08005349 	.word	0x08005349
 8005010:	08005349 	.word	0x08005349
 8005014:	08005349 	.word	0x08005349
 8005018:	08005351 	.word	0x08005351
 800501c:	08005351 	.word	0x08005351
 8005020:	08005351 	.word	0x08005351
 8005024:	08005351 	.word	0x08005351
 8005028:	08005359 	.word	0x08005359
 800502c:	08005359 	.word	0x08005359
 8005030:	08005359 	.word	0x08005359
 8005034:	08005359 	.word	0x08005359
 8005038:	08005361 	.word	0x08005361
 800503c:	08005361 	.word	0x08005361
 8005040:	08005361 	.word	0x08005361
 8005044:	08005361 	.word	0x08005361
 8005048:	08005369 	.word	0x08005369
 800504c:	08005369 	.word	0x08005369
 8005050:	08005369 	.word	0x08005369
 8005054:	08005369 	.word	0x08005369
 8005058:	08005371 	.word	0x08005371
 800505c:	08005371 	.word	0x08005371
 8005060:	08005371 	.word	0x08005371
 8005064:	08005371 	.word	0x08005371
	{
		case 0	:
		case 1	:
		case 2	:
			VPP_ApplyPresetToSignal( VPP01 );
 8005068:	2000      	movs	r0, #0
 800506a:	f7ff fb89 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800506e:	e184      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 3	:
		case 4	:
		case 5	:
		case 6	:
			VPP_ApplyPresetToSignal( VPP02	);
 8005070:	2001      	movs	r0, #1
 8005072:	f7ff fb85 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005076:	e180      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 7	:
		case 8	:
		case 9	:
		case 10	:
			VPP_ApplyPresetToSignal( VPP03	);
 8005078:	2002      	movs	r0, #2
 800507a:	f7ff fb81 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800507e:	e17c      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 11	:
		case 12	:
		case 13	:
		case 14	:
			VPP_ApplyPresetToSignal( VPP04	);
 8005080:	2003      	movs	r0, #3
 8005082:	f7ff fb7d 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005086:	e178      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 15	:
		case 16	:
		case 17	:
		case 18	:
			VPP_ApplyPresetToSignal( VPP05	);
 8005088:	2004      	movs	r0, #4
 800508a:	f7ff fb79 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800508e:	e174      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 19	:
		case 20	:
		case 21	:
		case 22	:
			VPP_ApplyPresetToSignal( VPP06	);
 8005090:	2005      	movs	r0, #5
 8005092:	f7ff fb75 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005096:	e170      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 23	:
		case 24	:
		case 25	:
		case 26	:
			VPP_ApplyPresetToSignal( VPP07	);
 8005098:	2006      	movs	r0, #6
 800509a:	f7ff fb71 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800509e:	e16c      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 27	:
		case 28	:
		case 29	:
		case 30	:
			VPP_ApplyPresetToSignal( VPP08	);
 80050a0:	2007      	movs	r0, #7
 80050a2:	f7ff fb6d 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80050a6:	e168      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 31	:
		case 32	:
		case 33	:
		case 34	:
			VPP_ApplyPresetToSignal( VPP09	);
 80050a8:	2008      	movs	r0, #8
 80050aa:	f7ff fb69 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80050ae:	e164      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 35	:
		case 36	:
		case 37	:
		case 38	:
			VPP_ApplyPresetToSignal( VPP10	);
 80050b0:	2009      	movs	r0, #9
 80050b2:	f7ff fb65 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80050b6:	e160      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 39	:
		case 40	:
		case 41	:
		case 42	:
			VPP_ApplyPresetToSignal( VPP11	);
 80050b8:	200a      	movs	r0, #10
 80050ba:	f7ff fb61 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80050be:	e15c      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 43	:
		case 44	:
		case 45	:
		case 46	:
			VPP_ApplyPresetToSignal( VPP12	);
 80050c0:	200b      	movs	r0, #11
 80050c2:	f7ff fb5d 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80050c6:	e158      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 47	:
		case 48	:
		case 49	:
		case 50	:
			VPP_ApplyPresetToSignal( VPP13	);
 80050c8:	200c      	movs	r0, #12
 80050ca:	f7ff fb59 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80050ce:	e154      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 51	:
		case 52	:
		case 53	:
		case 54	:
			VPP_ApplyPresetToSignal( VPP14	);
 80050d0:	200d      	movs	r0, #13
 80050d2:	f7ff fb55 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80050d6:	e150      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 55	:
		case 56	:
		case 57	:
		case 58	:
			VPP_ApplyPresetToSignal( VPP15	);
 80050d8:	200e      	movs	r0, #14
 80050da:	f7ff fb51 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80050de:	e14c      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 59	:
		case 60	:
		case 61	:
		case 62	:
			VPP_ApplyPresetToSignal( VPP16	);
 80050e0:	200f      	movs	r0, #15
 80050e2:	f7ff fb4d 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80050e6:	e148      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 63	:
		case 64	:
		case 65	:
		case 66	:
			VPP_ApplyPresetToSignal( VPP17	);
 80050e8:	2010      	movs	r0, #16
 80050ea:	f7ff fb49 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80050ee:	e144      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 67	:
		case 68	:
		case 69	:
		case 70	:
			VPP_ApplyPresetToSignal( VPP18	);
 80050f0:	2011      	movs	r0, #17
 80050f2:	f7ff fb45 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80050f6:	e140      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 71	:
		case 72	:
		case 73	:
		case 74	:
			VPP_ApplyPresetToSignal( VPP19	);
 80050f8:	2012      	movs	r0, #18
 80050fa:	f7ff fb41 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80050fe:	e13c      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 75	:
		case 76	:
		case 77	:
		case 78	:
			VPP_ApplyPresetToSignal( VPP20	);
 8005100:	2013      	movs	r0, #19
 8005102:	f7ff fb3d 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005106:	e138      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 79	:
		case 80	:
		case 81	:
		case 82	:
			VPP_ApplyPresetToSignal( VPP21	);
 8005108:	2014      	movs	r0, #20
 800510a:	f7ff fb39 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800510e:	e134      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 83	:
		case 84	:
		case 85	:
		case 86	:
			VPP_ApplyPresetToSignal( VPP22	);
 8005110:	2015      	movs	r0, #21
 8005112:	f7ff fb35 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005116:	e130      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 87	:
		case 88	:
		case 89	:
		case 90	:
			VPP_ApplyPresetToSignal( VPP23	);
 8005118:	2016      	movs	r0, #22
 800511a:	f7ff fb31 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800511e:	e12c      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 91	:
		case 92	:
		case 93	:
		case 94	:
			VPP_ApplyPresetToSignal( VPP24	);
 8005120:	2017      	movs	r0, #23
 8005122:	f7ff fb2d 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005126:	e128      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 95	:
		case 96	:
		case 97	:
		case 98	:
			VPP_ApplyPresetToSignal( VPP25	);
 8005128:	2018      	movs	r0, #24
 800512a:	f7ff fb29 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800512e:	e124      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 99		:
		case 100	:
		case 101	:
		case 102	:
			VPP_ApplyPresetToSignal( VPP26	);
 8005130:	2019      	movs	r0, #25
 8005132:	f7ff fb25 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005136:	e120      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 103	:
		case 104	:
		case 105	:
		case 106	:
			VPP_ApplyPresetToSignal( VPP27	);
 8005138:	201a      	movs	r0, #26
 800513a:	f7ff fb21 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800513e:	e11c      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 107	:
		case 108	:
		case 109	:
		case 110	:
			VPP_ApplyPresetToSignal( VPP28	);
 8005140:	201b      	movs	r0, #27
 8005142:	f7ff fb1d 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005146:	e118      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 111	:
		case 112	:
		case 113	:
		case 114	:
			VPP_ApplyPresetToSignal( VPP29	);
 8005148:	201c      	movs	r0, #28
 800514a:	f7ff fb19 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800514e:	e114      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 115	:
		case 116	:
		case 117	:
		case 118	:
			VPP_ApplyPresetToSignal( VPP30	);
 8005150:	201d      	movs	r0, #29
 8005152:	f7ff fb15 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005156:	e110      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 119	:
		case 120	:
		case 121	:
		case 122	:
			VPP_ApplyPresetToSignal( VPP31	);
 8005158:	201e      	movs	r0, #30
 800515a:	f7ff fb11 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800515e:	e10c      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 123	:
		case 124	:
		case 125	:
		case 126	:
			VPP_ApplyPresetToSignal( VPP32	);
 8005160:	201f      	movs	r0, #31
 8005162:	f7ff fb0d 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005166:	e108      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 127	:
		case 128	:
		case 129	:
		case 130	:
			VPP_ApplyPresetToSignal( VPP33	);
 8005168:	2020      	movs	r0, #32
 800516a:	f7ff fb09 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800516e:	e104      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 131	:
		case 132	:
		case 133	:
		case 134	:
			VPP_ApplyPresetToSignal( VPP34	);
 8005170:	2021      	movs	r0, #33	; 0x21
 8005172:	f7ff fb05 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005176:	e100      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 135	:
		case 136	:
		case 137	:
		case 138	:
			VPP_ApplyPresetToSignal( VPP35	);
 8005178:	2022      	movs	r0, #34	; 0x22
 800517a:	f7ff fb01 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800517e:	e0fc      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 139	:
		case 140	:
		case 141	:
		case 142	:
			VPP_ApplyPresetToSignal( VPP36	);
 8005180:	2023      	movs	r0, #35	; 0x23
 8005182:	f7ff fafd 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005186:	e0f8      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 143	:
		case 144	:
		case 145	:
		case 146	:
			VPP_ApplyPresetToSignal( VPP37	);
 8005188:	2024      	movs	r0, #36	; 0x24
 800518a:	f7ff faf9 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800518e:	e0f4      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 147	:
		case 148	:
		case 149	:
		case 150	:
			VPP_ApplyPresetToSignal( VPP38	);
 8005190:	2025      	movs	r0, #37	; 0x25
 8005192:	f7ff faf5 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005196:	e0f0      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 151	:
		case 152	:
		case 153	:
		case 154	:
			VPP_ApplyPresetToSignal( VPP39	);
 8005198:	2026      	movs	r0, #38	; 0x26
 800519a:	f7ff faf1 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800519e:	e0ec      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 155	:
		case 156	:
		case 157	:
		case 158	:
			VPP_ApplyPresetToSignal( VPP40	);
 80051a0:	2027      	movs	r0, #39	; 0x27
 80051a2:	f7ff faed 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80051a6:	e0e8      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 159	:
		case 160	:
		case 161	:
		case 162	:
			VPP_ApplyPresetToSignal( VPP41	);
 80051a8:	2028      	movs	r0, #40	; 0x28
 80051aa:	f7ff fae9 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80051ae:	e0e4      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 163	:
		case 164	:
		case 165	:
		case 166	:
			VPP_ApplyPresetToSignal( VPP42	);
 80051b0:	2029      	movs	r0, #41	; 0x29
 80051b2:	f7ff fae5 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80051b6:	e0e0      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 167	:
		case 168	:
		case 169	:
		case 170	:
			VPP_ApplyPresetToSignal( VPP43	);
 80051b8:	202a      	movs	r0, #42	; 0x2a
 80051ba:	f7ff fae1 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80051be:	e0dc      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 171	:
		case 172	:
		case 173	:
		case 174	:
			VPP_ApplyPresetToSignal( VPP44	);
 80051c0:	202b      	movs	r0, #43	; 0x2b
 80051c2:	f7ff fadd 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80051c6:	e0d8      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 175	:
		case 176	:
		case 177	:
		case 178	:
			VPP_ApplyPresetToSignal( VPP45	);
 80051c8:	202c      	movs	r0, #44	; 0x2c
 80051ca:	f7ff fad9 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80051ce:	e0d4      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 179	:
		case 180	:
		case 181	:
		case 182	:
			VPP_ApplyPresetToSignal( VPP46	);
 80051d0:	202d      	movs	r0, #45	; 0x2d
 80051d2:	f7ff fad5 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80051d6:	e0d0      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 183	:
		case 184	:
		case 185	:
		case 186	:
			VPP_ApplyPresetToSignal( VPP47	);
 80051d8:	202e      	movs	r0, #46	; 0x2e
 80051da:	f7ff fad1 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80051de:	e0cc      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 187	:
		case 188	:
		case 189	:
		case 190	:
			VPP_ApplyPresetToSignal( VPP48	);
 80051e0:	202f      	movs	r0, #47	; 0x2f
 80051e2:	f7ff facd 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80051e6:	e0c8      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 191	:
		case 192	:
		case 193	:
		case 194	:
			VPP_ApplyPresetToSignal( VPP49	);
 80051e8:	2030      	movs	r0, #48	; 0x30
 80051ea:	f7ff fac9 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80051ee:	e0c4      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 195	:
		case 196	:
		case 197	:
		case 198	:
			VPP_ApplyPresetToSignal( VPP50	);
 80051f0:	2031      	movs	r0, #49	; 0x31
 80051f2:	f7ff fac5 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80051f6:	e0c0      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 199	:
		case 200	:
		case 201	:
		case 202	:
			VPP_ApplyPresetToSignal( VPP51	);
 80051f8:	2032      	movs	r0, #50	; 0x32
 80051fa:	f7ff fac1 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80051fe:	e0bc      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 203	:
		case 204	:
		case 205	:
		case 206	:
			VPP_ApplyPresetToSignal( VPP52	);
 8005200:	2033      	movs	r0, #51	; 0x33
 8005202:	f7ff fabd 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005206:	e0b8      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 207	:
		case 208	:
		case 209	:
		case 210	:
			VPP_ApplyPresetToSignal( VPP53	);
 8005208:	2034      	movs	r0, #52	; 0x34
 800520a:	f7ff fab9 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800520e:	e0b4      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 211	:
		case 212	:
		case 213	:
		case 214	:
			VPP_ApplyPresetToSignal( VPP54	);
 8005210:	2035      	movs	r0, #53	; 0x35
 8005212:	f7ff fab5 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005216:	e0b0      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 215	:
		case 216	:
		case 217	:
		case 218	:
			VPP_ApplyPresetToSignal( VPP55	);
 8005218:	2036      	movs	r0, #54	; 0x36
 800521a:	f7ff fab1 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800521e:	e0ac      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 219	:
		case 220	:
		case 221	:
		case 222	:
			VPP_ApplyPresetToSignal( VPP56	);
 8005220:	2037      	movs	r0, #55	; 0x37
 8005222:	f7ff faad 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005226:	e0a8      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 223	:
		case 224	:
		case 225	:
		case 226	:
			VPP_ApplyPresetToSignal( VPP57	);
 8005228:	2038      	movs	r0, #56	; 0x38
 800522a:	f7ff faa9 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800522e:	e0a4      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 227	:
		case 228	:
		case 229	:
		case 230	:
			VPP_ApplyPresetToSignal( VPP58	);
 8005230:	2039      	movs	r0, #57	; 0x39
 8005232:	f7ff faa5 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005236:	e0a0      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 231	:
		case 232	:
		case 233	:
		case 234	:
			VPP_ApplyPresetToSignal( VPP59	);
 8005238:	203a      	movs	r0, #58	; 0x3a
 800523a:	f7ff faa1 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800523e:	e09c      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 235	:
		case 236	:
		case 237	:
		case 238	:
			VPP_ApplyPresetToSignal( VPP60	);
 8005240:	203b      	movs	r0, #59	; 0x3b
 8005242:	f7ff fa9d 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005246:	e098      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 239	:
		case 240	:
		case 241	:
		case 242	:
			VPP_ApplyPresetToSignal( VPP61	);
 8005248:	203c      	movs	r0, #60	; 0x3c
 800524a:	f7ff fa99 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800524e:	e094      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 243	:
		case 244	:
		case 245	:
		case 246	:
			VPP_ApplyPresetToSignal( VPP62	);
 8005250:	203d      	movs	r0, #61	; 0x3d
 8005252:	f7ff fa95 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005256:	e090      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 247	:
		case 248	:
		case 249	:
		case 250	:
			VPP_ApplyPresetToSignal( VPP63	);
 8005258:	203e      	movs	r0, #62	; 0x3e
 800525a:	f7ff fa91 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800525e:	e08c      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 251	:
		case 252	:
		case 253	:
		case 254	:
			VPP_ApplyPresetToSignal( VPP64	);
 8005260:	203f      	movs	r0, #63	; 0x3f
 8005262:	f7ff fa8d 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005266:	e088      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 255	:
		case 256	:
		case 257	:
		case 258	:
			VPP_ApplyPresetToSignal( VPP65	);
 8005268:	2040      	movs	r0, #64	; 0x40
 800526a:	f7ff fa89 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800526e:	e084      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 259	:
		case 260	:
		case 261	:
		case 262	:
			VPP_ApplyPresetToSignal( VPP66	);
 8005270:	2041      	movs	r0, #65	; 0x41
 8005272:	f7ff fa85 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005276:	e080      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 263	:
		case 264	:
		case 265	:
		case 266	:
			VPP_ApplyPresetToSignal( VPP67	);
 8005278:	2042      	movs	r0, #66	; 0x42
 800527a:	f7ff fa81 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800527e:	e07c      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 267	:
		case 268	:
		case 269	:
		case 270	:
			VPP_ApplyPresetToSignal( VPP68	);
 8005280:	2043      	movs	r0, #67	; 0x43
 8005282:	f7ff fa7d 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005286:	e078      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 271	:
		case 272	:
		case 273	:
		case 274	:
			VPP_ApplyPresetToSignal( VPP69	);
 8005288:	2044      	movs	r0, #68	; 0x44
 800528a:	f7ff fa79 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800528e:	e074      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 275	:
		case 276	:
		case 277	:
		case 278	:
			VPP_ApplyPresetToSignal( VPP70	);
 8005290:	2045      	movs	r0, #69	; 0x45
 8005292:	f7ff fa75 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005296:	e070      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 279	:
		case 280	:
		case 281	:
		case 282	:
			VPP_ApplyPresetToSignal( VPP71	);
 8005298:	2046      	movs	r0, #70	; 0x46
 800529a:	f7ff fa71 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800529e:	e06c      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 283	:
		case 284	:
		case 285	:
		case 286	:
			VPP_ApplyPresetToSignal( VPP72	);
 80052a0:	2047      	movs	r0, #71	; 0x47
 80052a2:	f7ff fa6d 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80052a6:	e068      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 287	:
		case 288	:
		case 289	:
		case 290	:
			VPP_ApplyPresetToSignal( VPP73	);
 80052a8:	2048      	movs	r0, #72	; 0x48
 80052aa:	f7ff fa69 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80052ae:	e064      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 291	:
		case 292	:
		case 293	:
		case 294	:
			VPP_ApplyPresetToSignal( VPP74	);
 80052b0:	2049      	movs	r0, #73	; 0x49
 80052b2:	f7ff fa65 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80052b6:	e060      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 295	:
		case 296	:
		case 297	:
		case 298	:
			VPP_ApplyPresetToSignal( VPP75	);
 80052b8:	204a      	movs	r0, #74	; 0x4a
 80052ba:	f7ff fa61 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80052be:	e05c      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 299	:
		case 300	:
		case 301	:
		case 302	:
			VPP_ApplyPresetToSignal( VPP76	);
 80052c0:	204b      	movs	r0, #75	; 0x4b
 80052c2:	f7ff fa5d 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80052c6:	e058      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 303	:
		case 304	:
		case 305	:
		case 306	:
			VPP_ApplyPresetToSignal( VPP77	);
 80052c8:	204c      	movs	r0, #76	; 0x4c
 80052ca:	f7ff fa59 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80052ce:	e054      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 307	:
		case 308	:
		case 309	:
		case 310	:
			VPP_ApplyPresetToSignal( VPP78	);
 80052d0:	204d      	movs	r0, #77	; 0x4d
 80052d2:	f7ff fa55 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80052d6:	e050      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 311	:
		case 312	:
		case 313	:
		case 314	:
			VPP_ApplyPresetToSignal( VPP79	);
 80052d8:	204e      	movs	r0, #78	; 0x4e
 80052da:	f7ff fa51 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80052de:	e04c      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 315	:
		case 316	:
		case 317	:
		case 318	:
			VPP_ApplyPresetToSignal( VPP80	);
 80052e0:	204f      	movs	r0, #79	; 0x4f
 80052e2:	f7ff fa4d 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80052e6:	e048      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 319	:
		case 320	:
		case 321	:
		case 322	:
			VPP_ApplyPresetToSignal( VPP81	);
 80052e8:	2050      	movs	r0, #80	; 0x50
 80052ea:	f7ff fa49 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80052ee:	e044      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 323	:
		case 324	:
		case 325	:
		case 326	:
			VPP_ApplyPresetToSignal( VPP82	);
 80052f0:	2051      	movs	r0, #81	; 0x51
 80052f2:	f7ff fa45 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80052f6:	e040      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 327	:
		case 328	:
		case 329	:
		case 330	:
			VPP_ApplyPresetToSignal( VPP83	);
 80052f8:	2052      	movs	r0, #82	; 0x52
 80052fa:	f7ff fa41 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 80052fe:	e03c      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 331	:
		case 332	:
		case 333	:
		case 334	:
			VPP_ApplyPresetToSignal( VPP84	);
 8005300:	2053      	movs	r0, #83	; 0x53
 8005302:	f7ff fa3d 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005306:	e038      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 335	:
		case 336	:
		case 337	:
		case 338	:
			VPP_ApplyPresetToSignal( VPP85	);
 8005308:	2054      	movs	r0, #84	; 0x54
 800530a:	f7ff fa39 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800530e:	e034      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 339	:
		case 340	:
		case 341	:
		case 342	:
			VPP_ApplyPresetToSignal( VPP86	);
 8005310:	2055      	movs	r0, #85	; 0x55
 8005312:	f7ff fa35 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005316:	e030      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 343	:
		case 344	:
		case 345	:
		case 346	:
			VPP_ApplyPresetToSignal( VPP87	);
 8005318:	2056      	movs	r0, #86	; 0x56
 800531a:	f7ff fa31 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800531e:	e02c      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 347	:
		case 348	:
		case 349	:
		case 350	:
			VPP_ApplyPresetToSignal( VPP88	);
 8005320:	2057      	movs	r0, #87	; 0x57
 8005322:	f7ff fa2d 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005326:	e028      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 351	:
		case 352	:
		case 353	:
		case 354	:
			VPP_ApplyPresetToSignal( VPP89	);
 8005328:	2058      	movs	r0, #88	; 0x58
 800532a:	f7ff fa29 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800532e:	e024      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 355	:
		case 356	:
		case 357	:
		case 358	:
			VPP_ApplyPresetToSignal( VPP90	);
 8005330:	2059      	movs	r0, #89	; 0x59
 8005332:	f7ff fa25 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005336:	e020      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 359	:
		case 360	:
		case 361	:
		case 362	:
			VPP_ApplyPresetToSignal( VPP91	);
 8005338:	205a      	movs	r0, #90	; 0x5a
 800533a:	f7ff fa21 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800533e:	e01c      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 363	:
		case 364	:
		case 365	:
		case 366	:
			VPP_ApplyPresetToSignal( VPP92	);
 8005340:	205b      	movs	r0, #91	; 0x5b
 8005342:	f7ff fa1d 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005346:	e018      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 367	:
		case 368	:
		case 369	:
		case 370	:
			VPP_ApplyPresetToSignal( VPP93	);
 8005348:	205c      	movs	r0, #92	; 0x5c
 800534a:	f7ff fa19 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800534e:	e014      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 371	:
		case 372	:
		case 373	:
		case 374	:
			VPP_ApplyPresetToSignal( VPP94	);
 8005350:	205d      	movs	r0, #93	; 0x5d
 8005352:	f7ff fa15 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005356:	e010      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 375	:
		case 376	:
		case 377	:
		case 378	:
			VPP_ApplyPresetToSignal( VPP95	);
 8005358:	205e      	movs	r0, #94	; 0x5e
 800535a:	f7ff fa11 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800535e:	e00c      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 379	:
		case 380	:
		case 381	:
		case 382	:
			VPP_ApplyPresetToSignal( VPP96	);
 8005360:	205f      	movs	r0, #95	; 0x5f
 8005362:	f7ff fa0d 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005366:	e008      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 383	:
		case 384	:
		case 385	:
		case 386	:
			VPP_ApplyPresetToSignal( VPP97	);
 8005368:	2060      	movs	r0, #96	; 0x60
 800536a:	f7ff fa09 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 800536e:	e004      	b.n	800537a <VPP_ModifySignalOutput+0x94a>
		case 387	:
		case 388	:
		case 389	:
		case 390	:
			VPP_ApplyPresetToSignal( VPP98	);
 8005370:	2061      	movs	r0, #97	; 0x61
 8005372:	f7ff fa05 	bl	8004780 <VPP_ApplyPresetToSignal>
			break;
 8005376:	e000      	b.n	800537a <VPP_ModifySignalOutput+0x94a>

		default:
			break;
 8005378:	bf00      	nop
	}
}
 800537a:	bf00      	nop
 800537c:	3708      	adds	r7, #8
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop

08005384 <VPP_ModifySyncOutput>:

 *	@retval None
 *
 */
void VPP_ModifySyncOutput(uint16_t pEncoderValue)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	4603      	mov	r3, r0
 800538c:	80fb      	strh	r3, [r7, #6]
	switch(pEncoderValue)
 800538e:	88fb      	ldrh	r3, [r7, #6]
 8005390:	f5b3 7fc3 	cmp.w	r3, #390	; 0x186
 8005394:	f200 849a 	bhi.w	8005ccc <VPP_ModifySyncOutput+0x948>
 8005398:	a201      	add	r2, pc, #4	; (adr r2, 80053a0 <VPP_ModifySyncOutput+0x1c>)
 800539a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800539e:	bf00      	nop
 80053a0:	080059bd 	.word	0x080059bd
 80053a4:	080059bd 	.word	0x080059bd
 80053a8:	080059bd 	.word	0x080059bd
 80053ac:	080059c5 	.word	0x080059c5
 80053b0:	080059c5 	.word	0x080059c5
 80053b4:	080059c5 	.word	0x080059c5
 80053b8:	080059c5 	.word	0x080059c5
 80053bc:	080059cd 	.word	0x080059cd
 80053c0:	080059cd 	.word	0x080059cd
 80053c4:	080059cd 	.word	0x080059cd
 80053c8:	080059cd 	.word	0x080059cd
 80053cc:	080059d5 	.word	0x080059d5
 80053d0:	080059d5 	.word	0x080059d5
 80053d4:	080059d5 	.word	0x080059d5
 80053d8:	080059d5 	.word	0x080059d5
 80053dc:	080059dd 	.word	0x080059dd
 80053e0:	080059dd 	.word	0x080059dd
 80053e4:	080059dd 	.word	0x080059dd
 80053e8:	080059dd 	.word	0x080059dd
 80053ec:	080059e5 	.word	0x080059e5
 80053f0:	080059e5 	.word	0x080059e5
 80053f4:	080059e5 	.word	0x080059e5
 80053f8:	080059e5 	.word	0x080059e5
 80053fc:	080059ed 	.word	0x080059ed
 8005400:	080059ed 	.word	0x080059ed
 8005404:	080059ed 	.word	0x080059ed
 8005408:	080059ed 	.word	0x080059ed
 800540c:	080059f5 	.word	0x080059f5
 8005410:	080059f5 	.word	0x080059f5
 8005414:	080059f5 	.word	0x080059f5
 8005418:	080059f5 	.word	0x080059f5
 800541c:	080059fd 	.word	0x080059fd
 8005420:	080059fd 	.word	0x080059fd
 8005424:	080059fd 	.word	0x080059fd
 8005428:	080059fd 	.word	0x080059fd
 800542c:	08005a05 	.word	0x08005a05
 8005430:	08005a05 	.word	0x08005a05
 8005434:	08005a05 	.word	0x08005a05
 8005438:	08005a05 	.word	0x08005a05
 800543c:	08005a0d 	.word	0x08005a0d
 8005440:	08005a0d 	.word	0x08005a0d
 8005444:	08005a0d 	.word	0x08005a0d
 8005448:	08005a0d 	.word	0x08005a0d
 800544c:	08005a15 	.word	0x08005a15
 8005450:	08005a15 	.word	0x08005a15
 8005454:	08005a15 	.word	0x08005a15
 8005458:	08005a15 	.word	0x08005a15
 800545c:	08005a1d 	.word	0x08005a1d
 8005460:	08005a1d 	.word	0x08005a1d
 8005464:	08005a1d 	.word	0x08005a1d
 8005468:	08005a1d 	.word	0x08005a1d
 800546c:	08005a25 	.word	0x08005a25
 8005470:	08005a25 	.word	0x08005a25
 8005474:	08005a25 	.word	0x08005a25
 8005478:	08005a25 	.word	0x08005a25
 800547c:	08005a2d 	.word	0x08005a2d
 8005480:	08005a2d 	.word	0x08005a2d
 8005484:	08005a2d 	.word	0x08005a2d
 8005488:	08005a2d 	.word	0x08005a2d
 800548c:	08005a35 	.word	0x08005a35
 8005490:	08005a35 	.word	0x08005a35
 8005494:	08005a35 	.word	0x08005a35
 8005498:	08005a35 	.word	0x08005a35
 800549c:	08005a3d 	.word	0x08005a3d
 80054a0:	08005a3d 	.word	0x08005a3d
 80054a4:	08005a3d 	.word	0x08005a3d
 80054a8:	08005a3d 	.word	0x08005a3d
 80054ac:	08005a45 	.word	0x08005a45
 80054b0:	08005a45 	.word	0x08005a45
 80054b4:	08005a45 	.word	0x08005a45
 80054b8:	08005a45 	.word	0x08005a45
 80054bc:	08005a4d 	.word	0x08005a4d
 80054c0:	08005a4d 	.word	0x08005a4d
 80054c4:	08005a4d 	.word	0x08005a4d
 80054c8:	08005a4d 	.word	0x08005a4d
 80054cc:	08005a55 	.word	0x08005a55
 80054d0:	08005a55 	.word	0x08005a55
 80054d4:	08005a55 	.word	0x08005a55
 80054d8:	08005a55 	.word	0x08005a55
 80054dc:	08005a5d 	.word	0x08005a5d
 80054e0:	08005a5d 	.word	0x08005a5d
 80054e4:	08005a5d 	.word	0x08005a5d
 80054e8:	08005a5d 	.word	0x08005a5d
 80054ec:	08005a65 	.word	0x08005a65
 80054f0:	08005a65 	.word	0x08005a65
 80054f4:	08005a65 	.word	0x08005a65
 80054f8:	08005a65 	.word	0x08005a65
 80054fc:	08005a6d 	.word	0x08005a6d
 8005500:	08005a6d 	.word	0x08005a6d
 8005504:	08005a6d 	.word	0x08005a6d
 8005508:	08005a6d 	.word	0x08005a6d
 800550c:	08005a75 	.word	0x08005a75
 8005510:	08005a75 	.word	0x08005a75
 8005514:	08005a75 	.word	0x08005a75
 8005518:	08005a75 	.word	0x08005a75
 800551c:	08005a7d 	.word	0x08005a7d
 8005520:	08005a7d 	.word	0x08005a7d
 8005524:	08005a7d 	.word	0x08005a7d
 8005528:	08005a7d 	.word	0x08005a7d
 800552c:	08005a85 	.word	0x08005a85
 8005530:	08005a85 	.word	0x08005a85
 8005534:	08005a85 	.word	0x08005a85
 8005538:	08005a85 	.word	0x08005a85
 800553c:	08005a8d 	.word	0x08005a8d
 8005540:	08005a8d 	.word	0x08005a8d
 8005544:	08005a8d 	.word	0x08005a8d
 8005548:	08005a8d 	.word	0x08005a8d
 800554c:	08005a95 	.word	0x08005a95
 8005550:	08005a95 	.word	0x08005a95
 8005554:	08005a95 	.word	0x08005a95
 8005558:	08005a95 	.word	0x08005a95
 800555c:	08005a9d 	.word	0x08005a9d
 8005560:	08005a9d 	.word	0x08005a9d
 8005564:	08005a9d 	.word	0x08005a9d
 8005568:	08005a9d 	.word	0x08005a9d
 800556c:	08005aa5 	.word	0x08005aa5
 8005570:	08005aa5 	.word	0x08005aa5
 8005574:	08005aa5 	.word	0x08005aa5
 8005578:	08005aa5 	.word	0x08005aa5
 800557c:	08005aad 	.word	0x08005aad
 8005580:	08005aad 	.word	0x08005aad
 8005584:	08005aad 	.word	0x08005aad
 8005588:	08005aad 	.word	0x08005aad
 800558c:	08005ab5 	.word	0x08005ab5
 8005590:	08005ab5 	.word	0x08005ab5
 8005594:	08005ab5 	.word	0x08005ab5
 8005598:	08005ab5 	.word	0x08005ab5
 800559c:	08005abd 	.word	0x08005abd
 80055a0:	08005abd 	.word	0x08005abd
 80055a4:	08005abd 	.word	0x08005abd
 80055a8:	08005abd 	.word	0x08005abd
 80055ac:	08005ac5 	.word	0x08005ac5
 80055b0:	08005ac5 	.word	0x08005ac5
 80055b4:	08005ac5 	.word	0x08005ac5
 80055b8:	08005ac5 	.word	0x08005ac5
 80055bc:	08005acd 	.word	0x08005acd
 80055c0:	08005acd 	.word	0x08005acd
 80055c4:	08005acd 	.word	0x08005acd
 80055c8:	08005acd 	.word	0x08005acd
 80055cc:	08005ad5 	.word	0x08005ad5
 80055d0:	08005ad5 	.word	0x08005ad5
 80055d4:	08005ad5 	.word	0x08005ad5
 80055d8:	08005ad5 	.word	0x08005ad5
 80055dc:	08005add 	.word	0x08005add
 80055e0:	08005add 	.word	0x08005add
 80055e4:	08005add 	.word	0x08005add
 80055e8:	08005add 	.word	0x08005add
 80055ec:	08005ae5 	.word	0x08005ae5
 80055f0:	08005ae5 	.word	0x08005ae5
 80055f4:	08005ae5 	.word	0x08005ae5
 80055f8:	08005ae5 	.word	0x08005ae5
 80055fc:	08005aed 	.word	0x08005aed
 8005600:	08005aed 	.word	0x08005aed
 8005604:	08005aed 	.word	0x08005aed
 8005608:	08005aed 	.word	0x08005aed
 800560c:	08005af5 	.word	0x08005af5
 8005610:	08005af5 	.word	0x08005af5
 8005614:	08005af5 	.word	0x08005af5
 8005618:	08005af5 	.word	0x08005af5
 800561c:	08005afd 	.word	0x08005afd
 8005620:	08005afd 	.word	0x08005afd
 8005624:	08005afd 	.word	0x08005afd
 8005628:	08005afd 	.word	0x08005afd
 800562c:	08005b05 	.word	0x08005b05
 8005630:	08005b05 	.word	0x08005b05
 8005634:	08005b05 	.word	0x08005b05
 8005638:	08005b05 	.word	0x08005b05
 800563c:	08005b0d 	.word	0x08005b0d
 8005640:	08005b0d 	.word	0x08005b0d
 8005644:	08005b0d 	.word	0x08005b0d
 8005648:	08005b0d 	.word	0x08005b0d
 800564c:	08005b15 	.word	0x08005b15
 8005650:	08005b15 	.word	0x08005b15
 8005654:	08005b15 	.word	0x08005b15
 8005658:	08005b15 	.word	0x08005b15
 800565c:	08005b1d 	.word	0x08005b1d
 8005660:	08005b1d 	.word	0x08005b1d
 8005664:	08005b1d 	.word	0x08005b1d
 8005668:	08005b1d 	.word	0x08005b1d
 800566c:	08005b25 	.word	0x08005b25
 8005670:	08005b25 	.word	0x08005b25
 8005674:	08005b25 	.word	0x08005b25
 8005678:	08005b25 	.word	0x08005b25
 800567c:	08005b2d 	.word	0x08005b2d
 8005680:	08005b2d 	.word	0x08005b2d
 8005684:	08005b2d 	.word	0x08005b2d
 8005688:	08005b2d 	.word	0x08005b2d
 800568c:	08005b35 	.word	0x08005b35
 8005690:	08005b35 	.word	0x08005b35
 8005694:	08005b35 	.word	0x08005b35
 8005698:	08005b35 	.word	0x08005b35
 800569c:	08005b3d 	.word	0x08005b3d
 80056a0:	08005b3d 	.word	0x08005b3d
 80056a4:	08005b3d 	.word	0x08005b3d
 80056a8:	08005b3d 	.word	0x08005b3d
 80056ac:	08005b45 	.word	0x08005b45
 80056b0:	08005b45 	.word	0x08005b45
 80056b4:	08005b45 	.word	0x08005b45
 80056b8:	08005b45 	.word	0x08005b45
 80056bc:	08005b4d 	.word	0x08005b4d
 80056c0:	08005b4d 	.word	0x08005b4d
 80056c4:	08005b4d 	.word	0x08005b4d
 80056c8:	08005b4d 	.word	0x08005b4d
 80056cc:	08005b55 	.word	0x08005b55
 80056d0:	08005b55 	.word	0x08005b55
 80056d4:	08005b55 	.word	0x08005b55
 80056d8:	08005b55 	.word	0x08005b55
 80056dc:	08005b5d 	.word	0x08005b5d
 80056e0:	08005b5d 	.word	0x08005b5d
 80056e4:	08005b5d 	.word	0x08005b5d
 80056e8:	08005b5d 	.word	0x08005b5d
 80056ec:	08005b65 	.word	0x08005b65
 80056f0:	08005b65 	.word	0x08005b65
 80056f4:	08005b65 	.word	0x08005b65
 80056f8:	08005b65 	.word	0x08005b65
 80056fc:	08005b6d 	.word	0x08005b6d
 8005700:	08005b6d 	.word	0x08005b6d
 8005704:	08005b6d 	.word	0x08005b6d
 8005708:	08005b6d 	.word	0x08005b6d
 800570c:	08005b75 	.word	0x08005b75
 8005710:	08005b75 	.word	0x08005b75
 8005714:	08005b75 	.word	0x08005b75
 8005718:	08005b75 	.word	0x08005b75
 800571c:	08005b7d 	.word	0x08005b7d
 8005720:	08005b7d 	.word	0x08005b7d
 8005724:	08005b7d 	.word	0x08005b7d
 8005728:	08005b7d 	.word	0x08005b7d
 800572c:	08005b85 	.word	0x08005b85
 8005730:	08005b85 	.word	0x08005b85
 8005734:	08005b85 	.word	0x08005b85
 8005738:	08005b85 	.word	0x08005b85
 800573c:	08005b8d 	.word	0x08005b8d
 8005740:	08005b8d 	.word	0x08005b8d
 8005744:	08005b8d 	.word	0x08005b8d
 8005748:	08005b8d 	.word	0x08005b8d
 800574c:	08005b95 	.word	0x08005b95
 8005750:	08005b95 	.word	0x08005b95
 8005754:	08005b95 	.word	0x08005b95
 8005758:	08005b95 	.word	0x08005b95
 800575c:	08005b9d 	.word	0x08005b9d
 8005760:	08005b9d 	.word	0x08005b9d
 8005764:	08005b9d 	.word	0x08005b9d
 8005768:	08005b9d 	.word	0x08005b9d
 800576c:	08005ba5 	.word	0x08005ba5
 8005770:	08005ba5 	.word	0x08005ba5
 8005774:	08005ba5 	.word	0x08005ba5
 8005778:	08005ba5 	.word	0x08005ba5
 800577c:	08005bad 	.word	0x08005bad
 8005780:	08005bad 	.word	0x08005bad
 8005784:	08005bad 	.word	0x08005bad
 8005788:	08005bad 	.word	0x08005bad
 800578c:	08005bb5 	.word	0x08005bb5
 8005790:	08005bb5 	.word	0x08005bb5
 8005794:	08005bb5 	.word	0x08005bb5
 8005798:	08005bb5 	.word	0x08005bb5
 800579c:	08005bbd 	.word	0x08005bbd
 80057a0:	08005bbd 	.word	0x08005bbd
 80057a4:	08005bbd 	.word	0x08005bbd
 80057a8:	08005bbd 	.word	0x08005bbd
 80057ac:	08005bc5 	.word	0x08005bc5
 80057b0:	08005bc5 	.word	0x08005bc5
 80057b4:	08005bc5 	.word	0x08005bc5
 80057b8:	08005bc5 	.word	0x08005bc5
 80057bc:	08005bcd 	.word	0x08005bcd
 80057c0:	08005bcd 	.word	0x08005bcd
 80057c4:	08005bcd 	.word	0x08005bcd
 80057c8:	08005bcd 	.word	0x08005bcd
 80057cc:	08005bd5 	.word	0x08005bd5
 80057d0:	08005bd5 	.word	0x08005bd5
 80057d4:	08005bd5 	.word	0x08005bd5
 80057d8:	08005bd5 	.word	0x08005bd5
 80057dc:	08005bdd 	.word	0x08005bdd
 80057e0:	08005bdd 	.word	0x08005bdd
 80057e4:	08005bdd 	.word	0x08005bdd
 80057e8:	08005bdd 	.word	0x08005bdd
 80057ec:	08005be5 	.word	0x08005be5
 80057f0:	08005be5 	.word	0x08005be5
 80057f4:	08005be5 	.word	0x08005be5
 80057f8:	08005be5 	.word	0x08005be5
 80057fc:	08005bed 	.word	0x08005bed
 8005800:	08005bed 	.word	0x08005bed
 8005804:	08005bed 	.word	0x08005bed
 8005808:	08005bed 	.word	0x08005bed
 800580c:	08005bf5 	.word	0x08005bf5
 8005810:	08005bf5 	.word	0x08005bf5
 8005814:	08005bf5 	.word	0x08005bf5
 8005818:	08005bf5 	.word	0x08005bf5
 800581c:	08005bfd 	.word	0x08005bfd
 8005820:	08005bfd 	.word	0x08005bfd
 8005824:	08005bfd 	.word	0x08005bfd
 8005828:	08005bfd 	.word	0x08005bfd
 800582c:	08005c05 	.word	0x08005c05
 8005830:	08005c05 	.word	0x08005c05
 8005834:	08005c05 	.word	0x08005c05
 8005838:	08005c05 	.word	0x08005c05
 800583c:	08005c0d 	.word	0x08005c0d
 8005840:	08005c0d 	.word	0x08005c0d
 8005844:	08005c0d 	.word	0x08005c0d
 8005848:	08005c0d 	.word	0x08005c0d
 800584c:	08005c15 	.word	0x08005c15
 8005850:	08005c15 	.word	0x08005c15
 8005854:	08005c15 	.word	0x08005c15
 8005858:	08005c15 	.word	0x08005c15
 800585c:	08005c1d 	.word	0x08005c1d
 8005860:	08005c1d 	.word	0x08005c1d
 8005864:	08005c1d 	.word	0x08005c1d
 8005868:	08005c1d 	.word	0x08005c1d
 800586c:	08005c25 	.word	0x08005c25
 8005870:	08005c25 	.word	0x08005c25
 8005874:	08005c25 	.word	0x08005c25
 8005878:	08005c25 	.word	0x08005c25
 800587c:	08005c2d 	.word	0x08005c2d
 8005880:	08005c2d 	.word	0x08005c2d
 8005884:	08005c2d 	.word	0x08005c2d
 8005888:	08005c2d 	.word	0x08005c2d
 800588c:	08005c35 	.word	0x08005c35
 8005890:	08005c35 	.word	0x08005c35
 8005894:	08005c35 	.word	0x08005c35
 8005898:	08005c35 	.word	0x08005c35
 800589c:	08005c3d 	.word	0x08005c3d
 80058a0:	08005c3d 	.word	0x08005c3d
 80058a4:	08005c3d 	.word	0x08005c3d
 80058a8:	08005c3d 	.word	0x08005c3d
 80058ac:	08005c45 	.word	0x08005c45
 80058b0:	08005c45 	.word	0x08005c45
 80058b4:	08005c45 	.word	0x08005c45
 80058b8:	08005c45 	.word	0x08005c45
 80058bc:	08005c4d 	.word	0x08005c4d
 80058c0:	08005c4d 	.word	0x08005c4d
 80058c4:	08005c4d 	.word	0x08005c4d
 80058c8:	08005c4d 	.word	0x08005c4d
 80058cc:	08005c55 	.word	0x08005c55
 80058d0:	08005c55 	.word	0x08005c55
 80058d4:	08005c55 	.word	0x08005c55
 80058d8:	08005c55 	.word	0x08005c55
 80058dc:	08005c5d 	.word	0x08005c5d
 80058e0:	08005c5d 	.word	0x08005c5d
 80058e4:	08005c5d 	.word	0x08005c5d
 80058e8:	08005c5d 	.word	0x08005c5d
 80058ec:	08005c65 	.word	0x08005c65
 80058f0:	08005c65 	.word	0x08005c65
 80058f4:	08005c65 	.word	0x08005c65
 80058f8:	08005c65 	.word	0x08005c65
 80058fc:	08005c6d 	.word	0x08005c6d
 8005900:	08005c6d 	.word	0x08005c6d
 8005904:	08005c6d 	.word	0x08005c6d
 8005908:	08005c6d 	.word	0x08005c6d
 800590c:	08005c75 	.word	0x08005c75
 8005910:	08005c75 	.word	0x08005c75
 8005914:	08005c75 	.word	0x08005c75
 8005918:	08005c75 	.word	0x08005c75
 800591c:	08005c7d 	.word	0x08005c7d
 8005920:	08005c7d 	.word	0x08005c7d
 8005924:	08005c7d 	.word	0x08005c7d
 8005928:	08005c7d 	.word	0x08005c7d
 800592c:	08005c85 	.word	0x08005c85
 8005930:	08005c85 	.word	0x08005c85
 8005934:	08005c85 	.word	0x08005c85
 8005938:	08005c85 	.word	0x08005c85
 800593c:	08005c8d 	.word	0x08005c8d
 8005940:	08005c8d 	.word	0x08005c8d
 8005944:	08005c8d 	.word	0x08005c8d
 8005948:	08005c8d 	.word	0x08005c8d
 800594c:	08005c95 	.word	0x08005c95
 8005950:	08005c95 	.word	0x08005c95
 8005954:	08005c95 	.word	0x08005c95
 8005958:	08005c95 	.word	0x08005c95
 800595c:	08005c9d 	.word	0x08005c9d
 8005960:	08005c9d 	.word	0x08005c9d
 8005964:	08005c9d 	.word	0x08005c9d
 8005968:	08005c9d 	.word	0x08005c9d
 800596c:	08005ca5 	.word	0x08005ca5
 8005970:	08005ca5 	.word	0x08005ca5
 8005974:	08005ca5 	.word	0x08005ca5
 8005978:	08005ca5 	.word	0x08005ca5
 800597c:	08005cad 	.word	0x08005cad
 8005980:	08005cad 	.word	0x08005cad
 8005984:	08005cad 	.word	0x08005cad
 8005988:	08005cad 	.word	0x08005cad
 800598c:	08005cb5 	.word	0x08005cb5
 8005990:	08005cb5 	.word	0x08005cb5
 8005994:	08005cb5 	.word	0x08005cb5
 8005998:	08005cb5 	.word	0x08005cb5
 800599c:	08005cbd 	.word	0x08005cbd
 80059a0:	08005cbd 	.word	0x08005cbd
 80059a4:	08005cbd 	.word	0x08005cbd
 80059a8:	08005cbd 	.word	0x08005cbd
 80059ac:	08005cc5 	.word	0x08005cc5
 80059b0:	08005cc5 	.word	0x08005cc5
 80059b4:	08005cc5 	.word	0x08005cc5
 80059b8:	08005cc5 	.word	0x08005cc5
	{
		case 0	:
		case 1	:
		case 2	:
			VPP_ApplyPresetToSync( VPP01 );
 80059bc:	2000      	movs	r0, #0
 80059be:	f7fe ff0d 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 80059c2:	e184      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 3	:
		case 4	:
		case 5	:
		case 6	:
			VPP_ApplyPresetToSync( VPP02	);
 80059c4:	2001      	movs	r0, #1
 80059c6:	f7fe ff09 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 80059ca:	e180      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 7	:
		case 8	:
		case 9	:
		case 10	:
			VPP_ApplyPresetToSync( VPP03	);
 80059cc:	2002      	movs	r0, #2
 80059ce:	f7fe ff05 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 80059d2:	e17c      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 11	:
		case 12	:
		case 13	:
		case 14	:
			VPP_ApplyPresetToSync( VPP04	);
 80059d4:	2003      	movs	r0, #3
 80059d6:	f7fe ff01 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 80059da:	e178      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 15	:
		case 16	:
		case 17	:
		case 18	:
			VPP_ApplyPresetToSync( VPP05	);
 80059dc:	2004      	movs	r0, #4
 80059de:	f7fe fefd 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 80059e2:	e174      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 19	:
		case 20	:
		case 21	:
		case 22	:
			VPP_ApplyPresetToSync( VPP06	);
 80059e4:	2005      	movs	r0, #5
 80059e6:	f7fe fef9 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 80059ea:	e170      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 23	:
		case 24	:
		case 25	:
		case 26	:
			VPP_ApplyPresetToSync( VPP07	);
 80059ec:	2006      	movs	r0, #6
 80059ee:	f7fe fef5 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 80059f2:	e16c      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 27	:
		case 28	:
		case 29	:
		case 30	:
			VPP_ApplyPresetToSync( VPP08	);
 80059f4:	2007      	movs	r0, #7
 80059f6:	f7fe fef1 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 80059fa:	e168      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 31	:
		case 32	:
		case 33	:
		case 34	:
			VPP_ApplyPresetToSync( VPP09	);
 80059fc:	2008      	movs	r0, #8
 80059fe:	f7fe feed 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005a02:	e164      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 35	:
		case 36	:
		case 37	:
		case 38	:
			VPP_ApplyPresetToSync( VPP10	);
 8005a04:	2009      	movs	r0, #9
 8005a06:	f7fe fee9 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005a0a:	e160      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 39	:
		case 40	:
		case 41	:
		case 42	:
			VPP_ApplyPresetToSync( VPP11	);
 8005a0c:	200a      	movs	r0, #10
 8005a0e:	f7fe fee5 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005a12:	e15c      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 43	:
		case 44	:
		case 45	:
		case 46	:
			VPP_ApplyPresetToSync( VPP12	);
 8005a14:	200b      	movs	r0, #11
 8005a16:	f7fe fee1 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005a1a:	e158      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 47	:
		case 48	:
		case 49	:
		case 50	:
			VPP_ApplyPresetToSync( VPP13	);
 8005a1c:	200c      	movs	r0, #12
 8005a1e:	f7fe fedd 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005a22:	e154      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 51	:
		case 52	:
		case 53	:
		case 54	:
			VPP_ApplyPresetToSync( VPP14	);
 8005a24:	200d      	movs	r0, #13
 8005a26:	f7fe fed9 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005a2a:	e150      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 55	:
		case 56	:
		case 57	:
		case 58	:
			VPP_ApplyPresetToSync( VPP15	);
 8005a2c:	200e      	movs	r0, #14
 8005a2e:	f7fe fed5 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005a32:	e14c      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 59	:
		case 60	:
		case 61	:
		case 62	:
			VPP_ApplyPresetToSync( VPP16	);
 8005a34:	200f      	movs	r0, #15
 8005a36:	f7fe fed1 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005a3a:	e148      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 63	:
		case 64	:
		case 65	:
		case 66	:
			VPP_ApplyPresetToSync( VPP17	);
 8005a3c:	2010      	movs	r0, #16
 8005a3e:	f7fe fecd 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005a42:	e144      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 67	:
		case 68	:
		case 69	:
		case 70	:
			VPP_ApplyPresetToSync( VPP18	);
 8005a44:	2011      	movs	r0, #17
 8005a46:	f7fe fec9 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005a4a:	e140      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 71	:
		case 72	:
		case 73	:
		case 74	:
			VPP_ApplyPresetToSync( VPP19	);
 8005a4c:	2012      	movs	r0, #18
 8005a4e:	f7fe fec5 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005a52:	e13c      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 75	:
		case 76	:
		case 77	:
		case 78	:
			VPP_ApplyPresetToSync( VPP20	);
 8005a54:	2013      	movs	r0, #19
 8005a56:	f7fe fec1 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005a5a:	e138      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 79	:
		case 80	:
		case 81	:
		case 82	:
			VPP_ApplyPresetToSync( VPP21	);
 8005a5c:	2014      	movs	r0, #20
 8005a5e:	f7fe febd 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005a62:	e134      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 83	:
		case 84	:
		case 85	:
		case 86	:
			VPP_ApplyPresetToSync( VPP22	);
 8005a64:	2015      	movs	r0, #21
 8005a66:	f7fe feb9 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005a6a:	e130      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 87	:
		case 88	:
		case 89	:
		case 90	:
			VPP_ApplyPresetToSync( VPP23	);
 8005a6c:	2016      	movs	r0, #22
 8005a6e:	f7fe feb5 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005a72:	e12c      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 91	:
		case 92	:
		case 93	:
		case 94	:
			VPP_ApplyPresetToSync( VPP24	);
 8005a74:	2017      	movs	r0, #23
 8005a76:	f7fe feb1 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005a7a:	e128      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 95	:
		case 96	:
		case 97	:
		case 98	:
			VPP_ApplyPresetToSync( VPP25	);
 8005a7c:	2018      	movs	r0, #24
 8005a7e:	f7fe fead 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005a82:	e124      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 99		:
		case 100	:
		case 101	:
		case 102	:
			VPP_ApplyPresetToSync( VPP26	);
 8005a84:	2019      	movs	r0, #25
 8005a86:	f7fe fea9 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005a8a:	e120      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 103	:
		case 104	:
		case 105	:
		case 106	:
			VPP_ApplyPresetToSync( VPP27	);
 8005a8c:	201a      	movs	r0, #26
 8005a8e:	f7fe fea5 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005a92:	e11c      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 107	:
		case 108	:
		case 109	:
		case 110	:
			VPP_ApplyPresetToSync( VPP28	);
 8005a94:	201b      	movs	r0, #27
 8005a96:	f7fe fea1 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005a9a:	e118      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 111	:
		case 112	:
		case 113	:
		case 114	:
			VPP_ApplyPresetToSync( VPP29	);
 8005a9c:	201c      	movs	r0, #28
 8005a9e:	f7fe fe9d 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005aa2:	e114      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 115	:
		case 116	:
		case 117	:
		case 118	:
			VPP_ApplyPresetToSync( VPP30	);
 8005aa4:	201d      	movs	r0, #29
 8005aa6:	f7fe fe99 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005aaa:	e110      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 119	:
		case 120	:
		case 121	:
		case 122	:
			VPP_ApplyPresetToSync( VPP31	);
 8005aac:	201e      	movs	r0, #30
 8005aae:	f7fe fe95 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005ab2:	e10c      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 123	:
		case 124	:
		case 125	:
		case 126	:
			VPP_ApplyPresetToSync( VPP32	);
 8005ab4:	201f      	movs	r0, #31
 8005ab6:	f7fe fe91 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005aba:	e108      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 127	:
		case 128	:
		case 129	:
		case 130	:
			VPP_ApplyPresetToSync( VPP33	);
 8005abc:	2020      	movs	r0, #32
 8005abe:	f7fe fe8d 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005ac2:	e104      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 131	:
		case 132	:
		case 133	:
		case 134	:
			VPP_ApplyPresetToSync( VPP34	);
 8005ac4:	2021      	movs	r0, #33	; 0x21
 8005ac6:	f7fe fe89 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005aca:	e100      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 135	:
		case 136	:
		case 137	:
		case 138	:
			VPP_ApplyPresetToSync( VPP35	);
 8005acc:	2022      	movs	r0, #34	; 0x22
 8005ace:	f7fe fe85 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005ad2:	e0fc      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 139	:
		case 140	:
		case 141	:
		case 142	:
			VPP_ApplyPresetToSync( VPP36	);
 8005ad4:	2023      	movs	r0, #35	; 0x23
 8005ad6:	f7fe fe81 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005ada:	e0f8      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 143	:
		case 144	:
		case 145	:
		case 146	:
			VPP_ApplyPresetToSync( VPP37	);
 8005adc:	2024      	movs	r0, #36	; 0x24
 8005ade:	f7fe fe7d 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005ae2:	e0f4      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 147	:
		case 148	:
		case 149	:
		case 150	:
			VPP_ApplyPresetToSync( VPP38	);
 8005ae4:	2025      	movs	r0, #37	; 0x25
 8005ae6:	f7fe fe79 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005aea:	e0f0      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 151	:
		case 152	:
		case 153	:
		case 154	:
			VPP_ApplyPresetToSync( VPP39	);
 8005aec:	2026      	movs	r0, #38	; 0x26
 8005aee:	f7fe fe75 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005af2:	e0ec      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 155	:
		case 156	:
		case 157	:
		case 158	:
			VPP_ApplyPresetToSync( VPP40	);
 8005af4:	2027      	movs	r0, #39	; 0x27
 8005af6:	f7fe fe71 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005afa:	e0e8      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 159	:
		case 160	:
		case 161	:
		case 162	:
			VPP_ApplyPresetToSync( VPP41	);
 8005afc:	2028      	movs	r0, #40	; 0x28
 8005afe:	f7fe fe6d 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005b02:	e0e4      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 163	:
		case 164	:
		case 165	:
		case 166	:
			VPP_ApplyPresetToSync( VPP42	);
 8005b04:	2029      	movs	r0, #41	; 0x29
 8005b06:	f7fe fe69 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005b0a:	e0e0      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 167	:
		case 168	:
		case 169	:
		case 170	:
			VPP_ApplyPresetToSync( VPP43	);
 8005b0c:	202a      	movs	r0, #42	; 0x2a
 8005b0e:	f7fe fe65 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005b12:	e0dc      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 171	:
		case 172	:
		case 173	:
		case 174	:
			VPP_ApplyPresetToSync( VPP44	);
 8005b14:	202b      	movs	r0, #43	; 0x2b
 8005b16:	f7fe fe61 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005b1a:	e0d8      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 175	:
		case 176	:
		case 177	:
		case 178	:
			VPP_ApplyPresetToSync( VPP45	);
 8005b1c:	202c      	movs	r0, #44	; 0x2c
 8005b1e:	f7fe fe5d 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005b22:	e0d4      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 179	:
		case 180	:
		case 181	:
		case 182	:
			VPP_ApplyPresetToSync( VPP46	);
 8005b24:	202d      	movs	r0, #45	; 0x2d
 8005b26:	f7fe fe59 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005b2a:	e0d0      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 183	:
		case 184	:
		case 185	:
		case 186	:
			VPP_ApplyPresetToSync( VPP47	);
 8005b2c:	202e      	movs	r0, #46	; 0x2e
 8005b2e:	f7fe fe55 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005b32:	e0cc      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 187	:
		case 188	:
		case 189	:
		case 190	:
			VPP_ApplyPresetToSync( VPP48	);
 8005b34:	202f      	movs	r0, #47	; 0x2f
 8005b36:	f7fe fe51 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005b3a:	e0c8      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 191	:
		case 192	:
		case 193	:
		case 194	:
			VPP_ApplyPresetToSync( VPP49	);
 8005b3c:	2030      	movs	r0, #48	; 0x30
 8005b3e:	f7fe fe4d 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005b42:	e0c4      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 195	:
		case 196	:
		case 197	:
		case 198	:
			VPP_ApplyPresetToSync( VPP50	);
 8005b44:	2031      	movs	r0, #49	; 0x31
 8005b46:	f7fe fe49 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005b4a:	e0c0      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 199	:
		case 200	:
		case 201	:
		case 202	:
			VPP_ApplyPresetToSync( VPP51	);
 8005b4c:	2032      	movs	r0, #50	; 0x32
 8005b4e:	f7fe fe45 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005b52:	e0bc      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 203	:
		case 204	:
		case 205	:
		case 206	:
			VPP_ApplyPresetToSync( VPP52	);
 8005b54:	2033      	movs	r0, #51	; 0x33
 8005b56:	f7fe fe41 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005b5a:	e0b8      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 207	:
		case 208	:
		case 209	:
		case 210	:
			VPP_ApplyPresetToSync( VPP53	);
 8005b5c:	2034      	movs	r0, #52	; 0x34
 8005b5e:	f7fe fe3d 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005b62:	e0b4      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 211	:
		case 212	:
		case 213	:
		case 214	:
			VPP_ApplyPresetToSync( VPP54	);
 8005b64:	2035      	movs	r0, #53	; 0x35
 8005b66:	f7fe fe39 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005b6a:	e0b0      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 215	:
		case 216	:
		case 217	:
		case 218	:
			VPP_ApplyPresetToSync( VPP55	);
 8005b6c:	2036      	movs	r0, #54	; 0x36
 8005b6e:	f7fe fe35 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005b72:	e0ac      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 219	:
		case 220	:
		case 221	:
		case 222	:
			VPP_ApplyPresetToSync( VPP56	);
 8005b74:	2037      	movs	r0, #55	; 0x37
 8005b76:	f7fe fe31 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005b7a:	e0a8      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 223	:
		case 224	:
		case 225	:
		case 226	:
			VPP_ApplyPresetToSync( VPP57	);
 8005b7c:	2038      	movs	r0, #56	; 0x38
 8005b7e:	f7fe fe2d 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005b82:	e0a4      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 227	:
		case 228	:
		case 229	:
		case 230	:
			VPP_ApplyPresetToSync( VPP58	);
 8005b84:	2039      	movs	r0, #57	; 0x39
 8005b86:	f7fe fe29 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005b8a:	e0a0      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 231	:
		case 232	:
		case 233	:
		case 234	:
			VPP_ApplyPresetToSync( VPP59	);
 8005b8c:	203a      	movs	r0, #58	; 0x3a
 8005b8e:	f7fe fe25 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005b92:	e09c      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 235	:
		case 236	:
		case 237	:
		case 238	:
			VPP_ApplyPresetToSync( VPP60	);
 8005b94:	203b      	movs	r0, #59	; 0x3b
 8005b96:	f7fe fe21 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005b9a:	e098      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 239	:
		case 240	:
		case 241	:
		case 242	:
			VPP_ApplyPresetToSync( VPP61	);
 8005b9c:	203c      	movs	r0, #60	; 0x3c
 8005b9e:	f7fe fe1d 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005ba2:	e094      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 243	:
		case 244	:
		case 245	:
		case 246	:
			VPP_ApplyPresetToSync( VPP62	);
 8005ba4:	203d      	movs	r0, #61	; 0x3d
 8005ba6:	f7fe fe19 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005baa:	e090      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 247	:
		case 248	:
		case 249	:
		case 250	:
			VPP_ApplyPresetToSync( VPP63	);
 8005bac:	203e      	movs	r0, #62	; 0x3e
 8005bae:	f7fe fe15 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005bb2:	e08c      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 251	:
		case 252	:
		case 253	:
		case 254	:
			VPP_ApplyPresetToSync( VPP64	);
 8005bb4:	203f      	movs	r0, #63	; 0x3f
 8005bb6:	f7fe fe11 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005bba:	e088      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 255	:
		case 256	:
		case 257	:
		case 258	:
			VPP_ApplyPresetToSync( VPP65	);
 8005bbc:	2040      	movs	r0, #64	; 0x40
 8005bbe:	f7fe fe0d 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005bc2:	e084      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 259	:
		case 260	:
		case 261	:
		case 262	:
			VPP_ApplyPresetToSync( VPP66	);
 8005bc4:	2041      	movs	r0, #65	; 0x41
 8005bc6:	f7fe fe09 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005bca:	e080      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 263	:
		case 264	:
		case 265	:
		case 266	:
			VPP_ApplyPresetToSync( VPP67	);
 8005bcc:	2042      	movs	r0, #66	; 0x42
 8005bce:	f7fe fe05 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005bd2:	e07c      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 267	:
		case 268	:
		case 269	:
		case 270	:
			VPP_ApplyPresetToSync( VPP68	);
 8005bd4:	2043      	movs	r0, #67	; 0x43
 8005bd6:	f7fe fe01 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005bda:	e078      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 271	:
		case 272	:
		case 273	:
		case 274	:
			VPP_ApplyPresetToSync( VPP69	);
 8005bdc:	2044      	movs	r0, #68	; 0x44
 8005bde:	f7fe fdfd 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005be2:	e074      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 275	:
		case 276	:
		case 277	:
		case 278	:
			VPP_ApplyPresetToSync( VPP70	);
 8005be4:	2045      	movs	r0, #69	; 0x45
 8005be6:	f7fe fdf9 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005bea:	e070      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 279	:
		case 280	:
		case 281	:
		case 282	:
			VPP_ApplyPresetToSync( VPP71	);
 8005bec:	2046      	movs	r0, #70	; 0x46
 8005bee:	f7fe fdf5 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005bf2:	e06c      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 283	:
		case 284	:
		case 285	:
		case 286	:
			VPP_ApplyPresetToSync( VPP72	);
 8005bf4:	2047      	movs	r0, #71	; 0x47
 8005bf6:	f7fe fdf1 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005bfa:	e068      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 287	:
		case 288	:
		case 289	:
		case 290	:
			VPP_ApplyPresetToSync( VPP73	);
 8005bfc:	2048      	movs	r0, #72	; 0x48
 8005bfe:	f7fe fded 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005c02:	e064      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 291	:
		case 292	:
		case 293	:
		case 294	:
			VPP_ApplyPresetToSync( VPP74	);
 8005c04:	2049      	movs	r0, #73	; 0x49
 8005c06:	f7fe fde9 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005c0a:	e060      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 295	:
		case 296	:
		case 297	:
		case 298	:
			VPP_ApplyPresetToSync( VPP75	);
 8005c0c:	204a      	movs	r0, #74	; 0x4a
 8005c0e:	f7fe fde5 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005c12:	e05c      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 299	:
		case 300	:
		case 301	:
		case 302	:
			VPP_ApplyPresetToSync( VPP76	);
 8005c14:	204b      	movs	r0, #75	; 0x4b
 8005c16:	f7fe fde1 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005c1a:	e058      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 303	:
		case 304	:
		case 305	:
		case 306	:
			VPP_ApplyPresetToSync( VPP77	);
 8005c1c:	204c      	movs	r0, #76	; 0x4c
 8005c1e:	f7fe fddd 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005c22:	e054      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 307	:
		case 308	:
		case 309	:
		case 310	:
			VPP_ApplyPresetToSync( VPP78	);
 8005c24:	204d      	movs	r0, #77	; 0x4d
 8005c26:	f7fe fdd9 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005c2a:	e050      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 311	:
		case 312	:
		case 313	:
		case 314	:
			VPP_ApplyPresetToSync( VPP79	);
 8005c2c:	204e      	movs	r0, #78	; 0x4e
 8005c2e:	f7fe fdd5 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005c32:	e04c      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 315	:
		case 316	:
		case 317	:
		case 318	:
			VPP_ApplyPresetToSync( VPP80	);
 8005c34:	204f      	movs	r0, #79	; 0x4f
 8005c36:	f7fe fdd1 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005c3a:	e048      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 319	:
		case 320	:
		case 321	:
		case 322	:
			VPP_ApplyPresetToSync( VPP81	);
 8005c3c:	2050      	movs	r0, #80	; 0x50
 8005c3e:	f7fe fdcd 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005c42:	e044      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 323	:
		case 324	:
		case 325	:
		case 326	:
			VPP_ApplyPresetToSync( VPP82	);
 8005c44:	2051      	movs	r0, #81	; 0x51
 8005c46:	f7fe fdc9 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005c4a:	e040      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 327	:
		case 328	:
		case 329	:
		case 330	:
			VPP_ApplyPresetToSync( VPP83	);
 8005c4c:	2052      	movs	r0, #82	; 0x52
 8005c4e:	f7fe fdc5 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005c52:	e03c      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 331	:
		case 332	:
		case 333	:
		case 334	:
			VPP_ApplyPresetToSync( VPP84	);
 8005c54:	2053      	movs	r0, #83	; 0x53
 8005c56:	f7fe fdc1 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005c5a:	e038      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 335	:
		case 336	:
		case 337	:
		case 338	:
			VPP_ApplyPresetToSync( VPP85	);
 8005c5c:	2054      	movs	r0, #84	; 0x54
 8005c5e:	f7fe fdbd 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005c62:	e034      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 339	:
		case 340	:
		case 341	:
		case 342	:
			VPP_ApplyPresetToSync( VPP86	);
 8005c64:	2055      	movs	r0, #85	; 0x55
 8005c66:	f7fe fdb9 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005c6a:	e030      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 343	:
		case 344	:
		case 345	:
		case 346	:
			VPP_ApplyPresetToSync( VPP87	);
 8005c6c:	2056      	movs	r0, #86	; 0x56
 8005c6e:	f7fe fdb5 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005c72:	e02c      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 347	:
		case 348	:
		case 349	:
		case 350	:
			VPP_ApplyPresetToSync( VPP88	);
 8005c74:	2057      	movs	r0, #87	; 0x57
 8005c76:	f7fe fdb1 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005c7a:	e028      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 351	:
		case 352	:
		case 353	:
		case 354	:
			VPP_ApplyPresetToSync( VPP89	);
 8005c7c:	2058      	movs	r0, #88	; 0x58
 8005c7e:	f7fe fdad 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005c82:	e024      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 355	:
		case 356	:
		case 357	:
		case 358	:
			VPP_ApplyPresetToSync( VPP90	);
 8005c84:	2059      	movs	r0, #89	; 0x59
 8005c86:	f7fe fda9 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005c8a:	e020      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 359	:
		case 360	:
		case 361	:
		case 362	:
			VPP_ApplyPresetToSync( VPP91	);
 8005c8c:	205a      	movs	r0, #90	; 0x5a
 8005c8e:	f7fe fda5 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005c92:	e01c      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 363	:
		case 364	:
		case 365	:
		case 366	:
			VPP_ApplyPresetToSync( VPP92	);
 8005c94:	205b      	movs	r0, #91	; 0x5b
 8005c96:	f7fe fda1 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005c9a:	e018      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 367	:
		case 368	:
		case 369	:
		case 370	:
			VPP_ApplyPresetToSync( VPP93	);
 8005c9c:	205c      	movs	r0, #92	; 0x5c
 8005c9e:	f7fe fd9d 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005ca2:	e014      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 371	:
		case 372	:
		case 373	:
		case 374	:
			VPP_ApplyPresetToSync( VPP94	);
 8005ca4:	205d      	movs	r0, #93	; 0x5d
 8005ca6:	f7fe fd99 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005caa:	e010      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 375	:
		case 376	:
		case 377	:
		case 378	:
			VPP_ApplyPresetToSync( VPP95	);
 8005cac:	205e      	movs	r0, #94	; 0x5e
 8005cae:	f7fe fd95 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005cb2:	e00c      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 379	:
		case 380	:
		case 381	:
		case 382	:
			VPP_ApplyPresetToSync( VPP96	);
 8005cb4:	205f      	movs	r0, #95	; 0x5f
 8005cb6:	f7fe fd91 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005cba:	e008      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 383	:
		case 384	:
		case 385	:
		case 386	:
			VPP_ApplyPresetToSync( VPP97	);
 8005cbc:	2060      	movs	r0, #96	; 0x60
 8005cbe:	f7fe fd8d 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005cc2:	e004      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>
		case 387	:
		case 388	:
		case 389	:
		case 390	:
			VPP_ApplyPresetToSync( VPP98	);
 8005cc4:	2061      	movs	r0, #97	; 0x61
 8005cc6:	f7fe fd89 	bl	80047dc <VPP_ApplyPresetToSync>
			break;
 8005cca:	e000      	b.n	8005cce <VPP_ModifySyncOutput+0x94a>

		default:
			break;
 8005ccc:	bf00      	nop
	}
}
 8005cce:	bf00      	nop
 8005cd0:	3708      	adds	r7, #8
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}
 8005cd6:	bf00      	nop

08005cd8 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b08c      	sub	sp, #48	; 0x30
 8005cdc:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8005cde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	605a      	str	r2, [r3, #4]
 8005ce8:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8005cea:	1d3b      	adds	r3, r7, #4
 8005cec:	2220      	movs	r2, #32
 8005cee:	2100      	movs	r1, #0
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f007 ff01 	bl	800daf8 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8005cf6:	4b32      	ldr	r3, [pc, #200]	; (8005dc0 <MX_ADC1_Init+0xe8>)
 8005cf8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8005cfc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV4;
 8005cfe:	4b30      	ldr	r3, [pc, #192]	; (8005dc0 <MX_ADC1_Init+0xe8>)
 8005d00:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005d04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8005d06:	4b2e      	ldr	r3, [pc, #184]	; (8005dc0 <MX_ADC1_Init+0xe8>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8005d0c:	4b2c      	ldr	r3, [pc, #176]	; (8005dc0 <MX_ADC1_Init+0xe8>)
 8005d0e:	2200      	movs	r2, #0
 8005d10:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8005d12:	4b2b      	ldr	r3, [pc, #172]	; (8005dc0 <MX_ADC1_Init+0xe8>)
 8005d14:	2200      	movs	r2, #0
 8005d16:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8005d18:	4b29      	ldr	r3, [pc, #164]	; (8005dc0 <MX_ADC1_Init+0xe8>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8005d1e:	4b28      	ldr	r3, [pc, #160]	; (8005dc0 <MX_ADC1_Init+0xe8>)
 8005d20:	2204      	movs	r2, #4
 8005d22:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8005d24:	4b26      	ldr	r3, [pc, #152]	; (8005dc0 <MX_ADC1_Init+0xe8>)
 8005d26:	2200      	movs	r2, #0
 8005d28:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8005d2a:	4b25      	ldr	r3, [pc, #148]	; (8005dc0 <MX_ADC1_Init+0xe8>)
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8005d30:	4b23      	ldr	r3, [pc, #140]	; (8005dc0 <MX_ADC1_Init+0xe8>)
 8005d32:	2201      	movs	r2, #1
 8005d34:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8005d36:	4b22      	ldr	r3, [pc, #136]	; (8005dc0 <MX_ADC1_Init+0xe8>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8005d3e:	4b20      	ldr	r3, [pc, #128]	; (8005dc0 <MX_ADC1_Init+0xe8>)
 8005d40:	2200      	movs	r2, #0
 8005d42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8005d44:	4b1e      	ldr	r3, [pc, #120]	; (8005dc0 <MX_ADC1_Init+0xe8>)
 8005d46:	2200      	movs	r2, #0
 8005d48:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8005d4a:	4b1d      	ldr	r3, [pc, #116]	; (8005dc0 <MX_ADC1_Init+0xe8>)
 8005d4c:	2201      	movs	r2, #1
 8005d4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8005d52:	4b1b      	ldr	r3, [pc, #108]	; (8005dc0 <MX_ADC1_Init+0xe8>)
 8005d54:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005d58:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8005d5a:	4b19      	ldr	r3, [pc, #100]	; (8005dc0 <MX_ADC1_Init+0xe8>)
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8005d62:	4817      	ldr	r0, [pc, #92]	; (8005dc0 <MX_ADC1_Init+0xe8>)
 8005d64:	f001 ffb4 	bl	8007cd0 <HAL_ADC_Init>
 8005d68:	4603      	mov	r3, r0
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8005d6e:	f000 ff09 	bl	8006b84 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8005d72:	2300      	movs	r3, #0
 8005d74:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8005d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	4810      	ldr	r0, [pc, #64]	; (8005dc0 <MX_ADC1_Init+0xe8>)
 8005d7e:	f002 fd3d 	bl	80087fc <HAL_ADCEx_MultiModeConfigChannel>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8005d88:	f000 fefc 	bl	8006b84 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8005d8c:	4b0d      	ldr	r3, [pc, #52]	; (8005dc4 <MX_ADC1_Init+0xec>)
 8005d8e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8005d90:	2306      	movs	r3, #6
 8005d92:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8005d94:	2300      	movs	r3, #0
 8005d96:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8005d98:	237f      	movs	r3, #127	; 0x7f
 8005d9a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8005d9c:	2304      	movs	r3, #4
 8005d9e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8005da0:	2300      	movs	r3, #0
 8005da2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8005da4:	1d3b      	adds	r3, r7, #4
 8005da6:	4619      	mov	r1, r3
 8005da8:	4805      	ldr	r0, [pc, #20]	; (8005dc0 <MX_ADC1_Init+0xe8>)
 8005daa:	f002 f951 	bl	8008050 <HAL_ADC_ConfigChannel>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <MX_ADC1_Init+0xe0>
  {
    Error_Handler();
 8005db4:	f000 fee6 	bl	8006b84 <Error_Handler>
  }

}
 8005db8:	bf00      	nop
 8005dba:	3730      	adds	r7, #48	; 0x30
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	200024f4 	.word	0x200024f4
 8005dc4:	0c900008 	.word	0x0c900008

08005dc8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b08a      	sub	sp, #40	; 0x28
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005dd0:	f107 0314 	add.w	r3, r7, #20
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	605a      	str	r2, [r3, #4]
 8005dda:	609a      	str	r2, [r3, #8]
 8005ddc:	60da      	str	r2, [r3, #12]
 8005dde:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005de8:	d14f      	bne.n	8005e8a <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8005dea:	4b2a      	ldr	r3, [pc, #168]	; (8005e94 <HAL_ADC_MspInit+0xcc>)
 8005dec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dee:	4a29      	ldr	r2, [pc, #164]	; (8005e94 <HAL_ADC_MspInit+0xcc>)
 8005df0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005df4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005df6:	4b27      	ldr	r3, [pc, #156]	; (8005e94 <HAL_ADC_MspInit+0xcc>)
 8005df8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005dfe:	613b      	str	r3, [r7, #16]
 8005e00:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005e02:	4b24      	ldr	r3, [pc, #144]	; (8005e94 <HAL_ADC_MspInit+0xcc>)
 8005e04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e06:	4a23      	ldr	r2, [pc, #140]	; (8005e94 <HAL_ADC_MspInit+0xcc>)
 8005e08:	f043 0301 	orr.w	r3, r3, #1
 8005e0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005e0e:	4b21      	ldr	r3, [pc, #132]	; (8005e94 <HAL_ADC_MspInit+0xcc>)
 8005e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e12:	f003 0301 	and.w	r3, r3, #1
 8005e16:	60fb      	str	r3, [r7, #12]
 8005e18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8005e1a:	2304      	movs	r3, #4
 8005e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e22:	2300      	movs	r3, #0
 8005e24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005e26:	f107 0314 	add.w	r3, r7, #20
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005e30:	f004 f8bc 	bl	8009fac <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8005e34:	4b18      	ldr	r3, [pc, #96]	; (8005e98 <HAL_ADC_MspInit+0xd0>)
 8005e36:	4a19      	ldr	r2, [pc, #100]	; (8005e9c <HAL_ADC_MspInit+0xd4>)
 8005e38:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8005e3a:	4b17      	ldr	r3, [pc, #92]	; (8005e98 <HAL_ADC_MspInit+0xd0>)
 8005e3c:	2205      	movs	r2, #5
 8005e3e:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005e40:	4b15      	ldr	r3, [pc, #84]	; (8005e98 <HAL_ADC_MspInit+0xd0>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8005e46:	4b14      	ldr	r3, [pc, #80]	; (8005e98 <HAL_ADC_MspInit+0xd0>)
 8005e48:	2200      	movs	r2, #0
 8005e4a:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8005e4c:	4b12      	ldr	r3, [pc, #72]	; (8005e98 <HAL_ADC_MspInit+0xd0>)
 8005e4e:	2280      	movs	r2, #128	; 0x80
 8005e50:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8005e52:	4b11      	ldr	r3, [pc, #68]	; (8005e98 <HAL_ADC_MspInit+0xd0>)
 8005e54:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005e58:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8005e5a:	4b0f      	ldr	r3, [pc, #60]	; (8005e98 <HAL_ADC_MspInit+0xd0>)
 8005e5c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005e60:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8005e62:	4b0d      	ldr	r3, [pc, #52]	; (8005e98 <HAL_ADC_MspInit+0xd0>)
 8005e64:	2220      	movs	r2, #32
 8005e66:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8005e68:	4b0b      	ldr	r3, [pc, #44]	; (8005e98 <HAL_ADC_MspInit+0xd0>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8005e6e:	480a      	ldr	r0, [pc, #40]	; (8005e98 <HAL_ADC_MspInit+0xd0>)
 8005e70:	f003 fdd0 	bl	8009a14 <HAL_DMA_Init>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d001      	beq.n	8005e7e <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8005e7a:	f000 fe83 	bl	8006b84 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4a05      	ldr	r2, [pc, #20]	; (8005e98 <HAL_ADC_MspInit+0xd0>)
 8005e82:	655a      	str	r2, [r3, #84]	; 0x54
 8005e84:	4a04      	ldr	r2, [pc, #16]	; (8005e98 <HAL_ADC_MspInit+0xd0>)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8005e8a:	bf00      	nop
 8005e8c:	3728      	adds	r7, #40	; 0x28
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	bf00      	nop
 8005e94:	40021000 	.word	0x40021000
 8005e98:	20002560 	.word	0x20002560
 8005e9c:	40020008 	.word	0x40020008

08005ea0 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8005ea4:	4b0f      	ldr	r3, [pc, #60]	; (8005ee4 <MX_COMP1_Init+0x44>)
 8005ea6:	4a10      	ldr	r2, [pc, #64]	; (8005ee8 <MX_COMP1_Init+0x48>)
 8005ea8:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8005eaa:	4b0e      	ldr	r3, [pc, #56]	; (8005ee4 <MX_COMP1_Init+0x44>)
 8005eac:	2200      	movs	r2, #0
 8005eae:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8005eb0:	4b0c      	ldr	r3, [pc, #48]	; (8005ee4 <MX_COMP1_Init+0x44>)
 8005eb2:	4a0e      	ldr	r2, [pc, #56]	; (8005eec <MX_COMP1_Init+0x4c>)
 8005eb4:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8005eb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ee4 <MX_COMP1_Init+0x44>)
 8005eb8:	2200      	movs	r2, #0
 8005eba:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8005ebc:	4b09      	ldr	r3, [pc, #36]	; (8005ee4 <MX_COMP1_Init+0x44>)
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8005ec2:	4b08      	ldr	r3, [pc, #32]	; (8005ee4 <MX_COMP1_Init+0x44>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8005ec8:	4b06      	ldr	r3, [pc, #24]	; (8005ee4 <MX_COMP1_Init+0x44>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8005ece:	4805      	ldr	r0, [pc, #20]	; (8005ee4 <MX_COMP1_Init+0x44>)
 8005ed0:	f002 fee8 	bl	8008ca4 <HAL_COMP_Init>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 8005eda:	f000 fe53 	bl	8006b84 <Error_Handler>
  }

}
 8005ede:	bf00      	nop
 8005ee0:	bd80      	pop	{r7, pc}
 8005ee2:	bf00      	nop
 8005ee4:	200025c0 	.word	0x200025c0
 8005ee8:	40010200 	.word	0x40010200
 8005eec:	00800030 	.word	0x00800030

08005ef0 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b088      	sub	sp, #32
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ef8:	f107 030c 	add.w	r3, r7, #12
 8005efc:	2200      	movs	r2, #0
 8005efe:	601a      	str	r2, [r3, #0]
 8005f00:	605a      	str	r2, [r3, #4]
 8005f02:	609a      	str	r2, [r3, #8]
 8005f04:	60da      	str	r2, [r3, #12]
 8005f06:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a0f      	ldr	r2, [pc, #60]	; (8005f4c <HAL_COMP_MspInit+0x5c>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d118      	bne.n	8005f44 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005f12:	4b0f      	ldr	r3, [pc, #60]	; (8005f50 <HAL_COMP_MspInit+0x60>)
 8005f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f16:	4a0e      	ldr	r2, [pc, #56]	; (8005f50 <HAL_COMP_MspInit+0x60>)
 8005f18:	f043 0301 	orr.w	r3, r3, #1
 8005f1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005f1e:	4b0c      	ldr	r3, [pc, #48]	; (8005f50 <HAL_COMP_MspInit+0x60>)
 8005f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f22:	f003 0301 	and.w	r3, r3, #1
 8005f26:	60bb      	str	r3, [r7, #8]
 8005f28:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005f2a:	2302      	movs	r3, #2
 8005f2c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005f2e:	2303      	movs	r3, #3
 8005f30:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f32:	2300      	movs	r3, #0
 8005f34:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005f36:	f107 030c 	add.w	r3, r7, #12
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005f40:	f004 f834 	bl	8009fac <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8005f44:	bf00      	nop
 8005f46:	3720      	adds	r7, #32
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	bd80      	pop	{r7, pc}
 8005f4c:	40010200 	.word	0x40010200
 8005f50:	40021000 	.word	0x40021000

08005f54 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b08c      	sub	sp, #48	; 0x30
 8005f58:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8005f5a:	463b      	mov	r3, r7
 8005f5c:	2230      	movs	r2, #48	; 0x30
 8005f5e:	2100      	movs	r1, #0
 8005f60:	4618      	mov	r0, r3
 8005f62:	f007 fdc9 	bl	800daf8 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8005f66:	4b1e      	ldr	r3, [pc, #120]	; (8005fe0 <MX_DAC1_Init+0x8c>)
 8005f68:	4a1e      	ldr	r2, [pc, #120]	; (8005fe4 <MX_DAC1_Init+0x90>)
 8005f6a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8005f6c:	481c      	ldr	r0, [pc, #112]	; (8005fe0 <MX_DAC1_Init+0x8c>)
 8005f6e:	f003 f93c 	bl	80091ea <HAL_DAC_Init>
 8005f72:	4603      	mov	r3, r0
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d001      	beq.n	8005f7c <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8005f78:	f000 fe04 	bl	8006b84 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8005f7c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005f80:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8005f82:	2300      	movs	r3, #0
 8005f84:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8005f86:	2300      	movs	r3, #0
 8005f88:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8005f8a:	2300      	movs	r3, #0
 8005f8c:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8005f8e:	2306      	movs	r3, #6
 8005f90:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8005f92:	2300      	movs	r3, #0
 8005f94:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8005f96:	2300      	movs	r3, #0
 8005f98:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8005fa2:	463b      	mov	r3, r7
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	480d      	ldr	r0, [pc, #52]	; (8005fe0 <MX_DAC1_Init+0x8c>)
 8005faa:	f003 fafd 	bl	80095a8 <HAL_DAC_ConfigChannel>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 8005fb4:	f000 fde6 	bl	8006b84 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8005fc0:	463b      	mov	r3, r7
 8005fc2:	2210      	movs	r2, #16
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	4806      	ldr	r0, [pc, #24]	; (8005fe0 <MX_DAC1_Init+0x8c>)
 8005fc8:	f003 faee 	bl	80095a8 <HAL_DAC_ConfigChannel>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8005fd2:	f000 fdd7 	bl	8006b84 <Error_Handler>
  }

}
 8005fd6:	bf00      	nop
 8005fd8:	3730      	adds	r7, #48	; 0x30
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
 8005fde:	bf00      	nop
 8005fe0:	200025f8 	.word	0x200025f8
 8005fe4:	50000800 	.word	0x50000800

08005fe8 <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b08c      	sub	sp, #48	; 0x30
 8005fec:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8005fee:	463b      	mov	r3, r7
 8005ff0:	2230      	movs	r2, #48	; 0x30
 8005ff2:	2100      	movs	r1, #0
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f007 fd7f 	bl	800daf8 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 8005ffa:	4b16      	ldr	r3, [pc, #88]	; (8006054 <MX_DAC2_Init+0x6c>)
 8005ffc:	4a16      	ldr	r2, [pc, #88]	; (8006058 <MX_DAC2_Init+0x70>)
 8005ffe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8006000:	4814      	ldr	r0, [pc, #80]	; (8006054 <MX_DAC2_Init+0x6c>)
 8006002:	f003 f8f2 	bl	80091ea <HAL_DAC_Init>
 8006006:	4603      	mov	r3, r0
 8006008:	2b00      	cmp	r3, #0
 800600a:	d001      	beq.n	8006010 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 800600c:	f000 fdba 	bl	8006b84 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8006010:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006014:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8006016:	2300      	movs	r3, #0
 8006018:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800601a:	2300      	movs	r3, #0
 800601c:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800601e:	2300      	movs	r3, #0
 8006020:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8006022:	2306      	movs	r3, #6
 8006024:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8006026:	2300      	movs	r3, #0
 8006028:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800602a:	2300      	movs	r3, #0
 800602c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 800602e:	2301      	movs	r3, #1
 8006030:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8006032:	2300      	movs	r3, #0
 8006034:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8006036:	463b      	mov	r3, r7
 8006038:	2200      	movs	r2, #0
 800603a:	4619      	mov	r1, r3
 800603c:	4805      	ldr	r0, [pc, #20]	; (8006054 <MX_DAC2_Init+0x6c>)
 800603e:	f003 fab3 	bl	80095a8 <HAL_DAC_ConfigChannel>
 8006042:	4603      	mov	r3, r0
 8006044:	2b00      	cmp	r3, #0
 8006046:	d001      	beq.n	800604c <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 8006048:	f000 fd9c 	bl	8006b84 <Error_Handler>
  }

}
 800604c:	bf00      	nop
 800604e:	3730      	adds	r7, #48	; 0x30
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	200025e4 	.word	0x200025e4
 8006058:	50000c00 	.word	0x50000c00

0800605c <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b08c      	sub	sp, #48	; 0x30
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006064:	f107 031c 	add.w	r3, r7, #28
 8006068:	2200      	movs	r2, #0
 800606a:	601a      	str	r2, [r3, #0]
 800606c:	605a      	str	r2, [r3, #4]
 800606e:	609a      	str	r2, [r3, #8]
 8006070:	60da      	str	r2, [r3, #12]
 8006072:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4a56      	ldr	r2, [pc, #344]	; (80061d4 <HAL_DAC_MspInit+0x178>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d150      	bne.n	8006120 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800607e:	4b56      	ldr	r3, [pc, #344]	; (80061d8 <HAL_DAC_MspInit+0x17c>)
 8006080:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006082:	4a55      	ldr	r2, [pc, #340]	; (80061d8 <HAL_DAC_MspInit+0x17c>)
 8006084:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006088:	64d3      	str	r3, [r2, #76]	; 0x4c
 800608a:	4b53      	ldr	r3, [pc, #332]	; (80061d8 <HAL_DAC_MspInit+0x17c>)
 800608c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800608e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006092:	61bb      	str	r3, [r7, #24]
 8006094:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006096:	4b50      	ldr	r3, [pc, #320]	; (80061d8 <HAL_DAC_MspInit+0x17c>)
 8006098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800609a:	4a4f      	ldr	r2, [pc, #316]	; (80061d8 <HAL_DAC_MspInit+0x17c>)
 800609c:	f043 0301 	orr.w	r3, r3, #1
 80060a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80060a2:	4b4d      	ldr	r3, [pc, #308]	; (80061d8 <HAL_DAC_MspInit+0x17c>)
 80060a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80060a6:	f003 0301 	and.w	r3, r3, #1
 80060aa:	617b      	str	r3, [r7, #20]
 80060ac:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80060ae:	2330      	movs	r3, #48	; 0x30
 80060b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80060b2:	2303      	movs	r3, #3
 80060b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80060b6:	2300      	movs	r3, #0
 80060b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80060ba:	f107 031c 	add.w	r3, r7, #28
 80060be:	4619      	mov	r1, r3
 80060c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80060c4:	f003 ff72 	bl	8009fac <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 80060c8:	4b44      	ldr	r3, [pc, #272]	; (80061dc <HAL_DAC_MspInit+0x180>)
 80060ca:	4a45      	ldr	r2, [pc, #276]	; (80061e0 <HAL_DAC_MspInit+0x184>)
 80060cc:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 80060ce:	4b43      	ldr	r3, [pc, #268]	; (80061dc <HAL_DAC_MspInit+0x180>)
 80060d0:	2206      	movs	r2, #6
 80060d2:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80060d4:	4b41      	ldr	r3, [pc, #260]	; (80061dc <HAL_DAC_MspInit+0x180>)
 80060d6:	2210      	movs	r2, #16
 80060d8:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80060da:	4b40      	ldr	r3, [pc, #256]	; (80061dc <HAL_DAC_MspInit+0x180>)
 80060dc:	2200      	movs	r2, #0
 80060de:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80060e0:	4b3e      	ldr	r3, [pc, #248]	; (80061dc <HAL_DAC_MspInit+0x180>)
 80060e2:	2280      	movs	r2, #128	; 0x80
 80060e4:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80060e6:	4b3d      	ldr	r3, [pc, #244]	; (80061dc <HAL_DAC_MspInit+0x180>)
 80060e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060ec:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80060ee:	4b3b      	ldr	r3, [pc, #236]	; (80061dc <HAL_DAC_MspInit+0x180>)
 80060f0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80060f4:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 80060f6:	4b39      	ldr	r3, [pc, #228]	; (80061dc <HAL_DAC_MspInit+0x180>)
 80060f8:	2220      	movs	r2, #32
 80060fa:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80060fc:	4b37      	ldr	r3, [pc, #220]	; (80061dc <HAL_DAC_MspInit+0x180>)
 80060fe:	2200      	movs	r2, #0
 8006100:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8006102:	4836      	ldr	r0, [pc, #216]	; (80061dc <HAL_DAC_MspInit+0x180>)
 8006104:	f003 fc86 	bl	8009a14 <HAL_DMA_Init>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d001      	beq.n	8006112 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 800610e:	f000 fd39 	bl	8006b84 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a31      	ldr	r2, [pc, #196]	; (80061dc <HAL_DAC_MspInit+0x180>)
 8006116:	609a      	str	r2, [r3, #8]
 8006118:	4a30      	ldr	r2, [pc, #192]	; (80061dc <HAL_DAC_MspInit+0x180>)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 800611e:	e054      	b.n	80061ca <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a2f      	ldr	r2, [pc, #188]	; (80061e4 <HAL_DAC_MspInit+0x188>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d14f      	bne.n	80061ca <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800612a:	4b2b      	ldr	r3, [pc, #172]	; (80061d8 <HAL_DAC_MspInit+0x17c>)
 800612c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800612e:	4a2a      	ldr	r2, [pc, #168]	; (80061d8 <HAL_DAC_MspInit+0x17c>)
 8006130:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006134:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006136:	4b28      	ldr	r3, [pc, #160]	; (80061d8 <HAL_DAC_MspInit+0x17c>)
 8006138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800613a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800613e:	613b      	str	r3, [r7, #16]
 8006140:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006142:	4b25      	ldr	r3, [pc, #148]	; (80061d8 <HAL_DAC_MspInit+0x17c>)
 8006144:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006146:	4a24      	ldr	r2, [pc, #144]	; (80061d8 <HAL_DAC_MspInit+0x17c>)
 8006148:	f043 0301 	orr.w	r3, r3, #1
 800614c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800614e:	4b22      	ldr	r3, [pc, #136]	; (80061d8 <HAL_DAC_MspInit+0x17c>)
 8006150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006152:	f003 0301 	and.w	r3, r3, #1
 8006156:	60fb      	str	r3, [r7, #12]
 8006158:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800615a:	2340      	movs	r3, #64	; 0x40
 800615c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800615e:	2303      	movs	r3, #3
 8006160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006162:	2300      	movs	r3, #0
 8006164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006166:	f107 031c 	add.w	r3, r7, #28
 800616a:	4619      	mov	r1, r3
 800616c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006170:	f003 ff1c 	bl	8009fac <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 8006174:	4b1c      	ldr	r3, [pc, #112]	; (80061e8 <HAL_DAC_MspInit+0x18c>)
 8006176:	4a1d      	ldr	r2, [pc, #116]	; (80061ec <HAL_DAC_MspInit+0x190>)
 8006178:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 800617a:	4b1b      	ldr	r3, [pc, #108]	; (80061e8 <HAL_DAC_MspInit+0x18c>)
 800617c:	2229      	movs	r2, #41	; 0x29
 800617e:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006180:	4b19      	ldr	r3, [pc, #100]	; (80061e8 <HAL_DAC_MspInit+0x18c>)
 8006182:	2210      	movs	r2, #16
 8006184:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8006186:	4b18      	ldr	r3, [pc, #96]	; (80061e8 <HAL_DAC_MspInit+0x18c>)
 8006188:	2200      	movs	r2, #0
 800618a:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 800618c:	4b16      	ldr	r3, [pc, #88]	; (80061e8 <HAL_DAC_MspInit+0x18c>)
 800618e:	2280      	movs	r2, #128	; 0x80
 8006190:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006192:	4b15      	ldr	r3, [pc, #84]	; (80061e8 <HAL_DAC_MspInit+0x18c>)
 8006194:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006198:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800619a:	4b13      	ldr	r3, [pc, #76]	; (80061e8 <HAL_DAC_MspInit+0x18c>)
 800619c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80061a0:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 80061a2:	4b11      	ldr	r3, [pc, #68]	; (80061e8 <HAL_DAC_MspInit+0x18c>)
 80061a4:	2220      	movs	r2, #32
 80061a6:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80061a8:	4b0f      	ldr	r3, [pc, #60]	; (80061e8 <HAL_DAC_MspInit+0x18c>)
 80061aa:	2200      	movs	r2, #0
 80061ac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 80061ae:	480e      	ldr	r0, [pc, #56]	; (80061e8 <HAL_DAC_MspInit+0x18c>)
 80061b0:	f003 fc30 	bl	8009a14 <HAL_DMA_Init>
 80061b4:	4603      	mov	r3, r0
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d001      	beq.n	80061be <HAL_DAC_MspInit+0x162>
      Error_Handler();
 80061ba:	f000 fce3 	bl	8006b84 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	4a09      	ldr	r2, [pc, #36]	; (80061e8 <HAL_DAC_MspInit+0x18c>)
 80061c2:	609a      	str	r2, [r3, #8]
 80061c4:	4a08      	ldr	r2, [pc, #32]	; (80061e8 <HAL_DAC_MspInit+0x18c>)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	6293      	str	r3, [r2, #40]	; 0x28
}
 80061ca:	bf00      	nop
 80061cc:	3730      	adds	r7, #48	; 0x30
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
 80061d2:	bf00      	nop
 80061d4:	50000800 	.word	0x50000800
 80061d8:	40021000 	.word	0x40021000
 80061dc:	2000260c 	.word	0x2000260c
 80061e0:	4002001c 	.word	0x4002001c
 80061e4:	50000c00 	.word	0x50000c00
 80061e8:	2000266c 	.word	0x2000266c
 80061ec:	40020030 	.word	0x40020030

080061f0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80061f6:	4b1a      	ldr	r3, [pc, #104]	; (8006260 <MX_DMA_Init+0x70>)
 80061f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061fa:	4a19      	ldr	r2, [pc, #100]	; (8006260 <MX_DMA_Init+0x70>)
 80061fc:	f043 0304 	orr.w	r3, r3, #4
 8006200:	6493      	str	r3, [r2, #72]	; 0x48
 8006202:	4b17      	ldr	r3, [pc, #92]	; (8006260 <MX_DMA_Init+0x70>)
 8006204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006206:	f003 0304 	and.w	r3, r3, #4
 800620a:	607b      	str	r3, [r7, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800620e:	4b14      	ldr	r3, [pc, #80]	; (8006260 <MX_DMA_Init+0x70>)
 8006210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006212:	4a13      	ldr	r2, [pc, #76]	; (8006260 <MX_DMA_Init+0x70>)
 8006214:	f043 0301 	orr.w	r3, r3, #1
 8006218:	6493      	str	r3, [r2, #72]	; 0x48
 800621a:	4b11      	ldr	r3, [pc, #68]	; (8006260 <MX_DMA_Init+0x70>)
 800621c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800621e:	f003 0301 	and.w	r3, r3, #1
 8006222:	603b      	str	r3, [r7, #0]
 8006224:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 8006226:	2200      	movs	r2, #0
 8006228:	2101      	movs	r1, #1
 800622a:	200b      	movs	r0, #11
 800622c:	f002 ffa9 	bl	8009182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8006230:	200b      	movs	r0, #11
 8006232:	f002 ffc0 	bl	80091b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8006236:	2200      	movs	r2, #0
 8006238:	2100      	movs	r1, #0
 800623a:	200c      	movs	r0, #12
 800623c:	f002 ffa1 	bl	8009182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8006240:	200c      	movs	r0, #12
 8006242:	f002 ffb8 	bl	80091b6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 8006246:	2200      	movs	r2, #0
 8006248:	2100      	movs	r1, #0
 800624a:	200d      	movs	r0, #13
 800624c:	f002 ff99 	bl	8009182 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8006250:	200d      	movs	r0, #13
 8006252:	f002 ffb0 	bl	80091b6 <HAL_NVIC_EnableIRQ>

}
 8006256:	bf00      	nop
 8006258:	3708      	adds	r7, #8
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}
 800625e:	bf00      	nop
 8006260:	40021000 	.word	0x40021000

08006264 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 8006264:	b580      	push	{r7, lr}
 8006266:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 8006268:	4b20      	ldr	r3, [pc, #128]	; (80062ec <update_dc_bias_sweep+0x88>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d006      	beq.n	800627e <update_dc_bias_sweep+0x1a>
 8006270:	4b1f      	ldr	r3, [pc, #124]	; (80062f0 <update_dc_bias_sweep+0x8c>)
 8006272:	881b      	ldrh	r3, [r3, #0]
 8006274:	3301      	adds	r3, #1
 8006276:	b29a      	uxth	r2, r3
 8006278:	4b1d      	ldr	r3, [pc, #116]	; (80062f0 <update_dc_bias_sweep+0x8c>)
 800627a:	801a      	strh	r2, [r3, #0]
 800627c:	e005      	b.n	800628a <update_dc_bias_sweep+0x26>
 800627e:	4b1c      	ldr	r3, [pc, #112]	; (80062f0 <update_dc_bias_sweep+0x8c>)
 8006280:	881b      	ldrh	r3, [r3, #0]
 8006282:	3b01      	subs	r3, #1
 8006284:	b29a      	uxth	r2, r3
 8006286:	4b1a      	ldr	r3, [pc, #104]	; (80062f0 <update_dc_bias_sweep+0x8c>)
 8006288:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 800628a:	4b19      	ldr	r3, [pc, #100]	; (80062f0 <update_dc_bias_sweep+0x8c>)
 800628c:	881b      	ldrh	r3, [r3, #0]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10a      	bne.n	80062a8 <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 8006292:	4b18      	ldr	r3, [pc, #96]	; (80062f4 <update_dc_bias_sweep+0x90>)
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <update_dc_bias_sweep+0x3e>
 800629a:	4b16      	ldr	r3, [pc, #88]	; (80062f4 <update_dc_bias_sweep+0x90>)
 800629c:	2200      	movs	r2, #0
 800629e:	601a      	str	r2, [r3, #0]
 80062a0:	e002      	b.n	80062a8 <update_dc_bias_sweep+0x44>
 80062a2:	4b14      	ldr	r3, [pc, #80]	; (80062f4 <update_dc_bias_sweep+0x90>)
 80062a4:	2201      	movs	r2, #1
 80062a6:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 80062a8:	4b11      	ldr	r3, [pc, #68]	; (80062f0 <update_dc_bias_sweep+0x8c>)
 80062aa:	881b      	ldrh	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d102      	bne.n	80062b6 <update_dc_bias_sweep+0x52>
 80062b0:	4b0e      	ldr	r3, [pc, #56]	; (80062ec <update_dc_bias_sweep+0x88>)
 80062b2:	2201      	movs	r2, #1
 80062b4:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 80062b6:	4b0e      	ldr	r3, [pc, #56]	; (80062f0 <update_dc_bias_sweep+0x8c>)
 80062b8:	881b      	ldrh	r3, [r3, #0]
 80062ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062be:	d302      	bcc.n	80062c6 <update_dc_bias_sweep+0x62>
 80062c0:	4b0a      	ldr	r3, [pc, #40]	; (80062ec <update_dc_bias_sweep+0x88>)
 80062c2:	2200      	movs	r2, #0
 80062c4:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 80062c6:	4b0b      	ldr	r3, [pc, #44]	; (80062f4 <update_dc_bias_sweep+0x90>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	461a      	mov	r2, r3
 80062ce:	2108      	movs	r1, #8
 80062d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80062d4:	f003 ffec 	bl	800a2b0 <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 80062d8:	4b05      	ldr	r3, [pc, #20]	; (80062f0 <update_dc_bias_sweep+0x8c>)
 80062da:	881b      	ldrh	r3, [r3, #0]
 80062dc:	2200      	movs	r2, #0
 80062de:	2110      	movs	r1, #16
 80062e0:	4805      	ldr	r0, [pc, #20]	; (80062f8 <update_dc_bias_sweep+0x94>)
 80062e2:	f003 f90f 	bl	8009504 <HAL_DAC_SetValue>
}
 80062e6:	bf00      	nop
 80062e8:	bd80      	pop	{r7, pc}
 80062ea:	bf00      	nop
 80062ec:	20000ca0 	.word	0x20000ca0
 80062f0:	20001f18 	.word	0x20001f18
 80062f4:	20001f1c 	.word	0x20001f1c
 80062f8:	200025f8 	.word	0x200025f8

080062fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80062fc:	b480      	push	{r7}
 80062fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006300:	4b04      	ldr	r3, [pc, #16]	; (8006314 <__NVIC_GetPriorityGrouping+0x18>)
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	0a1b      	lsrs	r3, r3, #8
 8006306:	f003 0307 	and.w	r3, r3, #7
}
 800630a:	4618      	mov	r0, r3
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	e000ed00 	.word	0xe000ed00

08006318 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	4603      	mov	r3, r0
 8006320:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006326:	2b00      	cmp	r3, #0
 8006328:	db0b      	blt.n	8006342 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800632a:	79fb      	ldrb	r3, [r7, #7]
 800632c:	f003 021f 	and.w	r2, r3, #31
 8006330:	4907      	ldr	r1, [pc, #28]	; (8006350 <__NVIC_EnableIRQ+0x38>)
 8006332:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006336:	095b      	lsrs	r3, r3, #5
 8006338:	2001      	movs	r0, #1
 800633a:	fa00 f202 	lsl.w	r2, r0, r2
 800633e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006342:	bf00      	nop
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr
 800634e:	bf00      	nop
 8006350:	e000e100 	.word	0xe000e100

08006354 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006354:	b480      	push	{r7}
 8006356:	b083      	sub	sp, #12
 8006358:	af00      	add	r7, sp, #0
 800635a:	4603      	mov	r3, r0
 800635c:	6039      	str	r1, [r7, #0]
 800635e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006364:	2b00      	cmp	r3, #0
 8006366:	db0a      	blt.n	800637e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	b2da      	uxtb	r2, r3
 800636c:	490c      	ldr	r1, [pc, #48]	; (80063a0 <__NVIC_SetPriority+0x4c>)
 800636e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006372:	0112      	lsls	r2, r2, #4
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	440b      	add	r3, r1
 8006378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800637c:	e00a      	b.n	8006394 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	b2da      	uxtb	r2, r3
 8006382:	4908      	ldr	r1, [pc, #32]	; (80063a4 <__NVIC_SetPriority+0x50>)
 8006384:	79fb      	ldrb	r3, [r7, #7]
 8006386:	f003 030f 	and.w	r3, r3, #15
 800638a:	3b04      	subs	r3, #4
 800638c:	0112      	lsls	r2, r2, #4
 800638e:	b2d2      	uxtb	r2, r2
 8006390:	440b      	add	r3, r1
 8006392:	761a      	strb	r2, [r3, #24]
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr
 80063a0:	e000e100 	.word	0xe000e100
 80063a4:	e000ed00 	.word	0xe000ed00

080063a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b089      	sub	sp, #36	; 0x24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f003 0307 	and.w	r3, r3, #7
 80063ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063bc:	69fb      	ldr	r3, [r7, #28]
 80063be:	f1c3 0307 	rsb	r3, r3, #7
 80063c2:	2b04      	cmp	r3, #4
 80063c4:	bf28      	it	cs
 80063c6:	2304      	movcs	r3, #4
 80063c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80063ca:	69fb      	ldr	r3, [r7, #28]
 80063cc:	3304      	adds	r3, #4
 80063ce:	2b06      	cmp	r3, #6
 80063d0:	d902      	bls.n	80063d8 <NVIC_EncodePriority+0x30>
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	3b03      	subs	r3, #3
 80063d6:	e000      	b.n	80063da <NVIC_EncodePriority+0x32>
 80063d8:	2300      	movs	r3, #0
 80063da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80063e0:	69bb      	ldr	r3, [r7, #24]
 80063e2:	fa02 f303 	lsl.w	r3, r2, r3
 80063e6:	43da      	mvns	r2, r3
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	401a      	ands	r2, r3
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80063f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	fa01 f303 	lsl.w	r3, r1, r3
 80063fa:	43d9      	mvns	r1, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006400:	4313      	orrs	r3, r2
         );
}
 8006402:	4618      	mov	r0, r3
 8006404:	3724      	adds	r7, #36	; 0x24
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
	...

08006410 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 800641a:	4a14      	ldr	r2, [pc, #80]	; (800646c <LL_SYSCFG_SetEXTISource+0x5c>)
 800641c:	683b      	ldr	r3, [r7, #0]
 800641e:	f003 0303 	and.w	r3, r3, #3
 8006422:	3302      	adds	r3, #2
 8006424:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	0c1b      	lsrs	r3, r3, #16
 800642c:	43db      	mvns	r3, r3
 800642e:	ea02 0103 	and.w	r1, r2, r3
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	0c1b      	lsrs	r3, r3, #16
 8006436:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	fa93 f3a3 	rbit	r3, r3
 800643e:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006440:	68bb      	ldr	r3, [r7, #8]
 8006442:	fab3 f383 	clz	r3, r3
 8006446:	b2db      	uxtb	r3, r3
 8006448:	f003 031f 	and.w	r3, r3, #31
 800644c:	687a      	ldr	r2, [r7, #4]
 800644e:	409a      	lsls	r2, r3
 8006450:	4806      	ldr	r0, [pc, #24]	; (800646c <LL_SYSCFG_SetEXTISource+0x5c>)
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	f003 0303 	and.w	r3, r3, #3
 8006458:	430a      	orrs	r2, r1
 800645a:	3302      	adds	r3, #2
 800645c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8006460:	bf00      	nop
 8006462:	3714      	adds	r7, #20
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	40010000 	.word	0x40010000

08006470 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8006470:	b480      	push	{r7}
 8006472:	b089      	sub	sp, #36	; 0x24
 8006474:	af00      	add	r7, sp, #0
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681a      	ldr	r2, [r3, #0]
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	fa93 f3a3 	rbit	r3, r3
 800648a:	613b      	str	r3, [r7, #16]
  return result;
 800648c:	693b      	ldr	r3, [r7, #16]
 800648e:	fab3 f383 	clz	r3, r3
 8006492:	b2db      	uxtb	r3, r3
 8006494:	005b      	lsls	r3, r3, #1
 8006496:	2103      	movs	r1, #3
 8006498:	fa01 f303 	lsl.w	r3, r1, r3
 800649c:	43db      	mvns	r3, r3
 800649e:	401a      	ands	r2, r3
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064a4:	69fb      	ldr	r3, [r7, #28]
 80064a6:	fa93 f3a3 	rbit	r3, r3
 80064aa:	61bb      	str	r3, [r7, #24]
  return result;
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	fab3 f383 	clz	r3, r3
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	005b      	lsls	r3, r3, #1
 80064b6:	6879      	ldr	r1, [r7, #4]
 80064b8:	fa01 f303 	lsl.w	r3, r1, r3
 80064bc:	431a      	orrs	r2, r3
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	601a      	str	r2, [r3, #0]
}
 80064c2:	bf00      	nop
 80064c4:	3724      	adds	r7, #36	; 0x24
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b089      	sub	sp, #36	; 0x24
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	60f8      	str	r0, [r7, #12]
 80064d6:	60b9      	str	r1, [r7, #8]
 80064d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	68da      	ldr	r2, [r3, #12]
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	fa93 f3a3 	rbit	r3, r3
 80064e8:	613b      	str	r3, [r7, #16]
  return result;
 80064ea:	693b      	ldr	r3, [r7, #16]
 80064ec:	fab3 f383 	clz	r3, r3
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	005b      	lsls	r3, r3, #1
 80064f4:	2103      	movs	r1, #3
 80064f6:	fa01 f303 	lsl.w	r3, r1, r3
 80064fa:	43db      	mvns	r3, r3
 80064fc:	401a      	ands	r2, r3
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006502:	69fb      	ldr	r3, [r7, #28]
 8006504:	fa93 f3a3 	rbit	r3, r3
 8006508:	61bb      	str	r3, [r7, #24]
  return result;
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	fab3 f383 	clz	r3, r3
 8006510:	b2db      	uxtb	r3, r3
 8006512:	005b      	lsls	r3, r3, #1
 8006514:	6879      	ldr	r1, [r7, #4]
 8006516:	fa01 f303 	lsl.w	r3, r1, r3
 800651a:	431a      	orrs	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	60da      	str	r2, [r3, #12]
}
 8006520:	bf00      	nop
 8006522:	3724      	adds	r7, #36	; 0x24
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr

0800652c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800652c:	b480      	push	{r7}
 800652e:	b083      	sub	sp, #12
 8006530:	af00      	add	r7, sp, #0
 8006532:	6078      	str	r0, [r7, #4]
 8006534:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	683a      	ldr	r2, [r7, #0]
 800653a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8006548:	b480      	push	{r7}
 800654a:	b085      	sub	sp, #20
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006550:	4b08      	ldr	r3, [pc, #32]	; (8006574 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006552:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006554:	4907      	ldr	r1, [pc, #28]	; (8006574 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	4313      	orrs	r3, r2
 800655a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800655c:	4b05      	ldr	r3, [pc, #20]	; (8006574 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800655e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4013      	ands	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006566:	68fb      	ldr	r3, [r7, #12]
}
 8006568:	bf00      	nop
 800656a:	3714      	adds	r7, #20
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr
 8006574:	40021000 	.word	0x40021000

08006578 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b08a      	sub	sp, #40	; 0x28
 800657c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800657e:	f107 031c 	add.w	r3, r7, #28
 8006582:	2200      	movs	r2, #0
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	605a      	str	r2, [r3, #4]
 8006588:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800658a:	1d3b      	adds	r3, r7, #4
 800658c:	2200      	movs	r2, #0
 800658e:	601a      	str	r2, [r3, #0]
 8006590:	605a      	str	r2, [r3, #4]
 8006592:	609a      	str	r2, [r3, #8]
 8006594:	60da      	str	r2, [r3, #12]
 8006596:	611a      	str	r2, [r3, #16]
 8006598:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800659a:	2004      	movs	r0, #4
 800659c:	f7ff ffd4 	bl	8006548 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 80065a0:	2020      	movs	r0, #32
 80065a2:	f7ff ffd1 	bl	8006548 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80065a6:	2001      	movs	r0, #1
 80065a8:	f7ff ffce 	bl	8006548 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80065ac:	2002      	movs	r0, #2
 80065ae:	f7ff ffcb 	bl	8006548 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 80065b2:	2108      	movs	r1, #8
 80065b4:	48d3      	ldr	r0, [pc, #844]	; (8006904 <MX_GPIO_Init+0x38c>)
 80065b6:	f7ff ffb9 	bl	800652c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 80065ba:	2108      	movs	r1, #8
 80065bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80065c0:	f7ff ffb4 	bl	800652c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 80065c4:	2110      	movs	r1, #16
 80065c6:	48cf      	ldr	r0, [pc, #828]	; (8006904 <MX_GPIO_Init+0x38c>)
 80065c8:	f7ff ffb0 	bl	800652c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 80065cc:	2120      	movs	r1, #32
 80065ce:	48cd      	ldr	r0, [pc, #820]	; (8006904 <MX_GPIO_Init+0x38c>)
 80065d0:	f7ff ffac 	bl	800652c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 80065d4:	2101      	movs	r1, #1
 80065d6:	48cc      	ldr	r0, [pc, #816]	; (8006908 <MX_GPIO_Init+0x390>)
 80065d8:	f7ff ffa8 	bl	800652c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 80065dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80065e0:	48c8      	ldr	r0, [pc, #800]	; (8006904 <MX_GPIO_Init+0x38c>)
 80065e2:	f7ff ffa3 	bl	800652c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 80065e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80065ea:	48c6      	ldr	r0, [pc, #792]	; (8006904 <MX_GPIO_Init+0x38c>)
 80065ec:	f7ff ff9e 	bl	800652c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 80065f0:	2140      	movs	r1, #64	; 0x40
 80065f2:	48c5      	ldr	r0, [pc, #788]	; (8006908 <MX_GPIO_Init+0x390>)
 80065f4:	f7ff ff9a 	bl	800652c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 80065f8:	2180      	movs	r1, #128	; 0x80
 80065fa:	48c3      	ldr	r0, [pc, #780]	; (8006908 <MX_GPIO_Init+0x390>)
 80065fc:	f7ff ff96 	bl	800652c <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8006600:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006604:	48c0      	ldr	r0, [pc, #768]	; (8006908 <MX_GPIO_Init+0x390>)
 8006606:	f7ff ff91 	bl	800652c <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 800660a:	49c0      	ldr	r1, [pc, #768]	; (800690c <MX_GPIO_Init+0x394>)
 800660c:	2002      	movs	r0, #2
 800660e:	f7ff feff 	bl	8006410 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8006612:	49bf      	ldr	r1, [pc, #764]	; (8006910 <MX_GPIO_Init+0x398>)
 8006614:	2002      	movs	r0, #2
 8006616:	f7ff fefb 	bl	8006410 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 800661a:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 800661e:	2005      	movs	r0, #5
 8006620:	f7ff fef6 	bl	8006410 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8006624:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 8006628:	2005      	movs	r0, #5
 800662a:	f7ff fef1 	bl	8006410 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 800662e:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8006632:	2002      	movs	r0, #2
 8006634:	f7ff feec 	bl	8006410 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 8006638:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800663c:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 800663e:	2301      	movs	r3, #1
 8006640:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006644:	2300      	movs	r3, #0
 8006646:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800664a:	2302      	movs	r3, #2
 800664c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006650:	f107 031c 	add.w	r3, r7, #28
 8006654:	4618      	mov	r0, r3
 8006656:	f005 ffff 	bl	800c658 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 800665a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800665e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006660:	2301      	movs	r3, #1
 8006662:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006666:	2300      	movs	r3, #0
 8006668:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800666c:	2302      	movs	r3, #2
 800666e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006672:	f107 031c 	add.w	r3, r7, #28
 8006676:	4618      	mov	r0, r3
 8006678:	f005 ffee 	bl	800c658 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 800667c:	2301      	movs	r3, #1
 800667e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8006680:	2301      	movs	r3, #1
 8006682:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8006686:	2300      	movs	r3, #0
 8006688:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800668c:	2302      	movs	r3, #2
 800668e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8006692:	f107 031c 	add.w	r3, r7, #28
 8006696:	4618      	mov	r0, r3
 8006698:	f005 ffde 	bl	800c658 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 800669c:	2302      	movs	r3, #2
 800669e:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80066a0:	2301      	movs	r3, #1
 80066a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80066a6:	2300      	movs	r3, #0
 80066a8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80066ac:	2302      	movs	r3, #2
 80066ae:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80066b2:	f107 031c 	add.w	r3, r7, #28
 80066b6:	4618      	mov	r0, r3
 80066b8:	f005 ffce 	bl	800c658 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 80066bc:	2304      	movs	r3, #4
 80066be:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80066c0:	2301      	movs	r3, #1
 80066c2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80066c6:	2300      	movs	r3, #0
 80066c8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80066cc:	2302      	movs	r3, #2
 80066ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80066d2:	f107 031c 	add.w	r3, r7, #28
 80066d6:	4618      	mov	r0, r3
 80066d8:	f005 ffbe 	bl	800c658 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 80066dc:	2201      	movs	r2, #1
 80066de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80066e2:	4888      	ldr	r0, [pc, #544]	; (8006904 <MX_GPIO_Init+0x38c>)
 80066e4:	f7ff fef3 	bl	80064ce <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 80066e8:	2201      	movs	r2, #1
 80066ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80066ee:	4885      	ldr	r0, [pc, #532]	; (8006904 <MX_GPIO_Init+0x38c>)
 80066f0:	f7ff feed 	bl	80064ce <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 80066f4:	2201      	movs	r2, #1
 80066f6:	2101      	movs	r1, #1
 80066f8:	4886      	ldr	r0, [pc, #536]	; (8006914 <MX_GPIO_Init+0x39c>)
 80066fa:	f7ff fee8 	bl	80064ce <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 80066fe:	2201      	movs	r2, #1
 8006700:	2102      	movs	r1, #2
 8006702:	4884      	ldr	r0, [pc, #528]	; (8006914 <MX_GPIO_Init+0x39c>)
 8006704:	f7ff fee3 	bl	80064ce <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 8006708:	2201      	movs	r2, #1
 800670a:	2104      	movs	r1, #4
 800670c:	487d      	ldr	r0, [pc, #500]	; (8006904 <MX_GPIO_Init+0x38c>)
 800670e:	f7ff fede 	bl	80064ce <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8006712:	2200      	movs	r2, #0
 8006714:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006718:	487a      	ldr	r0, [pc, #488]	; (8006904 <MX_GPIO_Init+0x38c>)
 800671a:	f7ff fea9 	bl	8006470 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 800671e:	2200      	movs	r2, #0
 8006720:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006724:	4877      	ldr	r0, [pc, #476]	; (8006904 <MX_GPIO_Init+0x38c>)
 8006726:	f7ff fea3 	bl	8006470 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 800672a:	2200      	movs	r2, #0
 800672c:	2101      	movs	r1, #1
 800672e:	4879      	ldr	r0, [pc, #484]	; (8006914 <MX_GPIO_Init+0x39c>)
 8006730:	f7ff fe9e 	bl	8006470 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8006734:	2200      	movs	r2, #0
 8006736:	2102      	movs	r1, #2
 8006738:	4876      	ldr	r0, [pc, #472]	; (8006914 <MX_GPIO_Init+0x39c>)
 800673a:	f7ff fe99 	bl	8006470 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 800673e:	2200      	movs	r2, #0
 8006740:	2104      	movs	r1, #4
 8006742:	4870      	ldr	r0, [pc, #448]	; (8006904 <MX_GPIO_Init+0x38c>)
 8006744:	f7ff fe94 	bl	8006470 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 8006748:	2308      	movs	r3, #8
 800674a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800674c:	2301      	movs	r3, #1
 800674e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006750:	2300      	movs	r3, #0
 8006752:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006754:	2300      	movs	r3, #0
 8006756:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8006758:	2302      	movs	r3, #2
 800675a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 800675c:	1d3b      	adds	r3, r7, #4
 800675e:	4619      	mov	r1, r3
 8006760:	4868      	ldr	r0, [pc, #416]	; (8006904 <MX_GPIO_Init+0x38c>)
 8006762:	f006 f96c 	bl	800ca3e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 8006766:	2308      	movs	r3, #8
 8006768:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800676a:	2301      	movs	r3, #1
 800676c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800676e:	2300      	movs	r3, #0
 8006770:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006772:	2300      	movs	r3, #0
 8006774:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006776:	2300      	movs	r3, #0
 8006778:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 800677a:	1d3b      	adds	r3, r7, #4
 800677c:	4619      	mov	r1, r3
 800677e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006782:	f006 f95c 	bl	800ca3e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 8006786:	2310      	movs	r3, #16
 8006788:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800678a:	2301      	movs	r3, #1
 800678c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800678e:	2300      	movs	r3, #0
 8006790:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006792:	2300      	movs	r3, #0
 8006794:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006796:	2300      	movs	r3, #0
 8006798:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 800679a:	1d3b      	adds	r3, r7, #4
 800679c:	4619      	mov	r1, r3
 800679e:	4859      	ldr	r0, [pc, #356]	; (8006904 <MX_GPIO_Init+0x38c>)
 80067a0:	f006 f94d 	bl	800ca3e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 80067a4:	2320      	movs	r3, #32
 80067a6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80067a8:	2301      	movs	r3, #1
 80067aa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80067ac:	2300      	movs	r3, #0
 80067ae:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80067b0:	2300      	movs	r3, #0
 80067b2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80067b4:	2300      	movs	r3, #0
 80067b6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 80067b8:	1d3b      	adds	r3, r7, #4
 80067ba:	4619      	mov	r1, r3
 80067bc:	4851      	ldr	r0, [pc, #324]	; (8006904 <MX_GPIO_Init+0x38c>)
 80067be:	f006 f93e 	bl	800ca3e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 80067c2:	2301      	movs	r3, #1
 80067c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80067c6:	2301      	movs	r3, #1
 80067c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80067ca:	2300      	movs	r3, #0
 80067cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80067ce:	2300      	movs	r3, #0
 80067d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80067d2:	2300      	movs	r3, #0
 80067d4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 80067d6:	1d3b      	adds	r3, r7, #4
 80067d8:	4619      	mov	r1, r3
 80067da:	484b      	ldr	r0, [pc, #300]	; (8006908 <MX_GPIO_Init+0x390>)
 80067dc:	f006 f92f 	bl	800ca3e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 80067e0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80067e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80067e6:	2301      	movs	r3, #1
 80067e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80067ea:	2300      	movs	r3, #0
 80067ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80067ee:	2300      	movs	r3, #0
 80067f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80067f2:	2300      	movs	r3, #0
 80067f4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 80067f6:	1d3b      	adds	r3, r7, #4
 80067f8:	4619      	mov	r1, r3
 80067fa:	4842      	ldr	r0, [pc, #264]	; (8006904 <MX_GPIO_Init+0x38c>)
 80067fc:	f006 f91f 	bl	800ca3e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8006800:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006804:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006806:	2301      	movs	r3, #1
 8006808:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800680a:	2300      	movs	r3, #0
 800680c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800680e:	2300      	movs	r3, #0
 8006810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006812:	2300      	movs	r3, #0
 8006814:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 8006816:	1d3b      	adds	r3, r7, #4
 8006818:	4619      	mov	r1, r3
 800681a:	483a      	ldr	r0, [pc, #232]	; (8006904 <MX_GPIO_Init+0x38c>)
 800681c:	f006 f90f 	bl	800ca3e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8006820:	2340      	movs	r3, #64	; 0x40
 8006822:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006824:	2301      	movs	r3, #1
 8006826:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006828:	2303      	movs	r3, #3
 800682a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800682c:	2300      	movs	r3, #0
 800682e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006830:	2300      	movs	r3, #0
 8006832:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8006834:	1d3b      	adds	r3, r7, #4
 8006836:	4619      	mov	r1, r3
 8006838:	4833      	ldr	r0, [pc, #204]	; (8006908 <MX_GPIO_Init+0x390>)
 800683a:	f006 f900 	bl	800ca3e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 800683e:	2380      	movs	r3, #128	; 0x80
 8006840:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006842:	2301      	movs	r3, #1
 8006844:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006846:	2303      	movs	r3, #3
 8006848:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800684a:	2300      	movs	r3, #0
 800684c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800684e:	2300      	movs	r3, #0
 8006850:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8006852:	1d3b      	adds	r3, r7, #4
 8006854:	4619      	mov	r1, r3
 8006856:	482c      	ldr	r0, [pc, #176]	; (8006908 <MX_GPIO_Init+0x390>)
 8006858:	f006 f8f1 	bl	800ca3e <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 800685c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006860:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8006862:	2301      	movs	r3, #1
 8006864:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8006866:	2303      	movs	r3, #3
 8006868:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800686a:	2300      	movs	r3, #0
 800686c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800686e:	2300      	movs	r3, #0
 8006870:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 8006872:	1d3b      	adds	r3, r7, #4
 8006874:	4619      	mov	r1, r3
 8006876:	4824      	ldr	r0, [pc, #144]	; (8006908 <MX_GPIO_Init+0x390>)
 8006878:	f006 f8e1 	bl	800ca3e <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800687c:	f7ff fd3e 	bl	80062fc <__NVIC_GetPriorityGrouping>
 8006880:	4603      	mov	r3, r0
 8006882:	2200      	movs	r2, #0
 8006884:	2100      	movs	r1, #0
 8006886:	4618      	mov	r0, r3
 8006888:	f7ff fd8e 	bl	80063a8 <NVIC_EncodePriority>
 800688c:	4603      	mov	r3, r0
 800688e:	4619      	mov	r1, r3
 8006890:	2006      	movs	r0, #6
 8006892:	f7ff fd5f 	bl	8006354 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 8006896:	2006      	movs	r0, #6
 8006898:	f7ff fd3e 	bl	8006318 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800689c:	f7ff fd2e 	bl	80062fc <__NVIC_GetPriorityGrouping>
 80068a0:	4603      	mov	r3, r0
 80068a2:	2200      	movs	r2, #0
 80068a4:	2100      	movs	r1, #0
 80068a6:	4618      	mov	r0, r3
 80068a8:	f7ff fd7e 	bl	80063a8 <NVIC_EncodePriority>
 80068ac:	4603      	mov	r3, r0
 80068ae:	4619      	mov	r1, r3
 80068b0:	2007      	movs	r0, #7
 80068b2:	f7ff fd4f 	bl	8006354 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 80068b6:	2007      	movs	r0, #7
 80068b8:	f7ff fd2e 	bl	8006318 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80068bc:	f7ff fd1e 	bl	80062fc <__NVIC_GetPriorityGrouping>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2200      	movs	r2, #0
 80068c4:	2100      	movs	r1, #0
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7ff fd6e 	bl	80063a8 <NVIC_EncodePriority>
 80068cc:	4603      	mov	r3, r0
 80068ce:	4619      	mov	r1, r3
 80068d0:	2008      	movs	r0, #8
 80068d2:	f7ff fd3f 	bl	8006354 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 80068d6:	2008      	movs	r0, #8
 80068d8:	f7ff fd1e 	bl	8006318 <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80068dc:	f7ff fd0e 	bl	80062fc <__NVIC_GetPriorityGrouping>
 80068e0:	4603      	mov	r3, r0
 80068e2:	2200      	movs	r2, #0
 80068e4:	2100      	movs	r1, #0
 80068e6:	4618      	mov	r0, r3
 80068e8:	f7ff fd5e 	bl	80063a8 <NVIC_EncodePriority>
 80068ec:	4603      	mov	r3, r0
 80068ee:	4619      	mov	r1, r3
 80068f0:	2028      	movs	r0, #40	; 0x28
 80068f2:	f7ff fd2f 	bl	8006354 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 80068f6:	2028      	movs	r0, #40	; 0x28
 80068f8:	f7ff fd0e 	bl	8006318 <__NVIC_EnableIRQ>

}
 80068fc:	bf00      	nop
 80068fe:	3728      	adds	r7, #40	; 0x28
 8006900:	46bd      	mov	sp, r7
 8006902:	e009      	b.n	8006918 <MX_GPIO_Init+0x3a0>
 8006904:	48000800 	.word	0x48000800
 8006908:	48000400 	.word	0x48000400
 800690c:	0f000003 	.word	0x0f000003
 8006910:	f0000003 	.word	0xf0000003
 8006914:	48001400 	.word	0x48001400
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop

0800691c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800691c:	b480      	push	{r7}
 800691e:	b083      	sub	sp, #12
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8006924:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006928:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800692c:	f003 0301 	and.w	r3, r3, #1
 8006930:	2b00      	cmp	r3, #0
 8006932:	d013      	beq.n	800695c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8006934:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006938:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800693c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8006940:	2b00      	cmp	r3, #0
 8006942:	d00b      	beq.n	800695c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8006944:	e000      	b.n	8006948 <ITM_SendChar+0x2c>
    {
      __NOP();
 8006946:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8006948:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d0f9      	beq.n	8006946 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8006952:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8006956:	687a      	ldr	r2, [r7, #4]
 8006958:	b2d2      	uxtb	r2, r2
 800695a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800695c:	687b      	ldr	r3, [r7, #4]
}
 800695e:	4618      	mov	r0, r3
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b086      	sub	sp, #24
 800696e:	af00      	add	r7, sp, #0
 8006970:	60f8      	str	r0, [r7, #12]
 8006972:	60b9      	str	r1, [r7, #8]
 8006974:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8006976:	2300      	movs	r3, #0
 8006978:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 800697a:	2300      	movs	r3, #0
 800697c:	617b      	str	r3, [r7, #20]
 800697e:	e009      	b.n	8006994 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	1c5a      	adds	r2, r3, #1
 8006984:	60ba      	str	r2, [r7, #8]
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	4618      	mov	r0, r3
 800698a:	f7ff ffc7 	bl	800691c <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	3301      	adds	r3, #1
 8006992:	617b      	str	r3, [r7, #20]
 8006994:	697a      	ldr	r2, [r7, #20]
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	429a      	cmp	r2, r3
 800699a:	dbf1      	blt.n	8006980 <_write+0x16>
  return len;
 800699c:	687b      	ldr	r3, [r7, #4]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3718      	adds	r7, #24
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <HAL_DAC_ErrorCallbackCh1>:

void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b083      	sub	sp, #12
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
	// do something
}
 80069ae:	bf00      	nop
 80069b0:	370c      	adds	r7, #12
 80069b2:	46bd      	mov	sp, r7
 80069b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b8:	4770      	bx	lr
	...

080069bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80069c0:	f000 ff31 	bl	8007826 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80069c4:	f000 f870 	bl	8006aa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80069c8:	f7ff fdd6 	bl	8006578 <MX_GPIO_Init>
  MX_DMA_Init();
 80069cc:	f7ff fc10 	bl	80061f0 <MX_DMA_Init>
  MX_DAC1_Init();
 80069d0:	f7ff fac0 	bl	8005f54 <MX_DAC1_Init>
  MX_DAC2_Init();
 80069d4:	f7ff fb08 	bl	8005fe8 <MX_DAC2_Init>
  MX_ADC1_Init();
 80069d8:	f7ff f97e 	bl	8005cd8 <MX_ADC1_Init>
  MX_COMP1_Init();
 80069dc:	f7ff fa60 	bl	8005ea0 <MX_COMP1_Init>
  MX_TIM2_Init();
 80069e0:	f000 fc16 	bl	8007210 <MX_TIM2_Init>
  MX_TIM17_Init();
 80069e4:	f000 fdb0 	bl	8007548 <MX_TIM17_Init>
  MX_SPI3_Init();
 80069e8:	f000 f90a 	bl	8006c00 <MX_SPI3_Init>
  MX_RNG_Init();
 80069ec:	f000 f8fa 	bl	8006be4 <MX_RNG_Init>
  MX_TIM1_Init();
 80069f0:	f000 fb9e 	bl	8007130 <MX_TIM1_Init>
  MX_TIM8_Init();
 80069f4:	f000 fcc6 	bl	8007384 <MX_TIM8_Init>
  MX_TIM16_Init();
 80069f8:	f000 fd7e 	bl	80074f8 <MX_TIM16_Init>
  MX_TIM15_Init();
 80069fc:	f000 fd2a 	bl	8007454 <MX_TIM15_Init>
  MX_TIM5_Init();
 8006a00:	f000 fc70 	bl	80072e4 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  DT_InitRegister();
 8006a04:	f7fd f94e 	bl	8003ca4 <DT_InitRegister>

  // main signal function output (external)
  //DAC_InitDevices()
  SM_Init();
 8006a08:	f7fd fde4 	bl	80045d4 <SM_Init>
  FuncO_Init();
 8006a0c:	f7fd fb3e 	bl	800408c <FuncO_Init>
  FuncO_ApplyPresetToSignal(eDefaultFuncPreset);
 8006a10:	2000      	movs	r0, #0
 8006a12:	f7fd fbf3 	bl	80041fc <FuncO_ApplyPresetToSignal>
  FuncO_ApplyPresetToSync(eDefaultFuncPreset);
 8006a16:	2000      	movs	r0, #0
 8006a18:	f7fd fc2e 	bl	8004278 <FuncO_ApplyPresetToSync>

  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8006a1c:	2110      	movs	r1, #16
 8006a1e:	481b      	ldr	r0, [pc, #108]	; (8006a8c <main+0xd0>)
 8006a20:	f002 fc05 	bl	800922e <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);

#ifndef DISABLE_ALL_TIMERS

  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 8006a24:	481a      	ldr	r0, [pc, #104]	; (8006a90 <main+0xd4>)
 8006a26:	f004 fd3d 	bl	800b4a4 <HAL_TIM_Base_Start>
  FreqO_ApplyPreset(eDefaultFreqPreset);
 8006a2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006a2e:	f7fd fab7 	bl	8003fa0 <FreqO_ApplyPreset>

#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8006a32:	2201      	movs	r2, #1
 8006a34:	2108      	movs	r1, #8
 8006a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006a3a:	f003 fc39 	bl	800a2b0 <HAL_GPIO_WritePin>

  // PGA gain
  //GO_ApplyPreset_Fast(eDefaultGainPreset);
  VPP_ApplyPresetToSignal(eDefaultVppPreset);
 8006a3e:	2059      	movs	r0, #89	; 0x59
 8006a40:	f7fd fe9e 	bl	8004780 <VPP_ApplyPresetToSignal>
  //HAL_TIM_Base_Start_IT(&htim17);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8006a44:	2200      	movs	r2, #0
 8006a46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006a4a:	4812      	ldr	r0, [pc, #72]	; (8006a94 <main+0xd8>)
 8006a4c:	f003 fc30 	bl	800a2b0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8006a50:	2200      	movs	r2, #0
 8006a52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006a56:	480f      	ldr	r0, [pc, #60]	; (8006a94 <main+0xd8>)
 8006a58:	f003 fc2a 	bl	800a2b0 <HAL_GPIO_WritePin>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8006a5c:	480e      	ldr	r0, [pc, #56]	; (8006a98 <main+0xdc>)
 8006a5e:	f004 fd21 	bl	800b4a4 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8006a62:	4b0e      	ldr	r3, [pc, #56]	; (8006a9c <main+0xe0>)
 8006a64:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a68:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8006a6a:	4b0c      	ldr	r3, [pc, #48]	; (8006a9c <main+0xe0>)
 8006a6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006a70:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 8006a72:	f7fa f8e5 	bl	8000c40 <DM_Init>
  DM_PostInit();
 8006a76:	f7fa f8f1 	bl	8000c5c <DM_PostInit>

  // DM_UpdateDisplay()
  HAL_TIM_Base_Start_IT(&htim15);
 8006a7a:	4809      	ldr	r0, [pc, #36]	; (8006aa0 <main+0xe4>)
 8006a7c:	f004 fd40 	bl	800b500 <HAL_TIM_Base_Start_IT>

  //HAL_TIM_Base_Start_IT(&htim16);

  // debounce timer
  HAL_TIM_Base_Start(&htim5);
 8006a80:	4808      	ldr	r0, [pc, #32]	; (8006aa4 <main+0xe8>)
 8006a82:	f004 fd0f 	bl	800b4a4 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 8006a86:	f7fc fc11 	bl	80032ac <EM_ProcessEvent>
 8006a8a:	e7fc      	b.n	8006a86 <main+0xca>
 8006a8c:	200025f8 	.word	0x200025f8
 8006a90:	20002730 	.word	0x20002730
 8006a94:	48000800 	.word	0x48000800
 8006a98:	20002860 	.word	0x20002860
 8006a9c:	40001000 	.word	0x40001000
 8006aa0:	2000277c 	.word	0x2000277c
 8006aa4:	20002814 	.word	0x20002814

08006aa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b0a8      	sub	sp, #160	; 0xa0
 8006aac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006aae:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006ab2:	2238      	movs	r2, #56	; 0x38
 8006ab4:	2100      	movs	r1, #0
 8006ab6:	4618      	mov	r0, r3
 8006ab8:	f007 f81e 	bl	800daf8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006abc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	605a      	str	r2, [r3, #4]
 8006ac6:	609a      	str	r2, [r3, #8]
 8006ac8:	60da      	str	r2, [r3, #12]
 8006aca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006acc:	463b      	mov	r3, r7
 8006ace:	2254      	movs	r2, #84	; 0x54
 8006ad0:	2100      	movs	r1, #0
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f007 f810 	bl	800daf8 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8006ad8:	2000      	movs	r0, #0
 8006ada:	f003 fc01 	bl	800a2e0 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8006ade:	2322      	movs	r3, #34	; 0x22
 8006ae0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006ae2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006ae6:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006ae8:	2340      	movs	r3, #64	; 0x40
 8006aea:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8006aec:	2301      	movs	r3, #1
 8006aee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006af2:	2302      	movs	r3, #2
 8006af4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006af8:	2302      	movs	r3, #2
 8006afa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8006afe:	2302      	movs	r3, #2
 8006b00:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8006b04:	232a      	movs	r3, #42	; 0x2a
 8006b06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV30;
 8006b0a:	231e      	movs	r3, #30
 8006b0c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8006b10:	2304      	movs	r3, #4
 8006b12:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006b16:	2302      	movs	r3, #2
 8006b18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006b1c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8006b20:	4618      	mov	r0, r3
 8006b22:	f003 fc81 	bl	800a428 <HAL_RCC_OscConfig>
 8006b26:	4603      	mov	r3, r0
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d001      	beq.n	8006b30 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8006b2c:	f000 f82a 	bl	8006b84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006b30:	230f      	movs	r3, #15
 8006b32:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006b34:	2303      	movs	r3, #3
 8006b36:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006b40:	2300      	movs	r3, #0
 8006b42:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8006b44:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8006b48:	2108      	movs	r1, #8
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f003 ff84 	bl	800aa58 <HAL_RCC_ClockConfig>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d001      	beq.n	8006b5a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8006b56:	f000 f815 	bl	8006b84 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8006b5a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8006b5e:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8006b60:	2300      	movs	r3, #0
 8006b62:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_PLL;
 8006b64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006b68:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006b6a:	463b      	mov	r3, r7
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f004 f963 	bl	800ae38 <HAL_RCCEx_PeriphCLKConfig>
 8006b72:	4603      	mov	r3, r0
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d001      	beq.n	8006b7c <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8006b78:	f000 f804 	bl	8006b84 <Error_Handler>
  }
}
 8006b7c:	bf00      	nop
 8006b7e:	37a0      	adds	r7, #160	; 0xa0
 8006b80:	46bd      	mov	sp, r7
 8006b82:	bd80      	pop	{r7, pc}

08006b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006b84:	b480      	push	{r7}
 8006b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006b88:	bf00      	nop
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b90:	4770      	bx	lr

08006b92 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8006b92:	b480      	push	{r7}
 8006b94:	b083      	sub	sp, #12
 8006b96:	af00      	add	r7, sp, #0
 8006b98:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	f043 0204 	orr.w	r2, r3, #4
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	601a      	str	r2, [r3, #0]
}
 8006ba6:	bf00      	nop
 8006ba8:	370c      	adds	r7, #12
 8006baa:	46bd      	mov	sp, r7
 8006bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb0:	4770      	bx	lr
	...

08006bb4 <LL_AHB2_GRP1_EnableClock>:
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8006bbc:	4b08      	ldr	r3, [pc, #32]	; (8006be0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006bbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bc0:	4907      	ldr	r1, [pc, #28]	; (8006be0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8006bc8:	4b05      	ldr	r3, [pc, #20]	; (8006be0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8006bca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4013      	ands	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
}
 8006bd4:	bf00      	nop
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	40021000 	.word	0x40021000

08006be4 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8006be8:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8006bec:	f7ff ffe2 	bl	8006bb4 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8006bf0:	4802      	ldr	r0, [pc, #8]	; (8006bfc <MX_RNG_Init+0x18>)
 8006bf2:	f7ff ffce 	bl	8006b92 <LL_RNG_Enable>

}
 8006bf6:	bf00      	nop
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	50060800 	.word	0x50060800

08006c00 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8006c04:	4b1b      	ldr	r3, [pc, #108]	; (8006c74 <MX_SPI3_Init+0x74>)
 8006c06:	4a1c      	ldr	r2, [pc, #112]	; (8006c78 <MX_SPI3_Init+0x78>)
 8006c08:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8006c0a:	4b1a      	ldr	r3, [pc, #104]	; (8006c74 <MX_SPI3_Init+0x74>)
 8006c0c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006c10:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006c12:	4b18      	ldr	r3, [pc, #96]	; (8006c74 <MX_SPI3_Init+0x74>)
 8006c14:	2200      	movs	r2, #0
 8006c16:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006c18:	4b16      	ldr	r3, [pc, #88]	; (8006c74 <MX_SPI3_Init+0x74>)
 8006c1a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006c1e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006c20:	4b14      	ldr	r3, [pc, #80]	; (8006c74 <MX_SPI3_Init+0x74>)
 8006c22:	2200      	movs	r2, #0
 8006c24:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8006c26:	4b13      	ldr	r3, [pc, #76]	; (8006c74 <MX_SPI3_Init+0x74>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8006c2c:	4b11      	ldr	r3, [pc, #68]	; (8006c74 <MX_SPI3_Init+0x74>)
 8006c2e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006c32:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006c34:	4b0f      	ldr	r3, [pc, #60]	; (8006c74 <MX_SPI3_Init+0x74>)
 8006c36:	2210      	movs	r2, #16
 8006c38:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006c3a:	4b0e      	ldr	r3, [pc, #56]	; (8006c74 <MX_SPI3_Init+0x74>)
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8006c40:	4b0c      	ldr	r3, [pc, #48]	; (8006c74 <MX_SPI3_Init+0x74>)
 8006c42:	2200      	movs	r2, #0
 8006c44:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006c46:	4b0b      	ldr	r3, [pc, #44]	; (8006c74 <MX_SPI3_Init+0x74>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8006c4c:	4b09      	ldr	r3, [pc, #36]	; (8006c74 <MX_SPI3_Init+0x74>)
 8006c4e:	2207      	movs	r2, #7
 8006c50:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006c52:	4b08      	ldr	r3, [pc, #32]	; (8006c74 <MX_SPI3_Init+0x74>)
 8006c54:	2200      	movs	r2, #0
 8006c56:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8006c58:	4b06      	ldr	r3, [pc, #24]	; (8006c74 <MX_SPI3_Init+0x74>)
 8006c5a:	2208      	movs	r2, #8
 8006c5c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006c5e:	4805      	ldr	r0, [pc, #20]	; (8006c74 <MX_SPI3_Init+0x74>)
 8006c60:	f004 fb36 	bl	800b2d0 <HAL_SPI_Init>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8006c6a:	f7ff ff8b 	bl	8006b84 <Error_Handler>
  }

}
 8006c6e:	bf00      	nop
 8006c70:	bd80      	pop	{r7, pc}
 8006c72:	bf00      	nop
 8006c74:	200026cc 	.word	0x200026cc
 8006c78:	40003c00 	.word	0x40003c00

08006c7c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b08a      	sub	sp, #40	; 0x28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c84:	f107 0314 	add.w	r3, r7, #20
 8006c88:	2200      	movs	r2, #0
 8006c8a:	601a      	str	r2, [r3, #0]
 8006c8c:	605a      	str	r2, [r3, #4]
 8006c8e:	609a      	str	r2, [r3, #8]
 8006c90:	60da      	str	r2, [r3, #12]
 8006c92:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	4a17      	ldr	r2, [pc, #92]	; (8006cf8 <HAL_SPI_MspInit+0x7c>)
 8006c9a:	4293      	cmp	r3, r2
 8006c9c:	d128      	bne.n	8006cf0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8006c9e:	4b17      	ldr	r3, [pc, #92]	; (8006cfc <HAL_SPI_MspInit+0x80>)
 8006ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca2:	4a16      	ldr	r2, [pc, #88]	; (8006cfc <HAL_SPI_MspInit+0x80>)
 8006ca4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ca8:	6593      	str	r3, [r2, #88]	; 0x58
 8006caa:	4b14      	ldr	r3, [pc, #80]	; (8006cfc <HAL_SPI_MspInit+0x80>)
 8006cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006cae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006cb2:	613b      	str	r3, [r7, #16]
 8006cb4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006cb6:	4b11      	ldr	r3, [pc, #68]	; (8006cfc <HAL_SPI_MspInit+0x80>)
 8006cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cba:	4a10      	ldr	r2, [pc, #64]	; (8006cfc <HAL_SPI_MspInit+0x80>)
 8006cbc:	f043 0304 	orr.w	r3, r3, #4
 8006cc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006cc2:	4b0e      	ldr	r3, [pc, #56]	; (8006cfc <HAL_SPI_MspInit+0x80>)
 8006cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cc6:	f003 0304 	and.w	r3, r3, #4
 8006cca:	60fb      	str	r3, [r7, #12]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8006cce:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006cd4:	2302      	movs	r3, #2
 8006cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006cd8:	2300      	movs	r3, #0
 8006cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006cdc:	2300      	movs	r3, #0
 8006cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006ce0:	2306      	movs	r3, #6
 8006ce2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ce4:	f107 0314 	add.w	r3, r7, #20
 8006ce8:	4619      	mov	r1, r3
 8006cea:	4805      	ldr	r0, [pc, #20]	; (8006d00 <HAL_SPI_MspInit+0x84>)
 8006cec:	f003 f95e 	bl	8009fac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8006cf0:	bf00      	nop
 8006cf2:	3728      	adds	r7, #40	; 0x28
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	bd80      	pop	{r7, pc}
 8006cf8:	40003c00 	.word	0x40003c00
 8006cfc:	40021000 	.word	0x40021000
 8006d00:	48000800 	.word	0x48000800

08006d04 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8006d04:	b480      	push	{r7}
 8006d06:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8006d08:	4b05      	ldr	r3, [pc, #20]	; (8006d20 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	4a04      	ldr	r2, [pc, #16]	; (8006d20 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8006d0e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d12:	6093      	str	r3, [r2, #8]
}
 8006d14:	bf00      	nop
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	40007000 	.word	0x40007000

08006d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b082      	sub	sp, #8
 8006d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d2a:	4b0f      	ldr	r3, [pc, #60]	; (8006d68 <HAL_MspInit+0x44>)
 8006d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d2e:	4a0e      	ldr	r2, [pc, #56]	; (8006d68 <HAL_MspInit+0x44>)
 8006d30:	f043 0301 	orr.w	r3, r3, #1
 8006d34:	6613      	str	r3, [r2, #96]	; 0x60
 8006d36:	4b0c      	ldr	r3, [pc, #48]	; (8006d68 <HAL_MspInit+0x44>)
 8006d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	607b      	str	r3, [r7, #4]
 8006d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006d42:	4b09      	ldr	r3, [pc, #36]	; (8006d68 <HAL_MspInit+0x44>)
 8006d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d46:	4a08      	ldr	r2, [pc, #32]	; (8006d68 <HAL_MspInit+0x44>)
 8006d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d4c:	6593      	str	r3, [r2, #88]	; 0x58
 8006d4e:	4b06      	ldr	r3, [pc, #24]	; (8006d68 <HAL_MspInit+0x44>)
 8006d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d56:	603b      	str	r3, [r7, #0]
 8006d58:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8006d5a:	f7ff ffd3 	bl	8006d04 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006d5e:	bf00      	nop
 8006d60:	3708      	adds	r7, #8
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}
 8006d66:	bf00      	nop
 8006d68:	40021000 	.word	0x40021000

08006d6c <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b083      	sub	sp, #12
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8006d74:	4b07      	ldr	r3, [pc, #28]	; (8006d94 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8006d76:	695a      	ldr	r2, [r3, #20]
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	4013      	ands	r3, r2
 8006d7c:	687a      	ldr	r2, [r7, #4]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d101      	bne.n	8006d86 <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8006d82:	2301      	movs	r3, #1
 8006d84:	e000      	b.n	8006d88 <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8006d86:	2300      	movs	r3, #0
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	370c      	adds	r7, #12
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d92:	4770      	bx	lr
 8006d94:	40010400 	.word	0x40010400

08006d98 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8006d98:	b480      	push	{r7}
 8006d9a:	b083      	sub	sp, #12
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8006da0:	4a04      	ldr	r2, [pc, #16]	; (8006db4 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6153      	str	r3, [r2, #20]
}
 8006da6:	bf00      	nop
 8006da8:	370c      	adds	r7, #12
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	40010400 	.word	0x40010400

08006db8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006db8:	b480      	push	{r7}
 8006dba:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8006dbc:	bf00      	nop
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006dca:	e7fe      	b.n	8006dca <HardFault_Handler+0x4>

08006dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006dd0:	e7fe      	b.n	8006dd0 <MemManage_Handler+0x4>

08006dd2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006dd6:	e7fe      	b.n	8006dd6 <BusFault_Handler+0x4>

08006dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006dd8:	b480      	push	{r7}
 8006dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006ddc:	e7fe      	b.n	8006ddc <UsageFault_Handler+0x4>

08006dde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006dde:	b480      	push	{r7}
 8006de0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006de2:	bf00      	nop
 8006de4:	46bd      	mov	sp, r7
 8006de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dea:	4770      	bx	lr

08006dec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006dec:	b480      	push	{r7}
 8006dee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006df0:	bf00      	nop
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006dfe:	bf00      	nop
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006e0c:	f000 fd5e 	bl	80078cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006e10:	bf00      	nop
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0))
 8006e18:	2001      	movs	r0, #1
 8006e1a:	f7ff ffa7 	bl	8006d6c <LL_EXTI_IsActiveFlag_0_31>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d005      	beq.n	8006e30 <EXTI0_IRQHandler+0x1c>
	{
		EM_SetNewEvent(evRedBtn);
 8006e24:	2004      	movs	r0, #4
 8006e26:	f7fc fbb9 	bl	800359c <EM_SetNewEvent>
		printf("'Red' BTN3_EXTI0_Pin\n");
 8006e2a:	4807      	ldr	r0, [pc, #28]	; (8006e48 <EXTI0_IRQHandler+0x34>)
 8006e2c:	f007 fb24 	bl	800e478 <puts>
	}

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8006e30:	2001      	movs	r0, #1
 8006e32:	f7ff ff9b 	bl	8006d6c <LL_EXTI_IsActiveFlag_0_31>
 8006e36:	4603      	mov	r3, r0
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d002      	beq.n	8006e42 <EXTI0_IRQHandler+0x2e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8006e3c:	2001      	movs	r0, #1
 8006e3e:	f7ff ffab 	bl	8006d98 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8006e42:	bf00      	nop
 8006e44:	bd80      	pop	{r7, pc}
 8006e46:	bf00      	nop
 8006e48:	08010e34 	.word	0x08010e34

08006e4c <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1))
 8006e50:	2002      	movs	r0, #2
 8006e52:	f7ff ff8b 	bl	8006d6c <LL_EXTI_IsActiveFlag_0_31>
 8006e56:	4603      	mov	r3, r0
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d005      	beq.n	8006e68 <EXTI1_IRQHandler+0x1c>
	{
		EM_SetNewEvent(evGreenBtn);
 8006e5c:	2002      	movs	r0, #2
 8006e5e:	f7fc fb9d 	bl	800359c <EM_SetNewEvent>
		printf("'Green' BTN4_EXTI1_Pin\n");
 8006e62:	4807      	ldr	r0, [pc, #28]	; (8006e80 <EXTI1_IRQHandler+0x34>)
 8006e64:	f007 fb08 	bl	800e478 <puts>
	}


  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8006e68:	2002      	movs	r0, #2
 8006e6a:	f7ff ff7f 	bl	8006d6c <LL_EXTI_IsActiveFlag_0_31>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d002      	beq.n	8006e7a <EXTI1_IRQHandler+0x2e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8006e74:	2002      	movs	r0, #2
 8006e76:	f7ff ff8f 	bl	8006d98 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8006e7a:	bf00      	nop
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	08010e4c 	.word	0x08010e4c

08006e84 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2))
 8006e88:	2004      	movs	r0, #4
 8006e8a:	f7ff ff6f 	bl	8006d6c <LL_EXTI_IsActiveFlag_0_31>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d005      	beq.n	8006ea0 <EXTI2_IRQHandler+0x1c>
	{
		EM_SetNewEvent(evEncoderPush);
 8006e94:	2006      	movs	r0, #6
 8006e96:	f7fc fb81 	bl	800359c <EM_SetNewEvent>
		printf("'EncoderPush' ENC_EXTI2_Pin\n");
 8006e9a:	4807      	ldr	r0, [pc, #28]	; (8006eb8 <EXTI2_IRQHandler+0x34>)
 8006e9c:	f007 faec 	bl	800e478 <puts>
	}


  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8006ea0:	2004      	movs	r0, #4
 8006ea2:	f7ff ff63 	bl	8006d6c <LL_EXTI_IsActiveFlag_0_31>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d002      	beq.n	8006eb2 <EXTI2_IRQHandler+0x2e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 8006eac:	2004      	movs	r0, #4
 8006eae:	f7ff ff73 	bl	8006d98 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8006eb2:	bf00      	nop
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	08010e64 	.word	0x08010e64

08006ebc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8006ec0:	4802      	ldr	r0, [pc, #8]	; (8006ecc <DMA1_Channel1_IRQHandler+0x10>)
 8006ec2:	f002 ff23 	bl	8009d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006ec6:	bf00      	nop
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	20002560 	.word	0x20002560

08006ed0 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8006ed4:	4802      	ldr	r0, [pc, #8]	; (8006ee0 <DMA1_Channel2_IRQHandler+0x10>)
 8006ed6:	f002 ff19 	bl	8009d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8006eda:	bf00      	nop
 8006edc:	bd80      	pop	{r7, pc}
 8006ede:	bf00      	nop
 8006ee0:	2000260c 	.word	0x2000260c

08006ee4 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8006ee8:	4802      	ldr	r0, [pc, #8]	; (8006ef4 <DMA1_Channel3_IRQHandler+0x10>)
 8006eea:	f002 ff0f 	bl	8009d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8006eee:	bf00      	nop
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	2000266c 	.word	0x2000266c

08006ef8 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	DM_UpdateDisplay();
 8006efc:	f7f9 ffd4 	bl	8000ea8 <DM_UpdateDisplay>
	{
		printf("Encoder turned\n");
		TIM1->SR &= ~(TIM_SR_IDXF);
	}
*/
	if((TIM1->SR & TIM_SR_DIRF) == TIM_SR_DIRF)
 8006f00:	4b0d      	ldr	r3, [pc, #52]	; (8006f38 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8006f02:	691b      	ldr	r3, [r3, #16]
 8006f04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006f0c:	d10b      	bne.n	8006f26 <TIM1_BRK_TIM15_IRQHandler+0x2e>
	{
		EM_SetNewEvent(evEncoderSet);
 8006f0e:	2005      	movs	r0, #5
 8006f10:	f7fc fb44 	bl	800359c <EM_SetNewEvent>
		printf("Encoder new direction\n");
 8006f14:	4809      	ldr	r0, [pc, #36]	; (8006f3c <TIM1_BRK_TIM15_IRQHandler+0x44>)
 8006f16:	f007 faaf 	bl	800e478 <puts>
		TIM1->SR &= ~(TIM_SR_DIRF);
 8006f1a:	4b07      	ldr	r3, [pc, #28]	; (8006f38 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8006f1c:	691b      	ldr	r3, [r3, #16]
 8006f1e:	4a06      	ldr	r2, [pc, #24]	; (8006f38 <TIM1_BRK_TIM15_IRQHandler+0x40>)
 8006f20:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006f24:	6113      	str	r3, [r2, #16]

	}
  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006f26:	4806      	ldr	r0, [pc, #24]	; (8006f40 <TIM1_BRK_TIM15_IRQHandler+0x48>)
 8006f28:	f004 fbf5 	bl	800b716 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8006f2c:	4805      	ldr	r0, [pc, #20]	; (8006f44 <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 8006f2e:	f004 fbf2 	bl	800b716 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 8006f32:	bf00      	nop
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	40012c00 	.word	0x40012c00
 8006f3c:	08010e80 	.word	0x08010e80
 8006f40:	20002860 	.word	0x20002860
 8006f44:	2000277c 	.word	0x2000277c

08006f48 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8006f48:	b580      	push	{r7, lr}
 8006f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	//snprintf(control_pressed, sizeof(control_pressed), " ");
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006f4c:	4803      	ldr	r0, [pc, #12]	; (8006f5c <TIM1_UP_TIM16_IRQHandler+0x14>)
 8006f4e:	f004 fbe2 	bl	800b716 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 8006f52:	4803      	ldr	r0, [pc, #12]	; (8006f60 <TIM1_UP_TIM16_IRQHandler+0x18>)
 8006f54:	f004 fbdf 	bl	800b716 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8006f58:	bf00      	nop
 8006f5a:	bd80      	pop	{r7, pc}
 8006f5c:	20002860 	.word	0x20002860
 8006f60:	200028f8 	.word	0x200028f8

08006f64 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 8006f68:	f7ff f97c 	bl	8006264 <update_dc_bias_sweep>




  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006f6c:	4803      	ldr	r0, [pc, #12]	; (8006f7c <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 8006f6e:	f004 fbd2 	bl	800b716 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 8006f72:	4803      	ldr	r0, [pc, #12]	; (8006f80 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 8006f74:	f004 fbcf 	bl	800b716 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8006f78:	bf00      	nop
 8006f7a:	bd80      	pop	{r7, pc}
 8006f7c:	20002860 	.word	0x20002860
 8006f80:	200027c8 	.word	0x200027c8

08006f84 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006f88:	4802      	ldr	r0, [pc, #8]	; (8006f94 <TIM2_IRQHandler+0x10>)
 8006f8a:	f004 fbc4 	bl	800b716 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006f8e:	bf00      	nop
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	200028ac 	.word	0x200028ac

08006f98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */


	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14))
 8006f9c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006fa0:	f7ff fee4 	bl	8006d6c <LL_EXTI_IsActiveFlag_0_31>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d005      	beq.n	8006fb6 <EXTI15_10_IRQHandler+0x1e>
	{

		EM_SetNewEvent(evBlueBtn);
 8006faa:	2001      	movs	r0, #1
 8006fac:	f7fc faf6 	bl	800359c <EM_SetNewEvent>
		printf("'Blue' BTN1_EXTI14_Pin\n");
 8006fb0:	4813      	ldr	r0, [pc, #76]	; (8007000 <EXTI15_10_IRQHandler+0x68>)
 8006fb2:	f007 fa61 	bl	800e478 <puts>
	}
	if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15))
 8006fb6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006fba:	f7ff fed7 	bl	8006d6c <LL_EXTI_IsActiveFlag_0_31>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d005      	beq.n	8006fd0 <EXTI15_10_IRQHandler+0x38>
	{
		EM_SetNewEvent(evYellowBtn);
 8006fc4:	2003      	movs	r0, #3
 8006fc6:	f7fc fae9 	bl	800359c <EM_SetNewEvent>
		printf("'Yellow' BTN2_EXTI15_Pin\n");
 8006fca:	480e      	ldr	r0, [pc, #56]	; (8007004 <EXTI15_10_IRQHandler+0x6c>)
 8006fcc:	f007 fa54 	bl	800e478 <puts>
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8006fd0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006fd4:	f7ff feca 	bl	8006d6c <LL_EXTI_IsActiveFlag_0_31>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d003      	beq.n	8006fe6 <EXTI15_10_IRQHandler+0x4e>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 8006fde:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006fe2:	f7ff fed9 	bl	8006d98 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8006fe6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006fea:	f7ff febf 	bl	8006d6c <LL_EXTI_IsActiveFlag_0_31>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d003      	beq.n	8006ffc <EXTI15_10_IRQHandler+0x64>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8006ff4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006ff8:	f7ff fece 	bl	8006d98 <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8006ffc:	bf00      	nop
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	08010e98 	.word	0x08010e98
 8007004:	08010eb0 	.word	0x08010eb0

08007008 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b086      	sub	sp, #24
 800700c:	af00      	add	r7, sp, #0
 800700e:	60f8      	str	r0, [r7, #12]
 8007010:	60b9      	str	r1, [r7, #8]
 8007012:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007014:	2300      	movs	r3, #0
 8007016:	617b      	str	r3, [r7, #20]
 8007018:	e00a      	b.n	8007030 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800701a:	f3af 8000 	nop.w
 800701e:	4601      	mov	r1, r0
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	1c5a      	adds	r2, r3, #1
 8007024:	60ba      	str	r2, [r7, #8]
 8007026:	b2ca      	uxtb	r2, r1
 8007028:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800702a:	697b      	ldr	r3, [r7, #20]
 800702c:	3301      	adds	r3, #1
 800702e:	617b      	str	r3, [r7, #20]
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	429a      	cmp	r2, r3
 8007036:	dbf0      	blt.n	800701a <_read+0x12>
	}

return len;
 8007038:	687b      	ldr	r3, [r7, #4]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3718      	adds	r7, #24
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}

08007042 <_close>:
	}
	return len;
}

int _close(int file)
{
 8007042:	b480      	push	{r7}
 8007044:	b083      	sub	sp, #12
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
	return -1;
 800704a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800704e:	4618      	mov	r0, r3
 8007050:	370c      	adds	r7, #12
 8007052:	46bd      	mov	sp, r7
 8007054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007058:	4770      	bx	lr

0800705a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800705a:	b480      	push	{r7}
 800705c:	b083      	sub	sp, #12
 800705e:	af00      	add	r7, sp, #0
 8007060:	6078      	str	r0, [r7, #4]
 8007062:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800706a:	605a      	str	r2, [r3, #4]
	return 0;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	370c      	adds	r7, #12
 8007072:	46bd      	mov	sp, r7
 8007074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007078:	4770      	bx	lr

0800707a <_isatty>:

int _isatty(int file)
{
 800707a:	b480      	push	{r7}
 800707c:	b083      	sub	sp, #12
 800707e:	af00      	add	r7, sp, #0
 8007080:	6078      	str	r0, [r7, #4]
	return 1;
 8007082:	2301      	movs	r3, #1
}
 8007084:	4618      	mov	r0, r3
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	60f8      	str	r0, [r7, #12]
 8007098:	60b9      	str	r1, [r7, #8]
 800709a:	607a      	str	r2, [r7, #4]
	return 0;
 800709c:	2300      	movs	r3, #0
}
 800709e:	4618      	mov	r0, r3
 80070a0:	3714      	adds	r7, #20
 80070a2:	46bd      	mov	sp, r7
 80070a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a8:	4770      	bx	lr
	...

080070ac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b084      	sub	sp, #16
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80070b4:	4b11      	ldr	r3, [pc, #68]	; (80070fc <_sbrk+0x50>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d102      	bne.n	80070c2 <_sbrk+0x16>
		heap_end = &end;
 80070bc:	4b0f      	ldr	r3, [pc, #60]	; (80070fc <_sbrk+0x50>)
 80070be:	4a10      	ldr	r2, [pc, #64]	; (8007100 <_sbrk+0x54>)
 80070c0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80070c2:	4b0e      	ldr	r3, [pc, #56]	; (80070fc <_sbrk+0x50>)
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80070c8:	4b0c      	ldr	r3, [pc, #48]	; (80070fc <_sbrk+0x50>)
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	4413      	add	r3, r2
 80070d0:	466a      	mov	r2, sp
 80070d2:	4293      	cmp	r3, r2
 80070d4:	d907      	bls.n	80070e6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80070d6:	f006 fce5 	bl	800daa4 <__errno>
 80070da:	4602      	mov	r2, r0
 80070dc:	230c      	movs	r3, #12
 80070de:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80070e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80070e4:	e006      	b.n	80070f4 <_sbrk+0x48>
	}

	heap_end += incr;
 80070e6:	4b05      	ldr	r3, [pc, #20]	; (80070fc <_sbrk+0x50>)
 80070e8:	681a      	ldr	r2, [r3, #0]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4413      	add	r3, r2
 80070ee:	4a03      	ldr	r2, [pc, #12]	; (80070fc <_sbrk+0x50>)
 80070f0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80070f2:	68fb      	ldr	r3, [r7, #12]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}
 80070fc:	20001f20 	.word	0x20001f20
 8007100:	20002950 	.word	0x20002950

08007104 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007104:	b480      	push	{r7}
 8007106:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007108:	4b08      	ldr	r3, [pc, #32]	; (800712c <SystemInit+0x28>)
 800710a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800710e:	4a07      	ldr	r2, [pc, #28]	; (800712c <SystemInit+0x28>)
 8007110:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007114:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007118:	4b04      	ldr	r3, [pc, #16]	; (800712c <SystemInit+0x28>)
 800711a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800711e:	609a      	str	r2, [r3, #8]
#endif
}
 8007120:	bf00      	nop
 8007122:	46bd      	mov	sp, r7
 8007124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	e000ed00 	.word	0xe000ed00

08007130 <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b09a      	sub	sp, #104	; 0x68
 8007134:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 8007136:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800713a:	2224      	movs	r2, #36	; 0x24
 800713c:	2100      	movs	r1, #0
 800713e:	4618      	mov	r0, r3
 8007140:	f006 fcda 	bl	800daf8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007144:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007148:	2200      	movs	r2, #0
 800714a:	601a      	str	r2, [r3, #0]
 800714c:	605a      	str	r2, [r3, #4]
 800714e:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8007150:	1d3b      	adds	r3, r7, #4
 8007152:	2234      	movs	r2, #52	; 0x34
 8007154:	2100      	movs	r1, #0
 8007156:	4618      	mov	r0, r3
 8007158:	f006 fcce 	bl	800daf8 <memset>

  htim1.Instance = TIM1;
 800715c:	4b2a      	ldr	r3, [pc, #168]	; (8007208 <MX_TIM1_Init+0xd8>)
 800715e:	4a2b      	ldr	r2, [pc, #172]	; (800720c <MX_TIM1_Init+0xdc>)
 8007160:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8007162:	4b29      	ldr	r3, [pc, #164]	; (8007208 <MX_TIM1_Init+0xd8>)
 8007164:	2200      	movs	r2, #0
 8007166:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 8007168:	4b27      	ldr	r3, [pc, #156]	; (8007208 <MX_TIM1_Init+0xd8>)
 800716a:	2240      	movs	r2, #64	; 0x40
 800716c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 800716e:	4b26      	ldr	r3, [pc, #152]	; (8007208 <MX_TIM1_Init+0xd8>)
 8007170:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007174:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007176:	4b24      	ldr	r3, [pc, #144]	; (8007208 <MX_TIM1_Init+0xd8>)
 8007178:	2200      	movs	r2, #0
 800717a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800717c:	4b22      	ldr	r3, [pc, #136]	; (8007208 <MX_TIM1_Init+0xd8>)
 800717e:	2200      	movs	r2, #0
 8007180:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007182:	4b21      	ldr	r3, [pc, #132]	; (8007208 <MX_TIM1_Init+0xd8>)
 8007184:	2200      	movs	r2, #0
 8007186:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8007188:	2303      	movs	r3, #3
 800718a:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800718c:	2300      	movs	r3, #0
 800718e:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8007190:	2301      	movs	r3, #1
 8007192:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8007194:	2300      	movs	r3, #0
 8007196:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8007198:	2300      	movs	r3, #0
 800719a:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800719c:	2300      	movs	r3, #0
 800719e:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80071a0:	2301      	movs	r3, #1
 80071a2:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80071a4:	2300      	movs	r3, #0
 80071a6:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 80071a8:	2300      	movs	r3, #0
 80071aa:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80071ac:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80071b0:	4619      	mov	r1, r3
 80071b2:	4815      	ldr	r0, [pc, #84]	; (8007208 <MX_TIM1_Init+0xd8>)
 80071b4:	f004 fa09 	bl	800b5ca <HAL_TIM_Encoder_Init>
 80071b8:	4603      	mov	r3, r0
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d001      	beq.n	80071c2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80071be:	f7ff fce1 	bl	8006b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80071c2:	2320      	movs	r3, #32
 80071c4:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80071c6:	2300      	movs	r3, #0
 80071c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80071ca:	2300      	movs	r3, #0
 80071cc:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80071ce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80071d2:	4619      	mov	r1, r3
 80071d4:	480c      	ldr	r0, [pc, #48]	; (8007208 <MX_TIM1_Init+0xd8>)
 80071d6:	f004 ff81 	bl	800c0dc <HAL_TIMEx_MasterConfigSynchronization>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d001      	beq.n	80071e4 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 80071e0:	f7ff fcd0 	bl	8006b84 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80071e4:	2300      	movs	r3, #0
 80071e6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80071e8:	2300      	movs	r3, #0
 80071ea:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80071ec:	1d3b      	adds	r3, r7, #4
 80071ee:	4619      	mov	r1, r3
 80071f0:	4805      	ldr	r0, [pc, #20]	; (8007208 <MX_TIM1_Init+0xd8>)
 80071f2:	f005 f809 	bl	800c208 <HAL_TIMEx_ConfigBreakDeadTime>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d001      	beq.n	8007200 <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 80071fc:	f7ff fcc2 	bl	8006b84 <Error_Handler>
  }

}
 8007200:	bf00      	nop
 8007202:	3768      	adds	r7, #104	; 0x68
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}
 8007208:	20002860 	.word	0x20002860
 800720c:	40012c00 	.word	0x40012c00

08007210 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b08c      	sub	sp, #48	; 0x30
 8007214:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8007216:	f107 0320 	add.w	r3, r7, #32
 800721a:	2200      	movs	r2, #0
 800721c:	601a      	str	r2, [r3, #0]
 800721e:	605a      	str	r2, [r3, #4]
 8007220:	609a      	str	r2, [r3, #8]
 8007222:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8007224:	f107 030c 	add.w	r3, r7, #12
 8007228:	2200      	movs	r2, #0
 800722a:	601a      	str	r2, [r3, #0]
 800722c:	605a      	str	r2, [r3, #4]
 800722e:	609a      	str	r2, [r3, #8]
 8007230:	60da      	str	r2, [r3, #12]
 8007232:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007234:	463b      	mov	r3, r7
 8007236:	2200      	movs	r2, #0
 8007238:	601a      	str	r2, [r3, #0]
 800723a:	605a      	str	r2, [r3, #4]
 800723c:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 800723e:	4b28      	ldr	r3, [pc, #160]	; (80072e0 <MX_TIM2_Init+0xd0>)
 8007240:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8007244:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 8007246:	4b26      	ldr	r3, [pc, #152]	; (80072e0 <MX_TIM2_Init+0xd0>)
 8007248:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800724c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800724e:	4b24      	ldr	r3, [pc, #144]	; (80072e0 <MX_TIM2_Init+0xd0>)
 8007250:	2200      	movs	r2, #0
 8007252:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 8007254:	4b22      	ldr	r3, [pc, #136]	; (80072e0 <MX_TIM2_Init+0xd0>)
 8007256:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800725a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800725c:	4b20      	ldr	r3, [pc, #128]	; (80072e0 <MX_TIM2_Init+0xd0>)
 800725e:	2200      	movs	r2, #0
 8007260:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007262:	4b1f      	ldr	r3, [pc, #124]	; (80072e0 <MX_TIM2_Init+0xd0>)
 8007264:	2200      	movs	r2, #0
 8007266:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8007268:	481d      	ldr	r0, [pc, #116]	; (80072e0 <MX_TIM2_Init+0xd0>)
 800726a:	f004 f8c3 	bl	800b3f4 <HAL_TIM_Base_Init>
 800726e:	4603      	mov	r3, r0
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8007274:	f7ff fc86 	bl	8006b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007278:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800727c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800727e:	f107 0320 	add.w	r3, r7, #32
 8007282:	4619      	mov	r1, r3
 8007284:	4816      	ldr	r0, [pc, #88]	; (80072e0 <MX_TIM2_Init+0xd0>)
 8007286:	f004 fbc5 	bl	800ba14 <HAL_TIM_ConfigClockSource>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d001      	beq.n	8007294 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8007290:	f7ff fc78 	bl	8006b84 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8007294:	2305      	movs	r3, #5
 8007296:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8007298:	2350      	movs	r3, #80	; 0x50
 800729a:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 800729c:	2300      	movs	r3, #0
 800729e:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 80072a0:	2300      	movs	r3, #0
 80072a2:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 80072a4:	f107 030c 	add.w	r3, r7, #12
 80072a8:	4619      	mov	r1, r3
 80072aa:	480d      	ldr	r0, [pc, #52]	; (80072e0 <MX_TIM2_Init+0xd0>)
 80072ac:	f004 fca2 	bl	800bbf4 <HAL_TIM_SlaveConfigSynchro>
 80072b0:	4603      	mov	r3, r0
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d001      	beq.n	80072ba <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 80072b6:	f7ff fc65 	bl	8006b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80072ba:	2300      	movs	r3, #0
 80072bc:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80072be:	2300      	movs	r3, #0
 80072c0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80072c2:	463b      	mov	r3, r7
 80072c4:	4619      	mov	r1, r3
 80072c6:	4806      	ldr	r0, [pc, #24]	; (80072e0 <MX_TIM2_Init+0xd0>)
 80072c8:	f004 ff08 	bl	800c0dc <HAL_TIMEx_MasterConfigSynchronization>
 80072cc:	4603      	mov	r3, r0
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d001      	beq.n	80072d6 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 80072d2:	f7ff fc57 	bl	8006b84 <Error_Handler>
  }

}
 80072d6:	bf00      	nop
 80072d8:	3730      	adds	r7, #48	; 0x30
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	200028ac 	.word	0x200028ac

080072e4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b088      	sub	sp, #32
 80072e8:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80072ea:	f107 0310 	add.w	r3, r7, #16
 80072ee:	2200      	movs	r2, #0
 80072f0:	601a      	str	r2, [r3, #0]
 80072f2:	605a      	str	r2, [r3, #4]
 80072f4:	609a      	str	r2, [r3, #8]
 80072f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80072f8:	1d3b      	adds	r3, r7, #4
 80072fa:	2200      	movs	r2, #0
 80072fc:	601a      	str	r2, [r3, #0]
 80072fe:	605a      	str	r2, [r3, #4]
 8007300:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 8007302:	4b1e      	ldr	r3, [pc, #120]	; (800737c <MX_TIM5_Init+0x98>)
 8007304:	4a1e      	ldr	r2, [pc, #120]	; (8007380 <MX_TIM5_Init+0x9c>)
 8007306:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 8007308:	4b1c      	ldr	r3, [pc, #112]	; (800737c <MX_TIM5_Init+0x98>)
 800730a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800730e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007310:	4b1a      	ldr	r3, [pc, #104]	; (800737c <MX_TIM5_Init+0x98>)
 8007312:	2200      	movs	r2, #0
 8007314:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8007316:	4b19      	ldr	r3, [pc, #100]	; (800737c <MX_TIM5_Init+0x98>)
 8007318:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800731c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800731e:	4b17      	ldr	r3, [pc, #92]	; (800737c <MX_TIM5_Init+0x98>)
 8007320:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007324:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007326:	4b15      	ldr	r3, [pc, #84]	; (800737c <MX_TIM5_Init+0x98>)
 8007328:	2200      	movs	r2, #0
 800732a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800732c:	4813      	ldr	r0, [pc, #76]	; (800737c <MX_TIM5_Init+0x98>)
 800732e:	f004 f861 	bl	800b3f4 <HAL_TIM_Base_Init>
 8007332:	4603      	mov	r3, r0
 8007334:	2b00      	cmp	r3, #0
 8007336:	d001      	beq.n	800733c <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8007338:	f7ff fc24 	bl	8006b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800733c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007340:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8007342:	f107 0310 	add.w	r3, r7, #16
 8007346:	4619      	mov	r1, r3
 8007348:	480c      	ldr	r0, [pc, #48]	; (800737c <MX_TIM5_Init+0x98>)
 800734a:	f004 fb63 	bl	800ba14 <HAL_TIM_ConfigClockSource>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d001      	beq.n	8007358 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 8007354:	f7ff fc16 	bl	8006b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007358:	2300      	movs	r3, #0
 800735a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800735c:	2300      	movs	r3, #0
 800735e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8007360:	1d3b      	adds	r3, r7, #4
 8007362:	4619      	mov	r1, r3
 8007364:	4805      	ldr	r0, [pc, #20]	; (800737c <MX_TIM5_Init+0x98>)
 8007366:	f004 feb9 	bl	800c0dc <HAL_TIMEx_MasterConfigSynchronization>
 800736a:	4603      	mov	r3, r0
 800736c:	2b00      	cmp	r3, #0
 800736e:	d001      	beq.n	8007374 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 8007370:	f7ff fc08 	bl	8006b84 <Error_Handler>
  }

}
 8007374:	bf00      	nop
 8007376:	3720      	adds	r7, #32
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}
 800737c:	20002814 	.word	0x20002814
 8007380:	40000c00 	.word	0x40000c00

08007384 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b094      	sub	sp, #80	; 0x50
 8007388:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800738a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800738e:	2200      	movs	r2, #0
 8007390:	601a      	str	r2, [r3, #0]
 8007392:	605a      	str	r2, [r3, #4]
 8007394:	609a      	str	r2, [r3, #8]
 8007396:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007398:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800739c:	2200      	movs	r2, #0
 800739e:	601a      	str	r2, [r3, #0]
 80073a0:	605a      	str	r2, [r3, #4]
 80073a2:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80073a4:	463b      	mov	r3, r7
 80073a6:	2234      	movs	r2, #52	; 0x34
 80073a8:	2100      	movs	r1, #0
 80073aa:	4618      	mov	r0, r3
 80073ac:	f006 fba4 	bl	800daf8 <memset>

  htim8.Instance = TIM8;
 80073b0:	4b26      	ldr	r3, [pc, #152]	; (800744c <MX_TIM8_Init+0xc8>)
 80073b2:	4a27      	ldr	r2, [pc, #156]	; (8007450 <MX_TIM8_Init+0xcc>)
 80073b4:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80073b6:	4b25      	ldr	r3, [pc, #148]	; (800744c <MX_TIM8_Init+0xc8>)
 80073b8:	2200      	movs	r2, #0
 80073ba:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80073bc:	4b23      	ldr	r3, [pc, #140]	; (800744c <MX_TIM8_Init+0xc8>)
 80073be:	2200      	movs	r2, #0
 80073c0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 80073c2:	4b22      	ldr	r3, [pc, #136]	; (800744c <MX_TIM8_Init+0xc8>)
 80073c4:	2201      	movs	r2, #1
 80073c6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80073c8:	4b20      	ldr	r3, [pc, #128]	; (800744c <MX_TIM8_Init+0xc8>)
 80073ca:	2200      	movs	r2, #0
 80073cc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80073ce:	4b1f      	ldr	r3, [pc, #124]	; (800744c <MX_TIM8_Init+0xc8>)
 80073d0:	2200      	movs	r2, #0
 80073d2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80073d4:	4b1d      	ldr	r3, [pc, #116]	; (800744c <MX_TIM8_Init+0xc8>)
 80073d6:	2200      	movs	r2, #0
 80073d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80073da:	481c      	ldr	r0, [pc, #112]	; (800744c <MX_TIM8_Init+0xc8>)
 80073dc:	f004 f80a 	bl	800b3f4 <HAL_TIM_Base_Init>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d001      	beq.n	80073ea <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 80073e6:	f7ff fbcd 	bl	8006b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80073ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80073ee:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80073f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80073f4:	4619      	mov	r1, r3
 80073f6:	4815      	ldr	r0, [pc, #84]	; (800744c <MX_TIM8_Init+0xc8>)
 80073f8:	f004 fb0c 	bl	800ba14 <HAL_TIM_ConfigClockSource>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d001      	beq.n	8007406 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8007402:	f7ff fbbf 	bl	8006b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007406:	2320      	movs	r3, #32
 8007408:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800740a:	2300      	movs	r3, #0
 800740c:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800740e:	2300      	movs	r3, #0
 8007410:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8007412:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8007416:	4619      	mov	r1, r3
 8007418:	480c      	ldr	r0, [pc, #48]	; (800744c <MX_TIM8_Init+0xc8>)
 800741a:	f004 fe5f 	bl	800c0dc <HAL_TIMEx_MasterConfigSynchronization>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d001      	beq.n	8007428 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8007424:	f7ff fbae 	bl	8006b84 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8007428:	2300      	movs	r3, #0
 800742a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800742c:	2300      	movs	r3, #0
 800742e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8007430:	463b      	mov	r3, r7
 8007432:	4619      	mov	r1, r3
 8007434:	4805      	ldr	r0, [pc, #20]	; (800744c <MX_TIM8_Init+0xc8>)
 8007436:	f004 fee7 	bl	800c208 <HAL_TIMEx_ConfigBreakDeadTime>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d001      	beq.n	8007444 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 8007440:	f7ff fba0 	bl	8006b84 <Error_Handler>
  }

}
 8007444:	bf00      	nop
 8007446:	3750      	adds	r7, #80	; 0x50
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}
 800744c:	20002730 	.word	0x20002730
 8007450:	40013400 	.word	0x40013400

08007454 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 8007454:	b580      	push	{r7, lr}
 8007456:	b088      	sub	sp, #32
 8007458:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800745a:	f107 0310 	add.w	r3, r7, #16
 800745e:	2200      	movs	r2, #0
 8007460:	601a      	str	r2, [r3, #0]
 8007462:	605a      	str	r2, [r3, #4]
 8007464:	609a      	str	r2, [r3, #8]
 8007466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007468:	1d3b      	adds	r3, r7, #4
 800746a:	2200      	movs	r2, #0
 800746c:	601a      	str	r2, [r3, #0]
 800746e:	605a      	str	r2, [r3, #4]
 8007470:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 8007472:	4b1f      	ldr	r3, [pc, #124]	; (80074f0 <MX_TIM15_Init+0x9c>)
 8007474:	4a1f      	ldr	r2, [pc, #124]	; (80074f4 <MX_TIM15_Init+0xa0>)
 8007476:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 8007478:	4b1d      	ldr	r3, [pc, #116]	; (80074f0 <MX_TIM15_Init+0x9c>)
 800747a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800747e:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007480:	4b1b      	ldr	r3, [pc, #108]	; (80074f0 <MX_TIM15_Init+0x9c>)
 8007482:	2200      	movs	r2, #0
 8007484:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 8007486:	4b1a      	ldr	r3, [pc, #104]	; (80074f0 <MX_TIM15_Init+0x9c>)
 8007488:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800748c:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800748e:	4b18      	ldr	r3, [pc, #96]	; (80074f0 <MX_TIM15_Init+0x9c>)
 8007490:	2200      	movs	r2, #0
 8007492:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8007494:	4b16      	ldr	r3, [pc, #88]	; (80074f0 <MX_TIM15_Init+0x9c>)
 8007496:	2200      	movs	r2, #0
 8007498:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800749a:	4b15      	ldr	r3, [pc, #84]	; (80074f0 <MX_TIM15_Init+0x9c>)
 800749c:	2200      	movs	r2, #0
 800749e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 80074a0:	4813      	ldr	r0, [pc, #76]	; (80074f0 <MX_TIM15_Init+0x9c>)
 80074a2:	f003 ffa7 	bl	800b3f4 <HAL_TIM_Base_Init>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d001      	beq.n	80074b0 <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 80074ac:	f7ff fb6a 	bl	8006b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80074b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80074b4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 80074b6:	f107 0310 	add.w	r3, r7, #16
 80074ba:	4619      	mov	r1, r3
 80074bc:	480c      	ldr	r0, [pc, #48]	; (80074f0 <MX_TIM15_Init+0x9c>)
 80074be:	f004 faa9 	bl	800ba14 <HAL_TIM_ConfigClockSource>
 80074c2:	4603      	mov	r3, r0
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d001      	beq.n	80074cc <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 80074c8:	f7ff fb5c 	bl	8006b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80074cc:	2300      	movs	r3, #0
 80074ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80074d0:	2300      	movs	r3, #0
 80074d2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 80074d4:	1d3b      	adds	r3, r7, #4
 80074d6:	4619      	mov	r1, r3
 80074d8:	4805      	ldr	r0, [pc, #20]	; (80074f0 <MX_TIM15_Init+0x9c>)
 80074da:	f004 fdff 	bl	800c0dc <HAL_TIMEx_MasterConfigSynchronization>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d001      	beq.n	80074e8 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 80074e4:	f7ff fb4e 	bl	8006b84 <Error_Handler>
  }

}
 80074e8:	bf00      	nop
 80074ea:	3720      	adds	r7, #32
 80074ec:	46bd      	mov	sp, r7
 80074ee:	bd80      	pop	{r7, pc}
 80074f0:	2000277c 	.word	0x2000277c
 80074f4:	40014000 	.word	0x40014000

080074f8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 80074fc:	4b10      	ldr	r3, [pc, #64]	; (8007540 <MX_TIM16_Init+0x48>)
 80074fe:	4a11      	ldr	r2, [pc, #68]	; (8007544 <MX_TIM16_Init+0x4c>)
 8007500:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 1024;
 8007502:	4b0f      	ldr	r3, [pc, #60]	; (8007540 <MX_TIM16_Init+0x48>)
 8007504:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007508:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800750a:	4b0d      	ldr	r3, [pc, #52]	; (8007540 <MX_TIM16_Init+0x48>)
 800750c:	2200      	movs	r2, #0
 800750e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1024;
 8007510:	4b0b      	ldr	r3, [pc, #44]	; (8007540 <MX_TIM16_Init+0x48>)
 8007512:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007516:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007518:	4b09      	ldr	r3, [pc, #36]	; (8007540 <MX_TIM16_Init+0x48>)
 800751a:	2200      	movs	r2, #0
 800751c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800751e:	4b08      	ldr	r3, [pc, #32]	; (8007540 <MX_TIM16_Init+0x48>)
 8007520:	2200      	movs	r2, #0
 8007522:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007524:	4b06      	ldr	r3, [pc, #24]	; (8007540 <MX_TIM16_Init+0x48>)
 8007526:	2200      	movs	r2, #0
 8007528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800752a:	4805      	ldr	r0, [pc, #20]	; (8007540 <MX_TIM16_Init+0x48>)
 800752c:	f003 ff62 	bl	800b3f4 <HAL_TIM_Base_Init>
 8007530:	4603      	mov	r3, r0
 8007532:	2b00      	cmp	r3, #0
 8007534:	d001      	beq.n	800753a <MX_TIM16_Init+0x42>
  {
    Error_Handler();
 8007536:	f7ff fb25 	bl	8006b84 <Error_Handler>
  }

}
 800753a:	bf00      	nop
 800753c:	bd80      	pop	{r7, pc}
 800753e:	bf00      	nop
 8007540:	200028f8 	.word	0x200028f8
 8007544:	40014400 	.word	0x40014400

08007548 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 800754c:	4b0f      	ldr	r3, [pc, #60]	; (800758c <MX_TIM17_Init+0x44>)
 800754e:	4a10      	ldr	r2, [pc, #64]	; (8007590 <MX_TIM17_Init+0x48>)
 8007550:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 8007552:	4b0e      	ldr	r3, [pc, #56]	; (800758c <MX_TIM17_Init+0x44>)
 8007554:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8007558:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 800755a:	4b0c      	ldr	r3, [pc, #48]	; (800758c <MX_TIM17_Init+0x44>)
 800755c:	2200      	movs	r2, #0
 800755e:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 8007560:	4b0a      	ldr	r3, [pc, #40]	; (800758c <MX_TIM17_Init+0x44>)
 8007562:	2240      	movs	r2, #64	; 0x40
 8007564:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007566:	4b09      	ldr	r3, [pc, #36]	; (800758c <MX_TIM17_Init+0x44>)
 8007568:	2200      	movs	r2, #0
 800756a:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 800756c:	4b07      	ldr	r3, [pc, #28]	; (800758c <MX_TIM17_Init+0x44>)
 800756e:	2200      	movs	r2, #0
 8007570:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007572:	4b06      	ldr	r3, [pc, #24]	; (800758c <MX_TIM17_Init+0x44>)
 8007574:	2200      	movs	r2, #0
 8007576:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8007578:	4804      	ldr	r0, [pc, #16]	; (800758c <MX_TIM17_Init+0x44>)
 800757a:	f003 ff3b 	bl	800b3f4 <HAL_TIM_Base_Init>
 800757e:	4603      	mov	r3, r0
 8007580:	2b00      	cmp	r3, #0
 8007582:	d001      	beq.n	8007588 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8007584:	f7ff fafe 	bl	8006b84 <Error_Handler>
  }

}
 8007588:	bf00      	nop
 800758a:	bd80      	pop	{r7, pc}
 800758c:	200027c8 	.word	0x200027c8
 8007590:	40014800 	.word	0x40014800

08007594 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b08a      	sub	sp, #40	; 0x28
 8007598:	af00      	add	r7, sp, #0
 800759a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800759c:	f107 0314 	add.w	r3, r7, #20
 80075a0:	2200      	movs	r2, #0
 80075a2:	601a      	str	r2, [r3, #0]
 80075a4:	605a      	str	r2, [r3, #4]
 80075a6:	609a      	str	r2, [r3, #8]
 80075a8:	60da      	str	r2, [r3, #12]
 80075aa:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a23      	ldr	r2, [pc, #140]	; (8007640 <HAL_TIM_Encoder_MspInit+0xac>)
 80075b2:	4293      	cmp	r3, r2
 80075b4:	d13f      	bne.n	8007636 <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80075b6:	4b23      	ldr	r3, [pc, #140]	; (8007644 <HAL_TIM_Encoder_MspInit+0xb0>)
 80075b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075ba:	4a22      	ldr	r2, [pc, #136]	; (8007644 <HAL_TIM_Encoder_MspInit+0xb0>)
 80075bc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80075c0:	6613      	str	r3, [r2, #96]	; 0x60
 80075c2:	4b20      	ldr	r3, [pc, #128]	; (8007644 <HAL_TIM_Encoder_MspInit+0xb0>)
 80075c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80075c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80075ca:	613b      	str	r3, [r7, #16]
 80075cc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80075ce:	4b1d      	ldr	r3, [pc, #116]	; (8007644 <HAL_TIM_Encoder_MspInit+0xb0>)
 80075d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075d2:	4a1c      	ldr	r2, [pc, #112]	; (8007644 <HAL_TIM_Encoder_MspInit+0xb0>)
 80075d4:	f043 0304 	orr.w	r3, r3, #4
 80075d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80075da:	4b1a      	ldr	r3, [pc, #104]	; (8007644 <HAL_TIM_Encoder_MspInit+0xb0>)
 80075dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80075de:	f003 0304 	and.w	r3, r3, #4
 80075e2:	60fb      	str	r3, [r7, #12]
 80075e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80075e6:	2303      	movs	r3, #3
 80075e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80075ea:	2302      	movs	r3, #2
 80075ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80075ee:	2300      	movs	r3, #0
 80075f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80075f2:	2300      	movs	r3, #0
 80075f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80075f6:	2302      	movs	r3, #2
 80075f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80075fa:	f107 0314 	add.w	r3, r7, #20
 80075fe:	4619      	mov	r1, r3
 8007600:	4811      	ldr	r0, [pc, #68]	; (8007648 <HAL_TIM_Encoder_MspInit+0xb4>)
 8007602:	f002 fcd3 	bl	8009fac <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8007606:	2200      	movs	r2, #0
 8007608:	2100      	movs	r1, #0
 800760a:	2018      	movs	r0, #24
 800760c:	f001 fdb9 	bl	8009182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8007610:	2018      	movs	r0, #24
 8007612:	f001 fdd0 	bl	80091b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8007616:	2200      	movs	r2, #0
 8007618:	2101      	movs	r1, #1
 800761a:	2019      	movs	r0, #25
 800761c:	f001 fdb1 	bl	8009182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8007620:	2019      	movs	r0, #25
 8007622:	f001 fdc8 	bl	80091b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 8007626:	2200      	movs	r2, #0
 8007628:	2101      	movs	r1, #1
 800762a:	201a      	movs	r0, #26
 800762c:	f001 fda9 	bl	8009182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8007630:	201a      	movs	r0, #26
 8007632:	f001 fdc0 	bl	80091b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8007636:	bf00      	nop
 8007638:	3728      	adds	r7, #40	; 0x28
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	40012c00 	.word	0x40012c00
 8007644:	40021000 	.word	0x40021000
 8007648:	48000800 	.word	0x48000800

0800764c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b08e      	sub	sp, #56	; 0x38
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007654:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007658:	2200      	movs	r2, #0
 800765a:	601a      	str	r2, [r3, #0]
 800765c:	605a      	str	r2, [r3, #4]
 800765e:	609a      	str	r2, [r3, #8]
 8007660:	60da      	str	r2, [r3, #12]
 8007662:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800766c:	d131      	bne.n	80076d2 <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800766e:	4b53      	ldr	r3, [pc, #332]	; (80077bc <HAL_TIM_Base_MspInit+0x170>)
 8007670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007672:	4a52      	ldr	r2, [pc, #328]	; (80077bc <HAL_TIM_Base_MspInit+0x170>)
 8007674:	f043 0301 	orr.w	r3, r3, #1
 8007678:	6593      	str	r3, [r2, #88]	; 0x58
 800767a:	4b50      	ldr	r3, [pc, #320]	; (80077bc <HAL_TIM_Base_MspInit+0x170>)
 800767c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800767e:	f003 0301 	and.w	r3, r3, #1
 8007682:	623b      	str	r3, [r7, #32]
 8007684:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007686:	4b4d      	ldr	r3, [pc, #308]	; (80077bc <HAL_TIM_Base_MspInit+0x170>)
 8007688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800768a:	4a4c      	ldr	r2, [pc, #304]	; (80077bc <HAL_TIM_Base_MspInit+0x170>)
 800768c:	f043 0301 	orr.w	r3, r3, #1
 8007690:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007692:	4b4a      	ldr	r3, [pc, #296]	; (80077bc <HAL_TIM_Base_MspInit+0x170>)
 8007694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007696:	f003 0301 	and.w	r3, r3, #1
 800769a:	61fb      	str	r3, [r7, #28]
 800769c:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800769e:	2301      	movs	r3, #1
 80076a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076a2:	2302      	movs	r3, #2
 80076a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076a6:	2300      	movs	r3, #0
 80076a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076aa:	2300      	movs	r3, #0
 80076ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80076ae:	2301      	movs	r3, #1
 80076b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80076b6:	4619      	mov	r1, r3
 80076b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80076bc:	f002 fc76 	bl	8009fac <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80076c0:	2200      	movs	r2, #0
 80076c2:	2101      	movs	r1, #1
 80076c4:	201c      	movs	r0, #28
 80076c6:	f001 fd5c 	bl	8009182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80076ca:	201c      	movs	r0, #28
 80076cc:	f001 fd73 	bl	80091b6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 80076d0:	e070      	b.n	80077b4 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM5)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a3a      	ldr	r2, [pc, #232]	; (80077c0 <HAL_TIM_Base_MspInit+0x174>)
 80076d8:	4293      	cmp	r3, r2
 80076da:	d10c      	bne.n	80076f6 <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80076dc:	4b37      	ldr	r3, [pc, #220]	; (80077bc <HAL_TIM_Base_MspInit+0x170>)
 80076de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076e0:	4a36      	ldr	r2, [pc, #216]	; (80077bc <HAL_TIM_Base_MspInit+0x170>)
 80076e2:	f043 0308 	orr.w	r3, r3, #8
 80076e6:	6593      	str	r3, [r2, #88]	; 0x58
 80076e8:	4b34      	ldr	r3, [pc, #208]	; (80077bc <HAL_TIM_Base_MspInit+0x170>)
 80076ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076ec:	f003 0308 	and.w	r3, r3, #8
 80076f0:	61bb      	str	r3, [r7, #24]
 80076f2:	69bb      	ldr	r3, [r7, #24]
}
 80076f4:	e05e      	b.n	80077b4 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM8)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a32      	ldr	r2, [pc, #200]	; (80077c4 <HAL_TIM_Base_MspInit+0x178>)
 80076fc:	4293      	cmp	r3, r2
 80076fe:	d10c      	bne.n	800771a <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8007700:	4b2e      	ldr	r3, [pc, #184]	; (80077bc <HAL_TIM_Base_MspInit+0x170>)
 8007702:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007704:	4a2d      	ldr	r2, [pc, #180]	; (80077bc <HAL_TIM_Base_MspInit+0x170>)
 8007706:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800770a:	6613      	str	r3, [r2, #96]	; 0x60
 800770c:	4b2b      	ldr	r3, [pc, #172]	; (80077bc <HAL_TIM_Base_MspInit+0x170>)
 800770e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007710:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007714:	617b      	str	r3, [r7, #20]
 8007716:	697b      	ldr	r3, [r7, #20]
}
 8007718:	e04c      	b.n	80077b4 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM15)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	4a2a      	ldr	r2, [pc, #168]	; (80077c8 <HAL_TIM_Base_MspInit+0x17c>)
 8007720:	4293      	cmp	r3, r2
 8007722:	d114      	bne.n	800774e <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8007724:	4b25      	ldr	r3, [pc, #148]	; (80077bc <HAL_TIM_Base_MspInit+0x170>)
 8007726:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007728:	4a24      	ldr	r2, [pc, #144]	; (80077bc <HAL_TIM_Base_MspInit+0x170>)
 800772a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800772e:	6613      	str	r3, [r2, #96]	; 0x60
 8007730:	4b22      	ldr	r3, [pc, #136]	; (80077bc <HAL_TIM_Base_MspInit+0x170>)
 8007732:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007734:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007738:	613b      	str	r3, [r7, #16]
 800773a:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800773c:	2200      	movs	r2, #0
 800773e:	2100      	movs	r1, #0
 8007740:	2018      	movs	r0, #24
 8007742:	f001 fd1e 	bl	8009182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8007746:	2018      	movs	r0, #24
 8007748:	f001 fd35 	bl	80091b6 <HAL_NVIC_EnableIRQ>
}
 800774c:	e032      	b.n	80077b4 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM16)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	4a1e      	ldr	r2, [pc, #120]	; (80077cc <HAL_TIM_Base_MspInit+0x180>)
 8007754:	4293      	cmp	r3, r2
 8007756:	d114      	bne.n	8007782 <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8007758:	4b18      	ldr	r3, [pc, #96]	; (80077bc <HAL_TIM_Base_MspInit+0x170>)
 800775a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800775c:	4a17      	ldr	r2, [pc, #92]	; (80077bc <HAL_TIM_Base_MspInit+0x170>)
 800775e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007762:	6613      	str	r3, [r2, #96]	; 0x60
 8007764:	4b15      	ldr	r3, [pc, #84]	; (80077bc <HAL_TIM_Base_MspInit+0x170>)
 8007766:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007768:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800776c:	60fb      	str	r3, [r7, #12]
 800776e:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 8007770:	2200      	movs	r2, #0
 8007772:	2101      	movs	r1, #1
 8007774:	2019      	movs	r0, #25
 8007776:	f001 fd04 	bl	8009182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800777a:	2019      	movs	r0, #25
 800777c:	f001 fd1b 	bl	80091b6 <HAL_NVIC_EnableIRQ>
}
 8007780:	e018      	b.n	80077b4 <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM17)
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	4a12      	ldr	r2, [pc, #72]	; (80077d0 <HAL_TIM_Base_MspInit+0x184>)
 8007788:	4293      	cmp	r3, r2
 800778a:	d113      	bne.n	80077b4 <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM17_CLK_ENABLE();
 800778c:	4b0b      	ldr	r3, [pc, #44]	; (80077bc <HAL_TIM_Base_MspInit+0x170>)
 800778e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007790:	4a0a      	ldr	r2, [pc, #40]	; (80077bc <HAL_TIM_Base_MspInit+0x170>)
 8007792:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007796:	6613      	str	r3, [r2, #96]	; 0x60
 8007798:	4b08      	ldr	r3, [pc, #32]	; (80077bc <HAL_TIM_Base_MspInit+0x170>)
 800779a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800779c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80077a0:	60bb      	str	r3, [r7, #8]
 80077a2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 80077a4:	2200      	movs	r2, #0
 80077a6:	2101      	movs	r1, #1
 80077a8:	201a      	movs	r0, #26
 80077aa:	f001 fcea 	bl	8009182 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80077ae:	201a      	movs	r0, #26
 80077b0:	f001 fd01 	bl	80091b6 <HAL_NVIC_EnableIRQ>
}
 80077b4:	bf00      	nop
 80077b6:	3738      	adds	r7, #56	; 0x38
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	40021000 	.word	0x40021000
 80077c0:	40000c00 	.word	0x40000c00
 80077c4:	40013400 	.word	0x40013400
 80077c8:	40014000 	.word	0x40014000
 80077cc:	40014400 	.word	0x40014400
 80077d0:	40014800 	.word	0x40014800

080077d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80077d4:	480d      	ldr	r0, [pc, #52]	; (800780c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80077d6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80077d8:	480d      	ldr	r0, [pc, #52]	; (8007810 <LoopForever+0x6>)
  ldr r1, =_edata
 80077da:	490e      	ldr	r1, [pc, #56]	; (8007814 <LoopForever+0xa>)
  ldr r2, =_sidata
 80077dc:	4a0e      	ldr	r2, [pc, #56]	; (8007818 <LoopForever+0xe>)
  movs r3, #0
 80077de:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80077e0:	e002      	b.n	80077e8 <LoopCopyDataInit>

080077e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80077e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80077e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80077e6:	3304      	adds	r3, #4

080077e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80077e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80077ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80077ec:	d3f9      	bcc.n	80077e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80077ee:	4a0b      	ldr	r2, [pc, #44]	; (800781c <LoopForever+0x12>)
  ldr r4, =_ebss
 80077f0:	4c0b      	ldr	r4, [pc, #44]	; (8007820 <LoopForever+0x16>)
  movs r3, #0
 80077f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80077f4:	e001      	b.n	80077fa <LoopFillZerobss>

080077f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80077f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80077f8:	3204      	adds	r2, #4

080077fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80077fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80077fc:	d3fb      	bcc.n	80077f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80077fe:	f7ff fc81 	bl	8007104 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007802:	f006 f955 	bl	800dab0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007806:	f7ff f8d9 	bl	80069bc <main>

0800780a <LoopForever>:

LoopForever:
    b LoopForever
 800780a:	e7fe      	b.n	800780a <LoopForever>
  ldr   r0, =_estack
 800780c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007810:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007814:	20001ec8 	.word	0x20001ec8
  ldr r2, =_sidata
 8007818:	080113e8 	.word	0x080113e8
  ldr r2, =_sbss
 800781c:	20001ec8 	.word	0x20001ec8
  ldr r4, =_ebss
 8007820:	2000294c 	.word	0x2000294c

08007824 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007824:	e7fe      	b.n	8007824 <ADC1_2_IRQHandler>

08007826 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b082      	sub	sp, #8
 800782a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800782c:	2300      	movs	r3, #0
 800782e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007830:	2003      	movs	r0, #3
 8007832:	f001 fc9b 	bl	800916c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007836:	2000      	movs	r0, #0
 8007838:	f000 f80e 	bl	8007858 <HAL_InitTick>
 800783c:	4603      	mov	r3, r0
 800783e:	2b00      	cmp	r3, #0
 8007840:	d002      	beq.n	8007848 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007842:	2301      	movs	r3, #1
 8007844:	71fb      	strb	r3, [r7, #7]
 8007846:	e001      	b.n	800784c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007848:	f7ff fa6c 	bl	8006d24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800784c:	79fb      	ldrb	r3, [r7, #7]

}
 800784e:	4618      	mov	r0, r3
 8007850:	3708      	adds	r7, #8
 8007852:	46bd      	mov	sp, r7
 8007854:	bd80      	pop	{r7, pc}
	...

08007858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b084      	sub	sp, #16
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007860:	2300      	movs	r3, #0
 8007862:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8007864:	4b16      	ldr	r3, [pc, #88]	; (80078c0 <HAL_InitTick+0x68>)
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d022      	beq.n	80078b2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800786c:	4b15      	ldr	r3, [pc, #84]	; (80078c4 <HAL_InitTick+0x6c>)
 800786e:	681a      	ldr	r2, [r3, #0]
 8007870:	4b13      	ldr	r3, [pc, #76]	; (80078c0 <HAL_InitTick+0x68>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007878:	fbb1 f3f3 	udiv	r3, r1, r3
 800787c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007880:	4618      	mov	r0, r3
 8007882:	f001 fca6 	bl	80091d2 <HAL_SYSTICK_Config>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d10f      	bne.n	80078ac <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	2b0f      	cmp	r3, #15
 8007890:	d809      	bhi.n	80078a6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007892:	2200      	movs	r2, #0
 8007894:	6879      	ldr	r1, [r7, #4]
 8007896:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800789a:	f001 fc72 	bl	8009182 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800789e:	4a0a      	ldr	r2, [pc, #40]	; (80078c8 <HAL_InitTick+0x70>)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6013      	str	r3, [r2, #0]
 80078a4:	e007      	b.n	80078b6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	73fb      	strb	r3, [r7, #15]
 80078aa:	e004      	b.n	80078b6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80078ac:	2301      	movs	r3, #1
 80078ae:	73fb      	strb	r3, [r7, #15]
 80078b0:	e001      	b.n	80078b6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80078b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80078b8:	4618      	mov	r0, r3
 80078ba:	3710      	adds	r7, #16
 80078bc:	46bd      	mov	sp, r7
 80078be:	bd80      	pop	{r7, pc}
 80078c0:	20000cac 	.word	0x20000cac
 80078c4:	20000ca4 	.word	0x20000ca4
 80078c8:	20000ca8 	.word	0x20000ca8

080078cc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80078cc:	b480      	push	{r7}
 80078ce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80078d0:	4b05      	ldr	r3, [pc, #20]	; (80078e8 <HAL_IncTick+0x1c>)
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	4b05      	ldr	r3, [pc, #20]	; (80078ec <HAL_IncTick+0x20>)
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	4413      	add	r3, r2
 80078da:	4a03      	ldr	r2, [pc, #12]	; (80078e8 <HAL_IncTick+0x1c>)
 80078dc:	6013      	str	r3, [r2, #0]
}
 80078de:	bf00      	nop
 80078e0:	46bd      	mov	sp, r7
 80078e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e6:	4770      	bx	lr
 80078e8:	20002944 	.word	0x20002944
 80078ec:	20000cac 	.word	0x20000cac

080078f0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80078f0:	b480      	push	{r7}
 80078f2:	af00      	add	r7, sp, #0
  return uwTick;
 80078f4:	4b03      	ldr	r3, [pc, #12]	; (8007904 <HAL_GetTick+0x14>)
 80078f6:	681b      	ldr	r3, [r3, #0]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	20002944 	.word	0x20002944

08007908 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007910:	f7ff ffee 	bl	80078f0 <HAL_GetTick>
 8007914:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007920:	d004      	beq.n	800792c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8007922:	4b09      	ldr	r3, [pc, #36]	; (8007948 <HAL_Delay+0x40>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	68fa      	ldr	r2, [r7, #12]
 8007928:	4413      	add	r3, r2
 800792a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800792c:	bf00      	nop
 800792e:	f7ff ffdf 	bl	80078f0 <HAL_GetTick>
 8007932:	4602      	mov	r2, r0
 8007934:	68bb      	ldr	r3, [r7, #8]
 8007936:	1ad3      	subs	r3, r2, r3
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	429a      	cmp	r2, r3
 800793c:	d8f7      	bhi.n	800792e <HAL_Delay+0x26>
  {
  }
}
 800793e:	bf00      	nop
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}
 8007946:	bf00      	nop
 8007948:	20000cac 	.word	0x20000cac

0800794c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800794c:	b480      	push	{r7}
 800794e:	b083      	sub	sp, #12
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	431a      	orrs	r2, r3
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	609a      	str	r2, [r3, #8]
}
 8007966:	bf00      	nop
 8007968:	370c      	adds	r7, #12
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8007972:	b480      	push	{r7}
 8007974:	b083      	sub	sp, #12
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
 800797a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	689b      	ldr	r3, [r3, #8]
 8007980:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	431a      	orrs	r2, r3
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	609a      	str	r2, [r3, #8]
}
 800798c:	bf00      	nop
 800798e:	370c      	adds	r7, #12
 8007990:	46bd      	mov	sp, r7
 8007992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007996:	4770      	bx	lr

08007998 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8007998:	b480      	push	{r7}
 800799a:	b083      	sub	sp, #12
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	370c      	adds	r7, #12
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80079b4:	b490      	push	{r4, r7}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	60f8      	str	r0, [r7, #12]
 80079bc:	60b9      	str	r1, [r7, #8]
 80079be:	607a      	str	r2, [r7, #4]
 80079c0:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	3360      	adds	r3, #96	; 0x60
 80079c6:	461a      	mov	r2, r3
 80079c8:	68bb      	ldr	r3, [r7, #8]
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	4413      	add	r3, r2
 80079ce:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 80079d0:	6822      	ldr	r2, [r4, #0]
 80079d2:	4b08      	ldr	r3, [pc, #32]	; (80079f4 <LL_ADC_SetOffset+0x40>)
 80079d4:	4013      	ands	r3, r2
 80079d6:	687a      	ldr	r2, [r7, #4]
 80079d8:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80079dc:	683a      	ldr	r2, [r7, #0]
 80079de:	430a      	orrs	r2, r1
 80079e0:	4313      	orrs	r3, r2
 80079e2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079e6:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80079e8:	bf00      	nop
 80079ea:	3710      	adds	r7, #16
 80079ec:	46bd      	mov	sp, r7
 80079ee:	bc90      	pop	{r4, r7}
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	03fff000 	.word	0x03fff000

080079f8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80079f8:	b490      	push	{r4, r7}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
 8007a00:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	3360      	adds	r3, #96	; 0x60
 8007a06:	461a      	mov	r2, r3
 8007a08:	683b      	ldr	r3, [r7, #0]
 8007a0a:	009b      	lsls	r3, r3, #2
 8007a0c:	4413      	add	r3, r2
 8007a0e:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8007a10:	6823      	ldr	r3, [r4, #0]
 8007a12:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8007a16:	4618      	mov	r0, r3
 8007a18:	3708      	adds	r7, #8
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bc90      	pop	{r4, r7}
 8007a1e:	4770      	bx	lr

08007a20 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8007a20:	b490      	push	{r4, r7}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	60f8      	str	r0, [r7, #12]
 8007a28:	60b9      	str	r1, [r7, #8]
 8007a2a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	3360      	adds	r3, #96	; 0x60
 8007a30:	461a      	mov	r2, r3
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	009b      	lsls	r3, r3, #2
 8007a36:	4413      	add	r3, r2
 8007a38:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007a3a:	6823      	ldr	r3, [r4, #0]
 8007a3c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	4313      	orrs	r3, r2
 8007a44:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8007a46:	bf00      	nop
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bc90      	pop	{r4, r7}
 8007a4e:	4770      	bx	lr

08007a50 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8007a50:	b490      	push	{r4, r7}
 8007a52:	b084      	sub	sp, #16
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	3360      	adds	r3, #96	; 0x60
 8007a60:	461a      	mov	r2, r3
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4413      	add	r3, r2
 8007a68:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007a6a:	6823      	ldr	r3, [r4, #0]
 8007a6c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	4313      	orrs	r3, r2
 8007a74:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8007a76:	bf00      	nop
 8007a78:	3710      	adds	r7, #16
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bc90      	pop	{r4, r7}
 8007a7e:	4770      	bx	lr

08007a80 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8007a80:	b490      	push	{r4, r7}
 8007a82:	b084      	sub	sp, #16
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	60f8      	str	r0, [r7, #12]
 8007a88:	60b9      	str	r1, [r7, #8]
 8007a8a:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	3360      	adds	r3, #96	; 0x60
 8007a90:	461a      	mov	r2, r3
 8007a92:	68bb      	ldr	r3, [r7, #8]
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4413      	add	r3, r2
 8007a98:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007a9a:	6823      	ldr	r3, [r4, #0]
 8007a9c:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8007aa6:	bf00      	nop
 8007aa8:	3710      	adds	r7, #16
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	bc90      	pop	{r4, r7}
 8007aae:	4770      	bx	lr

08007ab0 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
 8007ab8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	695b      	ldr	r3, [r3, #20]
 8007abe:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	431a      	orrs	r2, r3
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	615a      	str	r2, [r3, #20]
}
 8007aca:	bf00      	nop
 8007acc:	370c      	adds	r7, #12
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad4:	4770      	bx	lr

08007ad6 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8007ad6:	b490      	push	{r4, r7}
 8007ad8:	b084      	sub	sp, #16
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	60f8      	str	r0, [r7, #12]
 8007ade:	60b9      	str	r1, [r7, #8]
 8007ae0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	3330      	adds	r3, #48	; 0x30
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	0a1b      	lsrs	r3, r3, #8
 8007aec:	009b      	lsls	r3, r3, #2
 8007aee:	f003 030c 	and.w	r3, r3, #12
 8007af2:	4413      	add	r3, r2
 8007af4:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007af6:	6822      	ldr	r2, [r4, #0]
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	f003 031f 	and.w	r3, r3, #31
 8007afe:	211f      	movs	r1, #31
 8007b00:	fa01 f303 	lsl.w	r3, r1, r3
 8007b04:	43db      	mvns	r3, r3
 8007b06:	401a      	ands	r2, r3
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	0e9b      	lsrs	r3, r3, #26
 8007b0c:	f003 011f 	and.w	r1, r3, #31
 8007b10:	68bb      	ldr	r3, [r7, #8]
 8007b12:	f003 031f 	and.w	r3, r3, #31
 8007b16:	fa01 f303 	lsl.w	r3, r1, r3
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8007b1e:	bf00      	nop
 8007b20:	3710      	adds	r7, #16
 8007b22:	46bd      	mov	sp, r7
 8007b24:	bc90      	pop	{r4, r7}
 8007b26:	4770      	bx	lr

08007b28 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8007b28:	b490      	push	{r4, r7}
 8007b2a:	b084      	sub	sp, #16
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	60f8      	str	r0, [r7, #12]
 8007b30:	60b9      	str	r1, [r7, #8]
 8007b32:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	3314      	adds	r3, #20
 8007b38:	461a      	mov	r2, r3
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	0e5b      	lsrs	r3, r3, #25
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	f003 0304 	and.w	r3, r3, #4
 8007b44:	4413      	add	r3, r2
 8007b46:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8007b48:	6822      	ldr	r2, [r4, #0]
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	0d1b      	lsrs	r3, r3, #20
 8007b4e:	f003 031f 	and.w	r3, r3, #31
 8007b52:	2107      	movs	r1, #7
 8007b54:	fa01 f303 	lsl.w	r3, r1, r3
 8007b58:	43db      	mvns	r3, r3
 8007b5a:	401a      	ands	r2, r3
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	0d1b      	lsrs	r3, r3, #20
 8007b60:	f003 031f 	and.w	r3, r3, #31
 8007b64:	6879      	ldr	r1, [r7, #4]
 8007b66:	fa01 f303 	lsl.w	r3, r1, r3
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8007b6e:	bf00      	nop
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bc90      	pop	{r4, r7}
 8007b76:	4770      	bx	lr

08007b78 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b085      	sub	sp, #20
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	60f8      	str	r0, [r7, #12]
 8007b80:	60b9      	str	r1, [r7, #8]
 8007b82:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b90:	43db      	mvns	r3, r3
 8007b92:	401a      	ands	r2, r3
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f003 0318 	and.w	r3, r3, #24
 8007b9a:	4908      	ldr	r1, [pc, #32]	; (8007bbc <LL_ADC_SetChannelSingleDiff+0x44>)
 8007b9c:	40d9      	lsrs	r1, r3
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	400b      	ands	r3, r1
 8007ba2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ba6:	431a      	orrs	r2, r3
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8007bae:	bf00      	nop
 8007bb0:	3714      	adds	r7, #20
 8007bb2:	46bd      	mov	sp, r7
 8007bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb8:	4770      	bx	lr
 8007bba:	bf00      	nop
 8007bbc:	0007ffff 	.word	0x0007ffff

08007bc0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8007bc0:	b480      	push	{r7}
 8007bc2:	b083      	sub	sp, #12
 8007bc4:	af00      	add	r7, sp, #0
 8007bc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8007bd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007bd4:	687a      	ldr	r2, [r7, #4]
 8007bd6:	6093      	str	r3, [r2, #8]
}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007bf4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007bf8:	d101      	bne.n	8007bfe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	e000      	b.n	8007c00 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	689b      	ldr	r3, [r3, #8]
 8007c18:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8007c1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007c20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c44:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007c48:	d101      	bne.n	8007c4e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e000      	b.n	8007c50 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8007c4e:	2300      	movs	r3, #0
}
 8007c50:	4618      	mov	r0, r3
 8007c52:	370c      	adds	r7, #12
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8007c5c:	b480      	push	{r7}
 8007c5e:	b083      	sub	sp, #12
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	f003 0301 	and.w	r3, r3, #1
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d101      	bne.n	8007c74 <LL_ADC_IsEnabled+0x18>
 8007c70:	2301      	movs	r3, #1
 8007c72:	e000      	b.n	8007c76 <LL_ADC_IsEnabled+0x1a>
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	370c      	adds	r7, #12
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr

08007c82 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007c82:	b480      	push	{r7}
 8007c84:	b083      	sub	sp, #12
 8007c86:	af00      	add	r7, sp, #0
 8007c88:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	689b      	ldr	r3, [r3, #8]
 8007c8e:	f003 0304 	and.w	r3, r3, #4
 8007c92:	2b04      	cmp	r3, #4
 8007c94:	d101      	bne.n	8007c9a <LL_ADC_REG_IsConversionOngoing+0x18>
 8007c96:	2301      	movs	r3, #1
 8007c98:	e000      	b.n	8007c9c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8007c9a:	2300      	movs	r3, #0
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b083      	sub	sp, #12
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f003 0308 	and.w	r3, r3, #8
 8007cb8:	2b08      	cmp	r3, #8
 8007cba:	d101      	bne.n	8007cc0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8007cbc:	2301      	movs	r3, #1
 8007cbe:	e000      	b.n	8007cc2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8007cc0:	2300      	movs	r3, #0
}
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	370c      	adds	r7, #12
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ccc:	4770      	bx	lr
	...

08007cd0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007cd0:	b590      	push	{r4, r7, lr}
 8007cd2:	b089      	sub	sp, #36	; 0x24
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007cd8:	2300      	movs	r3, #0
 8007cda:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d101      	bne.n	8007cea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	e1ad      	b.n	8008046 <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	695b      	ldr	r3, [r3, #20]
 8007cee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d109      	bne.n	8007d0c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f7fe f865 	bl	8005dc8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	2200      	movs	r2, #0
 8007d08:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7ff ff67 	bl	8007be4 <LL_ADC_IsDeepPowerDownEnabled>
 8007d16:	4603      	mov	r3, r0
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d004      	beq.n	8007d26 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	4618      	mov	r0, r3
 8007d22:	f7ff ff4d 	bl	8007bc0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	f7ff ff82 	bl	8007c34 <LL_ADC_IsInternalRegulatorEnabled>
 8007d30:	4603      	mov	r3, r0
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d113      	bne.n	8007d5e <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7ff ff66 	bl	8007c0c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8007d40:	4b9e      	ldr	r3, [pc, #632]	; (8007fbc <HAL_ADC_Init+0x2ec>)
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	099b      	lsrs	r3, r3, #6
 8007d46:	4a9e      	ldr	r2, [pc, #632]	; (8007fc0 <HAL_ADC_Init+0x2f0>)
 8007d48:	fba2 2303 	umull	r2, r3, r2, r3
 8007d4c:	099b      	lsrs	r3, r3, #6
 8007d4e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007d50:	e002      	b.n	8007d58 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	3b01      	subs	r3, #1
 8007d56:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1f9      	bne.n	8007d52 <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4618      	mov	r0, r3
 8007d64:	f7ff ff66 	bl	8007c34 <LL_ADC_IsInternalRegulatorEnabled>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d10d      	bne.n	8007d8a <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d72:	f043 0210 	orr.w	r2, r3, #16
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d7e:	f043 0201 	orr.w	r2, r3, #1
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8007d86:	2301      	movs	r3, #1
 8007d88:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	681b      	ldr	r3, [r3, #0]
 8007d8e:	4618      	mov	r0, r3
 8007d90:	f7ff ff77 	bl	8007c82 <LL_ADC_REG_IsConversionOngoing>
 8007d94:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d9a:	f003 0310 	and.w	r3, r3, #16
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	f040 8148 	bne.w	8008034 <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8007da4:	697b      	ldr	r3, [r7, #20]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f040 8144 	bne.w	8008034 <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007db0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8007db4:	f043 0202 	orr.w	r2, r3, #2
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7ff ff4b 	bl	8007c5c <LL_ADC_IsEnabled>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d141      	bne.n	8007e50 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007dd4:	d004      	beq.n	8007de0 <HAL_ADC_Init+0x110>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a7a      	ldr	r2, [pc, #488]	; (8007fc4 <HAL_ADC_Init+0x2f4>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d10f      	bne.n	8007e00 <HAL_ADC_Init+0x130>
 8007de0:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8007de4:	f7ff ff3a 	bl	8007c5c <LL_ADC_IsEnabled>
 8007de8:	4604      	mov	r4, r0
 8007dea:	4876      	ldr	r0, [pc, #472]	; (8007fc4 <HAL_ADC_Init+0x2f4>)
 8007dec:	f7ff ff36 	bl	8007c5c <LL_ADC_IsEnabled>
 8007df0:	4603      	mov	r3, r0
 8007df2:	4323      	orrs	r3, r4
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	bf0c      	ite	eq
 8007df8:	2301      	moveq	r3, #1
 8007dfa:	2300      	movne	r3, #0
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	e012      	b.n	8007e26 <HAL_ADC_Init+0x156>
 8007e00:	4871      	ldr	r0, [pc, #452]	; (8007fc8 <HAL_ADC_Init+0x2f8>)
 8007e02:	f7ff ff2b 	bl	8007c5c <LL_ADC_IsEnabled>
 8007e06:	4604      	mov	r4, r0
 8007e08:	4870      	ldr	r0, [pc, #448]	; (8007fcc <HAL_ADC_Init+0x2fc>)
 8007e0a:	f7ff ff27 	bl	8007c5c <LL_ADC_IsEnabled>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	431c      	orrs	r4, r3
 8007e12:	486f      	ldr	r0, [pc, #444]	; (8007fd0 <HAL_ADC_Init+0x300>)
 8007e14:	f7ff ff22 	bl	8007c5c <LL_ADC_IsEnabled>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	4323      	orrs	r3, r4
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	bf0c      	ite	eq
 8007e20:	2301      	moveq	r3, #1
 8007e22:	2300      	movne	r3, #0
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d012      	beq.n	8007e50 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007e32:	d004      	beq.n	8007e3e <HAL_ADC_Init+0x16e>
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a62      	ldr	r2, [pc, #392]	; (8007fc4 <HAL_ADC_Init+0x2f4>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d101      	bne.n	8007e42 <HAL_ADC_Init+0x172>
 8007e3e:	4a65      	ldr	r2, [pc, #404]	; (8007fd4 <HAL_ADC_Init+0x304>)
 8007e40:	e000      	b.n	8007e44 <HAL_ADC_Init+0x174>
 8007e42:	4a65      	ldr	r2, [pc, #404]	; (8007fd8 <HAL_ADC_Init+0x308>)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	4619      	mov	r1, r3
 8007e4a:	4610      	mov	r0, r2
 8007e4c:	f7ff fd7e 	bl	800794c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	7f5b      	ldrb	r3, [r3, #29]
 8007e54:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007e5a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8007e60:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8007e66:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e6e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8007e70:	4313      	orrs	r3, r2
 8007e72:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007e7a:	2b01      	cmp	r3, #1
 8007e7c:	d106      	bne.n	8007e8c <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e82:	3b01      	subs	r3, #1
 8007e84:	045b      	lsls	r3, r3, #17
 8007e86:	69ba      	ldr	r2, [r7, #24]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d009      	beq.n	8007ea8 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e98:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8007ea2:	69ba      	ldr	r2, [r7, #24]
 8007ea4:	4313      	orrs	r3, r2
 8007ea6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	68da      	ldr	r2, [r3, #12]
 8007eae:	4b4b      	ldr	r3, [pc, #300]	; (8007fdc <HAL_ADC_Init+0x30c>)
 8007eb0:	4013      	ands	r3, r2
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	6812      	ldr	r2, [r2, #0]
 8007eb6:	69b9      	ldr	r1, [r7, #24]
 8007eb8:	430b      	orrs	r3, r1
 8007eba:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	691b      	ldr	r3, [r3, #16]
 8007ec2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	430a      	orrs	r2, r1
 8007ed0:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7ff fed3 	bl	8007c82 <LL_ADC_REG_IsConversionOngoing>
 8007edc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7ff fee0 	bl	8007ca8 <LL_ADC_INJ_IsConversionOngoing>
 8007ee8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d17f      	bne.n	8007ff0 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2b00      	cmp	r3, #0
 8007ef4:	d17c      	bne.n	8007ff0 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007efa:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8007f02:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8007f04:	4313      	orrs	r3, r2
 8007f06:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	68db      	ldr	r3, [r3, #12]
 8007f0e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f12:	f023 0302 	bic.w	r3, r3, #2
 8007f16:	687a      	ldr	r2, [r7, #4]
 8007f18:	6812      	ldr	r2, [r2, #0]
 8007f1a:	69b9      	ldr	r1, [r7, #24]
 8007f1c:	430b      	orrs	r3, r1
 8007f1e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	691b      	ldr	r3, [r3, #16]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d017      	beq.n	8007f58 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	691a      	ldr	r2, [r3, #16]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007f36:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007f40:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007f44:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007f48:	687a      	ldr	r2, [r7, #4]
 8007f4a:	6911      	ldr	r1, [r2, #16]
 8007f4c:	687a      	ldr	r2, [r7, #4]
 8007f4e:	6812      	ldr	r2, [r2, #0]
 8007f50:	430b      	orrs	r3, r1
 8007f52:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8007f56:	e013      	b.n	8007f80 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	691a      	ldr	r2, [r3, #16]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007f66:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	6812      	ldr	r2, [r2, #0]
 8007f74:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8007f78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8007f7c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007f86:	2b01      	cmp	r3, #1
 8007f88:	d12a      	bne.n	8007fe0 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8007f94:	f023 0304 	bic.w	r3, r3, #4
 8007f98:	687a      	ldr	r2, [r7, #4]
 8007f9a:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8007fa0:	4311      	orrs	r1, r2
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8007fa6:	4311      	orrs	r1, r2
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007fac:	430a      	orrs	r2, r1
 8007fae:	431a      	orrs	r2, r3
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f042 0201 	orr.w	r2, r2, #1
 8007fb8:	611a      	str	r2, [r3, #16]
 8007fba:	e019      	b.n	8007ff0 <HAL_ADC_Init+0x320>
 8007fbc:	20000ca4 	.word	0x20000ca4
 8007fc0:	053e2d63 	.word	0x053e2d63
 8007fc4:	50000100 	.word	0x50000100
 8007fc8:	50000400 	.word	0x50000400
 8007fcc:	50000500 	.word	0x50000500
 8007fd0:	50000600 	.word	0x50000600
 8007fd4:	50000300 	.word	0x50000300
 8007fd8:	50000700 	.word	0x50000700
 8007fdc:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	691a      	ldr	r2, [r3, #16]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	f022 0201 	bic.w	r2, r2, #1
 8007fee:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	695b      	ldr	r3, [r3, #20]
 8007ff4:	2b01      	cmp	r3, #1
 8007ff6:	d10c      	bne.n	8008012 <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ffe:	f023 010f 	bic.w	r1, r3, #15
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	6a1b      	ldr	r3, [r3, #32]
 8008006:	1e5a      	subs	r2, r3, #1
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	430a      	orrs	r2, r1
 800800e:	631a      	str	r2, [r3, #48]	; 0x30
 8008010:	e007      	b.n	8008022 <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f022 020f 	bic.w	r2, r2, #15
 8008020:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008026:	f023 0303 	bic.w	r3, r3, #3
 800802a:	f043 0201 	orr.w	r2, r3, #1
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	65da      	str	r2, [r3, #92]	; 0x5c
 8008032:	e007      	b.n	8008044 <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008038:	f043 0210 	orr.w	r2, r3, #16
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008040:	2301      	movs	r3, #1
 8008042:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8008044:	7ffb      	ldrb	r3, [r7, #31]
}
 8008046:	4618      	mov	r0, r3
 8008048:	3724      	adds	r7, #36	; 0x24
 800804a:	46bd      	mov	sp, r7
 800804c:	bd90      	pop	{r4, r7, pc}
 800804e:	bf00      	nop

08008050 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b0a6      	sub	sp, #152	; 0x98
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800805a:	2300      	movs	r3, #0
 800805c:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8008060:	2300      	movs	r3, #0
 8008062:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800806a:	2b01      	cmp	r3, #1
 800806c:	d101      	bne.n	8008072 <HAL_ADC_ConfigChannel+0x22>
 800806e:	2302      	movs	r3, #2
 8008070:	e38e      	b.n	8008790 <HAL_ADC_ConfigChannel+0x740>
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2201      	movs	r2, #1
 8008076:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	4618      	mov	r0, r3
 8008080:	f7ff fdff 	bl	8007c82 <LL_ADC_REG_IsConversionOngoing>
 8008084:	4603      	mov	r3, r0
 8008086:	2b00      	cmp	r3, #0
 8008088:	f040 836f 	bne.w	800876a <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6818      	ldr	r0, [r3, #0]
 8008090:	683b      	ldr	r3, [r7, #0]
 8008092:	6859      	ldr	r1, [r3, #4]
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	461a      	mov	r2, r3
 800809a:	f7ff fd1c 	bl	8007ad6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7ff fded 	bl	8007c82 <LL_ADC_REG_IsConversionOngoing>
 80080a8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7ff fdf9 	bl	8007ca8 <LL_ADC_INJ_IsConversionOngoing>
 80080b6:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80080ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f040 817b 	bne.w	80083ba <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80080c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	f040 8176 	bne.w	80083ba <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80080ce:	683b      	ldr	r3, [r7, #0]
 80080d0:	689b      	ldr	r3, [r3, #8]
 80080d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80080d6:	d10f      	bne.n	80080f8 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6818      	ldr	r0, [r3, #0]
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2200      	movs	r2, #0
 80080e2:	4619      	mov	r1, r3
 80080e4:	f7ff fd20 	bl	8007b28 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80080f0:	4618      	mov	r0, r3
 80080f2:	f7ff fcdd 	bl	8007ab0 <LL_ADC_SetSamplingTimeCommonConfig>
 80080f6:	e00e      	b.n	8008116 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	6818      	ldr	r0, [r3, #0]
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	6819      	ldr	r1, [r3, #0]
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	461a      	mov	r2, r3
 8008106:	f7ff fd0f 	bl	8007b28 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2100      	movs	r1, #0
 8008110:	4618      	mov	r0, r3
 8008112:	f7ff fccd 	bl	8007ab0 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8008116:	683b      	ldr	r3, [r7, #0]
 8008118:	695a      	ldr	r2, [r3, #20]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	08db      	lsrs	r3, r3, #3
 8008122:	f003 0303 	and.w	r3, r3, #3
 8008126:	005b      	lsls	r3, r3, #1
 8008128:	fa02 f303 	lsl.w	r3, r2, r3
 800812c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	691b      	ldr	r3, [r3, #16]
 8008134:	2b04      	cmp	r3, #4
 8008136:	d022      	beq.n	800817e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6818      	ldr	r0, [r3, #0]
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	6919      	ldr	r1, [r3, #16]
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	681a      	ldr	r2, [r3, #0]
 8008144:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008148:	f7ff fc34 	bl	80079b4 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6818      	ldr	r0, [r3, #0]
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	6919      	ldr	r1, [r3, #16]
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	699b      	ldr	r3, [r3, #24]
 8008158:	461a      	mov	r2, r3
 800815a:	f7ff fc79 	bl	8007a50 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6818      	ldr	r0, [r3, #0]
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	6919      	ldr	r1, [r3, #16]
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	7f1b      	ldrb	r3, [r3, #28]
 800816a:	2b01      	cmp	r3, #1
 800816c:	d102      	bne.n	8008174 <HAL_ADC_ConfigChannel+0x124>
 800816e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008172:	e000      	b.n	8008176 <HAL_ADC_ConfigChannel+0x126>
 8008174:	2300      	movs	r3, #0
 8008176:	461a      	mov	r2, r3
 8008178:	f7ff fc82 	bl	8007a80 <LL_ADC_SetOffsetSaturation>
 800817c:	e11d      	b.n	80083ba <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2100      	movs	r1, #0
 8008184:	4618      	mov	r0, r3
 8008186:	f7ff fc37 	bl	80079f8 <LL_ADC_GetOffsetChannel>
 800818a:	4603      	mov	r3, r0
 800818c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008190:	2b00      	cmp	r3, #0
 8008192:	d10a      	bne.n	80081aa <HAL_ADC_ConfigChannel+0x15a>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	2100      	movs	r1, #0
 800819a:	4618      	mov	r0, r3
 800819c:	f7ff fc2c 	bl	80079f8 <LL_ADC_GetOffsetChannel>
 80081a0:	4603      	mov	r3, r0
 80081a2:	0e9b      	lsrs	r3, r3, #26
 80081a4:	f003 021f 	and.w	r2, r3, #31
 80081a8:	e012      	b.n	80081d0 <HAL_ADC_ConfigChannel+0x180>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	2100      	movs	r1, #0
 80081b0:	4618      	mov	r0, r3
 80081b2:	f7ff fc21 	bl	80079f8 <LL_ADC_GetOffsetChannel>
 80081b6:	4603      	mov	r3, r0
 80081b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80081c0:	fa93 f3a3 	rbit	r3, r3
 80081c4:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80081c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80081c8:	fab3 f383 	clz	r3, r3
 80081cc:	b2db      	uxtb	r3, r3
 80081ce:	461a      	mov	r2, r3
 80081d0:	683b      	ldr	r3, [r7, #0]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d105      	bne.n	80081e8 <HAL_ADC_ConfigChannel+0x198>
 80081dc:	683b      	ldr	r3, [r7, #0]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	0e9b      	lsrs	r3, r3, #26
 80081e2:	f003 031f 	and.w	r3, r3, #31
 80081e6:	e00a      	b.n	80081fe <HAL_ADC_ConfigChannel+0x1ae>
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80081ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80081f0:	fa93 f3a3 	rbit	r3, r3
 80081f4:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 80081f6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081f8:	fab3 f383 	clz	r3, r3
 80081fc:	b2db      	uxtb	r3, r3
 80081fe:	429a      	cmp	r2, r3
 8008200:	d106      	bne.n	8008210 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2200      	movs	r2, #0
 8008208:	2100      	movs	r1, #0
 800820a:	4618      	mov	r0, r3
 800820c:	f7ff fc08 	bl	8007a20 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	2101      	movs	r1, #1
 8008216:	4618      	mov	r0, r3
 8008218:	f7ff fbee 	bl	80079f8 <LL_ADC_GetOffsetChannel>
 800821c:	4603      	mov	r3, r0
 800821e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008222:	2b00      	cmp	r3, #0
 8008224:	d10a      	bne.n	800823c <HAL_ADC_ConfigChannel+0x1ec>
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	2101      	movs	r1, #1
 800822c:	4618      	mov	r0, r3
 800822e:	f7ff fbe3 	bl	80079f8 <LL_ADC_GetOffsetChannel>
 8008232:	4603      	mov	r3, r0
 8008234:	0e9b      	lsrs	r3, r3, #26
 8008236:	f003 021f 	and.w	r2, r3, #31
 800823a:	e010      	b.n	800825e <HAL_ADC_ConfigChannel+0x20e>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	2101      	movs	r1, #1
 8008242:	4618      	mov	r0, r3
 8008244:	f7ff fbd8 	bl	80079f8 <LL_ADC_GetOffsetChannel>
 8008248:	4603      	mov	r3, r0
 800824a:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800824c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800824e:	fa93 f3a3 	rbit	r3, r3
 8008252:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8008254:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008256:	fab3 f383 	clz	r3, r3
 800825a:	b2db      	uxtb	r3, r3
 800825c:	461a      	mov	r2, r3
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008266:	2b00      	cmp	r3, #0
 8008268:	d105      	bne.n	8008276 <HAL_ADC_ConfigChannel+0x226>
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	0e9b      	lsrs	r3, r3, #26
 8008270:	f003 031f 	and.w	r3, r3, #31
 8008274:	e00a      	b.n	800828c <HAL_ADC_ConfigChannel+0x23c>
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800827c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800827e:	fa93 f3a3 	rbit	r3, r3
 8008282:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8008284:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008286:	fab3 f383 	clz	r3, r3
 800828a:	b2db      	uxtb	r3, r3
 800828c:	429a      	cmp	r2, r3
 800828e:	d106      	bne.n	800829e <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	2200      	movs	r2, #0
 8008296:	2101      	movs	r1, #1
 8008298:	4618      	mov	r0, r3
 800829a:	f7ff fbc1 	bl	8007a20 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2102      	movs	r1, #2
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7ff fba7 	bl	80079f8 <LL_ADC_GetOffsetChannel>
 80082aa:	4603      	mov	r3, r0
 80082ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d10a      	bne.n	80082ca <HAL_ADC_ConfigChannel+0x27a>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	2102      	movs	r1, #2
 80082ba:	4618      	mov	r0, r3
 80082bc:	f7ff fb9c 	bl	80079f8 <LL_ADC_GetOffsetChannel>
 80082c0:	4603      	mov	r3, r0
 80082c2:	0e9b      	lsrs	r3, r3, #26
 80082c4:	f003 021f 	and.w	r2, r3, #31
 80082c8:	e010      	b.n	80082ec <HAL_ADC_ConfigChannel+0x29c>
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	2102      	movs	r1, #2
 80082d0:	4618      	mov	r0, r3
 80082d2:	f7ff fb91 	bl	80079f8 <LL_ADC_GetOffsetChannel>
 80082d6:	4603      	mov	r3, r0
 80082d8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80082da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082dc:	fa93 f3a3 	rbit	r3, r3
 80082e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 80082e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082e4:	fab3 f383 	clz	r3, r3
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	461a      	mov	r2, r3
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d105      	bne.n	8008304 <HAL_ADC_ConfigChannel+0x2b4>
 80082f8:	683b      	ldr	r3, [r7, #0]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	0e9b      	lsrs	r3, r3, #26
 80082fe:	f003 031f 	and.w	r3, r3, #31
 8008302:	e00a      	b.n	800831a <HAL_ADC_ConfigChannel+0x2ca>
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800830a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800830c:	fa93 f3a3 	rbit	r3, r3
 8008310:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8008312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008314:	fab3 f383 	clz	r3, r3
 8008318:	b2db      	uxtb	r3, r3
 800831a:	429a      	cmp	r2, r3
 800831c:	d106      	bne.n	800832c <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	2200      	movs	r2, #0
 8008324:	2102      	movs	r1, #2
 8008326:	4618      	mov	r0, r3
 8008328:	f7ff fb7a 	bl	8007a20 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	2103      	movs	r1, #3
 8008332:	4618      	mov	r0, r3
 8008334:	f7ff fb60 	bl	80079f8 <LL_ADC_GetOffsetChannel>
 8008338:	4603      	mov	r3, r0
 800833a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800833e:	2b00      	cmp	r3, #0
 8008340:	d10a      	bne.n	8008358 <HAL_ADC_ConfigChannel+0x308>
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	2103      	movs	r1, #3
 8008348:	4618      	mov	r0, r3
 800834a:	f7ff fb55 	bl	80079f8 <LL_ADC_GetOffsetChannel>
 800834e:	4603      	mov	r3, r0
 8008350:	0e9b      	lsrs	r3, r3, #26
 8008352:	f003 021f 	and.w	r2, r3, #31
 8008356:	e010      	b.n	800837a <HAL_ADC_ConfigChannel+0x32a>
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	2103      	movs	r1, #3
 800835e:	4618      	mov	r0, r3
 8008360:	f7ff fb4a 	bl	80079f8 <LL_ADC_GetOffsetChannel>
 8008364:	4603      	mov	r3, r0
 8008366:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008368:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800836a:	fa93 f3a3 	rbit	r3, r3
 800836e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8008370:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008372:	fab3 f383 	clz	r3, r3
 8008376:	b2db      	uxtb	r3, r3
 8008378:	461a      	mov	r2, r3
 800837a:	683b      	ldr	r3, [r7, #0]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008382:	2b00      	cmp	r3, #0
 8008384:	d105      	bne.n	8008392 <HAL_ADC_ConfigChannel+0x342>
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	0e9b      	lsrs	r3, r3, #26
 800838c:	f003 031f 	and.w	r3, r3, #31
 8008390:	e00a      	b.n	80083a8 <HAL_ADC_ConfigChannel+0x358>
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008398:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800839a:	fa93 f3a3 	rbit	r3, r3
 800839e:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 80083a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083a2:	fab3 f383 	clz	r3, r3
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d106      	bne.n	80083ba <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	2200      	movs	r2, #0
 80083b2:	2103      	movs	r1, #3
 80083b4:	4618      	mov	r0, r3
 80083b6:	f7ff fb33 	bl	8007a20 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	4618      	mov	r0, r3
 80083c0:	f7ff fc4c 	bl	8007c5c <LL_ADC_IsEnabled>
 80083c4:	4603      	mov	r3, r0
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f040 810c 	bne.w	80085e4 <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	6818      	ldr	r0, [r3, #0]
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	6819      	ldr	r1, [r3, #0]
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	68db      	ldr	r3, [r3, #12]
 80083d8:	461a      	mov	r2, r3
 80083da:	f7ff fbcd 	bl	8007b78 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80083de:	683b      	ldr	r3, [r7, #0]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	4aaf      	ldr	r2, [pc, #700]	; (80086a0 <HAL_ADC_ConfigChannel+0x650>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	f040 80fd 	bne.w	80085e4 <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d10b      	bne.n	8008412 <HAL_ADC_ConfigChannel+0x3c2>
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	0e9b      	lsrs	r3, r3, #26
 8008400:	3301      	adds	r3, #1
 8008402:	f003 031f 	and.w	r3, r3, #31
 8008406:	2b09      	cmp	r3, #9
 8008408:	bf94      	ite	ls
 800840a:	2301      	movls	r3, #1
 800840c:	2300      	movhi	r3, #0
 800840e:	b2db      	uxtb	r3, r3
 8008410:	e012      	b.n	8008438 <HAL_ADC_ConfigChannel+0x3e8>
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800841a:	fa93 f3a3 	rbit	r3, r3
 800841e:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8008420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008422:	fab3 f383 	clz	r3, r3
 8008426:	b2db      	uxtb	r3, r3
 8008428:	3301      	adds	r3, #1
 800842a:	f003 031f 	and.w	r3, r3, #31
 800842e:	2b09      	cmp	r3, #9
 8008430:	bf94      	ite	ls
 8008432:	2301      	movls	r3, #1
 8008434:	2300      	movhi	r3, #0
 8008436:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008438:	2b00      	cmp	r3, #0
 800843a:	d064      	beq.n	8008506 <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008444:	2b00      	cmp	r3, #0
 8008446:	d107      	bne.n	8008458 <HAL_ADC_ConfigChannel+0x408>
 8008448:	683b      	ldr	r3, [r7, #0]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	0e9b      	lsrs	r3, r3, #26
 800844e:	3301      	adds	r3, #1
 8008450:	069b      	lsls	r3, r3, #26
 8008452:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008456:	e00e      	b.n	8008476 <HAL_ADC_ConfigChannel+0x426>
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800845e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008460:	fa93 f3a3 	rbit	r3, r3
 8008464:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8008466:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008468:	fab3 f383 	clz	r3, r3
 800846c:	b2db      	uxtb	r3, r3
 800846e:	3301      	adds	r3, #1
 8008470:	069b      	lsls	r3, r3, #26
 8008472:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800847e:	2b00      	cmp	r3, #0
 8008480:	d109      	bne.n	8008496 <HAL_ADC_ConfigChannel+0x446>
 8008482:	683b      	ldr	r3, [r7, #0]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	0e9b      	lsrs	r3, r3, #26
 8008488:	3301      	adds	r3, #1
 800848a:	f003 031f 	and.w	r3, r3, #31
 800848e:	2101      	movs	r1, #1
 8008490:	fa01 f303 	lsl.w	r3, r1, r3
 8008494:	e010      	b.n	80084b8 <HAL_ADC_ConfigChannel+0x468>
 8008496:	683b      	ldr	r3, [r7, #0]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800849c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800849e:	fa93 f3a3 	rbit	r3, r3
 80084a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80084a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a6:	fab3 f383 	clz	r3, r3
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	3301      	adds	r3, #1
 80084ae:	f003 031f 	and.w	r3, r3, #31
 80084b2:	2101      	movs	r1, #1
 80084b4:	fa01 f303 	lsl.w	r3, r1, r3
 80084b8:	ea42 0103 	orr.w	r1, r2, r3
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d10a      	bne.n	80084de <HAL_ADC_ConfigChannel+0x48e>
 80084c8:	683b      	ldr	r3, [r7, #0]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	0e9b      	lsrs	r3, r3, #26
 80084ce:	3301      	adds	r3, #1
 80084d0:	f003 021f 	and.w	r2, r3, #31
 80084d4:	4613      	mov	r3, r2
 80084d6:	005b      	lsls	r3, r3, #1
 80084d8:	4413      	add	r3, r2
 80084da:	051b      	lsls	r3, r3, #20
 80084dc:	e011      	b.n	8008502 <HAL_ADC_ConfigChannel+0x4b2>
 80084de:	683b      	ldr	r3, [r7, #0]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80084e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084e6:	fa93 f3a3 	rbit	r3, r3
 80084ea:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80084ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084ee:	fab3 f383 	clz	r3, r3
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	3301      	adds	r3, #1
 80084f6:	f003 021f 	and.w	r2, r3, #31
 80084fa:	4613      	mov	r3, r2
 80084fc:	005b      	lsls	r3, r3, #1
 80084fe:	4413      	add	r3, r2
 8008500:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8008502:	430b      	orrs	r3, r1
 8008504:	e069      	b.n	80085da <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800850e:	2b00      	cmp	r3, #0
 8008510:	d107      	bne.n	8008522 <HAL_ADC_ConfigChannel+0x4d2>
 8008512:	683b      	ldr	r3, [r7, #0]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	0e9b      	lsrs	r3, r3, #26
 8008518:	3301      	adds	r3, #1
 800851a:	069b      	lsls	r3, r3, #26
 800851c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008520:	e00e      	b.n	8008540 <HAL_ADC_ConfigChannel+0x4f0>
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008528:	6a3b      	ldr	r3, [r7, #32]
 800852a:	fa93 f3a3 	rbit	r3, r3
 800852e:	61fb      	str	r3, [r7, #28]
  return result;
 8008530:	69fb      	ldr	r3, [r7, #28]
 8008532:	fab3 f383 	clz	r3, r3
 8008536:	b2db      	uxtb	r3, r3
 8008538:	3301      	adds	r3, #1
 800853a:	069b      	lsls	r3, r3, #26
 800853c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8008540:	683b      	ldr	r3, [r7, #0]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008548:	2b00      	cmp	r3, #0
 800854a:	d109      	bne.n	8008560 <HAL_ADC_ConfigChannel+0x510>
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	0e9b      	lsrs	r3, r3, #26
 8008552:	3301      	adds	r3, #1
 8008554:	f003 031f 	and.w	r3, r3, #31
 8008558:	2101      	movs	r1, #1
 800855a:	fa01 f303 	lsl.w	r3, r1, r3
 800855e:	e010      	b.n	8008582 <HAL_ADC_ConfigChannel+0x532>
 8008560:	683b      	ldr	r3, [r7, #0]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	fa93 f3a3 	rbit	r3, r3
 800856c:	617b      	str	r3, [r7, #20]
  return result;
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	fab3 f383 	clz	r3, r3
 8008574:	b2db      	uxtb	r3, r3
 8008576:	3301      	adds	r3, #1
 8008578:	f003 031f 	and.w	r3, r3, #31
 800857c:	2101      	movs	r1, #1
 800857e:	fa01 f303 	lsl.w	r3, r1, r3
 8008582:	ea42 0103 	orr.w	r1, r2, r3
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800858e:	2b00      	cmp	r3, #0
 8008590:	d10d      	bne.n	80085ae <HAL_ADC_ConfigChannel+0x55e>
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	0e9b      	lsrs	r3, r3, #26
 8008598:	3301      	adds	r3, #1
 800859a:	f003 021f 	and.w	r2, r3, #31
 800859e:	4613      	mov	r3, r2
 80085a0:	005b      	lsls	r3, r3, #1
 80085a2:	4413      	add	r3, r2
 80085a4:	3b1e      	subs	r3, #30
 80085a6:	051b      	lsls	r3, r3, #20
 80085a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80085ac:	e014      	b.n	80085d8 <HAL_ADC_ConfigChannel+0x588>
 80085ae:	683b      	ldr	r3, [r7, #0]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80085b4:	693b      	ldr	r3, [r7, #16]
 80085b6:	fa93 f3a3 	rbit	r3, r3
 80085ba:	60fb      	str	r3, [r7, #12]
  return result;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	fab3 f383 	clz	r3, r3
 80085c2:	b2db      	uxtb	r3, r3
 80085c4:	3301      	adds	r3, #1
 80085c6:	f003 021f 	and.w	r2, r3, #31
 80085ca:	4613      	mov	r3, r2
 80085cc:	005b      	lsls	r3, r3, #1
 80085ce:	4413      	add	r3, r2
 80085d0:	3b1e      	subs	r3, #30
 80085d2:	051b      	lsls	r3, r3, #20
 80085d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80085d8:	430b      	orrs	r3, r1
 80085da:	683a      	ldr	r2, [r7, #0]
 80085dc:	6892      	ldr	r2, [r2, #8]
 80085de:	4619      	mov	r1, r3
 80085e0:	f7ff faa2 	bl	8007b28 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	681a      	ldr	r2, [r3, #0]
 80085e8:	4b2e      	ldr	r3, [pc, #184]	; (80086a4 <HAL_ADC_ConfigChannel+0x654>)
 80085ea:	4013      	ands	r3, r2
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	f000 80c9 	beq.w	8008784 <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80085fa:	d004      	beq.n	8008606 <HAL_ADC_ConfigChannel+0x5b6>
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	4a29      	ldr	r2, [pc, #164]	; (80086a8 <HAL_ADC_ConfigChannel+0x658>)
 8008602:	4293      	cmp	r3, r2
 8008604:	d101      	bne.n	800860a <HAL_ADC_ConfigChannel+0x5ba>
 8008606:	4b29      	ldr	r3, [pc, #164]	; (80086ac <HAL_ADC_ConfigChannel+0x65c>)
 8008608:	e000      	b.n	800860c <HAL_ADC_ConfigChannel+0x5bc>
 800860a:	4b29      	ldr	r3, [pc, #164]	; (80086b0 <HAL_ADC_ConfigChannel+0x660>)
 800860c:	4618      	mov	r0, r3
 800860e:	f7ff f9c3 	bl	8007998 <LL_ADC_GetCommonPathInternalCh>
 8008612:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a26      	ldr	r2, [pc, #152]	; (80086b4 <HAL_ADC_ConfigChannel+0x664>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d004      	beq.n	800862a <HAL_ADC_ConfigChannel+0x5da>
 8008620:	683b      	ldr	r3, [r7, #0]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	4a24      	ldr	r2, [pc, #144]	; (80086b8 <HAL_ADC_ConfigChannel+0x668>)
 8008626:	4293      	cmp	r3, r2
 8008628:	d14e      	bne.n	80086c8 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800862a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800862e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008632:	2b00      	cmp	r3, #0
 8008634:	d148      	bne.n	80086c8 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800863e:	d005      	beq.n	800864c <HAL_ADC_ConfigChannel+0x5fc>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a1d      	ldr	r2, [pc, #116]	; (80086bc <HAL_ADC_ConfigChannel+0x66c>)
 8008646:	4293      	cmp	r3, r2
 8008648:	f040 8099 	bne.w	800877e <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008654:	d004      	beq.n	8008660 <HAL_ADC_ConfigChannel+0x610>
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a13      	ldr	r2, [pc, #76]	; (80086a8 <HAL_ADC_ConfigChannel+0x658>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d101      	bne.n	8008664 <HAL_ADC_ConfigChannel+0x614>
 8008660:	4a12      	ldr	r2, [pc, #72]	; (80086ac <HAL_ADC_ConfigChannel+0x65c>)
 8008662:	e000      	b.n	8008666 <HAL_ADC_ConfigChannel+0x616>
 8008664:	4a12      	ldr	r2, [pc, #72]	; (80086b0 <HAL_ADC_ConfigChannel+0x660>)
 8008666:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800866a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800866e:	4619      	mov	r1, r3
 8008670:	4610      	mov	r0, r2
 8008672:	f7ff f97e 	bl	8007972 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008676:	4b12      	ldr	r3, [pc, #72]	; (80086c0 <HAL_ADC_ConfigChannel+0x670>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	099b      	lsrs	r3, r3, #6
 800867c:	4a11      	ldr	r2, [pc, #68]	; (80086c4 <HAL_ADC_ConfigChannel+0x674>)
 800867e:	fba2 2303 	umull	r2, r3, r2, r3
 8008682:	099a      	lsrs	r2, r3, #6
 8008684:	4613      	mov	r3, r2
 8008686:	005b      	lsls	r3, r3, #1
 8008688:	4413      	add	r3, r2
 800868a:	009b      	lsls	r3, r3, #2
 800868c:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 800868e:	e002      	b.n	8008696 <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 8008690:	68bb      	ldr	r3, [r7, #8]
 8008692:	3b01      	subs	r3, #1
 8008694:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 8008696:	68bb      	ldr	r3, [r7, #8]
 8008698:	2b00      	cmp	r3, #0
 800869a:	d1f9      	bne.n	8008690 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800869c:	e06f      	b.n	800877e <HAL_ADC_ConfigChannel+0x72e>
 800869e:	bf00      	nop
 80086a0:	407f0000 	.word	0x407f0000
 80086a4:	80080000 	.word	0x80080000
 80086a8:	50000100 	.word	0x50000100
 80086ac:	50000300 	.word	0x50000300
 80086b0:	50000700 	.word	0x50000700
 80086b4:	c3210000 	.word	0xc3210000
 80086b8:	90c00010 	.word	0x90c00010
 80086bc:	50000600 	.word	0x50000600
 80086c0:	20000ca4 	.word	0x20000ca4
 80086c4:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	4a32      	ldr	r2, [pc, #200]	; (8008798 <HAL_ADC_ConfigChannel+0x748>)
 80086ce:	4293      	cmp	r3, r2
 80086d0:	d125      	bne.n	800871e <HAL_ADC_ConfigChannel+0x6ce>
 80086d2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80086d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d11f      	bne.n	800871e <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	4a2e      	ldr	r2, [pc, #184]	; (800879c <HAL_ADC_ConfigChannel+0x74c>)
 80086e4:	4293      	cmp	r3, r2
 80086e6:	d104      	bne.n	80086f2 <HAL_ADC_ConfigChannel+0x6a2>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a2c      	ldr	r2, [pc, #176]	; (80087a0 <HAL_ADC_ConfigChannel+0x750>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d047      	beq.n	8008782 <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80086fa:	d004      	beq.n	8008706 <HAL_ADC_ConfigChannel+0x6b6>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	4a26      	ldr	r2, [pc, #152]	; (800879c <HAL_ADC_ConfigChannel+0x74c>)
 8008702:	4293      	cmp	r3, r2
 8008704:	d101      	bne.n	800870a <HAL_ADC_ConfigChannel+0x6ba>
 8008706:	4a27      	ldr	r2, [pc, #156]	; (80087a4 <HAL_ADC_ConfigChannel+0x754>)
 8008708:	e000      	b.n	800870c <HAL_ADC_ConfigChannel+0x6bc>
 800870a:	4a27      	ldr	r2, [pc, #156]	; (80087a8 <HAL_ADC_ConfigChannel+0x758>)
 800870c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008710:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008714:	4619      	mov	r1, r3
 8008716:	4610      	mov	r0, r2
 8008718:	f7ff f92b 	bl	8007972 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800871c:	e031      	b.n	8008782 <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800871e:	683b      	ldr	r3, [r7, #0]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	4a22      	ldr	r2, [pc, #136]	; (80087ac <HAL_ADC_ConfigChannel+0x75c>)
 8008724:	4293      	cmp	r3, r2
 8008726:	d12d      	bne.n	8008784 <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8008728:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800872c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d127      	bne.n	8008784 <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a18      	ldr	r2, [pc, #96]	; (800879c <HAL_ADC_ConfigChannel+0x74c>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d022      	beq.n	8008784 <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008746:	d004      	beq.n	8008752 <HAL_ADC_ConfigChannel+0x702>
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a13      	ldr	r2, [pc, #76]	; (800879c <HAL_ADC_ConfigChannel+0x74c>)
 800874e:	4293      	cmp	r3, r2
 8008750:	d101      	bne.n	8008756 <HAL_ADC_ConfigChannel+0x706>
 8008752:	4a14      	ldr	r2, [pc, #80]	; (80087a4 <HAL_ADC_ConfigChannel+0x754>)
 8008754:	e000      	b.n	8008758 <HAL_ADC_ConfigChannel+0x708>
 8008756:	4a14      	ldr	r2, [pc, #80]	; (80087a8 <HAL_ADC_ConfigChannel+0x758>)
 8008758:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800875c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8008760:	4619      	mov	r1, r3
 8008762:	4610      	mov	r0, r2
 8008764:	f7ff f905 	bl	8007972 <LL_ADC_SetCommonPathInternalCh>
 8008768:	e00c      	b.n	8008784 <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800876e:	f043 0220 	orr.w	r2, r3, #32
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8008776:	2301      	movs	r3, #1
 8008778:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 800877c:	e002      	b.n	8008784 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800877e:	bf00      	nop
 8008780:	e000      	b.n	8008784 <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8008782:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2200      	movs	r2, #0
 8008788:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800878c:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8008790:	4618      	mov	r0, r3
 8008792:	3798      	adds	r7, #152	; 0x98
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}
 8008798:	c7520000 	.word	0xc7520000
 800879c:	50000100 	.word	0x50000100
 80087a0:	50000500 	.word	0x50000500
 80087a4:	50000300 	.word	0x50000300
 80087a8:	50000700 	.word	0x50000700
 80087ac:	cb840000 	.word	0xcb840000

080087b0 <LL_ADC_IsEnabled>:
{
 80087b0:	b480      	push	{r7}
 80087b2:	b083      	sub	sp, #12
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	f003 0301 	and.w	r3, r3, #1
 80087c0:	2b01      	cmp	r3, #1
 80087c2:	d101      	bne.n	80087c8 <LL_ADC_IsEnabled+0x18>
 80087c4:	2301      	movs	r3, #1
 80087c6:	e000      	b.n	80087ca <LL_ADC_IsEnabled+0x1a>
 80087c8:	2300      	movs	r3, #0
}
 80087ca:	4618      	mov	r0, r3
 80087cc:	370c      	adds	r7, #12
 80087ce:	46bd      	mov	sp, r7
 80087d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d4:	4770      	bx	lr

080087d6 <LL_ADC_REG_IsConversionOngoing>:
{
 80087d6:	b480      	push	{r7}
 80087d8:	b083      	sub	sp, #12
 80087da:	af00      	add	r7, sp, #0
 80087dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	f003 0304 	and.w	r3, r3, #4
 80087e6:	2b04      	cmp	r3, #4
 80087e8:	d101      	bne.n	80087ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80087ea:	2301      	movs	r3, #1
 80087ec:	e000      	b.n	80087f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80087ee:	2300      	movs	r3, #0
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	370c      	adds	r7, #12
 80087f4:	46bd      	mov	sp, r7
 80087f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fa:	4770      	bx	lr

080087fc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80087fc:	b590      	push	{r4, r7, lr}
 80087fe:	b0a1      	sub	sp, #132	; 0x84
 8008800:	af00      	add	r7, sp, #0
 8008802:	6078      	str	r0, [r7, #4]
 8008804:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008806:	2300      	movs	r3, #0
 8008808:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8008812:	2b01      	cmp	r3, #1
 8008814:	d101      	bne.n	800881a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8008816:	2302      	movs	r3, #2
 8008818:	e0e3      	b.n	80089e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800882a:	d102      	bne.n	8008832 <HAL_ADCEx_MultiModeConfigChannel+0x36>
 800882c:	4b6f      	ldr	r3, [pc, #444]	; (80089ec <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 800882e:	60bb      	str	r3, [r7, #8]
 8008830:	e009      	b.n	8008846 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a6e      	ldr	r2, [pc, #440]	; (80089f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d102      	bne.n	8008842 <HAL_ADCEx_MultiModeConfigChannel+0x46>
 800883c:	4b6d      	ldr	r3, [pc, #436]	; (80089f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800883e:	60bb      	str	r3, [r7, #8]
 8008840:	e001      	b.n	8008846 <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 8008842:	2300      	movs	r3, #0
 8008844:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d10b      	bne.n	8008864 <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008850:	f043 0220 	orr.w	r2, r3, #32
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2200      	movs	r2, #0
 800885c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8008860:	2301      	movs	r3, #1
 8008862:	e0be      	b.n	80089e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	4618      	mov	r0, r3
 8008868:	f7ff ffb5 	bl	80087d6 <LL_ADC_REG_IsConversionOngoing>
 800886c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4618      	mov	r0, r3
 8008874:	f7ff ffaf 	bl	80087d6 <LL_ADC_REG_IsConversionOngoing>
 8008878:	4603      	mov	r3, r0
 800887a:	2b00      	cmp	r3, #0
 800887c:	f040 80a0 	bne.w	80089c0 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8008880:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008882:	2b00      	cmp	r3, #0
 8008884:	f040 809c 	bne.w	80089c0 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	681b      	ldr	r3, [r3, #0]
 800888c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008890:	d004      	beq.n	800889c <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4a55      	ldr	r2, [pc, #340]	; (80089ec <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008898:	4293      	cmp	r3, r2
 800889a:	d101      	bne.n	80088a0 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 800889c:	4b56      	ldr	r3, [pc, #344]	; (80089f8 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800889e:	e000      	b.n	80088a2 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 80088a0:	4b56      	ldr	r3, [pc, #344]	; (80089fc <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80088a2:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d04b      	beq.n	8008944 <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80088ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088ae:	689b      	ldr	r3, [r3, #8]
 80088b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80088b4:	683b      	ldr	r3, [r7, #0]
 80088b6:	6859      	ldr	r1, [r3, #4]
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80088be:	035b      	lsls	r3, r3, #13
 80088c0:	430b      	orrs	r3, r1
 80088c2:	431a      	orrs	r2, r3
 80088c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80088c6:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80088d0:	d004      	beq.n	80088dc <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	4a45      	ldr	r2, [pc, #276]	; (80089ec <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d10f      	bne.n	80088fc <HAL_ADCEx_MultiModeConfigChannel+0x100>
 80088dc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80088e0:	f7ff ff66 	bl	80087b0 <LL_ADC_IsEnabled>
 80088e4:	4604      	mov	r4, r0
 80088e6:	4841      	ldr	r0, [pc, #260]	; (80089ec <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 80088e8:	f7ff ff62 	bl	80087b0 <LL_ADC_IsEnabled>
 80088ec:	4603      	mov	r3, r0
 80088ee:	4323      	orrs	r3, r4
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	bf0c      	ite	eq
 80088f4:	2301      	moveq	r3, #1
 80088f6:	2300      	movne	r3, #0
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	e012      	b.n	8008922 <HAL_ADCEx_MultiModeConfigChannel+0x126>
 80088fc:	483c      	ldr	r0, [pc, #240]	; (80089f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80088fe:	f7ff ff57 	bl	80087b0 <LL_ADC_IsEnabled>
 8008902:	4604      	mov	r4, r0
 8008904:	483b      	ldr	r0, [pc, #236]	; (80089f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8008906:	f7ff ff53 	bl	80087b0 <LL_ADC_IsEnabled>
 800890a:	4603      	mov	r3, r0
 800890c:	431c      	orrs	r4, r3
 800890e:	483c      	ldr	r0, [pc, #240]	; (8008a00 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8008910:	f7ff ff4e 	bl	80087b0 <LL_ADC_IsEnabled>
 8008914:	4603      	mov	r3, r0
 8008916:	4323      	orrs	r3, r4
 8008918:	2b00      	cmp	r3, #0
 800891a:	bf0c      	ite	eq
 800891c:	2301      	moveq	r3, #1
 800891e:	2300      	movne	r3, #0
 8008920:	b2db      	uxtb	r3, r3
 8008922:	2b00      	cmp	r3, #0
 8008924:	d056      	beq.n	80089d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8008926:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800892e:	f023 030f 	bic.w	r3, r3, #15
 8008932:	683a      	ldr	r2, [r7, #0]
 8008934:	6811      	ldr	r1, [r2, #0]
 8008936:	683a      	ldr	r2, [r7, #0]
 8008938:	6892      	ldr	r2, [r2, #8]
 800893a:	430a      	orrs	r2, r1
 800893c:	431a      	orrs	r2, r3
 800893e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008940:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8008942:	e047      	b.n	80089d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8008944:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008946:	689b      	ldr	r3, [r3, #8]
 8008948:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800894c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800894e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008958:	d004      	beq.n	8008964 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	4a23      	ldr	r2, [pc, #140]	; (80089ec <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008960:	4293      	cmp	r3, r2
 8008962:	d10f      	bne.n	8008984 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8008964:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8008968:	f7ff ff22 	bl	80087b0 <LL_ADC_IsEnabled>
 800896c:	4604      	mov	r4, r0
 800896e:	481f      	ldr	r0, [pc, #124]	; (80089ec <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8008970:	f7ff ff1e 	bl	80087b0 <LL_ADC_IsEnabled>
 8008974:	4603      	mov	r3, r0
 8008976:	4323      	orrs	r3, r4
 8008978:	2b00      	cmp	r3, #0
 800897a:	bf0c      	ite	eq
 800897c:	2301      	moveq	r3, #1
 800897e:	2300      	movne	r3, #0
 8008980:	b2db      	uxtb	r3, r3
 8008982:	e012      	b.n	80089aa <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8008984:	481a      	ldr	r0, [pc, #104]	; (80089f0 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8008986:	f7ff ff13 	bl	80087b0 <LL_ADC_IsEnabled>
 800898a:	4604      	mov	r4, r0
 800898c:	4819      	ldr	r0, [pc, #100]	; (80089f4 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 800898e:	f7ff ff0f 	bl	80087b0 <LL_ADC_IsEnabled>
 8008992:	4603      	mov	r3, r0
 8008994:	431c      	orrs	r4, r3
 8008996:	481a      	ldr	r0, [pc, #104]	; (8008a00 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8008998:	f7ff ff0a 	bl	80087b0 <LL_ADC_IsEnabled>
 800899c:	4603      	mov	r3, r0
 800899e:	4323      	orrs	r3, r4
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	bf0c      	ite	eq
 80089a4:	2301      	moveq	r3, #1
 80089a6:	2300      	movne	r3, #0
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d012      	beq.n	80089d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80089ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089b0:	689b      	ldr	r3, [r3, #8]
 80089b2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80089b6:	f023 030f 	bic.w	r3, r3, #15
 80089ba:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80089bc:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80089be:	e009      	b.n	80089d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80089c4:	f043 0220 	orr.w	r2, r3, #32
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80089d2:	e000      	b.n	80089d6 <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80089d4:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80089de:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80089e2:	4618      	mov	r0, r3
 80089e4:	3784      	adds	r7, #132	; 0x84
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd90      	pop	{r4, r7, pc}
 80089ea:	bf00      	nop
 80089ec:	50000100 	.word	0x50000100
 80089f0:	50000400 	.word	0x50000400
 80089f4:	50000500 	.word	0x50000500
 80089f8:	50000300 	.word	0x50000300
 80089fc:	50000700 	.word	0x50000700
 8008a00:	50000600 	.word	0x50000600

08008a04 <LL_EXTI_EnableIT_0_31>:
{
 8008a04:	b480      	push	{r7}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8008a0c:	4b05      	ldr	r3, [pc, #20]	; (8008a24 <LL_EXTI_EnableIT_0_31+0x20>)
 8008a0e:	681a      	ldr	r2, [r3, #0]
 8008a10:	4904      	ldr	r1, [pc, #16]	; (8008a24 <LL_EXTI_EnableIT_0_31+0x20>)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	4313      	orrs	r3, r2
 8008a16:	600b      	str	r3, [r1, #0]
}
 8008a18:	bf00      	nop
 8008a1a:	370c      	adds	r7, #12
 8008a1c:	46bd      	mov	sp, r7
 8008a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a22:	4770      	bx	lr
 8008a24:	40010400 	.word	0x40010400

08008a28 <LL_EXTI_EnableIT_32_63>:
{
 8008a28:	b480      	push	{r7}
 8008a2a:	b083      	sub	sp, #12
 8008a2c:	af00      	add	r7, sp, #0
 8008a2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8008a30:	4b05      	ldr	r3, [pc, #20]	; (8008a48 <LL_EXTI_EnableIT_32_63+0x20>)
 8008a32:	6a1a      	ldr	r2, [r3, #32]
 8008a34:	4904      	ldr	r1, [pc, #16]	; (8008a48 <LL_EXTI_EnableIT_32_63+0x20>)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	4313      	orrs	r3, r2
 8008a3a:	620b      	str	r3, [r1, #32]
}
 8008a3c:	bf00      	nop
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr
 8008a48:	40010400 	.word	0x40010400

08008a4c <LL_EXTI_DisableIT_0_31>:
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8008a54:	4b06      	ldr	r3, [pc, #24]	; (8008a70 <LL_EXTI_DisableIT_0_31+0x24>)
 8008a56:	681a      	ldr	r2, [r3, #0]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	43db      	mvns	r3, r3
 8008a5c:	4904      	ldr	r1, [pc, #16]	; (8008a70 <LL_EXTI_DisableIT_0_31+0x24>)
 8008a5e:	4013      	ands	r3, r2
 8008a60:	600b      	str	r3, [r1, #0]
}
 8008a62:	bf00      	nop
 8008a64:	370c      	adds	r7, #12
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	40010400 	.word	0x40010400

08008a74 <LL_EXTI_DisableIT_32_63>:
{
 8008a74:	b480      	push	{r7}
 8008a76:	b083      	sub	sp, #12
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8008a7c:	4b06      	ldr	r3, [pc, #24]	; (8008a98 <LL_EXTI_DisableIT_32_63+0x24>)
 8008a7e:	6a1a      	ldr	r2, [r3, #32]
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	43db      	mvns	r3, r3
 8008a84:	4904      	ldr	r1, [pc, #16]	; (8008a98 <LL_EXTI_DisableIT_32_63+0x24>)
 8008a86:	4013      	ands	r3, r2
 8008a88:	620b      	str	r3, [r1, #32]
}
 8008a8a:	bf00      	nop
 8008a8c:	370c      	adds	r7, #12
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a94:	4770      	bx	lr
 8008a96:	bf00      	nop
 8008a98:	40010400 	.word	0x40010400

08008a9c <LL_EXTI_EnableEvent_0_31>:
{
 8008a9c:	b480      	push	{r7}
 8008a9e:	b083      	sub	sp, #12
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8008aa4:	4b05      	ldr	r3, [pc, #20]	; (8008abc <LL_EXTI_EnableEvent_0_31+0x20>)
 8008aa6:	685a      	ldr	r2, [r3, #4]
 8008aa8:	4904      	ldr	r1, [pc, #16]	; (8008abc <LL_EXTI_EnableEvent_0_31+0x20>)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	4313      	orrs	r3, r2
 8008aae:	604b      	str	r3, [r1, #4]
}
 8008ab0:	bf00      	nop
 8008ab2:	370c      	adds	r7, #12
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aba:	4770      	bx	lr
 8008abc:	40010400 	.word	0x40010400

08008ac0 <LL_EXTI_EnableEvent_32_63>:
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b083      	sub	sp, #12
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8008ac8:	4b05      	ldr	r3, [pc, #20]	; (8008ae0 <LL_EXTI_EnableEvent_32_63+0x20>)
 8008aca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008acc:	4904      	ldr	r1, [pc, #16]	; (8008ae0 <LL_EXTI_EnableEvent_32_63+0x20>)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	4313      	orrs	r3, r2
 8008ad2:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008ad4:	bf00      	nop
 8008ad6:	370c      	adds	r7, #12
 8008ad8:	46bd      	mov	sp, r7
 8008ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ade:	4770      	bx	lr
 8008ae0:	40010400 	.word	0x40010400

08008ae4 <LL_EXTI_DisableEvent_0_31>:
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	b083      	sub	sp, #12
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8008aec:	4b06      	ldr	r3, [pc, #24]	; (8008b08 <LL_EXTI_DisableEvent_0_31+0x24>)
 8008aee:	685a      	ldr	r2, [r3, #4]
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	43db      	mvns	r3, r3
 8008af4:	4904      	ldr	r1, [pc, #16]	; (8008b08 <LL_EXTI_DisableEvent_0_31+0x24>)
 8008af6:	4013      	ands	r3, r2
 8008af8:	604b      	str	r3, [r1, #4]
}
 8008afa:	bf00      	nop
 8008afc:	370c      	adds	r7, #12
 8008afe:	46bd      	mov	sp, r7
 8008b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b04:	4770      	bx	lr
 8008b06:	bf00      	nop
 8008b08:	40010400 	.word	0x40010400

08008b0c <LL_EXTI_DisableEvent_32_63>:
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b083      	sub	sp, #12
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8008b14:	4b06      	ldr	r3, [pc, #24]	; (8008b30 <LL_EXTI_DisableEvent_32_63+0x24>)
 8008b16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	43db      	mvns	r3, r3
 8008b1c:	4904      	ldr	r1, [pc, #16]	; (8008b30 <LL_EXTI_DisableEvent_32_63+0x24>)
 8008b1e:	4013      	ands	r3, r2
 8008b20:	624b      	str	r3, [r1, #36]	; 0x24
}
 8008b22:	bf00      	nop
 8008b24:	370c      	adds	r7, #12
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr
 8008b2e:	bf00      	nop
 8008b30:	40010400 	.word	0x40010400

08008b34 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8008b34:	b480      	push	{r7}
 8008b36:	b083      	sub	sp, #12
 8008b38:	af00      	add	r7, sp, #0
 8008b3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8008b3c:	4b05      	ldr	r3, [pc, #20]	; (8008b54 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8008b3e:	689a      	ldr	r2, [r3, #8]
 8008b40:	4904      	ldr	r1, [pc, #16]	; (8008b54 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	608b      	str	r3, [r1, #8]
}
 8008b48:	bf00      	nop
 8008b4a:	370c      	adds	r7, #12
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b52:	4770      	bx	lr
 8008b54:	40010400 	.word	0x40010400

08008b58 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8008b58:	b480      	push	{r7}
 8008b5a:	b083      	sub	sp, #12
 8008b5c:	af00      	add	r7, sp, #0
 8008b5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8008b60:	4b05      	ldr	r3, [pc, #20]	; (8008b78 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008b62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008b64:	4904      	ldr	r1, [pc, #16]	; (8008b78 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	4313      	orrs	r3, r2
 8008b6a:	628b      	str	r3, [r1, #40]	; 0x28
}
 8008b6c:	bf00      	nop
 8008b6e:	370c      	adds	r7, #12
 8008b70:	46bd      	mov	sp, r7
 8008b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b76:	4770      	bx	lr
 8008b78:	40010400 	.word	0x40010400

08008b7c <LL_EXTI_DisableRisingTrig_0_31>:
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8008b84:	4b06      	ldr	r3, [pc, #24]	; (8008ba0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8008b86:	689a      	ldr	r2, [r3, #8]
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	43db      	mvns	r3, r3
 8008b8c:	4904      	ldr	r1, [pc, #16]	; (8008ba0 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8008b8e:	4013      	ands	r3, r2
 8008b90:	608b      	str	r3, [r1, #8]
}
 8008b92:	bf00      	nop
 8008b94:	370c      	adds	r7, #12
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	40010400 	.word	0x40010400

08008ba4 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8008ba4:	b480      	push	{r7}
 8008ba6:	b083      	sub	sp, #12
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8008bac:	4b06      	ldr	r3, [pc, #24]	; (8008bc8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8008bae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	43db      	mvns	r3, r3
 8008bb4:	4904      	ldr	r1, [pc, #16]	; (8008bc8 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	628b      	str	r3, [r1, #40]	; 0x28
}
 8008bba:	bf00      	nop
 8008bbc:	370c      	adds	r7, #12
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr
 8008bc6:	bf00      	nop
 8008bc8:	40010400 	.word	0x40010400

08008bcc <LL_EXTI_EnableFallingTrig_0_31>:
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8008bd4:	4b05      	ldr	r3, [pc, #20]	; (8008bec <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8008bd6:	68da      	ldr	r2, [r3, #12]
 8008bd8:	4904      	ldr	r1, [pc, #16]	; (8008bec <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	60cb      	str	r3, [r1, #12]
}
 8008be0:	bf00      	nop
 8008be2:	370c      	adds	r7, #12
 8008be4:	46bd      	mov	sp, r7
 8008be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bea:	4770      	bx	lr
 8008bec:	40010400 	.word	0x40010400

08008bf0 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8008bf8:	4b05      	ldr	r3, [pc, #20]	; (8008c10 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8008bfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008bfc:	4904      	ldr	r1, [pc, #16]	; (8008c10 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4313      	orrs	r3, r2
 8008c02:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8008c04:	bf00      	nop
 8008c06:	370c      	adds	r7, #12
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr
 8008c10:	40010400 	.word	0x40010400

08008c14 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8008c1c:	4b06      	ldr	r3, [pc, #24]	; (8008c38 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8008c1e:	68da      	ldr	r2, [r3, #12]
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	43db      	mvns	r3, r3
 8008c24:	4904      	ldr	r1, [pc, #16]	; (8008c38 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8008c26:	4013      	ands	r3, r2
 8008c28:	60cb      	str	r3, [r1, #12]
}
 8008c2a:	bf00      	nop
 8008c2c:	370c      	adds	r7, #12
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	40010400 	.word	0x40010400

08008c3c <LL_EXTI_DisableFallingTrig_32_63>:
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b083      	sub	sp, #12
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8008c44:	4b06      	ldr	r3, [pc, #24]	; (8008c60 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8008c46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	43db      	mvns	r3, r3
 8008c4c:	4904      	ldr	r1, [pc, #16]	; (8008c60 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8008c4e:	4013      	ands	r3, r2
 8008c50:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8008c52:	bf00      	nop
 8008c54:	370c      	adds	r7, #12
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop
 8008c60:	40010400 	.word	0x40010400

08008c64 <LL_EXTI_ClearFlag_0_31>:
{
 8008c64:	b480      	push	{r7}
 8008c66:	b083      	sub	sp, #12
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8008c6c:	4a04      	ldr	r2, [pc, #16]	; (8008c80 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	6153      	str	r3, [r2, #20]
}
 8008c72:	bf00      	nop
 8008c74:	370c      	adds	r7, #12
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
 8008c7e:	bf00      	nop
 8008c80:	40010400 	.word	0x40010400

08008c84 <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8008c84:	b480      	push	{r7}
 8008c86:	b083      	sub	sp, #12
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8008c8c:	4a04      	ldr	r2, [pc, #16]	; (8008ca0 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6353      	str	r3, [r2, #52]	; 0x34
}
 8008c92:	bf00      	nop
 8008c94:	370c      	adds	r7, #12
 8008c96:	46bd      	mov	sp, r7
 8008c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9c:	4770      	bx	lr
 8008c9e:	bf00      	nop
 8008ca0:	40010400 	.word	0x40010400

08008ca4 <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8008ca4:	b580      	push	{r7, lr}
 8008ca6:	b088      	sub	sp, #32
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8008cac:	2300      	movs	r3, #0
 8008cae:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d102      	bne.n	8008cc0 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	77fb      	strb	r3, [r7, #31]
 8008cbe:	e180      	b.n	8008fc2 <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008cca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008cce:	d102      	bne.n	8008cd6 <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	77fb      	strb	r3, [r7, #31]
 8008cd4:	e175      	b.n	8008fc2 <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	7f5b      	ldrb	r3, [r3, #29]
 8008cda:	b2db      	uxtb	r3, r3
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d108      	bne.n	8008cf2 <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2200      	movs	r2, #0
 8008ce4:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f7fd f8ff 	bl	8005ef0 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cfc:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	695b      	ldr	r3, [r3, #20]
 8008d0c:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8008d18:	4313      	orrs	r3, r2
 8008d1a:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	681a      	ldr	r2, [r3, #0]
 8008d22:	4b98      	ldr	r3, [pc, #608]	; (8008f84 <HAL_COMP_Init+0x2e0>)
 8008d24:	4013      	ands	r3, r2
 8008d26:	687a      	ldr	r2, [r7, #4]
 8008d28:	6812      	ldr	r2, [r2, #0]
 8008d2a:	6979      	ldr	r1, [r7, #20]
 8008d2c:	430b      	orrs	r3, r1
 8008d2e:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008d3a:	2b00      	cmp	r3, #0
 8008d3c:	d015      	beq.n	8008d6a <HAL_COMP_Init+0xc6>
 8008d3e:	69bb      	ldr	r3, [r7, #24]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d112      	bne.n	8008d6a <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8008d44:	4b90      	ldr	r3, [pc, #576]	; (8008f88 <HAL_COMP_Init+0x2e4>)
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	099b      	lsrs	r3, r3, #6
 8008d4a:	4a90      	ldr	r2, [pc, #576]	; (8008f8c <HAL_COMP_Init+0x2e8>)
 8008d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8008d50:	099a      	lsrs	r2, r3, #6
 8008d52:	4613      	mov	r3, r2
 8008d54:	009b      	lsls	r3, r3, #2
 8008d56:	4413      	add	r3, r2
 8008d58:	009b      	lsls	r3, r3, #2
 8008d5a:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8008d5c:	e002      	b.n	8008d64 <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	3b01      	subs	r3, #1
 8008d62:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1f9      	bne.n	8008d5e <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	4a88      	ldr	r2, [pc, #544]	; (8008f90 <HAL_COMP_Init+0x2ec>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d028      	beq.n	8008dc6 <HAL_COMP_Init+0x122>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a86      	ldr	r2, [pc, #536]	; (8008f94 <HAL_COMP_Init+0x2f0>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d020      	beq.n	8008dc0 <HAL_COMP_Init+0x11c>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	4a85      	ldr	r2, [pc, #532]	; (8008f98 <HAL_COMP_Init+0x2f4>)
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d018      	beq.n	8008dba <HAL_COMP_Init+0x116>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a83      	ldr	r2, [pc, #524]	; (8008f9c <HAL_COMP_Init+0x2f8>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d010      	beq.n	8008db4 <HAL_COMP_Init+0x110>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a82      	ldr	r2, [pc, #520]	; (8008fa0 <HAL_COMP_Init+0x2fc>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d008      	beq.n	8008dae <HAL_COMP_Init+0x10a>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a80      	ldr	r2, [pc, #512]	; (8008fa4 <HAL_COMP_Init+0x300>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d101      	bne.n	8008daa <HAL_COMP_Init+0x106>
 8008da6:	2301      	movs	r3, #1
 8008da8:	e00f      	b.n	8008dca <HAL_COMP_Init+0x126>
 8008daa:	2302      	movs	r3, #2
 8008dac:	e00d      	b.n	8008dca <HAL_COMP_Init+0x126>
 8008dae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8008db2:	e00a      	b.n	8008dca <HAL_COMP_Init+0x126>
 8008db4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008db8:	e007      	b.n	8008dca <HAL_COMP_Init+0x126>
 8008dba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8008dbe:	e004      	b.n	8008dca <HAL_COMP_Init+0x126>
 8008dc0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8008dc4:	e001      	b.n	8008dca <HAL_COMP_Init+0x126>
 8008dc6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8008dca:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	699b      	ldr	r3, [r3, #24]
 8008dd0:	f003 0303 	and.w	r3, r3, #3
 8008dd4:	2b00      	cmp	r3, #0
 8008dd6:	f000 80b6 	beq.w	8008f46 <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	f003 0310 	and.w	r3, r3, #16
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d011      	beq.n	8008e0a <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	4a6e      	ldr	r2, [pc, #440]	; (8008fa4 <HAL_COMP_Init+0x300>)
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d004      	beq.n	8008dfa <HAL_COMP_Init+0x156>
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	4a6c      	ldr	r2, [pc, #432]	; (8008fa8 <HAL_COMP_Init+0x304>)
 8008df6:	4293      	cmp	r3, r2
 8008df8:	d103      	bne.n	8008e02 <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8008dfa:	6938      	ldr	r0, [r7, #16]
 8008dfc:	f7ff feac 	bl	8008b58 <LL_EXTI_EnableRisingTrig_32_63>
 8008e00:	e014      	b.n	8008e2c <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8008e02:	6938      	ldr	r0, [r7, #16]
 8008e04:	f7ff fe96 	bl	8008b34 <LL_EXTI_EnableRisingTrig_0_31>
 8008e08:	e010      	b.n	8008e2c <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a65      	ldr	r2, [pc, #404]	; (8008fa4 <HAL_COMP_Init+0x300>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d004      	beq.n	8008e1e <HAL_COMP_Init+0x17a>
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a63      	ldr	r2, [pc, #396]	; (8008fa8 <HAL_COMP_Init+0x304>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d103      	bne.n	8008e26 <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8008e1e:	6938      	ldr	r0, [r7, #16]
 8008e20:	f7ff fec0 	bl	8008ba4 <LL_EXTI_DisableRisingTrig_32_63>
 8008e24:	e002      	b.n	8008e2c <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8008e26:	6938      	ldr	r0, [r7, #16]
 8008e28:	f7ff fea8 	bl	8008b7c <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	f003 0320 	and.w	r3, r3, #32
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d011      	beq.n	8008e5c <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a59      	ldr	r2, [pc, #356]	; (8008fa4 <HAL_COMP_Init+0x300>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d004      	beq.n	8008e4c <HAL_COMP_Init+0x1a8>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a58      	ldr	r2, [pc, #352]	; (8008fa8 <HAL_COMP_Init+0x304>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d103      	bne.n	8008e54 <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8008e4c:	6938      	ldr	r0, [r7, #16]
 8008e4e:	f7ff fecf 	bl	8008bf0 <LL_EXTI_EnableFallingTrig_32_63>
 8008e52:	e014      	b.n	8008e7e <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8008e54:	6938      	ldr	r0, [r7, #16]
 8008e56:	f7ff feb9 	bl	8008bcc <LL_EXTI_EnableFallingTrig_0_31>
 8008e5a:	e010      	b.n	8008e7e <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a50      	ldr	r2, [pc, #320]	; (8008fa4 <HAL_COMP_Init+0x300>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d004      	beq.n	8008e70 <HAL_COMP_Init+0x1cc>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a4f      	ldr	r2, [pc, #316]	; (8008fa8 <HAL_COMP_Init+0x304>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d103      	bne.n	8008e78 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8008e70:	6938      	ldr	r0, [r7, #16]
 8008e72:	f7ff fee3 	bl	8008c3c <LL_EXTI_DisableFallingTrig_32_63>
 8008e76:	e002      	b.n	8008e7e <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8008e78:	6938      	ldr	r0, [r7, #16]
 8008e7a:	f7ff fecb 	bl	8008c14 <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	4a48      	ldr	r2, [pc, #288]	; (8008fa4 <HAL_COMP_Init+0x300>)
 8008e84:	4293      	cmp	r3, r2
 8008e86:	d004      	beq.n	8008e92 <HAL_COMP_Init+0x1ee>
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	4a46      	ldr	r2, [pc, #280]	; (8008fa8 <HAL_COMP_Init+0x304>)
 8008e8e:	4293      	cmp	r3, r2
 8008e90:	d103      	bne.n	8008e9a <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8008e92:	6938      	ldr	r0, [r7, #16]
 8008e94:	f7ff fef6 	bl	8008c84 <LL_EXTI_ClearFlag_32_63>
 8008e98:	e002      	b.n	8008ea0 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8008e9a:	6938      	ldr	r0, [r7, #16]
 8008e9c:	f7ff fee2 	bl	8008c64 <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	699b      	ldr	r3, [r3, #24]
 8008ea4:	f003 0302 	and.w	r3, r3, #2
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d011      	beq.n	8008ed0 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a3c      	ldr	r2, [pc, #240]	; (8008fa4 <HAL_COMP_Init+0x300>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d004      	beq.n	8008ec0 <HAL_COMP_Init+0x21c>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a3b      	ldr	r2, [pc, #236]	; (8008fa8 <HAL_COMP_Init+0x304>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d103      	bne.n	8008ec8 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8008ec0:	6938      	ldr	r0, [r7, #16]
 8008ec2:	f7ff fdfd 	bl	8008ac0 <LL_EXTI_EnableEvent_32_63>
 8008ec6:	e014      	b.n	8008ef2 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8008ec8:	6938      	ldr	r0, [r7, #16]
 8008eca:	f7ff fde7 	bl	8008a9c <LL_EXTI_EnableEvent_0_31>
 8008ece:	e010      	b.n	8008ef2 <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	4a33      	ldr	r2, [pc, #204]	; (8008fa4 <HAL_COMP_Init+0x300>)
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d004      	beq.n	8008ee4 <HAL_COMP_Init+0x240>
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	4a32      	ldr	r2, [pc, #200]	; (8008fa8 <HAL_COMP_Init+0x304>)
 8008ee0:	4293      	cmp	r3, r2
 8008ee2:	d103      	bne.n	8008eec <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 8008ee4:	6938      	ldr	r0, [r7, #16]
 8008ee6:	f7ff fe11 	bl	8008b0c <LL_EXTI_DisableEvent_32_63>
 8008eea:	e002      	b.n	8008ef2 <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8008eec:	6938      	ldr	r0, [r7, #16]
 8008eee:	f7ff fdf9 	bl	8008ae4 <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	699b      	ldr	r3, [r3, #24]
 8008ef6:	f003 0301 	and.w	r3, r3, #1
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d011      	beq.n	8008f22 <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	4a28      	ldr	r2, [pc, #160]	; (8008fa4 <HAL_COMP_Init+0x300>)
 8008f04:	4293      	cmp	r3, r2
 8008f06:	d004      	beq.n	8008f12 <HAL_COMP_Init+0x26e>
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a26      	ldr	r2, [pc, #152]	; (8008fa8 <HAL_COMP_Init+0x304>)
 8008f0e:	4293      	cmp	r3, r2
 8008f10:	d103      	bne.n	8008f1a <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 8008f12:	6938      	ldr	r0, [r7, #16]
 8008f14:	f7ff fd88 	bl	8008a28 <LL_EXTI_EnableIT_32_63>
 8008f18:	e04b      	b.n	8008fb2 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8008f1a:	6938      	ldr	r0, [r7, #16]
 8008f1c:	f7ff fd72 	bl	8008a04 <LL_EXTI_EnableIT_0_31>
 8008f20:	e047      	b.n	8008fb2 <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	4a1f      	ldr	r2, [pc, #124]	; (8008fa4 <HAL_COMP_Init+0x300>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d004      	beq.n	8008f36 <HAL_COMP_Init+0x292>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	4a1d      	ldr	r2, [pc, #116]	; (8008fa8 <HAL_COMP_Init+0x304>)
 8008f32:	4293      	cmp	r3, r2
 8008f34:	d103      	bne.n	8008f3e <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 8008f36:	6938      	ldr	r0, [r7, #16]
 8008f38:	f7ff fd9c 	bl	8008a74 <LL_EXTI_DisableIT_32_63>
 8008f3c:	e039      	b.n	8008fb2 <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 8008f3e:	6938      	ldr	r0, [r7, #16]
 8008f40:	f7ff fd84 	bl	8008a4c <LL_EXTI_DisableIT_0_31>
 8008f44:	e035      	b.n	8008fb2 <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a16      	ldr	r2, [pc, #88]	; (8008fa4 <HAL_COMP_Init+0x300>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d004      	beq.n	8008f5a <HAL_COMP_Init+0x2b6>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a14      	ldr	r2, [pc, #80]	; (8008fa8 <HAL_COMP_Init+0x304>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d103      	bne.n	8008f62 <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 8008f5a:	6938      	ldr	r0, [r7, #16]
 8008f5c:	f7ff fdd6 	bl	8008b0c <LL_EXTI_DisableEvent_32_63>
 8008f60:	e002      	b.n	8008f68 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 8008f62:	6938      	ldr	r0, [r7, #16]
 8008f64:	f7ff fdbe 	bl	8008ae4 <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a0d      	ldr	r2, [pc, #52]	; (8008fa4 <HAL_COMP_Init+0x300>)
 8008f6e:	4293      	cmp	r3, r2
 8008f70:	d004      	beq.n	8008f7c <HAL_COMP_Init+0x2d8>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4a0c      	ldr	r2, [pc, #48]	; (8008fa8 <HAL_COMP_Init+0x304>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d117      	bne.n	8008fac <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 8008f7c:	6938      	ldr	r0, [r7, #16]
 8008f7e:	f7ff fd79 	bl	8008a74 <LL_EXTI_DisableIT_32_63>
 8008f82:	e016      	b.n	8008fb2 <HAL_COMP_Init+0x30e>
 8008f84:	ff007e0f 	.word	0xff007e0f
 8008f88:	20000ca4 	.word	0x20000ca4
 8008f8c:	053e2d63 	.word	0x053e2d63
 8008f90:	40010200 	.word	0x40010200
 8008f94:	40010204 	.word	0x40010204
 8008f98:	40010208 	.word	0x40010208
 8008f9c:	4001020c 	.word	0x4001020c
 8008fa0:	40010210 	.word	0x40010210
 8008fa4:	40010214 	.word	0x40010214
 8008fa8:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8008fac:	6938      	ldr	r0, [r7, #16]
 8008fae:	f7ff fd4d 	bl	8008a4c <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	7f5b      	ldrb	r3, [r3, #29]
 8008fb6:	b2db      	uxtb	r3, r3
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d102      	bne.n	8008fc2 <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	2201      	movs	r2, #1
 8008fc0:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 8008fc2:	7ffb      	ldrb	r3, [r7, #31]
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3720      	adds	r7, #32
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <__NVIC_SetPriorityGrouping>:
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	f003 0307 	and.w	r3, r3, #7
 8008fda:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008fdc:	4b0c      	ldr	r3, [pc, #48]	; (8009010 <__NVIC_SetPriorityGrouping+0x44>)
 8008fde:	68db      	ldr	r3, [r3, #12]
 8008fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008fe8:	4013      	ands	r3, r2
 8008fea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008ff0:	68bb      	ldr	r3, [r7, #8]
 8008ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008ff4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8008ff8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8008ffe:	4a04      	ldr	r2, [pc, #16]	; (8009010 <__NVIC_SetPriorityGrouping+0x44>)
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	60d3      	str	r3, [r2, #12]
}
 8009004:	bf00      	nop
 8009006:	3714      	adds	r7, #20
 8009008:	46bd      	mov	sp, r7
 800900a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900e:	4770      	bx	lr
 8009010:	e000ed00 	.word	0xe000ed00

08009014 <__NVIC_GetPriorityGrouping>:
{
 8009014:	b480      	push	{r7}
 8009016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009018:	4b04      	ldr	r3, [pc, #16]	; (800902c <__NVIC_GetPriorityGrouping+0x18>)
 800901a:	68db      	ldr	r3, [r3, #12]
 800901c:	0a1b      	lsrs	r3, r3, #8
 800901e:	f003 0307 	and.w	r3, r3, #7
}
 8009022:	4618      	mov	r0, r3
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr
 800902c:	e000ed00 	.word	0xe000ed00

08009030 <__NVIC_EnableIRQ>:
{
 8009030:	b480      	push	{r7}
 8009032:	b083      	sub	sp, #12
 8009034:	af00      	add	r7, sp, #0
 8009036:	4603      	mov	r3, r0
 8009038:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800903a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800903e:	2b00      	cmp	r3, #0
 8009040:	db0b      	blt.n	800905a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009042:	79fb      	ldrb	r3, [r7, #7]
 8009044:	f003 021f 	and.w	r2, r3, #31
 8009048:	4907      	ldr	r1, [pc, #28]	; (8009068 <__NVIC_EnableIRQ+0x38>)
 800904a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800904e:	095b      	lsrs	r3, r3, #5
 8009050:	2001      	movs	r0, #1
 8009052:	fa00 f202 	lsl.w	r2, r0, r2
 8009056:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800905a:	bf00      	nop
 800905c:	370c      	adds	r7, #12
 800905e:	46bd      	mov	sp, r7
 8009060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009064:	4770      	bx	lr
 8009066:	bf00      	nop
 8009068:	e000e100 	.word	0xe000e100

0800906c <__NVIC_SetPriority>:
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	4603      	mov	r3, r0
 8009074:	6039      	str	r1, [r7, #0]
 8009076:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009078:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800907c:	2b00      	cmp	r3, #0
 800907e:	db0a      	blt.n	8009096 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009080:	683b      	ldr	r3, [r7, #0]
 8009082:	b2da      	uxtb	r2, r3
 8009084:	490c      	ldr	r1, [pc, #48]	; (80090b8 <__NVIC_SetPriority+0x4c>)
 8009086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800908a:	0112      	lsls	r2, r2, #4
 800908c:	b2d2      	uxtb	r2, r2
 800908e:	440b      	add	r3, r1
 8009090:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009094:	e00a      	b.n	80090ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	b2da      	uxtb	r2, r3
 800909a:	4908      	ldr	r1, [pc, #32]	; (80090bc <__NVIC_SetPriority+0x50>)
 800909c:	79fb      	ldrb	r3, [r7, #7]
 800909e:	f003 030f 	and.w	r3, r3, #15
 80090a2:	3b04      	subs	r3, #4
 80090a4:	0112      	lsls	r2, r2, #4
 80090a6:	b2d2      	uxtb	r2, r2
 80090a8:	440b      	add	r3, r1
 80090aa:	761a      	strb	r2, [r3, #24]
}
 80090ac:	bf00      	nop
 80090ae:	370c      	adds	r7, #12
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr
 80090b8:	e000e100 	.word	0xe000e100
 80090bc:	e000ed00 	.word	0xe000ed00

080090c0 <NVIC_EncodePriority>:
{
 80090c0:	b480      	push	{r7}
 80090c2:	b089      	sub	sp, #36	; 0x24
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	60f8      	str	r0, [r7, #12]
 80090c8:	60b9      	str	r1, [r7, #8]
 80090ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	f003 0307 	and.w	r3, r3, #7
 80090d2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	f1c3 0307 	rsb	r3, r3, #7
 80090da:	2b04      	cmp	r3, #4
 80090dc:	bf28      	it	cs
 80090de:	2304      	movcs	r3, #4
 80090e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80090e2:	69fb      	ldr	r3, [r7, #28]
 80090e4:	3304      	adds	r3, #4
 80090e6:	2b06      	cmp	r3, #6
 80090e8:	d902      	bls.n	80090f0 <NVIC_EncodePriority+0x30>
 80090ea:	69fb      	ldr	r3, [r7, #28]
 80090ec:	3b03      	subs	r3, #3
 80090ee:	e000      	b.n	80090f2 <NVIC_EncodePriority+0x32>
 80090f0:	2300      	movs	r3, #0
 80090f2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80090f4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80090f8:	69bb      	ldr	r3, [r7, #24]
 80090fa:	fa02 f303 	lsl.w	r3, r2, r3
 80090fe:	43da      	mvns	r2, r3
 8009100:	68bb      	ldr	r3, [r7, #8]
 8009102:	401a      	ands	r2, r3
 8009104:	697b      	ldr	r3, [r7, #20]
 8009106:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009108:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800910c:	697b      	ldr	r3, [r7, #20]
 800910e:	fa01 f303 	lsl.w	r3, r1, r3
 8009112:	43d9      	mvns	r1, r3
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009118:	4313      	orrs	r3, r2
}
 800911a:	4618      	mov	r0, r3
 800911c:	3724      	adds	r7, #36	; 0x24
 800911e:	46bd      	mov	sp, r7
 8009120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009124:	4770      	bx	lr
	...

08009128 <SysTick_Config>:
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b082      	sub	sp, #8
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	3b01      	subs	r3, #1
 8009134:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009138:	d301      	bcc.n	800913e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800913a:	2301      	movs	r3, #1
 800913c:	e00f      	b.n	800915e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800913e:	4a0a      	ldr	r2, [pc, #40]	; (8009168 <SysTick_Config+0x40>)
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	3b01      	subs	r3, #1
 8009144:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009146:	210f      	movs	r1, #15
 8009148:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800914c:	f7ff ff8e 	bl	800906c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009150:	4b05      	ldr	r3, [pc, #20]	; (8009168 <SysTick_Config+0x40>)
 8009152:	2200      	movs	r2, #0
 8009154:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009156:	4b04      	ldr	r3, [pc, #16]	; (8009168 <SysTick_Config+0x40>)
 8009158:	2207      	movs	r2, #7
 800915a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800915c:	2300      	movs	r3, #0
}
 800915e:	4618      	mov	r0, r3
 8009160:	3708      	adds	r7, #8
 8009162:	46bd      	mov	sp, r7
 8009164:	bd80      	pop	{r7, pc}
 8009166:	bf00      	nop
 8009168:	e000e010 	.word	0xe000e010

0800916c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800916c:	b580      	push	{r7, lr}
 800916e:	b082      	sub	sp, #8
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009174:	6878      	ldr	r0, [r7, #4]
 8009176:	f7ff ff29 	bl	8008fcc <__NVIC_SetPriorityGrouping>
}
 800917a:	bf00      	nop
 800917c:	3708      	adds	r7, #8
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b086      	sub	sp, #24
 8009186:	af00      	add	r7, sp, #0
 8009188:	4603      	mov	r3, r0
 800918a:	60b9      	str	r1, [r7, #8]
 800918c:	607a      	str	r2, [r7, #4]
 800918e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009190:	f7ff ff40 	bl	8009014 <__NVIC_GetPriorityGrouping>
 8009194:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009196:	687a      	ldr	r2, [r7, #4]
 8009198:	68b9      	ldr	r1, [r7, #8]
 800919a:	6978      	ldr	r0, [r7, #20]
 800919c:	f7ff ff90 	bl	80090c0 <NVIC_EncodePriority>
 80091a0:	4602      	mov	r2, r0
 80091a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80091a6:	4611      	mov	r1, r2
 80091a8:	4618      	mov	r0, r3
 80091aa:	f7ff ff5f 	bl	800906c <__NVIC_SetPriority>
}
 80091ae:	bf00      	nop
 80091b0:	3718      	adds	r7, #24
 80091b2:	46bd      	mov	sp, r7
 80091b4:	bd80      	pop	{r7, pc}

080091b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80091b6:	b580      	push	{r7, lr}
 80091b8:	b082      	sub	sp, #8
 80091ba:	af00      	add	r7, sp, #0
 80091bc:	4603      	mov	r3, r0
 80091be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80091c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091c4:	4618      	mov	r0, r3
 80091c6:	f7ff ff33 	bl	8009030 <__NVIC_EnableIRQ>
}
 80091ca:	bf00      	nop
 80091cc:	3708      	adds	r7, #8
 80091ce:	46bd      	mov	sp, r7
 80091d0:	bd80      	pop	{r7, pc}

080091d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80091d2:	b580      	push	{r7, lr}
 80091d4:	b082      	sub	sp, #8
 80091d6:	af00      	add	r7, sp, #0
 80091d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80091da:	6878      	ldr	r0, [r7, #4]
 80091dc:	f7ff ffa4 	bl	8009128 <SysTick_Config>
 80091e0:	4603      	mov	r3, r0
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b082      	sub	sp, #8
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d101      	bne.n	80091fc <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 80091f8:	2301      	movs	r3, #1
 80091fa:	e014      	b.n	8009226 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	791b      	ldrb	r3, [r3, #4]
 8009200:	b2db      	uxtb	r3, r3
 8009202:	2b00      	cmp	r3, #0
 8009204:	d105      	bne.n	8009212 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	2200      	movs	r2, #0
 800920a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800920c:	6878      	ldr	r0, [r7, #4]
 800920e:	f7fc ff25 	bl	800605c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	2202      	movs	r2, #2
 8009216:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2200      	movs	r2, #0
 800921c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2201      	movs	r2, #1
 8009222:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3708      	adds	r7, #8
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}

0800922e <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800922e:	b580      	push	{r7, lr}
 8009230:	b082      	sub	sp, #8
 8009232:	af00      	add	r7, sp, #0
 8009234:	6078      	str	r0, [r7, #4]
 8009236:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	795b      	ldrb	r3, [r3, #5]
 800923c:	2b01      	cmp	r3, #1
 800923e:	d101      	bne.n	8009244 <HAL_DAC_Start+0x16>
 8009240:	2302      	movs	r3, #2
 8009242:	e043      	b.n	80092cc <HAL_DAC_Start+0x9e>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	2201      	movs	r2, #1
 8009248:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	2202      	movs	r2, #2
 800924e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	6819      	ldr	r1, [r3, #0]
 8009256:	683b      	ldr	r3, [r7, #0]
 8009258:	f003 0310 	and.w	r3, r3, #16
 800925c:	2201      	movs	r2, #1
 800925e:	409a      	lsls	r2, r3
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	430a      	orrs	r2, r1
 8009266:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 8009268:	2001      	movs	r0, #1
 800926a:	f7fe fb4d 	bl	8007908 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d10f      	bne.n	8009294 <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800927e:	2b02      	cmp	r3, #2
 8009280:	d11d      	bne.n	80092be <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	685a      	ldr	r2, [r3, #4]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f042 0201 	orr.w	r2, r2, #1
 8009290:	605a      	str	r2, [r3, #4]
 8009292:	e014      	b.n	80092be <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800929e:	683b      	ldr	r3, [r7, #0]
 80092a0:	f003 0310 	and.w	r3, r3, #16
 80092a4:	2102      	movs	r1, #2
 80092a6:	fa01 f303 	lsl.w	r3, r1, r3
 80092aa:	429a      	cmp	r2, r3
 80092ac:	d107      	bne.n	80092be <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	685a      	ldr	r2, [r3, #4]
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	681b      	ldr	r3, [r3, #0]
 80092b8:	f042 0202 	orr.w	r2, r2, #2
 80092bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	2201      	movs	r2, #1
 80092c2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80092ca:	2300      	movs	r3, #0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b086      	sub	sp, #24
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	60b9      	str	r1, [r7, #8]
 80092de:	607a      	str	r2, [r7, #4]
 80092e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80092e2:	2300      	movs	r3, #0
 80092e4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	795b      	ldrb	r3, [r3, #5]
 80092ea:	2b01      	cmp	r3, #1
 80092ec:	d101      	bne.n	80092f2 <HAL_DAC_Start_DMA+0x1e>
 80092ee:	2302      	movs	r3, #2
 80092f0:	e0a1      	b.n	8009436 <HAL_DAC_Start_DMA+0x162>
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	2201      	movs	r2, #1
 80092f6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	2202      	movs	r2, #2
 80092fc:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	2b00      	cmp	r3, #0
 8009302:	d12a      	bne.n	800935a <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	689b      	ldr	r3, [r3, #8]
 8009308:	4a4d      	ldr	r2, [pc, #308]	; (8009440 <HAL_DAC_Start_DMA+0x16c>)
 800930a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	689b      	ldr	r3, [r3, #8]
 8009310:	4a4c      	ldr	r2, [pc, #304]	; (8009444 <HAL_DAC_Start_DMA+0x170>)
 8009312:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	4a4b      	ldr	r2, [pc, #300]	; (8009448 <HAL_DAC_Start_DMA+0x174>)
 800931a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	681a      	ldr	r2, [r3, #0]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800932a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800932c:	6a3b      	ldr	r3, [r7, #32]
 800932e:	2b04      	cmp	r3, #4
 8009330:	d009      	beq.n	8009346 <HAL_DAC_Start_DMA+0x72>
 8009332:	2b08      	cmp	r3, #8
 8009334:	d00c      	beq.n	8009350 <HAL_DAC_Start_DMA+0x7c>
 8009336:	2b00      	cmp	r3, #0
 8009338:	d000      	beq.n	800933c <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800933a:	e039      	b.n	80093b0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	3308      	adds	r3, #8
 8009342:	613b      	str	r3, [r7, #16]
        break;
 8009344:	e034      	b.n	80093b0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	330c      	adds	r3, #12
 800934c:	613b      	str	r3, [r7, #16]
        break;
 800934e:	e02f      	b.n	80093b0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	3310      	adds	r3, #16
 8009356:	613b      	str	r3, [r7, #16]
        break;
 8009358:	e02a      	b.n	80093b0 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	68db      	ldr	r3, [r3, #12]
 800935e:	4a3b      	ldr	r2, [pc, #236]	; (800944c <HAL_DAC_Start_DMA+0x178>)
 8009360:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	68db      	ldr	r3, [r3, #12]
 8009366:	4a3a      	ldr	r2, [pc, #232]	; (8009450 <HAL_DAC_Start_DMA+0x17c>)
 8009368:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	68db      	ldr	r3, [r3, #12]
 800936e:	4a39      	ldr	r2, [pc, #228]	; (8009454 <HAL_DAC_Start_DMA+0x180>)
 8009370:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	681a      	ldr	r2, [r3, #0]
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8009380:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8009382:	6a3b      	ldr	r3, [r7, #32]
 8009384:	2b04      	cmp	r3, #4
 8009386:	d009      	beq.n	800939c <HAL_DAC_Start_DMA+0xc8>
 8009388:	2b08      	cmp	r3, #8
 800938a:	d00c      	beq.n	80093a6 <HAL_DAC_Start_DMA+0xd2>
 800938c:	2b00      	cmp	r3, #0
 800938e:	d000      	beq.n	8009392 <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8009390:	e00e      	b.n	80093b0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	3314      	adds	r3, #20
 8009398:	613b      	str	r3, [r7, #16]
        break;
 800939a:	e009      	b.n	80093b0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	3318      	adds	r3, #24
 80093a2:	613b      	str	r3, [r7, #16]
        break;
 80093a4:	e004      	b.n	80093b0 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	331c      	adds	r3, #28
 80093ac:	613b      	str	r3, [r7, #16]
        break;
 80093ae:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	2b00      	cmp	r3, #0
 80093b4:	d111      	bne.n	80093da <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	681a      	ldr	r2, [r3, #0]
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80093c4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	6898      	ldr	r0, [r3, #8]
 80093ca:	6879      	ldr	r1, [r7, #4]
 80093cc:	683b      	ldr	r3, [r7, #0]
 80093ce:	693a      	ldr	r2, [r7, #16]
 80093d0:	f000 fbc8 	bl	8009b64 <HAL_DMA_Start_IT>
 80093d4:	4603      	mov	r3, r0
 80093d6:	75fb      	strb	r3, [r7, #23]
 80093d8:	e010      	b.n	80093fc <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80093da:	68fb      	ldr	r3, [r7, #12]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80093e8:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	68d8      	ldr	r0, [r3, #12]
 80093ee:	6879      	ldr	r1, [r7, #4]
 80093f0:	683b      	ldr	r3, [r7, #0]
 80093f2:	693a      	ldr	r2, [r7, #16]
 80093f4:	f000 fbb6 	bl	8009b64 <HAL_DMA_Start_IT>
 80093f8:	4603      	mov	r3, r0
 80093fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2200      	movs	r2, #0
 8009400:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8009402:	7dfb      	ldrb	r3, [r7, #23]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d10f      	bne.n	8009428 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	6819      	ldr	r1, [r3, #0]
 800940e:	68bb      	ldr	r3, [r7, #8]
 8009410:	f003 0310 	and.w	r3, r3, #16
 8009414:	2201      	movs	r2, #1
 8009416:	409a      	lsls	r2, r3
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	430a      	orrs	r2, r1
 800941e:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8009420:	2001      	movs	r0, #1
 8009422:	f7fe fa71 	bl	8007908 <HAL_Delay>
 8009426:	e005      	b.n	8009434 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	691b      	ldr	r3, [r3, #16]
 800942c:	f043 0204 	orr.w	r2, r3, #4
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8009434:	7dfb      	ldrb	r3, [r7, #23]
}
 8009436:	4618      	mov	r0, r3
 8009438:	3718      	adds	r7, #24
 800943a:	46bd      	mov	sp, r7
 800943c:	bd80      	pop	{r7, pc}
 800943e:	bf00      	nop
 8009440:	08009901 	.word	0x08009901
 8009444:	08009923 	.word	0x08009923
 8009448:	0800993f 	.word	0x0800993f
 800944c:	080099a9 	.word	0x080099a9
 8009450:	080099cb 	.word	0x080099cb
 8009454:	080099e7 	.word	0x080099e7

08009458 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b084      	sub	sp, #16
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	6819      	ldr	r1, [r3, #0]
 8009468:	683b      	ldr	r3, [r7, #0]
 800946a:	f003 0310 	and.w	r3, r3, #16
 800946e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009472:	fa02 f303 	lsl.w	r3, r2, r3
 8009476:	43da      	mvns	r2, r3
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	400a      	ands	r2, r1
 800947e:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	6819      	ldr	r1, [r3, #0]
 8009486:	683b      	ldr	r3, [r7, #0]
 8009488:	f003 0310 	and.w	r3, r3, #16
 800948c:	2201      	movs	r2, #1
 800948e:	fa02 f303 	lsl.w	r3, r2, r3
 8009492:	43da      	mvns	r2, r3
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	400a      	ands	r2, r1
 800949a:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 800949c:	2001      	movs	r0, #1
 800949e:	f7fe fa33 	bl	8007908 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d10f      	bne.n	80094c8 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	689b      	ldr	r3, [r3, #8]
 80094ac:	4618      	mov	r0, r3
 80094ae:	f000 fbd4 	bl	8009c5a <HAL_DMA_Abort>
 80094b2:	4603      	mov	r3, r0
 80094b4:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	681a      	ldr	r2, [r3, #0]
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80094c4:	601a      	str	r2, [r3, #0]
 80094c6:	e00e      	b.n	80094e6 <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	68db      	ldr	r3, [r3, #12]
 80094cc:	4618      	mov	r0, r3
 80094ce:	f000 fbc4 	bl	8009c5a <HAL_DMA_Abort>
 80094d2:	4603      	mov	r3, r0
 80094d4:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	681a      	ldr	r2, [r3, #0]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80094e4:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 80094e6:	7bfb      	ldrb	r3, [r7, #15]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d003      	beq.n	80094f4 <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2204      	movs	r2, #4
 80094f0:	711a      	strb	r2, [r3, #4]
 80094f2:	e002      	b.n	80094fa <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2201      	movs	r2, #1
 80094f8:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 80094fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3710      	adds	r7, #16
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8009504:	b480      	push	{r7}
 8009506:	b087      	sub	sp, #28
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	607a      	str	r2, [r7, #4]
 8009510:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8009512:	2300      	movs	r3, #0
 8009514:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	2b00      	cmp	r3, #0
 8009526:	d105      	bne.n	8009534 <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8009528:	697a      	ldr	r2, [r7, #20]
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	4413      	add	r3, r2
 800952e:	3308      	adds	r3, #8
 8009530:	617b      	str	r3, [r7, #20]
 8009532:	e004      	b.n	800953e <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8009534:	697a      	ldr	r2, [r7, #20]
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	4413      	add	r3, r2
 800953a:	3314      	adds	r3, #20
 800953c:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	461a      	mov	r2, r3
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8009546:	2300      	movs	r3, #0
}
 8009548:	4618      	mov	r0, r3
 800954a:	371c      	adds	r7, #28
 800954c:	46bd      	mov	sp, r7
 800954e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009552:	4770      	bx	lr

08009554 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009554:	b480      	push	{r7}
 8009556:	b083      	sub	sp, #12
 8009558:	af00      	add	r7, sp, #0
 800955a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800955c:	bf00      	nop
 800955e:	370c      	adds	r7, #12
 8009560:	46bd      	mov	sp, r7
 8009562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009566:	4770      	bx	lr

08009568 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8009570:	bf00      	nop
 8009572:	370c      	adds	r7, #12
 8009574:	46bd      	mov	sp, r7
 8009576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957a:	4770      	bx	lr

0800957c <HAL_DAC_GetValue>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval The selected DAC channel data output value.
  */
uint32_t HAL_DAC_GetValue(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800957c:	b480      	push	{r7}
 800957e:	b083      	sub	sp, #12
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
 8009584:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Returns the DAC channel data output register value */
  if (Channel == DAC_CHANNEL_1)
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d103      	bne.n	8009594 <HAL_DAC_GetValue+0x18>
  {
    return hdac->Instance->DOR1;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009592:	e002      	b.n	800959a <HAL_DAC_GetValue+0x1e>
  }
  else
  {
    return hdac->Instance->DOR2;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  }
}
 800959a:	4618      	mov	r0, r3
 800959c:	370c      	adds	r7, #12
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr
	...

080095a8 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b08a      	sub	sp, #40	; 0x28
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	60f8      	str	r0, [r7, #12]
 80095b0:	60b9      	str	r1, [r7, #8]
 80095b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80095b4:	2300      	movs	r3, #0
 80095b6:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	795b      	ldrb	r3, [r3, #5]
 80095bc:	2b01      	cmp	r3, #1
 80095be:	d101      	bne.n	80095c4 <HAL_DAC_ConfigChannel+0x1c>
 80095c0:	2302      	movs	r3, #2
 80095c2:	e194      	b.n	80098ee <HAL_DAC_ConfigChannel+0x346>
 80095c4:	68fb      	ldr	r3, [r7, #12]
 80095c6:	2201      	movs	r2, #1
 80095c8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	2202      	movs	r2, #2
 80095ce:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	689b      	ldr	r3, [r3, #8]
 80095d4:	2b04      	cmp	r3, #4
 80095d6:	d174      	bne.n	80096c2 <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d137      	bne.n	800964e <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 80095de:	f7fe f987 	bl	80078f0 <HAL_GetTick>
 80095e2:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80095e4:	e011      	b.n	800960a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80095e6:	f7fe f983 	bl	80078f0 <HAL_GetTick>
 80095ea:	4602      	mov	r2, r0
 80095ec:	69fb      	ldr	r3, [r7, #28]
 80095ee:	1ad3      	subs	r3, r2, r3
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d90a      	bls.n	800960a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	691b      	ldr	r3, [r3, #16]
 80095f8:	f043 0208 	orr.w	r2, r3, #8
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	2203      	movs	r2, #3
 8009604:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8009606:	2303      	movs	r3, #3
 8009608:	e171      	b.n	80098ee <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009614:	2b00      	cmp	r3, #0
 8009616:	d1e6      	bne.n	80095e6 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8009618:	2001      	movs	r0, #1
 800961a:	f7fe f975 	bl	8007908 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	68ba      	ldr	r2, [r7, #8]
 8009624:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009626:	641a      	str	r2, [r3, #64]	; 0x40
 8009628:	e01e      	b.n	8009668 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800962a:	f7fe f961 	bl	80078f0 <HAL_GetTick>
 800962e:	4602      	mov	r2, r0
 8009630:	69fb      	ldr	r3, [r7, #28]
 8009632:	1ad3      	subs	r3, r2, r3
 8009634:	2b01      	cmp	r3, #1
 8009636:	d90a      	bls.n	800964e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	691b      	ldr	r3, [r3, #16]
 800963c:	f043 0208 	orr.w	r2, r3, #8
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2203      	movs	r2, #3
 8009648:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800964a:	2303      	movs	r3, #3
 800964c:	e14f      	b.n	80098ee <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009654:	2b00      	cmp	r3, #0
 8009656:	dbe8      	blt.n	800962a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8009658:	2001      	movs	r0, #1
 800965a:	f7fe f955 	bl	8007908 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	68ba      	ldr	r2, [r7, #8]
 8009664:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009666:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f003 0310 	and.w	r3, r3, #16
 8009674:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8009678:	fa01 f303 	lsl.w	r3, r1, r3
 800967c:	43db      	mvns	r3, r3
 800967e:	ea02 0103 	and.w	r1, r2, r3
 8009682:	68bb      	ldr	r3, [r7, #8]
 8009684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f003 0310 	and.w	r3, r3, #16
 800968c:	409a      	lsls	r2, r3
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	430a      	orrs	r2, r1
 8009694:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f003 0310 	and.w	r3, r3, #16
 80096a2:	21ff      	movs	r1, #255	; 0xff
 80096a4:	fa01 f303 	lsl.w	r3, r1, r3
 80096a8:	43db      	mvns	r3, r3
 80096aa:	ea02 0103 	and.w	r1, r2, r3
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	f003 0310 	and.w	r3, r3, #16
 80096b8:	409a      	lsls	r2, r3
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	430a      	orrs	r2, r1
 80096c0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	69db      	ldr	r3, [r3, #28]
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d11d      	bne.n	8009706 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f003 0310 	and.w	r3, r3, #16
 80096d8:	221f      	movs	r2, #31
 80096da:	fa02 f303 	lsl.w	r3, r2, r3
 80096de:	43db      	mvns	r3, r3
 80096e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096e2:	4013      	ands	r3, r2
 80096e4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80096e6:	68bb      	ldr	r3, [r7, #8]
 80096e8:	6a1b      	ldr	r3, [r3, #32]
 80096ea:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f003 0310 	and.w	r3, r3, #16
 80096f2:	69ba      	ldr	r2, [r7, #24]
 80096f4:	fa02 f303 	lsl.w	r3, r2, r3
 80096f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096fa:	4313      	orrs	r3, r2
 80096fc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009704:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800970c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f003 0310 	and.w	r3, r3, #16
 8009714:	2207      	movs	r2, #7
 8009716:	fa02 f303 	lsl.w	r3, r2, r3
 800971a:	43db      	mvns	r3, r3
 800971c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800971e:	4013      	ands	r3, r2
 8009720:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 8009722:	68bb      	ldr	r3, [r7, #8]
 8009724:	699b      	ldr	r3, [r3, #24]
 8009726:	f003 0301 	and.w	r3, r3, #1
 800972a:	2b00      	cmp	r3, #0
 800972c:	d002      	beq.n	8009734 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800972e:	2300      	movs	r3, #0
 8009730:	623b      	str	r3, [r7, #32]
 8009732:	e011      	b.n	8009758 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	699b      	ldr	r3, [r3, #24]
 8009738:	f003 0302 	and.w	r3, r3, #2
 800973c:	2b00      	cmp	r3, #0
 800973e:	d002      	beq.n	8009746 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8009740:	2301      	movs	r3, #1
 8009742:	623b      	str	r3, [r7, #32]
 8009744:	e008      	b.n	8009758 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	695b      	ldr	r3, [r3, #20]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d102      	bne.n	8009754 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800974e:	2301      	movs	r3, #1
 8009750:	623b      	str	r3, [r7, #32]
 8009752:	e001      	b.n	8009758 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8009754:	2300      	movs	r3, #0
 8009756:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	689a      	ldr	r2, [r3, #8]
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	695b      	ldr	r3, [r3, #20]
 8009760:	4313      	orrs	r3, r2
 8009762:	6a3a      	ldr	r2, [r7, #32]
 8009764:	4313      	orrs	r3, r2
 8009766:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f003 0310 	and.w	r3, r3, #16
 800976e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009772:	fa02 f303 	lsl.w	r3, r2, r3
 8009776:	43db      	mvns	r3, r3
 8009778:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800977a:	4013      	ands	r3, r2
 800977c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	791b      	ldrb	r3, [r3, #4]
 8009782:	2b01      	cmp	r3, #1
 8009784:	d102      	bne.n	800978c <HAL_DAC_ConfigChannel+0x1e4>
 8009786:	f44f 7380 	mov.w	r3, #256	; 0x100
 800978a:	e000      	b.n	800978e <HAL_DAC_ConfigChannel+0x1e6>
 800978c:	2300      	movs	r3, #0
 800978e:	69ba      	ldr	r2, [r7, #24]
 8009790:	4313      	orrs	r3, r2
 8009792:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	f003 0310 	and.w	r3, r3, #16
 800979a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800979e:	fa02 f303 	lsl.w	r3, r2, r3
 80097a2:	43db      	mvns	r3, r3
 80097a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097a6:	4013      	ands	r3, r2
 80097a8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	795b      	ldrb	r3, [r3, #5]
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d102      	bne.n	80097b8 <HAL_DAC_ConfigChannel+0x210>
 80097b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80097b6:	e000      	b.n	80097ba <HAL_DAC_ConfigChannel+0x212>
 80097b8:	2300      	movs	r3, #0
 80097ba:	69ba      	ldr	r2, [r7, #24]
 80097bc:	4313      	orrs	r3, r2
 80097be:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80097c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80097c6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2b02      	cmp	r3, #2
 80097ce:	d114      	bne.n	80097fa <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80097d0:	f001 fae0 	bl	800ad94 <HAL_RCC_GetHCLKFreq>
 80097d4:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80097d6:	697b      	ldr	r3, [r7, #20]
 80097d8:	4a47      	ldr	r2, [pc, #284]	; (80098f8 <HAL_DAC_ConfigChannel+0x350>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d904      	bls.n	80097e8 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80097de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097e4:	627b      	str	r3, [r7, #36]	; 0x24
 80097e6:	e00d      	b.n	8009804 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80097e8:	697b      	ldr	r3, [r7, #20]
 80097ea:	4a44      	ldr	r2, [pc, #272]	; (80098fc <HAL_DAC_ConfigChannel+0x354>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d909      	bls.n	8009804 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80097f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80097f6:	627b      	str	r3, [r7, #36]	; 0x24
 80097f8:	e004      	b.n	8009804 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009800:	4313      	orrs	r3, r2
 8009802:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f003 0310 	and.w	r3, r3, #16
 800980a:	69ba      	ldr	r2, [r7, #24]
 800980c:	fa02 f303 	lsl.w	r3, r2, r3
 8009810:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009812:	4313      	orrs	r3, r2
 8009814:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800981c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	6819      	ldr	r1, [r3, #0]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f003 0310 	and.w	r3, r3, #16
 800982a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800982e:	fa02 f303 	lsl.w	r3, r2, r3
 8009832:	43da      	mvns	r2, r3
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	400a      	ands	r2, r1
 800983a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f003 0310 	and.w	r3, r3, #16
 800984a:	f640 72fe 	movw	r2, #4094	; 0xffe
 800984e:	fa02 f303 	lsl.w	r3, r2, r3
 8009852:	43db      	mvns	r3, r3
 8009854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009856:	4013      	ands	r3, r2
 8009858:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	f003 0310 	and.w	r3, r3, #16
 8009866:	69ba      	ldr	r2, [r7, #24]
 8009868:	fa02 f303 	lsl.w	r3, r2, r3
 800986c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800986e:	4313      	orrs	r3, r2
 8009870:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009878:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	6819      	ldr	r1, [r3, #0]
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	f003 0310 	and.w	r3, r3, #16
 8009886:	22c0      	movs	r2, #192	; 0xc0
 8009888:	fa02 f303 	lsl.w	r3, r2, r3
 800988c:	43da      	mvns	r2, r3
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	400a      	ands	r2, r1
 8009894:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	68db      	ldr	r3, [r3, #12]
 800989a:	089b      	lsrs	r3, r3, #2
 800989c:	f003 030f 	and.w	r3, r3, #15
 80098a0:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	691b      	ldr	r3, [r3, #16]
 80098a6:	089b      	lsrs	r3, r3, #2
 80098a8:	021b      	lsls	r3, r3, #8
 80098aa:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80098ae:	69ba      	ldr	r2, [r7, #24]
 80098b0:	4313      	orrs	r3, r2
 80098b2:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	f003 0310 	and.w	r3, r3, #16
 80098c0:	f640 710f 	movw	r1, #3855	; 0xf0f
 80098c4:	fa01 f303 	lsl.w	r3, r1, r3
 80098c8:	43db      	mvns	r3, r3
 80098ca:	ea02 0103 	and.w	r1, r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	f003 0310 	and.w	r3, r3, #16
 80098d4:	69ba      	ldr	r2, [r7, #24]
 80098d6:	409a      	lsls	r2, r3
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	430a      	orrs	r2, r1
 80098de:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	2201      	movs	r2, #1
 80098e4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2200      	movs	r2, #0
 80098ea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80098ec:	2300      	movs	r3, #0
}
 80098ee:	4618      	mov	r0, r3
 80098f0:	3728      	adds	r7, #40	; 0x28
 80098f2:	46bd      	mov	sp, r7
 80098f4:	bd80      	pop	{r7, pc}
 80098f6:	bf00      	nop
 80098f8:	09896800 	.word	0x09896800
 80098fc:	04c4b400 	.word	0x04c4b400

08009900 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b084      	sub	sp, #16
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800990c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800990e:	68f8      	ldr	r0, [r7, #12]
 8009910:	f7ff fe20 	bl	8009554 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2201      	movs	r2, #1
 8009918:	711a      	strb	r2, [r3, #4]
}
 800991a:	bf00      	nop
 800991c:	3710      	adds	r7, #16
 800991e:	46bd      	mov	sp, r7
 8009920:	bd80      	pop	{r7, pc}

08009922 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8009922:	b580      	push	{r7, lr}
 8009924:	b084      	sub	sp, #16
 8009926:	af00      	add	r7, sp, #0
 8009928:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800992e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8009930:	68f8      	ldr	r0, [r7, #12]
 8009932:	f7ff fe19 	bl	8009568 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8009936:	bf00      	nop
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800993e:	b580      	push	{r7, lr}
 8009940:	b084      	sub	sp, #16
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800994a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	691b      	ldr	r3, [r3, #16]
 8009950:	f043 0204 	orr.w	r2, r3, #4
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8009958:	68f8      	ldr	r0, [r7, #12]
 800995a:	f7fd f824 	bl	80069a6 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	2201      	movs	r2, #1
 8009962:	711a      	strb	r2, [r3, #4]
}
 8009964:	bf00      	nop
 8009966:	3710      	adds	r7, #16
 8009968:	46bd      	mov	sp, r7
 800996a:	bd80      	pop	{r7, pc}

0800996c <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800996c:	b480      	push	{r7}
 800996e:	b083      	sub	sp, #12
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8009974:	bf00      	nop
 8009976:	370c      	adds	r7, #12
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009980:	b480      	push	{r7}
 8009982:	b083      	sub	sp, #12
 8009984:	af00      	add	r7, sp, #0
 8009986:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8009988:	bf00      	nop
 800998a:	370c      	adds	r7, #12
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8009994:	b480      	push	{r7}
 8009996:	b083      	sub	sp, #12
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800999c:	bf00      	nop
 800999e:	370c      	adds	r7, #12
 80099a0:	46bd      	mov	sp, r7
 80099a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a6:	4770      	bx	lr

080099a8 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80099a8:	b580      	push	{r7, lr}
 80099aa:	b084      	sub	sp, #16
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099b4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80099b6:	68f8      	ldr	r0, [r7, #12]
 80099b8:	f7ff ffd8 	bl	800996c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	2201      	movs	r2, #1
 80099c0:	711a      	strb	r2, [r3, #4]
}
 80099c2:	bf00      	nop
 80099c4:	3710      	adds	r7, #16
 80099c6:	46bd      	mov	sp, r7
 80099c8:	bd80      	pop	{r7, pc}

080099ca <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80099ca:	b580      	push	{r7, lr}
 80099cc:	b084      	sub	sp, #16
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099d6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 80099d8:	68f8      	ldr	r0, [r7, #12]
 80099da:	f7ff ffd1 	bl	8009980 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80099de:	bf00      	nop
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b084      	sub	sp, #16
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80099f2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	691b      	ldr	r3, [r3, #16]
 80099f8:	f043 0204 	orr.w	r2, r3, #4
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8009a00:	68f8      	ldr	r0, [r7, #12]
 8009a02:	f7ff ffc7 	bl	8009994 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2201      	movs	r2, #1
 8009a0a:	711a      	strb	r2, [r3, #4]
}
 8009a0c:	bf00      	nop
 8009a0e:	3710      	adds	r7, #16
 8009a10:	46bd      	mov	sp, r7
 8009a12:	bd80      	pop	{r7, pc}

08009a14 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d101      	bne.n	8009a26 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8009a22:	2301      	movs	r3, #1
 8009a24:	e08d      	b.n	8009b42 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	461a      	mov	r2, r3
 8009a2c:	4b47      	ldr	r3, [pc, #284]	; (8009b4c <HAL_DMA_Init+0x138>)
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d80f      	bhi.n	8009a52 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	461a      	mov	r2, r3
 8009a38:	4b45      	ldr	r3, [pc, #276]	; (8009b50 <HAL_DMA_Init+0x13c>)
 8009a3a:	4413      	add	r3, r2
 8009a3c:	4a45      	ldr	r2, [pc, #276]	; (8009b54 <HAL_DMA_Init+0x140>)
 8009a3e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a42:	091b      	lsrs	r3, r3, #4
 8009a44:	009a      	lsls	r2, r3, #2
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	4a42      	ldr	r2, [pc, #264]	; (8009b58 <HAL_DMA_Init+0x144>)
 8009a4e:	641a      	str	r2, [r3, #64]	; 0x40
 8009a50:	e00e      	b.n	8009a70 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	461a      	mov	r2, r3
 8009a58:	4b40      	ldr	r3, [pc, #256]	; (8009b5c <HAL_DMA_Init+0x148>)
 8009a5a:	4413      	add	r3, r2
 8009a5c:	4a3d      	ldr	r2, [pc, #244]	; (8009b54 <HAL_DMA_Init+0x140>)
 8009a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8009a62:	091b      	lsrs	r3, r3, #4
 8009a64:	009a      	lsls	r2, r3, #2
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4a3c      	ldr	r2, [pc, #240]	; (8009b60 <HAL_DMA_Init+0x14c>)
 8009a6e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2202      	movs	r2, #2
 8009a74:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8009a86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a8a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8009a94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	691b      	ldr	r3, [r3, #16]
 8009a9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009aa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	699b      	ldr	r3, [r3, #24]
 8009aa6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009aac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6a1b      	ldr	r3, [r3, #32]
 8009ab2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009ac2:	6878      	ldr	r0, [r7, #4]
 8009ac4:	f000 fa10 	bl	8009ee8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	689b      	ldr	r3, [r3, #8]
 8009acc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009ad0:	d102      	bne.n	8009ad8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	2200      	movs	r2, #0
 8009ad6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	685a      	ldr	r2, [r3, #4]
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009ae0:	b2d2      	uxtb	r2, r2
 8009ae2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009ae8:	687a      	ldr	r2, [r7, #4]
 8009aea:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009aec:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	685b      	ldr	r3, [r3, #4]
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d010      	beq.n	8009b18 <HAL_DMA_Init+0x104>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	2b04      	cmp	r3, #4
 8009afc:	d80c      	bhi.n	8009b18 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	f000 fa30 	bl	8009f64 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b08:	2200      	movs	r2, #0
 8009b0a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009b10:	687a      	ldr	r2, [r7, #4]
 8009b12:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009b14:	605a      	str	r2, [r3, #4]
 8009b16:	e008      	b.n	8009b2a <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2200      	movs	r2, #0
 8009b22:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2200      	movs	r2, #0
 8009b2e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	2201      	movs	r2, #1
 8009b34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8009b40:	2300      	movs	r3, #0
}
 8009b42:	4618      	mov	r0, r3
 8009b44:	3710      	adds	r7, #16
 8009b46:	46bd      	mov	sp, r7
 8009b48:	bd80      	pop	{r7, pc}
 8009b4a:	bf00      	nop
 8009b4c:	40020407 	.word	0x40020407
 8009b50:	bffdfff8 	.word	0xbffdfff8
 8009b54:	cccccccd 	.word	0xcccccccd
 8009b58:	40020000 	.word	0x40020000
 8009b5c:	bffdfbf8 	.word	0xbffdfbf8
 8009b60:	40020400 	.word	0x40020400

08009b64 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b086      	sub	sp, #24
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
 8009b70:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b72:	2300      	movs	r3, #0
 8009b74:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009b7c:	2b01      	cmp	r3, #1
 8009b7e:	d101      	bne.n	8009b84 <HAL_DMA_Start_IT+0x20>
 8009b80:	2302      	movs	r3, #2
 8009b82:	e066      	b.n	8009c52 <HAL_DMA_Start_IT+0xee>
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2201      	movs	r2, #1
 8009b88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009b92:	b2db      	uxtb	r3, r3
 8009b94:	2b01      	cmp	r3, #1
 8009b96:	d155      	bne.n	8009c44 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2202      	movs	r2, #2
 8009b9c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f022 0201 	bic.w	r2, r2, #1
 8009bb4:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009bb6:	683b      	ldr	r3, [r7, #0]
 8009bb8:	687a      	ldr	r2, [r7, #4]
 8009bba:	68b9      	ldr	r1, [r7, #8]
 8009bbc:	68f8      	ldr	r0, [r7, #12]
 8009bbe:	f000 f954 	bl	8009e6a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d008      	beq.n	8009bdc <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	681a      	ldr	r2, [r3, #0]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f042 020e 	orr.w	r2, r2, #14
 8009bd8:	601a      	str	r2, [r3, #0]
 8009bda:	e00f      	b.n	8009bfc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	f022 0204 	bic.w	r2, r2, #4
 8009bea:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	681a      	ldr	r2, [r3, #0]
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	f042 020a 	orr.w	r2, r2, #10
 8009bfa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d007      	beq.n	8009c1a <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c0e:	681a      	ldr	r2, [r3, #0]
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c18:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d007      	beq.n	8009c32 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009c2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c30:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	f042 0201 	orr.w	r2, r2, #1
 8009c40:	601a      	str	r2, [r3, #0]
 8009c42:	e005      	b.n	8009c50 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2200      	movs	r2, #0
 8009c48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8009c4c:	2302      	movs	r3, #2
 8009c4e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8009c50:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3718      	adds	r7, #24
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}

08009c5a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009c5a:	b480      	push	{r7}
 8009c5c:	b085      	sub	sp, #20
 8009c5e:	af00      	add	r7, sp, #0
 8009c60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c62:	2300      	movs	r3, #0
 8009c64:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	2b02      	cmp	r3, #2
 8009c70:	d005      	beq.n	8009c7e <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2204      	movs	r2, #4
 8009c76:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8009c78:	2301      	movs	r3, #1
 8009c7a:	73fb      	strb	r3, [r7, #15]
 8009c7c:	e037      	b.n	8009cee <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	681a      	ldr	r2, [r3, #0]
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f022 020e 	bic.w	r2, r2, #14
 8009c8c:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c92:	681a      	ldr	r2, [r3, #0]
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009c98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009c9c:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f022 0201 	bic.w	r2, r2, #1
 8009cac:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009cb2:	f003 021f 	and.w	r2, r3, #31
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cba:	2101      	movs	r1, #1
 8009cbc:	fa01 f202 	lsl.w	r2, r1, r2
 8009cc0:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009cca:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d00c      	beq.n	8009cee <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cd8:	681a      	ldr	r2, [r3, #0]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ce2:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ce8:	687a      	ldr	r2, [r7, #4]
 8009cea:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009cec:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8009cfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3714      	adds	r7, #20
 8009d04:	46bd      	mov	sp, r7
 8009d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d0a:	4770      	bx	lr

08009d0c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d28:	f003 031f 	and.w	r3, r3, #31
 8009d2c:	2204      	movs	r2, #4
 8009d2e:	409a      	lsls	r2, r3
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	4013      	ands	r3, r2
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d026      	beq.n	8009d86 <HAL_DMA_IRQHandler+0x7a>
 8009d38:	68bb      	ldr	r3, [r7, #8]
 8009d3a:	f003 0304 	and.w	r3, r3, #4
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d021      	beq.n	8009d86 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f003 0320 	and.w	r3, r3, #32
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d107      	bne.n	8009d60 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	681a      	ldr	r2, [r3, #0]
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	f022 0204 	bic.w	r2, r2, #4
 8009d5e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d64:	f003 021f 	and.w	r2, r3, #31
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d6c:	2104      	movs	r1, #4
 8009d6e:	fa01 f202 	lsl.w	r2, r1, r2
 8009d72:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d071      	beq.n	8009e60 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8009d84:	e06c      	b.n	8009e60 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009d8a:	f003 031f 	and.w	r3, r3, #31
 8009d8e:	2202      	movs	r2, #2
 8009d90:	409a      	lsls	r2, r3
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	4013      	ands	r3, r2
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d02e      	beq.n	8009df8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8009d9a:	68bb      	ldr	r3, [r7, #8]
 8009d9c:	f003 0302 	and.w	r3, r3, #2
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d029      	beq.n	8009df8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f003 0320 	and.w	r3, r3, #32
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d10b      	bne.n	8009dca <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f022 020a 	bic.w	r2, r2, #10
 8009dc0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	2201      	movs	r2, #1
 8009dc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dce:	f003 021f 	and.w	r2, r3, #31
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dd6:	2102      	movs	r1, #2
 8009dd8:	fa01 f202 	lsl.w	r2, r1, r2
 8009ddc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	d038      	beq.n	8009e60 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8009df6:	e033      	b.n	8009e60 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009dfc:	f003 031f 	and.w	r3, r3, #31
 8009e00:	2208      	movs	r2, #8
 8009e02:	409a      	lsls	r2, r3
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	4013      	ands	r3, r2
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d02a      	beq.n	8009e62 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8009e0c:	68bb      	ldr	r3, [r7, #8]
 8009e0e:	f003 0308 	and.w	r3, r3, #8
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d025      	beq.n	8009e62 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	f022 020e 	bic.w	r2, r2, #14
 8009e24:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e2a:	f003 021f 	and.w	r2, r3, #31
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e32:	2101      	movs	r1, #1
 8009e34:	fa01 f202 	lsl.w	r2, r1, r2
 8009e38:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2201      	movs	r2, #1
 8009e3e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2201      	movs	r2, #1
 8009e44:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	2200      	movs	r2, #0
 8009e4c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d004      	beq.n	8009e62 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e5c:	6878      	ldr	r0, [r7, #4]
 8009e5e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009e60:	bf00      	nop
 8009e62:	bf00      	nop
}
 8009e64:	3710      	adds	r7, #16
 8009e66:	46bd      	mov	sp, r7
 8009e68:	bd80      	pop	{r7, pc}

08009e6a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009e6a:	b480      	push	{r7}
 8009e6c:	b085      	sub	sp, #20
 8009e6e:	af00      	add	r7, sp, #0
 8009e70:	60f8      	str	r0, [r7, #12]
 8009e72:	60b9      	str	r1, [r7, #8]
 8009e74:	607a      	str	r2, [r7, #4]
 8009e76:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8009e80:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d004      	beq.n	8009e94 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e8e:	68fa      	ldr	r2, [r7, #12]
 8009e90:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8009e92:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009e98:	f003 021f 	and.w	r2, r3, #31
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea0:	2101      	movs	r1, #1
 8009ea2:	fa01 f202 	lsl.w	r2, r1, r2
 8009ea6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	683a      	ldr	r2, [r7, #0]
 8009eae:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	2b10      	cmp	r3, #16
 8009eb6:	d108      	bne.n	8009eca <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	687a      	ldr	r2, [r7, #4]
 8009ebe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	68ba      	ldr	r2, [r7, #8]
 8009ec6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009ec8:	e007      	b.n	8009eda <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	68ba      	ldr	r2, [r7, #8]
 8009ed0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	687a      	ldr	r2, [r7, #4]
 8009ed8:	60da      	str	r2, [r3, #12]
}
 8009eda:	bf00      	nop
 8009edc:	3714      	adds	r7, #20
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr
	...

08009ee8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b087      	sub	sp, #28
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	4b16      	ldr	r3, [pc, #88]	; (8009f50 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8009ef8:	429a      	cmp	r2, r3
 8009efa:	d802      	bhi.n	8009f02 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8009efc:	4b15      	ldr	r3, [pc, #84]	; (8009f54 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8009efe:	617b      	str	r3, [r7, #20]
 8009f00:	e001      	b.n	8009f06 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8009f02:	4b15      	ldr	r3, [pc, #84]	; (8009f58 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8009f04:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8009f06:	697b      	ldr	r3, [r7, #20]
 8009f08:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	b2db      	uxtb	r3, r3
 8009f10:	3b08      	subs	r3, #8
 8009f12:	4a12      	ldr	r2, [pc, #72]	; (8009f5c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8009f14:	fba2 2303 	umull	r2, r3, r2, r3
 8009f18:	091b      	lsrs	r3, r3, #4
 8009f1a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009f20:	089b      	lsrs	r3, r3, #2
 8009f22:	009a      	lsls	r2, r3, #2
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	4413      	add	r3, r2
 8009f28:	461a      	mov	r2, r3
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	4a0b      	ldr	r2, [pc, #44]	; (8009f60 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8009f32:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	f003 031f 	and.w	r3, r3, #31
 8009f3a:	2201      	movs	r2, #1
 8009f3c:	409a      	lsls	r2, r3
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	651a      	str	r2, [r3, #80]	; 0x50
}
 8009f42:	bf00      	nop
 8009f44:	371c      	adds	r7, #28
 8009f46:	46bd      	mov	sp, r7
 8009f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4c:	4770      	bx	lr
 8009f4e:	bf00      	nop
 8009f50:	40020407 	.word	0x40020407
 8009f54:	40020800 	.word	0x40020800
 8009f58:	40020820 	.word	0x40020820
 8009f5c:	cccccccd 	.word	0xcccccccd
 8009f60:	40020880 	.word	0x40020880

08009f64 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b085      	sub	sp, #20
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	b2db      	uxtb	r3, r3
 8009f72:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009f74:	68fa      	ldr	r2, [r7, #12]
 8009f76:	4b0b      	ldr	r3, [pc, #44]	; (8009fa4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8009f78:	4413      	add	r3, r2
 8009f7a:	009b      	lsls	r3, r3, #2
 8009f7c:	461a      	mov	r2, r3
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	4a08      	ldr	r2, [pc, #32]	; (8009fa8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8009f86:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	3b01      	subs	r3, #1
 8009f8c:	f003 031f 	and.w	r3, r3, #31
 8009f90:	2201      	movs	r2, #1
 8009f92:	409a      	lsls	r2, r3
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009f98:	bf00      	nop
 8009f9a:	3714      	adds	r7, #20
 8009f9c:	46bd      	mov	sp, r7
 8009f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fa2:	4770      	bx	lr
 8009fa4:	1000823f 	.word	0x1000823f
 8009fa8:	40020940 	.word	0x40020940

08009fac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b087      	sub	sp, #28
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8009fba:	e15a      	b.n	800a272 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	681a      	ldr	r2, [r3, #0]
 8009fc0:	2101      	movs	r1, #1
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	fa01 f303 	lsl.w	r3, r1, r3
 8009fc8:	4013      	ands	r3, r2
 8009fca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	f000 814c 	beq.w	800a26c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009fd4:	683b      	ldr	r3, [r7, #0]
 8009fd6:	685b      	ldr	r3, [r3, #4]
 8009fd8:	2b01      	cmp	r3, #1
 8009fda:	d00b      	beq.n	8009ff4 <HAL_GPIO_Init+0x48>
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	2b02      	cmp	r3, #2
 8009fe2:	d007      	beq.n	8009ff4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8009fe8:	2b11      	cmp	r3, #17
 8009fea:	d003      	beq.n	8009ff4 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8009fec:	683b      	ldr	r3, [r7, #0]
 8009fee:	685b      	ldr	r3, [r3, #4]
 8009ff0:	2b12      	cmp	r3, #18
 8009ff2:	d130      	bne.n	800a056 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	689b      	ldr	r3, [r3, #8]
 8009ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	005b      	lsls	r3, r3, #1
 8009ffe:	2203      	movs	r2, #3
 800a000:	fa02 f303 	lsl.w	r3, r2, r3
 800a004:	43db      	mvns	r3, r3
 800a006:	693a      	ldr	r2, [r7, #16]
 800a008:	4013      	ands	r3, r2
 800a00a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	68da      	ldr	r2, [r3, #12]
 800a010:	697b      	ldr	r3, [r7, #20]
 800a012:	005b      	lsls	r3, r3, #1
 800a014:	fa02 f303 	lsl.w	r3, r2, r3
 800a018:	693a      	ldr	r2, [r7, #16]
 800a01a:	4313      	orrs	r3, r2
 800a01c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	693a      	ldr	r2, [r7, #16]
 800a022:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	685b      	ldr	r3, [r3, #4]
 800a028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a02a:	2201      	movs	r2, #1
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	fa02 f303 	lsl.w	r3, r2, r3
 800a032:	43db      	mvns	r3, r3
 800a034:	693a      	ldr	r2, [r7, #16]
 800a036:	4013      	ands	r3, r2
 800a038:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a03a:	683b      	ldr	r3, [r7, #0]
 800a03c:	685b      	ldr	r3, [r3, #4]
 800a03e:	091b      	lsrs	r3, r3, #4
 800a040:	f003 0201 	and.w	r2, r3, #1
 800a044:	697b      	ldr	r3, [r7, #20]
 800a046:	fa02 f303 	lsl.w	r3, r2, r3
 800a04a:	693a      	ldr	r2, [r7, #16]
 800a04c:	4313      	orrs	r3, r2
 800a04e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	693a      	ldr	r2, [r7, #16]
 800a054:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a05c:	697b      	ldr	r3, [r7, #20]
 800a05e:	005b      	lsls	r3, r3, #1
 800a060:	2203      	movs	r2, #3
 800a062:	fa02 f303 	lsl.w	r3, r2, r3
 800a066:	43db      	mvns	r3, r3
 800a068:	693a      	ldr	r2, [r7, #16]
 800a06a:	4013      	ands	r3, r2
 800a06c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	689a      	ldr	r2, [r3, #8]
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	005b      	lsls	r3, r3, #1
 800a076:	fa02 f303 	lsl.w	r3, r2, r3
 800a07a:	693a      	ldr	r2, [r7, #16]
 800a07c:	4313      	orrs	r3, r2
 800a07e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	693a      	ldr	r2, [r7, #16]
 800a084:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	685b      	ldr	r3, [r3, #4]
 800a08a:	2b02      	cmp	r3, #2
 800a08c:	d003      	beq.n	800a096 <HAL_GPIO_Init+0xea>
 800a08e:	683b      	ldr	r3, [r7, #0]
 800a090:	685b      	ldr	r3, [r3, #4]
 800a092:	2b12      	cmp	r3, #18
 800a094:	d123      	bne.n	800a0de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	08da      	lsrs	r2, r3, #3
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	3208      	adds	r2, #8
 800a09e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a0a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a0a4:	697b      	ldr	r3, [r7, #20]
 800a0a6:	f003 0307 	and.w	r3, r3, #7
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	220f      	movs	r2, #15
 800a0ae:	fa02 f303 	lsl.w	r3, r2, r3
 800a0b2:	43db      	mvns	r3, r3
 800a0b4:	693a      	ldr	r2, [r7, #16]
 800a0b6:	4013      	ands	r3, r2
 800a0b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a0ba:	683b      	ldr	r3, [r7, #0]
 800a0bc:	691a      	ldr	r2, [r3, #16]
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	f003 0307 	and.w	r3, r3, #7
 800a0c4:	009b      	lsls	r3, r3, #2
 800a0c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ca:	693a      	ldr	r2, [r7, #16]
 800a0cc:	4313      	orrs	r3, r2
 800a0ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a0d0:	697b      	ldr	r3, [r7, #20]
 800a0d2:	08da      	lsrs	r2, r3, #3
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	3208      	adds	r2, #8
 800a0d8:	6939      	ldr	r1, [r7, #16]
 800a0da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a0e4:	697b      	ldr	r3, [r7, #20]
 800a0e6:	005b      	lsls	r3, r3, #1
 800a0e8:	2203      	movs	r2, #3
 800a0ea:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ee:	43db      	mvns	r3, r3
 800a0f0:	693a      	ldr	r2, [r7, #16]
 800a0f2:	4013      	ands	r3, r2
 800a0f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	f003 0203 	and.w	r2, r3, #3
 800a0fe:	697b      	ldr	r3, [r7, #20]
 800a100:	005b      	lsls	r3, r3, #1
 800a102:	fa02 f303 	lsl.w	r3, r2, r3
 800a106:	693a      	ldr	r2, [r7, #16]
 800a108:	4313      	orrs	r3, r2
 800a10a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	693a      	ldr	r2, [r7, #16]
 800a110:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	685b      	ldr	r3, [r3, #4]
 800a116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	f000 80a6 	beq.w	800a26c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a120:	4b5b      	ldr	r3, [pc, #364]	; (800a290 <HAL_GPIO_Init+0x2e4>)
 800a122:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a124:	4a5a      	ldr	r2, [pc, #360]	; (800a290 <HAL_GPIO_Init+0x2e4>)
 800a126:	f043 0301 	orr.w	r3, r3, #1
 800a12a:	6613      	str	r3, [r2, #96]	; 0x60
 800a12c:	4b58      	ldr	r3, [pc, #352]	; (800a290 <HAL_GPIO_Init+0x2e4>)
 800a12e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a130:	f003 0301 	and.w	r3, r3, #1
 800a134:	60bb      	str	r3, [r7, #8]
 800a136:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a138:	4a56      	ldr	r2, [pc, #344]	; (800a294 <HAL_GPIO_Init+0x2e8>)
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	089b      	lsrs	r3, r3, #2
 800a13e:	3302      	adds	r3, #2
 800a140:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a144:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a146:	697b      	ldr	r3, [r7, #20]
 800a148:	f003 0303 	and.w	r3, r3, #3
 800a14c:	009b      	lsls	r3, r3, #2
 800a14e:	220f      	movs	r2, #15
 800a150:	fa02 f303 	lsl.w	r3, r2, r3
 800a154:	43db      	mvns	r3, r3
 800a156:	693a      	ldr	r2, [r7, #16]
 800a158:	4013      	ands	r3, r2
 800a15a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800a162:	d01f      	beq.n	800a1a4 <HAL_GPIO_Init+0x1f8>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	4a4c      	ldr	r2, [pc, #304]	; (800a298 <HAL_GPIO_Init+0x2ec>)
 800a168:	4293      	cmp	r3, r2
 800a16a:	d019      	beq.n	800a1a0 <HAL_GPIO_Init+0x1f4>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a4b      	ldr	r2, [pc, #300]	; (800a29c <HAL_GPIO_Init+0x2f0>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d013      	beq.n	800a19c <HAL_GPIO_Init+0x1f0>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a4a      	ldr	r2, [pc, #296]	; (800a2a0 <HAL_GPIO_Init+0x2f4>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d00d      	beq.n	800a198 <HAL_GPIO_Init+0x1ec>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a49      	ldr	r2, [pc, #292]	; (800a2a4 <HAL_GPIO_Init+0x2f8>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d007      	beq.n	800a194 <HAL_GPIO_Init+0x1e8>
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	4a48      	ldr	r2, [pc, #288]	; (800a2a8 <HAL_GPIO_Init+0x2fc>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d101      	bne.n	800a190 <HAL_GPIO_Init+0x1e4>
 800a18c:	2305      	movs	r3, #5
 800a18e:	e00a      	b.n	800a1a6 <HAL_GPIO_Init+0x1fa>
 800a190:	2306      	movs	r3, #6
 800a192:	e008      	b.n	800a1a6 <HAL_GPIO_Init+0x1fa>
 800a194:	2304      	movs	r3, #4
 800a196:	e006      	b.n	800a1a6 <HAL_GPIO_Init+0x1fa>
 800a198:	2303      	movs	r3, #3
 800a19a:	e004      	b.n	800a1a6 <HAL_GPIO_Init+0x1fa>
 800a19c:	2302      	movs	r3, #2
 800a19e:	e002      	b.n	800a1a6 <HAL_GPIO_Init+0x1fa>
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	e000      	b.n	800a1a6 <HAL_GPIO_Init+0x1fa>
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	697a      	ldr	r2, [r7, #20]
 800a1a8:	f002 0203 	and.w	r2, r2, #3
 800a1ac:	0092      	lsls	r2, r2, #2
 800a1ae:	4093      	lsls	r3, r2
 800a1b0:	693a      	ldr	r2, [r7, #16]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a1b6:	4937      	ldr	r1, [pc, #220]	; (800a294 <HAL_GPIO_Init+0x2e8>)
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	089b      	lsrs	r3, r3, #2
 800a1bc:	3302      	adds	r3, #2
 800a1be:	693a      	ldr	r2, [r7, #16]
 800a1c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a1c4:	4b39      	ldr	r3, [pc, #228]	; (800a2ac <HAL_GPIO_Init+0x300>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	43db      	mvns	r3, r3
 800a1ce:	693a      	ldr	r2, [r7, #16]
 800a1d0:	4013      	ands	r3, r2
 800a1d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a1d4:	683b      	ldr	r3, [r7, #0]
 800a1d6:	685b      	ldr	r3, [r3, #4]
 800a1d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d003      	beq.n	800a1e8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800a1e0:	693a      	ldr	r2, [r7, #16]
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a1e8:	4a30      	ldr	r2, [pc, #192]	; (800a2ac <HAL_GPIO_Init+0x300>)
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800a1ee:	4b2f      	ldr	r3, [pc, #188]	; (800a2ac <HAL_GPIO_Init+0x300>)
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	43db      	mvns	r3, r3
 800a1f8:	693a      	ldr	r2, [r7, #16]
 800a1fa:	4013      	ands	r3, r2
 800a1fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a1fe:	683b      	ldr	r3, [r7, #0]
 800a200:	685b      	ldr	r3, [r3, #4]
 800a202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a206:	2b00      	cmp	r3, #0
 800a208:	d003      	beq.n	800a212 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a20a:	693a      	ldr	r2, [r7, #16]
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	4313      	orrs	r3, r2
 800a210:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a212:	4a26      	ldr	r2, [pc, #152]	; (800a2ac <HAL_GPIO_Init+0x300>)
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a218:	4b24      	ldr	r3, [pc, #144]	; (800a2ac <HAL_GPIO_Init+0x300>)
 800a21a:	689b      	ldr	r3, [r3, #8]
 800a21c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	43db      	mvns	r3, r3
 800a222:	693a      	ldr	r2, [r7, #16]
 800a224:	4013      	ands	r3, r2
 800a226:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	685b      	ldr	r3, [r3, #4]
 800a22c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a230:	2b00      	cmp	r3, #0
 800a232:	d003      	beq.n	800a23c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a234:	693a      	ldr	r2, [r7, #16]
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	4313      	orrs	r3, r2
 800a23a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a23c:	4a1b      	ldr	r2, [pc, #108]	; (800a2ac <HAL_GPIO_Init+0x300>)
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a242:	4b1a      	ldr	r3, [pc, #104]	; (800a2ac <HAL_GPIO_Init+0x300>)
 800a244:	68db      	ldr	r3, [r3, #12]
 800a246:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	43db      	mvns	r3, r3
 800a24c:	693a      	ldr	r2, [r7, #16]
 800a24e:	4013      	ands	r3, r2
 800a250:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a252:	683b      	ldr	r3, [r7, #0]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d003      	beq.n	800a266 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a25e:	693a      	ldr	r2, [r7, #16]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	4313      	orrs	r3, r2
 800a264:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a266:	4a11      	ldr	r2, [pc, #68]	; (800a2ac <HAL_GPIO_Init+0x300>)
 800a268:	693b      	ldr	r3, [r7, #16]
 800a26a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800a26c:	697b      	ldr	r3, [r7, #20]
 800a26e:	3301      	adds	r3, #1
 800a270:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a272:	683b      	ldr	r3, [r7, #0]
 800a274:	681a      	ldr	r2, [r3, #0]
 800a276:	697b      	ldr	r3, [r7, #20]
 800a278:	fa22 f303 	lsr.w	r3, r2, r3
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	f47f ae9d 	bne.w	8009fbc <HAL_GPIO_Init+0x10>
  }
}
 800a282:	bf00      	nop
 800a284:	371c      	adds	r7, #28
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr
 800a28e:	bf00      	nop
 800a290:	40021000 	.word	0x40021000
 800a294:	40010000 	.word	0x40010000
 800a298:	48000400 	.word	0x48000400
 800a29c:	48000800 	.word	0x48000800
 800a2a0:	48000c00 	.word	0x48000c00
 800a2a4:	48001000 	.word	0x48001000
 800a2a8:	48001400 	.word	0x48001400
 800a2ac:	40010400 	.word	0x40010400

0800a2b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b083      	sub	sp, #12
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	807b      	strh	r3, [r7, #2]
 800a2bc:	4613      	mov	r3, r2
 800a2be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a2c0:	787b      	ldrb	r3, [r7, #1]
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d003      	beq.n	800a2ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a2c6:	887a      	ldrh	r2, [r7, #2]
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a2cc:	e002      	b.n	800a2d4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a2ce:	887a      	ldrh	r2, [r7, #2]
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	629a      	str	r2, [r3, #40]	; 0x28
}
 800a2d4:	bf00      	nop
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b085      	sub	sp, #20
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	d141      	bne.n	800a372 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a2ee:	4b4b      	ldr	r3, [pc, #300]	; (800a41c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a2f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a2fa:	d131      	bne.n	800a360 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a2fc:	4b47      	ldr	r3, [pc, #284]	; (800a41c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a2fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a302:	4a46      	ldr	r2, [pc, #280]	; (800a41c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a304:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a308:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a30c:	4b43      	ldr	r3, [pc, #268]	; (800a41c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a314:	4a41      	ldr	r2, [pc, #260]	; (800a41c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a316:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a31a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a31c:	4b40      	ldr	r3, [pc, #256]	; (800a420 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	2232      	movs	r2, #50	; 0x32
 800a322:	fb02 f303 	mul.w	r3, r2, r3
 800a326:	4a3f      	ldr	r2, [pc, #252]	; (800a424 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a328:	fba2 2303 	umull	r2, r3, r2, r3
 800a32c:	0c9b      	lsrs	r3, r3, #18
 800a32e:	3301      	adds	r3, #1
 800a330:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a332:	e002      	b.n	800a33a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	3b01      	subs	r3, #1
 800a338:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a33a:	4b38      	ldr	r3, [pc, #224]	; (800a41c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a33c:	695b      	ldr	r3, [r3, #20]
 800a33e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a342:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a346:	d102      	bne.n	800a34e <HAL_PWREx_ControlVoltageScaling+0x6e>
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d1f2      	bne.n	800a334 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a34e:	4b33      	ldr	r3, [pc, #204]	; (800a41c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a350:	695b      	ldr	r3, [r3, #20]
 800a352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a356:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a35a:	d158      	bne.n	800a40e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a35c:	2303      	movs	r3, #3
 800a35e:	e057      	b.n	800a410 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a360:	4b2e      	ldr	r3, [pc, #184]	; (800a41c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a366:	4a2d      	ldr	r2, [pc, #180]	; (800a41c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a36c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a370:	e04d      	b.n	800a40e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a378:	d141      	bne.n	800a3fe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800a37a:	4b28      	ldr	r3, [pc, #160]	; (800a41c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a386:	d131      	bne.n	800a3ec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a388:	4b24      	ldr	r3, [pc, #144]	; (800a41c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a38a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a38e:	4a23      	ldr	r2, [pc, #140]	; (800a41c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a394:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800a398:	4b20      	ldr	r3, [pc, #128]	; (800a41c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a3a0:	4a1e      	ldr	r2, [pc, #120]	; (800a41c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a3a6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800a3a8:	4b1d      	ldr	r3, [pc, #116]	; (800a420 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2232      	movs	r2, #50	; 0x32
 800a3ae:	fb02 f303 	mul.w	r3, r2, r3
 800a3b2:	4a1c      	ldr	r2, [pc, #112]	; (800a424 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800a3b4:	fba2 2303 	umull	r2, r3, r2, r3
 800a3b8:	0c9b      	lsrs	r3, r3, #18
 800a3ba:	3301      	adds	r3, #1
 800a3bc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a3be:	e002      	b.n	800a3c6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	3b01      	subs	r3, #1
 800a3c4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800a3c6:	4b15      	ldr	r3, [pc, #84]	; (800a41c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3c8:	695b      	ldr	r3, [r3, #20]
 800a3ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3d2:	d102      	bne.n	800a3da <HAL_PWREx_ControlVoltageScaling+0xfa>
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d1f2      	bne.n	800a3c0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800a3da:	4b10      	ldr	r3, [pc, #64]	; (800a41c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3dc:	695b      	ldr	r3, [r3, #20]
 800a3de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a3e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3e6:	d112      	bne.n	800a40e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800a3e8:	2303      	movs	r3, #3
 800a3ea:	e011      	b.n	800a410 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800a3ec:	4b0b      	ldr	r3, [pc, #44]	; (800a41c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a3f2:	4a0a      	ldr	r2, [pc, #40]	; (800a41c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a3f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3f8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800a3fc:	e007      	b.n	800a40e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800a3fe:	4b07      	ldr	r3, [pc, #28]	; (800a41c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800a406:	4a05      	ldr	r2, [pc, #20]	; (800a41c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800a408:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a40c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800a40e:	2300      	movs	r3, #0
}
 800a410:	4618      	mov	r0, r3
 800a412:	3714      	adds	r7, #20
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr
 800a41c:	40007000 	.word	0x40007000
 800a420:	20000ca4 	.word	0x20000ca4
 800a424:	431bde83 	.word	0x431bde83

0800a428 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b088      	sub	sp, #32
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d101      	bne.n	800a43a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a436:	2301      	movs	r3, #1
 800a438:	e308      	b.n	800aa4c <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f003 0301 	and.w	r3, r3, #1
 800a442:	2b00      	cmp	r3, #0
 800a444:	d075      	beq.n	800a532 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a446:	4ba3      	ldr	r3, [pc, #652]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a448:	689b      	ldr	r3, [r3, #8]
 800a44a:	f003 030c 	and.w	r3, r3, #12
 800a44e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a450:	4ba0      	ldr	r3, [pc, #640]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	f003 0303 	and.w	r3, r3, #3
 800a458:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800a45a:	69bb      	ldr	r3, [r7, #24]
 800a45c:	2b0c      	cmp	r3, #12
 800a45e:	d102      	bne.n	800a466 <HAL_RCC_OscConfig+0x3e>
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	2b03      	cmp	r3, #3
 800a464:	d002      	beq.n	800a46c <HAL_RCC_OscConfig+0x44>
 800a466:	69bb      	ldr	r3, [r7, #24]
 800a468:	2b08      	cmp	r3, #8
 800a46a:	d10b      	bne.n	800a484 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a46c:	4b99      	ldr	r3, [pc, #612]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a474:	2b00      	cmp	r3, #0
 800a476:	d05b      	beq.n	800a530 <HAL_RCC_OscConfig+0x108>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	685b      	ldr	r3, [r3, #4]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d157      	bne.n	800a530 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a480:	2301      	movs	r3, #1
 800a482:	e2e3      	b.n	800aa4c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a48c:	d106      	bne.n	800a49c <HAL_RCC_OscConfig+0x74>
 800a48e:	4b91      	ldr	r3, [pc, #580]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	4a90      	ldr	r2, [pc, #576]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a498:	6013      	str	r3, [r2, #0]
 800a49a:	e01d      	b.n	800a4d8 <HAL_RCC_OscConfig+0xb0>
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	685b      	ldr	r3, [r3, #4]
 800a4a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a4a4:	d10c      	bne.n	800a4c0 <HAL_RCC_OscConfig+0x98>
 800a4a6:	4b8b      	ldr	r3, [pc, #556]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a8a      	ldr	r2, [pc, #552]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a4ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a4b0:	6013      	str	r3, [r2, #0]
 800a4b2:	4b88      	ldr	r3, [pc, #544]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	4a87      	ldr	r2, [pc, #540]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a4b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4bc:	6013      	str	r3, [r2, #0]
 800a4be:	e00b      	b.n	800a4d8 <HAL_RCC_OscConfig+0xb0>
 800a4c0:	4b84      	ldr	r3, [pc, #528]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	4a83      	ldr	r2, [pc, #524]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a4c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a4ca:	6013      	str	r3, [r2, #0]
 800a4cc:	4b81      	ldr	r3, [pc, #516]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	4a80      	ldr	r2, [pc, #512]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a4d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a4d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d013      	beq.n	800a508 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a4e0:	f7fd fa06 	bl	80078f0 <HAL_GetTick>
 800a4e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a4e6:	e008      	b.n	800a4fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a4e8:	f7fd fa02 	bl	80078f0 <HAL_GetTick>
 800a4ec:	4602      	mov	r2, r0
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	1ad3      	subs	r3, r2, r3
 800a4f2:	2b64      	cmp	r3, #100	; 0x64
 800a4f4:	d901      	bls.n	800a4fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a4f6:	2303      	movs	r3, #3
 800a4f8:	e2a8      	b.n	800aa4c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800a4fa:	4b76      	ldr	r3, [pc, #472]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a502:	2b00      	cmp	r3, #0
 800a504:	d0f0      	beq.n	800a4e8 <HAL_RCC_OscConfig+0xc0>
 800a506:	e014      	b.n	800a532 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a508:	f7fd f9f2 	bl	80078f0 <HAL_GetTick>
 800a50c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a50e:	e008      	b.n	800a522 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a510:	f7fd f9ee 	bl	80078f0 <HAL_GetTick>
 800a514:	4602      	mov	r2, r0
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	1ad3      	subs	r3, r2, r3
 800a51a:	2b64      	cmp	r3, #100	; 0x64
 800a51c:	d901      	bls.n	800a522 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a51e:	2303      	movs	r3, #3
 800a520:	e294      	b.n	800aa4c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800a522:	4b6c      	ldr	r3, [pc, #432]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a524:	681b      	ldr	r3, [r3, #0]
 800a526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d1f0      	bne.n	800a510 <HAL_RCC_OscConfig+0xe8>
 800a52e:	e000      	b.n	800a532 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a530:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f003 0302 	and.w	r3, r3, #2
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d075      	beq.n	800a62a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a53e:	4b65      	ldr	r3, [pc, #404]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	f003 030c 	and.w	r3, r3, #12
 800a546:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a548:	4b62      	ldr	r3, [pc, #392]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a54a:	68db      	ldr	r3, [r3, #12]
 800a54c:	f003 0303 	and.w	r3, r3, #3
 800a550:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800a552:	69bb      	ldr	r3, [r7, #24]
 800a554:	2b0c      	cmp	r3, #12
 800a556:	d102      	bne.n	800a55e <HAL_RCC_OscConfig+0x136>
 800a558:	697b      	ldr	r3, [r7, #20]
 800a55a:	2b02      	cmp	r3, #2
 800a55c:	d002      	beq.n	800a564 <HAL_RCC_OscConfig+0x13c>
 800a55e:	69bb      	ldr	r3, [r7, #24]
 800a560:	2b04      	cmp	r3, #4
 800a562:	d11f      	bne.n	800a5a4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a564:	4b5b      	ldr	r3, [pc, #364]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d005      	beq.n	800a57c <HAL_RCC_OscConfig+0x154>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	68db      	ldr	r3, [r3, #12]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d101      	bne.n	800a57c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800a578:	2301      	movs	r3, #1
 800a57a:	e267      	b.n	800aa4c <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a57c:	4b55      	ldr	r3, [pc, #340]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a57e:	685b      	ldr	r3, [r3, #4]
 800a580:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	691b      	ldr	r3, [r3, #16]
 800a588:	061b      	lsls	r3, r3, #24
 800a58a:	4952      	ldr	r1, [pc, #328]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a58c:	4313      	orrs	r3, r2
 800a58e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800a590:	4b51      	ldr	r3, [pc, #324]	; (800a6d8 <HAL_RCC_OscConfig+0x2b0>)
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	4618      	mov	r0, r3
 800a596:	f7fd f95f 	bl	8007858 <HAL_InitTick>
 800a59a:	4603      	mov	r3, r0
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d043      	beq.n	800a628 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800a5a0:	2301      	movs	r3, #1
 800a5a2:	e253      	b.n	800aa4c <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	68db      	ldr	r3, [r3, #12]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d023      	beq.n	800a5f4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a5ac:	4b49      	ldr	r3, [pc, #292]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	4a48      	ldr	r2, [pc, #288]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a5b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a5b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5b8:	f7fd f99a 	bl	80078f0 <HAL_GetTick>
 800a5bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a5be:	e008      	b.n	800a5d2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a5c0:	f7fd f996 	bl	80078f0 <HAL_GetTick>
 800a5c4:	4602      	mov	r2, r0
 800a5c6:	693b      	ldr	r3, [r7, #16]
 800a5c8:	1ad3      	subs	r3, r2, r3
 800a5ca:	2b02      	cmp	r3, #2
 800a5cc:	d901      	bls.n	800a5d2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a5ce:	2303      	movs	r3, #3
 800a5d0:	e23c      	b.n	800aa4c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800a5d2:	4b40      	ldr	r3, [pc, #256]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d0f0      	beq.n	800a5c0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5de:	4b3d      	ldr	r3, [pc, #244]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	691b      	ldr	r3, [r3, #16]
 800a5ea:	061b      	lsls	r3, r3, #24
 800a5ec:	4939      	ldr	r1, [pc, #228]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a5ee:	4313      	orrs	r3, r2
 800a5f0:	604b      	str	r3, [r1, #4]
 800a5f2:	e01a      	b.n	800a62a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a5f4:	4b37      	ldr	r3, [pc, #220]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	4a36      	ldr	r2, [pc, #216]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a5fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a5fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a600:	f7fd f976 	bl	80078f0 <HAL_GetTick>
 800a604:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a606:	e008      	b.n	800a61a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a608:	f7fd f972 	bl	80078f0 <HAL_GetTick>
 800a60c:	4602      	mov	r2, r0
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	1ad3      	subs	r3, r2, r3
 800a612:	2b02      	cmp	r3, #2
 800a614:	d901      	bls.n	800a61a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800a616:	2303      	movs	r3, #3
 800a618:	e218      	b.n	800aa4c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800a61a:	4b2e      	ldr	r3, [pc, #184]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a622:	2b00      	cmp	r3, #0
 800a624:	d1f0      	bne.n	800a608 <HAL_RCC_OscConfig+0x1e0>
 800a626:	e000      	b.n	800a62a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a628:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f003 0308 	and.w	r3, r3, #8
 800a632:	2b00      	cmp	r3, #0
 800a634:	d03c      	beq.n	800a6b0 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	695b      	ldr	r3, [r3, #20]
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d01c      	beq.n	800a678 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a63e:	4b25      	ldr	r3, [pc, #148]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a640:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a644:	4a23      	ldr	r2, [pc, #140]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a646:	f043 0301 	orr.w	r3, r3, #1
 800a64a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a64e:	f7fd f94f 	bl	80078f0 <HAL_GetTick>
 800a652:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a654:	e008      	b.n	800a668 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a656:	f7fd f94b 	bl	80078f0 <HAL_GetTick>
 800a65a:	4602      	mov	r2, r0
 800a65c:	693b      	ldr	r3, [r7, #16]
 800a65e:	1ad3      	subs	r3, r2, r3
 800a660:	2b02      	cmp	r3, #2
 800a662:	d901      	bls.n	800a668 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a664:	2303      	movs	r3, #3
 800a666:	e1f1      	b.n	800aa4c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800a668:	4b1a      	ldr	r3, [pc, #104]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a66a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a66e:	f003 0302 	and.w	r3, r3, #2
 800a672:	2b00      	cmp	r3, #0
 800a674:	d0ef      	beq.n	800a656 <HAL_RCC_OscConfig+0x22e>
 800a676:	e01b      	b.n	800a6b0 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a678:	4b16      	ldr	r3, [pc, #88]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a67a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a67e:	4a15      	ldr	r2, [pc, #84]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a680:	f023 0301 	bic.w	r3, r3, #1
 800a684:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a688:	f7fd f932 	bl	80078f0 <HAL_GetTick>
 800a68c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a68e:	e008      	b.n	800a6a2 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a690:	f7fd f92e 	bl	80078f0 <HAL_GetTick>
 800a694:	4602      	mov	r2, r0
 800a696:	693b      	ldr	r3, [r7, #16]
 800a698:	1ad3      	subs	r3, r2, r3
 800a69a:	2b02      	cmp	r3, #2
 800a69c:	d901      	bls.n	800a6a2 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800a69e:	2303      	movs	r3, #3
 800a6a0:	e1d4      	b.n	800aa4c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800a6a2:	4b0c      	ldr	r3, [pc, #48]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a6a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a6a8:	f003 0302 	and.w	r3, r3, #2
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d1ef      	bne.n	800a690 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	f003 0304 	and.w	r3, r3, #4
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	f000 80ab 	beq.w	800a814 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a6c2:	4b04      	ldr	r3, [pc, #16]	; (800a6d4 <HAL_RCC_OscConfig+0x2ac>)
 800a6c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d106      	bne.n	800a6dc <HAL_RCC_OscConfig+0x2b4>
 800a6ce:	2301      	movs	r3, #1
 800a6d0:	e005      	b.n	800a6de <HAL_RCC_OscConfig+0x2b6>
 800a6d2:	bf00      	nop
 800a6d4:	40021000 	.word	0x40021000
 800a6d8:	20000ca8 	.word	0x20000ca8
 800a6dc:	2300      	movs	r3, #0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d00d      	beq.n	800a6fe <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a6e2:	4baf      	ldr	r3, [pc, #700]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a6e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6e6:	4aae      	ldr	r2, [pc, #696]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a6e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6ec:	6593      	str	r3, [r2, #88]	; 0x58
 800a6ee:	4bac      	ldr	r3, [pc, #688]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a6f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6f6:	60fb      	str	r3, [r7, #12]
 800a6f8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a6fe:	4ba9      	ldr	r3, [pc, #676]	; (800a9a4 <HAL_RCC_OscConfig+0x57c>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a706:	2b00      	cmp	r3, #0
 800a708:	d118      	bne.n	800a73c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a70a:	4ba6      	ldr	r3, [pc, #664]	; (800a9a4 <HAL_RCC_OscConfig+0x57c>)
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	4aa5      	ldr	r2, [pc, #660]	; (800a9a4 <HAL_RCC_OscConfig+0x57c>)
 800a710:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a716:	f7fd f8eb 	bl	80078f0 <HAL_GetTick>
 800a71a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a71c:	e008      	b.n	800a730 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a71e:	f7fd f8e7 	bl	80078f0 <HAL_GetTick>
 800a722:	4602      	mov	r2, r0
 800a724:	693b      	ldr	r3, [r7, #16]
 800a726:	1ad3      	subs	r3, r2, r3
 800a728:	2b02      	cmp	r3, #2
 800a72a:	d901      	bls.n	800a730 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800a72c:	2303      	movs	r3, #3
 800a72e:	e18d      	b.n	800aa4c <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800a730:	4b9c      	ldr	r3, [pc, #624]	; (800a9a4 <HAL_RCC_OscConfig+0x57c>)
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a738:	2b00      	cmp	r3, #0
 800a73a:	d0f0      	beq.n	800a71e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	689b      	ldr	r3, [r3, #8]
 800a740:	2b01      	cmp	r3, #1
 800a742:	d108      	bne.n	800a756 <HAL_RCC_OscConfig+0x32e>
 800a744:	4b96      	ldr	r3, [pc, #600]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a74a:	4a95      	ldr	r2, [pc, #596]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a74c:	f043 0301 	orr.w	r3, r3, #1
 800a750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a754:	e024      	b.n	800a7a0 <HAL_RCC_OscConfig+0x378>
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	689b      	ldr	r3, [r3, #8]
 800a75a:	2b05      	cmp	r3, #5
 800a75c:	d110      	bne.n	800a780 <HAL_RCC_OscConfig+0x358>
 800a75e:	4b90      	ldr	r3, [pc, #576]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a764:	4a8e      	ldr	r2, [pc, #568]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a766:	f043 0304 	orr.w	r3, r3, #4
 800a76a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a76e:	4b8c      	ldr	r3, [pc, #560]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a774:	4a8a      	ldr	r2, [pc, #552]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a776:	f043 0301 	orr.w	r3, r3, #1
 800a77a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a77e:	e00f      	b.n	800a7a0 <HAL_RCC_OscConfig+0x378>
 800a780:	4b87      	ldr	r3, [pc, #540]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a786:	4a86      	ldr	r2, [pc, #536]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a788:	f023 0301 	bic.w	r3, r3, #1
 800a78c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800a790:	4b83      	ldr	r3, [pc, #524]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a796:	4a82      	ldr	r2, [pc, #520]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a798:	f023 0304 	bic.w	r3, r3, #4
 800a79c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	689b      	ldr	r3, [r3, #8]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d016      	beq.n	800a7d6 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7a8:	f7fd f8a2 	bl	80078f0 <HAL_GetTick>
 800a7ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a7ae:	e00a      	b.n	800a7c6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7b0:	f7fd f89e 	bl	80078f0 <HAL_GetTick>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	693b      	ldr	r3, [r7, #16]
 800a7b8:	1ad3      	subs	r3, r2, r3
 800a7ba:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7be:	4293      	cmp	r3, r2
 800a7c0:	d901      	bls.n	800a7c6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800a7c2:	2303      	movs	r3, #3
 800a7c4:	e142      	b.n	800aa4c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a7c6:	4b76      	ldr	r3, [pc, #472]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a7c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7cc:	f003 0302 	and.w	r3, r3, #2
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d0ed      	beq.n	800a7b0 <HAL_RCC_OscConfig+0x388>
 800a7d4:	e015      	b.n	800a802 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a7d6:	f7fd f88b 	bl	80078f0 <HAL_GetTick>
 800a7da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a7dc:	e00a      	b.n	800a7f4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a7de:	f7fd f887 	bl	80078f0 <HAL_GetTick>
 800a7e2:	4602      	mov	r2, r0
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	1ad3      	subs	r3, r2, r3
 800a7e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7ec:	4293      	cmp	r3, r2
 800a7ee:	d901      	bls.n	800a7f4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800a7f0:	2303      	movs	r3, #3
 800a7f2:	e12b      	b.n	800aa4c <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800a7f4:	4b6a      	ldr	r3, [pc, #424]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a7f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a7fa:	f003 0302 	and.w	r3, r3, #2
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d1ed      	bne.n	800a7de <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800a802:	7ffb      	ldrb	r3, [r7, #31]
 800a804:	2b01      	cmp	r3, #1
 800a806:	d105      	bne.n	800a814 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a808:	4b65      	ldr	r3, [pc, #404]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a80a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a80c:	4a64      	ldr	r2, [pc, #400]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a80e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a812:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	f003 0320 	and.w	r3, r3, #32
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d03c      	beq.n	800a89a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	699b      	ldr	r3, [r3, #24]
 800a824:	2b00      	cmp	r3, #0
 800a826:	d01c      	beq.n	800a862 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a828:	4b5d      	ldr	r3, [pc, #372]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a82a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a82e:	4a5c      	ldr	r2, [pc, #368]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a830:	f043 0301 	orr.w	r3, r3, #1
 800a834:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a838:	f7fd f85a 	bl	80078f0 <HAL_GetTick>
 800a83c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a83e:	e008      	b.n	800a852 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a840:	f7fd f856 	bl	80078f0 <HAL_GetTick>
 800a844:	4602      	mov	r2, r0
 800a846:	693b      	ldr	r3, [r7, #16]
 800a848:	1ad3      	subs	r3, r2, r3
 800a84a:	2b02      	cmp	r3, #2
 800a84c:	d901      	bls.n	800a852 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800a84e:	2303      	movs	r3, #3
 800a850:	e0fc      	b.n	800aa4c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800a852:	4b53      	ldr	r3, [pc, #332]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a854:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a858:	f003 0302 	and.w	r3, r3, #2
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d0ef      	beq.n	800a840 <HAL_RCC_OscConfig+0x418>
 800a860:	e01b      	b.n	800a89a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a862:	4b4f      	ldr	r3, [pc, #316]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a864:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a868:	4a4d      	ldr	r2, [pc, #308]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a86a:	f023 0301 	bic.w	r3, r3, #1
 800a86e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a872:	f7fd f83d 	bl	80078f0 <HAL_GetTick>
 800a876:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a878:	e008      	b.n	800a88c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a87a:	f7fd f839 	bl	80078f0 <HAL_GetTick>
 800a87e:	4602      	mov	r2, r0
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	1ad3      	subs	r3, r2, r3
 800a884:	2b02      	cmp	r3, #2
 800a886:	d901      	bls.n	800a88c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800a888:	2303      	movs	r3, #3
 800a88a:	e0df      	b.n	800aa4c <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800a88c:	4b44      	ldr	r3, [pc, #272]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a88e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a892:	f003 0302 	and.w	r3, r3, #2
 800a896:	2b00      	cmp	r3, #0
 800a898:	d1ef      	bne.n	800a87a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	69db      	ldr	r3, [r3, #28]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	f000 80d3 	beq.w	800aa4a <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a8a4:	4b3e      	ldr	r3, [pc, #248]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a8a6:	689b      	ldr	r3, [r3, #8]
 800a8a8:	f003 030c 	and.w	r3, r3, #12
 800a8ac:	2b0c      	cmp	r3, #12
 800a8ae:	f000 808d 	beq.w	800a9cc <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	69db      	ldr	r3, [r3, #28]
 800a8b6:	2b02      	cmp	r3, #2
 800a8b8:	d15a      	bne.n	800a970 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a8ba:	4b39      	ldr	r3, [pc, #228]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a38      	ldr	r2, [pc, #224]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a8c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a8c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a8c6:	f7fd f813 	bl	80078f0 <HAL_GetTick>
 800a8ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a8cc:	e008      	b.n	800a8e0 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a8ce:	f7fd f80f 	bl	80078f0 <HAL_GetTick>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	693b      	ldr	r3, [r7, #16]
 800a8d6:	1ad3      	subs	r3, r2, r3
 800a8d8:	2b02      	cmp	r3, #2
 800a8da:	d901      	bls.n	800a8e0 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800a8dc:	2303      	movs	r3, #3
 800a8de:	e0b5      	b.n	800aa4c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a8e0:	4b2f      	ldr	r3, [pc, #188]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d1f0      	bne.n	800a8ce <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a8ec:	4b2c      	ldr	r3, [pc, #176]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a8ee:	68da      	ldr	r2, [r3, #12]
 800a8f0:	4b2d      	ldr	r3, [pc, #180]	; (800a9a8 <HAL_RCC_OscConfig+0x580>)
 800a8f2:	4013      	ands	r3, r2
 800a8f4:	687a      	ldr	r2, [r7, #4]
 800a8f6:	6a11      	ldr	r1, [r2, #32]
 800a8f8:	687a      	ldr	r2, [r7, #4]
 800a8fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a8fc:	3a01      	subs	r2, #1
 800a8fe:	0112      	lsls	r2, r2, #4
 800a900:	4311      	orrs	r1, r2
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a906:	0212      	lsls	r2, r2, #8
 800a908:	4311      	orrs	r1, r2
 800a90a:	687a      	ldr	r2, [r7, #4]
 800a90c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a90e:	0852      	lsrs	r2, r2, #1
 800a910:	3a01      	subs	r2, #1
 800a912:	0552      	lsls	r2, r2, #21
 800a914:	4311      	orrs	r1, r2
 800a916:	687a      	ldr	r2, [r7, #4]
 800a918:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800a91a:	0852      	lsrs	r2, r2, #1
 800a91c:	3a01      	subs	r2, #1
 800a91e:	0652      	lsls	r2, r2, #25
 800a920:	4311      	orrs	r1, r2
 800a922:	687a      	ldr	r2, [r7, #4]
 800a924:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a926:	06d2      	lsls	r2, r2, #27
 800a928:	430a      	orrs	r2, r1
 800a92a:	491d      	ldr	r1, [pc, #116]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a92c:	4313      	orrs	r3, r2
 800a92e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a930:	4b1b      	ldr	r3, [pc, #108]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	4a1a      	ldr	r2, [pc, #104]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a936:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a93a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800a93c:	4b18      	ldr	r3, [pc, #96]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a93e:	68db      	ldr	r3, [r3, #12]
 800a940:	4a17      	ldr	r2, [pc, #92]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a942:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a946:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a948:	f7fc ffd2 	bl	80078f0 <HAL_GetTick>
 800a94c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a94e:	e008      	b.n	800a962 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a950:	f7fc ffce 	bl	80078f0 <HAL_GetTick>
 800a954:	4602      	mov	r2, r0
 800a956:	693b      	ldr	r3, [r7, #16]
 800a958:	1ad3      	subs	r3, r2, r3
 800a95a:	2b02      	cmp	r3, #2
 800a95c:	d901      	bls.n	800a962 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 800a95e:	2303      	movs	r3, #3
 800a960:	e074      	b.n	800aa4c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800a962:	4b0f      	ldr	r3, [pc, #60]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d0f0      	beq.n	800a950 <HAL_RCC_OscConfig+0x528>
 800a96e:	e06c      	b.n	800aa4a <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a970:	4b0b      	ldr	r3, [pc, #44]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	4a0a      	ldr	r2, [pc, #40]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a976:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a97a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800a97c:	4b08      	ldr	r3, [pc, #32]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a97e:	68db      	ldr	r3, [r3, #12]
 800a980:	4a07      	ldr	r2, [pc, #28]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a982:	f023 0303 	bic.w	r3, r3, #3
 800a986:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800a988:	4b05      	ldr	r3, [pc, #20]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a98a:	68db      	ldr	r3, [r3, #12]
 800a98c:	4a04      	ldr	r2, [pc, #16]	; (800a9a0 <HAL_RCC_OscConfig+0x578>)
 800a98e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800a992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a996:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a998:	f7fc ffaa 	bl	80078f0 <HAL_GetTick>
 800a99c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a99e:	e00e      	b.n	800a9be <HAL_RCC_OscConfig+0x596>
 800a9a0:	40021000 	.word	0x40021000
 800a9a4:	40007000 	.word	0x40007000
 800a9a8:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a9ac:	f7fc ffa0 	bl	80078f0 <HAL_GetTick>
 800a9b0:	4602      	mov	r2, r0
 800a9b2:	693b      	ldr	r3, [r7, #16]
 800a9b4:	1ad3      	subs	r3, r2, r3
 800a9b6:	2b02      	cmp	r3, #2
 800a9b8:	d901      	bls.n	800a9be <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800a9ba:	2303      	movs	r3, #3
 800a9bc:	e046      	b.n	800aa4c <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800a9be:	4b25      	ldr	r3, [pc, #148]	; (800aa54 <HAL_RCC_OscConfig+0x62c>)
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d1f0      	bne.n	800a9ac <HAL_RCC_OscConfig+0x584>
 800a9ca:	e03e      	b.n	800aa4a <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	69db      	ldr	r3, [r3, #28]
 800a9d0:	2b01      	cmp	r3, #1
 800a9d2:	d101      	bne.n	800a9d8 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800a9d4:	2301      	movs	r3, #1
 800a9d6:	e039      	b.n	800aa4c <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800a9d8:	4b1e      	ldr	r3, [pc, #120]	; (800aa54 <HAL_RCC_OscConfig+0x62c>)
 800a9da:	68db      	ldr	r3, [r3, #12]
 800a9dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9de:	697b      	ldr	r3, [r7, #20]
 800a9e0:	f003 0203 	and.w	r2, r3, #3
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6a1b      	ldr	r3, [r3, #32]
 800a9e8:	429a      	cmp	r2, r3
 800a9ea:	d12c      	bne.n	800aa46 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f6:	3b01      	subs	r3, #1
 800a9f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d123      	bne.n	800aa46 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa08:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d11b      	bne.n	800aa46 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa18:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800aa1a:	429a      	cmp	r2, r3
 800aa1c:	d113      	bne.n	800aa46 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa28:	085b      	lsrs	r3, r3, #1
 800aa2a:	3b01      	subs	r3, #1
 800aa2c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800aa2e:	429a      	cmp	r2, r3
 800aa30:	d109      	bne.n	800aa46 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800aa32:	697b      	ldr	r3, [r7, #20]
 800aa34:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa3c:	085b      	lsrs	r3, r3, #1
 800aa3e:	3b01      	subs	r3, #1
 800aa40:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800aa42:	429a      	cmp	r2, r3
 800aa44:	d001      	beq.n	800aa4a <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 800aa46:	2301      	movs	r3, #1
 800aa48:	e000      	b.n	800aa4c <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 800aa4a:	2300      	movs	r3, #0
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3720      	adds	r7, #32
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}
 800aa54:	40021000 	.word	0x40021000

0800aa58 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b086      	sub	sp, #24
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
 800aa60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800aa62:	2300      	movs	r3, #0
 800aa64:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d101      	bne.n	800aa70 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e11e      	b.n	800acae <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800aa70:	4b91      	ldr	r3, [pc, #580]	; (800acb8 <HAL_RCC_ClockConfig+0x260>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f003 030f 	and.w	r3, r3, #15
 800aa78:	683a      	ldr	r2, [r7, #0]
 800aa7a:	429a      	cmp	r2, r3
 800aa7c:	d910      	bls.n	800aaa0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa7e:	4b8e      	ldr	r3, [pc, #568]	; (800acb8 <HAL_RCC_ClockConfig+0x260>)
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f023 020f 	bic.w	r2, r3, #15
 800aa86:	498c      	ldr	r1, [pc, #560]	; (800acb8 <HAL_RCC_ClockConfig+0x260>)
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	4313      	orrs	r3, r2
 800aa8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa8e:	4b8a      	ldr	r3, [pc, #552]	; (800acb8 <HAL_RCC_ClockConfig+0x260>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f003 030f 	and.w	r3, r3, #15
 800aa96:	683a      	ldr	r2, [r7, #0]
 800aa98:	429a      	cmp	r2, r3
 800aa9a:	d001      	beq.n	800aaa0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e106      	b.n	800acae <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f003 0301 	and.w	r3, r3, #1
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d073      	beq.n	800ab94 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	685b      	ldr	r3, [r3, #4]
 800aab0:	2b03      	cmp	r3, #3
 800aab2:	d129      	bne.n	800ab08 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800aab4:	4b81      	ldr	r3, [pc, #516]	; (800acbc <HAL_RCC_ClockConfig+0x264>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d101      	bne.n	800aac4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800aac0:	2301      	movs	r3, #1
 800aac2:	e0f4      	b.n	800acae <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800aac4:	f000 f972 	bl	800adac <RCC_GetSysClockFreqFromPLLSource>
 800aac8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800aaca:	693b      	ldr	r3, [r7, #16]
 800aacc:	4a7c      	ldr	r2, [pc, #496]	; (800acc0 <HAL_RCC_ClockConfig+0x268>)
 800aace:	4293      	cmp	r3, r2
 800aad0:	d93f      	bls.n	800ab52 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800aad2:	4b7a      	ldr	r3, [pc, #488]	; (800acbc <HAL_RCC_ClockConfig+0x264>)
 800aad4:	689b      	ldr	r3, [r3, #8]
 800aad6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d009      	beq.n	800aaf2 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d033      	beq.n	800ab52 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d12f      	bne.n	800ab52 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800aaf2:	4b72      	ldr	r3, [pc, #456]	; (800acbc <HAL_RCC_ClockConfig+0x264>)
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800aafa:	4a70      	ldr	r2, [pc, #448]	; (800acbc <HAL_RCC_ClockConfig+0x264>)
 800aafc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab00:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800ab02:	2380      	movs	r3, #128	; 0x80
 800ab04:	617b      	str	r3, [r7, #20]
 800ab06:	e024      	b.n	800ab52 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	685b      	ldr	r3, [r3, #4]
 800ab0c:	2b02      	cmp	r3, #2
 800ab0e:	d107      	bne.n	800ab20 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800ab10:	4b6a      	ldr	r3, [pc, #424]	; (800acbc <HAL_RCC_ClockConfig+0x264>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d109      	bne.n	800ab30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	e0c6      	b.n	800acae <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800ab20:	4b66      	ldr	r3, [pc, #408]	; (800acbc <HAL_RCC_ClockConfig+0x264>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d101      	bne.n	800ab30 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	e0be      	b.n	800acae <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800ab30:	f000 f8ce 	bl	800acd0 <HAL_RCC_GetSysClockFreq>
 800ab34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800ab36:	693b      	ldr	r3, [r7, #16]
 800ab38:	4a61      	ldr	r2, [pc, #388]	; (800acc0 <HAL_RCC_ClockConfig+0x268>)
 800ab3a:	4293      	cmp	r3, r2
 800ab3c:	d909      	bls.n	800ab52 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800ab3e:	4b5f      	ldr	r3, [pc, #380]	; (800acbc <HAL_RCC_ClockConfig+0x264>)
 800ab40:	689b      	ldr	r3, [r3, #8]
 800ab42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ab46:	4a5d      	ldr	r2, [pc, #372]	; (800acbc <HAL_RCC_ClockConfig+0x264>)
 800ab48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab4c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800ab4e:	2380      	movs	r3, #128	; 0x80
 800ab50:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800ab52:	4b5a      	ldr	r3, [pc, #360]	; (800acbc <HAL_RCC_ClockConfig+0x264>)
 800ab54:	689b      	ldr	r3, [r3, #8]
 800ab56:	f023 0203 	bic.w	r2, r3, #3
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	4957      	ldr	r1, [pc, #348]	; (800acbc <HAL_RCC_ClockConfig+0x264>)
 800ab60:	4313      	orrs	r3, r2
 800ab62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ab64:	f7fc fec4 	bl	80078f0 <HAL_GetTick>
 800ab68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab6a:	e00a      	b.n	800ab82 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ab6c:	f7fc fec0 	bl	80078f0 <HAL_GetTick>
 800ab70:	4602      	mov	r2, r0
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	1ad3      	subs	r3, r2, r3
 800ab76:	f241 3288 	movw	r2, #5000	; 0x1388
 800ab7a:	4293      	cmp	r3, r2
 800ab7c:	d901      	bls.n	800ab82 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800ab7e:	2303      	movs	r3, #3
 800ab80:	e095      	b.n	800acae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800ab82:	4b4e      	ldr	r3, [pc, #312]	; (800acbc <HAL_RCC_ClockConfig+0x264>)
 800ab84:	689b      	ldr	r3, [r3, #8]
 800ab86:	f003 020c 	and.w	r2, r3, #12
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	009b      	lsls	r3, r3, #2
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d1eb      	bne.n	800ab6c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	f003 0302 	and.w	r3, r3, #2
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d023      	beq.n	800abe8 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	f003 0304 	and.w	r3, r3, #4
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d005      	beq.n	800abb8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800abac:	4b43      	ldr	r3, [pc, #268]	; (800acbc <HAL_RCC_ClockConfig+0x264>)
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	4a42      	ldr	r2, [pc, #264]	; (800acbc <HAL_RCC_ClockConfig+0x264>)
 800abb2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800abb6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f003 0308 	and.w	r3, r3, #8
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d007      	beq.n	800abd4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800abc4:	4b3d      	ldr	r3, [pc, #244]	; (800acbc <HAL_RCC_ClockConfig+0x264>)
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800abcc:	4a3b      	ldr	r2, [pc, #236]	; (800acbc <HAL_RCC_ClockConfig+0x264>)
 800abce:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800abd2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800abd4:	4b39      	ldr	r3, [pc, #228]	; (800acbc <HAL_RCC_ClockConfig+0x264>)
 800abd6:	689b      	ldr	r3, [r3, #8]
 800abd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	689b      	ldr	r3, [r3, #8]
 800abe0:	4936      	ldr	r1, [pc, #216]	; (800acbc <HAL_RCC_ClockConfig+0x264>)
 800abe2:	4313      	orrs	r3, r2
 800abe4:	608b      	str	r3, [r1, #8]
 800abe6:	e008      	b.n	800abfa <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800abe8:	697b      	ldr	r3, [r7, #20]
 800abea:	2b80      	cmp	r3, #128	; 0x80
 800abec:	d105      	bne.n	800abfa <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800abee:	4b33      	ldr	r3, [pc, #204]	; (800acbc <HAL_RCC_ClockConfig+0x264>)
 800abf0:	689b      	ldr	r3, [r3, #8]
 800abf2:	4a32      	ldr	r2, [pc, #200]	; (800acbc <HAL_RCC_ClockConfig+0x264>)
 800abf4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800abf8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800abfa:	4b2f      	ldr	r3, [pc, #188]	; (800acb8 <HAL_RCC_ClockConfig+0x260>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	f003 030f 	and.w	r3, r3, #15
 800ac02:	683a      	ldr	r2, [r7, #0]
 800ac04:	429a      	cmp	r2, r3
 800ac06:	d21d      	bcs.n	800ac44 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ac08:	4b2b      	ldr	r3, [pc, #172]	; (800acb8 <HAL_RCC_ClockConfig+0x260>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f023 020f 	bic.w	r2, r3, #15
 800ac10:	4929      	ldr	r1, [pc, #164]	; (800acb8 <HAL_RCC_ClockConfig+0x260>)
 800ac12:	683b      	ldr	r3, [r7, #0]
 800ac14:	4313      	orrs	r3, r2
 800ac16:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800ac18:	f7fc fe6a 	bl	80078f0 <HAL_GetTick>
 800ac1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac1e:	e00a      	b.n	800ac36 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ac20:	f7fc fe66 	bl	80078f0 <HAL_GetTick>
 800ac24:	4602      	mov	r2, r0
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	1ad3      	subs	r3, r2, r3
 800ac2a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ac2e:	4293      	cmp	r3, r2
 800ac30:	d901      	bls.n	800ac36 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800ac32:	2303      	movs	r3, #3
 800ac34:	e03b      	b.n	800acae <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ac36:	4b20      	ldr	r3, [pc, #128]	; (800acb8 <HAL_RCC_ClockConfig+0x260>)
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	f003 030f 	and.w	r3, r3, #15
 800ac3e:	683a      	ldr	r2, [r7, #0]
 800ac40:	429a      	cmp	r2, r3
 800ac42:	d1ed      	bne.n	800ac20 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	f003 0304 	and.w	r3, r3, #4
 800ac4c:	2b00      	cmp	r3, #0
 800ac4e:	d008      	beq.n	800ac62 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800ac50:	4b1a      	ldr	r3, [pc, #104]	; (800acbc <HAL_RCC_ClockConfig+0x264>)
 800ac52:	689b      	ldr	r3, [r3, #8]
 800ac54:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	68db      	ldr	r3, [r3, #12]
 800ac5c:	4917      	ldr	r1, [pc, #92]	; (800acbc <HAL_RCC_ClockConfig+0x264>)
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	f003 0308 	and.w	r3, r3, #8
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d009      	beq.n	800ac82 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800ac6e:	4b13      	ldr	r3, [pc, #76]	; (800acbc <HAL_RCC_ClockConfig+0x264>)
 800ac70:	689b      	ldr	r3, [r3, #8]
 800ac72:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	691b      	ldr	r3, [r3, #16]
 800ac7a:	00db      	lsls	r3, r3, #3
 800ac7c:	490f      	ldr	r1, [pc, #60]	; (800acbc <HAL_RCC_ClockConfig+0x264>)
 800ac7e:	4313      	orrs	r3, r2
 800ac80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800ac82:	f000 f825 	bl	800acd0 <HAL_RCC_GetSysClockFreq>
 800ac86:	4601      	mov	r1, r0
 800ac88:	4b0c      	ldr	r3, [pc, #48]	; (800acbc <HAL_RCC_ClockConfig+0x264>)
 800ac8a:	689b      	ldr	r3, [r3, #8]
 800ac8c:	091b      	lsrs	r3, r3, #4
 800ac8e:	f003 030f 	and.w	r3, r3, #15
 800ac92:	4a0c      	ldr	r2, [pc, #48]	; (800acc4 <HAL_RCC_ClockConfig+0x26c>)
 800ac94:	5cd3      	ldrb	r3, [r2, r3]
 800ac96:	f003 031f 	and.w	r3, r3, #31
 800ac9a:	fa21 f303 	lsr.w	r3, r1, r3
 800ac9e:	4a0a      	ldr	r2, [pc, #40]	; (800acc8 <HAL_RCC_ClockConfig+0x270>)
 800aca0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800aca2:	4b0a      	ldr	r3, [pc, #40]	; (800accc <HAL_RCC_ClockConfig+0x274>)
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7fc fdd6 	bl	8007858 <HAL_InitTick>
 800acac:	4603      	mov	r3, r0
}
 800acae:	4618      	mov	r0, r3
 800acb0:	3718      	adds	r7, #24
 800acb2:	46bd      	mov	sp, r7
 800acb4:	bd80      	pop	{r7, pc}
 800acb6:	bf00      	nop
 800acb8:	40022000 	.word	0x40022000
 800acbc:	40021000 	.word	0x40021000
 800acc0:	04c4b400 	.word	0x04c4b400
 800acc4:	08010ecc 	.word	0x08010ecc
 800acc8:	20000ca4 	.word	0x20000ca4
 800accc:	20000ca8 	.word	0x20000ca8

0800acd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800acd0:	b480      	push	{r7}
 800acd2:	b087      	sub	sp, #28
 800acd4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800acd6:	4b2c      	ldr	r3, [pc, #176]	; (800ad88 <HAL_RCC_GetSysClockFreq+0xb8>)
 800acd8:	689b      	ldr	r3, [r3, #8]
 800acda:	f003 030c 	and.w	r3, r3, #12
 800acde:	2b04      	cmp	r3, #4
 800ace0:	d102      	bne.n	800ace8 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800ace2:	4b2a      	ldr	r3, [pc, #168]	; (800ad8c <HAL_RCC_GetSysClockFreq+0xbc>)
 800ace4:	613b      	str	r3, [r7, #16]
 800ace6:	e047      	b.n	800ad78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800ace8:	4b27      	ldr	r3, [pc, #156]	; (800ad88 <HAL_RCC_GetSysClockFreq+0xb8>)
 800acea:	689b      	ldr	r3, [r3, #8]
 800acec:	f003 030c 	and.w	r3, r3, #12
 800acf0:	2b08      	cmp	r3, #8
 800acf2:	d102      	bne.n	800acfa <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800acf4:	4b26      	ldr	r3, [pc, #152]	; (800ad90 <HAL_RCC_GetSysClockFreq+0xc0>)
 800acf6:	613b      	str	r3, [r7, #16]
 800acf8:	e03e      	b.n	800ad78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800acfa:	4b23      	ldr	r3, [pc, #140]	; (800ad88 <HAL_RCC_GetSysClockFreq+0xb8>)
 800acfc:	689b      	ldr	r3, [r3, #8]
 800acfe:	f003 030c 	and.w	r3, r3, #12
 800ad02:	2b0c      	cmp	r3, #12
 800ad04:	d136      	bne.n	800ad74 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800ad06:	4b20      	ldr	r3, [pc, #128]	; (800ad88 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ad08:	68db      	ldr	r3, [r3, #12]
 800ad0a:	f003 0303 	and.w	r3, r3, #3
 800ad0e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800ad10:	4b1d      	ldr	r3, [pc, #116]	; (800ad88 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ad12:	68db      	ldr	r3, [r3, #12]
 800ad14:	091b      	lsrs	r3, r3, #4
 800ad16:	f003 030f 	and.w	r3, r3, #15
 800ad1a:	3301      	adds	r3, #1
 800ad1c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	2b03      	cmp	r3, #3
 800ad22:	d10c      	bne.n	800ad3e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ad24:	4a1a      	ldr	r2, [pc, #104]	; (800ad90 <HAL_RCC_GetSysClockFreq+0xc0>)
 800ad26:	68bb      	ldr	r3, [r7, #8]
 800ad28:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad2c:	4a16      	ldr	r2, [pc, #88]	; (800ad88 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ad2e:	68d2      	ldr	r2, [r2, #12]
 800ad30:	0a12      	lsrs	r2, r2, #8
 800ad32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ad36:	fb02 f303 	mul.w	r3, r2, r3
 800ad3a:	617b      	str	r3, [r7, #20]
      break;
 800ad3c:	e00c      	b.n	800ad58 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800ad3e:	4a13      	ldr	r2, [pc, #76]	; (800ad8c <HAL_RCC_GetSysClockFreq+0xbc>)
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad46:	4a10      	ldr	r2, [pc, #64]	; (800ad88 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ad48:	68d2      	ldr	r2, [r2, #12]
 800ad4a:	0a12      	lsrs	r2, r2, #8
 800ad4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ad50:	fb02 f303 	mul.w	r3, r2, r3
 800ad54:	617b      	str	r3, [r7, #20]
      break;
 800ad56:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ad58:	4b0b      	ldr	r3, [pc, #44]	; (800ad88 <HAL_RCC_GetSysClockFreq+0xb8>)
 800ad5a:	68db      	ldr	r3, [r3, #12]
 800ad5c:	0e5b      	lsrs	r3, r3, #25
 800ad5e:	f003 0303 	and.w	r3, r3, #3
 800ad62:	3301      	adds	r3, #1
 800ad64:	005b      	lsls	r3, r3, #1
 800ad66:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800ad68:	697a      	ldr	r2, [r7, #20]
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad70:	613b      	str	r3, [r7, #16]
 800ad72:	e001      	b.n	800ad78 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800ad74:	2300      	movs	r3, #0
 800ad76:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800ad78:	693b      	ldr	r3, [r7, #16]
}
 800ad7a:	4618      	mov	r0, r3
 800ad7c:	371c      	adds	r7, #28
 800ad7e:	46bd      	mov	sp, r7
 800ad80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad84:	4770      	bx	lr
 800ad86:	bf00      	nop
 800ad88:	40021000 	.word	0x40021000
 800ad8c:	00f42400 	.word	0x00f42400
 800ad90:	007a1200 	.word	0x007a1200

0800ad94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ad94:	b480      	push	{r7}
 800ad96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ad98:	4b03      	ldr	r3, [pc, #12]	; (800ada8 <HAL_RCC_GetHCLKFreq+0x14>)
 800ad9a:	681b      	ldr	r3, [r3, #0]
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada4:	4770      	bx	lr
 800ada6:	bf00      	nop
 800ada8:	20000ca4 	.word	0x20000ca4

0800adac <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800adac:	b480      	push	{r7}
 800adae:	b087      	sub	sp, #28
 800adb0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800adb2:	4b1e      	ldr	r3, [pc, #120]	; (800ae2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800adb4:	68db      	ldr	r3, [r3, #12]
 800adb6:	f003 0303 	and.w	r3, r3, #3
 800adba:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800adbc:	4b1b      	ldr	r3, [pc, #108]	; (800ae2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800adbe:	68db      	ldr	r3, [r3, #12]
 800adc0:	091b      	lsrs	r3, r3, #4
 800adc2:	f003 030f 	and.w	r3, r3, #15
 800adc6:	3301      	adds	r3, #1
 800adc8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	2b03      	cmp	r3, #3
 800adce:	d10c      	bne.n	800adea <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800add0:	4a17      	ldr	r2, [pc, #92]	; (800ae30 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	fbb2 f3f3 	udiv	r3, r2, r3
 800add8:	4a14      	ldr	r2, [pc, #80]	; (800ae2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800adda:	68d2      	ldr	r2, [r2, #12]
 800addc:	0a12      	lsrs	r2, r2, #8
 800adde:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800ade2:	fb02 f303 	mul.w	r3, r2, r3
 800ade6:	617b      	str	r3, [r7, #20]
    break;
 800ade8:	e00c      	b.n	800ae04 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800adea:	4a12      	ldr	r2, [pc, #72]	; (800ae34 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	fbb2 f3f3 	udiv	r3, r2, r3
 800adf2:	4a0e      	ldr	r2, [pc, #56]	; (800ae2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800adf4:	68d2      	ldr	r2, [r2, #12]
 800adf6:	0a12      	lsrs	r2, r2, #8
 800adf8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800adfc:	fb02 f303 	mul.w	r3, r2, r3
 800ae00:	617b      	str	r3, [r7, #20]
    break;
 800ae02:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800ae04:	4b09      	ldr	r3, [pc, #36]	; (800ae2c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800ae06:	68db      	ldr	r3, [r3, #12]
 800ae08:	0e5b      	lsrs	r3, r3, #25
 800ae0a:	f003 0303 	and.w	r3, r3, #3
 800ae0e:	3301      	adds	r3, #1
 800ae10:	005b      	lsls	r3, r3, #1
 800ae12:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800ae14:	697a      	ldr	r2, [r7, #20]
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	fbb2 f3f3 	udiv	r3, r2, r3
 800ae1c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800ae1e:	687b      	ldr	r3, [r7, #4]
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	371c      	adds	r7, #28
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr
 800ae2c:	40021000 	.word	0x40021000
 800ae30:	007a1200 	.word	0x007a1200
 800ae34:	00f42400 	.word	0x00f42400

0800ae38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ae38:	b580      	push	{r7, lr}
 800ae3a:	b086      	sub	sp, #24
 800ae3c:	af00      	add	r7, sp, #0
 800ae3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ae40:	2300      	movs	r3, #0
 800ae42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ae44:	2300      	movs	r3, #0
 800ae46:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	f000 8098 	beq.w	800af86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800ae56:	2300      	movs	r3, #0
 800ae58:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800ae5a:	4b43      	ldr	r3, [pc, #268]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ae5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d10d      	bne.n	800ae82 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ae66:	4b40      	ldr	r3, [pc, #256]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ae68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae6a:	4a3f      	ldr	r2, [pc, #252]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ae6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ae70:	6593      	str	r3, [r2, #88]	; 0x58
 800ae72:	4b3d      	ldr	r3, [pc, #244]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800ae74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ae7a:	60bb      	str	r3, [r7, #8]
 800ae7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800ae7e:	2301      	movs	r3, #1
 800ae80:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae82:	4b3a      	ldr	r3, [pc, #232]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	4a39      	ldr	r2, [pc, #228]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800ae88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800ae8c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800ae8e:	f7fc fd2f 	bl	80078f0 <HAL_GetTick>
 800ae92:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae94:	e009      	b.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ae96:	f7fc fd2b 	bl	80078f0 <HAL_GetTick>
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	1ad3      	subs	r3, r2, r3
 800aea0:	2b02      	cmp	r3, #2
 800aea2:	d902      	bls.n	800aeaa <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800aea4:	2303      	movs	r3, #3
 800aea6:	74fb      	strb	r3, [r7, #19]
        break;
 800aea8:	e005      	b.n	800aeb6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aeaa:	4b30      	ldr	r3, [pc, #192]	; (800af6c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d0ef      	beq.n	800ae96 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800aeb6:	7cfb      	ldrb	r3, [r7, #19]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d159      	bne.n	800af70 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800aebc:	4b2a      	ldr	r3, [pc, #168]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aec6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800aec8:	697b      	ldr	r3, [r7, #20]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d01e      	beq.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aed2:	697a      	ldr	r2, [r7, #20]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d019      	beq.n	800af0c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800aed8:	4b23      	ldr	r3, [pc, #140]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aeda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aede:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800aee2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800aee4:	4b20      	ldr	r3, [pc, #128]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aee6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeea:	4a1f      	ldr	r2, [pc, #124]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aeec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aef0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aef4:	4b1c      	ldr	r3, [pc, #112]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aefa:	4a1b      	ldr	r2, [pc, #108]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800aefc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800af04:	4a18      	ldr	r2, [pc, #96]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800af0c:	697b      	ldr	r3, [r7, #20]
 800af0e:	f003 0301 	and.w	r3, r3, #1
 800af12:	2b00      	cmp	r3, #0
 800af14:	d016      	beq.n	800af44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800af16:	f7fc fceb 	bl	80078f0 <HAL_GetTick>
 800af1a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800af1c:	e00b      	b.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af1e:	f7fc fce7 	bl	80078f0 <HAL_GetTick>
 800af22:	4602      	mov	r2, r0
 800af24:	68fb      	ldr	r3, [r7, #12]
 800af26:	1ad3      	subs	r3, r2, r3
 800af28:	f241 3288 	movw	r2, #5000	; 0x1388
 800af2c:	4293      	cmp	r3, r2
 800af2e:	d902      	bls.n	800af36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800af30:	2303      	movs	r3, #3
 800af32:	74fb      	strb	r3, [r7, #19]
            break;
 800af34:	e006      	b.n	800af44 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800af36:	4b0c      	ldr	r3, [pc, #48]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800af38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af3c:	f003 0302 	and.w	r3, r3, #2
 800af40:	2b00      	cmp	r3, #0
 800af42:	d0ec      	beq.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800af44:	7cfb      	ldrb	r3, [r7, #19]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d10b      	bne.n	800af62 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800af4a:	4b07      	ldr	r3, [pc, #28]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800af4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af50:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af58:	4903      	ldr	r1, [pc, #12]	; (800af68 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800af5a:	4313      	orrs	r3, r2
 800af5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800af60:	e008      	b.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800af62:	7cfb      	ldrb	r3, [r7, #19]
 800af64:	74bb      	strb	r3, [r7, #18]
 800af66:	e005      	b.n	800af74 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800af68:	40021000 	.word	0x40021000
 800af6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af70:	7cfb      	ldrb	r3, [r7, #19]
 800af72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800af74:	7c7b      	ldrb	r3, [r7, #17]
 800af76:	2b01      	cmp	r3, #1
 800af78:	d105      	bne.n	800af86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800af7a:	4baf      	ldr	r3, [pc, #700]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800af7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800af7e:	4aae      	ldr	r2, [pc, #696]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800af80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800af84:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f003 0301 	and.w	r3, r3, #1
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d00a      	beq.n	800afa8 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800af92:	4ba9      	ldr	r3, [pc, #676]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800af94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800af98:	f023 0203 	bic.w	r2, r3, #3
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	49a5      	ldr	r1, [pc, #660]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800afa2:	4313      	orrs	r3, r2
 800afa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f003 0302 	and.w	r3, r3, #2
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d00a      	beq.n	800afca <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800afb4:	4ba0      	ldr	r3, [pc, #640]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800afb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afba:	f023 020c 	bic.w	r2, r3, #12
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	689b      	ldr	r3, [r3, #8]
 800afc2:	499d      	ldr	r1, [pc, #628]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800afc4:	4313      	orrs	r3, r2
 800afc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f003 0304 	and.w	r3, r3, #4
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d00a      	beq.n	800afec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800afd6:	4b98      	ldr	r3, [pc, #608]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800afd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800afdc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	68db      	ldr	r3, [r3, #12]
 800afe4:	4994      	ldr	r1, [pc, #592]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800afe6:	4313      	orrs	r3, r2
 800afe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	f003 0308 	and.w	r3, r3, #8
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d00a      	beq.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800aff8:	4b8f      	ldr	r3, [pc, #572]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800affa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800affe:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	691b      	ldr	r3, [r3, #16]
 800b006:	498c      	ldr	r1, [pc, #560]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b008:	4313      	orrs	r3, r2
 800b00a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f003 0310 	and.w	r3, r3, #16
 800b016:	2b00      	cmp	r3, #0
 800b018:	d00a      	beq.n	800b030 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800b01a:	4b87      	ldr	r3, [pc, #540]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b01c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b020:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	695b      	ldr	r3, [r3, #20]
 800b028:	4983      	ldr	r1, [pc, #524]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b02a:	4313      	orrs	r3, r2
 800b02c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	f003 0320 	and.w	r3, r3, #32
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d00a      	beq.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b03c:	4b7e      	ldr	r3, [pc, #504]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b03e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b042:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	699b      	ldr	r3, [r3, #24]
 800b04a:	497b      	ldr	r1, [pc, #492]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b04c:	4313      	orrs	r3, r2
 800b04e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d00a      	beq.n	800b074 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800b05e:	4b76      	ldr	r3, [pc, #472]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b064:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	69db      	ldr	r3, [r3, #28]
 800b06c:	4972      	ldr	r1, [pc, #456]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b06e:	4313      	orrs	r3, r2
 800b070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d00a      	beq.n	800b096 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800b080:	4b6d      	ldr	r3, [pc, #436]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b086:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	6a1b      	ldr	r3, [r3, #32]
 800b08e:	496a      	ldr	r1, [pc, #424]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b090:	4313      	orrs	r3, r2
 800b092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d00a      	beq.n	800b0b8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800b0a2:	4b65      	ldr	r3, [pc, #404]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b0a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0b0:	4961      	ldr	r1, [pc, #388]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b0b2:	4313      	orrs	r3, r2
 800b0b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	681b      	ldr	r3, [r3, #0]
 800b0bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d00a      	beq.n	800b0da <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b0c4:	4b5c      	ldr	r3, [pc, #368]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b0c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b0ca:	f023 0203 	bic.w	r2, r3, #3
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d2:	4959      	ldr	r1, [pc, #356]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b0d4:	4313      	orrs	r3, r2
 800b0d6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d00a      	beq.n	800b0fc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b0e6:	4b54      	ldr	r3, [pc, #336]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b0e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b0ec:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f4:	4950      	ldr	r1, [pc, #320]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b104:	2b00      	cmp	r3, #0
 800b106:	d015      	beq.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b108:	4b4b      	ldr	r3, [pc, #300]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b10a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b10e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b116:	4948      	ldr	r1, [pc, #288]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b118:	4313      	orrs	r3, r2
 800b11a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b122:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b126:	d105      	bne.n	800b134 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b128:	4b43      	ldr	r3, [pc, #268]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b12a:	68db      	ldr	r3, [r3, #12]
 800b12c:	4a42      	ldr	r2, [pc, #264]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b12e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b132:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d015      	beq.n	800b16c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800b140:	4b3d      	ldr	r3, [pc, #244]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b146:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b14e:	493a      	ldr	r1, [pc, #232]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b150:	4313      	orrs	r3, r2
 800b152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b15a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b15e:	d105      	bne.n	800b16c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b160:	4b35      	ldr	r3, [pc, #212]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	4a34      	ldr	r2, [pc, #208]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b166:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b16a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b174:	2b00      	cmp	r3, #0
 800b176:	d015      	beq.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b178:	4b2f      	ldr	r3, [pc, #188]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b17a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b17e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b186:	492c      	ldr	r1, [pc, #176]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b188:	4313      	orrs	r3, r2
 800b18a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b192:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b196:	d105      	bne.n	800b1a4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b198:	4b27      	ldr	r3, [pc, #156]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b19a:	68db      	ldr	r3, [r3, #12]
 800b19c:	4a26      	ldr	r2, [pc, #152]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b19e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b1a2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d015      	beq.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b1b0:	4b21      	ldr	r3, [pc, #132]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b1b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1be:	491e      	ldr	r1, [pc, #120]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b1c0:	4313      	orrs	r3, r2
 800b1c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800b1c6:	687b      	ldr	r3, [r7, #4]
 800b1c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b1ce:	d105      	bne.n	800b1dc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b1d0:	4b19      	ldr	r3, [pc, #100]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b1d2:	68db      	ldr	r3, [r3, #12]
 800b1d4:	4a18      	ldr	r2, [pc, #96]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b1d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b1da:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b1e4:	2b00      	cmp	r3, #0
 800b1e6:	d015      	beq.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b1e8:	4b13      	ldr	r3, [pc, #76]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b1ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b1ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1f6:	4910      	ldr	r1, [pc, #64]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b1f8:	4313      	orrs	r3, r2
 800b1fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b202:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b206:	d105      	bne.n	800b214 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b208:	4b0b      	ldr	r3, [pc, #44]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b20a:	68db      	ldr	r3, [r3, #12]
 800b20c:	4a0a      	ldr	r2, [pc, #40]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b20e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b212:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d018      	beq.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800b220:	4b05      	ldr	r3, [pc, #20]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b226:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b22e:	4902      	ldr	r1, [pc, #8]	; (800b238 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800b230:	4313      	orrs	r3, r2
 800b232:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800b236:	e001      	b.n	800b23c <HAL_RCCEx_PeriphCLKConfig+0x404>
 800b238:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b240:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b244:	d105      	bne.n	800b252 <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b246:	4b21      	ldr	r3, [pc, #132]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b248:	68db      	ldr	r3, [r3, #12]
 800b24a:	4a20      	ldr	r2, [pc, #128]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b24c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b250:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	681b      	ldr	r3, [r3, #0]
 800b256:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d015      	beq.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800b25e:	4b1b      	ldr	r3, [pc, #108]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b264:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b26c:	4917      	ldr	r1, [pc, #92]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b26e:	4313      	orrs	r3, r2
 800b270:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b27c:	d105      	bne.n	800b28a <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800b27e:	4b13      	ldr	r3, [pc, #76]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b280:	68db      	ldr	r3, [r3, #12]
 800b282:	4a12      	ldr	r2, [pc, #72]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b288:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b292:	2b00      	cmp	r3, #0
 800b294:	d015      	beq.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b296:	4b0d      	ldr	r3, [pc, #52]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b298:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b29c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2a4:	4909      	ldr	r1, [pc, #36]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b2b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b2b4:	d105      	bne.n	800b2c2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800b2b6:	4b05      	ldr	r3, [pc, #20]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b2b8:	68db      	ldr	r3, [r3, #12]
 800b2ba:	4a04      	ldr	r2, [pc, #16]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x494>)
 800b2bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b2c0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800b2c2:	7cbb      	ldrb	r3, [r7, #18]
}
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	3718      	adds	r7, #24
 800b2c8:	46bd      	mov	sp, r7
 800b2ca:	bd80      	pop	{r7, pc}
 800b2cc:	40021000 	.word	0x40021000

0800b2d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b084      	sub	sp, #16
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d101      	bne.n	800b2e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b2de:	2301      	movs	r3, #1
 800b2e0:	e084      	b.n	800b3ec <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	d106      	bne.n	800b302 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b2fc:	6878      	ldr	r0, [r7, #4]
 800b2fe:	f7fb fcbd 	bl	8006c7c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2202      	movs	r2, #2
 800b306:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b318:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	68db      	ldr	r3, [r3, #12]
 800b31e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b322:	d902      	bls.n	800b32a <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800b324:	2300      	movs	r3, #0
 800b326:	60fb      	str	r3, [r7, #12]
 800b328:	e002      	b.n	800b330 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800b32a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b32e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	68db      	ldr	r3, [r3, #12]
 800b334:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800b338:	d007      	beq.n	800b34a <HAL_SPI_Init+0x7a>
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	68db      	ldr	r3, [r3, #12]
 800b33e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b342:	d002      	beq.n	800b34a <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	2200      	movs	r2, #0
 800b348:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d10b      	bne.n	800b36a <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800b35a:	d903      	bls.n	800b364 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2202      	movs	r2, #2
 800b360:	631a      	str	r2, [r3, #48]	; 0x30
 800b362:	e002      	b.n	800b36a <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2201      	movs	r2, #1
 800b368:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	685a      	ldr	r2, [r3, #4]
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	689b      	ldr	r3, [r3, #8]
 800b372:	431a      	orrs	r2, r3
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	691b      	ldr	r3, [r3, #16]
 800b378:	431a      	orrs	r2, r3
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	695b      	ldr	r3, [r3, #20]
 800b37e:	431a      	orrs	r2, r3
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	699b      	ldr	r3, [r3, #24]
 800b384:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b388:	431a      	orrs	r2, r3
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	69db      	ldr	r3, [r3, #28]
 800b38e:	431a      	orrs	r2, r3
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6a1b      	ldr	r3, [r3, #32]
 800b394:	ea42 0103 	orr.w	r1, r2, r3
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	430a      	orrs	r2, r1
 800b3a2:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	699b      	ldr	r3, [r3, #24]
 800b3a8:	0c1b      	lsrs	r3, r3, #16
 800b3aa:	f003 0204 	and.w	r2, r3, #4
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b2:	431a      	orrs	r2, r3
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3b8:	431a      	orrs	r2, r3
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	68db      	ldr	r3, [r3, #12]
 800b3be:	ea42 0103 	orr.w	r1, r2, r3
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	68fa      	ldr	r2, [r7, #12]
 800b3c8:	430a      	orrs	r2, r1
 800b3ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	69da      	ldr	r2, [r3, #28]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b3da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2200      	movs	r2, #0
 800b3e0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2201      	movs	r2, #1
 800b3e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800b3ea:	2300      	movs	r3, #0
}
 800b3ec:	4618      	mov	r0, r3
 800b3ee:	3710      	adds	r7, #16
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d101      	bne.n	800b406 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b402:	2301      	movs	r3, #1
 800b404:	e049      	b.n	800b49a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d106      	bne.n	800b420 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f7fc f916 	bl	800764c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	2202      	movs	r2, #2
 800b424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681a      	ldr	r2, [r3, #0]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	3304      	adds	r3, #4
 800b430:	4619      	mov	r1, r3
 800b432:	4610      	mov	r0, r2
 800b434:	f000 fc52 	bl	800bcdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	2201      	movs	r2, #1
 800b43c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2201      	movs	r2, #1
 800b444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2201      	movs	r2, #1
 800b44c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2201      	movs	r2, #1
 800b454:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	2201      	movs	r2, #1
 800b45c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2201      	movs	r2, #1
 800b464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	2201      	movs	r2, #1
 800b46c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2201      	movs	r2, #1
 800b474:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	2201      	movs	r2, #1
 800b47c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	2201      	movs	r2, #1
 800b484:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2201      	movs	r2, #1
 800b48c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2201      	movs	r2, #1
 800b494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b498:	2300      	movs	r3, #0
}
 800b49a:	4618      	mov	r0, r3
 800b49c:	3708      	adds	r7, #8
 800b49e:	46bd      	mov	sp, r7
 800b4a0:	bd80      	pop	{r7, pc}
	...

0800b4a4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b4a4:	b480      	push	{r7}
 800b4a6:	b085      	sub	sp, #20
 800b4a8:	af00      	add	r7, sp, #0
 800b4aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	2b01      	cmp	r3, #1
 800b4b6:	d001      	beq.n	800b4bc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800b4b8:	2301      	movs	r3, #1
 800b4ba:	e019      	b.n	800b4f0 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2202      	movs	r2, #2
 800b4c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	689a      	ldr	r2, [r3, #8]
 800b4ca:	4b0c      	ldr	r3, [pc, #48]	; (800b4fc <HAL_TIM_Base_Start+0x58>)
 800b4cc:	4013      	ands	r3, r2
 800b4ce:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	2b06      	cmp	r3, #6
 800b4d4:	d00b      	beq.n	800b4ee <HAL_TIM_Base_Start+0x4a>
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4dc:	d007      	beq.n	800b4ee <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 800b4de:	687b      	ldr	r3, [r7, #4]
 800b4e0:	681b      	ldr	r3, [r3, #0]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f042 0201 	orr.w	r2, r2, #1
 800b4ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b4ee:	2300      	movs	r3, #0
}
 800b4f0:	4618      	mov	r0, r3
 800b4f2:	3714      	adds	r7, #20
 800b4f4:	46bd      	mov	sp, r7
 800b4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fa:	4770      	bx	lr
 800b4fc:	00010007 	.word	0x00010007

0800b500 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b500:	b480      	push	{r7}
 800b502:	b085      	sub	sp, #20
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b50e:	b2db      	uxtb	r3, r3
 800b510:	2b01      	cmp	r3, #1
 800b512:	d001      	beq.n	800b518 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b514:	2301      	movs	r3, #1
 800b516:	e021      	b.n	800b55c <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2202      	movs	r2, #2
 800b51c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	68da      	ldr	r2, [r3, #12]
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f042 0201 	orr.w	r2, r2, #1
 800b52e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	689a      	ldr	r2, [r3, #8]
 800b536:	4b0c      	ldr	r3, [pc, #48]	; (800b568 <HAL_TIM_Base_Start_IT+0x68>)
 800b538:	4013      	ands	r3, r2
 800b53a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	2b06      	cmp	r3, #6
 800b540:	d00b      	beq.n	800b55a <HAL_TIM_Base_Start_IT+0x5a>
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b548:	d007      	beq.n	800b55a <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	f042 0201 	orr.w	r2, r2, #1
 800b558:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b55a:	2300      	movs	r3, #0
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3714      	adds	r7, #20
 800b560:	46bd      	mov	sp, r7
 800b562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b566:	4770      	bx	lr
 800b568:	00010007 	.word	0x00010007

0800b56c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b083      	sub	sp, #12
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	68da      	ldr	r2, [r3, #12]
 800b57a:	687b      	ldr	r3, [r7, #4]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	f022 0201 	bic.w	r2, r2, #1
 800b582:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	6a1a      	ldr	r2, [r3, #32]
 800b58a:	f241 1311 	movw	r3, #4369	; 0x1111
 800b58e:	4013      	ands	r3, r2
 800b590:	2b00      	cmp	r3, #0
 800b592:	d10f      	bne.n	800b5b4 <HAL_TIM_Base_Stop_IT+0x48>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	6a1a      	ldr	r2, [r3, #32]
 800b59a:	f244 4344 	movw	r3, #17476	; 0x4444
 800b59e:	4013      	ands	r3, r2
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d107      	bne.n	800b5b4 <HAL_TIM_Base_Stop_IT+0x48>
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	681a      	ldr	r2, [r3, #0]
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f022 0201 	bic.w	r2, r2, #1
 800b5b2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	2201      	movs	r2, #1
 800b5b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b5bc:	2300      	movs	r3, #0
}
 800b5be:	4618      	mov	r0, r3
 800b5c0:	370c      	adds	r7, #12
 800b5c2:	46bd      	mov	sp, r7
 800b5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5c8:	4770      	bx	lr

0800b5ca <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b5ca:	b580      	push	{r7, lr}
 800b5cc:	b086      	sub	sp, #24
 800b5ce:	af00      	add	r7, sp, #0
 800b5d0:	6078      	str	r0, [r7, #4]
 800b5d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d101      	bne.n	800b5de <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b5da:	2301      	movs	r3, #1
 800b5dc:	e097      	b.n	800b70e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d106      	bne.n	800b5f8 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f7fb ffce 	bl	8007594 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	2202      	movs	r2, #2
 800b5fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	689b      	ldr	r3, [r3, #8]
 800b606:	687a      	ldr	r2, [r7, #4]
 800b608:	6812      	ldr	r2, [r2, #0]
 800b60a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800b60e:	f023 0307 	bic.w	r3, r3, #7
 800b612:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681a      	ldr	r2, [r3, #0]
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	3304      	adds	r3, #4
 800b61c:	4619      	mov	r1, r3
 800b61e:	4610      	mov	r0, r2
 800b620:	f000 fb5c 	bl	800bcdc <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	689b      	ldr	r3, [r3, #8]
 800b62a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	699b      	ldr	r3, [r3, #24]
 800b632:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681b      	ldr	r3, [r3, #0]
 800b638:	6a1b      	ldr	r3, [r3, #32]
 800b63a:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	697a      	ldr	r2, [r7, #20]
 800b642:	4313      	orrs	r3, r2
 800b644:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b646:	693b      	ldr	r3, [r7, #16]
 800b648:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b64c:	f023 0303 	bic.w	r3, r3, #3
 800b650:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	689a      	ldr	r2, [r3, #8]
 800b656:	683b      	ldr	r3, [r7, #0]
 800b658:	699b      	ldr	r3, [r3, #24]
 800b65a:	021b      	lsls	r3, r3, #8
 800b65c:	4313      	orrs	r3, r2
 800b65e:	693a      	ldr	r2, [r7, #16]
 800b660:	4313      	orrs	r3, r2
 800b662:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b664:	693b      	ldr	r3, [r7, #16]
 800b666:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b66a:	f023 030c 	bic.w	r3, r3, #12
 800b66e:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b670:	693b      	ldr	r3, [r7, #16]
 800b672:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b676:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b67a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b67c:	683b      	ldr	r3, [r7, #0]
 800b67e:	68da      	ldr	r2, [r3, #12]
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	69db      	ldr	r3, [r3, #28]
 800b684:	021b      	lsls	r3, r3, #8
 800b686:	4313      	orrs	r3, r2
 800b688:	693a      	ldr	r2, [r7, #16]
 800b68a:	4313      	orrs	r3, r2
 800b68c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	691b      	ldr	r3, [r3, #16]
 800b692:	011a      	lsls	r2, r3, #4
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	6a1b      	ldr	r3, [r3, #32]
 800b698:	031b      	lsls	r3, r3, #12
 800b69a:	4313      	orrs	r3, r2
 800b69c:	693a      	ldr	r2, [r7, #16]
 800b69e:	4313      	orrs	r3, r2
 800b6a0:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800b6a8:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800b6b0:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800b6b2:	683b      	ldr	r3, [r7, #0]
 800b6b4:	685a      	ldr	r2, [r3, #4]
 800b6b6:	683b      	ldr	r3, [r7, #0]
 800b6b8:	695b      	ldr	r3, [r3, #20]
 800b6ba:	011b      	lsls	r3, r3, #4
 800b6bc:	4313      	orrs	r3, r2
 800b6be:	68fa      	ldr	r2, [r7, #12]
 800b6c0:	4313      	orrs	r3, r2
 800b6c2:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	697a      	ldr	r2, [r7, #20]
 800b6ca:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	693a      	ldr	r2, [r7, #16]
 800b6d2:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	68fa      	ldr	r2, [r7, #12]
 800b6da:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2201      	movs	r2, #1
 800b700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2201      	movs	r2, #1
 800b708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b70c:	2300      	movs	r3, #0
}
 800b70e:	4618      	mov	r0, r3
 800b710:	3718      	adds	r7, #24
 800b712:	46bd      	mov	sp, r7
 800b714:	bd80      	pop	{r7, pc}

0800b716 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b716:	b580      	push	{r7, lr}
 800b718:	b082      	sub	sp, #8
 800b71a:	af00      	add	r7, sp, #0
 800b71c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	691b      	ldr	r3, [r3, #16]
 800b724:	f003 0302 	and.w	r3, r3, #2
 800b728:	2b02      	cmp	r3, #2
 800b72a:	d122      	bne.n	800b772 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	68db      	ldr	r3, [r3, #12]
 800b732:	f003 0302 	and.w	r3, r3, #2
 800b736:	2b02      	cmp	r3, #2
 800b738:	d11b      	bne.n	800b772 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	f06f 0202 	mvn.w	r2, #2
 800b742:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2201      	movs	r2, #1
 800b748:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	699b      	ldr	r3, [r3, #24]
 800b750:	f003 0303 	and.w	r3, r3, #3
 800b754:	2b00      	cmp	r3, #0
 800b756:	d003      	beq.n	800b760 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	f000 faa1 	bl	800bca0 <HAL_TIM_IC_CaptureCallback>
 800b75e:	e005      	b.n	800b76c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f000 fa93 	bl	800bc8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f000 faa4 	bl	800bcb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b76c:	687b      	ldr	r3, [r7, #4]
 800b76e:	2200      	movs	r2, #0
 800b770:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	691b      	ldr	r3, [r3, #16]
 800b778:	f003 0304 	and.w	r3, r3, #4
 800b77c:	2b04      	cmp	r3, #4
 800b77e:	d122      	bne.n	800b7c6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	68db      	ldr	r3, [r3, #12]
 800b786:	f003 0304 	and.w	r3, r3, #4
 800b78a:	2b04      	cmp	r3, #4
 800b78c:	d11b      	bne.n	800b7c6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f06f 0204 	mvn.w	r2, #4
 800b796:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	2202      	movs	r2, #2
 800b79c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	699b      	ldr	r3, [r3, #24]
 800b7a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d003      	beq.n	800b7b4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	f000 fa77 	bl	800bca0 <HAL_TIM_IC_CaptureCallback>
 800b7b2:	e005      	b.n	800b7c0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	f000 fa69 	bl	800bc8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 fa7a 	bl	800bcb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	691b      	ldr	r3, [r3, #16]
 800b7cc:	f003 0308 	and.w	r3, r3, #8
 800b7d0:	2b08      	cmp	r3, #8
 800b7d2:	d122      	bne.n	800b81a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	68db      	ldr	r3, [r3, #12]
 800b7da:	f003 0308 	and.w	r3, r3, #8
 800b7de:	2b08      	cmp	r3, #8
 800b7e0:	d11b      	bne.n	800b81a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	f06f 0208 	mvn.w	r2, #8
 800b7ea:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	2204      	movs	r2, #4
 800b7f0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b7f2:	687b      	ldr	r3, [r7, #4]
 800b7f4:	681b      	ldr	r3, [r3, #0]
 800b7f6:	69db      	ldr	r3, [r3, #28]
 800b7f8:	f003 0303 	and.w	r3, r3, #3
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d003      	beq.n	800b808 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 fa4d 	bl	800bca0 <HAL_TIM_IC_CaptureCallback>
 800b806:	e005      	b.n	800b814 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b808:	6878      	ldr	r0, [r7, #4]
 800b80a:	f000 fa3f 	bl	800bc8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b80e:	6878      	ldr	r0, [r7, #4]
 800b810:	f000 fa50 	bl	800bcb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2200      	movs	r2, #0
 800b818:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	691b      	ldr	r3, [r3, #16]
 800b820:	f003 0310 	and.w	r3, r3, #16
 800b824:	2b10      	cmp	r3, #16
 800b826:	d122      	bne.n	800b86e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	68db      	ldr	r3, [r3, #12]
 800b82e:	f003 0310 	and.w	r3, r3, #16
 800b832:	2b10      	cmp	r3, #16
 800b834:	d11b      	bne.n	800b86e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f06f 0210 	mvn.w	r2, #16
 800b83e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2208      	movs	r2, #8
 800b844:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	69db      	ldr	r3, [r3, #28]
 800b84c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b850:	2b00      	cmp	r3, #0
 800b852:	d003      	beq.n	800b85c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b854:	6878      	ldr	r0, [r7, #4]
 800b856:	f000 fa23 	bl	800bca0 <HAL_TIM_IC_CaptureCallback>
 800b85a:	e005      	b.n	800b868 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b85c:	6878      	ldr	r0, [r7, #4]
 800b85e:	f000 fa15 	bl	800bc8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b862:	6878      	ldr	r0, [r7, #4]
 800b864:	f000 fa26 	bl	800bcb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2200      	movs	r2, #0
 800b86c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	691b      	ldr	r3, [r3, #16]
 800b874:	f003 0301 	and.w	r3, r3, #1
 800b878:	2b01      	cmp	r3, #1
 800b87a:	d10e      	bne.n	800b89a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	681b      	ldr	r3, [r3, #0]
 800b880:	68db      	ldr	r3, [r3, #12]
 800b882:	f003 0301 	and.w	r3, r3, #1
 800b886:	2b01      	cmp	r3, #1
 800b888:	d107      	bne.n	800b89a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	681b      	ldr	r3, [r3, #0]
 800b88e:	f06f 0201 	mvn.w	r2, #1
 800b892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f000 f9ef 	bl	800bc78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	691b      	ldr	r3, [r3, #16]
 800b8a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8a4:	2b80      	cmp	r3, #128	; 0x80
 800b8a6:	d10e      	bne.n	800b8c6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	681b      	ldr	r3, [r3, #0]
 800b8ac:	68db      	ldr	r3, [r3, #12]
 800b8ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8b2:	2b80      	cmp	r3, #128	; 0x80
 800b8b4:	d107      	bne.n	800b8c6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b8be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f000 fd5d 	bl	800c380 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	691b      	ldr	r3, [r3, #16]
 800b8cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b8d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8d4:	d10e      	bne.n	800b8f4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b8e0:	2b80      	cmp	r3, #128	; 0x80
 800b8e2:	d107      	bne.n	800b8f4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b8ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b8ee:	6878      	ldr	r0, [r7, #4]
 800b8f0:	f000 fd50 	bl	800c394 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	691b      	ldr	r3, [r3, #16]
 800b8fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8fe:	2b40      	cmp	r3, #64	; 0x40
 800b900:	d10e      	bne.n	800b920 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	68db      	ldr	r3, [r3, #12]
 800b908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b90c:	2b40      	cmp	r3, #64	; 0x40
 800b90e:	d107      	bne.n	800b920 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f000 f9d4 	bl	800bcc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	691b      	ldr	r3, [r3, #16]
 800b926:	f003 0320 	and.w	r3, r3, #32
 800b92a:	2b20      	cmp	r3, #32
 800b92c:	d10e      	bne.n	800b94c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	68db      	ldr	r3, [r3, #12]
 800b934:	f003 0320 	and.w	r3, r3, #32
 800b938:	2b20      	cmp	r3, #32
 800b93a:	d107      	bne.n	800b94c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	f06f 0220 	mvn.w	r2, #32
 800b944:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 fd10 	bl	800c36c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	691b      	ldr	r3, [r3, #16]
 800b952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b956:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b95a:	d10f      	bne.n	800b97c <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	68db      	ldr	r3, [r3, #12]
 800b962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b966:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b96a:	d107      	bne.n	800b97c <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800b974:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	f000 fd16 	bl	800c3a8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	691b      	ldr	r3, [r3, #16]
 800b982:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b986:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b98a:	d10f      	bne.n	800b9ac <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	68db      	ldr	r3, [r3, #12]
 800b992:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b996:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b99a:	d107      	bne.n	800b9ac <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800b9a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f000 fd08 	bl	800c3bc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	691b      	ldr	r3, [r3, #16]
 800b9b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b9b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b9ba:	d10f      	bne.n	800b9dc <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800b9bc:	687b      	ldr	r3, [r7, #4]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	68db      	ldr	r3, [r3, #12]
 800b9c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b9c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b9ca:	d107      	bne.n	800b9dc <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800b9d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 fcfa 	bl	800c3d0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	691b      	ldr	r3, [r3, #16]
 800b9e2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b9e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b9ea:	d10f      	bne.n	800ba0c <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	68db      	ldr	r3, [r3, #12]
 800b9f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b9f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b9fa:	d107      	bne.n	800ba0c <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800ba04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800ba06:	6878      	ldr	r0, [r7, #4]
 800ba08:	f000 fcec 	bl	800c3e4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ba0c:	bf00      	nop
 800ba0e:	3708      	adds	r7, #8
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ba14:	b580      	push	{r7, lr}
 800ba16:	b084      	sub	sp, #16
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba24:	2b01      	cmp	r3, #1
 800ba26:	d101      	bne.n	800ba2c <HAL_TIM_ConfigClockSource+0x18>
 800ba28:	2302      	movs	r3, #2
 800ba2a:	e0d2      	b.n	800bbd2 <HAL_TIM_ConfigClockSource+0x1be>
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2201      	movs	r2, #1
 800ba30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2202      	movs	r2, #2
 800ba38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	689b      	ldr	r3, [r3, #8]
 800ba42:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ba44:	68fb      	ldr	r3, [r7, #12]
 800ba46:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800ba4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ba4e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba56:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	68fa      	ldr	r2, [r7, #12]
 800ba5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba68:	f000 80a9 	beq.w	800bbbe <HAL_TIM_ConfigClockSource+0x1aa>
 800ba6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba70:	d81a      	bhi.n	800baa8 <HAL_TIM_ConfigClockSource+0x94>
 800ba72:	2b30      	cmp	r3, #48	; 0x30
 800ba74:	f000 809a 	beq.w	800bbac <HAL_TIM_ConfigClockSource+0x198>
 800ba78:	2b30      	cmp	r3, #48	; 0x30
 800ba7a:	d809      	bhi.n	800ba90 <HAL_TIM_ConfigClockSource+0x7c>
 800ba7c:	2b10      	cmp	r3, #16
 800ba7e:	f000 8095 	beq.w	800bbac <HAL_TIM_ConfigClockSource+0x198>
 800ba82:	2b20      	cmp	r3, #32
 800ba84:	f000 8092 	beq.w	800bbac <HAL_TIM_ConfigClockSource+0x198>
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	f000 808f 	beq.w	800bbac <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800ba8e:	e097      	b.n	800bbc0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ba90:	2b50      	cmp	r3, #80	; 0x50
 800ba92:	d05b      	beq.n	800bb4c <HAL_TIM_ConfigClockSource+0x138>
 800ba94:	2b50      	cmp	r3, #80	; 0x50
 800ba96:	d802      	bhi.n	800ba9e <HAL_TIM_ConfigClockSource+0x8a>
 800ba98:	2b40      	cmp	r3, #64	; 0x40
 800ba9a:	d077      	beq.n	800bb8c <HAL_TIM_ConfigClockSource+0x178>
      break;
 800ba9c:	e090      	b.n	800bbc0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800ba9e:	2b60      	cmp	r3, #96	; 0x60
 800baa0:	d064      	beq.n	800bb6c <HAL_TIM_ConfigClockSource+0x158>
 800baa2:	2b70      	cmp	r3, #112	; 0x70
 800baa4:	d028      	beq.n	800baf8 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 800baa6:	e08b      	b.n	800bbc0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800baa8:	4a4c      	ldr	r2, [pc, #304]	; (800bbdc <HAL_TIM_ConfigClockSource+0x1c8>)
 800baaa:	4293      	cmp	r3, r2
 800baac:	d07e      	beq.n	800bbac <HAL_TIM_ConfigClockSource+0x198>
 800baae:	4a4b      	ldr	r2, [pc, #300]	; (800bbdc <HAL_TIM_ConfigClockSource+0x1c8>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d810      	bhi.n	800bad6 <HAL_TIM_ConfigClockSource+0xc2>
 800bab4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bab8:	d078      	beq.n	800bbac <HAL_TIM_ConfigClockSource+0x198>
 800baba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800babe:	d803      	bhi.n	800bac8 <HAL_TIM_ConfigClockSource+0xb4>
 800bac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bac4:	d02f      	beq.n	800bb26 <HAL_TIM_ConfigClockSource+0x112>
      break;
 800bac6:	e07b      	b.n	800bbc0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800bac8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800bacc:	d06e      	beq.n	800bbac <HAL_TIM_ConfigClockSource+0x198>
 800bace:	4a44      	ldr	r2, [pc, #272]	; (800bbe0 <HAL_TIM_ConfigClockSource+0x1cc>)
 800bad0:	4293      	cmp	r3, r2
 800bad2:	d06b      	beq.n	800bbac <HAL_TIM_ConfigClockSource+0x198>
      break;
 800bad4:	e074      	b.n	800bbc0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800bad6:	4a43      	ldr	r2, [pc, #268]	; (800bbe4 <HAL_TIM_ConfigClockSource+0x1d0>)
 800bad8:	4293      	cmp	r3, r2
 800bada:	d067      	beq.n	800bbac <HAL_TIM_ConfigClockSource+0x198>
 800badc:	4a41      	ldr	r2, [pc, #260]	; (800bbe4 <HAL_TIM_ConfigClockSource+0x1d0>)
 800bade:	4293      	cmp	r3, r2
 800bae0:	d803      	bhi.n	800baea <HAL_TIM_ConfigClockSource+0xd6>
 800bae2:	4a41      	ldr	r2, [pc, #260]	; (800bbe8 <HAL_TIM_ConfigClockSource+0x1d4>)
 800bae4:	4293      	cmp	r3, r2
 800bae6:	d061      	beq.n	800bbac <HAL_TIM_ConfigClockSource+0x198>
      break;
 800bae8:	e06a      	b.n	800bbc0 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800baea:	4a40      	ldr	r2, [pc, #256]	; (800bbec <HAL_TIM_ConfigClockSource+0x1d8>)
 800baec:	4293      	cmp	r3, r2
 800baee:	d05d      	beq.n	800bbac <HAL_TIM_ConfigClockSource+0x198>
 800baf0:	4a3f      	ldr	r2, [pc, #252]	; (800bbf0 <HAL_TIM_ConfigClockSource+0x1dc>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d05a      	beq.n	800bbac <HAL_TIM_ConfigClockSource+0x198>
      break;
 800baf6:	e063      	b.n	800bbc0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	6818      	ldr	r0, [r3, #0]
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	6899      	ldr	r1, [r3, #8]
 800bb00:	683b      	ldr	r3, [r7, #0]
 800bb02:	685a      	ldr	r2, [r3, #4]
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	68db      	ldr	r3, [r3, #12]
 800bb08:	f000 fac8 	bl	800c09c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	689b      	ldr	r3, [r3, #8]
 800bb12:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bb1a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	68fa      	ldr	r2, [r7, #12]
 800bb22:	609a      	str	r2, [r3, #8]
      break;
 800bb24:	e04c      	b.n	800bbc0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	6818      	ldr	r0, [r3, #0]
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	6899      	ldr	r1, [r3, #8]
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	685a      	ldr	r2, [r3, #4]
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	68db      	ldr	r3, [r3, #12]
 800bb36:	f000 fab1 	bl	800c09c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	681b      	ldr	r3, [r3, #0]
 800bb3e:	689a      	ldr	r2, [r3, #8]
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bb48:	609a      	str	r2, [r3, #8]
      break;
 800bb4a:	e039      	b.n	800bbc0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	6818      	ldr	r0, [r3, #0]
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	6859      	ldr	r1, [r3, #4]
 800bb54:	683b      	ldr	r3, [r7, #0]
 800bb56:	68db      	ldr	r3, [r3, #12]
 800bb58:	461a      	mov	r2, r3
 800bb5a:	f000 fa23 	bl	800bfa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	2150      	movs	r1, #80	; 0x50
 800bb64:	4618      	mov	r0, r3
 800bb66:	f000 fa7c 	bl	800c062 <TIM_ITRx_SetConfig>
      break;
 800bb6a:	e029      	b.n	800bbc0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	6818      	ldr	r0, [r3, #0]
 800bb70:	683b      	ldr	r3, [r7, #0]
 800bb72:	6859      	ldr	r1, [r3, #4]
 800bb74:	683b      	ldr	r3, [r7, #0]
 800bb76:	68db      	ldr	r3, [r3, #12]
 800bb78:	461a      	mov	r2, r3
 800bb7a:	f000 fa42 	bl	800c002 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2160      	movs	r1, #96	; 0x60
 800bb84:	4618      	mov	r0, r3
 800bb86:	f000 fa6c 	bl	800c062 <TIM_ITRx_SetConfig>
      break;
 800bb8a:	e019      	b.n	800bbc0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	6818      	ldr	r0, [r3, #0]
 800bb90:	683b      	ldr	r3, [r7, #0]
 800bb92:	6859      	ldr	r1, [r3, #4]
 800bb94:	683b      	ldr	r3, [r7, #0]
 800bb96:	68db      	ldr	r3, [r3, #12]
 800bb98:	461a      	mov	r2, r3
 800bb9a:	f000 fa03 	bl	800bfa4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	2140      	movs	r1, #64	; 0x40
 800bba4:	4618      	mov	r0, r3
 800bba6:	f000 fa5c 	bl	800c062 <TIM_ITRx_SetConfig>
      break;
 800bbaa:	e009      	b.n	800bbc0 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	681a      	ldr	r2, [r3, #0]
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	4619      	mov	r1, r3
 800bbb6:	4610      	mov	r0, r2
 800bbb8:	f000 fa53 	bl	800c062 <TIM_ITRx_SetConfig>
      break;
 800bbbc:	e000      	b.n	800bbc0 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800bbbe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2200      	movs	r2, #0
 800bbcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bbd0:	2300      	movs	r3, #0
}
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	3710      	adds	r7, #16
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	bd80      	pop	{r7, pc}
 800bbda:	bf00      	nop
 800bbdc:	00100030 	.word	0x00100030
 800bbe0:	00100020 	.word	0x00100020
 800bbe4:	00100050 	.word	0x00100050
 800bbe8:	00100040 	.word	0x00100040
 800bbec:	00100060 	.word	0x00100060
 800bbf0:	00100070 	.word	0x00100070

0800bbf4 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b082      	sub	sp, #8
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]
 800bbfc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bc04:	2b01      	cmp	r3, #1
 800bc06:	d101      	bne.n	800bc0c <HAL_TIM_SlaveConfigSynchro+0x18>
 800bc08:	2302      	movs	r3, #2
 800bc0a:	e031      	b.n	800bc70 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800bc0c:	687b      	ldr	r3, [r7, #4]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	2202      	movs	r2, #2
 800bc18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800bc1c:	6839      	ldr	r1, [r7, #0]
 800bc1e:	6878      	ldr	r0, [r7, #4]
 800bc20:	f000 f904 	bl	800be2c <TIM_SlaveTimer_SetConfig>
 800bc24:	4603      	mov	r3, r0
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d009      	beq.n	800bc3e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	2201      	movs	r2, #1
 800bc2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2200      	movs	r2, #0
 800bc36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	e018      	b.n	800bc70 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	68da      	ldr	r2, [r3, #12]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc4c:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	68da      	ldr	r2, [r3, #12]
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800bc5c:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2201      	movs	r2, #1
 800bc62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	2200      	movs	r2, #0
 800bc6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bc6e:	2300      	movs	r3, #0
}
 800bc70:	4618      	mov	r0, r3
 800bc72:	3708      	adds	r7, #8
 800bc74:	46bd      	mov	sp, r7
 800bc76:	bd80      	pop	{r7, pc}

0800bc78 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc78:	b480      	push	{r7}
 800bc7a:	b083      	sub	sp, #12
 800bc7c:	af00      	add	r7, sp, #0
 800bc7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800bc80:	bf00      	nop
 800bc82:	370c      	adds	r7, #12
 800bc84:	46bd      	mov	sp, r7
 800bc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc8a:	4770      	bx	lr

0800bc8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bc8c:	b480      	push	{r7}
 800bc8e:	b083      	sub	sp, #12
 800bc90:	af00      	add	r7, sp, #0
 800bc92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bc94:	bf00      	nop
 800bc96:	370c      	adds	r7, #12
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc9e:	4770      	bx	lr

0800bca0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bca0:	b480      	push	{r7}
 800bca2:	b083      	sub	sp, #12
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bca8:	bf00      	nop
 800bcaa:	370c      	adds	r7, #12
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr

0800bcb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b083      	sub	sp, #12
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bcbc:	bf00      	nop
 800bcbe:	370c      	adds	r7, #12
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc6:	4770      	bx	lr

0800bcc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bcc8:	b480      	push	{r7}
 800bcca:	b083      	sub	sp, #12
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bcd0:	bf00      	nop
 800bcd2:	370c      	adds	r7, #12
 800bcd4:	46bd      	mov	sp, r7
 800bcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcda:	4770      	bx	lr

0800bcdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800bcdc:	b480      	push	{r7}
 800bcde:	b085      	sub	sp, #20
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	6078      	str	r0, [r7, #4]
 800bce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	681b      	ldr	r3, [r3, #0]
 800bcea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	4a46      	ldr	r2, [pc, #280]	; (800be08 <TIM_Base_SetConfig+0x12c>)
 800bcf0:	4293      	cmp	r3, r2
 800bcf2:	d017      	beq.n	800bd24 <TIM_Base_SetConfig+0x48>
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bcfa:	d013      	beq.n	800bd24 <TIM_Base_SetConfig+0x48>
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	4a43      	ldr	r2, [pc, #268]	; (800be0c <TIM_Base_SetConfig+0x130>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d00f      	beq.n	800bd24 <TIM_Base_SetConfig+0x48>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	4a42      	ldr	r2, [pc, #264]	; (800be10 <TIM_Base_SetConfig+0x134>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d00b      	beq.n	800bd24 <TIM_Base_SetConfig+0x48>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	4a41      	ldr	r2, [pc, #260]	; (800be14 <TIM_Base_SetConfig+0x138>)
 800bd10:	4293      	cmp	r3, r2
 800bd12:	d007      	beq.n	800bd24 <TIM_Base_SetConfig+0x48>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	4a40      	ldr	r2, [pc, #256]	; (800be18 <TIM_Base_SetConfig+0x13c>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d003      	beq.n	800bd24 <TIM_Base_SetConfig+0x48>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	4a3f      	ldr	r2, [pc, #252]	; (800be1c <TIM_Base_SetConfig+0x140>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d108      	bne.n	800bd36 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bd2c:	683b      	ldr	r3, [r7, #0]
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	68fa      	ldr	r2, [r7, #12]
 800bd32:	4313      	orrs	r3, r2
 800bd34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	4a33      	ldr	r2, [pc, #204]	; (800be08 <TIM_Base_SetConfig+0x12c>)
 800bd3a:	4293      	cmp	r3, r2
 800bd3c:	d023      	beq.n	800bd86 <TIM_Base_SetConfig+0xaa>
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd44:	d01f      	beq.n	800bd86 <TIM_Base_SetConfig+0xaa>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	4a30      	ldr	r2, [pc, #192]	; (800be0c <TIM_Base_SetConfig+0x130>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d01b      	beq.n	800bd86 <TIM_Base_SetConfig+0xaa>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	4a2f      	ldr	r2, [pc, #188]	; (800be10 <TIM_Base_SetConfig+0x134>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d017      	beq.n	800bd86 <TIM_Base_SetConfig+0xaa>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	4a2e      	ldr	r2, [pc, #184]	; (800be14 <TIM_Base_SetConfig+0x138>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d013      	beq.n	800bd86 <TIM_Base_SetConfig+0xaa>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	4a2d      	ldr	r2, [pc, #180]	; (800be18 <TIM_Base_SetConfig+0x13c>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d00f      	beq.n	800bd86 <TIM_Base_SetConfig+0xaa>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	4a2d      	ldr	r2, [pc, #180]	; (800be20 <TIM_Base_SetConfig+0x144>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d00b      	beq.n	800bd86 <TIM_Base_SetConfig+0xaa>
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	4a2c      	ldr	r2, [pc, #176]	; (800be24 <TIM_Base_SetConfig+0x148>)
 800bd72:	4293      	cmp	r3, r2
 800bd74:	d007      	beq.n	800bd86 <TIM_Base_SetConfig+0xaa>
 800bd76:	687b      	ldr	r3, [r7, #4]
 800bd78:	4a2b      	ldr	r2, [pc, #172]	; (800be28 <TIM_Base_SetConfig+0x14c>)
 800bd7a:	4293      	cmp	r3, r2
 800bd7c:	d003      	beq.n	800bd86 <TIM_Base_SetConfig+0xaa>
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4a26      	ldr	r2, [pc, #152]	; (800be1c <TIM_Base_SetConfig+0x140>)
 800bd82:	4293      	cmp	r3, r2
 800bd84:	d108      	bne.n	800bd98 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd8e:	683b      	ldr	r3, [r7, #0]
 800bd90:	68db      	ldr	r3, [r3, #12]
 800bd92:	68fa      	ldr	r2, [r7, #12]
 800bd94:	4313      	orrs	r3, r2
 800bd96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bd9e:	683b      	ldr	r3, [r7, #0]
 800bda0:	695b      	ldr	r3, [r3, #20]
 800bda2:	4313      	orrs	r3, r2
 800bda4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	68fa      	ldr	r2, [r7, #12]
 800bdaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	689a      	ldr	r2, [r3, #8]
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	681a      	ldr	r2, [r3, #0]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	4a12      	ldr	r2, [pc, #72]	; (800be08 <TIM_Base_SetConfig+0x12c>)
 800bdc0:	4293      	cmp	r3, r2
 800bdc2:	d013      	beq.n	800bdec <TIM_Base_SetConfig+0x110>
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	4a14      	ldr	r2, [pc, #80]	; (800be18 <TIM_Base_SetConfig+0x13c>)
 800bdc8:	4293      	cmp	r3, r2
 800bdca:	d00f      	beq.n	800bdec <TIM_Base_SetConfig+0x110>
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	4a14      	ldr	r2, [pc, #80]	; (800be20 <TIM_Base_SetConfig+0x144>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d00b      	beq.n	800bdec <TIM_Base_SetConfig+0x110>
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	4a13      	ldr	r2, [pc, #76]	; (800be24 <TIM_Base_SetConfig+0x148>)
 800bdd8:	4293      	cmp	r3, r2
 800bdda:	d007      	beq.n	800bdec <TIM_Base_SetConfig+0x110>
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	4a12      	ldr	r2, [pc, #72]	; (800be28 <TIM_Base_SetConfig+0x14c>)
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d003      	beq.n	800bdec <TIM_Base_SetConfig+0x110>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	4a0d      	ldr	r2, [pc, #52]	; (800be1c <TIM_Base_SetConfig+0x140>)
 800bde8:	4293      	cmp	r3, r2
 800bdea:	d103      	bne.n	800bdf4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	691a      	ldr	r2, [r3, #16]
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2201      	movs	r2, #1
 800bdf8:	615a      	str	r2, [r3, #20]
}
 800bdfa:	bf00      	nop
 800bdfc:	3714      	adds	r7, #20
 800bdfe:	46bd      	mov	sp, r7
 800be00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be04:	4770      	bx	lr
 800be06:	bf00      	nop
 800be08:	40012c00 	.word	0x40012c00
 800be0c:	40000400 	.word	0x40000400
 800be10:	40000800 	.word	0x40000800
 800be14:	40000c00 	.word	0x40000c00
 800be18:	40013400 	.word	0x40013400
 800be1c:	40015000 	.word	0x40015000
 800be20:	40014000 	.word	0x40014000
 800be24:	40014400 	.word	0x40014400
 800be28:	40014800 	.word	0x40014800

0800be2c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800be2c:	b580      	push	{r7, lr}
 800be2e:	b086      	sub	sp, #24
 800be30:	af00      	add	r7, sp, #0
 800be32:	6078      	str	r0, [r7, #4]
 800be34:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	689b      	ldr	r3, [r3, #8]
 800be3c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800be44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be48:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	685b      	ldr	r3, [r3, #4]
 800be4e:	697a      	ldr	r2, [r7, #20]
 800be50:	4313      	orrs	r3, r2
 800be52:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800be54:	697b      	ldr	r3, [r7, #20]
 800be56:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800be5a:	f023 0307 	bic.w	r3, r3, #7
 800be5e:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	697a      	ldr	r2, [r7, #20]
 800be66:	4313      	orrs	r3, r2
 800be68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	697a      	ldr	r2, [r7, #20]
 800be70:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800be72:	683b      	ldr	r3, [r7, #0]
 800be74:	685b      	ldr	r3, [r3, #4]
 800be76:	2b70      	cmp	r3, #112	; 0x70
 800be78:	d034      	beq.n	800bee4 <TIM_SlaveTimer_SetConfig+0xb8>
 800be7a:	2b70      	cmp	r3, #112	; 0x70
 800be7c:	d811      	bhi.n	800bea2 <TIM_SlaveTimer_SetConfig+0x76>
 800be7e:	2b30      	cmp	r3, #48	; 0x30
 800be80:	d07d      	beq.n	800bf7e <TIM_SlaveTimer_SetConfig+0x152>
 800be82:	2b30      	cmp	r3, #48	; 0x30
 800be84:	d806      	bhi.n	800be94 <TIM_SlaveTimer_SetConfig+0x68>
 800be86:	2b10      	cmp	r3, #16
 800be88:	d079      	beq.n	800bf7e <TIM_SlaveTimer_SetConfig+0x152>
 800be8a:	2b20      	cmp	r3, #32
 800be8c:	d077      	beq.n	800bf7e <TIM_SlaveTimer_SetConfig+0x152>
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d075      	beq.n	800bf7e <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 800be92:	e075      	b.n	800bf80 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800be94:	2b50      	cmp	r3, #80	; 0x50
 800be96:	d05e      	beq.n	800bf56 <TIM_SlaveTimer_SetConfig+0x12a>
 800be98:	2b60      	cmp	r3, #96	; 0x60
 800be9a:	d066      	beq.n	800bf6a <TIM_SlaveTimer_SetConfig+0x13e>
 800be9c:	2b40      	cmp	r3, #64	; 0x40
 800be9e:	d02c      	beq.n	800befa <TIM_SlaveTimer_SetConfig+0xce>
      break;
 800bea0:	e06e      	b.n	800bf80 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800bea2:	4a3a      	ldr	r2, [pc, #232]	; (800bf8c <TIM_SlaveTimer_SetConfig+0x160>)
 800bea4:	4293      	cmp	r3, r2
 800bea6:	d06a      	beq.n	800bf7e <TIM_SlaveTimer_SetConfig+0x152>
 800bea8:	4a38      	ldr	r2, [pc, #224]	; (800bf8c <TIM_SlaveTimer_SetConfig+0x160>)
 800beaa:	4293      	cmp	r3, r2
 800beac:	d809      	bhi.n	800bec2 <TIM_SlaveTimer_SetConfig+0x96>
 800beae:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800beb2:	d064      	beq.n	800bf7e <TIM_SlaveTimer_SetConfig+0x152>
 800beb4:	4a36      	ldr	r2, [pc, #216]	; (800bf90 <TIM_SlaveTimer_SetConfig+0x164>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d061      	beq.n	800bf7e <TIM_SlaveTimer_SetConfig+0x152>
 800beba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bebe:	d05e      	beq.n	800bf7e <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800bec0:	e05e      	b.n	800bf80 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800bec2:	4a34      	ldr	r2, [pc, #208]	; (800bf94 <TIM_SlaveTimer_SetConfig+0x168>)
 800bec4:	4293      	cmp	r3, r2
 800bec6:	d05a      	beq.n	800bf7e <TIM_SlaveTimer_SetConfig+0x152>
 800bec8:	4a32      	ldr	r2, [pc, #200]	; (800bf94 <TIM_SlaveTimer_SetConfig+0x168>)
 800beca:	4293      	cmp	r3, r2
 800becc:	d803      	bhi.n	800bed6 <TIM_SlaveTimer_SetConfig+0xaa>
 800bece:	4a32      	ldr	r2, [pc, #200]	; (800bf98 <TIM_SlaveTimer_SetConfig+0x16c>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d054      	beq.n	800bf7e <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800bed4:	e054      	b.n	800bf80 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 800bed6:	4a31      	ldr	r2, [pc, #196]	; (800bf9c <TIM_SlaveTimer_SetConfig+0x170>)
 800bed8:	4293      	cmp	r3, r2
 800beda:	d050      	beq.n	800bf7e <TIM_SlaveTimer_SetConfig+0x152>
 800bedc:	4a30      	ldr	r2, [pc, #192]	; (800bfa0 <TIM_SlaveTimer_SetConfig+0x174>)
 800bede:	4293      	cmp	r3, r2
 800bee0:	d04d      	beq.n	800bf7e <TIM_SlaveTimer_SetConfig+0x152>
      break;
 800bee2:	e04d      	b.n	800bf80 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	6818      	ldr	r0, [r3, #0]
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	68d9      	ldr	r1, [r3, #12]
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	689a      	ldr	r2, [r3, #8]
 800bef0:	683b      	ldr	r3, [r7, #0]
 800bef2:	691b      	ldr	r3, [r3, #16]
 800bef4:	f000 f8d2 	bl	800c09c <TIM_ETR_SetConfig>
      break;
 800bef8:	e042      	b.n	800bf80 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	681b      	ldr	r3, [r3, #0]
 800befe:	2b05      	cmp	r3, #5
 800bf00:	d004      	beq.n	800bf0c <TIM_SlaveTimer_SetConfig+0xe0>
 800bf02:	683b      	ldr	r3, [r7, #0]
 800bf04:	681b      	ldr	r3, [r3, #0]
 800bf06:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800bf0a:	d101      	bne.n	800bf10 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	e038      	b.n	800bf82 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	6a1b      	ldr	r3, [r3, #32]
 800bf16:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	6a1a      	ldr	r2, [r3, #32]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	f022 0201 	bic.w	r2, r2, #1
 800bf26:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	699b      	ldr	r3, [r3, #24]
 800bf2e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bf36:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	691b      	ldr	r3, [r3, #16]
 800bf3c:	011b      	lsls	r3, r3, #4
 800bf3e:	68fa      	ldr	r2, [r7, #12]
 800bf40:	4313      	orrs	r3, r2
 800bf42:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	68fa      	ldr	r2, [r7, #12]
 800bf4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	693a      	ldr	r2, [r7, #16]
 800bf52:	621a      	str	r2, [r3, #32]
      break;
 800bf54:	e014      	b.n	800bf80 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6818      	ldr	r0, [r3, #0]
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	6899      	ldr	r1, [r3, #8]
 800bf5e:	683b      	ldr	r3, [r7, #0]
 800bf60:	691b      	ldr	r3, [r3, #16]
 800bf62:	461a      	mov	r2, r3
 800bf64:	f000 f81e 	bl	800bfa4 <TIM_TI1_ConfigInputStage>
      break;
 800bf68:	e00a      	b.n	800bf80 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	6818      	ldr	r0, [r3, #0]
 800bf6e:	683b      	ldr	r3, [r7, #0]
 800bf70:	6899      	ldr	r1, [r3, #8]
 800bf72:	683b      	ldr	r3, [r7, #0]
 800bf74:	691b      	ldr	r3, [r3, #16]
 800bf76:	461a      	mov	r2, r3
 800bf78:	f000 f843 	bl	800c002 <TIM_TI2_ConfigInputStage>
      break;
 800bf7c:	e000      	b.n	800bf80 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 800bf7e:	bf00      	nop
  }
  return HAL_OK;
 800bf80:	2300      	movs	r3, #0
}
 800bf82:	4618      	mov	r0, r3
 800bf84:	3718      	adds	r7, #24
 800bf86:	46bd      	mov	sp, r7
 800bf88:	bd80      	pop	{r7, pc}
 800bf8a:	bf00      	nop
 800bf8c:	00100030 	.word	0x00100030
 800bf90:	00100020 	.word	0x00100020
 800bf94:	00100050 	.word	0x00100050
 800bf98:	00100040 	.word	0x00100040
 800bf9c:	00100060 	.word	0x00100060
 800bfa0:	00100070 	.word	0x00100070

0800bfa4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bfa4:	b480      	push	{r7}
 800bfa6:	b087      	sub	sp, #28
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	60f8      	str	r0, [r7, #12]
 800bfac:	60b9      	str	r1, [r7, #8]
 800bfae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	6a1b      	ldr	r3, [r3, #32]
 800bfb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	6a1b      	ldr	r3, [r3, #32]
 800bfba:	f023 0201 	bic.w	r2, r3, #1
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	699b      	ldr	r3, [r3, #24]
 800bfc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bfce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	011b      	lsls	r3, r3, #4
 800bfd4:	693a      	ldr	r2, [r7, #16]
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bfda:	697b      	ldr	r3, [r7, #20]
 800bfdc:	f023 030a 	bic.w	r3, r3, #10
 800bfe0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bfe2:	697a      	ldr	r2, [r7, #20]
 800bfe4:	68bb      	ldr	r3, [r7, #8]
 800bfe6:	4313      	orrs	r3, r2
 800bfe8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	693a      	ldr	r2, [r7, #16]
 800bfee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	697a      	ldr	r2, [r7, #20]
 800bff4:	621a      	str	r2, [r3, #32]
}
 800bff6:	bf00      	nop
 800bff8:	371c      	adds	r7, #28
 800bffa:	46bd      	mov	sp, r7
 800bffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c000:	4770      	bx	lr

0800c002 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c002:	b480      	push	{r7}
 800c004:	b087      	sub	sp, #28
 800c006:	af00      	add	r7, sp, #0
 800c008:	60f8      	str	r0, [r7, #12]
 800c00a:	60b9      	str	r1, [r7, #8]
 800c00c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	6a1b      	ldr	r3, [r3, #32]
 800c012:	f023 0210 	bic.w	r2, r3, #16
 800c016:	68fb      	ldr	r3, [r7, #12]
 800c018:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	699b      	ldr	r3, [r3, #24]
 800c01e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	6a1b      	ldr	r3, [r3, #32]
 800c024:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c026:	697b      	ldr	r3, [r7, #20]
 800c028:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c02c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	031b      	lsls	r3, r3, #12
 800c032:	697a      	ldr	r2, [r7, #20]
 800c034:	4313      	orrs	r3, r2
 800c036:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c038:	693b      	ldr	r3, [r7, #16]
 800c03a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c03e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	011b      	lsls	r3, r3, #4
 800c044:	693a      	ldr	r2, [r7, #16]
 800c046:	4313      	orrs	r3, r2
 800c048:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	697a      	ldr	r2, [r7, #20]
 800c04e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	693a      	ldr	r2, [r7, #16]
 800c054:	621a      	str	r2, [r3, #32]
}
 800c056:	bf00      	nop
 800c058:	371c      	adds	r7, #28
 800c05a:	46bd      	mov	sp, r7
 800c05c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c060:	4770      	bx	lr

0800c062 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c062:	b480      	push	{r7}
 800c064:	b085      	sub	sp, #20
 800c066:	af00      	add	r7, sp, #0
 800c068:	6078      	str	r0, [r7, #4]
 800c06a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	689b      	ldr	r3, [r3, #8]
 800c070:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800c078:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c07c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c07e:	683a      	ldr	r2, [r7, #0]
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	4313      	orrs	r3, r2
 800c084:	f043 0307 	orr.w	r3, r3, #7
 800c088:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c08a:	687b      	ldr	r3, [r7, #4]
 800c08c:	68fa      	ldr	r2, [r7, #12]
 800c08e:	609a      	str	r2, [r3, #8]
}
 800c090:	bf00      	nop
 800c092:	3714      	adds	r7, #20
 800c094:	46bd      	mov	sp, r7
 800c096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c09a:	4770      	bx	lr

0800c09c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c09c:	b480      	push	{r7}
 800c09e:	b087      	sub	sp, #28
 800c0a0:	af00      	add	r7, sp, #0
 800c0a2:	60f8      	str	r0, [r7, #12]
 800c0a4:	60b9      	str	r1, [r7, #8]
 800c0a6:	607a      	str	r2, [r7, #4]
 800c0a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	689b      	ldr	r3, [r3, #8]
 800c0ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c0b0:	697b      	ldr	r3, [r7, #20]
 800c0b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c0b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c0b8:	683b      	ldr	r3, [r7, #0]
 800c0ba:	021a      	lsls	r2, r3, #8
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	431a      	orrs	r2, r3
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	4313      	orrs	r3, r2
 800c0c4:	697a      	ldr	r2, [r7, #20]
 800c0c6:	4313      	orrs	r3, r2
 800c0c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	697a      	ldr	r2, [r7, #20]
 800c0ce:	609a      	str	r2, [r3, #8]
}
 800c0d0:	bf00      	nop
 800c0d2:	371c      	adds	r7, #28
 800c0d4:	46bd      	mov	sp, r7
 800c0d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0da:	4770      	bx	lr

0800c0dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c0dc:	b480      	push	{r7}
 800c0de:	b085      	sub	sp, #20
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d101      	bne.n	800c0f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c0f0:	2302      	movs	r3, #2
 800c0f2:	e074      	b.n	800c1de <HAL_TIMEx_MasterConfigSynchronization+0x102>
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	2201      	movs	r2, #1
 800c0f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0fc:	687b      	ldr	r3, [r7, #4]
 800c0fe:	2202      	movs	r2, #2
 800c100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	685b      	ldr	r3, [r3, #4]
 800c10a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c10c:	687b      	ldr	r3, [r7, #4]
 800c10e:	681b      	ldr	r3, [r3, #0]
 800c110:	689b      	ldr	r3, [r3, #8]
 800c112:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	4a34      	ldr	r2, [pc, #208]	; (800c1ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c11a:	4293      	cmp	r3, r2
 800c11c:	d009      	beq.n	800c132 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	4a33      	ldr	r2, [pc, #204]	; (800c1f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d004      	beq.n	800c132 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	4a31      	ldr	r2, [pc, #196]	; (800c1f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c12e:	4293      	cmp	r3, r2
 800c130:	d108      	bne.n	800c144 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c138:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	685b      	ldr	r3, [r3, #4]
 800c13e:	68fa      	ldr	r2, [r7, #12]
 800c140:	4313      	orrs	r3, r2
 800c142:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800c14a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c14e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	68fa      	ldr	r2, [r7, #12]
 800c156:	4313      	orrs	r3, r2
 800c158:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	68fa      	ldr	r2, [r7, #12]
 800c160:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4a21      	ldr	r2, [pc, #132]	; (800c1ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	d022      	beq.n	800c1b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c174:	d01d      	beq.n	800c1b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	4a1f      	ldr	r2, [pc, #124]	; (800c1f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800c17c:	4293      	cmp	r3, r2
 800c17e:	d018      	beq.n	800c1b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	4a1d      	ldr	r2, [pc, #116]	; (800c1fc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800c186:	4293      	cmp	r3, r2
 800c188:	d013      	beq.n	800c1b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	4a1c      	ldr	r2, [pc, #112]	; (800c200 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 800c190:	4293      	cmp	r3, r2
 800c192:	d00e      	beq.n	800c1b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	681b      	ldr	r3, [r3, #0]
 800c198:	4a15      	ldr	r2, [pc, #84]	; (800c1f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c19a:	4293      	cmp	r3, r2
 800c19c:	d009      	beq.n	800c1b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	4a18      	ldr	r2, [pc, #96]	; (800c204 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800c1a4:	4293      	cmp	r3, r2
 800c1a6:	d004      	beq.n	800c1b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	681b      	ldr	r3, [r3, #0]
 800c1ac:	4a11      	ldr	r2, [pc, #68]	; (800c1f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c1ae:	4293      	cmp	r3, r2
 800c1b0:	d10c      	bne.n	800c1cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c1b2:	68bb      	ldr	r3, [r7, #8]
 800c1b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c1b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c1ba:	683b      	ldr	r3, [r7, #0]
 800c1bc:	689b      	ldr	r3, [r3, #8]
 800c1be:	68ba      	ldr	r2, [r7, #8]
 800c1c0:	4313      	orrs	r3, r2
 800c1c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	68ba      	ldr	r2, [r7, #8]
 800c1ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2201      	movs	r2, #1
 800c1d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2200      	movs	r2, #0
 800c1d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c1dc:	2300      	movs	r3, #0
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3714      	adds	r7, #20
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e8:	4770      	bx	lr
 800c1ea:	bf00      	nop
 800c1ec:	40012c00 	.word	0x40012c00
 800c1f0:	40013400 	.word	0x40013400
 800c1f4:	40015000 	.word	0x40015000
 800c1f8:	40000400 	.word	0x40000400
 800c1fc:	40000800 	.word	0x40000800
 800c200:	40000c00 	.word	0x40000c00
 800c204:	40014000 	.word	0x40014000

0800c208 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800c208:	b480      	push	{r7}
 800c20a:	b085      	sub	sp, #20
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800c212:	2300      	movs	r3, #0
 800c214:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c21c:	2b01      	cmp	r3, #1
 800c21e:	d101      	bne.n	800c224 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800c220:	2302      	movs	r3, #2
 800c222:	e096      	b.n	800c352 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 800c224:	687b      	ldr	r3, [r7, #4]
 800c226:	2201      	movs	r2, #1
 800c228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800c232:	683b      	ldr	r3, [r7, #0]
 800c234:	68db      	ldr	r3, [r3, #12]
 800c236:	4313      	orrs	r3, r2
 800c238:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800c240:	683b      	ldr	r3, [r7, #0]
 800c242:	689b      	ldr	r3, [r3, #8]
 800c244:	4313      	orrs	r3, r2
 800c246:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	685b      	ldr	r3, [r3, #4]
 800c252:	4313      	orrs	r3, r2
 800c254:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800c25c:	683b      	ldr	r3, [r7, #0]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	4313      	orrs	r3, r2
 800c262:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	691b      	ldr	r3, [r3, #16]
 800c26e:	4313      	orrs	r3, r2
 800c270:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800c278:	683b      	ldr	r3, [r7, #0]
 800c27a:	695b      	ldr	r3, [r3, #20]
 800c27c:	4313      	orrs	r3, r2
 800c27e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800c280:	68fb      	ldr	r3, [r7, #12]
 800c282:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800c286:	683b      	ldr	r3, [r7, #0]
 800c288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c28a:	4313      	orrs	r3, r2
 800c28c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800c294:	683b      	ldr	r3, [r7, #0]
 800c296:	699b      	ldr	r3, [r3, #24]
 800c298:	041b      	lsls	r3, r3, #16
 800c29a:	4313      	orrs	r3, r2
 800c29c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	4a2f      	ldr	r2, [pc, #188]	; (800c360 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d009      	beq.n	800c2bc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	681b      	ldr	r3, [r3, #0]
 800c2ac:	4a2d      	ldr	r2, [pc, #180]	; (800c364 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800c2ae:	4293      	cmp	r3, r2
 800c2b0:	d004      	beq.n	800c2bc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	4a2c      	ldr	r2, [pc, #176]	; (800c368 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800c2b8:	4293      	cmp	r3, r2
 800c2ba:	d106      	bne.n	800c2ca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800c2bc:	68fb      	ldr	r3, [r7, #12]
 800c2be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800c2c2:	683b      	ldr	r3, [r7, #0]
 800c2c4:	69db      	ldr	r3, [r3, #28]
 800c2c6:	4313      	orrs	r3, r2
 800c2c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	681b      	ldr	r3, [r3, #0]
 800c2ce:	4a24      	ldr	r2, [pc, #144]	; (800c360 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800c2d0:	4293      	cmp	r3, r2
 800c2d2:	d009      	beq.n	800c2e8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	4a22      	ldr	r2, [pc, #136]	; (800c364 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d004      	beq.n	800c2e8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	4a21      	ldr	r2, [pc, #132]	; (800c368 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800c2e4:	4293      	cmp	r3, r2
 800c2e6:	d12b      	bne.n	800c340 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800c2ee:	683b      	ldr	r3, [r7, #0]
 800c2f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2f2:	051b      	lsls	r3, r3, #20
 800c2f4:	4313      	orrs	r3, r2
 800c2f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800c2f8:	68fb      	ldr	r3, [r7, #12]
 800c2fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800c2fe:	683b      	ldr	r3, [r7, #0]
 800c300:	6a1b      	ldr	r3, [r3, #32]
 800c302:	4313      	orrs	r3, r2
 800c304:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c310:	4313      	orrs	r3, r2
 800c312:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	4a11      	ldr	r2, [pc, #68]	; (800c360 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800c31a:	4293      	cmp	r3, r2
 800c31c:	d009      	beq.n	800c332 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	4a10      	ldr	r2, [pc, #64]	; (800c364 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800c324:	4293      	cmp	r3, r2
 800c326:	d004      	beq.n	800c332 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	4a0e      	ldr	r2, [pc, #56]	; (800c368 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d106      	bne.n	800c340 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800c338:	683b      	ldr	r3, [r7, #0]
 800c33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c33c:	4313      	orrs	r3, r2
 800c33e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	68fa      	ldr	r2, [r7, #12]
 800c346:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2200      	movs	r2, #0
 800c34c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c350:	2300      	movs	r3, #0
}
 800c352:	4618      	mov	r0, r3
 800c354:	3714      	adds	r7, #20
 800c356:	46bd      	mov	sp, r7
 800c358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35c:	4770      	bx	lr
 800c35e:	bf00      	nop
 800c360:	40012c00 	.word	0x40012c00
 800c364:	40013400 	.word	0x40013400
 800c368:	40015000 	.word	0x40015000

0800c36c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c36c:	b480      	push	{r7}
 800c36e:	b083      	sub	sp, #12
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c374:	bf00      	nop
 800c376:	370c      	adds	r7, #12
 800c378:	46bd      	mov	sp, r7
 800c37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37e:	4770      	bx	lr

0800c380 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c380:	b480      	push	{r7}
 800c382:	b083      	sub	sp, #12
 800c384:	af00      	add	r7, sp, #0
 800c386:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c388:	bf00      	nop
 800c38a:	370c      	adds	r7, #12
 800c38c:	46bd      	mov	sp, r7
 800c38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c392:	4770      	bx	lr

0800c394 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c394:	b480      	push	{r7}
 800c396:	b083      	sub	sp, #12
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c39c:	bf00      	nop
 800c39e:	370c      	adds	r7, #12
 800c3a0:	46bd      	mov	sp, r7
 800c3a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3a6:	4770      	bx	lr

0800c3a8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b083      	sub	sp, #12
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800c3b0:	bf00      	nop
 800c3b2:	370c      	adds	r7, #12
 800c3b4:	46bd      	mov	sp, r7
 800c3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ba:	4770      	bx	lr

0800c3bc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800c3bc:	b480      	push	{r7}
 800c3be:	b083      	sub	sp, #12
 800c3c0:	af00      	add	r7, sp, #0
 800c3c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800c3c4:	bf00      	nop
 800c3c6:	370c      	adds	r7, #12
 800c3c8:	46bd      	mov	sp, r7
 800c3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3ce:	4770      	bx	lr

0800c3d0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800c3d0:	b480      	push	{r7}
 800c3d2:	b083      	sub	sp, #12
 800c3d4:	af00      	add	r7, sp, #0
 800c3d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800c3d8:	bf00      	nop
 800c3da:	370c      	adds	r7, #12
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3e2:	4770      	bx	lr

0800c3e4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800c3e4:	b480      	push	{r7}
 800c3e6:	b083      	sub	sp, #12
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800c3ec:	bf00      	nop
 800c3ee:	370c      	adds	r7, #12
 800c3f0:	46bd      	mov	sp, r7
 800c3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f6:	4770      	bx	lr

0800c3f8 <LL_EXTI_EnableIT_0_31>:
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b083      	sub	sp, #12
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 800c400:	4b05      	ldr	r3, [pc, #20]	; (800c418 <LL_EXTI_EnableIT_0_31+0x20>)
 800c402:	681a      	ldr	r2, [r3, #0]
 800c404:	4904      	ldr	r1, [pc, #16]	; (800c418 <LL_EXTI_EnableIT_0_31+0x20>)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	4313      	orrs	r3, r2
 800c40a:	600b      	str	r3, [r1, #0]
}
 800c40c:	bf00      	nop
 800c40e:	370c      	adds	r7, #12
 800c410:	46bd      	mov	sp, r7
 800c412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c416:	4770      	bx	lr
 800c418:	40010400 	.word	0x40010400

0800c41c <LL_EXTI_EnableIT_32_63>:
{
 800c41c:	b480      	push	{r7}
 800c41e:	b083      	sub	sp, #12
 800c420:	af00      	add	r7, sp, #0
 800c422:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 800c424:	4b05      	ldr	r3, [pc, #20]	; (800c43c <LL_EXTI_EnableIT_32_63+0x20>)
 800c426:	6a1a      	ldr	r2, [r3, #32]
 800c428:	4904      	ldr	r1, [pc, #16]	; (800c43c <LL_EXTI_EnableIT_32_63+0x20>)
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	4313      	orrs	r3, r2
 800c42e:	620b      	str	r3, [r1, #32]
}
 800c430:	bf00      	nop
 800c432:	370c      	adds	r7, #12
 800c434:	46bd      	mov	sp, r7
 800c436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c43a:	4770      	bx	lr
 800c43c:	40010400 	.word	0x40010400

0800c440 <LL_EXTI_DisableIT_0_31>:
{
 800c440:	b480      	push	{r7}
 800c442:	b083      	sub	sp, #12
 800c444:	af00      	add	r7, sp, #0
 800c446:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800c448:	4b06      	ldr	r3, [pc, #24]	; (800c464 <LL_EXTI_DisableIT_0_31+0x24>)
 800c44a:	681a      	ldr	r2, [r3, #0]
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	43db      	mvns	r3, r3
 800c450:	4904      	ldr	r1, [pc, #16]	; (800c464 <LL_EXTI_DisableIT_0_31+0x24>)
 800c452:	4013      	ands	r3, r2
 800c454:	600b      	str	r3, [r1, #0]
}
 800c456:	bf00      	nop
 800c458:	370c      	adds	r7, #12
 800c45a:	46bd      	mov	sp, r7
 800c45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c460:	4770      	bx	lr
 800c462:	bf00      	nop
 800c464:	40010400 	.word	0x40010400

0800c468 <LL_EXTI_DisableIT_32_63>:
{
 800c468:	b480      	push	{r7}
 800c46a:	b083      	sub	sp, #12
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 800c470:	4b06      	ldr	r3, [pc, #24]	; (800c48c <LL_EXTI_DisableIT_32_63+0x24>)
 800c472:	6a1a      	ldr	r2, [r3, #32]
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	43db      	mvns	r3, r3
 800c478:	4904      	ldr	r1, [pc, #16]	; (800c48c <LL_EXTI_DisableIT_32_63+0x24>)
 800c47a:	4013      	ands	r3, r2
 800c47c:	620b      	str	r3, [r1, #32]
}
 800c47e:	bf00      	nop
 800c480:	370c      	adds	r7, #12
 800c482:	46bd      	mov	sp, r7
 800c484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c488:	4770      	bx	lr
 800c48a:	bf00      	nop
 800c48c:	40010400 	.word	0x40010400

0800c490 <LL_EXTI_EnableEvent_0_31>:
{
 800c490:	b480      	push	{r7}
 800c492:	b083      	sub	sp, #12
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 800c498:	4b05      	ldr	r3, [pc, #20]	; (800c4b0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800c49a:	685a      	ldr	r2, [r3, #4]
 800c49c:	4904      	ldr	r1, [pc, #16]	; (800c4b0 <LL_EXTI_EnableEvent_0_31+0x20>)
 800c49e:	687b      	ldr	r3, [r7, #4]
 800c4a0:	4313      	orrs	r3, r2
 800c4a2:	604b      	str	r3, [r1, #4]
}
 800c4a4:	bf00      	nop
 800c4a6:	370c      	adds	r7, #12
 800c4a8:	46bd      	mov	sp, r7
 800c4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4ae:	4770      	bx	lr
 800c4b0:	40010400 	.word	0x40010400

0800c4b4 <LL_EXTI_EnableEvent_32_63>:
{
 800c4b4:	b480      	push	{r7}
 800c4b6:	b083      	sub	sp, #12
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 800c4bc:	4b05      	ldr	r3, [pc, #20]	; (800c4d4 <LL_EXTI_EnableEvent_32_63+0x20>)
 800c4be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c4c0:	4904      	ldr	r1, [pc, #16]	; (800c4d4 <LL_EXTI_EnableEvent_32_63+0x20>)
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	4313      	orrs	r3, r2
 800c4c6:	624b      	str	r3, [r1, #36]	; 0x24
}
 800c4c8:	bf00      	nop
 800c4ca:	370c      	adds	r7, #12
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr
 800c4d4:	40010400 	.word	0x40010400

0800c4d8 <LL_EXTI_DisableEvent_0_31>:
{
 800c4d8:	b480      	push	{r7}
 800c4da:	b083      	sub	sp, #12
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 800c4e0:	4b06      	ldr	r3, [pc, #24]	; (800c4fc <LL_EXTI_DisableEvent_0_31+0x24>)
 800c4e2:	685a      	ldr	r2, [r3, #4]
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	43db      	mvns	r3, r3
 800c4e8:	4904      	ldr	r1, [pc, #16]	; (800c4fc <LL_EXTI_DisableEvent_0_31+0x24>)
 800c4ea:	4013      	ands	r3, r2
 800c4ec:	604b      	str	r3, [r1, #4]
}
 800c4ee:	bf00      	nop
 800c4f0:	370c      	adds	r7, #12
 800c4f2:	46bd      	mov	sp, r7
 800c4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f8:	4770      	bx	lr
 800c4fa:	bf00      	nop
 800c4fc:	40010400 	.word	0x40010400

0800c500 <LL_EXTI_DisableEvent_32_63>:
{
 800c500:	b480      	push	{r7}
 800c502:	b083      	sub	sp, #12
 800c504:	af00      	add	r7, sp, #0
 800c506:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800c508:	4b06      	ldr	r3, [pc, #24]	; (800c524 <LL_EXTI_DisableEvent_32_63+0x24>)
 800c50a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	43db      	mvns	r3, r3
 800c510:	4904      	ldr	r1, [pc, #16]	; (800c524 <LL_EXTI_DisableEvent_32_63+0x24>)
 800c512:	4013      	ands	r3, r2
 800c514:	624b      	str	r3, [r1, #36]	; 0x24
}
 800c516:	bf00      	nop
 800c518:	370c      	adds	r7, #12
 800c51a:	46bd      	mov	sp, r7
 800c51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c520:	4770      	bx	lr
 800c522:	bf00      	nop
 800c524:	40010400 	.word	0x40010400

0800c528 <LL_EXTI_EnableRisingTrig_0_31>:
{
 800c528:	b480      	push	{r7}
 800c52a:	b083      	sub	sp, #12
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 800c530:	4b05      	ldr	r3, [pc, #20]	; (800c548 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800c532:	689a      	ldr	r2, [r3, #8]
 800c534:	4904      	ldr	r1, [pc, #16]	; (800c548 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	4313      	orrs	r3, r2
 800c53a:	608b      	str	r3, [r1, #8]
}
 800c53c:	bf00      	nop
 800c53e:	370c      	adds	r7, #12
 800c540:	46bd      	mov	sp, r7
 800c542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c546:	4770      	bx	lr
 800c548:	40010400 	.word	0x40010400

0800c54c <LL_EXTI_EnableRisingTrig_32_63>:
{
 800c54c:	b480      	push	{r7}
 800c54e:	b083      	sub	sp, #12
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800c554:	4b05      	ldr	r3, [pc, #20]	; (800c56c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c556:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c558:	4904      	ldr	r1, [pc, #16]	; (800c56c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	4313      	orrs	r3, r2
 800c55e:	628b      	str	r3, [r1, #40]	; 0x28
}
 800c560:	bf00      	nop
 800c562:	370c      	adds	r7, #12
 800c564:	46bd      	mov	sp, r7
 800c566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56a:	4770      	bx	lr
 800c56c:	40010400 	.word	0x40010400

0800c570 <LL_EXTI_DisableRisingTrig_0_31>:
{
 800c570:	b480      	push	{r7}
 800c572:	b083      	sub	sp, #12
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 800c578:	4b06      	ldr	r3, [pc, #24]	; (800c594 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800c57a:	689a      	ldr	r2, [r3, #8]
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	43db      	mvns	r3, r3
 800c580:	4904      	ldr	r1, [pc, #16]	; (800c594 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800c582:	4013      	ands	r3, r2
 800c584:	608b      	str	r3, [r1, #8]
}
 800c586:	bf00      	nop
 800c588:	370c      	adds	r7, #12
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr
 800c592:	bf00      	nop
 800c594:	40010400 	.word	0x40010400

0800c598 <LL_EXTI_DisableRisingTrig_32_63>:
{
 800c598:	b480      	push	{r7}
 800c59a:	b083      	sub	sp, #12
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 800c5a0:	4b06      	ldr	r3, [pc, #24]	; (800c5bc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800c5a2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	43db      	mvns	r3, r3
 800c5a8:	4904      	ldr	r1, [pc, #16]	; (800c5bc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800c5aa:	4013      	ands	r3, r2
 800c5ac:	628b      	str	r3, [r1, #40]	; 0x28
}
 800c5ae:	bf00      	nop
 800c5b0:	370c      	adds	r7, #12
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr
 800c5ba:	bf00      	nop
 800c5bc:	40010400 	.word	0x40010400

0800c5c0 <LL_EXTI_EnableFallingTrig_0_31>:
{
 800c5c0:	b480      	push	{r7}
 800c5c2:	b083      	sub	sp, #12
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800c5c8:	4b05      	ldr	r3, [pc, #20]	; (800c5e0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800c5ca:	68da      	ldr	r2, [r3, #12]
 800c5cc:	4904      	ldr	r1, [pc, #16]	; (800c5e0 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	60cb      	str	r3, [r1, #12]
}
 800c5d4:	bf00      	nop
 800c5d6:	370c      	adds	r7, #12
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5de:	4770      	bx	lr
 800c5e0:	40010400 	.word	0x40010400

0800c5e4 <LL_EXTI_EnableFallingTrig_32_63>:
{
 800c5e4:	b480      	push	{r7}
 800c5e6:	b083      	sub	sp, #12
 800c5e8:	af00      	add	r7, sp, #0
 800c5ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800c5ec:	4b05      	ldr	r3, [pc, #20]	; (800c604 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800c5ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c5f0:	4904      	ldr	r1, [pc, #16]	; (800c604 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	4313      	orrs	r3, r2
 800c5f6:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800c5f8:	bf00      	nop
 800c5fa:	370c      	adds	r7, #12
 800c5fc:	46bd      	mov	sp, r7
 800c5fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c602:	4770      	bx	lr
 800c604:	40010400 	.word	0x40010400

0800c608 <LL_EXTI_DisableFallingTrig_0_31>:
{
 800c608:	b480      	push	{r7}
 800c60a:	b083      	sub	sp, #12
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 800c610:	4b06      	ldr	r3, [pc, #24]	; (800c62c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800c612:	68da      	ldr	r2, [r3, #12]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	43db      	mvns	r3, r3
 800c618:	4904      	ldr	r1, [pc, #16]	; (800c62c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800c61a:	4013      	ands	r3, r2
 800c61c:	60cb      	str	r3, [r1, #12]
}
 800c61e:	bf00      	nop
 800c620:	370c      	adds	r7, #12
 800c622:	46bd      	mov	sp, r7
 800c624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c628:	4770      	bx	lr
 800c62a:	bf00      	nop
 800c62c:	40010400 	.word	0x40010400

0800c630 <LL_EXTI_DisableFallingTrig_32_63>:
{
 800c630:	b480      	push	{r7}
 800c632:	b083      	sub	sp, #12
 800c634:	af00      	add	r7, sp, #0
 800c636:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800c638:	4b06      	ldr	r3, [pc, #24]	; (800c654 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800c63a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	43db      	mvns	r3, r3
 800c640:	4904      	ldr	r1, [pc, #16]	; (800c654 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800c642:	4013      	ands	r3, r2
 800c644:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800c646:	bf00      	nop
 800c648:	370c      	adds	r7, #12
 800c64a:	46bd      	mov	sp, r7
 800c64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c650:	4770      	bx	lr
 800c652:	bf00      	nop
 800c654:	40010400 	.word	0x40010400

0800c658 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800c658:	b580      	push	{r7, lr}
 800c65a:	b084      	sub	sp, #16
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 800c660:	2300      	movs	r3, #0
 800c662:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	7a1b      	ldrb	r3, [r3, #8]
 800c668:	2b00      	cmp	r3, #0
 800c66a:	f000 80c8 	beq.w	800c7fe <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	2b00      	cmp	r3, #0
 800c674:	d05d      	beq.n	800c732 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	7a5b      	ldrb	r3, [r3, #9]
 800c67a:	2b01      	cmp	r3, #1
 800c67c:	d00e      	beq.n	800c69c <LL_EXTI_Init+0x44>
 800c67e:	2b02      	cmp	r3, #2
 800c680:	d017      	beq.n	800c6b2 <LL_EXTI_Init+0x5a>
 800c682:	2b00      	cmp	r3, #0
 800c684:	d120      	bne.n	800c6c8 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	4618      	mov	r0, r3
 800c68c:	f7ff ff24 	bl	800c4d8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	4618      	mov	r0, r3
 800c696:	f7ff feaf 	bl	800c3f8 <LL_EXTI_EnableIT_0_31>
          break;
 800c69a:	e018      	b.n	800c6ce <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4618      	mov	r0, r3
 800c6a2:	f7ff fecd 	bl	800c440 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	4618      	mov	r0, r3
 800c6ac:	f7ff fef0 	bl	800c490 <LL_EXTI_EnableEvent_0_31>
          break;
 800c6b0:	e00d      	b.n	800c6ce <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	4618      	mov	r0, r3
 800c6b8:	f7ff fe9e 	bl	800c3f8 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f7ff fee5 	bl	800c490 <LL_EXTI_EnableEvent_0_31>
          break;
 800c6c6:	e002      	b.n	800c6ce <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800c6c8:	2301      	movs	r3, #1
 800c6ca:	60fb      	str	r3, [r7, #12]
          break;
 800c6cc:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	7a9b      	ldrb	r3, [r3, #10]
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d02d      	beq.n	800c732 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	7a9b      	ldrb	r3, [r3, #10]
 800c6da:	2b02      	cmp	r3, #2
 800c6dc:	d00e      	beq.n	800c6fc <LL_EXTI_Init+0xa4>
 800c6de:	2b03      	cmp	r3, #3
 800c6e0:	d017      	beq.n	800c712 <LL_EXTI_Init+0xba>
 800c6e2:	2b01      	cmp	r3, #1
 800c6e4:	d120      	bne.n	800c728 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7ff ff8c 	bl	800c608 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	f7ff ff17 	bl	800c528 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800c6fa:	e01b      	b.n	800c734 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	4618      	mov	r0, r3
 800c702:	f7ff ff35 	bl	800c570 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	4618      	mov	r0, r3
 800c70c:	f7ff ff58 	bl	800c5c0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800c710:	e010      	b.n	800c734 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800c712:	687b      	ldr	r3, [r7, #4]
 800c714:	681b      	ldr	r3, [r3, #0]
 800c716:	4618      	mov	r0, r3
 800c718:	f7ff ff06 	bl	800c528 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	4618      	mov	r0, r3
 800c722:	f7ff ff4d 	bl	800c5c0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800c726:	e005      	b.n	800c734 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	f043 0302 	orr.w	r3, r3, #2
 800c72e:	60fb      	str	r3, [r7, #12]
            break;
 800c730:	e000      	b.n	800c734 <LL_EXTI_Init+0xdc>
        }
      }
 800c732:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d075      	beq.n	800c828 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 800c73c:	687b      	ldr	r3, [r7, #4]
 800c73e:	7a5b      	ldrb	r3, [r3, #9]
 800c740:	2b01      	cmp	r3, #1
 800c742:	d00e      	beq.n	800c762 <LL_EXTI_Init+0x10a>
 800c744:	2b02      	cmp	r3, #2
 800c746:	d017      	beq.n	800c778 <LL_EXTI_Init+0x120>
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d120      	bne.n	800c78e <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	685b      	ldr	r3, [r3, #4]
 800c750:	4618      	mov	r0, r3
 800c752:	f7ff fed5 	bl	800c500 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	685b      	ldr	r3, [r3, #4]
 800c75a:	4618      	mov	r0, r3
 800c75c:	f7ff fe5e 	bl	800c41c <LL_EXTI_EnableIT_32_63>
          break;
 800c760:	e01a      	b.n	800c798 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	685b      	ldr	r3, [r3, #4]
 800c766:	4618      	mov	r0, r3
 800c768:	f7ff fe7e 	bl	800c468 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	4618      	mov	r0, r3
 800c772:	f7ff fe9f 	bl	800c4b4 <LL_EXTI_EnableEvent_32_63>
          break;
 800c776:	e00f      	b.n	800c798 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	685b      	ldr	r3, [r3, #4]
 800c77c:	4618      	mov	r0, r3
 800c77e:	f7ff fe4d 	bl	800c41c <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	685b      	ldr	r3, [r3, #4]
 800c786:	4618      	mov	r0, r3
 800c788:	f7ff fe94 	bl	800c4b4 <LL_EXTI_EnableEvent_32_63>
          break;
 800c78c:	e004      	b.n	800c798 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 800c78e:	68fb      	ldr	r3, [r7, #12]
 800c790:	f043 0304 	orr.w	r3, r3, #4
 800c794:	60fb      	str	r3, [r7, #12]
          break;
 800c796:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	7a9b      	ldrb	r3, [r3, #10]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d043      	beq.n	800c828 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	7a9b      	ldrb	r3, [r3, #10]
 800c7a4:	2b02      	cmp	r3, #2
 800c7a6:	d00e      	beq.n	800c7c6 <LL_EXTI_Init+0x16e>
 800c7a8:	2b03      	cmp	r3, #3
 800c7aa:	d017      	beq.n	800c7dc <LL_EXTI_Init+0x184>
 800c7ac:	2b01      	cmp	r3, #1
 800c7ae:	d120      	bne.n	800c7f2 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7ff ff3b 	bl	800c630 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f7ff fec4 	bl	800c54c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800c7c4:	e031      	b.n	800c82a <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	685b      	ldr	r3, [r3, #4]
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f7ff fee4 	bl	800c598 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	685b      	ldr	r3, [r3, #4]
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f7ff ff05 	bl	800c5e4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800c7da:	e026      	b.n	800c82a <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	685b      	ldr	r3, [r3, #4]
 800c7e0:	4618      	mov	r0, r3
 800c7e2:	f7ff feb3 	bl	800c54c <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	4618      	mov	r0, r3
 800c7ec:	f7ff fefa 	bl	800c5e4 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800c7f0:	e01b      	b.n	800c82a <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 800c7f2:	68fb      	ldr	r3, [r7, #12]
 800c7f4:	f043 0305 	orr.w	r3, r3, #5
 800c7f8:	60fb      	str	r3, [r7, #12]
            break;
 800c7fa:	bf00      	nop
 800c7fc:	e015      	b.n	800c82a <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	4618      	mov	r0, r3
 800c804:	f7ff fe1c 	bl	800c440 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	681b      	ldr	r3, [r3, #0]
 800c80c:	4618      	mov	r0, r3
 800c80e:	f7ff fe63 	bl	800c4d8 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	685b      	ldr	r3, [r3, #4]
 800c816:	4618      	mov	r0, r3
 800c818:	f7ff fe26 	bl	800c468 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	685b      	ldr	r3, [r3, #4]
 800c820:	4618      	mov	r0, r3
 800c822:	f7ff fe6d 	bl	800c500 <LL_EXTI_DisableEvent_32_63>
 800c826:	e000      	b.n	800c82a <LL_EXTI_Init+0x1d2>
      }
 800c828:	bf00      	nop
  }

  return status;
 800c82a:	68fb      	ldr	r3, [r7, #12]
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	3710      	adds	r7, #16
 800c830:	46bd      	mov	sp, r7
 800c832:	bd80      	pop	{r7, pc}

0800c834 <LL_GPIO_SetPinMode>:
{
 800c834:	b480      	push	{r7}
 800c836:	b089      	sub	sp, #36	; 0x24
 800c838:	af00      	add	r7, sp, #0
 800c83a:	60f8      	str	r0, [r7, #12]
 800c83c:	60b9      	str	r1, [r7, #8]
 800c83e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	681a      	ldr	r2, [r3, #0]
 800c844:	68bb      	ldr	r3, [r7, #8]
 800c846:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c848:	697b      	ldr	r3, [r7, #20]
 800c84a:	fa93 f3a3 	rbit	r3, r3
 800c84e:	613b      	str	r3, [r7, #16]
  return result;
 800c850:	693b      	ldr	r3, [r7, #16]
 800c852:	fab3 f383 	clz	r3, r3
 800c856:	b2db      	uxtb	r3, r3
 800c858:	005b      	lsls	r3, r3, #1
 800c85a:	2103      	movs	r1, #3
 800c85c:	fa01 f303 	lsl.w	r3, r1, r3
 800c860:	43db      	mvns	r3, r3
 800c862:	401a      	ands	r2, r3
 800c864:	68bb      	ldr	r3, [r7, #8]
 800c866:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c868:	69fb      	ldr	r3, [r7, #28]
 800c86a:	fa93 f3a3 	rbit	r3, r3
 800c86e:	61bb      	str	r3, [r7, #24]
  return result;
 800c870:	69bb      	ldr	r3, [r7, #24]
 800c872:	fab3 f383 	clz	r3, r3
 800c876:	b2db      	uxtb	r3, r3
 800c878:	005b      	lsls	r3, r3, #1
 800c87a:	6879      	ldr	r1, [r7, #4]
 800c87c:	fa01 f303 	lsl.w	r3, r1, r3
 800c880:	431a      	orrs	r2, r3
 800c882:	68fb      	ldr	r3, [r7, #12]
 800c884:	601a      	str	r2, [r3, #0]
}
 800c886:	bf00      	nop
 800c888:	3724      	adds	r7, #36	; 0x24
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr

0800c892 <LL_GPIO_SetPinOutputType>:
{
 800c892:	b480      	push	{r7}
 800c894:	b085      	sub	sp, #20
 800c896:	af00      	add	r7, sp, #0
 800c898:	60f8      	str	r0, [r7, #12]
 800c89a:	60b9      	str	r1, [r7, #8]
 800c89c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	685a      	ldr	r2, [r3, #4]
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	43db      	mvns	r3, r3
 800c8a6:	401a      	ands	r2, r3
 800c8a8:	68bb      	ldr	r3, [r7, #8]
 800c8aa:	6879      	ldr	r1, [r7, #4]
 800c8ac:	fb01 f303 	mul.w	r3, r1, r3
 800c8b0:	431a      	orrs	r2, r3
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	605a      	str	r2, [r3, #4]
}
 800c8b6:	bf00      	nop
 800c8b8:	3714      	adds	r7, #20
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr

0800c8c2 <LL_GPIO_SetPinSpeed>:
{
 800c8c2:	b480      	push	{r7}
 800c8c4:	b089      	sub	sp, #36	; 0x24
 800c8c6:	af00      	add	r7, sp, #0
 800c8c8:	60f8      	str	r0, [r7, #12]
 800c8ca:	60b9      	str	r1, [r7, #8]
 800c8cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800c8ce:	68fb      	ldr	r3, [r7, #12]
 800c8d0:	689a      	ldr	r2, [r3, #8]
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	fa93 f3a3 	rbit	r3, r3
 800c8dc:	613b      	str	r3, [r7, #16]
  return result;
 800c8de:	693b      	ldr	r3, [r7, #16]
 800c8e0:	fab3 f383 	clz	r3, r3
 800c8e4:	b2db      	uxtb	r3, r3
 800c8e6:	005b      	lsls	r3, r3, #1
 800c8e8:	2103      	movs	r1, #3
 800c8ea:	fa01 f303 	lsl.w	r3, r1, r3
 800c8ee:	43db      	mvns	r3, r3
 800c8f0:	401a      	ands	r2, r3
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c8f6:	69fb      	ldr	r3, [r7, #28]
 800c8f8:	fa93 f3a3 	rbit	r3, r3
 800c8fc:	61bb      	str	r3, [r7, #24]
  return result;
 800c8fe:	69bb      	ldr	r3, [r7, #24]
 800c900:	fab3 f383 	clz	r3, r3
 800c904:	b2db      	uxtb	r3, r3
 800c906:	005b      	lsls	r3, r3, #1
 800c908:	6879      	ldr	r1, [r7, #4]
 800c90a:	fa01 f303 	lsl.w	r3, r1, r3
 800c90e:	431a      	orrs	r2, r3
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	609a      	str	r2, [r3, #8]
}
 800c914:	bf00      	nop
 800c916:	3724      	adds	r7, #36	; 0x24
 800c918:	46bd      	mov	sp, r7
 800c91a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c91e:	4770      	bx	lr

0800c920 <LL_GPIO_SetPinPull>:
{
 800c920:	b480      	push	{r7}
 800c922:	b089      	sub	sp, #36	; 0x24
 800c924:	af00      	add	r7, sp, #0
 800c926:	60f8      	str	r0, [r7, #12]
 800c928:	60b9      	str	r1, [r7, #8]
 800c92a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800c92c:	68fb      	ldr	r3, [r7, #12]
 800c92e:	68da      	ldr	r2, [r3, #12]
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c934:	697b      	ldr	r3, [r7, #20]
 800c936:	fa93 f3a3 	rbit	r3, r3
 800c93a:	613b      	str	r3, [r7, #16]
  return result;
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	fab3 f383 	clz	r3, r3
 800c942:	b2db      	uxtb	r3, r3
 800c944:	005b      	lsls	r3, r3, #1
 800c946:	2103      	movs	r1, #3
 800c948:	fa01 f303 	lsl.w	r3, r1, r3
 800c94c:	43db      	mvns	r3, r3
 800c94e:	401a      	ands	r2, r3
 800c950:	68bb      	ldr	r3, [r7, #8]
 800c952:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c954:	69fb      	ldr	r3, [r7, #28]
 800c956:	fa93 f3a3 	rbit	r3, r3
 800c95a:	61bb      	str	r3, [r7, #24]
  return result;
 800c95c:	69bb      	ldr	r3, [r7, #24]
 800c95e:	fab3 f383 	clz	r3, r3
 800c962:	b2db      	uxtb	r3, r3
 800c964:	005b      	lsls	r3, r3, #1
 800c966:	6879      	ldr	r1, [r7, #4]
 800c968:	fa01 f303 	lsl.w	r3, r1, r3
 800c96c:	431a      	orrs	r2, r3
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	60da      	str	r2, [r3, #12]
}
 800c972:	bf00      	nop
 800c974:	3724      	adds	r7, #36	; 0x24
 800c976:	46bd      	mov	sp, r7
 800c978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97c:	4770      	bx	lr

0800c97e <LL_GPIO_SetAFPin_0_7>:
{
 800c97e:	b480      	push	{r7}
 800c980:	b089      	sub	sp, #36	; 0x24
 800c982:	af00      	add	r7, sp, #0
 800c984:	60f8      	str	r0, [r7, #12]
 800c986:	60b9      	str	r1, [r7, #8]
 800c988:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	6a1a      	ldr	r2, [r3, #32]
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c992:	697b      	ldr	r3, [r7, #20]
 800c994:	fa93 f3a3 	rbit	r3, r3
 800c998:	613b      	str	r3, [r7, #16]
  return result;
 800c99a:	693b      	ldr	r3, [r7, #16]
 800c99c:	fab3 f383 	clz	r3, r3
 800c9a0:	b2db      	uxtb	r3, r3
 800c9a2:	009b      	lsls	r3, r3, #2
 800c9a4:	210f      	movs	r1, #15
 800c9a6:	fa01 f303 	lsl.w	r3, r1, r3
 800c9aa:	43db      	mvns	r3, r3
 800c9ac:	401a      	ands	r2, r3
 800c9ae:	68bb      	ldr	r3, [r7, #8]
 800c9b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c9b2:	69fb      	ldr	r3, [r7, #28]
 800c9b4:	fa93 f3a3 	rbit	r3, r3
 800c9b8:	61bb      	str	r3, [r7, #24]
  return result;
 800c9ba:	69bb      	ldr	r3, [r7, #24]
 800c9bc:	fab3 f383 	clz	r3, r3
 800c9c0:	b2db      	uxtb	r3, r3
 800c9c2:	009b      	lsls	r3, r3, #2
 800c9c4:	6879      	ldr	r1, [r7, #4]
 800c9c6:	fa01 f303 	lsl.w	r3, r1, r3
 800c9ca:	431a      	orrs	r2, r3
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	621a      	str	r2, [r3, #32]
}
 800c9d0:	bf00      	nop
 800c9d2:	3724      	adds	r7, #36	; 0x24
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr

0800c9dc <LL_GPIO_SetAFPin_8_15>:
{
 800c9dc:	b480      	push	{r7}
 800c9de:	b089      	sub	sp, #36	; 0x24
 800c9e0:	af00      	add	r7, sp, #0
 800c9e2:	60f8      	str	r0, [r7, #12]
 800c9e4:	60b9      	str	r1, [r7, #8]
 800c9e6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	0a1b      	lsrs	r3, r3, #8
 800c9f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800c9f2:	697b      	ldr	r3, [r7, #20]
 800c9f4:	fa93 f3a3 	rbit	r3, r3
 800c9f8:	613b      	str	r3, [r7, #16]
  return result;
 800c9fa:	693b      	ldr	r3, [r7, #16]
 800c9fc:	fab3 f383 	clz	r3, r3
 800ca00:	b2db      	uxtb	r3, r3
 800ca02:	009b      	lsls	r3, r3, #2
 800ca04:	210f      	movs	r1, #15
 800ca06:	fa01 f303 	lsl.w	r3, r1, r3
 800ca0a:	43db      	mvns	r3, r3
 800ca0c:	401a      	ands	r2, r3
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	0a1b      	lsrs	r3, r3, #8
 800ca12:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ca14:	69fb      	ldr	r3, [r7, #28]
 800ca16:	fa93 f3a3 	rbit	r3, r3
 800ca1a:	61bb      	str	r3, [r7, #24]
  return result;
 800ca1c:	69bb      	ldr	r3, [r7, #24]
 800ca1e:	fab3 f383 	clz	r3, r3
 800ca22:	b2db      	uxtb	r3, r3
 800ca24:	009b      	lsls	r3, r3, #2
 800ca26:	6879      	ldr	r1, [r7, #4]
 800ca28:	fa01 f303 	lsl.w	r3, r1, r3
 800ca2c:	431a      	orrs	r2, r3
 800ca2e:	68fb      	ldr	r3, [r7, #12]
 800ca30:	625a      	str	r2, [r3, #36]	; 0x24
}
 800ca32:	bf00      	nop
 800ca34:	3724      	adds	r7, #36	; 0x24
 800ca36:	46bd      	mov	sp, r7
 800ca38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3c:	4770      	bx	lr

0800ca3e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800ca3e:	b580      	push	{r7, lr}
 800ca40:	b086      	sub	sp, #24
 800ca42:	af00      	add	r7, sp, #0
 800ca44:	6078      	str	r0, [r7, #4]
 800ca46:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	fa93 f3a3 	rbit	r3, r3
 800ca54:	60bb      	str	r3, [r7, #8]
  return result;
 800ca56:	68bb      	ldr	r3, [r7, #8]
 800ca58:	fab3 f383 	clz	r3, r3
 800ca5c:	b2db      	uxtb	r3, r3
 800ca5e:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800ca60:	e040      	b.n	800cae4 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	681a      	ldr	r2, [r3, #0]
 800ca66:	2101      	movs	r1, #1
 800ca68:	697b      	ldr	r3, [r7, #20]
 800ca6a:	fa01 f303 	lsl.w	r3, r1, r3
 800ca6e:	4013      	ands	r3, r2
 800ca70:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 800ca72:	693b      	ldr	r3, [r7, #16]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d032      	beq.n	800cade <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800ca78:	683b      	ldr	r3, [r7, #0]
 800ca7a:	685b      	ldr	r3, [r3, #4]
 800ca7c:	461a      	mov	r2, r3
 800ca7e:	6939      	ldr	r1, [r7, #16]
 800ca80:	6878      	ldr	r0, [r7, #4]
 800ca82:	f7ff fed7 	bl	800c834 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800ca86:	683b      	ldr	r3, [r7, #0]
 800ca88:	685b      	ldr	r3, [r3, #4]
 800ca8a:	2b01      	cmp	r3, #1
 800ca8c:	d003      	beq.n	800ca96 <LL_GPIO_Init+0x58>
 800ca8e:	683b      	ldr	r3, [r7, #0]
 800ca90:	685b      	ldr	r3, [r3, #4]
 800ca92:	2b02      	cmp	r3, #2
 800ca94:	d106      	bne.n	800caa4 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	689b      	ldr	r3, [r3, #8]
 800ca9a:	461a      	mov	r2, r3
 800ca9c:	6939      	ldr	r1, [r7, #16]
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	f7ff ff0f 	bl	800c8c2 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	691b      	ldr	r3, [r3, #16]
 800caa8:	461a      	mov	r2, r3
 800caaa:	6939      	ldr	r1, [r7, #16]
 800caac:	6878      	ldr	r0, [r7, #4]
 800caae:	f7ff ff37 	bl	800c920 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	2b02      	cmp	r3, #2
 800cab8:	d111      	bne.n	800cade <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800caba:	693b      	ldr	r3, [r7, #16]
 800cabc:	2bff      	cmp	r3, #255	; 0xff
 800cabe:	d807      	bhi.n	800cad0 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800cac0:	683b      	ldr	r3, [r7, #0]
 800cac2:	695b      	ldr	r3, [r3, #20]
 800cac4:	461a      	mov	r2, r3
 800cac6:	6939      	ldr	r1, [r7, #16]
 800cac8:	6878      	ldr	r0, [r7, #4]
 800caca:	f7ff ff58 	bl	800c97e <LL_GPIO_SetAFPin_0_7>
 800cace:	e006      	b.n	800cade <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800cad0:	683b      	ldr	r3, [r7, #0]
 800cad2:	695b      	ldr	r3, [r3, #20]
 800cad4:	461a      	mov	r2, r3
 800cad6:	6939      	ldr	r1, [r7, #16]
 800cad8:	6878      	ldr	r0, [r7, #4]
 800cada:	f7ff ff7f 	bl	800c9dc <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	3301      	adds	r3, #1
 800cae2:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	681a      	ldr	r2, [r3, #0]
 800cae8:	697b      	ldr	r3, [r7, #20]
 800caea:	fa22 f303 	lsr.w	r3, r2, r3
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d1b7      	bne.n	800ca62 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800caf2:	683b      	ldr	r3, [r7, #0]
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	2b01      	cmp	r3, #1
 800caf8:	d003      	beq.n	800cb02 <LL_GPIO_Init+0xc4>
 800cafa:	683b      	ldr	r3, [r7, #0]
 800cafc:	685b      	ldr	r3, [r3, #4]
 800cafe:	2b02      	cmp	r3, #2
 800cb00:	d107      	bne.n	800cb12 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800cb02:	683b      	ldr	r3, [r7, #0]
 800cb04:	6819      	ldr	r1, [r3, #0]
 800cb06:	683b      	ldr	r3, [r7, #0]
 800cb08:	68db      	ldr	r3, [r3, #12]
 800cb0a:	461a      	mov	r2, r3
 800cb0c:	6878      	ldr	r0, [r7, #4]
 800cb0e:	f7ff fec0 	bl	800c892 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800cb12:	2300      	movs	r3, #0
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3718      	adds	r7, #24
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}

0800cb1c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 800cb1c:	b590      	push	{r4, r7, lr}
 800cb1e:	b087      	sub	sp, #28
 800cb20:	af02      	add	r7, sp, #8
 800cb22:	4604      	mov	r4, r0
 800cb24:	4608      	mov	r0, r1
 800cb26:	4611      	mov	r1, r2
 800cb28:	461a      	mov	r2, r3
 800cb2a:	4623      	mov	r3, r4
 800cb2c:	80fb      	strh	r3, [r7, #6]
 800cb2e:	4603      	mov	r3, r0
 800cb30:	80bb      	strh	r3, [r7, #4]
 800cb32:	460b      	mov	r3, r1
 800cb34:	807b      	strh	r3, [r7, #2]
 800cb36:	4613      	mov	r3, r2
 800cb38:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 800cb3e:	7bfa      	ldrb	r2, [r7, #15]
 800cb40:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d93a      	bls.n	800cbbe <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 800cb48:	88ba      	ldrh	r2, [r7, #4]
 800cb4a:	7bfb      	ldrb	r3, [r7, #15]
 800cb4c:	441a      	add	r2, r3
 800cb4e:	88b9      	ldrh	r1, [r7, #4]
 800cb50:	883b      	ldrh	r3, [r7, #0]
 800cb52:	4419      	add	r1, r3
 800cb54:	7bfb      	ldrb	r3, [r7, #15]
 800cb56:	1acb      	subs	r3, r1, r3
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	f000 8090 	beq.w	800cc7e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 800cb5e:	88fa      	ldrh	r2, [r7, #6]
 800cb60:	7bfb      	ldrb	r3, [r7, #15]
 800cb62:	441a      	add	r2, r3
 800cb64:	88f9      	ldrh	r1, [r7, #6]
 800cb66:	887b      	ldrh	r3, [r7, #2]
 800cb68:	4419      	add	r1, r3
 800cb6a:	7bfb      	ldrb	r3, [r7, #15]
 800cb6c:	1acb      	subs	r3, r1, r3
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	f000 8085 	beq.w	800cc7e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 800cb74:	7bfb      	ldrb	r3, [r7, #15]
 800cb76:	b29a      	uxth	r2, r3
 800cb78:	88fb      	ldrh	r3, [r7, #6]
 800cb7a:	4413      	add	r3, r2
 800cb7c:	b298      	uxth	r0, r3
 800cb7e:	7bfb      	ldrb	r3, [r7, #15]
 800cb80:	b29a      	uxth	r2, r3
 800cb82:	88bb      	ldrh	r3, [r7, #4]
 800cb84:	4413      	add	r3, r2
 800cb86:	b299      	uxth	r1, r3
 800cb88:	7bfb      	ldrb	r3, [r7, #15]
 800cb8a:	b29b      	uxth	r3, r3
 800cb8c:	005b      	lsls	r3, r3, #1
 800cb8e:	b29b      	uxth	r3, r3
 800cb90:	887a      	ldrh	r2, [r7, #2]
 800cb92:	1ad3      	subs	r3, r2, r3
 800cb94:	b29b      	uxth	r3, r3
 800cb96:	3301      	adds	r3, #1
 800cb98:	b29c      	uxth	r4, r3
 800cb9a:	7bfb      	ldrb	r3, [r7, #15]
 800cb9c:	b29b      	uxth	r3, r3
 800cb9e:	005b      	lsls	r3, r3, #1
 800cba0:	b29b      	uxth	r3, r3
 800cba2:	883a      	ldrh	r2, [r7, #0]
 800cba4:	1ad3      	subs	r3, r2, r3
 800cba6:	b29b      	uxth	r3, r3
 800cba8:	3301      	adds	r3, #1
 800cbaa:	b29a      	uxth	r2, r3
 800cbac:	2304      	movs	r3, #4
 800cbae:	9301      	str	r3, [sp, #4]
 800cbb0:	8c3b      	ldrh	r3, [r7, #32]
 800cbb2:	9300      	str	r3, [sp, #0]
 800cbb4:	4613      	mov	r3, r2
 800cbb6:	4622      	mov	r2, r4
 800cbb8:	f000 fcd6 	bl	800d568 <ILI9341_Draw_Rectangle>
				goto finish;
 800cbbc:	e060      	b.n	800cc80 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 800cbbe:	7bfb      	ldrb	r3, [r7, #15]
 800cbc0:	b29a      	uxth	r2, r3
 800cbc2:	88fb      	ldrh	r3, [r7, #6]
 800cbc4:	4413      	add	r3, r2
 800cbc6:	b298      	uxth	r0, r3
 800cbc8:	7bfb      	ldrb	r3, [r7, #15]
 800cbca:	b29a      	uxth	r2, r3
 800cbcc:	88bb      	ldrh	r3, [r7, #4]
 800cbce:	4413      	add	r3, r2
 800cbd0:	b299      	uxth	r1, r3
 800cbd2:	7bfb      	ldrb	r3, [r7, #15]
 800cbd4:	b29b      	uxth	r3, r3
 800cbd6:	005b      	lsls	r3, r3, #1
 800cbd8:	b29b      	uxth	r3, r3
 800cbda:	887a      	ldrh	r2, [r7, #2]
 800cbdc:	1ad3      	subs	r3, r2, r3
 800cbde:	b29a      	uxth	r2, r3
 800cbe0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cbe4:	b29b      	uxth	r3, r3
 800cbe6:	f000 fa81 	bl	800d0ec <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 800cbea:	7bfb      	ldrb	r3, [r7, #15]
 800cbec:	b29a      	uxth	r2, r3
 800cbee:	88fb      	ldrh	r3, [r7, #6]
 800cbf0:	4413      	add	r3, r2
 800cbf2:	b298      	uxth	r0, r3
										(y + h) - b,
 800cbf4:	88ba      	ldrh	r2, [r7, #4]
 800cbf6:	883b      	ldrh	r3, [r7, #0]
 800cbf8:	4413      	add	r3, r2
 800cbfa:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800cbfc:	7bfb      	ldrb	r3, [r7, #15]
 800cbfe:	b29b      	uxth	r3, r3
 800cc00:	1ad3      	subs	r3, r2, r3
 800cc02:	b299      	uxth	r1, r3
 800cc04:	7bfb      	ldrb	r3, [r7, #15]
 800cc06:	b29b      	uxth	r3, r3
 800cc08:	887a      	ldrh	r2, [r7, #2]
 800cc0a:	1ad3      	subs	r3, r2, r3
 800cc0c:	b29a      	uxth	r2, r3
 800cc0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cc12:	b29b      	uxth	r3, r3
 800cc14:	f000 fa6a 	bl	800d0ec <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 800cc18:	7bfb      	ldrb	r3, [r7, #15]
 800cc1a:	b29a      	uxth	r2, r3
 800cc1c:	88fb      	ldrh	r3, [r7, #6]
 800cc1e:	4413      	add	r3, r2
 800cc20:	b298      	uxth	r0, r3
 800cc22:	7bfb      	ldrb	r3, [r7, #15]
 800cc24:	b29a      	uxth	r2, r3
 800cc26:	88bb      	ldrh	r3, [r7, #4]
 800cc28:	4413      	add	r3, r2
 800cc2a:	b299      	uxth	r1, r3
 800cc2c:	7bfb      	ldrb	r3, [r7, #15]
 800cc2e:	b29b      	uxth	r3, r3
 800cc30:	005b      	lsls	r3, r3, #1
 800cc32:	b29b      	uxth	r3, r3
 800cc34:	883a      	ldrh	r2, [r7, #0]
 800cc36:	1ad3      	subs	r3, r2, r3
 800cc38:	b29a      	uxth	r2, r3
 800cc3a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cc3e:	b29b      	uxth	r3, r3
 800cc40:	f000 fa9c 	bl	800d17c <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 800cc44:	88fa      	ldrh	r2, [r7, #6]
 800cc46:	887b      	ldrh	r3, [r7, #2]
 800cc48:	4413      	add	r3, r2
 800cc4a:	b29a      	uxth	r2, r3
 800cc4c:	7bfb      	ldrb	r3, [r7, #15]
 800cc4e:	b29b      	uxth	r3, r3
 800cc50:	1ad3      	subs	r3, r2, r3
 800cc52:	b298      	uxth	r0, r3
 800cc54:	7bfb      	ldrb	r3, [r7, #15]
 800cc56:	b29a      	uxth	r2, r3
 800cc58:	88bb      	ldrh	r3, [r7, #4]
 800cc5a:	4413      	add	r3, r2
 800cc5c:	b299      	uxth	r1, r3
 800cc5e:	7bfb      	ldrb	r3, [r7, #15]
 800cc60:	b29b      	uxth	r3, r3
 800cc62:	005b      	lsls	r3, r3, #1
 800cc64:	b29b      	uxth	r3, r3
 800cc66:	883a      	ldrh	r2, [r7, #0]
 800cc68:	1ad3      	subs	r3, r2, r3
 800cc6a:	b29a      	uxth	r2, r3
 800cc6c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800cc70:	b29b      	uxth	r3, r3
 800cc72:	f000 fa83 	bl	800d17c <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 800cc76:	7bfb      	ldrb	r3, [r7, #15]
 800cc78:	3301      	adds	r3, #1
 800cc7a:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 800cc7c:	e75f      	b.n	800cb3e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 800cc7e:	bf00      	nop
	// done
	return;
 800cc80:	bf00      	nop
}
 800cc82:	3714      	adds	r7, #20
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd90      	pop	{r4, r7, pc}

0800cc88 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800cc88:	b590      	push	{r4, r7, lr}
 800cc8a:	b089      	sub	sp, #36	; 0x24
 800cc8c:	af02      	add	r7, sp, #8
 800cc8e:	4604      	mov	r4, r0
 800cc90:	4608      	mov	r0, r1
 800cc92:	4611      	mov	r1, r2
 800cc94:	461a      	mov	r2, r3
 800cc96:	4623      	mov	r3, r4
 800cc98:	71fb      	strb	r3, [r7, #7]
 800cc9a:	4603      	mov	r3, r0
 800cc9c:	80bb      	strh	r3, [r7, #4]
 800cc9e:	460b      	mov	r3, r1
 800cca0:	807b      	strh	r3, [r7, #2]
 800cca2:	4613      	mov	r3, r2
 800cca4:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 800cca6:	79fb      	ldrb	r3, [r7, #7]
 800cca8:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800ccaa:	7dfb      	ldrb	r3, [r7, #23]
 800ccac:	2b1f      	cmp	r3, #31
 800ccae:	d802      	bhi.n	800ccb6 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 800ccb0:	2300      	movs	r3, #0
 800ccb2:	71fb      	strb	r3, [r7, #7]
 800ccb4:	e002      	b.n	800ccbc <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 800ccb6:	7dfb      	ldrb	r3, [r7, #23]
 800ccb8:	3b20      	subs	r3, #32
 800ccba:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	753b      	strb	r3, [r7, #20]
 800ccc0:	e012      	b.n	800cce8 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 800ccc2:	7dfa      	ldrb	r2, [r7, #23]
 800ccc4:	7d38      	ldrb	r0, [r7, #20]
 800ccc6:	7d39      	ldrb	r1, [r7, #20]
 800ccc8:	4c48      	ldr	r4, [pc, #288]	; (800cdec <ILI9341_Draw_Char+0x164>)
 800ccca:	4613      	mov	r3, r2
 800cccc:	005b      	lsls	r3, r3, #1
 800ccce:	4413      	add	r3, r2
 800ccd0:	005b      	lsls	r3, r3, #1
 800ccd2:	4423      	add	r3, r4
 800ccd4:	4403      	add	r3, r0
 800ccd6:	781a      	ldrb	r2, [r3, #0]
 800ccd8:	f107 0318 	add.w	r3, r7, #24
 800ccdc:	440b      	add	r3, r1
 800ccde:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800cce2:	7d3b      	ldrb	r3, [r7, #20]
 800cce4:	3301      	adds	r3, #1
 800cce6:	753b      	strb	r3, [r7, #20]
 800cce8:	7d3b      	ldrb	r3, [r7, #20]
 800ccea:	2b05      	cmp	r3, #5
 800ccec:	d9e9      	bls.n	800ccc2 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800ccee:	2300      	movs	r3, #0
 800ccf0:	757b      	strb	r3, [r7, #21]
 800ccf2:	e074      	b.n	800cdde <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	75bb      	strb	r3, [r7, #22]
 800ccf8:	e06b      	b.n	800cdd2 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800ccfa:	7d7b      	ldrb	r3, [r7, #21]
 800ccfc:	f107 0218 	add.w	r2, r7, #24
 800cd00:	4413      	add	r3, r2
 800cd02:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800cd06:	461a      	mov	r2, r3
 800cd08:	7dbb      	ldrb	r3, [r7, #22]
 800cd0a:	fa42 f303 	asr.w	r3, r2, r3
 800cd0e:	f003 0301 	and.w	r3, r3, #1
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d02d      	beq.n	800cd72 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 800cd16:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cd18:	2b01      	cmp	r3, #1
 800cd1a:	d10e      	bne.n	800cd3a <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800cd1c:	7d7b      	ldrb	r3, [r7, #21]
 800cd1e:	b29a      	uxth	r2, r3
 800cd20:	88bb      	ldrh	r3, [r7, #4]
 800cd22:	4413      	add	r3, r2
 800cd24:	b298      	uxth	r0, r3
 800cd26:	7dbb      	ldrb	r3, [r7, #22]
 800cd28:	b29a      	uxth	r2, r3
 800cd2a:	887b      	ldrh	r3, [r7, #2]
 800cd2c:	4413      	add	r3, r2
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	883a      	ldrh	r2, [r7, #0]
 800cd32:	4619      	mov	r1, r3
 800cd34:	f000 fae0 	bl	800d2f8 <ILI9341_Draw_Pixel>
 800cd38:	e048      	b.n	800cdcc <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 800cd3a:	7d7b      	ldrb	r3, [r7, #21]
 800cd3c:	b29b      	uxth	r3, r3
 800cd3e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800cd40:	fb12 f303 	smulbb	r3, r2, r3
 800cd44:	b29a      	uxth	r2, r3
 800cd46:	88bb      	ldrh	r3, [r7, #4]
 800cd48:	4413      	add	r3, r2
 800cd4a:	b298      	uxth	r0, r3
 800cd4c:	7dbb      	ldrb	r3, [r7, #22]
 800cd4e:	b29b      	uxth	r3, r3
 800cd50:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800cd52:	fb12 f303 	smulbb	r3, r2, r3
 800cd56:	b29a      	uxth	r2, r3
 800cd58:	887b      	ldrh	r3, [r7, #2]
 800cd5a:	4413      	add	r3, r2
 800cd5c:	b299      	uxth	r1, r3
 800cd5e:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800cd60:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800cd62:	2301      	movs	r3, #1
 800cd64:	9301      	str	r3, [sp, #4]
 800cd66:	883b      	ldrh	r3, [r7, #0]
 800cd68:	9300      	str	r3, [sp, #0]
 800cd6a:	4623      	mov	r3, r4
 800cd6c:	f000 fbfc 	bl	800d568 <ILI9341_Draw_Rectangle>
 800cd70:	e02c      	b.n	800cdcc <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 800cd72:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800cd74:	2b01      	cmp	r3, #1
 800cd76:	d10e      	bne.n	800cd96 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 800cd78:	7d7b      	ldrb	r3, [r7, #21]
 800cd7a:	b29a      	uxth	r2, r3
 800cd7c:	88bb      	ldrh	r3, [r7, #4]
 800cd7e:	4413      	add	r3, r2
 800cd80:	b298      	uxth	r0, r3
 800cd82:	7dbb      	ldrb	r3, [r7, #22]
 800cd84:	b29a      	uxth	r2, r3
 800cd86:	887b      	ldrh	r3, [r7, #2]
 800cd88:	4413      	add	r3, r2
 800cd8a:	b29b      	uxth	r3, r3
 800cd8c:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800cd8e:	4619      	mov	r1, r3
 800cd90:	f000 fab2 	bl	800d2f8 <ILI9341_Draw_Pixel>
 800cd94:	e01a      	b.n	800cdcc <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 800cd96:	7d7b      	ldrb	r3, [r7, #21]
 800cd98:	b29b      	uxth	r3, r3
 800cd9a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800cd9c:	fb12 f303 	smulbb	r3, r2, r3
 800cda0:	b29a      	uxth	r2, r3
 800cda2:	88bb      	ldrh	r3, [r7, #4]
 800cda4:	4413      	add	r3, r2
 800cda6:	b298      	uxth	r0, r3
 800cda8:	7dbb      	ldrb	r3, [r7, #22]
 800cdaa:	b29b      	uxth	r3, r3
 800cdac:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800cdae:	fb12 f303 	smulbb	r3, r2, r3
 800cdb2:	b29a      	uxth	r2, r3
 800cdb4:	887b      	ldrh	r3, [r7, #2]
 800cdb6:	4413      	add	r3, r2
 800cdb8:	b299      	uxth	r1, r3
 800cdba:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800cdbc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800cdbe:	2301      	movs	r3, #1
 800cdc0:	9301      	str	r3, [sp, #4]
 800cdc2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800cdc4:	9300      	str	r3, [sp, #0]
 800cdc6:	4623      	mov	r3, r4
 800cdc8:	f000 fbce 	bl	800d568 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800cdcc:	7dbb      	ldrb	r3, [r7, #22]
 800cdce:	3301      	adds	r3, #1
 800cdd0:	75bb      	strb	r3, [r7, #22]
 800cdd2:	7dbb      	ldrb	r3, [r7, #22]
 800cdd4:	2b07      	cmp	r3, #7
 800cdd6:	d990      	bls.n	800ccfa <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 800cdd8:	7d7b      	ldrb	r3, [r7, #21]
 800cdda:	3301      	adds	r3, #1
 800cddc:	757b      	strb	r3, [r7, #21]
 800cdde:	7d7b      	ldrb	r3, [r7, #21]
 800cde0:	2b05      	cmp	r3, #5
 800cde2:	d987      	bls.n	800ccf4 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 800cde4:	bf00      	nop
 800cde6:	371c      	adds	r7, #28
 800cde8:	46bd      	mov	sp, r7
 800cdea:	bd90      	pop	{r4, r7, pc}
 800cdec:	08010edc 	.word	0x08010edc

0800cdf0 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 800cdf0:	b590      	push	{r4, r7, lr}
 800cdf2:	b087      	sub	sp, #28
 800cdf4:	af02      	add	r7, sp, #8
 800cdf6:	60f8      	str	r0, [r7, #12]
 800cdf8:	4608      	mov	r0, r1
 800cdfa:	4611      	mov	r1, r2
 800cdfc:	461a      	mov	r2, r3
 800cdfe:	4603      	mov	r3, r0
 800ce00:	817b      	strh	r3, [r7, #10]
 800ce02:	460b      	mov	r3, r1
 800ce04:	813b      	strh	r3, [r7, #8]
 800ce06:	4613      	mov	r3, r2
 800ce08:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 800ce0a:	e016      	b.n	800ce3a <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	1c5a      	adds	r2, r3, #1
 800ce10:	60fa      	str	r2, [r7, #12]
 800ce12:	7818      	ldrb	r0, [r3, #0]
 800ce14:	88fc      	ldrh	r4, [r7, #6]
 800ce16:	893a      	ldrh	r2, [r7, #8]
 800ce18:	8979      	ldrh	r1, [r7, #10]
 800ce1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ce1c:	9301      	str	r3, [sp, #4]
 800ce1e:	8c3b      	ldrh	r3, [r7, #32]
 800ce20:	9300      	str	r3, [sp, #0]
 800ce22:	4623      	mov	r3, r4
 800ce24:	f7ff ff30 	bl	800cc88 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 800ce28:	8c3b      	ldrh	r3, [r7, #32]
 800ce2a:	461a      	mov	r2, r3
 800ce2c:	0052      	lsls	r2, r2, #1
 800ce2e:	4413      	add	r3, r2
 800ce30:	005b      	lsls	r3, r3, #1
 800ce32:	b29a      	uxth	r2, r3
 800ce34:	897b      	ldrh	r3, [r7, #10]
 800ce36:	4413      	add	r3, r2
 800ce38:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	781b      	ldrb	r3, [r3, #0]
 800ce3e:	2b00      	cmp	r3, #0
 800ce40:	d1e4      	bne.n	800ce0c <ILI9341_Draw_Text+0x1c>
    }


}
 800ce42:	bf00      	nop
 800ce44:	3714      	adds	r7, #20
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd90      	pop	{r4, r7, pc}
	...

0800ce4c <ILI9341_FillScreenGradient>:
		GPIOC->ODR |= CS_Pin;
	}
}

void ILI9341_FillScreenGradient()
{
 800ce4c:	b580      	push	{r7, lr}
 800ce4e:	b084      	sub	sp, #16
 800ce50:	af02      	add	r7, sp, #8
	uint16_t x = 0;
 800ce52:	2300      	movs	r3, #0
 800ce54:	80bb      	strh	r3, [r7, #4]
	//ILI9341_Draw_Text("Colour gradient", 10, 10, BLACK, 1, WHITE);
	//ILI9341_Draw_Text("Grayscale", 10, 20, BLACK, 1, WHITE);



	for(uint16_t i = 0; i <= (320); i++)
 800ce56:	2300      	movs	r3, #0
 800ce58:	80fb      	strh	r3, [r7, #6]
 800ce5a:	e010      	b.n	800ce7e <ILI9341_FillScreenGradient+0x32>

		uint16_t RGB_color = Red + Green + Blue;
		ILI9341_Draw_Rectangle(i, x, 1, 240, RGB_color, AREA_CHUNK);
*/

	ILI9341_Draw_Rectangle(i, x, 1, 240, (uint16_t)fade_log_seq_data_table[i], AREA_CHUNK);
 800ce5c:	88fb      	ldrh	r3, [r7, #6]
 800ce5e:	4a0c      	ldr	r2, [pc, #48]	; (800ce90 <ILI9341_FillScreenGradient+0x44>)
 800ce60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ce64:	b29b      	uxth	r3, r3
 800ce66:	88b9      	ldrh	r1, [r7, #4]
 800ce68:	88f8      	ldrh	r0, [r7, #6]
 800ce6a:	2204      	movs	r2, #4
 800ce6c:	9201      	str	r2, [sp, #4]
 800ce6e:	9300      	str	r3, [sp, #0]
 800ce70:	23f0      	movs	r3, #240	; 0xf0
 800ce72:	2201      	movs	r2, #1
 800ce74:	f000 fb78 	bl	800d568 <ILI9341_Draw_Rectangle>
	for(uint16_t i = 0; i <= (320); i++)
 800ce78:	88fb      	ldrh	r3, [r7, #6]
 800ce7a:	3301      	adds	r3, #1
 800ce7c:	80fb      	strh	r3, [r7, #6]
 800ce7e:	88fb      	ldrh	r3, [r7, #6]
 800ce80:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800ce84:	d9ea      	bls.n	800ce5c <ILI9341_FillScreenGradient+0x10>

	}
}
 800ce86:	bf00      	nop
 800ce88:	3708      	adds	r7, #8
 800ce8a:	46bd      	mov	sp, r7
 800ce8c:	bd80      	pop	{r7, pc}
 800ce8e:	bf00      	nop
 800ce90:	20000cb8 	.word	0x20000cb8

0800ce94 <ILI9341_Init>:
 *
 * Initialize LCD display
 *
 */
void ILI9341_Init(void)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	af00      	add	r7, sp, #0

	_LCD_Enable();
 800ce98:	f000 fc3a 	bl	800d710 <_LCD_Enable>
	ILI9341_SPI_Init();
 800ce9c:	f000 f908 	bl	800d0b0 <ILI9341_SPI_Init>
	_LCD_Reset();
 800cea0:	f000 fc46 	bl	800d730 <_LCD_Reset>

	//SOFTWARE RESET
	_LCD_SendCommand(0x01);
 800cea4:	2001      	movs	r0, #1
 800cea6:	f000 fd11 	bl	800d8cc <_LCD_SendCommand>
	HAL_Delay(2000);
 800ceaa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800ceae:	f7fa fd2b 	bl	8007908 <HAL_Delay>

	//POWER CONTROL A
	_LCD_SendCommand(0xCB);
 800ceb2:	20cb      	movs	r0, #203	; 0xcb
 800ceb4:	f000 fd0a 	bl	800d8cc <_LCD_SendCommand>
	_LCD_SendData(0x39);
 800ceb8:	2039      	movs	r0, #57	; 0x39
 800ceba:	f000 fd39 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x2C);
 800cebe:	202c      	movs	r0, #44	; 0x2c
 800cec0:	f000 fd36 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x00);
 800cec4:	2000      	movs	r0, #0
 800cec6:	f000 fd33 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x34);
 800ceca:	2034      	movs	r0, #52	; 0x34
 800cecc:	f000 fd30 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x02);
 800ced0:	2002      	movs	r0, #2
 800ced2:	f000 fd2d 	bl	800d930 <_LCD_SendData>

	//POWER CONTROL B
	_LCD_SendCommand(0xCF);
 800ced6:	20cf      	movs	r0, #207	; 0xcf
 800ced8:	f000 fcf8 	bl	800d8cc <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800cedc:	2000      	movs	r0, #0
 800cede:	f000 fd27 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800cee2:	20c1      	movs	r0, #193	; 0xc1
 800cee4:	f000 fd24 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x30);
 800cee8:	2030      	movs	r0, #48	; 0x30
 800ceea:	f000 fd21 	bl	800d930 <_LCD_SendData>

	//DRIVER TIMING CONTROL A
	_LCD_SendCommand(0xE8);
 800ceee:	20e8      	movs	r0, #232	; 0xe8
 800cef0:	f000 fcec 	bl	800d8cc <_LCD_SendCommand>
	_LCD_SendData(0x85);
 800cef4:	2085      	movs	r0, #133	; 0x85
 800cef6:	f000 fd1b 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x00);
 800cefa:	2000      	movs	r0, #0
 800cefc:	f000 fd18 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x78);
 800cf00:	2078      	movs	r0, #120	; 0x78
 800cf02:	f000 fd15 	bl	800d930 <_LCD_SendData>

	//DRIVER TIMING CONTROL B
	_LCD_SendCommand(0xEA);
 800cf06:	20ea      	movs	r0, #234	; 0xea
 800cf08:	f000 fce0 	bl	800d8cc <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800cf0c:	2000      	movs	r0, #0
 800cf0e:	f000 fd0f 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x00);
 800cf12:	2000      	movs	r0, #0
 800cf14:	f000 fd0c 	bl	800d930 <_LCD_SendData>

	//POWER ON SEQUENCE CONTROL
	_LCD_SendCommand(0xED);
 800cf18:	20ed      	movs	r0, #237	; 0xed
 800cf1a:	f000 fcd7 	bl	800d8cc <_LCD_SendCommand>
	_LCD_SendData(0x64);
 800cf1e:	2064      	movs	r0, #100	; 0x64
 800cf20:	f000 fd06 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x03);
 800cf24:	2003      	movs	r0, #3
 800cf26:	f000 fd03 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x12);
 800cf2a:	2012      	movs	r0, #18
 800cf2c:	f000 fd00 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x81);
 800cf30:	2081      	movs	r0, #129	; 0x81
 800cf32:	f000 fcfd 	bl	800d930 <_LCD_SendData>

	//PUMP RATIO CONTROL
	_LCD_SendCommand(0xF7);
 800cf36:	20f7      	movs	r0, #247	; 0xf7
 800cf38:	f000 fcc8 	bl	800d8cc <_LCD_SendCommand>
	_LCD_SendData(0x20);
 800cf3c:	2020      	movs	r0, #32
 800cf3e:	f000 fcf7 	bl	800d930 <_LCD_SendData>

	//POWER CONTROL,VRH[5:0]
	_LCD_SendCommand(0xC0);
 800cf42:	20c0      	movs	r0, #192	; 0xc0
 800cf44:	f000 fcc2 	bl	800d8cc <_LCD_SendCommand>
	_LCD_SendData(0x23);
 800cf48:	2023      	movs	r0, #35	; 0x23
 800cf4a:	f000 fcf1 	bl	800d930 <_LCD_SendData>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	_LCD_SendCommand(0xC1);
 800cf4e:	20c1      	movs	r0, #193	; 0xc1
 800cf50:	f000 fcbc 	bl	800d8cc <_LCD_SendCommand>
	_LCD_SendData(0x10);
 800cf54:	2010      	movs	r0, #16
 800cf56:	f000 fceb 	bl	800d930 <_LCD_SendData>

	//VCM CONTROL
	_LCD_SendCommand(0xC5);
 800cf5a:	20c5      	movs	r0, #197	; 0xc5
 800cf5c:	f000 fcb6 	bl	800d8cc <_LCD_SendCommand>
	_LCD_SendData(0x3E);
 800cf60:	203e      	movs	r0, #62	; 0x3e
 800cf62:	f000 fce5 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x28);
 800cf66:	2028      	movs	r0, #40	; 0x28
 800cf68:	f000 fce2 	bl	800d930 <_LCD_SendData>

	//VCM CONTROL 2
	_LCD_SendCommand(0xC7);
 800cf6c:	20c7      	movs	r0, #199	; 0xc7
 800cf6e:	f000 fcad 	bl	800d8cc <_LCD_SendCommand>
	_LCD_SendData(0x86);
 800cf72:	2086      	movs	r0, #134	; 0x86
 800cf74:	f000 fcdc 	bl	800d930 <_LCD_SendData>

	//MEMORY ACCESS CONTROL
	_LCD_SendCommand(0x36);
 800cf78:	2036      	movs	r0, #54	; 0x36
 800cf7a:	f000 fca7 	bl	800d8cc <_LCD_SendCommand>
	_LCD_SendData(0x48);
 800cf7e:	2048      	movs	r0, #72	; 0x48
 800cf80:	f000 fcd6 	bl	800d930 <_LCD_SendData>


	//PIXEL FORMAT
	_LCD_SendCommand(0x3A);
 800cf84:	203a      	movs	r0, #58	; 0x3a
 800cf86:	f000 fca1 	bl	800d8cc <_LCD_SendCommand>
	_LCD_SendData(0x55);
 800cf8a:	2055      	movs	r0, #85	; 0x55
 800cf8c:	f000 fcd0 	bl	800d930 <_LCD_SendData>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	_LCD_SendCommand(0xB1);
 800cf90:	20b1      	movs	r0, #177	; 0xb1
 800cf92:	f000 fc9b 	bl	800d8cc <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800cf96:	2000      	movs	r0, #0
 800cf98:	f000 fcca 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x18);
 800cf9c:	2018      	movs	r0, #24
 800cf9e:	f000 fcc7 	bl	800d930 <_LCD_SendData>

	//DISPLAY FUNCTION CONTROL
	_LCD_SendCommand(0xB6);
 800cfa2:	20b6      	movs	r0, #182	; 0xb6
 800cfa4:	f000 fc92 	bl	800d8cc <_LCD_SendCommand>
	_LCD_SendData(0x08);
 800cfa8:	2008      	movs	r0, #8
 800cfaa:	f000 fcc1 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x82);
 800cfae:	2082      	movs	r0, #130	; 0x82
 800cfb0:	f000 fcbe 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x27);
 800cfb4:	2027      	movs	r0, #39	; 0x27
 800cfb6:	f000 fcbb 	bl	800d930 <_LCD_SendData>


	//3GAMMA FUNCTION DISABLE
	_LCD_SendCommand(0xF2);
 800cfba:	20f2      	movs	r0, #242	; 0xf2
 800cfbc:	f000 fc86 	bl	800d8cc <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800cfc0:	2000      	movs	r0, #0
 800cfc2:	f000 fcb5 	bl	800d930 <_LCD_SendData>

	//GAMMA CURVE SELECTED
	_LCD_SendCommand(0x26);
 800cfc6:	2026      	movs	r0, #38	; 0x26
 800cfc8:	f000 fc80 	bl	800d8cc <_LCD_SendCommand>
	_LCD_SendData(0x01);
 800cfcc:	2001      	movs	r0, #1
 800cfce:	f000 fcaf 	bl	800d930 <_LCD_SendData>

	//POSITIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE0);
 800cfd2:	20e0      	movs	r0, #224	; 0xe0
 800cfd4:	f000 fc7a 	bl	800d8cc <_LCD_SendCommand>
	_LCD_SendData(0x0F);
 800cfd8:	200f      	movs	r0, #15
 800cfda:	f000 fca9 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x31);
 800cfde:	2031      	movs	r0, #49	; 0x31
 800cfe0:	f000 fca6 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x2B);
 800cfe4:	202b      	movs	r0, #43	; 0x2b
 800cfe6:	f000 fca3 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800cfea:	200c      	movs	r0, #12
 800cfec:	f000 fca0 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800cff0:	200e      	movs	r0, #14
 800cff2:	f000 fc9d 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x08);
 800cff6:	2008      	movs	r0, #8
 800cff8:	f000 fc9a 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x4E);
 800cffc:	204e      	movs	r0, #78	; 0x4e
 800cffe:	f000 fc97 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0xF1);
 800d002:	20f1      	movs	r0, #241	; 0xf1
 800d004:	f000 fc94 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x37);
 800d008:	2037      	movs	r0, #55	; 0x37
 800d00a:	f000 fc91 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x07);
 800d00e:	2007      	movs	r0, #7
 800d010:	f000 fc8e 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x10);
 800d014:	2010      	movs	r0, #16
 800d016:	f000 fc8b 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x03);
 800d01a:	2003      	movs	r0, #3
 800d01c:	f000 fc88 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800d020:	200e      	movs	r0, #14
 800d022:	f000 fc85 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x09);
 800d026:	2009      	movs	r0, #9
 800d028:	f000 fc82 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x00);
 800d02c:	2000      	movs	r0, #0
 800d02e:	f000 fc7f 	bl	800d930 <_LCD_SendData>

	//NEGATIVE GAMMA CORRECTION
	_LCD_SendCommand(0xE1);
 800d032:	20e1      	movs	r0, #225	; 0xe1
 800d034:	f000 fc4a 	bl	800d8cc <_LCD_SendCommand>
	_LCD_SendData(0x00);
 800d038:	2000      	movs	r0, #0
 800d03a:	f000 fc79 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x0E);
 800d03e:	200e      	movs	r0, #14
 800d040:	f000 fc76 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x14);
 800d044:	2014      	movs	r0, #20
 800d046:	f000 fc73 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x03);
 800d04a:	2003      	movs	r0, #3
 800d04c:	f000 fc70 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x11);
 800d050:	2011      	movs	r0, #17
 800d052:	f000 fc6d 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x07);
 800d056:	2007      	movs	r0, #7
 800d058:	f000 fc6a 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x31);
 800d05c:	2031      	movs	r0, #49	; 0x31
 800d05e:	f000 fc67 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0xC1);
 800d062:	20c1      	movs	r0, #193	; 0xc1
 800d064:	f000 fc64 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x48);
 800d068:	2048      	movs	r0, #72	; 0x48
 800d06a:	f000 fc61 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x08);
 800d06e:	2008      	movs	r0, #8
 800d070:	f000 fc5e 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800d074:	200f      	movs	r0, #15
 800d076:	f000 fc5b 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x0C);
 800d07a:	200c      	movs	r0, #12
 800d07c:	f000 fc58 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x31);
 800d080:	2031      	movs	r0, #49	; 0x31
 800d082:	f000 fc55 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x36);
 800d086:	2036      	movs	r0, #54	; 0x36
 800d088:	f000 fc52 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(0x0F);
 800d08c:	200f      	movs	r0, #15
 800d08e:	f000 fc4f 	bl	800d930 <_LCD_SendData>

	//EXIT SLEEP
	_LCD_SendCommand(0x11);
 800d092:	2011      	movs	r0, #17
 800d094:	f000 fc1a 	bl	800d8cc <_LCD_SendCommand>
	HAL_Delay(240);
 800d098:	20f0      	movs	r0, #240	; 0xf0
 800d09a:	f7fa fc35 	bl	8007908 <HAL_Delay>

	//TURN ON DISPLAY
	_LCD_SendCommand(0x29);
 800d09e:	2029      	movs	r0, #41	; 0x29
 800d0a0:	f000 fc14 	bl	800d8cc <_LCD_SendCommand>

	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800d0a4:	2000      	movs	r0, #0
 800d0a6:	f000 fae5 	bl	800d674 <ILI9341_Set_Rotation>
}
 800d0aa:	bf00      	nop
 800d0ac:	bd80      	pop	{r7, pc}
	...

0800d0b0 <ILI9341_SPI_Init>:
 *
 * 	Initialise SPI peripheral
 *
 */
void ILI9341_SPI_Init(void)
{
 800d0b0:	b480      	push	{r7}
 800d0b2:	af00      	add	r7, sp, #0

   	// check SPI enabled
	if ((SPI_PERIPH->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800d0b4:	4b0b      	ldr	r3, [pc, #44]	; (800d0e4 <ILI9341_SPI_Init+0x34>)
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d0bc:	2b40      	cmp	r3, #64	; 0x40
 800d0be:	d005      	beq.n	800d0cc <ILI9341_SPI_Init+0x1c>
	{
		SPI_PERIPH->CR1 |= SPI_CR1_SPE;
 800d0c0:	4b08      	ldr	r3, [pc, #32]	; (800d0e4 <ILI9341_SPI_Init+0x34>)
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	4a07      	ldr	r2, [pc, #28]	; (800d0e4 <ILI9341_SPI_Init+0x34>)
 800d0c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0ca:	6013      	str	r3, [r2, #0]
	}

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d0cc:	4b06      	ldr	r3, [pc, #24]	; (800d0e8 <ILI9341_SPI_Init+0x38>)
 800d0ce:	695b      	ldr	r3, [r3, #20]
 800d0d0:	4a05      	ldr	r2, [pc, #20]	; (800d0e8 <ILI9341_SPI_Init+0x38>)
 800d0d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d0d6:	6153      	str	r3, [r2, #20]
}
 800d0d8:	bf00      	nop
 800d0da:	46bd      	mov	sp, r7
 800d0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0e0:	4770      	bx	lr
 800d0e2:	bf00      	nop
 800d0e4:	40003c00 	.word	0x40003c00
 800d0e8:	48000400 	.word	0x48000400

0800d0ec <ILI9341_Draw_Horizontal_Line>:
 *	Draw horizontal line
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 800d0ec:	b590      	push	{r4, r7, lr}
 800d0ee:	b085      	sub	sp, #20
 800d0f0:	af02      	add	r7, sp, #8
 800d0f2:	4604      	mov	r4, r0
 800d0f4:	4608      	mov	r0, r1
 800d0f6:	4611      	mov	r1, r2
 800d0f8:	461a      	mov	r2, r3
 800d0fa:	4623      	mov	r3, r4
 800d0fc:	80fb      	strh	r3, [r7, #6]
 800d0fe:	4603      	mov	r3, r0
 800d100:	80bb      	strh	r3, [r7, #4]
 800d102:	460b      	mov	r3, r1
 800d104:	807b      	strh	r3, [r7, #2]
 800d106:	4613      	mov	r3, r2
 800d108:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800d10a:	4b1a      	ldr	r3, [pc, #104]	; (800d174 <ILI9341_Draw_Horizontal_Line+0x88>)
 800d10c:	881b      	ldrh	r3, [r3, #0]
 800d10e:	b29b      	uxth	r3, r3
 800d110:	88fa      	ldrh	r2, [r7, #6]
 800d112:	429a      	cmp	r2, r3
 800d114:	d229      	bcs.n	800d16a <ILI9341_Draw_Horizontal_Line+0x7e>
 800d116:	4b18      	ldr	r3, [pc, #96]	; (800d178 <ILI9341_Draw_Horizontal_Line+0x8c>)
 800d118:	881b      	ldrh	r3, [r3, #0]
 800d11a:	b29b      	uxth	r3, r3
 800d11c:	88ba      	ldrh	r2, [r7, #4]
 800d11e:	429a      	cmp	r2, r3
 800d120:	d223      	bcs.n	800d16a <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 800d122:	88fa      	ldrh	r2, [r7, #6]
 800d124:	887b      	ldrh	r3, [r7, #2]
 800d126:	4413      	add	r3, r2
 800d128:	3b01      	subs	r3, #1
 800d12a:	4a12      	ldr	r2, [pc, #72]	; (800d174 <ILI9341_Draw_Horizontal_Line+0x88>)
 800d12c:	8812      	ldrh	r2, [r2, #0]
 800d12e:	b292      	uxth	r2, r2
 800d130:	4293      	cmp	r3, r2
 800d132:	db05      	blt.n	800d140 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 800d134:	4b0f      	ldr	r3, [pc, #60]	; (800d174 <ILI9341_Draw_Horizontal_Line+0x88>)
 800d136:	881b      	ldrh	r3, [r3, #0]
 800d138:	b29a      	uxth	r2, r3
 800d13a:	88fb      	ldrh	r3, [r7, #6]
 800d13c:	1ad3      	subs	r3, r2, r3
 800d13e:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(	xpos,
							ypos,
							(xpos + width) - 1,
 800d140:	88fa      	ldrh	r2, [r7, #6]
 800d142:	887b      	ldrh	r3, [r7, #2]
 800d144:	4413      	add	r3, r2
 800d146:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800d148:	3b01      	subs	r3, #1
 800d14a:	b29a      	uxth	r2, r3
 800d14c:	88bb      	ldrh	r3, [r7, #4]
 800d14e:	88b9      	ldrh	r1, [r7, #4]
 800d150:	88f8      	ldrh	r0, [r7, #6]
 800d152:	f000 f85b 	bl	800d20c <ILI9341_Set_Frame>
							ypos);

	_LCD_Write_Frame(xpos, ypos, colour, width, LINE_CHUNK);
 800d156:	887c      	ldrh	r4, [r7, #2]
 800d158:	883a      	ldrh	r2, [r7, #0]
 800d15a:	88b9      	ldrh	r1, [r7, #4]
 800d15c:	88f8      	ldrh	r0, [r7, #6]
 800d15e:	2303      	movs	r3, #3
 800d160:	9300      	str	r3, [sp, #0]
 800d162:	4623      	mov	r3, r4
 800d164:	f000 fb02 	bl	800d76c <_LCD_Write_Frame>
 800d168:	e000      	b.n	800d16c <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800d16a:	bf00      	nop
}
 800d16c:	370c      	adds	r7, #12
 800d16e:	46bd      	mov	sp, r7
 800d170:	bd90      	pop	{r4, r7, pc}
 800d172:	bf00      	nop
 800d174:	20000cb2 	.word	0x20000cb2
 800d178:	20000cb0 	.word	0x20000cb0

0800d17c <ILI9341_Draw_Vertical_Line>:
 *
 *  Draw vertical line
 *
 */
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 800d17c:	b590      	push	{r4, r7, lr}
 800d17e:	b085      	sub	sp, #20
 800d180:	af02      	add	r7, sp, #8
 800d182:	4604      	mov	r4, r0
 800d184:	4608      	mov	r0, r1
 800d186:	4611      	mov	r1, r2
 800d188:	461a      	mov	r2, r3
 800d18a:	4623      	mov	r3, r4
 800d18c:	80fb      	strh	r3, [r7, #6]
 800d18e:	4603      	mov	r3, r0
 800d190:	80bb      	strh	r3, [r7, #4]
 800d192:	460b      	mov	r3, r1
 800d194:	807b      	strh	r3, [r7, #2]
 800d196:	4613      	mov	r3, r2
 800d198:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800d19a:	4b1a      	ldr	r3, [pc, #104]	; (800d204 <ILI9341_Draw_Vertical_Line+0x88>)
 800d19c:	881b      	ldrh	r3, [r3, #0]
 800d19e:	b29b      	uxth	r3, r3
 800d1a0:	88fa      	ldrh	r2, [r7, #6]
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d229      	bcs.n	800d1fa <ILI9341_Draw_Vertical_Line+0x7e>
 800d1a6:	4b18      	ldr	r3, [pc, #96]	; (800d208 <ILI9341_Draw_Vertical_Line+0x8c>)
 800d1a8:	881b      	ldrh	r3, [r3, #0]
 800d1aa:	b29b      	uxth	r3, r3
 800d1ac:	88ba      	ldrh	r2, [r7, #4]
 800d1ae:	429a      	cmp	r2, r3
 800d1b0:	d223      	bcs.n	800d1fa <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 800d1b2:	88ba      	ldrh	r2, [r7, #4]
 800d1b4:	887b      	ldrh	r3, [r7, #2]
 800d1b6:	4413      	add	r3, r2
 800d1b8:	3b01      	subs	r3, #1
 800d1ba:	4a13      	ldr	r2, [pc, #76]	; (800d208 <ILI9341_Draw_Vertical_Line+0x8c>)
 800d1bc:	8812      	ldrh	r2, [r2, #0]
 800d1be:	b292      	uxth	r2, r2
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	db05      	blt.n	800d1d0 <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 800d1c4:	4b10      	ldr	r3, [pc, #64]	; (800d208 <ILI9341_Draw_Vertical_Line+0x8c>)
 800d1c6:	881b      	ldrh	r3, [r3, #0]
 800d1c8:	b29a      	uxth	r2, r3
 800d1ca:	88bb      	ldrh	r3, [r7, #4]
 800d1cc:	1ad3      	subs	r3, r2, r3
 800d1ce:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Frame(xpos, ypos, xpos, (ypos + height) - 1);
 800d1d0:	88ba      	ldrh	r2, [r7, #4]
 800d1d2:	887b      	ldrh	r3, [r7, #2]
 800d1d4:	4413      	add	r3, r2
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	3b01      	subs	r3, #1
 800d1da:	b29b      	uxth	r3, r3
 800d1dc:	88fa      	ldrh	r2, [r7, #6]
 800d1de:	88b9      	ldrh	r1, [r7, #4]
 800d1e0:	88f8      	ldrh	r0, [r7, #6]
 800d1e2:	f000 f813 	bl	800d20c <ILI9341_Set_Frame>
	_LCD_Write_Frame(xpos, ypos, colour, height, LINE_CHUNK);
 800d1e6:	887c      	ldrh	r4, [r7, #2]
 800d1e8:	883a      	ldrh	r2, [r7, #0]
 800d1ea:	88b9      	ldrh	r1, [r7, #4]
 800d1ec:	88f8      	ldrh	r0, [r7, #6]
 800d1ee:	2303      	movs	r3, #3
 800d1f0:	9300      	str	r3, [sp, #0]
 800d1f2:	4623      	mov	r3, r4
 800d1f4:	f000 faba 	bl	800d76c <_LCD_Write_Frame>
 800d1f8:	e000      	b.n	800d1fc <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 800d1fa:	bf00      	nop
}
 800d1fc:	370c      	adds	r7, #12
 800d1fe:	46bd      	mov	sp, r7
 800d200:	bd90      	pop	{r4, r7, pc}
 800d202:	bf00      	nop
 800d204:	20000cb2 	.word	0x20000cb2
 800d208:	20000cb0 	.word	0x20000cb0

0800d20c <ILI9341_Set_Frame>:
 *	bottom right of area (ec, ep):
 *	ec 	- 	"end column"
 *	ep	- 	"end page"
 */
void ILI9341_Set_Frame(uint16_t sc, uint16_t sp, uint16_t ec, uint16_t ep)
{
 800d20c:	b590      	push	{r4, r7, lr}
 800d20e:	b083      	sub	sp, #12
 800d210:	af00      	add	r7, sp, #0
 800d212:	4604      	mov	r4, r0
 800d214:	4608      	mov	r0, r1
 800d216:	4611      	mov	r1, r2
 800d218:	461a      	mov	r2, r3
 800d21a:	4623      	mov	r3, r4
 800d21c:	80fb      	strh	r3, [r7, #6]
 800d21e:	4603      	mov	r3, r0
 800d220:	80bb      	strh	r3, [r7, #4]
 800d222:	460b      	mov	r3, r1
 800d224:	807b      	strh	r3, [r7, #2]
 800d226:	4613      	mov	r3, r2
 800d228:	803b      	strh	r3, [r7, #0]
	// send "Column Address Set" command
	_LCD_SendCommand(0x2A);
 800d22a:	202a      	movs	r0, #42	; 0x2a
 800d22c:	f000 fb4e 	bl	800d8cc <_LCD_SendCommand>
	_LCD_SendData(sc >> 8);
 800d230:	88fb      	ldrh	r3, [r7, #6]
 800d232:	0a1b      	lsrs	r3, r3, #8
 800d234:	b29b      	uxth	r3, r3
 800d236:	b2db      	uxtb	r3, r3
 800d238:	4618      	mov	r0, r3
 800d23a:	f000 fb79 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(sc);
 800d23e:	88fb      	ldrh	r3, [r7, #6]
 800d240:	b2db      	uxtb	r3, r3
 800d242:	4618      	mov	r0, r3
 800d244:	f000 fb74 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(ec >> 8);
 800d248:	887b      	ldrh	r3, [r7, #2]
 800d24a:	0a1b      	lsrs	r3, r3, #8
 800d24c:	b29b      	uxth	r3, r3
 800d24e:	b2db      	uxtb	r3, r3
 800d250:	4618      	mov	r0, r3
 800d252:	f000 fb6d 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(ec);
 800d256:	887b      	ldrh	r3, [r7, #2]
 800d258:	b2db      	uxtb	r3, r3
 800d25a:	4618      	mov	r0, r3
 800d25c:	f000 fb68 	bl	800d930 <_LCD_SendData>

	// send "Page Address Set" command
	_LCD_SendCommand(0x2B);
 800d260:	202b      	movs	r0, #43	; 0x2b
 800d262:	f000 fb33 	bl	800d8cc <_LCD_SendCommand>
	_LCD_SendData(sp >> 8);
 800d266:	88bb      	ldrh	r3, [r7, #4]
 800d268:	0a1b      	lsrs	r3, r3, #8
 800d26a:	b29b      	uxth	r3, r3
 800d26c:	b2db      	uxtb	r3, r3
 800d26e:	4618      	mov	r0, r3
 800d270:	f000 fb5e 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(sp);
 800d274:	88bb      	ldrh	r3, [r7, #4]
 800d276:	b2db      	uxtb	r3, r3
 800d278:	4618      	mov	r0, r3
 800d27a:	f000 fb59 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(ep >> 8);
 800d27e:	883b      	ldrh	r3, [r7, #0]
 800d280:	0a1b      	lsrs	r3, r3, #8
 800d282:	b29b      	uxth	r3, r3
 800d284:	b2db      	uxtb	r3, r3
 800d286:	4618      	mov	r0, r3
 800d288:	f000 fb52 	bl	800d930 <_LCD_SendData>
	_LCD_SendData(ep);
 800d28c:	883b      	ldrh	r3, [r7, #0]
 800d28e:	b2db      	uxtb	r3, r3
 800d290:	4618      	mov	r0, r3
 800d292:	f000 fb4d 	bl	800d930 <_LCD_SendData>

	_LCD_SendCommand(0x2C);
 800d296:	202c      	movs	r0, #44	; 0x2c
 800d298:	f000 fb18 	bl	800d8cc <_LCD_SendCommand>
}
 800d29c:	bf00      	nop
 800d29e:	370c      	adds	r7, #12
 800d2a0:	46bd      	mov	sp, r7
 800d2a2:	bd90      	pop	{r4, r7, pc}

0800d2a4 <ILI9341_Fill_Screen>:
 *
 * 	Sets address (entire screen) and Sends height*width ammount of colour information to LCD
 *
 */
void ILI9341_Fill_Screen(uint16_t colour)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b084      	sub	sp, #16
 800d2a8:	af02      	add	r7, sp, #8
 800d2aa:	4603      	mov	r3, r0
 800d2ac:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Frame(0,0,LCD_WIDTH,LCD_HEIGHT);
 800d2ae:	4b10      	ldr	r3, [pc, #64]	; (800d2f0 <ILI9341_Fill_Screen+0x4c>)
 800d2b0:	881b      	ldrh	r3, [r3, #0]
 800d2b2:	b29a      	uxth	r2, r3
 800d2b4:	4b0f      	ldr	r3, [pc, #60]	; (800d2f4 <ILI9341_Fill_Screen+0x50>)
 800d2b6:	881b      	ldrh	r3, [r3, #0]
 800d2b8:	b29b      	uxth	r3, r3
 800d2ba:	2100      	movs	r1, #0
 800d2bc:	2000      	movs	r0, #0
 800d2be:	f7ff ffa5 	bl	800d20c <ILI9341_Set_Frame>
	_LCD_Write_Frame(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 800d2c2:	4b0b      	ldr	r3, [pc, #44]	; (800d2f0 <ILI9341_Fill_Screen+0x4c>)
 800d2c4:	881b      	ldrh	r3, [r3, #0]
 800d2c6:	b29b      	uxth	r3, r3
 800d2c8:	461a      	mov	r2, r3
 800d2ca:	4b0a      	ldr	r3, [pc, #40]	; (800d2f4 <ILI9341_Fill_Screen+0x50>)
 800d2cc:	881b      	ldrh	r3, [r3, #0]
 800d2ce:	b29b      	uxth	r3, r3
 800d2d0:	fb03 f302 	mul.w	r3, r3, r2
 800d2d4:	4619      	mov	r1, r3
 800d2d6:	88fa      	ldrh	r2, [r7, #6]
 800d2d8:	2304      	movs	r3, #4
 800d2da:	9300      	str	r3, [sp, #0]
 800d2dc:	460b      	mov	r3, r1
 800d2de:	2100      	movs	r1, #0
 800d2e0:	2000      	movs	r0, #0
 800d2e2:	f000 fa43 	bl	800d76c <_LCD_Write_Frame>
}
 800d2e6:	bf00      	nop
 800d2e8:	3708      	adds	r7, #8
 800d2ea:	46bd      	mov	sp, r7
 800d2ec:	bd80      	pop	{r7, pc}
 800d2ee:	bf00      	nop
 800d2f0:	20000cb2 	.word	0x20000cb2
 800d2f4:	20000cb0 	.word	0x20000cb0

0800d2f8 <ILI9341_Draw_Pixel>:
 * 	Using pixels to draw big simple structures is not recommended as it is really slow
 * 	Try using either rectangles or lines if possible
 *
 */
void ILI9341_Draw_Pixel(uint16_t x,uint16_t y,uint16_t colour)
{
 800d2f8:	b580      	push	{r7, lr}
 800d2fa:	b08c      	sub	sp, #48	; 0x30
 800d2fc:	af00      	add	r7, sp, #0
 800d2fe:	4603      	mov	r3, r0
 800d300:	80fb      	strh	r3, [r7, #6]
 800d302:	460b      	mov	r3, r1
 800d304:	80bb      	strh	r3, [r7, #4]
 800d306:	4613      	mov	r3, r2
 800d308:	807b      	strh	r3, [r7, #2]
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800d30a:	4b94      	ldr	r3, [pc, #592]	; (800d55c <ILI9341_Draw_Pixel+0x264>)
 800d30c:	881b      	ldrh	r3, [r3, #0]
 800d30e:	b29b      	uxth	r3, r3
 800d310:	88fa      	ldrh	r2, [r7, #6]
 800d312:	429a      	cmp	r2, r3
 800d314:	f080 811e 	bcs.w	800d554 <ILI9341_Draw_Pixel+0x25c>
 800d318:	4b91      	ldr	r3, [pc, #580]	; (800d560 <ILI9341_Draw_Pixel+0x268>)
 800d31a:	881b      	ldrh	r3, [r3, #0]
 800d31c:	b29b      	uxth	r3, r3
 800d31e:	88ba      	ldrh	r2, [r7, #4]
 800d320:	429a      	cmp	r2, r3
 800d322:	f080 8117 	bcs.w	800d554 <ILI9341_Draw_Pixel+0x25c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800d326:	4b8f      	ldr	r3, [pc, #572]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d328:	695b      	ldr	r3, [r3, #20]
 800d32a:	4a8e      	ldr	r2, [pc, #568]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d32c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d330:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d332:	4b8c      	ldr	r3, [pc, #560]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d334:	695b      	ldr	r3, [r3, #20]
 800d336:	4a8b      	ldr	r2, [pc, #556]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d338:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d33c:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2A, 0, 0);
 800d33e:	2200      	movs	r2, #0
 800d340:	2100      	movs	r1, #0
 800d342:	202a      	movs	r0, #42	; 0x2a
 800d344:	f000 fb26 	bl	800d994 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d348:	2300      	movs	r3, #0
 800d34a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d34c:	e008      	b.n	800d360 <ILI9341_Draw_Pixel+0x68>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d34e:	4b85      	ldr	r3, [pc, #532]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d350:	695b      	ldr	r3, [r3, #20]
 800d352:	4a84      	ldr	r2, [pc, #528]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d354:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d358:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d35a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35c:	3301      	adds	r3, #1
 800d35e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d362:	2b02      	cmp	r3, #2
 800d364:	ddf3      	ble.n	800d34e <ILI9341_Draw_Pixel+0x56>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800d366:	4b7f      	ldr	r3, [pc, #508]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d368:	695b      	ldr	r3, [r3, #20]
 800d36a:	4a7e      	ldr	r2, [pc, #504]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d36c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d370:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800d372:	4b7c      	ldr	r3, [pc, #496]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d374:	695b      	ldr	r3, [r3, #20]
 800d376:	4a7b      	ldr	r2, [pc, #492]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d37c:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d37e:	4b79      	ldr	r3, [pc, #484]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d380:	695b      	ldr	r3, [r3, #20]
 800d382:	4a78      	ldr	r2, [pc, #480]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d384:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d388:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] =
 800d38a:	88fb      	ldrh	r3, [r7, #6]
 800d38c:	0a1b      	lsrs	r3, r3, #8
 800d38e:	b29b      	uxth	r3, r3
 800d390:	b2db      	uxtb	r3, r3
 800d392:	753b      	strb	r3, [r7, #20]
 800d394:	88fb      	ldrh	r3, [r7, #6]
 800d396:	b2db      	uxtb	r3, r3
 800d398:	757b      	strb	r3, [r7, #21]
	{
			x >> 8,
			x,
			(x + 1) >> 8,
 800d39a:	88fb      	ldrh	r3, [r7, #6]
 800d39c:	3301      	adds	r3, #1
 800d39e:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer[4] =
 800d3a0:	b2db      	uxtb	r3, r3
 800d3a2:	75bb      	strb	r3, [r7, #22]
			(x + 1)
 800d3a4:	88fb      	ldrh	r3, [r7, #6]
 800d3a6:	b2db      	uxtb	r3, r3
 800d3a8:	3301      	adds	r3, #1
 800d3aa:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer[4] =
 800d3ac:	75fb      	strb	r3, [r7, #23]
	};

	_SPI_SendByteMultiByte(Temp_Buffer, 4, 0, 10);
 800d3ae:	f107 0014 	add.w	r0, r7, #20
 800d3b2:	230a      	movs	r3, #10
 800d3b4:	2200      	movs	r2, #0
 800d3b6:	2104      	movs	r1, #4
 800d3b8:	f000 fb1e 	bl	800d9f8 <_SPI_SendByteMultiByte>
	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1 );

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d3bc:	2300      	movs	r3, #0
 800d3be:	62bb      	str	r3, [r7, #40]	; 0x28
 800d3c0:	e008      	b.n	800d3d4 <ILI9341_Draw_Pixel+0xdc>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d3c2:	4b68      	ldr	r3, [pc, #416]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d3c4:	695b      	ldr	r3, [r3, #20]
 800d3c6:	4a67      	ldr	r2, [pc, #412]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d3c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d3cc:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d0:	3301      	adds	r3, #1
 800d3d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800d3d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3d6:	2b02      	cmp	r3, #2
 800d3d8:	ddf3      	ble.n	800d3c2 <ILI9341_Draw_Pixel+0xca>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800d3da:	4b62      	ldr	r3, [pc, #392]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d3dc:	695b      	ldr	r3, [r3, #20]
 800d3de:	4a61      	ldr	r2, [pc, #388]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d3e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d3e4:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800d3e6:	4b5f      	ldr	r3, [pc, #380]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d3e8:	695b      	ldr	r3, [r3, #20]
 800d3ea:	4a5e      	ldr	r2, [pc, #376]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d3ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d3f0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d3f2:	4b5c      	ldr	r3, [pc, #368]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d3f4:	695b      	ldr	r3, [r3, #20]
 800d3f6:	4a5b      	ldr	r2, [pc, #364]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d3f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d3fc:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2B, 0, 0);
 800d3fe:	2200      	movs	r2, #0
 800d400:	2100      	movs	r1, #0
 800d402:	202b      	movs	r0, #43	; 0x2b
 800d404:	f000 fac6 	bl	800d994 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d408:	2300      	movs	r3, #0
 800d40a:	627b      	str	r3, [r7, #36]	; 0x24
 800d40c:	e008      	b.n	800d420 <ILI9341_Draw_Pixel+0x128>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d40e:	4b55      	ldr	r3, [pc, #340]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d410:	695b      	ldr	r3, [r3, #20]
 800d412:	4a54      	ldr	r2, [pc, #336]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d414:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d418:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d41a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d41c:	3301      	adds	r3, #1
 800d41e:	627b      	str	r3, [r7, #36]	; 0x24
 800d420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d422:	2b02      	cmp	r3, #2
 800d424:	ddf3      	ble.n	800d40e <ILI9341_Draw_Pixel+0x116>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800d426:	4b4f      	ldr	r3, [pc, #316]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d428:	695b      	ldr	r3, [r3, #20]
 800d42a:	4a4e      	ldr	r2, [pc, #312]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d42c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d430:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800d432:	4b4c      	ldr	r3, [pc, #304]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d434:	695b      	ldr	r3, [r3, #20]
 800d436:	4a4b      	ldr	r2, [pc, #300]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d438:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d43c:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d43e:	4b49      	ldr	r3, [pc, #292]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d440:	695b      	ldr	r3, [r3, #20]
 800d442:	4a48      	ldr	r2, [pc, #288]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d444:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d448:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] =
 800d44a:	88bb      	ldrh	r3, [r7, #4]
 800d44c:	0a1b      	lsrs	r3, r3, #8
 800d44e:	b29b      	uxth	r3, r3
 800d450:	b2db      	uxtb	r3, r3
 800d452:	743b      	strb	r3, [r7, #16]
 800d454:	88bb      	ldrh	r3, [r7, #4]
 800d456:	b2db      	uxtb	r3, r3
 800d458:	747b      	strb	r3, [r7, #17]
	{
			y >> 8,
			y,
			(y + 1) >> 8,
 800d45a:	88bb      	ldrh	r3, [r7, #4]
 800d45c:	3301      	adds	r3, #1
 800d45e:	121b      	asrs	r3, r3, #8
	unsigned char Temp_Buffer1[4] =
 800d460:	b2db      	uxtb	r3, r3
 800d462:	74bb      	strb	r3, [r7, #18]
			(y + 1)
 800d464:	88bb      	ldrh	r3, [r7, #4]
 800d466:	b2db      	uxtb	r3, r3
 800d468:	3301      	adds	r3, #1
 800d46a:	b2db      	uxtb	r3, r3
	unsigned char Temp_Buffer1[4] =
 800d46c:	74fb      	strb	r3, [r7, #19]
	};

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer1, 4, 0, 10);
 800d46e:	f107 0010 	add.w	r0, r7, #16
 800d472:	230a      	movs	r3, #10
 800d474:	2200      	movs	r2, #0
 800d476:	2104      	movs	r1, #4
 800d478:	f000 fabe 	bl	800d9f8 <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d47c:	2300      	movs	r3, #0
 800d47e:	623b      	str	r3, [r7, #32]
 800d480:	e008      	b.n	800d494 <ILI9341_Draw_Pixel+0x19c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d482:	4b38      	ldr	r3, [pc, #224]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d484:	695b      	ldr	r3, [r3, #20]
 800d486:	4a37      	ldr	r2, [pc, #220]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d488:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d48c:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d48e:	6a3b      	ldr	r3, [r7, #32]
 800d490:	3301      	adds	r3, #1
 800d492:	623b      	str	r3, [r7, #32]
 800d494:	6a3b      	ldr	r3, [r7, #32]
 800d496:	2b02      	cmp	r3, #2
 800d498:	ddf3      	ble.n	800d482 <ILI9341_Draw_Pixel+0x18a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800d49a:	4b32      	ldr	r3, [pc, #200]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d49c:	695b      	ldr	r3, [r3, #20]
 800d49e:	4a31      	ldr	r2, [pc, #196]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d4a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4a4:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800d4a6:	4b2f      	ldr	r3, [pc, #188]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d4a8:	695b      	ldr	r3, [r3, #20]
 800d4aa:	4a2e      	ldr	r2, [pc, #184]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d4ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d4b0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d4b2:	4b2c      	ldr	r3, [pc, #176]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d4b4:	695b      	ldr	r3, [r3, #20]
 800d4b6:	4a2b      	ldr	r2, [pc, #172]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d4b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d4bc:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(0x2C, 0, 0);
 800d4be:	2200      	movs	r2, #0
 800d4c0:	2100      	movs	r1, #0
 800d4c2:	202c      	movs	r0, #44	; 0x2c
 800d4c4:	f000 fa66 	bl	800d994 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	61fb      	str	r3, [r7, #28]
 800d4cc:	e008      	b.n	800d4e0 <ILI9341_Draw_Pixel+0x1e8>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d4ce:	4b25      	ldr	r3, [pc, #148]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d4d0:	695b      	ldr	r3, [r3, #20]
 800d4d2:	4a24      	ldr	r2, [pc, #144]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d4d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d4d8:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d4da:	69fb      	ldr	r3, [r7, #28]
 800d4dc:	3301      	adds	r3, #1
 800d4de:	61fb      	str	r3, [r7, #28]
 800d4e0:	69fb      	ldr	r3, [r7, #28]
 800d4e2:	2b02      	cmp	r3, #2
 800d4e4:	ddf3      	ble.n	800d4ce <ILI9341_Draw_Pixel+0x1d6>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800d4e6:	4b1f      	ldr	r3, [pc, #124]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d4e8:	695b      	ldr	r3, [r3, #20]
 800d4ea:	4a1e      	ldr	r2, [pc, #120]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d4ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4f0:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800d4f2:	4b1c      	ldr	r3, [pc, #112]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d4f4:	695b      	ldr	r3, [r3, #20]
 800d4f6:	4a1b      	ldr	r2, [pc, #108]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d4f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4fc:	6153      	str	r3, [r2, #20]

	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d4fe:	4b19      	ldr	r3, [pc, #100]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d500:	695b      	ldr	r3, [r3, #20]
 800d502:	4a18      	ldr	r2, [pc, #96]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d504:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d508:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 800d50a:	887b      	ldrh	r3, [r7, #2]
 800d50c:	0a1b      	lsrs	r3, r3, #8
 800d50e:	b29b      	uxth	r3, r3
 800d510:	b2db      	uxtb	r3, r3
 800d512:	733b      	strb	r3, [r7, #12]
 800d514:	887b      	ldrh	r3, [r7, #2]
 800d516:	b2db      	uxtb	r3, r3
 800d518:	737b      	strb	r3, [r7, #13]

	//HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1 );
	_SPI_SendByteMultiByte(Temp_Buffer2, 4, 0, 10);
 800d51a:	f107 000c 	add.w	r0, r7, #12
 800d51e:	230a      	movs	r3, #10
 800d520:	2200      	movs	r2, #0
 800d522:	2104      	movs	r1, #4
 800d524:	f000 fa68 	bl	800d9f8 <_SPI_SendByteMultiByte>

	// Additional SPI CS "low" hold
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d528:	2300      	movs	r3, #0
 800d52a:	61bb      	str	r3, [r7, #24]
 800d52c:	e008      	b.n	800d540 <ILI9341_Draw_Pixel+0x248>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d52e:	4b0d      	ldr	r3, [pc, #52]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d530:	695b      	ldr	r3, [r3, #20]
 800d532:	4a0c      	ldr	r2, [pc, #48]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d534:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d538:	6153      	str	r3, [r2, #20]
	for(int s=0; s < SPI_DELAY_HOLD; s++)
 800d53a:	69bb      	ldr	r3, [r7, #24]
 800d53c:	3301      	adds	r3, #1
 800d53e:	61bb      	str	r3, [r7, #24]
 800d540:	69bb      	ldr	r3, [r7, #24]
 800d542:	2b02      	cmp	r3, #2
 800d544:	ddf3      	ble.n	800d52e <ILI9341_Draw_Pixel+0x236>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800d546:	4b07      	ldr	r3, [pc, #28]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d548:	695b      	ldr	r3, [r3, #20]
 800d54a:	4a06      	ldr	r2, [pc, #24]	; (800d564 <ILI9341_Draw_Pixel+0x26c>)
 800d54c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d550:	6153      	str	r3, [r2, #20]
 800d552:	e000      	b.n	800d556 <ILI9341_Draw_Pixel+0x25e>
	if((x >= LCD_WIDTH) || (y >= LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800d554:	bf00      	nop


}
 800d556:	3730      	adds	r7, #48	; 0x30
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}
 800d55c:	20000cb2 	.word	0x20000cb2
 800d560:	20000cb0 	.word	0x20000cb0
 800d564:	48000400 	.word	0x48000400

0800d568 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 800d568:	b590      	push	{r4, r7, lr}
 800d56a:	b087      	sub	sp, #28
 800d56c:	af02      	add	r7, sp, #8
 800d56e:	4604      	mov	r4, r0
 800d570:	4608      	mov	r0, r1
 800d572:	4611      	mov	r1, r2
 800d574:	461a      	mov	r2, r3
 800d576:	4623      	mov	r3, r4
 800d578:	80fb      	strh	r3, [r7, #6]
 800d57a:	4603      	mov	r3, r0
 800d57c:	80bb      	strh	r3, [r7, #4]
 800d57e:	460b      	mov	r3, r1
 800d580:	807b      	strh	r3, [r7, #2]
 800d582:	4613      	mov	r3, r2
 800d584:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800d586:	4b39      	ldr	r3, [pc, #228]	; (800d66c <ILI9341_Draw_Rectangle+0x104>)
 800d588:	881b      	ldrh	r3, [r3, #0]
 800d58a:	b29b      	uxth	r3, r3
 800d58c:	88fa      	ldrh	r2, [r7, #6]
 800d58e:	429a      	cmp	r2, r3
 800d590:	d268      	bcs.n	800d664 <ILI9341_Draw_Rectangle+0xfc>
 800d592:	4b37      	ldr	r3, [pc, #220]	; (800d670 <ILI9341_Draw_Rectangle+0x108>)
 800d594:	881b      	ldrh	r3, [r3, #0]
 800d596:	b29b      	uxth	r3, r3
 800d598:	88ba      	ldrh	r2, [r7, #4]
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d262      	bcs.n	800d664 <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 800d59e:	88fa      	ldrh	r2, [r7, #6]
 800d5a0:	887b      	ldrh	r3, [r7, #2]
 800d5a2:	4413      	add	r3, r2
 800d5a4:	3b01      	subs	r3, #1
 800d5a6:	4a31      	ldr	r2, [pc, #196]	; (800d66c <ILI9341_Draw_Rectangle+0x104>)
 800d5a8:	8812      	ldrh	r2, [r2, #0]
 800d5aa:	b292      	uxth	r2, r2
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	db05      	blt.n	800d5bc <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 800d5b0:	4b2e      	ldr	r3, [pc, #184]	; (800d66c <ILI9341_Draw_Rectangle+0x104>)
 800d5b2:	881b      	ldrh	r3, [r3, #0]
 800d5b4:	b29a      	uxth	r2, r3
 800d5b6:	88fb      	ldrh	r3, [r7, #6]
 800d5b8:	1ad3      	subs	r3, r2, r3
 800d5ba:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 800d5bc:	88ba      	ldrh	r2, [r7, #4]
 800d5be:	883b      	ldrh	r3, [r7, #0]
 800d5c0:	4413      	add	r3, r2
 800d5c2:	3b01      	subs	r3, #1
 800d5c4:	4a2a      	ldr	r2, [pc, #168]	; (800d670 <ILI9341_Draw_Rectangle+0x108>)
 800d5c6:	8812      	ldrh	r2, [r2, #0]
 800d5c8:	b292      	uxth	r2, r2
 800d5ca:	4293      	cmp	r3, r2
 800d5cc:	db05      	blt.n	800d5da <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 800d5ce:	4b28      	ldr	r3, [pc, #160]	; (800d670 <ILI9341_Draw_Rectangle+0x108>)
 800d5d0:	881b      	ldrh	r3, [r3, #0]
 800d5d2:	b29a      	uxth	r2, r3
 800d5d4:	88bb      	ldrh	r3, [r7, #4]
 800d5d6:	1ad3      	subs	r3, r2, r3
 800d5d8:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Frame(	xpos,
						ypos,
						(xpos + width) - 1,
 800d5da:	88fa      	ldrh	r2, [r7, #6]
 800d5dc:	887b      	ldrh	r3, [r7, #2]
 800d5de:	4413      	add	r3, r2
 800d5e0:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800d5e2:	3b01      	subs	r3, #1
 800d5e4:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 800d5e6:	88ba      	ldrh	r2, [r7, #4]
 800d5e8:	883b      	ldrh	r3, [r7, #0]
 800d5ea:	4413      	add	r3, r2
 800d5ec:	b29b      	uxth	r3, r3
	ILI9341_Set_Frame(	xpos,
 800d5ee:	3b01      	subs	r3, #1
 800d5f0:	b29b      	uxth	r3, r3
 800d5f2:	88b9      	ldrh	r1, [r7, #4]
 800d5f4:	88f8      	ldrh	r0, [r7, #6]
 800d5f6:	4622      	mov	r2, r4
 800d5f8:	f7ff fe08 	bl	800d20c <ILI9341_Set_Frame>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep _LCD_Write_Frame() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 800d5fc:	883a      	ldrh	r2, [r7, #0]
 800d5fe:	887b      	ldrh	r3, [r7, #2]
 800d600:	fb12 f303 	smulbb	r3, r2, r3
 800d604:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 800d606:	2300      	movs	r3, #0
 800d608:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 800d60a:	89fb      	ldrh	r3, [r7, #14]
 800d60c:	f003 0301 	and.w	r3, r3, #1
 800d610:	2b00      	cmp	r3, #0
 800d612:	d009      	beq.n	800d628 <ILI9341_Draw_Rectangle+0xc0>
 800d614:	89fb      	ldrh	r3, [r7, #14]
 800d616:	2b01      	cmp	r3, #1
 800d618:	d906      	bls.n	800d628 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 800d61a:	2301      	movs	r3, #1
 800d61c:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 800d61e:	89fb      	ldrh	r3, [r7, #14]
 800d620:	085b      	lsrs	r3, r3, #1
 800d622:	b29b      	uxth	r3, r3
 800d624:	005b      	lsls	r3, r3, #1
 800d626:	81fb      	strh	r3, [r7, #14]
	}

	_LCD_Write_Frame(	xpos,
 800d628:	89fc      	ldrh	r4, [r7, #14]
 800d62a:	8c3a      	ldrh	r2, [r7, #32]
 800d62c:	88b9      	ldrh	r1, [r7, #4]
 800d62e:	88f8      	ldrh	r0, [r7, #6]
 800d630:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d634:	9300      	str	r3, [sp, #0]
 800d636:	4623      	mov	r3, r4
 800d638:	f000 f898 	bl	800d76c <_LCD_Write_Frame>
						colour,
						size,
						chunk_type);

	// add the truncated pixel now
	if(truncated)
 800d63c:	7b7b      	ldrb	r3, [r7, #13]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d011      	beq.n	800d666 <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800d642:	88fa      	ldrh	r2, [r7, #6]
 800d644:	887b      	ldrh	r3, [r7, #2]
 800d646:	4413      	add	r3, r2
 800d648:	b29b      	uxth	r3, r3
 800d64a:	3b01      	subs	r3, #1
 800d64c:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 800d64e:	88ba      	ldrh	r2, [r7, #4]
 800d650:	883b      	ldrh	r3, [r7, #0]
 800d652:	4413      	add	r3, r2
 800d654:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 800d656:	3b01      	subs	r3, #1
 800d658:	b29b      	uxth	r3, r3
 800d65a:	8c3a      	ldrh	r2, [r7, #32]
 800d65c:	4619      	mov	r1, r3
 800d65e:	f7ff fe4b 	bl	800d2f8 <ILI9341_Draw_Pixel>
 800d662:	e000      	b.n	800d666 <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 800d664:	bf00      	nop
							colour);
	}
}
 800d666:	3714      	adds	r7, #20
 800d668:	46bd      	mov	sp, r7
 800d66a:	bd90      	pop	{r4, r7, pc}
 800d66c:	20000cb2 	.word	0x20000cb2
 800d670:	20000cb0 	.word	0x20000cb0

0800d674 <ILI9341_Set_Rotation>:
 *
 * 	Set LCD orientation
 *
 */
void ILI9341_Set_Rotation(uint8_t rotation)
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b084      	sub	sp, #16
 800d678:	af00      	add	r7, sp, #0
 800d67a:	4603      	mov	r3, r0
 800d67c:	71fb      	strb	r3, [r7, #7]

	uint8_t screen_rotation = rotation;
 800d67e:	79fb      	ldrb	r3, [r7, #7]
 800d680:	73fb      	strb	r3, [r7, #15]

	_LCD_SendCommand(0x36);
 800d682:	2036      	movs	r0, #54	; 0x36
 800d684:	f000 f922 	bl	800d8cc <_LCD_SendCommand>
	//HAL_Delay(1);

	switch(screen_rotation)
 800d688:	7bfb      	ldrb	r3, [r7, #15]
 800d68a:	2b03      	cmp	r3, #3
 800d68c:	d836      	bhi.n	800d6fc <ILI9341_Set_Rotation+0x88>
 800d68e:	a201      	add	r2, pc, #4	; (adr r2, 800d694 <ILI9341_Set_Rotation+0x20>)
 800d690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d694:	0800d6a5 	.word	0x0800d6a5
 800d698:	0800d6bb 	.word	0x0800d6bb
 800d69c:	0800d6d1 	.word	0x0800d6d1
 800d6a0:	0800d6e7 	.word	0x0800d6e7
	{
		case SCREEN_VERTICAL_1:
			_LCD_SendData(0x40|0x08);
 800d6a4:	2048      	movs	r0, #72	; 0x48
 800d6a6:	f000 f943 	bl	800d930 <_LCD_SendData>
			LCD_WIDTH = 240;
 800d6aa:	4b17      	ldr	r3, [pc, #92]	; (800d708 <ILI9341_Set_Rotation+0x94>)
 800d6ac:	22f0      	movs	r2, #240	; 0xf0
 800d6ae:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800d6b0:	4b16      	ldr	r3, [pc, #88]	; (800d70c <ILI9341_Set_Rotation+0x98>)
 800d6b2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800d6b6:	801a      	strh	r2, [r3, #0]
			break;
 800d6b8:	e021      	b.n	800d6fe <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			_LCD_SendData(0x20|0x08);
 800d6ba:	2028      	movs	r0, #40	; 0x28
 800d6bc:	f000 f938 	bl	800d930 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800d6c0:	4b11      	ldr	r3, [pc, #68]	; (800d708 <ILI9341_Set_Rotation+0x94>)
 800d6c2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800d6c6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800d6c8:	4b10      	ldr	r3, [pc, #64]	; (800d70c <ILI9341_Set_Rotation+0x98>)
 800d6ca:	22f0      	movs	r2, #240	; 0xf0
 800d6cc:	801a      	strh	r2, [r3, #0]
			break;
 800d6ce:	e016      	b.n	800d6fe <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			_LCD_SendData(0x80|0x08);
 800d6d0:	2088      	movs	r0, #136	; 0x88
 800d6d2:	f000 f92d 	bl	800d930 <_LCD_SendData>
			LCD_WIDTH  = 240;
 800d6d6:	4b0c      	ldr	r3, [pc, #48]	; (800d708 <ILI9341_Set_Rotation+0x94>)
 800d6d8:	22f0      	movs	r2, #240	; 0xf0
 800d6da:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800d6dc:	4b0b      	ldr	r3, [pc, #44]	; (800d70c <ILI9341_Set_Rotation+0x98>)
 800d6de:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800d6e2:	801a      	strh	r2, [r3, #0]
			break;
 800d6e4:	e00b      	b.n	800d6fe <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			_LCD_SendData(0x40|0x80|0x20|0x08);
 800d6e6:	20e8      	movs	r0, #232	; 0xe8
 800d6e8:	f000 f922 	bl	800d930 <_LCD_SendData>
			LCD_WIDTH  = 320;
 800d6ec:	4b06      	ldr	r3, [pc, #24]	; (800d708 <ILI9341_Set_Rotation+0x94>)
 800d6ee:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800d6f2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 800d6f4:	4b05      	ldr	r3, [pc, #20]	; (800d70c <ILI9341_Set_Rotation+0x98>)
 800d6f6:	22f0      	movs	r2, #240	; 0xf0
 800d6f8:	801a      	strh	r2, [r3, #0]
			break;
 800d6fa:	e000      	b.n	800d6fe <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 800d6fc:	bf00      	nop
	}
}
 800d6fe:	bf00      	nop
 800d700:	3710      	adds	r7, #16
 800d702:	46bd      	mov	sp, r7
 800d704:	bd80      	pop	{r7, pc}
 800d706:	bf00      	nop
 800d708:	20000cb2 	.word	0x20000cb2
 800d70c:	20000cb0 	.word	0x20000cb0

0800d710 <_LCD_Enable>:
 *
 * Enable LCD display
 *
 */
void _LCD_Enable()
{
 800d710:	b480      	push	{r7}
 800d712:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800d714:	4b05      	ldr	r3, [pc, #20]	; (800d72c <_LCD_Enable+0x1c>)
 800d716:	695b      	ldr	r3, [r3, #20]
 800d718:	4a04      	ldr	r2, [pc, #16]	; (800d72c <_LCD_Enable+0x1c>)
 800d71a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d71e:	6153      	str	r3, [r2, #20]
}
 800d720:	bf00      	nop
 800d722:	46bd      	mov	sp, r7
 800d724:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d728:	4770      	bx	lr
 800d72a:	bf00      	nop
 800d72c:	48000400 	.word	0x48000400

0800d730 <_LCD_Reset>:
 *
 * 	Reset LCD
 *
 */
void _LCD_Reset()
{
 800d730:	b580      	push	{r7, lr}
 800d732:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 800d734:	4b0c      	ldr	r3, [pc, #48]	; (800d768 <_LCD_Reset+0x38>)
 800d736:	695b      	ldr	r3, [r3, #20]
 800d738:	4a0b      	ldr	r2, [pc, #44]	; (800d768 <_LCD_Reset+0x38>)
 800d73a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d73e:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800d740:	20c8      	movs	r0, #200	; 0xc8
 800d742:	f7fa f8e1 	bl	8007908 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d746:	4b08      	ldr	r3, [pc, #32]	; (800d768 <_LCD_Reset+0x38>)
 800d748:	695b      	ldr	r3, [r3, #20]
 800d74a:	4a07      	ldr	r2, [pc, #28]	; (800d768 <_LCD_Reset+0x38>)
 800d74c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d750:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 800d752:	20c8      	movs	r0, #200	; 0xc8
 800d754:	f7fa f8d8 	bl	8007908 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800d758:	4b03      	ldr	r3, [pc, #12]	; (800d768 <_LCD_Reset+0x38>)
 800d75a:	695b      	ldr	r3, [r3, #20]
 800d75c:	4a02      	ldr	r2, [pc, #8]	; (800d768 <_LCD_Reset+0x38>)
 800d75e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800d762:	6153      	str	r3, [r2, #20]
}
 800d764:	bf00      	nop
 800d766:	bd80      	pop	{r7, pc}
 800d768:	48000400 	.word	0x48000400

0800d76c <_LCD_Write_Frame>:
 *
 *	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
 *	each CHUNK is broken down into smaller BLOCKS
 */
void _LCD_Write_Frame(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 800d76c:	b5b0      	push	{r4, r5, r7, lr}
 800d76e:	b08e      	sub	sp, #56	; 0x38
 800d770:	af00      	add	r7, sp, #0
 800d772:	607b      	str	r3, [r7, #4]
 800d774:	4603      	mov	r3, r0
 800d776:	81fb      	strh	r3, [r7, #14]
 800d778:	460b      	mov	r3, r1
 800d77a:	81bb      	strh	r3, [r7, #12]
 800d77c:	4613      	mov	r3, r2
 800d77e:	817b      	strh	r3, [r7, #10]
 800d780:	466b      	mov	r3, sp
 800d782:	461d      	mov	r5, r3

	uint32_t buffer_size = 0;
 800d784:	2300      	movs	r3, #0
 800d786:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	005b      	lsls	r3, r3, #1
 800d78c:	4a4d      	ldr	r2, [pc, #308]	; (800d8c4 <_LCD_Write_Frame+0x158>)
 800d78e:	8812      	ldrh	r2, [r2, #0]
 800d790:	4293      	cmp	r3, r2
 800d792:	d202      	bcs.n	800d79a <_LCD_Write_Frame+0x2e>
	{
		buffer_size = chunk_size;
 800d794:	687b      	ldr	r3, [r7, #4]
 800d796:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d798:	e002      	b.n	800d7a0 <_LCD_Write_Frame+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 800d79a:	4b4a      	ldr	r3, [pc, #296]	; (800d8c4 <_LCD_Write_Frame+0x158>)
 800d79c:	881b      	ldrh	r3, [r3, #0]
 800d79e:	62fb      	str	r3, [r7, #44]	; 0x2c
	}

	unsigned char chifted = 	colour>>8;;
 800d7a0:	897b      	ldrh	r3, [r7, #10]
 800d7a2:	0a1b      	lsrs	r3, r3, #8
 800d7a4:	b29b      	uxth	r3, r3
 800d7a6:	77fb      	strb	r3, [r7, #31]
	unsigned char burst_buffer[buffer_size];
 800d7a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7aa:	4603      	mov	r3, r0
 800d7ac:	3b01      	subs	r3, #1
 800d7ae:	61bb      	str	r3, [r7, #24]
 800d7b0:	4601      	mov	r1, r0
 800d7b2:	f04f 0200 	mov.w	r2, #0
 800d7b6:	f04f 0300 	mov.w	r3, #0
 800d7ba:	f04f 0400 	mov.w	r4, #0
 800d7be:	00d4      	lsls	r4, r2, #3
 800d7c0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800d7c4:	00cb      	lsls	r3, r1, #3
 800d7c6:	4601      	mov	r1, r0
 800d7c8:	f04f 0200 	mov.w	r2, #0
 800d7cc:	f04f 0300 	mov.w	r3, #0
 800d7d0:	f04f 0400 	mov.w	r4, #0
 800d7d4:	00d4      	lsls	r4, r2, #3
 800d7d6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800d7da:	00cb      	lsls	r3, r1, #3
 800d7dc:	1dc3      	adds	r3, r0, #7
 800d7de:	08db      	lsrs	r3, r3, #3
 800d7e0:	00db      	lsls	r3, r3, #3
 800d7e2:	ebad 0d03 	sub.w	sp, sp, r3
 800d7e6:	466b      	mov	r3, sp
 800d7e8:	3300      	adds	r3, #0
 800d7ea:	617b      	str	r3, [r7, #20]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800d7ec:	2300      	movs	r3, #0
 800d7ee:	633b      	str	r3, [r7, #48]	; 0x30
 800d7f0:	e00d      	b.n	800d80e <_LCD_Write_Frame+0xa2>
	{
			burst_buffer[j] = 	chifted;
 800d7f2:	697a      	ldr	r2, [r7, #20]
 800d7f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f6:	4413      	add	r3, r2
 800d7f8:	7ffa      	ldrb	r2, [r7, #31]
 800d7fa:	701a      	strb	r2, [r3, #0]
			burst_buffer[j+1] = colour;
 800d7fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7fe:	3301      	adds	r3, #1
 800d800:	897a      	ldrh	r2, [r7, #10]
 800d802:	b2d1      	uxtb	r1, r2
 800d804:	697a      	ldr	r2, [r7, #20]
 800d806:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 800d808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d80a:	3302      	adds	r3, #2
 800d80c:	633b      	str	r3, [r7, #48]	; 0x30
 800d80e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d812:	429a      	cmp	r2, r3
 800d814:	d3ed      	bcc.n	800d7f2 <_LCD_Write_Frame+0x86>
	}
	
	uint32_t Sending_size = chunk_size*2;
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	005b      	lsls	r3, r3, #1
 800d81a:	613b      	str	r3, [r7, #16]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 800d81c:	2301      	movs	r3, #1
 800d81e:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 800d820:	2300      	movs	r3, #0
 800d822:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2b00      	cmp	r3, #0
 800d828:	d00d      	beq.n	800d846 <_LCD_Write_Frame+0xda>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 800d82a:	693a      	ldr	r2, [r7, #16]
 800d82c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d82e:	fbb2 f3f3 	udiv	r3, r2, r3
 800d832:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 800d834:	693b      	ldr	r3, [r7, #16]
 800d836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d838:	fbb3 f2f2 	udiv	r2, r3, r2
 800d83c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d83e:	fb01 f202 	mul.w	r2, r1, r2
 800d842:	1a9b      	subs	r3, r3, r2
 800d844:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800d846:	4b20      	ldr	r3, [pc, #128]	; (800d8c8 <_LCD_Write_Frame+0x15c>)
 800d848:	695b      	ldr	r3, [r3, #20]
 800d84a:	4a1f      	ldr	r2, [pc, #124]	; (800d8c8 <_LCD_Write_Frame+0x15c>)
 800d84c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d850:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d852:	4b1d      	ldr	r3, [pc, #116]	; (800d8c8 <_LCD_Write_Frame+0x15c>)
 800d854:	695b      	ldr	r3, [r3, #20]
 800d856:	4a1c      	ldr	r2, [pc, #112]	; (800d8c8 <_LCD_Write_Frame+0x15c>)
 800d858:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d85c:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 800d85e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d860:	2b00      	cmp	r3, #0
 800d862:	d00f      	beq.n	800d884 <_LCD_Write_Frame+0x118>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800d864:	2300      	movs	r3, #0
 800d866:	627b      	str	r3, [r7, #36]	; 0x24
 800d868:	e008      	b.n	800d87c <_LCD_Write_Frame+0x110>
		{
			_SPI_SendByteMultiByte(burst_buffer, buffer_size, 0, 10);
 800d86a:	6978      	ldr	r0, [r7, #20]
 800d86c:	230a      	movs	r3, #10
 800d86e:	2200      	movs	r2, #0
 800d870:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d872:	f000 f8c1 	bl	800d9f8 <_SPI_SendByteMultiByte>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 800d876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d878:	3301      	adds	r3, #1
 800d87a:	627b      	str	r3, [r7, #36]	; 0x24
 800d87c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d87e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d880:	429a      	cmp	r2, r3
 800d882:	d3f2      	bcc.n	800d86a <_LCD_Write_Frame+0xfe>
		}
	}

	_SPI_SendByteMultiByte(burst_buffer, Remainder_from_block, 0, 10);
 800d884:	6978      	ldr	r0, [r7, #20]
 800d886:	230a      	movs	r3, #10
 800d888:	2200      	movs	r2, #0
 800d88a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d88c:	f000 f8b4 	bl	800d9f8 <_SPI_SendByteMultiByte>


	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800d890:	2300      	movs	r3, #0
 800d892:	623b      	str	r3, [r7, #32]
 800d894:	e008      	b.n	800d8a8 <_LCD_Write_Frame+0x13c>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d896:	4b0c      	ldr	r3, [pc, #48]	; (800d8c8 <_LCD_Write_Frame+0x15c>)
 800d898:	695b      	ldr	r3, [r3, #20]
 800d89a:	4a0b      	ldr	r2, [pc, #44]	; (800d8c8 <_LCD_Write_Frame+0x15c>)
 800d89c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d8a0:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800d8a2:	6a3b      	ldr	r3, [r7, #32]
 800d8a4:	3301      	adds	r3, #1
 800d8a6:	623b      	str	r3, [r7, #32]
 800d8a8:	6a3b      	ldr	r3, [r7, #32]
 800d8aa:	2b02      	cmp	r3, #2
 800d8ac:	ddf3      	ble.n	800d896 <_LCD_Write_Frame+0x12a>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800d8ae:	4b06      	ldr	r3, [pc, #24]	; (800d8c8 <_LCD_Write_Frame+0x15c>)
 800d8b0:	695b      	ldr	r3, [r3, #20]
 800d8b2:	4a05      	ldr	r2, [pc, #20]	; (800d8c8 <_LCD_Write_Frame+0x15c>)
 800d8b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d8b8:	6153      	str	r3, [r2, #20]
 800d8ba:	46ad      	mov	sp, r5

}
 800d8bc:	bf00      	nop
 800d8be:	3738      	adds	r7, #56	; 0x38
 800d8c0:	46bd      	mov	sp, r7
 800d8c2:	bdb0      	pop	{r4, r5, r7, pc}
 800d8c4:	20000cb4 	.word	0x20000cb4
 800d8c8:	48000400 	.word	0x48000400

0800d8cc <_LCD_SendCommand>:
 *
 * 	Send command to LCD
 *
 */
void _LCD_SendCommand(uint8_t command)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b084      	sub	sp, #16
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	4603      	mov	r3, r0
 800d8d4:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d8d6:	4b15      	ldr	r3, [pc, #84]	; (800d92c <_LCD_SendCommand+0x60>)
 800d8d8:	695b      	ldr	r3, [r3, #20]
 800d8da:	4a14      	ldr	r2, [pc, #80]	; (800d92c <_LCD_SendCommand+0x60>)
 800d8dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d8e0:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800d8e2:	4b12      	ldr	r3, [pc, #72]	; (800d92c <_LCD_SendCommand+0x60>)
 800d8e4:	695b      	ldr	r3, [r3, #20]
 800d8e6:	4a11      	ldr	r2, [pc, #68]	; (800d92c <_LCD_SendCommand+0x60>)
 800d8e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d8ec:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(command, 0 , 0);
 800d8ee:	79fb      	ldrb	r3, [r7, #7]
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	2100      	movs	r1, #0
 800d8f4:	4618      	mov	r0, r3
 800d8f6:	f000 f84d 	bl	800d994 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	60fb      	str	r3, [r7, #12]
 800d8fe:	e008      	b.n	800d912 <_LCD_SendCommand+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d900:	4b0a      	ldr	r3, [pc, #40]	; (800d92c <_LCD_SendCommand+0x60>)
 800d902:	695b      	ldr	r3, [r3, #20]
 800d904:	4a09      	ldr	r2, [pc, #36]	; (800d92c <_LCD_SendCommand+0x60>)
 800d906:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d90a:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	3301      	adds	r3, #1
 800d910:	60fb      	str	r3, [r7, #12]
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	2b02      	cmp	r3, #2
 800d916:	ddf3      	ble.n	800d900 <_LCD_SendCommand+0x34>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800d918:	4b04      	ldr	r3, [pc, #16]	; (800d92c <_LCD_SendCommand+0x60>)
 800d91a:	695b      	ldr	r3, [r3, #20]
 800d91c:	4a03      	ldr	r2, [pc, #12]	; (800d92c <_LCD_SendCommand+0x60>)
 800d91e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d922:	6153      	str	r3, [r2, #20]
}
 800d924:	bf00      	nop
 800d926:	3710      	adds	r7, #16
 800d928:	46bd      	mov	sp, r7
 800d92a:	bd80      	pop	{r7, pc}
 800d92c:	48000400 	.word	0x48000400

0800d930 <_LCD_SendData>:
 *
 * 	Send Data to LCD
 *
 */
void _LCD_SendData(uint8_t data)
{
 800d930:	b580      	push	{r7, lr}
 800d932:	b084      	sub	sp, #16
 800d934:	af00      	add	r7, sp, #0
 800d936:	4603      	mov	r3, r0
 800d938:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 800d93a:	4b15      	ldr	r3, [pc, #84]	; (800d990 <_LCD_SendData+0x60>)
 800d93c:	695b      	ldr	r3, [r3, #20]
 800d93e:	4a14      	ldr	r2, [pc, #80]	; (800d990 <_LCD_SendData+0x60>)
 800d940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d944:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d946:	4b12      	ldr	r3, [pc, #72]	; (800d990 <_LCD_SendData+0x60>)
 800d948:	695b      	ldr	r3, [r3, #20]
 800d94a:	4a11      	ldr	r2, [pc, #68]	; (800d990 <_LCD_SendData+0x60>)
 800d94c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d950:	6153      	str	r3, [r2, #20]

	_SPI_SendByte(data, 0 , 0);
 800d952:	79fb      	ldrb	r3, [r7, #7]
 800d954:	2200      	movs	r2, #0
 800d956:	2100      	movs	r1, #0
 800d958:	4618      	mov	r0, r3
 800d95a:	f000 f81b 	bl	800d994 <_SPI_SendByte>

	// Additional SPI CS "low" hold
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800d95e:	2300      	movs	r3, #0
 800d960:	60fb      	str	r3, [r7, #12]
 800d962:	e008      	b.n	800d976 <_LCD_SendData+0x46>
		LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d964:	4b0a      	ldr	r3, [pc, #40]	; (800d990 <_LCD_SendData+0x60>)
 800d966:	695b      	ldr	r3, [r3, #20]
 800d968:	4a09      	ldr	r2, [pc, #36]	; (800d990 <_LCD_SendData+0x60>)
 800d96a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d96e:	6153      	str	r3, [r2, #20]
	for(int x=0; x < SPI_DELAY_HOLD; x++)
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	3301      	adds	r3, #1
 800d974:	60fb      	str	r3, [r7, #12]
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2b02      	cmp	r3, #2
 800d97a:	ddf3      	ble.n	800d964 <_LCD_SendData+0x34>

	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800d97c:	4b04      	ldr	r3, [pc, #16]	; (800d990 <_LCD_SendData+0x60>)
 800d97e:	695b      	ldr	r3, [r3, #20]
 800d980:	4a03      	ldr	r2, [pc, #12]	; (800d990 <_LCD_SendData+0x60>)
 800d982:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d986:	6153      	str	r3, [r2, #20]
}
 800d988:	bf00      	nop
 800d98a:	3710      	adds	r7, #16
 800d98c:	46bd      	mov	sp, r7
 800d98e:	bd80      	pop	{r7, pc}
 800d990:	48000400 	.word	0x48000400

0800d994 <_SPI_SendByte>:
 *
 * 	Send single byte over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByte(unsigned char data_buffer, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800d994:	b480      	push	{r7}
 800d996:	b085      	sub	sp, #20
 800d998:	af00      	add	r7, sp, #0
 800d99a:	4603      	mov	r3, r0
 800d99c:	71fb      	strb	r3, [r7, #7]
 800d99e:	460b      	mov	r3, r1
 800d9a0:	71bb      	strb	r3, [r7, #6]
 800d9a2:	4613      	mov	r3, r2
 800d9a4:	717b      	strb	r3, [r7, #5]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800d9a6:	2300      	movs	r3, #0
 800d9a8:	60fb      	str	r3, [r7, #12]
 800d9aa:	e003      	b.n	800d9b4 <_SPI_SendByte+0x20>
   		asm("nop");
 800d9ac:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	3301      	adds	r3, #1
 800d9b2:	60fb      	str	r3, [r7, #12]
 800d9b4:	79bb      	ldrb	r3, [r7, #6]
 800d9b6:	68fa      	ldr	r2, [r7, #12]
 800d9b8:	429a      	cmp	r2, r3
 800d9ba:	dbf7      	blt.n	800d9ac <_SPI_SendByte+0x18>

	// check transmit buffer empty
	if((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800d9bc:	4b0c      	ldr	r3, [pc, #48]	; (800d9f0 <_SPI_SendByte+0x5c>)
 800d9be:	689b      	ldr	r3, [r3, #8]
 800d9c0:	f003 0302 	and.w	r3, r3, #2
 800d9c4:	2b02      	cmp	r3, #2
 800d9c6:	d102      	bne.n	800d9ce <_SPI_SendByte+0x3a>
	{
		*(volatile uint8_t *)&SPI_PERIPH->DR = data_buffer;
 800d9c8:	4a0a      	ldr	r2, [pc, #40]	; (800d9f4 <_SPI_SendByte+0x60>)
 800d9ca:	79fb      	ldrb	r3, [r7, #7]
 800d9cc:	7013      	strb	r3, [r2, #0]
	}

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800d9ce:	2300      	movs	r3, #0
 800d9d0:	60bb      	str	r3, [r7, #8]
 800d9d2:	e003      	b.n	800d9dc <_SPI_SendByte+0x48>
   		asm("nop");
 800d9d4:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800d9d6:	68bb      	ldr	r3, [r7, #8]
 800d9d8:	3301      	adds	r3, #1
 800d9da:	60bb      	str	r3, [r7, #8]
 800d9dc:	797b      	ldrb	r3, [r7, #5]
 800d9de:	68ba      	ldr	r2, [r7, #8]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	dbf7      	blt.n	800d9d4 <_SPI_SendByte+0x40>

#endif

}
 800d9e4:	bf00      	nop
 800d9e6:	3714      	adds	r7, #20
 800d9e8:	46bd      	mov	sp, r7
 800d9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9ee:	4770      	bx	lr
 800d9f0:	40003c00 	.word	0x40003c00
 800d9f4:	40003c0c 	.word	0x40003c0c

0800d9f8 <_SPI_SendByteMultiByte>:
 *
 * 	Send multiple bytes over SPI using HAL or (optimised) direct-to-register
 *
 */
void _SPI_SendByteMultiByte(unsigned char *data_buffer, uint32_t buffer_size, uint8_t pre_frame_delay, uint8_t post_frame_delay)
{
 800d9f8:	b480      	push	{r7}
 800d9fa:	b089      	sub	sp, #36	; 0x24
 800d9fc:	af00      	add	r7, sp, #0
 800d9fe:	60f8      	str	r0, [r7, #12]
 800da00:	60b9      	str	r1, [r7, #8]
 800da02:	4611      	mov	r1, r2
 800da04:	461a      	mov	r2, r3
 800da06:	460b      	mov	r3, r1
 800da08:	71fb      	strb	r3, [r7, #7]
 800da0a:	4613      	mov	r3, r2
 800da0c:	71bb      	strb	r3, [r7, #6]
#endif

#ifdef USE_BARE_SPI

    // pre frame delay
   	for(int d = 0; d < pre_frame_delay ; d++)
 800da0e:	2300      	movs	r3, #0
 800da10:	61fb      	str	r3, [r7, #28]
 800da12:	e003      	b.n	800da1c <_SPI_SendByteMultiByte+0x24>
   		asm("nop");
 800da14:	bf00      	nop
   	for(int d = 0; d < pre_frame_delay ; d++)
 800da16:	69fb      	ldr	r3, [r7, #28]
 800da18:	3301      	adds	r3, #1
 800da1a:	61fb      	str	r3, [r7, #28]
 800da1c:	79fb      	ldrb	r3, [r7, #7]
 800da1e:	69fa      	ldr	r2, [r7, #28]
 800da20:	429a      	cmp	r2, r3
 800da22:	dbf7      	blt.n	800da14 <_SPI_SendByteMultiByte+0x1c>

	uint8_t *p_data_buffer = (uint8_t *)data_buffer;
 800da24:	68fb      	ldr	r3, [r7, #12]
 800da26:	61bb      	str	r3, [r7, #24]
	//volatile uint16_t TxXferCount = (uint16_t)buffer_size;

	while (buffer_size > 0U)
 800da28:	e01d      	b.n	800da66 <_SPI_SendByteMultiByte+0x6e>
	{
		// check transmit buffer empty
		if ((SPI_PERIPH->SR & SPI_SR_TXE) == SPI_SR_TXE)
 800da2a:	4b1c      	ldr	r3, [pc, #112]	; (800da9c <_SPI_SendByteMultiByte+0xa4>)
 800da2c:	689b      	ldr	r3, [r3, #8]
 800da2e:	f003 0302 	and.w	r3, r3, #2
 800da32:	2b02      	cmp	r3, #2
 800da34:	d117      	bne.n	800da66 <_SPI_SendByteMultiByte+0x6e>
		{
			if (buffer_size > 1U)
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	2b01      	cmp	r3, #1
 800da3a:	d90a      	bls.n	800da52 <_SPI_SendByteMultiByte+0x5a>
			{
				// write on the data register in packing mode
				SPI_PERIPH->DR = *((uint16_t *)p_data_buffer);
 800da3c:	69bb      	ldr	r3, [r7, #24]
 800da3e:	881a      	ldrh	r2, [r3, #0]
 800da40:	4b16      	ldr	r3, [pc, #88]	; (800da9c <_SPI_SendByteMultiByte+0xa4>)
 800da42:	60da      	str	r2, [r3, #12]
				p_data_buffer += sizeof(uint16_t);
 800da44:	69bb      	ldr	r3, [r7, #24]
 800da46:	3302      	adds	r3, #2
 800da48:	61bb      	str	r3, [r7, #24]
				buffer_size -= 2U;
 800da4a:	68bb      	ldr	r3, [r7, #8]
 800da4c:	3b02      	subs	r3, #2
 800da4e:	60bb      	str	r3, [r7, #8]
 800da50:	e009      	b.n	800da66 <_SPI_SendByteMultiByte+0x6e>
			}
			else
			{
				*((volatile uint8_t *)&SPI_PERIPH->DR) = (*p_data_buffer);
 800da52:	4a13      	ldr	r2, [pc, #76]	; (800daa0 <_SPI_SendByteMultiByte+0xa8>)
 800da54:	69bb      	ldr	r3, [r7, #24]
 800da56:	781b      	ldrb	r3, [r3, #0]
 800da58:	7013      	strb	r3, [r2, #0]
				p_data_buffer++;
 800da5a:	69bb      	ldr	r3, [r7, #24]
 800da5c:	3301      	adds	r3, #1
 800da5e:	61bb      	str	r3, [r7, #24]
				buffer_size--;
 800da60:	68bb      	ldr	r3, [r7, #8]
 800da62:	3b01      	subs	r3, #1
 800da64:	60bb      	str	r3, [r7, #8]
	while (buffer_size > 0U)
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d1de      	bne.n	800da2a <_SPI_SendByteMultiByte+0x32>
			}
		}
	}

	// clear SPI overrun flag
	SPI_PERIPH->SR &= ~(SPI_SR_OVR);
 800da6c:	4b0b      	ldr	r3, [pc, #44]	; (800da9c <_SPI_SendByteMultiByte+0xa4>)
 800da6e:	689b      	ldr	r3, [r3, #8]
 800da70:	4a0a      	ldr	r2, [pc, #40]	; (800da9c <_SPI_SendByteMultiByte+0xa4>)
 800da72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800da76:	6093      	str	r3, [r2, #8]

    // post frame delay
   	for(int d = 0; d < post_frame_delay ; d++)
 800da78:	2300      	movs	r3, #0
 800da7a:	617b      	str	r3, [r7, #20]
 800da7c:	e003      	b.n	800da86 <_SPI_SendByteMultiByte+0x8e>
   		asm("nop");
 800da7e:	bf00      	nop
   	for(int d = 0; d < post_frame_delay ; d++)
 800da80:	697b      	ldr	r3, [r7, #20]
 800da82:	3301      	adds	r3, #1
 800da84:	617b      	str	r3, [r7, #20]
 800da86:	79bb      	ldrb	r3, [r7, #6]
 800da88:	697a      	ldr	r2, [r7, #20]
 800da8a:	429a      	cmp	r2, r3
 800da8c:	dbf7      	blt.n	800da7e <_SPI_SendByteMultiByte+0x86>

#endif

}
 800da8e:	bf00      	nop
 800da90:	3724      	adds	r7, #36	; 0x24
 800da92:	46bd      	mov	sp, r7
 800da94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da98:	4770      	bx	lr
 800da9a:	bf00      	nop
 800da9c:	40003c00 	.word	0x40003c00
 800daa0:	40003c0c 	.word	0x40003c0c

0800daa4 <__errno>:
 800daa4:	4b01      	ldr	r3, [pc, #4]	; (800daac <__errno+0x8>)
 800daa6:	6818      	ldr	r0, [r3, #0]
 800daa8:	4770      	bx	lr
 800daaa:	bf00      	nop
 800daac:	20001cf8 	.word	0x20001cf8

0800dab0 <__libc_init_array>:
 800dab0:	b570      	push	{r4, r5, r6, lr}
 800dab2:	4e0d      	ldr	r6, [pc, #52]	; (800dae8 <__libc_init_array+0x38>)
 800dab4:	4c0d      	ldr	r4, [pc, #52]	; (800daec <__libc_init_array+0x3c>)
 800dab6:	1ba4      	subs	r4, r4, r6
 800dab8:	10a4      	asrs	r4, r4, #2
 800daba:	2500      	movs	r5, #0
 800dabc:	42a5      	cmp	r5, r4
 800dabe:	d109      	bne.n	800dad4 <__libc_init_array+0x24>
 800dac0:	4e0b      	ldr	r6, [pc, #44]	; (800daf0 <__libc_init_array+0x40>)
 800dac2:	4c0c      	ldr	r4, [pc, #48]	; (800daf4 <__libc_init_array+0x44>)
 800dac4:	f002 fc30 	bl	8010328 <_init>
 800dac8:	1ba4      	subs	r4, r4, r6
 800daca:	10a4      	asrs	r4, r4, #2
 800dacc:	2500      	movs	r5, #0
 800dace:	42a5      	cmp	r5, r4
 800dad0:	d105      	bne.n	800dade <__libc_init_array+0x2e>
 800dad2:	bd70      	pop	{r4, r5, r6, pc}
 800dad4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dad8:	4798      	blx	r3
 800dada:	3501      	adds	r5, #1
 800dadc:	e7ee      	b.n	800dabc <__libc_init_array+0xc>
 800dade:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800dae2:	4798      	blx	r3
 800dae4:	3501      	adds	r5, #1
 800dae6:	e7f2      	b.n	800dace <__libc_init_array+0x1e>
 800dae8:	080113e0 	.word	0x080113e0
 800daec:	080113e0 	.word	0x080113e0
 800daf0:	080113e0 	.word	0x080113e0
 800daf4:	080113e4 	.word	0x080113e4

0800daf8 <memset>:
 800daf8:	4402      	add	r2, r0
 800dafa:	4603      	mov	r3, r0
 800dafc:	4293      	cmp	r3, r2
 800dafe:	d100      	bne.n	800db02 <memset+0xa>
 800db00:	4770      	bx	lr
 800db02:	f803 1b01 	strb.w	r1, [r3], #1
 800db06:	e7f9      	b.n	800dafc <memset+0x4>

0800db08 <__cvt>:
 800db08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800db0c:	ec55 4b10 	vmov	r4, r5, d0
 800db10:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800db12:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800db16:	2d00      	cmp	r5, #0
 800db18:	460e      	mov	r6, r1
 800db1a:	4691      	mov	r9, r2
 800db1c:	4619      	mov	r1, r3
 800db1e:	bfb8      	it	lt
 800db20:	4622      	movlt	r2, r4
 800db22:	462b      	mov	r3, r5
 800db24:	f027 0720 	bic.w	r7, r7, #32
 800db28:	bfbb      	ittet	lt
 800db2a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800db2e:	461d      	movlt	r5, r3
 800db30:	2300      	movge	r3, #0
 800db32:	232d      	movlt	r3, #45	; 0x2d
 800db34:	bfb8      	it	lt
 800db36:	4614      	movlt	r4, r2
 800db38:	2f46      	cmp	r7, #70	; 0x46
 800db3a:	700b      	strb	r3, [r1, #0]
 800db3c:	d004      	beq.n	800db48 <__cvt+0x40>
 800db3e:	2f45      	cmp	r7, #69	; 0x45
 800db40:	d100      	bne.n	800db44 <__cvt+0x3c>
 800db42:	3601      	adds	r6, #1
 800db44:	2102      	movs	r1, #2
 800db46:	e000      	b.n	800db4a <__cvt+0x42>
 800db48:	2103      	movs	r1, #3
 800db4a:	ab03      	add	r3, sp, #12
 800db4c:	9301      	str	r3, [sp, #4]
 800db4e:	ab02      	add	r3, sp, #8
 800db50:	9300      	str	r3, [sp, #0]
 800db52:	4632      	mov	r2, r6
 800db54:	4653      	mov	r3, sl
 800db56:	ec45 4b10 	vmov	d0, r4, r5
 800db5a:	f000 fe25 	bl	800e7a8 <_dtoa_r>
 800db5e:	2f47      	cmp	r7, #71	; 0x47
 800db60:	4680      	mov	r8, r0
 800db62:	d102      	bne.n	800db6a <__cvt+0x62>
 800db64:	f019 0f01 	tst.w	r9, #1
 800db68:	d026      	beq.n	800dbb8 <__cvt+0xb0>
 800db6a:	2f46      	cmp	r7, #70	; 0x46
 800db6c:	eb08 0906 	add.w	r9, r8, r6
 800db70:	d111      	bne.n	800db96 <__cvt+0x8e>
 800db72:	f898 3000 	ldrb.w	r3, [r8]
 800db76:	2b30      	cmp	r3, #48	; 0x30
 800db78:	d10a      	bne.n	800db90 <__cvt+0x88>
 800db7a:	2200      	movs	r2, #0
 800db7c:	2300      	movs	r3, #0
 800db7e:	4620      	mov	r0, r4
 800db80:	4629      	mov	r1, r5
 800db82:	f7f2 ffc9 	bl	8000b18 <__aeabi_dcmpeq>
 800db86:	b918      	cbnz	r0, 800db90 <__cvt+0x88>
 800db88:	f1c6 0601 	rsb	r6, r6, #1
 800db8c:	f8ca 6000 	str.w	r6, [sl]
 800db90:	f8da 3000 	ldr.w	r3, [sl]
 800db94:	4499      	add	r9, r3
 800db96:	2200      	movs	r2, #0
 800db98:	2300      	movs	r3, #0
 800db9a:	4620      	mov	r0, r4
 800db9c:	4629      	mov	r1, r5
 800db9e:	f7f2 ffbb 	bl	8000b18 <__aeabi_dcmpeq>
 800dba2:	b938      	cbnz	r0, 800dbb4 <__cvt+0xac>
 800dba4:	2230      	movs	r2, #48	; 0x30
 800dba6:	9b03      	ldr	r3, [sp, #12]
 800dba8:	454b      	cmp	r3, r9
 800dbaa:	d205      	bcs.n	800dbb8 <__cvt+0xb0>
 800dbac:	1c59      	adds	r1, r3, #1
 800dbae:	9103      	str	r1, [sp, #12]
 800dbb0:	701a      	strb	r2, [r3, #0]
 800dbb2:	e7f8      	b.n	800dba6 <__cvt+0x9e>
 800dbb4:	f8cd 900c 	str.w	r9, [sp, #12]
 800dbb8:	9b03      	ldr	r3, [sp, #12]
 800dbba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dbbc:	eba3 0308 	sub.w	r3, r3, r8
 800dbc0:	4640      	mov	r0, r8
 800dbc2:	6013      	str	r3, [r2, #0]
 800dbc4:	b004      	add	sp, #16
 800dbc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800dbca <__exponent>:
 800dbca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dbcc:	2900      	cmp	r1, #0
 800dbce:	4604      	mov	r4, r0
 800dbd0:	bfba      	itte	lt
 800dbd2:	4249      	neglt	r1, r1
 800dbd4:	232d      	movlt	r3, #45	; 0x2d
 800dbd6:	232b      	movge	r3, #43	; 0x2b
 800dbd8:	2909      	cmp	r1, #9
 800dbda:	f804 2b02 	strb.w	r2, [r4], #2
 800dbde:	7043      	strb	r3, [r0, #1]
 800dbe0:	dd20      	ble.n	800dc24 <__exponent+0x5a>
 800dbe2:	f10d 0307 	add.w	r3, sp, #7
 800dbe6:	461f      	mov	r7, r3
 800dbe8:	260a      	movs	r6, #10
 800dbea:	fb91 f5f6 	sdiv	r5, r1, r6
 800dbee:	fb06 1115 	mls	r1, r6, r5, r1
 800dbf2:	3130      	adds	r1, #48	; 0x30
 800dbf4:	2d09      	cmp	r5, #9
 800dbf6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800dbfa:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
 800dbfe:	4629      	mov	r1, r5
 800dc00:	dc09      	bgt.n	800dc16 <__exponent+0x4c>
 800dc02:	3130      	adds	r1, #48	; 0x30
 800dc04:	3b02      	subs	r3, #2
 800dc06:	f802 1c01 	strb.w	r1, [r2, #-1]
 800dc0a:	42bb      	cmp	r3, r7
 800dc0c:	4622      	mov	r2, r4
 800dc0e:	d304      	bcc.n	800dc1a <__exponent+0x50>
 800dc10:	1a10      	subs	r0, r2, r0
 800dc12:	b003      	add	sp, #12
 800dc14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc16:	4613      	mov	r3, r2
 800dc18:	e7e7      	b.n	800dbea <__exponent+0x20>
 800dc1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dc1e:	f804 2b01 	strb.w	r2, [r4], #1
 800dc22:	e7f2      	b.n	800dc0a <__exponent+0x40>
 800dc24:	2330      	movs	r3, #48	; 0x30
 800dc26:	4419      	add	r1, r3
 800dc28:	7083      	strb	r3, [r0, #2]
 800dc2a:	1d02      	adds	r2, r0, #4
 800dc2c:	70c1      	strb	r1, [r0, #3]
 800dc2e:	e7ef      	b.n	800dc10 <__exponent+0x46>

0800dc30 <_printf_float>:
 800dc30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc34:	b08d      	sub	sp, #52	; 0x34
 800dc36:	460c      	mov	r4, r1
 800dc38:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 800dc3c:	4616      	mov	r6, r2
 800dc3e:	461f      	mov	r7, r3
 800dc40:	4605      	mov	r5, r0
 800dc42:	f001 fce3 	bl	800f60c <_localeconv_r>
 800dc46:	6803      	ldr	r3, [r0, #0]
 800dc48:	9304      	str	r3, [sp, #16]
 800dc4a:	4618      	mov	r0, r3
 800dc4c:	f7f2 fae8 	bl	8000220 <strlen>
 800dc50:	2300      	movs	r3, #0
 800dc52:	930a      	str	r3, [sp, #40]	; 0x28
 800dc54:	f8d8 3000 	ldr.w	r3, [r8]
 800dc58:	9005      	str	r0, [sp, #20]
 800dc5a:	3307      	adds	r3, #7
 800dc5c:	f023 0307 	bic.w	r3, r3, #7
 800dc60:	f103 0208 	add.w	r2, r3, #8
 800dc64:	f894 a018 	ldrb.w	sl, [r4, #24]
 800dc68:	f8d4 b000 	ldr.w	fp, [r4]
 800dc6c:	f8c8 2000 	str.w	r2, [r8]
 800dc70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc74:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800dc78:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800dc7c:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800dc80:	9307      	str	r3, [sp, #28]
 800dc82:	f8cd 8018 	str.w	r8, [sp, #24]
 800dc86:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc8a:	4ba7      	ldr	r3, [pc, #668]	; (800df28 <_printf_float+0x2f8>)
 800dc8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dc90:	f7f2 ff74 	bl	8000b7c <__aeabi_dcmpun>
 800dc94:	bb70      	cbnz	r0, 800dcf4 <_printf_float+0xc4>
 800dc96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800dc9a:	4ba3      	ldr	r3, [pc, #652]	; (800df28 <_printf_float+0x2f8>)
 800dc9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dca0:	f7f2 ff4e 	bl	8000b40 <__aeabi_dcmple>
 800dca4:	bb30      	cbnz	r0, 800dcf4 <_printf_float+0xc4>
 800dca6:	2200      	movs	r2, #0
 800dca8:	2300      	movs	r3, #0
 800dcaa:	4640      	mov	r0, r8
 800dcac:	4649      	mov	r1, r9
 800dcae:	f7f2 ff3d 	bl	8000b2c <__aeabi_dcmplt>
 800dcb2:	b110      	cbz	r0, 800dcba <_printf_float+0x8a>
 800dcb4:	232d      	movs	r3, #45	; 0x2d
 800dcb6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dcba:	4a9c      	ldr	r2, [pc, #624]	; (800df2c <_printf_float+0x2fc>)
 800dcbc:	4b9c      	ldr	r3, [pc, #624]	; (800df30 <_printf_float+0x300>)
 800dcbe:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800dcc2:	bf8c      	ite	hi
 800dcc4:	4690      	movhi	r8, r2
 800dcc6:	4698      	movls	r8, r3
 800dcc8:	2303      	movs	r3, #3
 800dcca:	f02b 0204 	bic.w	r2, fp, #4
 800dcce:	6123      	str	r3, [r4, #16]
 800dcd0:	6022      	str	r2, [r4, #0]
 800dcd2:	f04f 0900 	mov.w	r9, #0
 800dcd6:	9700      	str	r7, [sp, #0]
 800dcd8:	4633      	mov	r3, r6
 800dcda:	aa0b      	add	r2, sp, #44	; 0x2c
 800dcdc:	4621      	mov	r1, r4
 800dcde:	4628      	mov	r0, r5
 800dce0:	f000 f9e6 	bl	800e0b0 <_printf_common>
 800dce4:	3001      	adds	r0, #1
 800dce6:	f040 808d 	bne.w	800de04 <_printf_float+0x1d4>
 800dcea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800dcee:	b00d      	add	sp, #52	; 0x34
 800dcf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dcf4:	4642      	mov	r2, r8
 800dcf6:	464b      	mov	r3, r9
 800dcf8:	4640      	mov	r0, r8
 800dcfa:	4649      	mov	r1, r9
 800dcfc:	f7f2 ff3e 	bl	8000b7c <__aeabi_dcmpun>
 800dd00:	b110      	cbz	r0, 800dd08 <_printf_float+0xd8>
 800dd02:	4a8c      	ldr	r2, [pc, #560]	; (800df34 <_printf_float+0x304>)
 800dd04:	4b8c      	ldr	r3, [pc, #560]	; (800df38 <_printf_float+0x308>)
 800dd06:	e7da      	b.n	800dcbe <_printf_float+0x8e>
 800dd08:	6861      	ldr	r1, [r4, #4]
 800dd0a:	1c4b      	adds	r3, r1, #1
 800dd0c:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800dd10:	a80a      	add	r0, sp, #40	; 0x28
 800dd12:	d13e      	bne.n	800dd92 <_printf_float+0x162>
 800dd14:	2306      	movs	r3, #6
 800dd16:	6063      	str	r3, [r4, #4]
 800dd18:	2300      	movs	r3, #0
 800dd1a:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800dd1e:	ab09      	add	r3, sp, #36	; 0x24
 800dd20:	9300      	str	r3, [sp, #0]
 800dd22:	ec49 8b10 	vmov	d0, r8, r9
 800dd26:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800dd2a:	6022      	str	r2, [r4, #0]
 800dd2c:	f8cd a004 	str.w	sl, [sp, #4]
 800dd30:	6861      	ldr	r1, [r4, #4]
 800dd32:	4628      	mov	r0, r5
 800dd34:	f7ff fee8 	bl	800db08 <__cvt>
 800dd38:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 800dd3c:	2b47      	cmp	r3, #71	; 0x47
 800dd3e:	4680      	mov	r8, r0
 800dd40:	d109      	bne.n	800dd56 <_printf_float+0x126>
 800dd42:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd44:	1cd8      	adds	r0, r3, #3
 800dd46:	db02      	blt.n	800dd4e <_printf_float+0x11e>
 800dd48:	6862      	ldr	r2, [r4, #4]
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	dd47      	ble.n	800ddde <_printf_float+0x1ae>
 800dd4e:	f1aa 0a02 	sub.w	sl, sl, #2
 800dd52:	fa5f fa8a 	uxtb.w	sl, sl
 800dd56:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800dd5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800dd5c:	d824      	bhi.n	800dda8 <_printf_float+0x178>
 800dd5e:	3901      	subs	r1, #1
 800dd60:	4652      	mov	r2, sl
 800dd62:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800dd66:	9109      	str	r1, [sp, #36]	; 0x24
 800dd68:	f7ff ff2f 	bl	800dbca <__exponent>
 800dd6c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dd6e:	1813      	adds	r3, r2, r0
 800dd70:	2a01      	cmp	r2, #1
 800dd72:	4681      	mov	r9, r0
 800dd74:	6123      	str	r3, [r4, #16]
 800dd76:	dc02      	bgt.n	800dd7e <_printf_float+0x14e>
 800dd78:	6822      	ldr	r2, [r4, #0]
 800dd7a:	07d1      	lsls	r1, r2, #31
 800dd7c:	d501      	bpl.n	800dd82 <_printf_float+0x152>
 800dd7e:	3301      	adds	r3, #1
 800dd80:	6123      	str	r3, [r4, #16]
 800dd82:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800dd86:	2b00      	cmp	r3, #0
 800dd88:	d0a5      	beq.n	800dcd6 <_printf_float+0xa6>
 800dd8a:	232d      	movs	r3, #45	; 0x2d
 800dd8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800dd90:	e7a1      	b.n	800dcd6 <_printf_float+0xa6>
 800dd92:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800dd96:	f000 8177 	beq.w	800e088 <_printf_float+0x458>
 800dd9a:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 800dd9e:	d1bb      	bne.n	800dd18 <_printf_float+0xe8>
 800dda0:	2900      	cmp	r1, #0
 800dda2:	d1b9      	bne.n	800dd18 <_printf_float+0xe8>
 800dda4:	2301      	movs	r3, #1
 800dda6:	e7b6      	b.n	800dd16 <_printf_float+0xe6>
 800dda8:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 800ddac:	d119      	bne.n	800dde2 <_printf_float+0x1b2>
 800ddae:	2900      	cmp	r1, #0
 800ddb0:	6863      	ldr	r3, [r4, #4]
 800ddb2:	dd0c      	ble.n	800ddce <_printf_float+0x19e>
 800ddb4:	6121      	str	r1, [r4, #16]
 800ddb6:	b913      	cbnz	r3, 800ddbe <_printf_float+0x18e>
 800ddb8:	6822      	ldr	r2, [r4, #0]
 800ddba:	07d2      	lsls	r2, r2, #31
 800ddbc:	d502      	bpl.n	800ddc4 <_printf_float+0x194>
 800ddbe:	3301      	adds	r3, #1
 800ddc0:	440b      	add	r3, r1
 800ddc2:	6123      	str	r3, [r4, #16]
 800ddc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ddc6:	65a3      	str	r3, [r4, #88]	; 0x58
 800ddc8:	f04f 0900 	mov.w	r9, #0
 800ddcc:	e7d9      	b.n	800dd82 <_printf_float+0x152>
 800ddce:	b913      	cbnz	r3, 800ddd6 <_printf_float+0x1a6>
 800ddd0:	6822      	ldr	r2, [r4, #0]
 800ddd2:	07d0      	lsls	r0, r2, #31
 800ddd4:	d501      	bpl.n	800ddda <_printf_float+0x1aa>
 800ddd6:	3302      	adds	r3, #2
 800ddd8:	e7f3      	b.n	800ddc2 <_printf_float+0x192>
 800ddda:	2301      	movs	r3, #1
 800dddc:	e7f1      	b.n	800ddc2 <_printf_float+0x192>
 800ddde:	f04f 0a67 	mov.w	sl, #103	; 0x67
 800dde2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800dde6:	4293      	cmp	r3, r2
 800dde8:	db05      	blt.n	800ddf6 <_printf_float+0x1c6>
 800ddea:	6822      	ldr	r2, [r4, #0]
 800ddec:	6123      	str	r3, [r4, #16]
 800ddee:	07d1      	lsls	r1, r2, #31
 800ddf0:	d5e8      	bpl.n	800ddc4 <_printf_float+0x194>
 800ddf2:	3301      	adds	r3, #1
 800ddf4:	e7e5      	b.n	800ddc2 <_printf_float+0x192>
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	bfd4      	ite	le
 800ddfa:	f1c3 0302 	rsble	r3, r3, #2
 800ddfe:	2301      	movgt	r3, #1
 800de00:	4413      	add	r3, r2
 800de02:	e7de      	b.n	800ddc2 <_printf_float+0x192>
 800de04:	6823      	ldr	r3, [r4, #0]
 800de06:	055a      	lsls	r2, r3, #21
 800de08:	d407      	bmi.n	800de1a <_printf_float+0x1ea>
 800de0a:	6923      	ldr	r3, [r4, #16]
 800de0c:	4642      	mov	r2, r8
 800de0e:	4631      	mov	r1, r6
 800de10:	4628      	mov	r0, r5
 800de12:	47b8      	blx	r7
 800de14:	3001      	adds	r0, #1
 800de16:	d12b      	bne.n	800de70 <_printf_float+0x240>
 800de18:	e767      	b.n	800dcea <_printf_float+0xba>
 800de1a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800de1e:	f240 80dc 	bls.w	800dfda <_printf_float+0x3aa>
 800de22:	2200      	movs	r2, #0
 800de24:	2300      	movs	r3, #0
 800de26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800de2a:	f7f2 fe75 	bl	8000b18 <__aeabi_dcmpeq>
 800de2e:	2800      	cmp	r0, #0
 800de30:	d033      	beq.n	800de9a <_printf_float+0x26a>
 800de32:	2301      	movs	r3, #1
 800de34:	4a41      	ldr	r2, [pc, #260]	; (800df3c <_printf_float+0x30c>)
 800de36:	4631      	mov	r1, r6
 800de38:	4628      	mov	r0, r5
 800de3a:	47b8      	blx	r7
 800de3c:	3001      	adds	r0, #1
 800de3e:	f43f af54 	beq.w	800dcea <_printf_float+0xba>
 800de42:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800de46:	429a      	cmp	r2, r3
 800de48:	db02      	blt.n	800de50 <_printf_float+0x220>
 800de4a:	6823      	ldr	r3, [r4, #0]
 800de4c:	07d8      	lsls	r0, r3, #31
 800de4e:	d50f      	bpl.n	800de70 <_printf_float+0x240>
 800de50:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800de54:	4631      	mov	r1, r6
 800de56:	4628      	mov	r0, r5
 800de58:	47b8      	blx	r7
 800de5a:	3001      	adds	r0, #1
 800de5c:	f43f af45 	beq.w	800dcea <_printf_float+0xba>
 800de60:	f04f 0800 	mov.w	r8, #0
 800de64:	f104 091a 	add.w	r9, r4, #26
 800de68:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800de6a:	3b01      	subs	r3, #1
 800de6c:	4543      	cmp	r3, r8
 800de6e:	dc09      	bgt.n	800de84 <_printf_float+0x254>
 800de70:	6823      	ldr	r3, [r4, #0]
 800de72:	079b      	lsls	r3, r3, #30
 800de74:	f100 8103 	bmi.w	800e07e <_printf_float+0x44e>
 800de78:	68e0      	ldr	r0, [r4, #12]
 800de7a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de7c:	4298      	cmp	r0, r3
 800de7e:	bfb8      	it	lt
 800de80:	4618      	movlt	r0, r3
 800de82:	e734      	b.n	800dcee <_printf_float+0xbe>
 800de84:	2301      	movs	r3, #1
 800de86:	464a      	mov	r2, r9
 800de88:	4631      	mov	r1, r6
 800de8a:	4628      	mov	r0, r5
 800de8c:	47b8      	blx	r7
 800de8e:	3001      	adds	r0, #1
 800de90:	f43f af2b 	beq.w	800dcea <_printf_float+0xba>
 800de94:	f108 0801 	add.w	r8, r8, #1
 800de98:	e7e6      	b.n	800de68 <_printf_float+0x238>
 800de9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	dc2b      	bgt.n	800def8 <_printf_float+0x2c8>
 800dea0:	2301      	movs	r3, #1
 800dea2:	4a26      	ldr	r2, [pc, #152]	; (800df3c <_printf_float+0x30c>)
 800dea4:	4631      	mov	r1, r6
 800dea6:	4628      	mov	r0, r5
 800dea8:	47b8      	blx	r7
 800deaa:	3001      	adds	r0, #1
 800deac:	f43f af1d 	beq.w	800dcea <_printf_float+0xba>
 800deb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deb2:	b923      	cbnz	r3, 800debe <_printf_float+0x28e>
 800deb4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800deb6:	b913      	cbnz	r3, 800debe <_printf_float+0x28e>
 800deb8:	6823      	ldr	r3, [r4, #0]
 800deba:	07d9      	lsls	r1, r3, #31
 800debc:	d5d8      	bpl.n	800de70 <_printf_float+0x240>
 800debe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dec2:	4631      	mov	r1, r6
 800dec4:	4628      	mov	r0, r5
 800dec6:	47b8      	blx	r7
 800dec8:	3001      	adds	r0, #1
 800deca:	f43f af0e 	beq.w	800dcea <_printf_float+0xba>
 800dece:	f04f 0900 	mov.w	r9, #0
 800ded2:	f104 0a1a 	add.w	sl, r4, #26
 800ded6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ded8:	425b      	negs	r3, r3
 800deda:	454b      	cmp	r3, r9
 800dedc:	dc01      	bgt.n	800dee2 <_printf_float+0x2b2>
 800dede:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dee0:	e794      	b.n	800de0c <_printf_float+0x1dc>
 800dee2:	2301      	movs	r3, #1
 800dee4:	4652      	mov	r2, sl
 800dee6:	4631      	mov	r1, r6
 800dee8:	4628      	mov	r0, r5
 800deea:	47b8      	blx	r7
 800deec:	3001      	adds	r0, #1
 800deee:	f43f aefc 	beq.w	800dcea <_printf_float+0xba>
 800def2:	f109 0901 	add.w	r9, r9, #1
 800def6:	e7ee      	b.n	800ded6 <_printf_float+0x2a6>
 800def8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800defa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800defc:	429a      	cmp	r2, r3
 800defe:	bfa8      	it	ge
 800df00:	461a      	movge	r2, r3
 800df02:	2a00      	cmp	r2, #0
 800df04:	4691      	mov	r9, r2
 800df06:	dd07      	ble.n	800df18 <_printf_float+0x2e8>
 800df08:	4613      	mov	r3, r2
 800df0a:	4631      	mov	r1, r6
 800df0c:	4642      	mov	r2, r8
 800df0e:	4628      	mov	r0, r5
 800df10:	47b8      	blx	r7
 800df12:	3001      	adds	r0, #1
 800df14:	f43f aee9 	beq.w	800dcea <_printf_float+0xba>
 800df18:	f104 031a 	add.w	r3, r4, #26
 800df1c:	f04f 0b00 	mov.w	fp, #0
 800df20:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800df24:	9306      	str	r3, [sp, #24]
 800df26:	e015      	b.n	800df54 <_printf_float+0x324>
 800df28:	7fefffff 	.word	0x7fefffff
 800df2c:	08011124 	.word	0x08011124
 800df30:	08011120 	.word	0x08011120
 800df34:	0801112c 	.word	0x0801112c
 800df38:	08011128 	.word	0x08011128
 800df3c:	08011130 	.word	0x08011130
 800df40:	2301      	movs	r3, #1
 800df42:	9a06      	ldr	r2, [sp, #24]
 800df44:	4631      	mov	r1, r6
 800df46:	4628      	mov	r0, r5
 800df48:	47b8      	blx	r7
 800df4a:	3001      	adds	r0, #1
 800df4c:	f43f aecd 	beq.w	800dcea <_printf_float+0xba>
 800df50:	f10b 0b01 	add.w	fp, fp, #1
 800df54:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800df58:	ebaa 0309 	sub.w	r3, sl, r9
 800df5c:	455b      	cmp	r3, fp
 800df5e:	dcef      	bgt.n	800df40 <_printf_float+0x310>
 800df60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800df64:	429a      	cmp	r2, r3
 800df66:	44d0      	add	r8, sl
 800df68:	db15      	blt.n	800df96 <_printf_float+0x366>
 800df6a:	6823      	ldr	r3, [r4, #0]
 800df6c:	07da      	lsls	r2, r3, #31
 800df6e:	d412      	bmi.n	800df96 <_printf_float+0x366>
 800df70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800df72:	9909      	ldr	r1, [sp, #36]	; 0x24
 800df74:	eba3 020a 	sub.w	r2, r3, sl
 800df78:	eba3 0a01 	sub.w	sl, r3, r1
 800df7c:	4592      	cmp	sl, r2
 800df7e:	bfa8      	it	ge
 800df80:	4692      	movge	sl, r2
 800df82:	f1ba 0f00 	cmp.w	sl, #0
 800df86:	dc0e      	bgt.n	800dfa6 <_printf_float+0x376>
 800df88:	f04f 0800 	mov.w	r8, #0
 800df8c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800df90:	f104 091a 	add.w	r9, r4, #26
 800df94:	e019      	b.n	800dfca <_printf_float+0x39a>
 800df96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df9a:	4631      	mov	r1, r6
 800df9c:	4628      	mov	r0, r5
 800df9e:	47b8      	blx	r7
 800dfa0:	3001      	adds	r0, #1
 800dfa2:	d1e5      	bne.n	800df70 <_printf_float+0x340>
 800dfa4:	e6a1      	b.n	800dcea <_printf_float+0xba>
 800dfa6:	4653      	mov	r3, sl
 800dfa8:	4642      	mov	r2, r8
 800dfaa:	4631      	mov	r1, r6
 800dfac:	4628      	mov	r0, r5
 800dfae:	47b8      	blx	r7
 800dfb0:	3001      	adds	r0, #1
 800dfb2:	d1e9      	bne.n	800df88 <_printf_float+0x358>
 800dfb4:	e699      	b.n	800dcea <_printf_float+0xba>
 800dfb6:	2301      	movs	r3, #1
 800dfb8:	464a      	mov	r2, r9
 800dfba:	4631      	mov	r1, r6
 800dfbc:	4628      	mov	r0, r5
 800dfbe:	47b8      	blx	r7
 800dfc0:	3001      	adds	r0, #1
 800dfc2:	f43f ae92 	beq.w	800dcea <_printf_float+0xba>
 800dfc6:	f108 0801 	add.w	r8, r8, #1
 800dfca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800dfce:	1a9b      	subs	r3, r3, r2
 800dfd0:	eba3 030a 	sub.w	r3, r3, sl
 800dfd4:	4543      	cmp	r3, r8
 800dfd6:	dcee      	bgt.n	800dfb6 <_printf_float+0x386>
 800dfd8:	e74a      	b.n	800de70 <_printf_float+0x240>
 800dfda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dfdc:	2a01      	cmp	r2, #1
 800dfde:	dc01      	bgt.n	800dfe4 <_printf_float+0x3b4>
 800dfe0:	07db      	lsls	r3, r3, #31
 800dfe2:	d53a      	bpl.n	800e05a <_printf_float+0x42a>
 800dfe4:	2301      	movs	r3, #1
 800dfe6:	4642      	mov	r2, r8
 800dfe8:	4631      	mov	r1, r6
 800dfea:	4628      	mov	r0, r5
 800dfec:	47b8      	blx	r7
 800dfee:	3001      	adds	r0, #1
 800dff0:	f43f ae7b 	beq.w	800dcea <_printf_float+0xba>
 800dff4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dff8:	4631      	mov	r1, r6
 800dffa:	4628      	mov	r0, r5
 800dffc:	47b8      	blx	r7
 800dffe:	3001      	adds	r0, #1
 800e000:	f108 0801 	add.w	r8, r8, #1
 800e004:	f43f ae71 	beq.w	800dcea <_printf_float+0xba>
 800e008:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e00a:	2200      	movs	r2, #0
 800e00c:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800e010:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800e014:	2300      	movs	r3, #0
 800e016:	f7f2 fd7f 	bl	8000b18 <__aeabi_dcmpeq>
 800e01a:	b9c8      	cbnz	r0, 800e050 <_printf_float+0x420>
 800e01c:	4653      	mov	r3, sl
 800e01e:	4642      	mov	r2, r8
 800e020:	4631      	mov	r1, r6
 800e022:	4628      	mov	r0, r5
 800e024:	47b8      	blx	r7
 800e026:	3001      	adds	r0, #1
 800e028:	d10e      	bne.n	800e048 <_printf_float+0x418>
 800e02a:	e65e      	b.n	800dcea <_printf_float+0xba>
 800e02c:	2301      	movs	r3, #1
 800e02e:	4652      	mov	r2, sl
 800e030:	4631      	mov	r1, r6
 800e032:	4628      	mov	r0, r5
 800e034:	47b8      	blx	r7
 800e036:	3001      	adds	r0, #1
 800e038:	f43f ae57 	beq.w	800dcea <_printf_float+0xba>
 800e03c:	f108 0801 	add.w	r8, r8, #1
 800e040:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e042:	3b01      	subs	r3, #1
 800e044:	4543      	cmp	r3, r8
 800e046:	dcf1      	bgt.n	800e02c <_printf_float+0x3fc>
 800e048:	464b      	mov	r3, r9
 800e04a:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800e04e:	e6de      	b.n	800de0e <_printf_float+0x1de>
 800e050:	f04f 0800 	mov.w	r8, #0
 800e054:	f104 0a1a 	add.w	sl, r4, #26
 800e058:	e7f2      	b.n	800e040 <_printf_float+0x410>
 800e05a:	2301      	movs	r3, #1
 800e05c:	e7df      	b.n	800e01e <_printf_float+0x3ee>
 800e05e:	2301      	movs	r3, #1
 800e060:	464a      	mov	r2, r9
 800e062:	4631      	mov	r1, r6
 800e064:	4628      	mov	r0, r5
 800e066:	47b8      	blx	r7
 800e068:	3001      	adds	r0, #1
 800e06a:	f43f ae3e 	beq.w	800dcea <_printf_float+0xba>
 800e06e:	f108 0801 	add.w	r8, r8, #1
 800e072:	68e3      	ldr	r3, [r4, #12]
 800e074:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e076:	1a9b      	subs	r3, r3, r2
 800e078:	4543      	cmp	r3, r8
 800e07a:	dcf0      	bgt.n	800e05e <_printf_float+0x42e>
 800e07c:	e6fc      	b.n	800de78 <_printf_float+0x248>
 800e07e:	f04f 0800 	mov.w	r8, #0
 800e082:	f104 0919 	add.w	r9, r4, #25
 800e086:	e7f4      	b.n	800e072 <_printf_float+0x442>
 800e088:	2900      	cmp	r1, #0
 800e08a:	f43f ae8b 	beq.w	800dda4 <_printf_float+0x174>
 800e08e:	2300      	movs	r3, #0
 800e090:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800e094:	ab09      	add	r3, sp, #36	; 0x24
 800e096:	9300      	str	r3, [sp, #0]
 800e098:	ec49 8b10 	vmov	d0, r8, r9
 800e09c:	6022      	str	r2, [r4, #0]
 800e09e:	f8cd a004 	str.w	sl, [sp, #4]
 800e0a2:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800e0a6:	4628      	mov	r0, r5
 800e0a8:	f7ff fd2e 	bl	800db08 <__cvt>
 800e0ac:	4680      	mov	r8, r0
 800e0ae:	e648      	b.n	800dd42 <_printf_float+0x112>

0800e0b0 <_printf_common>:
 800e0b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0b4:	4691      	mov	r9, r2
 800e0b6:	461f      	mov	r7, r3
 800e0b8:	688a      	ldr	r2, [r1, #8]
 800e0ba:	690b      	ldr	r3, [r1, #16]
 800e0bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e0c0:	4293      	cmp	r3, r2
 800e0c2:	bfb8      	it	lt
 800e0c4:	4613      	movlt	r3, r2
 800e0c6:	f8c9 3000 	str.w	r3, [r9]
 800e0ca:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e0ce:	4606      	mov	r6, r0
 800e0d0:	460c      	mov	r4, r1
 800e0d2:	b112      	cbz	r2, 800e0da <_printf_common+0x2a>
 800e0d4:	3301      	adds	r3, #1
 800e0d6:	f8c9 3000 	str.w	r3, [r9]
 800e0da:	6823      	ldr	r3, [r4, #0]
 800e0dc:	0699      	lsls	r1, r3, #26
 800e0de:	bf42      	ittt	mi
 800e0e0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e0e4:	3302      	addmi	r3, #2
 800e0e6:	f8c9 3000 	strmi.w	r3, [r9]
 800e0ea:	6825      	ldr	r5, [r4, #0]
 800e0ec:	f015 0506 	ands.w	r5, r5, #6
 800e0f0:	d107      	bne.n	800e102 <_printf_common+0x52>
 800e0f2:	f104 0a19 	add.w	sl, r4, #25
 800e0f6:	68e3      	ldr	r3, [r4, #12]
 800e0f8:	f8d9 2000 	ldr.w	r2, [r9]
 800e0fc:	1a9b      	subs	r3, r3, r2
 800e0fe:	42ab      	cmp	r3, r5
 800e100:	dc28      	bgt.n	800e154 <_printf_common+0xa4>
 800e102:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e106:	6822      	ldr	r2, [r4, #0]
 800e108:	3300      	adds	r3, #0
 800e10a:	bf18      	it	ne
 800e10c:	2301      	movne	r3, #1
 800e10e:	0692      	lsls	r2, r2, #26
 800e110:	d42d      	bmi.n	800e16e <_printf_common+0xbe>
 800e112:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e116:	4639      	mov	r1, r7
 800e118:	4630      	mov	r0, r6
 800e11a:	47c0      	blx	r8
 800e11c:	3001      	adds	r0, #1
 800e11e:	d020      	beq.n	800e162 <_printf_common+0xb2>
 800e120:	6823      	ldr	r3, [r4, #0]
 800e122:	68e5      	ldr	r5, [r4, #12]
 800e124:	f8d9 2000 	ldr.w	r2, [r9]
 800e128:	f003 0306 	and.w	r3, r3, #6
 800e12c:	2b04      	cmp	r3, #4
 800e12e:	bf08      	it	eq
 800e130:	1aad      	subeq	r5, r5, r2
 800e132:	68a3      	ldr	r3, [r4, #8]
 800e134:	6922      	ldr	r2, [r4, #16]
 800e136:	bf0c      	ite	eq
 800e138:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e13c:	2500      	movne	r5, #0
 800e13e:	4293      	cmp	r3, r2
 800e140:	bfc4      	itt	gt
 800e142:	1a9b      	subgt	r3, r3, r2
 800e144:	18ed      	addgt	r5, r5, r3
 800e146:	f04f 0900 	mov.w	r9, #0
 800e14a:	341a      	adds	r4, #26
 800e14c:	454d      	cmp	r5, r9
 800e14e:	d11a      	bne.n	800e186 <_printf_common+0xd6>
 800e150:	2000      	movs	r0, #0
 800e152:	e008      	b.n	800e166 <_printf_common+0xb6>
 800e154:	2301      	movs	r3, #1
 800e156:	4652      	mov	r2, sl
 800e158:	4639      	mov	r1, r7
 800e15a:	4630      	mov	r0, r6
 800e15c:	47c0      	blx	r8
 800e15e:	3001      	adds	r0, #1
 800e160:	d103      	bne.n	800e16a <_printf_common+0xba>
 800e162:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e166:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e16a:	3501      	adds	r5, #1
 800e16c:	e7c3      	b.n	800e0f6 <_printf_common+0x46>
 800e16e:	18e1      	adds	r1, r4, r3
 800e170:	1c5a      	adds	r2, r3, #1
 800e172:	2030      	movs	r0, #48	; 0x30
 800e174:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e178:	4422      	add	r2, r4
 800e17a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e17e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e182:	3302      	adds	r3, #2
 800e184:	e7c5      	b.n	800e112 <_printf_common+0x62>
 800e186:	2301      	movs	r3, #1
 800e188:	4622      	mov	r2, r4
 800e18a:	4639      	mov	r1, r7
 800e18c:	4630      	mov	r0, r6
 800e18e:	47c0      	blx	r8
 800e190:	3001      	adds	r0, #1
 800e192:	d0e6      	beq.n	800e162 <_printf_common+0xb2>
 800e194:	f109 0901 	add.w	r9, r9, #1
 800e198:	e7d8      	b.n	800e14c <_printf_common+0x9c>
	...

0800e19c <_printf_i>:
 800e19c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e1a0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e1a4:	460c      	mov	r4, r1
 800e1a6:	7e09      	ldrb	r1, [r1, #24]
 800e1a8:	b085      	sub	sp, #20
 800e1aa:	296e      	cmp	r1, #110	; 0x6e
 800e1ac:	4617      	mov	r7, r2
 800e1ae:	4606      	mov	r6, r0
 800e1b0:	4698      	mov	r8, r3
 800e1b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e1b4:	f000 80b3 	beq.w	800e31e <_printf_i+0x182>
 800e1b8:	d822      	bhi.n	800e200 <_printf_i+0x64>
 800e1ba:	2963      	cmp	r1, #99	; 0x63
 800e1bc:	d036      	beq.n	800e22c <_printf_i+0x90>
 800e1be:	d80a      	bhi.n	800e1d6 <_printf_i+0x3a>
 800e1c0:	2900      	cmp	r1, #0
 800e1c2:	f000 80b9 	beq.w	800e338 <_printf_i+0x19c>
 800e1c6:	2958      	cmp	r1, #88	; 0x58
 800e1c8:	f000 8083 	beq.w	800e2d2 <_printf_i+0x136>
 800e1cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e1d0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e1d4:	e032      	b.n	800e23c <_printf_i+0xa0>
 800e1d6:	2964      	cmp	r1, #100	; 0x64
 800e1d8:	d001      	beq.n	800e1de <_printf_i+0x42>
 800e1da:	2969      	cmp	r1, #105	; 0x69
 800e1dc:	d1f6      	bne.n	800e1cc <_printf_i+0x30>
 800e1de:	6820      	ldr	r0, [r4, #0]
 800e1e0:	6813      	ldr	r3, [r2, #0]
 800e1e2:	0605      	lsls	r5, r0, #24
 800e1e4:	f103 0104 	add.w	r1, r3, #4
 800e1e8:	d52a      	bpl.n	800e240 <_printf_i+0xa4>
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	6011      	str	r1, [r2, #0]
 800e1ee:	2b00      	cmp	r3, #0
 800e1f0:	da03      	bge.n	800e1fa <_printf_i+0x5e>
 800e1f2:	222d      	movs	r2, #45	; 0x2d
 800e1f4:	425b      	negs	r3, r3
 800e1f6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e1fa:	486f      	ldr	r0, [pc, #444]	; (800e3b8 <_printf_i+0x21c>)
 800e1fc:	220a      	movs	r2, #10
 800e1fe:	e039      	b.n	800e274 <_printf_i+0xd8>
 800e200:	2973      	cmp	r1, #115	; 0x73
 800e202:	f000 809d 	beq.w	800e340 <_printf_i+0x1a4>
 800e206:	d808      	bhi.n	800e21a <_printf_i+0x7e>
 800e208:	296f      	cmp	r1, #111	; 0x6f
 800e20a:	d020      	beq.n	800e24e <_printf_i+0xb2>
 800e20c:	2970      	cmp	r1, #112	; 0x70
 800e20e:	d1dd      	bne.n	800e1cc <_printf_i+0x30>
 800e210:	6823      	ldr	r3, [r4, #0]
 800e212:	f043 0320 	orr.w	r3, r3, #32
 800e216:	6023      	str	r3, [r4, #0]
 800e218:	e003      	b.n	800e222 <_printf_i+0x86>
 800e21a:	2975      	cmp	r1, #117	; 0x75
 800e21c:	d017      	beq.n	800e24e <_printf_i+0xb2>
 800e21e:	2978      	cmp	r1, #120	; 0x78
 800e220:	d1d4      	bne.n	800e1cc <_printf_i+0x30>
 800e222:	2378      	movs	r3, #120	; 0x78
 800e224:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e228:	4864      	ldr	r0, [pc, #400]	; (800e3bc <_printf_i+0x220>)
 800e22a:	e055      	b.n	800e2d8 <_printf_i+0x13c>
 800e22c:	6813      	ldr	r3, [r2, #0]
 800e22e:	1d19      	adds	r1, r3, #4
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	6011      	str	r1, [r2, #0]
 800e234:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e238:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e23c:	2301      	movs	r3, #1
 800e23e:	e08c      	b.n	800e35a <_printf_i+0x1be>
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	6011      	str	r1, [r2, #0]
 800e244:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e248:	bf18      	it	ne
 800e24a:	b21b      	sxthne	r3, r3
 800e24c:	e7cf      	b.n	800e1ee <_printf_i+0x52>
 800e24e:	6813      	ldr	r3, [r2, #0]
 800e250:	6825      	ldr	r5, [r4, #0]
 800e252:	1d18      	adds	r0, r3, #4
 800e254:	6010      	str	r0, [r2, #0]
 800e256:	0628      	lsls	r0, r5, #24
 800e258:	d501      	bpl.n	800e25e <_printf_i+0xc2>
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	e002      	b.n	800e264 <_printf_i+0xc8>
 800e25e:	0668      	lsls	r0, r5, #25
 800e260:	d5fb      	bpl.n	800e25a <_printf_i+0xbe>
 800e262:	881b      	ldrh	r3, [r3, #0]
 800e264:	4854      	ldr	r0, [pc, #336]	; (800e3b8 <_printf_i+0x21c>)
 800e266:	296f      	cmp	r1, #111	; 0x6f
 800e268:	bf14      	ite	ne
 800e26a:	220a      	movne	r2, #10
 800e26c:	2208      	moveq	r2, #8
 800e26e:	2100      	movs	r1, #0
 800e270:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e274:	6865      	ldr	r5, [r4, #4]
 800e276:	60a5      	str	r5, [r4, #8]
 800e278:	2d00      	cmp	r5, #0
 800e27a:	f2c0 8095 	blt.w	800e3a8 <_printf_i+0x20c>
 800e27e:	6821      	ldr	r1, [r4, #0]
 800e280:	f021 0104 	bic.w	r1, r1, #4
 800e284:	6021      	str	r1, [r4, #0]
 800e286:	2b00      	cmp	r3, #0
 800e288:	d13d      	bne.n	800e306 <_printf_i+0x16a>
 800e28a:	2d00      	cmp	r5, #0
 800e28c:	f040 808e 	bne.w	800e3ac <_printf_i+0x210>
 800e290:	4665      	mov	r5, ip
 800e292:	2a08      	cmp	r2, #8
 800e294:	d10b      	bne.n	800e2ae <_printf_i+0x112>
 800e296:	6823      	ldr	r3, [r4, #0]
 800e298:	07db      	lsls	r3, r3, #31
 800e29a:	d508      	bpl.n	800e2ae <_printf_i+0x112>
 800e29c:	6923      	ldr	r3, [r4, #16]
 800e29e:	6862      	ldr	r2, [r4, #4]
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	bfde      	ittt	le
 800e2a4:	2330      	movle	r3, #48	; 0x30
 800e2a6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e2aa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800e2ae:	ebac 0305 	sub.w	r3, ip, r5
 800e2b2:	6123      	str	r3, [r4, #16]
 800e2b4:	f8cd 8000 	str.w	r8, [sp]
 800e2b8:	463b      	mov	r3, r7
 800e2ba:	aa03      	add	r2, sp, #12
 800e2bc:	4621      	mov	r1, r4
 800e2be:	4630      	mov	r0, r6
 800e2c0:	f7ff fef6 	bl	800e0b0 <_printf_common>
 800e2c4:	3001      	adds	r0, #1
 800e2c6:	d14d      	bne.n	800e364 <_printf_i+0x1c8>
 800e2c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e2cc:	b005      	add	sp, #20
 800e2ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e2d2:	4839      	ldr	r0, [pc, #228]	; (800e3b8 <_printf_i+0x21c>)
 800e2d4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e2d8:	6813      	ldr	r3, [r2, #0]
 800e2da:	6821      	ldr	r1, [r4, #0]
 800e2dc:	1d1d      	adds	r5, r3, #4
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	6015      	str	r5, [r2, #0]
 800e2e2:	060a      	lsls	r2, r1, #24
 800e2e4:	d50b      	bpl.n	800e2fe <_printf_i+0x162>
 800e2e6:	07ca      	lsls	r2, r1, #31
 800e2e8:	bf44      	itt	mi
 800e2ea:	f041 0120 	orrmi.w	r1, r1, #32
 800e2ee:	6021      	strmi	r1, [r4, #0]
 800e2f0:	b91b      	cbnz	r3, 800e2fa <_printf_i+0x15e>
 800e2f2:	6822      	ldr	r2, [r4, #0]
 800e2f4:	f022 0220 	bic.w	r2, r2, #32
 800e2f8:	6022      	str	r2, [r4, #0]
 800e2fa:	2210      	movs	r2, #16
 800e2fc:	e7b7      	b.n	800e26e <_printf_i+0xd2>
 800e2fe:	064d      	lsls	r5, r1, #25
 800e300:	bf48      	it	mi
 800e302:	b29b      	uxthmi	r3, r3
 800e304:	e7ef      	b.n	800e2e6 <_printf_i+0x14a>
 800e306:	4665      	mov	r5, ip
 800e308:	fbb3 f1f2 	udiv	r1, r3, r2
 800e30c:	fb02 3311 	mls	r3, r2, r1, r3
 800e310:	5cc3      	ldrb	r3, [r0, r3]
 800e312:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e316:	460b      	mov	r3, r1
 800e318:	2900      	cmp	r1, #0
 800e31a:	d1f5      	bne.n	800e308 <_printf_i+0x16c>
 800e31c:	e7b9      	b.n	800e292 <_printf_i+0xf6>
 800e31e:	6813      	ldr	r3, [r2, #0]
 800e320:	6825      	ldr	r5, [r4, #0]
 800e322:	6961      	ldr	r1, [r4, #20]
 800e324:	1d18      	adds	r0, r3, #4
 800e326:	6010      	str	r0, [r2, #0]
 800e328:	0628      	lsls	r0, r5, #24
 800e32a:	681b      	ldr	r3, [r3, #0]
 800e32c:	d501      	bpl.n	800e332 <_printf_i+0x196>
 800e32e:	6019      	str	r1, [r3, #0]
 800e330:	e002      	b.n	800e338 <_printf_i+0x19c>
 800e332:	066a      	lsls	r2, r5, #25
 800e334:	d5fb      	bpl.n	800e32e <_printf_i+0x192>
 800e336:	8019      	strh	r1, [r3, #0]
 800e338:	2300      	movs	r3, #0
 800e33a:	6123      	str	r3, [r4, #16]
 800e33c:	4665      	mov	r5, ip
 800e33e:	e7b9      	b.n	800e2b4 <_printf_i+0x118>
 800e340:	6813      	ldr	r3, [r2, #0]
 800e342:	1d19      	adds	r1, r3, #4
 800e344:	6011      	str	r1, [r2, #0]
 800e346:	681d      	ldr	r5, [r3, #0]
 800e348:	6862      	ldr	r2, [r4, #4]
 800e34a:	2100      	movs	r1, #0
 800e34c:	4628      	mov	r0, r5
 800e34e:	f7f1 ff6f 	bl	8000230 <memchr>
 800e352:	b108      	cbz	r0, 800e358 <_printf_i+0x1bc>
 800e354:	1b40      	subs	r0, r0, r5
 800e356:	6060      	str	r0, [r4, #4]
 800e358:	6863      	ldr	r3, [r4, #4]
 800e35a:	6123      	str	r3, [r4, #16]
 800e35c:	2300      	movs	r3, #0
 800e35e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e362:	e7a7      	b.n	800e2b4 <_printf_i+0x118>
 800e364:	6923      	ldr	r3, [r4, #16]
 800e366:	462a      	mov	r2, r5
 800e368:	4639      	mov	r1, r7
 800e36a:	4630      	mov	r0, r6
 800e36c:	47c0      	blx	r8
 800e36e:	3001      	adds	r0, #1
 800e370:	d0aa      	beq.n	800e2c8 <_printf_i+0x12c>
 800e372:	6823      	ldr	r3, [r4, #0]
 800e374:	079b      	lsls	r3, r3, #30
 800e376:	d413      	bmi.n	800e3a0 <_printf_i+0x204>
 800e378:	68e0      	ldr	r0, [r4, #12]
 800e37a:	9b03      	ldr	r3, [sp, #12]
 800e37c:	4298      	cmp	r0, r3
 800e37e:	bfb8      	it	lt
 800e380:	4618      	movlt	r0, r3
 800e382:	e7a3      	b.n	800e2cc <_printf_i+0x130>
 800e384:	2301      	movs	r3, #1
 800e386:	464a      	mov	r2, r9
 800e388:	4639      	mov	r1, r7
 800e38a:	4630      	mov	r0, r6
 800e38c:	47c0      	blx	r8
 800e38e:	3001      	adds	r0, #1
 800e390:	d09a      	beq.n	800e2c8 <_printf_i+0x12c>
 800e392:	3501      	adds	r5, #1
 800e394:	68e3      	ldr	r3, [r4, #12]
 800e396:	9a03      	ldr	r2, [sp, #12]
 800e398:	1a9b      	subs	r3, r3, r2
 800e39a:	42ab      	cmp	r3, r5
 800e39c:	dcf2      	bgt.n	800e384 <_printf_i+0x1e8>
 800e39e:	e7eb      	b.n	800e378 <_printf_i+0x1dc>
 800e3a0:	2500      	movs	r5, #0
 800e3a2:	f104 0919 	add.w	r9, r4, #25
 800e3a6:	e7f5      	b.n	800e394 <_printf_i+0x1f8>
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d1ac      	bne.n	800e306 <_printf_i+0x16a>
 800e3ac:	7803      	ldrb	r3, [r0, #0]
 800e3ae:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e3b2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e3b6:	e76c      	b.n	800e292 <_printf_i+0xf6>
 800e3b8:	08011132 	.word	0x08011132
 800e3bc:	08011143 	.word	0x08011143

0800e3c0 <_puts_r>:
 800e3c0:	b570      	push	{r4, r5, r6, lr}
 800e3c2:	460e      	mov	r6, r1
 800e3c4:	4605      	mov	r5, r0
 800e3c6:	b118      	cbz	r0, 800e3d0 <_puts_r+0x10>
 800e3c8:	6983      	ldr	r3, [r0, #24]
 800e3ca:	b90b      	cbnz	r3, 800e3d0 <_puts_r+0x10>
 800e3cc:	f001 f894 	bl	800f4f8 <__sinit>
 800e3d0:	69ab      	ldr	r3, [r5, #24]
 800e3d2:	68ac      	ldr	r4, [r5, #8]
 800e3d4:	b913      	cbnz	r3, 800e3dc <_puts_r+0x1c>
 800e3d6:	4628      	mov	r0, r5
 800e3d8:	f001 f88e 	bl	800f4f8 <__sinit>
 800e3dc:	4b23      	ldr	r3, [pc, #140]	; (800e46c <_puts_r+0xac>)
 800e3de:	429c      	cmp	r4, r3
 800e3e0:	d117      	bne.n	800e412 <_puts_r+0x52>
 800e3e2:	686c      	ldr	r4, [r5, #4]
 800e3e4:	89a3      	ldrh	r3, [r4, #12]
 800e3e6:	071b      	lsls	r3, r3, #28
 800e3e8:	d51d      	bpl.n	800e426 <_puts_r+0x66>
 800e3ea:	6923      	ldr	r3, [r4, #16]
 800e3ec:	b1db      	cbz	r3, 800e426 <_puts_r+0x66>
 800e3ee:	3e01      	subs	r6, #1
 800e3f0:	68a3      	ldr	r3, [r4, #8]
 800e3f2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e3f6:	3b01      	subs	r3, #1
 800e3f8:	60a3      	str	r3, [r4, #8]
 800e3fa:	b9e9      	cbnz	r1, 800e438 <_puts_r+0x78>
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	da2e      	bge.n	800e45e <_puts_r+0x9e>
 800e400:	4622      	mov	r2, r4
 800e402:	210a      	movs	r1, #10
 800e404:	4628      	mov	r0, r5
 800e406:	f000 f883 	bl	800e510 <__swbuf_r>
 800e40a:	3001      	adds	r0, #1
 800e40c:	d011      	beq.n	800e432 <_puts_r+0x72>
 800e40e:	200a      	movs	r0, #10
 800e410:	e011      	b.n	800e436 <_puts_r+0x76>
 800e412:	4b17      	ldr	r3, [pc, #92]	; (800e470 <_puts_r+0xb0>)
 800e414:	429c      	cmp	r4, r3
 800e416:	d101      	bne.n	800e41c <_puts_r+0x5c>
 800e418:	68ac      	ldr	r4, [r5, #8]
 800e41a:	e7e3      	b.n	800e3e4 <_puts_r+0x24>
 800e41c:	4b15      	ldr	r3, [pc, #84]	; (800e474 <_puts_r+0xb4>)
 800e41e:	429c      	cmp	r4, r3
 800e420:	bf08      	it	eq
 800e422:	68ec      	ldreq	r4, [r5, #12]
 800e424:	e7de      	b.n	800e3e4 <_puts_r+0x24>
 800e426:	4621      	mov	r1, r4
 800e428:	4628      	mov	r0, r5
 800e42a:	f000 f8c3 	bl	800e5b4 <__swsetup_r>
 800e42e:	2800      	cmp	r0, #0
 800e430:	d0dd      	beq.n	800e3ee <_puts_r+0x2e>
 800e432:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e436:	bd70      	pop	{r4, r5, r6, pc}
 800e438:	2b00      	cmp	r3, #0
 800e43a:	da04      	bge.n	800e446 <_puts_r+0x86>
 800e43c:	69a2      	ldr	r2, [r4, #24]
 800e43e:	429a      	cmp	r2, r3
 800e440:	dc06      	bgt.n	800e450 <_puts_r+0x90>
 800e442:	290a      	cmp	r1, #10
 800e444:	d004      	beq.n	800e450 <_puts_r+0x90>
 800e446:	6823      	ldr	r3, [r4, #0]
 800e448:	1c5a      	adds	r2, r3, #1
 800e44a:	6022      	str	r2, [r4, #0]
 800e44c:	7019      	strb	r1, [r3, #0]
 800e44e:	e7cf      	b.n	800e3f0 <_puts_r+0x30>
 800e450:	4622      	mov	r2, r4
 800e452:	4628      	mov	r0, r5
 800e454:	f000 f85c 	bl	800e510 <__swbuf_r>
 800e458:	3001      	adds	r0, #1
 800e45a:	d1c9      	bne.n	800e3f0 <_puts_r+0x30>
 800e45c:	e7e9      	b.n	800e432 <_puts_r+0x72>
 800e45e:	6823      	ldr	r3, [r4, #0]
 800e460:	200a      	movs	r0, #10
 800e462:	1c5a      	adds	r2, r3, #1
 800e464:	6022      	str	r2, [r4, #0]
 800e466:	7018      	strb	r0, [r3, #0]
 800e468:	e7e5      	b.n	800e436 <_puts_r+0x76>
 800e46a:	bf00      	nop
 800e46c:	08011184 	.word	0x08011184
 800e470:	080111a4 	.word	0x080111a4
 800e474:	08011164 	.word	0x08011164

0800e478 <puts>:
 800e478:	4b02      	ldr	r3, [pc, #8]	; (800e484 <puts+0xc>)
 800e47a:	4601      	mov	r1, r0
 800e47c:	6818      	ldr	r0, [r3, #0]
 800e47e:	f7ff bf9f 	b.w	800e3c0 <_puts_r>
 800e482:	bf00      	nop
 800e484:	20001cf8 	.word	0x20001cf8

0800e488 <sniprintf>:
 800e488:	b40c      	push	{r2, r3}
 800e48a:	b530      	push	{r4, r5, lr}
 800e48c:	4b17      	ldr	r3, [pc, #92]	; (800e4ec <sniprintf+0x64>)
 800e48e:	1e0c      	subs	r4, r1, #0
 800e490:	b09d      	sub	sp, #116	; 0x74
 800e492:	681d      	ldr	r5, [r3, #0]
 800e494:	da08      	bge.n	800e4a8 <sniprintf+0x20>
 800e496:	238b      	movs	r3, #139	; 0x8b
 800e498:	602b      	str	r3, [r5, #0]
 800e49a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e49e:	b01d      	add	sp, #116	; 0x74
 800e4a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e4a4:	b002      	add	sp, #8
 800e4a6:	4770      	bx	lr
 800e4a8:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e4ac:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e4b0:	bf14      	ite	ne
 800e4b2:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 800e4b6:	4623      	moveq	r3, r4
 800e4b8:	9304      	str	r3, [sp, #16]
 800e4ba:	9307      	str	r3, [sp, #28]
 800e4bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e4c0:	9002      	str	r0, [sp, #8]
 800e4c2:	9006      	str	r0, [sp, #24]
 800e4c4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e4c8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e4ca:	ab21      	add	r3, sp, #132	; 0x84
 800e4cc:	a902      	add	r1, sp, #8
 800e4ce:	4628      	mov	r0, r5
 800e4d0:	9301      	str	r3, [sp, #4]
 800e4d2:	f001 fd0b 	bl	800feec <_svfiprintf_r>
 800e4d6:	1c43      	adds	r3, r0, #1
 800e4d8:	bfbc      	itt	lt
 800e4da:	238b      	movlt	r3, #139	; 0x8b
 800e4dc:	602b      	strlt	r3, [r5, #0]
 800e4de:	2c00      	cmp	r4, #0
 800e4e0:	d0dd      	beq.n	800e49e <sniprintf+0x16>
 800e4e2:	9b02      	ldr	r3, [sp, #8]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	701a      	strb	r2, [r3, #0]
 800e4e8:	e7d9      	b.n	800e49e <sniprintf+0x16>
 800e4ea:	bf00      	nop
 800e4ec:	20001cf8 	.word	0x20001cf8

0800e4f0 <strcat>:
 800e4f0:	b510      	push	{r4, lr}
 800e4f2:	4603      	mov	r3, r0
 800e4f4:	781a      	ldrb	r2, [r3, #0]
 800e4f6:	1c5c      	adds	r4, r3, #1
 800e4f8:	b93a      	cbnz	r2, 800e50a <strcat+0x1a>
 800e4fa:	3b01      	subs	r3, #1
 800e4fc:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e500:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e504:	2a00      	cmp	r2, #0
 800e506:	d1f9      	bne.n	800e4fc <strcat+0xc>
 800e508:	bd10      	pop	{r4, pc}
 800e50a:	4623      	mov	r3, r4
 800e50c:	e7f2      	b.n	800e4f4 <strcat+0x4>
	...

0800e510 <__swbuf_r>:
 800e510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e512:	460e      	mov	r6, r1
 800e514:	4614      	mov	r4, r2
 800e516:	4605      	mov	r5, r0
 800e518:	b118      	cbz	r0, 800e522 <__swbuf_r+0x12>
 800e51a:	6983      	ldr	r3, [r0, #24]
 800e51c:	b90b      	cbnz	r3, 800e522 <__swbuf_r+0x12>
 800e51e:	f000 ffeb 	bl	800f4f8 <__sinit>
 800e522:	4b21      	ldr	r3, [pc, #132]	; (800e5a8 <__swbuf_r+0x98>)
 800e524:	429c      	cmp	r4, r3
 800e526:	d12a      	bne.n	800e57e <__swbuf_r+0x6e>
 800e528:	686c      	ldr	r4, [r5, #4]
 800e52a:	69a3      	ldr	r3, [r4, #24]
 800e52c:	60a3      	str	r3, [r4, #8]
 800e52e:	89a3      	ldrh	r3, [r4, #12]
 800e530:	071a      	lsls	r2, r3, #28
 800e532:	d52e      	bpl.n	800e592 <__swbuf_r+0x82>
 800e534:	6923      	ldr	r3, [r4, #16]
 800e536:	b363      	cbz	r3, 800e592 <__swbuf_r+0x82>
 800e538:	6923      	ldr	r3, [r4, #16]
 800e53a:	6820      	ldr	r0, [r4, #0]
 800e53c:	1ac0      	subs	r0, r0, r3
 800e53e:	6963      	ldr	r3, [r4, #20]
 800e540:	b2f6      	uxtb	r6, r6
 800e542:	4283      	cmp	r3, r0
 800e544:	4637      	mov	r7, r6
 800e546:	dc04      	bgt.n	800e552 <__swbuf_r+0x42>
 800e548:	4621      	mov	r1, r4
 800e54a:	4628      	mov	r0, r5
 800e54c:	f000 ff6a 	bl	800f424 <_fflush_r>
 800e550:	bb28      	cbnz	r0, 800e59e <__swbuf_r+0x8e>
 800e552:	68a3      	ldr	r3, [r4, #8]
 800e554:	3b01      	subs	r3, #1
 800e556:	60a3      	str	r3, [r4, #8]
 800e558:	6823      	ldr	r3, [r4, #0]
 800e55a:	1c5a      	adds	r2, r3, #1
 800e55c:	6022      	str	r2, [r4, #0]
 800e55e:	701e      	strb	r6, [r3, #0]
 800e560:	6963      	ldr	r3, [r4, #20]
 800e562:	3001      	adds	r0, #1
 800e564:	4283      	cmp	r3, r0
 800e566:	d004      	beq.n	800e572 <__swbuf_r+0x62>
 800e568:	89a3      	ldrh	r3, [r4, #12]
 800e56a:	07db      	lsls	r3, r3, #31
 800e56c:	d519      	bpl.n	800e5a2 <__swbuf_r+0x92>
 800e56e:	2e0a      	cmp	r6, #10
 800e570:	d117      	bne.n	800e5a2 <__swbuf_r+0x92>
 800e572:	4621      	mov	r1, r4
 800e574:	4628      	mov	r0, r5
 800e576:	f000 ff55 	bl	800f424 <_fflush_r>
 800e57a:	b190      	cbz	r0, 800e5a2 <__swbuf_r+0x92>
 800e57c:	e00f      	b.n	800e59e <__swbuf_r+0x8e>
 800e57e:	4b0b      	ldr	r3, [pc, #44]	; (800e5ac <__swbuf_r+0x9c>)
 800e580:	429c      	cmp	r4, r3
 800e582:	d101      	bne.n	800e588 <__swbuf_r+0x78>
 800e584:	68ac      	ldr	r4, [r5, #8]
 800e586:	e7d0      	b.n	800e52a <__swbuf_r+0x1a>
 800e588:	4b09      	ldr	r3, [pc, #36]	; (800e5b0 <__swbuf_r+0xa0>)
 800e58a:	429c      	cmp	r4, r3
 800e58c:	bf08      	it	eq
 800e58e:	68ec      	ldreq	r4, [r5, #12]
 800e590:	e7cb      	b.n	800e52a <__swbuf_r+0x1a>
 800e592:	4621      	mov	r1, r4
 800e594:	4628      	mov	r0, r5
 800e596:	f000 f80d 	bl	800e5b4 <__swsetup_r>
 800e59a:	2800      	cmp	r0, #0
 800e59c:	d0cc      	beq.n	800e538 <__swbuf_r+0x28>
 800e59e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800e5a2:	4638      	mov	r0, r7
 800e5a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e5a6:	bf00      	nop
 800e5a8:	08011184 	.word	0x08011184
 800e5ac:	080111a4 	.word	0x080111a4
 800e5b0:	08011164 	.word	0x08011164

0800e5b4 <__swsetup_r>:
 800e5b4:	4b32      	ldr	r3, [pc, #200]	; (800e680 <__swsetup_r+0xcc>)
 800e5b6:	b570      	push	{r4, r5, r6, lr}
 800e5b8:	681d      	ldr	r5, [r3, #0]
 800e5ba:	4606      	mov	r6, r0
 800e5bc:	460c      	mov	r4, r1
 800e5be:	b125      	cbz	r5, 800e5ca <__swsetup_r+0x16>
 800e5c0:	69ab      	ldr	r3, [r5, #24]
 800e5c2:	b913      	cbnz	r3, 800e5ca <__swsetup_r+0x16>
 800e5c4:	4628      	mov	r0, r5
 800e5c6:	f000 ff97 	bl	800f4f8 <__sinit>
 800e5ca:	4b2e      	ldr	r3, [pc, #184]	; (800e684 <__swsetup_r+0xd0>)
 800e5cc:	429c      	cmp	r4, r3
 800e5ce:	d10f      	bne.n	800e5f0 <__swsetup_r+0x3c>
 800e5d0:	686c      	ldr	r4, [r5, #4]
 800e5d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5d6:	b29a      	uxth	r2, r3
 800e5d8:	0715      	lsls	r5, r2, #28
 800e5da:	d42c      	bmi.n	800e636 <__swsetup_r+0x82>
 800e5dc:	06d0      	lsls	r0, r2, #27
 800e5de:	d411      	bmi.n	800e604 <__swsetup_r+0x50>
 800e5e0:	2209      	movs	r2, #9
 800e5e2:	6032      	str	r2, [r6, #0]
 800e5e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e5e8:	81a3      	strh	r3, [r4, #12]
 800e5ea:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800e5ee:	e03e      	b.n	800e66e <__swsetup_r+0xba>
 800e5f0:	4b25      	ldr	r3, [pc, #148]	; (800e688 <__swsetup_r+0xd4>)
 800e5f2:	429c      	cmp	r4, r3
 800e5f4:	d101      	bne.n	800e5fa <__swsetup_r+0x46>
 800e5f6:	68ac      	ldr	r4, [r5, #8]
 800e5f8:	e7eb      	b.n	800e5d2 <__swsetup_r+0x1e>
 800e5fa:	4b24      	ldr	r3, [pc, #144]	; (800e68c <__swsetup_r+0xd8>)
 800e5fc:	429c      	cmp	r4, r3
 800e5fe:	bf08      	it	eq
 800e600:	68ec      	ldreq	r4, [r5, #12]
 800e602:	e7e6      	b.n	800e5d2 <__swsetup_r+0x1e>
 800e604:	0751      	lsls	r1, r2, #29
 800e606:	d512      	bpl.n	800e62e <__swsetup_r+0x7a>
 800e608:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e60a:	b141      	cbz	r1, 800e61e <__swsetup_r+0x6a>
 800e60c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e610:	4299      	cmp	r1, r3
 800e612:	d002      	beq.n	800e61a <__swsetup_r+0x66>
 800e614:	4630      	mov	r0, r6
 800e616:	f001 fb67 	bl	800fce8 <_free_r>
 800e61a:	2300      	movs	r3, #0
 800e61c:	6363      	str	r3, [r4, #52]	; 0x34
 800e61e:	89a3      	ldrh	r3, [r4, #12]
 800e620:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e624:	81a3      	strh	r3, [r4, #12]
 800e626:	2300      	movs	r3, #0
 800e628:	6063      	str	r3, [r4, #4]
 800e62a:	6923      	ldr	r3, [r4, #16]
 800e62c:	6023      	str	r3, [r4, #0]
 800e62e:	89a3      	ldrh	r3, [r4, #12]
 800e630:	f043 0308 	orr.w	r3, r3, #8
 800e634:	81a3      	strh	r3, [r4, #12]
 800e636:	6923      	ldr	r3, [r4, #16]
 800e638:	b94b      	cbnz	r3, 800e64e <__swsetup_r+0x9a>
 800e63a:	89a3      	ldrh	r3, [r4, #12]
 800e63c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e640:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e644:	d003      	beq.n	800e64e <__swsetup_r+0x9a>
 800e646:	4621      	mov	r1, r4
 800e648:	4630      	mov	r0, r6
 800e64a:	f001 f811 	bl	800f670 <__smakebuf_r>
 800e64e:	89a2      	ldrh	r2, [r4, #12]
 800e650:	f012 0301 	ands.w	r3, r2, #1
 800e654:	d00c      	beq.n	800e670 <__swsetup_r+0xbc>
 800e656:	2300      	movs	r3, #0
 800e658:	60a3      	str	r3, [r4, #8]
 800e65a:	6963      	ldr	r3, [r4, #20]
 800e65c:	425b      	negs	r3, r3
 800e65e:	61a3      	str	r3, [r4, #24]
 800e660:	6923      	ldr	r3, [r4, #16]
 800e662:	b953      	cbnz	r3, 800e67a <__swsetup_r+0xc6>
 800e664:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e668:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e66c:	d1ba      	bne.n	800e5e4 <__swsetup_r+0x30>
 800e66e:	bd70      	pop	{r4, r5, r6, pc}
 800e670:	0792      	lsls	r2, r2, #30
 800e672:	bf58      	it	pl
 800e674:	6963      	ldrpl	r3, [r4, #20]
 800e676:	60a3      	str	r3, [r4, #8]
 800e678:	e7f2      	b.n	800e660 <__swsetup_r+0xac>
 800e67a:	2000      	movs	r0, #0
 800e67c:	e7f7      	b.n	800e66e <__swsetup_r+0xba>
 800e67e:	bf00      	nop
 800e680:	20001cf8 	.word	0x20001cf8
 800e684:	08011184 	.word	0x08011184
 800e688:	080111a4 	.word	0x080111a4
 800e68c:	08011164 	.word	0x08011164

0800e690 <quorem>:
 800e690:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e694:	6903      	ldr	r3, [r0, #16]
 800e696:	690c      	ldr	r4, [r1, #16]
 800e698:	42a3      	cmp	r3, r4
 800e69a:	4680      	mov	r8, r0
 800e69c:	f2c0 8082 	blt.w	800e7a4 <quorem+0x114>
 800e6a0:	3c01      	subs	r4, #1
 800e6a2:	f101 0714 	add.w	r7, r1, #20
 800e6a6:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 800e6aa:	f100 0614 	add.w	r6, r0, #20
 800e6ae:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 800e6b2:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800e6b6:	eb06 030c 	add.w	r3, r6, ip
 800e6ba:	3501      	adds	r5, #1
 800e6bc:	eb07 090c 	add.w	r9, r7, ip
 800e6c0:	9301      	str	r3, [sp, #4]
 800e6c2:	fbb0 f5f5 	udiv	r5, r0, r5
 800e6c6:	b395      	cbz	r5, 800e72e <quorem+0x9e>
 800e6c8:	f04f 0a00 	mov.w	sl, #0
 800e6cc:	4638      	mov	r0, r7
 800e6ce:	46b6      	mov	lr, r6
 800e6d0:	46d3      	mov	fp, sl
 800e6d2:	f850 2b04 	ldr.w	r2, [r0], #4
 800e6d6:	b293      	uxth	r3, r2
 800e6d8:	fb05 a303 	mla	r3, r5, r3, sl
 800e6dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e6e0:	b29b      	uxth	r3, r3
 800e6e2:	ebab 0303 	sub.w	r3, fp, r3
 800e6e6:	0c12      	lsrs	r2, r2, #16
 800e6e8:	f8de b000 	ldr.w	fp, [lr]
 800e6ec:	fb05 a202 	mla	r2, r5, r2, sl
 800e6f0:	fa13 f38b 	uxtah	r3, r3, fp
 800e6f4:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 800e6f8:	fa1f fb82 	uxth.w	fp, r2
 800e6fc:	f8de 2000 	ldr.w	r2, [lr]
 800e700:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 800e704:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e708:	b29b      	uxth	r3, r3
 800e70a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e70e:	4581      	cmp	r9, r0
 800e710:	ea4f 4b22 	mov.w	fp, r2, asr #16
 800e714:	f84e 3b04 	str.w	r3, [lr], #4
 800e718:	d2db      	bcs.n	800e6d2 <quorem+0x42>
 800e71a:	f856 300c 	ldr.w	r3, [r6, ip]
 800e71e:	b933      	cbnz	r3, 800e72e <quorem+0x9e>
 800e720:	9b01      	ldr	r3, [sp, #4]
 800e722:	3b04      	subs	r3, #4
 800e724:	429e      	cmp	r6, r3
 800e726:	461a      	mov	r2, r3
 800e728:	d330      	bcc.n	800e78c <quorem+0xfc>
 800e72a:	f8c8 4010 	str.w	r4, [r8, #16]
 800e72e:	4640      	mov	r0, r8
 800e730:	f001 fa06 	bl	800fb40 <__mcmp>
 800e734:	2800      	cmp	r0, #0
 800e736:	db25      	blt.n	800e784 <quorem+0xf4>
 800e738:	3501      	adds	r5, #1
 800e73a:	4630      	mov	r0, r6
 800e73c:	f04f 0c00 	mov.w	ip, #0
 800e740:	f857 2b04 	ldr.w	r2, [r7], #4
 800e744:	f8d0 e000 	ldr.w	lr, [r0]
 800e748:	b293      	uxth	r3, r2
 800e74a:	ebac 0303 	sub.w	r3, ip, r3
 800e74e:	0c12      	lsrs	r2, r2, #16
 800e750:	fa13 f38e 	uxtah	r3, r3, lr
 800e754:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e758:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e75c:	b29b      	uxth	r3, r3
 800e75e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e762:	45b9      	cmp	r9, r7
 800e764:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e768:	f840 3b04 	str.w	r3, [r0], #4
 800e76c:	d2e8      	bcs.n	800e740 <quorem+0xb0>
 800e76e:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800e772:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800e776:	b92a      	cbnz	r2, 800e784 <quorem+0xf4>
 800e778:	3b04      	subs	r3, #4
 800e77a:	429e      	cmp	r6, r3
 800e77c:	461a      	mov	r2, r3
 800e77e:	d30b      	bcc.n	800e798 <quorem+0x108>
 800e780:	f8c8 4010 	str.w	r4, [r8, #16]
 800e784:	4628      	mov	r0, r5
 800e786:	b003      	add	sp, #12
 800e788:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e78c:	6812      	ldr	r2, [r2, #0]
 800e78e:	3b04      	subs	r3, #4
 800e790:	2a00      	cmp	r2, #0
 800e792:	d1ca      	bne.n	800e72a <quorem+0x9a>
 800e794:	3c01      	subs	r4, #1
 800e796:	e7c5      	b.n	800e724 <quorem+0x94>
 800e798:	6812      	ldr	r2, [r2, #0]
 800e79a:	3b04      	subs	r3, #4
 800e79c:	2a00      	cmp	r2, #0
 800e79e:	d1ef      	bne.n	800e780 <quorem+0xf0>
 800e7a0:	3c01      	subs	r4, #1
 800e7a2:	e7ea      	b.n	800e77a <quorem+0xea>
 800e7a4:	2000      	movs	r0, #0
 800e7a6:	e7ee      	b.n	800e786 <quorem+0xf6>

0800e7a8 <_dtoa_r>:
 800e7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7ac:	ec57 6b10 	vmov	r6, r7, d0
 800e7b0:	b097      	sub	sp, #92	; 0x5c
 800e7b2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e7b4:	9106      	str	r1, [sp, #24]
 800e7b6:	4604      	mov	r4, r0
 800e7b8:	920b      	str	r2, [sp, #44]	; 0x2c
 800e7ba:	9312      	str	r3, [sp, #72]	; 0x48
 800e7bc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e7c0:	e9cd 6700 	strd	r6, r7, [sp]
 800e7c4:	b93d      	cbnz	r5, 800e7d6 <_dtoa_r+0x2e>
 800e7c6:	2010      	movs	r0, #16
 800e7c8:	f000 ff92 	bl	800f6f0 <malloc>
 800e7cc:	6260      	str	r0, [r4, #36]	; 0x24
 800e7ce:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e7d2:	6005      	str	r5, [r0, #0]
 800e7d4:	60c5      	str	r5, [r0, #12]
 800e7d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7d8:	6819      	ldr	r1, [r3, #0]
 800e7da:	b151      	cbz	r1, 800e7f2 <_dtoa_r+0x4a>
 800e7dc:	685a      	ldr	r2, [r3, #4]
 800e7de:	604a      	str	r2, [r1, #4]
 800e7e0:	2301      	movs	r3, #1
 800e7e2:	4093      	lsls	r3, r2
 800e7e4:	608b      	str	r3, [r1, #8]
 800e7e6:	4620      	mov	r0, r4
 800e7e8:	f000 ffc9 	bl	800f77e <_Bfree>
 800e7ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e7ee:	2200      	movs	r2, #0
 800e7f0:	601a      	str	r2, [r3, #0]
 800e7f2:	1e3b      	subs	r3, r7, #0
 800e7f4:	bfbb      	ittet	lt
 800e7f6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800e7fa:	9301      	strlt	r3, [sp, #4]
 800e7fc:	2300      	movge	r3, #0
 800e7fe:	2201      	movlt	r2, #1
 800e800:	bfac      	ite	ge
 800e802:	f8c8 3000 	strge.w	r3, [r8]
 800e806:	f8c8 2000 	strlt.w	r2, [r8]
 800e80a:	4baf      	ldr	r3, [pc, #700]	; (800eac8 <_dtoa_r+0x320>)
 800e80c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800e810:	ea33 0308 	bics.w	r3, r3, r8
 800e814:	d114      	bne.n	800e840 <_dtoa_r+0x98>
 800e816:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e818:	f242 730f 	movw	r3, #9999	; 0x270f
 800e81c:	6013      	str	r3, [r2, #0]
 800e81e:	9b00      	ldr	r3, [sp, #0]
 800e820:	b923      	cbnz	r3, 800e82c <_dtoa_r+0x84>
 800e822:	f3c8 0013 	ubfx	r0, r8, #0, #20
 800e826:	2800      	cmp	r0, #0
 800e828:	f000 8542 	beq.w	800f2b0 <_dtoa_r+0xb08>
 800e82c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e82e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 800eadc <_dtoa_r+0x334>
 800e832:	2b00      	cmp	r3, #0
 800e834:	f000 8544 	beq.w	800f2c0 <_dtoa_r+0xb18>
 800e838:	f10b 0303 	add.w	r3, fp, #3
 800e83c:	f000 bd3e 	b.w	800f2bc <_dtoa_r+0xb14>
 800e840:	e9dd 6700 	ldrd	r6, r7, [sp]
 800e844:	2200      	movs	r2, #0
 800e846:	2300      	movs	r3, #0
 800e848:	4630      	mov	r0, r6
 800e84a:	4639      	mov	r1, r7
 800e84c:	f7f2 f964 	bl	8000b18 <__aeabi_dcmpeq>
 800e850:	4681      	mov	r9, r0
 800e852:	b168      	cbz	r0, 800e870 <_dtoa_r+0xc8>
 800e854:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e856:	2301      	movs	r3, #1
 800e858:	6013      	str	r3, [r2, #0]
 800e85a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	f000 8524 	beq.w	800f2aa <_dtoa_r+0xb02>
 800e862:	4b9a      	ldr	r3, [pc, #616]	; (800eacc <_dtoa_r+0x324>)
 800e864:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e866:	f103 3bff 	add.w	fp, r3, #4294967295	; 0xffffffff
 800e86a:	6013      	str	r3, [r2, #0]
 800e86c:	f000 bd28 	b.w	800f2c0 <_dtoa_r+0xb18>
 800e870:	aa14      	add	r2, sp, #80	; 0x50
 800e872:	a915      	add	r1, sp, #84	; 0x54
 800e874:	ec47 6b10 	vmov	d0, r6, r7
 800e878:	4620      	mov	r0, r4
 800e87a:	f001 f9d8 	bl	800fc2e <__d2b>
 800e87e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800e882:	9004      	str	r0, [sp, #16]
 800e884:	2d00      	cmp	r5, #0
 800e886:	d07c      	beq.n	800e982 <_dtoa_r+0x1da>
 800e888:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e88c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 800e890:	46b2      	mov	sl, r6
 800e892:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800e896:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e89a:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 800e89e:	2200      	movs	r2, #0
 800e8a0:	4b8b      	ldr	r3, [pc, #556]	; (800ead0 <_dtoa_r+0x328>)
 800e8a2:	4650      	mov	r0, sl
 800e8a4:	4659      	mov	r1, fp
 800e8a6:	f7f1 fd17 	bl	80002d8 <__aeabi_dsub>
 800e8aa:	a381      	add	r3, pc, #516	; (adr r3, 800eab0 <_dtoa_r+0x308>)
 800e8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b0:	f7f1 feca 	bl	8000648 <__aeabi_dmul>
 800e8b4:	a380      	add	r3, pc, #512	; (adr r3, 800eab8 <_dtoa_r+0x310>)
 800e8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ba:	f7f1 fd0f 	bl	80002dc <__adddf3>
 800e8be:	4606      	mov	r6, r0
 800e8c0:	4628      	mov	r0, r5
 800e8c2:	460f      	mov	r7, r1
 800e8c4:	f7f1 fe56 	bl	8000574 <__aeabi_i2d>
 800e8c8:	a37d      	add	r3, pc, #500	; (adr r3, 800eac0 <_dtoa_r+0x318>)
 800e8ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ce:	f7f1 febb 	bl	8000648 <__aeabi_dmul>
 800e8d2:	4602      	mov	r2, r0
 800e8d4:	460b      	mov	r3, r1
 800e8d6:	4630      	mov	r0, r6
 800e8d8:	4639      	mov	r1, r7
 800e8da:	f7f1 fcff 	bl	80002dc <__adddf3>
 800e8de:	4606      	mov	r6, r0
 800e8e0:	460f      	mov	r7, r1
 800e8e2:	f7f2 f961 	bl	8000ba8 <__aeabi_d2iz>
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	4682      	mov	sl, r0
 800e8ea:	2300      	movs	r3, #0
 800e8ec:	4630      	mov	r0, r6
 800e8ee:	4639      	mov	r1, r7
 800e8f0:	f7f2 f91c 	bl	8000b2c <__aeabi_dcmplt>
 800e8f4:	b148      	cbz	r0, 800e90a <_dtoa_r+0x162>
 800e8f6:	4650      	mov	r0, sl
 800e8f8:	f7f1 fe3c 	bl	8000574 <__aeabi_i2d>
 800e8fc:	4632      	mov	r2, r6
 800e8fe:	463b      	mov	r3, r7
 800e900:	f7f2 f90a 	bl	8000b18 <__aeabi_dcmpeq>
 800e904:	b908      	cbnz	r0, 800e90a <_dtoa_r+0x162>
 800e906:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e90a:	f1ba 0f16 	cmp.w	sl, #22
 800e90e:	d859      	bhi.n	800e9c4 <_dtoa_r+0x21c>
 800e910:	4970      	ldr	r1, [pc, #448]	; (800ead4 <_dtoa_r+0x32c>)
 800e912:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800e916:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e91a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e91e:	f7f2 f923 	bl	8000b68 <__aeabi_dcmpgt>
 800e922:	2800      	cmp	r0, #0
 800e924:	d050      	beq.n	800e9c8 <_dtoa_r+0x220>
 800e926:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800e92a:	2300      	movs	r3, #0
 800e92c:	930f      	str	r3, [sp, #60]	; 0x3c
 800e92e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e930:	1b5d      	subs	r5, r3, r5
 800e932:	f1b5 0801 	subs.w	r8, r5, #1
 800e936:	bf49      	itett	mi
 800e938:	f1c5 0301 	rsbmi	r3, r5, #1
 800e93c:	2300      	movpl	r3, #0
 800e93e:	9305      	strmi	r3, [sp, #20]
 800e940:	f04f 0800 	movmi.w	r8, #0
 800e944:	bf58      	it	pl
 800e946:	9305      	strpl	r3, [sp, #20]
 800e948:	f1ba 0f00 	cmp.w	sl, #0
 800e94c:	db3e      	blt.n	800e9cc <_dtoa_r+0x224>
 800e94e:	2300      	movs	r3, #0
 800e950:	44d0      	add	r8, sl
 800e952:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800e956:	9307      	str	r3, [sp, #28]
 800e958:	9b06      	ldr	r3, [sp, #24]
 800e95a:	2b09      	cmp	r3, #9
 800e95c:	f200 8090 	bhi.w	800ea80 <_dtoa_r+0x2d8>
 800e960:	2b05      	cmp	r3, #5
 800e962:	bfc4      	itt	gt
 800e964:	3b04      	subgt	r3, #4
 800e966:	9306      	strgt	r3, [sp, #24]
 800e968:	9b06      	ldr	r3, [sp, #24]
 800e96a:	f1a3 0302 	sub.w	r3, r3, #2
 800e96e:	bfcc      	ite	gt
 800e970:	2500      	movgt	r5, #0
 800e972:	2501      	movle	r5, #1
 800e974:	2b03      	cmp	r3, #3
 800e976:	f200 808f 	bhi.w	800ea98 <_dtoa_r+0x2f0>
 800e97a:	e8df f003 	tbb	[pc, r3]
 800e97e:	7f7d      	.short	0x7f7d
 800e980:	7131      	.short	0x7131
 800e982:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 800e986:	441d      	add	r5, r3
 800e988:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800e98c:	2820      	cmp	r0, #32
 800e98e:	dd13      	ble.n	800e9b8 <_dtoa_r+0x210>
 800e990:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800e994:	9b00      	ldr	r3, [sp, #0]
 800e996:	fa08 f800 	lsl.w	r8, r8, r0
 800e99a:	f205 4012 	addw	r0, r5, #1042	; 0x412
 800e99e:	fa23 f000 	lsr.w	r0, r3, r0
 800e9a2:	ea48 0000 	orr.w	r0, r8, r0
 800e9a6:	f7f1 fdd5 	bl	8000554 <__aeabi_ui2d>
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	4682      	mov	sl, r0
 800e9ae:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800e9b2:	3d01      	subs	r5, #1
 800e9b4:	9313      	str	r3, [sp, #76]	; 0x4c
 800e9b6:	e772      	b.n	800e89e <_dtoa_r+0xf6>
 800e9b8:	9b00      	ldr	r3, [sp, #0]
 800e9ba:	f1c0 0020 	rsb	r0, r0, #32
 800e9be:	fa03 f000 	lsl.w	r0, r3, r0
 800e9c2:	e7f0      	b.n	800e9a6 <_dtoa_r+0x1fe>
 800e9c4:	2301      	movs	r3, #1
 800e9c6:	e7b1      	b.n	800e92c <_dtoa_r+0x184>
 800e9c8:	900f      	str	r0, [sp, #60]	; 0x3c
 800e9ca:	e7b0      	b.n	800e92e <_dtoa_r+0x186>
 800e9cc:	9b05      	ldr	r3, [sp, #20]
 800e9ce:	eba3 030a 	sub.w	r3, r3, sl
 800e9d2:	9305      	str	r3, [sp, #20]
 800e9d4:	f1ca 0300 	rsb	r3, sl, #0
 800e9d8:	9307      	str	r3, [sp, #28]
 800e9da:	2300      	movs	r3, #0
 800e9dc:	930e      	str	r3, [sp, #56]	; 0x38
 800e9de:	e7bb      	b.n	800e958 <_dtoa_r+0x1b0>
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	930a      	str	r3, [sp, #40]	; 0x28
 800e9e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	dd59      	ble.n	800ea9e <_dtoa_r+0x2f6>
 800e9ea:	9302      	str	r3, [sp, #8]
 800e9ec:	4699      	mov	r9, r3
 800e9ee:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800e9f0:	2200      	movs	r2, #0
 800e9f2:	6072      	str	r2, [r6, #4]
 800e9f4:	2204      	movs	r2, #4
 800e9f6:	f102 0014 	add.w	r0, r2, #20
 800e9fa:	4298      	cmp	r0, r3
 800e9fc:	6871      	ldr	r1, [r6, #4]
 800e9fe:	d953      	bls.n	800eaa8 <_dtoa_r+0x300>
 800ea00:	4620      	mov	r0, r4
 800ea02:	f000 fe88 	bl	800f716 <_Balloc>
 800ea06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ea08:	6030      	str	r0, [r6, #0]
 800ea0a:	f1b9 0f0e 	cmp.w	r9, #14
 800ea0e:	f8d3 b000 	ldr.w	fp, [r3]
 800ea12:	f200 80e6 	bhi.w	800ebe2 <_dtoa_r+0x43a>
 800ea16:	2d00      	cmp	r5, #0
 800ea18:	f000 80e3 	beq.w	800ebe2 <_dtoa_r+0x43a>
 800ea1c:	ed9d 7b00 	vldr	d7, [sp]
 800ea20:	f1ba 0f00 	cmp.w	sl, #0
 800ea24:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 800ea28:	dd74      	ble.n	800eb14 <_dtoa_r+0x36c>
 800ea2a:	4a2a      	ldr	r2, [pc, #168]	; (800ead4 <_dtoa_r+0x32c>)
 800ea2c:	f00a 030f 	and.w	r3, sl, #15
 800ea30:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ea34:	ed93 7b00 	vldr	d7, [r3]
 800ea38:	ea4f 162a 	mov.w	r6, sl, asr #4
 800ea3c:	06f0      	lsls	r0, r6, #27
 800ea3e:	ed8d 7b08 	vstr	d7, [sp, #32]
 800ea42:	d565      	bpl.n	800eb10 <_dtoa_r+0x368>
 800ea44:	4b24      	ldr	r3, [pc, #144]	; (800ead8 <_dtoa_r+0x330>)
 800ea46:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800ea4a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ea4e:	f7f1 ff25 	bl	800089c <__aeabi_ddiv>
 800ea52:	e9cd 0100 	strd	r0, r1, [sp]
 800ea56:	f006 060f 	and.w	r6, r6, #15
 800ea5a:	2503      	movs	r5, #3
 800ea5c:	4f1e      	ldr	r7, [pc, #120]	; (800ead8 <_dtoa_r+0x330>)
 800ea5e:	e04c      	b.n	800eafa <_dtoa_r+0x352>
 800ea60:	2301      	movs	r3, #1
 800ea62:	930a      	str	r3, [sp, #40]	; 0x28
 800ea64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea66:	4453      	add	r3, sl
 800ea68:	f103 0901 	add.w	r9, r3, #1
 800ea6c:	9302      	str	r3, [sp, #8]
 800ea6e:	464b      	mov	r3, r9
 800ea70:	2b01      	cmp	r3, #1
 800ea72:	bfb8      	it	lt
 800ea74:	2301      	movlt	r3, #1
 800ea76:	e7ba      	b.n	800e9ee <_dtoa_r+0x246>
 800ea78:	2300      	movs	r3, #0
 800ea7a:	e7b2      	b.n	800e9e2 <_dtoa_r+0x23a>
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	e7f0      	b.n	800ea62 <_dtoa_r+0x2ba>
 800ea80:	2501      	movs	r5, #1
 800ea82:	2300      	movs	r3, #0
 800ea84:	9306      	str	r3, [sp, #24]
 800ea86:	950a      	str	r5, [sp, #40]	; 0x28
 800ea88:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ea8c:	9302      	str	r3, [sp, #8]
 800ea8e:	4699      	mov	r9, r3
 800ea90:	2200      	movs	r2, #0
 800ea92:	2312      	movs	r3, #18
 800ea94:	920b      	str	r2, [sp, #44]	; 0x2c
 800ea96:	e7aa      	b.n	800e9ee <_dtoa_r+0x246>
 800ea98:	2301      	movs	r3, #1
 800ea9a:	930a      	str	r3, [sp, #40]	; 0x28
 800ea9c:	e7f4      	b.n	800ea88 <_dtoa_r+0x2e0>
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	9302      	str	r3, [sp, #8]
 800eaa2:	4699      	mov	r9, r3
 800eaa4:	461a      	mov	r2, r3
 800eaa6:	e7f5      	b.n	800ea94 <_dtoa_r+0x2ec>
 800eaa8:	3101      	adds	r1, #1
 800eaaa:	6071      	str	r1, [r6, #4]
 800eaac:	0052      	lsls	r2, r2, #1
 800eaae:	e7a2      	b.n	800e9f6 <_dtoa_r+0x24e>
 800eab0:	636f4361 	.word	0x636f4361
 800eab4:	3fd287a7 	.word	0x3fd287a7
 800eab8:	8b60c8b3 	.word	0x8b60c8b3
 800eabc:	3fc68a28 	.word	0x3fc68a28
 800eac0:	509f79fb 	.word	0x509f79fb
 800eac4:	3fd34413 	.word	0x3fd34413
 800eac8:	7ff00000 	.word	0x7ff00000
 800eacc:	08011131 	.word	0x08011131
 800ead0:	3ff80000 	.word	0x3ff80000
 800ead4:	080111f0 	.word	0x080111f0
 800ead8:	080111c8 	.word	0x080111c8
 800eadc:	0801115d 	.word	0x0801115d
 800eae0:	07f1      	lsls	r1, r6, #31
 800eae2:	d508      	bpl.n	800eaf6 <_dtoa_r+0x34e>
 800eae4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800eae8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eaec:	f7f1 fdac 	bl	8000648 <__aeabi_dmul>
 800eaf0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800eaf4:	3501      	adds	r5, #1
 800eaf6:	1076      	asrs	r6, r6, #1
 800eaf8:	3708      	adds	r7, #8
 800eafa:	2e00      	cmp	r6, #0
 800eafc:	d1f0      	bne.n	800eae0 <_dtoa_r+0x338>
 800eafe:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800eb02:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb06:	f7f1 fec9 	bl	800089c <__aeabi_ddiv>
 800eb0a:	e9cd 0100 	strd	r0, r1, [sp]
 800eb0e:	e01a      	b.n	800eb46 <_dtoa_r+0x39e>
 800eb10:	2502      	movs	r5, #2
 800eb12:	e7a3      	b.n	800ea5c <_dtoa_r+0x2b4>
 800eb14:	f000 80a0 	beq.w	800ec58 <_dtoa_r+0x4b0>
 800eb18:	f1ca 0600 	rsb	r6, sl, #0
 800eb1c:	4b9f      	ldr	r3, [pc, #636]	; (800ed9c <_dtoa_r+0x5f4>)
 800eb1e:	4fa0      	ldr	r7, [pc, #640]	; (800eda0 <_dtoa_r+0x5f8>)
 800eb20:	f006 020f 	and.w	r2, r6, #15
 800eb24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb2c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800eb30:	f7f1 fd8a 	bl	8000648 <__aeabi_dmul>
 800eb34:	e9cd 0100 	strd	r0, r1, [sp]
 800eb38:	1136      	asrs	r6, r6, #4
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	2502      	movs	r5, #2
 800eb3e:	2e00      	cmp	r6, #0
 800eb40:	d17f      	bne.n	800ec42 <_dtoa_r+0x49a>
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d1e1      	bne.n	800eb0a <_dtoa_r+0x362>
 800eb46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	f000 8087 	beq.w	800ec5c <_dtoa_r+0x4b4>
 800eb4e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800eb52:	2200      	movs	r2, #0
 800eb54:	4b93      	ldr	r3, [pc, #588]	; (800eda4 <_dtoa_r+0x5fc>)
 800eb56:	4630      	mov	r0, r6
 800eb58:	4639      	mov	r1, r7
 800eb5a:	f7f1 ffe7 	bl	8000b2c <__aeabi_dcmplt>
 800eb5e:	2800      	cmp	r0, #0
 800eb60:	d07c      	beq.n	800ec5c <_dtoa_r+0x4b4>
 800eb62:	f1b9 0f00 	cmp.w	r9, #0
 800eb66:	d079      	beq.n	800ec5c <_dtoa_r+0x4b4>
 800eb68:	9b02      	ldr	r3, [sp, #8]
 800eb6a:	2b00      	cmp	r3, #0
 800eb6c:	dd35      	ble.n	800ebda <_dtoa_r+0x432>
 800eb6e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
 800eb72:	9308      	str	r3, [sp, #32]
 800eb74:	4639      	mov	r1, r7
 800eb76:	2200      	movs	r2, #0
 800eb78:	4b8b      	ldr	r3, [pc, #556]	; (800eda8 <_dtoa_r+0x600>)
 800eb7a:	4630      	mov	r0, r6
 800eb7c:	f7f1 fd64 	bl	8000648 <__aeabi_dmul>
 800eb80:	e9cd 0100 	strd	r0, r1, [sp]
 800eb84:	9f02      	ldr	r7, [sp, #8]
 800eb86:	3501      	adds	r5, #1
 800eb88:	4628      	mov	r0, r5
 800eb8a:	f7f1 fcf3 	bl	8000574 <__aeabi_i2d>
 800eb8e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800eb92:	f7f1 fd59 	bl	8000648 <__aeabi_dmul>
 800eb96:	2200      	movs	r2, #0
 800eb98:	4b84      	ldr	r3, [pc, #528]	; (800edac <_dtoa_r+0x604>)
 800eb9a:	f7f1 fb9f 	bl	80002dc <__adddf3>
 800eb9e:	4605      	mov	r5, r0
 800eba0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800eba4:	2f00      	cmp	r7, #0
 800eba6:	d15d      	bne.n	800ec64 <_dtoa_r+0x4bc>
 800eba8:	2200      	movs	r2, #0
 800ebaa:	4b81      	ldr	r3, [pc, #516]	; (800edb0 <_dtoa_r+0x608>)
 800ebac:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ebb0:	f7f1 fb92 	bl	80002d8 <__aeabi_dsub>
 800ebb4:	462a      	mov	r2, r5
 800ebb6:	4633      	mov	r3, r6
 800ebb8:	e9cd 0100 	strd	r0, r1, [sp]
 800ebbc:	f7f1 ffd4 	bl	8000b68 <__aeabi_dcmpgt>
 800ebc0:	2800      	cmp	r0, #0
 800ebc2:	f040 8288 	bne.w	800f0d6 <_dtoa_r+0x92e>
 800ebc6:	462a      	mov	r2, r5
 800ebc8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800ebcc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ebd0:	f7f1 ffac 	bl	8000b2c <__aeabi_dcmplt>
 800ebd4:	2800      	cmp	r0, #0
 800ebd6:	f040 827c 	bne.w	800f0d2 <_dtoa_r+0x92a>
 800ebda:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ebde:	e9cd 2300 	strd	r2, r3, [sp]
 800ebe2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	f2c0 8150 	blt.w	800ee8a <_dtoa_r+0x6e2>
 800ebea:	f1ba 0f0e 	cmp.w	sl, #14
 800ebee:	f300 814c 	bgt.w	800ee8a <_dtoa_r+0x6e2>
 800ebf2:	4b6a      	ldr	r3, [pc, #424]	; (800ed9c <_dtoa_r+0x5f4>)
 800ebf4:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ebf8:	ed93 7b00 	vldr	d7, [r3]
 800ebfc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ebfe:	2b00      	cmp	r3, #0
 800ec00:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ec04:	f280 80d8 	bge.w	800edb8 <_dtoa_r+0x610>
 800ec08:	f1b9 0f00 	cmp.w	r9, #0
 800ec0c:	f300 80d4 	bgt.w	800edb8 <_dtoa_r+0x610>
 800ec10:	f040 825e 	bne.w	800f0d0 <_dtoa_r+0x928>
 800ec14:	2200      	movs	r2, #0
 800ec16:	4b66      	ldr	r3, [pc, #408]	; (800edb0 <_dtoa_r+0x608>)
 800ec18:	ec51 0b17 	vmov	r0, r1, d7
 800ec1c:	f7f1 fd14 	bl	8000648 <__aeabi_dmul>
 800ec20:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec24:	f7f1 ff96 	bl	8000b54 <__aeabi_dcmpge>
 800ec28:	464f      	mov	r7, r9
 800ec2a:	464e      	mov	r6, r9
 800ec2c:	2800      	cmp	r0, #0
 800ec2e:	f040 8234 	bne.w	800f09a <_dtoa_r+0x8f2>
 800ec32:	2331      	movs	r3, #49	; 0x31
 800ec34:	f10b 0501 	add.w	r5, fp, #1
 800ec38:	f88b 3000 	strb.w	r3, [fp]
 800ec3c:	f10a 0a01 	add.w	sl, sl, #1
 800ec40:	e22f      	b.n	800f0a2 <_dtoa_r+0x8fa>
 800ec42:	07f2      	lsls	r2, r6, #31
 800ec44:	d505      	bpl.n	800ec52 <_dtoa_r+0x4aa>
 800ec46:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ec4a:	f7f1 fcfd 	bl	8000648 <__aeabi_dmul>
 800ec4e:	3501      	adds	r5, #1
 800ec50:	2301      	movs	r3, #1
 800ec52:	1076      	asrs	r6, r6, #1
 800ec54:	3708      	adds	r7, #8
 800ec56:	e772      	b.n	800eb3e <_dtoa_r+0x396>
 800ec58:	2502      	movs	r5, #2
 800ec5a:	e774      	b.n	800eb46 <_dtoa_r+0x39e>
 800ec5c:	f8cd a020 	str.w	sl, [sp, #32]
 800ec60:	464f      	mov	r7, r9
 800ec62:	e791      	b.n	800eb88 <_dtoa_r+0x3e0>
 800ec64:	4b4d      	ldr	r3, [pc, #308]	; (800ed9c <_dtoa_r+0x5f4>)
 800ec66:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ec6a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800ec6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d047      	beq.n	800ed04 <_dtoa_r+0x55c>
 800ec74:	4602      	mov	r2, r0
 800ec76:	460b      	mov	r3, r1
 800ec78:	2000      	movs	r0, #0
 800ec7a:	494e      	ldr	r1, [pc, #312]	; (800edb4 <_dtoa_r+0x60c>)
 800ec7c:	f7f1 fe0e 	bl	800089c <__aeabi_ddiv>
 800ec80:	462a      	mov	r2, r5
 800ec82:	4633      	mov	r3, r6
 800ec84:	f7f1 fb28 	bl	80002d8 <__aeabi_dsub>
 800ec88:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ec8c:	465d      	mov	r5, fp
 800ec8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ec92:	f7f1 ff89 	bl	8000ba8 <__aeabi_d2iz>
 800ec96:	4606      	mov	r6, r0
 800ec98:	f7f1 fc6c 	bl	8000574 <__aeabi_i2d>
 800ec9c:	4602      	mov	r2, r0
 800ec9e:	460b      	mov	r3, r1
 800eca0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eca4:	f7f1 fb18 	bl	80002d8 <__aeabi_dsub>
 800eca8:	3630      	adds	r6, #48	; 0x30
 800ecaa:	f805 6b01 	strb.w	r6, [r5], #1
 800ecae:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ecb2:	e9cd 0100 	strd	r0, r1, [sp]
 800ecb6:	f7f1 ff39 	bl	8000b2c <__aeabi_dcmplt>
 800ecba:	2800      	cmp	r0, #0
 800ecbc:	d163      	bne.n	800ed86 <_dtoa_r+0x5de>
 800ecbe:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ecc2:	2000      	movs	r0, #0
 800ecc4:	4937      	ldr	r1, [pc, #220]	; (800eda4 <_dtoa_r+0x5fc>)
 800ecc6:	f7f1 fb07 	bl	80002d8 <__aeabi_dsub>
 800ecca:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ecce:	f7f1 ff2d 	bl	8000b2c <__aeabi_dcmplt>
 800ecd2:	2800      	cmp	r0, #0
 800ecd4:	f040 80b7 	bne.w	800ee46 <_dtoa_r+0x69e>
 800ecd8:	eba5 030b 	sub.w	r3, r5, fp
 800ecdc:	429f      	cmp	r7, r3
 800ecde:	f77f af7c 	ble.w	800ebda <_dtoa_r+0x432>
 800ece2:	2200      	movs	r2, #0
 800ece4:	4b30      	ldr	r3, [pc, #192]	; (800eda8 <_dtoa_r+0x600>)
 800ece6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ecea:	f7f1 fcad 	bl	8000648 <__aeabi_dmul>
 800ecee:	2200      	movs	r2, #0
 800ecf0:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ecf4:	4b2c      	ldr	r3, [pc, #176]	; (800eda8 <_dtoa_r+0x600>)
 800ecf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ecfa:	f7f1 fca5 	bl	8000648 <__aeabi_dmul>
 800ecfe:	e9cd 0100 	strd	r0, r1, [sp]
 800ed02:	e7c4      	b.n	800ec8e <_dtoa_r+0x4e6>
 800ed04:	462a      	mov	r2, r5
 800ed06:	4633      	mov	r3, r6
 800ed08:	f7f1 fc9e 	bl	8000648 <__aeabi_dmul>
 800ed0c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ed10:	eb0b 0507 	add.w	r5, fp, r7
 800ed14:	465e      	mov	r6, fp
 800ed16:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed1a:	f7f1 ff45 	bl	8000ba8 <__aeabi_d2iz>
 800ed1e:	4607      	mov	r7, r0
 800ed20:	f7f1 fc28 	bl	8000574 <__aeabi_i2d>
 800ed24:	3730      	adds	r7, #48	; 0x30
 800ed26:	4602      	mov	r2, r0
 800ed28:	460b      	mov	r3, r1
 800ed2a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed2e:	f7f1 fad3 	bl	80002d8 <__aeabi_dsub>
 800ed32:	f806 7b01 	strb.w	r7, [r6], #1
 800ed36:	42ae      	cmp	r6, r5
 800ed38:	e9cd 0100 	strd	r0, r1, [sp]
 800ed3c:	f04f 0200 	mov.w	r2, #0
 800ed40:	d126      	bne.n	800ed90 <_dtoa_r+0x5e8>
 800ed42:	4b1c      	ldr	r3, [pc, #112]	; (800edb4 <_dtoa_r+0x60c>)
 800ed44:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ed48:	f7f1 fac8 	bl	80002dc <__adddf3>
 800ed4c:	4602      	mov	r2, r0
 800ed4e:	460b      	mov	r3, r1
 800ed50:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed54:	f7f1 ff08 	bl	8000b68 <__aeabi_dcmpgt>
 800ed58:	2800      	cmp	r0, #0
 800ed5a:	d174      	bne.n	800ee46 <_dtoa_r+0x69e>
 800ed5c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ed60:	2000      	movs	r0, #0
 800ed62:	4914      	ldr	r1, [pc, #80]	; (800edb4 <_dtoa_r+0x60c>)
 800ed64:	f7f1 fab8 	bl	80002d8 <__aeabi_dsub>
 800ed68:	4602      	mov	r2, r0
 800ed6a:	460b      	mov	r3, r1
 800ed6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed70:	f7f1 fedc 	bl	8000b2c <__aeabi_dcmplt>
 800ed74:	2800      	cmp	r0, #0
 800ed76:	f43f af30 	beq.w	800ebda <_dtoa_r+0x432>
 800ed7a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ed7e:	2b30      	cmp	r3, #48	; 0x30
 800ed80:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800ed84:	d002      	beq.n	800ed8c <_dtoa_r+0x5e4>
 800ed86:	f8dd a020 	ldr.w	sl, [sp, #32]
 800ed8a:	e04a      	b.n	800ee22 <_dtoa_r+0x67a>
 800ed8c:	4615      	mov	r5, r2
 800ed8e:	e7f4      	b.n	800ed7a <_dtoa_r+0x5d2>
 800ed90:	4b05      	ldr	r3, [pc, #20]	; (800eda8 <_dtoa_r+0x600>)
 800ed92:	f7f1 fc59 	bl	8000648 <__aeabi_dmul>
 800ed96:	e9cd 0100 	strd	r0, r1, [sp]
 800ed9a:	e7bc      	b.n	800ed16 <_dtoa_r+0x56e>
 800ed9c:	080111f0 	.word	0x080111f0
 800eda0:	080111c8 	.word	0x080111c8
 800eda4:	3ff00000 	.word	0x3ff00000
 800eda8:	40240000 	.word	0x40240000
 800edac:	401c0000 	.word	0x401c0000
 800edb0:	40140000 	.word	0x40140000
 800edb4:	3fe00000 	.word	0x3fe00000
 800edb8:	e9dd 6700 	ldrd	r6, r7, [sp]
 800edbc:	465d      	mov	r5, fp
 800edbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800edc2:	4630      	mov	r0, r6
 800edc4:	4639      	mov	r1, r7
 800edc6:	f7f1 fd69 	bl	800089c <__aeabi_ddiv>
 800edca:	f7f1 feed 	bl	8000ba8 <__aeabi_d2iz>
 800edce:	4680      	mov	r8, r0
 800edd0:	f7f1 fbd0 	bl	8000574 <__aeabi_i2d>
 800edd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800edd8:	f7f1 fc36 	bl	8000648 <__aeabi_dmul>
 800eddc:	4602      	mov	r2, r0
 800edde:	460b      	mov	r3, r1
 800ede0:	4630      	mov	r0, r6
 800ede2:	4639      	mov	r1, r7
 800ede4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 800ede8:	f7f1 fa76 	bl	80002d8 <__aeabi_dsub>
 800edec:	f805 6b01 	strb.w	r6, [r5], #1
 800edf0:	eba5 060b 	sub.w	r6, r5, fp
 800edf4:	45b1      	cmp	r9, r6
 800edf6:	4602      	mov	r2, r0
 800edf8:	460b      	mov	r3, r1
 800edfa:	d139      	bne.n	800ee70 <_dtoa_r+0x6c8>
 800edfc:	f7f1 fa6e 	bl	80002dc <__adddf3>
 800ee00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ee04:	4606      	mov	r6, r0
 800ee06:	460f      	mov	r7, r1
 800ee08:	f7f1 feae 	bl	8000b68 <__aeabi_dcmpgt>
 800ee0c:	b9c8      	cbnz	r0, 800ee42 <_dtoa_r+0x69a>
 800ee0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ee12:	4630      	mov	r0, r6
 800ee14:	4639      	mov	r1, r7
 800ee16:	f7f1 fe7f 	bl	8000b18 <__aeabi_dcmpeq>
 800ee1a:	b110      	cbz	r0, 800ee22 <_dtoa_r+0x67a>
 800ee1c:	f018 0f01 	tst.w	r8, #1
 800ee20:	d10f      	bne.n	800ee42 <_dtoa_r+0x69a>
 800ee22:	9904      	ldr	r1, [sp, #16]
 800ee24:	4620      	mov	r0, r4
 800ee26:	f000 fcaa 	bl	800f77e <_Bfree>
 800ee2a:	2300      	movs	r3, #0
 800ee2c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800ee2e:	702b      	strb	r3, [r5, #0]
 800ee30:	f10a 0301 	add.w	r3, sl, #1
 800ee34:	6013      	str	r3, [r2, #0]
 800ee36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	f000 8241 	beq.w	800f2c0 <_dtoa_r+0xb18>
 800ee3e:	601d      	str	r5, [r3, #0]
 800ee40:	e23e      	b.n	800f2c0 <_dtoa_r+0xb18>
 800ee42:	f8cd a020 	str.w	sl, [sp, #32]
 800ee46:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ee4a:	2a39      	cmp	r2, #57	; 0x39
 800ee4c:	f105 33ff 	add.w	r3, r5, #4294967295	; 0xffffffff
 800ee50:	d108      	bne.n	800ee64 <_dtoa_r+0x6bc>
 800ee52:	459b      	cmp	fp, r3
 800ee54:	d10a      	bne.n	800ee6c <_dtoa_r+0x6c4>
 800ee56:	9b08      	ldr	r3, [sp, #32]
 800ee58:	3301      	adds	r3, #1
 800ee5a:	9308      	str	r3, [sp, #32]
 800ee5c:	2330      	movs	r3, #48	; 0x30
 800ee5e:	f88b 3000 	strb.w	r3, [fp]
 800ee62:	465b      	mov	r3, fp
 800ee64:	781a      	ldrb	r2, [r3, #0]
 800ee66:	3201      	adds	r2, #1
 800ee68:	701a      	strb	r2, [r3, #0]
 800ee6a:	e78c      	b.n	800ed86 <_dtoa_r+0x5de>
 800ee6c:	461d      	mov	r5, r3
 800ee6e:	e7ea      	b.n	800ee46 <_dtoa_r+0x69e>
 800ee70:	2200      	movs	r2, #0
 800ee72:	4b9b      	ldr	r3, [pc, #620]	; (800f0e0 <_dtoa_r+0x938>)
 800ee74:	f7f1 fbe8 	bl	8000648 <__aeabi_dmul>
 800ee78:	2200      	movs	r2, #0
 800ee7a:	2300      	movs	r3, #0
 800ee7c:	4606      	mov	r6, r0
 800ee7e:	460f      	mov	r7, r1
 800ee80:	f7f1 fe4a 	bl	8000b18 <__aeabi_dcmpeq>
 800ee84:	2800      	cmp	r0, #0
 800ee86:	d09a      	beq.n	800edbe <_dtoa_r+0x616>
 800ee88:	e7cb      	b.n	800ee22 <_dtoa_r+0x67a>
 800ee8a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ee8c:	2a00      	cmp	r2, #0
 800ee8e:	f000 808b 	beq.w	800efa8 <_dtoa_r+0x800>
 800ee92:	9a06      	ldr	r2, [sp, #24]
 800ee94:	2a01      	cmp	r2, #1
 800ee96:	dc6e      	bgt.n	800ef76 <_dtoa_r+0x7ce>
 800ee98:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ee9a:	2a00      	cmp	r2, #0
 800ee9c:	d067      	beq.n	800ef6e <_dtoa_r+0x7c6>
 800ee9e:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800eea2:	9f07      	ldr	r7, [sp, #28]
 800eea4:	9d05      	ldr	r5, [sp, #20]
 800eea6:	9a05      	ldr	r2, [sp, #20]
 800eea8:	2101      	movs	r1, #1
 800eeaa:	441a      	add	r2, r3
 800eeac:	4620      	mov	r0, r4
 800eeae:	9205      	str	r2, [sp, #20]
 800eeb0:	4498      	add	r8, r3
 800eeb2:	f000 fd04 	bl	800f8be <__i2b>
 800eeb6:	4606      	mov	r6, r0
 800eeb8:	2d00      	cmp	r5, #0
 800eeba:	dd0c      	ble.n	800eed6 <_dtoa_r+0x72e>
 800eebc:	f1b8 0f00 	cmp.w	r8, #0
 800eec0:	dd09      	ble.n	800eed6 <_dtoa_r+0x72e>
 800eec2:	4545      	cmp	r5, r8
 800eec4:	9a05      	ldr	r2, [sp, #20]
 800eec6:	462b      	mov	r3, r5
 800eec8:	bfa8      	it	ge
 800eeca:	4643      	movge	r3, r8
 800eecc:	1ad2      	subs	r2, r2, r3
 800eece:	9205      	str	r2, [sp, #20]
 800eed0:	1aed      	subs	r5, r5, r3
 800eed2:	eba8 0803 	sub.w	r8, r8, r3
 800eed6:	9b07      	ldr	r3, [sp, #28]
 800eed8:	b1eb      	cbz	r3, 800ef16 <_dtoa_r+0x76e>
 800eeda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eedc:	2b00      	cmp	r3, #0
 800eede:	d067      	beq.n	800efb0 <_dtoa_r+0x808>
 800eee0:	b18f      	cbz	r7, 800ef06 <_dtoa_r+0x75e>
 800eee2:	4631      	mov	r1, r6
 800eee4:	463a      	mov	r2, r7
 800eee6:	4620      	mov	r0, r4
 800eee8:	f000 fd88 	bl	800f9fc <__pow5mult>
 800eeec:	9a04      	ldr	r2, [sp, #16]
 800eeee:	4601      	mov	r1, r0
 800eef0:	4606      	mov	r6, r0
 800eef2:	4620      	mov	r0, r4
 800eef4:	f000 fcec 	bl	800f8d0 <__multiply>
 800eef8:	9904      	ldr	r1, [sp, #16]
 800eefa:	9008      	str	r0, [sp, #32]
 800eefc:	4620      	mov	r0, r4
 800eefe:	f000 fc3e 	bl	800f77e <_Bfree>
 800ef02:	9b08      	ldr	r3, [sp, #32]
 800ef04:	9304      	str	r3, [sp, #16]
 800ef06:	9b07      	ldr	r3, [sp, #28]
 800ef08:	1bda      	subs	r2, r3, r7
 800ef0a:	d004      	beq.n	800ef16 <_dtoa_r+0x76e>
 800ef0c:	9904      	ldr	r1, [sp, #16]
 800ef0e:	4620      	mov	r0, r4
 800ef10:	f000 fd74 	bl	800f9fc <__pow5mult>
 800ef14:	9004      	str	r0, [sp, #16]
 800ef16:	2101      	movs	r1, #1
 800ef18:	4620      	mov	r0, r4
 800ef1a:	f000 fcd0 	bl	800f8be <__i2b>
 800ef1e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef20:	4607      	mov	r7, r0
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	f000 81d0 	beq.w	800f2c8 <_dtoa_r+0xb20>
 800ef28:	461a      	mov	r2, r3
 800ef2a:	4601      	mov	r1, r0
 800ef2c:	4620      	mov	r0, r4
 800ef2e:	f000 fd65 	bl	800f9fc <__pow5mult>
 800ef32:	9b06      	ldr	r3, [sp, #24]
 800ef34:	2b01      	cmp	r3, #1
 800ef36:	4607      	mov	r7, r0
 800ef38:	dc40      	bgt.n	800efbc <_dtoa_r+0x814>
 800ef3a:	9b00      	ldr	r3, [sp, #0]
 800ef3c:	2b00      	cmp	r3, #0
 800ef3e:	d139      	bne.n	800efb4 <_dtoa_r+0x80c>
 800ef40:	9b01      	ldr	r3, [sp, #4]
 800ef42:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d136      	bne.n	800efb8 <_dtoa_r+0x810>
 800ef4a:	9b01      	ldr	r3, [sp, #4]
 800ef4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ef50:	0d1b      	lsrs	r3, r3, #20
 800ef52:	051b      	lsls	r3, r3, #20
 800ef54:	b12b      	cbz	r3, 800ef62 <_dtoa_r+0x7ba>
 800ef56:	9b05      	ldr	r3, [sp, #20]
 800ef58:	3301      	adds	r3, #1
 800ef5a:	9305      	str	r3, [sp, #20]
 800ef5c:	f108 0801 	add.w	r8, r8, #1
 800ef60:	2301      	movs	r3, #1
 800ef62:	9307      	str	r3, [sp, #28]
 800ef64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d12a      	bne.n	800efc0 <_dtoa_r+0x818>
 800ef6a:	2001      	movs	r0, #1
 800ef6c:	e030      	b.n	800efd0 <_dtoa_r+0x828>
 800ef6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ef70:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ef74:	e795      	b.n	800eea2 <_dtoa_r+0x6fa>
 800ef76:	9b07      	ldr	r3, [sp, #28]
 800ef78:	f109 37ff 	add.w	r7, r9, #4294967295	; 0xffffffff
 800ef7c:	42bb      	cmp	r3, r7
 800ef7e:	bfbf      	itttt	lt
 800ef80:	9b07      	ldrlt	r3, [sp, #28]
 800ef82:	9707      	strlt	r7, [sp, #28]
 800ef84:	1afa      	sublt	r2, r7, r3
 800ef86:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800ef88:	bfbb      	ittet	lt
 800ef8a:	189b      	addlt	r3, r3, r2
 800ef8c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800ef8e:	1bdf      	subge	r7, r3, r7
 800ef90:	2700      	movlt	r7, #0
 800ef92:	f1b9 0f00 	cmp.w	r9, #0
 800ef96:	bfb5      	itete	lt
 800ef98:	9b05      	ldrlt	r3, [sp, #20]
 800ef9a:	9d05      	ldrge	r5, [sp, #20]
 800ef9c:	eba3 0509 	sublt.w	r5, r3, r9
 800efa0:	464b      	movge	r3, r9
 800efa2:	bfb8      	it	lt
 800efa4:	2300      	movlt	r3, #0
 800efa6:	e77e      	b.n	800eea6 <_dtoa_r+0x6fe>
 800efa8:	9f07      	ldr	r7, [sp, #28]
 800efaa:	9d05      	ldr	r5, [sp, #20]
 800efac:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 800efae:	e783      	b.n	800eeb8 <_dtoa_r+0x710>
 800efb0:	9a07      	ldr	r2, [sp, #28]
 800efb2:	e7ab      	b.n	800ef0c <_dtoa_r+0x764>
 800efb4:	2300      	movs	r3, #0
 800efb6:	e7d4      	b.n	800ef62 <_dtoa_r+0x7ba>
 800efb8:	9b00      	ldr	r3, [sp, #0]
 800efba:	e7d2      	b.n	800ef62 <_dtoa_r+0x7ba>
 800efbc:	2300      	movs	r3, #0
 800efbe:	9307      	str	r3, [sp, #28]
 800efc0:	693b      	ldr	r3, [r7, #16]
 800efc2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800efc6:	6918      	ldr	r0, [r3, #16]
 800efc8:	f000 fc2b 	bl	800f822 <__hi0bits>
 800efcc:	f1c0 0020 	rsb	r0, r0, #32
 800efd0:	4440      	add	r0, r8
 800efd2:	f010 001f 	ands.w	r0, r0, #31
 800efd6:	d047      	beq.n	800f068 <_dtoa_r+0x8c0>
 800efd8:	f1c0 0320 	rsb	r3, r0, #32
 800efdc:	2b04      	cmp	r3, #4
 800efde:	dd3b      	ble.n	800f058 <_dtoa_r+0x8b0>
 800efe0:	9b05      	ldr	r3, [sp, #20]
 800efe2:	f1c0 001c 	rsb	r0, r0, #28
 800efe6:	4403      	add	r3, r0
 800efe8:	9305      	str	r3, [sp, #20]
 800efea:	4405      	add	r5, r0
 800efec:	4480      	add	r8, r0
 800efee:	9b05      	ldr	r3, [sp, #20]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	dd05      	ble.n	800f000 <_dtoa_r+0x858>
 800eff4:	461a      	mov	r2, r3
 800eff6:	9904      	ldr	r1, [sp, #16]
 800eff8:	4620      	mov	r0, r4
 800effa:	f000 fd4d 	bl	800fa98 <__lshift>
 800effe:	9004      	str	r0, [sp, #16]
 800f000:	f1b8 0f00 	cmp.w	r8, #0
 800f004:	dd05      	ble.n	800f012 <_dtoa_r+0x86a>
 800f006:	4639      	mov	r1, r7
 800f008:	4642      	mov	r2, r8
 800f00a:	4620      	mov	r0, r4
 800f00c:	f000 fd44 	bl	800fa98 <__lshift>
 800f010:	4607      	mov	r7, r0
 800f012:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f014:	b353      	cbz	r3, 800f06c <_dtoa_r+0x8c4>
 800f016:	4639      	mov	r1, r7
 800f018:	9804      	ldr	r0, [sp, #16]
 800f01a:	f000 fd91 	bl	800fb40 <__mcmp>
 800f01e:	2800      	cmp	r0, #0
 800f020:	da24      	bge.n	800f06c <_dtoa_r+0x8c4>
 800f022:	2300      	movs	r3, #0
 800f024:	220a      	movs	r2, #10
 800f026:	9904      	ldr	r1, [sp, #16]
 800f028:	4620      	mov	r0, r4
 800f02a:	f000 fbbf 	bl	800f7ac <__multadd>
 800f02e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f030:	9004      	str	r0, [sp, #16]
 800f032:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f036:	2b00      	cmp	r3, #0
 800f038:	f000 814d 	beq.w	800f2d6 <_dtoa_r+0xb2e>
 800f03c:	2300      	movs	r3, #0
 800f03e:	4631      	mov	r1, r6
 800f040:	220a      	movs	r2, #10
 800f042:	4620      	mov	r0, r4
 800f044:	f000 fbb2 	bl	800f7ac <__multadd>
 800f048:	9b02      	ldr	r3, [sp, #8]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	4606      	mov	r6, r0
 800f04e:	dc4f      	bgt.n	800f0f0 <_dtoa_r+0x948>
 800f050:	9b06      	ldr	r3, [sp, #24]
 800f052:	2b02      	cmp	r3, #2
 800f054:	dd4c      	ble.n	800f0f0 <_dtoa_r+0x948>
 800f056:	e011      	b.n	800f07c <_dtoa_r+0x8d4>
 800f058:	d0c9      	beq.n	800efee <_dtoa_r+0x846>
 800f05a:	9a05      	ldr	r2, [sp, #20]
 800f05c:	331c      	adds	r3, #28
 800f05e:	441a      	add	r2, r3
 800f060:	9205      	str	r2, [sp, #20]
 800f062:	441d      	add	r5, r3
 800f064:	4498      	add	r8, r3
 800f066:	e7c2      	b.n	800efee <_dtoa_r+0x846>
 800f068:	4603      	mov	r3, r0
 800f06a:	e7f6      	b.n	800f05a <_dtoa_r+0x8b2>
 800f06c:	f1b9 0f00 	cmp.w	r9, #0
 800f070:	dc38      	bgt.n	800f0e4 <_dtoa_r+0x93c>
 800f072:	9b06      	ldr	r3, [sp, #24]
 800f074:	2b02      	cmp	r3, #2
 800f076:	dd35      	ble.n	800f0e4 <_dtoa_r+0x93c>
 800f078:	f8cd 9008 	str.w	r9, [sp, #8]
 800f07c:	9b02      	ldr	r3, [sp, #8]
 800f07e:	b963      	cbnz	r3, 800f09a <_dtoa_r+0x8f2>
 800f080:	4639      	mov	r1, r7
 800f082:	2205      	movs	r2, #5
 800f084:	4620      	mov	r0, r4
 800f086:	f000 fb91 	bl	800f7ac <__multadd>
 800f08a:	4601      	mov	r1, r0
 800f08c:	4607      	mov	r7, r0
 800f08e:	9804      	ldr	r0, [sp, #16]
 800f090:	f000 fd56 	bl	800fb40 <__mcmp>
 800f094:	2800      	cmp	r0, #0
 800f096:	f73f adcc 	bgt.w	800ec32 <_dtoa_r+0x48a>
 800f09a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f09c:	465d      	mov	r5, fp
 800f09e:	ea6f 0a03 	mvn.w	sl, r3
 800f0a2:	f04f 0900 	mov.w	r9, #0
 800f0a6:	4639      	mov	r1, r7
 800f0a8:	4620      	mov	r0, r4
 800f0aa:	f000 fb68 	bl	800f77e <_Bfree>
 800f0ae:	2e00      	cmp	r6, #0
 800f0b0:	f43f aeb7 	beq.w	800ee22 <_dtoa_r+0x67a>
 800f0b4:	f1b9 0f00 	cmp.w	r9, #0
 800f0b8:	d005      	beq.n	800f0c6 <_dtoa_r+0x91e>
 800f0ba:	45b1      	cmp	r9, r6
 800f0bc:	d003      	beq.n	800f0c6 <_dtoa_r+0x91e>
 800f0be:	4649      	mov	r1, r9
 800f0c0:	4620      	mov	r0, r4
 800f0c2:	f000 fb5c 	bl	800f77e <_Bfree>
 800f0c6:	4631      	mov	r1, r6
 800f0c8:	4620      	mov	r0, r4
 800f0ca:	f000 fb58 	bl	800f77e <_Bfree>
 800f0ce:	e6a8      	b.n	800ee22 <_dtoa_r+0x67a>
 800f0d0:	2700      	movs	r7, #0
 800f0d2:	463e      	mov	r6, r7
 800f0d4:	e7e1      	b.n	800f09a <_dtoa_r+0x8f2>
 800f0d6:	f8dd a020 	ldr.w	sl, [sp, #32]
 800f0da:	463e      	mov	r6, r7
 800f0dc:	e5a9      	b.n	800ec32 <_dtoa_r+0x48a>
 800f0de:	bf00      	nop
 800f0e0:	40240000 	.word	0x40240000
 800f0e4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f0e6:	f8cd 9008 	str.w	r9, [sp, #8]
 800f0ea:	2b00      	cmp	r3, #0
 800f0ec:	f000 80fa 	beq.w	800f2e4 <_dtoa_r+0xb3c>
 800f0f0:	2d00      	cmp	r5, #0
 800f0f2:	dd05      	ble.n	800f100 <_dtoa_r+0x958>
 800f0f4:	4631      	mov	r1, r6
 800f0f6:	462a      	mov	r2, r5
 800f0f8:	4620      	mov	r0, r4
 800f0fa:	f000 fccd 	bl	800fa98 <__lshift>
 800f0fe:	4606      	mov	r6, r0
 800f100:	9b07      	ldr	r3, [sp, #28]
 800f102:	2b00      	cmp	r3, #0
 800f104:	d04c      	beq.n	800f1a0 <_dtoa_r+0x9f8>
 800f106:	6871      	ldr	r1, [r6, #4]
 800f108:	4620      	mov	r0, r4
 800f10a:	f000 fb04 	bl	800f716 <_Balloc>
 800f10e:	6932      	ldr	r2, [r6, #16]
 800f110:	3202      	adds	r2, #2
 800f112:	4605      	mov	r5, r0
 800f114:	0092      	lsls	r2, r2, #2
 800f116:	f106 010c 	add.w	r1, r6, #12
 800f11a:	300c      	adds	r0, #12
 800f11c:	f000 faf0 	bl	800f700 <memcpy>
 800f120:	2201      	movs	r2, #1
 800f122:	4629      	mov	r1, r5
 800f124:	4620      	mov	r0, r4
 800f126:	f000 fcb7 	bl	800fa98 <__lshift>
 800f12a:	9b00      	ldr	r3, [sp, #0]
 800f12c:	f8cd b014 	str.w	fp, [sp, #20]
 800f130:	f003 0301 	and.w	r3, r3, #1
 800f134:	46b1      	mov	r9, r6
 800f136:	9307      	str	r3, [sp, #28]
 800f138:	4606      	mov	r6, r0
 800f13a:	4639      	mov	r1, r7
 800f13c:	9804      	ldr	r0, [sp, #16]
 800f13e:	f7ff faa7 	bl	800e690 <quorem>
 800f142:	4649      	mov	r1, r9
 800f144:	4605      	mov	r5, r0
 800f146:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f14a:	9804      	ldr	r0, [sp, #16]
 800f14c:	f000 fcf8 	bl	800fb40 <__mcmp>
 800f150:	4632      	mov	r2, r6
 800f152:	9000      	str	r0, [sp, #0]
 800f154:	4639      	mov	r1, r7
 800f156:	4620      	mov	r0, r4
 800f158:	f000 fd0c 	bl	800fb74 <__mdiff>
 800f15c:	68c3      	ldr	r3, [r0, #12]
 800f15e:	4602      	mov	r2, r0
 800f160:	bb03      	cbnz	r3, 800f1a4 <_dtoa_r+0x9fc>
 800f162:	4601      	mov	r1, r0
 800f164:	9008      	str	r0, [sp, #32]
 800f166:	9804      	ldr	r0, [sp, #16]
 800f168:	f000 fcea 	bl	800fb40 <__mcmp>
 800f16c:	9a08      	ldr	r2, [sp, #32]
 800f16e:	4603      	mov	r3, r0
 800f170:	4611      	mov	r1, r2
 800f172:	4620      	mov	r0, r4
 800f174:	9308      	str	r3, [sp, #32]
 800f176:	f000 fb02 	bl	800f77e <_Bfree>
 800f17a:	9b08      	ldr	r3, [sp, #32]
 800f17c:	b9a3      	cbnz	r3, 800f1a8 <_dtoa_r+0xa00>
 800f17e:	9a06      	ldr	r2, [sp, #24]
 800f180:	b992      	cbnz	r2, 800f1a8 <_dtoa_r+0xa00>
 800f182:	9a07      	ldr	r2, [sp, #28]
 800f184:	b982      	cbnz	r2, 800f1a8 <_dtoa_r+0xa00>
 800f186:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f18a:	d029      	beq.n	800f1e0 <_dtoa_r+0xa38>
 800f18c:	9b00      	ldr	r3, [sp, #0]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	dd01      	ble.n	800f196 <_dtoa_r+0x9ee>
 800f192:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800f196:	9b05      	ldr	r3, [sp, #20]
 800f198:	1c5d      	adds	r5, r3, #1
 800f19a:	f883 8000 	strb.w	r8, [r3]
 800f19e:	e782      	b.n	800f0a6 <_dtoa_r+0x8fe>
 800f1a0:	4630      	mov	r0, r6
 800f1a2:	e7c2      	b.n	800f12a <_dtoa_r+0x982>
 800f1a4:	2301      	movs	r3, #1
 800f1a6:	e7e3      	b.n	800f170 <_dtoa_r+0x9c8>
 800f1a8:	9a00      	ldr	r2, [sp, #0]
 800f1aa:	2a00      	cmp	r2, #0
 800f1ac:	db04      	blt.n	800f1b8 <_dtoa_r+0xa10>
 800f1ae:	d125      	bne.n	800f1fc <_dtoa_r+0xa54>
 800f1b0:	9a06      	ldr	r2, [sp, #24]
 800f1b2:	bb1a      	cbnz	r2, 800f1fc <_dtoa_r+0xa54>
 800f1b4:	9a07      	ldr	r2, [sp, #28]
 800f1b6:	bb0a      	cbnz	r2, 800f1fc <_dtoa_r+0xa54>
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	ddec      	ble.n	800f196 <_dtoa_r+0x9ee>
 800f1bc:	2201      	movs	r2, #1
 800f1be:	9904      	ldr	r1, [sp, #16]
 800f1c0:	4620      	mov	r0, r4
 800f1c2:	f000 fc69 	bl	800fa98 <__lshift>
 800f1c6:	4639      	mov	r1, r7
 800f1c8:	9004      	str	r0, [sp, #16]
 800f1ca:	f000 fcb9 	bl	800fb40 <__mcmp>
 800f1ce:	2800      	cmp	r0, #0
 800f1d0:	dc03      	bgt.n	800f1da <_dtoa_r+0xa32>
 800f1d2:	d1e0      	bne.n	800f196 <_dtoa_r+0x9ee>
 800f1d4:	f018 0f01 	tst.w	r8, #1
 800f1d8:	d0dd      	beq.n	800f196 <_dtoa_r+0x9ee>
 800f1da:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f1de:	d1d8      	bne.n	800f192 <_dtoa_r+0x9ea>
 800f1e0:	9b05      	ldr	r3, [sp, #20]
 800f1e2:	9a05      	ldr	r2, [sp, #20]
 800f1e4:	1c5d      	adds	r5, r3, #1
 800f1e6:	2339      	movs	r3, #57	; 0x39
 800f1e8:	7013      	strb	r3, [r2, #0]
 800f1ea:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f1ee:	2b39      	cmp	r3, #57	; 0x39
 800f1f0:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800f1f4:	d04f      	beq.n	800f296 <_dtoa_r+0xaee>
 800f1f6:	3301      	adds	r3, #1
 800f1f8:	7013      	strb	r3, [r2, #0]
 800f1fa:	e754      	b.n	800f0a6 <_dtoa_r+0x8fe>
 800f1fc:	9a05      	ldr	r2, [sp, #20]
 800f1fe:	2b00      	cmp	r3, #0
 800f200:	f102 0501 	add.w	r5, r2, #1
 800f204:	dd06      	ble.n	800f214 <_dtoa_r+0xa6c>
 800f206:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 800f20a:	d0e9      	beq.n	800f1e0 <_dtoa_r+0xa38>
 800f20c:	f108 0801 	add.w	r8, r8, #1
 800f210:	9b05      	ldr	r3, [sp, #20]
 800f212:	e7c2      	b.n	800f19a <_dtoa_r+0x9f2>
 800f214:	9a02      	ldr	r2, [sp, #8]
 800f216:	f805 8c01 	strb.w	r8, [r5, #-1]
 800f21a:	eba5 030b 	sub.w	r3, r5, fp
 800f21e:	4293      	cmp	r3, r2
 800f220:	d021      	beq.n	800f266 <_dtoa_r+0xabe>
 800f222:	2300      	movs	r3, #0
 800f224:	220a      	movs	r2, #10
 800f226:	9904      	ldr	r1, [sp, #16]
 800f228:	4620      	mov	r0, r4
 800f22a:	f000 fabf 	bl	800f7ac <__multadd>
 800f22e:	45b1      	cmp	r9, r6
 800f230:	9004      	str	r0, [sp, #16]
 800f232:	f04f 0300 	mov.w	r3, #0
 800f236:	f04f 020a 	mov.w	r2, #10
 800f23a:	4649      	mov	r1, r9
 800f23c:	4620      	mov	r0, r4
 800f23e:	d105      	bne.n	800f24c <_dtoa_r+0xaa4>
 800f240:	f000 fab4 	bl	800f7ac <__multadd>
 800f244:	4681      	mov	r9, r0
 800f246:	4606      	mov	r6, r0
 800f248:	9505      	str	r5, [sp, #20]
 800f24a:	e776      	b.n	800f13a <_dtoa_r+0x992>
 800f24c:	f000 faae 	bl	800f7ac <__multadd>
 800f250:	4631      	mov	r1, r6
 800f252:	4681      	mov	r9, r0
 800f254:	2300      	movs	r3, #0
 800f256:	220a      	movs	r2, #10
 800f258:	4620      	mov	r0, r4
 800f25a:	f000 faa7 	bl	800f7ac <__multadd>
 800f25e:	4606      	mov	r6, r0
 800f260:	e7f2      	b.n	800f248 <_dtoa_r+0xaa0>
 800f262:	f04f 0900 	mov.w	r9, #0
 800f266:	2201      	movs	r2, #1
 800f268:	9904      	ldr	r1, [sp, #16]
 800f26a:	4620      	mov	r0, r4
 800f26c:	f000 fc14 	bl	800fa98 <__lshift>
 800f270:	4639      	mov	r1, r7
 800f272:	9004      	str	r0, [sp, #16]
 800f274:	f000 fc64 	bl	800fb40 <__mcmp>
 800f278:	2800      	cmp	r0, #0
 800f27a:	dcb6      	bgt.n	800f1ea <_dtoa_r+0xa42>
 800f27c:	d102      	bne.n	800f284 <_dtoa_r+0xadc>
 800f27e:	f018 0f01 	tst.w	r8, #1
 800f282:	d1b2      	bne.n	800f1ea <_dtoa_r+0xa42>
 800f284:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800f288:	2b30      	cmp	r3, #48	; 0x30
 800f28a:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
 800f28e:	f47f af0a 	bne.w	800f0a6 <_dtoa_r+0x8fe>
 800f292:	4615      	mov	r5, r2
 800f294:	e7f6      	b.n	800f284 <_dtoa_r+0xadc>
 800f296:	4593      	cmp	fp, r2
 800f298:	d105      	bne.n	800f2a6 <_dtoa_r+0xafe>
 800f29a:	2331      	movs	r3, #49	; 0x31
 800f29c:	f10a 0a01 	add.w	sl, sl, #1
 800f2a0:	f88b 3000 	strb.w	r3, [fp]
 800f2a4:	e6ff      	b.n	800f0a6 <_dtoa_r+0x8fe>
 800f2a6:	4615      	mov	r5, r2
 800f2a8:	e79f      	b.n	800f1ea <_dtoa_r+0xa42>
 800f2aa:	f8df b064 	ldr.w	fp, [pc, #100]	; 800f310 <_dtoa_r+0xb68>
 800f2ae:	e007      	b.n	800f2c0 <_dtoa_r+0xb18>
 800f2b0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f2b2:	f8df b060 	ldr.w	fp, [pc, #96]	; 800f314 <_dtoa_r+0xb6c>
 800f2b6:	b11b      	cbz	r3, 800f2c0 <_dtoa_r+0xb18>
 800f2b8:	f10b 0308 	add.w	r3, fp, #8
 800f2bc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800f2be:	6013      	str	r3, [r2, #0]
 800f2c0:	4658      	mov	r0, fp
 800f2c2:	b017      	add	sp, #92	; 0x5c
 800f2c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2c8:	9b06      	ldr	r3, [sp, #24]
 800f2ca:	2b01      	cmp	r3, #1
 800f2cc:	f77f ae35 	ble.w	800ef3a <_dtoa_r+0x792>
 800f2d0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f2d2:	9307      	str	r3, [sp, #28]
 800f2d4:	e649      	b.n	800ef6a <_dtoa_r+0x7c2>
 800f2d6:	9b02      	ldr	r3, [sp, #8]
 800f2d8:	2b00      	cmp	r3, #0
 800f2da:	dc03      	bgt.n	800f2e4 <_dtoa_r+0xb3c>
 800f2dc:	9b06      	ldr	r3, [sp, #24]
 800f2de:	2b02      	cmp	r3, #2
 800f2e0:	f73f aecc 	bgt.w	800f07c <_dtoa_r+0x8d4>
 800f2e4:	465d      	mov	r5, fp
 800f2e6:	4639      	mov	r1, r7
 800f2e8:	9804      	ldr	r0, [sp, #16]
 800f2ea:	f7ff f9d1 	bl	800e690 <quorem>
 800f2ee:	f100 0830 	add.w	r8, r0, #48	; 0x30
 800f2f2:	f805 8b01 	strb.w	r8, [r5], #1
 800f2f6:	9a02      	ldr	r2, [sp, #8]
 800f2f8:	eba5 030b 	sub.w	r3, r5, fp
 800f2fc:	429a      	cmp	r2, r3
 800f2fe:	ddb0      	ble.n	800f262 <_dtoa_r+0xaba>
 800f300:	2300      	movs	r3, #0
 800f302:	220a      	movs	r2, #10
 800f304:	9904      	ldr	r1, [sp, #16]
 800f306:	4620      	mov	r0, r4
 800f308:	f000 fa50 	bl	800f7ac <__multadd>
 800f30c:	9004      	str	r0, [sp, #16]
 800f30e:	e7ea      	b.n	800f2e6 <_dtoa_r+0xb3e>
 800f310:	08011130 	.word	0x08011130
 800f314:	08011154 	.word	0x08011154

0800f318 <__sflush_r>:
 800f318:	898a      	ldrh	r2, [r1, #12]
 800f31a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f31e:	4605      	mov	r5, r0
 800f320:	0710      	lsls	r0, r2, #28
 800f322:	460c      	mov	r4, r1
 800f324:	d458      	bmi.n	800f3d8 <__sflush_r+0xc0>
 800f326:	684b      	ldr	r3, [r1, #4]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	dc05      	bgt.n	800f338 <__sflush_r+0x20>
 800f32c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f32e:	2b00      	cmp	r3, #0
 800f330:	dc02      	bgt.n	800f338 <__sflush_r+0x20>
 800f332:	2000      	movs	r0, #0
 800f334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f338:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f33a:	2e00      	cmp	r6, #0
 800f33c:	d0f9      	beq.n	800f332 <__sflush_r+0x1a>
 800f33e:	2300      	movs	r3, #0
 800f340:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f344:	682f      	ldr	r7, [r5, #0]
 800f346:	6a21      	ldr	r1, [r4, #32]
 800f348:	602b      	str	r3, [r5, #0]
 800f34a:	d032      	beq.n	800f3b2 <__sflush_r+0x9a>
 800f34c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f34e:	89a3      	ldrh	r3, [r4, #12]
 800f350:	075a      	lsls	r2, r3, #29
 800f352:	d505      	bpl.n	800f360 <__sflush_r+0x48>
 800f354:	6863      	ldr	r3, [r4, #4]
 800f356:	1ac0      	subs	r0, r0, r3
 800f358:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f35a:	b10b      	cbz	r3, 800f360 <__sflush_r+0x48>
 800f35c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f35e:	1ac0      	subs	r0, r0, r3
 800f360:	2300      	movs	r3, #0
 800f362:	4602      	mov	r2, r0
 800f364:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f366:	6a21      	ldr	r1, [r4, #32]
 800f368:	4628      	mov	r0, r5
 800f36a:	47b0      	blx	r6
 800f36c:	1c43      	adds	r3, r0, #1
 800f36e:	89a3      	ldrh	r3, [r4, #12]
 800f370:	d106      	bne.n	800f380 <__sflush_r+0x68>
 800f372:	6829      	ldr	r1, [r5, #0]
 800f374:	291d      	cmp	r1, #29
 800f376:	d848      	bhi.n	800f40a <__sflush_r+0xf2>
 800f378:	4a29      	ldr	r2, [pc, #164]	; (800f420 <__sflush_r+0x108>)
 800f37a:	40ca      	lsrs	r2, r1
 800f37c:	07d6      	lsls	r6, r2, #31
 800f37e:	d544      	bpl.n	800f40a <__sflush_r+0xf2>
 800f380:	2200      	movs	r2, #0
 800f382:	6062      	str	r2, [r4, #4]
 800f384:	04d9      	lsls	r1, r3, #19
 800f386:	6922      	ldr	r2, [r4, #16]
 800f388:	6022      	str	r2, [r4, #0]
 800f38a:	d504      	bpl.n	800f396 <__sflush_r+0x7e>
 800f38c:	1c42      	adds	r2, r0, #1
 800f38e:	d101      	bne.n	800f394 <__sflush_r+0x7c>
 800f390:	682b      	ldr	r3, [r5, #0]
 800f392:	b903      	cbnz	r3, 800f396 <__sflush_r+0x7e>
 800f394:	6560      	str	r0, [r4, #84]	; 0x54
 800f396:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f398:	602f      	str	r7, [r5, #0]
 800f39a:	2900      	cmp	r1, #0
 800f39c:	d0c9      	beq.n	800f332 <__sflush_r+0x1a>
 800f39e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f3a2:	4299      	cmp	r1, r3
 800f3a4:	d002      	beq.n	800f3ac <__sflush_r+0x94>
 800f3a6:	4628      	mov	r0, r5
 800f3a8:	f000 fc9e 	bl	800fce8 <_free_r>
 800f3ac:	2000      	movs	r0, #0
 800f3ae:	6360      	str	r0, [r4, #52]	; 0x34
 800f3b0:	e7c0      	b.n	800f334 <__sflush_r+0x1c>
 800f3b2:	2301      	movs	r3, #1
 800f3b4:	4628      	mov	r0, r5
 800f3b6:	47b0      	blx	r6
 800f3b8:	1c41      	adds	r1, r0, #1
 800f3ba:	d1c8      	bne.n	800f34e <__sflush_r+0x36>
 800f3bc:	682b      	ldr	r3, [r5, #0]
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d0c5      	beq.n	800f34e <__sflush_r+0x36>
 800f3c2:	2b1d      	cmp	r3, #29
 800f3c4:	d001      	beq.n	800f3ca <__sflush_r+0xb2>
 800f3c6:	2b16      	cmp	r3, #22
 800f3c8:	d101      	bne.n	800f3ce <__sflush_r+0xb6>
 800f3ca:	602f      	str	r7, [r5, #0]
 800f3cc:	e7b1      	b.n	800f332 <__sflush_r+0x1a>
 800f3ce:	89a3      	ldrh	r3, [r4, #12]
 800f3d0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f3d4:	81a3      	strh	r3, [r4, #12]
 800f3d6:	e7ad      	b.n	800f334 <__sflush_r+0x1c>
 800f3d8:	690f      	ldr	r7, [r1, #16]
 800f3da:	2f00      	cmp	r7, #0
 800f3dc:	d0a9      	beq.n	800f332 <__sflush_r+0x1a>
 800f3de:	0793      	lsls	r3, r2, #30
 800f3e0:	680e      	ldr	r6, [r1, #0]
 800f3e2:	bf08      	it	eq
 800f3e4:	694b      	ldreq	r3, [r1, #20]
 800f3e6:	600f      	str	r7, [r1, #0]
 800f3e8:	bf18      	it	ne
 800f3ea:	2300      	movne	r3, #0
 800f3ec:	eba6 0807 	sub.w	r8, r6, r7
 800f3f0:	608b      	str	r3, [r1, #8]
 800f3f2:	f1b8 0f00 	cmp.w	r8, #0
 800f3f6:	dd9c      	ble.n	800f332 <__sflush_r+0x1a>
 800f3f8:	4643      	mov	r3, r8
 800f3fa:	463a      	mov	r2, r7
 800f3fc:	6a21      	ldr	r1, [r4, #32]
 800f3fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f400:	4628      	mov	r0, r5
 800f402:	47b0      	blx	r6
 800f404:	2800      	cmp	r0, #0
 800f406:	dc06      	bgt.n	800f416 <__sflush_r+0xfe>
 800f408:	89a3      	ldrh	r3, [r4, #12]
 800f40a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f40e:	81a3      	strh	r3, [r4, #12]
 800f410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f414:	e78e      	b.n	800f334 <__sflush_r+0x1c>
 800f416:	4407      	add	r7, r0
 800f418:	eba8 0800 	sub.w	r8, r8, r0
 800f41c:	e7e9      	b.n	800f3f2 <__sflush_r+0xda>
 800f41e:	bf00      	nop
 800f420:	20400001 	.word	0x20400001

0800f424 <_fflush_r>:
 800f424:	b538      	push	{r3, r4, r5, lr}
 800f426:	690b      	ldr	r3, [r1, #16]
 800f428:	4605      	mov	r5, r0
 800f42a:	460c      	mov	r4, r1
 800f42c:	b1db      	cbz	r3, 800f466 <_fflush_r+0x42>
 800f42e:	b118      	cbz	r0, 800f438 <_fflush_r+0x14>
 800f430:	6983      	ldr	r3, [r0, #24]
 800f432:	b90b      	cbnz	r3, 800f438 <_fflush_r+0x14>
 800f434:	f000 f860 	bl	800f4f8 <__sinit>
 800f438:	4b0c      	ldr	r3, [pc, #48]	; (800f46c <_fflush_r+0x48>)
 800f43a:	429c      	cmp	r4, r3
 800f43c:	d109      	bne.n	800f452 <_fflush_r+0x2e>
 800f43e:	686c      	ldr	r4, [r5, #4]
 800f440:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f444:	b17b      	cbz	r3, 800f466 <_fflush_r+0x42>
 800f446:	4621      	mov	r1, r4
 800f448:	4628      	mov	r0, r5
 800f44a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f44e:	f7ff bf63 	b.w	800f318 <__sflush_r>
 800f452:	4b07      	ldr	r3, [pc, #28]	; (800f470 <_fflush_r+0x4c>)
 800f454:	429c      	cmp	r4, r3
 800f456:	d101      	bne.n	800f45c <_fflush_r+0x38>
 800f458:	68ac      	ldr	r4, [r5, #8]
 800f45a:	e7f1      	b.n	800f440 <_fflush_r+0x1c>
 800f45c:	4b05      	ldr	r3, [pc, #20]	; (800f474 <_fflush_r+0x50>)
 800f45e:	429c      	cmp	r4, r3
 800f460:	bf08      	it	eq
 800f462:	68ec      	ldreq	r4, [r5, #12]
 800f464:	e7ec      	b.n	800f440 <_fflush_r+0x1c>
 800f466:	2000      	movs	r0, #0
 800f468:	bd38      	pop	{r3, r4, r5, pc}
 800f46a:	bf00      	nop
 800f46c:	08011184 	.word	0x08011184
 800f470:	080111a4 	.word	0x080111a4
 800f474:	08011164 	.word	0x08011164

0800f478 <std>:
 800f478:	2300      	movs	r3, #0
 800f47a:	b510      	push	{r4, lr}
 800f47c:	4604      	mov	r4, r0
 800f47e:	e9c0 3300 	strd	r3, r3, [r0]
 800f482:	6083      	str	r3, [r0, #8]
 800f484:	8181      	strh	r1, [r0, #12]
 800f486:	6643      	str	r3, [r0, #100]	; 0x64
 800f488:	81c2      	strh	r2, [r0, #14]
 800f48a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f48e:	6183      	str	r3, [r0, #24]
 800f490:	4619      	mov	r1, r3
 800f492:	2208      	movs	r2, #8
 800f494:	305c      	adds	r0, #92	; 0x5c
 800f496:	f7fe fb2f 	bl	800daf8 <memset>
 800f49a:	4b05      	ldr	r3, [pc, #20]	; (800f4b0 <std+0x38>)
 800f49c:	6263      	str	r3, [r4, #36]	; 0x24
 800f49e:	4b05      	ldr	r3, [pc, #20]	; (800f4b4 <std+0x3c>)
 800f4a0:	62a3      	str	r3, [r4, #40]	; 0x28
 800f4a2:	4b05      	ldr	r3, [pc, #20]	; (800f4b8 <std+0x40>)
 800f4a4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f4a6:	4b05      	ldr	r3, [pc, #20]	; (800f4bc <std+0x44>)
 800f4a8:	6224      	str	r4, [r4, #32]
 800f4aa:	6323      	str	r3, [r4, #48]	; 0x30
 800f4ac:	bd10      	pop	{r4, pc}
 800f4ae:	bf00      	nop
 800f4b0:	080100fd 	.word	0x080100fd
 800f4b4:	0801011f 	.word	0x0801011f
 800f4b8:	08010157 	.word	0x08010157
 800f4bc:	0801017b 	.word	0x0801017b

0800f4c0 <_cleanup_r>:
 800f4c0:	4901      	ldr	r1, [pc, #4]	; (800f4c8 <_cleanup_r+0x8>)
 800f4c2:	f000 b885 	b.w	800f5d0 <_fwalk_reent>
 800f4c6:	bf00      	nop
 800f4c8:	0800f425 	.word	0x0800f425

0800f4cc <__sfmoreglue>:
 800f4cc:	b570      	push	{r4, r5, r6, lr}
 800f4ce:	1e4a      	subs	r2, r1, #1
 800f4d0:	2568      	movs	r5, #104	; 0x68
 800f4d2:	4355      	muls	r5, r2
 800f4d4:	460e      	mov	r6, r1
 800f4d6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f4da:	f000 fc53 	bl	800fd84 <_malloc_r>
 800f4de:	4604      	mov	r4, r0
 800f4e0:	b140      	cbz	r0, 800f4f4 <__sfmoreglue+0x28>
 800f4e2:	2100      	movs	r1, #0
 800f4e4:	e9c0 1600 	strd	r1, r6, [r0]
 800f4e8:	300c      	adds	r0, #12
 800f4ea:	60a0      	str	r0, [r4, #8]
 800f4ec:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f4f0:	f7fe fb02 	bl	800daf8 <memset>
 800f4f4:	4620      	mov	r0, r4
 800f4f6:	bd70      	pop	{r4, r5, r6, pc}

0800f4f8 <__sinit>:
 800f4f8:	6983      	ldr	r3, [r0, #24]
 800f4fa:	b510      	push	{r4, lr}
 800f4fc:	4604      	mov	r4, r0
 800f4fe:	bb33      	cbnz	r3, 800f54e <__sinit+0x56>
 800f500:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800f504:	6503      	str	r3, [r0, #80]	; 0x50
 800f506:	4b12      	ldr	r3, [pc, #72]	; (800f550 <__sinit+0x58>)
 800f508:	4a12      	ldr	r2, [pc, #72]	; (800f554 <__sinit+0x5c>)
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	6282      	str	r2, [r0, #40]	; 0x28
 800f50e:	4298      	cmp	r0, r3
 800f510:	bf04      	itt	eq
 800f512:	2301      	moveq	r3, #1
 800f514:	6183      	streq	r3, [r0, #24]
 800f516:	f000 f81f 	bl	800f558 <__sfp>
 800f51a:	6060      	str	r0, [r4, #4]
 800f51c:	4620      	mov	r0, r4
 800f51e:	f000 f81b 	bl	800f558 <__sfp>
 800f522:	60a0      	str	r0, [r4, #8]
 800f524:	4620      	mov	r0, r4
 800f526:	f000 f817 	bl	800f558 <__sfp>
 800f52a:	2200      	movs	r2, #0
 800f52c:	60e0      	str	r0, [r4, #12]
 800f52e:	2104      	movs	r1, #4
 800f530:	6860      	ldr	r0, [r4, #4]
 800f532:	f7ff ffa1 	bl	800f478 <std>
 800f536:	2201      	movs	r2, #1
 800f538:	2109      	movs	r1, #9
 800f53a:	68a0      	ldr	r0, [r4, #8]
 800f53c:	f7ff ff9c 	bl	800f478 <std>
 800f540:	2202      	movs	r2, #2
 800f542:	2112      	movs	r1, #18
 800f544:	68e0      	ldr	r0, [r4, #12]
 800f546:	f7ff ff97 	bl	800f478 <std>
 800f54a:	2301      	movs	r3, #1
 800f54c:	61a3      	str	r3, [r4, #24]
 800f54e:	bd10      	pop	{r4, pc}
 800f550:	0801111c 	.word	0x0801111c
 800f554:	0800f4c1 	.word	0x0800f4c1

0800f558 <__sfp>:
 800f558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f55a:	4b1b      	ldr	r3, [pc, #108]	; (800f5c8 <__sfp+0x70>)
 800f55c:	681e      	ldr	r6, [r3, #0]
 800f55e:	69b3      	ldr	r3, [r6, #24]
 800f560:	4607      	mov	r7, r0
 800f562:	b913      	cbnz	r3, 800f56a <__sfp+0x12>
 800f564:	4630      	mov	r0, r6
 800f566:	f7ff ffc7 	bl	800f4f8 <__sinit>
 800f56a:	3648      	adds	r6, #72	; 0x48
 800f56c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f570:	3b01      	subs	r3, #1
 800f572:	d503      	bpl.n	800f57c <__sfp+0x24>
 800f574:	6833      	ldr	r3, [r6, #0]
 800f576:	b133      	cbz	r3, 800f586 <__sfp+0x2e>
 800f578:	6836      	ldr	r6, [r6, #0]
 800f57a:	e7f7      	b.n	800f56c <__sfp+0x14>
 800f57c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f580:	b16d      	cbz	r5, 800f59e <__sfp+0x46>
 800f582:	3468      	adds	r4, #104	; 0x68
 800f584:	e7f4      	b.n	800f570 <__sfp+0x18>
 800f586:	2104      	movs	r1, #4
 800f588:	4638      	mov	r0, r7
 800f58a:	f7ff ff9f 	bl	800f4cc <__sfmoreglue>
 800f58e:	6030      	str	r0, [r6, #0]
 800f590:	2800      	cmp	r0, #0
 800f592:	d1f1      	bne.n	800f578 <__sfp+0x20>
 800f594:	230c      	movs	r3, #12
 800f596:	603b      	str	r3, [r7, #0]
 800f598:	4604      	mov	r4, r0
 800f59a:	4620      	mov	r0, r4
 800f59c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f59e:	4b0b      	ldr	r3, [pc, #44]	; (800f5cc <__sfp+0x74>)
 800f5a0:	6665      	str	r5, [r4, #100]	; 0x64
 800f5a2:	e9c4 5500 	strd	r5, r5, [r4]
 800f5a6:	60a5      	str	r5, [r4, #8]
 800f5a8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800f5ac:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800f5b0:	2208      	movs	r2, #8
 800f5b2:	4629      	mov	r1, r5
 800f5b4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f5b8:	f7fe fa9e 	bl	800daf8 <memset>
 800f5bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f5c0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f5c4:	e7e9      	b.n	800f59a <__sfp+0x42>
 800f5c6:	bf00      	nop
 800f5c8:	0801111c 	.word	0x0801111c
 800f5cc:	ffff0001 	.word	0xffff0001

0800f5d0 <_fwalk_reent>:
 800f5d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5d4:	4680      	mov	r8, r0
 800f5d6:	4689      	mov	r9, r1
 800f5d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f5dc:	2600      	movs	r6, #0
 800f5de:	b914      	cbnz	r4, 800f5e6 <_fwalk_reent+0x16>
 800f5e0:	4630      	mov	r0, r6
 800f5e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5e6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800f5ea:	3f01      	subs	r7, #1
 800f5ec:	d501      	bpl.n	800f5f2 <_fwalk_reent+0x22>
 800f5ee:	6824      	ldr	r4, [r4, #0]
 800f5f0:	e7f5      	b.n	800f5de <_fwalk_reent+0xe>
 800f5f2:	89ab      	ldrh	r3, [r5, #12]
 800f5f4:	2b01      	cmp	r3, #1
 800f5f6:	d907      	bls.n	800f608 <_fwalk_reent+0x38>
 800f5f8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f5fc:	3301      	adds	r3, #1
 800f5fe:	d003      	beq.n	800f608 <_fwalk_reent+0x38>
 800f600:	4629      	mov	r1, r5
 800f602:	4640      	mov	r0, r8
 800f604:	47c8      	blx	r9
 800f606:	4306      	orrs	r6, r0
 800f608:	3568      	adds	r5, #104	; 0x68
 800f60a:	e7ee      	b.n	800f5ea <_fwalk_reent+0x1a>

0800f60c <_localeconv_r>:
 800f60c:	4b04      	ldr	r3, [pc, #16]	; (800f620 <_localeconv_r+0x14>)
 800f60e:	681b      	ldr	r3, [r3, #0]
 800f610:	6a18      	ldr	r0, [r3, #32]
 800f612:	4b04      	ldr	r3, [pc, #16]	; (800f624 <_localeconv_r+0x18>)
 800f614:	2800      	cmp	r0, #0
 800f616:	bf08      	it	eq
 800f618:	4618      	moveq	r0, r3
 800f61a:	30f0      	adds	r0, #240	; 0xf0
 800f61c:	4770      	bx	lr
 800f61e:	bf00      	nop
 800f620:	20001cf8 	.word	0x20001cf8
 800f624:	20001d5c 	.word	0x20001d5c

0800f628 <__swhatbuf_r>:
 800f628:	b570      	push	{r4, r5, r6, lr}
 800f62a:	460e      	mov	r6, r1
 800f62c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f630:	2900      	cmp	r1, #0
 800f632:	b096      	sub	sp, #88	; 0x58
 800f634:	4614      	mov	r4, r2
 800f636:	461d      	mov	r5, r3
 800f638:	da07      	bge.n	800f64a <__swhatbuf_r+0x22>
 800f63a:	2300      	movs	r3, #0
 800f63c:	602b      	str	r3, [r5, #0]
 800f63e:	89b3      	ldrh	r3, [r6, #12]
 800f640:	061a      	lsls	r2, r3, #24
 800f642:	d410      	bmi.n	800f666 <__swhatbuf_r+0x3e>
 800f644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f648:	e00e      	b.n	800f668 <__swhatbuf_r+0x40>
 800f64a:	466a      	mov	r2, sp
 800f64c:	f000 fdbc 	bl	80101c8 <_fstat_r>
 800f650:	2800      	cmp	r0, #0
 800f652:	dbf2      	blt.n	800f63a <__swhatbuf_r+0x12>
 800f654:	9a01      	ldr	r2, [sp, #4]
 800f656:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f65a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f65e:	425a      	negs	r2, r3
 800f660:	415a      	adcs	r2, r3
 800f662:	602a      	str	r2, [r5, #0]
 800f664:	e7ee      	b.n	800f644 <__swhatbuf_r+0x1c>
 800f666:	2340      	movs	r3, #64	; 0x40
 800f668:	2000      	movs	r0, #0
 800f66a:	6023      	str	r3, [r4, #0]
 800f66c:	b016      	add	sp, #88	; 0x58
 800f66e:	bd70      	pop	{r4, r5, r6, pc}

0800f670 <__smakebuf_r>:
 800f670:	898b      	ldrh	r3, [r1, #12]
 800f672:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f674:	079d      	lsls	r5, r3, #30
 800f676:	4606      	mov	r6, r0
 800f678:	460c      	mov	r4, r1
 800f67a:	d507      	bpl.n	800f68c <__smakebuf_r+0x1c>
 800f67c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f680:	6023      	str	r3, [r4, #0]
 800f682:	6123      	str	r3, [r4, #16]
 800f684:	2301      	movs	r3, #1
 800f686:	6163      	str	r3, [r4, #20]
 800f688:	b002      	add	sp, #8
 800f68a:	bd70      	pop	{r4, r5, r6, pc}
 800f68c:	ab01      	add	r3, sp, #4
 800f68e:	466a      	mov	r2, sp
 800f690:	f7ff ffca 	bl	800f628 <__swhatbuf_r>
 800f694:	9900      	ldr	r1, [sp, #0]
 800f696:	4605      	mov	r5, r0
 800f698:	4630      	mov	r0, r6
 800f69a:	f000 fb73 	bl	800fd84 <_malloc_r>
 800f69e:	b948      	cbnz	r0, 800f6b4 <__smakebuf_r+0x44>
 800f6a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6a4:	059a      	lsls	r2, r3, #22
 800f6a6:	d4ef      	bmi.n	800f688 <__smakebuf_r+0x18>
 800f6a8:	f023 0303 	bic.w	r3, r3, #3
 800f6ac:	f043 0302 	orr.w	r3, r3, #2
 800f6b0:	81a3      	strh	r3, [r4, #12]
 800f6b2:	e7e3      	b.n	800f67c <__smakebuf_r+0xc>
 800f6b4:	4b0d      	ldr	r3, [pc, #52]	; (800f6ec <__smakebuf_r+0x7c>)
 800f6b6:	62b3      	str	r3, [r6, #40]	; 0x28
 800f6b8:	89a3      	ldrh	r3, [r4, #12]
 800f6ba:	6020      	str	r0, [r4, #0]
 800f6bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f6c0:	81a3      	strh	r3, [r4, #12]
 800f6c2:	9b00      	ldr	r3, [sp, #0]
 800f6c4:	6163      	str	r3, [r4, #20]
 800f6c6:	9b01      	ldr	r3, [sp, #4]
 800f6c8:	6120      	str	r0, [r4, #16]
 800f6ca:	b15b      	cbz	r3, 800f6e4 <__smakebuf_r+0x74>
 800f6cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f6d0:	4630      	mov	r0, r6
 800f6d2:	f000 fd8b 	bl	80101ec <_isatty_r>
 800f6d6:	b128      	cbz	r0, 800f6e4 <__smakebuf_r+0x74>
 800f6d8:	89a3      	ldrh	r3, [r4, #12]
 800f6da:	f023 0303 	bic.w	r3, r3, #3
 800f6de:	f043 0301 	orr.w	r3, r3, #1
 800f6e2:	81a3      	strh	r3, [r4, #12]
 800f6e4:	89a3      	ldrh	r3, [r4, #12]
 800f6e6:	431d      	orrs	r5, r3
 800f6e8:	81a5      	strh	r5, [r4, #12]
 800f6ea:	e7cd      	b.n	800f688 <__smakebuf_r+0x18>
 800f6ec:	0800f4c1 	.word	0x0800f4c1

0800f6f0 <malloc>:
 800f6f0:	4b02      	ldr	r3, [pc, #8]	; (800f6fc <malloc+0xc>)
 800f6f2:	4601      	mov	r1, r0
 800f6f4:	6818      	ldr	r0, [r3, #0]
 800f6f6:	f000 bb45 	b.w	800fd84 <_malloc_r>
 800f6fa:	bf00      	nop
 800f6fc:	20001cf8 	.word	0x20001cf8

0800f700 <memcpy>:
 800f700:	b510      	push	{r4, lr}
 800f702:	1e43      	subs	r3, r0, #1
 800f704:	440a      	add	r2, r1
 800f706:	4291      	cmp	r1, r2
 800f708:	d100      	bne.n	800f70c <memcpy+0xc>
 800f70a:	bd10      	pop	{r4, pc}
 800f70c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f710:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f714:	e7f7      	b.n	800f706 <memcpy+0x6>

0800f716 <_Balloc>:
 800f716:	b570      	push	{r4, r5, r6, lr}
 800f718:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f71a:	4604      	mov	r4, r0
 800f71c:	460e      	mov	r6, r1
 800f71e:	b93d      	cbnz	r5, 800f730 <_Balloc+0x1a>
 800f720:	2010      	movs	r0, #16
 800f722:	f7ff ffe5 	bl	800f6f0 <malloc>
 800f726:	6260      	str	r0, [r4, #36]	; 0x24
 800f728:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f72c:	6005      	str	r5, [r0, #0]
 800f72e:	60c5      	str	r5, [r0, #12]
 800f730:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f732:	68eb      	ldr	r3, [r5, #12]
 800f734:	b183      	cbz	r3, 800f758 <_Balloc+0x42>
 800f736:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f738:	68db      	ldr	r3, [r3, #12]
 800f73a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f73e:	b9b8      	cbnz	r0, 800f770 <_Balloc+0x5a>
 800f740:	2101      	movs	r1, #1
 800f742:	fa01 f506 	lsl.w	r5, r1, r6
 800f746:	1d6a      	adds	r2, r5, #5
 800f748:	0092      	lsls	r2, r2, #2
 800f74a:	4620      	mov	r0, r4
 800f74c:	f000 fabe 	bl	800fccc <_calloc_r>
 800f750:	b160      	cbz	r0, 800f76c <_Balloc+0x56>
 800f752:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800f756:	e00e      	b.n	800f776 <_Balloc+0x60>
 800f758:	2221      	movs	r2, #33	; 0x21
 800f75a:	2104      	movs	r1, #4
 800f75c:	4620      	mov	r0, r4
 800f75e:	f000 fab5 	bl	800fccc <_calloc_r>
 800f762:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f764:	60e8      	str	r0, [r5, #12]
 800f766:	68db      	ldr	r3, [r3, #12]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d1e4      	bne.n	800f736 <_Balloc+0x20>
 800f76c:	2000      	movs	r0, #0
 800f76e:	bd70      	pop	{r4, r5, r6, pc}
 800f770:	6802      	ldr	r2, [r0, #0]
 800f772:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f776:	2300      	movs	r3, #0
 800f778:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f77c:	e7f7      	b.n	800f76e <_Balloc+0x58>

0800f77e <_Bfree>:
 800f77e:	b570      	push	{r4, r5, r6, lr}
 800f780:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f782:	4606      	mov	r6, r0
 800f784:	460d      	mov	r5, r1
 800f786:	b93c      	cbnz	r4, 800f798 <_Bfree+0x1a>
 800f788:	2010      	movs	r0, #16
 800f78a:	f7ff ffb1 	bl	800f6f0 <malloc>
 800f78e:	6270      	str	r0, [r6, #36]	; 0x24
 800f790:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f794:	6004      	str	r4, [r0, #0]
 800f796:	60c4      	str	r4, [r0, #12]
 800f798:	b13d      	cbz	r5, 800f7aa <_Bfree+0x2c>
 800f79a:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f79c:	686a      	ldr	r2, [r5, #4]
 800f79e:	68db      	ldr	r3, [r3, #12]
 800f7a0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f7a4:	6029      	str	r1, [r5, #0]
 800f7a6:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f7aa:	bd70      	pop	{r4, r5, r6, pc}

0800f7ac <__multadd>:
 800f7ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7b0:	690d      	ldr	r5, [r1, #16]
 800f7b2:	461f      	mov	r7, r3
 800f7b4:	4606      	mov	r6, r0
 800f7b6:	460c      	mov	r4, r1
 800f7b8:	f101 0c14 	add.w	ip, r1, #20
 800f7bc:	2300      	movs	r3, #0
 800f7be:	f8dc 0000 	ldr.w	r0, [ip]
 800f7c2:	b281      	uxth	r1, r0
 800f7c4:	fb02 7101 	mla	r1, r2, r1, r7
 800f7c8:	0c0f      	lsrs	r7, r1, #16
 800f7ca:	0c00      	lsrs	r0, r0, #16
 800f7cc:	fb02 7000 	mla	r0, r2, r0, r7
 800f7d0:	b289      	uxth	r1, r1
 800f7d2:	3301      	adds	r3, #1
 800f7d4:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f7d8:	429d      	cmp	r5, r3
 800f7da:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f7de:	f84c 1b04 	str.w	r1, [ip], #4
 800f7e2:	dcec      	bgt.n	800f7be <__multadd+0x12>
 800f7e4:	b1d7      	cbz	r7, 800f81c <__multadd+0x70>
 800f7e6:	68a3      	ldr	r3, [r4, #8]
 800f7e8:	42ab      	cmp	r3, r5
 800f7ea:	dc12      	bgt.n	800f812 <__multadd+0x66>
 800f7ec:	6861      	ldr	r1, [r4, #4]
 800f7ee:	4630      	mov	r0, r6
 800f7f0:	3101      	adds	r1, #1
 800f7f2:	f7ff ff90 	bl	800f716 <_Balloc>
 800f7f6:	6922      	ldr	r2, [r4, #16]
 800f7f8:	3202      	adds	r2, #2
 800f7fa:	f104 010c 	add.w	r1, r4, #12
 800f7fe:	4680      	mov	r8, r0
 800f800:	0092      	lsls	r2, r2, #2
 800f802:	300c      	adds	r0, #12
 800f804:	f7ff ff7c 	bl	800f700 <memcpy>
 800f808:	4621      	mov	r1, r4
 800f80a:	4630      	mov	r0, r6
 800f80c:	f7ff ffb7 	bl	800f77e <_Bfree>
 800f810:	4644      	mov	r4, r8
 800f812:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f816:	3501      	adds	r5, #1
 800f818:	615f      	str	r7, [r3, #20]
 800f81a:	6125      	str	r5, [r4, #16]
 800f81c:	4620      	mov	r0, r4
 800f81e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f822 <__hi0bits>:
 800f822:	0c02      	lsrs	r2, r0, #16
 800f824:	0412      	lsls	r2, r2, #16
 800f826:	4603      	mov	r3, r0
 800f828:	b9b2      	cbnz	r2, 800f858 <__hi0bits+0x36>
 800f82a:	0403      	lsls	r3, r0, #16
 800f82c:	2010      	movs	r0, #16
 800f82e:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f832:	bf04      	itt	eq
 800f834:	021b      	lsleq	r3, r3, #8
 800f836:	3008      	addeq	r0, #8
 800f838:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f83c:	bf04      	itt	eq
 800f83e:	011b      	lsleq	r3, r3, #4
 800f840:	3004      	addeq	r0, #4
 800f842:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f846:	bf04      	itt	eq
 800f848:	009b      	lsleq	r3, r3, #2
 800f84a:	3002      	addeq	r0, #2
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	db06      	blt.n	800f85e <__hi0bits+0x3c>
 800f850:	005b      	lsls	r3, r3, #1
 800f852:	d503      	bpl.n	800f85c <__hi0bits+0x3a>
 800f854:	3001      	adds	r0, #1
 800f856:	4770      	bx	lr
 800f858:	2000      	movs	r0, #0
 800f85a:	e7e8      	b.n	800f82e <__hi0bits+0xc>
 800f85c:	2020      	movs	r0, #32
 800f85e:	4770      	bx	lr

0800f860 <__lo0bits>:
 800f860:	6803      	ldr	r3, [r0, #0]
 800f862:	f013 0207 	ands.w	r2, r3, #7
 800f866:	4601      	mov	r1, r0
 800f868:	d00b      	beq.n	800f882 <__lo0bits+0x22>
 800f86a:	07da      	lsls	r2, r3, #31
 800f86c:	d423      	bmi.n	800f8b6 <__lo0bits+0x56>
 800f86e:	0798      	lsls	r0, r3, #30
 800f870:	bf49      	itett	mi
 800f872:	085b      	lsrmi	r3, r3, #1
 800f874:	089b      	lsrpl	r3, r3, #2
 800f876:	2001      	movmi	r0, #1
 800f878:	600b      	strmi	r3, [r1, #0]
 800f87a:	bf5c      	itt	pl
 800f87c:	600b      	strpl	r3, [r1, #0]
 800f87e:	2002      	movpl	r0, #2
 800f880:	4770      	bx	lr
 800f882:	b298      	uxth	r0, r3
 800f884:	b9a8      	cbnz	r0, 800f8b2 <__lo0bits+0x52>
 800f886:	0c1b      	lsrs	r3, r3, #16
 800f888:	2010      	movs	r0, #16
 800f88a:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f88e:	bf04      	itt	eq
 800f890:	0a1b      	lsreq	r3, r3, #8
 800f892:	3008      	addeq	r0, #8
 800f894:	071a      	lsls	r2, r3, #28
 800f896:	bf04      	itt	eq
 800f898:	091b      	lsreq	r3, r3, #4
 800f89a:	3004      	addeq	r0, #4
 800f89c:	079a      	lsls	r2, r3, #30
 800f89e:	bf04      	itt	eq
 800f8a0:	089b      	lsreq	r3, r3, #2
 800f8a2:	3002      	addeq	r0, #2
 800f8a4:	07da      	lsls	r2, r3, #31
 800f8a6:	d402      	bmi.n	800f8ae <__lo0bits+0x4e>
 800f8a8:	085b      	lsrs	r3, r3, #1
 800f8aa:	d006      	beq.n	800f8ba <__lo0bits+0x5a>
 800f8ac:	3001      	adds	r0, #1
 800f8ae:	600b      	str	r3, [r1, #0]
 800f8b0:	4770      	bx	lr
 800f8b2:	4610      	mov	r0, r2
 800f8b4:	e7e9      	b.n	800f88a <__lo0bits+0x2a>
 800f8b6:	2000      	movs	r0, #0
 800f8b8:	4770      	bx	lr
 800f8ba:	2020      	movs	r0, #32
 800f8bc:	4770      	bx	lr

0800f8be <__i2b>:
 800f8be:	b510      	push	{r4, lr}
 800f8c0:	460c      	mov	r4, r1
 800f8c2:	2101      	movs	r1, #1
 800f8c4:	f7ff ff27 	bl	800f716 <_Balloc>
 800f8c8:	2201      	movs	r2, #1
 800f8ca:	6144      	str	r4, [r0, #20]
 800f8cc:	6102      	str	r2, [r0, #16]
 800f8ce:	bd10      	pop	{r4, pc}

0800f8d0 <__multiply>:
 800f8d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8d4:	4614      	mov	r4, r2
 800f8d6:	690a      	ldr	r2, [r1, #16]
 800f8d8:	6923      	ldr	r3, [r4, #16]
 800f8da:	429a      	cmp	r2, r3
 800f8dc:	bfb8      	it	lt
 800f8de:	460b      	movlt	r3, r1
 800f8e0:	4688      	mov	r8, r1
 800f8e2:	bfbc      	itt	lt
 800f8e4:	46a0      	movlt	r8, r4
 800f8e6:	461c      	movlt	r4, r3
 800f8e8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f8ec:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f8f0:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f8f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f8f8:	eb07 0609 	add.w	r6, r7, r9
 800f8fc:	42b3      	cmp	r3, r6
 800f8fe:	bfb8      	it	lt
 800f900:	3101      	addlt	r1, #1
 800f902:	f7ff ff08 	bl	800f716 <_Balloc>
 800f906:	f100 0514 	add.w	r5, r0, #20
 800f90a:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800f90e:	462b      	mov	r3, r5
 800f910:	2200      	movs	r2, #0
 800f912:	4573      	cmp	r3, lr
 800f914:	d316      	bcc.n	800f944 <__multiply+0x74>
 800f916:	f104 0214 	add.w	r2, r4, #20
 800f91a:	f108 0114 	add.w	r1, r8, #20
 800f91e:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f922:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f926:	9300      	str	r3, [sp, #0]
 800f928:	9b00      	ldr	r3, [sp, #0]
 800f92a:	9201      	str	r2, [sp, #4]
 800f92c:	4293      	cmp	r3, r2
 800f92e:	d80c      	bhi.n	800f94a <__multiply+0x7a>
 800f930:	2e00      	cmp	r6, #0
 800f932:	dd03      	ble.n	800f93c <__multiply+0x6c>
 800f934:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f938:	2b00      	cmp	r3, #0
 800f93a:	d05d      	beq.n	800f9f8 <__multiply+0x128>
 800f93c:	6106      	str	r6, [r0, #16]
 800f93e:	b003      	add	sp, #12
 800f940:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f944:	f843 2b04 	str.w	r2, [r3], #4
 800f948:	e7e3      	b.n	800f912 <__multiply+0x42>
 800f94a:	f8b2 b000 	ldrh.w	fp, [r2]
 800f94e:	f1bb 0f00 	cmp.w	fp, #0
 800f952:	d023      	beq.n	800f99c <__multiply+0xcc>
 800f954:	4689      	mov	r9, r1
 800f956:	46ac      	mov	ip, r5
 800f958:	f04f 0800 	mov.w	r8, #0
 800f95c:	f859 4b04 	ldr.w	r4, [r9], #4
 800f960:	f8dc a000 	ldr.w	sl, [ip]
 800f964:	b2a3      	uxth	r3, r4
 800f966:	fa1f fa8a 	uxth.w	sl, sl
 800f96a:	fb0b a303 	mla	r3, fp, r3, sl
 800f96e:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f972:	f8dc 4000 	ldr.w	r4, [ip]
 800f976:	4443      	add	r3, r8
 800f978:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f97c:	fb0b 840a 	mla	r4, fp, sl, r8
 800f980:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f984:	46e2      	mov	sl, ip
 800f986:	b29b      	uxth	r3, r3
 800f988:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f98c:	454f      	cmp	r7, r9
 800f98e:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f992:	f84a 3b04 	str.w	r3, [sl], #4
 800f996:	d82b      	bhi.n	800f9f0 <__multiply+0x120>
 800f998:	f8cc 8004 	str.w	r8, [ip, #4]
 800f99c:	9b01      	ldr	r3, [sp, #4]
 800f99e:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f9a2:	3204      	adds	r2, #4
 800f9a4:	f1ba 0f00 	cmp.w	sl, #0
 800f9a8:	d020      	beq.n	800f9ec <__multiply+0x11c>
 800f9aa:	682b      	ldr	r3, [r5, #0]
 800f9ac:	4689      	mov	r9, r1
 800f9ae:	46a8      	mov	r8, r5
 800f9b0:	f04f 0b00 	mov.w	fp, #0
 800f9b4:	f8b9 c000 	ldrh.w	ip, [r9]
 800f9b8:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f9bc:	fb0a 440c 	mla	r4, sl, ip, r4
 800f9c0:	445c      	add	r4, fp
 800f9c2:	46c4      	mov	ip, r8
 800f9c4:	b29b      	uxth	r3, r3
 800f9c6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f9ca:	f84c 3b04 	str.w	r3, [ip], #4
 800f9ce:	f859 3b04 	ldr.w	r3, [r9], #4
 800f9d2:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800f9d6:	0c1b      	lsrs	r3, r3, #16
 800f9d8:	fb0a b303 	mla	r3, sl, r3, fp
 800f9dc:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f9e0:	454f      	cmp	r7, r9
 800f9e2:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f9e6:	d805      	bhi.n	800f9f4 <__multiply+0x124>
 800f9e8:	f8c8 3004 	str.w	r3, [r8, #4]
 800f9ec:	3504      	adds	r5, #4
 800f9ee:	e79b      	b.n	800f928 <__multiply+0x58>
 800f9f0:	46d4      	mov	ip, sl
 800f9f2:	e7b3      	b.n	800f95c <__multiply+0x8c>
 800f9f4:	46e0      	mov	r8, ip
 800f9f6:	e7dd      	b.n	800f9b4 <__multiply+0xe4>
 800f9f8:	3e01      	subs	r6, #1
 800f9fa:	e799      	b.n	800f930 <__multiply+0x60>

0800f9fc <__pow5mult>:
 800f9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa00:	4615      	mov	r5, r2
 800fa02:	f012 0203 	ands.w	r2, r2, #3
 800fa06:	4606      	mov	r6, r0
 800fa08:	460f      	mov	r7, r1
 800fa0a:	d007      	beq.n	800fa1c <__pow5mult+0x20>
 800fa0c:	3a01      	subs	r2, #1
 800fa0e:	4c21      	ldr	r4, [pc, #132]	; (800fa94 <__pow5mult+0x98>)
 800fa10:	2300      	movs	r3, #0
 800fa12:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fa16:	f7ff fec9 	bl	800f7ac <__multadd>
 800fa1a:	4607      	mov	r7, r0
 800fa1c:	10ad      	asrs	r5, r5, #2
 800fa1e:	d035      	beq.n	800fa8c <__pow5mult+0x90>
 800fa20:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fa22:	b93c      	cbnz	r4, 800fa34 <__pow5mult+0x38>
 800fa24:	2010      	movs	r0, #16
 800fa26:	f7ff fe63 	bl	800f6f0 <malloc>
 800fa2a:	6270      	str	r0, [r6, #36]	; 0x24
 800fa2c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fa30:	6004      	str	r4, [r0, #0]
 800fa32:	60c4      	str	r4, [r0, #12]
 800fa34:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fa38:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fa3c:	b94c      	cbnz	r4, 800fa52 <__pow5mult+0x56>
 800fa3e:	f240 2171 	movw	r1, #625	; 0x271
 800fa42:	4630      	mov	r0, r6
 800fa44:	f7ff ff3b 	bl	800f8be <__i2b>
 800fa48:	2300      	movs	r3, #0
 800fa4a:	f8c8 0008 	str.w	r0, [r8, #8]
 800fa4e:	4604      	mov	r4, r0
 800fa50:	6003      	str	r3, [r0, #0]
 800fa52:	f04f 0800 	mov.w	r8, #0
 800fa56:	07eb      	lsls	r3, r5, #31
 800fa58:	d50a      	bpl.n	800fa70 <__pow5mult+0x74>
 800fa5a:	4639      	mov	r1, r7
 800fa5c:	4622      	mov	r2, r4
 800fa5e:	4630      	mov	r0, r6
 800fa60:	f7ff ff36 	bl	800f8d0 <__multiply>
 800fa64:	4639      	mov	r1, r7
 800fa66:	4681      	mov	r9, r0
 800fa68:	4630      	mov	r0, r6
 800fa6a:	f7ff fe88 	bl	800f77e <_Bfree>
 800fa6e:	464f      	mov	r7, r9
 800fa70:	106d      	asrs	r5, r5, #1
 800fa72:	d00b      	beq.n	800fa8c <__pow5mult+0x90>
 800fa74:	6820      	ldr	r0, [r4, #0]
 800fa76:	b938      	cbnz	r0, 800fa88 <__pow5mult+0x8c>
 800fa78:	4622      	mov	r2, r4
 800fa7a:	4621      	mov	r1, r4
 800fa7c:	4630      	mov	r0, r6
 800fa7e:	f7ff ff27 	bl	800f8d0 <__multiply>
 800fa82:	6020      	str	r0, [r4, #0]
 800fa84:	f8c0 8000 	str.w	r8, [r0]
 800fa88:	4604      	mov	r4, r0
 800fa8a:	e7e4      	b.n	800fa56 <__pow5mult+0x5a>
 800fa8c:	4638      	mov	r0, r7
 800fa8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa92:	bf00      	nop
 800fa94:	080112b8 	.word	0x080112b8

0800fa98 <__lshift>:
 800fa98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa9c:	460c      	mov	r4, r1
 800fa9e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800faa2:	6923      	ldr	r3, [r4, #16]
 800faa4:	6849      	ldr	r1, [r1, #4]
 800faa6:	eb0a 0903 	add.w	r9, sl, r3
 800faaa:	68a3      	ldr	r3, [r4, #8]
 800faac:	4607      	mov	r7, r0
 800faae:	4616      	mov	r6, r2
 800fab0:	f109 0501 	add.w	r5, r9, #1
 800fab4:	42ab      	cmp	r3, r5
 800fab6:	db32      	blt.n	800fb1e <__lshift+0x86>
 800fab8:	4638      	mov	r0, r7
 800faba:	f7ff fe2c 	bl	800f716 <_Balloc>
 800fabe:	2300      	movs	r3, #0
 800fac0:	4680      	mov	r8, r0
 800fac2:	f100 0114 	add.w	r1, r0, #20
 800fac6:	461a      	mov	r2, r3
 800fac8:	4553      	cmp	r3, sl
 800faca:	db2b      	blt.n	800fb24 <__lshift+0x8c>
 800facc:	6920      	ldr	r0, [r4, #16]
 800face:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fad2:	f104 0314 	add.w	r3, r4, #20
 800fad6:	f016 021f 	ands.w	r2, r6, #31
 800fada:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fade:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fae2:	d025      	beq.n	800fb30 <__lshift+0x98>
 800fae4:	f1c2 0e20 	rsb	lr, r2, #32
 800fae8:	2000      	movs	r0, #0
 800faea:	681e      	ldr	r6, [r3, #0]
 800faec:	468a      	mov	sl, r1
 800faee:	4096      	lsls	r6, r2
 800faf0:	4330      	orrs	r0, r6
 800faf2:	f84a 0b04 	str.w	r0, [sl], #4
 800faf6:	f853 0b04 	ldr.w	r0, [r3], #4
 800fafa:	459c      	cmp	ip, r3
 800fafc:	fa20 f00e 	lsr.w	r0, r0, lr
 800fb00:	d814      	bhi.n	800fb2c <__lshift+0x94>
 800fb02:	6048      	str	r0, [r1, #4]
 800fb04:	b108      	cbz	r0, 800fb0a <__lshift+0x72>
 800fb06:	f109 0502 	add.w	r5, r9, #2
 800fb0a:	3d01      	subs	r5, #1
 800fb0c:	4638      	mov	r0, r7
 800fb0e:	f8c8 5010 	str.w	r5, [r8, #16]
 800fb12:	4621      	mov	r1, r4
 800fb14:	f7ff fe33 	bl	800f77e <_Bfree>
 800fb18:	4640      	mov	r0, r8
 800fb1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb1e:	3101      	adds	r1, #1
 800fb20:	005b      	lsls	r3, r3, #1
 800fb22:	e7c7      	b.n	800fab4 <__lshift+0x1c>
 800fb24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fb28:	3301      	adds	r3, #1
 800fb2a:	e7cd      	b.n	800fac8 <__lshift+0x30>
 800fb2c:	4651      	mov	r1, sl
 800fb2e:	e7dc      	b.n	800faea <__lshift+0x52>
 800fb30:	3904      	subs	r1, #4
 800fb32:	f853 2b04 	ldr.w	r2, [r3], #4
 800fb36:	f841 2f04 	str.w	r2, [r1, #4]!
 800fb3a:	459c      	cmp	ip, r3
 800fb3c:	d8f9      	bhi.n	800fb32 <__lshift+0x9a>
 800fb3e:	e7e4      	b.n	800fb0a <__lshift+0x72>

0800fb40 <__mcmp>:
 800fb40:	6903      	ldr	r3, [r0, #16]
 800fb42:	690a      	ldr	r2, [r1, #16]
 800fb44:	1a9b      	subs	r3, r3, r2
 800fb46:	b530      	push	{r4, r5, lr}
 800fb48:	d10c      	bne.n	800fb64 <__mcmp+0x24>
 800fb4a:	0092      	lsls	r2, r2, #2
 800fb4c:	3014      	adds	r0, #20
 800fb4e:	3114      	adds	r1, #20
 800fb50:	1884      	adds	r4, r0, r2
 800fb52:	4411      	add	r1, r2
 800fb54:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800fb58:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800fb5c:	4295      	cmp	r5, r2
 800fb5e:	d003      	beq.n	800fb68 <__mcmp+0x28>
 800fb60:	d305      	bcc.n	800fb6e <__mcmp+0x2e>
 800fb62:	2301      	movs	r3, #1
 800fb64:	4618      	mov	r0, r3
 800fb66:	bd30      	pop	{r4, r5, pc}
 800fb68:	42a0      	cmp	r0, r4
 800fb6a:	d3f3      	bcc.n	800fb54 <__mcmp+0x14>
 800fb6c:	e7fa      	b.n	800fb64 <__mcmp+0x24>
 800fb6e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb72:	e7f7      	b.n	800fb64 <__mcmp+0x24>

0800fb74 <__mdiff>:
 800fb74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb78:	460d      	mov	r5, r1
 800fb7a:	4607      	mov	r7, r0
 800fb7c:	4611      	mov	r1, r2
 800fb7e:	4628      	mov	r0, r5
 800fb80:	4614      	mov	r4, r2
 800fb82:	f7ff ffdd 	bl	800fb40 <__mcmp>
 800fb86:	1e06      	subs	r6, r0, #0
 800fb88:	d108      	bne.n	800fb9c <__mdiff+0x28>
 800fb8a:	4631      	mov	r1, r6
 800fb8c:	4638      	mov	r0, r7
 800fb8e:	f7ff fdc2 	bl	800f716 <_Balloc>
 800fb92:	2301      	movs	r3, #1
 800fb94:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800fb98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb9c:	bfa4      	itt	ge
 800fb9e:	4623      	movge	r3, r4
 800fba0:	462c      	movge	r4, r5
 800fba2:	4638      	mov	r0, r7
 800fba4:	6861      	ldr	r1, [r4, #4]
 800fba6:	bfa6      	itte	ge
 800fba8:	461d      	movge	r5, r3
 800fbaa:	2600      	movge	r6, #0
 800fbac:	2601      	movlt	r6, #1
 800fbae:	f7ff fdb2 	bl	800f716 <_Balloc>
 800fbb2:	692b      	ldr	r3, [r5, #16]
 800fbb4:	60c6      	str	r6, [r0, #12]
 800fbb6:	6926      	ldr	r6, [r4, #16]
 800fbb8:	f105 0914 	add.w	r9, r5, #20
 800fbbc:	f104 0214 	add.w	r2, r4, #20
 800fbc0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800fbc4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800fbc8:	f100 0514 	add.w	r5, r0, #20
 800fbcc:	f04f 0e00 	mov.w	lr, #0
 800fbd0:	f852 ab04 	ldr.w	sl, [r2], #4
 800fbd4:	f859 4b04 	ldr.w	r4, [r9], #4
 800fbd8:	fa1e f18a 	uxtah	r1, lr, sl
 800fbdc:	b2a3      	uxth	r3, r4
 800fbde:	1ac9      	subs	r1, r1, r3
 800fbe0:	0c23      	lsrs	r3, r4, #16
 800fbe2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800fbe6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800fbea:	b289      	uxth	r1, r1
 800fbec:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800fbf0:	45c8      	cmp	r8, r9
 800fbf2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800fbf6:	4694      	mov	ip, r2
 800fbf8:	f845 3b04 	str.w	r3, [r5], #4
 800fbfc:	d8e8      	bhi.n	800fbd0 <__mdiff+0x5c>
 800fbfe:	45bc      	cmp	ip, r7
 800fc00:	d304      	bcc.n	800fc0c <__mdiff+0x98>
 800fc02:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800fc06:	b183      	cbz	r3, 800fc2a <__mdiff+0xb6>
 800fc08:	6106      	str	r6, [r0, #16]
 800fc0a:	e7c5      	b.n	800fb98 <__mdiff+0x24>
 800fc0c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800fc10:	fa1e f381 	uxtah	r3, lr, r1
 800fc14:	141a      	asrs	r2, r3, #16
 800fc16:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fc1a:	b29b      	uxth	r3, r3
 800fc1c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fc20:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800fc24:	f845 3b04 	str.w	r3, [r5], #4
 800fc28:	e7e9      	b.n	800fbfe <__mdiff+0x8a>
 800fc2a:	3e01      	subs	r6, #1
 800fc2c:	e7e9      	b.n	800fc02 <__mdiff+0x8e>

0800fc2e <__d2b>:
 800fc2e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fc32:	460e      	mov	r6, r1
 800fc34:	2101      	movs	r1, #1
 800fc36:	ec59 8b10 	vmov	r8, r9, d0
 800fc3a:	4615      	mov	r5, r2
 800fc3c:	f7ff fd6b 	bl	800f716 <_Balloc>
 800fc40:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800fc44:	4607      	mov	r7, r0
 800fc46:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fc4a:	bb34      	cbnz	r4, 800fc9a <__d2b+0x6c>
 800fc4c:	9301      	str	r3, [sp, #4]
 800fc4e:	f1b8 0300 	subs.w	r3, r8, #0
 800fc52:	d027      	beq.n	800fca4 <__d2b+0x76>
 800fc54:	a802      	add	r0, sp, #8
 800fc56:	f840 3d08 	str.w	r3, [r0, #-8]!
 800fc5a:	f7ff fe01 	bl	800f860 <__lo0bits>
 800fc5e:	9900      	ldr	r1, [sp, #0]
 800fc60:	b1f0      	cbz	r0, 800fca0 <__d2b+0x72>
 800fc62:	9a01      	ldr	r2, [sp, #4]
 800fc64:	f1c0 0320 	rsb	r3, r0, #32
 800fc68:	fa02 f303 	lsl.w	r3, r2, r3
 800fc6c:	430b      	orrs	r3, r1
 800fc6e:	40c2      	lsrs	r2, r0
 800fc70:	617b      	str	r3, [r7, #20]
 800fc72:	9201      	str	r2, [sp, #4]
 800fc74:	9b01      	ldr	r3, [sp, #4]
 800fc76:	61bb      	str	r3, [r7, #24]
 800fc78:	2b00      	cmp	r3, #0
 800fc7a:	bf14      	ite	ne
 800fc7c:	2102      	movne	r1, #2
 800fc7e:	2101      	moveq	r1, #1
 800fc80:	6139      	str	r1, [r7, #16]
 800fc82:	b1c4      	cbz	r4, 800fcb6 <__d2b+0x88>
 800fc84:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800fc88:	4404      	add	r4, r0
 800fc8a:	6034      	str	r4, [r6, #0]
 800fc8c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fc90:	6028      	str	r0, [r5, #0]
 800fc92:	4638      	mov	r0, r7
 800fc94:	b003      	add	sp, #12
 800fc96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fc9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fc9e:	e7d5      	b.n	800fc4c <__d2b+0x1e>
 800fca0:	6179      	str	r1, [r7, #20]
 800fca2:	e7e7      	b.n	800fc74 <__d2b+0x46>
 800fca4:	a801      	add	r0, sp, #4
 800fca6:	f7ff fddb 	bl	800f860 <__lo0bits>
 800fcaa:	9b01      	ldr	r3, [sp, #4]
 800fcac:	617b      	str	r3, [r7, #20]
 800fcae:	2101      	movs	r1, #1
 800fcb0:	6139      	str	r1, [r7, #16]
 800fcb2:	3020      	adds	r0, #32
 800fcb4:	e7e5      	b.n	800fc82 <__d2b+0x54>
 800fcb6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800fcba:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fcbe:	6030      	str	r0, [r6, #0]
 800fcc0:	6918      	ldr	r0, [r3, #16]
 800fcc2:	f7ff fdae 	bl	800f822 <__hi0bits>
 800fcc6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800fcca:	e7e1      	b.n	800fc90 <__d2b+0x62>

0800fccc <_calloc_r>:
 800fccc:	b538      	push	{r3, r4, r5, lr}
 800fcce:	fb02 f401 	mul.w	r4, r2, r1
 800fcd2:	4621      	mov	r1, r4
 800fcd4:	f000 f856 	bl	800fd84 <_malloc_r>
 800fcd8:	4605      	mov	r5, r0
 800fcda:	b118      	cbz	r0, 800fce4 <_calloc_r+0x18>
 800fcdc:	4622      	mov	r2, r4
 800fcde:	2100      	movs	r1, #0
 800fce0:	f7fd ff0a 	bl	800daf8 <memset>
 800fce4:	4628      	mov	r0, r5
 800fce6:	bd38      	pop	{r3, r4, r5, pc}

0800fce8 <_free_r>:
 800fce8:	b538      	push	{r3, r4, r5, lr}
 800fcea:	4605      	mov	r5, r0
 800fcec:	2900      	cmp	r1, #0
 800fcee:	d045      	beq.n	800fd7c <_free_r+0x94>
 800fcf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fcf4:	1f0c      	subs	r4, r1, #4
 800fcf6:	2b00      	cmp	r3, #0
 800fcf8:	bfb8      	it	lt
 800fcfa:	18e4      	addlt	r4, r4, r3
 800fcfc:	f000 fac3 	bl	8010286 <__malloc_lock>
 800fd00:	4a1f      	ldr	r2, [pc, #124]	; (800fd80 <_free_r+0x98>)
 800fd02:	6813      	ldr	r3, [r2, #0]
 800fd04:	4610      	mov	r0, r2
 800fd06:	b933      	cbnz	r3, 800fd16 <_free_r+0x2e>
 800fd08:	6063      	str	r3, [r4, #4]
 800fd0a:	6014      	str	r4, [r2, #0]
 800fd0c:	4628      	mov	r0, r5
 800fd0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd12:	f000 bab9 	b.w	8010288 <__malloc_unlock>
 800fd16:	42a3      	cmp	r3, r4
 800fd18:	d90c      	bls.n	800fd34 <_free_r+0x4c>
 800fd1a:	6821      	ldr	r1, [r4, #0]
 800fd1c:	1862      	adds	r2, r4, r1
 800fd1e:	4293      	cmp	r3, r2
 800fd20:	bf04      	itt	eq
 800fd22:	681a      	ldreq	r2, [r3, #0]
 800fd24:	685b      	ldreq	r3, [r3, #4]
 800fd26:	6063      	str	r3, [r4, #4]
 800fd28:	bf04      	itt	eq
 800fd2a:	1852      	addeq	r2, r2, r1
 800fd2c:	6022      	streq	r2, [r4, #0]
 800fd2e:	6004      	str	r4, [r0, #0]
 800fd30:	e7ec      	b.n	800fd0c <_free_r+0x24>
 800fd32:	4613      	mov	r3, r2
 800fd34:	685a      	ldr	r2, [r3, #4]
 800fd36:	b10a      	cbz	r2, 800fd3c <_free_r+0x54>
 800fd38:	42a2      	cmp	r2, r4
 800fd3a:	d9fa      	bls.n	800fd32 <_free_r+0x4a>
 800fd3c:	6819      	ldr	r1, [r3, #0]
 800fd3e:	1858      	adds	r0, r3, r1
 800fd40:	42a0      	cmp	r0, r4
 800fd42:	d10b      	bne.n	800fd5c <_free_r+0x74>
 800fd44:	6820      	ldr	r0, [r4, #0]
 800fd46:	4401      	add	r1, r0
 800fd48:	1858      	adds	r0, r3, r1
 800fd4a:	4282      	cmp	r2, r0
 800fd4c:	6019      	str	r1, [r3, #0]
 800fd4e:	d1dd      	bne.n	800fd0c <_free_r+0x24>
 800fd50:	6810      	ldr	r0, [r2, #0]
 800fd52:	6852      	ldr	r2, [r2, #4]
 800fd54:	605a      	str	r2, [r3, #4]
 800fd56:	4401      	add	r1, r0
 800fd58:	6019      	str	r1, [r3, #0]
 800fd5a:	e7d7      	b.n	800fd0c <_free_r+0x24>
 800fd5c:	d902      	bls.n	800fd64 <_free_r+0x7c>
 800fd5e:	230c      	movs	r3, #12
 800fd60:	602b      	str	r3, [r5, #0]
 800fd62:	e7d3      	b.n	800fd0c <_free_r+0x24>
 800fd64:	6820      	ldr	r0, [r4, #0]
 800fd66:	1821      	adds	r1, r4, r0
 800fd68:	428a      	cmp	r2, r1
 800fd6a:	bf04      	itt	eq
 800fd6c:	6811      	ldreq	r1, [r2, #0]
 800fd6e:	6852      	ldreq	r2, [r2, #4]
 800fd70:	6062      	str	r2, [r4, #4]
 800fd72:	bf04      	itt	eq
 800fd74:	1809      	addeq	r1, r1, r0
 800fd76:	6021      	streq	r1, [r4, #0]
 800fd78:	605c      	str	r4, [r3, #4]
 800fd7a:	e7c7      	b.n	800fd0c <_free_r+0x24>
 800fd7c:	bd38      	pop	{r3, r4, r5, pc}
 800fd7e:	bf00      	nop
 800fd80:	20001f24 	.word	0x20001f24

0800fd84 <_malloc_r>:
 800fd84:	b570      	push	{r4, r5, r6, lr}
 800fd86:	1ccd      	adds	r5, r1, #3
 800fd88:	f025 0503 	bic.w	r5, r5, #3
 800fd8c:	3508      	adds	r5, #8
 800fd8e:	2d0c      	cmp	r5, #12
 800fd90:	bf38      	it	cc
 800fd92:	250c      	movcc	r5, #12
 800fd94:	2d00      	cmp	r5, #0
 800fd96:	4606      	mov	r6, r0
 800fd98:	db01      	blt.n	800fd9e <_malloc_r+0x1a>
 800fd9a:	42a9      	cmp	r1, r5
 800fd9c:	d903      	bls.n	800fda6 <_malloc_r+0x22>
 800fd9e:	230c      	movs	r3, #12
 800fda0:	6033      	str	r3, [r6, #0]
 800fda2:	2000      	movs	r0, #0
 800fda4:	bd70      	pop	{r4, r5, r6, pc}
 800fda6:	f000 fa6e 	bl	8010286 <__malloc_lock>
 800fdaa:	4a21      	ldr	r2, [pc, #132]	; (800fe30 <_malloc_r+0xac>)
 800fdac:	6814      	ldr	r4, [r2, #0]
 800fdae:	4621      	mov	r1, r4
 800fdb0:	b991      	cbnz	r1, 800fdd8 <_malloc_r+0x54>
 800fdb2:	4c20      	ldr	r4, [pc, #128]	; (800fe34 <_malloc_r+0xb0>)
 800fdb4:	6823      	ldr	r3, [r4, #0]
 800fdb6:	b91b      	cbnz	r3, 800fdc0 <_malloc_r+0x3c>
 800fdb8:	4630      	mov	r0, r6
 800fdba:	f000 f98f 	bl	80100dc <_sbrk_r>
 800fdbe:	6020      	str	r0, [r4, #0]
 800fdc0:	4629      	mov	r1, r5
 800fdc2:	4630      	mov	r0, r6
 800fdc4:	f000 f98a 	bl	80100dc <_sbrk_r>
 800fdc8:	1c43      	adds	r3, r0, #1
 800fdca:	d124      	bne.n	800fe16 <_malloc_r+0x92>
 800fdcc:	230c      	movs	r3, #12
 800fdce:	6033      	str	r3, [r6, #0]
 800fdd0:	4630      	mov	r0, r6
 800fdd2:	f000 fa59 	bl	8010288 <__malloc_unlock>
 800fdd6:	e7e4      	b.n	800fda2 <_malloc_r+0x1e>
 800fdd8:	680b      	ldr	r3, [r1, #0]
 800fdda:	1b5b      	subs	r3, r3, r5
 800fddc:	d418      	bmi.n	800fe10 <_malloc_r+0x8c>
 800fdde:	2b0b      	cmp	r3, #11
 800fde0:	d90f      	bls.n	800fe02 <_malloc_r+0x7e>
 800fde2:	600b      	str	r3, [r1, #0]
 800fde4:	50cd      	str	r5, [r1, r3]
 800fde6:	18cc      	adds	r4, r1, r3
 800fde8:	4630      	mov	r0, r6
 800fdea:	f000 fa4d 	bl	8010288 <__malloc_unlock>
 800fdee:	f104 000b 	add.w	r0, r4, #11
 800fdf2:	1d23      	adds	r3, r4, #4
 800fdf4:	f020 0007 	bic.w	r0, r0, #7
 800fdf8:	1ac3      	subs	r3, r0, r3
 800fdfa:	d0d3      	beq.n	800fda4 <_malloc_r+0x20>
 800fdfc:	425a      	negs	r2, r3
 800fdfe:	50e2      	str	r2, [r4, r3]
 800fe00:	e7d0      	b.n	800fda4 <_malloc_r+0x20>
 800fe02:	428c      	cmp	r4, r1
 800fe04:	684b      	ldr	r3, [r1, #4]
 800fe06:	bf16      	itet	ne
 800fe08:	6063      	strne	r3, [r4, #4]
 800fe0a:	6013      	streq	r3, [r2, #0]
 800fe0c:	460c      	movne	r4, r1
 800fe0e:	e7eb      	b.n	800fde8 <_malloc_r+0x64>
 800fe10:	460c      	mov	r4, r1
 800fe12:	6849      	ldr	r1, [r1, #4]
 800fe14:	e7cc      	b.n	800fdb0 <_malloc_r+0x2c>
 800fe16:	1cc4      	adds	r4, r0, #3
 800fe18:	f024 0403 	bic.w	r4, r4, #3
 800fe1c:	42a0      	cmp	r0, r4
 800fe1e:	d005      	beq.n	800fe2c <_malloc_r+0xa8>
 800fe20:	1a21      	subs	r1, r4, r0
 800fe22:	4630      	mov	r0, r6
 800fe24:	f000 f95a 	bl	80100dc <_sbrk_r>
 800fe28:	3001      	adds	r0, #1
 800fe2a:	d0cf      	beq.n	800fdcc <_malloc_r+0x48>
 800fe2c:	6025      	str	r5, [r4, #0]
 800fe2e:	e7db      	b.n	800fde8 <_malloc_r+0x64>
 800fe30:	20001f24 	.word	0x20001f24
 800fe34:	20001f28 	.word	0x20001f28

0800fe38 <__ssputs_r>:
 800fe38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fe3c:	688e      	ldr	r6, [r1, #8]
 800fe3e:	429e      	cmp	r6, r3
 800fe40:	4682      	mov	sl, r0
 800fe42:	460c      	mov	r4, r1
 800fe44:	4690      	mov	r8, r2
 800fe46:	4699      	mov	r9, r3
 800fe48:	d837      	bhi.n	800feba <__ssputs_r+0x82>
 800fe4a:	898a      	ldrh	r2, [r1, #12]
 800fe4c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800fe50:	d031      	beq.n	800feb6 <__ssputs_r+0x7e>
 800fe52:	6825      	ldr	r5, [r4, #0]
 800fe54:	6909      	ldr	r1, [r1, #16]
 800fe56:	1a6f      	subs	r7, r5, r1
 800fe58:	6965      	ldr	r5, [r4, #20]
 800fe5a:	2302      	movs	r3, #2
 800fe5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fe60:	fb95 f5f3 	sdiv	r5, r5, r3
 800fe64:	f109 0301 	add.w	r3, r9, #1
 800fe68:	443b      	add	r3, r7
 800fe6a:	429d      	cmp	r5, r3
 800fe6c:	bf38      	it	cc
 800fe6e:	461d      	movcc	r5, r3
 800fe70:	0553      	lsls	r3, r2, #21
 800fe72:	d530      	bpl.n	800fed6 <__ssputs_r+0x9e>
 800fe74:	4629      	mov	r1, r5
 800fe76:	f7ff ff85 	bl	800fd84 <_malloc_r>
 800fe7a:	4606      	mov	r6, r0
 800fe7c:	b950      	cbnz	r0, 800fe94 <__ssputs_r+0x5c>
 800fe7e:	230c      	movs	r3, #12
 800fe80:	f8ca 3000 	str.w	r3, [sl]
 800fe84:	89a3      	ldrh	r3, [r4, #12]
 800fe86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fe8a:	81a3      	strh	r3, [r4, #12]
 800fe8c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800fe90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe94:	463a      	mov	r2, r7
 800fe96:	6921      	ldr	r1, [r4, #16]
 800fe98:	f7ff fc32 	bl	800f700 <memcpy>
 800fe9c:	89a3      	ldrh	r3, [r4, #12]
 800fe9e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800fea2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fea6:	81a3      	strh	r3, [r4, #12]
 800fea8:	6126      	str	r6, [r4, #16]
 800feaa:	6165      	str	r5, [r4, #20]
 800feac:	443e      	add	r6, r7
 800feae:	1bed      	subs	r5, r5, r7
 800feb0:	6026      	str	r6, [r4, #0]
 800feb2:	60a5      	str	r5, [r4, #8]
 800feb4:	464e      	mov	r6, r9
 800feb6:	454e      	cmp	r6, r9
 800feb8:	d900      	bls.n	800febc <__ssputs_r+0x84>
 800feba:	464e      	mov	r6, r9
 800febc:	4632      	mov	r2, r6
 800febe:	4641      	mov	r1, r8
 800fec0:	6820      	ldr	r0, [r4, #0]
 800fec2:	f000 f9c7 	bl	8010254 <memmove>
 800fec6:	68a3      	ldr	r3, [r4, #8]
 800fec8:	1b9b      	subs	r3, r3, r6
 800feca:	60a3      	str	r3, [r4, #8]
 800fecc:	6823      	ldr	r3, [r4, #0]
 800fece:	441e      	add	r6, r3
 800fed0:	6026      	str	r6, [r4, #0]
 800fed2:	2000      	movs	r0, #0
 800fed4:	e7dc      	b.n	800fe90 <__ssputs_r+0x58>
 800fed6:	462a      	mov	r2, r5
 800fed8:	f000 f9d7 	bl	801028a <_realloc_r>
 800fedc:	4606      	mov	r6, r0
 800fede:	2800      	cmp	r0, #0
 800fee0:	d1e2      	bne.n	800fea8 <__ssputs_r+0x70>
 800fee2:	6921      	ldr	r1, [r4, #16]
 800fee4:	4650      	mov	r0, sl
 800fee6:	f7ff feff 	bl	800fce8 <_free_r>
 800feea:	e7c8      	b.n	800fe7e <__ssputs_r+0x46>

0800feec <_svfiprintf_r>:
 800feec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fef0:	461d      	mov	r5, r3
 800fef2:	898b      	ldrh	r3, [r1, #12]
 800fef4:	061f      	lsls	r7, r3, #24
 800fef6:	b09d      	sub	sp, #116	; 0x74
 800fef8:	4680      	mov	r8, r0
 800fefa:	460c      	mov	r4, r1
 800fefc:	4616      	mov	r6, r2
 800fefe:	d50f      	bpl.n	800ff20 <_svfiprintf_r+0x34>
 800ff00:	690b      	ldr	r3, [r1, #16]
 800ff02:	b96b      	cbnz	r3, 800ff20 <_svfiprintf_r+0x34>
 800ff04:	2140      	movs	r1, #64	; 0x40
 800ff06:	f7ff ff3d 	bl	800fd84 <_malloc_r>
 800ff0a:	6020      	str	r0, [r4, #0]
 800ff0c:	6120      	str	r0, [r4, #16]
 800ff0e:	b928      	cbnz	r0, 800ff1c <_svfiprintf_r+0x30>
 800ff10:	230c      	movs	r3, #12
 800ff12:	f8c8 3000 	str.w	r3, [r8]
 800ff16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ff1a:	e0c8      	b.n	80100ae <_svfiprintf_r+0x1c2>
 800ff1c:	2340      	movs	r3, #64	; 0x40
 800ff1e:	6163      	str	r3, [r4, #20]
 800ff20:	2300      	movs	r3, #0
 800ff22:	9309      	str	r3, [sp, #36]	; 0x24
 800ff24:	2320      	movs	r3, #32
 800ff26:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ff2a:	2330      	movs	r3, #48	; 0x30
 800ff2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ff30:	9503      	str	r5, [sp, #12]
 800ff32:	f04f 0b01 	mov.w	fp, #1
 800ff36:	4637      	mov	r7, r6
 800ff38:	463d      	mov	r5, r7
 800ff3a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800ff3e:	b10b      	cbz	r3, 800ff44 <_svfiprintf_r+0x58>
 800ff40:	2b25      	cmp	r3, #37	; 0x25
 800ff42:	d13e      	bne.n	800ffc2 <_svfiprintf_r+0xd6>
 800ff44:	ebb7 0a06 	subs.w	sl, r7, r6
 800ff48:	d00b      	beq.n	800ff62 <_svfiprintf_r+0x76>
 800ff4a:	4653      	mov	r3, sl
 800ff4c:	4632      	mov	r2, r6
 800ff4e:	4621      	mov	r1, r4
 800ff50:	4640      	mov	r0, r8
 800ff52:	f7ff ff71 	bl	800fe38 <__ssputs_r>
 800ff56:	3001      	adds	r0, #1
 800ff58:	f000 80a4 	beq.w	80100a4 <_svfiprintf_r+0x1b8>
 800ff5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ff5e:	4453      	add	r3, sl
 800ff60:	9309      	str	r3, [sp, #36]	; 0x24
 800ff62:	783b      	ldrb	r3, [r7, #0]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	f000 809d 	beq.w	80100a4 <_svfiprintf_r+0x1b8>
 800ff6a:	2300      	movs	r3, #0
 800ff6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ff70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ff74:	9304      	str	r3, [sp, #16]
 800ff76:	9307      	str	r3, [sp, #28]
 800ff78:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ff7c:	931a      	str	r3, [sp, #104]	; 0x68
 800ff7e:	462f      	mov	r7, r5
 800ff80:	2205      	movs	r2, #5
 800ff82:	f817 1b01 	ldrb.w	r1, [r7], #1
 800ff86:	4850      	ldr	r0, [pc, #320]	; (80100c8 <_svfiprintf_r+0x1dc>)
 800ff88:	f7f0 f952 	bl	8000230 <memchr>
 800ff8c:	9b04      	ldr	r3, [sp, #16]
 800ff8e:	b9d0      	cbnz	r0, 800ffc6 <_svfiprintf_r+0xda>
 800ff90:	06d9      	lsls	r1, r3, #27
 800ff92:	bf44      	itt	mi
 800ff94:	2220      	movmi	r2, #32
 800ff96:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ff9a:	071a      	lsls	r2, r3, #28
 800ff9c:	bf44      	itt	mi
 800ff9e:	222b      	movmi	r2, #43	; 0x2b
 800ffa0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800ffa4:	782a      	ldrb	r2, [r5, #0]
 800ffa6:	2a2a      	cmp	r2, #42	; 0x2a
 800ffa8:	d015      	beq.n	800ffd6 <_svfiprintf_r+0xea>
 800ffaa:	9a07      	ldr	r2, [sp, #28]
 800ffac:	462f      	mov	r7, r5
 800ffae:	2000      	movs	r0, #0
 800ffb0:	250a      	movs	r5, #10
 800ffb2:	4639      	mov	r1, r7
 800ffb4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ffb8:	3b30      	subs	r3, #48	; 0x30
 800ffba:	2b09      	cmp	r3, #9
 800ffbc:	d94d      	bls.n	801005a <_svfiprintf_r+0x16e>
 800ffbe:	b1b8      	cbz	r0, 800fff0 <_svfiprintf_r+0x104>
 800ffc0:	e00f      	b.n	800ffe2 <_svfiprintf_r+0xf6>
 800ffc2:	462f      	mov	r7, r5
 800ffc4:	e7b8      	b.n	800ff38 <_svfiprintf_r+0x4c>
 800ffc6:	4a40      	ldr	r2, [pc, #256]	; (80100c8 <_svfiprintf_r+0x1dc>)
 800ffc8:	1a80      	subs	r0, r0, r2
 800ffca:	fa0b f000 	lsl.w	r0, fp, r0
 800ffce:	4318      	orrs	r0, r3
 800ffd0:	9004      	str	r0, [sp, #16]
 800ffd2:	463d      	mov	r5, r7
 800ffd4:	e7d3      	b.n	800ff7e <_svfiprintf_r+0x92>
 800ffd6:	9a03      	ldr	r2, [sp, #12]
 800ffd8:	1d11      	adds	r1, r2, #4
 800ffda:	6812      	ldr	r2, [r2, #0]
 800ffdc:	9103      	str	r1, [sp, #12]
 800ffde:	2a00      	cmp	r2, #0
 800ffe0:	db01      	blt.n	800ffe6 <_svfiprintf_r+0xfa>
 800ffe2:	9207      	str	r2, [sp, #28]
 800ffe4:	e004      	b.n	800fff0 <_svfiprintf_r+0x104>
 800ffe6:	4252      	negs	r2, r2
 800ffe8:	f043 0302 	orr.w	r3, r3, #2
 800ffec:	9207      	str	r2, [sp, #28]
 800ffee:	9304      	str	r3, [sp, #16]
 800fff0:	783b      	ldrb	r3, [r7, #0]
 800fff2:	2b2e      	cmp	r3, #46	; 0x2e
 800fff4:	d10c      	bne.n	8010010 <_svfiprintf_r+0x124>
 800fff6:	787b      	ldrb	r3, [r7, #1]
 800fff8:	2b2a      	cmp	r3, #42	; 0x2a
 800fffa:	d133      	bne.n	8010064 <_svfiprintf_r+0x178>
 800fffc:	9b03      	ldr	r3, [sp, #12]
 800fffe:	1d1a      	adds	r2, r3, #4
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	9203      	str	r2, [sp, #12]
 8010004:	2b00      	cmp	r3, #0
 8010006:	bfb8      	it	lt
 8010008:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801000c:	3702      	adds	r7, #2
 801000e:	9305      	str	r3, [sp, #20]
 8010010:	4d2e      	ldr	r5, [pc, #184]	; (80100cc <_svfiprintf_r+0x1e0>)
 8010012:	7839      	ldrb	r1, [r7, #0]
 8010014:	2203      	movs	r2, #3
 8010016:	4628      	mov	r0, r5
 8010018:	f7f0 f90a 	bl	8000230 <memchr>
 801001c:	b138      	cbz	r0, 801002e <_svfiprintf_r+0x142>
 801001e:	2340      	movs	r3, #64	; 0x40
 8010020:	1b40      	subs	r0, r0, r5
 8010022:	fa03 f000 	lsl.w	r0, r3, r0
 8010026:	9b04      	ldr	r3, [sp, #16]
 8010028:	4303      	orrs	r3, r0
 801002a:	3701      	adds	r7, #1
 801002c:	9304      	str	r3, [sp, #16]
 801002e:	7839      	ldrb	r1, [r7, #0]
 8010030:	4827      	ldr	r0, [pc, #156]	; (80100d0 <_svfiprintf_r+0x1e4>)
 8010032:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010036:	2206      	movs	r2, #6
 8010038:	1c7e      	adds	r6, r7, #1
 801003a:	f7f0 f8f9 	bl	8000230 <memchr>
 801003e:	2800      	cmp	r0, #0
 8010040:	d038      	beq.n	80100b4 <_svfiprintf_r+0x1c8>
 8010042:	4b24      	ldr	r3, [pc, #144]	; (80100d4 <_svfiprintf_r+0x1e8>)
 8010044:	bb13      	cbnz	r3, 801008c <_svfiprintf_r+0x1a0>
 8010046:	9b03      	ldr	r3, [sp, #12]
 8010048:	3307      	adds	r3, #7
 801004a:	f023 0307 	bic.w	r3, r3, #7
 801004e:	3308      	adds	r3, #8
 8010050:	9303      	str	r3, [sp, #12]
 8010052:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010054:	444b      	add	r3, r9
 8010056:	9309      	str	r3, [sp, #36]	; 0x24
 8010058:	e76d      	b.n	800ff36 <_svfiprintf_r+0x4a>
 801005a:	fb05 3202 	mla	r2, r5, r2, r3
 801005e:	2001      	movs	r0, #1
 8010060:	460f      	mov	r7, r1
 8010062:	e7a6      	b.n	800ffb2 <_svfiprintf_r+0xc6>
 8010064:	2300      	movs	r3, #0
 8010066:	3701      	adds	r7, #1
 8010068:	9305      	str	r3, [sp, #20]
 801006a:	4619      	mov	r1, r3
 801006c:	250a      	movs	r5, #10
 801006e:	4638      	mov	r0, r7
 8010070:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010074:	3a30      	subs	r2, #48	; 0x30
 8010076:	2a09      	cmp	r2, #9
 8010078:	d903      	bls.n	8010082 <_svfiprintf_r+0x196>
 801007a:	2b00      	cmp	r3, #0
 801007c:	d0c8      	beq.n	8010010 <_svfiprintf_r+0x124>
 801007e:	9105      	str	r1, [sp, #20]
 8010080:	e7c6      	b.n	8010010 <_svfiprintf_r+0x124>
 8010082:	fb05 2101 	mla	r1, r5, r1, r2
 8010086:	2301      	movs	r3, #1
 8010088:	4607      	mov	r7, r0
 801008a:	e7f0      	b.n	801006e <_svfiprintf_r+0x182>
 801008c:	ab03      	add	r3, sp, #12
 801008e:	9300      	str	r3, [sp, #0]
 8010090:	4622      	mov	r2, r4
 8010092:	4b11      	ldr	r3, [pc, #68]	; (80100d8 <_svfiprintf_r+0x1ec>)
 8010094:	a904      	add	r1, sp, #16
 8010096:	4640      	mov	r0, r8
 8010098:	f7fd fdca 	bl	800dc30 <_printf_float>
 801009c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 80100a0:	4681      	mov	r9, r0
 80100a2:	d1d6      	bne.n	8010052 <_svfiprintf_r+0x166>
 80100a4:	89a3      	ldrh	r3, [r4, #12]
 80100a6:	065b      	lsls	r3, r3, #25
 80100a8:	f53f af35 	bmi.w	800ff16 <_svfiprintf_r+0x2a>
 80100ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80100ae:	b01d      	add	sp, #116	; 0x74
 80100b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100b4:	ab03      	add	r3, sp, #12
 80100b6:	9300      	str	r3, [sp, #0]
 80100b8:	4622      	mov	r2, r4
 80100ba:	4b07      	ldr	r3, [pc, #28]	; (80100d8 <_svfiprintf_r+0x1ec>)
 80100bc:	a904      	add	r1, sp, #16
 80100be:	4640      	mov	r0, r8
 80100c0:	f7fe f86c 	bl	800e19c <_printf_i>
 80100c4:	e7ea      	b.n	801009c <_svfiprintf_r+0x1b0>
 80100c6:	bf00      	nop
 80100c8:	080112c4 	.word	0x080112c4
 80100cc:	080112ca 	.word	0x080112ca
 80100d0:	080112ce 	.word	0x080112ce
 80100d4:	0800dc31 	.word	0x0800dc31
 80100d8:	0800fe39 	.word	0x0800fe39

080100dc <_sbrk_r>:
 80100dc:	b538      	push	{r3, r4, r5, lr}
 80100de:	4c06      	ldr	r4, [pc, #24]	; (80100f8 <_sbrk_r+0x1c>)
 80100e0:	2300      	movs	r3, #0
 80100e2:	4605      	mov	r5, r0
 80100e4:	4608      	mov	r0, r1
 80100e6:	6023      	str	r3, [r4, #0]
 80100e8:	f7f6 ffe0 	bl	80070ac <_sbrk>
 80100ec:	1c43      	adds	r3, r0, #1
 80100ee:	d102      	bne.n	80100f6 <_sbrk_r+0x1a>
 80100f0:	6823      	ldr	r3, [r4, #0]
 80100f2:	b103      	cbz	r3, 80100f6 <_sbrk_r+0x1a>
 80100f4:	602b      	str	r3, [r5, #0]
 80100f6:	bd38      	pop	{r3, r4, r5, pc}
 80100f8:	20002948 	.word	0x20002948

080100fc <__sread>:
 80100fc:	b510      	push	{r4, lr}
 80100fe:	460c      	mov	r4, r1
 8010100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010104:	f000 f8e8 	bl	80102d8 <_read_r>
 8010108:	2800      	cmp	r0, #0
 801010a:	bfab      	itete	ge
 801010c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801010e:	89a3      	ldrhlt	r3, [r4, #12]
 8010110:	181b      	addge	r3, r3, r0
 8010112:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010116:	bfac      	ite	ge
 8010118:	6563      	strge	r3, [r4, #84]	; 0x54
 801011a:	81a3      	strhlt	r3, [r4, #12]
 801011c:	bd10      	pop	{r4, pc}

0801011e <__swrite>:
 801011e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010122:	461f      	mov	r7, r3
 8010124:	898b      	ldrh	r3, [r1, #12]
 8010126:	05db      	lsls	r3, r3, #23
 8010128:	4605      	mov	r5, r0
 801012a:	460c      	mov	r4, r1
 801012c:	4616      	mov	r6, r2
 801012e:	d505      	bpl.n	801013c <__swrite+0x1e>
 8010130:	2302      	movs	r3, #2
 8010132:	2200      	movs	r2, #0
 8010134:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010138:	f000 f868 	bl	801020c <_lseek_r>
 801013c:	89a3      	ldrh	r3, [r4, #12]
 801013e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010142:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010146:	81a3      	strh	r3, [r4, #12]
 8010148:	4632      	mov	r2, r6
 801014a:	463b      	mov	r3, r7
 801014c:	4628      	mov	r0, r5
 801014e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010152:	f000 b817 	b.w	8010184 <_write_r>

08010156 <__sseek>:
 8010156:	b510      	push	{r4, lr}
 8010158:	460c      	mov	r4, r1
 801015a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801015e:	f000 f855 	bl	801020c <_lseek_r>
 8010162:	1c43      	adds	r3, r0, #1
 8010164:	89a3      	ldrh	r3, [r4, #12]
 8010166:	bf15      	itete	ne
 8010168:	6560      	strne	r0, [r4, #84]	; 0x54
 801016a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801016e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010172:	81a3      	strheq	r3, [r4, #12]
 8010174:	bf18      	it	ne
 8010176:	81a3      	strhne	r3, [r4, #12]
 8010178:	bd10      	pop	{r4, pc}

0801017a <__sclose>:
 801017a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801017e:	f000 b813 	b.w	80101a8 <_close_r>
	...

08010184 <_write_r>:
 8010184:	b538      	push	{r3, r4, r5, lr}
 8010186:	4c07      	ldr	r4, [pc, #28]	; (80101a4 <_write_r+0x20>)
 8010188:	4605      	mov	r5, r0
 801018a:	4608      	mov	r0, r1
 801018c:	4611      	mov	r1, r2
 801018e:	2200      	movs	r2, #0
 8010190:	6022      	str	r2, [r4, #0]
 8010192:	461a      	mov	r2, r3
 8010194:	f7f6 fbe9 	bl	800696a <_write>
 8010198:	1c43      	adds	r3, r0, #1
 801019a:	d102      	bne.n	80101a2 <_write_r+0x1e>
 801019c:	6823      	ldr	r3, [r4, #0]
 801019e:	b103      	cbz	r3, 80101a2 <_write_r+0x1e>
 80101a0:	602b      	str	r3, [r5, #0]
 80101a2:	bd38      	pop	{r3, r4, r5, pc}
 80101a4:	20002948 	.word	0x20002948

080101a8 <_close_r>:
 80101a8:	b538      	push	{r3, r4, r5, lr}
 80101aa:	4c06      	ldr	r4, [pc, #24]	; (80101c4 <_close_r+0x1c>)
 80101ac:	2300      	movs	r3, #0
 80101ae:	4605      	mov	r5, r0
 80101b0:	4608      	mov	r0, r1
 80101b2:	6023      	str	r3, [r4, #0]
 80101b4:	f7f6 ff45 	bl	8007042 <_close>
 80101b8:	1c43      	adds	r3, r0, #1
 80101ba:	d102      	bne.n	80101c2 <_close_r+0x1a>
 80101bc:	6823      	ldr	r3, [r4, #0]
 80101be:	b103      	cbz	r3, 80101c2 <_close_r+0x1a>
 80101c0:	602b      	str	r3, [r5, #0]
 80101c2:	bd38      	pop	{r3, r4, r5, pc}
 80101c4:	20002948 	.word	0x20002948

080101c8 <_fstat_r>:
 80101c8:	b538      	push	{r3, r4, r5, lr}
 80101ca:	4c07      	ldr	r4, [pc, #28]	; (80101e8 <_fstat_r+0x20>)
 80101cc:	2300      	movs	r3, #0
 80101ce:	4605      	mov	r5, r0
 80101d0:	4608      	mov	r0, r1
 80101d2:	4611      	mov	r1, r2
 80101d4:	6023      	str	r3, [r4, #0]
 80101d6:	f7f6 ff40 	bl	800705a <_fstat>
 80101da:	1c43      	adds	r3, r0, #1
 80101dc:	d102      	bne.n	80101e4 <_fstat_r+0x1c>
 80101de:	6823      	ldr	r3, [r4, #0]
 80101e0:	b103      	cbz	r3, 80101e4 <_fstat_r+0x1c>
 80101e2:	602b      	str	r3, [r5, #0]
 80101e4:	bd38      	pop	{r3, r4, r5, pc}
 80101e6:	bf00      	nop
 80101e8:	20002948 	.word	0x20002948

080101ec <_isatty_r>:
 80101ec:	b538      	push	{r3, r4, r5, lr}
 80101ee:	4c06      	ldr	r4, [pc, #24]	; (8010208 <_isatty_r+0x1c>)
 80101f0:	2300      	movs	r3, #0
 80101f2:	4605      	mov	r5, r0
 80101f4:	4608      	mov	r0, r1
 80101f6:	6023      	str	r3, [r4, #0]
 80101f8:	f7f6 ff3f 	bl	800707a <_isatty>
 80101fc:	1c43      	adds	r3, r0, #1
 80101fe:	d102      	bne.n	8010206 <_isatty_r+0x1a>
 8010200:	6823      	ldr	r3, [r4, #0]
 8010202:	b103      	cbz	r3, 8010206 <_isatty_r+0x1a>
 8010204:	602b      	str	r3, [r5, #0]
 8010206:	bd38      	pop	{r3, r4, r5, pc}
 8010208:	20002948 	.word	0x20002948

0801020c <_lseek_r>:
 801020c:	b538      	push	{r3, r4, r5, lr}
 801020e:	4c07      	ldr	r4, [pc, #28]	; (801022c <_lseek_r+0x20>)
 8010210:	4605      	mov	r5, r0
 8010212:	4608      	mov	r0, r1
 8010214:	4611      	mov	r1, r2
 8010216:	2200      	movs	r2, #0
 8010218:	6022      	str	r2, [r4, #0]
 801021a:	461a      	mov	r2, r3
 801021c:	f7f6 ff38 	bl	8007090 <_lseek>
 8010220:	1c43      	adds	r3, r0, #1
 8010222:	d102      	bne.n	801022a <_lseek_r+0x1e>
 8010224:	6823      	ldr	r3, [r4, #0]
 8010226:	b103      	cbz	r3, 801022a <_lseek_r+0x1e>
 8010228:	602b      	str	r3, [r5, #0]
 801022a:	bd38      	pop	{r3, r4, r5, pc}
 801022c:	20002948 	.word	0x20002948

08010230 <__ascii_mbtowc>:
 8010230:	b082      	sub	sp, #8
 8010232:	b901      	cbnz	r1, 8010236 <__ascii_mbtowc+0x6>
 8010234:	a901      	add	r1, sp, #4
 8010236:	b142      	cbz	r2, 801024a <__ascii_mbtowc+0x1a>
 8010238:	b14b      	cbz	r3, 801024e <__ascii_mbtowc+0x1e>
 801023a:	7813      	ldrb	r3, [r2, #0]
 801023c:	600b      	str	r3, [r1, #0]
 801023e:	7812      	ldrb	r2, [r2, #0]
 8010240:	1c10      	adds	r0, r2, #0
 8010242:	bf18      	it	ne
 8010244:	2001      	movne	r0, #1
 8010246:	b002      	add	sp, #8
 8010248:	4770      	bx	lr
 801024a:	4610      	mov	r0, r2
 801024c:	e7fb      	b.n	8010246 <__ascii_mbtowc+0x16>
 801024e:	f06f 0001 	mvn.w	r0, #1
 8010252:	e7f8      	b.n	8010246 <__ascii_mbtowc+0x16>

08010254 <memmove>:
 8010254:	4288      	cmp	r0, r1
 8010256:	b510      	push	{r4, lr}
 8010258:	eb01 0302 	add.w	r3, r1, r2
 801025c:	d807      	bhi.n	801026e <memmove+0x1a>
 801025e:	1e42      	subs	r2, r0, #1
 8010260:	4299      	cmp	r1, r3
 8010262:	d00a      	beq.n	801027a <memmove+0x26>
 8010264:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010268:	f802 4f01 	strb.w	r4, [r2, #1]!
 801026c:	e7f8      	b.n	8010260 <memmove+0xc>
 801026e:	4283      	cmp	r3, r0
 8010270:	d9f5      	bls.n	801025e <memmove+0xa>
 8010272:	1881      	adds	r1, r0, r2
 8010274:	1ad2      	subs	r2, r2, r3
 8010276:	42d3      	cmn	r3, r2
 8010278:	d100      	bne.n	801027c <memmove+0x28>
 801027a:	bd10      	pop	{r4, pc}
 801027c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010280:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8010284:	e7f7      	b.n	8010276 <memmove+0x22>

08010286 <__malloc_lock>:
 8010286:	4770      	bx	lr

08010288 <__malloc_unlock>:
 8010288:	4770      	bx	lr

0801028a <_realloc_r>:
 801028a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801028c:	4607      	mov	r7, r0
 801028e:	4614      	mov	r4, r2
 8010290:	460e      	mov	r6, r1
 8010292:	b921      	cbnz	r1, 801029e <_realloc_r+0x14>
 8010294:	4611      	mov	r1, r2
 8010296:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801029a:	f7ff bd73 	b.w	800fd84 <_malloc_r>
 801029e:	b922      	cbnz	r2, 80102aa <_realloc_r+0x20>
 80102a0:	f7ff fd22 	bl	800fce8 <_free_r>
 80102a4:	4625      	mov	r5, r4
 80102a6:	4628      	mov	r0, r5
 80102a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80102aa:	f000 f834 	bl	8010316 <_malloc_usable_size_r>
 80102ae:	42a0      	cmp	r0, r4
 80102b0:	d20f      	bcs.n	80102d2 <_realloc_r+0x48>
 80102b2:	4621      	mov	r1, r4
 80102b4:	4638      	mov	r0, r7
 80102b6:	f7ff fd65 	bl	800fd84 <_malloc_r>
 80102ba:	4605      	mov	r5, r0
 80102bc:	2800      	cmp	r0, #0
 80102be:	d0f2      	beq.n	80102a6 <_realloc_r+0x1c>
 80102c0:	4631      	mov	r1, r6
 80102c2:	4622      	mov	r2, r4
 80102c4:	f7ff fa1c 	bl	800f700 <memcpy>
 80102c8:	4631      	mov	r1, r6
 80102ca:	4638      	mov	r0, r7
 80102cc:	f7ff fd0c 	bl	800fce8 <_free_r>
 80102d0:	e7e9      	b.n	80102a6 <_realloc_r+0x1c>
 80102d2:	4635      	mov	r5, r6
 80102d4:	e7e7      	b.n	80102a6 <_realloc_r+0x1c>
	...

080102d8 <_read_r>:
 80102d8:	b538      	push	{r3, r4, r5, lr}
 80102da:	4c07      	ldr	r4, [pc, #28]	; (80102f8 <_read_r+0x20>)
 80102dc:	4605      	mov	r5, r0
 80102de:	4608      	mov	r0, r1
 80102e0:	4611      	mov	r1, r2
 80102e2:	2200      	movs	r2, #0
 80102e4:	6022      	str	r2, [r4, #0]
 80102e6:	461a      	mov	r2, r3
 80102e8:	f7f6 fe8e 	bl	8007008 <_read>
 80102ec:	1c43      	adds	r3, r0, #1
 80102ee:	d102      	bne.n	80102f6 <_read_r+0x1e>
 80102f0:	6823      	ldr	r3, [r4, #0]
 80102f2:	b103      	cbz	r3, 80102f6 <_read_r+0x1e>
 80102f4:	602b      	str	r3, [r5, #0]
 80102f6:	bd38      	pop	{r3, r4, r5, pc}
 80102f8:	20002948 	.word	0x20002948

080102fc <__ascii_wctomb>:
 80102fc:	b149      	cbz	r1, 8010312 <__ascii_wctomb+0x16>
 80102fe:	2aff      	cmp	r2, #255	; 0xff
 8010300:	bf85      	ittet	hi
 8010302:	238a      	movhi	r3, #138	; 0x8a
 8010304:	6003      	strhi	r3, [r0, #0]
 8010306:	700a      	strbls	r2, [r1, #0]
 8010308:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 801030c:	bf98      	it	ls
 801030e:	2001      	movls	r0, #1
 8010310:	4770      	bx	lr
 8010312:	4608      	mov	r0, r1
 8010314:	4770      	bx	lr

08010316 <_malloc_usable_size_r>:
 8010316:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801031a:	1f18      	subs	r0, r3, #4
 801031c:	2b00      	cmp	r3, #0
 801031e:	bfbc      	itt	lt
 8010320:	580b      	ldrlt	r3, [r1, r0]
 8010322:	18c0      	addlt	r0, r0, r3
 8010324:	4770      	bx	lr
	...

08010328 <_init>:
 8010328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801032a:	bf00      	nop
 801032c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801032e:	bc08      	pop	{r3}
 8010330:	469e      	mov	lr, r3
 8010332:	4770      	bx	lr

08010334 <_fini>:
 8010334:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010336:	bf00      	nop
 8010338:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801033a:	bc08      	pop	{r3}
 801033c:	469e      	mov	lr, r3
 801033e:	4770      	bx	lr
