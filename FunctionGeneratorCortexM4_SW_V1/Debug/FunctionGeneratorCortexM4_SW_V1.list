
FunctionGeneratorCortexM4_SW_V1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009ce8  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d8  08009ec8  08009ec8  00019ec8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3a0  0800a3a0  00020bc8  2**0
                  CONTENTS
  4 .ARM          00000000  0800a3a0  0800a3a0  00020bc8  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a3a0  0800a3a0  00020bc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3a0  0800a3a0  0001a3a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3a4  0800a3a4  0001a3a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000bc8  20000000  0800a3a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004a4  20000bc8  0800af70  00020bc8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000106c  0800af70  0002106c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020bc8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002439e  00000000  00000000  00020bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004b7a  00000000  00000000  00044f96  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c70  00000000  00000000  00049b10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001998  00000000  00000000  0004b780  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002f29d  00000000  00000000  0004d118  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001cabe  00000000  00000000  0007c3b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00123dd4  00000000  00000000  00098e73  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001bcc47  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007b88  00000000  00000000  001bccc4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000bc8 	.word	0x20000bc8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009eb0 	.word	0x08009eb0

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000bcc 	.word	0x20000bcc
 800021c:	08009eb0 	.word	0x08009eb0

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <DM_Init>:
 *
 *
 *
 */
void DM_Init()
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	  ILI9341_Init();
 80002c4:	f008 fa2a 	bl	800871c <ILI9341_Init>
	  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 80002c8:	2003      	movs	r0, #3
 80002ca:	f008 f9c9 	bl	8008660 <ILI9341_Set_Rotation>
	  ILI9341_Fill_Screen(WHITE);
 80002ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80002d2:	f008 fbd9 	bl	8008a88 <ILI9341_Fill_Screen>

}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
	...

080002dc <DM_PostInit>:
 *
 *
 *
 */
void DM_PostInit()
{
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af02      	add	r7, sp, #8

	  ILI9341_Draw_Text("Initialising", 10, 10, BLACK, 1, WHITE);
 80002e2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80002e6:	9301      	str	r3, [sp, #4]
 80002e8:	2301      	movs	r3, #1
 80002ea:	9300      	str	r3, [sp, #0]
 80002ec:	2300      	movs	r3, #0
 80002ee:	220a      	movs	r2, #10
 80002f0:	210a      	movs	r1, #10
 80002f2:	4807      	ldr	r0, [pc, #28]	; (8000310 <DM_PostInit+0x34>)
 80002f4:	f008 f8b4 	bl	8008460 <ILI9341_Draw_Text>
	  HAL_Delay(500);
 80002f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80002fc:	f002 fbb8 	bl	8002a70 <HAL_Delay>

	  DM_RefreshBackgroundLayout();
 8000300:	f000 fa62 	bl	80007c8 <DM_RefreshBackgroundLayout>
	  printf("Init Completed\n");
 8000304:	4803      	ldr	r0, [pc, #12]	; (8000314 <DM_PostInit+0x38>)
 8000306:	f008 fe67 	bl	8008fd8 <puts>
}
 800030a:	bf00      	nop
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	08009ec8 	.word	0x08009ec8
 8000314:	08009ed8 	.word	0x08009ed8

08000318 <DM_UpdateDisplay>:
 *
 *
 */

void DM_UpdateDisplay()
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("FUNC", 10, 210, BLACK, 2, DARKCYAN);
 800031e:	f240 33ef 	movw	r3, #1007	; 0x3ef
 8000322:	9301      	str	r3, [sp, #4]
 8000324:	2302      	movs	r3, #2
 8000326:	9300      	str	r3, [sp, #0]
 8000328:	2300      	movs	r3, #0
 800032a:	22d2      	movs	r2, #210	; 0xd2
 800032c:	210a      	movs	r1, #10
 800032e:	481a      	ldr	r0, [pc, #104]	; (8000398 <DM_UpdateDisplay+0x80>)
 8000330:	f008 f896 	bl	8008460 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("FREQ", 100, 210, BLACK, 2, DARKGREEN);
 8000334:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000338:	9301      	str	r3, [sp, #4]
 800033a:	2302      	movs	r3, #2
 800033c:	9300      	str	r3, [sp, #0]
 800033e:	2300      	movs	r3, #0
 8000340:	22d2      	movs	r2, #210	; 0xd2
 8000342:	2164      	movs	r1, #100	; 0x64
 8000344:	4815      	ldr	r0, [pc, #84]	; (800039c <DM_UpdateDisplay+0x84>)
 8000346:	f008 f88b 	bl	8008460 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("AMPL", 175, 210, BLACK, 2, YELLOW);
 800034a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800034e:	9301      	str	r3, [sp, #4]
 8000350:	2302      	movs	r3, #2
 8000352:	9300      	str	r3, [sp, #0]
 8000354:	2300      	movs	r3, #0
 8000356:	22d2      	movs	r2, #210	; 0xd2
 8000358:	21af      	movs	r1, #175	; 0xaf
 800035a:	4811      	ldr	r0, [pc, #68]	; (80003a0 <DM_UpdateDisplay+0x88>)
 800035c:	f008 f880 	bl	8008460 <ILI9341_Draw_Text>
	ILI9341_Draw_Text("BIAS", 260, 210, BLACK, 2, RED);
 8000360:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000364:	9301      	str	r3, [sp, #4]
 8000366:	2302      	movs	r3, #2
 8000368:	9300      	str	r3, [sp, #0]
 800036a:	2300      	movs	r3, #0
 800036c:	22d2      	movs	r2, #210	; 0xd2
 800036e:	f44f 7182 	mov.w	r1, #260	; 0x104
 8000372:	480c      	ldr	r0, [pc, #48]	; (80003a4 <DM_UpdateDisplay+0x8c>)
 8000374:	f008 f874 	bl	8008460 <ILI9341_Draw_Text>

	if(eNextFuncMenuStatus)		//  == ENABLE_FUNCMENU
 8000378:	4b0b      	ldr	r3, [pc, #44]	; (80003a8 <DM_UpdateDisplay+0x90>)
 800037a:	781b      	ldrb	r3, [r3, #0]
 800037c:	2b00      	cmp	r3, #0
 800037e:	d001      	beq.n	8000384 <DM_UpdateDisplay+0x6c>
		_DrawFuncSelectMenu();
 8000380:	f000 f826 	bl	80003d0 <_DrawFuncSelectMenu>

	if(eNextGainMenuStatus)		//  == ENABLE_GAINMENU
 8000384:	4b09      	ldr	r3, [pc, #36]	; (80003ac <DM_UpdateDisplay+0x94>)
 8000386:	781b      	ldrb	r3, [r3, #0]
 8000388:	2b00      	cmp	r3, #0
 800038a:	d001      	beq.n	8000390 <DM_UpdateDisplay+0x78>
		_DrawGainSelectMenu();
 800038c:	f000 f9ea 	bl	8000764 <_DrawGainSelectMenu>
/*
	if((TIM1->SR & TIM_SR_IDXF) == TIM_SR_IDXF)
	{
		TIM1->SR &= ~(TIM_SR_IDXF);
	}*/
}
 8000390:	bf00      	nop
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	08009ee8 	.word	0x08009ee8
 800039c:	08009ef0 	.word	0x08009ef0
 80003a0:	08009ef8 	.word	0x08009ef8
 80003a4:	08009f00 	.word	0x08009f00
 80003a8:	20000be4 	.word	0x20000be4
 80003ac:	20000be5 	.word	0x20000be5

080003b0 <DM_ShowFuncSelectMenu>:
 *
 *
 *
 */
void DM_ShowFuncSelectMenu(eFuncMenu_Status pValue)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b083      	sub	sp, #12
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	4603      	mov	r3, r0
 80003b8:	71fb      	strb	r3, [r7, #7]
	eNextFuncMenuStatus = pValue;
 80003ba:	4a04      	ldr	r2, [pc, #16]	; (80003cc <DM_ShowFuncSelectMenu+0x1c>)
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	7013      	strb	r3, [r2, #0]
}
 80003c0:	bf00      	nop
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr
 80003cc:	20000be4 	.word	0x20000be4

080003d0 <_DrawFuncSelectMenu>:
 *
 *
 *
 */
void _DrawFuncSelectMenu()
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af02      	add	r7, sp, #8

	switch(EM_GetOutputMode())
 80003d6:	f000 fcf9 	bl	8000dcc <EM_GetOutputMode>
 80003da:	4603      	mov	r3, r0
 80003dc:	2b05      	cmp	r3, #5
 80003de:	f200 81a1 	bhi.w	8000724 <_DrawFuncSelectMenu+0x354>
 80003e2:	a201      	add	r2, pc, #4	; (adr r2, 80003e8 <_DrawFuncSelectMenu+0x18>)
 80003e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80003e8:	08000401 	.word	0x08000401
 80003ec:	08000487 	.word	0x08000487
 80003f0:	0800050d 	.word	0x0800050d
 80003f4:	08000593 	.word	0x08000593
 80003f8:	08000619 	.word	0x08000619
 80003fc:	0800069f 	.word	0x0800069f
	{
		case Sine_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, WHITE, 2, BLACK);
 8000400:	2300      	movs	r3, #0
 8000402:	9301      	str	r3, [sp, #4]
 8000404:	2302      	movs	r3, #2
 8000406:	9300      	str	r3, [sp, #0]
 8000408:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800040c:	221e      	movs	r2, #30
 800040e:	210a      	movs	r1, #10
 8000410:	48c6      	ldr	r0, [pc, #792]	; (800072c <_DrawFuncSelectMenu+0x35c>)
 8000412:	f008 f825 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000416:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800041a:	9301      	str	r3, [sp, #4]
 800041c:	2302      	movs	r3, #2
 800041e:	9300      	str	r3, [sp, #0]
 8000420:	2300      	movs	r3, #0
 8000422:	2232      	movs	r2, #50	; 0x32
 8000424:	210a      	movs	r1, #10
 8000426:	48c2      	ldr	r0, [pc, #776]	; (8000730 <_DrawFuncSelectMenu+0x360>)
 8000428:	f008 f81a 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 800042c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000430:	9301      	str	r3, [sp, #4]
 8000432:	2302      	movs	r3, #2
 8000434:	9300      	str	r3, [sp, #0]
 8000436:	2300      	movs	r3, #0
 8000438:	2246      	movs	r2, #70	; 0x46
 800043a:	210a      	movs	r1, #10
 800043c:	48bd      	ldr	r0, [pc, #756]	; (8000734 <_DrawFuncSelectMenu+0x364>)
 800043e:	f008 f80f 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 8000442:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000446:	9301      	str	r3, [sp, #4]
 8000448:	2302      	movs	r3, #2
 800044a:	9300      	str	r3, [sp, #0]
 800044c:	2300      	movs	r3, #0
 800044e:	225a      	movs	r2, #90	; 0x5a
 8000450:	210a      	movs	r1, #10
 8000452:	48b9      	ldr	r0, [pc, #740]	; (8000738 <_DrawFuncSelectMenu+0x368>)
 8000454:	f008 f804 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 8000458:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800045c:	9301      	str	r3, [sp, #4]
 800045e:	2302      	movs	r3, #2
 8000460:	9300      	str	r3, [sp, #0]
 8000462:	2300      	movs	r3, #0
 8000464:	226e      	movs	r2, #110	; 0x6e
 8000466:	210a      	movs	r1, #10
 8000468:	48b4      	ldr	r0, [pc, #720]	; (800073c <_DrawFuncSelectMenu+0x36c>)
 800046a:	f007 fff9 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 800046e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000472:	9301      	str	r3, [sp, #4]
 8000474:	2302      	movs	r3, #2
 8000476:	9300      	str	r3, [sp, #0]
 8000478:	2300      	movs	r3, #0
 800047a:	2282      	movs	r2, #130	; 0x82
 800047c:	210a      	movs	r1, #10
 800047e:	48b0      	ldr	r0, [pc, #704]	; (8000740 <_DrawFuncSelectMenu+0x370>)
 8000480:	f007 ffee 	bl	8008460 <ILI9341_Draw_Text>
			break;
 8000484:	e14e      	b.n	8000724 <_DrawFuncSelectMenu+0x354>
		case Square_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 8000486:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800048a:	9301      	str	r3, [sp, #4]
 800048c:	2302      	movs	r3, #2
 800048e:	9300      	str	r3, [sp, #0]
 8000490:	2300      	movs	r3, #0
 8000492:	221e      	movs	r2, #30
 8000494:	210a      	movs	r1, #10
 8000496:	48a5      	ldr	r0, [pc, #660]	; (800072c <_DrawFuncSelectMenu+0x35c>)
 8000498:	f007 ffe2 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, WHITE, 2, BLACK);
 800049c:	2300      	movs	r3, #0
 800049e:	9301      	str	r3, [sp, #4]
 80004a0:	2302      	movs	r3, #2
 80004a2:	9300      	str	r3, [sp, #0]
 80004a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004a8:	2232      	movs	r2, #50	; 0x32
 80004aa:	210a      	movs	r1, #10
 80004ac:	48a0      	ldr	r0, [pc, #640]	; (8000730 <_DrawFuncSelectMenu+0x360>)
 80004ae:	f007 ffd7 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 80004b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	2302      	movs	r3, #2
 80004ba:	9300      	str	r3, [sp, #0]
 80004bc:	2300      	movs	r3, #0
 80004be:	2246      	movs	r2, #70	; 0x46
 80004c0:	210a      	movs	r1, #10
 80004c2:	489c      	ldr	r0, [pc, #624]	; (8000734 <_DrawFuncSelectMenu+0x364>)
 80004c4:	f007 ffcc 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 80004c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004cc:	9301      	str	r3, [sp, #4]
 80004ce:	2302      	movs	r3, #2
 80004d0:	9300      	str	r3, [sp, #0]
 80004d2:	2300      	movs	r3, #0
 80004d4:	225a      	movs	r2, #90	; 0x5a
 80004d6:	210a      	movs	r1, #10
 80004d8:	4897      	ldr	r0, [pc, #604]	; (8000738 <_DrawFuncSelectMenu+0x368>)
 80004da:	f007 ffc1 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 80004de:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004e2:	9301      	str	r3, [sp, #4]
 80004e4:	2302      	movs	r3, #2
 80004e6:	9300      	str	r3, [sp, #0]
 80004e8:	2300      	movs	r3, #0
 80004ea:	226e      	movs	r2, #110	; 0x6e
 80004ec:	210a      	movs	r1, #10
 80004ee:	4893      	ldr	r0, [pc, #588]	; (800073c <_DrawFuncSelectMenu+0x36c>)
 80004f0:	f007 ffb6 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 80004f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004f8:	9301      	str	r3, [sp, #4]
 80004fa:	2302      	movs	r3, #2
 80004fc:	9300      	str	r3, [sp, #0]
 80004fe:	2300      	movs	r3, #0
 8000500:	2282      	movs	r2, #130	; 0x82
 8000502:	210a      	movs	r1, #10
 8000504:	488e      	ldr	r0, [pc, #568]	; (8000740 <_DrawFuncSelectMenu+0x370>)
 8000506:	f007 ffab 	bl	8008460 <ILI9341_Draw_Text>
			break;
 800050a:	e10b      	b.n	8000724 <_DrawFuncSelectMenu+0x354>
		case Saw_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 800050c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000510:	9301      	str	r3, [sp, #4]
 8000512:	2302      	movs	r3, #2
 8000514:	9300      	str	r3, [sp, #0]
 8000516:	2300      	movs	r3, #0
 8000518:	221e      	movs	r2, #30
 800051a:	210a      	movs	r1, #10
 800051c:	4883      	ldr	r0, [pc, #524]	; (800072c <_DrawFuncSelectMenu+0x35c>)
 800051e:	f007 ff9f 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 8000522:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000526:	9301      	str	r3, [sp, #4]
 8000528:	2302      	movs	r3, #2
 800052a:	9300      	str	r3, [sp, #0]
 800052c:	2300      	movs	r3, #0
 800052e:	2232      	movs	r2, #50	; 0x32
 8000530:	210a      	movs	r1, #10
 8000532:	487f      	ldr	r0, [pc, #508]	; (8000730 <_DrawFuncSelectMenu+0x360>)
 8000534:	f007 ff94 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, WHITE, 2, BLACK);
 8000538:	2300      	movs	r3, #0
 800053a:	9301      	str	r3, [sp, #4]
 800053c:	2302      	movs	r3, #2
 800053e:	9300      	str	r3, [sp, #0]
 8000540:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000544:	2246      	movs	r2, #70	; 0x46
 8000546:	210a      	movs	r1, #10
 8000548:	487a      	ldr	r0, [pc, #488]	; (8000734 <_DrawFuncSelectMenu+0x364>)
 800054a:	f007 ff89 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 800054e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000552:	9301      	str	r3, [sp, #4]
 8000554:	2302      	movs	r3, #2
 8000556:	9300      	str	r3, [sp, #0]
 8000558:	2300      	movs	r3, #0
 800055a:	225a      	movs	r2, #90	; 0x5a
 800055c:	210a      	movs	r1, #10
 800055e:	4876      	ldr	r0, [pc, #472]	; (8000738 <_DrawFuncSelectMenu+0x368>)
 8000560:	f007 ff7e 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 8000564:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000568:	9301      	str	r3, [sp, #4]
 800056a:	2302      	movs	r3, #2
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	2300      	movs	r3, #0
 8000570:	226e      	movs	r2, #110	; 0x6e
 8000572:	210a      	movs	r1, #10
 8000574:	4871      	ldr	r0, [pc, #452]	; (800073c <_DrawFuncSelectMenu+0x36c>)
 8000576:	f007 ff73 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 800057a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800057e:	9301      	str	r3, [sp, #4]
 8000580:	2302      	movs	r3, #2
 8000582:	9300      	str	r3, [sp, #0]
 8000584:	2300      	movs	r3, #0
 8000586:	2282      	movs	r2, #130	; 0x82
 8000588:	210a      	movs	r1, #10
 800058a:	486d      	ldr	r0, [pc, #436]	; (8000740 <_DrawFuncSelectMenu+0x370>)
 800058c:	f007 ff68 	bl	8008460 <ILI9341_Draw_Text>
			break;
 8000590:	e0c8      	b.n	8000724 <_DrawFuncSelectMenu+0x354>
		case RevSaw_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 8000592:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000596:	9301      	str	r3, [sp, #4]
 8000598:	2302      	movs	r3, #2
 800059a:	9300      	str	r3, [sp, #0]
 800059c:	2300      	movs	r3, #0
 800059e:	221e      	movs	r2, #30
 80005a0:	210a      	movs	r1, #10
 80005a2:	4862      	ldr	r0, [pc, #392]	; (800072c <_DrawFuncSelectMenu+0x35c>)
 80005a4:	f007 ff5c 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 80005a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ac:	9301      	str	r3, [sp, #4]
 80005ae:	2302      	movs	r3, #2
 80005b0:	9300      	str	r3, [sp, #0]
 80005b2:	2300      	movs	r3, #0
 80005b4:	2232      	movs	r2, #50	; 0x32
 80005b6:	210a      	movs	r1, #10
 80005b8:	485d      	ldr	r0, [pc, #372]	; (8000730 <_DrawFuncSelectMenu+0x360>)
 80005ba:	f007 ff51 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 80005be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005c2:	9301      	str	r3, [sp, #4]
 80005c4:	2302      	movs	r3, #2
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	2300      	movs	r3, #0
 80005ca:	2246      	movs	r2, #70	; 0x46
 80005cc:	210a      	movs	r1, #10
 80005ce:	4859      	ldr	r0, [pc, #356]	; (8000734 <_DrawFuncSelectMenu+0x364>)
 80005d0:	f007 ff46 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, WHITE, 2, BLACK);
 80005d4:	2300      	movs	r3, #0
 80005d6:	9301      	str	r3, [sp, #4]
 80005d8:	2302      	movs	r3, #2
 80005da:	9300      	str	r3, [sp, #0]
 80005dc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005e0:	225a      	movs	r2, #90	; 0x5a
 80005e2:	210a      	movs	r1, #10
 80005e4:	4854      	ldr	r0, [pc, #336]	; (8000738 <_DrawFuncSelectMenu+0x368>)
 80005e6:	f007 ff3b 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 80005ea:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80005ee:	9301      	str	r3, [sp, #4]
 80005f0:	2302      	movs	r3, #2
 80005f2:	9300      	str	r3, [sp, #0]
 80005f4:	2300      	movs	r3, #0
 80005f6:	226e      	movs	r2, #110	; 0x6e
 80005f8:	210a      	movs	r1, #10
 80005fa:	4850      	ldr	r0, [pc, #320]	; (800073c <_DrawFuncSelectMenu+0x36c>)
 80005fc:	f007 ff30 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 8000600:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000604:	9301      	str	r3, [sp, #4]
 8000606:	2302      	movs	r3, #2
 8000608:	9300      	str	r3, [sp, #0]
 800060a:	2300      	movs	r3, #0
 800060c:	2282      	movs	r2, #130	; 0x82
 800060e:	210a      	movs	r1, #10
 8000610:	484b      	ldr	r0, [pc, #300]	; (8000740 <_DrawFuncSelectMenu+0x370>)
 8000612:	f007 ff25 	bl	8008460 <ILI9341_Draw_Text>
			break;
 8000616:	e085      	b.n	8000724 <_DrawFuncSelectMenu+0x354>
		case Triangle_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 8000618:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	2302      	movs	r3, #2
 8000620:	9300      	str	r3, [sp, #0]
 8000622:	2300      	movs	r3, #0
 8000624:	221e      	movs	r2, #30
 8000626:	210a      	movs	r1, #10
 8000628:	4840      	ldr	r0, [pc, #256]	; (800072c <_DrawFuncSelectMenu+0x35c>)
 800062a:	f007 ff19 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 800062e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000632:	9301      	str	r3, [sp, #4]
 8000634:	2302      	movs	r3, #2
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2300      	movs	r3, #0
 800063a:	2232      	movs	r2, #50	; 0x32
 800063c:	210a      	movs	r1, #10
 800063e:	483c      	ldr	r0, [pc, #240]	; (8000730 <_DrawFuncSelectMenu+0x360>)
 8000640:	f007 ff0e 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 8000644:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	2302      	movs	r3, #2
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2300      	movs	r3, #0
 8000650:	2246      	movs	r2, #70	; 0x46
 8000652:	210a      	movs	r1, #10
 8000654:	4837      	ldr	r0, [pc, #220]	; (8000734 <_DrawFuncSelectMenu+0x364>)
 8000656:	f007 ff03 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 800065a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	2302      	movs	r3, #2
 8000662:	9300      	str	r3, [sp, #0]
 8000664:	2300      	movs	r3, #0
 8000666:	225a      	movs	r2, #90	; 0x5a
 8000668:	210a      	movs	r1, #10
 800066a:	4833      	ldr	r0, [pc, #204]	; (8000738 <_DrawFuncSelectMenu+0x368>)
 800066c:	f007 fef8 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, WHITE, 2, BLACK);
 8000670:	2300      	movs	r3, #0
 8000672:	9301      	str	r3, [sp, #4]
 8000674:	2302      	movs	r3, #2
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800067c:	226e      	movs	r2, #110	; 0x6e
 800067e:	210a      	movs	r1, #10
 8000680:	482e      	ldr	r0, [pc, #184]	; (800073c <_DrawFuncSelectMenu+0x36c>)
 8000682:	f007 feed 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, BLACK, 2, WHITE);
 8000686:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800068a:	9301      	str	r3, [sp, #4]
 800068c:	2302      	movs	r3, #2
 800068e:	9300      	str	r3, [sp, #0]
 8000690:	2300      	movs	r3, #0
 8000692:	2282      	movs	r2, #130	; 0x82
 8000694:	210a      	movs	r1, #10
 8000696:	482a      	ldr	r0, [pc, #168]	; (8000740 <_DrawFuncSelectMenu+0x370>)
 8000698:	f007 fee2 	bl	8008460 <ILI9341_Draw_Text>
			break;
 800069c:	e042      	b.n	8000724 <_DrawFuncSelectMenu+0x354>
		case Impulse_Out_Mode:
			ILI9341_Draw_Text("- SINE", 	10, 30, BLACK, 2, WHITE);
 800069e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006a2:	9301      	str	r3, [sp, #4]
 80006a4:	2302      	movs	r3, #2
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	2300      	movs	r3, #0
 80006aa:	221e      	movs	r2, #30
 80006ac:	210a      	movs	r1, #10
 80006ae:	481f      	ldr	r0, [pc, #124]	; (800072c <_DrawFuncSelectMenu+0x35c>)
 80006b0:	f007 fed6 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SQUARE", 	10, 50, BLACK, 2, WHITE);
 80006b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006b8:	9301      	str	r3, [sp, #4]
 80006ba:	2302      	movs	r3, #2
 80006bc:	9300      	str	r3, [sp, #0]
 80006be:	2300      	movs	r3, #0
 80006c0:	2232      	movs	r2, #50	; 0x32
 80006c2:	210a      	movs	r1, #10
 80006c4:	481a      	ldr	r0, [pc, #104]	; (8000730 <_DrawFuncSelectMenu+0x360>)
 80006c6:	f007 fecb 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- SAW", 		10, 70, BLACK, 2, WHITE);
 80006ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006ce:	9301      	str	r3, [sp, #4]
 80006d0:	2302      	movs	r3, #2
 80006d2:	9300      	str	r3, [sp, #0]
 80006d4:	2300      	movs	r3, #0
 80006d6:	2246      	movs	r2, #70	; 0x46
 80006d8:	210a      	movs	r1, #10
 80006da:	4816      	ldr	r0, [pc, #88]	; (8000734 <_DrawFuncSelectMenu+0x364>)
 80006dc:	f007 fec0 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- REV SAW", 	10, 90, BLACK, 2, WHITE);
 80006e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006e4:	9301      	str	r3, [sp, #4]
 80006e6:	2302      	movs	r3, #2
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2300      	movs	r3, #0
 80006ec:	225a      	movs	r2, #90	; 0x5a
 80006ee:	210a      	movs	r1, #10
 80006f0:	4811      	ldr	r0, [pc, #68]	; (8000738 <_DrawFuncSelectMenu+0x368>)
 80006f2:	f007 feb5 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- TRIANGLE",	10, 110, BLACK, 2, WHITE);
 80006f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80006fa:	9301      	str	r3, [sp, #4]
 80006fc:	2302      	movs	r3, #2
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	2300      	movs	r3, #0
 8000702:	226e      	movs	r2, #110	; 0x6e
 8000704:	210a      	movs	r1, #10
 8000706:	480d      	ldr	r0, [pc, #52]	; (800073c <_DrawFuncSelectMenu+0x36c>)
 8000708:	f007 feaa 	bl	8008460 <ILI9341_Draw_Text>
			ILI9341_Draw_Text("- UNIT", 	10, 130, WHITE, 2, BLACK);
 800070c:	2300      	movs	r3, #0
 800070e:	9301      	str	r3, [sp, #4]
 8000710:	2302      	movs	r3, #2
 8000712:	9300      	str	r3, [sp, #0]
 8000714:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000718:	2282      	movs	r2, #130	; 0x82
 800071a:	210a      	movs	r1, #10
 800071c:	4808      	ldr	r0, [pc, #32]	; (8000740 <_DrawFuncSelectMenu+0x370>)
 800071e:	f007 fe9f 	bl	8008460 <ILI9341_Draw_Text>
			break;
 8000722:	bf00      	nop

	}

}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	08009f08 	.word	0x08009f08
 8000730:	08009f10 	.word	0x08009f10
 8000734:	08009f1c 	.word	0x08009f1c
 8000738:	08009f24 	.word	0x08009f24
 800073c:	08009f30 	.word	0x08009f30
 8000740:	08009f3c 	.word	0x08009f3c

08000744 <DM_ShowGainSelectMenu>:
 *
 *
 *
 */
void DM_ShowGainSelectMenu(eGainMenu_Status pValue)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
	eNextGainMenuStatus = pValue;
 800074e:	4a04      	ldr	r2, [pc, #16]	; (8000760 <DM_ShowGainSelectMenu+0x1c>)
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	7013      	strb	r3, [r2, #0]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	20000be5 	.word	0x20000be5

08000764 <_DrawGainSelectMenu>:
 *
 *
 *
 */
void _DrawGainSelectMenu()
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af02      	add	r7, sp, #8

	ILI9341_Draw_Text("Output Signal Gain: ", 	10, 120, BLACK, 2, WHITE);
 800076a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800076e:	9301      	str	r3, [sp, #4]
 8000770:	2302      	movs	r3, #2
 8000772:	9300      	str	r3, [sp, #0]
 8000774:	2300      	movs	r3, #0
 8000776:	2278      	movs	r2, #120	; 0x78
 8000778:	210a      	movs	r1, #10
 800077a:	4811      	ldr	r0, [pc, #68]	; (80007c0 <_DrawGainSelectMenu+0x5c>)
 800077c:	f007 fe70 	bl	8008460 <ILI9341_Draw_Text>

	char gain[11] = "";
 8000780:	2300      	movs	r3, #0
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	2200      	movs	r2, #0
 800078a:	601a      	str	r2, [r3, #0]
 800078c:	f8c3 2003 	str.w	r2, [r3, #3]
	snprintf(gain, sizeof(gain), "%u", (uint8_t)EM_GetOutputGain());
 8000790:	f000 fb28 	bl	8000de4 <EM_GetOutputGain>
 8000794:	4603      	mov	r3, r0
 8000796:	1d38      	adds	r0, r7, #4
 8000798:	4a0a      	ldr	r2, [pc, #40]	; (80007c4 <_DrawGainSelectMenu+0x60>)
 800079a:	210b      	movs	r1, #11
 800079c:	f008 fc24 	bl	8008fe8 <sniprintf>
	ILI9341_Draw_Text(gain, 250, 120, WHITE, 2, BLACK);
 80007a0:	1d38      	adds	r0, r7, #4
 80007a2:	2300      	movs	r3, #0
 80007a4:	9301      	str	r3, [sp, #4]
 80007a6:	2302      	movs	r3, #2
 80007a8:	9300      	str	r3, [sp, #0]
 80007aa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007ae:	2278      	movs	r2, #120	; 0x78
 80007b0:	21fa      	movs	r1, #250	; 0xfa
 80007b2:	f007 fe55 	bl	8008460 <ILI9341_Draw_Text>

}
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	08009f44 	.word	0x08009f44
 80007c4:	08009f5c 	.word	0x08009f5c

080007c8 <DM_RefreshBackgroundLayout>:
 * Call this only once during init.
 *
 *
 */
void DM_RefreshBackgroundLayout()
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af04      	add	r7, sp, #16


	ILI9341_Fill_Screen(WHITE);
 80007ce:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80007d2:	f008 f959 	bl	8008a88 <ILI9341_Fill_Screen>

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[0],
 80007d6:	4b1d      	ldr	r3, [pc, #116]	; (800084c <DM_RefreshBackgroundLayout+0x84>)
 80007d8:	8818      	ldrh	r0, [r3, #0]
 80007da:	2300      	movs	r3, #0
 80007dc:	9302      	str	r3, [sp, #8]
 80007de:	2302      	movs	r3, #2
 80007e0:	9301      	str	r3, [sp, #4]
 80007e2:	f240 33ef 	movw	r3, #1007	; 0x3ef
 80007e6:	9300      	str	r3, [sp, #0]
 80007e8:	2332      	movs	r3, #50	; 0x32
 80007ea:	2250      	movs	r2, #80	; 0x50
 80007ec:	21c8      	movs	r1, #200	; 0xc8
 80007ee:	f007 fccd 	bl	800818c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKCYAN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[1],
 80007f2:	4b16      	ldr	r3, [pc, #88]	; (800084c <DM_RefreshBackgroundLayout+0x84>)
 80007f4:	8858      	ldrh	r0, [r3, #2]
 80007f6:	2300      	movs	r3, #0
 80007f8:	9302      	str	r3, [sp, #8]
 80007fa:	2302      	movs	r3, #2
 80007fc:	9301      	str	r3, [sp, #4]
 80007fe:	f44f 7378 	mov.w	r3, #992	; 0x3e0
 8000802:	9300      	str	r3, [sp, #0]
 8000804:	2332      	movs	r3, #50	; 0x32
 8000806:	2250      	movs	r2, #80	; 0x50
 8000808:	21c8      	movs	r1, #200	; 0xc8
 800080a:	f007 fcbf 	bl	800818c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													DARKGREEN,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[2],
 800080e:	4b0f      	ldr	r3, [pc, #60]	; (800084c <DM_RefreshBackgroundLayout+0x84>)
 8000810:	8898      	ldrh	r0, [r3, #4]
 8000812:	2300      	movs	r3, #0
 8000814:	9302      	str	r3, [sp, #8]
 8000816:	2302      	movs	r3, #2
 8000818:	9301      	str	r3, [sp, #4]
 800081a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800081e:	9300      	str	r3, [sp, #0]
 8000820:	2332      	movs	r3, #50	; 0x32
 8000822:	2250      	movs	r2, #80	; 0x50
 8000824:	21c8      	movs	r1, #200	; 0xc8
 8000826:	f007 fcb1 	bl	800818c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_HEIGHT,
													YELLOW,
													BORDER_SIZE,
													BLACK);

	ILI9341_Draw_Bordered_Filled_Rectangle_Coord(	btn_x_pos[3],
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <DM_RefreshBackgroundLayout+0x84>)
 800082c:	88d8      	ldrh	r0, [r3, #6]
 800082e:	2300      	movs	r3, #0
 8000830:	9302      	str	r3, [sp, #8]
 8000832:	2302      	movs	r3, #2
 8000834:	9301      	str	r3, [sp, #4]
 8000836:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800083a:	9300      	str	r3, [sp, #0]
 800083c:	2332      	movs	r3, #50	; 0x32
 800083e:	2250      	movs	r2, #80	; 0x50
 8000840:	21c8      	movs	r1, #200	; 0xc8
 8000842:	f007 fca3 	bl	800818c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>
													BTN_WIDTH,
													BTN_HEIGHT,
													RED,
													BORDER_SIZE,
													BLACK);
}
 8000846:	bf00      	nop
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}
 800084c:	20000000 	.word	0x20000000

08000850 <EM_ProcessEvent>:
 *
 * 	Main state machine for event process
 *
 */
void EM_ProcessEvent()
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0

	switch(eNextState)
 8000854:	4b36      	ldr	r3, [pc, #216]	; (8000930 <EM_ProcessEvent+0xe0>)
 8000856:	781b      	ldrb	r3, [r3, #0]
 8000858:	2b01      	cmp	r3, #1
 800085a:	d037      	beq.n	80008cc <EM_ProcessEvent+0x7c>
 800085c:	2b02      	cmp	r3, #2
 800085e:	d04a      	beq.n	80008f6 <EM_ProcessEvent+0xa6>
 8000860:	2b00      	cmp	r3, #0
 8000862:	d000      	beq.n	8000866 <EM_ProcessEvent+0x16>
			}
			break;
			break;

		default:
			break;
 8000864:	e061      	b.n	800092a <EM_ProcessEvent+0xda>
			if(eNewEvent == evFuncMenu)
 8000866:	4b33      	ldr	r3, [pc, #204]	; (8000934 <EM_ProcessEvent+0xe4>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	2b01      	cmp	r3, #1
 800086c:	d105      	bne.n	800087a <EM_ProcessEvent+0x2a>
				eNextState = _FuncMenuHandler();
 800086e:	f000 f863 	bl	8000938 <_FuncMenuHandler>
 8000872:	4603      	mov	r3, r0
 8000874:	461a      	mov	r2, r3
 8000876:	4b2e      	ldr	r3, [pc, #184]	; (8000930 <EM_ProcessEvent+0xe0>)
 8000878:	701a      	strb	r2, [r3, #0]
			if(eNewEvent == evFreqMenu)
 800087a:	4b2e      	ldr	r3, [pc, #184]	; (8000934 <EM_ProcessEvent+0xe4>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b02      	cmp	r3, #2
 8000880:	d105      	bne.n	800088e <EM_ProcessEvent+0x3e>
				eNextState = _FreqMenuHandler();
 8000882:	f000 fa75 	bl	8000d70 <_FreqMenuHandler>
 8000886:	4603      	mov	r3, r0
 8000888:	461a      	mov	r2, r3
 800088a:	4b29      	ldr	r3, [pc, #164]	; (8000930 <EM_ProcessEvent+0xe0>)
 800088c:	701a      	strb	r2, [r3, #0]
			if(eNewEvent == evGainMenu)
 800088e:	4b29      	ldr	r3, [pc, #164]	; (8000934 <EM_ProcessEvent+0xe4>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	2b03      	cmp	r3, #3
 8000894:	d105      	bne.n	80008a2 <EM_ProcessEvent+0x52>
				eNextState = _GainMenuHandler();
 8000896:	f000 f93f 	bl	8000b18 <_GainMenuHandler>
 800089a:	4603      	mov	r3, r0
 800089c:	461a      	mov	r2, r3
 800089e:	4b24      	ldr	r3, [pc, #144]	; (8000930 <EM_ProcessEvent+0xe0>)
 80008a0:	701a      	strb	r2, [r3, #0]
			if(eNewEvent == evBiasMenu)
 80008a2:	4b24      	ldr	r3, [pc, #144]	; (8000934 <EM_ProcessEvent+0xe4>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	2b04      	cmp	r3, #4
 80008a8:	d105      	bne.n	80008b6 <EM_ProcessEvent+0x66>
				eNextState = _BiasMenuHandler();
 80008aa:	f000 fa6b 	bl	8000d84 <_BiasMenuHandler>
 80008ae:	4603      	mov	r3, r0
 80008b0:	461a      	mov	r2, r3
 80008b2:	4b1f      	ldr	r3, [pc, #124]	; (8000930 <EM_ProcessEvent+0xe0>)
 80008b4:	701a      	strb	r2, [r3, #0]
			if(eNewEvent == evAdjustConfirmed)
 80008b6:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <EM_ProcessEvent+0xe4>)
 80008b8:	781b      	ldrb	r3, [r3, #0]
 80008ba:	2b07      	cmp	r3, #7
 80008bc:	d130      	bne.n	8000920 <EM_ProcessEvent+0xd0>
				eNextState = _AdjustConfirmedHandler();
 80008be:	f000 fa6b 	bl	8000d98 <_AdjustConfirmedHandler>
 80008c2:	4603      	mov	r3, r0
 80008c4:	461a      	mov	r2, r3
 80008c6:	4b1a      	ldr	r3, [pc, #104]	; (8000930 <EM_ProcessEvent+0xe0>)
 80008c8:	701a      	strb	r2, [r3, #0]
			break;
 80008ca:	e029      	b.n	8000920 <EM_ProcessEvent+0xd0>
			if(eNewEvent == evEncoderSet)
 80008cc:	4b19      	ldr	r3, [pc, #100]	; (8000934 <EM_ProcessEvent+0xe4>)
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	2b05      	cmp	r3, #5
 80008d2:	d105      	bne.n	80008e0 <EM_ProcessEvent+0x90>
				eNextState = _FuncSetHandler();
 80008d4:	f000 f842 	bl	800095c <_FuncSetHandler>
 80008d8:	4603      	mov	r3, r0
 80008da:	461a      	mov	r2, r3
 80008dc:	4b14      	ldr	r3, [pc, #80]	; (8000930 <EM_ProcessEvent+0xe0>)
 80008de:	701a      	strb	r2, [r3, #0]
			if(eNewEvent == evEncoderPush)
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <EM_ProcessEvent+0xe4>)
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b06      	cmp	r3, #6
 80008e6:	d11d      	bne.n	8000924 <EM_ProcessEvent+0xd4>
				eNextState = _ExitFuncMenuHandler();
 80008e8:	f000 f8f4 	bl	8000ad4 <_ExitFuncMenuHandler>
 80008ec:	4603      	mov	r3, r0
 80008ee:	461a      	mov	r2, r3
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <EM_ProcessEvent+0xe0>)
 80008f2:	701a      	strb	r2, [r3, #0]
			break;
 80008f4:	e016      	b.n	8000924 <EM_ProcessEvent+0xd4>
			if(eNewEvent == evEncoderSet)
 80008f6:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <EM_ProcessEvent+0xe4>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	2b05      	cmp	r3, #5
 80008fc:	d105      	bne.n	800090a <EM_ProcessEvent+0xba>
				eNextState = _GainSetHandler();
 80008fe:	f000 f91d 	bl	8000b3c <_GainSetHandler>
 8000902:	4603      	mov	r3, r0
 8000904:	461a      	mov	r2, r3
 8000906:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <EM_ProcessEvent+0xe0>)
 8000908:	701a      	strb	r2, [r3, #0]
			if(eNewEvent == evEncoderPush)
 800090a:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <EM_ProcessEvent+0xe4>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	2b06      	cmp	r3, #6
 8000910:	d10a      	bne.n	8000928 <EM_ProcessEvent+0xd8>
				eNextState = _ExitGainMenuHandler();
 8000912:	f000 fa0b 	bl	8000d2c <_ExitGainMenuHandler>
 8000916:	4603      	mov	r3, r0
 8000918:	461a      	mov	r2, r3
 800091a:	4b05      	ldr	r3, [pc, #20]	; (8000930 <EM_ProcessEvent+0xe0>)
 800091c:	701a      	strb	r2, [r3, #0]
			break;
 800091e:	e003      	b.n	8000928 <EM_ProcessEvent+0xd8>
			break;
 8000920:	bf00      	nop
 8000922:	e002      	b.n	800092a <EM_ProcessEvent+0xda>
			break;
 8000924:	bf00      	nop
 8000926:	e000      	b.n	800092a <EM_ProcessEvent+0xda>
			break;
 8000928:	bf00      	nop
	}

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	20000be6 	.word	0x20000be6
 8000934:	20000be7 	.word	0x20000be7

08000938 <_FuncMenuHandler>:
 *
 *	Business logic for evFunctionMenu events
 *
 */
eSystemState _FuncMenuHandler(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FunctionMenu Event captured\n");
 800093c:	4805      	ldr	r0, [pc, #20]	; (8000954 <_FuncMenuHandler+0x1c>)
 800093e:	f008 fb4b 	bl	8008fd8 <puts>
#endif

	DM_ShowFuncSelectMenu(ENABLE_FUNCMENU);
 8000942:	2001      	movs	r0, #1
 8000944:	f7ff fd34 	bl	80003b0 <DM_ShowFuncSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	TIM1->ARR = 20;
 8000948:	4b03      	ldr	r3, [pc, #12]	; (8000958 <_FuncMenuHandler+0x20>)
 800094a:	2214      	movs	r2, #20
 800094c:	62da      	str	r2, [r3, #44]	; 0x2c

	return Func_Menu_State;
 800094e:	2301      	movs	r3, #1
}
 8000950:	4618      	mov	r0, r3
 8000952:	bd80      	pop	{r7, pc}
 8000954:	08009fc0 	.word	0x08009fc0
 8000958:	40012c00 	.word	0x40012c00

0800095c <_FuncSetHandler>:
 *
 *	Business logic for evFunctionSet events
 *
 */
eSystemState _FuncSetHandler(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af02      	add	r7, sp, #8
#ifdef EM_SWV_DEBUG
	printf("FunctionAdjust Event captured\n");
 8000962:	4851      	ldr	r0, [pc, #324]	; (8000aa8 <_FuncSetHandler+0x14c>)
 8000964:	f008 fb38 	bl	8008fd8 <puts>
#endif

	switch(TIM1->CNT)
 8000968:	4b50      	ldr	r3, [pc, #320]	; (8000aac <_FuncSetHandler+0x150>)
 800096a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096c:	2b17      	cmp	r3, #23
 800096e:	f200 8093 	bhi.w	8000a98 <_FuncSetHandler+0x13c>
 8000972:	a201      	add	r2, pc, #4	; (adr r2, 8000978 <_FuncSetHandler+0x1c>)
 8000974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000978:	080009d9 	.word	0x080009d9
 800097c:	080009d9 	.word	0x080009d9
 8000980:	080009d9 	.word	0x080009d9
 8000984:	080009d9 	.word	0x080009d9
 8000988:	080009f9 	.word	0x080009f9
 800098c:	080009f9 	.word	0x080009f9
 8000990:	080009f9 	.word	0x080009f9
 8000994:	080009f9 	.word	0x080009f9
 8000998:	08000a19 	.word	0x08000a19
 800099c:	08000a19 	.word	0x08000a19
 80009a0:	08000a19 	.word	0x08000a19
 80009a4:	08000a19 	.word	0x08000a19
 80009a8:	08000a39 	.word	0x08000a39
 80009ac:	08000a39 	.word	0x08000a39
 80009b0:	08000a39 	.word	0x08000a39
 80009b4:	08000a39 	.word	0x08000a39
 80009b8:	08000a59 	.word	0x08000a59
 80009bc:	08000a59 	.word	0x08000a59
 80009c0:	08000a59 	.word	0x08000a59
 80009c4:	08000a59 	.word	0x08000a59
 80009c8:	08000a79 	.word	0x08000a79
 80009cc:	08000a79 	.word	0x08000a79
 80009d0:	08000a79 	.word	0x08000a79
 80009d4:	08000a79 	.word	0x08000a79
	{
		case 0:
		case 1:
		case 2:
		case 3:
			eNewOutMode = Sine_Out_Mode;
 80009d8:	4b35      	ldr	r3, [pc, #212]	; (8000ab0 <_FuncSetHandler+0x154>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80009de:	2100      	movs	r1, #0
 80009e0:	4834      	ldr	r0, [pc, #208]	; (8000ab4 <_FuncSetHandler+0x158>)
 80009e2:	f003 fded 	bl	80045c0 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 80009e6:	2300      	movs	r3, #0
 80009e8:	9300      	str	r3, [sp, #0]
 80009ea:	2378      	movs	r3, #120	; 0x78
 80009ec:	4a32      	ldr	r2, [pc, #200]	; (8000ab8 <_FuncSetHandler+0x15c>)
 80009ee:	2100      	movs	r1, #0
 80009f0:	4830      	ldr	r0, [pc, #192]	; (8000ab4 <_FuncSetHandler+0x158>)
 80009f2:	f003 fd23 	bl	800443c <HAL_DAC_Start_DMA>
			break;
 80009f6:	e04f      	b.n	8000a98 <_FuncSetHandler+0x13c>
		case 4:
		case 5:
		case 6:
		case 7:
			eNewOutMode = Square_Out_Mode;
 80009f8:	4b2d      	ldr	r3, [pc, #180]	; (8000ab0 <_FuncSetHandler+0x154>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]

			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 80009fe:	2100      	movs	r1, #0
 8000a00:	482c      	ldr	r0, [pc, #176]	; (8000ab4 <_FuncSetHandler+0x158>)
 8000a02:	f003 fddd 	bl	80045c0 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000a06:	2300      	movs	r3, #0
 8000a08:	9300      	str	r3, [sp, #0]
 8000a0a:	2378      	movs	r3, #120	; 0x78
 8000a0c:	4a2b      	ldr	r2, [pc, #172]	; (8000abc <_FuncSetHandler+0x160>)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4828      	ldr	r0, [pc, #160]	; (8000ab4 <_FuncSetHandler+0x158>)
 8000a12:	f003 fd13 	bl	800443c <HAL_DAC_Start_DMA>

			break;
 8000a16:	e03f      	b.n	8000a98 <_FuncSetHandler+0x13c>
		case 8:
		case 9:
		case 10:
		case 11:
			eNewOutMode = Saw_Out_Mode;
 8000a18:	4b25      	ldr	r3, [pc, #148]	; (8000ab0 <_FuncSetHandler+0x154>)
 8000a1a:	2202      	movs	r2, #2
 8000a1c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4824      	ldr	r0, [pc, #144]	; (8000ab4 <_FuncSetHandler+0x158>)
 8000a22:	f003 fdcd 	bl	80045c0 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
 8000a26:	2300      	movs	r3, #0
 8000a28:	9300      	str	r3, [sp, #0]
 8000a2a:	2378      	movs	r3, #120	; 0x78
 8000a2c:	4a24      	ldr	r2, [pc, #144]	; (8000ac0 <_FuncSetHandler+0x164>)
 8000a2e:	2100      	movs	r1, #0
 8000a30:	4820      	ldr	r0, [pc, #128]	; (8000ab4 <_FuncSetHandler+0x158>)
 8000a32:	f003 fd03 	bl	800443c <HAL_DAC_Start_DMA>
			break;
 8000a36:	e02f      	b.n	8000a98 <_FuncSetHandler+0x13c>
		case 12:
		case 13:
		case 14:
		case 15:
			eNewOutMode = RevSaw_Out_Mode;
 8000a38:	4b1d      	ldr	r3, [pc, #116]	; (8000ab0 <_FuncSetHandler+0x154>)
 8000a3a:	2203      	movs	r2, #3
 8000a3c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8000a3e:	2100      	movs	r1, #0
 8000a40:	481c      	ldr	r0, [pc, #112]	; (8000ab4 <_FuncSetHandler+0x158>)
 8000a42:	f003 fdbd 	bl	80045c0 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
 8000a46:	2300      	movs	r3, #0
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	2378      	movs	r3, #120	; 0x78
 8000a4c:	4a1d      	ldr	r2, [pc, #116]	; (8000ac4 <_FuncSetHandler+0x168>)
 8000a4e:	2100      	movs	r1, #0
 8000a50:	4818      	ldr	r0, [pc, #96]	; (8000ab4 <_FuncSetHandler+0x158>)
 8000a52:	f003 fcf3 	bl	800443c <HAL_DAC_Start_DMA>
			break;
 8000a56:	e01f      	b.n	8000a98 <_FuncSetHandler+0x13c>
		case 16:
		case 17:
		case 18:
		case 19:
			eNewOutMode = Triangle_Out_Mode;
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <_FuncSetHandler+0x154>)
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8000a5e:	2100      	movs	r1, #0
 8000a60:	4814      	ldr	r0, [pc, #80]	; (8000ab4 <_FuncSetHandler+0x158>)
 8000a62:	f003 fdad 	bl	80045c0 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000a66:	2300      	movs	r3, #0
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	2378      	movs	r3, #120	; 0x78
 8000a6c:	4a16      	ldr	r2, [pc, #88]	; (8000ac8 <_FuncSetHandler+0x16c>)
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4810      	ldr	r0, [pc, #64]	; (8000ab4 <_FuncSetHandler+0x158>)
 8000a72:	f003 fce3 	bl	800443c <HAL_DAC_Start_DMA>
			break;
 8000a76:	e00f      	b.n	8000a98 <_FuncSetHandler+0x13c>
		case 20:
		case 21:
		case 22:
		case 23:
			eNewOutMode = Impulse_Out_Mode;
 8000a78:	4b0d      	ldr	r3, [pc, #52]	; (8000ab0 <_FuncSetHandler+0x154>)
 8000a7a:	2205      	movs	r2, #5
 8000a7c:	701a      	strb	r2, [r3, #0]
			HAL_DAC_Stop_DMA(&hdac1, DAC1_CHANNEL_1);
 8000a7e:	2100      	movs	r1, #0
 8000a80:	480c      	ldr	r0, [pc, #48]	; (8000ab4 <_FuncSetHandler+0x158>)
 8000a82:	f003 fd9d 	bl	80045c0 <HAL_DAC_Stop_DMA>
			HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
 8000a86:	2300      	movs	r3, #0
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	2378      	movs	r3, #120	; 0x78
 8000a8c:	4a0f      	ldr	r2, [pc, #60]	; (8000acc <_FuncSetHandler+0x170>)
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <_FuncSetHandler+0x158>)
 8000a92:	f003 fcd3 	bl	800443c <HAL_DAC_Start_DMA>
			break;
 8000a96:	bf00      	nop
	}
	eNewEvent = evFuncMenu;
 8000a98:	4b0d      	ldr	r3, [pc, #52]	; (8000ad0 <_FuncSetHandler+0x174>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	701a      	strb	r2, [r3, #0]
	return Func_Menu_State;
 8000a9e:	2301      	movs	r3, #1
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	08009fdc 	.word	0x08009fdc
 8000aac:	40012c00 	.word	0x40012c00
 8000ab0:	20000be8 	.word	0x20000be8
 8000ab4:	20000d18 	.word	0x20000d18
 8000ab8:	200003e4 	.word	0x200003e4
 8000abc:	200005c4 	.word	0x200005c4
 8000ac0:	20000024 	.word	0x20000024
 8000ac4:	20000204 	.word	0x20000204
 8000ac8:	200007a4 	.word	0x200007a4
 8000acc:	20000984 	.word	0x20000984
 8000ad0:	20000be7 	.word	0x20000be7

08000ad4 <_ExitFuncMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitFuncMenuHandler()
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitFuncMenu Event captured\n");
 8000ad8:	480b      	ldr	r0, [pc, #44]	; (8000b08 <_ExitFuncMenuHandler+0x34>)
 8000ada:	f008 fa7d 	bl	8008fd8 <puts>
#endif

	// disable the menu
	DM_ShowFuncSelectMenu(DISABLE_FUNCMENU);
 8000ade:	2000      	movs	r0, #0
 8000ae0:	f7ff fc66 	bl	80003b0 <DM_ShowFuncSelectMenu>

	// reset the encoder range
	TIM1->ARR = 1024;
 8000ae4:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <_ExitFuncMenuHandler+0x38>)
 8000ae6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000aea:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000aec:	4808      	ldr	r0, [pc, #32]	; (8000b10 <_ExitFuncMenuHandler+0x3c>)
 8000aee:	f006 f875 	bl	8006bdc <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000af2:	f7ff fe69 	bl	80007c8 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000af6:	4806      	ldr	r0, [pc, #24]	; (8000b10 <_ExitFuncMenuHandler+0x3c>)
 8000af8:	f006 f83a 	bl	8006b70 <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <_ExitFuncMenuHandler+0x40>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000b02:	2300      	movs	r3, #0
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	08009ffc 	.word	0x08009ffc
 8000b0c:	40012c00 	.word	0x40012c00
 8000b10:	20000e9c 	.word	0x20000e9c
 8000b14:	20000be7 	.word	0x20000be7

08000b18 <_GainMenuHandler>:
 *
 *	Business logic for AmplitudeAdjust events
 *
 */
eSystemState _GainMenuHandler()
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainMenu Event captured\n");
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <_GainMenuHandler+0x1c>)
 8000b1e:	f008 fa5b 	bl	8008fd8 <puts>
#endif
	DM_ShowGainSelectMenu(ENABLE_GAINMENU);
 8000b22:	2001      	movs	r0, #1
 8000b24:	f7ff fe0e 	bl	8000744 <DM_ShowGainSelectMenu>

	// set the rotary encoder limits to 0-20 for this menu
	TIM1->ARR = 32;
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <_GainMenuHandler+0x20>)
 8000b2a:	2220      	movs	r2, #32
 8000b2c:	62da      	str	r2, [r3, #44]	; 0x2c

	return Gain_Menu_State;
 8000b2e:	2302      	movs	r3, #2
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	0800a018 	.word	0x0800a018
 8000b38:	40012c00 	.word	0x40012c00

08000b3c <_GainSetHandler>:
 *
 *
 *
 */
eSystemState _GainSetHandler()
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("GainSet Event captured\n");
 8000b40:	4874      	ldr	r0, [pc, #464]	; (8000d14 <_GainSetHandler+0x1d8>)
 8000b42:	f008 fa49 	bl	8008fd8 <puts>
#endif
	// PGA Truth table for LTC6910:
	// https://www.analog.com/media/en/technical-documentation/data-sheets/6910fb.pdf
	switch(TIM1->CNT)
 8000b46:	4b74      	ldr	r3, [pc, #464]	; (8000d18 <_GainSetHandler+0x1dc>)
 8000b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b4a:	2b1f      	cmp	r3, #31
 8000b4c:	f200 80dc 	bhi.w	8000d08 <_GainSetHandler+0x1cc>
 8000b50:	a201      	add	r2, pc, #4	; (adr r2, 8000b58 <_GainSetHandler+0x1c>)
 8000b52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b56:	bf00      	nop
 8000b58:	08000bd9 	.word	0x08000bd9
 8000b5c:	08000bd9 	.word	0x08000bd9
 8000b60:	08000bd9 	.word	0x08000bd9
 8000b64:	08000bd9 	.word	0x08000bd9
 8000b68:	08000bff 	.word	0x08000bff
 8000b6c:	08000bff 	.word	0x08000bff
 8000b70:	08000bff 	.word	0x08000bff
 8000b74:	08000bff 	.word	0x08000bff
 8000b78:	08000c25 	.word	0x08000c25
 8000b7c:	08000c25 	.word	0x08000c25
 8000b80:	08000c25 	.word	0x08000c25
 8000b84:	08000c25 	.word	0x08000c25
 8000b88:	08000c4b 	.word	0x08000c4b
 8000b8c:	08000c4b 	.word	0x08000c4b
 8000b90:	08000c4b 	.word	0x08000c4b
 8000b94:	08000c4b 	.word	0x08000c4b
 8000b98:	08000c71 	.word	0x08000c71
 8000b9c:	08000c71 	.word	0x08000c71
 8000ba0:	08000c71 	.word	0x08000c71
 8000ba4:	08000c71 	.word	0x08000c71
 8000ba8:	08000c97 	.word	0x08000c97
 8000bac:	08000c97 	.word	0x08000c97
 8000bb0:	08000c97 	.word	0x08000c97
 8000bb4:	08000c97 	.word	0x08000c97
 8000bb8:	08000cbd 	.word	0x08000cbd
 8000bbc:	08000cbd 	.word	0x08000cbd
 8000bc0:	08000cbd 	.word	0x08000cbd
 8000bc4:	08000cbd 	.word	0x08000cbd
 8000bc8:	08000ce3 	.word	0x08000ce3
 8000bcc:	08000ce3 	.word	0x08000ce3
 8000bd0:	08000ce3 	.word	0x08000ce3
 8000bd4:	08000ce3 	.word	0x08000ce3
	{
		case 0:
		case 1:
		case 2:
		case 3:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	2101      	movs	r1, #1
 8000bdc:	484f      	ldr	r0, [pc, #316]	; (8000d1c <_GainSetHandler+0x1e0>)
 8000bde:	f004 fc1d 	bl	800541c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8000be2:	2200      	movs	r2, #0
 8000be4:	2120      	movs	r1, #32
 8000be6:	484e      	ldr	r0, [pc, #312]	; (8000d20 <_GainSetHandler+0x1e4>)
 8000be8:	f004 fc18 	bl	800541c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8000bec:	2200      	movs	r2, #0
 8000bee:	2110      	movs	r1, #16
 8000bf0:	484b      	ldr	r0, [pc, #300]	; (8000d20 <_GainSetHandler+0x1e4>)
 8000bf2:	f004 fc13 	bl	800541c <HAL_GPIO_WritePin>
			eNewOutGain = Zero_Gain;
 8000bf6:	4b4b      	ldr	r3, [pc, #300]	; (8000d24 <_GainSetHandler+0x1e8>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	701a      	strb	r2, [r3, #0]
			break;
 8000bfc:	e084      	b.n	8000d08 <_GainSetHandler+0x1cc>
		case 4:
		case 5:
		case 6:
		case 7:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8000bfe:	2201      	movs	r2, #1
 8000c00:	2101      	movs	r1, #1
 8000c02:	4846      	ldr	r0, [pc, #280]	; (8000d1c <_GainSetHandler+0x1e0>)
 8000c04:	f004 fc0a 	bl	800541c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2120      	movs	r1, #32
 8000c0c:	4844      	ldr	r0, [pc, #272]	; (8000d20 <_GainSetHandler+0x1e4>)
 8000c0e:	f004 fc05 	bl	800541c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2110      	movs	r1, #16
 8000c16:	4842      	ldr	r0, [pc, #264]	; (8000d20 <_GainSetHandler+0x1e4>)
 8000c18:	f004 fc00 	bl	800541c <HAL_GPIO_WritePin>
			eNewOutGain = One_Gain;
 8000c1c:	4b41      	ldr	r3, [pc, #260]	; (8000d24 <_GainSetHandler+0x1e8>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	701a      	strb	r2, [r3, #0]
			break;
 8000c22:	e071      	b.n	8000d08 <_GainSetHandler+0x1cc>
		case 8:
		case 9:
		case 10:
		case 11:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2101      	movs	r1, #1
 8000c28:	483c      	ldr	r0, [pc, #240]	; (8000d1c <_GainSetHandler+0x1e0>)
 8000c2a:	f004 fbf7 	bl	800541c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8000c2e:	2201      	movs	r2, #1
 8000c30:	2120      	movs	r1, #32
 8000c32:	483b      	ldr	r0, [pc, #236]	; (8000d20 <_GainSetHandler+0x1e4>)
 8000c34:	f004 fbf2 	bl	800541c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2110      	movs	r1, #16
 8000c3c:	4838      	ldr	r0, [pc, #224]	; (8000d20 <_GainSetHandler+0x1e4>)
 8000c3e:	f004 fbed 	bl	800541c <HAL_GPIO_WritePin>
			eNewOutGain = Two_Gain;
 8000c42:	4b38      	ldr	r3, [pc, #224]	; (8000d24 <_GainSetHandler+0x1e8>)
 8000c44:	2202      	movs	r2, #2
 8000c46:	701a      	strb	r2, [r3, #0]
			break;
 8000c48:	e05e      	b.n	8000d08 <_GainSetHandler+0x1cc>
		case 12:
		case 13:
		case 14:
		case 15:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	2101      	movs	r1, #1
 8000c4e:	4833      	ldr	r0, [pc, #204]	; (8000d1c <_GainSetHandler+0x1e0>)
 8000c50:	f004 fbe4 	bl	800541c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8000c54:	2201      	movs	r2, #1
 8000c56:	2120      	movs	r1, #32
 8000c58:	4831      	ldr	r0, [pc, #196]	; (8000d20 <_GainSetHandler+0x1e4>)
 8000c5a:	f004 fbdf 	bl	800541c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_RESET);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2110      	movs	r1, #16
 8000c62:	482f      	ldr	r0, [pc, #188]	; (8000d20 <_GainSetHandler+0x1e4>)
 8000c64:	f004 fbda 	bl	800541c <HAL_GPIO_WritePin>
			eNewOutGain = Three_Gain;
 8000c68:	4b2e      	ldr	r3, [pc, #184]	; (8000d24 <_GainSetHandler+0x1e8>)
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	701a      	strb	r2, [r3, #0]
			break;
 8000c6e:	e04b      	b.n	8000d08 <_GainSetHandler+0x1cc>
		case 16:
		case 17:
		case 18:
		case 19:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8000c70:	2200      	movs	r2, #0
 8000c72:	2101      	movs	r1, #1
 8000c74:	4829      	ldr	r0, [pc, #164]	; (8000d1c <_GainSetHandler+0x1e0>)
 8000c76:	f004 fbd1 	bl	800541c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2120      	movs	r1, #32
 8000c7e:	4828      	ldr	r0, [pc, #160]	; (8000d20 <_GainSetHandler+0x1e4>)
 8000c80:	f004 fbcc 	bl	800541c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8000c84:	2201      	movs	r2, #1
 8000c86:	2110      	movs	r1, #16
 8000c88:	4825      	ldr	r0, [pc, #148]	; (8000d20 <_GainSetHandler+0x1e4>)
 8000c8a:	f004 fbc7 	bl	800541c <HAL_GPIO_WritePin>
			eNewOutGain = Four_Gain;
 8000c8e:	4b25      	ldr	r3, [pc, #148]	; (8000d24 <_GainSetHandler+0x1e8>)
 8000c90:	2204      	movs	r2, #4
 8000c92:	701a      	strb	r2, [r3, #0]
			break;
 8000c94:	e038      	b.n	8000d08 <_GainSetHandler+0x1cc>
		case 20:
		case 21:
		case 22:
		case 23:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8000c96:	2201      	movs	r2, #1
 8000c98:	2101      	movs	r1, #1
 8000c9a:	4820      	ldr	r0, [pc, #128]	; (8000d1c <_GainSetHandler+0x1e0>)
 8000c9c:	f004 fbbe 	bl	800541c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_RESET);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2120      	movs	r1, #32
 8000ca4:	481e      	ldr	r0, [pc, #120]	; (8000d20 <_GainSetHandler+0x1e4>)
 8000ca6:	f004 fbb9 	bl	800541c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8000caa:	2201      	movs	r2, #1
 8000cac:	2110      	movs	r1, #16
 8000cae:	481c      	ldr	r0, [pc, #112]	; (8000d20 <_GainSetHandler+0x1e4>)
 8000cb0:	f004 fbb4 	bl	800541c <HAL_GPIO_WritePin>
			eNewOutGain = Five_Gain;
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <_GainSetHandler+0x1e8>)
 8000cb6:	2205      	movs	r2, #5
 8000cb8:	701a      	strb	r2, [r3, #0]
			break;
 8000cba:	e025      	b.n	8000d08 <_GainSetHandler+0x1cc>
		case 24:
		case 25:
		case 26:
		case 27:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	4816      	ldr	r0, [pc, #88]	; (8000d1c <_GainSetHandler+0x1e0>)
 8000cc2:	f004 fbab 	bl	800541c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	2120      	movs	r1, #32
 8000cca:	4815      	ldr	r0, [pc, #84]	; (8000d20 <_GainSetHandler+0x1e4>)
 8000ccc:	f004 fba6 	bl	800541c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	2110      	movs	r1, #16
 8000cd4:	4812      	ldr	r0, [pc, #72]	; (8000d20 <_GainSetHandler+0x1e4>)
 8000cd6:	f004 fba1 	bl	800541c <HAL_GPIO_WritePin>
			eNewOutGain = Six_Gain;
 8000cda:	4b12      	ldr	r3, [pc, #72]	; (8000d24 <_GainSetHandler+0x1e8>)
 8000cdc:	2206      	movs	r2, #6
 8000cde:	701a      	strb	r2, [r3, #0]
			break;
 8000ce0:	e012      	b.n	8000d08 <_GainSetHandler+0x1cc>
		case 28:
		case 29:
		case 30:
		case 31:
			HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	2101      	movs	r1, #1
 8000ce6:	480d      	ldr	r0, [pc, #52]	; (8000d1c <_GainSetHandler+0x1e0>)
 8000ce8:	f004 fb98 	bl	800541c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8000cec:	2201      	movs	r2, #1
 8000cee:	2120      	movs	r1, #32
 8000cf0:	480b      	ldr	r0, [pc, #44]	; (8000d20 <_GainSetHandler+0x1e4>)
 8000cf2:	f004 fb93 	bl	800541c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	2110      	movs	r1, #16
 8000cfa:	4809      	ldr	r0, [pc, #36]	; (8000d20 <_GainSetHandler+0x1e4>)
 8000cfc:	f004 fb8e 	bl	800541c <HAL_GPIO_WritePin>
			eNewOutGain = Seven_Gain;
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <_GainSetHandler+0x1e8>)
 8000d02:	2207      	movs	r2, #7
 8000d04:	701a      	strb	r2, [r3, #0]
			break;
 8000d06:	bf00      	nop
	}
	eNewEvent = evGainMenu;
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <_GainSetHandler+0x1ec>)
 8000d0a:	2203      	movs	r2, #3
 8000d0c:	701a      	strb	r2, [r3, #0]
	return Gain_Menu_State;
 8000d0e:	2302      	movs	r3, #2
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	0800a030 	.word	0x0800a030
 8000d18:	40012c00 	.word	0x40012c00
 8000d1c:	48000400 	.word	0x48000400
 8000d20:	48000800 	.word	0x48000800
 8000d24:	20000008 	.word	0x20000008
 8000d28:	20000be7 	.word	0x20000be7

08000d2c <_ExitGainMenuHandler>:
 *
 *
 *
 */
eSystemState _ExitGainMenuHandler()
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("ExitGainMenu Event captured\n");
 8000d30:	480b      	ldr	r0, [pc, #44]	; (8000d60 <_ExitGainMenuHandler+0x34>)
 8000d32:	f008 f951 	bl	8008fd8 <puts>
#endif


	// disable the menu
	DM_ShowGainSelectMenu(DISABLE_GAINMENU);
 8000d36:	2000      	movs	r0, #0
 8000d38:	f7ff fd04 	bl	8000744 <DM_ShowGainSelectMenu>

	// reset the encoder range
	TIM1->ARR = 1024;
 8000d3c:	4b09      	ldr	r3, [pc, #36]	; (8000d64 <_ExitGainMenuHandler+0x38>)
 8000d3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d42:	62da      	str	r2, [r3, #44]	; 0x2c

	// don't let the DisplayManager interrupt the LCD refresh
	HAL_TIM_Base_Stop_IT(&htim15);
 8000d44:	4808      	ldr	r0, [pc, #32]	; (8000d68 <_ExitGainMenuHandler+0x3c>)
 8000d46:	f005 ff49 	bl	8006bdc <HAL_TIM_Base_Stop_IT>
	{
		DM_RefreshBackgroundLayout();
 8000d4a:	f7ff fd3d 	bl	80007c8 <DM_RefreshBackgroundLayout>
	}
	HAL_TIM_Base_Start_IT(&htim15);
 8000d4e:	4806      	ldr	r0, [pc, #24]	; (8000d68 <_ExitGainMenuHandler+0x3c>)
 8000d50:	f005 ff0e 	bl	8006b70 <HAL_TIM_Base_Start_IT>

	eNewEvent = evIdle;
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <_ExitGainMenuHandler+0x40>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	701a      	strb	r2, [r3, #0]
	return Idle_State;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	0800a048 	.word	0x0800a048
 8000d64:	40012c00 	.word	0x40012c00
 8000d68:	20000e9c 	.word	0x20000e9c
 8000d6c:	20000be7 	.word	0x20000be7

08000d70 <_FreqMenuHandler>:
 *
 *	Business logic for FreqAdjust events
 *
 */
eSystemState _FreqMenuHandler()
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("FreqMenu Event captured\n");
 8000d74:	4802      	ldr	r0, [pc, #8]	; (8000d80 <_FreqMenuHandler+0x10>)
 8000d76:	f008 f92f 	bl	8008fd8 <puts>
#endif
	return Idle_State;
 8000d7a:	2300      	movs	r3, #0
}
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	0800a064 	.word	0x0800a064

08000d84 <_BiasMenuHandler>:
 *
 *	Business logic for BiasAdjust events
 *
 */
eSystemState _BiasMenuHandler()
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("BiasMenu Event captured\n");
 8000d88:	4802      	ldr	r0, [pc, #8]	; (8000d94 <_BiasMenuHandler+0x10>)
 8000d8a:	f008 f925 	bl	8008fd8 <puts>
#endif

	return Idle_State;
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	bd80      	pop	{r7, pc}
 8000d94:	0800a07c 	.word	0x0800a07c

08000d98 <_AdjustConfirmedHandler>:
 *
 *	Business logic for AdjustConfirmed events
 *
 */
eSystemState _AdjustConfirmedHandler()
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
#ifdef EM_SWV_DEBUG
	printf("AdjustConfirmed Event captured\n");
 8000d9c:	4802      	ldr	r0, [pc, #8]	; (8000da8 <_AdjustConfirmedHandler+0x10>)
 8000d9e:	f008 f91b 	bl	8008fd8 <puts>
#endif

	return Idle_State;
 8000da2:	2300      	movs	r3, #0
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	0800a094 	.word	0x0800a094

08000dac <EM_SetNewEvent>:
 *
 * 	Set by NVIC interrupt handlers
 *
 */
void EM_SetNewEvent(eSystemEvent pEvent)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	4603      	mov	r3, r0
 8000db4:	71fb      	strb	r3, [r7, #7]
	eNewEvent = pEvent;
 8000db6:	4a04      	ldr	r2, [pc, #16]	; (8000dc8 <EM_SetNewEvent+0x1c>)
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	7013      	strb	r3, [r2, #0]
}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	20000be7 	.word	0x20000be7

08000dcc <EM_GetOutputMode>:
 *
 *
 *
 */
eOutput_mode EM_GetOutputMode()
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
	return eNewOutMode;
 8000dd0:	4b03      	ldr	r3, [pc, #12]	; (8000de0 <EM_GetOutputMode+0x14>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
}
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	20000be8 	.word	0x20000be8

08000de4 <EM_GetOutputGain>:
 *
 *
 *
 */
eOutput_gain EM_GetOutputGain()
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
	return eNewOutGain;
 8000de8:	4b03      	ldr	r3, [pc, #12]	; (8000df8 <EM_GetOutputGain+0x14>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr
 8000df6:	bf00      	nop
 8000df8:	20000008 	.word	0x20000008

08000dfc <EM_SetEncoderValue>:
 *
 *
 *
 */
void EM_SetEncoderValue(uint32_t pValue)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
	newRotEncoderValue = pValue;
 8000e04:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <EM_SetEncoderValue+0x1c>)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6013      	str	r3, [r2, #0]


}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20000bec 	.word	0x20000bec

08000e1c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b08c      	sub	sp, #48	; 0x30
 8000e20:	af00      	add	r7, sp, #0
  ADC_MultiModeTypeDef multimode = {0};
 8000e22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
 8000e2a:	605a      	str	r2, [r3, #4]
 8000e2c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e2e:	1d3b      	adds	r3, r7, #4
 8000e30:	2220      	movs	r2, #32
 8000e32:	2100      	movs	r1, #0
 8000e34:	4618      	mov	r0, r3
 8000e36:	f008 f86b 	bl	8008f10 <memset>

  /** Common config 
  */
  hadc1.Instance = ADC1;
 8000e3a:	4b32      	ldr	r3, [pc, #200]	; (8000f04 <MX_ADC1_Init+0xe8>)
 8000e3c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000e40:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000e42:	4b30      	ldr	r3, [pc, #192]	; (8000f04 <MX_ADC1_Init+0xe8>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e48:	4b2e      	ldr	r3, [pc, #184]	; (8000f04 <MX_ADC1_Init+0xe8>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e4e:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <MX_ADC1_Init+0xe8>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000e54:	4b2b      	ldr	r3, [pc, #172]	; (8000f04 <MX_ADC1_Init+0xe8>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e5a:	4b2a      	ldr	r3, [pc, #168]	; (8000f04 <MX_ADC1_Init+0xe8>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e60:	4b28      	ldr	r3, [pc, #160]	; (8000f04 <MX_ADC1_Init+0xe8>)
 8000e62:	2204      	movs	r2, #4
 8000e64:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e66:	4b27      	ldr	r3, [pc, #156]	; (8000f04 <MX_ADC1_Init+0xe8>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e6c:	4b25      	ldr	r3, [pc, #148]	; (8000f04 <MX_ADC1_Init+0xe8>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000e72:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <MX_ADC1_Init+0xe8>)
 8000e74:	2201      	movs	r2, #1
 8000e76:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e78:	4b22      	ldr	r3, [pc, #136]	; (8000f04 <MX_ADC1_Init+0xe8>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e80:	4b20      	ldr	r3, [pc, #128]	; (8000f04 <MX_ADC1_Init+0xe8>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e86:	4b1f      	ldr	r3, [pc, #124]	; (8000f04 <MX_ADC1_Init+0xe8>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000e8c:	4b1d      	ldr	r3, [pc, #116]	; (8000f04 <MX_ADC1_Init+0xe8>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e94:	4b1b      	ldr	r3, [pc, #108]	; (8000f04 <MX_ADC1_Init+0xe8>)
 8000e96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e9a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000e9c:	4b19      	ldr	r3, [pc, #100]	; (8000f04 <MX_ADC1_Init+0xe8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ea4:	4817      	ldr	r0, [pc, #92]	; (8000f04 <MX_ADC1_Init+0xe8>)
 8000ea6:	f001 ffc7 	bl	8002e38 <HAL_ADC_Init>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000eb0:	f000 ff3a 	bl	8001d28 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000eb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4811      	ldr	r0, [pc, #68]	; (8000f04 <MX_ADC1_Init+0xe8>)
 8000ec0:	f002 fd50 	bl	8003964 <HAL_ADCEx_MultiModeConfigChannel>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000eca:	f000 ff2d 	bl	8001d28 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <MX_ADC1_Init+0xec>)
 8000ed0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed2:	2306      	movs	r3, #6
 8000ed4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000eda:	237f      	movs	r3, #127	; 0x7f
 8000edc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000ede:	2304      	movs	r3, #4
 8000ee0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	4619      	mov	r1, r3
 8000eea:	4806      	ldr	r0, [pc, #24]	; (8000f04 <MX_ADC1_Init+0xe8>)
 8000eec:	f002 f964 	bl	80031b8 <HAL_ADC_ConfigChannel>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d001      	beq.n	8000efa <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000ef6:	f000 ff17 	bl	8001d28 <Error_Handler>
  }

}
 8000efa:	bf00      	nop
 8000efc:	3730      	adds	r7, #48	; 0x30
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000c14 	.word	0x20000c14
 8000f08:	0c900008 	.word	0x0c900008

08000f0c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08a      	sub	sp, #40	; 0x28
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000f2c:	d14f      	bne.n	8000fce <HAL_ADC_MspInit+0xc2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000f2e:	4b2a      	ldr	r3, [pc, #168]	; (8000fd8 <HAL_ADC_MspInit+0xcc>)
 8000f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f32:	4a29      	ldr	r2, [pc, #164]	; (8000fd8 <HAL_ADC_MspInit+0xcc>)
 8000f34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f38:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f3a:	4b27      	ldr	r3, [pc, #156]	; (8000fd8 <HAL_ADC_MspInit+0xcc>)
 8000f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f42:	613b      	str	r3, [r7, #16]
 8000f44:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f46:	4b24      	ldr	r3, [pc, #144]	; (8000fd8 <HAL_ADC_MspInit+0xcc>)
 8000f48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f4a:	4a23      	ldr	r2, [pc, #140]	; (8000fd8 <HAL_ADC_MspInit+0xcc>)
 8000f4c:	f043 0301 	orr.w	r3, r3, #1
 8000f50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f52:	4b21      	ldr	r3, [pc, #132]	; (8000fd8 <HAL_ADC_MspInit+0xcc>)
 8000f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA2     ------> ADC1_IN3 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f5e:	2304      	movs	r3, #4
 8000f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f62:	2303      	movs	r3, #3
 8000f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f74:	f004 f8b8 	bl	80050e8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000f78:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <HAL_ADC_MspInit+0xd0>)
 8000f7a:	4a19      	ldr	r2, [pc, #100]	; (8000fe0 <HAL_ADC_MspInit+0xd4>)
 8000f7c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <HAL_ADC_MspInit+0xd0>)
 8000f80:	2205      	movs	r2, #5
 8000f82:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f84:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <HAL_ADC_MspInit+0xd0>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <HAL_ADC_MspInit+0xd0>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <HAL_ADC_MspInit+0xd0>)
 8000f92:	2280      	movs	r2, #128	; 0x80
 8000f94:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f96:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <HAL_ADC_MspInit+0xd0>)
 8000f98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f9c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f9e:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <HAL_ADC_MspInit+0xd0>)
 8000fa0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fa4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000fa6:	4b0d      	ldr	r3, [pc, #52]	; (8000fdc <HAL_ADC_MspInit+0xd0>)
 8000fa8:	2220      	movs	r2, #32
 8000faa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000fac:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <HAL_ADC_MspInit+0xd0>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000fb2:	480a      	ldr	r0, [pc, #40]	; (8000fdc <HAL_ADC_MspInit+0xd0>)
 8000fb4:	f003 fdcc 	bl	8004b50 <HAL_DMA_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_ADC_MspInit+0xb6>
    {
      Error_Handler();
 8000fbe:	f000 feb3 	bl	8001d28 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a05      	ldr	r2, [pc, #20]	; (8000fdc <HAL_ADC_MspInit+0xd0>)
 8000fc6:	655a      	str	r2, [r3, #84]	; 0x54
 8000fc8:	4a04      	ldr	r2, [pc, #16]	; (8000fdc <HAL_ADC_MspInit+0xd0>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000fce:	bf00      	nop
 8000fd0:	3728      	adds	r7, #40	; 0x28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	20000c80 	.word	0x20000c80
 8000fe0:	40020008 	.word	0x40020008

08000fe4 <MX_COMP1_Init>:

COMP_HandleTypeDef hcomp1;

/* COMP1 init function */
void MX_COMP1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0

  hcomp1.Instance = COMP1;
 8000fe8:	4b0f      	ldr	r3, [pc, #60]	; (8001028 <MX_COMP1_Init+0x44>)
 8000fea:	4a10      	ldr	r2, [pc, #64]	; (800102c <MX_COMP1_Init+0x48>)
 8000fec:	601a      	str	r2, [r3, #0]
  hcomp1.Init.InputPlus = COMP_INPUT_PLUS_IO1;
 8000fee:	4b0e      	ldr	r3, [pc, #56]	; (8001028 <MX_COMP1_Init+0x44>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	605a      	str	r2, [r3, #4]
  hcomp1.Init.InputMinus = COMP_INPUT_MINUS_VREFINT;
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <MX_COMP1_Init+0x44>)
 8000ff6:	4a0e      	ldr	r2, [pc, #56]	; (8001030 <MX_COMP1_Init+0x4c>)
 8000ff8:	609a      	str	r2, [r3, #8]
  hcomp1.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 8000ffa:	4b0b      	ldr	r3, [pc, #44]	; (8001028 <MX_COMP1_Init+0x44>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	611a      	str	r2, [r3, #16]
  hcomp1.Init.Hysteresis = COMP_HYSTERESIS_NONE;
 8001000:	4b09      	ldr	r3, [pc, #36]	; (8001028 <MX_COMP1_Init+0x44>)
 8001002:	2200      	movs	r2, #0
 8001004:	60da      	str	r2, [r3, #12]
  hcomp1.Init.BlankingSrce = COMP_BLANKINGSRC_NONE;
 8001006:	4b08      	ldr	r3, [pc, #32]	; (8001028 <MX_COMP1_Init+0x44>)
 8001008:	2200      	movs	r2, #0
 800100a:	615a      	str	r2, [r3, #20]
  hcomp1.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 800100c:	4b06      	ldr	r3, [pc, #24]	; (8001028 <MX_COMP1_Init+0x44>)
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
  if (HAL_COMP_Init(&hcomp1) != HAL_OK)
 8001012:	4805      	ldr	r0, [pc, #20]	; (8001028 <MX_COMP1_Init+0x44>)
 8001014:	f002 fefa 	bl	8003e0c <HAL_COMP_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_COMP1_Init+0x3e>
  {
    Error_Handler();
 800101e:	f000 fe83 	bl	8001d28 <Error_Handler>
  }

}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	20000ce0 	.word	0x20000ce0
 800102c:	40010200 	.word	0x40010200
 8001030:	00800030 	.word	0x00800030

08001034 <HAL_COMP_MspInit>:

void HAL_COMP_MspInit(COMP_HandleTypeDef* compHandle)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b088      	sub	sp, #32
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]
 800104a:	611a      	str	r2, [r3, #16]
  if(compHandle->Instance==COMP1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4a0f      	ldr	r2, [pc, #60]	; (8001090 <HAL_COMP_MspInit+0x5c>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d118      	bne.n	8001088 <HAL_COMP_MspInit+0x54>
  {
  /* USER CODE BEGIN COMP1_MspInit 0 */

  /* USER CODE END COMP1_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001056:	4b0f      	ldr	r3, [pc, #60]	; (8001094 <HAL_COMP_MspInit+0x60>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a0e      	ldr	r2, [pc, #56]	; (8001094 <HAL_COMP_MspInit+0x60>)
 800105c:	f043 0301 	orr.w	r3, r3, #1
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b0c      	ldr	r3, [pc, #48]	; (8001094 <HAL_COMP_MspInit+0x60>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
    /**COMP1 GPIO Configuration    
    PA1     ------> COMP1_INP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800106e:	2302      	movs	r3, #2
 8001070:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001072:	2303      	movs	r3, #3
 8001074:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f107 030c 	add.w	r3, r7, #12
 800107e:	4619      	mov	r1, r3
 8001080:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001084:	f004 f830 	bl	80050e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN COMP1_MspInit 1 */

  /* USER CODE END COMP1_MspInit 1 */
  }
}
 8001088:	bf00      	nop
 800108a:	3720      	adds	r7, #32
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40010200 	.word	0x40010200
 8001094:	40021000 	.word	0x40021000

08001098 <MX_DAC1_Init>:
DMA_HandleTypeDef hdma_dac1_ch1;
DMA_HandleTypeDef hdma_dac2_ch1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b08c      	sub	sp, #48	; 0x30
 800109c:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 800109e:	463b      	mov	r3, r7
 80010a0:	2230      	movs	r2, #48	; 0x30
 80010a2:	2100      	movs	r1, #0
 80010a4:	4618      	mov	r0, r3
 80010a6:	f007 ff33 	bl	8008f10 <memset>

  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 80010aa:	4b1e      	ldr	r3, [pc, #120]	; (8001124 <MX_DAC1_Init+0x8c>)
 80010ac:	4a1e      	ldr	r2, [pc, #120]	; (8001128 <MX_DAC1_Init+0x90>)
 80010ae:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80010b0:	481c      	ldr	r0, [pc, #112]	; (8001124 <MX_DAC1_Init+0x8c>)
 80010b2:	f003 f94e 	bl	8004352 <HAL_DAC_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80010bc:	f000 fe34 	bl	8001d28 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80010c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80010c4:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80010ca:	2300      	movs	r3, #0
 80010cc:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80010d2:	2306      	movs	r3, #6
 80010d4:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80010de:	2301      	movs	r3, #1
 80010e0:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80010e2:	2300      	movs	r3, #0
 80010e4:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80010e6:	463b      	mov	r3, r7
 80010e8:	2200      	movs	r2, #0
 80010ea:	4619      	mov	r1, r3
 80010ec:	480d      	ldr	r0, [pc, #52]	; (8001124 <MX_DAC1_Init+0x8c>)
 80010ee:	f003 faf9 	bl	80046e4 <HAL_DAC_ConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_DAC1_Init+0x64>
  {
    Error_Handler();
 80010f8:	f000 fe16 	bl	8001d28 <Error_Handler>
  }
  /** DAC channel OUT2 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80010fc:	2300      	movs	r3, #0
 80010fe:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001100:	2301      	movs	r3, #1
 8001102:	61bb      	str	r3, [r7, #24]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8001104:	463b      	mov	r3, r7
 8001106:	2210      	movs	r2, #16
 8001108:	4619      	mov	r1, r3
 800110a:	4806      	ldr	r0, [pc, #24]	; (8001124 <MX_DAC1_Init+0x8c>)
 800110c:	f003 faea 	bl	80046e4 <HAL_DAC_ConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_DAC1_Init+0x82>
  {
    Error_Handler();
 8001116:	f000 fe07 	bl	8001d28 <Error_Handler>
  }

}
 800111a:	bf00      	nop
 800111c:	3730      	adds	r7, #48	; 0x30
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20000d18 	.word	0x20000d18
 8001128:	50000800 	.word	0x50000800

0800112c <MX_DAC2_Init>:
/* DAC2 init function */
void MX_DAC2_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08c      	sub	sp, #48	; 0x30
 8001130:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 8001132:	463b      	mov	r3, r7
 8001134:	2230      	movs	r2, #48	; 0x30
 8001136:	2100      	movs	r1, #0
 8001138:	4618      	mov	r0, r3
 800113a:	f007 fee9 	bl	8008f10 <memset>

  /** DAC Initialization 
  */
  hdac2.Instance = DAC2;
 800113e:	4b16      	ldr	r3, [pc, #88]	; (8001198 <MX_DAC2_Init+0x6c>)
 8001140:	4a16      	ldr	r2, [pc, #88]	; (800119c <MX_DAC2_Init+0x70>)
 8001142:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac2) != HAL_OK)
 8001144:	4814      	ldr	r0, [pc, #80]	; (8001198 <MX_DAC2_Init+0x6c>)
 8001146:	f003 f904 	bl	8004352 <HAL_DAC_Init>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <MX_DAC2_Init+0x28>
  {
    Error_Handler();
 8001150:	f000 fdea 	bl	8001d28 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8001154:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001158:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 800115e:	2300      	movs	r3, #0
 8001160:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001162:	2300      	movs	r3, #0
 8001164:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8001166:	2306      	movs	r3, #6
 8001168:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800116e:	2300      	movs	r3, #0
 8001170:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001172:	2301      	movs	r3, #1
 8001174:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001176:	2300      	movs	r3, #0
 8001178:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac2, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800117a:	463b      	mov	r3, r7
 800117c:	2200      	movs	r2, #0
 800117e:	4619      	mov	r1, r3
 8001180:	4805      	ldr	r0, [pc, #20]	; (8001198 <MX_DAC2_Init+0x6c>)
 8001182:	f003 faaf 	bl	80046e4 <HAL_DAC_ConfigChannel>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <MX_DAC2_Init+0x64>
  {
    Error_Handler();
 800118c:	f000 fdcc 	bl	8001d28 <Error_Handler>
  }

}
 8001190:	bf00      	nop
 8001192:	3730      	adds	r7, #48	; 0x30
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}
 8001198:	20000d04 	.word	0x20000d04
 800119c:	50000c00 	.word	0x50000c00

080011a0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b08c      	sub	sp, #48	; 0x30
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a8:	f107 031c 	add.w	r3, r7, #28
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a56      	ldr	r2, [pc, #344]	; (8001318 <HAL_DAC_MspInit+0x178>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d150      	bne.n	8001264 <HAL_DAC_MspInit+0xc4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80011c2:	4b56      	ldr	r3, [pc, #344]	; (800131c <HAL_DAC_MspInit+0x17c>)
 80011c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011c6:	4a55      	ldr	r2, [pc, #340]	; (800131c <HAL_DAC_MspInit+0x17c>)
 80011c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ce:	4b53      	ldr	r3, [pc, #332]	; (800131c <HAL_DAC_MspInit+0x17c>)
 80011d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d6:	61bb      	str	r3, [r7, #24]
 80011d8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	4b50      	ldr	r3, [pc, #320]	; (800131c <HAL_DAC_MspInit+0x17c>)
 80011dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011de:	4a4f      	ldr	r2, [pc, #316]	; (800131c <HAL_DAC_MspInit+0x17c>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011e6:	4b4d      	ldr	r3, [pc, #308]	; (800131c <HAL_DAC_MspInit+0x17c>)
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	617b      	str	r3, [r7, #20]
 80011f0:	697b      	ldr	r3, [r7, #20]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80011f2:	2330      	movs	r3, #48	; 0x30
 80011f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011f6:	2303      	movs	r3, #3
 80011f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fa:	2300      	movs	r3, #0
 80011fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011fe:	f107 031c 	add.w	r3, r7, #28
 8001202:	4619      	mov	r1, r3
 8001204:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001208:	f003 ff6e 	bl	80050e8 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC1_CH1 Init */
    hdma_dac1_ch1.Instance = DMA1_Channel2;
 800120c:	4b44      	ldr	r3, [pc, #272]	; (8001320 <HAL_DAC_MspInit+0x180>)
 800120e:	4a45      	ldr	r2, [pc, #276]	; (8001324 <HAL_DAC_MspInit+0x184>)
 8001210:	601a      	str	r2, [r3, #0]
    hdma_dac1_ch1.Init.Request = DMA_REQUEST_DAC1_CHANNEL1;
 8001212:	4b43      	ldr	r3, [pc, #268]	; (8001320 <HAL_DAC_MspInit+0x180>)
 8001214:	2206      	movs	r2, #6
 8001216:	605a      	str	r2, [r3, #4]
    hdma_dac1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001218:	4b41      	ldr	r3, [pc, #260]	; (8001320 <HAL_DAC_MspInit+0x180>)
 800121a:	2210      	movs	r2, #16
 800121c:	609a      	str	r2, [r3, #8]
    hdma_dac1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800121e:	4b40      	ldr	r3, [pc, #256]	; (8001320 <HAL_DAC_MspInit+0x180>)
 8001220:	2200      	movs	r2, #0
 8001222:	60da      	str	r2, [r3, #12]
    hdma_dac1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001224:	4b3e      	ldr	r3, [pc, #248]	; (8001320 <HAL_DAC_MspInit+0x180>)
 8001226:	2280      	movs	r2, #128	; 0x80
 8001228:	611a      	str	r2, [r3, #16]
    hdma_dac1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800122a:	4b3d      	ldr	r3, [pc, #244]	; (8001320 <HAL_DAC_MspInit+0x180>)
 800122c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001230:	615a      	str	r2, [r3, #20]
    hdma_dac1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001232:	4b3b      	ldr	r3, [pc, #236]	; (8001320 <HAL_DAC_MspInit+0x180>)
 8001234:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001238:	619a      	str	r2, [r3, #24]
    hdma_dac1_ch1.Init.Mode = DMA_CIRCULAR;
 800123a:	4b39      	ldr	r3, [pc, #228]	; (8001320 <HAL_DAC_MspInit+0x180>)
 800123c:	2220      	movs	r2, #32
 800123e:	61da      	str	r2, [r3, #28]
    hdma_dac1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001240:	4b37      	ldr	r3, [pc, #220]	; (8001320 <HAL_DAC_MspInit+0x180>)
 8001242:	2200      	movs	r2, #0
 8001244:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac1_ch1) != HAL_OK)
 8001246:	4836      	ldr	r0, [pc, #216]	; (8001320 <HAL_DAC_MspInit+0x180>)
 8001248:	f003 fc82 	bl	8004b50 <HAL_DMA_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <HAL_DAC_MspInit+0xb6>
    {
      Error_Handler();
 8001252:	f000 fd69 	bl	8001d28 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1_ch1);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4a31      	ldr	r2, [pc, #196]	; (8001320 <HAL_DAC_MspInit+0x180>)
 800125a:	609a      	str	r2, [r3, #8]
 800125c:	4a30      	ldr	r2, [pc, #192]	; (8001320 <HAL_DAC_MspInit+0x180>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN DAC2_MspInit 1 */

  /* USER CODE END DAC2_MspInit 1 */
  }
}
 8001262:	e054      	b.n	800130e <HAL_DAC_MspInit+0x16e>
  else if(dacHandle->Instance==DAC2)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a2f      	ldr	r2, [pc, #188]	; (8001328 <HAL_DAC_MspInit+0x188>)
 800126a:	4293      	cmp	r3, r2
 800126c:	d14f      	bne.n	800130e <HAL_DAC_MspInit+0x16e>
    __HAL_RCC_DAC2_CLK_ENABLE();
 800126e:	4b2b      	ldr	r3, [pc, #172]	; (800131c <HAL_DAC_MspInit+0x17c>)
 8001270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001272:	4a2a      	ldr	r2, [pc, #168]	; (800131c <HAL_DAC_MspInit+0x17c>)
 8001274:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001278:	64d3      	str	r3, [r2, #76]	; 0x4c
 800127a:	4b28      	ldr	r3, [pc, #160]	; (800131c <HAL_DAC_MspInit+0x17c>)
 800127c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800127e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	4b25      	ldr	r3, [pc, #148]	; (800131c <HAL_DAC_MspInit+0x17c>)
 8001288:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800128a:	4a24      	ldr	r2, [pc, #144]	; (800131c <HAL_DAC_MspInit+0x17c>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001292:	4b22      	ldr	r3, [pc, #136]	; (800131c <HAL_DAC_MspInit+0x17c>)
 8001294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800129e:	2340      	movs	r3, #64	; 0x40
 80012a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012a2:	2303      	movs	r3, #3
 80012a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a6:	2300      	movs	r3, #0
 80012a8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012aa:	f107 031c 	add.w	r3, r7, #28
 80012ae:	4619      	mov	r1, r3
 80012b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b4:	f003 ff18 	bl	80050e8 <HAL_GPIO_Init>
    hdma_dac2_ch1.Instance = DMA1_Channel3;
 80012b8:	4b1c      	ldr	r3, [pc, #112]	; (800132c <HAL_DAC_MspInit+0x18c>)
 80012ba:	4a1d      	ldr	r2, [pc, #116]	; (8001330 <HAL_DAC_MspInit+0x190>)
 80012bc:	601a      	str	r2, [r3, #0]
    hdma_dac2_ch1.Init.Request = DMA_REQUEST_DAC2_CHANNEL1;
 80012be:	4b1b      	ldr	r3, [pc, #108]	; (800132c <HAL_DAC_MspInit+0x18c>)
 80012c0:	2229      	movs	r2, #41	; 0x29
 80012c2:	605a      	str	r2, [r3, #4]
    hdma_dac2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012c4:	4b19      	ldr	r3, [pc, #100]	; (800132c <HAL_DAC_MspInit+0x18c>)
 80012c6:	2210      	movs	r2, #16
 80012c8:	609a      	str	r2, [r3, #8]
    hdma_dac2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012ca:	4b18      	ldr	r3, [pc, #96]	; (800132c <HAL_DAC_MspInit+0x18c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	60da      	str	r2, [r3, #12]
    hdma_dac2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80012d0:	4b16      	ldr	r3, [pc, #88]	; (800132c <HAL_DAC_MspInit+0x18c>)
 80012d2:	2280      	movs	r2, #128	; 0x80
 80012d4:	611a      	str	r2, [r3, #16]
    hdma_dac2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <HAL_DAC_MspInit+0x18c>)
 80012d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012dc:	615a      	str	r2, [r3, #20]
    hdma_dac2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <HAL_DAC_MspInit+0x18c>)
 80012e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012e4:	619a      	str	r2, [r3, #24]
    hdma_dac2_ch1.Init.Mode = DMA_CIRCULAR;
 80012e6:	4b11      	ldr	r3, [pc, #68]	; (800132c <HAL_DAC_MspInit+0x18c>)
 80012e8:	2220      	movs	r2, #32
 80012ea:	61da      	str	r2, [r3, #28]
    hdma_dac2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <HAL_DAC_MspInit+0x18c>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac2_ch1) != HAL_OK)
 80012f2:	480e      	ldr	r0, [pc, #56]	; (800132c <HAL_DAC_MspInit+0x18c>)
 80012f4:	f003 fc2c 	bl	8004b50 <HAL_DMA_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_DAC_MspInit+0x162>
      Error_Handler();
 80012fe:	f000 fd13 	bl	8001d28 <Error_Handler>
    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac2_ch1);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a09      	ldr	r2, [pc, #36]	; (800132c <HAL_DAC_MspInit+0x18c>)
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	4a08      	ldr	r2, [pc, #32]	; (800132c <HAL_DAC_MspInit+0x18c>)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6293      	str	r3, [r2, #40]	; 0x28
}
 800130e:	bf00      	nop
 8001310:	3730      	adds	r7, #48	; 0x30
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	50000800 	.word	0x50000800
 800131c:	40021000 	.word	0x40021000
 8001320:	20000d2c 	.word	0x20000d2c
 8001324:	4002001c 	.word	0x4002001c
 8001328:	50000c00 	.word	0x50000c00
 800132c:	20000d8c 	.word	0x20000d8c
 8001330:	40020030 	.word	0x40020030

08001334 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
void MX_DMA_Init(void) 
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800133a:	4b1a      	ldr	r3, [pc, #104]	; (80013a4 <MX_DMA_Init+0x70>)
 800133c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800133e:	4a19      	ldr	r2, [pc, #100]	; (80013a4 <MX_DMA_Init+0x70>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	6493      	str	r3, [r2, #72]	; 0x48
 8001346:	4b17      	ldr	r3, [pc, #92]	; (80013a4 <MX_DMA_Init+0x70>)
 8001348:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	607b      	str	r3, [r7, #4]
 8001350:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001352:	4b14      	ldr	r3, [pc, #80]	; (80013a4 <MX_DMA_Init+0x70>)
 8001354:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001356:	4a13      	ldr	r2, [pc, #76]	; (80013a4 <MX_DMA_Init+0x70>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6493      	str	r3, [r2, #72]	; 0x48
 800135e:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <MX_DMA_Init+0x70>)
 8001360:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	603b      	str	r3, [r7, #0]
 8001368:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 1, 0);
 800136a:	2200      	movs	r2, #0
 800136c:	2101      	movs	r1, #1
 800136e:	200b      	movs	r0, #11
 8001370:	f002 ffbb 	bl	80042ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001374:	200b      	movs	r0, #11
 8001376:	f002 ffd2 	bl	800431e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	200c      	movs	r0, #12
 8001380:	f002 ffb3 	bl	80042ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001384:	200c      	movs	r0, #12
 8001386:	f002 ffca 	bl	800431e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	200d      	movs	r0, #13
 8001390:	f002 ffab 	bl	80042ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8001394:	200d      	movs	r0, #13
 8001396:	f002 ffc2 	bl	800431e <HAL_NVIC_EnableIRQ>

}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40021000 	.word	0x40021000

080013a8 <update_dc_bias_sweep>:
uint16_t dcbias = 0;
int dcbias_dir = 1;
int dcinverted = 0;

void update_dc_bias_sweep()
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
	  // up=1, down=0
	  (dcbias_dir) ? (dcbias++) : (dcbias--);
 80013ac:	4b20      	ldr	r3, [pc, #128]	; (8001430 <update_dc_bias_sweep+0x88>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d006      	beq.n	80013c2 <update_dc_bias_sweep+0x1a>
 80013b4:	4b1f      	ldr	r3, [pc, #124]	; (8001434 <update_dc_bias_sweep+0x8c>)
 80013b6:	881b      	ldrh	r3, [r3, #0]
 80013b8:	3301      	adds	r3, #1
 80013ba:	b29a      	uxth	r2, r3
 80013bc:	4b1d      	ldr	r3, [pc, #116]	; (8001434 <update_dc_bias_sweep+0x8c>)
 80013be:	801a      	strh	r2, [r3, #0]
 80013c0:	e005      	b.n	80013ce <update_dc_bias_sweep+0x26>
 80013c2:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <update_dc_bias_sweep+0x8c>)
 80013c4:	881b      	ldrh	r3, [r3, #0]
 80013c6:	3b01      	subs	r3, #1
 80013c8:	b29a      	uxth	r2, r3
 80013ca:	4b1a      	ldr	r3, [pc, #104]	; (8001434 <update_dc_bias_sweep+0x8c>)
 80013cc:	801a      	strh	r2, [r3, #0]

	  // invert the bias signal at zero crossing
	  if(dcbias < 1) {
 80013ce:	4b19      	ldr	r3, [pc, #100]	; (8001434 <update_dc_bias_sweep+0x8c>)
 80013d0:	881b      	ldrh	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10a      	bne.n	80013ec <update_dc_bias_sweep+0x44>
		(dcinverted) ? (dcinverted=0) : (dcinverted=1);
 80013d6:	4b18      	ldr	r3, [pc, #96]	; (8001438 <update_dc_bias_sweep+0x90>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d003      	beq.n	80013e6 <update_dc_bias_sweep+0x3e>
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <update_dc_bias_sweep+0x90>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	e002      	b.n	80013ec <update_dc_bias_sweep+0x44>
 80013e6:	4b14      	ldr	r3, [pc, #80]	; (8001438 <update_dc_bias_sweep+0x90>)
 80013e8:	2201      	movs	r2, #1
 80013ea:	601a      	str	r2, [r3, #0]
	  }

	  // change direction if dac limits are reached
	  if(dcbias < 1) 	{ dcbias_dir = 1; }
 80013ec:	4b11      	ldr	r3, [pc, #68]	; (8001434 <update_dc_bias_sweep+0x8c>)
 80013ee:	881b      	ldrh	r3, [r3, #0]
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d102      	bne.n	80013fa <update_dc_bias_sweep+0x52>
 80013f4:	4b0e      	ldr	r3, [pc, #56]	; (8001430 <update_dc_bias_sweep+0x88>)
 80013f6:	2201      	movs	r2, #1
 80013f8:	601a      	str	r2, [r3, #0]
	  if(dcbias > 4095) { dcbias_dir = 0; }
 80013fa:	4b0e      	ldr	r3, [pc, #56]	; (8001434 <update_dc_bias_sweep+0x8c>)
 80013fc:	881b      	ldrh	r3, [r3, #0]
 80013fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001402:	d302      	bcc.n	800140a <update_dc_bias_sweep+0x62>
 8001404:	4b0a      	ldr	r3, [pc, #40]	; (8001430 <update_dc_bias_sweep+0x88>)
 8001406:	2200      	movs	r2, #0
 8001408:	601a      	str	r2, [r3, #0]


	  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, dcinverted);
 800140a:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <update_dc_bias_sweep+0x90>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	b2db      	uxtb	r3, r3
 8001410:	461a      	mov	r2, r3
 8001412:	2108      	movs	r1, #8
 8001414:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001418:	f004 f800 	bl	800541c <HAL_GPIO_WritePin>
	  HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, dcbias);
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <update_dc_bias_sweep+0x8c>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	2200      	movs	r2, #0
 8001422:	2110      	movs	r1, #16
 8001424:	4805      	ldr	r0, [pc, #20]	; (800143c <update_dc_bias_sweep+0x94>)
 8001426:	f003 f921 	bl	800466c <HAL_DAC_SetValue>
}
 800142a:	bf00      	nop
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	2000000c 	.word	0x2000000c
 8001434:	20000bf0 	.word	0x20000bf0
 8001438:	20000bf4 	.word	0x20000bf4
 800143c:	20000d18 	.word	0x20000d18

08001440 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001444:	4b04      	ldr	r3, [pc, #16]	; (8001458 <__NVIC_GetPriorityGrouping+0x18>)
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	f003 0307 	and.w	r3, r3, #7
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	e000ed00 	.word	0xe000ed00

0800145c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800146a:	2b00      	cmp	r3, #0
 800146c:	db0b      	blt.n	8001486 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	f003 021f 	and.w	r2, r3, #31
 8001474:	4907      	ldr	r1, [pc, #28]	; (8001494 <__NVIC_EnableIRQ+0x38>)
 8001476:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147a:	095b      	lsrs	r3, r3, #5
 800147c:	2001      	movs	r0, #1
 800147e:	fa00 f202 	lsl.w	r2, r0, r2
 8001482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001490:	4770      	bx	lr
 8001492:	bf00      	nop
 8001494:	e000e100 	.word	0xe000e100

08001498 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	4603      	mov	r3, r0
 80014a0:	6039      	str	r1, [r7, #0]
 80014a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	db0a      	blt.n	80014c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	b2da      	uxtb	r2, r3
 80014b0:	490c      	ldr	r1, [pc, #48]	; (80014e4 <__NVIC_SetPriority+0x4c>)
 80014b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b6:	0112      	lsls	r2, r2, #4
 80014b8:	b2d2      	uxtb	r2, r2
 80014ba:	440b      	add	r3, r1
 80014bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014c0:	e00a      	b.n	80014d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	b2da      	uxtb	r2, r3
 80014c6:	4908      	ldr	r1, [pc, #32]	; (80014e8 <__NVIC_SetPriority+0x50>)
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	f003 030f 	and.w	r3, r3, #15
 80014ce:	3b04      	subs	r3, #4
 80014d0:	0112      	lsls	r2, r2, #4
 80014d2:	b2d2      	uxtb	r2, r2
 80014d4:	440b      	add	r3, r1
 80014d6:	761a      	strb	r2, [r3, #24]
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000e100 	.word	0xe000e100
 80014e8:	e000ed00 	.word	0xe000ed00

080014ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b089      	sub	sp, #36	; 0x24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f003 0307 	and.w	r3, r3, #7
 80014fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f1c3 0307 	rsb	r3, r3, #7
 8001506:	2b04      	cmp	r3, #4
 8001508:	bf28      	it	cs
 800150a:	2304      	movcs	r3, #4
 800150c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800150e:	69fb      	ldr	r3, [r7, #28]
 8001510:	3304      	adds	r3, #4
 8001512:	2b06      	cmp	r3, #6
 8001514:	d902      	bls.n	800151c <NVIC_EncodePriority+0x30>
 8001516:	69fb      	ldr	r3, [r7, #28]
 8001518:	3b03      	subs	r3, #3
 800151a:	e000      	b.n	800151e <NVIC_EncodePriority+0x32>
 800151c:	2300      	movs	r3, #0
 800151e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001520:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	fa02 f303 	lsl.w	r3, r2, r3
 800152a:	43da      	mvns	r2, r3
 800152c:	68bb      	ldr	r3, [r7, #8]
 800152e:	401a      	ands	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001534:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	fa01 f303 	lsl.w	r3, r1, r3
 800153e:	43d9      	mvns	r1, r3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001544:	4313      	orrs	r3, r2
         );
}
 8001546:	4618      	mov	r0, r3
 8001548:	3724      	adds	r7, #36	; 0x24
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr
	...

08001554 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 800155e:	4a14      	ldr	r2, [pc, #80]	; (80015b0 <LL_SYSCFG_SetEXTISource+0x5c>)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	f003 0303 	and.w	r3, r3, #3
 8001566:	3302      	adds	r3, #2
 8001568:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800156c:	683b      	ldr	r3, [r7, #0]
 800156e:	0c1b      	lsrs	r3, r3, #16
 8001570:	43db      	mvns	r3, r3
 8001572:	ea02 0103 	and.w	r1, r2, r3
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	0c1b      	lsrs	r3, r3, #16
 800157a:	60fb      	str	r3, [r7, #12]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	fa93 f3a3 	rbit	r3, r3
 8001582:	60bb      	str	r3, [r7, #8]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	fab3 f383 	clz	r3, r3
 800158a:	b2db      	uxtb	r3, r3
 800158c:	f003 031f 	and.w	r3, r3, #31
 8001590:	687a      	ldr	r2, [r7, #4]
 8001592:	409a      	lsls	r2, r3
 8001594:	4806      	ldr	r0, [pc, #24]	; (80015b0 <LL_SYSCFG_SetEXTISource+0x5c>)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	430a      	orrs	r2, r1
 800159e:	3302      	adds	r3, #2
 80015a0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80015a4:	bf00      	nop
 80015a6:	3714      	adds	r7, #20
 80015a8:	46bd      	mov	sp, r7
 80015aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ae:	4770      	bx	lr
 80015b0:	40010000 	.word	0x40010000

080015b4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b089      	sub	sp, #36	; 0x24
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	60f8      	str	r0, [r7, #12]
 80015bc:	60b9      	str	r1, [r7, #8]
 80015be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	fa93 f3a3 	rbit	r3, r3
 80015ce:	613b      	str	r3, [r7, #16]
  return result;
 80015d0:	693b      	ldr	r3, [r7, #16]
 80015d2:	fab3 f383 	clz	r3, r3
 80015d6:	b2db      	uxtb	r3, r3
 80015d8:	005b      	lsls	r3, r3, #1
 80015da:	2103      	movs	r1, #3
 80015dc:	fa01 f303 	lsl.w	r3, r1, r3
 80015e0:	43db      	mvns	r3, r3
 80015e2:	401a      	ands	r2, r3
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e8:	69fb      	ldr	r3, [r7, #28]
 80015ea:	fa93 f3a3 	rbit	r3, r3
 80015ee:	61bb      	str	r3, [r7, #24]
  return result;
 80015f0:	69bb      	ldr	r3, [r7, #24]
 80015f2:	fab3 f383 	clz	r3, r3
 80015f6:	b2db      	uxtb	r3, r3
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001600:	431a      	orrs	r2, r3
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	601a      	str	r2, [r3, #0]
}
 8001606:	bf00      	nop
 8001608:	3724      	adds	r7, #36	; 0x24
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr

08001612 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001612:	b480      	push	{r7}
 8001614:	b089      	sub	sp, #36	; 0x24
 8001616:	af00      	add	r7, sp, #0
 8001618:	60f8      	str	r0, [r7, #12]
 800161a:	60b9      	str	r1, [r7, #8]
 800161c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	68da      	ldr	r2, [r3, #12]
 8001622:	68bb      	ldr	r3, [r7, #8]
 8001624:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001626:	697b      	ldr	r3, [r7, #20]
 8001628:	fa93 f3a3 	rbit	r3, r3
 800162c:	613b      	str	r3, [r7, #16]
  return result;
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	fab3 f383 	clz	r3, r3
 8001634:	b2db      	uxtb	r3, r3
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	2103      	movs	r1, #3
 800163a:	fa01 f303 	lsl.w	r3, r1, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	401a      	ands	r2, r3
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001646:	69fb      	ldr	r3, [r7, #28]
 8001648:	fa93 f3a3 	rbit	r3, r3
 800164c:	61bb      	str	r3, [r7, #24]
  return result;
 800164e:	69bb      	ldr	r3, [r7, #24]
 8001650:	fab3 f383 	clz	r3, r3
 8001654:	b2db      	uxtb	r3, r3
 8001656:	005b      	lsls	r3, r3, #1
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	fa01 f303 	lsl.w	r3, r1, r3
 800165e:	431a      	orrs	r2, r3
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	60da      	str	r2, [r3, #12]
}
 8001664:	bf00      	nop
 8001666:	3724      	adds	r7, #36	; 0x24
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
 8001678:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	683a      	ldr	r2, [r7, #0]
 800167e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001680:	bf00      	nop
 8001682:	370c      	adds	r7, #12
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001694:	4b08      	ldr	r3, [pc, #32]	; (80016b8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001696:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001698:	4907      	ldr	r1, [pc, #28]	; (80016b8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4313      	orrs	r3, r2
 800169e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80016a0:	4b05      	ldr	r3, [pc, #20]	; (80016b8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80016a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	4013      	ands	r3, r2
 80016a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80016aa:	68fb      	ldr	r3, [r7, #12]
}
 80016ac:	bf00      	nop
 80016ae:	3714      	adds	r7, #20
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr
 80016b8:	40021000 	.word	0x40021000

080016bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	; 0x28
 80016c0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80016c2:	f107 031c 	add.w	r3, r7, #28
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	2200      	movs	r2, #0
 80016d2:	601a      	str	r2, [r3, #0]
 80016d4:	605a      	str	r2, [r3, #4]
 80016d6:	609a      	str	r2, [r3, #8]
 80016d8:	60da      	str	r2, [r3, #12]
 80016da:	611a      	str	r2, [r3, #16]
 80016dc:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80016de:	2004      	movs	r0, #4
 80016e0:	f7ff ffd4 	bl	800168c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOF);
 80016e4:	2020      	movs	r0, #32
 80016e6:	f7ff ffd1 	bl	800168c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80016ea:	2001      	movs	r0, #1
 80016ec:	f7ff ffce 	bl	800168c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80016f0:	2002      	movs	r0, #2
 80016f2:	f7ff ffcb 	bl	800168c <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMODE_GPIO_Port, TRIGMODE_Pin);
 80016f6:	2108      	movs	r1, #8
 80016f8:	48d3      	ldr	r0, [pc, #844]	; (8001a48 <MX_GPIO_Init+0x38c>)
 80016fa:	f7ff ffb9 	bl	8001670 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin);
 80016fe:	2108      	movs	r1, #8
 8001700:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001704:	f7ff ffb4 	bl	8001670 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG2_GPIO_Port, SG2_Pin);
 8001708:	2110      	movs	r1, #16
 800170a:	48cf      	ldr	r0, [pc, #828]	; (8001a48 <MX_GPIO_Init+0x38c>)
 800170c:	f7ff ffb0 	bl	8001670 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG1_GPIO_Port, SG1_Pin);
 8001710:	2120      	movs	r1, #32
 8001712:	48cd      	ldr	r0, [pc, #820]	; (8001a48 <MX_GPIO_Init+0x38c>)
 8001714:	f7ff ffac 	bl	8001670 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(SG0_GPIO_Port, SG0_Pin);
 8001718:	2101      	movs	r1, #1
 800171a:	48cc      	ldr	r0, [pc, #816]	; (8001a4c <MX_GPIO_Init+0x390>)
 800171c:	f7ff ffa8 	bl	8001670 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin);
 8001720:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001724:	48c8      	ldr	r0, [pc, #800]	; (8001a48 <MX_GPIO_Init+0x38c>)
 8001726:	f7ff ffa3 	bl	8001670 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin);
 800172a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800172e:	48c6      	ldr	r0, [pc, #792]	; (8001a48 <MX_GPIO_Init+0x38c>)
 8001730:	f7ff ff9e 	bl	8001670 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(DC_GPIO_Port, DC_Pin);
 8001734:	2140      	movs	r1, #64	; 0x40
 8001736:	48c5      	ldr	r0, [pc, #788]	; (8001a4c <MX_GPIO_Init+0x390>)
 8001738:	f7ff ff9a 	bl	8001670 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS_GPIO_Port, CS_Pin);
 800173c:	2180      	movs	r1, #128	; 0x80
 800173e:	48c3      	ldr	r0, [pc, #780]	; (8001a4c <MX_GPIO_Init+0x390>)
 8001740:	f7ff ff96 	bl	8001670 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(RST_GPIO_Port, RST_Pin);
 8001744:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001748:	48c0      	ldr	r0, [pc, #768]	; (8001a4c <MX_GPIO_Init+0x390>)
 800174a:	f7ff ff91 	bl	8001670 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE14);
 800174e:	49c0      	ldr	r1, [pc, #768]	; (8001a50 <MX_GPIO_Init+0x394>)
 8001750:	2002      	movs	r0, #2
 8001752:	f7ff feff 	bl	8001554 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE15);
 8001756:	49bf      	ldr	r1, [pc, #764]	; (8001a54 <MX_GPIO_Init+0x398>)
 8001758:	2002      	movs	r0, #2
 800175a:	f7ff fefb 	bl	8001554 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE0);
 800175e:	f44f 2170 	mov.w	r1, #983040	; 0xf0000
 8001762:	2005      	movs	r0, #5
 8001764:	f7ff fef6 	bl	8001554 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTF, LL_SYSCFG_EXTI_LINE1);
 8001768:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
 800176c:	2005      	movs	r0, #5
 800176e:	f7ff fef1 	bl	8001554 <LL_SYSCFG_SetEXTISource>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE2);
 8001772:	f04f 6170 	mov.w	r1, #251658240	; 0xf000000
 8001776:	2002      	movs	r0, #2
 8001778:	f7ff feec 	bl	8001554 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_14;
 800177c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001780:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001782:	2301      	movs	r3, #1
 8001784:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001788:	2300      	movs	r3, #0
 800178a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800178e:	2302      	movs	r3, #2
 8001790:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001794:	f107 031c 	add.w	r3, r7, #28
 8001798:	4618      	mov	r0, r3
 800179a:	f006 fa95 	bl	8007cc8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_15;
 800179e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017a2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80017a4:	2301      	movs	r3, #1
 80017a6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80017aa:	2300      	movs	r3, #0
 80017ac:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80017b0:	2302      	movs	r3, #2
 80017b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80017b6:	f107 031c 	add.w	r3, r7, #28
 80017ba:	4618      	mov	r0, r3
 80017bc:	f006 fa84 	bl	8007cc8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_0;
 80017c0:	2301      	movs	r3, #1
 80017c2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80017c4:	2301      	movs	r3, #1
 80017c6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80017d0:	2302      	movs	r3, #2
 80017d2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80017d6:	f107 031c 	add.w	r3, r7, #28
 80017da:	4618      	mov	r0, r3
 80017dc:	f006 fa74 	bl	8007cc8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_1;
 80017e0:	2302      	movs	r3, #2
 80017e2:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 80017e4:	2301      	movs	r3, #1
 80017e6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80017ea:	2300      	movs	r3, #0
 80017ec:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80017f0:	2302      	movs	r3, #2
 80017f2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80017f6:	f107 031c 	add.w	r3, r7, #28
 80017fa:	4618      	mov	r0, r3
 80017fc:	f006 fa64 	bl	8007cc8 <LL_EXTI_Init>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_2;
 8001800:	2304      	movs	r3, #4
 8001802:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.LineCommand = ENABLE;
 8001804:	2301      	movs	r3, #1
 8001806:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800180a:	2300      	movs	r3, #0
 800180c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8001810:	2302      	movs	r3, #2
 8001812:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001816:	f107 031c 	add.w	r3, r7, #28
 800181a:	4618      	mov	r0, r3
 800181c:	f006 fa54 	bl	8007cc8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_PULL_UP);
 8001820:	2201      	movs	r2, #1
 8001822:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001826:	4888      	ldr	r0, [pc, #544]	; (8001a48 <MX_GPIO_Init+0x38c>)
 8001828:	f7ff fef3 	bl	8001612 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_PULL_UP);
 800182c:	2201      	movs	r2, #1
 800182e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001832:	4885      	ldr	r0, [pc, #532]	; (8001a48 <MX_GPIO_Init+0x38c>)
 8001834:	f7ff feed 	bl	8001612 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_PULL_UP);
 8001838:	2201      	movs	r2, #1
 800183a:	2101      	movs	r1, #1
 800183c:	4886      	ldr	r0, [pc, #536]	; (8001a58 <MX_GPIO_Init+0x39c>)
 800183e:	f7ff fee8 	bl	8001612 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_PULL_UP);
 8001842:	2201      	movs	r2, #1
 8001844:	2102      	movs	r1, #2
 8001846:	4884      	ldr	r0, [pc, #528]	; (8001a58 <MX_GPIO_Init+0x39c>)
 8001848:	f7ff fee3 	bl	8001612 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinPull(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_PULL_UP);
 800184c:	2201      	movs	r2, #1
 800184e:	2104      	movs	r1, #4
 8001850:	487d      	ldr	r0, [pc, #500]	; (8001a48 <MX_GPIO_Init+0x38c>)
 8001852:	f7ff fede 	bl	8001612 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin, LL_GPIO_MODE_INPUT);
 8001856:	2200      	movs	r2, #0
 8001858:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800185c:	487a      	ldr	r0, [pc, #488]	; (8001a48 <MX_GPIO_Init+0x38c>)
 800185e:	f7ff fea9 	bl	80015b4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin, LL_GPIO_MODE_INPUT);
 8001862:	2200      	movs	r2, #0
 8001864:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001868:	4877      	ldr	r0, [pc, #476]	; (8001a48 <MX_GPIO_Init+0x38c>)
 800186a:	f7ff fea3 	bl	80015b4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin, LL_GPIO_MODE_INPUT);
 800186e:	2200      	movs	r2, #0
 8001870:	2101      	movs	r1, #1
 8001872:	4879      	ldr	r0, [pc, #484]	; (8001a58 <MX_GPIO_Init+0x39c>)
 8001874:	f7ff fe9e 	bl	80015b4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin, LL_GPIO_MODE_INPUT);
 8001878:	2200      	movs	r2, #0
 800187a:	2102      	movs	r1, #2
 800187c:	4876      	ldr	r0, [pc, #472]	; (8001a58 <MX_GPIO_Init+0x39c>)
 800187e:	f7ff fe99 	bl	80015b4 <LL_GPIO_SetPinMode>

  /**/
  LL_GPIO_SetPinMode(ENC_EXTI2_GPIO_Port, ENC_EXTI2_Pin, LL_GPIO_MODE_INPUT);
 8001882:	2200      	movs	r2, #0
 8001884:	2104      	movs	r1, #4
 8001886:	4870      	ldr	r0, [pc, #448]	; (8001a48 <MX_GPIO_Init+0x38c>)
 8001888:	f7ff fe94 	bl	80015b4 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = TRIGMODE_Pin;
 800188c:	2308      	movs	r3, #8
 800188e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001890:	2301      	movs	r3, #1
 8001892:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001898:	2300      	movs	r3, #0
 800189a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800189c:	2302      	movs	r3, #2
 800189e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMODE_GPIO_Port, &GPIO_InitStruct);
 80018a0:	1d3b      	adds	r3, r7, #4
 80018a2:	4619      	mov	r1, r3
 80018a4:	4868      	ldr	r0, [pc, #416]	; (8001a48 <MX_GPIO_Init+0x38c>)
 80018a6:	f006 fc02 	bl	80080ae <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DCBIAS_INVERT_Pin;
 80018aa:	2308      	movs	r3, #8
 80018ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80018ae:	2301      	movs	r3, #1
 80018b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018b6:	2300      	movs	r3, #0
 80018b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018ba:	2300      	movs	r3, #0
 80018bc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DCBIAS_INVERT_GPIO_Port, &GPIO_InitStruct);
 80018be:	1d3b      	adds	r3, r7, #4
 80018c0:	4619      	mov	r1, r3
 80018c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018c6:	f006 fbf2 	bl	80080ae <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG2_Pin;
 80018ca:	2310      	movs	r3, #16
 80018cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80018ce:	2301      	movs	r3, #1
 80018d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80018d2:	2300      	movs	r3, #0
 80018d4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018d6:	2300      	movs	r3, #0
 80018d8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018da:	2300      	movs	r3, #0
 80018dc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG2_GPIO_Port, &GPIO_InitStruct);
 80018de:	1d3b      	adds	r3, r7, #4
 80018e0:	4619      	mov	r1, r3
 80018e2:	4859      	ldr	r0, [pc, #356]	; (8001a48 <MX_GPIO_Init+0x38c>)
 80018e4:	f006 fbe3 	bl	80080ae <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG1_Pin;
 80018e8:	2320      	movs	r3, #32
 80018ea:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80018ec:	2301      	movs	r3, #1
 80018ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80018f0:	2300      	movs	r3, #0
 80018f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018f8:	2300      	movs	r3, #0
 80018fa:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG1_GPIO_Port, &GPIO_InitStruct);
 80018fc:	1d3b      	adds	r3, r7, #4
 80018fe:	4619      	mov	r1, r3
 8001900:	4851      	ldr	r0, [pc, #324]	; (8001a48 <MX_GPIO_Init+0x38c>)
 8001902:	f006 fbd4 	bl	80080ae <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = SG0_Pin;
 8001906:	2301      	movs	r3, #1
 8001908:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800190a:	2301      	movs	r3, #1
 800190c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001916:	2300      	movs	r3, #0
 8001918:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(SG0_GPIO_Port, &GPIO_InitStruct);
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	4619      	mov	r1, r3
 800191e:	484b      	ldr	r0, [pc, #300]	; (8001a4c <MX_GPIO_Init+0x390>)
 8001920:	f006 fbc5 	bl	80080ae <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX1_Pin;
 8001924:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001928:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800192a:	2301      	movs	r3, #1
 800192c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001936:	2300      	movs	r3, #0
 8001938:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX1_GPIO_Port, &GPIO_InitStruct);
 800193a:	1d3b      	adds	r3, r7, #4
 800193c:	4619      	mov	r1, r3
 800193e:	4842      	ldr	r0, [pc, #264]	; (8001a48 <MX_GPIO_Init+0x38c>)
 8001940:	f006 fbb5 	bl	80080ae <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = TRIGMUX2_Pin;
 8001944:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001948:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800194a:	2301      	movs	r3, #1
 800194c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001952:	2300      	movs	r3, #0
 8001954:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(TRIGMUX2_GPIO_Port, &GPIO_InitStruct);
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	4619      	mov	r1, r3
 800195e:	483a      	ldr	r0, [pc, #232]	; (8001a48 <MX_GPIO_Init+0x38c>)
 8001960:	f006 fba5 	bl	80080ae <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = DC_Pin;
 8001964:	2340      	movs	r3, #64	; 0x40
 8001966:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001968:	2301      	movs	r3, #1
 800196a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800196c:	2303      	movs	r3, #3
 800196e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001974:	2300      	movs	r3, #0
 8001976:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(DC_GPIO_Port, &GPIO_InitStruct);
 8001978:	1d3b      	adds	r3, r7, #4
 800197a:	4619      	mov	r1, r3
 800197c:	4833      	ldr	r0, [pc, #204]	; (8001a4c <MX_GPIO_Init+0x390>)
 800197e:	f006 fb96 	bl	80080ae <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS_Pin;
 8001982:	2380      	movs	r3, #128	; 0x80
 8001984:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001986:	2301      	movs	r3, #1
 8001988:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800198a:	2303      	movs	r3, #3
 800198c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001992:	2300      	movs	r3, #0
 8001994:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS_GPIO_Port, &GPIO_InitStruct);
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	4619      	mov	r1, r3
 800199a:	482c      	ldr	r0, [pc, #176]	; (8001a4c <MX_GPIO_Init+0x390>)
 800199c:	f006 fb87 	bl	80080ae <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = RST_Pin;
 80019a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80019a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80019a6:	2301      	movs	r3, #1
 80019a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80019aa:	2303      	movs	r3, #3
 80019ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(RST_GPIO_Port, &GPIO_InitStruct);
 80019b6:	1d3b      	adds	r3, r7, #4
 80019b8:	4619      	mov	r1, r3
 80019ba:	4824      	ldr	r0, [pc, #144]	; (8001a4c <MX_GPIO_Init+0x390>)
 80019bc:	f006 fb77 	bl	80080ae <LL_GPIO_Init>

  /* EXTI interrupt init*/
  NVIC_SetPriority(EXTI0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80019c0:	f7ff fd3e 	bl	8001440 <__NVIC_GetPriorityGrouping>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2200      	movs	r2, #0
 80019c8:	2100      	movs	r1, #0
 80019ca:	4618      	mov	r0, r3
 80019cc:	f7ff fd8e 	bl	80014ec <NVIC_EncodePriority>
 80019d0:	4603      	mov	r3, r0
 80019d2:	4619      	mov	r1, r3
 80019d4:	2006      	movs	r0, #6
 80019d6:	f7ff fd5f 	bl	8001498 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI0_IRQn);
 80019da:	2006      	movs	r0, #6
 80019dc:	f7ff fd3e 	bl	800145c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80019e0:	f7ff fd2e 	bl	8001440 <__NVIC_GetPriorityGrouping>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2200      	movs	r2, #0
 80019e8:	2100      	movs	r1, #0
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff fd7e 	bl	80014ec <NVIC_EncodePriority>
 80019f0:	4603      	mov	r3, r0
 80019f2:	4619      	mov	r1, r3
 80019f4:	2007      	movs	r0, #7
 80019f6:	f7ff fd4f 	bl	8001498 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI1_IRQn);
 80019fa:	2007      	movs	r0, #7
 80019fc:	f7ff fd2e 	bl	800145c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a00:	f7ff fd1e 	bl	8001440 <__NVIC_GetPriorityGrouping>
 8001a04:	4603      	mov	r3, r0
 8001a06:	2200      	movs	r2, #0
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fd6e 	bl	80014ec <NVIC_EncodePriority>
 8001a10:	4603      	mov	r3, r0
 8001a12:	4619      	mov	r1, r3
 8001a14:	2008      	movs	r0, #8
 8001a16:	f7ff fd3f 	bl	8001498 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI2_IRQn);
 8001a1a:	2008      	movs	r0, #8
 8001a1c:	f7ff fd1e 	bl	800145c <__NVIC_EnableIRQ>
  NVIC_SetPriority(EXTI15_10_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001a20:	f7ff fd0e 	bl	8001440 <__NVIC_GetPriorityGrouping>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2200      	movs	r2, #0
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fd5e 	bl	80014ec <NVIC_EncodePriority>
 8001a30:	4603      	mov	r3, r0
 8001a32:	4619      	mov	r1, r3
 8001a34:	2028      	movs	r0, #40	; 0x28
 8001a36:	f7ff fd2f 	bl	8001498 <__NVIC_SetPriority>
  NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a3a:	2028      	movs	r0, #40	; 0x28
 8001a3c:	f7ff fd0e 	bl	800145c <__NVIC_EnableIRQ>

}
 8001a40:	bf00      	nop
 8001a42:	3728      	adds	r7, #40	; 0x28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	e009      	b.n	8001a5c <MX_GPIO_Init+0x3a0>
 8001a48:	48000800 	.word	0x48000800
 8001a4c:	48000400 	.word	0x48000400
 8001a50:	0f000003 	.word	0x0f000003
 8001a54:	f0000003 	.word	0xf0000003
 8001a58:	48001400 	.word	0x48001400
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop

08001a60 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a68:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a6c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d013      	beq.n	8001aa0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001a78:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a7c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8001a80:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d00b      	beq.n	8001aa0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001a88:	e000      	b.n	8001a8c <ITM_SendChar+0x2c>
    {
      __NOP();
 8001a8a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001a8c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d0f9      	beq.n	8001a8a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8001a96:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	b2d2      	uxtb	r2, r2
 8001a9e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001aa0:	687b      	ldr	r3, [r7, #4]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
  for(i=0 ; i<len ; i++)
 8001abe:	2300      	movs	r3, #0
 8001ac0:	617b      	str	r3, [r7, #20]
 8001ac2:	e009      	b.n	8001ad8 <_write+0x2a>
    ITM_SendChar((*ptr++));
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	1c5a      	adds	r2, r3, #1
 8001ac8:	60ba      	str	r2, [r7, #8]
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ffc7 	bl	8001a60 <ITM_SendChar>
  for(i=0 ; i<len ; i++)
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	617b      	str	r3, [r7, #20]
 8001ad8:	697a      	ldr	r2, [r7, #20]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	dbf1      	blt.n	8001ac4 <_write+0x16>
  return len;
 8001ae0:	687b      	ldr	r3, [r7, #4]
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	3718      	adds	r7, #24
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_DAC_ErrorCallbackCh1>:

void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
	// do something
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b06:	f000 ff42 	bl	800298e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b0a:	f000 f89f 	bl	8001c4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b0e:	f7ff fdd5 	bl	80016bc <MX_GPIO_Init>
  MX_DMA_Init();
 8001b12:	f7ff fc0f 	bl	8001334 <MX_DMA_Init>
  MX_DAC1_Init();
 8001b16:	f7ff fabf 	bl	8001098 <MX_DAC1_Init>
  MX_DAC2_Init();
 8001b1a:	f7ff fb07 	bl	800112c <MX_DAC2_Init>
  MX_ADC1_Init();
 8001b1e:	f7ff f97d 	bl	8000e1c <MX_ADC1_Init>
  MX_COMP1_Init();
 8001b22:	f7ff fa5f 	bl	8000fe4 <MX_COMP1_Init>
  MX_TIM2_Init();
 8001b26:	f000 fc29 	bl	800237c <MX_TIM2_Init>
  MX_TIM17_Init();
 8001b2a:	f000 fdc1 	bl	80026b0 <MX_TIM17_Init>
  MX_SPI3_Init();
 8001b2e:	f000 f939 	bl	8001da4 <MX_SPI3_Init>
  MX_RNG_Init();
 8001b32:	f000 f929 	bl	8001d88 <MX_RNG_Init>
  MX_TIM1_Init();
 8001b36:	f000 fbb1 	bl	800229c <MX_TIM1_Init>
  MX_TIM8_Init();
 8001b3a:	f000 fcd9 	bl	80024f0 <MX_TIM8_Init>
  MX_TIM16_Init();
 8001b3e:	f000 fd91 	bl	8002664 <MX_TIM16_Init>
  MX_TIM15_Init();
 8001b42:	f000 fd3d 	bl	80025c0 <MX_TIM15_Init>
  MX_TIM5_Init();
 8001b46:	f000 fc83 	bl	8002450 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  // main signal function output (external)
  HAL_DAC_Start_DMA(&hdac1, DAC1_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	2378      	movs	r3, #120	; 0x78
 8001b50:	4a32      	ldr	r2, [pc, #200]	; (8001c1c <main+0x11c>)
 8001b52:	2100      	movs	r1, #0
 8001b54:	4832      	ldr	r0, [pc, #200]	; (8001c20 <main+0x120>)
 8001b56:	f002 fc71 	bl	800443c <HAL_DAC_Start_DMA>
  //TIM8->ARR = sin1_max_arr;

  // DC bias output (internal)
  HAL_DAC_Start(&hdac1, DAC1_CHANNEL_2);
 8001b5a:	2110      	movs	r1, #16
 8001b5c:	4830      	ldr	r0, [pc, #192]	; (8001c20 <main+0x120>)
 8001b5e:	f002 fc1a 	bl	8004396 <HAL_DAC_Start>
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, sine_data_table, SINE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, square_data_table, SQUARE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, unitimpulse_data_table, UNITIMPULSE_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_data_table, SAW_DATA_SIZE, DAC_ALIGN_12B_R);
  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, saw_rev_data_table, SAW_REV_DATA_SIZE, DAC_ALIGN_12B_R);
  HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, triangle_data_table, TRIANGLE_DATA_SIZE, DAC_ALIGN_12B_R);
 8001b62:	2300      	movs	r3, #0
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	2378      	movs	r3, #120	; 0x78
 8001b68:	4a2e      	ldr	r2, [pc, #184]	; (8001c24 <main+0x124>)
 8001b6a:	2100      	movs	r1, #0
 8001b6c:	482e      	ldr	r0, [pc, #184]	; (8001c28 <main+0x128>)
 8001b6e:	f002 fc65 	bl	800443c <HAL_DAC_Start_DMA>

  //HAL_DAC_Start_DMA(&hdac2, DAC2_CHANNEL_1, trigger_input, TRIGGER_DATA_SIZE, DAC_ALIGN_12B_R);
#ifndef DISABLE_ALL_TIMERS
  // single clock to run all DAC channels. TODO add independent clocks
  HAL_TIM_Base_Start(&htim8);
 8001b72:	482e      	ldr	r0, [pc, #184]	; (8001c2c <main+0x12c>)
 8001b74:	f004 ffce 	bl	8006b14 <HAL_TIM_Base_Start>
#endif //DISABLE_ALL_TIMERS

  // DC bias inversion
  HAL_GPIO_WritePin(DCBIAS_INVERT_GPIO_Port, DCBIAS_INVERT_Pin, GPIO_PIN_SET);
 8001b78:	2201      	movs	r2, #1
 8001b7a:	2108      	movs	r1, #8
 8001b7c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001b80:	f003 fc4c 	bl	800541c <HAL_GPIO_WritePin>

  // PGA gain
  HAL_GPIO_WritePin(SG0_GPIO_Port, SG0_Pin, GPIO_PIN_SET);
 8001b84:	2201      	movs	r2, #1
 8001b86:	2101      	movs	r1, #1
 8001b88:	4829      	ldr	r0, [pc, #164]	; (8001c30 <main+0x130>)
 8001b8a:	f003 fc47 	bl	800541c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG1_GPIO_Port, SG1_Pin, GPIO_PIN_SET);
 8001b8e:	2201      	movs	r2, #1
 8001b90:	2120      	movs	r1, #32
 8001b92:	4828      	ldr	r0, [pc, #160]	; (8001c34 <main+0x134>)
 8001b94:	f003 fc42 	bl	800541c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SG2_GPIO_Port, SG2_Pin, GPIO_PIN_SET);
 8001b98:	2201      	movs	r2, #1
 8001b9a:	2110      	movs	r1, #16
 8001b9c:	4825      	ldr	r0, [pc, #148]	; (8001c34 <main+0x134>)
 8001b9e:	f003 fc3d 	bl	800541c <HAL_GPIO_WritePin>
  //HAL_TIM_Base_Start_IT(&htim17);
#endif	//DISABLE_ALL_TIMERS


// http://www.ti.com/lit/ds/symlink/ts5a3357.pdf
  HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin6
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001ba8:	4822      	ldr	r0, [pc, #136]	; (8001c34 <main+0x134>)
 8001baa:	f003 fc37 	bl	800541c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET);	// TS5A3357 Pin5
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001bb4:	481f      	ldr	r0, [pc, #124]	; (8001c34 <main+0x134>)
 8001bb6:	f003 fc31 	bl	800541c <HAL_GPIO_WritePin>

#ifdef TIM_TRIGGER_MODE
  // input capture on in TIM2 slave-mode TF1FP1

  // set HW switch to direct ext. trigger input to TIM pin
  HAL_GPIO_WritePin(TRIGMODE_GPIO_Port, TRIGMODE_Pin, GPIO_PIN_SET);
 8001bba:	2201      	movs	r2, #1
 8001bbc:	2108      	movs	r1, #8
 8001bbe:	481d      	ldr	r0, [pc, #116]	; (8001c34 <main+0x134>)
 8001bc0:	f003 fc2c 	bl	800541c <HAL_GPIO_WritePin>
  //HAL_GPIO_WritePin(TRIGMUX1_GPIO_Port, TRIGMUX1_Pin, GPIO_PIN_SET);	// TS5A3357 Pin6
  //HAL_GPIO_WritePin(TRIGMUX2_GPIO_Port, TRIGMUX2_Pin, GPIO_PIN_RESET); // TS5A3357 Pin5

  // clear slave mode select reg
  TIM2->SMCR &= ~(TIM_SMCR_SMS_0 | TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2);
 8001bc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bce:	f023 0307 	bic.w	r3, r3, #7
 8001bd2:	6093      	str	r3, [r2, #8]

  // slave mode
  //TIM2->SMCR |= TIM_SMCR_SMS_2;						// SLAVE MODE: RESET
  TIM2->SMCR |= TIM_SMCR_SMS_0 | TIM_SMCR_SMS_2;	// SLAVE MODE: GATED
 8001bd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001bd8:	689b      	ldr	r3, [r3, #8]
 8001bda:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bde:	f043 0305 	orr.w	r3, r3, #5
 8001be2:	6093      	str	r3, [r2, #8]
  //TIM2->SMCR |= TIM_SMCR_SMS_1 | TIM_SMCR_SMS_2;	// SLAVE MODE: TRIGGER

#ifndef DISABLE_ALL_TIMERS
  HAL_TIM_Base_Start_IT(&htim2);
 8001be4:	4814      	ldr	r0, [pc, #80]	; (8001c38 <main+0x138>)
 8001be6:	f004 ffc3 	bl	8006b70 <HAL_TIM_Base_Start_IT>



#ifndef DISABLE_ALL_TIMERS
  // encoder input
  HAL_TIM_Base_Start(&htim1);		// enable encoder timer
 8001bea:	4814      	ldr	r0, [pc, #80]	; (8001c3c <main+0x13c>)
 8001bec:	f004 ff92 	bl	8006b14 <HAL_TIM_Base_Start>
  //TIM1->DIER |= TIM_DIER_IDXIE;		// enable index interrupts

#endif	//DISABLE_ALL_TIMERS

  TIM6->PSC = 65535;
 8001bf0:	4b13      	ldr	r3, [pc, #76]	; (8001c40 <main+0x140>)
 8001bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bf6:	629a      	str	r2, [r3, #40]	; 0x28
  TIM6->ARR = 65535;
 8001bf8:	4b11      	ldr	r3, [pc, #68]	; (8001c40 <main+0x140>)
 8001bfa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bfe:	62da      	str	r2, [r3, #44]	; 0x2c



  // TFT lib enable
  DM_Init();
 8001c00:	f7fe fb5e 	bl	80002c0 <DM_Init>
  DM_PostInit();
 8001c04:	f7fe fb6a 	bl	80002dc <DM_PostInit>
  //DM_RegisterStrings();

  HAL_TIM_Base_Start_IT(&htim15);
 8001c08:	480e      	ldr	r0, [pc, #56]	; (8001c44 <main+0x144>)
 8001c0a:	f004 ffb1 	bl	8006b70 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start(&htim5);
 8001c0e:	480e      	ldr	r0, [pc, #56]	; (8001c48 <main+0x148>)
 8001c10:	f004 ff80 	bl	8006b14 <HAL_TIM_Base_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	EM_ProcessEvent();
 8001c14:	f7fe fe1c 	bl	8000850 <EM_ProcessEvent>
 8001c18:	e7fc      	b.n	8001c14 <main+0x114>
 8001c1a:	bf00      	nop
 8001c1c:	200003e4 	.word	0x200003e4
 8001c20:	20000d18 	.word	0x20000d18
 8001c24:	200007a4 	.word	0x200007a4
 8001c28:	20000d04 	.word	0x20000d04
 8001c2c:	20000e50 	.word	0x20000e50
 8001c30:	48000400 	.word	0x48000400
 8001c34:	48000800 	.word	0x48000800
 8001c38:	20000fcc 	.word	0x20000fcc
 8001c3c:	20000f80 	.word	0x20000f80
 8001c40:	40001000 	.word	0x40001000
 8001c44:	20000e9c 	.word	0x20000e9c
 8001c48:	20000f34 	.word	0x20000f34

08001c4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b0a8      	sub	sp, #160	; 0xa0
 8001c50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001c52:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c56:	2238      	movs	r2, #56	; 0x38
 8001c58:	2100      	movs	r1, #0
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f007 f958 	bl	8008f10 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001c60:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c64:	2200      	movs	r2, #0
 8001c66:	601a      	str	r2, [r3, #0]
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	609a      	str	r2, [r3, #8]
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001c70:	463b      	mov	r3, r7
 8001c72:	2254      	movs	r2, #84	; 0x54
 8001c74:	2100      	movs	r1, #0
 8001c76:	4618      	mov	r0, r3
 8001c78:	f007 f94a 	bl	8008f10 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001c7c:	2000      	movs	r0, #0
 8001c7e:	f003 fbe5 	bl	800544c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8001c82:	2322      	movs	r3, #34	; 0x22
 8001c84:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c8a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001c8c:	2340      	movs	r3, #64	; 0x40
 8001c8e:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8001c90:	2301      	movs	r3, #1
 8001c92:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c96:	2302      	movs	r3, #2
 8001c98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV2;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLN = 42;
 8001ca8:	232a      	movs	r3, #42	; 0x2a
 8001caa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8001cb4:	2304      	movs	r3, #4
 8001cb6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001cc0:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f003 fc65 	bl	8005594 <HAL_RCC_OscConfig>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d001      	beq.n	8001cd4 <SystemClock_Config+0x88>
  {
    Error_Handler();
 8001cd0:	f000 f82a 	bl	8001d28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001cd4:	230f      	movs	r3, #15
 8001cd6:	657b      	str	r3, [r7, #84]	; 0x54
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	667b      	str	r3, [r7, #100]	; 0x64

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 8001ce8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001cec:	2108      	movs	r1, #8
 8001cee:	4618      	mov	r0, r3
 8001cf0:	f003 ff68 	bl	8005bc4 <HAL_RCC_ClockConfig>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8001cfa:	f000 f815 	bl	8001d28 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC12;
 8001cfe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001d02:	603b      	str	r3, [r7, #0]
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8001d04:	2300      	movs	r3, #0
 8001d06:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001d08:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001d0c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d0e:	463b      	mov	r3, r7
 8001d10:	4618      	mov	r0, r3
 8001d12:	f004 f947 	bl	8005fa4 <HAL_RCCEx_PeriphCLKConfig>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d001      	beq.n	8001d20 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001d1c:	f000 f804 	bl	8001d28 <Error_Handler>
  }
}
 8001d20:	bf00      	nop
 8001d22:	37a0      	adds	r7, #160	; 0xa0
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr

08001d36 <LL_RNG_Enable>:
  * @rmtoll CR           RNGEN         LL_RNG_Enable
  * @param  RNGx RNG Instance
  * @retval None
  */
__STATIC_INLINE void LL_RNG_Enable(RNG_TypeDef *RNGx)
{
 8001d36:	b480      	push	{r7}
 8001d38:	b083      	sub	sp, #12
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
  SET_BIT(RNGx->CR, RNG_CR_RNGEN);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f043 0204 	orr.w	r2, r3, #4
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	601a      	str	r2, [r3, #0]
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
	...

08001d58 <LL_AHB2_GRP1_EnableClock>:
{
 8001d58:	b480      	push	{r7}
 8001d5a:	b085      	sub	sp, #20
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001d60:	4b08      	ldr	r3, [pc, #32]	; (8001d84 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001d62:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d64:	4907      	ldr	r1, [pc, #28]	; (8001d84 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001d6c:	4b05      	ldr	r3, [pc, #20]	; (8001d84 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001d6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	4013      	ands	r3, r2
 8001d74:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001d76:	68fb      	ldr	r3, [r7, #12]
}
 8001d78:	bf00      	nop
 8001d7a:	3714      	adds	r7, #20
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr
 8001d84:	40021000 	.word	0x40021000

08001d88 <MX_RNG_Init>:

/* USER CODE END 0 */

/* RNG init function */
void MX_RNG_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0

  /* Peripheral clock enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_RNG);
 8001d8c:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001d90:	f7ff ffe2 	bl	8001d58 <LL_AHB2_GRP1_EnableClock>

  LL_RNG_Enable(RNG);
 8001d94:	4802      	ldr	r0, [pc, #8]	; (8001da0 <MX_RNG_Init+0x18>)
 8001d96:	f7ff ffce 	bl	8001d36 <LL_RNG_Enable>

}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	50060800 	.word	0x50060800

08001da4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0

  hspi3.Instance = SPI3;
 8001da8:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <MX_SPI3_Init+0x74>)
 8001daa:	4a1c      	ldr	r2, [pc, #112]	; (8001e1c <MX_SPI3_Init+0x78>)
 8001dac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001dae:	4b1a      	ldr	r3, [pc, #104]	; (8001e18 <MX_SPI3_Init+0x74>)
 8001db0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001db4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001db6:	4b18      	ldr	r3, [pc, #96]	; (8001e18 <MX_SPI3_Init+0x74>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001dbc:	4b16      	ldr	r3, [pc, #88]	; (8001e18 <MX_SPI3_Init+0x74>)
 8001dbe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001dc2:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dc4:	4b14      	ldr	r3, [pc, #80]	; (8001e18 <MX_SPI3_Init+0x74>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dca:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <MX_SPI3_Init+0x74>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001dd0:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <MX_SPI3_Init+0x74>)
 8001dd2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dd6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001dd8:	4b0f      	ldr	r3, [pc, #60]	; (8001e18 <MX_SPI3_Init+0x74>)
 8001dda:	2210      	movs	r2, #16
 8001ddc:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dde:	4b0e      	ldr	r3, [pc, #56]	; (8001e18 <MX_SPI3_Init+0x74>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001de4:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <MX_SPI3_Init+0x74>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001dea:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <MX_SPI3_Init+0x74>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001df0:	4b09      	ldr	r3, [pc, #36]	; (8001e18 <MX_SPI3_Init+0x74>)
 8001df2:	2207      	movs	r2, #7
 8001df4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001df6:	4b08      	ldr	r3, [pc, #32]	; (8001e18 <MX_SPI3_Init+0x74>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <MX_SPI3_Init+0x74>)
 8001dfe:	2208      	movs	r2, #8
 8001e00:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8001e02:	4805      	ldr	r0, [pc, #20]	; (8001e18 <MX_SPI3_Init+0x74>)
 8001e04:	f004 fb1a 	bl	800643c <HAL_SPI_Init>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d001      	beq.n	8001e12 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001e0e:	f7ff ff8b 	bl	8001d28 <Error_Handler>
  }

}
 8001e12:	bf00      	nop
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	20000dec 	.word	0x20000dec
 8001e1c:	40003c00 	.word	0x40003c00

08001e20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08a      	sub	sp, #40	; 0x28
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 0314 	add.w	r3, r7, #20
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a17      	ldr	r2, [pc, #92]	; (8001e9c <HAL_SPI_MspInit+0x7c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d128      	bne.n	8001e94 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e42:	4b17      	ldr	r3, [pc, #92]	; (8001ea0 <HAL_SPI_MspInit+0x80>)
 8001e44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e46:	4a16      	ldr	r2, [pc, #88]	; (8001ea0 <HAL_SPI_MspInit+0x80>)
 8001e48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e4c:	6593      	str	r3, [r2, #88]	; 0x58
 8001e4e:	4b14      	ldr	r3, [pc, #80]	; (8001ea0 <HAL_SPI_MspInit+0x80>)
 8001e50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e56:	613b      	str	r3, [r7, #16]
 8001e58:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5a:	4b11      	ldr	r3, [pc, #68]	; (8001ea0 <HAL_SPI_MspInit+0x80>)
 8001e5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e5e:	4a10      	ldr	r2, [pc, #64]	; (8001ea0 <HAL_SPI_MspInit+0x80>)
 8001e60:	f043 0304 	orr.w	r3, r3, #4
 8001e64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e66:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <HAL_SPI_MspInit+0x80>)
 8001e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6a:	f003 0304 	and.w	r3, r3, #4
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration    
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001e72:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001e76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2300      	movs	r3, #0
 8001e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e84:	2306      	movs	r3, #6
 8001e86:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e88:	f107 0314 	add.w	r3, r7, #20
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	4805      	ldr	r0, [pc, #20]	; (8001ea4 <HAL_SPI_MspInit+0x84>)
 8001e90:	f003 f92a 	bl	80050e8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8001e94:	bf00      	nop
 8001e96:	3728      	adds	r7, #40	; 0x28
 8001e98:	46bd      	mov	sp, r7
 8001e9a:	bd80      	pop	{r7, pc}
 8001e9c:	40003c00 	.word	0x40003c00
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	48000800 	.word	0x48000800

08001ea8 <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001eac:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 8001eb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001eb6:	6093      	str	r3, [r2, #8]
}
 8001eb8:	bf00      	nop
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
 8001ec2:	bf00      	nop
 8001ec4:	40007000 	.word	0x40007000

08001ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ece:	4b0f      	ldr	r3, [pc, #60]	; (8001f0c <HAL_MspInit+0x44>)
 8001ed0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ed2:	4a0e      	ldr	r2, [pc, #56]	; (8001f0c <HAL_MspInit+0x44>)
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	6613      	str	r3, [r2, #96]	; 0x60
 8001eda:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <HAL_MspInit+0x44>)
 8001edc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ede:	f003 0301 	and.w	r3, r3, #1
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ee6:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <HAL_MspInit+0x44>)
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eea:	4a08      	ldr	r2, [pc, #32]	; (8001f0c <HAL_MspInit+0x44>)
 8001eec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef2:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <HAL_MspInit+0x44>)
 8001ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efa:	603b      	str	r3, [r7, #0]
 8001efc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8001efe:	f7ff ffd3 	bl	8001ea8 <LL_PWR_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f02:	bf00      	nop
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40021000 	.word	0x40021000

08001f10 <LL_EXTI_IsActiveFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_EXTI_IsActiveFlag_0_31(uint32_t ExtiLine)
{
 8001f10:	b480      	push	{r7}
 8001f12:	b083      	sub	sp, #12
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(EXTI->PR1, ExtiLine) == (ExtiLine)) ? 1UL : 0UL);
 8001f18:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <LL_EXTI_IsActiveFlag_0_31+0x28>)
 8001f1a:	695a      	ldr	r2, [r3, #20]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d101      	bne.n	8001f2a <LL_EXTI_IsActiveFlag_0_31+0x1a>
 8001f26:	2301      	movs	r3, #1
 8001f28:	e000      	b.n	8001f2c <LL_EXTI_IsActiveFlag_0_31+0x1c>
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	370c      	adds	r7, #12
 8001f30:	46bd      	mov	sp, r7
 8001f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f36:	4770      	bx	lr
 8001f38:	40010400 	.word	0x40010400

08001f3c <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8001f44:	4a04      	ldr	r2, [pc, #16]	; (8001f58 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6153      	str	r3, [r2, #20]
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	40010400 	.word	0x40010400

08001f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001f60:	bf00      	nop
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr

08001f6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f6e:	e7fe      	b.n	8001f6e <HardFault_Handler+0x4>

08001f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f74:	e7fe      	b.n	8001f74 <MemManage_Handler+0x4>

08001f76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f76:	b480      	push	{r7}
 8001f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f7a:	e7fe      	b.n	8001f7a <BusFault_Handler+0x4>

08001f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f80:	e7fe      	b.n	8001f80 <UsageFault_Handler+0x4>

08001f82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f82:	b480      	push	{r7}
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr

08001f9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f9e:	b480      	push	{r7}
 8001fa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr

08001fac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fb0:	f000 fd40 	bl	8002a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fb4:	bf00      	nop
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

//	if(HAL_GPIO_ReadPin(BTN3_EXTI0_GPIO_Port, BTN3_EXTI0_Pin))
//	{
		//snprintf(control_pressed, sizeof(control_pressed), "BTN3");
		EM_SetNewEvent(evBiasMenu);
 8001fbc:	2004      	movs	r0, #4
 8001fbe:	f7fe fef5 	bl	8000dac <EM_SetNewEvent>
 		//printf("BTN3_EXTI0_Pin\n");
//	}

  /* USER CODE END EXTI0_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_0) != RESET)
 8001fc2:	2001      	movs	r0, #1
 8001fc4:	f7ff ffa4 	bl	8001f10 <LL_EXTI_IsActiveFlag_0_31>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d002      	beq.n	8001fd4 <EXTI0_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_0);
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f7ff ffb4 	bl	8001f3c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_0 */
  }
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001fd4:	bf00      	nop
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0

//	if(HAL_GPIO_ReadPin(BTN4_EXTI1_GPIO_Port, BTN4_EXTI1_Pin))
//	{
		//snprintf(control_pressed, sizeof(control_pressed), "BTN4");
		//printf("BTN4_EXTI1_Pin\n");
		EM_SetNewEvent(evFreqMenu);
 8001fdc:	2002      	movs	r0, #2
 8001fde:	f7fe fee5 	bl	8000dac <EM_SetNewEvent>
//	}

  /* USER CODE END EXTI1_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_1) != RESET)
 8001fe2:	2002      	movs	r0, #2
 8001fe4:	f7ff ff94 	bl	8001f10 <LL_EXTI_IsActiveFlag_0_31>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d002      	beq.n	8001ff4 <EXTI1_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_1);
 8001fee:	2002      	movs	r0, #2
 8001ff0:	f7ff ffa4 	bl	8001f3c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_1 */
  }
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */


		//snprintf(control_pressed, sizeof(control_pressed), "ENC_BTN");
		//printf("ENC_EXTI2_Pin\n");
		EM_SetNewEvent(evEncoderPush);
 8001ffc:	2006      	movs	r0, #6
 8001ffe:	f7fe fed5 	bl	8000dac <EM_SetNewEvent>



  /* USER CODE END EXTI2_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_2) != RESET)
 8002002:	2004      	movs	r0, #4
 8002004:	f7ff ff84 	bl	8001f10 <LL_EXTI_IsActiveFlag_0_31>
 8002008:	4603      	mov	r3, r0
 800200a:	2b00      	cmp	r3, #0
 800200c:	d002      	beq.n	8002014 <EXTI2_IRQHandler+0x1c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_2);
 800200e:	2004      	movs	r0, #4
 8002010:	f7ff ff94 	bl	8001f3c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_2 */
  }
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}

08002018 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */
	//printf("Test\n");
	//printf("%lu\n", trigger_input[0]);
  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800201c:	4802      	ldr	r0, [pc, #8]	; (8002028 <DMA1_Channel1_IRQHandler+0x10>)
 800201e:	f002 ff13 	bl	8004e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	20000c80 	.word	0x20000c80

0800202c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1_ch1);
 8002030:	4802      	ldr	r0, [pc, #8]	; (800203c <DMA1_Channel2_IRQHandler+0x10>)
 8002032:	f002 ff09 	bl	8004e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	20000d2c 	.word	0x20000d2c

08002040 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2_ch1);
 8002044:	4802      	ldr	r0, [pc, #8]	; (8002050 <DMA1_Channel3_IRQHandler+0x10>)
 8002046:	f002 feff 	bl	8004e48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20000d8c 	.word	0x20000d8c

08002054 <TIM1_BRK_TIM15_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM15 global interrupt.
  */
void TIM1_BRK_TIM15_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */
	DM_UpdateDisplay();
 8002058:	f7fe f95e 	bl	8000318 <DM_UpdateDisplay>

	if((TIM1->CNT < last_enc_value) || (TIM1->CNT > last_enc_value))
 800205c:	4b10      	ldr	r3, [pc, #64]	; (80020a0 <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 800205e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002060:	4a10      	ldr	r2, [pc, #64]	; (80020a4 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 8002062:	8812      	ldrh	r2, [r2, #0]
 8002064:	4293      	cmp	r3, r2
 8002066:	d305      	bcc.n	8002074 <TIM1_BRK_TIM15_IRQHandler+0x20>
 8002068:	4b0d      	ldr	r3, [pc, #52]	; (80020a0 <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	4a0d      	ldr	r2, [pc, #52]	; (80020a4 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 800206e:	8812      	ldrh	r2, [r2, #0]
 8002070:	4293      	cmp	r3, r2
 8002072:	d907      	bls.n	8002084 <TIM1_BRK_TIM15_IRQHandler+0x30>
	{
		EM_SetEncoderValue(TIM1->CNT);
 8002074:	4b0a      	ldr	r3, [pc, #40]	; (80020a0 <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe febf 	bl	8000dfc <EM_SetEncoderValue>
		EM_SetNewEvent(evEncoderSet);
 800207e:	2005      	movs	r0, #5
 8002080:	f7fe fe94 	bl	8000dac <EM_SetNewEvent>

	}
	last_enc_value = TIM1->CNT;
 8002084:	4b06      	ldr	r3, [pc, #24]	; (80020a0 <TIM1_BRK_TIM15_IRQHandler+0x4c>)
 8002086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002088:	b29a      	uxth	r2, r3
 800208a:	4b06      	ldr	r3, [pc, #24]	; (80020a4 <TIM1_BRK_TIM15_IRQHandler+0x50>)
 800208c:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800208e:	4806      	ldr	r0, [pc, #24]	; (80020a8 <TIM1_BRK_TIM15_IRQHandler+0x54>)
 8002090:	f004 fe79 	bl	8006d86 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim15);
 8002094:	4805      	ldr	r0, [pc, #20]	; (80020ac <TIM1_BRK_TIM15_IRQHandler+0x58>)
 8002096:	f004 fe76 	bl	8006d86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40012c00 	.word	0x40012c00
 80020a4:	20000bf8 	.word	0x20000bf8
 80020a8:	20000f80 	.word	0x20000f80
 80020ac:	20000e9c 	.word	0x20000e9c

080020b0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */
	snprintf(control_pressed, sizeof(control_pressed), " ");
 80020b4:	4a05      	ldr	r2, [pc, #20]	; (80020cc <TIM1_UP_TIM16_IRQHandler+0x1c>)
 80020b6:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <TIM1_UP_TIM16_IRQHandler+0x20>)
 80020b8:	881b      	ldrh	r3, [r3, #0]
 80020ba:	8013      	strh	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020bc:	4805      	ldr	r0, [pc, #20]	; (80020d4 <TIM1_UP_TIM16_IRQHandler+0x24>)
 80020be:	f004 fe62 	bl	8006d86 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim16);
 80020c2:	4805      	ldr	r0, [pc, #20]	; (80020d8 <TIM1_UP_TIM16_IRQHandler+0x28>)
 80020c4:	f004 fe5f 	bl	8006d86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80020c8:	bf00      	nop
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000c08 	.word	0x20000c08
 80020d0:	0800a0b4 	.word	0x0800a0b4
 80020d4:	20000f80 	.word	0x20000f80
 80020d8:	20001018 	.word	0x20001018

080020dc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */
	update_dc_bias_sweep();
 80020e0:	f7ff f962 	bl	80013a8 <update_dc_bias_sweep>




  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020e4:	4803      	ldr	r0, [pc, #12]	; (80020f4 <TIM1_TRG_COM_TIM17_IRQHandler+0x18>)
 80020e6:	f004 fe4e 	bl	8006d86 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim17);
 80020ea:	4803      	ldr	r0, [pc, #12]	; (80020f8 <TIM1_TRG_COM_TIM17_IRQHandler+0x1c>)
 80020ec:	f004 fe4b 	bl	8006d86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	20000f80 	.word	0x20000f80
 80020f8:	20000ee8 	.word	0x20000ee8

080020fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002100:	4802      	ldr	r0, [pc, #8]	; (800210c <TIM2_IRQHandler+0x10>)
 8002102:	f004 fe40 	bl	8006d86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002106:	bf00      	nop
 8002108:	bd80      	pop	{r7, pc}
 800210a:	bf00      	nop
 800210c:	20000fcc 	.word	0x20000fcc

08002110 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	if(HAL_GPIO_ReadPin(BTN1_EXTI14_GPIO_Port, BTN1_EXTI14_Pin))
 8002114:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002118:	4815      	ldr	r0, [pc, #84]	; (8002170 <EXTI15_10_IRQHandler+0x60>)
 800211a:	f003 f967 	bl	80053ec <HAL_GPIO_ReadPin>
 800211e:	4603      	mov	r3, r0
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <EXTI15_10_IRQHandler+0x1a>
	{
		EM_SetNewEvent(evGainMenu);
 8002124:	2003      	movs	r0, #3
 8002126:	f7fe fe41 	bl	8000dac <EM_SetNewEvent>
		//snprintf(control_pressed, sizeof(control_pressed), "BTN1");
		//printf("BTN1_EXTI14_Pin\n");
	}
	if(HAL_GPIO_ReadPin(BTN2_EXTI15_GPIO_Port, BTN2_EXTI15_Pin))
 800212a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800212e:	4810      	ldr	r0, [pc, #64]	; (8002170 <EXTI15_10_IRQHandler+0x60>)
 8002130:	f003 f95c 	bl	80053ec <HAL_GPIO_ReadPin>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d002      	beq.n	8002140 <EXTI15_10_IRQHandler+0x30>
	{
		EM_SetNewEvent(evFuncMenu);
 800213a:	2001      	movs	r0, #1
 800213c:	f7fe fe36 	bl	8000dac <EM_SetNewEvent>
		//snprintf(control_pressed, sizeof(control_pressed), "BTN2");
		//printf("BTN2_EXTI15_Pin\n");
	}

  /* USER CODE END EXTI15_10_IRQn 0 */
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_14) != RESET)
 8002140:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002144:	f7ff fee4 	bl	8001f10 <LL_EXTI_IsActiveFlag_0_31>
 8002148:	4603      	mov	r3, r0
 800214a:	2b00      	cmp	r3, #0
 800214c:	d003      	beq.n	8002156 <EXTI15_10_IRQHandler+0x46>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_14);
 800214e:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002152:	f7ff fef3 	bl	8001f3c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE BEGIN LL_EXTI_LINE_14 */
    
    /* USER CODE END LL_EXTI_LINE_14 */
  }
  if (LL_EXTI_IsActiveFlag_0_31(LL_EXTI_LINE_15) != RESET)
 8002156:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800215a:	f7ff fed9 	bl	8001f10 <LL_EXTI_IsActiveFlag_0_31>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d003      	beq.n	800216c <EXTI15_10_IRQHandler+0x5c>
  {
    LL_EXTI_ClearFlag_0_31(LL_EXTI_LINE_15);
 8002164:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002168:	f7ff fee8 	bl	8001f3c <LL_EXTI_ClearFlag_0_31>
    /* USER CODE END LL_EXTI_LINE_15 */
  }
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800216c:	bf00      	nop
 800216e:	bd80      	pop	{r7, pc}
 8002170:	48000800 	.word	0x48000800

08002174 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b086      	sub	sp, #24
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002180:	2300      	movs	r3, #0
 8002182:	617b      	str	r3, [r7, #20]
 8002184:	e00a      	b.n	800219c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002186:	f3af 8000 	nop.w
 800218a:	4601      	mov	r1, r0
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	1c5a      	adds	r2, r3, #1
 8002190:	60ba      	str	r2, [r7, #8]
 8002192:	b2ca      	uxtb	r2, r1
 8002194:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	3301      	adds	r3, #1
 800219a:	617b      	str	r3, [r7, #20]
 800219c:	697a      	ldr	r2, [r7, #20]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	dbf0      	blt.n	8002186 <_read+0x12>
	}

return len;
 80021a4:	687b      	ldr	r3, [r7, #4]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <_close>:
	}
	return len;
}

int _close(int file)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
	return -1;
 80021b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	370c      	adds	r7, #12
 80021be:	46bd      	mov	sp, r7
 80021c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c4:	4770      	bx	lr

080021c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021c6:	b480      	push	{r7}
 80021c8:	b083      	sub	sp, #12
 80021ca:	af00      	add	r7, sp, #0
 80021cc:	6078      	str	r0, [r7, #4]
 80021ce:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80021d6:	605a      	str	r2, [r3, #4]
	return 0;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	370c      	adds	r7, #12
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr

080021e6 <_isatty>:

int _isatty(int file)
{
 80021e6:	b480      	push	{r7}
 80021e8:	b083      	sub	sp, #12
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
	return 1;
 80021ee:	2301      	movs	r3, #1
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	370c      	adds	r7, #12
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr

080021fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
	return 0;
 8002208:	2300      	movs	r3, #0
}
 800220a:	4618      	mov	r0, r3
 800220c:	3714      	adds	r7, #20
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
	...

08002218 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002220:	4b11      	ldr	r3, [pc, #68]	; (8002268 <_sbrk+0x50>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d102      	bne.n	800222e <_sbrk+0x16>
		heap_end = &end;
 8002228:	4b0f      	ldr	r3, [pc, #60]	; (8002268 <_sbrk+0x50>)
 800222a:	4a10      	ldr	r2, [pc, #64]	; (800226c <_sbrk+0x54>)
 800222c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800222e:	4b0e      	ldr	r3, [pc, #56]	; (8002268 <_sbrk+0x50>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002234:	4b0c      	ldr	r3, [pc, #48]	; (8002268 <_sbrk+0x50>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	4413      	add	r3, r2
 800223c:	466a      	mov	r2, sp
 800223e:	4293      	cmp	r3, r2
 8002240:	d907      	bls.n	8002252 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002242:	f006 fe3b 	bl	8008ebc <__errno>
 8002246:	4602      	mov	r2, r0
 8002248:	230c      	movs	r3, #12
 800224a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800224c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002250:	e006      	b.n	8002260 <_sbrk+0x48>
	}

	heap_end += incr;
 8002252:	4b05      	ldr	r3, [pc, #20]	; (8002268 <_sbrk+0x50>)
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	4413      	add	r3, r2
 800225a:	4a03      	ldr	r2, [pc, #12]	; (8002268 <_sbrk+0x50>)
 800225c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800225e:	68fb      	ldr	r3, [r7, #12]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	20000bfc 	.word	0x20000bfc
 800226c:	20001070 	.word	0x20001070

08002270 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002274:	4b08      	ldr	r3, [pc, #32]	; (8002298 <SystemInit+0x28>)
 8002276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227a:	4a07      	ldr	r2, [pc, #28]	; (8002298 <SystemInit+0x28>)
 800227c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002280:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002284:	4b04      	ldr	r3, [pc, #16]	; (8002298 <SystemInit+0x28>)
 8002286:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800228a:	609a      	str	r2, [r3, #8]
#endif
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	e000ed00 	.word	0xe000ed00

0800229c <MX_TIM1_Init>:
TIM_HandleTypeDef htim16;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b09a      	sub	sp, #104	; 0x68
 80022a0:	af00      	add	r7, sp, #0
  TIM_Encoder_InitTypeDef sConfig = {0};
 80022a2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80022a6:	2224      	movs	r2, #36	; 0x24
 80022a8:	2100      	movs	r1, #0
 80022aa:	4618      	mov	r0, r3
 80022ac:	f006 fe30 	bl	8008f10 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
 80022ba:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80022bc:	1d3b      	adds	r3, r7, #4
 80022be:	2234      	movs	r2, #52	; 0x34
 80022c0:	2100      	movs	r1, #0
 80022c2:	4618      	mov	r0, r3
 80022c4:	f006 fe24 	bl	8008f10 <memset>

  htim1.Instance = TIM1;
 80022c8:	4b2a      	ldr	r3, [pc, #168]	; (8002374 <MX_TIM1_Init+0xd8>)
 80022ca:	4a2b      	ldr	r2, [pc, #172]	; (8002378 <MX_TIM1_Init+0xdc>)
 80022cc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80022ce:	4b29      	ldr	r3, [pc, #164]	; (8002374 <MX_TIM1_Init+0xd8>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED2;
 80022d4:	4b27      	ldr	r3, [pc, #156]	; (8002374 <MX_TIM1_Init+0xd8>)
 80022d6:	2240      	movs	r2, #64	; 0x40
 80022d8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1024;
 80022da:	4b26      	ldr	r3, [pc, #152]	; (8002374 <MX_TIM1_Init+0xd8>)
 80022dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80022e0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022e2:	4b24      	ldr	r3, [pc, #144]	; (8002374 <MX_TIM1_Init+0xd8>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022e8:	4b22      	ldr	r3, [pc, #136]	; (8002374 <MX_TIM1_Init+0xd8>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ee:	4b21      	ldr	r3, [pc, #132]	; (8002374 <MX_TIM1_Init+0xd8>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80022f4:	2303      	movs	r3, #3
 80022f6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022f8:	2300      	movs	r3, #0
 80022fa:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022fc:	2301      	movs	r3, #1
 80022fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8002300:	2300      	movs	r3, #0
 8002302:	653b      	str	r3, [r7, #80]	; 0x50
  sConfig.IC1Filter = 0;
 8002304:	2300      	movs	r3, #0
 8002306:	657b      	str	r3, [r7, #84]	; 0x54
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002308:	2300      	movs	r3, #0
 800230a:	65bb      	str	r3, [r7, #88]	; 0x58
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800230c:	2301      	movs	r3, #1
 800230e:	65fb      	str	r3, [r7, #92]	; 0x5c
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8002310:	2300      	movs	r3, #0
 8002312:	663b      	str	r3, [r7, #96]	; 0x60
  sConfig.IC2Filter = 0;
 8002314:	2300      	movs	r3, #0
 8002316:	667b      	str	r3, [r7, #100]	; 0x64
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8002318:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800231c:	4619      	mov	r1, r3
 800231e:	4815      	ldr	r0, [pc, #84]	; (8002374 <MX_TIM1_Init+0xd8>)
 8002320:	f004 fc8b 	bl	8006c3a <HAL_TIM_Encoder_Init>
 8002324:	4603      	mov	r3, r0
 8002326:	2b00      	cmp	r3, #0
 8002328:	d001      	beq.n	800232e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800232a:	f7ff fcfd 	bl	8001d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800232e:	2300      	movs	r3, #0
 8002330:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002332:	2300      	movs	r3, #0
 8002334:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002336:	2300      	movs	r3, #0
 8002338:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800233a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800233e:	4619      	mov	r1, r3
 8002340:	480c      	ldr	r0, [pc, #48]	; (8002374 <MX_TIM1_Init+0xd8>)
 8002342:	f005 fa03 	bl	800774c <HAL_TIMEx_MasterConfigSynchronization>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d001      	beq.n	8002350 <MX_TIM1_Init+0xb4>
  {
    Error_Handler();
 800234c:	f7ff fcec 	bl	8001d28 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002350:	2300      	movs	r3, #0
 8002352:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002354:	2300      	movs	r3, #0
 8002356:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002358:	1d3b      	adds	r3, r7, #4
 800235a:	4619      	mov	r1, r3
 800235c:	4805      	ldr	r0, [pc, #20]	; (8002374 <MX_TIM1_Init+0xd8>)
 800235e:	f005 fa8b 	bl	8007878 <HAL_TIMEx_ConfigBreakDeadTime>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d001      	beq.n	800236c <MX_TIM1_Init+0xd0>
  {
    Error_Handler();
 8002368:	f7ff fcde 	bl	8001d28 <Error_Handler>
  }

}
 800236c:	bf00      	nop
 800236e:	3768      	adds	r7, #104	; 0x68
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	20000f80 	.word	0x20000f80
 8002378:	40012c00 	.word	0x40012c00

0800237c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b08c      	sub	sp, #48	; 0x30
 8002380:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002382:	f107 0320 	add.w	r3, r7, #32
 8002386:	2200      	movs	r2, #0
 8002388:	601a      	str	r2, [r3, #0]
 800238a:	605a      	str	r2, [r3, #4]
 800238c:	609a      	str	r2, [r3, #8]
 800238e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8002390:	f107 030c 	add.w	r3, r7, #12
 8002394:	2200      	movs	r2, #0
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	605a      	str	r2, [r3, #4]
 800239a:	609a      	str	r2, [r3, #8]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80023a0:	463b      	mov	r3, r7
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	609a      	str	r2, [r3, #8]

  htim2.Instance = TIM2;
 80023aa:	4b28      	ldr	r3, [pc, #160]	; (800244c <MX_TIM2_Init+0xd0>)
 80023ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80023b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 80023b2:	4b26      	ldr	r3, [pc, #152]	; (800244c <MX_TIM2_Init+0xd0>)
 80023b4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80023b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023ba:	4b24      	ldr	r3, [pc, #144]	; (800244c <MX_TIM2_Init+0xd0>)
 80023bc:	2200      	movs	r2, #0
 80023be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1024;
 80023c0:	4b22      	ldr	r3, [pc, #136]	; (800244c <MX_TIM2_Init+0xd0>)
 80023c2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80023c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023c8:	4b20      	ldr	r3, [pc, #128]	; (800244c <MX_TIM2_Init+0xd0>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023ce:	4b1f      	ldr	r3, [pc, #124]	; (800244c <MX_TIM2_Init+0xd0>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80023d4:	481d      	ldr	r0, [pc, #116]	; (800244c <MX_TIM2_Init+0xd0>)
 80023d6:	f004 fb46 	bl	8006a66 <HAL_TIM_Base_Init>
 80023da:	4603      	mov	r3, r0
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80023e0:	f7ff fca2 	bl	8001d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80023e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80023e8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80023ea:	f107 0320 	add.w	r3, r7, #32
 80023ee:	4619      	mov	r1, r3
 80023f0:	4816      	ldr	r0, [pc, #88]	; (800244c <MX_TIM2_Init+0xd0>)
 80023f2:	f004 fe47 	bl	8007084 <HAL_TIM_ConfigClockSource>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d001      	beq.n	8002400 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80023fc:	f7ff fc94 	bl	8001d28 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_GATED;
 8002400:	2305      	movs	r3, #5
 8002402:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 8002404:	2350      	movs	r3, #80	; 0x50
 8002406:	613b      	str	r3, [r7, #16]
  sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 8002408:	2300      	movs	r3, #0
 800240a:	617b      	str	r3, [r7, #20]
  sSlaveConfig.TriggerFilter = 0;
 800240c:	2300      	movs	r3, #0
 800240e:	61fb      	str	r3, [r7, #28]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8002410:	f107 030c 	add.w	r3, r7, #12
 8002414:	4619      	mov	r1, r3
 8002416:	480d      	ldr	r0, [pc, #52]	; (800244c <MX_TIM2_Init+0xd0>)
 8002418:	f004 ff24 	bl	8007264 <HAL_TIM_SlaveConfigSynchro>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d001      	beq.n	8002426 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8002422:	f7ff fc81 	bl	8001d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002426:	2300      	movs	r3, #0
 8002428:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800242a:	2300      	movs	r3, #0
 800242c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800242e:	463b      	mov	r3, r7
 8002430:	4619      	mov	r1, r3
 8002432:	4806      	ldr	r0, [pc, #24]	; (800244c <MX_TIM2_Init+0xd0>)
 8002434:	f005 f98a 	bl	800774c <HAL_TIMEx_MasterConfigSynchronization>
 8002438:	4603      	mov	r3, r0
 800243a:	2b00      	cmp	r3, #0
 800243c:	d001      	beq.n	8002442 <MX_TIM2_Init+0xc6>
  {
    Error_Handler();
 800243e:	f7ff fc73 	bl	8001d28 <Error_Handler>
  }

}
 8002442:	bf00      	nop
 8002444:	3730      	adds	r7, #48	; 0x30
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	20000fcc 	.word	0x20000fcc

08002450 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002456:	f107 0310 	add.w	r3, r7, #16
 800245a:	2200      	movs	r2, #0
 800245c:	601a      	str	r2, [r3, #0]
 800245e:	605a      	str	r2, [r3, #4]
 8002460:	609a      	str	r2, [r3, #8]
 8002462:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002464:	1d3b      	adds	r3, r7, #4
 8002466:	2200      	movs	r2, #0
 8002468:	601a      	str	r2, [r3, #0]
 800246a:	605a      	str	r2, [r3, #4]
 800246c:	609a      	str	r2, [r3, #8]

  htim5.Instance = TIM5;
 800246e:	4b1e      	ldr	r3, [pc, #120]	; (80024e8 <MX_TIM5_Init+0x98>)
 8002470:	4a1e      	ldr	r2, [pc, #120]	; (80024ec <MX_TIM5_Init+0x9c>)
 8002472:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 65535;
 8002474:	4b1c      	ldr	r3, [pc, #112]	; (80024e8 <MX_TIM5_Init+0x98>)
 8002476:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800247a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800247c:	4b1a      	ldr	r3, [pc, #104]	; (80024e8 <MX_TIM5_Init+0x98>)
 800247e:	2200      	movs	r2, #0
 8002480:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 8002482:	4b19      	ldr	r3, [pc, #100]	; (80024e8 <MX_TIM5_Init+0x98>)
 8002484:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002488:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 800248a:	4b17      	ldr	r3, [pc, #92]	; (80024e8 <MX_TIM5_Init+0x98>)
 800248c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002490:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002492:	4b15      	ldr	r3, [pc, #84]	; (80024e8 <MX_TIM5_Init+0x98>)
 8002494:	2200      	movs	r2, #0
 8002496:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002498:	4813      	ldr	r0, [pc, #76]	; (80024e8 <MX_TIM5_Init+0x98>)
 800249a:	f004 fae4 	bl	8006a66 <HAL_TIM_Base_Init>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d001      	beq.n	80024a8 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80024a4:	f7ff fc40 	bl	8001d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024ac:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80024ae:	f107 0310 	add.w	r3, r7, #16
 80024b2:	4619      	mov	r1, r3
 80024b4:	480c      	ldr	r0, [pc, #48]	; (80024e8 <MX_TIM5_Init+0x98>)
 80024b6:	f004 fde5 	bl	8007084 <HAL_TIM_ConfigClockSource>
 80024ba:	4603      	mov	r3, r0
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d001      	beq.n	80024c4 <MX_TIM5_Init+0x74>
  {
    Error_Handler();
 80024c0:	f7ff fc32 	bl	8001d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80024c4:	2300      	movs	r3, #0
 80024c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024c8:	2300      	movs	r3, #0
 80024ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80024cc:	1d3b      	adds	r3, r7, #4
 80024ce:	4619      	mov	r1, r3
 80024d0:	4805      	ldr	r0, [pc, #20]	; (80024e8 <MX_TIM5_Init+0x98>)
 80024d2:	f005 f93b 	bl	800774c <HAL_TIMEx_MasterConfigSynchronization>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d001      	beq.n	80024e0 <MX_TIM5_Init+0x90>
  {
    Error_Handler();
 80024dc:	f7ff fc24 	bl	8001d28 <Error_Handler>
  }

}
 80024e0:	bf00      	nop
 80024e2:	3720      	adds	r7, #32
 80024e4:	46bd      	mov	sp, r7
 80024e6:	bd80      	pop	{r7, pc}
 80024e8:	20000f34 	.word	0x20000f34
 80024ec:	40000c00 	.word	0x40000c00

080024f0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b094      	sub	sp, #80	; 0x50
 80024f4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80024f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80024fa:	2200      	movs	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	609a      	str	r2, [r3, #8]
 8002502:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002504:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002510:	463b      	mov	r3, r7
 8002512:	2234      	movs	r2, #52	; 0x34
 8002514:	2100      	movs	r1, #0
 8002516:	4618      	mov	r0, r3
 8002518:	f006 fcfa 	bl	8008f10 <memset>

  htim8.Instance = TIM8;
 800251c:	4b26      	ldr	r3, [pc, #152]	; (80025b8 <MX_TIM8_Init+0xc8>)
 800251e:	4a27      	ldr	r2, [pc, #156]	; (80025bc <MX_TIM8_Init+0xcc>)
 8002520:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002522:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <MX_TIM8_Init+0xc8>)
 8002524:	2200      	movs	r2, #0
 8002526:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002528:	4b23      	ldr	r3, [pc, #140]	; (80025b8 <MX_TIM8_Init+0xc8>)
 800252a:	2200      	movs	r2, #0
 800252c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1;
 800252e:	4b22      	ldr	r3, [pc, #136]	; (80025b8 <MX_TIM8_Init+0xc8>)
 8002530:	2201      	movs	r2, #1
 8002532:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002534:	4b20      	ldr	r3, [pc, #128]	; (80025b8 <MX_TIM8_Init+0xc8>)
 8002536:	2200      	movs	r2, #0
 8002538:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800253a:	4b1f      	ldr	r3, [pc, #124]	; (80025b8 <MX_TIM8_Init+0xc8>)
 800253c:	2200      	movs	r2, #0
 800253e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002540:	4b1d      	ldr	r3, [pc, #116]	; (80025b8 <MX_TIM8_Init+0xc8>)
 8002542:	2200      	movs	r2, #0
 8002544:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002546:	481c      	ldr	r0, [pc, #112]	; (80025b8 <MX_TIM8_Init+0xc8>)
 8002548:	f004 fa8d 	bl	8006a66 <HAL_TIM_Base_Init>
 800254c:	4603      	mov	r3, r0
 800254e:	2b00      	cmp	r3, #0
 8002550:	d001      	beq.n	8002556 <MX_TIM8_Init+0x66>
  {
    Error_Handler();
 8002552:	f7ff fbe9 	bl	8001d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002556:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800255a:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800255c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002560:	4619      	mov	r1, r3
 8002562:	4815      	ldr	r0, [pc, #84]	; (80025b8 <MX_TIM8_Init+0xc8>)
 8002564:	f004 fd8e 	bl	8007084 <HAL_TIM_ConfigClockSource>
 8002568:	4603      	mov	r3, r0
 800256a:	2b00      	cmp	r3, #0
 800256c:	d001      	beq.n	8002572 <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 800256e:	f7ff fbdb 	bl	8001d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002572:	2320      	movs	r3, #32
 8002574:	637b      	str	r3, [r7, #52]	; 0x34
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002576:	2300      	movs	r3, #0
 8002578:	63bb      	str	r3, [r7, #56]	; 0x38
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800257a:	2300      	movs	r3, #0
 800257c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800257e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002582:	4619      	mov	r1, r3
 8002584:	480c      	ldr	r0, [pc, #48]	; (80025b8 <MX_TIM8_Init+0xc8>)
 8002586:	f005 f8e1 	bl	800774c <HAL_TIMEx_MasterConfigSynchronization>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8002590:	f7ff fbca 	bl	8001d28 <Error_Handler>
  }
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8002594:	2300      	movs	r3, #0
 8002596:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8002598:	2300      	movs	r3, #0
 800259a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800259c:	463b      	mov	r3, r7
 800259e:	4619      	mov	r1, r3
 80025a0:	4805      	ldr	r0, [pc, #20]	; (80025b8 <MX_TIM8_Init+0xc8>)
 80025a2:	f005 f969 	bl	8007878 <HAL_TIMEx_ConfigBreakDeadTime>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <MX_TIM8_Init+0xc0>
  {
    Error_Handler();
 80025ac:	f7ff fbbc 	bl	8001d28 <Error_Handler>
  }

}
 80025b0:	bf00      	nop
 80025b2:	3750      	adds	r7, #80	; 0x50
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	20000e50 	.word	0x20000e50
 80025bc:	40013400 	.word	0x40013400

080025c0 <MX_TIM15_Init>:
/* TIM15 init function */
void MX_TIM15_Init(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b088      	sub	sp, #32
 80025c4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80025c6:	f107 0310 	add.w	r3, r7, #16
 80025ca:	2200      	movs	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
 80025ce:	605a      	str	r2, [r3, #4]
 80025d0:	609a      	str	r2, [r3, #8]
 80025d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80025d4:	1d3b      	adds	r3, r7, #4
 80025d6:	2200      	movs	r2, #0
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	605a      	str	r2, [r3, #4]
 80025dc:	609a      	str	r2, [r3, #8]

  htim15.Instance = TIM15;
 80025de:	4b1f      	ldr	r3, [pc, #124]	; (800265c <MX_TIM15_Init+0x9c>)
 80025e0:	4a1f      	ldr	r2, [pc, #124]	; (8002660 <MX_TIM15_Init+0xa0>)
 80025e2:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 1024;
 80025e4:	4b1d      	ldr	r3, [pc, #116]	; (800265c <MX_TIM15_Init+0x9c>)
 80025e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025ea:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 80025ec:	4b1b      	ldr	r3, [pc, #108]	; (800265c <MX_TIM15_Init+0x9c>)
 80025ee:	2200      	movs	r2, #0
 80025f0:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 1024;
 80025f2:	4b1a      	ldr	r3, [pc, #104]	; (800265c <MX_TIM15_Init+0x9c>)
 80025f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025f8:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80025fa:	4b18      	ldr	r3, [pc, #96]	; (800265c <MX_TIM15_Init+0x9c>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8002600:	4b16      	ldr	r3, [pc, #88]	; (800265c <MX_TIM15_Init+0x9c>)
 8002602:	2200      	movs	r2, #0
 8002604:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002606:	4b15      	ldr	r3, [pc, #84]	; (800265c <MX_TIM15_Init+0x9c>)
 8002608:	2200      	movs	r2, #0
 800260a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 800260c:	4813      	ldr	r0, [pc, #76]	; (800265c <MX_TIM15_Init+0x9c>)
 800260e:	f004 fa2a 	bl	8006a66 <HAL_TIM_Base_Init>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <MX_TIM15_Init+0x5c>
  {
    Error_Handler();
 8002618:	f7ff fb86 	bl	8001d28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800261c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002620:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK)
 8002622:	f107 0310 	add.w	r3, r7, #16
 8002626:	4619      	mov	r1, r3
 8002628:	480c      	ldr	r0, [pc, #48]	; (800265c <MX_TIM15_Init+0x9c>)
 800262a:	f004 fd2b 	bl	8007084 <HAL_TIM_ConfigClockSource>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d001      	beq.n	8002638 <MX_TIM15_Init+0x78>
  {
    Error_Handler();
 8002634:	f7ff fb78 	bl	8001d28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002638:	2300      	movs	r3, #0
 800263a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800263c:	2300      	movs	r3, #0
 800263e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8002640:	1d3b      	adds	r3, r7, #4
 8002642:	4619      	mov	r1, r3
 8002644:	4805      	ldr	r0, [pc, #20]	; (800265c <MX_TIM15_Init+0x9c>)
 8002646:	f005 f881 	bl	800774c <HAL_TIMEx_MasterConfigSynchronization>
 800264a:	4603      	mov	r3, r0
 800264c:	2b00      	cmp	r3, #0
 800264e:	d001      	beq.n	8002654 <MX_TIM15_Init+0x94>
  {
    Error_Handler();
 8002650:	f7ff fb6a 	bl	8001d28 <Error_Handler>
  }

}
 8002654:	bf00      	nop
 8002656:	3720      	adds	r7, #32
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	20000e9c 	.word	0x20000e9c
 8002660:	40014000 	.word	0x40014000

08002664 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0

  htim16.Instance = TIM16;
 8002668:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <MX_TIM16_Init+0x44>)
 800266a:	4a10      	ldr	r2, [pc, #64]	; (80026ac <MX_TIM16_Init+0x48>)
 800266c:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 800266e:	4b0e      	ldr	r3, [pc, #56]	; (80026a8 <MX_TIM16_Init+0x44>)
 8002670:	2200      	movs	r2, #0
 8002672:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <MX_TIM16_Init+0x44>)
 8002676:	2200      	movs	r2, #0
 8002678:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 8191;
 800267a:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <MX_TIM16_Init+0x44>)
 800267c:	f641 72ff 	movw	r2, #8191	; 0x1fff
 8002680:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002682:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <MX_TIM16_Init+0x44>)
 8002684:	2200      	movs	r2, #0
 8002686:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8002688:	4b07      	ldr	r3, [pc, #28]	; (80026a8 <MX_TIM16_Init+0x44>)
 800268a:	2200      	movs	r2, #0
 800268c:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800268e:	4b06      	ldr	r3, [pc, #24]	; (80026a8 <MX_TIM16_Init+0x44>)
 8002690:	2200      	movs	r2, #0
 8002692:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8002694:	4804      	ldr	r0, [pc, #16]	; (80026a8 <MX_TIM16_Init+0x44>)
 8002696:	f004 f9e6 	bl	8006a66 <HAL_TIM_Base_Init>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80026a0:	f7ff fb42 	bl	8001d28 <Error_Handler>
  }

}
 80026a4:	bf00      	nop
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	20001018 	.word	0x20001018
 80026ac:	40014400 	.word	0x40014400

080026b0 <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	af00      	add	r7, sp, #0

  htim17.Instance = TIM17;
 80026b4:	4b0f      	ldr	r3, [pc, #60]	; (80026f4 <MX_TIM17_Init+0x44>)
 80026b6:	4a10      	ldr	r2, [pc, #64]	; (80026f8 <MX_TIM17_Init+0x48>)
 80026b8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 1023;
 80026ba:	4b0e      	ldr	r3, [pc, #56]	; (80026f4 <MX_TIM17_Init+0x44>)
 80026bc:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80026c0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80026c2:	4b0c      	ldr	r3, [pc, #48]	; (80026f4 <MX_TIM17_Init+0x44>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 64;
 80026c8:	4b0a      	ldr	r3, [pc, #40]	; (80026f4 <MX_TIM17_Init+0x44>)
 80026ca:	2240      	movs	r2, #64	; 0x40
 80026cc:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80026ce:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <MX_TIM17_Init+0x44>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80026d4:	4b07      	ldr	r3, [pc, #28]	; (80026f4 <MX_TIM17_Init+0x44>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80026da:	4b06      	ldr	r3, [pc, #24]	; (80026f4 <MX_TIM17_Init+0x44>)
 80026dc:	2200      	movs	r2, #0
 80026de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80026e0:	4804      	ldr	r0, [pc, #16]	; (80026f4 <MX_TIM17_Init+0x44>)
 80026e2:	f004 f9c0 	bl	8006a66 <HAL_TIM_Base_Init>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80026ec:	f7ff fb1c 	bl	8001d28 <Error_Handler>
  }

}
 80026f0:	bf00      	nop
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	20000ee8 	.word	0x20000ee8
 80026f8:	40014800 	.word	0x40014800

080026fc <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08a      	sub	sp, #40	; 0x28
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002704:	f107 0314 	add.w	r3, r7, #20
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	605a      	str	r2, [r3, #4]
 800270e:	609a      	str	r2, [r3, #8]
 8002710:	60da      	str	r2, [r3, #12]
 8002712:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a23      	ldr	r2, [pc, #140]	; (80027a8 <HAL_TIM_Encoder_MspInit+0xac>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d13f      	bne.n	800279e <HAL_TIM_Encoder_MspInit+0xa2>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800271e:	4b23      	ldr	r3, [pc, #140]	; (80027ac <HAL_TIM_Encoder_MspInit+0xb0>)
 8002720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002722:	4a22      	ldr	r2, [pc, #136]	; (80027ac <HAL_TIM_Encoder_MspInit+0xb0>)
 8002724:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002728:	6613      	str	r3, [r2, #96]	; 0x60
 800272a:	4b20      	ldr	r3, [pc, #128]	; (80027ac <HAL_TIM_Encoder_MspInit+0xb0>)
 800272c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800272e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002732:	613b      	str	r3, [r7, #16]
 8002734:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002736:	4b1d      	ldr	r3, [pc, #116]	; (80027ac <HAL_TIM_Encoder_MspInit+0xb0>)
 8002738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273a:	4a1c      	ldr	r2, [pc, #112]	; (80027ac <HAL_TIM_Encoder_MspInit+0xb0>)
 800273c:	f043 0304 	orr.w	r3, r3, #4
 8002740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002742:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <HAL_TIM_Encoder_MspInit+0xb0>)
 8002744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002746:	f003 0304 	and.w	r3, r3, #4
 800274a:	60fb      	str	r3, [r7, #12]
 800274c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800274e:	2303      	movs	r3, #3
 8002750:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002752:	2302      	movs	r3, #2
 8002754:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002756:	2300      	movs	r3, #0
 8002758:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800275a:	2300      	movs	r3, #0
 800275c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800275e:	2302      	movs	r3, #2
 8002760:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002762:	f107 0314 	add.w	r3, r7, #20
 8002766:	4619      	mov	r1, r3
 8002768:	4811      	ldr	r0, [pc, #68]	; (80027b0 <HAL_TIM_Encoder_MspInit+0xb4>)
 800276a:	f002 fcbd 	bl	80050e8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 800276e:	2200      	movs	r2, #0
 8002770:	2100      	movs	r1, #0
 8002772:	2018      	movs	r0, #24
 8002774:	f001 fdb9 	bl	80042ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8002778:	2018      	movs	r0, #24
 800277a:	f001 fdd0 	bl	800431e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 800277e:	2200      	movs	r2, #0
 8002780:	2101      	movs	r1, #1
 8002782:	2019      	movs	r0, #25
 8002784:	f001 fdb1 	bl	80042ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8002788:	2019      	movs	r0, #25
 800278a:	f001 fdc8 	bl	800431e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 800278e:	2200      	movs	r2, #0
 8002790:	2101      	movs	r1, #1
 8002792:	201a      	movs	r0, #26
 8002794:	f001 fda9 	bl	80042ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002798:	201a      	movs	r0, #26
 800279a:	f001 fdc0 	bl	800431e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800279e:	bf00      	nop
 80027a0:	3728      	adds	r7, #40	; 0x28
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
 80027a6:	bf00      	nop
 80027a8:	40012c00 	.word	0x40012c00
 80027ac:	40021000 	.word	0x40021000
 80027b0:	48000800 	.word	0x48000800

080027b4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b08e      	sub	sp, #56	; 0x38
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80027c0:	2200      	movs	r2, #0
 80027c2:	601a      	str	r2, [r3, #0]
 80027c4:	605a      	str	r2, [r3, #4]
 80027c6:	609a      	str	r2, [r3, #8]
 80027c8:	60da      	str	r2, [r3, #12]
 80027ca:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d4:	d131      	bne.n	800283a <HAL_TIM_Base_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027d6:	4b53      	ldr	r3, [pc, #332]	; (8002924 <HAL_TIM_Base_MspInit+0x170>)
 80027d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027da:	4a52      	ldr	r2, [pc, #328]	; (8002924 <HAL_TIM_Base_MspInit+0x170>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6593      	str	r3, [r2, #88]	; 0x58
 80027e2:	4b50      	ldr	r3, [pc, #320]	; (8002924 <HAL_TIM_Base_MspInit+0x170>)
 80027e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	623b      	str	r3, [r7, #32]
 80027ec:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027ee:	4b4d      	ldr	r3, [pc, #308]	; (8002924 <HAL_TIM_Base_MspInit+0x170>)
 80027f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f2:	4a4c      	ldr	r2, [pc, #304]	; (8002924 <HAL_TIM_Base_MspInit+0x170>)
 80027f4:	f043 0301 	orr.w	r3, r3, #1
 80027f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027fa:	4b4a      	ldr	r3, [pc, #296]	; (8002924 <HAL_TIM_Base_MspInit+0x170>)
 80027fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fe:	f003 0301 	and.w	r3, r3, #1
 8002802:	61fb      	str	r3, [r7, #28]
 8002804:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration    
    PA0     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002806:	2301      	movs	r3, #1
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800280a:	2302      	movs	r3, #2
 800280c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800280e:	2300      	movs	r3, #0
 8002810:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002812:	2300      	movs	r3, #0
 8002814:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002816:	2301      	movs	r3, #1
 8002818:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800281a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800281e:	4619      	mov	r1, r3
 8002820:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002824:	f002 fc60 	bl	80050e8 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 8002828:	2200      	movs	r2, #0
 800282a:	2101      	movs	r1, #1
 800282c:	201c      	movs	r0, #28
 800282e:	f001 fd5c 	bl	80042ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002832:	201c      	movs	r0, #28
 8002834:	f001 fd73 	bl	800431e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8002838:	e070      	b.n	800291c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM5)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a3a      	ldr	r2, [pc, #232]	; (8002928 <HAL_TIM_Base_MspInit+0x174>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d10c      	bne.n	800285e <HAL_TIM_Base_MspInit+0xaa>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002844:	4b37      	ldr	r3, [pc, #220]	; (8002924 <HAL_TIM_Base_MspInit+0x170>)
 8002846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002848:	4a36      	ldr	r2, [pc, #216]	; (8002924 <HAL_TIM_Base_MspInit+0x170>)
 800284a:	f043 0308 	orr.w	r3, r3, #8
 800284e:	6593      	str	r3, [r2, #88]	; 0x58
 8002850:	4b34      	ldr	r3, [pc, #208]	; (8002924 <HAL_TIM_Base_MspInit+0x170>)
 8002852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	61bb      	str	r3, [r7, #24]
 800285a:	69bb      	ldr	r3, [r7, #24]
}
 800285c:	e05e      	b.n	800291c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM8)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a32      	ldr	r2, [pc, #200]	; (800292c <HAL_TIM_Base_MspInit+0x178>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d10c      	bne.n	8002882 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002868:	4b2e      	ldr	r3, [pc, #184]	; (8002924 <HAL_TIM_Base_MspInit+0x170>)
 800286a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800286c:	4a2d      	ldr	r2, [pc, #180]	; (8002924 <HAL_TIM_Base_MspInit+0x170>)
 800286e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002872:	6613      	str	r3, [r2, #96]	; 0x60
 8002874:	4b2b      	ldr	r3, [pc, #172]	; (8002924 <HAL_TIM_Base_MspInit+0x170>)
 8002876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002878:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800287c:	617b      	str	r3, [r7, #20]
 800287e:	697b      	ldr	r3, [r7, #20]
}
 8002880:	e04c      	b.n	800291c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM15)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a2a      	ldr	r2, [pc, #168]	; (8002930 <HAL_TIM_Base_MspInit+0x17c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d114      	bne.n	80028b6 <HAL_TIM_Base_MspInit+0x102>
    __HAL_RCC_TIM15_CLK_ENABLE();
 800288c:	4b25      	ldr	r3, [pc, #148]	; (8002924 <HAL_TIM_Base_MspInit+0x170>)
 800288e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002890:	4a24      	ldr	r2, [pc, #144]	; (8002924 <HAL_TIM_Base_MspInit+0x170>)
 8002892:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002896:	6613      	str	r3, [r2, #96]	; 0x60
 8002898:	4b22      	ldr	r3, [pc, #136]	; (8002924 <HAL_TIM_Base_MspInit+0x170>)
 800289a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800289c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a0:	613b      	str	r3, [r7, #16]
 80028a2:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 80028a4:	2200      	movs	r2, #0
 80028a6:	2100      	movs	r1, #0
 80028a8:	2018      	movs	r0, #24
 80028aa:	f001 fd1e 	bl	80042ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 80028ae:	2018      	movs	r0, #24
 80028b0:	f001 fd35 	bl	800431e <HAL_NVIC_EnableIRQ>
}
 80028b4:	e032      	b.n	800291c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM16)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a1e      	ldr	r2, [pc, #120]	; (8002934 <HAL_TIM_Base_MspInit+0x180>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d114      	bne.n	80028ea <HAL_TIM_Base_MspInit+0x136>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80028c0:	4b18      	ldr	r3, [pc, #96]	; (8002924 <HAL_TIM_Base_MspInit+0x170>)
 80028c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028c4:	4a17      	ldr	r2, [pc, #92]	; (8002924 <HAL_TIM_Base_MspInit+0x170>)
 80028c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028ca:	6613      	str	r3, [r2, #96]	; 0x60
 80028cc:	4b15      	ldr	r3, [pc, #84]	; (8002924 <HAL_TIM_Base_MspInit+0x170>)
 80028ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d4:	60fb      	str	r3, [r7, #12]
 80028d6:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1, 0);
 80028d8:	2200      	movs	r2, #0
 80028da:	2101      	movs	r1, #1
 80028dc:	2019      	movs	r0, #25
 80028de:	f001 fd04 	bl	80042ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80028e2:	2019      	movs	r0, #25
 80028e4:	f001 fd1b 	bl	800431e <HAL_NVIC_EnableIRQ>
}
 80028e8:	e018      	b.n	800291c <HAL_TIM_Base_MspInit+0x168>
  else if(tim_baseHandle->Instance==TIM17)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	4a12      	ldr	r2, [pc, #72]	; (8002938 <HAL_TIM_Base_MspInit+0x184>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d113      	bne.n	800291c <HAL_TIM_Base_MspInit+0x168>
    __HAL_RCC_TIM17_CLK_ENABLE();
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <HAL_TIM_Base_MspInit+0x170>)
 80028f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028f8:	4a0a      	ldr	r2, [pc, #40]	; (8002924 <HAL_TIM_Base_MspInit+0x170>)
 80028fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028fe:	6613      	str	r3, [r2, #96]	; 0x60
 8002900:	4b08      	ldr	r3, [pc, #32]	; (8002924 <HAL_TIM_Base_MspInit+0x170>)
 8002902:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002904:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002908:	60bb      	str	r3, [r7, #8]
 800290a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 1, 0);
 800290c:	2200      	movs	r2, #0
 800290e:	2101      	movs	r1, #1
 8002910:	201a      	movs	r0, #26
 8002912:	f001 fcea 	bl	80042ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8002916:	201a      	movs	r0, #26
 8002918:	f001 fd01 	bl	800431e <HAL_NVIC_EnableIRQ>
}
 800291c:	bf00      	nop
 800291e:	3738      	adds	r7, #56	; 0x38
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}
 8002924:	40021000 	.word	0x40021000
 8002928:	40000c00 	.word	0x40000c00
 800292c:	40013400 	.word	0x40013400
 8002930:	40014000 	.word	0x40014000
 8002934:	40014400 	.word	0x40014400
 8002938:	40014800 	.word	0x40014800

0800293c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800293c:	480d      	ldr	r0, [pc, #52]	; (8002974 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800293e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002940:	480d      	ldr	r0, [pc, #52]	; (8002978 <LoopForever+0x6>)
  ldr r1, =_edata
 8002942:	490e      	ldr	r1, [pc, #56]	; (800297c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002944:	4a0e      	ldr	r2, [pc, #56]	; (8002980 <LoopForever+0xe>)
  movs r3, #0
 8002946:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002948:	e002      	b.n	8002950 <LoopCopyDataInit>

0800294a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800294a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800294c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800294e:	3304      	adds	r3, #4

08002950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002954:	d3f9      	bcc.n	800294a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002956:	4a0b      	ldr	r2, [pc, #44]	; (8002984 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002958:	4c0b      	ldr	r4, [pc, #44]	; (8002988 <LoopForever+0x16>)
  movs r3, #0
 800295a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800295c:	e001      	b.n	8002962 <LoopFillZerobss>

0800295e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800295e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002960:	3204      	adds	r2, #4

08002962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002964:	d3fb      	bcc.n	800295e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002966:	f7ff fc83 	bl	8002270 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800296a:	f006 faad 	bl	8008ec8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800296e:	f7ff f8c7 	bl	8001b00 <main>

08002972 <LoopForever>:

LoopForever:
    b LoopForever
 8002972:	e7fe      	b.n	8002972 <LoopForever>
  ldr   r0, =_estack
 8002974:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800297c:	20000bc8 	.word	0x20000bc8
  ldr r2, =_sidata
 8002980:	0800a3a8 	.word	0x0800a3a8
  ldr r2, =_sbss
 8002984:	20000bc8 	.word	0x20000bc8
  ldr r4, =_ebss
 8002988:	2000106c 	.word	0x2000106c

0800298c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800298c:	e7fe      	b.n	800298c <ADC1_2_IRQHandler>

0800298e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002998:	2003      	movs	r0, #3
 800299a:	f001 fc9b 	bl	80042d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800299e:	2000      	movs	r0, #0
 80029a0:	f000 f80e 	bl	80029c0 <HAL_InitTick>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d002      	beq.n	80029b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	71fb      	strb	r3, [r7, #7]
 80029ae:	e001      	b.n	80029b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80029b0:	f7ff fa8a 	bl	8001ec8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80029b4:	79fb      	ldrb	r3, [r7, #7]

}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3708      	adds	r7, #8
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80029c8:	2300      	movs	r3, #0
 80029ca:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80029cc:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <HAL_InitTick+0x68>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d022      	beq.n	8002a1a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80029d4:	4b15      	ldr	r3, [pc, #84]	; (8002a2c <HAL_InitTick+0x6c>)
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	4b13      	ldr	r3, [pc, #76]	; (8002a28 <HAL_InitTick+0x68>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80029e0:	fbb1 f3f3 	udiv	r3, r1, r3
 80029e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e8:	4618      	mov	r0, r3
 80029ea:	f001 fca6 	bl	800433a <HAL_SYSTICK_Config>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d10f      	bne.n	8002a14 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2b0f      	cmp	r3, #15
 80029f8:	d809      	bhi.n	8002a0e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029fa:	2200      	movs	r2, #0
 80029fc:	6879      	ldr	r1, [r7, #4]
 80029fe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002a02:	f001 fc72 	bl	80042ea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a06:	4a0a      	ldr	r2, [pc, #40]	; (8002a30 <HAL_InitTick+0x70>)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6013      	str	r3, [r2, #0]
 8002a0c:	e007      	b.n	8002a1e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	73fb      	strb	r3, [r7, #15]
 8002a12:	e004      	b.n	8002a1e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	73fb      	strb	r3, [r7, #15]
 8002a18:	e001      	b.n	8002a1e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20000018 	.word	0x20000018
 8002a2c:	20000010 	.word	0x20000010
 8002a30:	20000014 	.word	0x20000014

08002a34 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a38:	4b05      	ldr	r3, [pc, #20]	; (8002a50 <HAL_IncTick+0x1c>)
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	4b05      	ldr	r3, [pc, #20]	; (8002a54 <HAL_IncTick+0x20>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4413      	add	r3, r2
 8002a42:	4a03      	ldr	r2, [pc, #12]	; (8002a50 <HAL_IncTick+0x1c>)
 8002a44:	6013      	str	r3, [r2, #0]
}
 8002a46:	bf00      	nop
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4e:	4770      	bx	lr
 8002a50:	20001064 	.word	0x20001064
 8002a54:	20000018 	.word	0x20000018

08002a58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a5c:	4b03      	ldr	r3, [pc, #12]	; (8002a6c <HAL_GetTick+0x14>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	20001064 	.word	0x20001064

08002a70 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b084      	sub	sp, #16
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a78:	f7ff ffee 	bl	8002a58 <HAL_GetTick>
 8002a7c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a88:	d004      	beq.n	8002a94 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a8a:	4b09      	ldr	r3, [pc, #36]	; (8002ab0 <HAL_Delay+0x40>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	68fa      	ldr	r2, [r7, #12]
 8002a90:	4413      	add	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a94:	bf00      	nop
 8002a96:	f7ff ffdf 	bl	8002a58 <HAL_GetTick>
 8002a9a:	4602      	mov	r2, r0
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	1ad3      	subs	r3, r2, r3
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	429a      	cmp	r2, r3
 8002aa4:	d8f7      	bhi.n	8002a96 <HAL_Delay+0x26>
  {
  }
}
 8002aa6:	bf00      	nop
 8002aa8:	3710      	adds	r7, #16
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}
 8002aae:	bf00      	nop
 8002ab0:	20000018 	.word	0x20000018

08002ab4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
 8002abc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	431a      	orrs	r2, r3
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	609a      	str	r2, [r3, #8]
}
 8002ace:	bf00      	nop
 8002ad0:	370c      	adds	r7, #12
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr

08002ada <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002ada:	b480      	push	{r7}
 8002adc:	b083      	sub	sp, #12
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
 8002ae2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	689b      	ldr	r3, [r3, #8]
 8002ae8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	431a      	orrs	r2, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	609a      	str	r2, [r3, #8]
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002b1c:	b490      	push	{r4, r7}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]
 8002b28:	603b      	str	r3, [r7, #0]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	3360      	adds	r3, #96	; 0x60
 8002b2e:	461a      	mov	r2, r3
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	4413      	add	r3, r2
 8002b36:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002b38:	6822      	ldr	r2, [r4, #0]
 8002b3a:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <LL_ADC_SetOffset+0x40>)
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002b44:	683a      	ldr	r2, [r7, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	4313      	orrs	r3, r2
 8002b4a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b4e:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002b50:	bf00      	nop
 8002b52:	3710      	adds	r7, #16
 8002b54:	46bd      	mov	sp, r7
 8002b56:	bc90      	pop	{r4, r7}
 8002b58:	4770      	bx	lr
 8002b5a:	bf00      	nop
 8002b5c:	03fff000 	.word	0x03fff000

08002b60 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002b60:	b490      	push	{r4, r7}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
 8002b68:	6039      	str	r1, [r7, #0]
  register const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3360      	adds	r3, #96	; 0x60
 8002b6e:	461a      	mov	r2, r3
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	4413      	add	r3, r2
 8002b76:	461c      	mov	r4, r3

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b78:	6823      	ldr	r3, [r4, #0]
 8002b7a:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bc90      	pop	{r4, r7}
 8002b86:	4770      	bx	lr

08002b88 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b88:	b490      	push	{r4, r7}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	3360      	adds	r3, #96	; 0x60
 8002b98:	461a      	mov	r2, r3
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4413      	add	r3, r2
 8002ba0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002ba2:	6823      	ldr	r3, [r4, #0]
 8002ba4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	4313      	orrs	r3, r2
 8002bac:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002bae:	bf00      	nop
 8002bb0:	3710      	adds	r7, #16
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bc90      	pop	{r4, r7}
 8002bb6:	4770      	bx	lr

08002bb8 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002bb8:	b490      	push	{r4, r7}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	60f8      	str	r0, [r7, #12]
 8002bc0:	60b9      	str	r1, [r7, #8]
 8002bc2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	3360      	adds	r3, #96	; 0x60
 8002bc8:	461a      	mov	r2, r3
 8002bca:	68bb      	ldr	r3, [r7, #8]
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002bd2:	6823      	ldr	r3, [r4, #0]
 8002bd4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	6023      	str	r3, [r4, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002bde:	bf00      	nop
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc90      	pop	{r4, r7}
 8002be6:	4770      	bx	lr

08002be8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002be8:	b490      	push	{r4, r7}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	3360      	adds	r3, #96	; 0x60
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	009b      	lsls	r3, r3, #2
 8002bfe:	4413      	add	r3, r2
 8002c00:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002c02:	6823      	ldr	r3, [r4, #0]
 8002c04:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	6023      	str	r3, [r4, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002c0e:	bf00      	nop
 8002c10:	3710      	adds	r7, #16
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bc90      	pop	{r4, r7}
 8002c16:	4770      	bx	lr

08002c18 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b083      	sub	sp, #12
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	695b      	ldr	r3, [r3, #20]
 8002c26:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	431a      	orrs	r2, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	615a      	str	r2, [r3, #20]
}
 8002c32:	bf00      	nop
 8002c34:	370c      	adds	r7, #12
 8002c36:	46bd      	mov	sp, r7
 8002c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3c:	4770      	bx	lr

08002c3e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c3e:	b490      	push	{r4, r7}
 8002c40:	b084      	sub	sp, #16
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	3330      	adds	r3, #48	; 0x30
 8002c4e:	461a      	mov	r2, r3
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	0a1b      	lsrs	r3, r3, #8
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	f003 030c 	and.w	r3, r3, #12
 8002c5a:	4413      	add	r3, r2
 8002c5c:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002c5e:	6822      	ldr	r2, [r4, #0]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	f003 031f 	and.w	r3, r3, #31
 8002c66:	211f      	movs	r1, #31
 8002c68:	fa01 f303 	lsl.w	r3, r1, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	401a      	ands	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	0e9b      	lsrs	r3, r3, #26
 8002c74:	f003 011f 	and.w	r1, r3, #31
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	f003 031f 	and.w	r3, r3, #31
 8002c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c82:	4313      	orrs	r3, r2
 8002c84:	6023      	str	r3, [r4, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c86:	bf00      	nop
 8002c88:	3710      	adds	r7, #16
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bc90      	pop	{r4, r7}
 8002c8e:	4770      	bx	lr

08002c90 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c90:	b490      	push	{r4, r7}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	60f8      	str	r0, [r7, #12]
 8002c98:	60b9      	str	r1, [r7, #8]
 8002c9a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  register __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	3314      	adds	r3, #20
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	0e5b      	lsrs	r3, r3, #25
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	4413      	add	r3, r2
 8002cae:	461c      	mov	r4, r3

  MODIFY_REG(*preg,
 8002cb0:	6822      	ldr	r2, [r4, #0]
 8002cb2:	68bb      	ldr	r3, [r7, #8]
 8002cb4:	0d1b      	lsrs	r3, r3, #20
 8002cb6:	f003 031f 	and.w	r3, r3, #31
 8002cba:	2107      	movs	r1, #7
 8002cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	401a      	ands	r2, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	0d1b      	lsrs	r3, r3, #20
 8002cc8:	f003 031f 	and.w	r3, r3, #31
 8002ccc:	6879      	ldr	r1, [r7, #4]
 8002cce:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	6023      	str	r3, [r4, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002cd6:	bf00      	nop
 8002cd8:	3710      	adds	r7, #16
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bc90      	pop	{r4, r7}
 8002cde:	4770      	bx	lr

08002ce0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b085      	sub	sp, #20
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	60f8      	str	r0, [r7, #12]
 8002ce8:	60b9      	str	r1, [r7, #8]
 8002cea:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	401a      	ands	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	f003 0318 	and.w	r3, r3, #24
 8002d02:	4908      	ldr	r1, [pc, #32]	; (8002d24 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002d04:	40d9      	lsrs	r1, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	400b      	ands	r3, r1
 8002d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002d16:	bf00      	nop
 8002d18:	3714      	adds	r7, #20
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	0007ffff 	.word	0x0007ffff

08002d28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b083      	sub	sp, #12
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002d38:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d3c:	687a      	ldr	r2, [r7, #4]
 8002d3e:	6093      	str	r3, [r2, #8]
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d5c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d60:	d101      	bne.n	8002d66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d62:	2301      	movs	r3, #1
 8002d64:	e000      	b.n	8002d68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	370c      	adds	r7, #12
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d72:	4770      	bx	lr

08002d74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002d74:	b480      	push	{r7}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	689b      	ldr	r3, [r3, #8]
 8002d80:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002d84:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d88:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr

08002d9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002db0:	d101      	bne.n	8002db6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <LL_ADC_IsEnabled+0x18>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <LL_ADC_IsEnabled+0x1a>
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 0304 	and.w	r3, r3, #4
 8002dfa:	2b04      	cmp	r3, #4
 8002dfc:	d101      	bne.n	8002e02 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e000      	b.n	8002e04 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	f003 0308 	and.w	r3, r3, #8
 8002e20:	2b08      	cmp	r3, #8
 8002e22:	d101      	bne.n	8002e28 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002e24:	2301      	movs	r3, #1
 8002e26:	e000      	b.n	8002e2a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr
	...

08002e38 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e38:	b590      	push	{r4, r7, lr}
 8002e3a:	b089      	sub	sp, #36	; 0x24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e40:	2300      	movs	r3, #0
 8002e42:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002e44:	2300      	movs	r3, #0
 8002e46:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d101      	bne.n	8002e52 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e1ad      	b.n	80031ae <HAL_ADC_Init+0x376>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	695b      	ldr	r3, [r3, #20]
 8002e56:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d109      	bne.n	8002e74 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7fe f853 	bl	8000f0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff ff67 	bl	8002d4c <LL_ADC_IsDeepPowerDownEnabled>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d004      	beq.n	8002e8e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f7ff ff4d 	bl	8002d28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f7ff ff82 	bl	8002d9c <LL_ADC_IsInternalRegulatorEnabled>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d113      	bne.n	8002ec6 <HAL_ADC_Init+0x8e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	f7ff ff66 	bl	8002d74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8002ea8:	4b9e      	ldr	r3, [pc, #632]	; (8003124 <HAL_ADC_Init+0x2ec>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	099b      	lsrs	r3, r3, #6
 8002eae:	4a9e      	ldr	r2, [pc, #632]	; (8003128 <HAL_ADC_Init+0x2f0>)
 8002eb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb4:	099b      	lsrs	r3, r3, #6
 8002eb6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002eb8:	e002      	b.n	8002ec0 <HAL_ADC_Init+0x88>
    {
      wait_loop_index--;
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f9      	bne.n	8002eba <HAL_ADC_Init+0x82>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7ff ff66 	bl	8002d9c <LL_ADC_IsInternalRegulatorEnabled>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10d      	bne.n	8002ef2 <HAL_ADC_Init+0xba>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eda:	f043 0210 	orr.w	r2, r3, #16
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ee6:	f043 0201 	orr.w	r2, r3, #1
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7ff ff77 	bl	8002dea <LL_ADC_REG_IsConversionOngoing>
 8002efc:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f040 8148 	bne.w	800319c <HAL_ADC_Init+0x364>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f040 8144 	bne.w	800319c <HAL_ADC_Init+0x364>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f18:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f1c:	f043 0202 	orr.w	r2, r3, #2
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7ff ff4b 	bl	8002dc4 <LL_ADC_IsEnabled>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d141      	bne.n	8002fb8 <HAL_ADC_Init+0x180>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f3c:	d004      	beq.n	8002f48 <HAL_ADC_Init+0x110>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4a7a      	ldr	r2, [pc, #488]	; (800312c <HAL_ADC_Init+0x2f4>)
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d10f      	bne.n	8002f68 <HAL_ADC_Init+0x130>
 8002f48:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002f4c:	f7ff ff3a 	bl	8002dc4 <LL_ADC_IsEnabled>
 8002f50:	4604      	mov	r4, r0
 8002f52:	4876      	ldr	r0, [pc, #472]	; (800312c <HAL_ADC_Init+0x2f4>)
 8002f54:	f7ff ff36 	bl	8002dc4 <LL_ADC_IsEnabled>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	4323      	orrs	r3, r4
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	bf0c      	ite	eq
 8002f60:	2301      	moveq	r3, #1
 8002f62:	2300      	movne	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	e012      	b.n	8002f8e <HAL_ADC_Init+0x156>
 8002f68:	4871      	ldr	r0, [pc, #452]	; (8003130 <HAL_ADC_Init+0x2f8>)
 8002f6a:	f7ff ff2b 	bl	8002dc4 <LL_ADC_IsEnabled>
 8002f6e:	4604      	mov	r4, r0
 8002f70:	4870      	ldr	r0, [pc, #448]	; (8003134 <HAL_ADC_Init+0x2fc>)
 8002f72:	f7ff ff27 	bl	8002dc4 <LL_ADC_IsEnabled>
 8002f76:	4603      	mov	r3, r0
 8002f78:	431c      	orrs	r4, r3
 8002f7a:	486f      	ldr	r0, [pc, #444]	; (8003138 <HAL_ADC_Init+0x300>)
 8002f7c:	f7ff ff22 	bl	8002dc4 <LL_ADC_IsEnabled>
 8002f80:	4603      	mov	r3, r0
 8002f82:	4323      	orrs	r3, r4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	bf0c      	ite	eq
 8002f88:	2301      	moveq	r3, #1
 8002f8a:	2300      	movne	r3, #0
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d012      	beq.n	8002fb8 <HAL_ADC_Init+0x180>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f9a:	d004      	beq.n	8002fa6 <HAL_ADC_Init+0x16e>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a62      	ldr	r2, [pc, #392]	; (800312c <HAL_ADC_Init+0x2f4>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d101      	bne.n	8002faa <HAL_ADC_Init+0x172>
 8002fa6:	4a65      	ldr	r2, [pc, #404]	; (800313c <HAL_ADC_Init+0x304>)
 8002fa8:	e000      	b.n	8002fac <HAL_ADC_Init+0x174>
 8002faa:	4a65      	ldr	r2, [pc, #404]	; (8003140 <HAL_ADC_Init+0x308>)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	4610      	mov	r0, r2
 8002fb4:	f7ff fd7e 	bl	8002ab4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	7f5b      	ldrb	r3, [r3, #29]
 8002fbc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fc2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002fc8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002fce:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fd6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002fe2:	2b01      	cmp	r3, #1
 8002fe4:	d106      	bne.n	8002ff4 <HAL_ADC_Init+0x1bc>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fea:	3b01      	subs	r3, #1
 8002fec:	045b      	lsls	r3, r3, #17
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d009      	beq.n	8003010 <HAL_ADC_Init+0x1d8>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003000:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003008:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4313      	orrs	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	4b4b      	ldr	r3, [pc, #300]	; (8003144 <HAL_ADC_Init+0x30c>)
 8003018:	4013      	ands	r3, r2
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	6812      	ldr	r2, [r2, #0]
 800301e:	69b9      	ldr	r1, [r7, #24]
 8003020:	430b      	orrs	r3, r1
 8003022:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff fed3 	bl	8002dea <LL_ADC_REG_IsConversionOngoing>
 8003044:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff fee0 	bl	8002e10 <LL_ADC_INJ_IsConversionOngoing>
 8003050:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d17f      	bne.n	8003158 <HAL_ADC_Init+0x320>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d17c      	bne.n	8003158 <HAL_ADC_Init+0x320>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003062:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800306a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800306c:	4313      	orrs	r3, r2
 800306e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	68db      	ldr	r3, [r3, #12]
 8003076:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800307a:	f023 0302 	bic.w	r3, r3, #2
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	69b9      	ldr	r1, [r7, #24]
 8003084:	430b      	orrs	r3, r1
 8003086:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	691b      	ldr	r3, [r3, #16]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d017      	beq.n	80030c0 <HAL_ADC_Init+0x288>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	691a      	ldr	r2, [r3, #16]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800309e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80030a8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80030ac:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6911      	ldr	r1, [r2, #16]
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6812      	ldr	r2, [r2, #0]
 80030b8:	430b      	orrs	r3, r1
 80030ba:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80030be:	e013      	b.n	80030e8 <HAL_ADC_Init+0x2b0>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	691a      	ldr	r2, [r3, #16]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80030ce:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6812      	ldr	r2, [r2, #0]
 80030dc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80030e0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030e4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030ee:	2b01      	cmp	r3, #1
 80030f0:	d12a      	bne.n	8003148 <HAL_ADC_Init+0x310>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80030fc:	f023 0304 	bic.w	r3, r3, #4
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003108:	4311      	orrs	r1, r2
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800310e:	4311      	orrs	r1, r2
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003114:	430a      	orrs	r2, r1
 8003116:	431a      	orrs	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f042 0201 	orr.w	r2, r2, #1
 8003120:	611a      	str	r2, [r3, #16]
 8003122:	e019      	b.n	8003158 <HAL_ADC_Init+0x320>
 8003124:	20000010 	.word	0x20000010
 8003128:	053e2d63 	.word	0x053e2d63
 800312c:	50000100 	.word	0x50000100
 8003130:	50000400 	.word	0x50000400
 8003134:	50000500 	.word	0x50000500
 8003138:	50000600 	.word	0x50000600
 800313c:	50000300 	.word	0x50000300
 8003140:	50000700 	.word	0x50000700
 8003144:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	691a      	ldr	r2, [r3, #16]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0201 	bic.w	r2, r2, #1
 8003156:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d10c      	bne.n	800317a <HAL_ADC_Init+0x342>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	f023 010f 	bic.w	r1, r3, #15
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	1e5a      	subs	r2, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	631a      	str	r2, [r3, #48]	; 0x30
 8003178:	e007      	b.n	800318a <HAL_ADC_Init+0x352>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 020f 	bic.w	r2, r2, #15
 8003188:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318e:	f023 0303 	bic.w	r3, r3, #3
 8003192:	f043 0201 	orr.w	r2, r3, #1
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	65da      	str	r2, [r3, #92]	; 0x5c
 800319a:	e007      	b.n	80031ac <HAL_ADC_Init+0x374>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a0:	f043 0210 	orr.w	r2, r3, #16
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80031a8:	2301      	movs	r3, #1
 80031aa:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031ac:	7ffb      	ldrb	r3, [r7, #31]
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3724      	adds	r7, #36	; 0x24
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd90      	pop	{r4, r7, pc}
 80031b6:	bf00      	nop

080031b8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b0a6      	sub	sp, #152	; 0x98
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031c2:	2300      	movs	r3, #0
 80031c4:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80031c8:	2300      	movs	r3, #0
 80031ca:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d101      	bne.n	80031da <HAL_ADC_ConfigChannel+0x22>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e38e      	b.n	80038f8 <HAL_ADC_ConfigChannel+0x740>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7ff fdff 	bl	8002dea <LL_ADC_REG_IsConversionOngoing>
 80031ec:	4603      	mov	r3, r0
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f040 836f 	bne.w	80038d2 <HAL_ADC_ConfigChannel+0x71a>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6818      	ldr	r0, [r3, #0]
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	6859      	ldr	r1, [r3, #4]
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	461a      	mov	r2, r3
 8003202:	f7ff fd1c 	bl	8002c3e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4618      	mov	r0, r3
 800320c:	f7ff fded 	bl	8002dea <LL_ADC_REG_IsConversionOngoing>
 8003210:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fdf9 	bl	8002e10 <LL_ADC_INJ_IsConversionOngoing>
 800321e:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003222:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003226:	2b00      	cmp	r3, #0
 8003228:	f040 817b 	bne.w	8003522 <HAL_ADC_ConfigChannel+0x36a>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800322c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003230:	2b00      	cmp	r3, #0
 8003232:	f040 8176 	bne.w	8003522 <HAL_ADC_ConfigChannel+0x36a>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003236:	683b      	ldr	r3, [r7, #0]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800323e:	d10f      	bne.n	8003260 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6818      	ldr	r0, [r3, #0]
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2200      	movs	r2, #0
 800324a:	4619      	mov	r1, r3
 800324c:	f7ff fd20 	bl	8002c90 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff fcdd 	bl	8002c18 <LL_ADC_SetSamplingTimeCommonConfig>
 800325e:	e00e      	b.n	800327e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6818      	ldr	r0, [r3, #0]
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	6819      	ldr	r1, [r3, #0]
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	461a      	mov	r2, r3
 800326e:	f7ff fd0f 	bl	8002c90 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2100      	movs	r1, #0
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff fccd 	bl	8002c18 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	695a      	ldr	r2, [r3, #20]
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68db      	ldr	r3, [r3, #12]
 8003288:	08db      	lsrs	r3, r3, #3
 800328a:	f003 0303 	and.w	r3, r3, #3
 800328e:	005b      	lsls	r3, r3, #1
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	2b04      	cmp	r3, #4
 800329e:	d022      	beq.n	80032e6 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6818      	ldr	r0, [r3, #0]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	6919      	ldr	r1, [r3, #16]
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80032b0:	f7ff fc34 	bl	8002b1c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6818      	ldr	r0, [r3, #0]
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	6919      	ldr	r1, [r3, #16]
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	461a      	mov	r2, r3
 80032c2:	f7ff fc79 	bl	8002bb8 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	6818      	ldr	r0, [r3, #0]
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	6919      	ldr	r1, [r3, #16]
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	7f1b      	ldrb	r3, [r3, #28]
 80032d2:	2b01      	cmp	r3, #1
 80032d4:	d102      	bne.n	80032dc <HAL_ADC_ConfigChannel+0x124>
 80032d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80032da:	e000      	b.n	80032de <HAL_ADC_ConfigChannel+0x126>
 80032dc:	2300      	movs	r3, #0
 80032de:	461a      	mov	r2, r3
 80032e0:	f7ff fc82 	bl	8002be8 <LL_ADC_SetOffsetSaturation>
 80032e4:	e11d      	b.n	8003522 <HAL_ADC_ConfigChannel+0x36a>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2100      	movs	r1, #0
 80032ec:	4618      	mov	r0, r3
 80032ee:	f7ff fc37 	bl	8002b60 <LL_ADC_GetOffsetChannel>
 80032f2:	4603      	mov	r3, r0
 80032f4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d10a      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x15a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	2100      	movs	r1, #0
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff fc2c 	bl	8002b60 <LL_ADC_GetOffsetChannel>
 8003308:	4603      	mov	r3, r0
 800330a:	0e9b      	lsrs	r3, r3, #26
 800330c:	f003 021f 	and.w	r2, r3, #31
 8003310:	e012      	b.n	8003338 <HAL_ADC_ConfigChannel+0x180>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2100      	movs	r1, #0
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff fc21 	bl	8002b60 <LL_ADC_GetOffsetChannel>
 800331e:	4603      	mov	r3, r0
 8003320:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003324:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003328:	fa93 f3a3 	rbit	r3, r3
 800332c:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800332e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003330:	fab3 f383 	clz	r3, r3
 8003334:	b2db      	uxtb	r3, r3
 8003336:	461a      	mov	r2, r3
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003340:	2b00      	cmp	r3, #0
 8003342:	d105      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x198>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	0e9b      	lsrs	r3, r3, #26
 800334a:	f003 031f 	and.w	r3, r3, #31
 800334e:	e00a      	b.n	8003366 <HAL_ADC_ConfigChannel+0x1ae>
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	67bb      	str	r3, [r7, #120]	; 0x78
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003356:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003358:	fa93 f3a3 	rbit	r3, r3
 800335c:	677b      	str	r3, [r7, #116]	; 0x74
  return result;
 800335e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003360:	fab3 f383 	clz	r3, r3
 8003364:	b2db      	uxtb	r3, r3
 8003366:	429a      	cmp	r2, r3
 8003368:	d106      	bne.n	8003378 <HAL_ADC_ConfigChannel+0x1c0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2200      	movs	r2, #0
 8003370:	2100      	movs	r1, #0
 8003372:	4618      	mov	r0, r3
 8003374:	f7ff fc08 	bl	8002b88 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	2101      	movs	r1, #1
 800337e:	4618      	mov	r0, r3
 8003380:	f7ff fbee 	bl	8002b60 <LL_ADC_GetOffsetChannel>
 8003384:	4603      	mov	r3, r0
 8003386:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10a      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x1ec>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	2101      	movs	r1, #1
 8003394:	4618      	mov	r0, r3
 8003396:	f7ff fbe3 	bl	8002b60 <LL_ADC_GetOffsetChannel>
 800339a:	4603      	mov	r3, r0
 800339c:	0e9b      	lsrs	r3, r3, #26
 800339e:	f003 021f 	and.w	r2, r3, #31
 80033a2:	e010      	b.n	80033c6 <HAL_ADC_ConfigChannel+0x20e>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	2101      	movs	r1, #1
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff fbd8 	bl	8002b60 <LL_ADC_GetOffsetChannel>
 80033b0:	4603      	mov	r3, r0
 80033b2:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033b6:	fa93 f3a3 	rbit	r3, r3
 80033ba:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 80033bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033be:	fab3 f383 	clz	r3, r3
 80033c2:	b2db      	uxtb	r3, r3
 80033c4:	461a      	mov	r2, r3
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d105      	bne.n	80033de <HAL_ADC_ConfigChannel+0x226>
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	0e9b      	lsrs	r3, r3, #26
 80033d8:	f003 031f 	and.w	r3, r3, #31
 80033dc:	e00a      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x23c>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033e6:	fa93 f3a3 	rbit	r3, r3
 80033ea:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80033ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033ee:	fab3 f383 	clz	r3, r3
 80033f2:	b2db      	uxtb	r3, r3
 80033f4:	429a      	cmp	r2, r3
 80033f6:	d106      	bne.n	8003406 <HAL_ADC_ConfigChannel+0x24e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2200      	movs	r2, #0
 80033fe:	2101      	movs	r1, #1
 8003400:	4618      	mov	r0, r3
 8003402:	f7ff fbc1 	bl	8002b88 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	2102      	movs	r1, #2
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff fba7 	bl	8002b60 <LL_ADC_GetOffsetChannel>
 8003412:	4603      	mov	r3, r0
 8003414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003418:	2b00      	cmp	r3, #0
 800341a:	d10a      	bne.n	8003432 <HAL_ADC_ConfigChannel+0x27a>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	2102      	movs	r1, #2
 8003422:	4618      	mov	r0, r3
 8003424:	f7ff fb9c 	bl	8002b60 <LL_ADC_GetOffsetChannel>
 8003428:	4603      	mov	r3, r0
 800342a:	0e9b      	lsrs	r3, r3, #26
 800342c:	f003 021f 	and.w	r2, r3, #31
 8003430:	e010      	b.n	8003454 <HAL_ADC_ConfigChannel+0x29c>
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	2102      	movs	r1, #2
 8003438:	4618      	mov	r0, r3
 800343a:	f7ff fb91 	bl	8002b60 <LL_ADC_GetOffsetChannel>
 800343e:	4603      	mov	r3, r0
 8003440:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003442:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003444:	fa93 f3a3 	rbit	r3, r3
 8003448:	65fb      	str	r3, [r7, #92]	; 0x5c
  return result;
 800344a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800344c:	fab3 f383 	clz	r3, r3
 8003450:	b2db      	uxtb	r3, r3
 8003452:	461a      	mov	r2, r3
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800345c:	2b00      	cmp	r3, #0
 800345e:	d105      	bne.n	800346c <HAL_ADC_ConfigChannel+0x2b4>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	0e9b      	lsrs	r3, r3, #26
 8003466:	f003 031f 	and.w	r3, r3, #31
 800346a:	e00a      	b.n	8003482 <HAL_ADC_ConfigChannel+0x2ca>
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003472:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003474:	fa93 f3a3 	rbit	r3, r3
 8003478:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800347a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800347c:	fab3 f383 	clz	r3, r3
 8003480:	b2db      	uxtb	r3, r3
 8003482:	429a      	cmp	r2, r3
 8003484:	d106      	bne.n	8003494 <HAL_ADC_ConfigChannel+0x2dc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2200      	movs	r2, #0
 800348c:	2102      	movs	r1, #2
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff fb7a 	bl	8002b88 <LL_ADC_SetOffsetState>
        }
        if(__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4)) == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	2103      	movs	r1, #3
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff fb60 	bl	8002b60 <LL_ADC_GetOffsetChannel>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d10a      	bne.n	80034c0 <HAL_ADC_ConfigChannel+0x308>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	2103      	movs	r1, #3
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff fb55 	bl	8002b60 <LL_ADC_GetOffsetChannel>
 80034b6:	4603      	mov	r3, r0
 80034b8:	0e9b      	lsrs	r3, r3, #26
 80034ba:	f003 021f 	and.w	r2, r3, #31
 80034be:	e010      	b.n	80034e2 <HAL_ADC_ConfigChannel+0x32a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2103      	movs	r1, #3
 80034c6:	4618      	mov	r0, r3
 80034c8:	f7ff fb4a 	bl	8002b60 <LL_ADC_GetOffsetChannel>
 80034cc:	4603      	mov	r3, r0
 80034ce:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034d2:	fa93 f3a3 	rbit	r3, r3
 80034d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80034d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034da:	fab3 f383 	clz	r3, r3
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	461a      	mov	r2, r3
 80034e2:	683b      	ldr	r3, [r7, #0]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d105      	bne.n	80034fa <HAL_ADC_ConfigChannel+0x342>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	0e9b      	lsrs	r3, r3, #26
 80034f4:	f003 031f 	and.w	r3, r3, #31
 80034f8:	e00a      	b.n	8003510 <HAL_ADC_ConfigChannel+0x358>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003502:	fa93 f3a3 	rbit	r3, r3
 8003506:	647b      	str	r3, [r7, #68]	; 0x44
  return result;
 8003508:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800350a:	fab3 f383 	clz	r3, r3
 800350e:	b2db      	uxtb	r3, r3
 8003510:	429a      	cmp	r2, r3
 8003512:	d106      	bne.n	8003522 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	2200      	movs	r2, #0
 800351a:	2103      	movs	r1, #3
 800351c:	4618      	mov	r0, r3
 800351e:	f7ff fb33 	bl	8002b88 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	4618      	mov	r0, r3
 8003528:	f7ff fc4c 	bl	8002dc4 <LL_ADC_IsEnabled>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	f040 810c 	bne.w	800374c <HAL_ADC_ConfigChannel+0x594>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6818      	ldr	r0, [r3, #0]
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	6819      	ldr	r1, [r3, #0]
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	461a      	mov	r2, r3
 8003542:	f7ff fbcd 	bl	8002ce0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	4aaf      	ldr	r2, [pc, #700]	; (8003808 <HAL_ADC_ConfigChannel+0x650>)
 800354c:	4293      	cmp	r3, r2
 800354e:	f040 80fd 	bne.w	800374c <HAL_ADC_ConfigChannel+0x594>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800355e:	2b00      	cmp	r3, #0
 8003560:	d10b      	bne.n	800357a <HAL_ADC_ConfigChannel+0x3c2>
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	0e9b      	lsrs	r3, r3, #26
 8003568:	3301      	adds	r3, #1
 800356a:	f003 031f 	and.w	r3, r3, #31
 800356e:	2b09      	cmp	r3, #9
 8003570:	bf94      	ite	ls
 8003572:	2301      	movls	r3, #1
 8003574:	2300      	movhi	r3, #0
 8003576:	b2db      	uxtb	r3, r3
 8003578:	e012      	b.n	80035a0 <HAL_ADC_ConfigChannel+0x3e8>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003580:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003582:	fa93 f3a3 	rbit	r3, r3
 8003586:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8003588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800358a:	fab3 f383 	clz	r3, r3
 800358e:	b2db      	uxtb	r3, r3
 8003590:	3301      	adds	r3, #1
 8003592:	f003 031f 	and.w	r3, r3, #31
 8003596:	2b09      	cmp	r3, #9
 8003598:	bf94      	ite	ls
 800359a:	2301      	movls	r3, #1
 800359c:	2300      	movhi	r3, #0
 800359e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d064      	beq.n	800366e <HAL_ADC_ConfigChannel+0x4b6>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d107      	bne.n	80035c0 <HAL_ADC_ConfigChannel+0x408>
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	0e9b      	lsrs	r3, r3, #26
 80035b6:	3301      	adds	r3, #1
 80035b8:	069b      	lsls	r3, r3, #26
 80035ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035be:	e00e      	b.n	80035de <HAL_ADC_ConfigChannel+0x426>
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c8:	fa93 f3a3 	rbit	r3, r3
 80035cc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80035ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035d0:	fab3 f383 	clz	r3, r3
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	3301      	adds	r3, #1
 80035d8:	069b      	lsls	r3, r3, #26
 80035da:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d109      	bne.n	80035fe <HAL_ADC_ConfigChannel+0x446>
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	0e9b      	lsrs	r3, r3, #26
 80035f0:	3301      	adds	r3, #1
 80035f2:	f003 031f 	and.w	r3, r3, #31
 80035f6:	2101      	movs	r1, #1
 80035f8:	fa01 f303 	lsl.w	r3, r1, r3
 80035fc:	e010      	b.n	8003620 <HAL_ADC_ConfigChannel+0x468>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003606:	fa93 f3a3 	rbit	r3, r3
 800360a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800360c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800360e:	fab3 f383 	clz	r3, r3
 8003612:	b2db      	uxtb	r3, r3
 8003614:	3301      	adds	r3, #1
 8003616:	f003 031f 	and.w	r3, r3, #31
 800361a:	2101      	movs	r1, #1
 800361c:	fa01 f303 	lsl.w	r3, r1, r3
 8003620:	ea42 0103 	orr.w	r1, r2, r3
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800362c:	2b00      	cmp	r3, #0
 800362e:	d10a      	bne.n	8003646 <HAL_ADC_ConfigChannel+0x48e>
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	0e9b      	lsrs	r3, r3, #26
 8003636:	3301      	adds	r3, #1
 8003638:	f003 021f 	and.w	r2, r3, #31
 800363c:	4613      	mov	r3, r2
 800363e:	005b      	lsls	r3, r3, #1
 8003640:	4413      	add	r3, r2
 8003642:	051b      	lsls	r3, r3, #20
 8003644:	e011      	b.n	800366a <HAL_ADC_ConfigChannel+0x4b2>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800364e:	fa93 f3a3 	rbit	r3, r3
 8003652:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8003654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003656:	fab3 f383 	clz	r3, r3
 800365a:	b2db      	uxtb	r3, r3
 800365c:	3301      	adds	r3, #1
 800365e:	f003 021f 	and.w	r2, r3, #31
 8003662:	4613      	mov	r3, r2
 8003664:	005b      	lsls	r3, r3, #1
 8003666:	4413      	add	r3, r2
 8003668:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800366a:	430b      	orrs	r3, r1
 800366c:	e069      	b.n	8003742 <HAL_ADC_ConfigChannel+0x58a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003676:	2b00      	cmp	r3, #0
 8003678:	d107      	bne.n	800368a <HAL_ADC_ConfigChannel+0x4d2>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	0e9b      	lsrs	r3, r3, #26
 8003680:	3301      	adds	r3, #1
 8003682:	069b      	lsls	r3, r3, #26
 8003684:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003688:	e00e      	b.n	80036a8 <HAL_ADC_ConfigChannel+0x4f0>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003690:	6a3b      	ldr	r3, [r7, #32]
 8003692:	fa93 f3a3 	rbit	r3, r3
 8003696:	61fb      	str	r3, [r7, #28]
  return result;
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	fab3 f383 	clz	r3, r3
 800369e:	b2db      	uxtb	r3, r3
 80036a0:	3301      	adds	r3, #1
 80036a2:	069b      	lsls	r3, r3, #26
 80036a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d109      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x510>
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	0e9b      	lsrs	r3, r3, #26
 80036ba:	3301      	adds	r3, #1
 80036bc:	f003 031f 	and.w	r3, r3, #31
 80036c0:	2101      	movs	r1, #1
 80036c2:	fa01 f303 	lsl.w	r3, r1, r3
 80036c6:	e010      	b.n	80036ea <HAL_ADC_ConfigChannel+0x532>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ce:	69bb      	ldr	r3, [r7, #24]
 80036d0:	fa93 f3a3 	rbit	r3, r3
 80036d4:	617b      	str	r3, [r7, #20]
  return result;
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	fab3 f383 	clz	r3, r3
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	3301      	adds	r3, #1
 80036e0:	f003 031f 	and.w	r3, r3, #31
 80036e4:	2101      	movs	r1, #1
 80036e6:	fa01 f303 	lsl.w	r3, r1, r3
 80036ea:	ea42 0103 	orr.w	r1, r2, r3
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d10d      	bne.n	8003716 <HAL_ADC_ConfigChannel+0x55e>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	0e9b      	lsrs	r3, r3, #26
 8003700:	3301      	adds	r3, #1
 8003702:	f003 021f 	and.w	r2, r3, #31
 8003706:	4613      	mov	r3, r2
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	4413      	add	r3, r2
 800370c:	3b1e      	subs	r3, #30
 800370e:	051b      	lsls	r3, r3, #20
 8003710:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003714:	e014      	b.n	8003740 <HAL_ADC_ConfigChannel+0x588>
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	fa93 f3a3 	rbit	r3, r3
 8003722:	60fb      	str	r3, [r7, #12]
  return result;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	fab3 f383 	clz	r3, r3
 800372a:	b2db      	uxtb	r3, r3
 800372c:	3301      	adds	r3, #1
 800372e:	f003 021f 	and.w	r2, r3, #31
 8003732:	4613      	mov	r3, r2
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	4413      	add	r3, r2
 8003738:	3b1e      	subs	r3, #30
 800373a:	051b      	lsls	r3, r3, #20
 800373c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003740:	430b      	orrs	r3, r1
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	6892      	ldr	r2, [r2, #8]
 8003746:	4619      	mov	r1, r3
 8003748:	f7ff faa2 	bl	8002c90 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	4b2e      	ldr	r3, [pc, #184]	; (800380c <HAL_ADC_ConfigChannel+0x654>)
 8003752:	4013      	ands	r3, r2
 8003754:	2b00      	cmp	r3, #0
 8003756:	f000 80c9 	beq.w	80038ec <HAL_ADC_ConfigChannel+0x734>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003762:	d004      	beq.n	800376e <HAL_ADC_ConfigChannel+0x5b6>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a29      	ldr	r2, [pc, #164]	; (8003810 <HAL_ADC_ConfigChannel+0x658>)
 800376a:	4293      	cmp	r3, r2
 800376c:	d101      	bne.n	8003772 <HAL_ADC_ConfigChannel+0x5ba>
 800376e:	4b29      	ldr	r3, [pc, #164]	; (8003814 <HAL_ADC_ConfigChannel+0x65c>)
 8003770:	e000      	b.n	8003774 <HAL_ADC_ConfigChannel+0x5bc>
 8003772:	4b29      	ldr	r3, [pc, #164]	; (8003818 <HAL_ADC_ConfigChannel+0x660>)
 8003774:	4618      	mov	r0, r3
 8003776:	f7ff f9c3 	bl	8002b00 <LL_ADC_GetCommonPathInternalCh>
 800377a:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	4a26      	ldr	r2, [pc, #152]	; (800381c <HAL_ADC_ConfigChannel+0x664>)
 8003784:	4293      	cmp	r3, r2
 8003786:	d004      	beq.n	8003792 <HAL_ADC_ConfigChannel+0x5da>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a24      	ldr	r2, [pc, #144]	; (8003820 <HAL_ADC_ConfigChannel+0x668>)
 800378e:	4293      	cmp	r3, r2
 8003790:	d14e      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x678>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003792:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003796:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800379a:	2b00      	cmp	r3, #0
 800379c:	d148      	bne.n	8003830 <HAL_ADC_ConfigChannel+0x678>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037a6:	d005      	beq.n	80037b4 <HAL_ADC_ConfigChannel+0x5fc>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a1d      	ldr	r2, [pc, #116]	; (8003824 <HAL_ADC_ConfigChannel+0x66c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	f040 8099 	bne.w	80038e6 <HAL_ADC_ConfigChannel+0x72e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037bc:	d004      	beq.n	80037c8 <HAL_ADC_ConfigChannel+0x610>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	4a13      	ldr	r2, [pc, #76]	; (8003810 <HAL_ADC_ConfigChannel+0x658>)
 80037c4:	4293      	cmp	r3, r2
 80037c6:	d101      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x614>
 80037c8:	4a12      	ldr	r2, [pc, #72]	; (8003814 <HAL_ADC_ConfigChannel+0x65c>)
 80037ca:	e000      	b.n	80037ce <HAL_ADC_ConfigChannel+0x616>
 80037cc:	4a12      	ldr	r2, [pc, #72]	; (8003818 <HAL_ADC_ConfigChannel+0x660>)
 80037ce:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80037d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80037d6:	4619      	mov	r1, r3
 80037d8:	4610      	mov	r0, r2
 80037da:	f7ff f97e 	bl	8002ada <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 80037de:	4b12      	ldr	r3, [pc, #72]	; (8003828 <HAL_ADC_ConfigChannel+0x670>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	099b      	lsrs	r3, r3, #6
 80037e4:	4a11      	ldr	r2, [pc, #68]	; (800382c <HAL_ADC_ConfigChannel+0x674>)
 80037e6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ea:	099a      	lsrs	r2, r3, #6
 80037ec:	4613      	mov	r3, r2
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	4413      	add	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80037f6:	e002      	b.n	80037fe <HAL_ADC_ConfigChannel+0x646>
          {
            wait_loop_index--;
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1f9      	bne.n	80037f8 <HAL_ADC_ConfigChannel+0x640>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003804:	e06f      	b.n	80038e6 <HAL_ADC_ConfigChannel+0x72e>
 8003806:	bf00      	nop
 8003808:	407f0000 	.word	0x407f0000
 800380c:	80080000 	.word	0x80080000
 8003810:	50000100 	.word	0x50000100
 8003814:	50000300 	.word	0x50000300
 8003818:	50000700 	.word	0x50000700
 800381c:	c3210000 	.word	0xc3210000
 8003820:	90c00010 	.word	0x90c00010
 8003824:	50000600 	.word	0x50000600
 8003828:	20000010 	.word	0x20000010
 800382c:	053e2d63 	.word	0x053e2d63
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	4a32      	ldr	r2, [pc, #200]	; (8003900 <HAL_ADC_ConfigChannel+0x748>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d125      	bne.n	8003886 <HAL_ADC_ConfigChannel+0x6ce>
 800383a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800383e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d11f      	bne.n	8003886 <HAL_ADC_ConfigChannel+0x6ce>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a2e      	ldr	r2, [pc, #184]	; (8003904 <HAL_ADC_ConfigChannel+0x74c>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d104      	bne.n	800385a <HAL_ADC_ConfigChannel+0x6a2>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a2c      	ldr	r2, [pc, #176]	; (8003908 <HAL_ADC_ConfigChannel+0x750>)
 8003856:	4293      	cmp	r3, r2
 8003858:	d047      	beq.n	80038ea <HAL_ADC_ConfigChannel+0x732>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003862:	d004      	beq.n	800386e <HAL_ADC_ConfigChannel+0x6b6>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a26      	ldr	r2, [pc, #152]	; (8003904 <HAL_ADC_ConfigChannel+0x74c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d101      	bne.n	8003872 <HAL_ADC_ConfigChannel+0x6ba>
 800386e:	4a27      	ldr	r2, [pc, #156]	; (800390c <HAL_ADC_ConfigChannel+0x754>)
 8003870:	e000      	b.n	8003874 <HAL_ADC_ConfigChannel+0x6bc>
 8003872:	4a27      	ldr	r2, [pc, #156]	; (8003910 <HAL_ADC_ConfigChannel+0x758>)
 8003874:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003878:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800387c:	4619      	mov	r1, r3
 800387e:	4610      	mov	r0, r2
 8003880:	f7ff f92b 	bl	8002ada <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003884:	e031      	b.n	80038ea <HAL_ADC_ConfigChannel+0x732>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a22      	ldr	r2, [pc, #136]	; (8003914 <HAL_ADC_ConfigChannel+0x75c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d12d      	bne.n	80038ec <HAL_ADC_ConfigChannel+0x734>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003890:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d127      	bne.n	80038ec <HAL_ADC_ConfigChannel+0x734>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a18      	ldr	r2, [pc, #96]	; (8003904 <HAL_ADC_ConfigChannel+0x74c>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d022      	beq.n	80038ec <HAL_ADC_ConfigChannel+0x734>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038ae:	d004      	beq.n	80038ba <HAL_ADC_ConfigChannel+0x702>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a13      	ldr	r2, [pc, #76]	; (8003904 <HAL_ADC_ConfigChannel+0x74c>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d101      	bne.n	80038be <HAL_ADC_ConfigChannel+0x706>
 80038ba:	4a14      	ldr	r2, [pc, #80]	; (800390c <HAL_ADC_ConfigChannel+0x754>)
 80038bc:	e000      	b.n	80038c0 <HAL_ADC_ConfigChannel+0x708>
 80038be:	4a14      	ldr	r2, [pc, #80]	; (8003910 <HAL_ADC_ConfigChannel+0x758>)
 80038c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80038c8:	4619      	mov	r1, r3
 80038ca:	4610      	mov	r0, r2
 80038cc:	f7ff f905 	bl	8002ada <LL_ADC_SetCommonPathInternalCh>
 80038d0:	e00c      	b.n	80038ec <HAL_ADC_ConfigChannel+0x734>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d6:	f043 0220 	orr.w	r2, r3, #32
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 80038e4:	e002      	b.n	80038ec <HAL_ADC_ConfigChannel+0x734>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80038e6:	bf00      	nop
 80038e8:	e000      	b.n	80038ec <HAL_ADC_ConfigChannel+0x734>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038ea:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80038f4:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 80038f8:	4618      	mov	r0, r3
 80038fa:	3798      	adds	r7, #152	; 0x98
 80038fc:	46bd      	mov	sp, r7
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	c7520000 	.word	0xc7520000
 8003904:	50000100 	.word	0x50000100
 8003908:	50000500 	.word	0x50000500
 800390c:	50000300 	.word	0x50000300
 8003910:	50000700 	.word	0x50000700
 8003914:	cb840000 	.word	0xcb840000

08003918 <LL_ADC_IsEnabled>:
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b01      	cmp	r3, #1
 800392a:	d101      	bne.n	8003930 <LL_ADC_IsEnabled+0x18>
 800392c:	2301      	movs	r3, #1
 800392e:	e000      	b.n	8003932 <LL_ADC_IsEnabled+0x1a>
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <LL_ADC_REG_IsConversionOngoing>:
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 0304 	and.w	r3, r3, #4
 800394e:	2b04      	cmp	r3, #4
 8003950:	d101      	bne.n	8003956 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003952:	2301      	movs	r3, #1
 8003954:	e000      	b.n	8003958 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003956:	2300      	movs	r3, #0
}
 8003958:	4618      	mov	r0, r3
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003964:	b590      	push	{r4, r7, lr}
 8003966:	b0a1      	sub	sp, #132	; 0x84
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800396e:	2300      	movs	r3, #0
 8003970:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800397a:	2b01      	cmp	r3, #1
 800397c:	d101      	bne.n	8003982 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 800397e:	2302      	movs	r3, #2
 8003980:	e0e3      	b.n	8003b4a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2201      	movs	r2, #1
 8003986:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003992:	d102      	bne.n	800399a <HAL_ADCEx_MultiModeConfigChannel+0x36>
 8003994:	4b6f      	ldr	r3, [pc, #444]	; (8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003996:	60bb      	str	r3, [r7, #8]
 8003998:	e009      	b.n	80039ae <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a6e      	ldr	r2, [pc, #440]	; (8003b58 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d102      	bne.n	80039aa <HAL_ADCEx_MultiModeConfigChannel+0x46>
 80039a4:	4b6d      	ldr	r3, [pc, #436]	; (8003b5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80039a6:	60bb      	str	r3, [r7, #8]
 80039a8:	e001      	b.n	80039ae <HAL_ADCEx_MultiModeConfigChannel+0x4a>
 80039aa:	2300      	movs	r3, #0
 80039ac:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d10b      	bne.n	80039cc <HAL_ADCEx_MultiModeConfigChannel+0x68>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b8:	f043 0220 	orr.w	r2, r3, #32
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	e0be      	b.n	8003b4a <HAL_ADCEx_MultiModeConfigChannel+0x1e6>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	4618      	mov	r0, r3
 80039d0:	f7ff ffb5 	bl	800393e <LL_ADC_REG_IsConversionOngoing>
 80039d4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff ffaf 	bl	800393e <LL_ADC_REG_IsConversionOngoing>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	f040 80a0 	bne.w	8003b28 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80039e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	f040 809c 	bne.w	8003b28 <HAL_ADCEx_MultiModeConfigChannel+0x1c4>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039f8:	d004      	beq.n	8003a04 <HAL_ADCEx_MultiModeConfigChannel+0xa0>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a55      	ldr	r2, [pc, #340]	; (8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d101      	bne.n	8003a08 <HAL_ADCEx_MultiModeConfigChannel+0xa4>
 8003a04:	4b56      	ldr	r3, [pc, #344]	; (8003b60 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003a06:	e000      	b.n	8003a0a <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8003a08:	4b56      	ldr	r3, [pc, #344]	; (8003b64 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003a0a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d04b      	beq.n	8003aac <HAL_ADCEx_MultiModeConfigChannel+0x148>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003a14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	6859      	ldr	r1, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003a26:	035b      	lsls	r3, r3, #13
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a2e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a38:	d004      	beq.n	8003a44 <HAL_ADCEx_MultiModeConfigChannel+0xe0>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a45      	ldr	r2, [pc, #276]	; (8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d10f      	bne.n	8003a64 <HAL_ADCEx_MultiModeConfigChannel+0x100>
 8003a44:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003a48:	f7ff ff66 	bl	8003918 <LL_ADC_IsEnabled>
 8003a4c:	4604      	mov	r4, r0
 8003a4e:	4841      	ldr	r0, [pc, #260]	; (8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003a50:	f7ff ff62 	bl	8003918 <LL_ADC_IsEnabled>
 8003a54:	4603      	mov	r3, r0
 8003a56:	4323      	orrs	r3, r4
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	bf0c      	ite	eq
 8003a5c:	2301      	moveq	r3, #1
 8003a5e:	2300      	movne	r3, #0
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	e012      	b.n	8003a8a <HAL_ADCEx_MultiModeConfigChannel+0x126>
 8003a64:	483c      	ldr	r0, [pc, #240]	; (8003b58 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8003a66:	f7ff ff57 	bl	8003918 <LL_ADC_IsEnabled>
 8003a6a:	4604      	mov	r4, r0
 8003a6c:	483b      	ldr	r0, [pc, #236]	; (8003b5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003a6e:	f7ff ff53 	bl	8003918 <LL_ADC_IsEnabled>
 8003a72:	4603      	mov	r3, r0
 8003a74:	431c      	orrs	r4, r3
 8003a76:	483c      	ldr	r0, [pc, #240]	; (8003b68 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003a78:	f7ff ff4e 	bl	8003918 <LL_ADC_IsEnabled>
 8003a7c:	4603      	mov	r3, r0
 8003a7e:	4323      	orrs	r3, r4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	bf0c      	ite	eq
 8003a84:	2301      	moveq	r3, #1
 8003a86:	2300      	movne	r3, #0
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d056      	beq.n	8003b3c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003a8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003a96:	f023 030f 	bic.w	r3, r3, #15
 8003a9a:	683a      	ldr	r2, [r7, #0]
 8003a9c:	6811      	ldr	r1, [r2, #0]
 8003a9e:	683a      	ldr	r2, [r7, #0]
 8003aa0:	6892      	ldr	r2, [r2, #8]
 8003aa2:	430a      	orrs	r2, r1
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aa8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003aaa:	e047      	b.n	8003b3c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003aac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003ab4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ab6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003ac0:	d004      	beq.n	8003acc <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a23      	ldr	r2, [pc, #140]	; (8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d10f      	bne.n	8003aec <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8003acc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003ad0:	f7ff ff22 	bl	8003918 <LL_ADC_IsEnabled>
 8003ad4:	4604      	mov	r4, r0
 8003ad6:	481f      	ldr	r0, [pc, #124]	; (8003b54 <HAL_ADCEx_MultiModeConfigChannel+0x1f0>)
 8003ad8:	f7ff ff1e 	bl	8003918 <LL_ADC_IsEnabled>
 8003adc:	4603      	mov	r3, r0
 8003ade:	4323      	orrs	r3, r4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	bf0c      	ite	eq
 8003ae4:	2301      	moveq	r3, #1
 8003ae6:	2300      	movne	r3, #0
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	e012      	b.n	8003b12 <HAL_ADCEx_MultiModeConfigChannel+0x1ae>
 8003aec:	481a      	ldr	r0, [pc, #104]	; (8003b58 <HAL_ADCEx_MultiModeConfigChannel+0x1f4>)
 8003aee:	f7ff ff13 	bl	8003918 <LL_ADC_IsEnabled>
 8003af2:	4604      	mov	r4, r0
 8003af4:	4819      	ldr	r0, [pc, #100]	; (8003b5c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003af6:	f7ff ff0f 	bl	8003918 <LL_ADC_IsEnabled>
 8003afa:	4603      	mov	r3, r0
 8003afc:	431c      	orrs	r4, r3
 8003afe:	481a      	ldr	r0, [pc, #104]	; (8003b68 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003b00:	f7ff ff0a 	bl	8003918 <LL_ADC_IsEnabled>
 8003b04:	4603      	mov	r3, r0
 8003b06:	4323      	orrs	r3, r4
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	bf0c      	ite	eq
 8003b0c:	2301      	moveq	r3, #1
 8003b0e:	2300      	movne	r3, #0
 8003b10:	b2db      	uxtb	r3, r3
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d012      	beq.n	8003b3c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003b16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003b1e:	f023 030f 	bic.w	r3, r3, #15
 8003b22:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003b24:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b26:	e009      	b.n	8003b3c <HAL_ADCEx_MultiModeConfigChannel+0x1d8>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2c:	f043 0220 	orr.w	r2, r3, #32
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b34:	2301      	movs	r3, #1
 8003b36:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003b3a:	e000      	b.n	8003b3e <HAL_ADCEx_MultiModeConfigChannel+0x1da>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003b3c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b46:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	3784      	adds	r7, #132	; 0x84
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd90      	pop	{r4, r7, pc}
 8003b52:	bf00      	nop
 8003b54:	50000100 	.word	0x50000100
 8003b58:	50000400 	.word	0x50000400
 8003b5c:	50000500 	.word	0x50000500
 8003b60:	50000300 	.word	0x50000300
 8003b64:	50000700 	.word	0x50000700
 8003b68:	50000600 	.word	0x50000600

08003b6c <LL_EXTI_EnableIT_0_31>:
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003b74:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <LL_EXTI_EnableIT_0_31+0x20>)
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	4904      	ldr	r1, [pc, #16]	; (8003b8c <LL_EXTI_EnableIT_0_31+0x20>)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	600b      	str	r3, [r1, #0]
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	40010400 	.word	0x40010400

08003b90 <LL_EXTI_EnableIT_32_63>:
{
 8003b90:	b480      	push	{r7}
 8003b92:	b083      	sub	sp, #12
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003b98:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <LL_EXTI_EnableIT_32_63+0x20>)
 8003b9a:	6a1a      	ldr	r2, [r3, #32]
 8003b9c:	4904      	ldr	r1, [pc, #16]	; (8003bb0 <LL_EXTI_EnableIT_32_63+0x20>)
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	620b      	str	r3, [r1, #32]
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr
 8003bb0:	40010400 	.word	0x40010400

08003bb4 <LL_EXTI_DisableIT_0_31>:
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003bbc:	4b06      	ldr	r3, [pc, #24]	; (8003bd8 <LL_EXTI_DisableIT_0_31+0x24>)
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	43db      	mvns	r3, r3
 8003bc4:	4904      	ldr	r1, [pc, #16]	; (8003bd8 <LL_EXTI_DisableIT_0_31+0x24>)
 8003bc6:	4013      	ands	r3, r2
 8003bc8:	600b      	str	r3, [r1, #0]
}
 8003bca:	bf00      	nop
 8003bcc:	370c      	adds	r7, #12
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd4:	4770      	bx	lr
 8003bd6:	bf00      	nop
 8003bd8:	40010400 	.word	0x40010400

08003bdc <LL_EXTI_DisableIT_32_63>:
{
 8003bdc:	b480      	push	{r7}
 8003bde:	b083      	sub	sp, #12
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003be4:	4b06      	ldr	r3, [pc, #24]	; (8003c00 <LL_EXTI_DisableIT_32_63+0x24>)
 8003be6:	6a1a      	ldr	r2, [r3, #32]
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	43db      	mvns	r3, r3
 8003bec:	4904      	ldr	r1, [pc, #16]	; (8003c00 <LL_EXTI_DisableIT_32_63+0x24>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	620b      	str	r3, [r1, #32]
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40010400 	.word	0x40010400

08003c04 <LL_EXTI_EnableEvent_0_31>:
{
 8003c04:	b480      	push	{r7}
 8003c06:	b083      	sub	sp, #12
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003c0c:	4b05      	ldr	r3, [pc, #20]	; (8003c24 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003c0e:	685a      	ldr	r2, [r3, #4]
 8003c10:	4904      	ldr	r1, [pc, #16]	; (8003c24 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	604b      	str	r3, [r1, #4]
}
 8003c18:	bf00      	nop
 8003c1a:	370c      	adds	r7, #12
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c22:	4770      	bx	lr
 8003c24:	40010400 	.word	0x40010400

08003c28 <LL_EXTI_EnableEvent_32_63>:
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8003c30:	4b05      	ldr	r3, [pc, #20]	; (8003c48 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003c32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c34:	4904      	ldr	r1, [pc, #16]	; (8003c48 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr
 8003c48:	40010400 	.word	0x40010400

08003c4c <LL_EXTI_DisableEvent_0_31>:
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	b083      	sub	sp, #12
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003c54:	4b06      	ldr	r3, [pc, #24]	; (8003c70 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	43db      	mvns	r3, r3
 8003c5c:	4904      	ldr	r1, [pc, #16]	; (8003c70 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003c5e:	4013      	ands	r3, r2
 8003c60:	604b      	str	r3, [r1, #4]
}
 8003c62:	bf00      	nop
 8003c64:	370c      	adds	r7, #12
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	40010400 	.word	0x40010400

08003c74 <LL_EXTI_DisableEvent_32_63>:
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8003c7c:	4b06      	ldr	r3, [pc, #24]	; (8003c98 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003c7e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	43db      	mvns	r3, r3
 8003c84:	4904      	ldr	r1, [pc, #16]	; (8003c98 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003c8a:	bf00      	nop
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40010400 	.word	0x40010400

08003c9c <LL_EXTI_EnableRisingTrig_0_31>:
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003ca4:	4b05      	ldr	r3, [pc, #20]	; (8003cbc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003ca6:	689a      	ldr	r2, [r3, #8]
 8003ca8:	4904      	ldr	r1, [pc, #16]	; (8003cbc <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	608b      	str	r3, [r1, #8]
}
 8003cb0:	bf00      	nop
 8003cb2:	370c      	adds	r7, #12
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cba:	4770      	bx	lr
 8003cbc:	40010400 	.word	0x40010400

08003cc0 <LL_EXTI_EnableRisingTrig_32_63>:
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b083      	sub	sp, #12
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003cc8:	4b05      	ldr	r3, [pc, #20]	; (8003ce0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003cca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ccc:	4904      	ldr	r1, [pc, #16]	; (8003ce0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003cd4:	bf00      	nop
 8003cd6:	370c      	adds	r7, #12
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cde:	4770      	bx	lr
 8003ce0:	40010400 	.word	0x40010400

08003ce4 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003cec:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003cee:	689a      	ldr	r2, [r3, #8]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	43db      	mvns	r3, r3
 8003cf4:	4904      	ldr	r1, [pc, #16]	; (8003d08 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	608b      	str	r3, [r1, #8]
}
 8003cfa:	bf00      	nop
 8003cfc:	370c      	adds	r7, #12
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	40010400 	.word	0x40010400

08003d0c <LL_EXTI_DisableRisingTrig_32_63>:
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b083      	sub	sp, #12
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8003d14:	4b06      	ldr	r3, [pc, #24]	; (8003d30 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003d16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	43db      	mvns	r3, r3
 8003d1c:	4904      	ldr	r1, [pc, #16]	; (8003d30 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003d1e:	4013      	ands	r3, r2
 8003d20:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	40010400 	.word	0x40010400

08003d34 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003d3e:	68da      	ldr	r2, [r3, #12]
 8003d40:	4904      	ldr	r1, [pc, #16]	; (8003d54 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60cb      	str	r3, [r1, #12]
}
 8003d48:	bf00      	nop
 8003d4a:	370c      	adds	r7, #12
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	40010400 	.word	0x40010400

08003d58 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8003d58:	b480      	push	{r7}
 8003d5a:	b083      	sub	sp, #12
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003d60:	4b05      	ldr	r3, [pc, #20]	; (8003d78 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003d62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d64:	4904      	ldr	r1, [pc, #16]	; (8003d78 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	40010400 	.word	0x40010400

08003d7c <LL_EXTI_DisableFallingTrig_0_31>:
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b083      	sub	sp, #12
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003d84:	4b06      	ldr	r3, [pc, #24]	; (8003da0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003d86:	68da      	ldr	r2, [r3, #12]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	43db      	mvns	r3, r3
 8003d8c:	4904      	ldr	r1, [pc, #16]	; (8003da0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003d8e:	4013      	ands	r3, r2
 8003d90:	60cb      	str	r3, [r1, #12]
}
 8003d92:	bf00      	nop
 8003d94:	370c      	adds	r7, #12
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40010400 	.word	0x40010400

08003da4 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8003da4:	b480      	push	{r7}
 8003da6:	b083      	sub	sp, #12
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8003dac:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	43db      	mvns	r3, r3
 8003db4:	4904      	ldr	r1, [pc, #16]	; (8003dc8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	40010400 	.word	0x40010400

08003dcc <LL_EXTI_ClearFlag_0_31>:
{
 8003dcc:	b480      	push	{r7}
 8003dce:	b083      	sub	sp, #12
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8003dd4:	4a04      	ldr	r2, [pc, #16]	; (8003de8 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6153      	str	r3, [r2, #20]
}
 8003dda:	bf00      	nop
 8003ddc:	370c      	adds	r7, #12
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr
 8003de6:	bf00      	nop
 8003de8:	40010400 	.word	0x40010400

08003dec <LL_EXTI_ClearFlag_32_63>:
  *         @arg @ref LL_EXTI_LINE_41
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_32_63(uint32_t ExtiLine)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR2, ExtiLine);
 8003df4:	4a04      	ldr	r2, [pc, #16]	; (8003e08 <LL_EXTI_ClearFlag_32_63+0x1c>)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6353      	str	r3, [r2, #52]	; 0x34
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	40010400 	.word	0x40010400

08003e0c <HAL_COMP_Init>:
  *         To unlock the configuration, perform a system reset.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b088      	sub	sp, #32
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr;
  uint32_t exti_line;
  uint32_t comp_voltage_scaler_initialized; /* Value "0" if comparator voltage scaler is not initialized */
  __IO uint32_t wait_loop_index = 0UL;
 8003e14:	2300      	movs	r3, #0
 8003e16:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	77fb      	strb	r3, [r7, #31]

  /* Check the COMP handle allocation and lock status */
  if(hcomp == NULL)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d102      	bne.n	8003e28 <HAL_COMP_Init+0x1c>
  {
    status = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	77fb      	strb	r3, [r7, #31]
 8003e26:	e180      	b.n	800412a <HAL_COMP_Init+0x31e>
  }
  else if(__HAL_COMP_IS_LOCKED(hcomp))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e36:	d102      	bne.n	8003e3e <HAL_COMP_Init+0x32>
  {
    status = HAL_ERROR;
 8003e38:	2301      	movs	r3, #1
 8003e3a:	77fb      	strb	r3, [r7, #31]
 8003e3c:	e175      	b.n	800412a <HAL_COMP_Init+0x31e>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_HYSTERESIS(hcomp->Init.Hysteresis));
    assert_param(IS_COMP_BLANKINGSRC_INSTANCE(hcomp->Instance, hcomp->Init.BlankingSrce));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));

    if(hcomp->State == HAL_COMP_STATE_RESET)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	7f5b      	ldrb	r3, [r3, #29]
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d108      	bne.n	8003e5a <HAL_COMP_Init+0x4e>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2200      	movs	r2, #0
 8003e4c:	771a      	strb	r2, [r3, #28]

      /* Set COMP error code to none */
      COMP_CLEAR_ERRORCODE(hcomp);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	621a      	str	r2, [r3, #32]
#else
      /* Init the low level hardware */
      /* Note: Internal control clock of the comparators must                 */
      /*       be enabled in "HAL_COMP_MspInit()"                             */
      /*       using "__HAL_RCC_SYSCFG_CLK_ENABLE()".                         */
      HAL_COMP_MspInit(hcomp);
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7fd f8ed 	bl	8001034 <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }

    /* Memorize voltage scaler state before initialization */
    comp_voltage_scaler_initialized = READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e64:	61bb      	str	r3, [r7, #24]

    /* Set COMP parameters */
    tmp_csr = (  hcomp->Init.InputMinus
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689a      	ldr	r2, [r3, #8]
               | hcomp->Init.InputPlus
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	431a      	orrs	r2, r3
               | hcomp->Init.BlankingSrce
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	695b      	ldr	r3, [r3, #20]
 8003e74:	431a      	orrs	r2, r3
               | hcomp->Init.Hysteresis
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	431a      	orrs	r2, r3
               | hcomp->Init.OutputPol
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	691b      	ldr	r3, [r3, #16]
    tmp_csr = (  hcomp->Init.InputMinus
 8003e80:	4313      	orrs	r3, r2
 8003e82:	617b      	str	r3, [r7, #20]
              );

    /* Set parameters in COMP register */
    /* Note: Update all bits except read-only, lock and enable bits */
    MODIFY_REG(hcomp->Instance->CSR,
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	4b98      	ldr	r3, [pc, #608]	; (80040ec <HAL_COMP_Init+0x2e0>)
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6812      	ldr	r2, [r2, #0]
 8003e92:	6979      	ldr	r1, [r7, #20]
 8003e94:	430b      	orrs	r3, r1
 8003e96:	6013      	str	r3, [r2, #0]
               tmp_csr
              );

    /* Delay for COMP scaler bridge voltage stabilization */
    /* Apply the delay if voltage scaler bridge is required and not already enabled */
    if ((READ_BIT(hcomp->Instance->CSR, COMP_CSR_SCALEN) != 0UL) &&
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d015      	beq.n	8003ed2 <HAL_COMP_Init+0xc6>
 8003ea6:	69bb      	ldr	r3, [r7, #24]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d112      	bne.n	8003ed2 <HAL_COMP_Init+0xc6>
    {
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((COMP_DELAY_VOLTAGE_SCALER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8003eac:	4b90      	ldr	r3, [pc, #576]	; (80040f0 <HAL_COMP_Init+0x2e4>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	099b      	lsrs	r3, r3, #6
 8003eb2:	4a90      	ldr	r2, [pc, #576]	; (80040f4 <HAL_COMP_Init+0x2e8>)
 8003eb4:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb8:	099a      	lsrs	r2, r3, #6
 8003eba:	4613      	mov	r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	4413      	add	r3, r2
 8003ec0:	009b      	lsls	r3, r3, #2
 8003ec2:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003ec4:	e002      	b.n	8003ecc <HAL_COMP_Init+0xc0>
      {
        wait_loop_index--;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	60fb      	str	r3, [r7, #12]
      while(wait_loop_index != 0UL)
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d1f9      	bne.n	8003ec6 <HAL_COMP_Init+0xba>
      }
    }

    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a88      	ldr	r2, [pc, #544]	; (80040f8 <HAL_COMP_Init+0x2ec>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d028      	beq.n	8003f2e <HAL_COMP_Init+0x122>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a86      	ldr	r2, [pc, #536]	; (80040fc <HAL_COMP_Init+0x2f0>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d020      	beq.n	8003f28 <HAL_COMP_Init+0x11c>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a85      	ldr	r2, [pc, #532]	; (8004100 <HAL_COMP_Init+0x2f4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d018      	beq.n	8003f22 <HAL_COMP_Init+0x116>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a83      	ldr	r2, [pc, #524]	; (8004104 <HAL_COMP_Init+0x2f8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d010      	beq.n	8003f1c <HAL_COMP_Init+0x110>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a82      	ldr	r2, [pc, #520]	; (8004108 <HAL_COMP_Init+0x2fc>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d008      	beq.n	8003f16 <HAL_COMP_Init+0x10a>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a80      	ldr	r2, [pc, #512]	; (800410c <HAL_COMP_Init+0x300>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d101      	bne.n	8003f12 <HAL_COMP_Init+0x106>
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e00f      	b.n	8003f32 <HAL_COMP_Init+0x126>
 8003f12:	2302      	movs	r3, #2
 8003f14:	e00d      	b.n	8003f32 <HAL_COMP_Init+0x126>
 8003f16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003f1a:	e00a      	b.n	8003f32 <HAL_COMP_Init+0x126>
 8003f1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003f20:	e007      	b.n	8003f32 <HAL_COMP_Init+0x126>
 8003f22:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8003f26:	e004      	b.n	8003f32 <HAL_COMP_Init+0x126>
 8003f28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f2c:	e001      	b.n	8003f32 <HAL_COMP_Init+0x126>
 8003f2e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003f32:	613b      	str	r3, [r7, #16]

    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != 0UL)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	f003 0303 	and.w	r3, r3, #3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	f000 80b6 	beq.w	80040ae <HAL_COMP_Init+0x2a2>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != 0UL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	f003 0310 	and.w	r3, r3, #16
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d011      	beq.n	8003f72 <HAL_COMP_Init+0x166>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a6e      	ldr	r2, [pc, #440]	; (800410c <HAL_COMP_Init+0x300>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d004      	beq.n	8003f62 <HAL_COMP_Init+0x156>
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a6c      	ldr	r2, [pc, #432]	; (8004110 <HAL_COMP_Init+0x304>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d103      	bne.n	8003f6a <HAL_COMP_Init+0x15e>
        {
          LL_EXTI_EnableRisingTrig_32_63(exti_line);
 8003f62:	6938      	ldr	r0, [r7, #16]
 8003f64:	f7ff feac 	bl	8003cc0 <LL_EXTI_EnableRisingTrig_32_63>
 8003f68:	e014      	b.n	8003f94 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_EnableRisingTrig_0_31(exti_line);
 8003f6a:	6938      	ldr	r0, [r7, #16]
 8003f6c:	f7ff fe96 	bl	8003c9c <LL_EXTI_EnableRisingTrig_0_31>
 8003f70:	e010      	b.n	8003f94 <HAL_COMP_Init+0x188>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a65      	ldr	r2, [pc, #404]	; (800410c <HAL_COMP_Init+0x300>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d004      	beq.n	8003f86 <HAL_COMP_Init+0x17a>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a63      	ldr	r2, [pc, #396]	; (8004110 <HAL_COMP_Init+0x304>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d103      	bne.n	8003f8e <HAL_COMP_Init+0x182>
        {
          LL_EXTI_DisableRisingTrig_32_63(exti_line);
 8003f86:	6938      	ldr	r0, [r7, #16]
 8003f88:	f7ff fec0 	bl	8003d0c <LL_EXTI_DisableRisingTrig_32_63>
 8003f8c:	e002      	b.n	8003f94 <HAL_COMP_Init+0x188>
        }
        else
        {
          LL_EXTI_DisableRisingTrig_0_31(exti_line);
 8003f8e:	6938      	ldr	r0, [r7, #16]
 8003f90:	f7ff fea8 	bl	8003ce4 <LL_EXTI_DisableRisingTrig_0_31>
        LL_EXTI_DisableRisingTrig_0_31(exti_line);
#endif
      }

      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != 0UL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	699b      	ldr	r3, [r3, #24]
 8003f98:	f003 0320 	and.w	r3, r3, #32
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d011      	beq.n	8003fc4 <HAL_COMP_Init+0x1b8>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a59      	ldr	r2, [pc, #356]	; (800410c <HAL_COMP_Init+0x300>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d004      	beq.n	8003fb4 <HAL_COMP_Init+0x1a8>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a58      	ldr	r2, [pc, #352]	; (8004110 <HAL_COMP_Init+0x304>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d103      	bne.n	8003fbc <HAL_COMP_Init+0x1b0>
        {
          LL_EXTI_EnableFallingTrig_32_63(exti_line);
 8003fb4:	6938      	ldr	r0, [r7, #16]
 8003fb6:	f7ff fecf 	bl	8003d58 <LL_EXTI_EnableFallingTrig_32_63>
 8003fba:	e014      	b.n	8003fe6 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_EnableFallingTrig_0_31(exti_line);
 8003fbc:	6938      	ldr	r0, [r7, #16]
 8003fbe:	f7ff feb9 	bl	8003d34 <LL_EXTI_EnableFallingTrig_0_31>
 8003fc2:	e010      	b.n	8003fe6 <HAL_COMP_Init+0x1da>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a50      	ldr	r2, [pc, #320]	; (800410c <HAL_COMP_Init+0x300>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d004      	beq.n	8003fd8 <HAL_COMP_Init+0x1cc>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a4f      	ldr	r2, [pc, #316]	; (8004110 <HAL_COMP_Init+0x304>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d103      	bne.n	8003fe0 <HAL_COMP_Init+0x1d4>
        {
          LL_EXTI_DisableFallingTrig_32_63(exti_line);
 8003fd8:	6938      	ldr	r0, [r7, #16]
 8003fda:	f7ff fee3 	bl	8003da4 <LL_EXTI_DisableFallingTrig_32_63>
 8003fde:	e002      	b.n	8003fe6 <HAL_COMP_Init+0x1da>
        }
        else
        {
          LL_EXTI_DisableFallingTrig_0_31(exti_line);
 8003fe0:	6938      	ldr	r0, [r7, #16]
 8003fe2:	f7ff fecb 	bl	8003d7c <LL_EXTI_DisableFallingTrig_0_31>
#endif
      }

      /* Clear COMP EXTI pending bit (if any) */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a48      	ldr	r2, [pc, #288]	; (800410c <HAL_COMP_Init+0x300>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d004      	beq.n	8003ffa <HAL_COMP_Init+0x1ee>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a46      	ldr	r2, [pc, #280]	; (8004110 <HAL_COMP_Init+0x304>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d103      	bne.n	8004002 <HAL_COMP_Init+0x1f6>
      {
        LL_EXTI_ClearFlag_32_63(exti_line);
 8003ffa:	6938      	ldr	r0, [r7, #16]
 8003ffc:	f7ff fef6 	bl	8003dec <LL_EXTI_ClearFlag_32_63>
 8004000:	e002      	b.n	8004008 <HAL_COMP_Init+0x1fc>
      }
      else
      {
        LL_EXTI_ClearFlag_0_31(exti_line);
 8004002:	6938      	ldr	r0, [r7, #16]
 8004004:	f7ff fee2 	bl	8003dcc <LL_EXTI_ClearFlag_0_31>
#else
      LL_EXTI_ClearFlag_0_31(exti_line);
#endif

      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != 0UL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	f003 0302 	and.w	r3, r3, #2
 8004010:	2b00      	cmp	r3, #0
 8004012:	d011      	beq.n	8004038 <HAL_COMP_Init+0x22c>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a3c      	ldr	r2, [pc, #240]	; (800410c <HAL_COMP_Init+0x300>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d004      	beq.n	8004028 <HAL_COMP_Init+0x21c>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a3b      	ldr	r2, [pc, #236]	; (8004110 <HAL_COMP_Init+0x304>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d103      	bne.n	8004030 <HAL_COMP_Init+0x224>
        {
          LL_EXTI_EnableEvent_32_63(exti_line);
 8004028:	6938      	ldr	r0, [r7, #16]
 800402a:	f7ff fdfd 	bl	8003c28 <LL_EXTI_EnableEvent_32_63>
 800402e:	e014      	b.n	800405a <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_EnableEvent_0_31(exti_line);
 8004030:	6938      	ldr	r0, [r7, #16]
 8004032:	f7ff fde7 	bl	8003c04 <LL_EXTI_EnableEvent_0_31>
 8004036:	e010      	b.n	800405a <HAL_COMP_Init+0x24e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a33      	ldr	r2, [pc, #204]	; (800410c <HAL_COMP_Init+0x300>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d004      	beq.n	800404c <HAL_COMP_Init+0x240>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a32      	ldr	r2, [pc, #200]	; (8004110 <HAL_COMP_Init+0x304>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d103      	bne.n	8004054 <HAL_COMP_Init+0x248>
        {
          LL_EXTI_DisableEvent_32_63(exti_line);
 800404c:	6938      	ldr	r0, [r7, #16]
 800404e:	f7ff fe11 	bl	8003c74 <LL_EXTI_DisableEvent_32_63>
 8004052:	e002      	b.n	800405a <HAL_COMP_Init+0x24e>
        }
        else
        {
          LL_EXTI_DisableEvent_0_31(exti_line);
 8004054:	6938      	ldr	r0, [r7, #16]
 8004056:	f7ff fdf9 	bl	8003c4c <LL_EXTI_DisableEvent_0_31>
        LL_EXTI_DisableEvent_0_31(exti_line);
#endif
      }

      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != 0UL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	2b00      	cmp	r3, #0
 8004064:	d011      	beq.n	800408a <HAL_COMP_Init+0x27e>
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a28      	ldr	r2, [pc, #160]	; (800410c <HAL_COMP_Init+0x300>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d004      	beq.n	800407a <HAL_COMP_Init+0x26e>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a26      	ldr	r2, [pc, #152]	; (8004110 <HAL_COMP_Init+0x304>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d103      	bne.n	8004082 <HAL_COMP_Init+0x276>
        {
          LL_EXTI_EnableIT_32_63(exti_line);
 800407a:	6938      	ldr	r0, [r7, #16]
 800407c:	f7ff fd88 	bl	8003b90 <LL_EXTI_EnableIT_32_63>
 8004080:	e04b      	b.n	800411a <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_EnableIT_0_31(exti_line);
 8004082:	6938      	ldr	r0, [r7, #16]
 8004084:	f7ff fd72 	bl	8003b6c <LL_EXTI_EnableIT_0_31>
 8004088:	e047      	b.n	800411a <HAL_COMP_Init+0x30e>
#endif
      }
      else
      {
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
        if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	4a1f      	ldr	r2, [pc, #124]	; (800410c <HAL_COMP_Init+0x300>)
 8004090:	4293      	cmp	r3, r2
 8004092:	d004      	beq.n	800409e <HAL_COMP_Init+0x292>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a1d      	ldr	r2, [pc, #116]	; (8004110 <HAL_COMP_Init+0x304>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d103      	bne.n	80040a6 <HAL_COMP_Init+0x29a>
        {
          LL_EXTI_DisableIT_32_63(exti_line);
 800409e:	6938      	ldr	r0, [r7, #16]
 80040a0:	f7ff fd9c 	bl	8003bdc <LL_EXTI_DisableIT_32_63>
 80040a4:	e039      	b.n	800411a <HAL_COMP_Init+0x30e>
        }
        else
        {
          LL_EXTI_DisableIT_0_31(exti_line);
 80040a6:	6938      	ldr	r0, [r7, #16]
 80040a8:	f7ff fd84 	bl	8003bb4 <LL_EXTI_DisableIT_0_31>
 80040ac:	e035      	b.n	800411a <HAL_COMP_Init+0x30e>
    }
    else
    {
      /* Disable EXTI event mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a16      	ldr	r2, [pc, #88]	; (800410c <HAL_COMP_Init+0x300>)
 80040b4:	4293      	cmp	r3, r2
 80040b6:	d004      	beq.n	80040c2 <HAL_COMP_Init+0x2b6>
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a14      	ldr	r2, [pc, #80]	; (8004110 <HAL_COMP_Init+0x304>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d103      	bne.n	80040ca <HAL_COMP_Init+0x2be>
      {
        LL_EXTI_DisableEvent_32_63(exti_line);
 80040c2:	6938      	ldr	r0, [r7, #16]
 80040c4:	f7ff fdd6 	bl	8003c74 <LL_EXTI_DisableEvent_32_63>
 80040c8:	e002      	b.n	80040d0 <HAL_COMP_Init+0x2c4>
      }
      else
      {
        LL_EXTI_DisableEvent_0_31(exti_line);
 80040ca:	6938      	ldr	r0, [r7, #16]
 80040cc:	f7ff fdbe 	bl	8003c4c <LL_EXTI_DisableEvent_0_31>
      LL_EXTI_DisableEvent_0_31(exti_line);
#endif

      /* Disable EXTI interrupt mode */
#if defined(STM32G474xx) || defined(STM32G484xx) || defined(STM32G473xx) || defined(STM32G483xx)
      if((hcomp->Instance == COMP6) || (hcomp->Instance == COMP7))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	4a0d      	ldr	r2, [pc, #52]	; (800410c <HAL_COMP_Init+0x300>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d004      	beq.n	80040e4 <HAL_COMP_Init+0x2d8>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a0c      	ldr	r2, [pc, #48]	; (8004110 <HAL_COMP_Init+0x304>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d117      	bne.n	8004114 <HAL_COMP_Init+0x308>
      {
        LL_EXTI_DisableIT_32_63(exti_line);
 80040e4:	6938      	ldr	r0, [r7, #16]
 80040e6:	f7ff fd79 	bl	8003bdc <LL_EXTI_DisableIT_32_63>
 80040ea:	e016      	b.n	800411a <HAL_COMP_Init+0x30e>
 80040ec:	ff007e0f 	.word	0xff007e0f
 80040f0:	20000010 	.word	0x20000010
 80040f4:	053e2d63 	.word	0x053e2d63
 80040f8:	40010200 	.word	0x40010200
 80040fc:	40010204 	.word	0x40010204
 8004100:	40010208 	.word	0x40010208
 8004104:	4001020c 	.word	0x4001020c
 8004108:	40010210 	.word	0x40010210
 800410c:	40010214 	.word	0x40010214
 8004110:	40010218 	.word	0x40010218
      }
      else
      {
        LL_EXTI_DisableIT_0_31(exti_line);
 8004114:	6938      	ldr	r0, [r7, #16]
 8004116:	f7ff fd4d 	bl	8003bb4 <LL_EXTI_DisableIT_0_31>
    }

    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	7f5b      	ldrb	r3, [r3, #29]
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d102      	bne.n	800412a <HAL_COMP_Init+0x31e>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	775a      	strb	r2, [r3, #29]
    }
  }

  return status;
 800412a:	7ffb      	ldrb	r3, [r7, #31]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3720      	adds	r7, #32
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <__NVIC_SetPriorityGrouping>:
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	f003 0307 	and.w	r3, r3, #7
 8004142:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004144:	4b0c      	ldr	r3, [pc, #48]	; (8004178 <__NVIC_SetPriorityGrouping+0x44>)
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800414a:	68ba      	ldr	r2, [r7, #8]
 800414c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004150:	4013      	ands	r3, r2
 8004152:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800415c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004160:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004164:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004166:	4a04      	ldr	r2, [pc, #16]	; (8004178 <__NVIC_SetPriorityGrouping+0x44>)
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	60d3      	str	r3, [r2, #12]
}
 800416c:	bf00      	nop
 800416e:	3714      	adds	r7, #20
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr
 8004178:	e000ed00 	.word	0xe000ed00

0800417c <__NVIC_GetPriorityGrouping>:
{
 800417c:	b480      	push	{r7}
 800417e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004180:	4b04      	ldr	r3, [pc, #16]	; (8004194 <__NVIC_GetPriorityGrouping+0x18>)
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	0a1b      	lsrs	r3, r3, #8
 8004186:	f003 0307 	and.w	r3, r3, #7
}
 800418a:	4618      	mov	r0, r3
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr
 8004194:	e000ed00 	.word	0xe000ed00

08004198 <__NVIC_EnableIRQ>:
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	4603      	mov	r3, r0
 80041a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	db0b      	blt.n	80041c2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041aa:	79fb      	ldrb	r3, [r7, #7]
 80041ac:	f003 021f 	and.w	r2, r3, #31
 80041b0:	4907      	ldr	r1, [pc, #28]	; (80041d0 <__NVIC_EnableIRQ+0x38>)
 80041b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041b6:	095b      	lsrs	r3, r3, #5
 80041b8:	2001      	movs	r0, #1
 80041ba:	fa00 f202 	lsl.w	r2, r0, r2
 80041be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80041c2:	bf00      	nop
 80041c4:	370c      	adds	r7, #12
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr
 80041ce:	bf00      	nop
 80041d0:	e000e100 	.word	0xe000e100

080041d4 <__NVIC_SetPriority>:
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	4603      	mov	r3, r0
 80041dc:	6039      	str	r1, [r7, #0]
 80041de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	db0a      	blt.n	80041fe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	b2da      	uxtb	r2, r3
 80041ec:	490c      	ldr	r1, [pc, #48]	; (8004220 <__NVIC_SetPriority+0x4c>)
 80041ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f2:	0112      	lsls	r2, r2, #4
 80041f4:	b2d2      	uxtb	r2, r2
 80041f6:	440b      	add	r3, r1
 80041f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80041fc:	e00a      	b.n	8004214 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	b2da      	uxtb	r2, r3
 8004202:	4908      	ldr	r1, [pc, #32]	; (8004224 <__NVIC_SetPriority+0x50>)
 8004204:	79fb      	ldrb	r3, [r7, #7]
 8004206:	f003 030f 	and.w	r3, r3, #15
 800420a:	3b04      	subs	r3, #4
 800420c:	0112      	lsls	r2, r2, #4
 800420e:	b2d2      	uxtb	r2, r2
 8004210:	440b      	add	r3, r1
 8004212:	761a      	strb	r2, [r3, #24]
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	e000e100 	.word	0xe000e100
 8004224:	e000ed00 	.word	0xe000ed00

08004228 <NVIC_EncodePriority>:
{
 8004228:	b480      	push	{r7}
 800422a:	b089      	sub	sp, #36	; 0x24
 800422c:	af00      	add	r7, sp, #0
 800422e:	60f8      	str	r0, [r7, #12]
 8004230:	60b9      	str	r1, [r7, #8]
 8004232:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	f1c3 0307 	rsb	r3, r3, #7
 8004242:	2b04      	cmp	r3, #4
 8004244:	bf28      	it	cs
 8004246:	2304      	movcs	r3, #4
 8004248:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	3304      	adds	r3, #4
 800424e:	2b06      	cmp	r3, #6
 8004250:	d902      	bls.n	8004258 <NVIC_EncodePriority+0x30>
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	3b03      	subs	r3, #3
 8004256:	e000      	b.n	800425a <NVIC_EncodePriority+0x32>
 8004258:	2300      	movs	r3, #0
 800425a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800425c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004260:	69bb      	ldr	r3, [r7, #24]
 8004262:	fa02 f303 	lsl.w	r3, r2, r3
 8004266:	43da      	mvns	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	401a      	ands	r2, r3
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004270:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004274:	697b      	ldr	r3, [r7, #20]
 8004276:	fa01 f303 	lsl.w	r3, r1, r3
 800427a:	43d9      	mvns	r1, r3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004280:	4313      	orrs	r3, r2
}
 8004282:	4618      	mov	r0, r3
 8004284:	3724      	adds	r7, #36	; 0x24
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
	...

08004290 <SysTick_Config>:
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b082      	sub	sp, #8
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	3b01      	subs	r3, #1
 800429c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80042a0:	d301      	bcc.n	80042a6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80042a2:	2301      	movs	r3, #1
 80042a4:	e00f      	b.n	80042c6 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80042a6:	4a0a      	ldr	r2, [pc, #40]	; (80042d0 <SysTick_Config+0x40>)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	3b01      	subs	r3, #1
 80042ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80042ae:	210f      	movs	r1, #15
 80042b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80042b4:	f7ff ff8e 	bl	80041d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80042b8:	4b05      	ldr	r3, [pc, #20]	; (80042d0 <SysTick_Config+0x40>)
 80042ba:	2200      	movs	r2, #0
 80042bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042be:	4b04      	ldr	r3, [pc, #16]	; (80042d0 <SysTick_Config+0x40>)
 80042c0:	2207      	movs	r2, #7
 80042c2:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
 80042ce:	bf00      	nop
 80042d0:	e000e010 	.word	0xe000e010

080042d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b082      	sub	sp, #8
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042dc:	6878      	ldr	r0, [r7, #4]
 80042de:	f7ff ff29 	bl	8004134 <__NVIC_SetPriorityGrouping>
}
 80042e2:	bf00      	nop
 80042e4:	3708      	adds	r7, #8
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b086      	sub	sp, #24
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	4603      	mov	r3, r0
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	607a      	str	r2, [r7, #4]
 80042f6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80042f8:	f7ff ff40 	bl	800417c <__NVIC_GetPriorityGrouping>
 80042fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80042fe:	687a      	ldr	r2, [r7, #4]
 8004300:	68b9      	ldr	r1, [r7, #8]
 8004302:	6978      	ldr	r0, [r7, #20]
 8004304:	f7ff ff90 	bl	8004228 <NVIC_EncodePriority>
 8004308:	4602      	mov	r2, r0
 800430a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800430e:	4611      	mov	r1, r2
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff ff5f 	bl	80041d4 <__NVIC_SetPriority>
}
 8004316:	bf00      	nop
 8004318:	3718      	adds	r7, #24
 800431a:	46bd      	mov	sp, r7
 800431c:	bd80      	pop	{r7, pc}

0800431e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800431e:	b580      	push	{r7, lr}
 8004320:	b082      	sub	sp, #8
 8004322:	af00      	add	r7, sp, #0
 8004324:	4603      	mov	r3, r0
 8004326:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800432c:	4618      	mov	r0, r3
 800432e:	f7ff ff33 	bl	8004198 <__NVIC_EnableIRQ>
}
 8004332:	bf00      	nop
 8004334:	3708      	adds	r7, #8
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800433a:	b580      	push	{r7, lr}
 800433c:	b082      	sub	sp, #8
 800433e:	af00      	add	r7, sp, #0
 8004340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff ffa4 	bl	8004290 <SysTick_Config>
 8004348:	4603      	mov	r3, r0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3708      	adds	r7, #8
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004352:	b580      	push	{r7, lr}
 8004354:	b082      	sub	sp, #8
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e014      	b.n	800438e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	791b      	ldrb	r3, [r3, #4]
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d105      	bne.n	800437a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2200      	movs	r2, #0
 8004372:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	f7fc ff13 	bl	80011a0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2202      	movs	r2, #2
 800437e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_DAC_Start>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004396:	b580      	push	{r7, lr}
 8004398:	b082      	sub	sp, #8
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
 800439e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	795b      	ldrb	r3, [r3, #5]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d101      	bne.n	80043ac <HAL_DAC_Start+0x16>
 80043a8:	2302      	movs	r3, #2
 80043aa:	e043      	b.n	8004434 <HAL_DAC_Start+0x9e>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2201      	movs	r2, #1
 80043b0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2202      	movs	r2, #2
 80043b6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6819      	ldr	r1, [r3, #0]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	f003 0310 	and.w	r3, r3, #16
 80043c4:	2201      	movs	r2, #1
 80043c6:	409a      	lsls	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before using peripheral after enabling it */
  HAL_Delay(1);
 80043d0:	2001      	movs	r0, #1
 80043d2:	f7fe fb4d 	bl	8002a70 <HAL_Delay>

  if (Channel == DAC_CHANNEL_1)
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d10f      	bne.n	80043fc <HAL_DAC_Start+0x66>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80043e6:	2b02      	cmp	r3, #2
 80043e8:	d11d      	bne.n	8004426 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f042 0201 	orr.w	r2, r2, #1
 80043f8:	605a      	str	r2, [r3, #4]
 80043fa:	e014      	b.n	8004426 <HAL_DAC_Start+0x90>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	f003 0310 	and.w	r3, r3, #16
 800440c:	2102      	movs	r1, #2
 800440e:	fa01 f303 	lsl.w	r3, r1, r3
 8004412:	429a      	cmp	r2, r3
 8004414:	d107      	bne.n	8004426 <HAL_DAC_Start+0x90>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	685a      	ldr	r2, [r3, #4]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f042 0202 	orr.w	r2, r2, #2
 8004424:	605a      	str	r2, [r3, #4]
    }
  }

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2201      	movs	r2, #1
 800442a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004432:	2300      	movs	r3, #0
}
 8004434:	4618      	mov	r0, r3
 8004436:	3708      	adds	r7, #8
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	60f8      	str	r0, [r7, #12]
 8004444:	60b9      	str	r1, [r7, #8]
 8004446:	607a      	str	r2, [r7, #4]
 8004448:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 800444a:	2300      	movs	r3, #0
 800444c:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	795b      	ldrb	r3, [r3, #5]
 8004452:	2b01      	cmp	r3, #1
 8004454:	d101      	bne.n	800445a <HAL_DAC_Start_DMA+0x1e>
 8004456:	2302      	movs	r3, #2
 8004458:	e0a1      	b.n	800459e <HAL_DAC_Start_DMA+0x162>
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2201      	movs	r2, #1
 800445e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2202      	movs	r2, #2
 8004464:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d12a      	bne.n	80044c2 <HAL_DAC_Start_DMA+0x86>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	4a4d      	ldr	r2, [pc, #308]	; (80045a8 <HAL_DAC_Start_DMA+0x16c>)
 8004472:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	689b      	ldr	r3, [r3, #8]
 8004478:	4a4c      	ldr	r2, [pc, #304]	; (80045ac <HAL_DAC_Start_DMA+0x170>)
 800447a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	689b      	ldr	r3, [r3, #8]
 8004480:	4a4b      	ldr	r2, [pc, #300]	; (80045b0 <HAL_DAC_Start_DMA+0x174>)
 8004482:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681a      	ldr	r2, [r3, #0]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004492:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8004494:	6a3b      	ldr	r3, [r7, #32]
 8004496:	2b04      	cmp	r3, #4
 8004498:	d009      	beq.n	80044ae <HAL_DAC_Start_DMA+0x72>
 800449a:	2b08      	cmp	r3, #8
 800449c:	d00c      	beq.n	80044b8 <HAL_DAC_Start_DMA+0x7c>
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d000      	beq.n	80044a4 <HAL_DAC_Start_DMA+0x68>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 80044a2:	e039      	b.n	8004518 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	3308      	adds	r3, #8
 80044aa:	613b      	str	r3, [r7, #16]
        break;
 80044ac:	e034      	b.n	8004518 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	330c      	adds	r3, #12
 80044b4:	613b      	str	r3, [r7, #16]
        break;
 80044b6:	e02f      	b.n	8004518 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3310      	adds	r3, #16
 80044be:	613b      	str	r3, [r7, #16]
        break;
 80044c0:	e02a      	b.n	8004518 <HAL_DAC_Start_DMA+0xdc>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	4a3b      	ldr	r2, [pc, #236]	; (80045b4 <HAL_DAC_Start_DMA+0x178>)
 80044c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	4a3a      	ldr	r2, [pc, #232]	; (80045b8 <HAL_DAC_Start_DMA+0x17c>)
 80044d0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	4a39      	ldr	r2, [pc, #228]	; (80045bc <HAL_DAC_Start_DMA+0x180>)
 80044d8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80044e8:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	2b04      	cmp	r3, #4
 80044ee:	d009      	beq.n	8004504 <HAL_DAC_Start_DMA+0xc8>
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d00c      	beq.n	800450e <HAL_DAC_Start_DMA+0xd2>
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d000      	beq.n	80044fa <HAL_DAC_Start_DMA+0xbe>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80044f8:	e00e      	b.n	8004518 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	3314      	adds	r3, #20
 8004500:	613b      	str	r3, [r7, #16]
        break;
 8004502:	e009      	b.n	8004518 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3318      	adds	r3, #24
 800450a:	613b      	str	r3, [r7, #16]
        break;
 800450c:	e004      	b.n	8004518 <HAL_DAC_Start_DMA+0xdc>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	331c      	adds	r3, #28
 8004514:	613b      	str	r3, [r7, #16]
        break;
 8004516:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d111      	bne.n	8004542 <HAL_DAC_Start_DMA+0x106>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800452c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6898      	ldr	r0, [r3, #8]
 8004532:	6879      	ldr	r1, [r7, #4]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	693a      	ldr	r2, [r7, #16]
 8004538:	f000 fbb2 	bl	8004ca0 <HAL_DMA_Start_IT>
 800453c:	4603      	mov	r3, r0
 800453e:	75fb      	strb	r3, [r7, #23]
 8004540:	e010      	b.n	8004564 <HAL_DAC_Start_DMA+0x128>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8004550:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	68d8      	ldr	r0, [r3, #12]
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	f000 fba0 	bl	8004ca0 <HAL_DMA_Start_IT>
 8004560:	4603      	mov	r3, r0
 8004562:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2200      	movs	r2, #0
 8004568:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800456a:	7dfb      	ldrb	r3, [r7, #23]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d10f      	bne.n	8004590 <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6819      	ldr	r1, [r3, #0]
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	f003 0310 	and.w	r3, r3, #16
 800457c:	2201      	movs	r2, #1
 800457e:	409a      	lsls	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    HAL_Delay(1);
 8004588:	2001      	movs	r0, #1
 800458a:	f7fe fa71 	bl	8002a70 <HAL_Delay>
 800458e:	e005      	b.n	800459c <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	691b      	ldr	r3, [r3, #16]
 8004594:	f043 0204 	orr.w	r2, r3, #4
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800459c:	7dfb      	ldrb	r3, [r7, #23]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	08004a3d 	.word	0x08004a3d
 80045ac:	08004a5f 	.word	0x08004a5f
 80045b0:	08004a7b 	.word	0x08004a7b
 80045b4:	08004ae5 	.word	0x08004ae5
 80045b8:	08004b07 	.word	0x08004b07
 80045bc:	08004b23 	.word	0x08004b23

080045c0 <HAL_DAC_Stop_DMA>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
 80045c8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6819      	ldr	r1, [r3, #0]
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	f003 0310 	and.w	r3, r3, #16
 80045d6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80045da:	fa02 f303 	lsl.w	r3, r2, r3
 80045de:	43da      	mvns	r2, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	400a      	ands	r2, r1
 80045e6:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	6819      	ldr	r1, [r3, #0]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	f003 0310 	and.w	r3, r3, #16
 80045f4:	2201      	movs	r2, #1
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	43da      	mvns	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	400a      	ands	r2, r1
 8004602:	601a      	str	r2, [r3, #0]
  /* Ensure minimum wait before enabling peripheral after disabling it */
  HAL_Delay(1);
 8004604:	2001      	movs	r0, #1
 8004606:	f7fe fa33 	bl	8002a70 <HAL_Delay>

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d10f      	bne.n	8004630 <HAL_DAC_Stop_DMA+0x70>
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle1);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	4618      	mov	r0, r3
 8004616:	f000 fbbe 	bl	8004d96 <HAL_DMA_Abort>
 800461a:	4603      	mov	r3, r0
 800461c:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	681a      	ldr	r2, [r3, #0]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800462c:	601a      	str	r2, [r3, #0]
 800462e:	e00e      	b.n	800464e <HAL_DAC_Stop_DMA+0x8e>
  }
  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    status = HAL_DMA_Abort(hdac->DMA_Handle2);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	68db      	ldr	r3, [r3, #12]
 8004634:	4618      	mov	r0, r3
 8004636:	f000 fbae 	bl	8004d96 <HAL_DMA_Abort>
 800463a:	4603      	mov	r3, r0
 800463c:	73fb      	strb	r3, [r7, #15]

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800464c:	601a      	str	r2, [r3, #0]
  }

  /* Check if DMA Channel effectively disabled */
  if (status != HAL_OK)
 800464e:	7bfb      	ldrb	r3, [r7, #15]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d003      	beq.n	800465c <HAL_DAC_Stop_DMA+0x9c>
  {
    /* Update DAC state machine to error */
    hdac->State = HAL_DAC_STATE_ERROR;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2204      	movs	r2, #4
 8004658:	711a      	strb	r2, [r3, #4]
 800465a:	e002      	b.n	8004662 <HAL_DAC_Stop_DMA+0xa2>
  }
  else
  {
    /* Change DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2201      	movs	r2, #1
 8004660:	711a      	strb	r2, [r3, #4]
  }

  /* Return function status */
  return status;
 8004662:	7bfb      	ldrb	r3, [r7, #15]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3710      	adds	r7, #16
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800466c:	b480      	push	{r7}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 800467a:	2300      	movs	r3, #0
 800467c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  /* In case DMA Double data mode is activated, DATA range is almost full uin32_t one: no check */
  if ((hdac->Instance->MCR & (DAC_MCR_DMADOUBLE1 << (Channel & 0x10UL))) == 0UL)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
  {
    assert_param(IS_DAC_DATA(Data));
  }

  tmp = (uint32_t)hdac->Instance;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800468a:	68bb      	ldr	r3, [r7, #8]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d105      	bne.n	800469c <HAL_DAC_SetValue+0x30>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	4413      	add	r3, r2
 8004696:	3308      	adds	r3, #8
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	e004      	b.n	80046a6 <HAL_DAC_SetValue+0x3a>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	4413      	add	r3, r2
 80046a2:	3314      	adds	r3, #20
 80046a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	461a      	mov	r2, r3
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80046ae:	2300      	movs	r3, #0
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	371c      	adds	r7, #28
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr

080046bc <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr

080046d0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80046d8:	bf00      	nop
 80046da:	370c      	adds	r7, #12
 80046dc:	46bd      	mov	sp, r7
 80046de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e2:	4770      	bx	lr

080046e4 <HAL_DAC_ConfigChannel>:
  *         (1) On this STM32 serie, parameter not available on all instances.
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08a      	sub	sp, #40	; 0x28
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	61fb      	str	r3, [r7, #28]
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	795b      	ldrb	r3, [r3, #5]
 80046f8:	2b01      	cmp	r3, #1
 80046fa:	d101      	bne.n	8004700 <HAL_DAC_ConfigChannel+0x1c>
 80046fc:	2302      	movs	r3, #2
 80046fe:	e194      	b.n	8004a2a <HAL_DAC_ConfigChannel+0x346>
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2201      	movs	r2, #1
 8004704:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	2202      	movs	r2, #2
 800470a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	689b      	ldr	r3, [r3, #8]
 8004710:	2b04      	cmp	r3, #4
 8004712:	d174      	bne.n	80047fe <HAL_DAC_ConfigChannel+0x11a>
    /* Sample on old configuration */
  {
    /* SampleTime */
    if (Channel == DAC_CHANNEL_1)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d137      	bne.n	800478a <HAL_DAC_ConfigChannel+0xa6>
    {
      /* Get timeout */
      tickstart = HAL_GetTick();
 800471a:	f7fe f99d 	bl	8002a58 <HAL_GetTick>
 800471e:	61f8      	str	r0, [r7, #28]

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004720:	e011      	b.n	8004746 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004722:	f7fe f999 	bl	8002a58 <HAL_GetTick>
 8004726:	4602      	mov	r2, r0
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	2b01      	cmp	r3, #1
 800472e:	d90a      	bls.n	8004746 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	691b      	ldr	r3, [r3, #16]
 8004734:	f043 0208 	orr.w	r2, r3, #8
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	2203      	movs	r2, #3
 8004740:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e171      	b.n	8004a2a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004750:	2b00      	cmp	r3, #0
 8004752:	d1e6      	bne.n	8004722 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8004754:	2001      	movs	r0, #1
 8004756:	f7fe f98b 	bl	8002a70 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68ba      	ldr	r2, [r7, #8]
 8004760:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004762:	641a      	str	r2, [r3, #64]	; 0x40
 8004764:	e01e      	b.n	80047a4 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004766:	f7fe f977 	bl	8002a58 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b01      	cmp	r3, #1
 8004772:	d90a      	bls.n	800478a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	f043 0208 	orr.w	r2, r3, #8
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2203      	movs	r2, #3
 8004784:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8004786:	2303      	movs	r3, #3
 8004788:	e14f      	b.n	8004a2a <HAL_DAC_ConfigChannel+0x346>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004790:	2b00      	cmp	r3, #0
 8004792:	dbe8      	blt.n	8004766 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8004794:	2001      	movs	r0, #1
 8004796:	f7fe f96b 	bl	8002a70 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047a2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	f003 0310 	and.w	r3, r3, #16
 80047b0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80047b4:	fa01 f303 	lsl.w	r3, r1, r3
 80047b8:	43db      	mvns	r3, r3
 80047ba:	ea02 0103 	and.w	r1, r2, r3
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f003 0310 	and.w	r3, r3, #16
 80047c8:	409a      	lsls	r2, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f003 0310 	and.w	r3, r3, #16
 80047de:	21ff      	movs	r1, #255	; 0xff
 80047e0:	fa01 f303 	lsl.w	r3, r1, r3
 80047e4:	43db      	mvns	r3, r3
 80047e6:	ea02 0103 	and.w	r1, r2, r3
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	f003 0310 	and.w	r3, r3, #16
 80047f4:	409a      	lsls	r2, r3
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	2b01      	cmp	r3, #1
 8004804:	d11d      	bne.n	8004842 <HAL_DAC_ConfigChannel+0x15e>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800480c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f003 0310 	and.w	r3, r3, #16
 8004814:	221f      	movs	r2, #31
 8004816:	fa02 f303 	lsl.w	r3, r2, r3
 800481a:	43db      	mvns	r3, r3
 800481c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800481e:	4013      	ands	r3, r2
 8004820:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	6a1b      	ldr	r3, [r3, #32]
 8004826:	61bb      	str	r3, [r7, #24]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f003 0310 	and.w	r3, r3, #16
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004836:	4313      	orrs	r3, r2
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004840:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f003 0310 	and.w	r3, r3, #16
 8004850:	2207      	movs	r2, #7
 8004852:	fa02 f303 	lsl.w	r3, r2, r3
 8004856:	43db      	mvns	r3, r3
 8004858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800485a:	4013      	ands	r3, r2
 800485c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_EXTERNAL) == DAC_CHIPCONNECT_EXTERNAL)
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	f003 0301 	and.w	r3, r3, #1
 8004866:	2b00      	cmp	r3, #0
 8004868:	d002      	beq.n	8004870 <HAL_DAC_ConfigChannel+0x18c>
  {
    connectOnChip = 0x00000000UL;
 800486a:	2300      	movs	r3, #0
 800486c:	623b      	str	r3, [r7, #32]
 800486e:	e011      	b.n	8004894 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else if ((sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_INTERNAL) == DAC_CHIPCONNECT_INTERNAL)
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	699b      	ldr	r3, [r3, #24]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d002      	beq.n	8004882 <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800487c:	2301      	movs	r3, #1
 800487e:	623b      	str	r3, [r7, #32]
 8004880:	e008      	b.n	8004894 <HAL_DAC_ConfigChannel+0x1b0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral & DAC_CHIPCONNECT_BOTH) == DAC_CHIPCONNECT_BOTH */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	695b      	ldr	r3, [r3, #20]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d102      	bne.n	8004890 <HAL_DAC_ConfigChannel+0x1ac>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 800488a:	2301      	movs	r3, #1
 800488c:	623b      	str	r3, [r7, #32]
 800488e:	e001      	b.n	8004894 <HAL_DAC_ConfigChannel+0x1b0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004890:	2300      	movs	r3, #0
 8004892:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	4313      	orrs	r3, r2
 800489e:	6a3a      	ldr	r2, [r7, #32]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f003 0310 	and.w	r3, r3, #16
 80048aa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	43db      	mvns	r3, r3
 80048b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048b6:	4013      	ands	r3, r2
 80048b8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	791b      	ldrb	r3, [r3, #4]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d102      	bne.n	80048c8 <HAL_DAC_ConfigChannel+0x1e4>
 80048c2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048c6:	e000      	b.n	80048ca <HAL_DAC_ConfigChannel+0x1e6>
 80048c8:	2300      	movs	r3, #0
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	4313      	orrs	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f003 0310 	and.w	r3, r3, #16
 80048d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048da:	fa02 f303 	lsl.w	r3, r2, r3
 80048de:	43db      	mvns	r3, r3
 80048e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048e2:	4013      	ands	r3, r2
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80048e6:	68bb      	ldr	r3, [r7, #8]
 80048e8:	795b      	ldrb	r3, [r3, #5]
 80048ea:	2b01      	cmp	r3, #1
 80048ec:	d102      	bne.n	80048f4 <HAL_DAC_ConfigChannel+0x210>
 80048ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048f2:	e000      	b.n	80048f6 <HAL_DAC_ConfigChannel+0x212>
 80048f4:	2300      	movs	r3, #0
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80048fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fe:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004902:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b02      	cmp	r3, #2
 800490a:	d114      	bne.n	8004936 <HAL_DAC_ConfigChannel+0x252>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800490c:	f001 faf8 	bl	8005f00 <HAL_RCC_GetHCLKFreq>
 8004910:	6178      	str	r0, [r7, #20]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	4a47      	ldr	r2, [pc, #284]	; (8004a34 <HAL_DAC_ConfigChannel+0x350>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d904      	bls.n	8004924 <HAL_DAC_ConfigChannel+0x240>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 800491a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800491c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004920:	627b      	str	r3, [r7, #36]	; 0x24
 8004922:	e00d      	b.n	8004940 <HAL_DAC_ConfigChannel+0x25c>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	4a44      	ldr	r2, [pc, #272]	; (8004a38 <HAL_DAC_ConfigChannel+0x354>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d909      	bls.n	8004940 <HAL_DAC_ConfigChannel+0x25c>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800492c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800492e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004932:	627b      	str	r3, [r7, #36]	; 0x24
 8004934:	e004      	b.n	8004940 <HAL_DAC_ConfigChannel+0x25c>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800493c:	4313      	orrs	r3, r2
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f003 0310 	and.w	r3, r3, #16
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	fa02 f303 	lsl.w	r3, r2, r3
 800494c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800494e:	4313      	orrs	r3, r2
 8004950:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004958:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	6819      	ldr	r1, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	f003 0310 	and.w	r3, r3, #16
 8004966:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800496a:	fa02 f303 	lsl.w	r3, r2, r3
 800496e:	43da      	mvns	r2, r3
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	400a      	ands	r2, r1
 8004976:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f003 0310 	and.w	r3, r3, #16
 8004986:	f640 72fe 	movw	r2, #4094	; 0xffe
 800498a:	fa02 f303 	lsl.w	r3, r2, r3
 800498e:	43db      	mvns	r3, r3
 8004990:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004992:	4013      	ands	r3, r2
 8004994:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	61bb      	str	r3, [r7, #24]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f003 0310 	and.w	r3, r3, #16
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049aa:	4313      	orrs	r3, r2
 80049ac:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6819      	ldr	r1, [r3, #0]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	f003 0310 	and.w	r3, r3, #16
 80049c2:	22c0      	movs	r2, #192	; 0xc0
 80049c4:	fa02 f303 	lsl.w	r3, r2, r3
 80049c8:	43da      	mvns	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	400a      	ands	r2, r1
 80049d0:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	089b      	lsrs	r3, r3, #2
 80049d8:	f003 030f 	and.w	r3, r3, #15
 80049dc:	61bb      	str	r3, [r7, #24]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	089b      	lsrs	r3, r3, #2
 80049e4:	021b      	lsls	r3, r3, #8
 80049e6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1) << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	f003 0310 	and.w	r3, r3, #16
 80049fc:	f640 710f 	movw	r1, #3855	; 0xf0f
 8004a00:	fa01 f303 	lsl.w	r3, r1, r3
 8004a04:	43db      	mvns	r3, r3
 8004a06:	ea02 0103 	and.w	r1, r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f003 0310 	and.w	r3, r3, #16
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	409a      	lsls	r2, r3
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	430a      	orrs	r2, r1
 8004a1a:	661a      	str	r2, [r3, #96]	; 0x60
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2201      	movs	r2, #1
 8004a20:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3728      	adds	r7, #40	; 0x28
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	bd80      	pop	{r7, pc}
 8004a32:	bf00      	nop
 8004a34:	09896800 	.word	0x09896800
 8004a38:	04c4b400 	.word	0x04c4b400

08004a3c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a48:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f7ff fe36 	bl	80046bc <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	2201      	movs	r2, #1
 8004a54:	711a      	strb	r2, [r3, #4]
}
 8004a56:	bf00      	nop
 8004a58:	3710      	adds	r7, #16
 8004a5a:	46bd      	mov	sp, r7
 8004a5c:	bd80      	pop	{r7, pc}

08004a5e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8004a5e:	b580      	push	{r7, lr}
 8004a60:	b084      	sub	sp, #16
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a6a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f7ff fe2f 	bl	80046d0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004a72:	bf00      	nop
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}

08004a7a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8004a7a:	b580      	push	{r7, lr}
 8004a7c:	b084      	sub	sp, #16
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a86:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	f043 0204 	orr.w	r2, r3, #4
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f7fd f828 	bl	8001aea <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	711a      	strb	r2, [r3, #4]
}
 8004aa0:	bf00      	nop
 8004aa2:	3710      	adds	r7, #16
 8004aa4:	46bd      	mov	sp, r7
 8004aa6:	bd80      	pop	{r7, pc}

08004aa8 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b083      	sub	sp, #12
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004ab0:	bf00      	nop
 8004ab2:	370c      	adds	r7, #12
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aba:	4770      	bx	lr

08004abc <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b084      	sub	sp, #16
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004af0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004af2:	68f8      	ldr	r0, [r7, #12]
 8004af4:	f7ff ffd8 	bl	8004aa8 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	2201      	movs	r2, #1
 8004afc:	711a      	strb	r2, [r3, #4]
}
 8004afe:	bf00      	nop
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b084      	sub	sp, #16
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b12:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004b14:	68f8      	ldr	r0, [r7, #12]
 8004b16:	f7ff ffd1 	bl	8004abc <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004b1a:	bf00      	nop
 8004b1c:	3710      	adds	r7, #16
 8004b1e:	46bd      	mov	sp, r7
 8004b20:	bd80      	pop	{r7, pc}

08004b22 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004b22:	b580      	push	{r7, lr}
 8004b24:	b084      	sub	sp, #16
 8004b26:	af00      	add	r7, sp, #0
 8004b28:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b2e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	691b      	ldr	r3, [r3, #16]
 8004b34:	f043 0204 	orr.w	r2, r3, #4
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004b3c:	68f8      	ldr	r0, [r7, #12]
 8004b3e:	f7ff ffc7 	bl	8004ad0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2201      	movs	r2, #1
 8004b46:	711a      	strb	r2, [r3, #4]
}
 8004b48:	bf00      	nop
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e08d      	b.n	8004c7e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	461a      	mov	r2, r3
 8004b68:	4b47      	ldr	r3, [pc, #284]	; (8004c88 <HAL_DMA_Init+0x138>)
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d80f      	bhi.n	8004b8e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	461a      	mov	r2, r3
 8004b74:	4b45      	ldr	r3, [pc, #276]	; (8004c8c <HAL_DMA_Init+0x13c>)
 8004b76:	4413      	add	r3, r2
 8004b78:	4a45      	ldr	r2, [pc, #276]	; (8004c90 <HAL_DMA_Init+0x140>)
 8004b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b7e:	091b      	lsrs	r3, r3, #4
 8004b80:	009a      	lsls	r2, r3, #2
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	4a42      	ldr	r2, [pc, #264]	; (8004c94 <HAL_DMA_Init+0x144>)
 8004b8a:	641a      	str	r2, [r3, #64]	; 0x40
 8004b8c:	e00e      	b.n	8004bac <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	461a      	mov	r2, r3
 8004b94:	4b40      	ldr	r3, [pc, #256]	; (8004c98 <HAL_DMA_Init+0x148>)
 8004b96:	4413      	add	r3, r2
 8004b98:	4a3d      	ldr	r2, [pc, #244]	; (8004c90 <HAL_DMA_Init+0x140>)
 8004b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b9e:	091b      	lsrs	r3, r3, #4
 8004ba0:	009a      	lsls	r2, r3, #2
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	4a3c      	ldr	r2, [pc, #240]	; (8004c9c <HAL_DMA_Init+0x14c>)
 8004baa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2202      	movs	r2, #2
 8004bb0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004bc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bc6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	699b      	ldr	r3, [r3, #24]
 8004be2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004be8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004bf0:	68fa      	ldr	r2, [r7, #12]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 fa10 	bl	8005024 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004c0c:	d102      	bne.n	8004c14 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2200      	movs	r2, #0
 8004c12:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	685a      	ldr	r2, [r3, #4]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004c1c:	b2d2      	uxtb	r2, r2
 8004c1e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004c28:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d010      	beq.n	8004c54 <HAL_DMA_Init+0x104>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d80c      	bhi.n	8004c54 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fa30 	bl	80050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004c50:	605a      	str	r2, [r3, #4]
 8004c52:	e008      	b.n	8004c66 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2200      	movs	r2, #0
 8004c58:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	2200      	movs	r2, #0
 8004c64:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40020407 	.word	0x40020407
 8004c8c:	bffdfff8 	.word	0xbffdfff8
 8004c90:	cccccccd 	.word	0xcccccccd
 8004c94:	40020000 	.word	0x40020000
 8004c98:	bffdfbf8 	.word	0xbffdfbf8
 8004c9c:	40020400 	.word	0x40020400

08004ca0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b086      	sub	sp, #24
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	60f8      	str	r0, [r7, #12]
 8004ca8:	60b9      	str	r1, [r7, #8]
 8004caa:	607a      	str	r2, [r7, #4]
 8004cac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d101      	bne.n	8004cc0 <HAL_DMA_Start_IT+0x20>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e066      	b.n	8004d8e <HAL_DMA_Start_IT+0xee>
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d155      	bne.n	8004d80 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2202      	movs	r2, #2
 8004cd8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f022 0201 	bic.w	r2, r2, #1
 8004cf0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004cf2:	683b      	ldr	r3, [r7, #0]
 8004cf4:	687a      	ldr	r2, [r7, #4]
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	68f8      	ldr	r0, [r7, #12]
 8004cfa:	f000 f954 	bl	8004fa6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d008      	beq.n	8004d18 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	681a      	ldr	r2, [r3, #0]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f042 020e 	orr.w	r2, r2, #14
 8004d14:	601a      	str	r2, [r3, #0]
 8004d16:	e00f      	b.n	8004d38 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f022 0204 	bic.w	r2, r2, #4
 8004d26:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681a      	ldr	r2, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f042 020a 	orr.w	r2, r2, #10
 8004d36:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d007      	beq.n	8004d56 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004d50:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d54:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d007      	beq.n	8004d6e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d62:	681a      	ldr	r2, [r3, #0]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d6c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f042 0201 	orr.w	r2, r2, #1
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	e005      	b.n	8004d8c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004d88:	2302      	movs	r3, #2
 8004d8a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004d8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3718      	adds	r7, #24
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}

08004d96 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b085      	sub	sp, #20
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d9e:	2300      	movs	r3, #0
 8004da0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d005      	beq.n	8004dba <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2204      	movs	r2, #4
 8004db2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8004db4:	2301      	movs	r3, #1
 8004db6:	73fb      	strb	r3, [r7, #15]
 8004db8:	e037      	b.n	8004e2a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f022 020e 	bic.w	r2, r2, #14
 8004dc8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004dd8:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f022 0201 	bic.w	r2, r2, #1
 8004de8:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dee:	f003 021f 	and.w	r2, r3, #31
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df6:	2101      	movs	r1, #1
 8004df8:	fa01 f202 	lsl.w	r2, r1, r2
 8004dfc:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004e06:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00c      	beq.n	8004e2a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e14:	681a      	ldr	r2, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e1a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004e1e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e24:	687a      	ldr	r2, [r7, #4]
 8004e26:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004e28:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2201      	movs	r2, #1
 8004e2e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2200      	movs	r2, #0
 8004e36:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004e3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	3714      	adds	r7, #20
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e64:	f003 031f 	and.w	r3, r3, #31
 8004e68:	2204      	movs	r2, #4
 8004e6a:	409a      	lsls	r2, r3
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4013      	ands	r3, r2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d026      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0x7a>
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	f003 0304 	and.w	r3, r3, #4
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d021      	beq.n	8004ec2 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0320 	and.w	r3, r3, #32
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d107      	bne.n	8004e9c <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f022 0204 	bic.w	r2, r2, #4
 8004e9a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea0:	f003 021f 	and.w	r2, r3, #31
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea8:	2104      	movs	r1, #4
 8004eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8004eae:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d071      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ebc:	6878      	ldr	r0, [r7, #4]
 8004ebe:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004ec0:	e06c      	b.n	8004f9c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ec6:	f003 031f 	and.w	r3, r3, #31
 8004eca:	2202      	movs	r2, #2
 8004ecc:	409a      	lsls	r2, r3
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d02e      	beq.n	8004f34 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	f003 0302 	and.w	r3, r3, #2
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d029      	beq.n	8004f34 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0320 	and.w	r3, r3, #32
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10b      	bne.n	8004f06 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f022 020a 	bic.w	r2, r2, #10
 8004efc:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0a:	f003 021f 	and.w	r2, r3, #31
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f12:	2102      	movs	r1, #2
 8004f14:	fa01 f202 	lsl.w	r2, r1, r2
 8004f18:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d038      	beq.n	8004f9c <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2e:	6878      	ldr	r0, [r7, #4]
 8004f30:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004f32:	e033      	b.n	8004f9c <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f38:	f003 031f 	and.w	r3, r3, #31
 8004f3c:	2208      	movs	r2, #8
 8004f3e:	409a      	lsls	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	4013      	ands	r3, r2
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d02a      	beq.n	8004f9e <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f003 0308 	and.w	r3, r3, #8
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d025      	beq.n	8004f9e <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f022 020e 	bic.w	r2, r2, #14
 8004f60:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f66:	f003 021f 	and.w	r2, r3, #31
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6e:	2101      	movs	r1, #1
 8004f70:	fa01 f202 	lsl.w	r2, r1, r2
 8004f74:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	2201      	movs	r2, #1
 8004f7a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2201      	movs	r2, #1
 8004f80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d004      	beq.n	8004f9e <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004f9c:	bf00      	nop
 8004f9e:	bf00      	nop
}
 8004fa0:	3710      	adds	r7, #16
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	bd80      	pop	{r7, pc}

08004fa6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004fa6:	b480      	push	{r7}
 8004fa8:	b085      	sub	sp, #20
 8004faa:	af00      	add	r7, sp, #0
 8004fac:	60f8      	str	r0, [r7, #12]
 8004fae:	60b9      	str	r1, [r7, #8]
 8004fb0:	607a      	str	r2, [r7, #4]
 8004fb2:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004fbc:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d004      	beq.n	8004fd0 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004fce:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fd4:	f003 021f 	and.w	r2, r3, #31
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fdc:	2101      	movs	r1, #1
 8004fde:	fa01 f202 	lsl.w	r2, r1, r2
 8004fe2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	2b10      	cmp	r3, #16
 8004ff2:	d108      	bne.n	8005006 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8005004:	e007      	b.n	8005016 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	60da      	str	r2, [r3, #12]
}
 8005016:	bf00      	nop
 8005018:	3714      	adds	r7, #20
 800501a:	46bd      	mov	sp, r7
 800501c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005020:	4770      	bx	lr
	...

08005024 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8005024:	b480      	push	{r7}
 8005026:	b087      	sub	sp, #28
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	461a      	mov	r2, r3
 8005032:	4b16      	ldr	r3, [pc, #88]	; (800508c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8005034:	429a      	cmp	r2, r3
 8005036:	d802      	bhi.n	800503e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8005038:	4b15      	ldr	r3, [pc, #84]	; (8005090 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800503a:	617b      	str	r3, [r7, #20]
 800503c:	e001      	b.n	8005042 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800503e:	4b15      	ldr	r3, [pc, #84]	; (8005094 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8005040:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8005042:	697b      	ldr	r3, [r7, #20]
 8005044:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	b2db      	uxtb	r3, r3
 800504c:	3b08      	subs	r3, #8
 800504e:	4a12      	ldr	r2, [pc, #72]	; (8005098 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8005050:	fba2 2303 	umull	r2, r3, r2, r3
 8005054:	091b      	lsrs	r3, r3, #4
 8005056:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505c:	089b      	lsrs	r3, r3, #2
 800505e:	009a      	lsls	r2, r3, #2
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	4413      	add	r3, r2
 8005064:	461a      	mov	r2, r3
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a0b      	ldr	r2, [pc, #44]	; (800509c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800506e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f003 031f 	and.w	r3, r3, #31
 8005076:	2201      	movs	r2, #1
 8005078:	409a      	lsls	r2, r3
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800507e:	bf00      	nop
 8005080:	371c      	adds	r7, #28
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	40020407 	.word	0x40020407
 8005090:	40020800 	.word	0x40020800
 8005094:	40020820 	.word	0x40020820
 8005098:	cccccccd 	.word	0xcccccccd
 800509c:	40020880 	.word	0x40020880

080050a0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b085      	sub	sp, #20
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	b2db      	uxtb	r3, r3
 80050ae:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	4b0b      	ldr	r3, [pc, #44]	; (80050e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80050b4:	4413      	add	r3, r2
 80050b6:	009b      	lsls	r3, r3, #2
 80050b8:	461a      	mov	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a08      	ldr	r2, [pc, #32]	; (80050e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80050c2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	3b01      	subs	r3, #1
 80050c8:	f003 031f 	and.w	r3, r3, #31
 80050cc:	2201      	movs	r2, #1
 80050ce:	409a      	lsls	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80050d4:	bf00      	nop
 80050d6:	3714      	adds	r7, #20
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	1000823f 	.word	0x1000823f
 80050e4:	40020940 	.word	0x40020940

080050e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b087      	sub	sp, #28
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
 80050f0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80050f2:	2300      	movs	r3, #0
 80050f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80050f6:	e15a      	b.n	80053ae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	2101      	movs	r1, #1
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	fa01 f303 	lsl.w	r3, r1, r3
 8005104:	4013      	ands	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2b00      	cmp	r3, #0
 800510c:	f000 814c 	beq.w	80053a8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005110:	683b      	ldr	r3, [r7, #0]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	2b01      	cmp	r3, #1
 8005116:	d00b      	beq.n	8005130 <HAL_GPIO_Init+0x48>
 8005118:	683b      	ldr	r3, [r7, #0]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	2b02      	cmp	r3, #2
 800511e:	d007      	beq.n	8005130 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005120:	683b      	ldr	r3, [r7, #0]
 8005122:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005124:	2b11      	cmp	r3, #17
 8005126:	d003      	beq.n	8005130 <HAL_GPIO_Init+0x48>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b12      	cmp	r3, #18
 800512e:	d130      	bne.n	8005192 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	005b      	lsls	r3, r3, #1
 800513a:	2203      	movs	r2, #3
 800513c:	fa02 f303 	lsl.w	r3, r2, r3
 8005140:	43db      	mvns	r3, r3
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	4013      	ands	r3, r2
 8005146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005148:	683b      	ldr	r3, [r7, #0]
 800514a:	68da      	ldr	r2, [r3, #12]
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	005b      	lsls	r3, r3, #1
 8005150:	fa02 f303 	lsl.w	r3, r2, r3
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	4313      	orrs	r3, r2
 8005158:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005166:	2201      	movs	r2, #1
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	fa02 f303 	lsl.w	r3, r2, r3
 800516e:	43db      	mvns	r3, r3
 8005170:	693a      	ldr	r2, [r7, #16]
 8005172:	4013      	ands	r3, r2
 8005174:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	091b      	lsrs	r3, r3, #4
 800517c:	f003 0201 	and.w	r2, r3, #1
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	fa02 f303 	lsl.w	r3, r2, r3
 8005186:	693a      	ldr	r2, [r7, #16]
 8005188:	4313      	orrs	r3, r2
 800518a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	693a      	ldr	r2, [r7, #16]
 8005190:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	68db      	ldr	r3, [r3, #12]
 8005196:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	005b      	lsls	r3, r3, #1
 800519c:	2203      	movs	r2, #3
 800519e:	fa02 f303 	lsl.w	r3, r2, r3
 80051a2:	43db      	mvns	r3, r3
 80051a4:	693a      	ldr	r2, [r7, #16]
 80051a6:	4013      	ands	r3, r2
 80051a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80051aa:	683b      	ldr	r3, [r7, #0]
 80051ac:	689a      	ldr	r2, [r3, #8]
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	005b      	lsls	r3, r3, #1
 80051b2:	fa02 f303 	lsl.w	r3, r2, r3
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	4313      	orrs	r3, r2
 80051ba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	693a      	ldr	r2, [r7, #16]
 80051c0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	2b02      	cmp	r3, #2
 80051c8:	d003      	beq.n	80051d2 <HAL_GPIO_Init+0xea>
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	2b12      	cmp	r3, #18
 80051d0:	d123      	bne.n	800521a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	08da      	lsrs	r2, r3, #3
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	3208      	adds	r2, #8
 80051da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80051de:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	f003 0307 	and.w	r3, r3, #7
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	220f      	movs	r2, #15
 80051ea:	fa02 f303 	lsl.w	r3, r2, r3
 80051ee:	43db      	mvns	r3, r3
 80051f0:	693a      	ldr	r2, [r7, #16]
 80051f2:	4013      	ands	r3, r2
 80051f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	691a      	ldr	r2, [r3, #16]
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f003 0307 	and.w	r3, r3, #7
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	fa02 f303 	lsl.w	r3, r2, r3
 8005206:	693a      	ldr	r2, [r7, #16]
 8005208:	4313      	orrs	r3, r2
 800520a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	08da      	lsrs	r2, r3, #3
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3208      	adds	r2, #8
 8005214:	6939      	ldr	r1, [r7, #16]
 8005216:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	005b      	lsls	r3, r3, #1
 8005224:	2203      	movs	r2, #3
 8005226:	fa02 f303 	lsl.w	r3, r2, r3
 800522a:	43db      	mvns	r3, r3
 800522c:	693a      	ldr	r2, [r7, #16]
 800522e:	4013      	ands	r3, r2
 8005230:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f003 0203 	and.w	r2, r3, #3
 800523a:	697b      	ldr	r3, [r7, #20]
 800523c:	005b      	lsls	r3, r3, #1
 800523e:	fa02 f303 	lsl.w	r3, r2, r3
 8005242:	693a      	ldr	r2, [r7, #16]
 8005244:	4313      	orrs	r3, r2
 8005246:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	f000 80a6 	beq.w	80053a8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800525c:	4b5b      	ldr	r3, [pc, #364]	; (80053cc <HAL_GPIO_Init+0x2e4>)
 800525e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005260:	4a5a      	ldr	r2, [pc, #360]	; (80053cc <HAL_GPIO_Init+0x2e4>)
 8005262:	f043 0301 	orr.w	r3, r3, #1
 8005266:	6613      	str	r3, [r2, #96]	; 0x60
 8005268:	4b58      	ldr	r3, [pc, #352]	; (80053cc <HAL_GPIO_Init+0x2e4>)
 800526a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800526c:	f003 0301 	and.w	r3, r3, #1
 8005270:	60bb      	str	r3, [r7, #8]
 8005272:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005274:	4a56      	ldr	r2, [pc, #344]	; (80053d0 <HAL_GPIO_Init+0x2e8>)
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	089b      	lsrs	r3, r3, #2
 800527a:	3302      	adds	r3, #2
 800527c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005280:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f003 0303 	and.w	r3, r3, #3
 8005288:	009b      	lsls	r3, r3, #2
 800528a:	220f      	movs	r2, #15
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	43db      	mvns	r3, r3
 8005292:	693a      	ldr	r2, [r7, #16]
 8005294:	4013      	ands	r3, r2
 8005296:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800529e:	d01f      	beq.n	80052e0 <HAL_GPIO_Init+0x1f8>
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	4a4c      	ldr	r2, [pc, #304]	; (80053d4 <HAL_GPIO_Init+0x2ec>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d019      	beq.n	80052dc <HAL_GPIO_Init+0x1f4>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	4a4b      	ldr	r2, [pc, #300]	; (80053d8 <HAL_GPIO_Init+0x2f0>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	d013      	beq.n	80052d8 <HAL_GPIO_Init+0x1f0>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	4a4a      	ldr	r2, [pc, #296]	; (80053dc <HAL_GPIO_Init+0x2f4>)
 80052b4:	4293      	cmp	r3, r2
 80052b6:	d00d      	beq.n	80052d4 <HAL_GPIO_Init+0x1ec>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	4a49      	ldr	r2, [pc, #292]	; (80053e0 <HAL_GPIO_Init+0x2f8>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d007      	beq.n	80052d0 <HAL_GPIO_Init+0x1e8>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a48      	ldr	r2, [pc, #288]	; (80053e4 <HAL_GPIO_Init+0x2fc>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d101      	bne.n	80052cc <HAL_GPIO_Init+0x1e4>
 80052c8:	2305      	movs	r3, #5
 80052ca:	e00a      	b.n	80052e2 <HAL_GPIO_Init+0x1fa>
 80052cc:	2306      	movs	r3, #6
 80052ce:	e008      	b.n	80052e2 <HAL_GPIO_Init+0x1fa>
 80052d0:	2304      	movs	r3, #4
 80052d2:	e006      	b.n	80052e2 <HAL_GPIO_Init+0x1fa>
 80052d4:	2303      	movs	r3, #3
 80052d6:	e004      	b.n	80052e2 <HAL_GPIO_Init+0x1fa>
 80052d8:	2302      	movs	r3, #2
 80052da:	e002      	b.n	80052e2 <HAL_GPIO_Init+0x1fa>
 80052dc:	2301      	movs	r3, #1
 80052de:	e000      	b.n	80052e2 <HAL_GPIO_Init+0x1fa>
 80052e0:	2300      	movs	r3, #0
 80052e2:	697a      	ldr	r2, [r7, #20]
 80052e4:	f002 0203 	and.w	r2, r2, #3
 80052e8:	0092      	lsls	r2, r2, #2
 80052ea:	4093      	lsls	r3, r2
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80052f2:	4937      	ldr	r1, [pc, #220]	; (80053d0 <HAL_GPIO_Init+0x2e8>)
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	089b      	lsrs	r3, r3, #2
 80052f8:	3302      	adds	r3, #2
 80052fa:	693a      	ldr	r2, [r7, #16]
 80052fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005300:	4b39      	ldr	r3, [pc, #228]	; (80053e8 <HAL_GPIO_Init+0x300>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	43db      	mvns	r3, r3
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	4013      	ands	r3, r2
 800530e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d003      	beq.n	8005324 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800531c:	693a      	ldr	r2, [r7, #16]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	4313      	orrs	r3, r2
 8005322:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005324:	4a30      	ldr	r2, [pc, #192]	; (80053e8 <HAL_GPIO_Init+0x300>)
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 800532a:	4b2f      	ldr	r3, [pc, #188]	; (80053e8 <HAL_GPIO_Init+0x300>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	43db      	mvns	r3, r3
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4013      	ands	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005342:	2b00      	cmp	r3, #0
 8005344:	d003      	beq.n	800534e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005346:	693a      	ldr	r2, [r7, #16]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4313      	orrs	r3, r2
 800534c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800534e:	4a26      	ldr	r2, [pc, #152]	; (80053e8 <HAL_GPIO_Init+0x300>)
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005354:	4b24      	ldr	r3, [pc, #144]	; (80053e8 <HAL_GPIO_Init+0x300>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	43db      	mvns	r3, r3
 800535e:	693a      	ldr	r2, [r7, #16]
 8005360:	4013      	ands	r3, r2
 8005362:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8005364:	683b      	ldr	r3, [r7, #0]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d003      	beq.n	8005378 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4313      	orrs	r3, r2
 8005376:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005378:	4a1b      	ldr	r2, [pc, #108]	; (80053e8 <HAL_GPIO_Init+0x300>)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800537e:	4b1a      	ldr	r3, [pc, #104]	; (80053e8 <HAL_GPIO_Init+0x300>)
 8005380:	68db      	ldr	r3, [r3, #12]
 8005382:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	43db      	mvns	r3, r3
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	4013      	ands	r3, r2
 800538c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	4313      	orrs	r3, r2
 80053a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80053a2:	4a11      	ldr	r2, [pc, #68]	; (80053e8 <HAL_GPIO_Init+0x300>)
 80053a4:	693b      	ldr	r3, [r7, #16]
 80053a6:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	3301      	adds	r3, #1
 80053ac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	681a      	ldr	r2, [r3, #0]
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	fa22 f303 	lsr.w	r3, r2, r3
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f47f ae9d 	bne.w	80050f8 <HAL_GPIO_Init+0x10>
  }
}
 80053be:	bf00      	nop
 80053c0:	371c      	adds	r7, #28
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	40021000 	.word	0x40021000
 80053d0:	40010000 	.word	0x40010000
 80053d4:	48000400 	.word	0x48000400
 80053d8:	48000800 	.word	0x48000800
 80053dc:	48000c00 	.word	0x48000c00
 80053e0:	48001000 	.word	0x48001000
 80053e4:	48001400 	.word	0x48001400
 80053e8:	40010400 	.word	0x40010400

080053ec <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80053ec:	b480      	push	{r7}
 80053ee:	b085      	sub	sp, #20
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
 80053f4:	460b      	mov	r3, r1
 80053f6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691a      	ldr	r2, [r3, #16]
 80053fc:	887b      	ldrh	r3, [r7, #2]
 80053fe:	4013      	ands	r3, r2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d002      	beq.n	800540a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005404:	2301      	movs	r3, #1
 8005406:	73fb      	strb	r3, [r7, #15]
 8005408:	e001      	b.n	800540e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800540a:	2300      	movs	r3, #0
 800540c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800540e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005410:	4618      	mov	r0, r3
 8005412:	3714      	adds	r7, #20
 8005414:	46bd      	mov	sp, r7
 8005416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541a:	4770      	bx	lr

0800541c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800541c:	b480      	push	{r7}
 800541e:	b083      	sub	sp, #12
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	460b      	mov	r3, r1
 8005426:	807b      	strh	r3, [r7, #2]
 8005428:	4613      	mov	r3, r2
 800542a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800542c:	787b      	ldrb	r3, [r7, #1]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d003      	beq.n	800543a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005432:	887a      	ldrh	r2, [r7, #2]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005438:	e002      	b.n	8005440 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800543a:	887a      	ldrh	r2, [r7, #2]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800544c:	b480      	push	{r7}
 800544e:	b085      	sub	sp, #20
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d141      	bne.n	80054de <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800545a:	4b4b      	ldr	r3, [pc, #300]	; (8005588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005462:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005466:	d131      	bne.n	80054cc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005468:	4b47      	ldr	r3, [pc, #284]	; (8005588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800546a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800546e:	4a46      	ldr	r2, [pc, #280]	; (8005588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005470:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005474:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005478:	4b43      	ldr	r3, [pc, #268]	; (8005588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005480:	4a41      	ldr	r2, [pc, #260]	; (8005588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005482:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005486:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005488:	4b40      	ldr	r3, [pc, #256]	; (800558c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	2232      	movs	r2, #50	; 0x32
 800548e:	fb02 f303 	mul.w	r3, r2, r3
 8005492:	4a3f      	ldr	r2, [pc, #252]	; (8005590 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005494:	fba2 2303 	umull	r2, r3, r2, r3
 8005498:	0c9b      	lsrs	r3, r3, #18
 800549a:	3301      	adds	r3, #1
 800549c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800549e:	e002      	b.n	80054a6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	3b01      	subs	r3, #1
 80054a4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80054a6:	4b38      	ldr	r3, [pc, #224]	; (8005588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054a8:	695b      	ldr	r3, [r3, #20]
 80054aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b2:	d102      	bne.n	80054ba <HAL_PWREx_ControlVoltageScaling+0x6e>
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d1f2      	bne.n	80054a0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80054ba:	4b33      	ldr	r3, [pc, #204]	; (8005588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054bc:	695b      	ldr	r3, [r3, #20]
 80054be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054c6:	d158      	bne.n	800557a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e057      	b.n	800557c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054cc:	4b2e      	ldr	r3, [pc, #184]	; (8005588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054d2:	4a2d      	ldr	r2, [pc, #180]	; (8005588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054d8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80054dc:	e04d      	b.n	800557a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054e4:	d141      	bne.n	800556a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80054e6:	4b28      	ldr	r3, [pc, #160]	; (8005588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80054ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054f2:	d131      	bne.n	8005558 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80054f4:	4b24      	ldr	r3, [pc, #144]	; (8005588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80054fa:	4a23      	ldr	r2, [pc, #140]	; (8005588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005500:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005504:	4b20      	ldr	r3, [pc, #128]	; (8005588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800550c:	4a1e      	ldr	r2, [pc, #120]	; (8005588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800550e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005512:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005514:	4b1d      	ldr	r3, [pc, #116]	; (800558c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	2232      	movs	r2, #50	; 0x32
 800551a:	fb02 f303 	mul.w	r3, r2, r3
 800551e:	4a1c      	ldr	r2, [pc, #112]	; (8005590 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005520:	fba2 2303 	umull	r2, r3, r2, r3
 8005524:	0c9b      	lsrs	r3, r3, #18
 8005526:	3301      	adds	r3, #1
 8005528:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800552a:	e002      	b.n	8005532 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	3b01      	subs	r3, #1
 8005530:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005532:	4b15      	ldr	r3, [pc, #84]	; (8005588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005534:	695b      	ldr	r3, [r3, #20]
 8005536:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800553a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800553e:	d102      	bne.n	8005546 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1f2      	bne.n	800552c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005546:	4b10      	ldr	r3, [pc, #64]	; (8005588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800554e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005552:	d112      	bne.n	800557a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005554:	2303      	movs	r3, #3
 8005556:	e011      	b.n	800557c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005558:	4b0b      	ldr	r3, [pc, #44]	; (8005588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800555a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800555e:	4a0a      	ldr	r2, [pc, #40]	; (8005588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005564:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005568:	e007      	b.n	800557a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800556a:	4b07      	ldr	r3, [pc, #28]	; (8005588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005572:	4a05      	ldr	r2, [pc, #20]	; (8005588 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005574:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005578:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800557a:	2300      	movs	r3, #0
}
 800557c:	4618      	mov	r0, r3
 800557e:	3714      	adds	r7, #20
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	40007000 	.word	0x40007000
 800558c:	20000010 	.word	0x20000010
 8005590:	431bde83 	.word	0x431bde83

08005594 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b088      	sub	sp, #32
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e308      	b.n	8005bb8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0301 	and.w	r3, r3, #1
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d075      	beq.n	800569e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055b2:	4ba3      	ldr	r3, [pc, #652]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f003 030c 	and.w	r3, r3, #12
 80055ba:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80055bc:	4ba0      	ldr	r3, [pc, #640]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 80055be:	68db      	ldr	r3, [r3, #12]
 80055c0:	f003 0303 	and.w	r3, r3, #3
 80055c4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	2b0c      	cmp	r3, #12
 80055ca:	d102      	bne.n	80055d2 <HAL_RCC_OscConfig+0x3e>
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	2b03      	cmp	r3, #3
 80055d0:	d002      	beq.n	80055d8 <HAL_RCC_OscConfig+0x44>
 80055d2:	69bb      	ldr	r3, [r7, #24]
 80055d4:	2b08      	cmp	r3, #8
 80055d6:	d10b      	bne.n	80055f0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055d8:	4b99      	ldr	r3, [pc, #612]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d05b      	beq.n	800569c <HAL_RCC_OscConfig+0x108>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d157      	bne.n	800569c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80055ec:	2301      	movs	r3, #1
 80055ee:	e2e3      	b.n	8005bb8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80055f8:	d106      	bne.n	8005608 <HAL_RCC_OscConfig+0x74>
 80055fa:	4b91      	ldr	r3, [pc, #580]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	4a90      	ldr	r2, [pc, #576]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 8005600:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005604:	6013      	str	r3, [r2, #0]
 8005606:	e01d      	b.n	8005644 <HAL_RCC_OscConfig+0xb0>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005610:	d10c      	bne.n	800562c <HAL_RCC_OscConfig+0x98>
 8005612:	4b8b      	ldr	r3, [pc, #556]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	4a8a      	ldr	r2, [pc, #552]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 8005618:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800561c:	6013      	str	r3, [r2, #0]
 800561e:	4b88      	ldr	r3, [pc, #544]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a87      	ldr	r2, [pc, #540]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 8005624:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005628:	6013      	str	r3, [r2, #0]
 800562a:	e00b      	b.n	8005644 <HAL_RCC_OscConfig+0xb0>
 800562c:	4b84      	ldr	r3, [pc, #528]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a83      	ldr	r2, [pc, #524]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 8005632:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005636:	6013      	str	r3, [r2, #0]
 8005638:	4b81      	ldr	r3, [pc, #516]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4a80      	ldr	r2, [pc, #512]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 800563e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005642:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	685b      	ldr	r3, [r3, #4]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d013      	beq.n	8005674 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800564c:	f7fd fa04 	bl	8002a58 <HAL_GetTick>
 8005650:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005652:	e008      	b.n	8005666 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005654:	f7fd fa00 	bl	8002a58 <HAL_GetTick>
 8005658:	4602      	mov	r2, r0
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	1ad3      	subs	r3, r2, r3
 800565e:	2b64      	cmp	r3, #100	; 0x64
 8005660:	d901      	bls.n	8005666 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e2a8      	b.n	8005bb8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005666:	4b76      	ldr	r3, [pc, #472]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800566e:	2b00      	cmp	r3, #0
 8005670:	d0f0      	beq.n	8005654 <HAL_RCC_OscConfig+0xc0>
 8005672:	e014      	b.n	800569e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005674:	f7fd f9f0 	bl	8002a58 <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800567c:	f7fd f9ec 	bl	8002a58 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b64      	cmp	r3, #100	; 0x64
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e294      	b.n	8005bb8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800568e:	4b6c      	ldr	r3, [pc, #432]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d1f0      	bne.n	800567c <HAL_RCC_OscConfig+0xe8>
 800569a:	e000      	b.n	800569e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800569c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0302 	and.w	r3, r3, #2
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d075      	beq.n	8005796 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056aa:	4b65      	ldr	r3, [pc, #404]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 80056ac:	689b      	ldr	r3, [r3, #8]
 80056ae:	f003 030c 	and.w	r3, r3, #12
 80056b2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056b4:	4b62      	ldr	r3, [pc, #392]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 80056b6:	68db      	ldr	r3, [r3, #12]
 80056b8:	f003 0303 	and.w	r3, r3, #3
 80056bc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	2b0c      	cmp	r3, #12
 80056c2:	d102      	bne.n	80056ca <HAL_RCC_OscConfig+0x136>
 80056c4:	697b      	ldr	r3, [r7, #20]
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	d002      	beq.n	80056d0 <HAL_RCC_OscConfig+0x13c>
 80056ca:	69bb      	ldr	r3, [r7, #24]
 80056cc:	2b04      	cmp	r3, #4
 80056ce:	d11f      	bne.n	8005710 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056d0:	4b5b      	ldr	r3, [pc, #364]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d005      	beq.n	80056e8 <HAL_RCC_OscConfig+0x154>
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d101      	bne.n	80056e8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e267      	b.n	8005bb8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056e8:	4b55      	ldr	r3, [pc, #340]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	061b      	lsls	r3, r3, #24
 80056f6:	4952      	ldr	r1, [pc, #328]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 80056f8:	4313      	orrs	r3, r2
 80056fa:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80056fc:	4b51      	ldr	r3, [pc, #324]	; (8005844 <HAL_RCC_OscConfig+0x2b0>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4618      	mov	r0, r3
 8005702:	f7fd f95d 	bl	80029c0 <HAL_InitTick>
 8005706:	4603      	mov	r3, r0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d043      	beq.n	8005794 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800570c:	2301      	movs	r3, #1
 800570e:	e253      	b.n	8005bb8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d023      	beq.n	8005760 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005718:	4b49      	ldr	r3, [pc, #292]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4a48      	ldr	r2, [pc, #288]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 800571e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005722:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005724:	f7fd f998 	bl	8002a58 <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800572a:	e008      	b.n	800573e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800572c:	f7fd f994 	bl	8002a58 <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	2b02      	cmp	r3, #2
 8005738:	d901      	bls.n	800573e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800573a:	2303      	movs	r3, #3
 800573c:	e23c      	b.n	8005bb8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800573e:	4b40      	ldr	r3, [pc, #256]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0f0      	beq.n	800572c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800574a:	4b3d      	ldr	r3, [pc, #244]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	061b      	lsls	r3, r3, #24
 8005758:	4939      	ldr	r1, [pc, #228]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 800575a:	4313      	orrs	r3, r2
 800575c:	604b      	str	r3, [r1, #4]
 800575e:	e01a      	b.n	8005796 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005760:	4b37      	ldr	r3, [pc, #220]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a36      	ldr	r2, [pc, #216]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 8005766:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800576a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800576c:	f7fd f974 	bl	8002a58 <HAL_GetTick>
 8005770:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005772:	e008      	b.n	8005786 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005774:	f7fd f970 	bl	8002a58 <HAL_GetTick>
 8005778:	4602      	mov	r2, r0
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	1ad3      	subs	r3, r2, r3
 800577e:	2b02      	cmp	r3, #2
 8005780:	d901      	bls.n	8005786 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005782:	2303      	movs	r3, #3
 8005784:	e218      	b.n	8005bb8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005786:	4b2e      	ldr	r3, [pc, #184]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800578e:	2b00      	cmp	r3, #0
 8005790:	d1f0      	bne.n	8005774 <HAL_RCC_OscConfig+0x1e0>
 8005792:	e000      	b.n	8005796 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005794:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f003 0308 	and.w	r3, r3, #8
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d03c      	beq.n	800581c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d01c      	beq.n	80057e4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80057aa:	4b25      	ldr	r3, [pc, #148]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 80057ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057b0:	4a23      	ldr	r2, [pc, #140]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 80057b2:	f043 0301 	orr.w	r3, r3, #1
 80057b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ba:	f7fd f94d 	bl	8002a58 <HAL_GetTick>
 80057be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057c0:	e008      	b.n	80057d4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057c2:	f7fd f949 	bl	8002a58 <HAL_GetTick>
 80057c6:	4602      	mov	r2, r0
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	1ad3      	subs	r3, r2, r3
 80057cc:	2b02      	cmp	r3, #2
 80057ce:	d901      	bls.n	80057d4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80057d0:	2303      	movs	r3, #3
 80057d2:	e1f1      	b.n	8005bb8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80057d4:	4b1a      	ldr	r3, [pc, #104]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 80057d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057da:	f003 0302 	and.w	r3, r3, #2
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d0ef      	beq.n	80057c2 <HAL_RCC_OscConfig+0x22e>
 80057e2:	e01b      	b.n	800581c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80057e4:	4b16      	ldr	r3, [pc, #88]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 80057e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80057ea:	4a15      	ldr	r2, [pc, #84]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 80057ec:	f023 0301 	bic.w	r3, r3, #1
 80057f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057f4:	f7fd f930 	bl	8002a58 <HAL_GetTick>
 80057f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80057fa:	e008      	b.n	800580e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80057fc:	f7fd f92c 	bl	8002a58 <HAL_GetTick>
 8005800:	4602      	mov	r2, r0
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	1ad3      	subs	r3, r2, r3
 8005806:	2b02      	cmp	r3, #2
 8005808:	d901      	bls.n	800580e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800580a:	2303      	movs	r3, #3
 800580c:	e1d4      	b.n	8005bb8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800580e:	4b0c      	ldr	r3, [pc, #48]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 8005810:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005814:	f003 0302 	and.w	r3, r3, #2
 8005818:	2b00      	cmp	r3, #0
 800581a:	d1ef      	bne.n	80057fc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0304 	and.w	r3, r3, #4
 8005824:	2b00      	cmp	r3, #0
 8005826:	f000 80ab 	beq.w	8005980 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800582a:	2300      	movs	r3, #0
 800582c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800582e:	4b04      	ldr	r3, [pc, #16]	; (8005840 <HAL_RCC_OscConfig+0x2ac>)
 8005830:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005836:	2b00      	cmp	r3, #0
 8005838:	d106      	bne.n	8005848 <HAL_RCC_OscConfig+0x2b4>
 800583a:	2301      	movs	r3, #1
 800583c:	e005      	b.n	800584a <HAL_RCC_OscConfig+0x2b6>
 800583e:	bf00      	nop
 8005840:	40021000 	.word	0x40021000
 8005844:	20000014 	.word	0x20000014
 8005848:	2300      	movs	r3, #0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d00d      	beq.n	800586a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800584e:	4baf      	ldr	r3, [pc, #700]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 8005850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005852:	4aae      	ldr	r2, [pc, #696]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 8005854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005858:	6593      	str	r3, [r2, #88]	; 0x58
 800585a:	4bac      	ldr	r3, [pc, #688]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 800585c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800585e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005866:	2301      	movs	r3, #1
 8005868:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800586a:	4ba9      	ldr	r3, [pc, #676]	; (8005b10 <HAL_RCC_OscConfig+0x57c>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005872:	2b00      	cmp	r3, #0
 8005874:	d118      	bne.n	80058a8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005876:	4ba6      	ldr	r3, [pc, #664]	; (8005b10 <HAL_RCC_OscConfig+0x57c>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4aa5      	ldr	r2, [pc, #660]	; (8005b10 <HAL_RCC_OscConfig+0x57c>)
 800587c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005880:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005882:	f7fd f8e9 	bl	8002a58 <HAL_GetTick>
 8005886:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005888:	e008      	b.n	800589c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800588a:	f7fd f8e5 	bl	8002a58 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	2b02      	cmp	r3, #2
 8005896:	d901      	bls.n	800589c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005898:	2303      	movs	r3, #3
 800589a:	e18d      	b.n	8005bb8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800589c:	4b9c      	ldr	r3, [pc, #624]	; (8005b10 <HAL_RCC_OscConfig+0x57c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d0f0      	beq.n	800588a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d108      	bne.n	80058c2 <HAL_RCC_OscConfig+0x32e>
 80058b0:	4b96      	ldr	r3, [pc, #600]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 80058b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b6:	4a95      	ldr	r2, [pc, #596]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 80058b8:	f043 0301 	orr.w	r3, r3, #1
 80058bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058c0:	e024      	b.n	800590c <HAL_RCC_OscConfig+0x378>
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	2b05      	cmp	r3, #5
 80058c8:	d110      	bne.n	80058ec <HAL_RCC_OscConfig+0x358>
 80058ca:	4b90      	ldr	r3, [pc, #576]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 80058cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058d0:	4a8e      	ldr	r2, [pc, #568]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 80058d2:	f043 0304 	orr.w	r3, r3, #4
 80058d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058da:	4b8c      	ldr	r3, [pc, #560]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 80058dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058e0:	4a8a      	ldr	r2, [pc, #552]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 80058e2:	f043 0301 	orr.w	r3, r3, #1
 80058e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058ea:	e00f      	b.n	800590c <HAL_RCC_OscConfig+0x378>
 80058ec:	4b87      	ldr	r3, [pc, #540]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 80058ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058f2:	4a86      	ldr	r2, [pc, #536]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 80058f4:	f023 0301 	bic.w	r3, r3, #1
 80058f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80058fc:	4b83      	ldr	r3, [pc, #524]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 80058fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005902:	4a82      	ldr	r2, [pc, #520]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 8005904:	f023 0304 	bic.w	r3, r3, #4
 8005908:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d016      	beq.n	8005942 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005914:	f7fd f8a0 	bl	8002a58 <HAL_GetTick>
 8005918:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800591a:	e00a      	b.n	8005932 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800591c:	f7fd f89c 	bl	8002a58 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	f241 3288 	movw	r2, #5000	; 0x1388
 800592a:	4293      	cmp	r3, r2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e142      	b.n	8005bb8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005932:	4b76      	ldr	r3, [pc, #472]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 8005934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005938:	f003 0302 	and.w	r3, r3, #2
 800593c:	2b00      	cmp	r3, #0
 800593e:	d0ed      	beq.n	800591c <HAL_RCC_OscConfig+0x388>
 8005940:	e015      	b.n	800596e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005942:	f7fd f889 	bl	8002a58 <HAL_GetTick>
 8005946:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005948:	e00a      	b.n	8005960 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800594a:	f7fd f885 	bl	8002a58 <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	f241 3288 	movw	r2, #5000	; 0x1388
 8005958:	4293      	cmp	r3, r2
 800595a:	d901      	bls.n	8005960 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800595c:	2303      	movs	r3, #3
 800595e:	e12b      	b.n	8005bb8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005960:	4b6a      	ldr	r3, [pc, #424]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 8005962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005966:	f003 0302 	and.w	r3, r3, #2
 800596a:	2b00      	cmp	r3, #0
 800596c:	d1ed      	bne.n	800594a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800596e:	7ffb      	ldrb	r3, [r7, #31]
 8005970:	2b01      	cmp	r3, #1
 8005972:	d105      	bne.n	8005980 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005974:	4b65      	ldr	r3, [pc, #404]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 8005976:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005978:	4a64      	ldr	r2, [pc, #400]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 800597a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800597e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f003 0320 	and.w	r3, r3, #32
 8005988:	2b00      	cmp	r3, #0
 800598a:	d03c      	beq.n	8005a06 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	699b      	ldr	r3, [r3, #24]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d01c      	beq.n	80059ce <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005994:	4b5d      	ldr	r3, [pc, #372]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 8005996:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800599a:	4a5c      	ldr	r2, [pc, #368]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 800599c:	f043 0301 	orr.w	r3, r3, #1
 80059a0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059a4:	f7fd f858 	bl	8002a58 <HAL_GetTick>
 80059a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059aa:	e008      	b.n	80059be <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059ac:	f7fd f854 	bl	8002a58 <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b02      	cmp	r3, #2
 80059b8:	d901      	bls.n	80059be <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e0fc      	b.n	8005bb8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80059be:	4b53      	ldr	r3, [pc, #332]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 80059c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0ef      	beq.n	80059ac <HAL_RCC_OscConfig+0x418>
 80059cc:	e01b      	b.n	8005a06 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80059ce:	4b4f      	ldr	r3, [pc, #316]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 80059d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059d4:	4a4d      	ldr	r2, [pc, #308]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 80059d6:	f023 0301 	bic.w	r3, r3, #1
 80059da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80059de:	f7fd f83b 	bl	8002a58 <HAL_GetTick>
 80059e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059e4:	e008      	b.n	80059f8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80059e6:	f7fd f837 	bl	8002a58 <HAL_GetTick>
 80059ea:	4602      	mov	r2, r0
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	1ad3      	subs	r3, r2, r3
 80059f0:	2b02      	cmp	r3, #2
 80059f2:	d901      	bls.n	80059f8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80059f4:	2303      	movs	r3, #3
 80059f6:	e0df      	b.n	8005bb8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80059f8:	4b44      	ldr	r3, [pc, #272]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 80059fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80059fe:	f003 0302 	and.w	r3, r3, #2
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1ef      	bne.n	80059e6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	69db      	ldr	r3, [r3, #28]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	f000 80d3 	beq.w	8005bb6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005a10:	4b3e      	ldr	r3, [pc, #248]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 8005a12:	689b      	ldr	r3, [r3, #8]
 8005a14:	f003 030c 	and.w	r3, r3, #12
 8005a18:	2b0c      	cmp	r3, #12
 8005a1a:	f000 808d 	beq.w	8005b38 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	69db      	ldr	r3, [r3, #28]
 8005a22:	2b02      	cmp	r3, #2
 8005a24:	d15a      	bne.n	8005adc <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a26:	4b39      	ldr	r3, [pc, #228]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a38      	ldr	r2, [pc, #224]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 8005a2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a32:	f7fd f811 	bl	8002a58 <HAL_GetTick>
 8005a36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a38:	e008      	b.n	8005a4c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a3a:	f7fd f80d 	bl	8002a58 <HAL_GetTick>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	2b02      	cmp	r3, #2
 8005a46:	d901      	bls.n	8005a4c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e0b5      	b.n	8005bb8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a4c:	4b2f      	ldr	r3, [pc, #188]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1f0      	bne.n	8005a3a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005a58:	4b2c      	ldr	r3, [pc, #176]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 8005a5a:	68da      	ldr	r2, [r3, #12]
 8005a5c:	4b2d      	ldr	r3, [pc, #180]	; (8005b14 <HAL_RCC_OscConfig+0x580>)
 8005a5e:	4013      	ands	r3, r2
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6a11      	ldr	r1, [r2, #32]
 8005a64:	687a      	ldr	r2, [r7, #4]
 8005a66:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005a68:	3a01      	subs	r2, #1
 8005a6a:	0112      	lsls	r2, r2, #4
 8005a6c:	4311      	orrs	r1, r2
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005a72:	0212      	lsls	r2, r2, #8
 8005a74:	4311      	orrs	r1, r2
 8005a76:	687a      	ldr	r2, [r7, #4]
 8005a78:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005a7a:	0852      	lsrs	r2, r2, #1
 8005a7c:	3a01      	subs	r2, #1
 8005a7e:	0552      	lsls	r2, r2, #21
 8005a80:	4311      	orrs	r1, r2
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005a86:	0852      	lsrs	r2, r2, #1
 8005a88:	3a01      	subs	r2, #1
 8005a8a:	0652      	lsls	r2, r2, #25
 8005a8c:	4311      	orrs	r1, r2
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8005a92:	06d2      	lsls	r2, r2, #27
 8005a94:	430a      	orrs	r2, r1
 8005a96:	491d      	ldr	r1, [pc, #116]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005a9c:	4b1b      	ldr	r3, [pc, #108]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a1a      	ldr	r2, [pc, #104]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 8005aa2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005aa6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005aa8:	4b18      	ldr	r3, [pc, #96]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	4a17      	ldr	r2, [pc, #92]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 8005aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005ab2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ab4:	f7fc ffd0 	bl	8002a58 <HAL_GetTick>
 8005ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005aba:	e008      	b.n	8005ace <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005abc:	f7fc ffcc 	bl	8002a58 <HAL_GetTick>
 8005ac0:	4602      	mov	r2, r0
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	2b02      	cmp	r3, #2
 8005ac8:	d901      	bls.n	8005ace <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8005aca:	2303      	movs	r3, #3
 8005acc:	e074      	b.n	8005bb8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ace:	4b0f      	ldr	r3, [pc, #60]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d0f0      	beq.n	8005abc <HAL_RCC_OscConfig+0x528>
 8005ada:	e06c      	b.n	8005bb6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005adc:	4b0b      	ldr	r3, [pc, #44]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a0a      	ldr	r2, [pc, #40]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 8005ae2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005ae6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005ae8:	4b08      	ldr	r3, [pc, #32]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	4a07      	ldr	r2, [pc, #28]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 8005aee:	f023 0303 	bic.w	r3, r3, #3
 8005af2:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005af4:	4b05      	ldr	r3, [pc, #20]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	4a04      	ldr	r2, [pc, #16]	; (8005b0c <HAL_RCC_OscConfig+0x578>)
 8005afa:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005afe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b02:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b04:	f7fc ffa8 	bl	8002a58 <HAL_GetTick>
 8005b08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b0a:	e00e      	b.n	8005b2a <HAL_RCC_OscConfig+0x596>
 8005b0c:	40021000 	.word	0x40021000
 8005b10:	40007000 	.word	0x40007000
 8005b14:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b18:	f7fc ff9e 	bl	8002a58 <HAL_GetTick>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	1ad3      	subs	r3, r2, r3
 8005b22:	2b02      	cmp	r3, #2
 8005b24:	d901      	bls.n	8005b2a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e046      	b.n	8005bb8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b2a:	4b25      	ldr	r3, [pc, #148]	; (8005bc0 <HAL_RCC_OscConfig+0x62c>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d1f0      	bne.n	8005b18 <HAL_RCC_OscConfig+0x584>
 8005b36:	e03e      	b.n	8005bb6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	69db      	ldr	r3, [r3, #28]
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d101      	bne.n	8005b44 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8005b40:	2301      	movs	r3, #1
 8005b42:	e039      	b.n	8005bb8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005b44:	4b1e      	ldr	r3, [pc, #120]	; (8005bc0 <HAL_RCC_OscConfig+0x62c>)
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f003 0203 	and.w	r2, r3, #3
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6a1b      	ldr	r3, [r3, #32]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d12c      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b62:	3b01      	subs	r3, #1
 8005b64:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005b66:	429a      	cmp	r2, r3
 8005b68:	d123      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b74:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005b76:	429a      	cmp	r2, r3
 8005b78:	d11b      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b84:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005b86:	429a      	cmp	r2, r3
 8005b88:	d113      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b94:	085b      	lsrs	r3, r3, #1
 8005b96:	3b01      	subs	r3, #1
 8005b98:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	d109      	bne.n	8005bb2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005b9e:	697b      	ldr	r3, [r7, #20]
 8005ba0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ba8:	085b      	lsrs	r3, r3, #1
 8005baa:	3b01      	subs	r3, #1
 8005bac:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d001      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e000      	b.n	8005bb8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3720      	adds	r7, #32
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}
 8005bc0:	40021000 	.word	0x40021000

08005bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b086      	sub	sp, #24
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
 8005bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005bce:	2300      	movs	r3, #0
 8005bd0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d101      	bne.n	8005bdc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e11e      	b.n	8005e1a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005bdc:	4b91      	ldr	r3, [pc, #580]	; (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f003 030f 	and.w	r3, r3, #15
 8005be4:	683a      	ldr	r2, [r7, #0]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d910      	bls.n	8005c0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005bea:	4b8e      	ldr	r3, [pc, #568]	; (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f023 020f 	bic.w	r2, r3, #15
 8005bf2:	498c      	ldr	r1, [pc, #560]	; (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	4313      	orrs	r3, r2
 8005bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bfa:	4b8a      	ldr	r3, [pc, #552]	; (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f003 030f 	and.w	r3, r3, #15
 8005c02:	683a      	ldr	r2, [r7, #0]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d001      	beq.n	8005c0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e106      	b.n	8005e1a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f003 0301 	and.w	r3, r3, #1
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d073      	beq.n	8005d00 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	2b03      	cmp	r3, #3
 8005c1e:	d129      	bne.n	8005c74 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c20:	4b81      	ldr	r3, [pc, #516]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	e0f4      	b.n	8005e1a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005c30:	f000 f972 	bl	8005f18 <RCC_GetSysClockFreqFromPLLSource>
 8005c34:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	4a7c      	ldr	r2, [pc, #496]	; (8005e2c <HAL_RCC_ClockConfig+0x268>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d93f      	bls.n	8005cbe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c3e:	4b7a      	ldr	r3, [pc, #488]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d009      	beq.n	8005c5e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d033      	beq.n	8005cbe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d12f      	bne.n	8005cbe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005c5e:	4b72      	ldr	r3, [pc, #456]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005c60:	689b      	ldr	r3, [r3, #8]
 8005c62:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c66:	4a70      	ldr	r2, [pc, #448]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005c68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c6c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005c6e:	2380      	movs	r3, #128	; 0x80
 8005c70:	617b      	str	r3, [r7, #20]
 8005c72:	e024      	b.n	8005cbe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d107      	bne.n	8005c8c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c7c:	4b6a      	ldr	r3, [pc, #424]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d109      	bne.n	8005c9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	e0c6      	b.n	8005e1a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005c8c:	4b66      	ldr	r3, [pc, #408]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d101      	bne.n	8005c9c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005c98:	2301      	movs	r3, #1
 8005c9a:	e0be      	b.n	8005e1a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005c9c:	f000 f8ce 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 8005ca0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005ca2:	693b      	ldr	r3, [r7, #16]
 8005ca4:	4a61      	ldr	r2, [pc, #388]	; (8005e2c <HAL_RCC_ClockConfig+0x268>)
 8005ca6:	4293      	cmp	r3, r2
 8005ca8:	d909      	bls.n	8005cbe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005caa:	4b5f      	ldr	r3, [pc, #380]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cb2:	4a5d      	ldr	r2, [pc, #372]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005cb8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005cba:	2380      	movs	r3, #128	; 0x80
 8005cbc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005cbe:	4b5a      	ldr	r3, [pc, #360]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	f023 0203 	bic.w	r2, r3, #3
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	4957      	ldr	r1, [pc, #348]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005cd0:	f7fc fec2 	bl	8002a58 <HAL_GetTick>
 8005cd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cd6:	e00a      	b.n	8005cee <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cd8:	f7fc febe 	bl	8002a58 <HAL_GetTick>
 8005cdc:	4602      	mov	r2, r0
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	1ad3      	subs	r3, r2, r3
 8005ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d901      	bls.n	8005cee <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e095      	b.n	8005e1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005cee:	4b4e      	ldr	r3, [pc, #312]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005cf0:	689b      	ldr	r3, [r3, #8]
 8005cf2:	f003 020c 	and.w	r2, r3, #12
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d1eb      	bne.n	8005cd8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0302 	and.w	r3, r3, #2
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d023      	beq.n	8005d54 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f003 0304 	and.w	r3, r3, #4
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d005      	beq.n	8005d24 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d18:	4b43      	ldr	r3, [pc, #268]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	4a42      	ldr	r2, [pc, #264]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005d1e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d22:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f003 0308 	and.w	r3, r3, #8
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d007      	beq.n	8005d40 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005d30:	4b3d      	ldr	r3, [pc, #244]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005d32:	689b      	ldr	r3, [r3, #8]
 8005d34:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005d38:	4a3b      	ldr	r2, [pc, #236]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005d3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005d3e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d40:	4b39      	ldr	r3, [pc, #228]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	4936      	ldr	r1, [pc, #216]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005d4e:	4313      	orrs	r3, r2
 8005d50:	608b      	str	r3, [r1, #8]
 8005d52:	e008      	b.n	8005d66 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	2b80      	cmp	r3, #128	; 0x80
 8005d58:	d105      	bne.n	8005d66 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005d5a:	4b33      	ldr	r3, [pc, #204]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	4a32      	ldr	r2, [pc, #200]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005d60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d64:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005d66:	4b2f      	ldr	r3, [pc, #188]	; (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	f003 030f 	and.w	r3, r3, #15
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	429a      	cmp	r2, r3
 8005d72:	d21d      	bcs.n	8005db0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d74:	4b2b      	ldr	r3, [pc, #172]	; (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f023 020f 	bic.w	r2, r3, #15
 8005d7c:	4929      	ldr	r1, [pc, #164]	; (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	4313      	orrs	r3, r2
 8005d82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d84:	f7fc fe68 	bl	8002a58 <HAL_GetTick>
 8005d88:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d8a:	e00a      	b.n	8005da2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d8c:	f7fc fe64 	bl	8002a58 <HAL_GetTick>
 8005d90:	4602      	mov	r2, r0
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e03b      	b.n	8005e1a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005da2:	4b20      	ldr	r3, [pc, #128]	; (8005e24 <HAL_RCC_ClockConfig+0x260>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 030f 	and.w	r3, r3, #15
 8005daa:	683a      	ldr	r2, [r7, #0]
 8005dac:	429a      	cmp	r2, r3
 8005dae:	d1ed      	bne.n	8005d8c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0304 	and.w	r3, r3, #4
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d008      	beq.n	8005dce <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005dbc:	4b1a      	ldr	r3, [pc, #104]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	68db      	ldr	r3, [r3, #12]
 8005dc8:	4917      	ldr	r1, [pc, #92]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005dca:	4313      	orrs	r3, r2
 8005dcc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f003 0308 	and.w	r3, r3, #8
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d009      	beq.n	8005dee <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005dda:	4b13      	ldr	r3, [pc, #76]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	490f      	ldr	r1, [pc, #60]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005dea:	4313      	orrs	r3, r2
 8005dec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005dee:	f000 f825 	bl	8005e3c <HAL_RCC_GetSysClockFreq>
 8005df2:	4601      	mov	r1, r0
 8005df4:	4b0c      	ldr	r3, [pc, #48]	; (8005e28 <HAL_RCC_ClockConfig+0x264>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	091b      	lsrs	r3, r3, #4
 8005dfa:	f003 030f 	and.w	r3, r3, #15
 8005dfe:	4a0c      	ldr	r2, [pc, #48]	; (8005e30 <HAL_RCC_ClockConfig+0x26c>)
 8005e00:	5cd3      	ldrb	r3, [r2, r3]
 8005e02:	f003 031f 	and.w	r3, r3, #31
 8005e06:	fa21 f303 	lsr.w	r3, r1, r3
 8005e0a:	4a0a      	ldr	r2, [pc, #40]	; (8005e34 <HAL_RCC_ClockConfig+0x270>)
 8005e0c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005e0e:	4b0a      	ldr	r3, [pc, #40]	; (8005e38 <HAL_RCC_ClockConfig+0x274>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7fc fdd4 	bl	80029c0 <HAL_InitTick>
 8005e18:	4603      	mov	r3, r0
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3718      	adds	r7, #24
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}
 8005e22:	bf00      	nop
 8005e24:	40022000 	.word	0x40022000
 8005e28:	40021000 	.word	0x40021000
 8005e2c:	04c4b400 	.word	0x04c4b400
 8005e30:	0800a0b8 	.word	0x0800a0b8
 8005e34:	20000010 	.word	0x20000010
 8005e38:	20000014 	.word	0x20000014

08005e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b087      	sub	sp, #28
 8005e40:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005e42:	4b2c      	ldr	r3, [pc, #176]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f003 030c 	and.w	r3, r3, #12
 8005e4a:	2b04      	cmp	r3, #4
 8005e4c:	d102      	bne.n	8005e54 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005e4e:	4b2a      	ldr	r3, [pc, #168]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e50:	613b      	str	r3, [r7, #16]
 8005e52:	e047      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005e54:	4b27      	ldr	r3, [pc, #156]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	f003 030c 	and.w	r3, r3, #12
 8005e5c:	2b08      	cmp	r3, #8
 8005e5e:	d102      	bne.n	8005e66 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005e60:	4b26      	ldr	r3, [pc, #152]	; (8005efc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e62:	613b      	str	r3, [r7, #16]
 8005e64:	e03e      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005e66:	4b23      	ldr	r3, [pc, #140]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	f003 030c 	and.w	r3, r3, #12
 8005e6e:	2b0c      	cmp	r3, #12
 8005e70:	d136      	bne.n	8005ee0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e72:	4b20      	ldr	r3, [pc, #128]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	f003 0303 	and.w	r3, r3, #3
 8005e7a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e7c:	4b1d      	ldr	r3, [pc, #116]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	091b      	lsrs	r3, r3, #4
 8005e82:	f003 030f 	and.w	r3, r3, #15
 8005e86:	3301      	adds	r3, #1
 8005e88:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	2b03      	cmp	r3, #3
 8005e8e:	d10c      	bne.n	8005eaa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e90:	4a1a      	ldr	r2, [pc, #104]	; (8005efc <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e98:	4a16      	ldr	r2, [pc, #88]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e9a:	68d2      	ldr	r2, [r2, #12]
 8005e9c:	0a12      	lsrs	r2, r2, #8
 8005e9e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ea2:	fb02 f303 	mul.w	r3, r2, r3
 8005ea6:	617b      	str	r3, [r7, #20]
      break;
 8005ea8:	e00c      	b.n	8005ec4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005eaa:	4a13      	ldr	r2, [pc, #76]	; (8005ef8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8005eb2:	4a10      	ldr	r2, [pc, #64]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005eb4:	68d2      	ldr	r2, [r2, #12]
 8005eb6:	0a12      	lsrs	r2, r2, #8
 8005eb8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ebc:	fb02 f303 	mul.w	r3, r2, r3
 8005ec0:	617b      	str	r3, [r7, #20]
      break;
 8005ec2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ec4:	4b0b      	ldr	r3, [pc, #44]	; (8005ef4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ec6:	68db      	ldr	r3, [r3, #12]
 8005ec8:	0e5b      	lsrs	r3, r3, #25
 8005eca:	f003 0303 	and.w	r3, r3, #3
 8005ece:	3301      	adds	r3, #1
 8005ed0:	005b      	lsls	r3, r3, #1
 8005ed2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005ed4:	697a      	ldr	r2, [r7, #20]
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005edc:	613b      	str	r3, [r7, #16]
 8005ede:	e001      	b.n	8005ee4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005ee4:	693b      	ldr	r3, [r7, #16]
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	371c      	adds	r7, #28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	40021000 	.word	0x40021000
 8005ef8:	00f42400 	.word	0x00f42400
 8005efc:	007a1200 	.word	0x007a1200

08005f00 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005f00:	b480      	push	{r7}
 8005f02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005f04:	4b03      	ldr	r3, [pc, #12]	; (8005f14 <HAL_RCC_GetHCLKFreq+0x14>)
 8005f06:	681b      	ldr	r3, [r3, #0]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	46bd      	mov	sp, r7
 8005f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f10:	4770      	bx	lr
 8005f12:	bf00      	nop
 8005f14:	20000010 	.word	0x20000010

08005f18 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	b087      	sub	sp, #28
 8005f1c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f1e:	4b1e      	ldr	r3, [pc, #120]	; (8005f98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f20:	68db      	ldr	r3, [r3, #12]
 8005f22:	f003 0303 	and.w	r3, r3, #3
 8005f26:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f28:	4b1b      	ldr	r3, [pc, #108]	; (8005f98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	091b      	lsrs	r3, r3, #4
 8005f2e:	f003 030f 	and.w	r3, r3, #15
 8005f32:	3301      	adds	r3, #1
 8005f34:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005f36:	693b      	ldr	r3, [r7, #16]
 8005f38:	2b03      	cmp	r3, #3
 8005f3a:	d10c      	bne.n	8005f56 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f3c:	4a17      	ldr	r2, [pc, #92]	; (8005f9c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f44:	4a14      	ldr	r2, [pc, #80]	; (8005f98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f46:	68d2      	ldr	r2, [r2, #12]
 8005f48:	0a12      	lsrs	r2, r2, #8
 8005f4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f4e:	fb02 f303 	mul.w	r3, r2, r3
 8005f52:	617b      	str	r3, [r7, #20]
    break;
 8005f54:	e00c      	b.n	8005f70 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f56:	4a12      	ldr	r2, [pc, #72]	; (8005fa0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f5e:	4a0e      	ldr	r2, [pc, #56]	; (8005f98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f60:	68d2      	ldr	r2, [r2, #12]
 8005f62:	0a12      	lsrs	r2, r2, #8
 8005f64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005f68:	fb02 f303 	mul.w	r3, r2, r3
 8005f6c:	617b      	str	r3, [r7, #20]
    break;
 8005f6e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005f70:	4b09      	ldr	r3, [pc, #36]	; (8005f98 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	0e5b      	lsrs	r3, r3, #25
 8005f76:	f003 0303 	and.w	r3, r3, #3
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	005b      	lsls	r3, r3, #1
 8005f7e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005f80:	697a      	ldr	r2, [r7, #20]
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f88:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005f8a:	687b      	ldr	r3, [r7, #4]
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	371c      	adds	r7, #28
 8005f90:	46bd      	mov	sp, r7
 8005f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f96:	4770      	bx	lr
 8005f98:	40021000 	.word	0x40021000
 8005f9c:	007a1200 	.word	0x007a1200
 8005fa0:	00f42400 	.word	0x00f42400

08005fa4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b086      	sub	sp, #24
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005fac:	2300      	movs	r3, #0
 8005fae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 8098 	beq.w	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005fc6:	4b43      	ldr	r3, [pc, #268]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d10d      	bne.n	8005fee <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005fd2:	4b40      	ldr	r3, [pc, #256]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fd6:	4a3f      	ldr	r2, [pc, #252]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fdc:	6593      	str	r3, [r2, #88]	; 0x58
 8005fde:	4b3d      	ldr	r3, [pc, #244]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005fe6:	60bb      	str	r3, [r7, #8]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fea:	2301      	movs	r3, #1
 8005fec:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fee:	4b3a      	ldr	r3, [pc, #232]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a39      	ldr	r2, [pc, #228]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ff8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005ffa:	f7fc fd2d 	bl	8002a58 <HAL_GetTick>
 8005ffe:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006000:	e009      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006002:	f7fc fd29 	bl	8002a58 <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	2b02      	cmp	r3, #2
 800600e:	d902      	bls.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	74fb      	strb	r3, [r7, #19]
        break;
 8006014:	e005      	b.n	8006022 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006016:	4b30      	ldr	r3, [pc, #192]	; (80060d8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601e:	2b00      	cmp	r3, #0
 8006020:	d0ef      	beq.n	8006002 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006022:	7cfb      	ldrb	r3, [r7, #19]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d159      	bne.n	80060dc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006028:	4b2a      	ldr	r3, [pc, #168]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800602a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800602e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006032:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d01e      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	429a      	cmp	r2, r3
 8006042:	d019      	beq.n	8006078 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006044:	4b23      	ldr	r3, [pc, #140]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800604a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800604e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006050:	4b20      	ldr	r3, [pc, #128]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006052:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006056:	4a1f      	ldr	r2, [pc, #124]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800605c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006060:	4b1c      	ldr	r3, [pc, #112]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006066:	4a1b      	ldr	r2, [pc, #108]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006068:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800606c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006070:	4a18      	ldr	r2, [pc, #96]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f003 0301 	and.w	r3, r3, #1
 800607e:	2b00      	cmp	r3, #0
 8006080:	d016      	beq.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006082:	f7fc fce9 	bl	8002a58 <HAL_GetTick>
 8006086:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006088:	e00b      	b.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800608a:	f7fc fce5 	bl	8002a58 <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	f241 3288 	movw	r2, #5000	; 0x1388
 8006098:	4293      	cmp	r3, r2
 800609a:	d902      	bls.n	80060a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800609c:	2303      	movs	r3, #3
 800609e:	74fb      	strb	r3, [r7, #19]
            break;
 80060a0:	e006      	b.n	80060b0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80060a2:	4b0c      	ldr	r3, [pc, #48]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060a8:	f003 0302 	and.w	r3, r3, #2
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d0ec      	beq.n	800608a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80060b0:	7cfb      	ldrb	r3, [r7, #19]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d10b      	bne.n	80060ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80060b6:	4b07      	ldr	r3, [pc, #28]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80060bc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c4:	4903      	ldr	r1, [pc, #12]	; (80060d4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80060cc:	e008      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80060ce:	7cfb      	ldrb	r3, [r7, #19]
 80060d0:	74bb      	strb	r3, [r7, #18]
 80060d2:	e005      	b.n	80060e0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80060d4:	40021000 	.word	0x40021000
 80060d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80060dc:	7cfb      	ldrb	r3, [r7, #19]
 80060de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80060e0:	7c7b      	ldrb	r3, [r7, #17]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d105      	bne.n	80060f2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060e6:	4baf      	ldr	r3, [pc, #700]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80060e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80060ea:	4aae      	ldr	r2, [pc, #696]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80060ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80060f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	f003 0301 	and.w	r3, r3, #1
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d00a      	beq.n	8006114 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80060fe:	4ba9      	ldr	r3, [pc, #676]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006100:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006104:	f023 0203 	bic.w	r2, r3, #3
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	49a5      	ldr	r1, [pc, #660]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800610e:	4313      	orrs	r3, r2
 8006110:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f003 0302 	and.w	r3, r3, #2
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00a      	beq.n	8006136 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006120:	4ba0      	ldr	r3, [pc, #640]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006122:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006126:	f023 020c 	bic.w	r2, r3, #12
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	499d      	ldr	r1, [pc, #628]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006130:	4313      	orrs	r3, r2
 8006132:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0304 	and.w	r3, r3, #4
 800613e:	2b00      	cmp	r3, #0
 8006140:	d00a      	beq.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006142:	4b98      	ldr	r3, [pc, #608]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006144:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006148:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	4994      	ldr	r1, [pc, #592]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006152:	4313      	orrs	r3, r2
 8006154:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f003 0308 	and.w	r3, r3, #8
 8006160:	2b00      	cmp	r3, #0
 8006162:	d00a      	beq.n	800617a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006164:	4b8f      	ldr	r3, [pc, #572]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	691b      	ldr	r3, [r3, #16]
 8006172:	498c      	ldr	r1, [pc, #560]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006174:	4313      	orrs	r3, r2
 8006176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f003 0310 	and.w	r3, r3, #16
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00a      	beq.n	800619c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006186:	4b87      	ldr	r3, [pc, #540]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006188:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800618c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	4983      	ldr	r1, [pc, #524]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006196:	4313      	orrs	r3, r2
 8006198:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0320 	and.w	r3, r3, #32
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00a      	beq.n	80061be <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80061a8:	4b7e      	ldr	r3, [pc, #504]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80061aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061ae:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	497b      	ldr	r1, [pc, #492]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80061b8:	4313      	orrs	r3, r2
 80061ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d00a      	beq.n	80061e0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80061ca:	4b76      	ldr	r3, [pc, #472]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80061cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	69db      	ldr	r3, [r3, #28]
 80061d8:	4972      	ldr	r1, [pc, #456]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80061da:	4313      	orrs	r3, r2
 80061dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d00a      	beq.n	8006202 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80061ec:	4b6d      	ldr	r3, [pc, #436]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80061ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a1b      	ldr	r3, [r3, #32]
 80061fa:	496a      	ldr	r1, [pc, #424]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80061fc:	4313      	orrs	r3, r2
 80061fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620a:	2b00      	cmp	r3, #0
 800620c:	d00a      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800620e:	4b65      	ldr	r3, [pc, #404]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006214:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800621c:	4961      	ldr	r1, [pc, #388]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800621e:	4313      	orrs	r3, r2
 8006220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00a      	beq.n	8006246 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006230:	4b5c      	ldr	r3, [pc, #368]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006232:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006236:	f023 0203 	bic.w	r2, r3, #3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800623e:	4959      	ldr	r1, [pc, #356]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006240:	4313      	orrs	r3, r2
 8006242:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800624e:	2b00      	cmp	r3, #0
 8006250:	d00a      	beq.n	8006268 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006252:	4b54      	ldr	r3, [pc, #336]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006258:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006260:	4950      	ldr	r1, [pc, #320]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006262:	4313      	orrs	r3, r2
 8006264:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006270:	2b00      	cmp	r3, #0
 8006272:	d015      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006274:	4b4b      	ldr	r3, [pc, #300]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800627a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006282:	4948      	ldr	r1, [pc, #288]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006284:	4313      	orrs	r3, r2
 8006286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800628e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006292:	d105      	bne.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006294:	4b43      	ldr	r3, [pc, #268]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	4a42      	ldr	r2, [pc, #264]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800629a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800629e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d015      	beq.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80062ac:	4b3d      	ldr	r3, [pc, #244]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80062ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062b2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ba:	493a      	ldr	r1, [pc, #232]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80062bc:	4313      	orrs	r3, r2
 80062be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80062ca:	d105      	bne.n	80062d8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80062cc:	4b35      	ldr	r3, [pc, #212]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80062ce:	68db      	ldr	r3, [r3, #12]
 80062d0:	4a34      	ldr	r2, [pc, #208]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80062d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80062d6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d015      	beq.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80062e4:	4b2f      	ldr	r3, [pc, #188]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80062e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80062ea:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f2:	492c      	ldr	r1, [pc, #176]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fe:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006302:	d105      	bne.n	8006310 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006304:	4b27      	ldr	r3, [pc, #156]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	4a26      	ldr	r2, [pc, #152]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800630a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800630e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006318:	2b00      	cmp	r3, #0
 800631a:	d015      	beq.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800631c:	4b21      	ldr	r3, [pc, #132]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800631e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006322:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800632a:	491e      	ldr	r1, [pc, #120]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800632c:	4313      	orrs	r3, r2
 800632e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006336:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800633a:	d105      	bne.n	8006348 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800633c:	4b19      	ldr	r3, [pc, #100]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	4a18      	ldr	r2, [pc, #96]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006342:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006346:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006350:	2b00      	cmp	r3, #0
 8006352:	d015      	beq.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006354:	4b13      	ldr	r3, [pc, #76]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800635a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006362:	4910      	ldr	r1, [pc, #64]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006364:	4313      	orrs	r3, r2
 8006366:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800636e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006372:	d105      	bne.n	8006380 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006374:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	4a0a      	ldr	r2, [pc, #40]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800637a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800637e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006388:	2b00      	cmp	r3, #0
 800638a:	d018      	beq.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x41a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800638c:	4b05      	ldr	r3, [pc, #20]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800638e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006392:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800639a:	4902      	ldr	r1, [pc, #8]	; (80063a4 <HAL_RCCEx_PeriphCLKConfig+0x400>)
 800639c:	4313      	orrs	r3, r2
 800639e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80063a2:	e001      	b.n	80063a8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80063a4:	40021000 	.word	0x40021000
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80063b0:	d105      	bne.n	80063be <HAL_RCCEx_PeriphCLKConfig+0x41a>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80063b2:	4b21      	ldr	r3, [pc, #132]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	4a20      	ldr	r2, [pc, #128]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80063b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063bc:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d015      	beq.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 80063ca:	4b1b      	ldr	r3, [pc, #108]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80063cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063d0:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063d8:	4917      	ldr	r1, [pc, #92]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80063da:	4313      	orrs	r3, r2
 80063dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063e8:	d105      	bne.n	80063f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80063ea:	4b13      	ldr	r3, [pc, #76]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	4a12      	ldr	r2, [pc, #72]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 80063f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80063f4:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d015      	beq.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x48a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006402:	4b0d      	ldr	r3, [pc, #52]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006404:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8006408:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006410:	4909      	ldr	r1, [pc, #36]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006412:	4313      	orrs	r3, r2
 8006414:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800641c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006420:	d105      	bne.n	800642e <HAL_RCCEx_PeriphCLKConfig+0x48a>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006422:	4b05      	ldr	r3, [pc, #20]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006424:	68db      	ldr	r3, [r3, #12]
 8006426:	4a04      	ldr	r2, [pc, #16]	; (8006438 <HAL_RCCEx_PeriphCLKConfig+0x494>)
 8006428:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800642c:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800642e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006430:	4618      	mov	r0, r3
 8006432:	3718      	adds	r7, #24
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	40021000 	.word	0x40021000

0800643c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e084      	b.n	8006558 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2200      	movs	r2, #0
 8006452:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	d106      	bne.n	800646e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f7fb fcd9 	bl	8001e20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2202      	movs	r2, #2
 8006472:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006484:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800648e:	d902      	bls.n	8006496 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006490:	2300      	movs	r3, #0
 8006492:	60fb      	str	r3, [r7, #12]
 8006494:	e002      	b.n	800649c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006496:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800649a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80064a4:	d007      	beq.n	80064b6 <HAL_SPI_Init+0x7a>
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	68db      	ldr	r3, [r3, #12]
 80064aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064ae:	d002      	beq.n	80064b6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2200      	movs	r2, #0
 80064b4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d10b      	bne.n	80064d6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	68db      	ldr	r3, [r3, #12]
 80064c2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064c6:	d903      	bls.n	80064d0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2202      	movs	r2, #2
 80064cc:	631a      	str	r2, [r3, #48]	; 0x30
 80064ce:	e002      	b.n	80064d6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	689b      	ldr	r3, [r3, #8]
 80064de:	431a      	orrs	r2, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	691b      	ldr	r3, [r3, #16]
 80064e4:	431a      	orrs	r2, r3
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	695b      	ldr	r3, [r3, #20]
 80064ea:	431a      	orrs	r2, r3
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	699b      	ldr	r3, [r3, #24]
 80064f0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80064f4:	431a      	orrs	r2, r3
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	69db      	ldr	r3, [r3, #28]
 80064fa:	431a      	orrs	r2, r3
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	ea42 0103 	orr.w	r1, r2, r3
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	430a      	orrs	r2, r1
 800650e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	699b      	ldr	r3, [r3, #24]
 8006514:	0c1b      	lsrs	r3, r3, #16
 8006516:	f003 0204 	and.w	r2, r3, #4
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800651e:	431a      	orrs	r2, r3
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006524:	431a      	orrs	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	ea42 0103 	orr.w	r1, r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68fa      	ldr	r2, [r7, #12]
 8006534:	430a      	orrs	r2, r1
 8006536:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	69da      	ldr	r2, [r3, #28]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006546:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2200      	movs	r2, #0
 800654c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	2201      	movs	r2, #1
 8006552:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006556:	2300      	movs	r3, #0
}
 8006558:	4618      	mov	r0, r3
 800655a:	3710      	adds	r7, #16
 800655c:	46bd      	mov	sp, r7
 800655e:	bd80      	pop	{r7, pc}

08006560 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b088      	sub	sp, #32
 8006564:	af00      	add	r7, sp, #0
 8006566:	60f8      	str	r0, [r7, #12]
 8006568:	60b9      	str	r1, [r7, #8]
 800656a:	603b      	str	r3, [r7, #0]
 800656c:	4613      	mov	r3, r2
 800656e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006570:	2300      	movs	r3, #0
 8006572:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800657a:	2b01      	cmp	r3, #1
 800657c:	d101      	bne.n	8006582 <HAL_SPI_Transmit+0x22>
 800657e:	2302      	movs	r3, #2
 8006580:	e150      	b.n	8006824 <HAL_SPI_Transmit+0x2c4>
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	2201      	movs	r2, #1
 8006586:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800658a:	f7fc fa65 	bl	8002a58 <HAL_GetTick>
 800658e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006590:	88fb      	ldrh	r3, [r7, #6]
 8006592:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b01      	cmp	r3, #1
 800659e:	d002      	beq.n	80065a6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80065a0:	2302      	movs	r3, #2
 80065a2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80065a4:	e135      	b.n	8006812 <HAL_SPI_Transmit+0x2b2>
  }

  if ((pData == NULL) || (Size == 0U))
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d002      	beq.n	80065b2 <HAL_SPI_Transmit+0x52>
 80065ac:	88fb      	ldrh	r3, [r7, #6]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d102      	bne.n	80065b8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80065b2:	2301      	movs	r3, #1
 80065b4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80065b6:	e12c      	b.n	8006812 <HAL_SPI_Transmit+0x2b2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2203      	movs	r2, #3
 80065bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	68ba      	ldr	r2, [r7, #8]
 80065ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	88fa      	ldrh	r2, [r7, #6]
 80065d0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	88fa      	ldrh	r2, [r7, #6]
 80065d6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2200      	movs	r2, #0
 80065f2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006602:	d107      	bne.n	8006614 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006612:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800661e:	2b40      	cmp	r3, #64	; 0x40
 8006620:	d007      	beq.n	8006632 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006630:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	68db      	ldr	r3, [r3, #12]
 8006636:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800663a:	d94b      	bls.n	80066d4 <HAL_SPI_Transmit+0x174>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d002      	beq.n	800664a <HAL_SPI_Transmit+0xea>
 8006644:	8afb      	ldrh	r3, [r7, #22]
 8006646:	2b01      	cmp	r3, #1
 8006648:	d13e      	bne.n	80066c8 <HAL_SPI_Transmit+0x168>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664e:	881a      	ldrh	r2, [r3, #0]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800665a:	1c9a      	adds	r2, r3, #2
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006664:	b29b      	uxth	r3, r3
 8006666:	3b01      	subs	r3, #1
 8006668:	b29a      	uxth	r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800666e:	e02b      	b.n	80066c8 <HAL_SPI_Transmit+0x168>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	689b      	ldr	r3, [r3, #8]
 8006676:	f003 0302 	and.w	r3, r3, #2
 800667a:	2b02      	cmp	r3, #2
 800667c:	d112      	bne.n	80066a4 <HAL_SPI_Transmit+0x144>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006682:	881a      	ldrh	r2, [r3, #0]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668e:	1c9a      	adds	r2, r3, #2
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006698:	b29b      	uxth	r3, r3
 800669a:	3b01      	subs	r3, #1
 800669c:	b29a      	uxth	r2, r3
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066a2:	e011      	b.n	80066c8 <HAL_SPI_Transmit+0x168>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066a4:	f7fc f9d8 	bl	8002a58 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	69bb      	ldr	r3, [r7, #24]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	683a      	ldr	r2, [r7, #0]
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d803      	bhi.n	80066bc <HAL_SPI_Transmit+0x15c>
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066ba:	d102      	bne.n	80066c2 <HAL_SPI_Transmit+0x162>
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d102      	bne.n	80066c8 <HAL_SPI_Transmit+0x168>
        {
          errorcode = HAL_TIMEOUT;
 80066c2:	2303      	movs	r3, #3
 80066c4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80066c6:	e0a4      	b.n	8006812 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d1ce      	bne.n	8006670 <HAL_SPI_Transmit+0x110>
 80066d2:	e07c      	b.n	80067ce <HAL_SPI_Transmit+0x26e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d002      	beq.n	80066e2 <HAL_SPI_Transmit+0x182>
 80066dc:	8afb      	ldrh	r3, [r7, #22]
 80066de:	2b01      	cmp	r3, #1
 80066e0:	d170      	bne.n	80067c4 <HAL_SPI_Transmit+0x264>
    {
      if (hspi->TxXferCount > 1U)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066e6:	b29b      	uxth	r3, r3
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	d912      	bls.n	8006712 <HAL_SPI_Transmit+0x1b2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f0:	881a      	ldrh	r2, [r3, #0]
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066fc:	1c9a      	adds	r2, r3, #2
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006706:	b29b      	uxth	r3, r3
 8006708:	3b02      	subs	r3, #2
 800670a:	b29a      	uxth	r2, r3
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006710:	e058      	b.n	80067c4 <HAL_SPI_Transmit+0x264>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	330c      	adds	r3, #12
 800671c:	7812      	ldrb	r2, [r2, #0]
 800671e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006724:	1c5a      	adds	r2, r3, #1
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800672e:	b29b      	uxth	r3, r3
 8006730:	3b01      	subs	r3, #1
 8006732:	b29a      	uxth	r2, r3
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006738:	e044      	b.n	80067c4 <HAL_SPI_Transmit+0x264>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f003 0302 	and.w	r3, r3, #2
 8006744:	2b02      	cmp	r3, #2
 8006746:	d12b      	bne.n	80067a0 <HAL_SPI_Transmit+0x240>
      {
        if (hspi->TxXferCount > 1U)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800674c:	b29b      	uxth	r3, r3
 800674e:	2b01      	cmp	r3, #1
 8006750:	d912      	bls.n	8006778 <HAL_SPI_Transmit+0x218>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006756:	881a      	ldrh	r2, [r3, #0]
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006762:	1c9a      	adds	r2, r3, #2
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800676c:	b29b      	uxth	r3, r3
 800676e:	3b02      	subs	r3, #2
 8006770:	b29a      	uxth	r2, r3
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006776:	e025      	b.n	80067c4 <HAL_SPI_Transmit+0x264>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	330c      	adds	r3, #12
 8006782:	7812      	ldrb	r2, [r2, #0]
 8006784:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800678a:	1c5a      	adds	r2, r3, #1
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006794:	b29b      	uxth	r3, r3
 8006796:	3b01      	subs	r3, #1
 8006798:	b29a      	uxth	r2, r3
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800679e:	e011      	b.n	80067c4 <HAL_SPI_Transmit+0x264>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80067a0:	f7fc f95a 	bl	8002a58 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	683a      	ldr	r2, [r7, #0]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d803      	bhi.n	80067b8 <HAL_SPI_Transmit+0x258>
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067b6:	d102      	bne.n	80067be <HAL_SPI_Transmit+0x25e>
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d102      	bne.n	80067c4 <HAL_SPI_Transmit+0x264>
        {
          errorcode = HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	77fb      	strb	r3, [r7, #31]
          goto error;
 80067c2:	e026      	b.n	8006812 <HAL_SPI_Transmit+0x2b2>
    while (hspi->TxXferCount > 0U)
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1b5      	bne.n	800673a <HAL_SPI_Transmit+0x1da>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067ce:	69ba      	ldr	r2, [r7, #24]
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 f901 	bl	80069da <SPI_EndRxTxTransaction>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d002      	beq.n	80067e4 <HAL_SPI_Transmit+0x284>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2220      	movs	r2, #32
 80067e2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10a      	bne.n	8006802 <HAL_SPI_Transmit+0x2a2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80067ec:	2300      	movs	r3, #0
 80067ee:	613b      	str	r3, [r7, #16]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	613b      	str	r3, [r7, #16]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	613b      	str	r3, [r7, #16]
 8006800:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <HAL_SPI_Transmit+0x2b0>
  {
    errorcode = HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	77fb      	strb	r3, [r7, #31]
 800680e:	e000      	b.n	8006812 <HAL_SPI_Transmit+0x2b2>
  }

error:
 8006810:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	2201      	movs	r2, #1
 8006816:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2200      	movs	r2, #0
 800681e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006822:	7ffb      	ldrb	r3, [r7, #31]
}
 8006824:	4618      	mov	r0, r3
 8006826:	3720      	adds	r7, #32
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}

0800682c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b084      	sub	sp, #16
 8006830:	af00      	add	r7, sp, #0
 8006832:	60f8      	str	r0, [r7, #12]
 8006834:	60b9      	str	r1, [r7, #8]
 8006836:	603b      	str	r3, [r7, #0]
 8006838:	4613      	mov	r3, r2
 800683a:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800683c:	e04c      	b.n	80068d8 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006844:	d048      	beq.n	80068d8 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006846:	f7fc f907 	bl	8002a58 <HAL_GetTick>
 800684a:	4602      	mov	r2, r0
 800684c:	69bb      	ldr	r3, [r7, #24]
 800684e:	1ad3      	subs	r3, r2, r3
 8006850:	683a      	ldr	r2, [r7, #0]
 8006852:	429a      	cmp	r2, r3
 8006854:	d902      	bls.n	800685c <SPI_WaitFlagStateUntilTimeout+0x30>
 8006856:	683b      	ldr	r3, [r7, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d13d      	bne.n	80068d8 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	685a      	ldr	r2, [r3, #4]
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800686a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006874:	d111      	bne.n	800689a <SPI_WaitFlagStateUntilTimeout+0x6e>
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800687e:	d004      	beq.n	800688a <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	689b      	ldr	r3, [r3, #8]
 8006884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006888:	d107      	bne.n	800689a <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	681a      	ldr	r2, [r3, #0]
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006898:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800689e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80068a2:	d10f      	bne.n	80068c4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80068b2:	601a      	str	r2, [r3, #0]
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2201      	movs	r2, #1
 80068c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80068d4:	2303      	movs	r3, #3
 80068d6:	e00f      	b.n	80068f8 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	689a      	ldr	r2, [r3, #8]
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	4013      	ands	r3, r2
 80068e2:	68ba      	ldr	r2, [r7, #8]
 80068e4:	429a      	cmp	r2, r3
 80068e6:	bf0c      	ite	eq
 80068e8:	2301      	moveq	r3, #1
 80068ea:	2300      	movne	r3, #0
 80068ec:	b2db      	uxtb	r3, r3
 80068ee:	461a      	mov	r2, r3
 80068f0:	79fb      	ldrb	r3, [r7, #7]
 80068f2:	429a      	cmp	r2, r3
 80068f4:	d1a3      	bne.n	800683e <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80068f6:	2300      	movs	r3, #0
}
 80068f8:	4618      	mov	r0, r3
 80068fa:	3710      	adds	r7, #16
 80068fc:	46bd      	mov	sp, r7
 80068fe:	bd80      	pop	{r7, pc}

08006900 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b084      	sub	sp, #16
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
 800690c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800690e:	e057      	b.n	80069c0 <SPI_WaitFifoStateUntilTimeout+0xc0>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006916:	d106      	bne.n	8006926 <SPI_WaitFifoStateUntilTimeout+0x26>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d103      	bne.n	8006926 <SPI_WaitFifoStateUntilTimeout+0x26>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	330c      	adds	r3, #12
 8006924:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800692c:	d048      	beq.n	80069c0 <SPI_WaitFifoStateUntilTimeout+0xc0>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800692e:	f7fc f893 	bl	8002a58 <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	683a      	ldr	r2, [r7, #0]
 800693a:	429a      	cmp	r2, r3
 800693c:	d902      	bls.n	8006944 <SPI_WaitFifoStateUntilTimeout+0x44>
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d13d      	bne.n	80069c0 <SPI_WaitFifoStateUntilTimeout+0xc0>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006952:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800695c:	d111      	bne.n	8006982 <SPI_WaitFifoStateUntilTimeout+0x82>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006966:	d004      	beq.n	8006972 <SPI_WaitFifoStateUntilTimeout+0x72>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006970:	d107      	bne.n	8006982 <SPI_WaitFifoStateUntilTimeout+0x82>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006980:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006986:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800698a:	d10f      	bne.n	80069ac <SPI_WaitFifoStateUntilTimeout+0xac>
        {
          SPI_RESET_CRC(hspi);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	681a      	ldr	r2, [r3, #0]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800699a:	601a      	str	r2, [r3, #0]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	681a      	ldr	r2, [r3, #0]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80069aa:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2200      	movs	r2, #0
 80069b8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80069bc:	2303      	movs	r3, #3
 80069be:	e008      	b.n	80069d2 <SPI_WaitFifoStateUntilTimeout+0xd2>
  while ((hspi->Instance->SR & Fifo) != State)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689a      	ldr	r2, [r3, #8]
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	4013      	ands	r3, r2
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d19f      	bne.n	8006910 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}

080069da <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80069da:	b580      	push	{r7, lr}
 80069dc:	b086      	sub	sp, #24
 80069de:	af02      	add	r7, sp, #8
 80069e0:	60f8      	str	r0, [r7, #12]
 80069e2:	60b9      	str	r1, [r7, #8]
 80069e4:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	9300      	str	r3, [sp, #0]
 80069ea:	68bb      	ldr	r3, [r7, #8]
 80069ec:	2200      	movs	r2, #0
 80069ee:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80069f2:	68f8      	ldr	r0, [r7, #12]
 80069f4:	f7ff ff84 	bl	8006900 <SPI_WaitFifoStateUntilTimeout>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d007      	beq.n	8006a0e <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a02:	f043 0220 	orr.w	r2, r3, #32
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e027      	b.n	8006a5e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	9300      	str	r3, [sp, #0]
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	2200      	movs	r2, #0
 8006a16:	2180      	movs	r1, #128	; 0x80
 8006a18:	68f8      	ldr	r0, [r7, #12]
 8006a1a:	f7ff ff07 	bl	800682c <SPI_WaitFlagStateUntilTimeout>
 8006a1e:	4603      	mov	r3, r0
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d007      	beq.n	8006a34 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a28:	f043 0220 	orr.w	r2, r3, #32
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	e014      	b.n	8006a5e <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	9300      	str	r3, [sp, #0]
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f7ff ff5d 	bl	8006900 <SPI_WaitFifoStateUntilTimeout>
 8006a46:	4603      	mov	r3, r0
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d007      	beq.n	8006a5c <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a50:	f043 0220 	orr.w	r2, r3, #32
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a58:	2303      	movs	r3, #3
 8006a5a:	e000      	b.n	8006a5e <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b082      	sub	sp, #8
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d101      	bne.n	8006a78 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a74:	2301      	movs	r3, #1
 8006a76:	e049      	b.n	8006b0c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a7e:	b2db      	uxtb	r3, r3
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d106      	bne.n	8006a92 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2200      	movs	r2, #0
 8006a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f7fb fe91 	bl	80027b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2202      	movs	r2, #2
 8006a96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	3304      	adds	r3, #4
 8006aa2:	4619      	mov	r1, r3
 8006aa4:	4610      	mov	r0, r2
 8006aa6:	f000 fc51 	bl	800734c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2201      	movs	r2, #1
 8006aae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2201      	movs	r2, #1
 8006abe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2201      	movs	r2, #1
 8006ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	2201      	movs	r2, #1
 8006ace:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2201      	movs	r2, #1
 8006ade:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2201      	movs	r2, #1
 8006aee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2201      	movs	r2, #1
 8006afe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
}
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	3708      	adds	r7, #8
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b085      	sub	sp, #20
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d001      	beq.n	8006b2c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e019      	b.n	8006b60 <HAL_TIM_Base_Start+0x4c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	2202      	movs	r2, #2
 8006b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	689a      	ldr	r2, [r3, #8]
 8006b3a:	4b0c      	ldr	r3, [pc, #48]	; (8006b6c <HAL_TIM_Base_Start+0x58>)
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2b06      	cmp	r3, #6
 8006b44:	d00b      	beq.n	8006b5e <HAL_TIM_Base_Start+0x4a>
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b4c:	d007      	beq.n	8006b5e <HAL_TIM_Base_Start+0x4a>
  {
    __HAL_TIM_ENABLE(htim);
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f042 0201 	orr.w	r2, r2, #1
 8006b5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3714      	adds	r7, #20
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr
 8006b6c:	00010007 	.word	0x00010007

08006b70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b085      	sub	sp, #20
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b7e:	b2db      	uxtb	r3, r3
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d001      	beq.n	8006b88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b84:	2301      	movs	r3, #1
 8006b86:	e021      	b.n	8006bcc <HAL_TIM_Base_Start_IT+0x5c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	2202      	movs	r2, #2
 8006b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68da      	ldr	r2, [r3, #12]
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	f042 0201 	orr.w	r2, r2, #1
 8006b9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	689a      	ldr	r2, [r3, #8]
 8006ba6:	4b0c      	ldr	r3, [pc, #48]	; (8006bd8 <HAL_TIM_Base_Start_IT+0x68>)
 8006ba8:	4013      	ands	r3, r2
 8006baa:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	2b06      	cmp	r3, #6
 8006bb0:	d00b      	beq.n	8006bca <HAL_TIM_Base_Start_IT+0x5a>
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bb8:	d007      	beq.n	8006bca <HAL_TIM_Base_Start_IT+0x5a>
  {
    __HAL_TIM_ENABLE(htim);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	681a      	ldr	r2, [r3, #0]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f042 0201 	orr.w	r2, r2, #1
 8006bc8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bca:	2300      	movs	r3, #0
}
 8006bcc:	4618      	mov	r0, r3
 8006bce:	3714      	adds	r7, #20
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd6:	4770      	bx	lr
 8006bd8:	00010007 	.word	0x00010007

08006bdc <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68da      	ldr	r2, [r3, #12]
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	f022 0201 	bic.w	r2, r2, #1
 8006bf2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	6a1a      	ldr	r2, [r3, #32]
 8006bfa:	f241 1311 	movw	r3, #4369	; 0x1111
 8006bfe:	4013      	ands	r3, r2
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d10f      	bne.n	8006c24 <HAL_TIM_Base_Stop_IT+0x48>
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6a1a      	ldr	r2, [r3, #32]
 8006c0a:	f244 4344 	movw	r3, #17476	; 0x4444
 8006c0e:	4013      	ands	r3, r2
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d107      	bne.n	8006c24 <HAL_TIM_Base_Stop_IT+0x48>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	681a      	ldr	r2, [r3, #0]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f022 0201 	bic.w	r2, r2, #1
 8006c22:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	370c      	adds	r7, #12
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr

08006c3a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006c3a:	b580      	push	{r7, lr}
 8006c3c:	b086      	sub	sp, #24
 8006c3e:	af00      	add	r7, sp, #0
 8006c40:	6078      	str	r0, [r7, #4]
 8006c42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d101      	bne.n	8006c4e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	e097      	b.n	8006d7e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d106      	bne.n	8006c68 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2200      	movs	r2, #0
 8006c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f7fb fd4a 	bl	80026fc <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2202      	movs	r2, #2
 8006c6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	687a      	ldr	r2, [r7, #4]
 8006c78:	6812      	ldr	r2, [r2, #0]
 8006c7a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8006c7e:	f023 0307 	bic.w	r3, r3, #7
 8006c82:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681a      	ldr	r2, [r3, #0]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	3304      	adds	r3, #4
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	4610      	mov	r0, r2
 8006c90:	f000 fb5c 	bl	800734c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	689b      	ldr	r3, [r3, #8]
 8006c9a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	699b      	ldr	r3, [r3, #24]
 8006ca2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	6a1b      	ldr	r3, [r3, #32]
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	697a      	ldr	r2, [r7, #20]
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cbc:	f023 0303 	bic.w	r3, r3, #3
 8006cc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	689a      	ldr	r2, [r3, #8]
 8006cc6:	683b      	ldr	r3, [r7, #0]
 8006cc8:	699b      	ldr	r3, [r3, #24]
 8006cca:	021b      	lsls	r3, r3, #8
 8006ccc:	4313      	orrs	r3, r2
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	4313      	orrs	r3, r2
 8006cd2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006cda:	f023 030c 	bic.w	r3, r3, #12
 8006cde:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006ce0:	693b      	ldr	r3, [r7, #16]
 8006ce2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ce6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006cea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	68da      	ldr	r2, [r3, #12]
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	69db      	ldr	r3, [r3, #28]
 8006cf4:	021b      	lsls	r3, r3, #8
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	693a      	ldr	r2, [r7, #16]
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	691b      	ldr	r3, [r3, #16]
 8006d02:	011a      	lsls	r2, r3, #4
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	6a1b      	ldr	r3, [r3, #32]
 8006d08:	031b      	lsls	r3, r3, #12
 8006d0a:	4313      	orrs	r3, r2
 8006d0c:	693a      	ldr	r2, [r7, #16]
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006d18:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006d20:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006d22:	683b      	ldr	r3, [r7, #0]
 8006d24:	685a      	ldr	r2, [r3, #4]
 8006d26:	683b      	ldr	r3, [r7, #0]
 8006d28:	695b      	ldr	r3, [r3, #20]
 8006d2a:	011b      	lsls	r3, r3, #4
 8006d2c:	4313      	orrs	r3, r2
 8006d2e:	68fa      	ldr	r2, [r7, #12]
 8006d30:	4313      	orrs	r3, r2
 8006d32:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	697a      	ldr	r2, [r7, #20]
 8006d3a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	693a      	ldr	r2, [r7, #16]
 8006d42:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	68fa      	ldr	r2, [r7, #12]
 8006d4a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2201      	movs	r2, #1
 8006d50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2201      	movs	r2, #1
 8006d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2201      	movs	r2, #1
 8006d68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2201      	movs	r2, #1
 8006d70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2201      	movs	r2, #1
 8006d78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006d7c:	2300      	movs	r3, #0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3718      	adds	r7, #24
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b082      	sub	sp, #8
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	691b      	ldr	r3, [r3, #16]
 8006d94:	f003 0302 	and.w	r3, r3, #2
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	d122      	bne.n	8006de2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	f003 0302 	and.w	r3, r3, #2
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d11b      	bne.n	8006de2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f06f 0202 	mvn.w	r2, #2
 8006db2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2201      	movs	r2, #1
 8006db8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	699b      	ldr	r3, [r3, #24]
 8006dc0:	f003 0303 	and.w	r3, r3, #3
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d003      	beq.n	8006dd0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 faa1 	bl	8007310 <HAL_TIM_IC_CaptureCallback>
 8006dce:	e005      	b.n	8006ddc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 fa93 	bl	80072fc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 faa4 	bl	8007324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	691b      	ldr	r3, [r3, #16]
 8006de8:	f003 0304 	and.w	r3, r3, #4
 8006dec:	2b04      	cmp	r3, #4
 8006dee:	d122      	bne.n	8006e36 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	f003 0304 	and.w	r3, r3, #4
 8006dfa:	2b04      	cmp	r3, #4
 8006dfc:	d11b      	bne.n	8006e36 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f06f 0204 	mvn.w	r2, #4
 8006e06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2202      	movs	r2, #2
 8006e0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	699b      	ldr	r3, [r3, #24]
 8006e14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d003      	beq.n	8006e24 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 fa77 	bl	8007310 <HAL_TIM_IC_CaptureCallback>
 8006e22:	e005      	b.n	8006e30 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 fa69 	bl	80072fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fa7a 	bl	8007324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	691b      	ldr	r3, [r3, #16]
 8006e3c:	f003 0308 	and.w	r3, r3, #8
 8006e40:	2b08      	cmp	r3, #8
 8006e42:	d122      	bne.n	8006e8a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	68db      	ldr	r3, [r3, #12]
 8006e4a:	f003 0308 	and.w	r3, r3, #8
 8006e4e:	2b08      	cmp	r3, #8
 8006e50:	d11b      	bne.n	8006e8a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f06f 0208 	mvn.w	r2, #8
 8006e5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2204      	movs	r2, #4
 8006e60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	69db      	ldr	r3, [r3, #28]
 8006e68:	f003 0303 	and.w	r3, r3, #3
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d003      	beq.n	8006e78 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fa4d 	bl	8007310 <HAL_TIM_IC_CaptureCallback>
 8006e76:	e005      	b.n	8006e84 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f000 fa3f 	bl	80072fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f000 fa50 	bl	8007324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	691b      	ldr	r3, [r3, #16]
 8006e90:	f003 0310 	and.w	r3, r3, #16
 8006e94:	2b10      	cmp	r3, #16
 8006e96:	d122      	bne.n	8006ede <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	68db      	ldr	r3, [r3, #12]
 8006e9e:	f003 0310 	and.w	r3, r3, #16
 8006ea2:	2b10      	cmp	r3, #16
 8006ea4:	d11b      	bne.n	8006ede <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	f06f 0210 	mvn.w	r2, #16
 8006eae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2208      	movs	r2, #8
 8006eb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	69db      	ldr	r3, [r3, #28]
 8006ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d003      	beq.n	8006ecc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fa23 	bl	8007310 <HAL_TIM_IC_CaptureCallback>
 8006eca:	e005      	b.n	8006ed8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fa15 	bl	80072fc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fa26 	bl	8007324 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	691b      	ldr	r3, [r3, #16]
 8006ee4:	f003 0301 	and.w	r3, r3, #1
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d10e      	bne.n	8006f0a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68db      	ldr	r3, [r3, #12]
 8006ef2:	f003 0301 	and.w	r3, r3, #1
 8006ef6:	2b01      	cmp	r3, #1
 8006ef8:	d107      	bne.n	8006f0a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	f06f 0201 	mvn.w	r2, #1
 8006f02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f000 f9ef 	bl	80072e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	691b      	ldr	r3, [r3, #16]
 8006f10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f14:	2b80      	cmp	r3, #128	; 0x80
 8006f16:	d10e      	bne.n	8006f36 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f22:	2b80      	cmp	r3, #128	; 0x80
 8006f24:	d107      	bne.n	8006f36 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 fd5d 	bl	80079f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006f44:	d10e      	bne.n	8006f64 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f50:	2b80      	cmp	r3, #128	; 0x80
 8006f52:	d107      	bne.n	8006f64 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fd50 	bl	8007a04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f6e:	2b40      	cmp	r3, #64	; 0x40
 8006f70:	d10e      	bne.n	8006f90 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f7c:	2b40      	cmp	r3, #64	; 0x40
 8006f7e:	d107      	bne.n	8006f90 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 f9d4 	bl	8007338 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	f003 0320 	and.w	r3, r3, #32
 8006f9a:	2b20      	cmp	r3, #32
 8006f9c:	d10e      	bne.n	8006fbc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	f003 0320 	and.w	r3, r3, #32
 8006fa8:	2b20      	cmp	r3, #32
 8006faa:	d107      	bne.n	8006fbc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f06f 0220 	mvn.w	r2, #32
 8006fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 fd10 	bl	80079dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fc6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fca:	d10f      	bne.n	8006fec <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006fda:	d107      	bne.n	8006fec <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8006fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fd16 	bl	8007a18 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	691b      	ldr	r3, [r3, #16]
 8006ff2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ff6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006ffa:	d10f      	bne.n	800701c <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	68db      	ldr	r3, [r3, #12]
 8007002:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007006:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800700a:	d107      	bne.n	800701c <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007014:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 fd08 	bl	8007a2c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	691b      	ldr	r3, [r3, #16]
 8007022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800702a:	d10f      	bne.n	800704c <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007036:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800703a:	d107      	bne.n	800704c <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007044:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 fcfa 	bl	8007a40 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007056:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800705a:	d10f      	bne.n	800707c <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	68db      	ldr	r3, [r3, #12]
 8007062:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007066:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800706a:	d107      	bne.n	800707c <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 fcec 	bl	8007a54 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800707c:	bf00      	nop
 800707e:	3708      	adds	r7, #8
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007094:	2b01      	cmp	r3, #1
 8007096:	d101      	bne.n	800709c <HAL_TIM_ConfigClockSource+0x18>
 8007098:	2302      	movs	r3, #2
 800709a:	e0d2      	b.n	8007242 <HAL_TIM_ConfigClockSource+0x1be>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2201      	movs	r2, #1
 80070a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2202      	movs	r2, #2
 80070a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	689b      	ldr	r3, [r3, #8]
 80070b2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 80070ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80070be:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80070c6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070d8:	f000 80a9 	beq.w	800722e <HAL_TIM_ConfigClockSource+0x1aa>
 80070dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070e0:	d81a      	bhi.n	8007118 <HAL_TIM_ConfigClockSource+0x94>
 80070e2:	2b30      	cmp	r3, #48	; 0x30
 80070e4:	f000 809a 	beq.w	800721c <HAL_TIM_ConfigClockSource+0x198>
 80070e8:	2b30      	cmp	r3, #48	; 0x30
 80070ea:	d809      	bhi.n	8007100 <HAL_TIM_ConfigClockSource+0x7c>
 80070ec:	2b10      	cmp	r3, #16
 80070ee:	f000 8095 	beq.w	800721c <HAL_TIM_ConfigClockSource+0x198>
 80070f2:	2b20      	cmp	r3, #32
 80070f4:	f000 8092 	beq.w	800721c <HAL_TIM_ConfigClockSource+0x198>
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	f000 808f 	beq.w	800721c <HAL_TIM_ConfigClockSource+0x198>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80070fe:	e097      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8007100:	2b50      	cmp	r3, #80	; 0x50
 8007102:	d05b      	beq.n	80071bc <HAL_TIM_ConfigClockSource+0x138>
 8007104:	2b50      	cmp	r3, #80	; 0x50
 8007106:	d802      	bhi.n	800710e <HAL_TIM_ConfigClockSource+0x8a>
 8007108:	2b40      	cmp	r3, #64	; 0x40
 800710a:	d077      	beq.n	80071fc <HAL_TIM_ConfigClockSource+0x178>
      break;
 800710c:	e090      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800710e:	2b60      	cmp	r3, #96	; 0x60
 8007110:	d064      	beq.n	80071dc <HAL_TIM_ConfigClockSource+0x158>
 8007112:	2b70      	cmp	r3, #112	; 0x70
 8007114:	d028      	beq.n	8007168 <HAL_TIM_ConfigClockSource+0xe4>
      break;
 8007116:	e08b      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8007118:	4a4c      	ldr	r2, [pc, #304]	; (800724c <HAL_TIM_ConfigClockSource+0x1c8>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d07e      	beq.n	800721c <HAL_TIM_ConfigClockSource+0x198>
 800711e:	4a4b      	ldr	r2, [pc, #300]	; (800724c <HAL_TIM_ConfigClockSource+0x1c8>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d810      	bhi.n	8007146 <HAL_TIM_ConfigClockSource+0xc2>
 8007124:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007128:	d078      	beq.n	800721c <HAL_TIM_ConfigClockSource+0x198>
 800712a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800712e:	d803      	bhi.n	8007138 <HAL_TIM_ConfigClockSource+0xb4>
 8007130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007134:	d02f      	beq.n	8007196 <HAL_TIM_ConfigClockSource+0x112>
      break;
 8007136:	e07b      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8007138:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800713c:	d06e      	beq.n	800721c <HAL_TIM_ConfigClockSource+0x198>
 800713e:	4a44      	ldr	r2, [pc, #272]	; (8007250 <HAL_TIM_ConfigClockSource+0x1cc>)
 8007140:	4293      	cmp	r3, r2
 8007142:	d06b      	beq.n	800721c <HAL_TIM_ConfigClockSource+0x198>
      break;
 8007144:	e074      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 8007146:	4a43      	ldr	r2, [pc, #268]	; (8007254 <HAL_TIM_ConfigClockSource+0x1d0>)
 8007148:	4293      	cmp	r3, r2
 800714a:	d067      	beq.n	800721c <HAL_TIM_ConfigClockSource+0x198>
 800714c:	4a41      	ldr	r2, [pc, #260]	; (8007254 <HAL_TIM_ConfigClockSource+0x1d0>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d803      	bhi.n	800715a <HAL_TIM_ConfigClockSource+0xd6>
 8007152:	4a41      	ldr	r2, [pc, #260]	; (8007258 <HAL_TIM_ConfigClockSource+0x1d4>)
 8007154:	4293      	cmp	r3, r2
 8007156:	d061      	beq.n	800721c <HAL_TIM_ConfigClockSource+0x198>
      break;
 8007158:	e06a      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x1ac>
  switch (sClockSourceConfig->ClockSource)
 800715a:	4a40      	ldr	r2, [pc, #256]	; (800725c <HAL_TIM_ConfigClockSource+0x1d8>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d05d      	beq.n	800721c <HAL_TIM_ConfigClockSource+0x198>
 8007160:	4a3f      	ldr	r2, [pc, #252]	; (8007260 <HAL_TIM_ConfigClockSource+0x1dc>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d05a      	beq.n	800721c <HAL_TIM_ConfigClockSource+0x198>
      break;
 8007166:	e063      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	6818      	ldr	r0, [r3, #0]
 800716c:	683b      	ldr	r3, [r7, #0]
 800716e:	6899      	ldr	r1, [r3, #8]
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	685a      	ldr	r2, [r3, #4]
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	f000 fac8 	bl	800770c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	689b      	ldr	r3, [r3, #8]
 8007182:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800718a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	68fa      	ldr	r2, [r7, #12]
 8007192:	609a      	str	r2, [r3, #8]
      break;
 8007194:	e04c      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ETR_SetConfig(htim->Instance,
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6818      	ldr	r0, [r3, #0]
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	6899      	ldr	r1, [r3, #8]
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	685a      	ldr	r2, [r3, #4]
 80071a2:	683b      	ldr	r3, [r7, #0]
 80071a4:	68db      	ldr	r3, [r3, #12]
 80071a6:	f000 fab1 	bl	800770c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	689a      	ldr	r2, [r3, #8]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80071b8:	609a      	str	r2, [r3, #8]
      break;
 80071ba:	e039      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	6818      	ldr	r0, [r3, #0]
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	6859      	ldr	r1, [r3, #4]
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	68db      	ldr	r3, [r3, #12]
 80071c8:	461a      	mov	r2, r3
 80071ca:	f000 fa23 	bl	8007614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	2150      	movs	r1, #80	; 0x50
 80071d4:	4618      	mov	r0, r3
 80071d6:	f000 fa7c 	bl	80076d2 <TIM_ITRx_SetConfig>
      break;
 80071da:	e029      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6818      	ldr	r0, [r3, #0]
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	6859      	ldr	r1, [r3, #4]
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	68db      	ldr	r3, [r3, #12]
 80071e8:	461a      	mov	r2, r3
 80071ea:	f000 fa42 	bl	8007672 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2160      	movs	r1, #96	; 0x60
 80071f4:	4618      	mov	r0, r3
 80071f6:	f000 fa6c 	bl	80076d2 <TIM_ITRx_SetConfig>
      break;
 80071fa:	e019      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6818      	ldr	r0, [r3, #0]
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	6859      	ldr	r1, [r3, #4]
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	68db      	ldr	r3, [r3, #12]
 8007208:	461a      	mov	r2, r3
 800720a:	f000 fa03 	bl	8007614 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	2140      	movs	r1, #64	; 0x40
 8007214:	4618      	mov	r0, r3
 8007216:	f000 fa5c 	bl	80076d2 <TIM_ITRx_SetConfig>
      break;
 800721a:	e009      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x1ac>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4619      	mov	r1, r3
 8007226:	4610      	mov	r0, r2
 8007228:	f000 fa53 	bl	80076d2 <TIM_ITRx_SetConfig>
      break;
 800722c:	e000      	b.n	8007230 <HAL_TIM_ConfigClockSource+0x1ac>
      break;
 800722e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2200      	movs	r2, #0
 800723c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007240:	2300      	movs	r3, #0
}
 8007242:	4618      	mov	r0, r3
 8007244:	3710      	adds	r7, #16
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	00100030 	.word	0x00100030
 8007250:	00100020 	.word	0x00100020
 8007254:	00100050 	.word	0x00100050
 8007258:	00100040 	.word	0x00100040
 800725c:	00100060 	.word	0x00100060
 8007260:	00100070 	.word	0x00100070

08007264 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1, Reset + Trigger, Gated + Reset).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007264:	b580      	push	{r7, lr}
 8007266:	b082      	sub	sp, #8
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_INSTANCE(htim->Instance, sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007274:	2b01      	cmp	r3, #1
 8007276:	d101      	bne.n	800727c <HAL_TIM_SlaveConfigSynchro+0x18>
 8007278:	2302      	movs	r3, #2
 800727a:	e031      	b.n	80072e0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2201      	movs	r2, #1
 8007280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2202      	movs	r2, #2
 8007288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800728c:	6839      	ldr	r1, [r7, #0]
 800728e:	6878      	ldr	r0, [r7, #4]
 8007290:	f000 f904 	bl	800749c <TIM_SlaveTimer_SetConfig>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d009      	beq.n	80072ae <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2201      	movs	r2, #1
 800729e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	e018      	b.n	80072e0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	68da      	ldr	r2, [r3, #12]
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072bc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68da      	ldr	r2, [r3, #12]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80072cc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2201      	movs	r2, #1
 80072d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800734c:	b480      	push	{r7}
 800734e:	b085      	sub	sp, #20
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a46      	ldr	r2, [pc, #280]	; (8007478 <TIM_Base_SetConfig+0x12c>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d017      	beq.n	8007394 <TIM_Base_SetConfig+0x48>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800736a:	d013      	beq.n	8007394 <TIM_Base_SetConfig+0x48>
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	4a43      	ldr	r2, [pc, #268]	; (800747c <TIM_Base_SetConfig+0x130>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d00f      	beq.n	8007394 <TIM_Base_SetConfig+0x48>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4a42      	ldr	r2, [pc, #264]	; (8007480 <TIM_Base_SetConfig+0x134>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d00b      	beq.n	8007394 <TIM_Base_SetConfig+0x48>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	4a41      	ldr	r2, [pc, #260]	; (8007484 <TIM_Base_SetConfig+0x138>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d007      	beq.n	8007394 <TIM_Base_SetConfig+0x48>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	4a40      	ldr	r2, [pc, #256]	; (8007488 <TIM_Base_SetConfig+0x13c>)
 8007388:	4293      	cmp	r3, r2
 800738a:	d003      	beq.n	8007394 <TIM_Base_SetConfig+0x48>
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	4a3f      	ldr	r2, [pc, #252]	; (800748c <TIM_Base_SetConfig+0x140>)
 8007390:	4293      	cmp	r3, r2
 8007392:	d108      	bne.n	80073a6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800739a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800739c:	683b      	ldr	r3, [r7, #0]
 800739e:	685b      	ldr	r3, [r3, #4]
 80073a0:	68fa      	ldr	r2, [r7, #12]
 80073a2:	4313      	orrs	r3, r2
 80073a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	4a33      	ldr	r2, [pc, #204]	; (8007478 <TIM_Base_SetConfig+0x12c>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d023      	beq.n	80073f6 <TIM_Base_SetConfig+0xaa>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073b4:	d01f      	beq.n	80073f6 <TIM_Base_SetConfig+0xaa>
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	4a30      	ldr	r2, [pc, #192]	; (800747c <TIM_Base_SetConfig+0x130>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d01b      	beq.n	80073f6 <TIM_Base_SetConfig+0xaa>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	4a2f      	ldr	r2, [pc, #188]	; (8007480 <TIM_Base_SetConfig+0x134>)
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d017      	beq.n	80073f6 <TIM_Base_SetConfig+0xaa>
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	4a2e      	ldr	r2, [pc, #184]	; (8007484 <TIM_Base_SetConfig+0x138>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d013      	beq.n	80073f6 <TIM_Base_SetConfig+0xaa>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	4a2d      	ldr	r2, [pc, #180]	; (8007488 <TIM_Base_SetConfig+0x13c>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d00f      	beq.n	80073f6 <TIM_Base_SetConfig+0xaa>
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	4a2d      	ldr	r2, [pc, #180]	; (8007490 <TIM_Base_SetConfig+0x144>)
 80073da:	4293      	cmp	r3, r2
 80073dc:	d00b      	beq.n	80073f6 <TIM_Base_SetConfig+0xaa>
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4a2c      	ldr	r2, [pc, #176]	; (8007494 <TIM_Base_SetConfig+0x148>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d007      	beq.n	80073f6 <TIM_Base_SetConfig+0xaa>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a2b      	ldr	r2, [pc, #172]	; (8007498 <TIM_Base_SetConfig+0x14c>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d003      	beq.n	80073f6 <TIM_Base_SetConfig+0xaa>
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	4a26      	ldr	r2, [pc, #152]	; (800748c <TIM_Base_SetConfig+0x140>)
 80073f2:	4293      	cmp	r3, r2
 80073f4:	d108      	bne.n	8007408 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80073fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	68db      	ldr	r3, [r3, #12]
 8007402:	68fa      	ldr	r2, [r7, #12]
 8007404:	4313      	orrs	r3, r2
 8007406:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	695b      	ldr	r3, [r3, #20]
 8007412:	4313      	orrs	r3, r2
 8007414:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68fa      	ldr	r2, [r7, #12]
 800741a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	689a      	ldr	r2, [r3, #8]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	681a      	ldr	r2, [r3, #0]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	4a12      	ldr	r2, [pc, #72]	; (8007478 <TIM_Base_SetConfig+0x12c>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d013      	beq.n	800745c <TIM_Base_SetConfig+0x110>
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	4a14      	ldr	r2, [pc, #80]	; (8007488 <TIM_Base_SetConfig+0x13c>)
 8007438:	4293      	cmp	r3, r2
 800743a:	d00f      	beq.n	800745c <TIM_Base_SetConfig+0x110>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	4a14      	ldr	r2, [pc, #80]	; (8007490 <TIM_Base_SetConfig+0x144>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d00b      	beq.n	800745c <TIM_Base_SetConfig+0x110>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	4a13      	ldr	r2, [pc, #76]	; (8007494 <TIM_Base_SetConfig+0x148>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d007      	beq.n	800745c <TIM_Base_SetConfig+0x110>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	4a12      	ldr	r2, [pc, #72]	; (8007498 <TIM_Base_SetConfig+0x14c>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d003      	beq.n	800745c <TIM_Base_SetConfig+0x110>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	4a0d      	ldr	r2, [pc, #52]	; (800748c <TIM_Base_SetConfig+0x140>)
 8007458:	4293      	cmp	r3, r2
 800745a:	d103      	bne.n	8007464 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	691a      	ldr	r2, [r3, #16]
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2201      	movs	r2, #1
 8007468:	615a      	str	r2, [r3, #20]
}
 800746a:	bf00      	nop
 800746c:	3714      	adds	r7, #20
 800746e:	46bd      	mov	sp, r7
 8007470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007474:	4770      	bx	lr
 8007476:	bf00      	nop
 8007478:	40012c00 	.word	0x40012c00
 800747c:	40000400 	.word	0x40000400
 8007480:	40000800 	.word	0x40000800
 8007484:	40000c00 	.word	0x40000c00
 8007488:	40013400 	.word	0x40013400
 800748c:	40015000 	.word	0x40015000
 8007490:	40014000 	.word	0x40014000
 8007494:	40014400 	.word	0x40014400
 8007498:	40014800 	.word	0x40014800

0800749c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b086      	sub	sp, #24
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	689b      	ldr	r3, [r3, #8]
 80074ac:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80074b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80074b8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	685b      	ldr	r3, [r3, #4]
 80074be:	697a      	ldr	r2, [r7, #20]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074ca:	f023 0307 	bic.w	r3, r3, #7
 80074ce:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	697a      	ldr	r2, [r7, #20]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	2b70      	cmp	r3, #112	; 0x70
 80074e8:	d034      	beq.n	8007554 <TIM_SlaveTimer_SetConfig+0xb8>
 80074ea:	2b70      	cmp	r3, #112	; 0x70
 80074ec:	d811      	bhi.n	8007512 <TIM_SlaveTimer_SetConfig+0x76>
 80074ee:	2b30      	cmp	r3, #48	; 0x30
 80074f0:	d07d      	beq.n	80075ee <TIM_SlaveTimer_SetConfig+0x152>
 80074f2:	2b30      	cmp	r3, #48	; 0x30
 80074f4:	d806      	bhi.n	8007504 <TIM_SlaveTimer_SetConfig+0x68>
 80074f6:	2b10      	cmp	r3, #16
 80074f8:	d079      	beq.n	80075ee <TIM_SlaveTimer_SetConfig+0x152>
 80074fa:	2b20      	cmp	r3, #32
 80074fc:	d077      	beq.n	80075ee <TIM_SlaveTimer_SetConfig+0x152>
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d075      	beq.n	80075ee <TIM_SlaveTimer_SetConfig+0x152>
      assert_param(IS_TIM_INTERNAL_TRIGGEREVENT_INSTANCE((htim->Instance), sSlaveConfig->InputTrigger));
      break;
    }

    default:
      break;
 8007502:	e075      	b.n	80075f0 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8007504:	2b50      	cmp	r3, #80	; 0x50
 8007506:	d05e      	beq.n	80075c6 <TIM_SlaveTimer_SetConfig+0x12a>
 8007508:	2b60      	cmp	r3, #96	; 0x60
 800750a:	d066      	beq.n	80075da <TIM_SlaveTimer_SetConfig+0x13e>
 800750c:	2b40      	cmp	r3, #64	; 0x40
 800750e:	d02c      	beq.n	800756a <TIM_SlaveTimer_SetConfig+0xce>
      break;
 8007510:	e06e      	b.n	80075f0 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8007512:	4a3a      	ldr	r2, [pc, #232]	; (80075fc <TIM_SlaveTimer_SetConfig+0x160>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d06a      	beq.n	80075ee <TIM_SlaveTimer_SetConfig+0x152>
 8007518:	4a38      	ldr	r2, [pc, #224]	; (80075fc <TIM_SlaveTimer_SetConfig+0x160>)
 800751a:	4293      	cmp	r3, r2
 800751c:	d809      	bhi.n	8007532 <TIM_SlaveTimer_SetConfig+0x96>
 800751e:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007522:	d064      	beq.n	80075ee <TIM_SlaveTimer_SetConfig+0x152>
 8007524:	4a36      	ldr	r2, [pc, #216]	; (8007600 <TIM_SlaveTimer_SetConfig+0x164>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d061      	beq.n	80075ee <TIM_SlaveTimer_SetConfig+0x152>
 800752a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800752e:	d05e      	beq.n	80075ee <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8007530:	e05e      	b.n	80075f0 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8007532:	4a34      	ldr	r2, [pc, #208]	; (8007604 <TIM_SlaveTimer_SetConfig+0x168>)
 8007534:	4293      	cmp	r3, r2
 8007536:	d05a      	beq.n	80075ee <TIM_SlaveTimer_SetConfig+0x152>
 8007538:	4a32      	ldr	r2, [pc, #200]	; (8007604 <TIM_SlaveTimer_SetConfig+0x168>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d803      	bhi.n	8007546 <TIM_SlaveTimer_SetConfig+0xaa>
 800753e:	4a32      	ldr	r2, [pc, #200]	; (8007608 <TIM_SlaveTimer_SetConfig+0x16c>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d054      	beq.n	80075ee <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8007544:	e054      	b.n	80075f0 <TIM_SlaveTimer_SetConfig+0x154>
  switch (sSlaveConfig->InputTrigger)
 8007546:	4a31      	ldr	r2, [pc, #196]	; (800760c <TIM_SlaveTimer_SetConfig+0x170>)
 8007548:	4293      	cmp	r3, r2
 800754a:	d050      	beq.n	80075ee <TIM_SlaveTimer_SetConfig+0x152>
 800754c:	4a30      	ldr	r2, [pc, #192]	; (8007610 <TIM_SlaveTimer_SetConfig+0x174>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d04d      	beq.n	80075ee <TIM_SlaveTimer_SetConfig+0x152>
      break;
 8007552:	e04d      	b.n	80075f0 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6818      	ldr	r0, [r3, #0]
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	68d9      	ldr	r1, [r3, #12]
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	689a      	ldr	r2, [r3, #8]
 8007560:	683b      	ldr	r3, [r7, #0]
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	f000 f8d2 	bl	800770c <TIM_ETR_SetConfig>
      break;
 8007568:	e042      	b.n	80075f0 <TIM_SlaveTimer_SetConfig+0x154>
      if ((sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED) || (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_COMBINED_GATEDRESET))
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b05      	cmp	r3, #5
 8007570:	d004      	beq.n	800757c <TIM_SlaveTimer_SetConfig+0xe0>
 8007572:	683b      	ldr	r3, [r7, #0]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f1b3 1f01 	cmp.w	r3, #65537	; 0x10001
 800757a:	d101      	bne.n	8007580 <TIM_SlaveTimer_SetConfig+0xe4>
        return HAL_ERROR;
 800757c:	2301      	movs	r3, #1
 800757e:	e038      	b.n	80075f2 <TIM_SlaveTimer_SetConfig+0x156>
      tmpccer = htim->Instance->CCER;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	6a1b      	ldr	r3, [r3, #32]
 8007586:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	6a1a      	ldr	r2, [r3, #32]
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	f022 0201 	bic.w	r2, r2, #1
 8007596:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	699b      	ldr	r3, [r3, #24]
 800759e:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075a6:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80075a8:	683b      	ldr	r3, [r7, #0]
 80075aa:	691b      	ldr	r3, [r3, #16]
 80075ac:	011b      	lsls	r3, r3, #4
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68fa      	ldr	r2, [r7, #12]
 80075ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	693a      	ldr	r2, [r7, #16]
 80075c2:	621a      	str	r2, [r3, #32]
      break;
 80075c4:	e014      	b.n	80075f0 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6818      	ldr	r0, [r3, #0]
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	6899      	ldr	r1, [r3, #8]
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	461a      	mov	r2, r3
 80075d4:	f000 f81e 	bl	8007614 <TIM_TI1_ConfigInputStage>
      break;
 80075d8:	e00a      	b.n	80075f0 <TIM_SlaveTimer_SetConfig+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6818      	ldr	r0, [r3, #0]
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	6899      	ldr	r1, [r3, #8]
 80075e2:	683b      	ldr	r3, [r7, #0]
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	461a      	mov	r2, r3
 80075e8:	f000 f843 	bl	8007672 <TIM_TI2_ConfigInputStage>
      break;
 80075ec:	e000      	b.n	80075f0 <TIM_SlaveTimer_SetConfig+0x154>
      break;
 80075ee:	bf00      	nop
  }
  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3718      	adds	r7, #24
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	00100030 	.word	0x00100030
 8007600:	00100020 	.word	0x00100020
 8007604:	00100050 	.word	0x00100050
 8007608:	00100040 	.word	0x00100040
 800760c:	00100060 	.word	0x00100060
 8007610:	00100070 	.word	0x00100070

08007614 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007614:	b480      	push	{r7}
 8007616:	b087      	sub	sp, #28
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6a1b      	ldr	r3, [r3, #32]
 8007624:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	6a1b      	ldr	r3, [r3, #32]
 800762a:	f023 0201 	bic.w	r2, r3, #1
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	699b      	ldr	r3, [r3, #24]
 8007636:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800763e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	011b      	lsls	r3, r3, #4
 8007644:	693a      	ldr	r2, [r7, #16]
 8007646:	4313      	orrs	r3, r2
 8007648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800764a:	697b      	ldr	r3, [r7, #20]
 800764c:	f023 030a 	bic.w	r3, r3, #10
 8007650:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007652:	697a      	ldr	r2, [r7, #20]
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	4313      	orrs	r3, r2
 8007658:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	693a      	ldr	r2, [r7, #16]
 800765e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	621a      	str	r2, [r3, #32]
}
 8007666:	bf00      	nop
 8007668:	371c      	adds	r7, #28
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007672:	b480      	push	{r7}
 8007674:	b087      	sub	sp, #28
 8007676:	af00      	add	r7, sp, #0
 8007678:	60f8      	str	r0, [r7, #12]
 800767a:	60b9      	str	r1, [r7, #8]
 800767c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	6a1b      	ldr	r3, [r3, #32]
 8007682:	f023 0210 	bic.w	r2, r3, #16
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	699b      	ldr	r3, [r3, #24]
 800768e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	6a1b      	ldr	r3, [r3, #32]
 8007694:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800769c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	031b      	lsls	r3, r3, #12
 80076a2:	697a      	ldr	r2, [r7, #20]
 80076a4:	4313      	orrs	r3, r2
 80076a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80076ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	011b      	lsls	r3, r3, #4
 80076b4:	693a      	ldr	r2, [r7, #16]
 80076b6:	4313      	orrs	r3, r2
 80076b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	697a      	ldr	r2, [r7, #20]
 80076be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	621a      	str	r2, [r3, #32]
}
 80076c6:	bf00      	nop
 80076c8:	371c      	adds	r7, #28
 80076ca:	46bd      	mov	sp, r7
 80076cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d0:	4770      	bx	lr

080076d2 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80076d2:	b480      	push	{r7}
 80076d4:	b085      	sub	sp, #20
 80076d6:	af00      	add	r7, sp, #0
 80076d8:	6078      	str	r0, [r7, #4]
 80076da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	689b      	ldr	r3, [r3, #8]
 80076e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80076e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80076ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80076ee:	683a      	ldr	r2, [r7, #0]
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	f043 0307 	orr.w	r3, r3, #7
 80076f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	68fa      	ldr	r2, [r7, #12]
 80076fe:	609a      	str	r2, [r3, #8]
}
 8007700:	bf00      	nop
 8007702:	3714      	adds	r7, #20
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800770c:	b480      	push	{r7}
 800770e:	b087      	sub	sp, #28
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]
 8007718:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007720:	697b      	ldr	r3, [r7, #20]
 8007722:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007726:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	021a      	lsls	r2, r3, #8
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	431a      	orrs	r2, r3
 8007730:	68bb      	ldr	r3, [r7, #8]
 8007732:	4313      	orrs	r3, r2
 8007734:	697a      	ldr	r2, [r7, #20]
 8007736:	4313      	orrs	r3, r2
 8007738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	697a      	ldr	r2, [r7, #20]
 800773e:	609a      	str	r2, [r3, #8]
}
 8007740:	bf00      	nop
 8007742:	371c      	adds	r7, #28
 8007744:	46bd      	mov	sp, r7
 8007746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774a:	4770      	bx	lr

0800774c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800774c:	b480      	push	{r7}
 800774e:	b085      	sub	sp, #20
 8007750:	af00      	add	r7, sp, #0
 8007752:	6078      	str	r0, [r7, #4]
 8007754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800775c:	2b01      	cmp	r3, #1
 800775e:	d101      	bne.n	8007764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007760:	2302      	movs	r3, #2
 8007762:	e074      	b.n	800784e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2202      	movs	r2, #2
 8007770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	689b      	ldr	r3, [r3, #8]
 8007782:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a34      	ldr	r2, [pc, #208]	; (800785c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800778a:	4293      	cmp	r3, r2
 800778c:	d009      	beq.n	80077a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a33      	ldr	r2, [pc, #204]	; (8007860 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d004      	beq.n	80077a2 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a31      	ldr	r2, [pc, #196]	; (8007864 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d108      	bne.n	80077b4 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80077a8:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	4313      	orrs	r3, r2
 80077b2:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80077ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80077be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	68fa      	ldr	r2, [r7, #12]
 80077c6:	4313      	orrs	r3, r2
 80077c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68fa      	ldr	r2, [r7, #12]
 80077d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a21      	ldr	r2, [pc, #132]	; (800785c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d022      	beq.n	8007822 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077e4:	d01d      	beq.n	8007822 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a1f      	ldr	r2, [pc, #124]	; (8007868 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d018      	beq.n	8007822 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a1d      	ldr	r2, [pc, #116]	; (800786c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d013      	beq.n	8007822 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a1c      	ldr	r2, [pc, #112]	; (8007870 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d00e      	beq.n	8007822 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	4a15      	ldr	r2, [pc, #84]	; (8007860 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800780a:	4293      	cmp	r3, r2
 800780c:	d009      	beq.n	8007822 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	4a18      	ldr	r2, [pc, #96]	; (8007874 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d004      	beq.n	8007822 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4a11      	ldr	r2, [pc, #68]	; (8007864 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800781e:	4293      	cmp	r3, r2
 8007820:	d10c      	bne.n	800783c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007828:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	68ba      	ldr	r2, [r7, #8]
 8007830:	4313      	orrs	r3, r2
 8007832:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	68ba      	ldr	r2, [r7, #8]
 800783a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2200      	movs	r2, #0
 8007848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800784c:	2300      	movs	r3, #0
}
 800784e:	4618      	mov	r0, r3
 8007850:	3714      	adds	r7, #20
 8007852:	46bd      	mov	sp, r7
 8007854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007858:	4770      	bx	lr
 800785a:	bf00      	nop
 800785c:	40012c00 	.word	0x40012c00
 8007860:	40013400 	.word	0x40013400
 8007864:	40015000 	.word	0x40015000
 8007868:	40000400 	.word	0x40000400
 800786c:	40000800 	.word	0x40000800
 8007870:	40000c00 	.word	0x40000c00
 8007874:	40014000 	.word	0x40014000

08007878 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007878:	b480      	push	{r7}
 800787a:	b085      	sub	sp, #20
 800787c:	af00      	add	r7, sp, #0
 800787e:	6078      	str	r0, [r7, #4]
 8007880:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007882:	2300      	movs	r3, #0
 8007884:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800788c:	2b01      	cmp	r3, #1
 800788e:	d101      	bne.n	8007894 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007890:	2302      	movs	r3, #2
 8007892:	e096      	b.n	80079c2 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	2201      	movs	r2, #1
 8007898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	4313      	orrs	r3, r2
 80078a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80078b0:	683b      	ldr	r3, [r7, #0]
 80078b2:	689b      	ldr	r3, [r3, #8]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80078be:	683b      	ldr	r3, [r7, #0]
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	4313      	orrs	r3, r2
 80078c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	4313      	orrs	r3, r2
 80078e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	695b      	ldr	r3, [r3, #20]
 80078ec:	4313      	orrs	r3, r2
 80078ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fa:	4313      	orrs	r3, r2
 80078fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007904:	683b      	ldr	r3, [r7, #0]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	041b      	lsls	r3, r3, #16
 800790a:	4313      	orrs	r3, r2
 800790c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	4a2f      	ldr	r2, [pc, #188]	; (80079d0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d009      	beq.n	800792c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	4a2d      	ldr	r2, [pc, #180]	; (80079d4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800791e:	4293      	cmp	r3, r2
 8007920:	d004      	beq.n	800792c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a2c      	ldr	r2, [pc, #176]	; (80079d8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007928:	4293      	cmp	r3, r2
 800792a:	d106      	bne.n	800793a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	69db      	ldr	r3, [r3, #28]
 8007936:	4313      	orrs	r3, r2
 8007938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a24      	ldr	r2, [pc, #144]	; (80079d0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d009      	beq.n	8007958 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a22      	ldr	r2, [pc, #136]	; (80079d4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d004      	beq.n	8007958 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a21      	ldr	r2, [pc, #132]	; (80079d8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d12b      	bne.n	80079b0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007962:	051b      	lsls	r3, r3, #20
 8007964:	4313      	orrs	r3, r2
 8007966:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800796e:	683b      	ldr	r3, [r7, #0]
 8007970:	6a1b      	ldr	r3, [r3, #32]
 8007972:	4313      	orrs	r3, r2
 8007974:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007980:	4313      	orrs	r3, r2
 8007982:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	4a11      	ldr	r2, [pc, #68]	; (80079d0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800798a:	4293      	cmp	r3, r2
 800798c:	d009      	beq.n	80079a2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	4a10      	ldr	r2, [pc, #64]	; (80079d4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007994:	4293      	cmp	r3, r2
 8007996:	d004      	beq.n	80079a2 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a0e      	ldr	r2, [pc, #56]	; (80079d8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d106      	bne.n	80079b0 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079ac:	4313      	orrs	r3, r2
 80079ae:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	68fa      	ldr	r2, [r7, #12]
 80079b6:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2200      	movs	r2, #0
 80079bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3714      	adds	r7, #20
 80079c6:	46bd      	mov	sp, r7
 80079c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079cc:	4770      	bx	lr
 80079ce:	bf00      	nop
 80079d0:	40012c00 	.word	0x40012c00
 80079d4:	40013400 	.word	0x40013400
 80079d8:	40015000 	.word	0x40015000

080079dc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079f0:	b480      	push	{r7}
 80079f2:	b083      	sub	sp, #12
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079f8:	bf00      	nop
 80079fa:	370c      	adds	r7, #12
 80079fc:	46bd      	mov	sp, r7
 80079fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a02:	4770      	bx	lr

08007a04 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007a04:	b480      	push	{r7}
 8007a06:	b083      	sub	sp, #12
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007a0c:	bf00      	nop
 8007a0e:	370c      	adds	r7, #12
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr

08007a18 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007a20:	bf00      	nop
 8007a22:	370c      	adds	r7, #12
 8007a24:	46bd      	mov	sp, r7
 8007a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2a:	4770      	bx	lr

08007a2c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007a34:	bf00      	nop
 8007a36:	370c      	adds	r7, #12
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3e:	4770      	bx	lr

08007a40 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b083      	sub	sp, #12
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007a48:	bf00      	nop
 8007a4a:	370c      	adds	r7, #12
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007a5c:	bf00      	nop
 8007a5e:	370c      	adds	r7, #12
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <LL_EXTI_EnableIT_0_31>:
{
 8007a68:	b480      	push	{r7}
 8007a6a:	b083      	sub	sp, #12
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8007a70:	4b05      	ldr	r3, [pc, #20]	; (8007a88 <LL_EXTI_EnableIT_0_31+0x20>)
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	4904      	ldr	r1, [pc, #16]	; (8007a88 <LL_EXTI_EnableIT_0_31+0x20>)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	4313      	orrs	r3, r2
 8007a7a:	600b      	str	r3, [r1, #0]
}
 8007a7c:	bf00      	nop
 8007a7e:	370c      	adds	r7, #12
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr
 8007a88:	40010400 	.word	0x40010400

08007a8c <LL_EXTI_EnableIT_32_63>:
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8007a94:	4b05      	ldr	r3, [pc, #20]	; (8007aac <LL_EXTI_EnableIT_32_63+0x20>)
 8007a96:	6a1a      	ldr	r2, [r3, #32]
 8007a98:	4904      	ldr	r1, [pc, #16]	; (8007aac <LL_EXTI_EnableIT_32_63+0x20>)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	620b      	str	r3, [r1, #32]
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	40010400 	.word	0x40010400

08007ab0 <LL_EXTI_DisableIT_0_31>:
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8007ab8:	4b06      	ldr	r3, [pc, #24]	; (8007ad4 <LL_EXTI_DisableIT_0_31+0x24>)
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	43db      	mvns	r3, r3
 8007ac0:	4904      	ldr	r1, [pc, #16]	; (8007ad4 <LL_EXTI_DisableIT_0_31+0x24>)
 8007ac2:	4013      	ands	r3, r2
 8007ac4:	600b      	str	r3, [r1, #0]
}
 8007ac6:	bf00      	nop
 8007ac8:	370c      	adds	r7, #12
 8007aca:	46bd      	mov	sp, r7
 8007acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad0:	4770      	bx	lr
 8007ad2:	bf00      	nop
 8007ad4:	40010400 	.word	0x40010400

08007ad8 <LL_EXTI_DisableIT_32_63>:
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8007ae0:	4b06      	ldr	r3, [pc, #24]	; (8007afc <LL_EXTI_DisableIT_32_63+0x24>)
 8007ae2:	6a1a      	ldr	r2, [r3, #32]
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	43db      	mvns	r3, r3
 8007ae8:	4904      	ldr	r1, [pc, #16]	; (8007afc <LL_EXTI_DisableIT_32_63+0x24>)
 8007aea:	4013      	ands	r3, r2
 8007aec:	620b      	str	r3, [r1, #32]
}
 8007aee:	bf00      	nop
 8007af0:	370c      	adds	r7, #12
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	40010400 	.word	0x40010400

08007b00 <LL_EXTI_EnableEvent_0_31>:
{
 8007b00:	b480      	push	{r7}
 8007b02:	b083      	sub	sp, #12
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8007b08:	4b05      	ldr	r3, [pc, #20]	; (8007b20 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007b0a:	685a      	ldr	r2, [r3, #4]
 8007b0c:	4904      	ldr	r1, [pc, #16]	; (8007b20 <LL_EXTI_EnableEvent_0_31+0x20>)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	604b      	str	r3, [r1, #4]
}
 8007b14:	bf00      	nop
 8007b16:	370c      	adds	r7, #12
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr
 8007b20:	40010400 	.word	0x40010400

08007b24 <LL_EXTI_EnableEvent_32_63>:
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8007b2c:	4b05      	ldr	r3, [pc, #20]	; (8007b44 <LL_EXTI_EnableEvent_32_63+0x20>)
 8007b2e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b30:	4904      	ldr	r1, [pc, #16]	; (8007b44 <LL_EXTI_EnableEvent_32_63+0x20>)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	4313      	orrs	r3, r2
 8007b36:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007b38:	bf00      	nop
 8007b3a:	370c      	adds	r7, #12
 8007b3c:	46bd      	mov	sp, r7
 8007b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b42:	4770      	bx	lr
 8007b44:	40010400 	.word	0x40010400

08007b48 <LL_EXTI_DisableEvent_0_31>:
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b083      	sub	sp, #12
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8007b50:	4b06      	ldr	r3, [pc, #24]	; (8007b6c <LL_EXTI_DisableEvent_0_31+0x24>)
 8007b52:	685a      	ldr	r2, [r3, #4]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	43db      	mvns	r3, r3
 8007b58:	4904      	ldr	r1, [pc, #16]	; (8007b6c <LL_EXTI_DisableEvent_0_31+0x24>)
 8007b5a:	4013      	ands	r3, r2
 8007b5c:	604b      	str	r3, [r1, #4]
}
 8007b5e:	bf00      	nop
 8007b60:	370c      	adds	r7, #12
 8007b62:	46bd      	mov	sp, r7
 8007b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b68:	4770      	bx	lr
 8007b6a:	bf00      	nop
 8007b6c:	40010400 	.word	0x40010400

08007b70 <LL_EXTI_DisableEvent_32_63>:
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8007b78:	4b06      	ldr	r3, [pc, #24]	; (8007b94 <LL_EXTI_DisableEvent_32_63+0x24>)
 8007b7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	43db      	mvns	r3, r3
 8007b80:	4904      	ldr	r1, [pc, #16]	; (8007b94 <LL_EXTI_DisableEvent_32_63+0x24>)
 8007b82:	4013      	ands	r3, r2
 8007b84:	624b      	str	r3, [r1, #36]	; 0x24
}
 8007b86:	bf00      	nop
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr
 8007b92:	bf00      	nop
 8007b94:	40010400 	.word	0x40010400

08007b98 <LL_EXTI_EnableRisingTrig_0_31>:
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8007ba0:	4b05      	ldr	r3, [pc, #20]	; (8007bb8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007ba2:	689a      	ldr	r2, [r3, #8]
 8007ba4:	4904      	ldr	r1, [pc, #16]	; (8007bb8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	608b      	str	r3, [r1, #8]
}
 8007bac:	bf00      	nop
 8007bae:	370c      	adds	r7, #12
 8007bb0:	46bd      	mov	sp, r7
 8007bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb6:	4770      	bx	lr
 8007bb8:	40010400 	.word	0x40010400

08007bbc <LL_EXTI_EnableRisingTrig_32_63>:
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8007bc4:	4b05      	ldr	r3, [pc, #20]	; (8007bdc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007bc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bc8:	4904      	ldr	r1, [pc, #16]	; (8007bdc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007bd0:	bf00      	nop
 8007bd2:	370c      	adds	r7, #12
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bda:	4770      	bx	lr
 8007bdc:	40010400 	.word	0x40010400

08007be0 <LL_EXTI_DisableRisingTrig_0_31>:
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8007be8:	4b06      	ldr	r3, [pc, #24]	; (8007c04 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007bea:	689a      	ldr	r2, [r3, #8]
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	43db      	mvns	r3, r3
 8007bf0:	4904      	ldr	r1, [pc, #16]	; (8007c04 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	608b      	str	r3, [r1, #8]
}
 8007bf6:	bf00      	nop
 8007bf8:	370c      	adds	r7, #12
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	40010400 	.word	0x40010400

08007c08 <LL_EXTI_DisableRisingTrig_32_63>:
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8007c10:	4b06      	ldr	r3, [pc, #24]	; (8007c2c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8007c12:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	43db      	mvns	r3, r3
 8007c18:	4904      	ldr	r1, [pc, #16]	; (8007c2c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8007c1a:	4013      	ands	r3, r2
 8007c1c:	628b      	str	r3, [r1, #40]	; 0x28
}
 8007c1e:	bf00      	nop
 8007c20:	370c      	adds	r7, #12
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	40010400 	.word	0x40010400

08007c30 <LL_EXTI_EnableFallingTrig_0_31>:
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8007c38:	4b05      	ldr	r3, [pc, #20]	; (8007c50 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007c3a:	68da      	ldr	r2, [r3, #12]
 8007c3c:	4904      	ldr	r1, [pc, #16]	; (8007c50 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	60cb      	str	r3, [r1, #12]
}
 8007c44:	bf00      	nop
 8007c46:	370c      	adds	r7, #12
 8007c48:	46bd      	mov	sp, r7
 8007c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4e:	4770      	bx	lr
 8007c50:	40010400 	.word	0x40010400

08007c54 <LL_EXTI_EnableFallingTrig_32_63>:
{
 8007c54:	b480      	push	{r7}
 8007c56:	b083      	sub	sp, #12
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8007c5c:	4b05      	ldr	r3, [pc, #20]	; (8007c74 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007c5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c60:	4904      	ldr	r1, [pc, #16]	; (8007c74 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	4313      	orrs	r3, r2
 8007c66:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8007c68:	bf00      	nop
 8007c6a:	370c      	adds	r7, #12
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c72:	4770      	bx	lr
 8007c74:	40010400 	.word	0x40010400

08007c78 <LL_EXTI_DisableFallingTrig_0_31>:
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8007c80:	4b06      	ldr	r3, [pc, #24]	; (8007c9c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007c82:	68da      	ldr	r2, [r3, #12]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	43db      	mvns	r3, r3
 8007c88:	4904      	ldr	r1, [pc, #16]	; (8007c9c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8007c8a:	4013      	ands	r3, r2
 8007c8c:	60cb      	str	r3, [r1, #12]
}
 8007c8e:	bf00      	nop
 8007c90:	370c      	adds	r7, #12
 8007c92:	46bd      	mov	sp, r7
 8007c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	40010400 	.word	0x40010400

08007ca0 <LL_EXTI_DisableFallingTrig_32_63>:
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8007ca8:	4b06      	ldr	r3, [pc, #24]	; (8007cc4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8007caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	43db      	mvns	r3, r3
 8007cb0:	4904      	ldr	r1, [pc, #16]	; (8007cc4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8007cb2:	4013      	ands	r3, r2
 8007cb4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8007cb6:	bf00      	nop
 8007cb8:	370c      	adds	r7, #12
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc0:	4770      	bx	lr
 8007cc2:	bf00      	nop
 8007cc4:	40010400 	.word	0x40010400

08007cc8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8007cd0:	2300      	movs	r3, #0
 8007cd2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	7a1b      	ldrb	r3, [r3, #8]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	f000 80c8 	beq.w	8007e6e <LL_EXTI_Init+0x1a6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d05d      	beq.n	8007da2 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	7a5b      	ldrb	r3, [r3, #9]
 8007cea:	2b01      	cmp	r3, #1
 8007cec:	d00e      	beq.n	8007d0c <LL_EXTI_Init+0x44>
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d017      	beq.n	8007d22 <LL_EXTI_Init+0x5a>
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d120      	bne.n	8007d38 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	f7ff ff24 	bl	8007b48 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	4618      	mov	r0, r3
 8007d06:	f7ff feaf 	bl	8007a68 <LL_EXTI_EnableIT_0_31>
          break;
 8007d0a:	e018      	b.n	8007d3e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4618      	mov	r0, r3
 8007d12:	f7ff fecd 	bl	8007ab0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7ff fef0 	bl	8007b00 <LL_EXTI_EnableEvent_0_31>
          break;
 8007d20:	e00d      	b.n	8007d3e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4618      	mov	r0, r3
 8007d28:	f7ff fe9e 	bl	8007a68 <LL_EXTI_EnableIT_0_31>
          /* Directly Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4618      	mov	r0, r3
 8007d32:	f7ff fee5 	bl	8007b00 <LL_EXTI_EnableEvent_0_31>
          break;
 8007d36:	e002      	b.n	8007d3e <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 8007d38:	2301      	movs	r3, #1
 8007d3a:	60fb      	str	r3, [r7, #12]
          break;
 8007d3c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	7a9b      	ldrb	r3, [r3, #10]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d02d      	beq.n	8007da2 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	7a9b      	ldrb	r3, [r3, #10]
 8007d4a:	2b02      	cmp	r3, #2
 8007d4c:	d00e      	beq.n	8007d6c <LL_EXTI_Init+0xa4>
 8007d4e:	2b03      	cmp	r3, #3
 8007d50:	d017      	beq.n	8007d82 <LL_EXTI_Init+0xba>
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d120      	bne.n	8007d98 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	f7ff ff8c 	bl	8007c78 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	4618      	mov	r0, r3
 8007d66:	f7ff ff17 	bl	8007b98 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8007d6a:	e01b      	b.n	8007da4 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4618      	mov	r0, r3
 8007d72:	f7ff ff35 	bl	8007be0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	f7ff ff58 	bl	8007c30 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8007d80:	e010      	b.n	8007da4 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	4618      	mov	r0, r3
 8007d88:	f7ff ff06 	bl	8007b98 <LL_EXTI_EnableRisingTrig_0_31>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7ff ff4d 	bl	8007c30 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8007d96:	e005      	b.n	8007da4 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f043 0302 	orr.w	r3, r3, #2
 8007d9e:	60fb      	str	r3, [r7, #12]
            break;
 8007da0:	e000      	b.n	8007da4 <LL_EXTI_Init+0xdc>
        }
      }
 8007da2:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	685b      	ldr	r3, [r3, #4]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d075      	beq.n	8007e98 <LL_EXTI_Init+0x1d0>
    {
      switch (EXTI_InitStruct->Mode)
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	7a5b      	ldrb	r3, [r3, #9]
 8007db0:	2b01      	cmp	r3, #1
 8007db2:	d00e      	beq.n	8007dd2 <LL_EXTI_Init+0x10a>
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d017      	beq.n	8007de8 <LL_EXTI_Init+0x120>
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d120      	bne.n	8007dfe <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	685b      	ldr	r3, [r3, #4]
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	f7ff fed5 	bl	8007b70 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7ff fe5e 	bl	8007a8c <LL_EXTI_EnableIT_32_63>
          break;
 8007dd0:	e01a      	b.n	8007e08 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	685b      	ldr	r3, [r3, #4]
 8007dd6:	4618      	mov	r0, r3
 8007dd8:	f7ff fe7e 	bl	8007ad8 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685b      	ldr	r3, [r3, #4]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7ff fe9f 	bl	8007b24 <LL_EXTI_EnableEvent_32_63>
          break;
 8007de6:	e00f      	b.n	8007e08 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	685b      	ldr	r3, [r3, #4]
 8007dec:	4618      	mov	r0, r3
 8007dee:	f7ff fe4d 	bl	8007a8c <LL_EXTI_EnableIT_32_63>
          /* Directly Enable IT on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	4618      	mov	r0, r3
 8007df8:	f7ff fe94 	bl	8007b24 <LL_EXTI_EnableEvent_32_63>
          break;
 8007dfc:	e004      	b.n	8007e08 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	f043 0304 	orr.w	r3, r3, #4
 8007e04:	60fb      	str	r3, [r7, #12]
          break;
 8007e06:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	7a9b      	ldrb	r3, [r3, #10]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d043      	beq.n	8007e98 <LL_EXTI_Init+0x1d0>
      {
        switch (EXTI_InitStruct->Trigger)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	7a9b      	ldrb	r3, [r3, #10]
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d00e      	beq.n	8007e36 <LL_EXTI_Init+0x16e>
 8007e18:	2b03      	cmp	r3, #3
 8007e1a:	d017      	beq.n	8007e4c <LL_EXTI_Init+0x184>
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	d120      	bne.n	8007e62 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	685b      	ldr	r3, [r3, #4]
 8007e24:	4618      	mov	r0, r3
 8007e26:	f7ff ff3b 	bl	8007ca0 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	685b      	ldr	r3, [r3, #4]
 8007e2e:	4618      	mov	r0, r3
 8007e30:	f7ff fec4 	bl	8007bbc <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8007e34:	e031      	b.n	8007e9a <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	685b      	ldr	r3, [r3, #4]
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	f7ff fee4 	bl	8007c08 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	685b      	ldr	r3, [r3, #4]
 8007e44:	4618      	mov	r0, r3
 8007e46:	f7ff ff05 	bl	8007c54 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8007e4a:	e026      	b.n	8007e9a <LL_EXTI_Init+0x1d2>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            /* Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	685b      	ldr	r3, [r3, #4]
 8007e50:	4618      	mov	r0, r3
 8007e52:	f7ff feb3 	bl	8007bbc <LL_EXTI_EnableRisingTrig_32_63>
            /* Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	685b      	ldr	r3, [r3, #4]
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7ff fefa 	bl	8007c54 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8007e60:	e01b      	b.n	8007e9a <LL_EXTI_Init+0x1d2>
          default:
            status |= 0x05u;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f043 0305 	orr.w	r3, r3, #5
 8007e68:	60fb      	str	r3, [r7, #12]
            break;
 8007e6a:	bf00      	nop
 8007e6c:	e015      	b.n	8007e9a <LL_EXTI_Init+0x1d2>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure IT EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	4618      	mov	r0, r3
 8007e74:	f7ff fe1c 	bl	8007ab0 <LL_EXTI_DisableIT_0_31>
    /* De-configure Event EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	4618      	mov	r0, r3
 8007e7e:	f7ff fe63 	bl	8007b48 <LL_EXTI_DisableEvent_0_31>
    /* De-configure IT EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f7ff fe26 	bl	8007ad8 <LL_EXTI_DisableIT_32_63>
    /* De-configure Event EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7ff fe6d 	bl	8007b70 <LL_EXTI_DisableEvent_32_63>
 8007e96:	e000      	b.n	8007e9a <LL_EXTI_Init+0x1d2>
      }
 8007e98:	bf00      	nop
  }

  return status;
 8007e9a:	68fb      	ldr	r3, [r7, #12]
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3710      	adds	r7, #16
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <LL_GPIO_SetPinMode>:
{
 8007ea4:	b480      	push	{r7}
 8007ea6:	b089      	sub	sp, #36	; 0x24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	60b9      	str	r1, [r7, #8]
 8007eae:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	fa93 f3a3 	rbit	r3, r3
 8007ebe:	613b      	str	r3, [r7, #16]
  return result;
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	fab3 f383 	clz	r3, r3
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	005b      	lsls	r3, r3, #1
 8007eca:	2103      	movs	r1, #3
 8007ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8007ed0:	43db      	mvns	r3, r3
 8007ed2:	401a      	ands	r2, r3
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007ed8:	69fb      	ldr	r3, [r7, #28]
 8007eda:	fa93 f3a3 	rbit	r3, r3
 8007ede:	61bb      	str	r3, [r7, #24]
  return result;
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	fab3 f383 	clz	r3, r3
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	005b      	lsls	r3, r3, #1
 8007eea:	6879      	ldr	r1, [r7, #4]
 8007eec:	fa01 f303 	lsl.w	r3, r1, r3
 8007ef0:	431a      	orrs	r2, r3
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	601a      	str	r2, [r3, #0]
}
 8007ef6:	bf00      	nop
 8007ef8:	3724      	adds	r7, #36	; 0x24
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <LL_GPIO_SetPinOutputType>:
{
 8007f02:	b480      	push	{r7}
 8007f04:	b085      	sub	sp, #20
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	60f8      	str	r0, [r7, #12]
 8007f0a:	60b9      	str	r1, [r7, #8]
 8007f0c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	685a      	ldr	r2, [r3, #4]
 8007f12:	68bb      	ldr	r3, [r7, #8]
 8007f14:	43db      	mvns	r3, r3
 8007f16:	401a      	ands	r2, r3
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	6879      	ldr	r1, [r7, #4]
 8007f1c:	fb01 f303 	mul.w	r3, r1, r3
 8007f20:	431a      	orrs	r2, r3
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	605a      	str	r2, [r3, #4]
}
 8007f26:	bf00      	nop
 8007f28:	3714      	adds	r7, #20
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <LL_GPIO_SetPinSpeed>:
{
 8007f32:	b480      	push	{r7}
 8007f34:	b089      	sub	sp, #36	; 0x24
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	60f8      	str	r0, [r7, #12]
 8007f3a:	60b9      	str	r1, [r7, #8]
 8007f3c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	689a      	ldr	r2, [r3, #8]
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	fa93 f3a3 	rbit	r3, r3
 8007f4c:	613b      	str	r3, [r7, #16]
  return result;
 8007f4e:	693b      	ldr	r3, [r7, #16]
 8007f50:	fab3 f383 	clz	r3, r3
 8007f54:	b2db      	uxtb	r3, r3
 8007f56:	005b      	lsls	r3, r3, #1
 8007f58:	2103      	movs	r1, #3
 8007f5a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f5e:	43db      	mvns	r3, r3
 8007f60:	401a      	ands	r2, r3
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	fa93 f3a3 	rbit	r3, r3
 8007f6c:	61bb      	str	r3, [r7, #24]
  return result;
 8007f6e:	69bb      	ldr	r3, [r7, #24]
 8007f70:	fab3 f383 	clz	r3, r3
 8007f74:	b2db      	uxtb	r3, r3
 8007f76:	005b      	lsls	r3, r3, #1
 8007f78:	6879      	ldr	r1, [r7, #4]
 8007f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f7e:	431a      	orrs	r2, r3
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	609a      	str	r2, [r3, #8]
}
 8007f84:	bf00      	nop
 8007f86:	3724      	adds	r7, #36	; 0x24
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8e:	4770      	bx	lr

08007f90 <LL_GPIO_SetPinPull>:
{
 8007f90:	b480      	push	{r7}
 8007f92:	b089      	sub	sp, #36	; 0x24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	60f8      	str	r0, [r7, #12]
 8007f98:	60b9      	str	r1, [r7, #8]
 8007f9a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	68da      	ldr	r2, [r3, #12]
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	fa93 f3a3 	rbit	r3, r3
 8007faa:	613b      	str	r3, [r7, #16]
  return result;
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	fab3 f383 	clz	r3, r3
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	005b      	lsls	r3, r3, #1
 8007fb6:	2103      	movs	r1, #3
 8007fb8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fbc:	43db      	mvns	r3, r3
 8007fbe:	401a      	ands	r2, r3
 8007fc0:	68bb      	ldr	r3, [r7, #8]
 8007fc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	fa93 f3a3 	rbit	r3, r3
 8007fca:	61bb      	str	r3, [r7, #24]
  return result;
 8007fcc:	69bb      	ldr	r3, [r7, #24]
 8007fce:	fab3 f383 	clz	r3, r3
 8007fd2:	b2db      	uxtb	r3, r3
 8007fd4:	005b      	lsls	r3, r3, #1
 8007fd6:	6879      	ldr	r1, [r7, #4]
 8007fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8007fdc:	431a      	orrs	r2, r3
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	60da      	str	r2, [r3, #12]
}
 8007fe2:	bf00      	nop
 8007fe4:	3724      	adds	r7, #36	; 0x24
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fec:	4770      	bx	lr

08007fee <LL_GPIO_SetAFPin_0_7>:
{
 8007fee:	b480      	push	{r7}
 8007ff0:	b089      	sub	sp, #36	; 0x24
 8007ff2:	af00      	add	r7, sp, #0
 8007ff4:	60f8      	str	r0, [r7, #12]
 8007ff6:	60b9      	str	r1, [r7, #8]
 8007ff8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	6a1a      	ldr	r2, [r3, #32]
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008002:	697b      	ldr	r3, [r7, #20]
 8008004:	fa93 f3a3 	rbit	r3, r3
 8008008:	613b      	str	r3, [r7, #16]
  return result;
 800800a:	693b      	ldr	r3, [r7, #16]
 800800c:	fab3 f383 	clz	r3, r3
 8008010:	b2db      	uxtb	r3, r3
 8008012:	009b      	lsls	r3, r3, #2
 8008014:	210f      	movs	r1, #15
 8008016:	fa01 f303 	lsl.w	r3, r1, r3
 800801a:	43db      	mvns	r3, r3
 800801c:	401a      	ands	r2, r3
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008022:	69fb      	ldr	r3, [r7, #28]
 8008024:	fa93 f3a3 	rbit	r3, r3
 8008028:	61bb      	str	r3, [r7, #24]
  return result;
 800802a:	69bb      	ldr	r3, [r7, #24]
 800802c:	fab3 f383 	clz	r3, r3
 8008030:	b2db      	uxtb	r3, r3
 8008032:	009b      	lsls	r3, r3, #2
 8008034:	6879      	ldr	r1, [r7, #4]
 8008036:	fa01 f303 	lsl.w	r3, r1, r3
 800803a:	431a      	orrs	r2, r3
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	621a      	str	r2, [r3, #32]
}
 8008040:	bf00      	nop
 8008042:	3724      	adds	r7, #36	; 0x24
 8008044:	46bd      	mov	sp, r7
 8008046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804a:	4770      	bx	lr

0800804c <LL_GPIO_SetAFPin_8_15>:
{
 800804c:	b480      	push	{r7}
 800804e:	b089      	sub	sp, #36	; 0x24
 8008050:	af00      	add	r7, sp, #0
 8008052:	60f8      	str	r0, [r7, #12]
 8008054:	60b9      	str	r1, [r7, #8]
 8008056:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800805c:	68bb      	ldr	r3, [r7, #8]
 800805e:	0a1b      	lsrs	r3, r3, #8
 8008060:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008062:	697b      	ldr	r3, [r7, #20]
 8008064:	fa93 f3a3 	rbit	r3, r3
 8008068:	613b      	str	r3, [r7, #16]
  return result;
 800806a:	693b      	ldr	r3, [r7, #16]
 800806c:	fab3 f383 	clz	r3, r3
 8008070:	b2db      	uxtb	r3, r3
 8008072:	009b      	lsls	r3, r3, #2
 8008074:	210f      	movs	r1, #15
 8008076:	fa01 f303 	lsl.w	r3, r1, r3
 800807a:	43db      	mvns	r3, r3
 800807c:	401a      	ands	r2, r3
 800807e:	68bb      	ldr	r3, [r7, #8]
 8008080:	0a1b      	lsrs	r3, r3, #8
 8008082:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	fa93 f3a3 	rbit	r3, r3
 800808a:	61bb      	str	r3, [r7, #24]
  return result;
 800808c:	69bb      	ldr	r3, [r7, #24]
 800808e:	fab3 f383 	clz	r3, r3
 8008092:	b2db      	uxtb	r3, r3
 8008094:	009b      	lsls	r3, r3, #2
 8008096:	6879      	ldr	r1, [r7, #4]
 8008098:	fa01 f303 	lsl.w	r3, r1, r3
 800809c:	431a      	orrs	r2, r3
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80080a2:	bf00      	nop
 80080a4:	3724      	adds	r7, #36	; 0x24
 80080a6:	46bd      	mov	sp, r7
 80080a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ac:	4770      	bx	lr

080080ae <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80080ae:	b580      	push	{r7, lr}
 80080b0:	b086      	sub	sp, #24
 80080b2:	af00      	add	r7, sp, #0
 80080b4:	6078      	str	r0, [r7, #4]
 80080b6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80080b8:	683b      	ldr	r3, [r7, #0]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	fa93 f3a3 	rbit	r3, r3
 80080c4:	60bb      	str	r3, [r7, #8]
  return result;
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	fab3 f383 	clz	r3, r3
 80080cc:	b2db      	uxtb	r3, r3
 80080ce:	617b      	str	r3, [r7, #20]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80080d0:	e040      	b.n	8008154 <LL_GPIO_Init+0xa6>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	2101      	movs	r1, #1
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	fa01 f303 	lsl.w	r3, r1, r3
 80080de:	4013      	ands	r3, r2
 80080e0:	613b      	str	r3, [r7, #16]

    if (currentpin != 0x00u)
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d032      	beq.n	800814e <LL_GPIO_Init+0xa0>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	461a      	mov	r2, r3
 80080ee:	6939      	ldr	r1, [r7, #16]
 80080f0:	6878      	ldr	r0, [r7, #4]
 80080f2:	f7ff fed7 	bl	8007ea4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80080f6:	683b      	ldr	r3, [r7, #0]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	2b01      	cmp	r3, #1
 80080fc:	d003      	beq.n	8008106 <LL_GPIO_Init+0x58>
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	685b      	ldr	r3, [r3, #4]
 8008102:	2b02      	cmp	r3, #2
 8008104:	d106      	bne.n	8008114 <LL_GPIO_Init+0x66>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	461a      	mov	r2, r3
 800810c:	6939      	ldr	r1, [r7, #16]
 800810e:	6878      	ldr	r0, [r7, #4]
 8008110:	f7ff ff0f 	bl	8007f32 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8008114:	683b      	ldr	r3, [r7, #0]
 8008116:	691b      	ldr	r3, [r3, #16]
 8008118:	461a      	mov	r2, r3
 800811a:	6939      	ldr	r1, [r7, #16]
 800811c:	6878      	ldr	r0, [r7, #4]
 800811e:	f7ff ff37 	bl	8007f90 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8008122:	683b      	ldr	r3, [r7, #0]
 8008124:	685b      	ldr	r3, [r3, #4]
 8008126:	2b02      	cmp	r3, #2
 8008128:	d111      	bne.n	800814e <LL_GPIO_Init+0xa0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	2bff      	cmp	r3, #255	; 0xff
 800812e:	d807      	bhi.n	8008140 <LL_GPIO_Init+0x92>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	695b      	ldr	r3, [r3, #20]
 8008134:	461a      	mov	r2, r3
 8008136:	6939      	ldr	r1, [r7, #16]
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f7ff ff58 	bl	8007fee <LL_GPIO_SetAFPin_0_7>
 800813e:	e006      	b.n	800814e <LL_GPIO_Init+0xa0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	695b      	ldr	r3, [r3, #20]
 8008144:	461a      	mov	r2, r3
 8008146:	6939      	ldr	r1, [r7, #16]
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f7ff ff7f 	bl	800804c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	3301      	adds	r3, #1
 8008152:	617b      	str	r3, [r7, #20]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8008154:	683b      	ldr	r3, [r7, #0]
 8008156:	681a      	ldr	r2, [r3, #0]
 8008158:	697b      	ldr	r3, [r7, #20]
 800815a:	fa22 f303 	lsr.w	r3, r2, r3
 800815e:	2b00      	cmp	r3, #0
 8008160:	d1b7      	bne.n	80080d2 <LL_GPIO_Init+0x24>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8008162:	683b      	ldr	r3, [r7, #0]
 8008164:	685b      	ldr	r3, [r3, #4]
 8008166:	2b01      	cmp	r3, #1
 8008168:	d003      	beq.n	8008172 <LL_GPIO_Init+0xc4>
 800816a:	683b      	ldr	r3, [r7, #0]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	2b02      	cmp	r3, #2
 8008170:	d107      	bne.n	8008182 <LL_GPIO_Init+0xd4>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	6819      	ldr	r1, [r3, #0]
 8008176:	683b      	ldr	r3, [r7, #0]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	461a      	mov	r2, r3
 800817c:	6878      	ldr	r0, [r7, #4]
 800817e:	f7ff fec0 	bl	8007f02 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8008182:	2300      	movs	r3, #0
}
 8008184:	4618      	mov	r0, r3
 8008186:	3718      	adds	r7, #24
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <ILI9341_Draw_Bordered_Filled_Rectangle_Coord>:
 *
 *
 */

void ILI9341_Draw_Bordered_Filled_Rectangle_Coord(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t inner_colour, uint8_t border_weight, uint8_t border_colour)
{
 800818c:	b590      	push	{r4, r7, lr}
 800818e:	b087      	sub	sp, #28
 8008190:	af02      	add	r7, sp, #8
 8008192:	4604      	mov	r4, r0
 8008194:	4608      	mov	r0, r1
 8008196:	4611      	mov	r1, r2
 8008198:	461a      	mov	r2, r3
 800819a:	4623      	mov	r3, r4
 800819c:	80fb      	strh	r3, [r7, #6]
 800819e:	4603      	mov	r3, r0
 80081a0:	80bb      	strh	r3, [r7, #4]
 80081a2:	460b      	mov	r3, r1
 80081a4:	807b      	strh	r3, [r7, #2]
 80081a6:	4613      	mov	r3, r2
 80081a8:	803b      	strh	r3, [r7, #0]

	// Draw inwards (and shorter) for each level of border weight
	for(uint8_t b = 0; ; b++)
 80081aa:	2300      	movs	r3, #0
 80081ac:	73fb      	strb	r3, [r7, #15]
	{


		if(b > border_weight)
 80081ae:	7bfa      	ldrb	r2, [r7, #15]
 80081b0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80081b4:	429a      	cmp	r2, r3
 80081b6:	d93a      	bls.n	800822e <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0xa2>
		{

			// stop before the inner space reaches zero! (hard fault)
			if( ((y + b) == ((y + h) - b)) || ((x + b) == ((x + w) - b)) )
 80081b8:	88ba      	ldrh	r2, [r7, #4]
 80081ba:	7bfb      	ldrb	r3, [r7, #15]
 80081bc:	441a      	add	r2, r3
 80081be:	88b9      	ldrh	r1, [r7, #4]
 80081c0:	883b      	ldrh	r3, [r7, #0]
 80081c2:	4419      	add	r1, r3
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
 80081c6:	1acb      	subs	r3, r1, r3
 80081c8:	429a      	cmp	r2, r3
 80081ca:	f000 8090 	beq.w	80082ee <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
 80081ce:	88fa      	ldrh	r2, [r7, #6]
 80081d0:	7bfb      	ldrb	r3, [r7, #15]
 80081d2:	441a      	add	r2, r3
 80081d4:	88f9      	ldrh	r1, [r7, #6]
 80081d6:	887b      	ldrh	r3, [r7, #2]
 80081d8:	4419      	add	r1, r3
 80081da:	7bfb      	ldrb	r3, [r7, #15]
 80081dc:	1acb      	subs	r3, r1, r3
 80081de:	429a      	cmp	r2, r3
 80081e0:	f000 8085 	beq.w	80082ee <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x162>
				// add final line?
				goto finish;
			}
			else
			{
				ILI9341_Draw_Rectangle(x + b, y + b, (w - (2*b)) + 1, (h - (2*b)) + 1, inner_colour, AREA_CHUNK);
 80081e4:	7bfb      	ldrb	r3, [r7, #15]
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	88fb      	ldrh	r3, [r7, #6]
 80081ea:	4413      	add	r3, r2
 80081ec:	b298      	uxth	r0, r3
 80081ee:	7bfb      	ldrb	r3, [r7, #15]
 80081f0:	b29a      	uxth	r2, r3
 80081f2:	88bb      	ldrh	r3, [r7, #4]
 80081f4:	4413      	add	r3, r2
 80081f6:	b299      	uxth	r1, r3
 80081f8:	7bfb      	ldrb	r3, [r7, #15]
 80081fa:	b29b      	uxth	r3, r3
 80081fc:	005b      	lsls	r3, r3, #1
 80081fe:	b29b      	uxth	r3, r3
 8008200:	887a      	ldrh	r2, [r7, #2]
 8008202:	1ad3      	subs	r3, r2, r3
 8008204:	b29b      	uxth	r3, r3
 8008206:	3301      	adds	r3, #1
 8008208:	b29c      	uxth	r4, r3
 800820a:	7bfb      	ldrb	r3, [r7, #15]
 800820c:	b29b      	uxth	r3, r3
 800820e:	005b      	lsls	r3, r3, #1
 8008210:	b29b      	uxth	r3, r3
 8008212:	883a      	ldrh	r2, [r7, #0]
 8008214:	1ad3      	subs	r3, r2, r3
 8008216:	b29b      	uxth	r3, r3
 8008218:	3301      	adds	r3, #1
 800821a:	b29a      	uxth	r2, r3
 800821c:	2304      	movs	r3, #4
 800821e:	9301      	str	r3, [sp, #4]
 8008220:	8c3b      	ldrh	r3, [r7, #32]
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	4613      	mov	r3, r2
 8008226:	4622      	mov	r2, r4
 8008228:	f000 fd32 	bl	8008c90 <ILI9341_Draw_Rectangle>
				goto finish;
 800822c:	e060      	b.n	80082f0 <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x164>
			}
		}

		// Horizontal lines
		ILI9341_Draw_Horizontal_Line(	x + b,
 800822e:	7bfb      	ldrb	r3, [r7, #15]
 8008230:	b29a      	uxth	r2, r3
 8008232:	88fb      	ldrh	r3, [r7, #6]
 8008234:	4413      	add	r3, r2
 8008236:	b298      	uxth	r0, r3
 8008238:	7bfb      	ldrb	r3, [r7, #15]
 800823a:	b29a      	uxth	r2, r3
 800823c:	88bb      	ldrh	r3, [r7, #4]
 800823e:	4413      	add	r3, r2
 8008240:	b299      	uxth	r1, r3
 8008242:	7bfb      	ldrb	r3, [r7, #15]
 8008244:	b29b      	uxth	r3, r3
 8008246:	005b      	lsls	r3, r3, #1
 8008248:	b29b      	uxth	r3, r3
 800824a:	887a      	ldrh	r2, [r7, #2]
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	b29a      	uxth	r2, r3
 8008250:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008254:	b29b      	uxth	r3, r3
 8008256:	f000 fda1 	bl	8008d9c <ILI9341_Draw_Horizontal_Line>
										y + b,
										w - (2*b),
										border_colour);

		ILI9341_Draw_Horizontal_Line(	x + b,
 800825a:	7bfb      	ldrb	r3, [r7, #15]
 800825c:	b29a      	uxth	r2, r3
 800825e:	88fb      	ldrh	r3, [r7, #6]
 8008260:	4413      	add	r3, r2
 8008262:	b298      	uxth	r0, r3
										(y + h) - b,
 8008264:	88ba      	ldrh	r2, [r7, #4]
 8008266:	883b      	ldrh	r3, [r7, #0]
 8008268:	4413      	add	r3, r2
 800826a:	b29a      	uxth	r2, r3
		ILI9341_Draw_Horizontal_Line(	x + b,
 800826c:	7bfb      	ldrb	r3, [r7, #15]
 800826e:	b29b      	uxth	r3, r3
 8008270:	1ad3      	subs	r3, r2, r3
 8008272:	b299      	uxth	r1, r3
 8008274:	7bfb      	ldrb	r3, [r7, #15]
 8008276:	b29b      	uxth	r3, r3
 8008278:	887a      	ldrh	r2, [r7, #2]
 800827a:	1ad3      	subs	r3, r2, r3
 800827c:	b29a      	uxth	r2, r3
 800827e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008282:	b29b      	uxth	r3, r3
 8008284:	f000 fd8a 	bl	8008d9c <ILI9341_Draw_Horizontal_Line>
										w - (b),
										border_colour);


		// Vertical lines
		ILI9341_Draw_Vertical_Line(		x + b,
 8008288:	7bfb      	ldrb	r3, [r7, #15]
 800828a:	b29a      	uxth	r2, r3
 800828c:	88fb      	ldrh	r3, [r7, #6]
 800828e:	4413      	add	r3, r2
 8008290:	b298      	uxth	r0, r3
 8008292:	7bfb      	ldrb	r3, [r7, #15]
 8008294:	b29a      	uxth	r2, r3
 8008296:	88bb      	ldrh	r3, [r7, #4]
 8008298:	4413      	add	r3, r2
 800829a:	b299      	uxth	r1, r3
 800829c:	7bfb      	ldrb	r3, [r7, #15]
 800829e:	b29b      	uxth	r3, r3
 80082a0:	005b      	lsls	r3, r3, #1
 80082a2:	b29b      	uxth	r3, r3
 80082a4:	883a      	ldrh	r2, [r7, #0]
 80082a6:	1ad3      	subs	r3, r2, r3
 80082a8:	b29a      	uxth	r2, r3
 80082aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80082ae:	b29b      	uxth	r3, r3
 80082b0:	f000 fdbc 	bl	8008e2c <ILI9341_Draw_Vertical_Line>
										y + b,
										h - (2*b),
										border_colour);

		ILI9341_Draw_Vertical_Line(		(x + w) - b,
 80082b4:	88fa      	ldrh	r2, [r7, #6]
 80082b6:	887b      	ldrh	r3, [r7, #2]
 80082b8:	4413      	add	r3, r2
 80082ba:	b29a      	uxth	r2, r3
 80082bc:	7bfb      	ldrb	r3, [r7, #15]
 80082be:	b29b      	uxth	r3, r3
 80082c0:	1ad3      	subs	r3, r2, r3
 80082c2:	b298      	uxth	r0, r3
 80082c4:	7bfb      	ldrb	r3, [r7, #15]
 80082c6:	b29a      	uxth	r2, r3
 80082c8:	88bb      	ldrh	r3, [r7, #4]
 80082ca:	4413      	add	r3, r2
 80082cc:	b299      	uxth	r1, r3
 80082ce:	7bfb      	ldrb	r3, [r7, #15]
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	005b      	lsls	r3, r3, #1
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	883a      	ldrh	r2, [r7, #0]
 80082d8:	1ad3      	subs	r3, r2, r3
 80082da:	b29a      	uxth	r2, r3
 80082dc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80082e0:	b29b      	uxth	r3, r3
 80082e2:	f000 fda3 	bl	8008e2c <ILI9341_Draw_Vertical_Line>
	for(uint8_t b = 0; ; b++)
 80082e6:	7bfb      	ldrb	r3, [r7, #15]
 80082e8:	3301      	adds	r3, #1
 80082ea:	73fb      	strb	r3, [r7, #15]
		if(b > border_weight)
 80082ec:	e75f      	b.n	80081ae <ILI9341_Draw_Bordered_Filled_Rectangle_Coord+0x22>
										h - (2*b),
										border_colour);

	}

	finish:
 80082ee:	bf00      	nop
	// done
	return;
 80082f0:	bf00      	nop
}
 80082f2:	3714      	adds	r7, #20
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd90      	pop	{r4, r7, pc}

080082f8 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char character, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 80082f8:	b590      	push	{r4, r7, lr}
 80082fa:	b089      	sub	sp, #36	; 0x24
 80082fc:	af02      	add	r7, sp, #8
 80082fe:	4604      	mov	r4, r0
 8008300:	4608      	mov	r0, r1
 8008302:	4611      	mov	r1, r2
 8008304:	461a      	mov	r2, r3
 8008306:	4623      	mov	r3, r4
 8008308:	71fb      	strb	r3, [r7, #7]
 800830a:	4603      	mov	r3, r0
 800830c:	80bb      	strh	r3, [r7, #4]
 800830e:	460b      	mov	r3, r1
 8008310:	807b      	strh	r3, [r7, #2]
 8008312:	4613      	mov	r3, r2
 8008314:	803b      	strh	r3, [r7, #0]
    uint8_t 	i,j;
		



	function_char = character;
 8008316:	79fb      	ldrb	r3, [r7, #7]
 8008318:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ')
 800831a:	7dfb      	ldrb	r3, [r7, #23]
 800831c:	2b1f      	cmp	r3, #31
 800831e:	d802      	bhi.n	8008326 <ILI9341_Draw_Char+0x2e>
    {
        character = 0;
 8008320:	2300      	movs	r3, #0
 8008322:	71fb      	strb	r3, [r7, #7]
 8008324:	e002      	b.n	800832c <ILI9341_Draw_Char+0x34>
    }
    else
    {
    	function_char -= 32;
 8008326:	7dfb      	ldrb	r3, [r7, #23]
 8008328:	3b20      	subs	r3, #32
 800832a:	75fb      	strb	r3, [r7, #23]
	}
   	
	char temp[CHAR_WIDTH];

	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 800832c:	2300      	movs	r3, #0
 800832e:	753b      	strb	r3, [r7, #20]
 8008330:	e012      	b.n	8008358 <ILI9341_Draw_Char+0x60>
	{
		temp[k] = font[function_char][k];
 8008332:	7dfa      	ldrb	r2, [r7, #23]
 8008334:	7d38      	ldrb	r0, [r7, #20]
 8008336:	7d39      	ldrb	r1, [r7, #20]
 8008338:	4c48      	ldr	r4, [pc, #288]	; (800845c <ILI9341_Draw_Char+0x164>)
 800833a:	4613      	mov	r3, r2
 800833c:	005b      	lsls	r3, r3, #1
 800833e:	4413      	add	r3, r2
 8008340:	005b      	lsls	r3, r3, #1
 8008342:	4423      	add	r3, r4
 8008344:	4403      	add	r3, r0
 8008346:	781a      	ldrb	r2, [r3, #0]
 8008348:	f107 0318 	add.w	r3, r7, #24
 800834c:	440b      	add	r3, r1
 800834e:	f803 2c0c 	strb.w	r2, [r3, #-12]
	for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8008352:	7d3b      	ldrb	r3, [r7, #20]
 8008354:	3301      	adds	r3, #1
 8008356:	753b      	strb	r3, [r7, #20]
 8008358:	7d3b      	ldrb	r3, [r7, #20]
 800835a:	2b05      	cmp	r3, #5
 800835c:	d9e9      	bls.n	8008332 <ILI9341_Draw_Char+0x3a>
	}
		
    // Draw pixels
	//ILI9341_Draw_Rectangle(x, Y, CHAR_WIDTH*size, CHAR_HEIGHT*size, bgcolour);
    for (j=0; j<CHAR_WIDTH; j++)
 800835e:	2300      	movs	r3, #0
 8008360:	757b      	strb	r3, [r7, #21]
 8008362:	e074      	b.n	800844e <ILI9341_Draw_Char+0x156>
    {
        for (i=0; i<CHAR_HEIGHT; i++)
 8008364:	2300      	movs	r3, #0
 8008366:	75bb      	strb	r3, [r7, #22]
 8008368:	e06b      	b.n	8008442 <ILI9341_Draw_Char+0x14a>
        {
            if (temp[j] & (1<<i))
 800836a:	7d7b      	ldrb	r3, [r7, #21]
 800836c:	f107 0218 	add.w	r2, r7, #24
 8008370:	4413      	add	r3, r2
 8008372:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8008376:	461a      	mov	r2, r3
 8008378:	7dbb      	ldrb	r3, [r7, #22]
 800837a:	fa42 f303 	asr.w	r3, r2, r3
 800837e:	f003 0301 	and.w	r3, r3, #1
 8008382:	2b00      	cmp	r3, #0
 8008384:	d02d      	beq.n	80083e2 <ILI9341_Draw_Char+0xea>
            {
            	if(size == 1)
 8008386:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008388:	2b01      	cmp	r3, #1
 800838a:	d10e      	bne.n	80083aa <ILI9341_Draw_Char+0xb2>
				{
            		ILI9341_Draw_Pixel(x+j, y+i, colour);
 800838c:	7d7b      	ldrb	r3, [r7, #21]
 800838e:	b29a      	uxth	r2, r3
 8008390:	88bb      	ldrh	r3, [r7, #4]
 8008392:	4413      	add	r3, r2
 8008394:	b298      	uxth	r0, r3
 8008396:	7dbb      	ldrb	r3, [r7, #22]
 8008398:	b29a      	uxth	r2, r3
 800839a:	887b      	ldrh	r3, [r7, #2]
 800839c:	4413      	add	r3, r2
 800839e:	b29b      	uxth	r3, r3
 80083a0:	883a      	ldrh	r2, [r7, #0]
 80083a2:	4619      	mov	r1, r3
 80083a4:	f000 fb9a 	bl	8008adc <ILI9341_Draw_Pixel>
 80083a8:	e048      	b.n	800843c <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, colour, TEXT_CHUNK);
 80083aa:	7d7b      	ldrb	r3, [r7, #21]
 80083ac:	b29b      	uxth	r3, r3
 80083ae:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80083b0:	fb12 f303 	smulbb	r3, r2, r3
 80083b4:	b29a      	uxth	r2, r3
 80083b6:	88bb      	ldrh	r3, [r7, #4]
 80083b8:	4413      	add	r3, r2
 80083ba:	b298      	uxth	r0, r3
 80083bc:	7dbb      	ldrb	r3, [r7, #22]
 80083be:	b29b      	uxth	r3, r3
 80083c0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80083c2:	fb12 f303 	smulbb	r3, r2, r3
 80083c6:	b29a      	uxth	r2, r3
 80083c8:	887b      	ldrh	r3, [r7, #2]
 80083ca:	4413      	add	r3, r2
 80083cc:	b299      	uxth	r1, r3
 80083ce:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 80083d0:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80083d2:	2301      	movs	r3, #1
 80083d4:	9301      	str	r3, [sp, #4]
 80083d6:	883b      	ldrh	r3, [r7, #0]
 80083d8:	9300      	str	r3, [sp, #0]
 80083da:	4623      	mov	r3, r4
 80083dc:	f000 fc58 	bl	8008c90 <ILI9341_Draw_Rectangle>
 80083e0:	e02c      	b.n	800843c <ILI9341_Draw_Char+0x144>
				}
            }
            else
            {
               	if(size == 1)
 80083e2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80083e4:	2b01      	cmp	r3, #1
 80083e6:	d10e      	bne.n	8008406 <ILI9341_Draw_Char+0x10e>
				{
					ILI9341_Draw_Pixel(x+j, y+i, bgcolour);
 80083e8:	7d7b      	ldrb	r3, [r7, #21]
 80083ea:	b29a      	uxth	r2, r3
 80083ec:	88bb      	ldrh	r3, [r7, #4]
 80083ee:	4413      	add	r3, r2
 80083f0:	b298      	uxth	r0, r3
 80083f2:	7dbb      	ldrb	r3, [r7, #22]
 80083f4:	b29a      	uxth	r2, r3
 80083f6:	887b      	ldrh	r3, [r7, #2]
 80083f8:	4413      	add	r3, r2
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80083fe:	4619      	mov	r1, r3
 8008400:	f000 fb6c 	bl	8008adc <ILI9341_Draw_Pixel>
 8008404:	e01a      	b.n	800843c <ILI9341_Draw_Char+0x144>
				}
				else
				{
					ILI9341_Draw_Rectangle(x+(j*size), y+(i*size), size, size, bgcolour, TEXT_CHUNK);
 8008406:	7d7b      	ldrb	r3, [r7, #21]
 8008408:	b29b      	uxth	r3, r3
 800840a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800840c:	fb12 f303 	smulbb	r3, r2, r3
 8008410:	b29a      	uxth	r2, r3
 8008412:	88bb      	ldrh	r3, [r7, #4]
 8008414:	4413      	add	r3, r2
 8008416:	b298      	uxth	r0, r3
 8008418:	7dbb      	ldrb	r3, [r7, #22]
 800841a:	b29b      	uxth	r3, r3
 800841c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800841e:	fb12 f303 	smulbb	r3, r2, r3
 8008422:	b29a      	uxth	r2, r3
 8008424:	887b      	ldrh	r3, [r7, #2]
 8008426:	4413      	add	r3, r2
 8008428:	b299      	uxth	r1, r3
 800842a:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800842c:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800842e:	2301      	movs	r3, #1
 8008430:	9301      	str	r3, [sp, #4]
 8008432:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8008434:	9300      	str	r3, [sp, #0]
 8008436:	4623      	mov	r3, r4
 8008438:	f000 fc2a 	bl	8008c90 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++)
 800843c:	7dbb      	ldrb	r3, [r7, #22]
 800843e:	3301      	adds	r3, #1
 8008440:	75bb      	strb	r3, [r7, #22]
 8008442:	7dbb      	ldrb	r3, [r7, #22]
 8008444:	2b07      	cmp	r3, #7
 8008446:	d990      	bls.n	800836a <ILI9341_Draw_Char+0x72>
    for (j=0; j<CHAR_WIDTH; j++)
 8008448:	7d7b      	ldrb	r3, [r7, #21]
 800844a:	3301      	adds	r3, #1
 800844c:	757b      	strb	r3, [r7, #21]
 800844e:	7d7b      	ldrb	r3, [r7, #21]
 8008450:	2b05      	cmp	r3, #5
 8008452:	d987      	bls.n	8008364 <ILI9341_Draw_Char+0x6c>
				}
            }
        }
    }
}
 8008454:	bf00      	nop
 8008456:	371c      	adds	r7, #28
 8008458:	46bd      	mov	sp, r7
 800845a:	bd90      	pop	{r4, r7, pc}
 800845c:	0800a0c8 	.word	0x0800a0c8

08008460 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at x,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint16_t x, uint16_t y, uint16_t colour, uint16_t size, uint16_t bgcolour)
{
 8008460:	b590      	push	{r4, r7, lr}
 8008462:	b087      	sub	sp, #28
 8008464:	af02      	add	r7, sp, #8
 8008466:	60f8      	str	r0, [r7, #12]
 8008468:	4608      	mov	r0, r1
 800846a:	4611      	mov	r1, r2
 800846c:	461a      	mov	r2, r3
 800846e:	4603      	mov	r3, r0
 8008470:	817b      	strh	r3, [r7, #10]
 8008472:	460b      	mov	r3, r1
 8008474:	813b      	strh	r3, [r7, #8]
 8008476:	4613      	mov	r3, r2
 8008478:	80fb      	strh	r3, [r7, #6]
    /*if(size & 1)
    {
    	size = ((size >> 1) * 2);
    }*/

    while (*Text) {
 800847a:	e016      	b.n	80084aa <ILI9341_Draw_Text+0x4a>
        ILI9341_Draw_Char(*Text++, x, y, colour, size, bgcolour);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	1c5a      	adds	r2, r3, #1
 8008480:	60fa      	str	r2, [r7, #12]
 8008482:	7818      	ldrb	r0, [r3, #0]
 8008484:	88fc      	ldrh	r4, [r7, #6]
 8008486:	893a      	ldrh	r2, [r7, #8]
 8008488:	8979      	ldrh	r1, [r7, #10]
 800848a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800848c:	9301      	str	r3, [sp, #4]
 800848e:	8c3b      	ldrh	r3, [r7, #32]
 8008490:	9300      	str	r3, [sp, #0]
 8008492:	4623      	mov	r3, r4
 8008494:	f7ff ff30 	bl	80082f8 <ILI9341_Draw_Char>
        x += CHAR_WIDTH*size;
 8008498:	8c3b      	ldrh	r3, [r7, #32]
 800849a:	461a      	mov	r2, r3
 800849c:	0052      	lsls	r2, r2, #1
 800849e:	4413      	add	r3, r2
 80084a0:	005b      	lsls	r3, r3, #1
 80084a2:	b29a      	uxth	r2, r3
 80084a4:	897b      	ldrh	r3, [r7, #10]
 80084a6:	4413      	add	r3, r2
 80084a8:	817b      	strh	r3, [r7, #10]
    while (*Text) {
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	781b      	ldrb	r3, [r3, #0]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d1e4      	bne.n	800847c <ILI9341_Draw_Text+0x1c>
    }


}
 80084b2:	bf00      	nop
 80084b4:	3714      	adds	r7, #20
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd90      	pop	{r4, r7, pc}
	...

080084bc <ILI9341_SPI_Init>:



/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 80084bc:	b480      	push	{r7}
 80084be:	af00      	add	r7, sp, #0

	//GPIO INIT
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 80084c0:	4b05      	ldr	r3, [pc, #20]	; (80084d8 <ILI9341_SPI_Init+0x1c>)
 80084c2:	695b      	ldr	r3, [r3, #20]
 80084c4:	4a04      	ldr	r2, [pc, #16]	; (80084d8 <ILI9341_SPI_Init+0x1c>)
 80084c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084ca:	6153      	str	r3, [r2, #20]
}
 80084cc:	bf00      	nop
 80084ce:	46bd      	mov	sp, r7
 80084d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d4:	4770      	bx	lr
 80084d6:	bf00      	nop
 80084d8:	48000400 	.word	0x48000400

080084dc <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	4603      	mov	r3, r0
 80084e4:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef res;

		if( ((res = HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1)) != HAL_OK) )
 80084e6:	1df9      	adds	r1, r7, #7
 80084e8:	2301      	movs	r3, #1
 80084ea:	2201      	movs	r2, #1
 80084ec:	4804      	ldr	r0, [pc, #16]	; (8008500 <ILI9341_SPI_Send+0x24>)
 80084ee:	f7fe f837 	bl	8006560 <HAL_SPI_Transmit>
 80084f2:	4603      	mov	r3, r0
 80084f4:	73fb      	strb	r3, [r7, #15]
		{
			//printf("HAL_SPI_Transmit Error #%u, ", res);
		}


}
 80084f6:	bf00      	nop
 80084f8:	3710      	adds	r7, #16
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	20000dec 	.word	0x20000dec

08008504 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
 800850a:	4603      	mov	r3, r0
 800850c:	71fb      	strb	r3, [r7, #7]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800850e:	4b0d      	ldr	r3, [pc, #52]	; (8008544 <ILI9341_Write_Command+0x40>)
 8008510:	695b      	ldr	r3, [r3, #20]
 8008512:	4a0c      	ldr	r2, [pc, #48]	; (8008544 <ILI9341_Write_Command+0x40>)
 8008514:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008518:	6153      	str	r3, [r2, #20]
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 800851a:	4b0a      	ldr	r3, [pc, #40]	; (8008544 <ILI9341_Write_Command+0x40>)
 800851c:	695b      	ldr	r3, [r3, #20]
 800851e:	4a09      	ldr	r2, [pc, #36]	; (8008544 <ILI9341_Write_Command+0x40>)
 8008520:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008524:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Command);
 8008526:	79fb      	ldrb	r3, [r7, #7]
 8008528:	4618      	mov	r0, r3
 800852a:	f7ff ffd7 	bl	80084dc <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 800852e:	4b05      	ldr	r3, [pc, #20]	; (8008544 <ILI9341_Write_Command+0x40>)
 8008530:	695b      	ldr	r3, [r3, #20]
 8008532:	4a04      	ldr	r2, [pc, #16]	; (8008544 <ILI9341_Write_Command+0x40>)
 8008534:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008538:	6153      	str	r3, [r2, #20]
}
 800853a:	bf00      	nop
 800853c:	3708      	adds	r7, #8
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	48000400 	.word	0x48000400

08008548 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8008548:	b580      	push	{r7, lr}
 800854a:	b082      	sub	sp, #8
 800854c:	af00      	add	r7, sp, #0
 800854e:	4603      	mov	r3, r0
 8008550:	71fb      	strb	r3, [r7, #7]
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008552:	4b0d      	ldr	r3, [pc, #52]	; (8008588 <ILI9341_Write_Data+0x40>)
 8008554:	695b      	ldr	r3, [r3, #20]
 8008556:	4a0c      	ldr	r2, [pc, #48]	; (8008588 <ILI9341_Write_Data+0x40>)
 8008558:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800855c:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800855e:	4b0a      	ldr	r3, [pc, #40]	; (8008588 <ILI9341_Write_Data+0x40>)
 8008560:	695b      	ldr	r3, [r3, #20]
 8008562:	4a09      	ldr	r2, [pc, #36]	; (8008588 <ILI9341_Write_Data+0x40>)
 8008564:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008568:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(Data);
 800856a:	79fb      	ldrb	r3, [r7, #7]
 800856c:	4618      	mov	r0, r3
 800856e:	f7ff ffb5 	bl	80084dc <ILI9341_SPI_Send>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008572:	4b05      	ldr	r3, [pc, #20]	; (8008588 <ILI9341_Write_Data+0x40>)
 8008574:	695b      	ldr	r3, [r3, #20]
 8008576:	4a04      	ldr	r2, [pc, #16]	; (8008588 <ILI9341_Write_Data+0x40>)
 8008578:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800857c:	6153      	str	r3, [r2, #20]
}
 800857e:	bf00      	nop
 8008580:	3708      	adds	r7, #8
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	48000400 	.word	0x48000400

0800858c <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 800858c:	b590      	push	{r4, r7, lr}
 800858e:	b083      	sub	sp, #12
 8008590:	af00      	add	r7, sp, #0
 8008592:	4604      	mov	r4, r0
 8008594:	4608      	mov	r0, r1
 8008596:	4611      	mov	r1, r2
 8008598:	461a      	mov	r2, r3
 800859a:	4623      	mov	r3, r4
 800859c:	80fb      	strh	r3, [r7, #6]
 800859e:	4603      	mov	r3, r0
 80085a0:	80bb      	strh	r3, [r7, #4]
 80085a2:	460b      	mov	r3, r1
 80085a4:	807b      	strh	r3, [r7, #2]
 80085a6:	4613      	mov	r3, r2
 80085a8:	803b      	strh	r3, [r7, #0]
	ILI9341_Write_Command(0x2A);
 80085aa:	202a      	movs	r0, #42	; 0x2a
 80085ac:	f7ff ffaa 	bl	8008504 <ILI9341_Write_Command>
	ILI9341_Write_Data(X1>>8);
 80085b0:	88fb      	ldrh	r3, [r7, #6]
 80085b2:	0a1b      	lsrs	r3, r3, #8
 80085b4:	b29b      	uxth	r3, r3
 80085b6:	b2db      	uxtb	r3, r3
 80085b8:	4618      	mov	r0, r3
 80085ba:	f7ff ffc5 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(X1);
 80085be:	88fb      	ldrh	r3, [r7, #6]
 80085c0:	b2db      	uxtb	r3, r3
 80085c2:	4618      	mov	r0, r3
 80085c4:	f7ff ffc0 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2>>8);
 80085c8:	887b      	ldrh	r3, [r7, #2]
 80085ca:	0a1b      	lsrs	r3, r3, #8
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	b2db      	uxtb	r3, r3
 80085d0:	4618      	mov	r0, r3
 80085d2:	f7ff ffb9 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(X2);
 80085d6:	887b      	ldrh	r3, [r7, #2]
 80085d8:	b2db      	uxtb	r3, r3
 80085da:	4618      	mov	r0, r3
 80085dc:	f7ff ffb4 	bl	8008548 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2B);
 80085e0:	202b      	movs	r0, #43	; 0x2b
 80085e2:	f7ff ff8f 	bl	8008504 <ILI9341_Write_Command>
	ILI9341_Write_Data(Y1>>8);
 80085e6:	88bb      	ldrh	r3, [r7, #4]
 80085e8:	0a1b      	lsrs	r3, r3, #8
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	b2db      	uxtb	r3, r3
 80085ee:	4618      	mov	r0, r3
 80085f0:	f7ff ffaa 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y1);
 80085f4:	88bb      	ldrh	r3, [r7, #4]
 80085f6:	b2db      	uxtb	r3, r3
 80085f8:	4618      	mov	r0, r3
 80085fa:	f7ff ffa5 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2>>8);
 80085fe:	883b      	ldrh	r3, [r7, #0]
 8008600:	0a1b      	lsrs	r3, r3, #8
 8008602:	b29b      	uxth	r3, r3
 8008604:	b2db      	uxtb	r3, r3
 8008606:	4618      	mov	r0, r3
 8008608:	f7ff ff9e 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(Y2);
 800860c:	883b      	ldrh	r3, [r7, #0]
 800860e:	b2db      	uxtb	r3, r3
 8008610:	4618      	mov	r0, r3
 8008612:	f7ff ff99 	bl	8008548 <ILI9341_Write_Data>

	ILI9341_Write_Command(0x2C);
 8008616:	202c      	movs	r0, #44	; 0x2c
 8008618:	f7ff ff74 	bl	8008504 <ILI9341_Write_Command>
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	bd90      	pop	{r4, r7, pc}

08008624 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR &= ~(LCD_RST_PIN);
 8008628:	4b0c      	ldr	r3, [pc, #48]	; (800865c <ILI9341_Reset+0x38>)
 800862a:	695b      	ldr	r3, [r3, #20]
 800862c:	4a0b      	ldr	r2, [pc, #44]	; (800865c <ILI9341_Reset+0x38>)
 800862e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008632:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8008634:	20c8      	movs	r0, #200	; 0xc8
 8008636:	f7fa fa1b 	bl	8002a70 <HAL_Delay>
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 800863a:	4b08      	ldr	r3, [pc, #32]	; (800865c <ILI9341_Reset+0x38>)
 800863c:	695b      	ldr	r3, [r3, #20]
 800863e:	4a07      	ldr	r2, [pc, #28]	; (800865c <ILI9341_Reset+0x38>)
 8008640:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008644:	6153      	str	r3, [r2, #20]
	HAL_Delay(200);
 8008646:	20c8      	movs	r0, #200	; 0xc8
 8008648:	f7fa fa12 	bl	8002a70 <HAL_Delay>
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 800864c:	4b03      	ldr	r3, [pc, #12]	; (800865c <ILI9341_Reset+0x38>)
 800864e:	695b      	ldr	r3, [r3, #20]
 8008650:	4a02      	ldr	r2, [pc, #8]	; (800865c <ILI9341_Reset+0x38>)
 8008652:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008656:	6153      	str	r3, [r2, #20]
}
 8008658:	bf00      	nop
 800865a:	bd80      	pop	{r7, pc}
 800865c:	48000400 	.word	0x48000400

08008660 <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b084      	sub	sp, #16
 8008664:	af00      	add	r7, sp, #0
 8008666:	4603      	mov	r3, r0
 8008668:	71fb      	strb	r3, [r7, #7]
	
	uint8_t screen_rotation = Rotation;
 800866a:	79fb      	ldrb	r3, [r7, #7]
 800866c:	73fb      	strb	r3, [r7, #15]
	
	ILI9341_Write_Command(0x36);
 800866e:	2036      	movs	r0, #54	; 0x36
 8008670:	f7ff ff48 	bl	8008504 <ILI9341_Write_Command>
	//HAL_Delay(1);

	switch(screen_rotation)
 8008674:	7bfb      	ldrb	r3, [r7, #15]
 8008676:	2b03      	cmp	r3, #3
 8008678:	d836      	bhi.n	80086e8 <ILI9341_Set_Rotation+0x88>
 800867a:	a201      	add	r2, pc, #4	; (adr r2, 8008680 <ILI9341_Set_Rotation+0x20>)
 800867c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008680:	08008691 	.word	0x08008691
 8008684:	080086a7 	.word	0x080086a7
 8008688:	080086bd 	.word	0x080086bd
 800868c:	080086d3 	.word	0x080086d3
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8008690:	2048      	movs	r0, #72	; 0x48
 8008692:	f7ff ff59 	bl	8008548 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8008696:	4b17      	ldr	r3, [pc, #92]	; (80086f4 <ILI9341_Set_Rotation+0x94>)
 8008698:	22f0      	movs	r2, #240	; 0xf0
 800869a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800869c:	4b16      	ldr	r3, [pc, #88]	; (80086f8 <ILI9341_Set_Rotation+0x98>)
 800869e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80086a2:	801a      	strh	r2, [r3, #0]
			break;
 80086a4:	e021      	b.n	80086ea <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 80086a6:	2028      	movs	r0, #40	; 0x28
 80086a8:	f7ff ff4e 	bl	8008548 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80086ac:	4b11      	ldr	r3, [pc, #68]	; (80086f4 <ILI9341_Set_Rotation+0x94>)
 80086ae:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80086b2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80086b4:	4b10      	ldr	r3, [pc, #64]	; (80086f8 <ILI9341_Set_Rotation+0x98>)
 80086b6:	22f0      	movs	r2, #240	; 0xf0
 80086b8:	801a      	strh	r2, [r3, #0]
			break;
 80086ba:	e016      	b.n	80086ea <ILI9341_Set_Rotation+0x8a>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 80086bc:	2088      	movs	r0, #136	; 0x88
 80086be:	f7ff ff43 	bl	8008548 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 80086c2:	4b0c      	ldr	r3, [pc, #48]	; (80086f4 <ILI9341_Set_Rotation+0x94>)
 80086c4:	22f0      	movs	r2, #240	; 0xf0
 80086c6:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 80086c8:	4b0b      	ldr	r3, [pc, #44]	; (80086f8 <ILI9341_Set_Rotation+0x98>)
 80086ca:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80086ce:	801a      	strh	r2, [r3, #0]
			break;
 80086d0:	e00b      	b.n	80086ea <ILI9341_Set_Rotation+0x8a>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 80086d2:	20e8      	movs	r0, #232	; 0xe8
 80086d4:	f7ff ff38 	bl	8008548 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 80086d8:	4b06      	ldr	r3, [pc, #24]	; (80086f4 <ILI9341_Set_Rotation+0x94>)
 80086da:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80086de:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80086e0:	4b05      	ldr	r3, [pc, #20]	; (80086f8 <ILI9341_Set_Rotation+0x98>)
 80086e2:	22f0      	movs	r2, #240	; 0xf0
 80086e4:	801a      	strh	r2, [r3, #0]
			break;
 80086e6:	e000      	b.n	80086ea <ILI9341_Set_Rotation+0x8a>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80086e8:	bf00      	nop
	}
}
 80086ea:	bf00      	nop
 80086ec:	3710      	adds	r7, #16
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	2000001e 	.word	0x2000001e
 80086f8:	2000001c 	.word	0x2000001c

080086fc <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80086fc:	b480      	push	{r7}
 80086fe:	af00      	add	r7, sp, #0
	LCD_RST_PORT->ODR |= LCD_RST_PIN;
 8008700:	4b05      	ldr	r3, [pc, #20]	; (8008718 <ILI9341_Enable+0x1c>)
 8008702:	695b      	ldr	r3, [r3, #20]
 8008704:	4a04      	ldr	r2, [pc, #16]	; (8008718 <ILI9341_Enable+0x1c>)
 8008706:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800870a:	6153      	str	r3, [r2, #20]
}
 800870c:	bf00      	nop
 800870e:	46bd      	mov	sp, r7
 8008710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008714:	4770      	bx	lr
 8008716:	bf00      	nop
 8008718:	48000400 	.word	0x48000400

0800871c <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	af00      	add	r7, sp, #0

	ILI9341_Enable();
 8008720:	f7ff ffec 	bl	80086fc <ILI9341_Enable>
	ILI9341_SPI_Init();
 8008724:	f7ff feca 	bl	80084bc <ILI9341_SPI_Init>
	ILI9341_Reset();
 8008728:	f7ff ff7c 	bl	8008624 <ILI9341_Reset>

	//SOFTWARE RESET
	ILI9341_Write_Command(0x01);
 800872c:	2001      	movs	r0, #1
 800872e:	f7ff fee9 	bl	8008504 <ILI9341_Write_Command>
	HAL_Delay(2000);
 8008732:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8008736:	f7fa f99b 	bl	8002a70 <HAL_Delay>

	//POWER CONTROL A
	ILI9341_Write_Command(0xCB);
 800873a:	20cb      	movs	r0, #203	; 0xcb
 800873c:	f7ff fee2 	bl	8008504 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x39);
 8008740:	2039      	movs	r0, #57	; 0x39
 8008742:	f7ff ff01 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2C);
 8008746:	202c      	movs	r0, #44	; 0x2c
 8008748:	f7ff fefe 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 800874c:	2000      	movs	r0, #0
 800874e:	f7ff fefb 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x34);
 8008752:	2034      	movs	r0, #52	; 0x34
 8008754:	f7ff fef8 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x02);
 8008758:	2002      	movs	r0, #2
 800875a:	f7ff fef5 	bl	8008548 <ILI9341_Write_Data>

	//POWER CONTROL B
	ILI9341_Write_Command(0xCF);
 800875e:	20cf      	movs	r0, #207	; 0xcf
 8008760:	f7ff fed0 	bl	8008504 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008764:	2000      	movs	r0, #0
 8008766:	f7ff feef 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 800876a:	20c1      	movs	r0, #193	; 0xc1
 800876c:	f7ff feec 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x30);
 8008770:	2030      	movs	r0, #48	; 0x30
 8008772:	f7ff fee9 	bl	8008548 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL A
	ILI9341_Write_Command(0xE8);
 8008776:	20e8      	movs	r0, #232	; 0xe8
 8008778:	f7ff fec4 	bl	8008504 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x85);
 800877c:	2085      	movs	r0, #133	; 0x85
 800877e:	f7ff fee3 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 8008782:	2000      	movs	r0, #0
 8008784:	f7ff fee0 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x78);
 8008788:	2078      	movs	r0, #120	; 0x78
 800878a:	f7ff fedd 	bl	8008548 <ILI9341_Write_Data>

	//DRIVER TIMING CONTROL B
	ILI9341_Write_Command(0xEA);
 800878e:	20ea      	movs	r0, #234	; 0xea
 8008790:	f7ff feb8 	bl	8008504 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008794:	2000      	movs	r0, #0
 8008796:	f7ff fed7 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 800879a:	2000      	movs	r0, #0
 800879c:	f7ff fed4 	bl	8008548 <ILI9341_Write_Data>

	//POWER ON SEQUENCE CONTROL
	ILI9341_Write_Command(0xED);
 80087a0:	20ed      	movs	r0, #237	; 0xed
 80087a2:	f7ff feaf 	bl	8008504 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x64);
 80087a6:	2064      	movs	r0, #100	; 0x64
 80087a8:	f7ff fece 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 80087ac:	2003      	movs	r0, #3
 80087ae:	f7ff fecb 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x12);
 80087b2:	2012      	movs	r0, #18
 80087b4:	f7ff fec8 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x81);
 80087b8:	2081      	movs	r0, #129	; 0x81
 80087ba:	f7ff fec5 	bl	8008548 <ILI9341_Write_Data>

	//PUMP RATIO CONTROL
	ILI9341_Write_Command(0xF7);
 80087be:	20f7      	movs	r0, #247	; 0xf7
 80087c0:	f7ff fea0 	bl	8008504 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x20);
 80087c4:	2020      	movs	r0, #32
 80087c6:	f7ff febf 	bl	8008548 <ILI9341_Write_Data>

	//POWER CONTROL,VRH[5:0]
	ILI9341_Write_Command(0xC0);
 80087ca:	20c0      	movs	r0, #192	; 0xc0
 80087cc:	f7ff fe9a 	bl	8008504 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x23);
 80087d0:	2023      	movs	r0, #35	; 0x23
 80087d2:	f7ff feb9 	bl	8008548 <ILI9341_Write_Data>

	//POWER CONTROL,SAP[2:0];BT[3:0]
	ILI9341_Write_Command(0xC1);
 80087d6:	20c1      	movs	r0, #193	; 0xc1
 80087d8:	f7ff fe94 	bl	8008504 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x10);
 80087dc:	2010      	movs	r0, #16
 80087de:	f7ff feb3 	bl	8008548 <ILI9341_Write_Data>

	//VCM CONTROL
	ILI9341_Write_Command(0xC5);
 80087e2:	20c5      	movs	r0, #197	; 0xc5
 80087e4:	f7ff fe8e 	bl	8008504 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x3E);
 80087e8:	203e      	movs	r0, #62	; 0x3e
 80087ea:	f7ff fead 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x28);
 80087ee:	2028      	movs	r0, #40	; 0x28
 80087f0:	f7ff feaa 	bl	8008548 <ILI9341_Write_Data>

	//VCM CONTROL 2
	ILI9341_Write_Command(0xC7);
 80087f4:	20c7      	movs	r0, #199	; 0xc7
 80087f6:	f7ff fe85 	bl	8008504 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x86);
 80087fa:	2086      	movs	r0, #134	; 0x86
 80087fc:	f7ff fea4 	bl	8008548 <ILI9341_Write_Data>

	//MEMORY ACCESS CONTROL
	ILI9341_Write_Command(0x36);
 8008800:	2036      	movs	r0, #54	; 0x36
 8008802:	f7ff fe7f 	bl	8008504 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x48);
 8008806:	2048      	movs	r0, #72	; 0x48
 8008808:	f7ff fe9e 	bl	8008548 <ILI9341_Write_Data>


	//PIXEL FORMAT
	ILI9341_Write_Command(0x3A);
 800880c:	203a      	movs	r0, #58	; 0x3a
 800880e:	f7ff fe79 	bl	8008504 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x55);
 8008812:	2055      	movs	r0, #85	; 0x55
 8008814:	f7ff fe98 	bl	8008548 <ILI9341_Write_Data>

	//FRAME RATIO CONTROL, STANDARD RGB COLOR
	ILI9341_Write_Command(0xB1);
 8008818:	20b1      	movs	r0, #177	; 0xb1
 800881a:	f7ff fe73 	bl	8008504 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 800881e:	2000      	movs	r0, #0
 8008820:	f7ff fe92 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x18);
 8008824:	2018      	movs	r0, #24
 8008826:	f7ff fe8f 	bl	8008548 <ILI9341_Write_Data>

	//DISPLAY FUNCTION CONTROL
	ILI9341_Write_Command(0xB6);
 800882a:	20b6      	movs	r0, #182	; 0xb6
 800882c:	f7ff fe6a 	bl	8008504 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x08);
 8008830:	2008      	movs	r0, #8
 8008832:	f7ff fe89 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x82);
 8008836:	2082      	movs	r0, #130	; 0x82
 8008838:	f7ff fe86 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x27);
 800883c:	2027      	movs	r0, #39	; 0x27
 800883e:	f7ff fe83 	bl	8008548 <ILI9341_Write_Data>


	//3GAMMA FUNCTION DISABLE
	ILI9341_Write_Command(0xF2);
 8008842:	20f2      	movs	r0, #242	; 0xf2
 8008844:	f7ff fe5e 	bl	8008504 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 8008848:	2000      	movs	r0, #0
 800884a:	f7ff fe7d 	bl	8008548 <ILI9341_Write_Data>

	//GAMMA CURVE SELECTED
	ILI9341_Write_Command(0x26);
 800884e:	2026      	movs	r0, #38	; 0x26
 8008850:	f7ff fe58 	bl	8008504 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x01);
 8008854:	2001      	movs	r0, #1
 8008856:	f7ff fe77 	bl	8008548 <ILI9341_Write_Data>

	//POSITIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE0);
 800885a:	20e0      	movs	r0, #224	; 0xe0
 800885c:	f7ff fe52 	bl	8008504 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x0F);
 8008860:	200f      	movs	r0, #15
 8008862:	f7ff fe71 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8008866:	2031      	movs	r0, #49	; 0x31
 8008868:	f7ff fe6e 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x2B);
 800886c:	202b      	movs	r0, #43	; 0x2b
 800886e:	f7ff fe6b 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8008872:	200c      	movs	r0, #12
 8008874:	f7ff fe68 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 8008878:	200e      	movs	r0, #14
 800887a:	f7ff fe65 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 800887e:	2008      	movs	r0, #8
 8008880:	f7ff fe62 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x4E);
 8008884:	204e      	movs	r0, #78	; 0x4e
 8008886:	f7ff fe5f 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xF1);
 800888a:	20f1      	movs	r0, #241	; 0xf1
 800888c:	f7ff fe5c 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x37);
 8008890:	2037      	movs	r0, #55	; 0x37
 8008892:	f7ff fe59 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 8008896:	2007      	movs	r0, #7
 8008898:	f7ff fe56 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x10);
 800889c:	2010      	movs	r0, #16
 800889e:	f7ff fe53 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 80088a2:	2003      	movs	r0, #3
 80088a4:	f7ff fe50 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 80088a8:	200e      	movs	r0, #14
 80088aa:	f7ff fe4d 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x09);
 80088ae:	2009      	movs	r0, #9
 80088b0:	f7ff fe4a 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x00);
 80088b4:	2000      	movs	r0, #0
 80088b6:	f7ff fe47 	bl	8008548 <ILI9341_Write_Data>

	//NEGATIVE GAMMA CORRECTION
	ILI9341_Write_Command(0xE1);
 80088ba:	20e1      	movs	r0, #225	; 0xe1
 80088bc:	f7ff fe22 	bl	8008504 <ILI9341_Write_Command>
	ILI9341_Write_Data(0x00);
 80088c0:	2000      	movs	r0, #0
 80088c2:	f7ff fe41 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0E);
 80088c6:	200e      	movs	r0, #14
 80088c8:	f7ff fe3e 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x14);
 80088cc:	2014      	movs	r0, #20
 80088ce:	f7ff fe3b 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x03);
 80088d2:	2003      	movs	r0, #3
 80088d4:	f7ff fe38 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x11);
 80088d8:	2011      	movs	r0, #17
 80088da:	f7ff fe35 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x07);
 80088de:	2007      	movs	r0, #7
 80088e0:	f7ff fe32 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 80088e4:	2031      	movs	r0, #49	; 0x31
 80088e6:	f7ff fe2f 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0xC1);
 80088ea:	20c1      	movs	r0, #193	; 0xc1
 80088ec:	f7ff fe2c 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x48);
 80088f0:	2048      	movs	r0, #72	; 0x48
 80088f2:	f7ff fe29 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x08);
 80088f6:	2008      	movs	r0, #8
 80088f8:	f7ff fe26 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 80088fc:	200f      	movs	r0, #15
 80088fe:	f7ff fe23 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0C);
 8008902:	200c      	movs	r0, #12
 8008904:	f7ff fe20 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x31);
 8008908:	2031      	movs	r0, #49	; 0x31
 800890a:	f7ff fe1d 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x36);
 800890e:	2036      	movs	r0, #54	; 0x36
 8008910:	f7ff fe1a 	bl	8008548 <ILI9341_Write_Data>
	ILI9341_Write_Data(0x0F);
 8008914:	200f      	movs	r0, #15
 8008916:	f7ff fe17 	bl	8008548 <ILI9341_Write_Data>

	//EXIT SLEEP
	ILI9341_Write_Command(0x11);
 800891a:	2011      	movs	r0, #17
 800891c:	f7ff fdf2 	bl	8008504 <ILI9341_Write_Command>
	HAL_Delay(240);
 8008920:	20f0      	movs	r0, #240	; 0xf0
 8008922:	f7fa f8a5 	bl	8002a70 <HAL_Delay>

	//TURN ON DISPLAY
	ILI9341_Write_Command(0x29);
 8008926:	2029      	movs	r0, #41	; 0x29
 8008928:	f7ff fdec 	bl	8008504 <ILI9341_Write_Command>
	
	//STARTING ROTATION
	ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800892c:	2000      	movs	r0, #0
 800892e:	f7ff fe97 	bl	8008660 <ILI9341_Set_Rotation>
}
 8008932:	bf00      	nop
 8008934:	bd80      	pop	{r7, pc}
	...

08008938 <ILI9341_Draw_colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_colour_Burst(uint16_t chunk_xpos, uint16_t chunk_ypos, uint16_t colour, uint32_t chunk_size, CHUNK_Type chunk_type)
{
 8008938:	b5b0      	push	{r4, r5, r7, lr}
 800893a:	b08e      	sub	sp, #56	; 0x38
 800893c:	af00      	add	r7, sp, #0
 800893e:	607b      	str	r3, [r7, #4]
 8008940:	4603      	mov	r3, r0
 8008942:	81fb      	strh	r3, [r7, #14]
 8008944:	460b      	mov	r3, r1
 8008946:	81bb      	strh	r3, [r7, #12]
 8008948:	4613      	mov	r3, r2
 800894a:	817b      	strh	r3, [r7, #10]
 800894c:	466b      	mov	r3, sp
 800894e:	461d      	mov	r5, r3

	// 	entire data sent to this function is a CHUNK < BURST_MAX_SIZE
	// 	each CHUNK is broken down into smaller BLOCKS


	uint32_t buffer_size = 0;
 8008950:	2300      	movs	r3, #0
 8008952:	62fb      	str	r3, [r7, #44]	; 0x2c
	if((chunk_size*2) < BURST_MAX_SIZE)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	005b      	lsls	r3, r3, #1
 8008958:	4a48      	ldr	r2, [pc, #288]	; (8008a7c <ILI9341_Draw_colour_Burst+0x144>)
 800895a:	8812      	ldrh	r2, [r2, #0]
 800895c:	4293      	cmp	r3, r2
 800895e:	d202      	bcs.n	8008966 <ILI9341_Draw_colour_Burst+0x2e>
	{
		buffer_size = chunk_size;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008964:	e002      	b.n	800896c <ILI9341_Draw_colour_Burst+0x34>
	}
	else
	{
		buffer_size = BURST_MAX_SIZE;
 8008966:	4b45      	ldr	r3, [pc, #276]	; (8008a7c <ILI9341_Draw_colour_Burst+0x144>)
 8008968:	881b      	ldrh	r3, [r3, #0]
 800896a:	62fb      	str	r3, [r7, #44]	; 0x2c
	}




	unsigned char chifted = 	colour>>8;;
 800896c:	897b      	ldrh	r3, [r7, #10]
 800896e:	0a1b      	lsrs	r3, r3, #8
 8008970:	b29b      	uxth	r3, r3
 8008972:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	unsigned char burst_buffer[buffer_size];
 8008976:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8008978:	4603      	mov	r3, r0
 800897a:	3b01      	subs	r3, #1
 800897c:	61fb      	str	r3, [r7, #28]
 800897e:	4601      	mov	r1, r0
 8008980:	f04f 0200 	mov.w	r2, #0
 8008984:	f04f 0300 	mov.w	r3, #0
 8008988:	f04f 0400 	mov.w	r4, #0
 800898c:	00d4      	lsls	r4, r2, #3
 800898e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8008992:	00cb      	lsls	r3, r1, #3
 8008994:	4601      	mov	r1, r0
 8008996:	f04f 0200 	mov.w	r2, #0
 800899a:	f04f 0300 	mov.w	r3, #0
 800899e:	f04f 0400 	mov.w	r4, #0
 80089a2:	00d4      	lsls	r4, r2, #3
 80089a4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80089a8:	00cb      	lsls	r3, r1, #3
 80089aa:	1dc3      	adds	r3, r0, #7
 80089ac:	08db      	lsrs	r3, r3, #3
 80089ae:	00db      	lsls	r3, r3, #3
 80089b0:	ebad 0d03 	sub.w	sp, sp, r3
 80089b4:	466b      	mov	r3, sp
 80089b6:	3300      	adds	r3, #0
 80089b8:	61bb      	str	r3, [r7, #24]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 80089ba:	2300      	movs	r3, #0
 80089bc:	633b      	str	r3, [r7, #48]	; 0x30
 80089be:	e00e      	b.n	80089de <ILI9341_Draw_colour_Burst+0xa6>
	{

			burst_buffer[j] = 	chifted;
 80089c0:	69ba      	ldr	r2, [r7, #24]
 80089c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089c4:	4413      	add	r3, r2
 80089c6:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80089ca:	701a      	strb	r2, [r3, #0]

			burst_buffer[j+1] = colour;
 80089cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089ce:	3301      	adds	r3, #1
 80089d0:	897a      	ldrh	r2, [r7, #10]
 80089d2:	b2d1      	uxtb	r1, r2
 80089d4:	69ba      	ldr	r2, [r7, #24]
 80089d6:	54d1      	strb	r1, [r2, r3]
	for(uint32_t j = 0; j < buffer_size; j+=2)
 80089d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80089da:	3302      	adds	r3, #2
 80089dc:	633b      	str	r3, [r7, #48]	; 0x30
 80089de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80089e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d3ec      	bcc.n	80089c0 <ILI9341_Draw_colour_Burst+0x88>


	}
	
	uint32_t Sending_size = chunk_size*2;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	005b      	lsls	r3, r3, #1
 80089ea:	617b      	str	r3, [r7, #20]

	// make sure we don't divide by size=0
	uint32_t Sending_in_Block = 1;
 80089ec:	2301      	movs	r3, #1
 80089ee:	637b      	str	r3, [r7, #52]	; 0x34
	uint32_t Remainder_from_block = 0;
 80089f0:	2300      	movs	r3, #0
 80089f2:	62bb      	str	r3, [r7, #40]	; 0x28
	if(chunk_size > 0)
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d00d      	beq.n	8008a16 <ILI9341_Draw_colour_Burst+0xde>
	{
			Sending_in_Block 		= Sending_size/buffer_size;
 80089fa:	697a      	ldr	r2, [r7, #20]
 80089fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a02:	637b      	str	r3, [r7, #52]	; 0x34
			Remainder_from_block 	= Sending_size%buffer_size;
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008a08:	fbb3 f2f2 	udiv	r2, r3, r2
 8008a0c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008a0e:	fb01 f202 	mul.w	r2, r1, r2
 8008a12:	1a9b      	subs	r3, r3, r2
 8008a14:	62bb      	str	r3, [r7, #40]	; 0x28
	}

	// send blocks
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008a16:	4b1a      	ldr	r3, [pc, #104]	; (8008a80 <ILI9341_Draw_colour_Burst+0x148>)
 8008a18:	695b      	ldr	r3, [r3, #20]
 8008a1a:	4a19      	ldr	r2, [pc, #100]	; (8008a80 <ILI9341_Draw_colour_Burst+0x148>)
 8008a1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a20:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008a22:	4b17      	ldr	r3, [pc, #92]	; (8008a80 <ILI9341_Draw_colour_Burst+0x148>)
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	4a16      	ldr	r2, [pc, #88]	; (8008a80 <ILI9341_Draw_colour_Burst+0x148>)
 8008a28:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a2c:	6153      	str	r3, [r2, #20]

	if(Sending_in_Block != 0)
 8008a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d010      	beq.n	8008a56 <ILI9341_Draw_colour_Burst+0x11e>
	{
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8008a34:	2300      	movs	r3, #0
 8008a36:	627b      	str	r3, [r7, #36]	; 0x24
 8008a38:	e009      	b.n	8008a4e <ILI9341_Draw_colour_Burst+0x116>
		{

			HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, buffer_size, 2);
 8008a3a:	69b9      	ldr	r1, [r7, #24]
 8008a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a3e:	b29a      	uxth	r2, r3
 8008a40:	2302      	movs	r3, #2
 8008a42:	4810      	ldr	r0, [pc, #64]	; (8008a84 <ILI9341_Draw_colour_Burst+0x14c>)
 8008a44:	f7fd fd8c 	bl	8006560 <HAL_SPI_Transmit>
		for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8008a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a4a:	3301      	adds	r3, #1
 8008a4c:	627b      	str	r3, [r7, #36]	; 0x24
 8008a4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a52:	429a      	cmp	r2, r3
 8008a54:	d3f1      	bcc.n	8008a3a <ILI9341_Draw_colour_Burst+0x102>
		}
	}

	//REMAINDER!
	HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 2);
 8008a56:	69b9      	ldr	r1, [r7, #24]
 8008a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a5a:	b29a      	uxth	r2, r3
 8008a5c:	2302      	movs	r3, #2
 8008a5e:	4809      	ldr	r0, [pc, #36]	; (8008a84 <ILI9341_Draw_colour_Burst+0x14c>)
 8008a60:	f7fd fd7e 	bl	8006560 <HAL_SPI_Transmit>

	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008a64:	4b06      	ldr	r3, [pc, #24]	; (8008a80 <ILI9341_Draw_colour_Burst+0x148>)
 8008a66:	695b      	ldr	r3, [r3, #20]
 8008a68:	4a05      	ldr	r2, [pc, #20]	; (8008a80 <ILI9341_Draw_colour_Burst+0x148>)
 8008a6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a6e:	6153      	str	r3, [r2, #20]
 8008a70:	46ad      	mov	sp, r5


}
 8008a72:	bf00      	nop
 8008a74:	3738      	adds	r7, #56	; 0x38
 8008a76:	46bd      	mov	sp, r7
 8008a78:	bdb0      	pop	{r4, r5, r7, pc}
 8008a7a:	bf00      	nop
 8008a7c:	20000020 	.word	0x20000020
 8008a80:	48000400 	.word	0x48000400
 8008a84:	20000dec 	.word	0x20000dec

08008a88 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends height*width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t colour)
{
 8008a88:	b580      	push	{r7, lr}
 8008a8a:	b084      	sub	sp, #16
 8008a8c:	af02      	add	r7, sp, #8
 8008a8e:	4603      	mov	r3, r0
 8008a90:	80fb      	strh	r3, [r7, #6]
	ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);
 8008a92:	4b10      	ldr	r3, [pc, #64]	; (8008ad4 <ILI9341_Fill_Screen+0x4c>)
 8008a94:	881b      	ldrh	r3, [r3, #0]
 8008a96:	b29a      	uxth	r2, r3
 8008a98:	4b0f      	ldr	r3, [pc, #60]	; (8008ad8 <ILI9341_Fill_Screen+0x50>)
 8008a9a:	881b      	ldrh	r3, [r3, #0]
 8008a9c:	b29b      	uxth	r3, r3
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	f7ff fd73 	bl	800858c <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(0, 0, colour, LCD_WIDTH*LCD_HEIGHT, AREA_CHUNK);
 8008aa6:	4b0b      	ldr	r3, [pc, #44]	; (8008ad4 <ILI9341_Fill_Screen+0x4c>)
 8008aa8:	881b      	ldrh	r3, [r3, #0]
 8008aaa:	b29b      	uxth	r3, r3
 8008aac:	461a      	mov	r2, r3
 8008aae:	4b0a      	ldr	r3, [pc, #40]	; (8008ad8 <ILI9341_Fill_Screen+0x50>)
 8008ab0:	881b      	ldrh	r3, [r3, #0]
 8008ab2:	b29b      	uxth	r3, r3
 8008ab4:	fb03 f302 	mul.w	r3, r3, r2
 8008ab8:	4619      	mov	r1, r3
 8008aba:	88fa      	ldrh	r2, [r7, #6]
 8008abc:	2304      	movs	r3, #4
 8008abe:	9300      	str	r3, [sp, #0]
 8008ac0:	460b      	mov	r3, r1
 8008ac2:	2100      	movs	r1, #0
 8008ac4:	2000      	movs	r0, #0
 8008ac6:	f7ff ff37 	bl	8008938 <ILI9341_Draw_colour_Burst>
}
 8008aca:	bf00      	nop
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	2000001e 	.word	0x2000001e
 8008ad8:	2000001c 	.word	0x2000001c

08008adc <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t colour)
{
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	80fb      	strh	r3, [r7, #6]
 8008ae6:	460b      	mov	r3, r1
 8008ae8:	80bb      	strh	r3, [r7, #4]
 8008aea:	4613      	mov	r3, r2
 8008aec:	807b      	strh	r3, [r7, #2]
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8008aee:	4b64      	ldr	r3, [pc, #400]	; (8008c80 <ILI9341_Draw_Pixel+0x1a4>)
 8008af0:	881b      	ldrh	r3, [r3, #0]
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	88fa      	ldrh	r2, [r7, #6]
 8008af6:	429a      	cmp	r2, r3
 8008af8:	f080 80be 	bcs.w	8008c78 <ILI9341_Draw_Pixel+0x19c>
 8008afc:	4b61      	ldr	r3, [pc, #388]	; (8008c84 <ILI9341_Draw_Pixel+0x1a8>)
 8008afe:	881b      	ldrh	r3, [r3, #0]
 8008b00:	b29b      	uxth	r3, r3
 8008b02:	88ba      	ldrh	r2, [r7, #4]
 8008b04:	429a      	cmp	r2, r3
 8008b06:	f080 80b7 	bcs.w	8008c78 <ILI9341_Draw_Pixel+0x19c>

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8008b0a:	4b5f      	ldr	r3, [pc, #380]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008b0c:	695b      	ldr	r3, [r3, #20]
 8008b0e:	4a5e      	ldr	r2, [pc, #376]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b14:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008b16:	4b5c      	ldr	r3, [pc, #368]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008b18:	695b      	ldr	r3, [r3, #20]
 8008b1a:	4a5b      	ldr	r2, [pc, #364]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008b1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b20:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2A);
 8008b22:	202a      	movs	r0, #42	; 0x2a
 8008b24:	f7ff fcda 	bl	80084dc <ILI9341_SPI_Send>

	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008b28:	4b57      	ldr	r3, [pc, #348]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008b2a:	695b      	ldr	r3, [r3, #20]
 8008b2c:	4a56      	ldr	r2, [pc, #344]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008b2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b32:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008b34:	4b54      	ldr	r3, [pc, #336]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008b36:	695b      	ldr	r3, [r3, #20]
 8008b38:	4a53      	ldr	r2, [pc, #332]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008b3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b3e:	6153      	str	r3, [r2, #20]

	//XDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008b40:	4b51      	ldr	r3, [pc, #324]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008b42:	695b      	ldr	r3, [r3, #20]
 8008b44:	4a50      	ldr	r2, [pc, #320]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008b46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b4a:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8008b4c:	88fb      	ldrh	r3, [r7, #6]
 8008b4e:	0a1b      	lsrs	r3, r3, #8
 8008b50:	b29b      	uxth	r3, r3
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	753b      	strb	r3, [r7, #20]
 8008b56:	88fb      	ldrh	r3, [r7, #6]
 8008b58:	b2db      	uxtb	r3, r3
 8008b5a:	757b      	strb	r3, [r7, #21]
 8008b5c:	88fb      	ldrh	r3, [r7, #6]
 8008b5e:	3301      	adds	r3, #1
 8008b60:	121b      	asrs	r3, r3, #8
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	75bb      	strb	r3, [r7, #22]
 8008b66:	88fb      	ldrh	r3, [r7, #6]
 8008b68:	b2db      	uxtb	r3, r3
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	b2db      	uxtb	r3, r3
 8008b6e:	75fb      	strb	r3, [r7, #23]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8008b70:	f107 0114 	add.w	r1, r7, #20
 8008b74:	2301      	movs	r3, #1
 8008b76:	2204      	movs	r2, #4
 8008b78:	4844      	ldr	r0, [pc, #272]	; (8008c8c <ILI9341_Draw_Pixel+0x1b0>)
 8008b7a:	f7fd fcf1 	bl	8006560 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008b7e:	4b42      	ldr	r3, [pc, #264]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008b80:	695b      	ldr	r3, [r3, #20]
 8008b82:	4a41      	ldr	r2, [pc, #260]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b88:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8008b8a:	4b3f      	ldr	r3, [pc, #252]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008b8c:	695b      	ldr	r3, [r3, #20]
 8008b8e:	4a3e      	ldr	r2, [pc, #248]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008b90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b94:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008b96:	4b3c      	ldr	r3, [pc, #240]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008b98:	695b      	ldr	r3, [r3, #20]
 8008b9a:	4a3b      	ldr	r2, [pc, #236]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008b9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ba0:	6153      	str	r3, [r2, #20]

	ILI9341_SPI_Send(0x2B);
 8008ba2:	202b      	movs	r0, #43	; 0x2b
 8008ba4:	f7ff fc9a 	bl	80084dc <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008ba8:	4b37      	ldr	r3, [pc, #220]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	4a36      	ldr	r2, [pc, #216]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008bae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bb2:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008bb4:	4b34      	ldr	r3, [pc, #208]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008bb6:	695b      	ldr	r3, [r3, #20]
 8008bb8:	4a33      	ldr	r2, [pc, #204]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008bbe:	6153      	str	r3, [r2, #20]

	//YDATA
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008bc0:	4b31      	ldr	r3, [pc, #196]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008bc2:	695b      	ldr	r3, [r3, #20]
 8008bc4:	4a30      	ldr	r2, [pc, #192]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008bc6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008bca:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8008bcc:	88bb      	ldrh	r3, [r7, #4]
 8008bce:	0a1b      	lsrs	r3, r3, #8
 8008bd0:	b29b      	uxth	r3, r3
 8008bd2:	b2db      	uxtb	r3, r3
 8008bd4:	743b      	strb	r3, [r7, #16]
 8008bd6:	88bb      	ldrh	r3, [r7, #4]
 8008bd8:	b2db      	uxtb	r3, r3
 8008bda:	747b      	strb	r3, [r7, #17]
 8008bdc:	88bb      	ldrh	r3, [r7, #4]
 8008bde:	3301      	adds	r3, #1
 8008be0:	121b      	asrs	r3, r3, #8
 8008be2:	b2db      	uxtb	r3, r3
 8008be4:	74bb      	strb	r3, [r7, #18]
 8008be6:	88bb      	ldrh	r3, [r7, #4]
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	3301      	adds	r3, #1
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	74fb      	strb	r3, [r7, #19]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8008bf0:	f107 0110 	add.w	r1, r7, #16
 8008bf4:	2301      	movs	r3, #1
 8008bf6:	2204      	movs	r2, #4
 8008bf8:	4824      	ldr	r0, [pc, #144]	; (8008c8c <ILI9341_Draw_Pixel+0x1b0>)
 8008bfa:	f7fd fcb1 	bl	8006560 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008bfe:	4b22      	ldr	r3, [pc, #136]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008c00:	695b      	ldr	r3, [r3, #20]
 8008c02:	4a21      	ldr	r2, [pc, #132]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c08:	6153      	str	r3, [r2, #20]

	//ADDRESS
	LCD_DC_PORT->ODR &= ~(LCD_DC_PIN);
 8008c0a:	4b1f      	ldr	r3, [pc, #124]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008c0c:	695b      	ldr	r3, [r3, #20]
 8008c0e:	4a1e      	ldr	r2, [pc, #120]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008c10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c14:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008c16:	4b1c      	ldr	r3, [pc, #112]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008c18:	695b      	ldr	r3, [r3, #20]
 8008c1a:	4a1b      	ldr	r2, [pc, #108]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008c1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c20:	6153      	str	r3, [r2, #20]
	ILI9341_SPI_Send(0x2C);
 8008c22:	202c      	movs	r0, #44	; 0x2c
 8008c24:	f7ff fc5a 	bl	80084dc <ILI9341_SPI_Send>
	LCD_DC_PORT->ODR |= LCD_DC_PIN;
 8008c28:	4b17      	ldr	r3, [pc, #92]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008c2a:	695b      	ldr	r3, [r3, #20]
 8008c2c:	4a16      	ldr	r2, [pc, #88]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008c2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c32:	6153      	str	r3, [r2, #20]
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008c34:	4b14      	ldr	r3, [pc, #80]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008c36:	695b      	ldr	r3, [r3, #20]
 8008c38:	4a13      	ldr	r2, [pc, #76]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c3e:	6153      	str	r3, [r2, #20]
	
	//COLOUR
	LCD_CS_PORT->ODR &= ~(LCD_CS_PIN);
 8008c40:	4b11      	ldr	r3, [pc, #68]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008c42:	695b      	ldr	r3, [r3, #20]
 8008c44:	4a10      	ldr	r2, [pc, #64]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008c46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c4a:	6153      	str	r3, [r2, #20]
	unsigned char Temp_Buffer2[2] = {colour>>8, colour};
 8008c4c:	887b      	ldrh	r3, [r7, #2]
 8008c4e:	0a1b      	lsrs	r3, r3, #8
 8008c50:	b29b      	uxth	r3, r3
 8008c52:	b2db      	uxtb	r3, r3
 8008c54:	733b      	strb	r3, [r7, #12]
 8008c56:	887b      	ldrh	r3, [r7, #2]
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8008c5c:	f107 010c 	add.w	r1, r7, #12
 8008c60:	2301      	movs	r3, #1
 8008c62:	2202      	movs	r2, #2
 8008c64:	4809      	ldr	r0, [pc, #36]	; (8008c8c <ILI9341_Draw_Pixel+0x1b0>)
 8008c66:	f7fd fc7b 	bl	8006560 <HAL_SPI_Transmit>
	LCD_CS_PORT->ODR |= LCD_CS_PIN;
 8008c6a:	4b07      	ldr	r3, [pc, #28]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008c6c:	695b      	ldr	r3, [r3, #20]
 8008c6e:	4a06      	ldr	r2, [pc, #24]	; (8008c88 <ILI9341_Draw_Pixel+0x1ac>)
 8008c70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008c74:	6153      	str	r3, [r2, #20]
 8008c76:	e000      	b.n	8008c7a <ILI9341_Draw_Pixel+0x19e>
	if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8008c78:	bf00      	nop

	
}
 8008c7a:	3718      	adds	r7, #24
 8008c7c:	46bd      	mov	sp, r7
 8008c7e:	bd80      	pop	{r7, pc}
 8008c80:	2000001e 	.word	0x2000001e
 8008c84:	2000001c 	.word	0x2000001c
 8008c88:	48000400 	.word	0x48000400
 8008c8c:	20000dec 	.word	0x20000dec

08008c90 <ILI9341_Draw_Rectangle>:
 *
 *
 */

void ILI9341_Draw_Rectangle(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t height, uint16_t colour, CHUNK_Type chunk_type)
{
 8008c90:	b590      	push	{r4, r7, lr}
 8008c92:	b087      	sub	sp, #28
 8008c94:	af02      	add	r7, sp, #8
 8008c96:	4604      	mov	r4, r0
 8008c98:	4608      	mov	r0, r1
 8008c9a:	4611      	mov	r1, r2
 8008c9c:	461a      	mov	r2, r3
 8008c9e:	4623      	mov	r3, r4
 8008ca0:	80fb      	strh	r3, [r7, #6]
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	80bb      	strh	r3, [r7, #4]
 8008ca6:	460b      	mov	r3, r1
 8008ca8:	807b      	strh	r3, [r7, #2]
 8008caa:	4613      	mov	r3, r2
 8008cac:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8008cae:	4b39      	ldr	r3, [pc, #228]	; (8008d94 <ILI9341_Draw_Rectangle+0x104>)
 8008cb0:	881b      	ldrh	r3, [r3, #0]
 8008cb2:	b29b      	uxth	r3, r3
 8008cb4:	88fa      	ldrh	r2, [r7, #6]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d268      	bcs.n	8008d8c <ILI9341_Draw_Rectangle+0xfc>
 8008cba:	4b37      	ldr	r3, [pc, #220]	; (8008d98 <ILI9341_Draw_Rectangle+0x108>)
 8008cbc:	881b      	ldrh	r3, [r3, #0]
 8008cbe:	b29b      	uxth	r3, r3
 8008cc0:	88ba      	ldrh	r2, [r7, #4]
 8008cc2:	429a      	cmp	r2, r3
 8008cc4:	d262      	bcs.n	8008d8c <ILI9341_Draw_Rectangle+0xfc>
	if((xpos+width-1)>=LCD_WIDTH)
 8008cc6:	88fa      	ldrh	r2, [r7, #6]
 8008cc8:	887b      	ldrh	r3, [r7, #2]
 8008cca:	4413      	add	r3, r2
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	4a31      	ldr	r2, [pc, #196]	; (8008d94 <ILI9341_Draw_Rectangle+0x104>)
 8008cd0:	8812      	ldrh	r2, [r2, #0]
 8008cd2:	b292      	uxth	r2, r2
 8008cd4:	4293      	cmp	r3, r2
 8008cd6:	db05      	blt.n	8008ce4 <ILI9341_Draw_Rectangle+0x54>
		{
			width=LCD_WIDTH-xpos;
 8008cd8:	4b2e      	ldr	r3, [pc, #184]	; (8008d94 <ILI9341_Draw_Rectangle+0x104>)
 8008cda:	881b      	ldrh	r3, [r3, #0]
 8008cdc:	b29a      	uxth	r2, r3
 8008cde:	88fb      	ldrh	r3, [r7, #6]
 8008ce0:	1ad3      	subs	r3, r2, r3
 8008ce2:	807b      	strh	r3, [r7, #2]
		}
	if((ypos+height-1)>=LCD_HEIGHT)
 8008ce4:	88ba      	ldrh	r2, [r7, #4]
 8008ce6:	883b      	ldrh	r3, [r7, #0]
 8008ce8:	4413      	add	r3, r2
 8008cea:	3b01      	subs	r3, #1
 8008cec:	4a2a      	ldr	r2, [pc, #168]	; (8008d98 <ILI9341_Draw_Rectangle+0x108>)
 8008cee:	8812      	ldrh	r2, [r2, #0]
 8008cf0:	b292      	uxth	r2, r2
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	db05      	blt.n	8008d02 <ILI9341_Draw_Rectangle+0x72>
		{
			height=LCD_HEIGHT-ypos;
 8008cf6:	4b28      	ldr	r3, [pc, #160]	; (8008d98 <ILI9341_Draw_Rectangle+0x108>)
 8008cf8:	881b      	ldrh	r3, [r3, #0]
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	88bb      	ldrh	r3, [r7, #4]
 8008cfe:	1ad3      	subs	r3, r2, r3
 8008d00:	803b      	strh	r3, [r7, #0]
		}
	ILI9341_Set_Address(xpos,
						ypos,
						(xpos + width) - 1,
 8008d02:	88fa      	ldrh	r2, [r7, #6]
 8008d04:	887b      	ldrh	r3, [r7, #2]
 8008d06:	4413      	add	r3, r2
 8008d08:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(xpos,
 8008d0a:	3b01      	subs	r3, #1
 8008d0c:	b29c      	uxth	r4, r3
						(ypos + height) - 1);
 8008d0e:	88ba      	ldrh	r2, [r7, #4]
 8008d10:	883b      	ldrh	r3, [r7, #0]
 8008d12:	4413      	add	r3, r2
 8008d14:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(xpos,
 8008d16:	3b01      	subs	r3, #1
 8008d18:	b29b      	uxth	r3, r3
 8008d1a:	88b9      	ldrh	r1, [r7, #4]
 8008d1c:	88f8      	ldrh	r0, [r7, #6]
 8008d1e:	4622      	mov	r2, r4
 8008d20:	f7ff fc34 	bl	800858c <ILI9341_Set_Address>
	// if odd numbered rect area is requested, we round down to nearest even number
	// to keep ILI9341_Draw_colour_Burst() happy.

	// Note, truncated pixel will be needed at function end.

	uint16_t size = height*width;
 8008d24:	883a      	ldrh	r2, [r7, #0]
 8008d26:	887b      	ldrh	r3, [r7, #2]
 8008d28:	fb12 f303 	smulbb	r3, r2, r3
 8008d2c:	81fb      	strh	r3, [r7, #14]
	uint8_t truncated = 0;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	737b      	strb	r3, [r7, #13]

	if((size & 1) && (size > 1))		// don't round down to zero!
 8008d32:	89fb      	ldrh	r3, [r7, #14]
 8008d34:	f003 0301 	and.w	r3, r3, #1
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d009      	beq.n	8008d50 <ILI9341_Draw_Rectangle+0xc0>
 8008d3c:	89fb      	ldrh	r3, [r7, #14]
 8008d3e:	2b01      	cmp	r3, #1
 8008d40:	d906      	bls.n	8008d50 <ILI9341_Draw_Rectangle+0xc0>
	{
		truncated = 1;
 8008d42:	2301      	movs	r3, #1
 8008d44:	737b      	strb	r3, [r7, #13]
	 	size = ((size >> 1) * 2);
 8008d46:	89fb      	ldrh	r3, [r7, #14]
 8008d48:	085b      	lsrs	r3, r3, #1
 8008d4a:	b29b      	uxth	r3, r3
 8008d4c:	005b      	lsls	r3, r3, #1
 8008d4e:	81fb      	strh	r3, [r7, #14]
	}

	ILI9341_Draw_colour_Burst(	xpos,
 8008d50:	89fc      	ldrh	r4, [r7, #14]
 8008d52:	8c3a      	ldrh	r2, [r7, #32]
 8008d54:	88b9      	ldrh	r1, [r7, #4]
 8008d56:	88f8      	ldrh	r0, [r7, #6]
 8008d58:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	4623      	mov	r3, r4
 8008d60:	f7ff fdea 	bl	8008938 <ILI9341_Draw_colour_Burst>
								colour,
								size,
								chunk_type);

	// add the truncated pixel now
	if(truncated)
 8008d64:	7b7b      	ldrb	r3, [r7, #13]
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d011      	beq.n	8008d8e <ILI9341_Draw_Rectangle+0xfe>
	{
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8008d6a:	88fa      	ldrh	r2, [r7, #6]
 8008d6c:	887b      	ldrh	r3, [r7, #2]
 8008d6e:	4413      	add	r3, r2
 8008d70:	b29b      	uxth	r3, r3
 8008d72:	3b01      	subs	r3, #1
 8008d74:	b298      	uxth	r0, r3
							(ypos + height) - 1,
 8008d76:	88ba      	ldrh	r2, [r7, #4]
 8008d78:	883b      	ldrh	r3, [r7, #0]
 8008d7a:	4413      	add	r3, r2
 8008d7c:	b29b      	uxth	r3, r3
		ILI9341_Draw_Pixel(	(xpos + width) - 1,
 8008d7e:	3b01      	subs	r3, #1
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	8c3a      	ldrh	r2, [r7, #32]
 8008d84:	4619      	mov	r1, r3
 8008d86:	f7ff fea9 	bl	8008adc <ILI9341_Draw_Pixel>
 8008d8a:	e000      	b.n	8008d8e <ILI9341_Draw_Rectangle+0xfe>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8008d8c:	bf00      	nop
							colour);
	}
}
 8008d8e:	3714      	adds	r7, #20
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd90      	pop	{r4, r7, pc}
 8008d94:	2000001e 	.word	0x2000001e
 8008d98:	2000001c 	.word	0x2000001c

08008d9c <ILI9341_Draw_Horizontal_Line>:
 *
 *
 */

void ILI9341_Draw_Horizontal_Line(uint16_t xpos, uint16_t ypos, uint16_t width, uint16_t colour)
{
 8008d9c:	b590      	push	{r4, r7, lr}
 8008d9e:	b085      	sub	sp, #20
 8008da0:	af02      	add	r7, sp, #8
 8008da2:	4604      	mov	r4, r0
 8008da4:	4608      	mov	r0, r1
 8008da6:	4611      	mov	r1, r2
 8008da8:	461a      	mov	r2, r3
 8008daa:	4623      	mov	r3, r4
 8008dac:	80fb      	strh	r3, [r7, #6]
 8008dae:	4603      	mov	r3, r0
 8008db0:	80bb      	strh	r3, [r7, #4]
 8008db2:	460b      	mov	r3, r1
 8008db4:	807b      	strh	r3, [r7, #2]
 8008db6:	4613      	mov	r3, r2
 8008db8:	803b      	strh	r3, [r7, #0]
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8008dba:	4b1a      	ldr	r3, [pc, #104]	; (8008e24 <ILI9341_Draw_Horizontal_Line+0x88>)
 8008dbc:	881b      	ldrh	r3, [r3, #0]
 8008dbe:	b29b      	uxth	r3, r3
 8008dc0:	88fa      	ldrh	r2, [r7, #6]
 8008dc2:	429a      	cmp	r2, r3
 8008dc4:	d229      	bcs.n	8008e1a <ILI9341_Draw_Horizontal_Line+0x7e>
 8008dc6:	4b18      	ldr	r3, [pc, #96]	; (8008e28 <ILI9341_Draw_Horizontal_Line+0x8c>)
 8008dc8:	881b      	ldrh	r3, [r3, #0]
 8008dca:	b29b      	uxth	r3, r3
 8008dcc:	88ba      	ldrh	r2, [r7, #4]
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d223      	bcs.n	8008e1a <ILI9341_Draw_Horizontal_Line+0x7e>
	if(((xpos + width) - 1 ) >= LCD_WIDTH)
 8008dd2:	88fa      	ldrh	r2, [r7, #6]
 8008dd4:	887b      	ldrh	r3, [r7, #2]
 8008dd6:	4413      	add	r3, r2
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	4a12      	ldr	r2, [pc, #72]	; (8008e24 <ILI9341_Draw_Horizontal_Line+0x88>)
 8008ddc:	8812      	ldrh	r2, [r2, #0]
 8008dde:	b292      	uxth	r2, r2
 8008de0:	4293      	cmp	r3, r2
 8008de2:	db05      	blt.n	8008df0 <ILI9341_Draw_Horizontal_Line+0x54>
		{
			width= LCD_WIDTH - xpos;
 8008de4:	4b0f      	ldr	r3, [pc, #60]	; (8008e24 <ILI9341_Draw_Horizontal_Line+0x88>)
 8008de6:	881b      	ldrh	r3, [r3, #0]
 8008de8:	b29a      	uxth	r2, r3
 8008dea:	88fb      	ldrh	r3, [r7, #6]
 8008dec:	1ad3      	subs	r3, r2, r3
 8008dee:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(	xpos,
							ypos,
							(xpos + width) - 1,
 8008df0:	88fa      	ldrh	r2, [r7, #6]
 8008df2:	887b      	ldrh	r3, [r7, #2]
 8008df4:	4413      	add	r3, r2
 8008df6:	b29b      	uxth	r3, r3
	ILI9341_Set_Address(	xpos,
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	b29a      	uxth	r2, r3
 8008dfc:	88bb      	ldrh	r3, [r7, #4]
 8008dfe:	88b9      	ldrh	r1, [r7, #4]
 8008e00:	88f8      	ldrh	r0, [r7, #6]
 8008e02:	f7ff fbc3 	bl	800858c <ILI9341_Set_Address>
							ypos);

	ILI9341_Draw_colour_Burst(xpos, ypos, colour, width, LINE_CHUNK);
 8008e06:	887c      	ldrh	r4, [r7, #2]
 8008e08:	883a      	ldrh	r2, [r7, #0]
 8008e0a:	88b9      	ldrh	r1, [r7, #4]
 8008e0c:	88f8      	ldrh	r0, [r7, #6]
 8008e0e:	2303      	movs	r3, #3
 8008e10:	9300      	str	r3, [sp, #0]
 8008e12:	4623      	mov	r3, r4
 8008e14:	f7ff fd90 	bl	8008938 <ILI9341_Draw_colour_Burst>
 8008e18:	e000      	b.n	8008e1c <ILI9341_Draw_Horizontal_Line+0x80>
	if((xpos >=LCD_WIDTH) || (ypos >=LCD_HEIGHT)) return;
 8008e1a:	bf00      	nop
}
 8008e1c:	370c      	adds	r7, #12
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd90      	pop	{r4, r7, pc}
 8008e22:	bf00      	nop
 8008e24:	2000001e 	.word	0x2000001e
 8008e28:	2000001c 	.word	0x2000001c

08008e2c <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t xpos, uint16_t ypos, uint16_t height, uint16_t colour)
{
 8008e2c:	b590      	push	{r4, r7, lr}
 8008e2e:	b085      	sub	sp, #20
 8008e30:	af02      	add	r7, sp, #8
 8008e32:	4604      	mov	r4, r0
 8008e34:	4608      	mov	r0, r1
 8008e36:	4611      	mov	r1, r2
 8008e38:	461a      	mov	r2, r3
 8008e3a:	4623      	mov	r3, r4
 8008e3c:	80fb      	strh	r3, [r7, #6]
 8008e3e:	4603      	mov	r3, r0
 8008e40:	80bb      	strh	r3, [r7, #4]
 8008e42:	460b      	mov	r3, r1
 8008e44:	807b      	strh	r3, [r7, #2]
 8008e46:	4613      	mov	r3, r2
 8008e48:	803b      	strh	r3, [r7, #0]
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8008e4a:	4b1a      	ldr	r3, [pc, #104]	; (8008eb4 <ILI9341_Draw_Vertical_Line+0x88>)
 8008e4c:	881b      	ldrh	r3, [r3, #0]
 8008e4e:	b29b      	uxth	r3, r3
 8008e50:	88fa      	ldrh	r2, [r7, #6]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d229      	bcs.n	8008eaa <ILI9341_Draw_Vertical_Line+0x7e>
 8008e56:	4b18      	ldr	r3, [pc, #96]	; (8008eb8 <ILI9341_Draw_Vertical_Line+0x8c>)
 8008e58:	881b      	ldrh	r3, [r3, #0]
 8008e5a:	b29b      	uxth	r3, r3
 8008e5c:	88ba      	ldrh	r2, [r7, #4]
 8008e5e:	429a      	cmp	r2, r3
 8008e60:	d223      	bcs.n	8008eaa <ILI9341_Draw_Vertical_Line+0x7e>
	if(((ypos + height) - 1) >= LCD_HEIGHT)
 8008e62:	88ba      	ldrh	r2, [r7, #4]
 8008e64:	887b      	ldrh	r3, [r7, #2]
 8008e66:	4413      	add	r3, r2
 8008e68:	3b01      	subs	r3, #1
 8008e6a:	4a13      	ldr	r2, [pc, #76]	; (8008eb8 <ILI9341_Draw_Vertical_Line+0x8c>)
 8008e6c:	8812      	ldrh	r2, [r2, #0]
 8008e6e:	b292      	uxth	r2, r2
 8008e70:	4293      	cmp	r3, r2
 8008e72:	db05      	blt.n	8008e80 <ILI9341_Draw_Vertical_Line+0x54>
		{
			height= LCD_HEIGHT - ypos;
 8008e74:	4b10      	ldr	r3, [pc, #64]	; (8008eb8 <ILI9341_Draw_Vertical_Line+0x8c>)
 8008e76:	881b      	ldrh	r3, [r3, #0]
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	88bb      	ldrh	r3, [r7, #4]
 8008e7c:	1ad3      	subs	r3, r2, r3
 8008e7e:	807b      	strh	r3, [r7, #2]
		}
	ILI9341_Set_Address(xpos, ypos, xpos, (ypos + height) - 1);
 8008e80:	88ba      	ldrh	r2, [r7, #4]
 8008e82:	887b      	ldrh	r3, [r7, #2]
 8008e84:	4413      	add	r3, r2
 8008e86:	b29b      	uxth	r3, r3
 8008e88:	3b01      	subs	r3, #1
 8008e8a:	b29b      	uxth	r3, r3
 8008e8c:	88fa      	ldrh	r2, [r7, #6]
 8008e8e:	88b9      	ldrh	r1, [r7, #4]
 8008e90:	88f8      	ldrh	r0, [r7, #6]
 8008e92:	f7ff fb7b 	bl	800858c <ILI9341_Set_Address>
	ILI9341_Draw_colour_Burst(xpos, ypos, colour, height, LINE_CHUNK);
 8008e96:	887c      	ldrh	r4, [r7, #2]
 8008e98:	883a      	ldrh	r2, [r7, #0]
 8008e9a:	88b9      	ldrh	r1, [r7, #4]
 8008e9c:	88f8      	ldrh	r0, [r7, #6]
 8008e9e:	2303      	movs	r3, #3
 8008ea0:	9300      	str	r3, [sp, #0]
 8008ea2:	4623      	mov	r3, r4
 8008ea4:	f7ff fd48 	bl	8008938 <ILI9341_Draw_colour_Burst>
 8008ea8:	e000      	b.n	8008eac <ILI9341_Draw_Vertical_Line+0x80>
	if((xpos >= LCD_WIDTH) || (ypos >= LCD_HEIGHT)) return;
 8008eaa:	bf00      	nop
}
 8008eac:	370c      	adds	r7, #12
 8008eae:	46bd      	mov	sp, r7
 8008eb0:	bd90      	pop	{r4, r7, pc}
 8008eb2:	bf00      	nop
 8008eb4:	2000001e 	.word	0x2000001e
 8008eb8:	2000001c 	.word	0x2000001c

08008ebc <__errno>:
 8008ebc:	4b01      	ldr	r3, [pc, #4]	; (8008ec4 <__errno+0x8>)
 8008ebe:	6818      	ldr	r0, [r3, #0]
 8008ec0:	4770      	bx	lr
 8008ec2:	bf00      	nop
 8008ec4:	20000b64 	.word	0x20000b64

08008ec8 <__libc_init_array>:
 8008ec8:	b570      	push	{r4, r5, r6, lr}
 8008eca:	4e0d      	ldr	r6, [pc, #52]	; (8008f00 <__libc_init_array+0x38>)
 8008ecc:	4c0d      	ldr	r4, [pc, #52]	; (8008f04 <__libc_init_array+0x3c>)
 8008ece:	1ba4      	subs	r4, r4, r6
 8008ed0:	10a4      	asrs	r4, r4, #2
 8008ed2:	2500      	movs	r5, #0
 8008ed4:	42a5      	cmp	r5, r4
 8008ed6:	d109      	bne.n	8008eec <__libc_init_array+0x24>
 8008ed8:	4e0b      	ldr	r6, [pc, #44]	; (8008f08 <__libc_init_array+0x40>)
 8008eda:	4c0c      	ldr	r4, [pc, #48]	; (8008f0c <__libc_init_array+0x44>)
 8008edc:	f000 ffe8 	bl	8009eb0 <_init>
 8008ee0:	1ba4      	subs	r4, r4, r6
 8008ee2:	10a4      	asrs	r4, r4, #2
 8008ee4:	2500      	movs	r5, #0
 8008ee6:	42a5      	cmp	r5, r4
 8008ee8:	d105      	bne.n	8008ef6 <__libc_init_array+0x2e>
 8008eea:	bd70      	pop	{r4, r5, r6, pc}
 8008eec:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008ef0:	4798      	blx	r3
 8008ef2:	3501      	adds	r5, #1
 8008ef4:	e7ee      	b.n	8008ed4 <__libc_init_array+0xc>
 8008ef6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008efa:	4798      	blx	r3
 8008efc:	3501      	adds	r5, #1
 8008efe:	e7f2      	b.n	8008ee6 <__libc_init_array+0x1e>
 8008f00:	0800a3a0 	.word	0x0800a3a0
 8008f04:	0800a3a0 	.word	0x0800a3a0
 8008f08:	0800a3a0 	.word	0x0800a3a0
 8008f0c:	0800a3a4 	.word	0x0800a3a4

08008f10 <memset>:
 8008f10:	4402      	add	r2, r0
 8008f12:	4603      	mov	r3, r0
 8008f14:	4293      	cmp	r3, r2
 8008f16:	d100      	bne.n	8008f1a <memset+0xa>
 8008f18:	4770      	bx	lr
 8008f1a:	f803 1b01 	strb.w	r1, [r3], #1
 8008f1e:	e7f9      	b.n	8008f14 <memset+0x4>

08008f20 <_puts_r>:
 8008f20:	b570      	push	{r4, r5, r6, lr}
 8008f22:	460e      	mov	r6, r1
 8008f24:	4605      	mov	r5, r0
 8008f26:	b118      	cbz	r0, 8008f30 <_puts_r+0x10>
 8008f28:	6983      	ldr	r3, [r0, #24]
 8008f2a:	b90b      	cbnz	r3, 8008f30 <_puts_r+0x10>
 8008f2c:	f000 fa40 	bl	80093b0 <__sinit>
 8008f30:	69ab      	ldr	r3, [r5, #24]
 8008f32:	68ac      	ldr	r4, [r5, #8]
 8008f34:	b913      	cbnz	r3, 8008f3c <_puts_r+0x1c>
 8008f36:	4628      	mov	r0, r5
 8008f38:	f000 fa3a 	bl	80093b0 <__sinit>
 8008f3c:	4b23      	ldr	r3, [pc, #140]	; (8008fcc <_puts_r+0xac>)
 8008f3e:	429c      	cmp	r4, r3
 8008f40:	d117      	bne.n	8008f72 <_puts_r+0x52>
 8008f42:	686c      	ldr	r4, [r5, #4]
 8008f44:	89a3      	ldrh	r3, [r4, #12]
 8008f46:	071b      	lsls	r3, r3, #28
 8008f48:	d51d      	bpl.n	8008f86 <_puts_r+0x66>
 8008f4a:	6923      	ldr	r3, [r4, #16]
 8008f4c:	b1db      	cbz	r3, 8008f86 <_puts_r+0x66>
 8008f4e:	3e01      	subs	r6, #1
 8008f50:	68a3      	ldr	r3, [r4, #8]
 8008f52:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008f56:	3b01      	subs	r3, #1
 8008f58:	60a3      	str	r3, [r4, #8]
 8008f5a:	b9e9      	cbnz	r1, 8008f98 <_puts_r+0x78>
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	da2e      	bge.n	8008fbe <_puts_r+0x9e>
 8008f60:	4622      	mov	r2, r4
 8008f62:	210a      	movs	r1, #10
 8008f64:	4628      	mov	r0, r5
 8008f66:	f000 f873 	bl	8009050 <__swbuf_r>
 8008f6a:	3001      	adds	r0, #1
 8008f6c:	d011      	beq.n	8008f92 <_puts_r+0x72>
 8008f6e:	200a      	movs	r0, #10
 8008f70:	e011      	b.n	8008f96 <_puts_r+0x76>
 8008f72:	4b17      	ldr	r3, [pc, #92]	; (8008fd0 <_puts_r+0xb0>)
 8008f74:	429c      	cmp	r4, r3
 8008f76:	d101      	bne.n	8008f7c <_puts_r+0x5c>
 8008f78:	68ac      	ldr	r4, [r5, #8]
 8008f7a:	e7e3      	b.n	8008f44 <_puts_r+0x24>
 8008f7c:	4b15      	ldr	r3, [pc, #84]	; (8008fd4 <_puts_r+0xb4>)
 8008f7e:	429c      	cmp	r4, r3
 8008f80:	bf08      	it	eq
 8008f82:	68ec      	ldreq	r4, [r5, #12]
 8008f84:	e7de      	b.n	8008f44 <_puts_r+0x24>
 8008f86:	4621      	mov	r1, r4
 8008f88:	4628      	mov	r0, r5
 8008f8a:	f000 f8b3 	bl	80090f4 <__swsetup_r>
 8008f8e:	2800      	cmp	r0, #0
 8008f90:	d0dd      	beq.n	8008f4e <_puts_r+0x2e>
 8008f92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f96:	bd70      	pop	{r4, r5, r6, pc}
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	da04      	bge.n	8008fa6 <_puts_r+0x86>
 8008f9c:	69a2      	ldr	r2, [r4, #24]
 8008f9e:	429a      	cmp	r2, r3
 8008fa0:	dc06      	bgt.n	8008fb0 <_puts_r+0x90>
 8008fa2:	290a      	cmp	r1, #10
 8008fa4:	d004      	beq.n	8008fb0 <_puts_r+0x90>
 8008fa6:	6823      	ldr	r3, [r4, #0]
 8008fa8:	1c5a      	adds	r2, r3, #1
 8008faa:	6022      	str	r2, [r4, #0]
 8008fac:	7019      	strb	r1, [r3, #0]
 8008fae:	e7cf      	b.n	8008f50 <_puts_r+0x30>
 8008fb0:	4622      	mov	r2, r4
 8008fb2:	4628      	mov	r0, r5
 8008fb4:	f000 f84c 	bl	8009050 <__swbuf_r>
 8008fb8:	3001      	adds	r0, #1
 8008fba:	d1c9      	bne.n	8008f50 <_puts_r+0x30>
 8008fbc:	e7e9      	b.n	8008f92 <_puts_r+0x72>
 8008fbe:	6823      	ldr	r3, [r4, #0]
 8008fc0:	200a      	movs	r0, #10
 8008fc2:	1c5a      	adds	r2, r3, #1
 8008fc4:	6022      	str	r2, [r4, #0]
 8008fc6:	7018      	strb	r0, [r3, #0]
 8008fc8:	e7e5      	b.n	8008f96 <_puts_r+0x76>
 8008fca:	bf00      	nop
 8008fcc:	0800a32c 	.word	0x0800a32c
 8008fd0:	0800a34c 	.word	0x0800a34c
 8008fd4:	0800a30c 	.word	0x0800a30c

08008fd8 <puts>:
 8008fd8:	4b02      	ldr	r3, [pc, #8]	; (8008fe4 <puts+0xc>)
 8008fda:	4601      	mov	r1, r0
 8008fdc:	6818      	ldr	r0, [r3, #0]
 8008fde:	f7ff bf9f 	b.w	8008f20 <_puts_r>
 8008fe2:	bf00      	nop
 8008fe4:	20000b64 	.word	0x20000b64

08008fe8 <sniprintf>:
 8008fe8:	b40c      	push	{r2, r3}
 8008fea:	b530      	push	{r4, r5, lr}
 8008fec:	4b17      	ldr	r3, [pc, #92]	; (800904c <sniprintf+0x64>)
 8008fee:	1e0c      	subs	r4, r1, #0
 8008ff0:	b09d      	sub	sp, #116	; 0x74
 8008ff2:	681d      	ldr	r5, [r3, #0]
 8008ff4:	da08      	bge.n	8009008 <sniprintf+0x20>
 8008ff6:	238b      	movs	r3, #139	; 0x8b
 8008ff8:	602b      	str	r3, [r5, #0]
 8008ffa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008ffe:	b01d      	add	sp, #116	; 0x74
 8009000:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009004:	b002      	add	sp, #8
 8009006:	4770      	bx	lr
 8009008:	f44f 7302 	mov.w	r3, #520	; 0x208
 800900c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009010:	bf14      	ite	ne
 8009012:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8009016:	4623      	moveq	r3, r4
 8009018:	9304      	str	r3, [sp, #16]
 800901a:	9307      	str	r3, [sp, #28]
 800901c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009020:	9002      	str	r0, [sp, #8]
 8009022:	9006      	str	r0, [sp, #24]
 8009024:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009028:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800902a:	ab21      	add	r3, sp, #132	; 0x84
 800902c:	a902      	add	r1, sp, #8
 800902e:	4628      	mov	r0, r5
 8009030:	9301      	str	r3, [sp, #4]
 8009032:	f000 fbad 	bl	8009790 <_svfiprintf_r>
 8009036:	1c43      	adds	r3, r0, #1
 8009038:	bfbc      	itt	lt
 800903a:	238b      	movlt	r3, #139	; 0x8b
 800903c:	602b      	strlt	r3, [r5, #0]
 800903e:	2c00      	cmp	r4, #0
 8009040:	d0dd      	beq.n	8008ffe <sniprintf+0x16>
 8009042:	9b02      	ldr	r3, [sp, #8]
 8009044:	2200      	movs	r2, #0
 8009046:	701a      	strb	r2, [r3, #0]
 8009048:	e7d9      	b.n	8008ffe <sniprintf+0x16>
 800904a:	bf00      	nop
 800904c:	20000b64 	.word	0x20000b64

08009050 <__swbuf_r>:
 8009050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009052:	460e      	mov	r6, r1
 8009054:	4614      	mov	r4, r2
 8009056:	4605      	mov	r5, r0
 8009058:	b118      	cbz	r0, 8009062 <__swbuf_r+0x12>
 800905a:	6983      	ldr	r3, [r0, #24]
 800905c:	b90b      	cbnz	r3, 8009062 <__swbuf_r+0x12>
 800905e:	f000 f9a7 	bl	80093b0 <__sinit>
 8009062:	4b21      	ldr	r3, [pc, #132]	; (80090e8 <__swbuf_r+0x98>)
 8009064:	429c      	cmp	r4, r3
 8009066:	d12a      	bne.n	80090be <__swbuf_r+0x6e>
 8009068:	686c      	ldr	r4, [r5, #4]
 800906a:	69a3      	ldr	r3, [r4, #24]
 800906c:	60a3      	str	r3, [r4, #8]
 800906e:	89a3      	ldrh	r3, [r4, #12]
 8009070:	071a      	lsls	r2, r3, #28
 8009072:	d52e      	bpl.n	80090d2 <__swbuf_r+0x82>
 8009074:	6923      	ldr	r3, [r4, #16]
 8009076:	b363      	cbz	r3, 80090d2 <__swbuf_r+0x82>
 8009078:	6923      	ldr	r3, [r4, #16]
 800907a:	6820      	ldr	r0, [r4, #0]
 800907c:	1ac0      	subs	r0, r0, r3
 800907e:	6963      	ldr	r3, [r4, #20]
 8009080:	b2f6      	uxtb	r6, r6
 8009082:	4283      	cmp	r3, r0
 8009084:	4637      	mov	r7, r6
 8009086:	dc04      	bgt.n	8009092 <__swbuf_r+0x42>
 8009088:	4621      	mov	r1, r4
 800908a:	4628      	mov	r0, r5
 800908c:	f000 f926 	bl	80092dc <_fflush_r>
 8009090:	bb28      	cbnz	r0, 80090de <__swbuf_r+0x8e>
 8009092:	68a3      	ldr	r3, [r4, #8]
 8009094:	3b01      	subs	r3, #1
 8009096:	60a3      	str	r3, [r4, #8]
 8009098:	6823      	ldr	r3, [r4, #0]
 800909a:	1c5a      	adds	r2, r3, #1
 800909c:	6022      	str	r2, [r4, #0]
 800909e:	701e      	strb	r6, [r3, #0]
 80090a0:	6963      	ldr	r3, [r4, #20]
 80090a2:	3001      	adds	r0, #1
 80090a4:	4283      	cmp	r3, r0
 80090a6:	d004      	beq.n	80090b2 <__swbuf_r+0x62>
 80090a8:	89a3      	ldrh	r3, [r4, #12]
 80090aa:	07db      	lsls	r3, r3, #31
 80090ac:	d519      	bpl.n	80090e2 <__swbuf_r+0x92>
 80090ae:	2e0a      	cmp	r6, #10
 80090b0:	d117      	bne.n	80090e2 <__swbuf_r+0x92>
 80090b2:	4621      	mov	r1, r4
 80090b4:	4628      	mov	r0, r5
 80090b6:	f000 f911 	bl	80092dc <_fflush_r>
 80090ba:	b190      	cbz	r0, 80090e2 <__swbuf_r+0x92>
 80090bc:	e00f      	b.n	80090de <__swbuf_r+0x8e>
 80090be:	4b0b      	ldr	r3, [pc, #44]	; (80090ec <__swbuf_r+0x9c>)
 80090c0:	429c      	cmp	r4, r3
 80090c2:	d101      	bne.n	80090c8 <__swbuf_r+0x78>
 80090c4:	68ac      	ldr	r4, [r5, #8]
 80090c6:	e7d0      	b.n	800906a <__swbuf_r+0x1a>
 80090c8:	4b09      	ldr	r3, [pc, #36]	; (80090f0 <__swbuf_r+0xa0>)
 80090ca:	429c      	cmp	r4, r3
 80090cc:	bf08      	it	eq
 80090ce:	68ec      	ldreq	r4, [r5, #12]
 80090d0:	e7cb      	b.n	800906a <__swbuf_r+0x1a>
 80090d2:	4621      	mov	r1, r4
 80090d4:	4628      	mov	r0, r5
 80090d6:	f000 f80d 	bl	80090f4 <__swsetup_r>
 80090da:	2800      	cmp	r0, #0
 80090dc:	d0cc      	beq.n	8009078 <__swbuf_r+0x28>
 80090de:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80090e2:	4638      	mov	r0, r7
 80090e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090e6:	bf00      	nop
 80090e8:	0800a32c 	.word	0x0800a32c
 80090ec:	0800a34c 	.word	0x0800a34c
 80090f0:	0800a30c 	.word	0x0800a30c

080090f4 <__swsetup_r>:
 80090f4:	4b32      	ldr	r3, [pc, #200]	; (80091c0 <__swsetup_r+0xcc>)
 80090f6:	b570      	push	{r4, r5, r6, lr}
 80090f8:	681d      	ldr	r5, [r3, #0]
 80090fa:	4606      	mov	r6, r0
 80090fc:	460c      	mov	r4, r1
 80090fe:	b125      	cbz	r5, 800910a <__swsetup_r+0x16>
 8009100:	69ab      	ldr	r3, [r5, #24]
 8009102:	b913      	cbnz	r3, 800910a <__swsetup_r+0x16>
 8009104:	4628      	mov	r0, r5
 8009106:	f000 f953 	bl	80093b0 <__sinit>
 800910a:	4b2e      	ldr	r3, [pc, #184]	; (80091c4 <__swsetup_r+0xd0>)
 800910c:	429c      	cmp	r4, r3
 800910e:	d10f      	bne.n	8009130 <__swsetup_r+0x3c>
 8009110:	686c      	ldr	r4, [r5, #4]
 8009112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009116:	b29a      	uxth	r2, r3
 8009118:	0715      	lsls	r5, r2, #28
 800911a:	d42c      	bmi.n	8009176 <__swsetup_r+0x82>
 800911c:	06d0      	lsls	r0, r2, #27
 800911e:	d411      	bmi.n	8009144 <__swsetup_r+0x50>
 8009120:	2209      	movs	r2, #9
 8009122:	6032      	str	r2, [r6, #0]
 8009124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009128:	81a3      	strh	r3, [r4, #12]
 800912a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800912e:	e03e      	b.n	80091ae <__swsetup_r+0xba>
 8009130:	4b25      	ldr	r3, [pc, #148]	; (80091c8 <__swsetup_r+0xd4>)
 8009132:	429c      	cmp	r4, r3
 8009134:	d101      	bne.n	800913a <__swsetup_r+0x46>
 8009136:	68ac      	ldr	r4, [r5, #8]
 8009138:	e7eb      	b.n	8009112 <__swsetup_r+0x1e>
 800913a:	4b24      	ldr	r3, [pc, #144]	; (80091cc <__swsetup_r+0xd8>)
 800913c:	429c      	cmp	r4, r3
 800913e:	bf08      	it	eq
 8009140:	68ec      	ldreq	r4, [r5, #12]
 8009142:	e7e6      	b.n	8009112 <__swsetup_r+0x1e>
 8009144:	0751      	lsls	r1, r2, #29
 8009146:	d512      	bpl.n	800916e <__swsetup_r+0x7a>
 8009148:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800914a:	b141      	cbz	r1, 800915e <__swsetup_r+0x6a>
 800914c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009150:	4299      	cmp	r1, r3
 8009152:	d002      	beq.n	800915a <__swsetup_r+0x66>
 8009154:	4630      	mov	r0, r6
 8009156:	f000 fa19 	bl	800958c <_free_r>
 800915a:	2300      	movs	r3, #0
 800915c:	6363      	str	r3, [r4, #52]	; 0x34
 800915e:	89a3      	ldrh	r3, [r4, #12]
 8009160:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009164:	81a3      	strh	r3, [r4, #12]
 8009166:	2300      	movs	r3, #0
 8009168:	6063      	str	r3, [r4, #4]
 800916a:	6923      	ldr	r3, [r4, #16]
 800916c:	6023      	str	r3, [r4, #0]
 800916e:	89a3      	ldrh	r3, [r4, #12]
 8009170:	f043 0308 	orr.w	r3, r3, #8
 8009174:	81a3      	strh	r3, [r4, #12]
 8009176:	6923      	ldr	r3, [r4, #16]
 8009178:	b94b      	cbnz	r3, 800918e <__swsetup_r+0x9a>
 800917a:	89a3      	ldrh	r3, [r4, #12]
 800917c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009180:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009184:	d003      	beq.n	800918e <__swsetup_r+0x9a>
 8009186:	4621      	mov	r1, r4
 8009188:	4630      	mov	r0, r6
 800918a:	f000 f9bf 	bl	800950c <__smakebuf_r>
 800918e:	89a2      	ldrh	r2, [r4, #12]
 8009190:	f012 0301 	ands.w	r3, r2, #1
 8009194:	d00c      	beq.n	80091b0 <__swsetup_r+0xbc>
 8009196:	2300      	movs	r3, #0
 8009198:	60a3      	str	r3, [r4, #8]
 800919a:	6963      	ldr	r3, [r4, #20]
 800919c:	425b      	negs	r3, r3
 800919e:	61a3      	str	r3, [r4, #24]
 80091a0:	6923      	ldr	r3, [r4, #16]
 80091a2:	b953      	cbnz	r3, 80091ba <__swsetup_r+0xc6>
 80091a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091a8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80091ac:	d1ba      	bne.n	8009124 <__swsetup_r+0x30>
 80091ae:	bd70      	pop	{r4, r5, r6, pc}
 80091b0:	0792      	lsls	r2, r2, #30
 80091b2:	bf58      	it	pl
 80091b4:	6963      	ldrpl	r3, [r4, #20]
 80091b6:	60a3      	str	r3, [r4, #8]
 80091b8:	e7f2      	b.n	80091a0 <__swsetup_r+0xac>
 80091ba:	2000      	movs	r0, #0
 80091bc:	e7f7      	b.n	80091ae <__swsetup_r+0xba>
 80091be:	bf00      	nop
 80091c0:	20000b64 	.word	0x20000b64
 80091c4:	0800a32c 	.word	0x0800a32c
 80091c8:	0800a34c 	.word	0x0800a34c
 80091cc:	0800a30c 	.word	0x0800a30c

080091d0 <__sflush_r>:
 80091d0:	898a      	ldrh	r2, [r1, #12]
 80091d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80091d6:	4605      	mov	r5, r0
 80091d8:	0710      	lsls	r0, r2, #28
 80091da:	460c      	mov	r4, r1
 80091dc:	d458      	bmi.n	8009290 <__sflush_r+0xc0>
 80091de:	684b      	ldr	r3, [r1, #4]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	dc05      	bgt.n	80091f0 <__sflush_r+0x20>
 80091e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	dc02      	bgt.n	80091f0 <__sflush_r+0x20>
 80091ea:	2000      	movs	r0, #0
 80091ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80091f2:	2e00      	cmp	r6, #0
 80091f4:	d0f9      	beq.n	80091ea <__sflush_r+0x1a>
 80091f6:	2300      	movs	r3, #0
 80091f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80091fc:	682f      	ldr	r7, [r5, #0]
 80091fe:	6a21      	ldr	r1, [r4, #32]
 8009200:	602b      	str	r3, [r5, #0]
 8009202:	d032      	beq.n	800926a <__sflush_r+0x9a>
 8009204:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009206:	89a3      	ldrh	r3, [r4, #12]
 8009208:	075a      	lsls	r2, r3, #29
 800920a:	d505      	bpl.n	8009218 <__sflush_r+0x48>
 800920c:	6863      	ldr	r3, [r4, #4]
 800920e:	1ac0      	subs	r0, r0, r3
 8009210:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009212:	b10b      	cbz	r3, 8009218 <__sflush_r+0x48>
 8009214:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009216:	1ac0      	subs	r0, r0, r3
 8009218:	2300      	movs	r3, #0
 800921a:	4602      	mov	r2, r0
 800921c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800921e:	6a21      	ldr	r1, [r4, #32]
 8009220:	4628      	mov	r0, r5
 8009222:	47b0      	blx	r6
 8009224:	1c43      	adds	r3, r0, #1
 8009226:	89a3      	ldrh	r3, [r4, #12]
 8009228:	d106      	bne.n	8009238 <__sflush_r+0x68>
 800922a:	6829      	ldr	r1, [r5, #0]
 800922c:	291d      	cmp	r1, #29
 800922e:	d848      	bhi.n	80092c2 <__sflush_r+0xf2>
 8009230:	4a29      	ldr	r2, [pc, #164]	; (80092d8 <__sflush_r+0x108>)
 8009232:	40ca      	lsrs	r2, r1
 8009234:	07d6      	lsls	r6, r2, #31
 8009236:	d544      	bpl.n	80092c2 <__sflush_r+0xf2>
 8009238:	2200      	movs	r2, #0
 800923a:	6062      	str	r2, [r4, #4]
 800923c:	04d9      	lsls	r1, r3, #19
 800923e:	6922      	ldr	r2, [r4, #16]
 8009240:	6022      	str	r2, [r4, #0]
 8009242:	d504      	bpl.n	800924e <__sflush_r+0x7e>
 8009244:	1c42      	adds	r2, r0, #1
 8009246:	d101      	bne.n	800924c <__sflush_r+0x7c>
 8009248:	682b      	ldr	r3, [r5, #0]
 800924a:	b903      	cbnz	r3, 800924e <__sflush_r+0x7e>
 800924c:	6560      	str	r0, [r4, #84]	; 0x54
 800924e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009250:	602f      	str	r7, [r5, #0]
 8009252:	2900      	cmp	r1, #0
 8009254:	d0c9      	beq.n	80091ea <__sflush_r+0x1a>
 8009256:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800925a:	4299      	cmp	r1, r3
 800925c:	d002      	beq.n	8009264 <__sflush_r+0x94>
 800925e:	4628      	mov	r0, r5
 8009260:	f000 f994 	bl	800958c <_free_r>
 8009264:	2000      	movs	r0, #0
 8009266:	6360      	str	r0, [r4, #52]	; 0x34
 8009268:	e7c0      	b.n	80091ec <__sflush_r+0x1c>
 800926a:	2301      	movs	r3, #1
 800926c:	4628      	mov	r0, r5
 800926e:	47b0      	blx	r6
 8009270:	1c41      	adds	r1, r0, #1
 8009272:	d1c8      	bne.n	8009206 <__sflush_r+0x36>
 8009274:	682b      	ldr	r3, [r5, #0]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d0c5      	beq.n	8009206 <__sflush_r+0x36>
 800927a:	2b1d      	cmp	r3, #29
 800927c:	d001      	beq.n	8009282 <__sflush_r+0xb2>
 800927e:	2b16      	cmp	r3, #22
 8009280:	d101      	bne.n	8009286 <__sflush_r+0xb6>
 8009282:	602f      	str	r7, [r5, #0]
 8009284:	e7b1      	b.n	80091ea <__sflush_r+0x1a>
 8009286:	89a3      	ldrh	r3, [r4, #12]
 8009288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800928c:	81a3      	strh	r3, [r4, #12]
 800928e:	e7ad      	b.n	80091ec <__sflush_r+0x1c>
 8009290:	690f      	ldr	r7, [r1, #16]
 8009292:	2f00      	cmp	r7, #0
 8009294:	d0a9      	beq.n	80091ea <__sflush_r+0x1a>
 8009296:	0793      	lsls	r3, r2, #30
 8009298:	680e      	ldr	r6, [r1, #0]
 800929a:	bf08      	it	eq
 800929c:	694b      	ldreq	r3, [r1, #20]
 800929e:	600f      	str	r7, [r1, #0]
 80092a0:	bf18      	it	ne
 80092a2:	2300      	movne	r3, #0
 80092a4:	eba6 0807 	sub.w	r8, r6, r7
 80092a8:	608b      	str	r3, [r1, #8]
 80092aa:	f1b8 0f00 	cmp.w	r8, #0
 80092ae:	dd9c      	ble.n	80091ea <__sflush_r+0x1a>
 80092b0:	4643      	mov	r3, r8
 80092b2:	463a      	mov	r2, r7
 80092b4:	6a21      	ldr	r1, [r4, #32]
 80092b6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80092b8:	4628      	mov	r0, r5
 80092ba:	47b0      	blx	r6
 80092bc:	2800      	cmp	r0, #0
 80092be:	dc06      	bgt.n	80092ce <__sflush_r+0xfe>
 80092c0:	89a3      	ldrh	r3, [r4, #12]
 80092c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80092c6:	81a3      	strh	r3, [r4, #12]
 80092c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80092cc:	e78e      	b.n	80091ec <__sflush_r+0x1c>
 80092ce:	4407      	add	r7, r0
 80092d0:	eba8 0800 	sub.w	r8, r8, r0
 80092d4:	e7e9      	b.n	80092aa <__sflush_r+0xda>
 80092d6:	bf00      	nop
 80092d8:	20400001 	.word	0x20400001

080092dc <_fflush_r>:
 80092dc:	b538      	push	{r3, r4, r5, lr}
 80092de:	690b      	ldr	r3, [r1, #16]
 80092e0:	4605      	mov	r5, r0
 80092e2:	460c      	mov	r4, r1
 80092e4:	b1db      	cbz	r3, 800931e <_fflush_r+0x42>
 80092e6:	b118      	cbz	r0, 80092f0 <_fflush_r+0x14>
 80092e8:	6983      	ldr	r3, [r0, #24]
 80092ea:	b90b      	cbnz	r3, 80092f0 <_fflush_r+0x14>
 80092ec:	f000 f860 	bl	80093b0 <__sinit>
 80092f0:	4b0c      	ldr	r3, [pc, #48]	; (8009324 <_fflush_r+0x48>)
 80092f2:	429c      	cmp	r4, r3
 80092f4:	d109      	bne.n	800930a <_fflush_r+0x2e>
 80092f6:	686c      	ldr	r4, [r5, #4]
 80092f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80092fc:	b17b      	cbz	r3, 800931e <_fflush_r+0x42>
 80092fe:	4621      	mov	r1, r4
 8009300:	4628      	mov	r0, r5
 8009302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009306:	f7ff bf63 	b.w	80091d0 <__sflush_r>
 800930a:	4b07      	ldr	r3, [pc, #28]	; (8009328 <_fflush_r+0x4c>)
 800930c:	429c      	cmp	r4, r3
 800930e:	d101      	bne.n	8009314 <_fflush_r+0x38>
 8009310:	68ac      	ldr	r4, [r5, #8]
 8009312:	e7f1      	b.n	80092f8 <_fflush_r+0x1c>
 8009314:	4b05      	ldr	r3, [pc, #20]	; (800932c <_fflush_r+0x50>)
 8009316:	429c      	cmp	r4, r3
 8009318:	bf08      	it	eq
 800931a:	68ec      	ldreq	r4, [r5, #12]
 800931c:	e7ec      	b.n	80092f8 <_fflush_r+0x1c>
 800931e:	2000      	movs	r0, #0
 8009320:	bd38      	pop	{r3, r4, r5, pc}
 8009322:	bf00      	nop
 8009324:	0800a32c 	.word	0x0800a32c
 8009328:	0800a34c 	.word	0x0800a34c
 800932c:	0800a30c 	.word	0x0800a30c

08009330 <std>:
 8009330:	2300      	movs	r3, #0
 8009332:	b510      	push	{r4, lr}
 8009334:	4604      	mov	r4, r0
 8009336:	e9c0 3300 	strd	r3, r3, [r0]
 800933a:	6083      	str	r3, [r0, #8]
 800933c:	8181      	strh	r1, [r0, #12]
 800933e:	6643      	str	r3, [r0, #100]	; 0x64
 8009340:	81c2      	strh	r2, [r0, #14]
 8009342:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009346:	6183      	str	r3, [r0, #24]
 8009348:	4619      	mov	r1, r3
 800934a:	2208      	movs	r2, #8
 800934c:	305c      	adds	r0, #92	; 0x5c
 800934e:	f7ff fddf 	bl	8008f10 <memset>
 8009352:	4b05      	ldr	r3, [pc, #20]	; (8009368 <std+0x38>)
 8009354:	6263      	str	r3, [r4, #36]	; 0x24
 8009356:	4b05      	ldr	r3, [pc, #20]	; (800936c <std+0x3c>)
 8009358:	62a3      	str	r3, [r4, #40]	; 0x28
 800935a:	4b05      	ldr	r3, [pc, #20]	; (8009370 <std+0x40>)
 800935c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800935e:	4b05      	ldr	r3, [pc, #20]	; (8009374 <std+0x44>)
 8009360:	6224      	str	r4, [r4, #32]
 8009362:	6323      	str	r3, [r4, #48]	; 0x30
 8009364:	bd10      	pop	{r4, pc}
 8009366:	bf00      	nop
 8009368:	08009cb1 	.word	0x08009cb1
 800936c:	08009cd3 	.word	0x08009cd3
 8009370:	08009d0b 	.word	0x08009d0b
 8009374:	08009d2f 	.word	0x08009d2f

08009378 <_cleanup_r>:
 8009378:	4901      	ldr	r1, [pc, #4]	; (8009380 <_cleanup_r+0x8>)
 800937a:	f000 b885 	b.w	8009488 <_fwalk_reent>
 800937e:	bf00      	nop
 8009380:	080092dd 	.word	0x080092dd

08009384 <__sfmoreglue>:
 8009384:	b570      	push	{r4, r5, r6, lr}
 8009386:	1e4a      	subs	r2, r1, #1
 8009388:	2568      	movs	r5, #104	; 0x68
 800938a:	4355      	muls	r5, r2
 800938c:	460e      	mov	r6, r1
 800938e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009392:	f000 f949 	bl	8009628 <_malloc_r>
 8009396:	4604      	mov	r4, r0
 8009398:	b140      	cbz	r0, 80093ac <__sfmoreglue+0x28>
 800939a:	2100      	movs	r1, #0
 800939c:	e9c0 1600 	strd	r1, r6, [r0]
 80093a0:	300c      	adds	r0, #12
 80093a2:	60a0      	str	r0, [r4, #8]
 80093a4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80093a8:	f7ff fdb2 	bl	8008f10 <memset>
 80093ac:	4620      	mov	r0, r4
 80093ae:	bd70      	pop	{r4, r5, r6, pc}

080093b0 <__sinit>:
 80093b0:	6983      	ldr	r3, [r0, #24]
 80093b2:	b510      	push	{r4, lr}
 80093b4:	4604      	mov	r4, r0
 80093b6:	bb33      	cbnz	r3, 8009406 <__sinit+0x56>
 80093b8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80093bc:	6503      	str	r3, [r0, #80]	; 0x50
 80093be:	4b12      	ldr	r3, [pc, #72]	; (8009408 <__sinit+0x58>)
 80093c0:	4a12      	ldr	r2, [pc, #72]	; (800940c <__sinit+0x5c>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	6282      	str	r2, [r0, #40]	; 0x28
 80093c6:	4298      	cmp	r0, r3
 80093c8:	bf04      	itt	eq
 80093ca:	2301      	moveq	r3, #1
 80093cc:	6183      	streq	r3, [r0, #24]
 80093ce:	f000 f81f 	bl	8009410 <__sfp>
 80093d2:	6060      	str	r0, [r4, #4]
 80093d4:	4620      	mov	r0, r4
 80093d6:	f000 f81b 	bl	8009410 <__sfp>
 80093da:	60a0      	str	r0, [r4, #8]
 80093dc:	4620      	mov	r0, r4
 80093de:	f000 f817 	bl	8009410 <__sfp>
 80093e2:	2200      	movs	r2, #0
 80093e4:	60e0      	str	r0, [r4, #12]
 80093e6:	2104      	movs	r1, #4
 80093e8:	6860      	ldr	r0, [r4, #4]
 80093ea:	f7ff ffa1 	bl	8009330 <std>
 80093ee:	2201      	movs	r2, #1
 80093f0:	2109      	movs	r1, #9
 80093f2:	68a0      	ldr	r0, [r4, #8]
 80093f4:	f7ff ff9c 	bl	8009330 <std>
 80093f8:	2202      	movs	r2, #2
 80093fa:	2112      	movs	r1, #18
 80093fc:	68e0      	ldr	r0, [r4, #12]
 80093fe:	f7ff ff97 	bl	8009330 <std>
 8009402:	2301      	movs	r3, #1
 8009404:	61a3      	str	r3, [r4, #24]
 8009406:	bd10      	pop	{r4, pc}
 8009408:	0800a308 	.word	0x0800a308
 800940c:	08009379 	.word	0x08009379

08009410 <__sfp>:
 8009410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009412:	4b1b      	ldr	r3, [pc, #108]	; (8009480 <__sfp+0x70>)
 8009414:	681e      	ldr	r6, [r3, #0]
 8009416:	69b3      	ldr	r3, [r6, #24]
 8009418:	4607      	mov	r7, r0
 800941a:	b913      	cbnz	r3, 8009422 <__sfp+0x12>
 800941c:	4630      	mov	r0, r6
 800941e:	f7ff ffc7 	bl	80093b0 <__sinit>
 8009422:	3648      	adds	r6, #72	; 0x48
 8009424:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009428:	3b01      	subs	r3, #1
 800942a:	d503      	bpl.n	8009434 <__sfp+0x24>
 800942c:	6833      	ldr	r3, [r6, #0]
 800942e:	b133      	cbz	r3, 800943e <__sfp+0x2e>
 8009430:	6836      	ldr	r6, [r6, #0]
 8009432:	e7f7      	b.n	8009424 <__sfp+0x14>
 8009434:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009438:	b16d      	cbz	r5, 8009456 <__sfp+0x46>
 800943a:	3468      	adds	r4, #104	; 0x68
 800943c:	e7f4      	b.n	8009428 <__sfp+0x18>
 800943e:	2104      	movs	r1, #4
 8009440:	4638      	mov	r0, r7
 8009442:	f7ff ff9f 	bl	8009384 <__sfmoreglue>
 8009446:	6030      	str	r0, [r6, #0]
 8009448:	2800      	cmp	r0, #0
 800944a:	d1f1      	bne.n	8009430 <__sfp+0x20>
 800944c:	230c      	movs	r3, #12
 800944e:	603b      	str	r3, [r7, #0]
 8009450:	4604      	mov	r4, r0
 8009452:	4620      	mov	r0, r4
 8009454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009456:	4b0b      	ldr	r3, [pc, #44]	; (8009484 <__sfp+0x74>)
 8009458:	6665      	str	r5, [r4, #100]	; 0x64
 800945a:	e9c4 5500 	strd	r5, r5, [r4]
 800945e:	60a5      	str	r5, [r4, #8]
 8009460:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8009464:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8009468:	2208      	movs	r2, #8
 800946a:	4629      	mov	r1, r5
 800946c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009470:	f7ff fd4e 	bl	8008f10 <memset>
 8009474:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009478:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800947c:	e7e9      	b.n	8009452 <__sfp+0x42>
 800947e:	bf00      	nop
 8009480:	0800a308 	.word	0x0800a308
 8009484:	ffff0001 	.word	0xffff0001

08009488 <_fwalk_reent>:
 8009488:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800948c:	4680      	mov	r8, r0
 800948e:	4689      	mov	r9, r1
 8009490:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009494:	2600      	movs	r6, #0
 8009496:	b914      	cbnz	r4, 800949e <_fwalk_reent+0x16>
 8009498:	4630      	mov	r0, r6
 800949a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800949e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80094a2:	3f01      	subs	r7, #1
 80094a4:	d501      	bpl.n	80094aa <_fwalk_reent+0x22>
 80094a6:	6824      	ldr	r4, [r4, #0]
 80094a8:	e7f5      	b.n	8009496 <_fwalk_reent+0xe>
 80094aa:	89ab      	ldrh	r3, [r5, #12]
 80094ac:	2b01      	cmp	r3, #1
 80094ae:	d907      	bls.n	80094c0 <_fwalk_reent+0x38>
 80094b0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094b4:	3301      	adds	r3, #1
 80094b6:	d003      	beq.n	80094c0 <_fwalk_reent+0x38>
 80094b8:	4629      	mov	r1, r5
 80094ba:	4640      	mov	r0, r8
 80094bc:	47c8      	blx	r9
 80094be:	4306      	orrs	r6, r0
 80094c0:	3568      	adds	r5, #104	; 0x68
 80094c2:	e7ee      	b.n	80094a2 <_fwalk_reent+0x1a>

080094c4 <__swhatbuf_r>:
 80094c4:	b570      	push	{r4, r5, r6, lr}
 80094c6:	460e      	mov	r6, r1
 80094c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094cc:	2900      	cmp	r1, #0
 80094ce:	b096      	sub	sp, #88	; 0x58
 80094d0:	4614      	mov	r4, r2
 80094d2:	461d      	mov	r5, r3
 80094d4:	da07      	bge.n	80094e6 <__swhatbuf_r+0x22>
 80094d6:	2300      	movs	r3, #0
 80094d8:	602b      	str	r3, [r5, #0]
 80094da:	89b3      	ldrh	r3, [r6, #12]
 80094dc:	061a      	lsls	r2, r3, #24
 80094de:	d410      	bmi.n	8009502 <__swhatbuf_r+0x3e>
 80094e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80094e4:	e00e      	b.n	8009504 <__swhatbuf_r+0x40>
 80094e6:	466a      	mov	r2, sp
 80094e8:	f000 fc48 	bl	8009d7c <_fstat_r>
 80094ec:	2800      	cmp	r0, #0
 80094ee:	dbf2      	blt.n	80094d6 <__swhatbuf_r+0x12>
 80094f0:	9a01      	ldr	r2, [sp, #4]
 80094f2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80094f6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80094fa:	425a      	negs	r2, r3
 80094fc:	415a      	adcs	r2, r3
 80094fe:	602a      	str	r2, [r5, #0]
 8009500:	e7ee      	b.n	80094e0 <__swhatbuf_r+0x1c>
 8009502:	2340      	movs	r3, #64	; 0x40
 8009504:	2000      	movs	r0, #0
 8009506:	6023      	str	r3, [r4, #0]
 8009508:	b016      	add	sp, #88	; 0x58
 800950a:	bd70      	pop	{r4, r5, r6, pc}

0800950c <__smakebuf_r>:
 800950c:	898b      	ldrh	r3, [r1, #12]
 800950e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009510:	079d      	lsls	r5, r3, #30
 8009512:	4606      	mov	r6, r0
 8009514:	460c      	mov	r4, r1
 8009516:	d507      	bpl.n	8009528 <__smakebuf_r+0x1c>
 8009518:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800951c:	6023      	str	r3, [r4, #0]
 800951e:	6123      	str	r3, [r4, #16]
 8009520:	2301      	movs	r3, #1
 8009522:	6163      	str	r3, [r4, #20]
 8009524:	b002      	add	sp, #8
 8009526:	bd70      	pop	{r4, r5, r6, pc}
 8009528:	ab01      	add	r3, sp, #4
 800952a:	466a      	mov	r2, sp
 800952c:	f7ff ffca 	bl	80094c4 <__swhatbuf_r>
 8009530:	9900      	ldr	r1, [sp, #0]
 8009532:	4605      	mov	r5, r0
 8009534:	4630      	mov	r0, r6
 8009536:	f000 f877 	bl	8009628 <_malloc_r>
 800953a:	b948      	cbnz	r0, 8009550 <__smakebuf_r+0x44>
 800953c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009540:	059a      	lsls	r2, r3, #22
 8009542:	d4ef      	bmi.n	8009524 <__smakebuf_r+0x18>
 8009544:	f023 0303 	bic.w	r3, r3, #3
 8009548:	f043 0302 	orr.w	r3, r3, #2
 800954c:	81a3      	strh	r3, [r4, #12]
 800954e:	e7e3      	b.n	8009518 <__smakebuf_r+0xc>
 8009550:	4b0d      	ldr	r3, [pc, #52]	; (8009588 <__smakebuf_r+0x7c>)
 8009552:	62b3      	str	r3, [r6, #40]	; 0x28
 8009554:	89a3      	ldrh	r3, [r4, #12]
 8009556:	6020      	str	r0, [r4, #0]
 8009558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800955c:	81a3      	strh	r3, [r4, #12]
 800955e:	9b00      	ldr	r3, [sp, #0]
 8009560:	6163      	str	r3, [r4, #20]
 8009562:	9b01      	ldr	r3, [sp, #4]
 8009564:	6120      	str	r0, [r4, #16]
 8009566:	b15b      	cbz	r3, 8009580 <__smakebuf_r+0x74>
 8009568:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800956c:	4630      	mov	r0, r6
 800956e:	f000 fc17 	bl	8009da0 <_isatty_r>
 8009572:	b128      	cbz	r0, 8009580 <__smakebuf_r+0x74>
 8009574:	89a3      	ldrh	r3, [r4, #12]
 8009576:	f023 0303 	bic.w	r3, r3, #3
 800957a:	f043 0301 	orr.w	r3, r3, #1
 800957e:	81a3      	strh	r3, [r4, #12]
 8009580:	89a3      	ldrh	r3, [r4, #12]
 8009582:	431d      	orrs	r5, r3
 8009584:	81a5      	strh	r5, [r4, #12]
 8009586:	e7cd      	b.n	8009524 <__smakebuf_r+0x18>
 8009588:	08009379 	.word	0x08009379

0800958c <_free_r>:
 800958c:	b538      	push	{r3, r4, r5, lr}
 800958e:	4605      	mov	r5, r0
 8009590:	2900      	cmp	r1, #0
 8009592:	d045      	beq.n	8009620 <_free_r+0x94>
 8009594:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009598:	1f0c      	subs	r4, r1, #4
 800959a:	2b00      	cmp	r3, #0
 800959c:	bfb8      	it	lt
 800959e:	18e4      	addlt	r4, r4, r3
 80095a0:	f000 fc44 	bl	8009e2c <__malloc_lock>
 80095a4:	4a1f      	ldr	r2, [pc, #124]	; (8009624 <_free_r+0x98>)
 80095a6:	6813      	ldr	r3, [r2, #0]
 80095a8:	4610      	mov	r0, r2
 80095aa:	b933      	cbnz	r3, 80095ba <_free_r+0x2e>
 80095ac:	6063      	str	r3, [r4, #4]
 80095ae:	6014      	str	r4, [r2, #0]
 80095b0:	4628      	mov	r0, r5
 80095b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095b6:	f000 bc3a 	b.w	8009e2e <__malloc_unlock>
 80095ba:	42a3      	cmp	r3, r4
 80095bc:	d90c      	bls.n	80095d8 <_free_r+0x4c>
 80095be:	6821      	ldr	r1, [r4, #0]
 80095c0:	1862      	adds	r2, r4, r1
 80095c2:	4293      	cmp	r3, r2
 80095c4:	bf04      	itt	eq
 80095c6:	681a      	ldreq	r2, [r3, #0]
 80095c8:	685b      	ldreq	r3, [r3, #4]
 80095ca:	6063      	str	r3, [r4, #4]
 80095cc:	bf04      	itt	eq
 80095ce:	1852      	addeq	r2, r2, r1
 80095d0:	6022      	streq	r2, [r4, #0]
 80095d2:	6004      	str	r4, [r0, #0]
 80095d4:	e7ec      	b.n	80095b0 <_free_r+0x24>
 80095d6:	4613      	mov	r3, r2
 80095d8:	685a      	ldr	r2, [r3, #4]
 80095da:	b10a      	cbz	r2, 80095e0 <_free_r+0x54>
 80095dc:	42a2      	cmp	r2, r4
 80095de:	d9fa      	bls.n	80095d6 <_free_r+0x4a>
 80095e0:	6819      	ldr	r1, [r3, #0]
 80095e2:	1858      	adds	r0, r3, r1
 80095e4:	42a0      	cmp	r0, r4
 80095e6:	d10b      	bne.n	8009600 <_free_r+0x74>
 80095e8:	6820      	ldr	r0, [r4, #0]
 80095ea:	4401      	add	r1, r0
 80095ec:	1858      	adds	r0, r3, r1
 80095ee:	4282      	cmp	r2, r0
 80095f0:	6019      	str	r1, [r3, #0]
 80095f2:	d1dd      	bne.n	80095b0 <_free_r+0x24>
 80095f4:	6810      	ldr	r0, [r2, #0]
 80095f6:	6852      	ldr	r2, [r2, #4]
 80095f8:	605a      	str	r2, [r3, #4]
 80095fa:	4401      	add	r1, r0
 80095fc:	6019      	str	r1, [r3, #0]
 80095fe:	e7d7      	b.n	80095b0 <_free_r+0x24>
 8009600:	d902      	bls.n	8009608 <_free_r+0x7c>
 8009602:	230c      	movs	r3, #12
 8009604:	602b      	str	r3, [r5, #0]
 8009606:	e7d3      	b.n	80095b0 <_free_r+0x24>
 8009608:	6820      	ldr	r0, [r4, #0]
 800960a:	1821      	adds	r1, r4, r0
 800960c:	428a      	cmp	r2, r1
 800960e:	bf04      	itt	eq
 8009610:	6811      	ldreq	r1, [r2, #0]
 8009612:	6852      	ldreq	r2, [r2, #4]
 8009614:	6062      	str	r2, [r4, #4]
 8009616:	bf04      	itt	eq
 8009618:	1809      	addeq	r1, r1, r0
 800961a:	6021      	streq	r1, [r4, #0]
 800961c:	605c      	str	r4, [r3, #4]
 800961e:	e7c7      	b.n	80095b0 <_free_r+0x24>
 8009620:	bd38      	pop	{r3, r4, r5, pc}
 8009622:	bf00      	nop
 8009624:	20000c00 	.word	0x20000c00

08009628 <_malloc_r>:
 8009628:	b570      	push	{r4, r5, r6, lr}
 800962a:	1ccd      	adds	r5, r1, #3
 800962c:	f025 0503 	bic.w	r5, r5, #3
 8009630:	3508      	adds	r5, #8
 8009632:	2d0c      	cmp	r5, #12
 8009634:	bf38      	it	cc
 8009636:	250c      	movcc	r5, #12
 8009638:	2d00      	cmp	r5, #0
 800963a:	4606      	mov	r6, r0
 800963c:	db01      	blt.n	8009642 <_malloc_r+0x1a>
 800963e:	42a9      	cmp	r1, r5
 8009640:	d903      	bls.n	800964a <_malloc_r+0x22>
 8009642:	230c      	movs	r3, #12
 8009644:	6033      	str	r3, [r6, #0]
 8009646:	2000      	movs	r0, #0
 8009648:	bd70      	pop	{r4, r5, r6, pc}
 800964a:	f000 fbef 	bl	8009e2c <__malloc_lock>
 800964e:	4a21      	ldr	r2, [pc, #132]	; (80096d4 <_malloc_r+0xac>)
 8009650:	6814      	ldr	r4, [r2, #0]
 8009652:	4621      	mov	r1, r4
 8009654:	b991      	cbnz	r1, 800967c <_malloc_r+0x54>
 8009656:	4c20      	ldr	r4, [pc, #128]	; (80096d8 <_malloc_r+0xb0>)
 8009658:	6823      	ldr	r3, [r4, #0]
 800965a:	b91b      	cbnz	r3, 8009664 <_malloc_r+0x3c>
 800965c:	4630      	mov	r0, r6
 800965e:	f000 fb17 	bl	8009c90 <_sbrk_r>
 8009662:	6020      	str	r0, [r4, #0]
 8009664:	4629      	mov	r1, r5
 8009666:	4630      	mov	r0, r6
 8009668:	f000 fb12 	bl	8009c90 <_sbrk_r>
 800966c:	1c43      	adds	r3, r0, #1
 800966e:	d124      	bne.n	80096ba <_malloc_r+0x92>
 8009670:	230c      	movs	r3, #12
 8009672:	6033      	str	r3, [r6, #0]
 8009674:	4630      	mov	r0, r6
 8009676:	f000 fbda 	bl	8009e2e <__malloc_unlock>
 800967a:	e7e4      	b.n	8009646 <_malloc_r+0x1e>
 800967c:	680b      	ldr	r3, [r1, #0]
 800967e:	1b5b      	subs	r3, r3, r5
 8009680:	d418      	bmi.n	80096b4 <_malloc_r+0x8c>
 8009682:	2b0b      	cmp	r3, #11
 8009684:	d90f      	bls.n	80096a6 <_malloc_r+0x7e>
 8009686:	600b      	str	r3, [r1, #0]
 8009688:	50cd      	str	r5, [r1, r3]
 800968a:	18cc      	adds	r4, r1, r3
 800968c:	4630      	mov	r0, r6
 800968e:	f000 fbce 	bl	8009e2e <__malloc_unlock>
 8009692:	f104 000b 	add.w	r0, r4, #11
 8009696:	1d23      	adds	r3, r4, #4
 8009698:	f020 0007 	bic.w	r0, r0, #7
 800969c:	1ac3      	subs	r3, r0, r3
 800969e:	d0d3      	beq.n	8009648 <_malloc_r+0x20>
 80096a0:	425a      	negs	r2, r3
 80096a2:	50e2      	str	r2, [r4, r3]
 80096a4:	e7d0      	b.n	8009648 <_malloc_r+0x20>
 80096a6:	428c      	cmp	r4, r1
 80096a8:	684b      	ldr	r3, [r1, #4]
 80096aa:	bf16      	itet	ne
 80096ac:	6063      	strne	r3, [r4, #4]
 80096ae:	6013      	streq	r3, [r2, #0]
 80096b0:	460c      	movne	r4, r1
 80096b2:	e7eb      	b.n	800968c <_malloc_r+0x64>
 80096b4:	460c      	mov	r4, r1
 80096b6:	6849      	ldr	r1, [r1, #4]
 80096b8:	e7cc      	b.n	8009654 <_malloc_r+0x2c>
 80096ba:	1cc4      	adds	r4, r0, #3
 80096bc:	f024 0403 	bic.w	r4, r4, #3
 80096c0:	42a0      	cmp	r0, r4
 80096c2:	d005      	beq.n	80096d0 <_malloc_r+0xa8>
 80096c4:	1a21      	subs	r1, r4, r0
 80096c6:	4630      	mov	r0, r6
 80096c8:	f000 fae2 	bl	8009c90 <_sbrk_r>
 80096cc:	3001      	adds	r0, #1
 80096ce:	d0cf      	beq.n	8009670 <_malloc_r+0x48>
 80096d0:	6025      	str	r5, [r4, #0]
 80096d2:	e7db      	b.n	800968c <_malloc_r+0x64>
 80096d4:	20000c00 	.word	0x20000c00
 80096d8:	20000c04 	.word	0x20000c04

080096dc <__ssputs_r>:
 80096dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096e0:	688e      	ldr	r6, [r1, #8]
 80096e2:	429e      	cmp	r6, r3
 80096e4:	4682      	mov	sl, r0
 80096e6:	460c      	mov	r4, r1
 80096e8:	4690      	mov	r8, r2
 80096ea:	4699      	mov	r9, r3
 80096ec:	d837      	bhi.n	800975e <__ssputs_r+0x82>
 80096ee:	898a      	ldrh	r2, [r1, #12]
 80096f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80096f4:	d031      	beq.n	800975a <__ssputs_r+0x7e>
 80096f6:	6825      	ldr	r5, [r4, #0]
 80096f8:	6909      	ldr	r1, [r1, #16]
 80096fa:	1a6f      	subs	r7, r5, r1
 80096fc:	6965      	ldr	r5, [r4, #20]
 80096fe:	2302      	movs	r3, #2
 8009700:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009704:	fb95 f5f3 	sdiv	r5, r5, r3
 8009708:	f109 0301 	add.w	r3, r9, #1
 800970c:	443b      	add	r3, r7
 800970e:	429d      	cmp	r5, r3
 8009710:	bf38      	it	cc
 8009712:	461d      	movcc	r5, r3
 8009714:	0553      	lsls	r3, r2, #21
 8009716:	d530      	bpl.n	800977a <__ssputs_r+0x9e>
 8009718:	4629      	mov	r1, r5
 800971a:	f7ff ff85 	bl	8009628 <_malloc_r>
 800971e:	4606      	mov	r6, r0
 8009720:	b950      	cbnz	r0, 8009738 <__ssputs_r+0x5c>
 8009722:	230c      	movs	r3, #12
 8009724:	f8ca 3000 	str.w	r3, [sl]
 8009728:	89a3      	ldrh	r3, [r4, #12]
 800972a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800972e:	81a3      	strh	r3, [r4, #12]
 8009730:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009734:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009738:	463a      	mov	r2, r7
 800973a:	6921      	ldr	r1, [r4, #16]
 800973c:	f000 fb52 	bl	8009de4 <memcpy>
 8009740:	89a3      	ldrh	r3, [r4, #12]
 8009742:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009746:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800974a:	81a3      	strh	r3, [r4, #12]
 800974c:	6126      	str	r6, [r4, #16]
 800974e:	6165      	str	r5, [r4, #20]
 8009750:	443e      	add	r6, r7
 8009752:	1bed      	subs	r5, r5, r7
 8009754:	6026      	str	r6, [r4, #0]
 8009756:	60a5      	str	r5, [r4, #8]
 8009758:	464e      	mov	r6, r9
 800975a:	454e      	cmp	r6, r9
 800975c:	d900      	bls.n	8009760 <__ssputs_r+0x84>
 800975e:	464e      	mov	r6, r9
 8009760:	4632      	mov	r2, r6
 8009762:	4641      	mov	r1, r8
 8009764:	6820      	ldr	r0, [r4, #0]
 8009766:	f000 fb48 	bl	8009dfa <memmove>
 800976a:	68a3      	ldr	r3, [r4, #8]
 800976c:	1b9b      	subs	r3, r3, r6
 800976e:	60a3      	str	r3, [r4, #8]
 8009770:	6823      	ldr	r3, [r4, #0]
 8009772:	441e      	add	r6, r3
 8009774:	6026      	str	r6, [r4, #0]
 8009776:	2000      	movs	r0, #0
 8009778:	e7dc      	b.n	8009734 <__ssputs_r+0x58>
 800977a:	462a      	mov	r2, r5
 800977c:	f000 fb58 	bl	8009e30 <_realloc_r>
 8009780:	4606      	mov	r6, r0
 8009782:	2800      	cmp	r0, #0
 8009784:	d1e2      	bne.n	800974c <__ssputs_r+0x70>
 8009786:	6921      	ldr	r1, [r4, #16]
 8009788:	4650      	mov	r0, sl
 800978a:	f7ff feff 	bl	800958c <_free_r>
 800978e:	e7c8      	b.n	8009722 <__ssputs_r+0x46>

08009790 <_svfiprintf_r>:
 8009790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009794:	461d      	mov	r5, r3
 8009796:	898b      	ldrh	r3, [r1, #12]
 8009798:	061f      	lsls	r7, r3, #24
 800979a:	b09d      	sub	sp, #116	; 0x74
 800979c:	4680      	mov	r8, r0
 800979e:	460c      	mov	r4, r1
 80097a0:	4616      	mov	r6, r2
 80097a2:	d50f      	bpl.n	80097c4 <_svfiprintf_r+0x34>
 80097a4:	690b      	ldr	r3, [r1, #16]
 80097a6:	b96b      	cbnz	r3, 80097c4 <_svfiprintf_r+0x34>
 80097a8:	2140      	movs	r1, #64	; 0x40
 80097aa:	f7ff ff3d 	bl	8009628 <_malloc_r>
 80097ae:	6020      	str	r0, [r4, #0]
 80097b0:	6120      	str	r0, [r4, #16]
 80097b2:	b928      	cbnz	r0, 80097c0 <_svfiprintf_r+0x30>
 80097b4:	230c      	movs	r3, #12
 80097b6:	f8c8 3000 	str.w	r3, [r8]
 80097ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097be:	e0c8      	b.n	8009952 <_svfiprintf_r+0x1c2>
 80097c0:	2340      	movs	r3, #64	; 0x40
 80097c2:	6163      	str	r3, [r4, #20]
 80097c4:	2300      	movs	r3, #0
 80097c6:	9309      	str	r3, [sp, #36]	; 0x24
 80097c8:	2320      	movs	r3, #32
 80097ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80097ce:	2330      	movs	r3, #48	; 0x30
 80097d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80097d4:	9503      	str	r5, [sp, #12]
 80097d6:	f04f 0b01 	mov.w	fp, #1
 80097da:	4637      	mov	r7, r6
 80097dc:	463d      	mov	r5, r7
 80097de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80097e2:	b10b      	cbz	r3, 80097e8 <_svfiprintf_r+0x58>
 80097e4:	2b25      	cmp	r3, #37	; 0x25
 80097e6:	d13e      	bne.n	8009866 <_svfiprintf_r+0xd6>
 80097e8:	ebb7 0a06 	subs.w	sl, r7, r6
 80097ec:	d00b      	beq.n	8009806 <_svfiprintf_r+0x76>
 80097ee:	4653      	mov	r3, sl
 80097f0:	4632      	mov	r2, r6
 80097f2:	4621      	mov	r1, r4
 80097f4:	4640      	mov	r0, r8
 80097f6:	f7ff ff71 	bl	80096dc <__ssputs_r>
 80097fa:	3001      	adds	r0, #1
 80097fc:	f000 80a4 	beq.w	8009948 <_svfiprintf_r+0x1b8>
 8009800:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009802:	4453      	add	r3, sl
 8009804:	9309      	str	r3, [sp, #36]	; 0x24
 8009806:	783b      	ldrb	r3, [r7, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	f000 809d 	beq.w	8009948 <_svfiprintf_r+0x1b8>
 800980e:	2300      	movs	r3, #0
 8009810:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009814:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009818:	9304      	str	r3, [sp, #16]
 800981a:	9307      	str	r3, [sp, #28]
 800981c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009820:	931a      	str	r3, [sp, #104]	; 0x68
 8009822:	462f      	mov	r7, r5
 8009824:	2205      	movs	r2, #5
 8009826:	f817 1b01 	ldrb.w	r1, [r7], #1
 800982a:	4850      	ldr	r0, [pc, #320]	; (800996c <_svfiprintf_r+0x1dc>)
 800982c:	f7f6 fcf8 	bl	8000220 <memchr>
 8009830:	9b04      	ldr	r3, [sp, #16]
 8009832:	b9d0      	cbnz	r0, 800986a <_svfiprintf_r+0xda>
 8009834:	06d9      	lsls	r1, r3, #27
 8009836:	bf44      	itt	mi
 8009838:	2220      	movmi	r2, #32
 800983a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800983e:	071a      	lsls	r2, r3, #28
 8009840:	bf44      	itt	mi
 8009842:	222b      	movmi	r2, #43	; 0x2b
 8009844:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009848:	782a      	ldrb	r2, [r5, #0]
 800984a:	2a2a      	cmp	r2, #42	; 0x2a
 800984c:	d015      	beq.n	800987a <_svfiprintf_r+0xea>
 800984e:	9a07      	ldr	r2, [sp, #28]
 8009850:	462f      	mov	r7, r5
 8009852:	2000      	movs	r0, #0
 8009854:	250a      	movs	r5, #10
 8009856:	4639      	mov	r1, r7
 8009858:	f811 3b01 	ldrb.w	r3, [r1], #1
 800985c:	3b30      	subs	r3, #48	; 0x30
 800985e:	2b09      	cmp	r3, #9
 8009860:	d94d      	bls.n	80098fe <_svfiprintf_r+0x16e>
 8009862:	b1b8      	cbz	r0, 8009894 <_svfiprintf_r+0x104>
 8009864:	e00f      	b.n	8009886 <_svfiprintf_r+0xf6>
 8009866:	462f      	mov	r7, r5
 8009868:	e7b8      	b.n	80097dc <_svfiprintf_r+0x4c>
 800986a:	4a40      	ldr	r2, [pc, #256]	; (800996c <_svfiprintf_r+0x1dc>)
 800986c:	1a80      	subs	r0, r0, r2
 800986e:	fa0b f000 	lsl.w	r0, fp, r0
 8009872:	4318      	orrs	r0, r3
 8009874:	9004      	str	r0, [sp, #16]
 8009876:	463d      	mov	r5, r7
 8009878:	e7d3      	b.n	8009822 <_svfiprintf_r+0x92>
 800987a:	9a03      	ldr	r2, [sp, #12]
 800987c:	1d11      	adds	r1, r2, #4
 800987e:	6812      	ldr	r2, [r2, #0]
 8009880:	9103      	str	r1, [sp, #12]
 8009882:	2a00      	cmp	r2, #0
 8009884:	db01      	blt.n	800988a <_svfiprintf_r+0xfa>
 8009886:	9207      	str	r2, [sp, #28]
 8009888:	e004      	b.n	8009894 <_svfiprintf_r+0x104>
 800988a:	4252      	negs	r2, r2
 800988c:	f043 0302 	orr.w	r3, r3, #2
 8009890:	9207      	str	r2, [sp, #28]
 8009892:	9304      	str	r3, [sp, #16]
 8009894:	783b      	ldrb	r3, [r7, #0]
 8009896:	2b2e      	cmp	r3, #46	; 0x2e
 8009898:	d10c      	bne.n	80098b4 <_svfiprintf_r+0x124>
 800989a:	787b      	ldrb	r3, [r7, #1]
 800989c:	2b2a      	cmp	r3, #42	; 0x2a
 800989e:	d133      	bne.n	8009908 <_svfiprintf_r+0x178>
 80098a0:	9b03      	ldr	r3, [sp, #12]
 80098a2:	1d1a      	adds	r2, r3, #4
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	9203      	str	r2, [sp, #12]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	bfb8      	it	lt
 80098ac:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80098b0:	3702      	adds	r7, #2
 80098b2:	9305      	str	r3, [sp, #20]
 80098b4:	4d2e      	ldr	r5, [pc, #184]	; (8009970 <_svfiprintf_r+0x1e0>)
 80098b6:	7839      	ldrb	r1, [r7, #0]
 80098b8:	2203      	movs	r2, #3
 80098ba:	4628      	mov	r0, r5
 80098bc:	f7f6 fcb0 	bl	8000220 <memchr>
 80098c0:	b138      	cbz	r0, 80098d2 <_svfiprintf_r+0x142>
 80098c2:	2340      	movs	r3, #64	; 0x40
 80098c4:	1b40      	subs	r0, r0, r5
 80098c6:	fa03 f000 	lsl.w	r0, r3, r0
 80098ca:	9b04      	ldr	r3, [sp, #16]
 80098cc:	4303      	orrs	r3, r0
 80098ce:	3701      	adds	r7, #1
 80098d0:	9304      	str	r3, [sp, #16]
 80098d2:	7839      	ldrb	r1, [r7, #0]
 80098d4:	4827      	ldr	r0, [pc, #156]	; (8009974 <_svfiprintf_r+0x1e4>)
 80098d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80098da:	2206      	movs	r2, #6
 80098dc:	1c7e      	adds	r6, r7, #1
 80098de:	f7f6 fc9f 	bl	8000220 <memchr>
 80098e2:	2800      	cmp	r0, #0
 80098e4:	d038      	beq.n	8009958 <_svfiprintf_r+0x1c8>
 80098e6:	4b24      	ldr	r3, [pc, #144]	; (8009978 <_svfiprintf_r+0x1e8>)
 80098e8:	bb13      	cbnz	r3, 8009930 <_svfiprintf_r+0x1a0>
 80098ea:	9b03      	ldr	r3, [sp, #12]
 80098ec:	3307      	adds	r3, #7
 80098ee:	f023 0307 	bic.w	r3, r3, #7
 80098f2:	3308      	adds	r3, #8
 80098f4:	9303      	str	r3, [sp, #12]
 80098f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098f8:	444b      	add	r3, r9
 80098fa:	9309      	str	r3, [sp, #36]	; 0x24
 80098fc:	e76d      	b.n	80097da <_svfiprintf_r+0x4a>
 80098fe:	fb05 3202 	mla	r2, r5, r2, r3
 8009902:	2001      	movs	r0, #1
 8009904:	460f      	mov	r7, r1
 8009906:	e7a6      	b.n	8009856 <_svfiprintf_r+0xc6>
 8009908:	2300      	movs	r3, #0
 800990a:	3701      	adds	r7, #1
 800990c:	9305      	str	r3, [sp, #20]
 800990e:	4619      	mov	r1, r3
 8009910:	250a      	movs	r5, #10
 8009912:	4638      	mov	r0, r7
 8009914:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009918:	3a30      	subs	r2, #48	; 0x30
 800991a:	2a09      	cmp	r2, #9
 800991c:	d903      	bls.n	8009926 <_svfiprintf_r+0x196>
 800991e:	2b00      	cmp	r3, #0
 8009920:	d0c8      	beq.n	80098b4 <_svfiprintf_r+0x124>
 8009922:	9105      	str	r1, [sp, #20]
 8009924:	e7c6      	b.n	80098b4 <_svfiprintf_r+0x124>
 8009926:	fb05 2101 	mla	r1, r5, r1, r2
 800992a:	2301      	movs	r3, #1
 800992c:	4607      	mov	r7, r0
 800992e:	e7f0      	b.n	8009912 <_svfiprintf_r+0x182>
 8009930:	ab03      	add	r3, sp, #12
 8009932:	9300      	str	r3, [sp, #0]
 8009934:	4622      	mov	r2, r4
 8009936:	4b11      	ldr	r3, [pc, #68]	; (800997c <_svfiprintf_r+0x1ec>)
 8009938:	a904      	add	r1, sp, #16
 800993a:	4640      	mov	r0, r8
 800993c:	f3af 8000 	nop.w
 8009940:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8009944:	4681      	mov	r9, r0
 8009946:	d1d6      	bne.n	80098f6 <_svfiprintf_r+0x166>
 8009948:	89a3      	ldrh	r3, [r4, #12]
 800994a:	065b      	lsls	r3, r3, #25
 800994c:	f53f af35 	bmi.w	80097ba <_svfiprintf_r+0x2a>
 8009950:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009952:	b01d      	add	sp, #116	; 0x74
 8009954:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009958:	ab03      	add	r3, sp, #12
 800995a:	9300      	str	r3, [sp, #0]
 800995c:	4622      	mov	r2, r4
 800995e:	4b07      	ldr	r3, [pc, #28]	; (800997c <_svfiprintf_r+0x1ec>)
 8009960:	a904      	add	r1, sp, #16
 8009962:	4640      	mov	r0, r8
 8009964:	f000 f882 	bl	8009a6c <_printf_i>
 8009968:	e7ea      	b.n	8009940 <_svfiprintf_r+0x1b0>
 800996a:	bf00      	nop
 800996c:	0800a36c 	.word	0x0800a36c
 8009970:	0800a372 	.word	0x0800a372
 8009974:	0800a376 	.word	0x0800a376
 8009978:	00000000 	.word	0x00000000
 800997c:	080096dd 	.word	0x080096dd

08009980 <_printf_common>:
 8009980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009984:	4691      	mov	r9, r2
 8009986:	461f      	mov	r7, r3
 8009988:	688a      	ldr	r2, [r1, #8]
 800998a:	690b      	ldr	r3, [r1, #16]
 800998c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009990:	4293      	cmp	r3, r2
 8009992:	bfb8      	it	lt
 8009994:	4613      	movlt	r3, r2
 8009996:	f8c9 3000 	str.w	r3, [r9]
 800999a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800999e:	4606      	mov	r6, r0
 80099a0:	460c      	mov	r4, r1
 80099a2:	b112      	cbz	r2, 80099aa <_printf_common+0x2a>
 80099a4:	3301      	adds	r3, #1
 80099a6:	f8c9 3000 	str.w	r3, [r9]
 80099aa:	6823      	ldr	r3, [r4, #0]
 80099ac:	0699      	lsls	r1, r3, #26
 80099ae:	bf42      	ittt	mi
 80099b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80099b4:	3302      	addmi	r3, #2
 80099b6:	f8c9 3000 	strmi.w	r3, [r9]
 80099ba:	6825      	ldr	r5, [r4, #0]
 80099bc:	f015 0506 	ands.w	r5, r5, #6
 80099c0:	d107      	bne.n	80099d2 <_printf_common+0x52>
 80099c2:	f104 0a19 	add.w	sl, r4, #25
 80099c6:	68e3      	ldr	r3, [r4, #12]
 80099c8:	f8d9 2000 	ldr.w	r2, [r9]
 80099cc:	1a9b      	subs	r3, r3, r2
 80099ce:	42ab      	cmp	r3, r5
 80099d0:	dc28      	bgt.n	8009a24 <_printf_common+0xa4>
 80099d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80099d6:	6822      	ldr	r2, [r4, #0]
 80099d8:	3300      	adds	r3, #0
 80099da:	bf18      	it	ne
 80099dc:	2301      	movne	r3, #1
 80099de:	0692      	lsls	r2, r2, #26
 80099e0:	d42d      	bmi.n	8009a3e <_printf_common+0xbe>
 80099e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80099e6:	4639      	mov	r1, r7
 80099e8:	4630      	mov	r0, r6
 80099ea:	47c0      	blx	r8
 80099ec:	3001      	adds	r0, #1
 80099ee:	d020      	beq.n	8009a32 <_printf_common+0xb2>
 80099f0:	6823      	ldr	r3, [r4, #0]
 80099f2:	68e5      	ldr	r5, [r4, #12]
 80099f4:	f8d9 2000 	ldr.w	r2, [r9]
 80099f8:	f003 0306 	and.w	r3, r3, #6
 80099fc:	2b04      	cmp	r3, #4
 80099fe:	bf08      	it	eq
 8009a00:	1aad      	subeq	r5, r5, r2
 8009a02:	68a3      	ldr	r3, [r4, #8]
 8009a04:	6922      	ldr	r2, [r4, #16]
 8009a06:	bf0c      	ite	eq
 8009a08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009a0c:	2500      	movne	r5, #0
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	bfc4      	itt	gt
 8009a12:	1a9b      	subgt	r3, r3, r2
 8009a14:	18ed      	addgt	r5, r5, r3
 8009a16:	f04f 0900 	mov.w	r9, #0
 8009a1a:	341a      	adds	r4, #26
 8009a1c:	454d      	cmp	r5, r9
 8009a1e:	d11a      	bne.n	8009a56 <_printf_common+0xd6>
 8009a20:	2000      	movs	r0, #0
 8009a22:	e008      	b.n	8009a36 <_printf_common+0xb6>
 8009a24:	2301      	movs	r3, #1
 8009a26:	4652      	mov	r2, sl
 8009a28:	4639      	mov	r1, r7
 8009a2a:	4630      	mov	r0, r6
 8009a2c:	47c0      	blx	r8
 8009a2e:	3001      	adds	r0, #1
 8009a30:	d103      	bne.n	8009a3a <_printf_common+0xba>
 8009a32:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009a36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a3a:	3501      	adds	r5, #1
 8009a3c:	e7c3      	b.n	80099c6 <_printf_common+0x46>
 8009a3e:	18e1      	adds	r1, r4, r3
 8009a40:	1c5a      	adds	r2, r3, #1
 8009a42:	2030      	movs	r0, #48	; 0x30
 8009a44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009a48:	4422      	add	r2, r4
 8009a4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009a4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009a52:	3302      	adds	r3, #2
 8009a54:	e7c5      	b.n	80099e2 <_printf_common+0x62>
 8009a56:	2301      	movs	r3, #1
 8009a58:	4622      	mov	r2, r4
 8009a5a:	4639      	mov	r1, r7
 8009a5c:	4630      	mov	r0, r6
 8009a5e:	47c0      	blx	r8
 8009a60:	3001      	adds	r0, #1
 8009a62:	d0e6      	beq.n	8009a32 <_printf_common+0xb2>
 8009a64:	f109 0901 	add.w	r9, r9, #1
 8009a68:	e7d8      	b.n	8009a1c <_printf_common+0x9c>
	...

08009a6c <_printf_i>:
 8009a6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a70:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8009a74:	460c      	mov	r4, r1
 8009a76:	7e09      	ldrb	r1, [r1, #24]
 8009a78:	b085      	sub	sp, #20
 8009a7a:	296e      	cmp	r1, #110	; 0x6e
 8009a7c:	4617      	mov	r7, r2
 8009a7e:	4606      	mov	r6, r0
 8009a80:	4698      	mov	r8, r3
 8009a82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009a84:	f000 80b3 	beq.w	8009bee <_printf_i+0x182>
 8009a88:	d822      	bhi.n	8009ad0 <_printf_i+0x64>
 8009a8a:	2963      	cmp	r1, #99	; 0x63
 8009a8c:	d036      	beq.n	8009afc <_printf_i+0x90>
 8009a8e:	d80a      	bhi.n	8009aa6 <_printf_i+0x3a>
 8009a90:	2900      	cmp	r1, #0
 8009a92:	f000 80b9 	beq.w	8009c08 <_printf_i+0x19c>
 8009a96:	2958      	cmp	r1, #88	; 0x58
 8009a98:	f000 8083 	beq.w	8009ba2 <_printf_i+0x136>
 8009a9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009aa0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8009aa4:	e032      	b.n	8009b0c <_printf_i+0xa0>
 8009aa6:	2964      	cmp	r1, #100	; 0x64
 8009aa8:	d001      	beq.n	8009aae <_printf_i+0x42>
 8009aaa:	2969      	cmp	r1, #105	; 0x69
 8009aac:	d1f6      	bne.n	8009a9c <_printf_i+0x30>
 8009aae:	6820      	ldr	r0, [r4, #0]
 8009ab0:	6813      	ldr	r3, [r2, #0]
 8009ab2:	0605      	lsls	r5, r0, #24
 8009ab4:	f103 0104 	add.w	r1, r3, #4
 8009ab8:	d52a      	bpl.n	8009b10 <_printf_i+0xa4>
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	6011      	str	r1, [r2, #0]
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	da03      	bge.n	8009aca <_printf_i+0x5e>
 8009ac2:	222d      	movs	r2, #45	; 0x2d
 8009ac4:	425b      	negs	r3, r3
 8009ac6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8009aca:	486f      	ldr	r0, [pc, #444]	; (8009c88 <_printf_i+0x21c>)
 8009acc:	220a      	movs	r2, #10
 8009ace:	e039      	b.n	8009b44 <_printf_i+0xd8>
 8009ad0:	2973      	cmp	r1, #115	; 0x73
 8009ad2:	f000 809d 	beq.w	8009c10 <_printf_i+0x1a4>
 8009ad6:	d808      	bhi.n	8009aea <_printf_i+0x7e>
 8009ad8:	296f      	cmp	r1, #111	; 0x6f
 8009ada:	d020      	beq.n	8009b1e <_printf_i+0xb2>
 8009adc:	2970      	cmp	r1, #112	; 0x70
 8009ade:	d1dd      	bne.n	8009a9c <_printf_i+0x30>
 8009ae0:	6823      	ldr	r3, [r4, #0]
 8009ae2:	f043 0320 	orr.w	r3, r3, #32
 8009ae6:	6023      	str	r3, [r4, #0]
 8009ae8:	e003      	b.n	8009af2 <_printf_i+0x86>
 8009aea:	2975      	cmp	r1, #117	; 0x75
 8009aec:	d017      	beq.n	8009b1e <_printf_i+0xb2>
 8009aee:	2978      	cmp	r1, #120	; 0x78
 8009af0:	d1d4      	bne.n	8009a9c <_printf_i+0x30>
 8009af2:	2378      	movs	r3, #120	; 0x78
 8009af4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009af8:	4864      	ldr	r0, [pc, #400]	; (8009c8c <_printf_i+0x220>)
 8009afa:	e055      	b.n	8009ba8 <_printf_i+0x13c>
 8009afc:	6813      	ldr	r3, [r2, #0]
 8009afe:	1d19      	adds	r1, r3, #4
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	6011      	str	r1, [r2, #0]
 8009b04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009b08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009b0c:	2301      	movs	r3, #1
 8009b0e:	e08c      	b.n	8009c2a <_printf_i+0x1be>
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	6011      	str	r1, [r2, #0]
 8009b14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009b18:	bf18      	it	ne
 8009b1a:	b21b      	sxthne	r3, r3
 8009b1c:	e7cf      	b.n	8009abe <_printf_i+0x52>
 8009b1e:	6813      	ldr	r3, [r2, #0]
 8009b20:	6825      	ldr	r5, [r4, #0]
 8009b22:	1d18      	adds	r0, r3, #4
 8009b24:	6010      	str	r0, [r2, #0]
 8009b26:	0628      	lsls	r0, r5, #24
 8009b28:	d501      	bpl.n	8009b2e <_printf_i+0xc2>
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	e002      	b.n	8009b34 <_printf_i+0xc8>
 8009b2e:	0668      	lsls	r0, r5, #25
 8009b30:	d5fb      	bpl.n	8009b2a <_printf_i+0xbe>
 8009b32:	881b      	ldrh	r3, [r3, #0]
 8009b34:	4854      	ldr	r0, [pc, #336]	; (8009c88 <_printf_i+0x21c>)
 8009b36:	296f      	cmp	r1, #111	; 0x6f
 8009b38:	bf14      	ite	ne
 8009b3a:	220a      	movne	r2, #10
 8009b3c:	2208      	moveq	r2, #8
 8009b3e:	2100      	movs	r1, #0
 8009b40:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009b44:	6865      	ldr	r5, [r4, #4]
 8009b46:	60a5      	str	r5, [r4, #8]
 8009b48:	2d00      	cmp	r5, #0
 8009b4a:	f2c0 8095 	blt.w	8009c78 <_printf_i+0x20c>
 8009b4e:	6821      	ldr	r1, [r4, #0]
 8009b50:	f021 0104 	bic.w	r1, r1, #4
 8009b54:	6021      	str	r1, [r4, #0]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d13d      	bne.n	8009bd6 <_printf_i+0x16a>
 8009b5a:	2d00      	cmp	r5, #0
 8009b5c:	f040 808e 	bne.w	8009c7c <_printf_i+0x210>
 8009b60:	4665      	mov	r5, ip
 8009b62:	2a08      	cmp	r2, #8
 8009b64:	d10b      	bne.n	8009b7e <_printf_i+0x112>
 8009b66:	6823      	ldr	r3, [r4, #0]
 8009b68:	07db      	lsls	r3, r3, #31
 8009b6a:	d508      	bpl.n	8009b7e <_printf_i+0x112>
 8009b6c:	6923      	ldr	r3, [r4, #16]
 8009b6e:	6862      	ldr	r2, [r4, #4]
 8009b70:	429a      	cmp	r2, r3
 8009b72:	bfde      	ittt	le
 8009b74:	2330      	movle	r3, #48	; 0x30
 8009b76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b7a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009b7e:	ebac 0305 	sub.w	r3, ip, r5
 8009b82:	6123      	str	r3, [r4, #16]
 8009b84:	f8cd 8000 	str.w	r8, [sp]
 8009b88:	463b      	mov	r3, r7
 8009b8a:	aa03      	add	r2, sp, #12
 8009b8c:	4621      	mov	r1, r4
 8009b8e:	4630      	mov	r0, r6
 8009b90:	f7ff fef6 	bl	8009980 <_printf_common>
 8009b94:	3001      	adds	r0, #1
 8009b96:	d14d      	bne.n	8009c34 <_printf_i+0x1c8>
 8009b98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b9c:	b005      	add	sp, #20
 8009b9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009ba2:	4839      	ldr	r0, [pc, #228]	; (8009c88 <_printf_i+0x21c>)
 8009ba4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8009ba8:	6813      	ldr	r3, [r2, #0]
 8009baa:	6821      	ldr	r1, [r4, #0]
 8009bac:	1d1d      	adds	r5, r3, #4
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	6015      	str	r5, [r2, #0]
 8009bb2:	060a      	lsls	r2, r1, #24
 8009bb4:	d50b      	bpl.n	8009bce <_printf_i+0x162>
 8009bb6:	07ca      	lsls	r2, r1, #31
 8009bb8:	bf44      	itt	mi
 8009bba:	f041 0120 	orrmi.w	r1, r1, #32
 8009bbe:	6021      	strmi	r1, [r4, #0]
 8009bc0:	b91b      	cbnz	r3, 8009bca <_printf_i+0x15e>
 8009bc2:	6822      	ldr	r2, [r4, #0]
 8009bc4:	f022 0220 	bic.w	r2, r2, #32
 8009bc8:	6022      	str	r2, [r4, #0]
 8009bca:	2210      	movs	r2, #16
 8009bcc:	e7b7      	b.n	8009b3e <_printf_i+0xd2>
 8009bce:	064d      	lsls	r5, r1, #25
 8009bd0:	bf48      	it	mi
 8009bd2:	b29b      	uxthmi	r3, r3
 8009bd4:	e7ef      	b.n	8009bb6 <_printf_i+0x14a>
 8009bd6:	4665      	mov	r5, ip
 8009bd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8009bdc:	fb02 3311 	mls	r3, r2, r1, r3
 8009be0:	5cc3      	ldrb	r3, [r0, r3]
 8009be2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009be6:	460b      	mov	r3, r1
 8009be8:	2900      	cmp	r1, #0
 8009bea:	d1f5      	bne.n	8009bd8 <_printf_i+0x16c>
 8009bec:	e7b9      	b.n	8009b62 <_printf_i+0xf6>
 8009bee:	6813      	ldr	r3, [r2, #0]
 8009bf0:	6825      	ldr	r5, [r4, #0]
 8009bf2:	6961      	ldr	r1, [r4, #20]
 8009bf4:	1d18      	adds	r0, r3, #4
 8009bf6:	6010      	str	r0, [r2, #0]
 8009bf8:	0628      	lsls	r0, r5, #24
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	d501      	bpl.n	8009c02 <_printf_i+0x196>
 8009bfe:	6019      	str	r1, [r3, #0]
 8009c00:	e002      	b.n	8009c08 <_printf_i+0x19c>
 8009c02:	066a      	lsls	r2, r5, #25
 8009c04:	d5fb      	bpl.n	8009bfe <_printf_i+0x192>
 8009c06:	8019      	strh	r1, [r3, #0]
 8009c08:	2300      	movs	r3, #0
 8009c0a:	6123      	str	r3, [r4, #16]
 8009c0c:	4665      	mov	r5, ip
 8009c0e:	e7b9      	b.n	8009b84 <_printf_i+0x118>
 8009c10:	6813      	ldr	r3, [r2, #0]
 8009c12:	1d19      	adds	r1, r3, #4
 8009c14:	6011      	str	r1, [r2, #0]
 8009c16:	681d      	ldr	r5, [r3, #0]
 8009c18:	6862      	ldr	r2, [r4, #4]
 8009c1a:	2100      	movs	r1, #0
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	f7f6 faff 	bl	8000220 <memchr>
 8009c22:	b108      	cbz	r0, 8009c28 <_printf_i+0x1bc>
 8009c24:	1b40      	subs	r0, r0, r5
 8009c26:	6060      	str	r0, [r4, #4]
 8009c28:	6863      	ldr	r3, [r4, #4]
 8009c2a:	6123      	str	r3, [r4, #16]
 8009c2c:	2300      	movs	r3, #0
 8009c2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c32:	e7a7      	b.n	8009b84 <_printf_i+0x118>
 8009c34:	6923      	ldr	r3, [r4, #16]
 8009c36:	462a      	mov	r2, r5
 8009c38:	4639      	mov	r1, r7
 8009c3a:	4630      	mov	r0, r6
 8009c3c:	47c0      	blx	r8
 8009c3e:	3001      	adds	r0, #1
 8009c40:	d0aa      	beq.n	8009b98 <_printf_i+0x12c>
 8009c42:	6823      	ldr	r3, [r4, #0]
 8009c44:	079b      	lsls	r3, r3, #30
 8009c46:	d413      	bmi.n	8009c70 <_printf_i+0x204>
 8009c48:	68e0      	ldr	r0, [r4, #12]
 8009c4a:	9b03      	ldr	r3, [sp, #12]
 8009c4c:	4298      	cmp	r0, r3
 8009c4e:	bfb8      	it	lt
 8009c50:	4618      	movlt	r0, r3
 8009c52:	e7a3      	b.n	8009b9c <_printf_i+0x130>
 8009c54:	2301      	movs	r3, #1
 8009c56:	464a      	mov	r2, r9
 8009c58:	4639      	mov	r1, r7
 8009c5a:	4630      	mov	r0, r6
 8009c5c:	47c0      	blx	r8
 8009c5e:	3001      	adds	r0, #1
 8009c60:	d09a      	beq.n	8009b98 <_printf_i+0x12c>
 8009c62:	3501      	adds	r5, #1
 8009c64:	68e3      	ldr	r3, [r4, #12]
 8009c66:	9a03      	ldr	r2, [sp, #12]
 8009c68:	1a9b      	subs	r3, r3, r2
 8009c6a:	42ab      	cmp	r3, r5
 8009c6c:	dcf2      	bgt.n	8009c54 <_printf_i+0x1e8>
 8009c6e:	e7eb      	b.n	8009c48 <_printf_i+0x1dc>
 8009c70:	2500      	movs	r5, #0
 8009c72:	f104 0919 	add.w	r9, r4, #25
 8009c76:	e7f5      	b.n	8009c64 <_printf_i+0x1f8>
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d1ac      	bne.n	8009bd6 <_printf_i+0x16a>
 8009c7c:	7803      	ldrb	r3, [r0, #0]
 8009c7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009c82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009c86:	e76c      	b.n	8009b62 <_printf_i+0xf6>
 8009c88:	0800a37d 	.word	0x0800a37d
 8009c8c:	0800a38e 	.word	0x0800a38e

08009c90 <_sbrk_r>:
 8009c90:	b538      	push	{r3, r4, r5, lr}
 8009c92:	4c06      	ldr	r4, [pc, #24]	; (8009cac <_sbrk_r+0x1c>)
 8009c94:	2300      	movs	r3, #0
 8009c96:	4605      	mov	r5, r0
 8009c98:	4608      	mov	r0, r1
 8009c9a:	6023      	str	r3, [r4, #0]
 8009c9c:	f7f8 fabc 	bl	8002218 <_sbrk>
 8009ca0:	1c43      	adds	r3, r0, #1
 8009ca2:	d102      	bne.n	8009caa <_sbrk_r+0x1a>
 8009ca4:	6823      	ldr	r3, [r4, #0]
 8009ca6:	b103      	cbz	r3, 8009caa <_sbrk_r+0x1a>
 8009ca8:	602b      	str	r3, [r5, #0]
 8009caa:	bd38      	pop	{r3, r4, r5, pc}
 8009cac:	20001068 	.word	0x20001068

08009cb0 <__sread>:
 8009cb0:	b510      	push	{r4, lr}
 8009cb2:	460c      	mov	r4, r1
 8009cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cb8:	f000 f8e0 	bl	8009e7c <_read_r>
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	bfab      	itete	ge
 8009cc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009cc2:	89a3      	ldrhlt	r3, [r4, #12]
 8009cc4:	181b      	addge	r3, r3, r0
 8009cc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009cca:	bfac      	ite	ge
 8009ccc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009cce:	81a3      	strhlt	r3, [r4, #12]
 8009cd0:	bd10      	pop	{r4, pc}

08009cd2 <__swrite>:
 8009cd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009cd6:	461f      	mov	r7, r3
 8009cd8:	898b      	ldrh	r3, [r1, #12]
 8009cda:	05db      	lsls	r3, r3, #23
 8009cdc:	4605      	mov	r5, r0
 8009cde:	460c      	mov	r4, r1
 8009ce0:	4616      	mov	r6, r2
 8009ce2:	d505      	bpl.n	8009cf0 <__swrite+0x1e>
 8009ce4:	2302      	movs	r3, #2
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cec:	f000 f868 	bl	8009dc0 <_lseek_r>
 8009cf0:	89a3      	ldrh	r3, [r4, #12]
 8009cf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009cf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cfa:	81a3      	strh	r3, [r4, #12]
 8009cfc:	4632      	mov	r2, r6
 8009cfe:	463b      	mov	r3, r7
 8009d00:	4628      	mov	r0, r5
 8009d02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d06:	f000 b817 	b.w	8009d38 <_write_r>

08009d0a <__sseek>:
 8009d0a:	b510      	push	{r4, lr}
 8009d0c:	460c      	mov	r4, r1
 8009d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d12:	f000 f855 	bl	8009dc0 <_lseek_r>
 8009d16:	1c43      	adds	r3, r0, #1
 8009d18:	89a3      	ldrh	r3, [r4, #12]
 8009d1a:	bf15      	itete	ne
 8009d1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d26:	81a3      	strheq	r3, [r4, #12]
 8009d28:	bf18      	it	ne
 8009d2a:	81a3      	strhne	r3, [r4, #12]
 8009d2c:	bd10      	pop	{r4, pc}

08009d2e <__sclose>:
 8009d2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d32:	f000 b813 	b.w	8009d5c <_close_r>
	...

08009d38 <_write_r>:
 8009d38:	b538      	push	{r3, r4, r5, lr}
 8009d3a:	4c07      	ldr	r4, [pc, #28]	; (8009d58 <_write_r+0x20>)
 8009d3c:	4605      	mov	r5, r0
 8009d3e:	4608      	mov	r0, r1
 8009d40:	4611      	mov	r1, r2
 8009d42:	2200      	movs	r2, #0
 8009d44:	6022      	str	r2, [r4, #0]
 8009d46:	461a      	mov	r2, r3
 8009d48:	f7f7 feb1 	bl	8001aae <_write>
 8009d4c:	1c43      	adds	r3, r0, #1
 8009d4e:	d102      	bne.n	8009d56 <_write_r+0x1e>
 8009d50:	6823      	ldr	r3, [r4, #0]
 8009d52:	b103      	cbz	r3, 8009d56 <_write_r+0x1e>
 8009d54:	602b      	str	r3, [r5, #0]
 8009d56:	bd38      	pop	{r3, r4, r5, pc}
 8009d58:	20001068 	.word	0x20001068

08009d5c <_close_r>:
 8009d5c:	b538      	push	{r3, r4, r5, lr}
 8009d5e:	4c06      	ldr	r4, [pc, #24]	; (8009d78 <_close_r+0x1c>)
 8009d60:	2300      	movs	r3, #0
 8009d62:	4605      	mov	r5, r0
 8009d64:	4608      	mov	r0, r1
 8009d66:	6023      	str	r3, [r4, #0]
 8009d68:	f7f8 fa21 	bl	80021ae <_close>
 8009d6c:	1c43      	adds	r3, r0, #1
 8009d6e:	d102      	bne.n	8009d76 <_close_r+0x1a>
 8009d70:	6823      	ldr	r3, [r4, #0]
 8009d72:	b103      	cbz	r3, 8009d76 <_close_r+0x1a>
 8009d74:	602b      	str	r3, [r5, #0]
 8009d76:	bd38      	pop	{r3, r4, r5, pc}
 8009d78:	20001068 	.word	0x20001068

08009d7c <_fstat_r>:
 8009d7c:	b538      	push	{r3, r4, r5, lr}
 8009d7e:	4c07      	ldr	r4, [pc, #28]	; (8009d9c <_fstat_r+0x20>)
 8009d80:	2300      	movs	r3, #0
 8009d82:	4605      	mov	r5, r0
 8009d84:	4608      	mov	r0, r1
 8009d86:	4611      	mov	r1, r2
 8009d88:	6023      	str	r3, [r4, #0]
 8009d8a:	f7f8 fa1c 	bl	80021c6 <_fstat>
 8009d8e:	1c43      	adds	r3, r0, #1
 8009d90:	d102      	bne.n	8009d98 <_fstat_r+0x1c>
 8009d92:	6823      	ldr	r3, [r4, #0]
 8009d94:	b103      	cbz	r3, 8009d98 <_fstat_r+0x1c>
 8009d96:	602b      	str	r3, [r5, #0]
 8009d98:	bd38      	pop	{r3, r4, r5, pc}
 8009d9a:	bf00      	nop
 8009d9c:	20001068 	.word	0x20001068

08009da0 <_isatty_r>:
 8009da0:	b538      	push	{r3, r4, r5, lr}
 8009da2:	4c06      	ldr	r4, [pc, #24]	; (8009dbc <_isatty_r+0x1c>)
 8009da4:	2300      	movs	r3, #0
 8009da6:	4605      	mov	r5, r0
 8009da8:	4608      	mov	r0, r1
 8009daa:	6023      	str	r3, [r4, #0]
 8009dac:	f7f8 fa1b 	bl	80021e6 <_isatty>
 8009db0:	1c43      	adds	r3, r0, #1
 8009db2:	d102      	bne.n	8009dba <_isatty_r+0x1a>
 8009db4:	6823      	ldr	r3, [r4, #0]
 8009db6:	b103      	cbz	r3, 8009dba <_isatty_r+0x1a>
 8009db8:	602b      	str	r3, [r5, #0]
 8009dba:	bd38      	pop	{r3, r4, r5, pc}
 8009dbc:	20001068 	.word	0x20001068

08009dc0 <_lseek_r>:
 8009dc0:	b538      	push	{r3, r4, r5, lr}
 8009dc2:	4c07      	ldr	r4, [pc, #28]	; (8009de0 <_lseek_r+0x20>)
 8009dc4:	4605      	mov	r5, r0
 8009dc6:	4608      	mov	r0, r1
 8009dc8:	4611      	mov	r1, r2
 8009dca:	2200      	movs	r2, #0
 8009dcc:	6022      	str	r2, [r4, #0]
 8009dce:	461a      	mov	r2, r3
 8009dd0:	f7f8 fa14 	bl	80021fc <_lseek>
 8009dd4:	1c43      	adds	r3, r0, #1
 8009dd6:	d102      	bne.n	8009dde <_lseek_r+0x1e>
 8009dd8:	6823      	ldr	r3, [r4, #0]
 8009dda:	b103      	cbz	r3, 8009dde <_lseek_r+0x1e>
 8009ddc:	602b      	str	r3, [r5, #0]
 8009dde:	bd38      	pop	{r3, r4, r5, pc}
 8009de0:	20001068 	.word	0x20001068

08009de4 <memcpy>:
 8009de4:	b510      	push	{r4, lr}
 8009de6:	1e43      	subs	r3, r0, #1
 8009de8:	440a      	add	r2, r1
 8009dea:	4291      	cmp	r1, r2
 8009dec:	d100      	bne.n	8009df0 <memcpy+0xc>
 8009dee:	bd10      	pop	{r4, pc}
 8009df0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009df4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009df8:	e7f7      	b.n	8009dea <memcpy+0x6>

08009dfa <memmove>:
 8009dfa:	4288      	cmp	r0, r1
 8009dfc:	b510      	push	{r4, lr}
 8009dfe:	eb01 0302 	add.w	r3, r1, r2
 8009e02:	d807      	bhi.n	8009e14 <memmove+0x1a>
 8009e04:	1e42      	subs	r2, r0, #1
 8009e06:	4299      	cmp	r1, r3
 8009e08:	d00a      	beq.n	8009e20 <memmove+0x26>
 8009e0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009e0e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009e12:	e7f8      	b.n	8009e06 <memmove+0xc>
 8009e14:	4283      	cmp	r3, r0
 8009e16:	d9f5      	bls.n	8009e04 <memmove+0xa>
 8009e18:	1881      	adds	r1, r0, r2
 8009e1a:	1ad2      	subs	r2, r2, r3
 8009e1c:	42d3      	cmn	r3, r2
 8009e1e:	d100      	bne.n	8009e22 <memmove+0x28>
 8009e20:	bd10      	pop	{r4, pc}
 8009e22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009e26:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009e2a:	e7f7      	b.n	8009e1c <memmove+0x22>

08009e2c <__malloc_lock>:
 8009e2c:	4770      	bx	lr

08009e2e <__malloc_unlock>:
 8009e2e:	4770      	bx	lr

08009e30 <_realloc_r>:
 8009e30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e32:	4607      	mov	r7, r0
 8009e34:	4614      	mov	r4, r2
 8009e36:	460e      	mov	r6, r1
 8009e38:	b921      	cbnz	r1, 8009e44 <_realloc_r+0x14>
 8009e3a:	4611      	mov	r1, r2
 8009e3c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009e40:	f7ff bbf2 	b.w	8009628 <_malloc_r>
 8009e44:	b922      	cbnz	r2, 8009e50 <_realloc_r+0x20>
 8009e46:	f7ff fba1 	bl	800958c <_free_r>
 8009e4a:	4625      	mov	r5, r4
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e50:	f000 f826 	bl	8009ea0 <_malloc_usable_size_r>
 8009e54:	42a0      	cmp	r0, r4
 8009e56:	d20f      	bcs.n	8009e78 <_realloc_r+0x48>
 8009e58:	4621      	mov	r1, r4
 8009e5a:	4638      	mov	r0, r7
 8009e5c:	f7ff fbe4 	bl	8009628 <_malloc_r>
 8009e60:	4605      	mov	r5, r0
 8009e62:	2800      	cmp	r0, #0
 8009e64:	d0f2      	beq.n	8009e4c <_realloc_r+0x1c>
 8009e66:	4631      	mov	r1, r6
 8009e68:	4622      	mov	r2, r4
 8009e6a:	f7ff ffbb 	bl	8009de4 <memcpy>
 8009e6e:	4631      	mov	r1, r6
 8009e70:	4638      	mov	r0, r7
 8009e72:	f7ff fb8b 	bl	800958c <_free_r>
 8009e76:	e7e9      	b.n	8009e4c <_realloc_r+0x1c>
 8009e78:	4635      	mov	r5, r6
 8009e7a:	e7e7      	b.n	8009e4c <_realloc_r+0x1c>

08009e7c <_read_r>:
 8009e7c:	b538      	push	{r3, r4, r5, lr}
 8009e7e:	4c07      	ldr	r4, [pc, #28]	; (8009e9c <_read_r+0x20>)
 8009e80:	4605      	mov	r5, r0
 8009e82:	4608      	mov	r0, r1
 8009e84:	4611      	mov	r1, r2
 8009e86:	2200      	movs	r2, #0
 8009e88:	6022      	str	r2, [r4, #0]
 8009e8a:	461a      	mov	r2, r3
 8009e8c:	f7f8 f972 	bl	8002174 <_read>
 8009e90:	1c43      	adds	r3, r0, #1
 8009e92:	d102      	bne.n	8009e9a <_read_r+0x1e>
 8009e94:	6823      	ldr	r3, [r4, #0]
 8009e96:	b103      	cbz	r3, 8009e9a <_read_r+0x1e>
 8009e98:	602b      	str	r3, [r5, #0]
 8009e9a:	bd38      	pop	{r3, r4, r5, pc}
 8009e9c:	20001068 	.word	0x20001068

08009ea0 <_malloc_usable_size_r>:
 8009ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009ea4:	1f18      	subs	r0, r3, #4
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	bfbc      	itt	lt
 8009eaa:	580b      	ldrlt	r3, [r1, r0]
 8009eac:	18c0      	addlt	r0, r0, r3
 8009eae:	4770      	bx	lr

08009eb0 <_init>:
 8009eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009eb2:	bf00      	nop
 8009eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009eb6:	bc08      	pop	{r3}
 8009eb8:	469e      	mov	lr, r3
 8009eba:	4770      	bx	lr

08009ebc <_fini>:
 8009ebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009ebe:	bf00      	nop
 8009ec0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ec2:	bc08      	pop	{r3}
 8009ec4:	469e      	mov	lr, r3
 8009ec6:	4770      	bx	lr
